{"hash": "0a9b9335184deee858f4a5909bff503c2ba392e5", "message": "Remove pre JoinProcessor and fix possible concurrent issue in window join\n\nJoinProcessors share the same lock of Query as well as Schedulers", "file_num_lines": 137, "diff_parsed": {"added": [[30, "import org.wso2.siddhi.core.util.lock.LockWrapper;"], [42, "    private LockWrapper joinLockWrapper;"], [50, "    public JoinProcessor(boolean leftJoinProcessor, boolean outerJoinProcessor, int matchingStreamIndex) {"], [73, "                joinLockWrapper.lock();"], [106, "                    joinLockWrapper.unlock();"], [136, "    public void setJoinLock(LockWrapper joinLockWrapper) {"], [137, "        this.joinLockWrapper = joinLockWrapper;"], [165, "        JoinProcessor joinProcessor = new JoinProcessor(leftJoinProcessor, outerJoinProcessor, matchingStreamIndex);"]], "deleted": [[39, "    private boolean preJoinProcessor = false;"], [42, "    private Lock joinLock;"], [50, "    public JoinProcessor(boolean leftJoinProcessor, boolean preJoinProcessor, boolean outerJoinProcessor, int matchingStreamIndex) {"], [52, "        this.preJoinProcessor = preJoinProcessor;"], [74, "                joinLock.lock();"], [107, "                    joinLock.unlock();"], [114, "        } else {"], [115, "            if (preJoinProcessor) {"], [116, "                joinLock.lock();"], [117, "                try {"], [118, "                    nextProcessor.process(complexEventChunk);"], [119, "                } finally {"], [120, "                    joinLock.unlock();"], [121, "                }"], [122, "            }"], [146, "    public void setJoinLock(Lock joinLock) {"], [147, "        this.joinLock = joinLock;"], [175, "        JoinProcessor joinProcessor = new JoinProcessor(leftJoinProcessor, preJoinProcessor, outerJoinProcessor, matchingStreamIndex);"]]}, "num_lines_added": 8, "num_lines_removed": 18}