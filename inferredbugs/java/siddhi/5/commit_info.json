{"hash": "f37410118c73cc1527956e26b0adf662f35e06cd", "message": "Adding UpdateTable support and test cases.", "file_num_lines": 108, "diff_parsed": {"added": [[59, "        } else if (outStream instanceof DeleteStream || outStream instanceof UpdateStream) {"], [62, ""], [63, "                TableDefinition eventTableDefinition = eventTable.getTableDefinition();"], [64, "                for (Attribute attribute : outputStreamDefinition.getAttributeList()) {"], [65, "                    if (!eventTableDefinition.getAttributeList().contains(attribute)) {"], [66, "                        throw new ExecutionPlanCreationException(\"Attribute \" + attribute + \" does not exist on Event Table \" + eventTableDefinition);"], [67, "                    }"], [68, "                }"], [69, ""], [72, "                TableDefinition matchingTableDefinition = TableDefinition.id(\"\");"], [75, "                    matchingTableDefinition.attribute(attribute.getName(), attribute.getType());"], [76, "                }"], [77, "                matchingMetaStreamEvent.setInputDefinition(matchingTableDefinition);"], [78, "                if (outStream instanceof DeleteStream) {"], [79, "                    Finder finder = eventTable.constructFinder(((DeleteStream) outStream).getOnDeleteExpression(), matchingMetaStreamEvent, executionPlanContext, null, 0);"], [80, "                    return new DeleteTableCallback(eventTable, finder);"], [81, "                } else {"], [82, "                    Finder finder = eventTable.constructFinder(((UpdateStream) outStream).getOnUpdateExpression(), matchingMetaStreamEvent, executionPlanContext, null, 0);"], [83, "                    return new UpdateTableCallback(eventTable, finder, matchingTableDefinition);"]], "deleted": [[59, "        } else if (outStream instanceof DeleteStream) {"], [62, "                DefinitionParserHelper.validateOutputStream(outputStreamDefinition, eventTable.getTableDefinition());"], [65, "                TableDefinition tableDefinition = TableDefinition.id(\"\");"], [68, "                    tableDefinition.attribute(attribute.getName(), attribute.getType());"], [70, "                matchingMetaStreamEvent.setInputDefinition(tableDefinition);"], [71, "                Finder finder = eventTable.constructFinder(((DeleteStream) outStream).getOnDeleteExpression(), matchingMetaStreamEvent, executionPlanContext, null, 0);"], [72, "                return new DeleteTableCallback(eventTable, finder);"], [73, "            } else {"], [74, "                throw new DefinitionNotExistException(\"Event table with id :\" + id + \" does not exist\");"], [75, "            }"], [76, "        } else if (outStream instanceof UpdateStream) {"], [77, "            EventTable eventTable = executionPlanContext.getEventTableMap().get(id);"], [78, "            if (eventTable != null) {"], [79, "                DefinitionParserHelper.validateOutputStream(outputStreamDefinition, eventTable.getTableDefinition());"], [80, "                MetaStateEvent metaStateEvent = createMetaStateEvent(outputStreamDefinition, eventTable);"], [81, "                Finder finder = eventTable.constructFinder(((UpdateStream) outStream).getOnUpdateExpression(), metaStateEvent, executionPlanContext, null, 0);"], [82, "                return new UpdateTableCallback(eventTable, finder, outputStreamDefinition);"]]}, "num_lines_added": 19, "num_lines_removed": 17}