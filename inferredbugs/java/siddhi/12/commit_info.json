{"hash": "8d4d8f04a4599708090cda5d0a351c64fb712026", "message": "Changes to metrics integration", "file_num_lines": 102, "diff_parsed": {"added": [[2, " * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved."], [31, "import org.wso2.siddhi.core.util.SiddhiConstants;"], [51, "     * Parse a query and return corresponding QueryRuntime."], [53, "     * @param query                query to be parsed."], [54, "     * @param executionPlanContext associated Execution Plan context."], [55, "     * @param streamDefinitionMap  map containing user given stream definitions."], [56, "     * @param tableDefinitionMap   map containing table definitions."], [57, "     * @param eventTableMap        map containing event tables."], [58, "     * @return queryRuntime."], [70, "            if (executionPlanContext.getStatisticsManager() != null) {"], [72, "                    String metricName ="], [73, "                            executionPlanContext.getSiddhiContext().getStatisticsConfiguration().getMatricPrefix() +"], [74, "                                    SiddhiConstants.METRIC_DELIMITER + SiddhiConstants.METRIC_INFIX_EXECUTION_PLANS +"], [75, "                                    SiddhiConstants.METRIC_DELIMITER + executionPlanContext.getName() +"], [76, "                                    SiddhiConstants.METRIC_DELIMITER + SiddhiConstants.METRIC_INFIX_SIDDHI +"], [77, "                                    SiddhiConstants.METRIC_DELIMITER + SiddhiConstants.METRIC_INFIX_QUERIES +"], [78, "                                    SiddhiConstants.METRIC_DELIMITER + element.getValue();"], [100, "                    query.getOutputRate(), query.getSelector().getGroupByList().size() != 0, isWindow,"], [101, "                    executionPlanContext.getScheduledExecutorService());"], [102, "            if (outputRateLimiter != null) {"], [103, "                outputRateLimiter.init(executionPlanContext, latencyTracker);"], [104, "            }"], [114, "            queryRuntime = new QueryRuntime(query, executionPlanContext, streamRuntime, selector, outputRateLimiter,"], [115, "                    outputCallback, streamRuntime.getMetaComplexEvent());"], [118, "                ((WrappedSnapshotOutputRateLimiter) outputRateLimiter)"], [119, "                        .init(streamRuntime.getMetaComplexEvent().getOutputStreamDefinition().getAttributeList().size(),"], [120, "                                selector.getAttributeProcessorList(), streamRuntime.getMetaComplexEvent());"]], "deleted": [[2, " * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved."], [33, "import org.wso2.siddhi.core.util.statistics.metrics.SiddhiLatencyMetric;"], [51, "     * Parse a query and return corresponding QueryRuntime"], [53, "     * @param query                query to be parsed"], [54, "     * @param executionPlanContext associated Execution Plan context"], [55, "     * @param streamDefinitionMap  map containing user given stream definitions"], [56, "     * @param tableDefinitionMap   map containing table definitions"], [57, "     * @param eventTableMap        map containing event tables"], [58, "     * @return queryRuntime"], [70, "            if (executionPlanContext.getStatisticsManager()!=null) {"], [72, "                    String metricName = executionPlanContext.getSiddhiContext().getStatisticsConfiguration().getMatricPrefix() + \".executionplan.\" + executionPlanContext.getName() + \".\" + element.getValue();"], [81, ""], [84, ""], [86, ""], [97, "                    query.getOutputRate(), query.getSelector().getGroupByList().size() != 0, isWindow, executionPlanContext.getScheduledExecutorService());"], [98, "            outputRateLimiter.init(executionPlanContext, latencyTracker);"], [103, ""], [107, ""], [110, "            queryRuntime = new QueryRuntime(query, executionPlanContext, streamRuntime, selector, outputRateLimiter, outputCallback, streamRuntime.getMetaComplexEvent());"], [113, "                ((WrappedSnapshotOutputRateLimiter) outputRateLimiter).init(streamRuntime.getMetaComplexEvent().getOutputStreamDefinition().getAttributeList().size(), selector.getAttributeProcessorList(), streamRuntime.getMetaComplexEvent());"], [115, ""], [129, ""], [131, ""], [133, ""], [134, ""]]}, "num_lines_added": 27, "num_lines_removed": 25}