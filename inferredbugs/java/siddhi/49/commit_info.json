{"hash": "3a11e8a7ce183b2919264271d0dffaaf3bf49eb2", "message": "Initial version of the single node High availability support for Siddhi with Kafka transport.", "file_num_lines": 124, "diff_parsed": {"added": [[30, "import java.util.concurrent.locks.Lock;"], [31, "import java.util.concurrent.locks.ReentrantLock;"], [40, "    private Map<String, Map<Integer, Long>> topicOffsetMap = new HashMap<>();"], [41, "    private volatile boolean paused;"], [42, "    private volatile boolean inactive;"], [43, "    // KafkaConsumer is not thread safe, hence we need a lock"], [44, "    private final Lock consumerLock = new ReentrantLock();"], [48, "                               Properties props, Map<String, Map<Integer, Long>> topicOffsetMap) {"], [65, "            restore(topicOffsetMap);"], [82, "        restore(topicOffsetMap);"], [86, "    public void restore(Map<String, Map<Integer, Long>> topicOffsetMap) {"], [87, "        final Lock consumerLock = this.consumerLock;"], [88, "        if (null != topicOffsetMap) {"], [89, "            for (String topic : topics) {"], [90, "                Map<Integer, Long> offsetMap = topicOffsetMap.get(topic);"], [91, "                if (null != offsetMap) {"], [92, "                    for (Map.Entry<Integer, Long> entry : offsetMap.entrySet()) {"], [93, "                        TopicPartition partition = new TopicPartition(topic, entry.getKey());"], [94, "                        if (partitionsList.contains(partition)) {"], [95, "                            log.info(\"Seeking partition: \" + partition + \" for topic: \" + topic);"], [96, "                            try {"], [97, "                                consumerLock.lock();"], [98, "                                consumer.seek(partition, entry.getValue() + 1);"], [99, "                            } finally {"], [100, "                                consumerLock.unlock();"], [101, "                            }"], [102, "                        }"], [103, "                    }"], [104, "                }"], [105, "            }"], [106, "        }"], [107, "    }"], [108, ""], [111, "        final Lock consumerLock = this.consumerLock;"], [116, "                ConsumerRecords<byte[], byte[]> records;"], [117, "                try {"], [118, "                    consumerLock.lock();"], [119, "                    records = consumer.poll(100);"], [120, "                } finally {"], [121, "                    consumerLock.unlock();"], [122, "                }"], [126, "                        log.debug(\"Event received in Kafka Event Adaptor: \" + event + \", offSet: \" + record.offset()"], [127, "                                + \", key: \" + record.key() + \", topic: \" + record.topic() + \", partition: \" + record"], [134, "                    consumerLock.lock();"], [140, "                } finally {"], [141, "                    consumerLock.unlock();"], [145, "        consumerLock.lock();"], [147, "        consumerLock.unlock();"], [154, "    public Map<String, Map<Integer, Long>> getTopicOffsetMap() {"]], "deleted": [[38, "    private HashMap <String, HashMap<Integer, Long>> topicOffsetMap = new HashMap<>();"], [39, "    private boolean paused;"], [40, "    private boolean inactive;"], [44, "                               Properties props, HashMap<String, HashMap<Integer, Long>> topicOffsetMap) {"], [61, "            if(null != topicOffsetMap) {"], [62, "                for (String topic : topics) {"], [63, "                    HashMap<Integer, Long> offsetMap = topicOffsetMap.get(topic);"], [64, "                    if(null != offsetMap) {"], [65, "                        for (Map.Entry<Integer, Long> entry : offsetMap.entrySet()) {"], [66, "                            TopicPartition partition = new TopicPartition(topic, entry.getKey());"], [67, "                            log.info(\"Seeking partition: \" + partition + \" for topic: \" + topic);"], [68, "                            consumer.seek(partition, entry.getValue());"], [69, "                        }"], [70, "                    }"], [71, "                }"], [72, "            }"], [98, "                ConsumerRecords<byte[], byte[]> records = consumer.poll(200);"], [102, "                        log.debug(\"Event received in Kafka Event Adaptor: \" + event + \", offSet: \" + record.offset() +"], [103, "                                \", key: \" + record.key() + \", topic: \" + record.topic() + \", partition: \" + record"], [117, "            try {"], [118, "                Thread.sleep(1);"], [119, "            } catch (InterruptedException ignore) {"], [120, "            }"], [129, "    public HashMap <String, HashMap<Integer, Long>> getTopicOffsetMap() {"]]}, "num_lines_added": 49, "num_lines_removed": 24}