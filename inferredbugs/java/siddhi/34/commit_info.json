{"hash": "8e74c97cfc40133083563477acda1af7456216fe", "message": "Adding Pre JoinProcessor back to window join", "file_num_lines": 147, "diff_parsed": {"added": [[37, "    private boolean trigger;"], [38, "    private boolean leftJoinProcessor = false;"], [39, "    private boolean preJoinProcessor = false;"], [40, "    private boolean outerJoinProcessor = false;"], [41, "    private int matchingStreamIndex;"], [42, "    private Lock joinLock;"], [45, "    private Finder finder;"], [46, "    private FindableProcessor findableProcessor;"], [47, "    private Processor nextProcessor;"], [48, "    private QuerySelector selector;"], [50, "    public JoinProcessor(boolean leftJoinProcessor, boolean preJoinProcessor, boolean outerJoinProcessor, int matchingStreamIndex) {"], [52, "        this.preJoinProcessor = preJoinProcessor;"], [79, "                    } else if (eventType == ComplexEvent.Type.RESET) {"], [81, "                            returnEventChunk.add(joinEventBuilder(null, streamEvent, eventType));"], [83, "                            returnEventChunk.add(joinEventBuilder(streamEvent, null, eventType));"], [86, "                        joinStateEvent.setEvent(matchingStreamIndex, streamEvent);"], [87, "                        StreamEvent foundStreamEvent = findableProcessor.find(joinStateEvent, finder);"], [88, "                        joinStateEvent.setEvent(matchingStreamIndex, null);"], [89, "                        if (foundStreamEvent == null) {"], [90, "                            if (outerJoinProcessor && !leftJoinProcessor) {"], [92, "                            } else if (outerJoinProcessor && leftJoinProcessor) {"], [95, "                        } else {"], [96, "                            while (foundStreamEvent != null) {"], [97, "                                if (!leftJoinProcessor) {"], [98, "                                    returnEventChunk.add(joinEventBuilder(foundStreamEvent, streamEvent, eventType));"], [99, "                                } else {"], [100, "                                    returnEventChunk.add(joinEventBuilder(streamEvent, foundStreamEvent, eventType));"], [101, "                                }"], [102, "                                foundStreamEvent = foundStreamEvent.getNext();"], [103, "                            }"], [113, "            }"], [114, "        } else {"], [115, "            if (preJoinProcessor) {"], [116, "                joinLock.lock();"], [117, "                try {"], [118, "                    nextProcessor.process(complexEventChunk);"], [119, "                } finally {"], [120, "                    joinLock.unlock();"], [121, "                }"], [175, "        JoinProcessor joinProcessor = new JoinProcessor(leftJoinProcessor, preJoinProcessor, outerJoinProcessor, matchingStreamIndex);"]], "deleted": [[37, "    protected boolean trigger;"], [38, "    protected boolean leftJoinProcessor = false;"], [39, "    protected boolean outerJoinProcessor = false;"], [40, "    protected int matchingStreamIndex;"], [41, "    protected Lock joinLock;"], [44, "    protected Finder finder;"], [45, "    protected FindableProcessor findableProcessor;"], [46, "    protected Processor nextProcessor;"], [47, "    protected QuerySelector selector;"], [49, "    public JoinProcessor(boolean leftJoinProcessor, boolean outerJoinProcessor, int matchingStreamIndex) {"], [72, ""], [73, "                if (streamEvent.getType() == ComplexEvent.Type.RESET) {"], [74, "                    if (outerJoinProcessor && !leftJoinProcessor) {"], [75, "                        returnEventChunk.add(joinEventBuilder(null, streamEvent, streamEvent.getType()));"], [76, "                    } else if (outerJoinProcessor && leftJoinProcessor) {"], [77, "                        returnEventChunk.add(joinEventBuilder(streamEvent, null, streamEvent.getType()));"], [78, "                    }"], [79, "                    selector.process(returnEventChunk);"], [80, "                    returnEventChunk.clear();"], [81, "                    continue;"], [82, "                }"], [88, "                    }"], [89, "                    joinStateEvent.setEvent(matchingStreamIndex, streamEvent);"], [90, "                    StreamEvent foundStreamEvent = findableProcessor.find(joinStateEvent, finder);"], [91, "                    joinStateEvent.setEvent(matchingStreamIndex, null);"], [92, "                    if (foundStreamEvent == null) {"], [94, "                            returnEventChunk.add(joinEventBuilder(foundStreamEvent, streamEvent, eventType));"], [96, "                            returnEventChunk.add(joinEventBuilder(streamEvent, foundStreamEvent, eventType));"], [99, "                        while (foundStreamEvent != null) {"], [100, "                            if (!leftJoinProcessor) {"], [102, "                            } else {"], [105, "                            foundStreamEvent = foundStreamEvent.getNext();"], [115, ""], [169, "        JoinProcessor joinProcessor = new JoinProcessor(leftJoinProcessor, outerJoinProcessor, matchingStreamIndex);"]]}, "num_lines_added": 40, "num_lines_removed": 34}