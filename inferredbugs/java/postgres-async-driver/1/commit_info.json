{"hash": "5e68b387318ca8504eec1fd7d2d2968b64b44389", "message": "Fix flaky test pooling test", "file_num_lines": 45, "diff_parsed": {"added": [[17, "import com.github.pgasync.ResultSet;"], [20, "import org.junit.Rule;"], [23, "import java.util.List;"], [24, "import java.util.concurrent.Callable;"], [25, "import java.util.concurrent.ExecutorService;"], [26, "import java.util.concurrent.Executors;"], [27, "import java.util.concurrent.Future;"], [28, "import java.util.function.IntFunction;"], [29, "import java.util.stream.Collectors;"], [30, "import java.util.stream.IntStream;"], [32, "import static java.util.Collections.singletonList;"], [33, "import static java.util.stream.Collectors.toList;"], [43, "    @Rule"], [44, "    public final DatabaseRule dbr = new DatabaseRule();"], [48, "        dbr.query(\"DROP TABLE IF EXISTS CP_TEST; CREATE TABLE CP_TEST (ID VARCHAR(255) PRIMARY KEY)\");"], [53, "        dbr.query(\"DROP TABLE CP_TEST\");"], [58, "        final int count = 1000;"], [59, "        IntFunction<Callable<ResultSet>> insert = value -> () -> dbr.query(\"INSERT INTO CP_TEST VALUES($1)\", singletonList(value));"], [60, "        List<Callable<ResultSet>> tasks = IntStream.range(0, count).mapToObj(insert).collect(toList());"], [62, "        ExecutorService executor = Executors.newFixedThreadPool(20);"], [63, "        executor.invokeAll(tasks).stream().map(this::await);"], [64, ""], [65, "        assertEquals(count, dbr.query(\"SELECT COUNT(*) FROM CP_TEST\").row(0).getLong(0).longValue());"], [66, "    }"], [68, "    <T> T await(Future<T> future) {"], [69, "        try {"], [70, "            return future.get();"], [71, "        } catch (Exception e) {"], [72, "            throw new RuntimeException(e);"], [73, "        }"]], "deleted": [[17, "import com.github.pgasync.ConnectionPool;"], [22, "import java.util.LinkedList;"], [23, "import java.util.Queue;"], [24, "import java.util.UUID;"], [25, "import java.util.concurrent.CountDownLatch;"], [26, "import java.util.concurrent.TimeUnit;"], [27, "import java.util.concurrent.atomic.AtomicInteger;"], [28, "import java.util.function.Consumer;"], [30, "import static java.util.Arrays.asList;"], [32, "import static org.junit.Assert.assertTrue;"], [41, "    final Consumer<Throwable> err = t -> { throw new AssertionError(\"failed\", t); };"], [42, "    final ConnectionPool pool = DatabaseRule.createPool(10);"], [46, "        ResultHolder result = new ResultHolder();"], [47, "        pool.query(\"DROP TABLE IF EXISTS CP_TEST; CREATE TABLE CP_TEST (ID VARCHAR(255) PRIMARY KEY)\","], [48, "                result, result.errorHandler());"], [49, "        result.result();"], [54, "        ResultHolder result = new ResultHolder();"], [55, "        pool.query(\"DROP TABLE CP_TEST\", result, result.errorHandler());"], [56, "        result.result();"], [57, "        pool.close();"], [62, ""], [63, "        final AtomicInteger count = new AtomicInteger();"], [64, "        final CountDownLatch latch = new CountDownLatch(1000);"], [66, "        for(int i = 0; i < 20; i++) {"], [67, "            new Thread(new Runnable() {"], [68, "                @Override"], [69, "                public void run() {"], [70, "                    final Queue<Runnable> queries = new LinkedList<>();"], [71, "                    for(int j = 0; j < 50; j++) {"], [72, "                        queries.add(() -> pool.query(\"INSERT INTO CP_TEST VALUES($1)\", asList(UUID.randomUUID()), result -> {"], [73, "                            latch.countDown();"], [74, "                            count.incrementAndGet();"], [75, "                            if(!queries.isEmpty()) {"], [76, "                                queries.poll().run();"], [77, "                            }"], [78, "                        }, err));"], [79, "                    }"], [80, "                    queries.poll().run();"], [81, "                }"], [82, "            }).start();"], [83, "        }"], [84, "        assertTrue(latch.await(5L, TimeUnit.SECONDS));"], [85, "        assertEquals(1000, count.get());"], [87, "        ResultHolder result = new ResultHolder();"], [88, "        pool.query(\"SELECT COUNT(*) FROM CP_TEST\", result, result.errorHandler());"], [89, "        assertEquals(count.get(), result.result().row(0).getLong(0).longValue());"]]}, "num_lines_added": 30, "num_lines_removed": 46}