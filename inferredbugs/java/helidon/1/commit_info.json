{"hash": "ed21c6969fe084209a504cfcc79056f2bca6f4c0", "message": "Fixed issue with HALF_OPEN state logic and ensured Hystrix internal state matches Helidon's when a circuit breaker goes into OPEN state. Some related changes to tests.\n\nSigned-off-by: Santiago Pericas-Geertsen <Santiago.PericasGeertsen@oracle.com>", "file_num_lines": 249, "diff_parsed": {"added": [[42, "    private static final String HELIDON_MICROPROFILE_FAULTTOLERANCE = \"io.helidon.microprofile.faulttolerance\";"], [43, ""], [68, "            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(HELIDON_MICROPROFILE_FAULTTOLERANCE))"], [103, "        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(HELIDON_MICROPROFILE_FAULTTOLERANCE))"], [230, "        // Ensure our internal state is consistent with Hystrix"], [231, "        if (introspector.hasCircuitBreaker()) {"], [232, "            breakerHelper.ensureConsistentState();"], [233, "            LOGGER.info(\"Circuit breaker for \" + getCommandKey() + \" in state \" + breakerHelper.getState());"], [234, "        }"], [235, ""], [284, "                        // If failed and in HALF_OPEN_MP, we need to force breaker to open"], [300, "                    // Last called was successful"], [301, "                    breakerHelper.incSuccessCount();"], [302, ""], [308, "                        breakerHelper.resetCommandData();"]], "deleted": [[66, "            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"io.j4c.faulttolerance\"))"], [101, "        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"io.j4c.faulttolerance\"))"], [276, "                        // If failed and in HALF_OPEN_MP, we need to force braker to open"], [295, "                        breakerHelper.incSuccessCount();"]]}, "num_lines_added": 15, "num_lines_removed": 4}