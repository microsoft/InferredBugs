{"hash": "44b10c16783b1c267ca88fdb9be53c8ab63b849c", "message": "MP now returns the original instance of Helidon config. (#941)\n\n* MP now returns the original instance of Helidon config.\r\n\r\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>\r\n\r\n* Helidon config in MP now contains MP config sources as well.\r\nAlso fixed URL config source to handle any URL, not just HTTP.\r\n\r\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>\r\n\r\n* Correct disconnect in dataStamp\r\n\r\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "file_num_lines": 145, "diff_parsed": {"added": [[24, "import java.net.URLConnection;"], [25, "import java.nio.charset.StandardCharsets;"], [95, "        // assumption about HTTP URL connection is wrong here"], [97, "            URLConnection urlConnection = url.openConnection();"], [99, "            if (urlConnection instanceof HttpURLConnection) {"], [100, "                return httpContent((HttpURLConnection) urlConnection);"], [102, "                return genericContent(urlConnection);"], [111, "    private ConfigParser.Content<Instant> genericContent(URLConnection urlConnection) throws IOException {"], [112, "        final String mediaType = mediaType(null);"], [113, "        Reader reader = new InputStreamReader(urlConnection.getInputStream(),"], [114, "                                              StandardCharsets.UTF_8);"], [115, ""], [116, "        return ConfigParser.Content.create(reader, mediaType, Optional.of(Instant.now()));"], [117, "    }"], [118, ""], [119, "    private ConfigParser.Content<Instant> httpContent(HttpURLConnection connection) throws IOException {"], [120, "        connection.setRequestMethod(GET_METHOD);"], [121, ""], [122, "        final String mediaType = mediaType(connection.getContentType());"], [123, "        final Optional<Instant> timestamp;"], [124, "        if (connection.getLastModified() != 0) {"], [125, "            timestamp = Optional.of(Instant.ofEpochMilli(connection.getLastModified()));"], [126, "        } else {"], [127, "            timestamp = Optional.of(Instant.now());"], [128, "            LOGGER.fine(\"Missing GET '\" + url + \"' response header 'Last-Modified'. Used current time '\""], [129, "                                + timestamp + \"' as a content timestamp.\");"], [130, "        }"], [131, ""], [132, "        Reader reader = new InputStreamReader(connection.getInputStream(),"], [133, "                                              ConfigUtils.getContentCharset(connection.getContentEncoding()));"], [134, ""], [135, "        return ConfigParser.Content.create(reader, mediaType, timestamp);"], [136, "    }"], [137, ""], [165, "        // the URL may not be an HTTP URL"], [167, "            URLConnection urlConnection = url.openConnection();"], [168, "            if (urlConnection instanceof HttpURLConnection) {"], [169, "                HttpURLConnection connection = (HttpURLConnection) urlConnection;"], [170, "                try {"], [171, "                    connection.setRequestMethod(HEAD_METHOD);"], [172, ""], [173, "                    if (connection.getLastModified() != 0) {"], [174, "                        return Optional.of(Instant.ofEpochMilli(connection.getLastModified()));"], [175, "                    }"], [176, "                } finally {"], [177, "                    connection.disconnect();"], [178, "                }"], [183, ""]], "deleted": [[94, "            HttpURLConnection connection = (HttpURLConnection) url.openConnection();"], [95, "            connection.setRequestMethod(GET_METHOD);"], [97, "            final String mediaType = mediaType(connection.getContentType());"], [98, "            final Optional<Instant> timestamp;"], [99, "            if (connection.getLastModified() != 0) {"], [100, "                timestamp = Optional.of(Instant.ofEpochMilli(connection.getLastModified()));"], [102, "                timestamp = Optional.of(Instant.now());"], [103, "                LOGGER.fine(\"Missing GET '\" + url + \"' response header 'Last-Modified'. Used current time '\""], [104, "                                    + timestamp + \"' as a content timestamp.\");"], [106, ""], [107, "            Reader reader = new InputStreamReader(connection.getInputStream(),"], [108, "                                                  ConfigUtils.getContentCharset(connection.getContentEncoding()));"], [109, ""], [110, "            return ConfigParser.Content.create(reader, mediaType, timestamp);"], [146, "            HttpURLConnection connection = (HttpURLConnection) url.openConnection();"], [147, "            connection.setRequestMethod(HEAD_METHOD);"], [148, ""], [149, "            if (connection.getLastModified() != 0) {"], [150, "                return Optional.of(Instant.ofEpochMilli(connection.getLastModified()));"]]}, "num_lines_added": 48, "num_lines_removed": 19}