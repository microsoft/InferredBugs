{"hash": "af352543f98a285ced6bdb4ffe429feb94987dbe", "message": "new:\u6dfb\u52a0\u53ef\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u8f6c\u6362\u5668\u3001\u652f\u6301oracle\u548csqlserver\u7684\u8868\u5217\u6ce8\u91ca", "file_num_lines": 112, "diff_parsed": {"added": [[5, "import com.greedystar.generator.entity.Configuration;"], [10, "import java.util.HashMap;"], [56, "    public List<ColumnInfo> getMetaData(String tableName) throws Exception {"], [58, "        ResultSet keyResultSet = connection.getMetaData().getPrimaryKeys(null, getSchema(connection), tableName.toUpperCase());"], [64, "        ResultSet tableResultSet = connection.getMetaData().getTables(null, getSchema(connection), tableName.toUpperCase(), new String[]{\"TABLE\"});"], [71, "        ResultSet columnResultSet = connection.getMetaData().getColumns(null, getSchema(connection), tableName.toUpperCase(), \"%\");"], [79, "            ColumnInfo info = new ColumnInfo(columnResultSet.getString(\"COLUMN_NAME\"), columnResultSet.getString(\"TYPE_NAME\").toUpperCase(), columnResultSet.getString(\"REMARKS\"), tableRemarks, isPrimaryKey);"], [83, "        if (columnInfos.size() == 0) {"], [84, "            throw new Exception(\"Can not find column information from table:\" + tableName);"], [85, "        }"], [86, "        if (connection.getMetaData().getURL().contains(\"sqlserver\")) { // SQLServer\u9700\u8981\u5355\u72ec\u5904\u7406REMARKS"], [87, "            parseSqlServerColumnRemarks(tableName, columnInfos);"], [88, "        }"], [92, "    /**"], [93, "     * \u4e3b\u52a8\u67e5\u8be2SqlServer\u6307\u5b9a\u8868\u7684\u6ce8\u91ca"], [94, "     *"], [95, "     * @param tableName"], [96, "     * @return"], [97, "     * @throws SQLException"], [98, "     */"], [99, "    private String parseSqlServerTableRemarks(String tableName) throws SQLException {"], [100, "        String tableRemarks = null;"], [101, "        String sql = \"SELECT CAST(ISNULL(p.value, '') AS nvarchar(25)) AS REMARKS FROM sys.tables t LEFT JOIN sys.extended_properties p ON p.major_id=t.object_id AND p.minor_id=0 AND p.class=1 WHERE t.name = ?\";"], [102, "        PreparedStatement preparedStatement = connection.prepareStatement(sql);"], [103, "        preparedStatement.setString(1, tableName);"], [104, "        ResultSet resultSet = preparedStatement.executeQuery();"], [105, "        while (resultSet.next()) {"], [106, "            tableRemarks = resultSet.getString(\"REMARKS\");"], [107, "        }"], [108, "        preparedStatement.close();"], [109, "        return tableRemarks;"], [110, "    }"], [111, ""], [112, "    /**"], [113, "     * \u4e3b\u52a8\u67e5\u8be2SqlServer\u6307\u5b9a\u8868\u7684\u6570\u636e\u5217\u7684\u6ce8\u91ca"], [114, "     *"], [115, "     * @param tableName"], [116, "     * @return"], [117, "     * @throws SQLException"], [118, "     */"], [119, "    private void parseSqlServerColumnRemarks(String tableName, List<ColumnInfo> columnInfos) throws SQLException {"], [120, "        String tableRemarks = parseSqlServerTableRemarks(tableName);"], [121, "        HashMap<String, String> map = new HashMap<>();"], [122, "        String sql = \"SELECT c.name AS COLUMN_NAME, CAST(ISNULL(p.value, '') AS nvarchar(25)) AS REMARKS FROM sys.tables t INNER JOIN sys.columns c ON c.object_id = t.object_id LEFT JOIN sys.extended_properties p ON p.major_id = c.object_id AND p.minor_id = c.column_id WHERE t.name = ?\";"], [123, "        PreparedStatement preparedStatement = connection.prepareStatement(sql);"], [124, "        preparedStatement.setString(1, tableName);"], [125, "        ResultSet resultSet = preparedStatement.executeQuery();"], [126, "        while (resultSet.next()) {"], [127, "            map.put(resultSet.getString(\"COLUMN_NAME\"), resultSet.getString(\"REMARKS\"));"], [128, "        }"], [129, "        for (ColumnInfo columnInfo : columnInfos) {"], [130, "            columnInfo.setRemarks(map.get(columnInfo.getColumnName()));"], [131, "            columnInfo.setTableRemarks(tableRemarks);"], [132, "        }"], [133, "        preparedStatement.close();"], [134, "    }"], [135, ""], [146, "    public String getSchema(Connection connection) throws SQLException {"], [147, "        String schema;"], [148, "        if (connection.getMetaData().getURL().contains(\"sqlserver\")) {"], [149, "            schema = connection.getSchema();"], [150, "        } else {"], [151, "            schema = connection.getMetaData().getUserName();"], [152, "        }"], [153, "        return schema;"], [154, "    }"], [155, ""]], "deleted": [[54, "    public List<ColumnInfo> getMetaData(String tableName) throws SQLException {"], [56, "        ResultSet keyResultSet = connection.getMetaData().getPrimaryKeys(null, null, tableName);"], [62, "        ResultSet tableResultSet = connection.getMetaData().getTables(null, connection.getSchema(), tableName.toUpperCase(), new String[]{\"TABLE\"});"], [69, "        ResultSet columnResultSet = connection.getMetaData().getColumns(null, connection.getSchema(), tableName.toUpperCase(), \"%\");"], [77, "            ColumnInfo info = new ColumnInfo(columnResultSet.getString(\"COLUMN_NAME\"), columnResultSet.getString(\"TYPE_NAME\"), columnResultSet.getString(\"REMARKS\"), tableRemarks, isPrimaryKey);"]]}, "num_lines_added": 67, "num_lines_removed": 5}