{"hash": "4fbbee1e29b0088c9cf04efcd2ab013d5ccc8b21", "message": "DATASOLR-215 - Polishing.\n\nUpdated license headers and author information. Removed unsupported http verbs and allow altering default request method in SolrTemplate.\n\nOriginal Pull Request: #52", "file_num_lines": 574, "diff_parsed": {"added": [[2, " * Copyright 2012 - 2016 the original author or authors."], [91, " * @author Shiradwade Sateesh Krishna"], [102, "\tprivate final RequestMethod defaultRequestMethod;"], [128, "\tpublic SolrTemplate(SolrClient solrClient, String core, RequestMethod requestMethod) {"], [129, "\t\tthis(new HttpSolrClientFactory(solrClient, core), requestMethod);"], [130, "\t\tthis.solrCore = core;"], [131, ""], [132, "\t}"], [133, ""], [135, "\t\tthis(solrClientFactory, (SolrConverter) null);"], [136, "\t}"], [137, ""], [138, "\tpublic SolrTemplate(SolrClientFactory solrClientFactory, RequestMethod requestMethod) {"], [139, "\t\tthis(solrClientFactory, null, requestMethod);"], [143, "\t\tthis(solrClientFactory, solrConverter, RequestMethod.GET);"], [144, "\t}"], [145, ""], [146, "\t/**"], [147, "\t * @param solrClientFactory must not be {@literal null}."], [148, "\t * @param solrConverter must not be {@literal null}."], [149, "\t * @param defaultRequestMethod can be {@literal null}. Will be defaulted to {@link RequestMethod#GET}"], [150, "\t * @since 2.0"], [151, "\t */"], [152, "\tpublic SolrTemplate(SolrClientFactory solrClientFactory, SolrConverter solrConverter,"], [153, "\t\t\tRequestMethod defaultRequestMethod) {"], [154, ""], [159, "\t\tthis.defaultRequestMethod = defaultRequestMethod != null ? defaultRequestMethod : RequestMethod.GET;"], [188, "\t\treturn count(query, getDefaultRequestMethod());"], [189, "\t}"], [190, ""], [191, "\t@Override"], [192, "\tpublic long count(final SolrDataQuery query, final RequestMethod method) {"], [193, ""], [195, "\t\tAssert.notNull(method, \"Method must not be 'null'.\");"], [201, ""], [206, "\t\t\t\treturn solrClient.query(solrQuery, getSolrRequestMethod(method)).getResults().getNumFound();"], [313, "\t\treturn queryForObject(query, clazz, getDefaultRequestMethod());"], [314, "\t}"], [315, ""], [316, "\t@Override"], [317, "\tpublic <T> T queryForObject(Query query, Class<T> clazz, RequestMethod method) {"], [318, ""], [323, "\t\tQueryResponse response = query(query, clazz, method);"], [335, ""], [338, "\t\tresponse = query(namedObjectsQuery, clazz, requestMethod != null ? requestMethod : getDefaultRequestMethod());"], [346, ""], [350, "\t\treturn doQueryForPage(query, clazz, getDefaultRequestMethod());"], [353, "\t/*"], [354, "\t * (non-Javadoc)"], [355, "\t * @see org.springframework.data.solr.core.SolrOperations#queryForPage(org.springframework.data.solr.core.query.Query, java.lang.Class, org.springframework.data.solr.core.RequestMethod)"], [359, ""], [362, "\t\tAssert.notNull(method, \"Method class must not be 'null'.\");"], [369, "\t\treturn queryForGroupPage(query, clazz, RequestMethod.GET);"], [370, "\t}"], [371, ""], [372, "\t@Override"], [373, "\tpublic <T> GroupPage<T> queryForGroupPage(Query query, Class<T> clazz, RequestMethod method) {"], [374, ""], [377, "\t\tAssert.notNull(method, \"Method class must not be 'null'.\");"], [379, "\t\treturn doQueryForPage(query, clazz, method);"], [388, "\t\treturn queryForStatsPage(query, clazz, getDefaultRequestMethod());"], [389, "\t}"], [390, ""], [391, "\t@Override"], [392, "\tpublic <T> StatsPage<T> queryForStatsPage(Query query, Class<T> clazz, RequestMethod method) {"], [393, ""], [396, "\t\tAssert.notNull(method, \"Method class must not be 'null'.\");"], [398, "\t\treturn doQueryForPage(query, clazz, method);"], [403, "\t\treturn queryForFacetPage(query, clazz, getDefaultRequestMethod());"], [404, "\t}"], [405, ""], [406, "\t@Override"], [407, "\tpublic <T> FacetPage<T> queryForFacetPage(FacetQuery query, Class<T> clazz, RequestMethod method) {"], [408, ""], [413, "\t\tQueryResponse response = query(namedObjectsQuery, clazz, method);"], [428, "\t\treturn queryForHighlightPage(query, clazz, getDefaultRequestMethod());"], [429, "\t}"], [430, ""], [431, "\t@Override"], [432, "\tpublic <T> HighlightPage<T> queryForHighlightPage(HighlightQuery query, Class<T> clazz, RequestMethod method) {"], [433, ""], [438, "\t\tQueryResponse response = query(namedObjectsQuery, clazz, getDefaultRequestMethod());"], [469, "\t\treturn queryForTermsPage(query, getDefaultRequestMethod());"], [470, "\t}"], [471, ""], [472, "\t@Override"], [473, "\tpublic TermsPage queryForTermsPage(TermsQuery query, RequestMethod method) {"], [474, ""], [477, "\t\tQueryResponse response = query(query, null, method);"], [485, "\t\treturn query(query, clazz, defaultRequestMethod);"], [488, "\tfinal QueryResponse query(SolrDataQuery query, Class<?> clazz, RequestMethod requestMethod) {"], [489, ""], [491, "\t\tAssert.notNull(requestMethod, \"RequestMethod must not be 'null'\");"], [504, "\t\treturn executeSolrQuery(solrQuery, getSolrRequestMethod(requestMethod));"], [508, ""], [593, "\t\t\t\tQueryResponse response = executeSolrQuery(nativeQuery, getSolrRequestMethod(getDefaultRequestMethod()));"], [733, "\tprivate SolrRequest.METHOD getSolrRequestMethod(RequestMethod requestMethod) {"], [734, ""], [735, "\t\tRequestMethod rm = requestMethod != null ? requestMethod : getDefaultRequestMethod();"], [736, ""], [737, "\t\tswitch (rm) {"], [738, "\t\t\tcase GET:"], [739, "\t\t\t\treturn SolrRequest.METHOD.GET;"], [740, "\t\t\tcase POST:"], [741, "\t\t\t\treturn SolrRequest.METHOD.POST;"], [742, "\t\t\tcase PUT:"], [743, "\t\t\t\treturn SolrRequest.METHOD.PUT;"], [744, "\t\t}"], [745, ""], [746, "\t\tthrow new IllegalArgumentException(\"Unsupported request method type\");"], [747, "\t}"], [748, ""], [778, "\t/**"], [779, "\t * @return never {@literal null}."], [780, "\t */"], [781, "\tpublic RequestMethod getDefaultRequestMethod() {"], [782, "\t\treturn defaultRequestMethod;"], [783, "\t}"], [784, ""]], "deleted": [[2, " * Copyright 2012 - 2015 the original author or authors."], [91, " * @author Sateesh ks"], [128, "\t\tthis(solrClientFactory, null);"], [174, "\t\t\t\treturn solrClient.query(solrQuery).getResults().getNumFound();"], [285, "\t\tQueryResponse response = query(query, clazz);"], [299, "\t\tif (null != requestMethod && requestMethod.value().equals(requestMethod.POST)) {"], [300, "\t\t\tresponse = query(namedObjectsQuery, clazz, SolrRequest.METHOD.POST);"], [301, "\t\t} else {"], [302, "\t\t\tresponse = query(namedObjectsQuery, clazz);"], [303, "\t\t}"], [314, "\t\treturn doQueryForPage(query, clazz, null);"], [317, "\t/**"], [318, "\t * Execute the query against solr and retrun result as {@link Page}"], [319, "\t *"], [320, "\t * @param query"], [321, "\t * @param clazz"], [322, "\t * @param method - HTTP METHOD get or post"], [323, "\t * @return"], [338, "\t\treturn doQueryForPage(query, clazz, null);"], [350, "\t\treturn doQueryForPage(query, clazz, null);"], [359, "\t\tQueryResponse response = query(namedObjectsQuery, clazz);"], [378, "\t\tQueryResponse response = query(namedObjectsQuery, clazz);"], [411, "\t\tQueryResponse response = query(query, null);"], [419, "\t\tAssert.notNull(query, \"Query must not be 'null'\");"], [420, ""], [421, "\t\tSolrQuery solrQuery = queryParsers.getForClass(query.getClass()).constructSolrQuery(query);"], [422, ""], [423, "\t\tif (clazz != null) {"], [424, "\t\t\tSolrPersistentEntity<?> persistedEntity = mappingContext.getPersistentEntity(clazz);"], [425, "\t\t\tif (persistedEntity.hasScoreProperty()) {"], [426, "\t\t\t\tsolrQuery.setIncludeScore(true);"], [427, "\t\t\t}"], [428, "\t\t}"], [429, ""], [430, "\t\tLOGGER.debug(\"Executing query '\" + solrQuery + \"' against solr.\");"], [431, ""], [432, "\t\treturn executeSolrQuery(solrQuery);"], [435, "\tfinal QueryResponse query(SolrDataQuery query, Class<?> clazz, SolrRequest.METHOD method) {"], [449, "\t\treturn executeSolrQuery(solrQuery, method);"], [450, "\t}"], [451, ""], [452, "\tfinal QueryResponse executeSolrQuery(final SolrQuery solrQuery) {"], [453, "\t\treturn execute(new SolrCallback<QueryResponse>() {"], [454, "\t\t\t@Override"], [455, "\t\t\tpublic QueryResponse doInSolr(SolrClient solrClient) throws SolrServerException, IOException {"], [456, "\t\t\t\treturn solrClient.query(solrQuery);"], [457, "\t\t\t}"], [458, "\t\t});"], [546, "\t\t\t\tQueryResponse response = executeSolrQuery(nativeQuery);"]]}, "num_lines_added": 119, "num_lines_removed": 49}