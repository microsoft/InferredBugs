{"hash": "e5a6b6a085ba9ce39df74e52e1087388f553fe80", "message": "use PosixFilePermissions to set file permissions instead of reflection", "file_num_lines": 88, "diff_parsed": {"added": [[20, "import java.nio.file.FileSystems;"], [21, "import java.nio.file.Files;"], [22, "import java.nio.file.attribute.PosixFilePermission;"], [23, "import java.util.HashMap;"], [24, "import java.util.HashSet;"], [25, "import java.util.Map;"], [26, "import java.util.Set;"], [38, "    private static boolean IS_POSIX = FileSystems.getDefault().supportedFileAttributeViews().contains(\"posix\");"], [71, "        if (IS_POSIX) {"], [72, "            return new PosixPermissionMapper(entry);"], [75, "        // TODO: implement basic windows permission mapping (e.g. with File.setX or attrib)"], [76, "        return new FallbackFileModeMapper(entry);"], [95, "     * Uses an AttributeAccessor to extract the posix file permissions from the ArchiveEntry and sets them"], [98, "    public static class PosixPermissionMapper extends FileModeMapper {"], [101, "        public PosixPermissionMapper(ArchiveEntry archiveEntry) {"], [107, "            int mode = getMode() & UNIX_PERMISSION_MASK;"], [109, "            if (mode > 0) {"], [110, "                setPermissions(mode, file);"], [118, "        private void setPermissions(int mode, File file) {"], [120, "                Set<PosixFilePermission> posixFilePermissions = new PosixFilePermissionsMapper().map(mode);"], [121, "                Files.setPosixFilePermissions(file.toPath(), posixFilePermissions);"], [128, "    public static class PosixFilePermissionsMapper {"], [130, "        public static Map<Integer, PosixFilePermission> intToPosixFilePermission = new HashMap<>();"], [132, "        static {"], [133, "            intToPosixFilePermission.put(0400, PosixFilePermission.OWNER_READ);"], [134, "            intToPosixFilePermission.put(0200, PosixFilePermission.OWNER_WRITE);"], [135, "            intToPosixFilePermission.put(0100, PosixFilePermission.OWNER_EXECUTE);"], [137, "            intToPosixFilePermission.put(0040, PosixFilePermission.GROUP_READ);"], [138, "            intToPosixFilePermission.put(0020, PosixFilePermission.GROUP_WRITE);"], [139, "            intToPosixFilePermission.put(0010, PosixFilePermission.GROUP_EXECUTE);"], [141, "            intToPosixFilePermission.put(0004, PosixFilePermission.OTHERS_READ);"], [142, "            intToPosixFilePermission.put(0002, PosixFilePermission.OTHERS_WRITE);"], [143, "            intToPosixFilePermission.put(0001, PosixFilePermission.OTHERS_EXECUTE);"], [146, "        public Set<PosixFilePermission> map(int mode) {"], [147, "            Set<PosixFilePermission> permissionSet = new HashSet<>();"], [148, "            for (Map.Entry<Integer, PosixFilePermission> entry : intToPosixFilePermission.entrySet()) {"], [149, "                if ((mode & entry.getKey()) > 0) {"], [150, "                     permissionSet.add(entry.getValue());"], [151, "                }"], [152, "            }"], [153, "            return permissionSet;"]], "deleted": [[20, "import java.lang.reflect.Method;"], [64, "        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\")) {"], [65, "            // FIXME: this is really horrid, but with java 6 i need the system call to 'chmod'"], [66, "            // TODO: implement basic windows permission mapping (e.g. with File.setX or attrib)"], [67, "            return new FallbackFileModeMapper(entry);"], [70, "        // please don't use me on OS/2"], [71, "        return new UnixPermissionMapper(entry);"], [90, "     * Uses an AttributeAccessor to extract the unix file mode from the ArchiveEntry and then invokes the ChmodCommand"], [93, "    public static class UnixPermissionMapper extends FileModeMapper {"], [96, "        public UnixPermissionMapper(ArchiveEntry archiveEntry) {"], [102, "            int perm = getMode() & UNIX_PERMISSION_MASK;"], [104, "            if (perm > 0) {"], [105, "                chmod(perm, file);"], [113, "        public ChmodCommand getChmodCommand() {"], [114, "            return new FileSystemPreferencesReflectionChmodCommand();"], [115, "        }"], [116, ""], [117, "        private void chmod(int mode, File file) throws IOException {"], [119, "                getChmodCommand().chmod(mode, file);"], [124, ""], [127, "    /**"], [128, "     * Command interface for unix <code>chmod</code> call. Java 6 made me do it."], [129, "     */"], [130, "    public static interface ChmodCommand {"], [131, "        void chmod(int mode, File file) throws Exception;"], [132, "    }"], [134, "    /**"], [135, "     * While still horribly wrong, this actually seems to be the safest way. It will invoke a reflective call on"], [136, "     * java.utils.pref.FileSystemPreferences#chmod(String, Integer), which is a JNI call, making it (probably) the"], [137, "     * safest bet."], [138, "     */"], [139, "    public static class FileSystemPreferencesReflectionChmodCommand implements ChmodCommand {"], [140, "        private static Method method;"], [142, "        @Override"], [143, "        public void chmod(int mode, File file) throws Exception {"], [144, "            getMethod().invoke(null, file.getAbsolutePath(), mode);"], [145, "        }"], [147, "        private Method getMethod() throws Exception {"], [148, "            if (method == null) {"], [149, "                Class<?> clazz = Class.forName(\"java.util.prefs.FileSystemPreferences\");"], [150, "                method = clazz.getDeclaredMethod(\"chmod\", String.class, Integer.TYPE);"], [151, "                method.setAccessible(true);"], [152, "            }"], [154, "            return method;"], [156, "    }"], [158, "    /**"], [159, "     * This is just here for documentation really. Maybe it could be an alternative in some cases."], [160, "     */"], [161, "    public static class RuntimeExecChmodCommand implements ChmodCommand {"], [162, "        @Override"], [163, "        public void chmod(int mode, File file) throws Exception {"], [164, "            String cmd = \"chmod \" + Integer.toOctalString(mode) + \" \" + file.getAbsolutePath();"], [165, "            Runtime.getRuntime().exec(cmd);"]]}, "num_lines_added": 41, "num_lines_removed": 53}