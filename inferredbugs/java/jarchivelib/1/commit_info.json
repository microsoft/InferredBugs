{"hash": "6af1f93c04de64e2a09d49ee4aa5e2bee3e085d7", "message": "[#5] Revert filename extension handling to strings, clean stream factories.", "file_num_lines": 73, "diff_parsed": {"added": [[63, "    static ArchiveInputStream createArchiveInputStream(ArchiveFormat archiveFormat, InputStream in)"], [65, "        return createArchiveInputStream(archiveFormat.getName(), in);"], [69, "     * @see {@link ArchiveStreamFactory#createArchiveInputStream(String, InputStream)}"], [71, "    static ArchiveInputStream createArchiveInputStream(CommonsArchiver archiver, InputStream in)"], [72, "            throws ArchiveException {"], [73, "        return createArchiveInputStream(archiver.getArchiveFormat(), in);"], [103, "    static ArchiveOutputStream createArchiveOutputStream(ArchiveFormat format, File archive) throws IOException,"], [104, "            ArchiveException {"], [105, "        return createArchiveOutputStream(format.getName(), new FileOutputStream(archive));"], [106, "    }"], [107, ""], [120, "        return createArchiveOutputStream(archiver.getArchiveFormat(), archive);"], [143, "    static CompressorOutputStream createCompressorOutputStream(CompressionType compressionType, File destination)"], [144, "            throws IOException, CompressorException {"], [145, "        return createCompressorOutputStream(compressionType.getName(), new FileOutputStream(destination));"], [160, "        return createCompressorOutputStream(compressor.getCompressionType(), destination);"]], "deleted": [[63, "    static ArchiveInputStream createArchiveInputStream(CommonsArchiver archiver, InputStream in)"], [65, "        return createArchiveInputStream(archiver.getFileType(), in);"], [69, "     * @see {@link ArchiveStreamFactory#createArchiveInputStream(String, java.io.InputStream)}"], [71, "    static ArchiveInputStream createArchiveInputStream(FileType fileType, InputStream in) throws ArchiveException {"], [72, "        if (fileType == FileType.UNKNOWN) {"], [73, "            throw new IllegalArgumentException(\"Unknown FileType\");"], [74, "        }"], [75, "        if (!fileType.isArchive()) {"], [76, "            throw new IllegalArgumentException(\"FileType \" + fileType + \" is not an archive type\");"], [77, "        }"], [78, ""], [79, "        return createArchiveInputStream(fileType.getArchiveFormat().getName(), in);"], [121, "        return createArchiveOutputStream(archiver.getFileType(), new FileOutputStream(archive));"], [122, "    }"], [123, ""], [124, "    static ArchiveOutputStream createArchiveOutputStream(FileType fileType, OutputStream out) throws ArchiveException {"], [125, "        if (fileType == FileType.UNKNOWN) {"], [126, "            throw new IllegalArgumentException(\"Unknown FileType\");"], [127, "        }"], [128, "        if (!fileType.isArchive()) {"], [129, "            throw new IllegalArgumentException(\"FileType \" + fileType + \" is not an archive type\");"], [130, "        }"], [131, ""], [132, "        return createArchiveOutputStream(fileType.getArchiveFormat().getName(), out);"], [155, "    static CompressorInputStream createCompressorInputStream(FileType fileType, InputStream in)"], [156, "            throws CompressorException {"], [157, "        if (fileType == FileType.UNKNOWN) {"], [158, "            throw new IllegalArgumentException(\"Unknown FileType\");"], [159, "        }"], [160, "        if (!fileType.isCompressed()) {"], [161, "            throw new IllegalArgumentException(\"FileType \" + fileType + \" does not support compression\");"], [162, "        }"], [163, ""], [164, "        return createCompressorInputStream(fileType.getCompression().getName(), in);"], [165, "    }"], [166, ""], [167, "    /**"], [168, "     * @see {@link CompressorStreamFactory#createCompressorInputStream(String, InputStream)};"], [169, "     */"], [170, "    static CompressorInputStream createCompressorInputStream(String compressorName, InputStream in)"], [171, "            throws CompressorException {"], [172, "        return compressorStreamFactory.createCompressorInputStream(compressorName, in);"], [187, "        return createCompressorOutputStream(compressor.getFileType(), new FileOutputStream(destination));"], [188, "    }"], [189, ""], [190, "    /**"], [191, "     * @see {@link CompressorStreamFactory#createCompressorOutputStream(String, OutputStream)};"], [192, "     */"], [193, "    static CompressorOutputStream createCompressorOutputStream(FileType fileType, OutputStream out)"], [194, "            throws CompressorException {"], [195, "        if (fileType == FileType.UNKNOWN) {"], [196, "            throw new IllegalArgumentException(\"Unknown FileType\");"], [197, "        }"], [198, "        if (!fileType.isCompressed()) {"], [199, "            throw new IllegalArgumentException(\"FileType \" + fileType + \" does not support compression\");"], [200, "        }"], [201, ""], [202, "        return createCompressorOutputStream(fileType.getCompression().getName(), out);"]]}, "num_lines_added": 16, "num_lines_removed": 58}