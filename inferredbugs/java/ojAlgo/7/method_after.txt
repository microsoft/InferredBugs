    public MatrixStore<N> getInverse(final DecompositionStore<N> preallocated) {

        if (myInverse == null) {

            final MatrixStore<N> tmpQ1 = this.getQ1();
            final Array1D<Double> tmpSingulars = this.getSingularValues();
            final MatrixStore<N> tmpQ2 = this.getQ2();

            final PhysicalStore<N> tmpMtrx = tmpQ2.copy();

            final Scalar.Factory<N> tmpScalar = this.scalar();
            final BinaryFunction<N> tmpDivide = this.function().divide();
            final N tmpZero = tmpScalar.zero().getNumber();

            final int rank = this.getRank();
            for (int i = 0; i < rank; i++) {
                tmpMtrx.modifyColumn(0L, i, tmpDivide.second(tmpScalar.cast(tmpSingulars.doubleValue(i))));
            }
            final long tmpCountColumns = tmpMtrx.countColumns();
            for (int i = rank; i < tmpCountColumns; i++) {
                tmpMtrx.fillColumn(0L, i, tmpZero);
            }

            preallocated.fillByMultiplying(tmpMtrx, tmpQ1.conjugate());
            myInverse = preallocated;
        }

        return myInverse;
    }