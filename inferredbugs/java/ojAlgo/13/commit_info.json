{"hash": "661229fc6c621a0e9397b6419a26f90946f3f7b0", "message": "2017-09-24", "file_num_lines": 270, "diff_parsed": {"added": [[19, "/**"], [20, " * A {@link SortedMap} with primitive valued long keys and {@link Number} values (incl. possibly primitive"], [21, " * double values). The main benefits of using this class is its use of primitive keys and values, and how it"], [22, " * integrates with other parts of ojAlgo. As a general purpose {@link Map} implementation (usage with high"], [23, " * frequency of randomly ordered put and remove operations) it is not very efficient."], [24, " *"], [25, " * @author apete"], [26, " */"], [219, "            myStorage.put(key, tmpIndex, newValue);"], [230, "            myStorage.put(key, tmpIndex, newValue);"], [236, "        final int index = myStorage.index(key);"], [237, "        final double oldValue = index >= 0 ? myStorage.doubleValueInternally(index) : PrimitiveMath.NaN;"], [238, "        myStorage.put(key, index, value);"], [239, "        return oldValue;"], [243, "        final int index = myStorage.index(key);"], [244, "        final N oldValue = index >= 0 ? myStorage.getInternally(index) : null;"], [245, "        myStorage.put(key, index, value);"], [246, "        return oldValue;"], [272, "        final int index = myStorage.index(key);"], [273, "        final N oldValue = index >= 0 ? myStorage.getInternally(index) : null;"], [274, "        myStorage.remove(key, index);"], [275, "        return oldValue;"], [321, "        final NonzeroView<N> nz = myStorage.nonzeros();"], [327, "        final StringBuilder builder = new StringBuilder();"], [330, "            final NonzeroView<N> entry = nz.next();"], [331, "            final long key = entry.index();"], [332, "            final N value = entry.getNumber();"]], "deleted": [[211, "            myStorage.doSet(key, tmpIndex, newValue, true);"], [222, "            myStorage.doSet(key, tmpIndex, newValue, true);"], [228, "        final int tmpIndex = myStorage.index(key);"], [229, "        final double tmpOldValue = tmpIndex >= 0 ? myStorage.doubleValueInternally(tmpIndex) : PrimitiveMath.NaN;"], [230, "        myStorage.doSet(key, tmpIndex, value, true);"], [231, "        return tmpOldValue;"], [235, "        final int tmpIndex = myStorage.index(key);"], [236, "        final N tmpOldValue = tmpIndex >= 0 ? myStorage.getInternally(tmpIndex) : null;"], [237, "        myStorage.doSet(key, tmpIndex, value, true);"], [238, "        return tmpOldValue;"], [264, "        final N tmpOldVal = myStorage.get(key);"], [265, "        myStorage.set(key, 0.0);"], [266, "        return tmpOldVal;"], [312, "        NonzeroView<N> nz = myStorage.nonzeros();"], [318, "        StringBuilder builder = new StringBuilder();"], [321, "            NonzeroView<N> entry = nz.next();"], [322, "            long key = entry.index();"], [323, "            N value = entry.getNumber();"]]}, "num_lines_added": 27, "num_lines_removed": 18}