{"hash": "76eac313cc8663b5fbbfa0178c045cbcdc9db54b", "message": "Cleared deprecations in test cases", "file_num_lines": 154, "diff_parsed": {"added": [[104, "    protected void deriveTheHardWay(final ArtificialNeuralNetwork network, final Data triplet, final NumberContext precision) {"], [105, ""], [106, "        NetworkTrainer trainer = network.newTrainer();"], [107, "        NetworkInvoker invoker = network.newInvoker();"], [112, "            trainer.getWeights().forEach(l -> {"], [120, "        Structure2D[] structure = trainer.structure();"], [133, "                    double orgWeight = trainer.getWeight(layer, input, output);"], [135, "                    trainer.weight(layer, input, output, orgWeight + delta);"], [137, "                    double upperError = trainer.error(triplet.target, invoker.invoke(triplet.input));"], [138, "                    trainer.weight(layer, input, output, orgWeight - delta);"], [139, "                    double lowerError = trainer.error(triplet.target, invoker.invoke(triplet.input));"], [140, "                    trainer.weight(layer, input, output, orgWeight);"], [146, "                double orgBias = trainer.getBias(layer, output);"], [148, "                trainer.bias(layer, output, orgBias + delta);"], [149, "                double upperError = trainer.error(triplet.target, invoker.invoke(triplet.input));"], [150, "                trainer.bias(layer, output, orgBias - delta);"], [151, "                double lowerError = trainer.error(triplet.target, invoker.invoke(triplet.input));"], [152, "                trainer.bias(layer, output, orgBias);"], [170, "            trainer.getWeights().forEach(l -> {"], [176, "        trainer.rate(triplet.rate).train(triplet.input, triplet.target);"], [182, "            trainer.getWeights().forEach(l -> {"], [192, "                    TestUtils.assertEquals(trainer.toString(), expectedWeights.doubleValue(input, output), trainer.getWeight(layer, input, output), precision);"], [194, "                TestUtils.assertEquals(trainer.toString(), bias[layer].doubleValue(output), trainer.getBias(layer, output), precision);"], [199, "    protected abstract ArtificialNeuralNetwork getInitialNetwork(Factory<Double, ?> factory);"], [205, "    void doTestFeedForward(final Factory<Double, ?> factory) {"], [209, "        ArtificialNeuralNetwork network = this.getInitialNetwork(factory);"], [210, ""], [211, "        NetworkInvoker invoker = network.newInvoker();"], [215, "                TestUtils.assertEquals(triplet.expected, invoker.invoke(triplet.input), this.precision());"]], "deleted": [[104, "    protected void deriveTheHardWay(final NetworkTrainer builder, final Data triplet, final NumberContext precision) {"], [109, "            builder.getWeights().forEach(l -> {"], [117, "        Structure2D[] structure = builder.structure();"], [130, "                    double orgWeight = builder.getWeight(layer, input, output);"], [132, "                    builder.weight(layer, input, output, orgWeight + delta);"], [134, "                    double upperError = builder.error(triplet.target, builder.get().invoke(triplet.input));"], [135, "                    builder.weight(layer, input, output, orgWeight - delta);"], [136, "                    double lowerError = builder.error(triplet.target, builder.get().invoke(triplet.input));"], [137, "                    builder.weight(layer, input, output, orgWeight);"], [143, "                double orgBias = builder.getBias(layer, output);"], [145, "                builder.bias(layer, output, orgBias + delta);"], [146, "                double upperError = builder.error(triplet.target, builder.get().invoke(triplet.input));"], [147, "                builder.bias(layer, output, orgBias - delta);"], [148, "                double lowerError = builder.error(triplet.target, builder.get().invoke(triplet.input));"], [149, "                builder.bias(layer, output, orgBias);"], [167, "            builder.getWeights().forEach(l -> {"], [173, "        builder.rate(triplet.rate).train(triplet.input, triplet.target);"], [179, "            builder.getWeights().forEach(l -> {"], [189, "                    TestUtils.assertEquals(builder.toString(), expectedWeights.doubleValue(input, output), builder.getWeight(layer, input, output), precision);"], [191, "                TestUtils.assertEquals(builder.toString(), bias[layer].doubleValue(output), builder.getBias(layer, output), precision);"], [196, "    protected abstract NetworkTrainer getInitialNetwork(Factory<Double, ?> factory);"], [202, "    void doTestFeedForward(Factory<Double, ?> factory) {"], [206, "        ArtificialNeuralNetwork network = this.getInitialNetwork(factory).get();"], [210, "                TestUtils.assertEquals(triplet.expected, network.invoke(triplet.input), this.precision());"]]}, "num_lines_added": 29, "num_lines_removed": 24}