{"hash": "dae68cbaea81df158990308c9949fbed018e17ca", "message": "2017-08-31", "file_num_lines": 571, "diff_parsed": {"added": [[619, "    private final PrimitiveDenseStore mySolutionX;"], [634, "        mySolutionX = PrimitiveDenseStore.FACTORY.makeZero(this.countVariables(), 1L);"], [636, "        mySolverQ = Cholesky.make(this.getMatrixQ());"], [637, "        mySolverGeneral = LU.make(this.getMatrixQ());"], [703, "        final MatrixStore<Double> tmpX = this.getSolutionX();"], [711, "        return this.getSolutionX().copy();"], [723, "    protected RowsSupplier<Double> getMatrixAI() {"], [724, "        return myMatrices.getAI();"], [764, "        return this.getSolutionX().premultiply(this.getMatrixAE()).operateOnMatching(this.getMatrixBE(), SUBTRACT).get();"], [783, "    /**"], [784, "     * Solution / Variables: [X]"], [785, "     */"], [786, "    protected PhysicalStore<Double> getSolutionX() {"], [787, "        return mySolutionX;"], [788, "    }"], [789, ""], [868, "    void supplySI(final PhysicalStore<Double> slack) {"], [869, ""], [870, "        final RowsSupplier<Double> mtrxAI = myMatrices.getAI();"], [871, "        final MatrixStore<Double> mtrxBI = this.getMatrixBI();"], [872, "        final PhysicalStore<Double> mtrxX = this.getSolutionX();"], [873, ""], [874, "        slack.fillMatching(mtrxBI);"], [875, ""], [876, "        for (int i = 0; i < mtrxAI.countRows(); i++) {"], [877, "            slack.add(i, -mtrxAI.getRow(i).dot(mtrxX));"], [878, "        }"], [879, "    }"], [880, ""]], "deleted": [[619, "    private transient PhysicalStore<Double> myMatrixAI = null;"], [620, "    private PrimitiveDenseStore myMatrixX = null;"], [635, "        final MatrixStore<Double> tmpQ = this.getMatrixQ();"], [637, "        mySolverQ = Cholesky.make(tmpQ);"], [638, "        mySolverGeneral = LU.make(tmpQ);"], [704, "        final MatrixStore<Double> tmpX = this.getMatrixX();"], [712, "        return this.getMatrixX().copy();"], [724, "    /**"], [725, "     * @deprecated"], [726, "     */"], [727, "    @Deprecated"], [728, "    protected MatrixStore<Double> getMatrixAI() {"], [729, "        if (myMatrixAI == null) {"], [730, "            myMatrixAI = myMatrices.getAI().collect(PrimitiveDenseStore.FACTORY);"], [731, "        }"], [732, "        return myMatrixAI;"], [767, "    /**"], [768, "     * Solution / Variables: [X]"], [769, "     */"], [770, "    protected PhysicalStore<Double> getMatrixX() {"], [771, "        if (myMatrixX == null) {"], [772, "            myMatrixX = PrimitiveDenseStore.FACTORY.makeZero(this.countVariables(), 1L);"], [773, "        }"], [774, "        return myMatrixX;"], [775, "    }"], [776, ""], [782, "        return this.getMatrixX().premultiply(this.getMatrixAE()).operateOnMatching(this.getMatrixBE(), SUBTRACT).get();"], [789, "    void supplySI(final PhysicalStore<Double> slack) {"], [790, ""], [791, "        final RowsSupplier<Double> mtrxAI = myMatrices.getAI();"], [792, "        final MatrixStore<Double> mtrxBI = this.getMatrixBI();"], [793, "        final PhysicalStore<Double> mtrxX = this.getMatrixX();"], [794, ""], [795, "        slack.fillMatching(mtrxBI);"], [796, ""], [797, "        for (int i = 0; i < mtrxAI.countRows(); i++) {"], [798, "            slack.add(i, -mtrxAI.getRow(i).dot(mtrxX));"], [799, "        }"], [800, "    }"], [801, ""]]}, "num_lines_added": 29, "num_lines_removed": 40}