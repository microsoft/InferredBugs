{"hash": "e1ce955f6e54ef2c2581537f6881b1ab38b25f1d", "message": "doesn't work. graph stuff doesnt like ids of 0. and i need to reuse ids sometimes for some instructions, oops.", "file_num_lines": 89, "diff_parsed": {"added": [[6, "import java.util.ArrayList;"], [8, "import java.util.HashSet;"], [12, "import java.util.Optional;"], [13, "import java.util.Set;"], [30, "\t// methods which have been processed in the original"], [31, "\tprivate Set<Method> processed = new HashSet<>();"], [32, ""], [46, "//\t\t\tif (e.getKey() == null || e.getValue() == null)"], [47, "//\t\t\t{"], [48, "//\t\t\t\tassert e.getKey() == e.getValue();"], [49, "//\t\t\t\tcontinue;"], [50, "//\t\t\t}"], [65, "//\t\t\t\tassert objMap.containsKey(m1) == false || objMap.get(m1) == m2;"], [81, "\t\touter:"], [84, "\t\t\t{"], [85, "\t\t\t\tcompare(fr1, fr2);"], [86, "\t\t\t\t//if (compare(fr1, fr2))"], [87, "\t\t\t\t//\tbreak outer;"], [88, "\t\t\t}"], [89, ""], [90, "\t\tSystem.out.println(\"end\");"], [91, "\t\t\t\t\t//return;"], [97, "\t\tList<Method> initial1 = eone.getInitialMethods().stream().sorted((m1, m2) -> m1.getName().compareTo(m2.getName())).collect(Collectors.toList());"], [102, "\t\tList<Method> initial2 = etwo.getInitialMethods().stream().sorted((m1, m2) -> m1.getName().compareTo(m2.getName())).collect(Collectors.toList());"], [105, "\t\tassert initial1.size() == initial2.size();"], [106, ""], [107, "\t\tfor (int i = 0; i < initial1.size(); ++i)"], [108, "\t\t{"], [109, "\t\t\tMethod m1 = initial1.get(i), m2 = initial2.get(i);"], [110, ""], [111, "\t\t\tobjMap.put(m1, m2);"], [112, "\t\t}"], [113, ""], [114, "//\t\tprocess("], [115, "//\t\t\tinitial1.get(0).getMethod(),"], [116, "//\t\t\tinitial2.get(0).getMethod()"], [117, "//\t\t);"], [118, "//\t\tprocessed.add(initial1.get(0).getMethod());"], [120, "\t\t\tone.findClass(\"class143\").findMethod(\"run\"),"], [121, "\t\t\ttwo.findClass(\"class143\").findMethod(\"run\")"], [123, "//\t\tprocessed.add(one.findClass(\"client\").findMethod(\"init\"));"], [124, ""], [125, "//\t\tfor (;;)"], [126, "//\t\t{"], [127, "//\t\t\tOptional next = objMap.keySet().stream()"], [128, "//\t\t\t\t.filter(m -> !processed.contains(m))"], [129, "//\t\t\t\t.findAny();"], [130, "//\t\t\tif (!next.isPresent())"], [131, "//\t\t\t\tbreak;"], [132, "//"], [133, "//\t\t\tMethod m = (Method) next.get();"], [134, "//\t\t\tMethod m2 = (Method) objMap.get(m);"], [135, "//"], [136, "//\t\t\tSystem.out.println(\"Scanning \" + m.getName() + \" -> \" + m2.getName());"], [137, "//\t\t\tprocess(m, m2);"], [138, "//\t\t\tprocessed.add(m);"], [139, "//\t\t}"], [140, ""], [141, "\t\tfor (Entry<Object, Object> e : objMap.entrySet())"], [142, "\t\t{"], [143, "\t\t\tMethod m1 = (Method) e.getKey();"], [144, "\t\t\tMethod m2 = (Method) e.getValue();"], [145, ""], [146, "\t\t\tSystem.out.println(\"FINAL \" + m1.getMethods().getClassFile().getName() + \".\" + m1.getName() + \" -> \" + m2.getMethods().getClassFile().getName() + \".\" + m2.getName());"], [147, "\t\t}"]], "deleted": [[39, "\t\t\tif (e.getKey() == null || e.getValue() == null)"], [40, "\t\t\t{"], [41, "\t\t\t\tassert e.getKey() == e.getValue();"], [42, "\t\t\t\tcontinue;"], [43, "\t\t\t}"], [58, "\t\t\t\tassert objMap.containsKey(m1) == false || objMap.get(m1) == m2;"], [76, "\t\t\t\tif (compare(fr1, fr2))"], [77, "\t\t\t\t\treturn;"], [90, "\t\t\tone.findClass(\"client\").findMethod(\"init\"),"], [91, "\t\t\ttwo.findClass(\"client\").findMethod(\"init\")"]]}, "num_lines_added": 65, "num_lines_removed": 10}