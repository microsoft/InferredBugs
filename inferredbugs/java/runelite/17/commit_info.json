{"hash": "ceafe5acec31f018e6434b07c84b71337e87fa0f", "message": "Execution test is inf looping with new frame/exec stuff, dont know why.", "file_num_lines": 139, "diff_parsed": {"added": [[132, "\t\tExecution eone = new Execution(one);"], [133, "\t\teone.setBuildGraph(true);"], [134, "\t\teone.setFollowInvokes(false);"], [135, "\t\teone.populateInitialMethods();"], [136, "\t\tList<Method> initial1 = eone.getInitialMethods().stream().sorted((m1, m2) -> m1.getName().compareTo(m2.getName())).collect(Collectors.toList());"], [137, "\t\teone.run();"], [138, ""], [139, "\t\tExecution etwo = new Execution(two);"], [140, "\t\tetwo.setBuildGraph(true);"], [141, "\t\tetwo.setFollowInvokes(false);"], [142, "\t\tetwo.populateInitialMethods();"], [143, "\t\tList<Method> initial2 = etwo.getInitialMethods().stream().sorted((m1, m2) -> m1.getName().compareTo(m2.getName())).collect(Collectors.toList());"], [144, "\t\tetwo.run();"], [145, ""], [146, "\t\tassert initial1.size() == initial2.size();"], [147, ""], [148, "\t\tfor (int i = 0; i < initial1.size(); ++i)"], [149, "\t\t{"], [150, "\t\t\tMethod m1 = initial1.get(i), m2 = initial2.get(i);"], [151, ""], [152, "\t\t\tassert m1.getName().equals(m2.getName());"], [153, ""], [154, "\t\t\tobjMap.put(m1, m2);"], [155, "\t\t}"], [157, "//\t\tprocess("], [158, "//\t\t\tone.findClass(\"class143\").findMethod(\"method3014\"),"], [159, "//\t\t\ttwo.findClass(\"class143\").findMethod(\"method2966\")"], [160, "//\t\t);"]], "deleted": [[132, "//\t\tExecution eone = new Execution(one);"], [133, "//\t\teone.setBuildGraph(true);"], [134, "//\t\teone.setFollowInvokes(false);"], [135, "//\t\teone.populateInitialMethods();"], [136, "//\t\tList<Method> initial1 = eone.getInitialMethods().stream().sorted((m1, m2) -> m1.getName().compareTo(m2.getName())).collect(Collectors.toList());"], [137, "//\t\teone.run();"], [138, "//"], [139, "//\t\tExecution etwo = new Execution(two);"], [140, "//\t\tetwo.setBuildGraph(true);"], [141, "//\t\tetwo.setFollowInvokes(false);"], [142, "//\t\tetwo.populateInitialMethods();"], [143, "//\t\tList<Method> initial2 = etwo.getInitialMethods().stream().sorted((m1, m2) -> m1.getName().compareTo(m2.getName())).collect(Collectors.toList());"], [144, "//\t\tetwo.run();"], [145, "//"], [146, "//\t\tassert initial1.size() == initial2.size();"], [147, "//"], [148, "//\t\tfor (int i = 0; i < initial1.size(); ++i)"], [149, "//\t\t{"], [150, "//\t\t\tMethod m1 = initial1.get(i), m2 = initial2.get(i);"], [151, "//"], [152, "//\t\t\tassert m1.getName().equals(m2.getName());"], [153, "//"], [154, "//\t\t\tobjMap.put(m1, m2);"], [155, "//\t\t}"], [157, "\t\tprocess("], [158, "\t\t\tone.findClass(\"class143\").findMethod(\"method3014\"),"], [159, "\t\t\ttwo.findClass(\"class143\").findMethod(\"method2966\")"], [160, "\t\t);"]]}, "num_lines_added": 28, "num_lines_removed": 28}