{"hash": "af72fabbf38461ae9b369f113406c1af20f30019", "message": "Refactored DeflateCompressionCodec to eliminate memory leak.  Refactored GzipCompressionCodec and AbstractCompressionCodec to utilize consistent logic across compression algorithms.  Resolves #392.", "file_num_lines": 28, "diff_parsed": {"added": [[22, "import java.io.OutputStream;"], [35, "    private static final StreamWrapper WRAPPER = new StreamWrapper() {"], [36, "        @Override"], [37, "        public OutputStream wrap(OutputStream out) throws IOException {"], [38, "            return new GZIPOutputStream(out);"], [39, "        }"], [40, "    };"], [41, ""], [48, "    protected byte[] doCompress(byte[] payload) throws IOException {"], [49, "        return writeAndClose(payload, WRAPPER);"], [52, "    @Override"], [53, "    protected byte[] doDecompress(byte[] compressed) throws IOException {"], [54, "        return readAndClose(new GZIPInputStream(new ByteArrayInputStream(compressed)));"]], "deleted": [[19, "import io.jsonwebtoken.lang.Objects;"], [22, "import java.io.ByteArrayOutputStream;"], [42, "    protected byte[] doDecompress(byte[] compressed) throws IOException {"], [43, "        byte[] buffer = new byte[512];"], [44, ""], [45, "        ByteArrayOutputStream outputStream = null;"], [46, "        GZIPInputStream gzipInputStream = null;"], [47, "        ByteArrayInputStream inputStream = null;"], [48, ""], [49, "        try {"], [50, "            inputStream = new ByteArrayInputStream(compressed);"], [51, "            gzipInputStream = new GZIPInputStream(inputStream);"], [52, "            outputStream = new ByteArrayOutputStream();"], [53, "            int read = gzipInputStream.read(buffer);"], [54, "            while (read != -1) {"], [55, "                outputStream.write(buffer, 0, read);"], [56, "                read = gzipInputStream.read(buffer);"], [57, "            }"], [58, "            return outputStream.toByteArray();"], [59, "        } finally {"], [60, "            Objects.nullSafeClose(inputStream, gzipInputStream, outputStream);"], [61, "        }"], [64, "    protected byte[] doCompress(byte[] payload) throws IOException {"], [65, "        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();"], [66, "        GZIPOutputStream compressorOutputStream = new GZIPOutputStream(outputStream, true);"], [67, "        try {"], [68, "            compressorOutputStream.write(payload, 0, payload.length);"], [69, "            compressorOutputStream.finish();"], [70, "            return outputStream.toByteArray();"], [71, "        } finally {"], [72, "            Objects.nullSafeClose(compressorOutputStream, outputStream);"], [73, "        }"]]}, "num_lines_added": 13, "num_lines_removed": 32}