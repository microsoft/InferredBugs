{"hash": "13906d3746d29e9610a0f3c385dbb14932fe9d71", "message": "Implement type conversions of integral claim values\n\nJackson chooses the target type for JSON numbers based on their value,\nwhile deserializing without correct typing information present.\nThis leads to a confusing behavior:\n\n    String token = Jwts.builder()\n        .claim(\"byte\", (byte) 42)\n        .claim(\"short\", (short) 42)\n        .claim(\"int\", 42)\n        .claim(\"long_small\", (long) 42)\n        .claim(\"long_big\", ((long) Integer.MAX_VALUE) + 42)\n        .compact();\n    Claims claims = (Claims) Jwts.parser().parse(token).getBody();\n    claims.get(\"int\", Integer.class); // => 42\n    claims.get(\"long_big\", Long.class); // => ((long) Integer.MAX_VALUE) + 42\n    claims.get(\"long_small\", Long.class); // throws RequiredTypeException: required=Long, found=Integer\n    claims.get(\"short\", Short.class); // throws RequiredTypeException: required=Short, found=Integer\n    claims.get(\"byte\", Byte.class); // throws RequiredTypeException: required=Byte, found=Integer\n\nWith this commit, `DefaultClaims.getClaim(String, Class<T>)` will\ncorrectly handle cases when required type is `Long`, `Integer`, `Short`\nor `Byte`: check that value fits in the required type and cast to it.\n\n    // ... setup is the same as above\n    claims.get(\"int\", Integer.class); // => 42\n    claims.get(\"long_big\", Long.class); // => ((long) Integer.MAX_VALUE) + 42\n    claims.get(\"long_small\", Long.class); // => (long) 42\n    claims.get(\"short\", Short.class); // => (short) 42\n    claims.get(\"byte\", Byte.class); // => (byte) 42\n\nFixes #142.", "file_num_lines": 107, "diff_parsed": {"added": [[123, "        return castClaimValue(value, requiredType);"], [124, "    }"], [125, ""], [126, "    private <T> T castClaimValue(Object value, Class<T> requiredType) {"], [131, "        if (value instanceof Integer) {"], [132, "            int intValue = (Integer) value;"], [133, "            if (requiredType == Long.class) {"], [134, "                value = (long) intValue;"], [135, "            } else if (requiredType == Short.class && Short.MIN_VALUE <= intValue && intValue <= Short.MAX_VALUE) {"], [136, "                value = (short) intValue;"], [137, "            } else if (requiredType == Byte.class && Byte.MIN_VALUE <= intValue && intValue <= Byte.MAX_VALUE) {"], [138, "                value = (byte) intValue;"], [139, "            }"], [140, "        }"], [141, ""]], "deleted": []}, "num_lines_added": 15, "num_lines_removed": 0}