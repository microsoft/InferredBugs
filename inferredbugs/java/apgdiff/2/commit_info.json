{"hash": "e6eb7beec85d6f38ee8a6e5473aa51a0069a4c37", "message": "parsing triggers migrated to new parser, also added support for TRUNCATE event and WHEN clause", "file_num_lines": 59, "diff_parsed": {"added": [[29, "        final Parser parser = new Parser(command);"], [30, "        parser.expect(\"CREATE\", \"TRIGGER\");"], [32, "        final PgTrigger trigger = new PgTrigger();"], [33, "        trigger.setName(parser.parseIdentifier());"], [34, ""], [35, "        if (parser.expectOptional(\"BEFORE\")) {"], [36, "            trigger.setBefore(true);"], [37, "        } else if (parser.expectOptional(\"AFTER\")) {"], [38, "            trigger.setBefore(false);"], [39, "        }"], [41, "        boolean first = true;"], [43, "        while (true) {"], [44, "            if (!first && !parser.expectOptional(\"OR\")) {"], [47, "            if (parser.expectOptional(\"INSERT\")) {"], [48, "                trigger.setOnInsert(true);"], [49, "            } else if (parser.expectOptional(\"UPDATE\")) {"], [50, "                trigger.setOnUpdate(true);"], [51, "            } else if (parser.expectOptional(\"DELETE\")) {"], [52, "                trigger.setOnDelete(true);"], [53, "            } else if (parser.expectOptional(\"TRUNCATE\")) {"], [54, "                trigger.setOnTruncate(true);"], [55, "            } else if (first) {"], [56, "                break;"], [57, "            } else {"], [58, "                parser.throwUnsupportedCommand();"], [59, "            }"], [60, ""], [61, "            first = false;"], [62, "        }"], [63, ""], [64, "        parser.expect(\"ON\");"], [65, ""], [66, "        trigger.setTableName(parser.parseIdentifier());"], [67, ""], [68, "        if (parser.expectOptional(\"FOR\")) {"], [69, "            parser.expectOptional(\"EACH\");"], [70, ""], [71, "            if (parser.expectOptional(\"ROW\")) {"], [72, "                trigger.setForEachRow(true);"], [73, "            } else if (parser.expectOptional(\"STATEMENT\")) {"], [74, "                trigger.setForEachRow(false);"], [75, "            } else {"], [76, "                parser.throwUnsupportedCommand();"], [77, "            }"], [80, "        if (parser.expectOptional(\"WHEN\")) {"], [81, "            parser.expect(\"(\");"], [82, "            trigger.setWhen(parser.getExpression());"], [83, "            parser.expect(\")\");"], [84, "        }"], [85, ""], [86, "        parser.expect(\"EXECUTE\", \"PROCEDURE\");"], [87, "        trigger.setFunction(parser.getRest());"], [88, ""], [89, "        database.getDefaultSchema().getTable("], [90, "                trigger.getTableName()).addTrigger(trigger);"]], "deleted": [[6, "import java.util.regex.Matcher;"], [7, "import java.util.regex.Pattern;"], [8, ""], [17, "     * Pattern for parsing CREATE TRIGGER command."], [18, "     */"], [19, "    private static final Pattern PATTERN = Pattern.compile("], [20, "            \"^CREATE[\\\\s]+TRIGGER[\\\\s]+\\\"?([^\\\\s\\\"]+)\\\"?[\\\\s]+(BEFORE|AFTER)[\\\\s]+\""], [21, "            + \"(INSERT|UPDATE|DELETE)(?:[\\\\s]+OR[\\\\s]+)?(INSERT|UPDATE|DELETE)?\""], [22, "            + \"(?:[\\\\s]+OR[\\\\s]+)?(INSERT|UPDATE|DELETE)?[\\\\s]+\""], [23, "            + \"ON[\\\\s]+\\\"?([^\\\\s\\\"]+)\\\"?[\\\\s]+(?:FOR[\\\\s]+)?(?:EACH[\\\\s]+)?\""], [24, "            + \"(ROW|STATEMENT)?[\\\\s]+EXECUTE[\\\\s]+PROCEDURE[\\\\s]+([^;]+);$\","], [25, "            Pattern.CASE_INSENSITIVE);"], [26, ""], [27, "    /**"], [43, "        final Matcher matcher = PATTERN.matcher(command.trim());"], [44, ""], [45, "        if (matcher.matches()) {"], [46, "            final String triggerName = matcher.group(1);"], [47, "            final String when = matcher.group(2);"], [48, "            final String[] events = new String[3];"], [49, "            events[0] = matcher.group(3);"], [50, "            events[1] = matcher.group(4);"], [51, "            events[2] = matcher.group(5);"], [52, ""], [53, "            final String tableName = matcher.group(6);"], [54, "            final String fireOn = matcher.group(7);"], [55, "            final String procedure = matcher.group(8);"], [56, ""], [57, "            final PgTrigger trigger = new PgTrigger();"], [58, "            trigger.setBefore(\"BEFORE\".equalsIgnoreCase(when));"], [59, "            trigger.setForEachRow("], [60, "                    (fireOn != null) && \"ROW\".equalsIgnoreCase(fireOn));"], [61, "            trigger.setFunction(procedure.trim());"], [62, "            trigger.setName(triggerName.trim());"], [63, "            trigger.setOnDelete(isEventPresent(events, \"DELETE\"));"], [64, "            trigger.setOnInsert(isEventPresent(events, \"INSERT\"));"], [65, "            trigger.setOnUpdate(isEventPresent(events, \"UPDATE\"));"], [66, "            trigger.setTableName(tableName.trim());"], [67, ""], [68, "            database.getDefaultSchema().getTable("], [69, "                    trigger.getTableName()).addTrigger(trigger);"], [70, "        } else {"], [71, "            throw new ParserException("], [72, "                    ParserException.CANNOT_PARSE_COMMAND + command);"], [73, "        }"], [74, "    }"], [76, "    /**"], [77, "     * Returns true if <code>event</code> is present in"], [78, "     * <code>events</code>, otherwise false."], [79, "     *"], [80, "     * @param events array of events"], [81, "     * @param event event to be searched"], [82, "     *"], [83, "     * @return true if <code>event</code> is present in <code>events</code>,"], [84, "     *         otherwise false"], [85, "     */"], [86, "    private static boolean isEventPresent(final String[] events,"], [87, "            final String event) {"], [88, "        boolean present = false;"], [90, "        for (String curEvent : events) {"], [91, "            if (event.equalsIgnoreCase(curEvent)) {"], [92, "                present = true;"], [98, "        return present;"]]}, "num_lines_added": 55, "num_lines_removed": 63}