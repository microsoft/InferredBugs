{"hash": "247a65fc2396141fd6066c71fdaaa6769858b6c3", "message": "support distribute lightGBM as type \"distlightgbm\"", "file_num_lines": 757, "diff_parsed": {"added": [[5, "import com.google.gson.reflect.TypeToken;"], [29, "import java.lang.reflect.Type;"], [30, "import java.net.InetAddress;"], [33, "import java.net.UnknownHostException;"], [62, "  private int lightGBMLocalPort;"], [63, ""], [96, "    if (xlearningAppType.equals(\"DISTLIGHTGBM\")) {"], [97, "      LOG.info(\"Dist lightGBM role is:\" + this.role);"], [98, "    }"], [110, "    if (xlearningAppType.equals(\"DISTLIGHTGBM\")) {"], [111, "      LOG.info(\"Dist lightGBM index is:\" + this.index);"], [112, "    }"], [139, "    if ((\"TENSORFLOW\".equals(xlearningAppType) && !single) || xlearningAppType.equals(\"DISTLIGHTGBM\")) {"], [395, "    if (xlearningAppType.equals(\"DISTLIGHTGBM\")) {"], [396, "      LOG.info(\"Reserved available port: \" + reservedSocket.getLocalPort());"], [397, "      this.lightGBMLocalPort = reservedSocket.getLocalPort();"], [398, "      InetAddress address = null;"], [399, "      try {"], [400, "        address = InetAddress.getByName(envs.get(ApplicationConstants.Environment.NM_HOST.toString()));"], [401, "      } catch (UnknownHostException e) {"], [402, "        LOG.info(\"acquire host ip failed \" + e);"], [403, "        reportFailedAndExit();"], [404, "      }"], [405, "      String ipPortStr = address.getHostAddress() + \" \" + reservedSocket.getLocalPort();"], [406, "      LOG.info(\"lightGBM ip port string is: \" + ipPortStr);"], [407, "      amClient.reportLightGbmIpPort(containerId, ipPortStr);"], [408, "      String lightGBMIpPortStr;"], [409, "      while (true) {"], [410, "        //TODO may be need encode use Base64 while used in Env"], [411, "        lightGBMIpPortStr = amClient.getLightGbmIpPortStr();"], [412, "        if (lightGBMIpPortStr != null) {"], [413, "          LOG.info(\"lightGBM IP PORT list is: \" + lightGBMIpPortStr);"], [414, "          break;"], [415, "        }"], [416, "        Utilities.sleep(this.conf.getInt(XLearningConfiguration.XLEARNING_CONTAINER_UPDATE_APP_STATUS_INTERVAL, XLearningConfiguration.DEFAULT_XLEARNING_CONTAINER_UPDATE_APP_STATUS_INTERVAL));"], [417, "      }"], [418, "      Type type = new TypeToken<ConcurrentHashMap<String, String>>() {"], [419, "      }.getType();"], [420, "      ConcurrentHashMap<String, String> map = new Gson().fromJson(lightGBMIpPortStr, type);"], [421, "      PrintWriter writer = new PrintWriter(\"lightGBMlist.txt\", \"UTF-8\");"], [422, "      for (String str : map.keySet()) {"], [423, "        writer.println(map.get(str));"], [424, "      }"], [425, "      writer.close();"], [426, "    }"], [427, ""], [494, "      } else if (xlearningAppType.equals(\"DISTLIGHTGBM\")) {"], [495, "        env = new String[]{"], [496, "            \"PATH=\" + System.getenv(\"PATH\"),"], [497, "            \"JAVA_HOME=\" + System.getenv(\"JAVA_HOME\"),"], [498, ""], [499, "            \"HADOOP_HOME=\" + System.getenv(\"HADOOP_HOME\"),"], [500, "            \"HADOOP_HDFS_HOME=\" + System.getenv(\"HADOOP_HDFS_HOME\"),"], [501, "            \"LD_LIBRARY_PATH=\" + \"./:\" + System.getenv(\"LD_LIBRARY_PATH\") + \":\" + System.getenv(\"JAVA_HOME\") +"], [502, "                \"/jre/lib/amd64/server:\" + System.getenv(\"HADOOP_HOME\") + \"/lib/native\","], [503, "            \"CLASSPATH=\" + \"./:\" + System.getenv(\"CLASSPATH\") + \":\" + System.getProperty(\"java.class.path\"),"], [504, "            \"LIGHTGBM_NUM_MACHINE=\" + System.getenv(XLearningConstants.Environment.XLEARNING_LIGHTGBM_WORKER_NUM.toString()),"], [505, "            \"LIGHTGBM_LOCAL_LISTEN_PORT=\" + this.lightGBMLocalPort,"], [506, "            \"PYTHONUNBUFFERED=1\","], [507, "            XLearningConstants.Environment.XLEARNING_INPUT_FILE_LIST.toString() + \"=\" + this.inputFileList"], [508, "        };"]], "deleted": [[127, "    if (\"TENSORFLOW\".equals(xlearningAppType) && !single) {"]]}, "num_lines_added": 61, "num_lines_removed": 1}