{"hash": "4dfb24242fe53f41ae12ba4592142888931d4766", "message": "docker:source can now be used withou a configured docker daemon", "file_num_lines": 76, "diff_parsed": {"added": [[32, "    // Services managed by this hub, requiring"], [38, "    private ArchiveService archiveService;"], [39, ""], [40, "    // initialization flags preventing multiple initializations"], [41, "    private boolean initDockerAccess = false;"], [42, "    private boolean initBase = false;"], [43, ""], [44, "    // logger to use"], [45, "    private Logger logger;"], [52, "     * @param logOutputSpecFactory factory for how to do logging"], [54, "    public synchronized void init(Logger log, LogOutputSpecFactory logOutputSpecFactory) {"], [55, "        if (!initBase) {"], [57, "            this.logger = log;"], [59, "            archiveService = new ArchiveService(dockerAssemblyManager, logger);"], [60, "            initBase = true;"], [61, "        }"], [62, "    }"], [63, ""], [64, "    public synchronized void initDockerAccess(DockerAccess dockerAccess) {"], [65, "        if (!initDockerAccess) {"], [66, "            checkBaseInitialization();"], [67, "            queryService = new QueryService(dockerAccess, logger);"], [68, "            runService = new RunService(dockerAccess, queryService, containerTracker, logOutputSpecFactory, logger);"], [69, "            buildService = new BuildService(dockerAccess, queryService, archiveService, logger);"], [70, "            initDockerAccess = true;"], [80, "        checkBaseInitialization();"], [84, "    /**"], [85, "     * Service for doing the build against a Docker daemon"], [86, "     *"], [87, "     * @return get the build service"], [88, "     */"], [90, "        checkDockerAccessInitialization();"], [93, ""], [94, ""], [101, "        checkDockerAccessInitialization();"], [111, "        checkDockerAccessInitialization();"], [116, "    public ArchiveService getArchiveService() {"], [117, "        checkBaseInitialization();"], [118, "        return archiveService;"], [121, "    /**"], [122, "     * Get the specification for how to do logging"], [123, "     *"], [124, "     * @return log specification"], [125, "     */"], [127, "        checkBaseInitialization();"], [130, ""], [131, "    // ==========================================================="], [132, ""], [133, "    private synchronized void checkDockerAccessInitialization() {"], [134, "        if (!initDockerAccess) {"], [135, "            throw new IllegalStateException(\"Service hub not yet initialized with docker access\");"], [136, "        }"], [137, "    }"], [138, ""], [139, "    private void checkBaseInitialization() {"], [140, "        if (!initBase) {"], [141, "            throw new IllegalStateException(\"Service hub not yet initialized\");"], [142, "        }"], [143, "    }"]], "deleted": [[32, "    // Services managed by this hub"], [37, ""], [39, "    // initialization flag preventing multiple initializations"], [40, "    private boolean initDone = false;"], [46, "     * @param dockerAccess the docker access object"], [49, "    public synchronized void init(DockerAccess dockerAccess, Logger log, LogOutputSpecFactory logOutputSpecFactory) {"], [50, "        if (!initDone) {"], [53, "            queryService = new QueryService(dockerAccess, log);"], [54, "            runService = new RunService(dockerAccess, queryService, containerTracker, logOutputSpecFactory, log);"], [55, "            buildService = new BuildService(dockerAccess, queryService, dockerAssemblyManager, log);"], [56, "            initDone = true;"], [66, "        checkInitialization();"], [71, "        checkInitialization();"], [74, ""], [81, "        checkInitialization();"], [91, "        checkInitialization();"], [95, "    // ==========================================================="], [97, "    private synchronized void checkInitialization() {"], [98, "        if (!initDone) {"], [99, "            throw new IllegalStateException(\"Service hub not yet initialized\");"], [100, "        }"]]}, "num_lines_added": 59, "num_lines_removed": 21}