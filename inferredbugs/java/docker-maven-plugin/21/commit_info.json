{"hash": "dcf9dbf21b001463bf2c8e0df9f2a01962bf2cdc", "message": "Tuned SaveMojo a bit\n\n* Allow an no-argument call to docker:save by chosing sane defaults\n* Reused ArchiveCompression for selecting the compression mode\n\nand a bit more", "file_num_lines": 106, "diff_parsed": {"added": [[4, "import java.util.ArrayList;"], [7, "import io.fabric8.maven.docker.config.ArchiveCompression;"], [8, "import io.fabric8.maven.docker.util.ImageName;"], [22, ""], [23, "\tprivate final static ArchiveCompression STANDARD_ARCHIVE_COMPRESSION = ArchiveCompression.gzip;"], [24, ""], [30, ""], [36, ""], [39, ""], [42, ""], [48, "\t\tif (skip) {"], [49, "\t\t\treturn;"], [50, "\t\t}"], [51, ""], [52, "\t\tString imageName = getImageName();"], [53, "\t\tString fileName = getFileName(imageName);"], [54, "\t\tlog.info(\"Saving image %s to %s\", imageName, fileName);"], [55, "\t\tif (!serviceHub.getQueryService().hasImage(imageName)) {"], [56, "\t\t\tthrow new MojoExecutionException(\"No image \" + imageName + \" exists\");"], [58, ""], [59, "\t\tserviceHub.getDockerAccess().saveImage(imageName, fileName, ArchiveCompression.fromFileName(fileName));"], [60, ""], [61, "\t\tif (attach) {"], [62, "\t\t\tattachSaveArchive();"], [63, "\t\t}"], [64, ""], [65, "\t}"], [66, ""], [67, "\tprivate String getFileName(String iName) throws MojoExecutionException {"], [68, "\t\tif (file != null) {"], [69, "\t\t\treturn file;"], [70, "\t\t}"], [71, "\t\tif (alias != null) {"], [72, "\t\t\treturn alias + \".\" + STANDARD_ARCHIVE_COMPRESSION.getFileSuffix();"], [73, "\t\t}"], [74, "\t\tImageName imageName = new ImageName(iName);"], [75, "\t\treturn imageName.getSimpleName() + (\"latest\".equals(imageName.getTag()) ? \"\" : \"-\" + imageName.getTag())"], [76, "\t\t\t   + \".\" + STANDARD_ARCHIVE_COMPRESSION.getFileSuffix();"], [77, "\t}"], [78, ""], [79, "\tprivate String getImageName() throws MojoExecutionException {"], [81, "\t\t// specify image by name or alias"], [82, "\t\tif (name == null && alias == null) {"], [83, "\t\t\tList<ImageConfiguration> buildImages = getImagesWithBuildConfig(images);"], [84, "\t\t\tif (buildImages.size() == 1) {"], [85, "\t\t\t\treturn buildImages.get(0).getName();"], [87, "\t\t\tthrow new MojoExecutionException(\"If more than one image with build configuration is defined, \" +"], [88, "\t\t\t\t\t\t\t\t\t\t\t \"then 'name' or 'alias' is required.\");"], [90, "\t\tif (name != null && alias != null) {"], [91, "\t\t\tthrow new MojoExecutionException(\"Cannot specify both name and alias.\");"], [93, "\t\tfor (ImageConfiguration ic : images) {"], [94, "\t\t\tif (equalName(ic) || equalAlias(ic)) {"], [95, "\t\t\t\treturn ic.getName();"], [98, "\t\tthrow new MojoExecutionException(\"Cannot find image with name or alias \" + (name != null ? name : alias));"], [101, "\tprivate List<ImageConfiguration> getImagesWithBuildConfig(List<ImageConfiguration> images) {"], [102, "\t\tList<ImageConfiguration> ret = new ArrayList<>();"], [103, "\t\tfor (ImageConfiguration image : images) {"], [104, "\t\t\tif (image.getBuildConfiguration() != null) {"], [105, "\t\t\t\tret.add(image);"], [106, "\t\t\t}"], [108, "\t\treturn ret;"], [109, "\t}"], [111, "\tprivate void attachSaveArchive() {"], [112, "\t\tFile fileObj = new File(file);"], [113, "\t\tif (fileObj.exists()) {"], [114, "            String type = FilenameUtils.getExtension(file);"], [115, "            if (classifier != null) {"], [116, "                projectHelper.attachArtifact(project, type, classifier, fileObj);"], [117, "            } else {"], [118, "                projectHelper.attachArtifact(project, type, fileObj);"], [119, "            }"], [121, "\t}"], [123, "\tprivate boolean equalAlias(ImageConfiguration ic) {"], [124, "\t\treturn alias != null && alias.equals(ic.getAlias());"], [127, "\tprivate boolean equalName(ImageConfiguration ic) {"], [128, "\t\treturn name != null && name.equals(ic.getName());"], [129, "\t}"]], "deleted": [[19, ""], [25, ""], [31, ""], [34, ""], [37, ""], [43, "\t\tif (file == null) {"], [44, "            throw new MojoExecutionException(\"'file' is required.\");"], [45, "        }"], [46, "        if (name == null && alias == null) {"], [47, "            throw new MojoExecutionException(\"'name' or 'alias' is required.\");"], [48, "        }"], [49, "\t\t// specify image by name or alias"], [50, "\t\tif (name != null && alias != null) {"], [51, "\t\t\tthrow new MojoExecutionException(\"Cannot specify both name and alias.\");"], [54, ""], [55, "\t\tImageConfiguration image = null;"], [56, "\t\tfor (ImageConfiguration ic : images) {"], [57, "\t\t\tif (name != null && name.equals(ic.getName())) {"], [58, "\t\t\t\timage = ic;"], [59, "\t\t\t\tbreak;"], [60, "\t\t\t}"], [61, "\t\t\tif (alias != null && alias.equals(ic.getAlias())) {"], [62, "\t\t\t\timage = ic;"], [63, "\t\t\t\tbreak;"], [66, ""], [67, "\t\tif (serviceHub.getQueryService().getImageId(image.getName()) == null) {"], [68, "\t\t\tthrow new MojoExecutionException(\"No image found for \" + image.getName());"], [70, ""], [71, "\t\tserviceHub.getDockerAccess().saveImage(image.getName(), file, detectCompression(file));"], [72, ""], [73, "\t\tif (attach) {"], [74, "\t\t\tFile fileObj = new File(file);"], [75, "\t\t\tif (fileObj.exists()) {"], [76, "\t\t\t\tString type = FilenameUtils.getExtension(file);"], [77, "\t\t\t\tif (classifier != null) {"], [78, "\t\t\t\t\tprojectHelper.attachArtifact(project, type, classifier, fileObj);"], [79, "\t\t\t\t} else {"], [80, "\t\t\t\t\tprojectHelper.attachArtifact(project, type, fileObj);"], [81, "\t\t\t\t}"], [84, ""], [87, "\tprivate String detectCompression(String filename) throws MojoExecutionException {"], [88, "\t\tif (filename.endsWith(\".gz\")) {"], [89, "\t\t\treturn \"gz\";"], [92, "        if (filename.endsWith(\".bz\") || filename.endsWith(\".bzip2\")) {"], [93, "            return \"bz\";"], [96, "\t\tif (filename.endsWith(\".tar\")) {"], [97, "\t\t\treturn \"\";"], [98, "\t\t}"], [99, ""], [100, "\t\tthrow new MojoExecutionException(\"Unsupported file type in : \" + filename);"]]}, "num_lines_added": 77, "num_lines_removed": 50}