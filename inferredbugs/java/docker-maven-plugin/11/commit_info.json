{"hash": "2f47e916f4b41567ebc5803a3e12b07a81cea09f", "message": "Refactor ServiceHub\n\nIn order to avoid dangerous and tedious state management for the initialization of ServiceHub, the ServiceHub is now created for each run afresh from a ServiceHubFactory which is needed because of collection Maven dependencies (hence it is configured as a component).\n\nThis will allow multiple docker host configurations again and will fix #320.\n\nSome minor cleanup is probably still needed.\n\nServiceHub should probably called DmpContext as it is now the context given through from which all backend services (which are stateful because of the DockerUrl) are reachable.", "file_num_lines": 61, "diff_parsed": {"added": [[1, "package org.jolokia.docker.maven.service;/*"], [2, " *"], [3, " * Copyright 2015 Roland Huss"], [4, " *"], [5, " * Licensed under the Apache License, Version 2.0 (the \"License\");"], [6, " * you may not use this file except in compliance with the License."], [7, " * You may obtain a copy of the License at"], [8, " *"], [9, " *       http://www.apache.org/licenses/LICENSE-2.0"], [10, " *"], [11, " * Unless required by applicable law or agreed to in writing, software"], [12, " * distributed under the License is distributed on an \"AS IS\" BASIS,"], [13, " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."], [14, " * See the License for the specific language governing permissions and"], [15, " * limitations under the License."], [16, " */"], [29, " &"], [30, " * @author roland"], [31, " * @since 01/12/15"], [35, "    private final DockerAccess dockerAccess;"], [37, "    private final LogOutputSpecFactory logSpecFactory;"], [38, ""], [39, "    private final QueryService queryService;"], [40, "    private final RunService runService;"], [41, "    private final BuildService buildService;"], [42, "    private final MojoExecutionService mojoExecutionService;"], [43, "    private final ArchiveService archiveService;"], [45, "    ServiceHub(DockerAccess dockerAccess, ContainerTracker containerTracker, BuildPluginManager pluginManager,"], [46, "               DockerAssemblyManager dockerAssemblyManager, MavenProject project, MavenSession session,"], [47, "               Logger logger, LogOutputSpecFactory logSpecFactory) {"], [48, ""], [49, "        this.dockerAccess = dockerAccess;"], [50, "        this.logSpecFactory = logSpecFactory;"], [51, ""], [52, "        mojoExecutionService = new MojoExecutionService(project, session, pluginManager);"], [53, "        archiveService = new ArchiveService(dockerAssemblyManager, logger);"], [54, ""], [55, "        if (dockerAccess != null) {"], [57, "            runService = new RunService(dockerAccess, queryService, containerTracker, logSpecFactory, logger);"], [59, "        } else {"], [60, "            queryService = null;"], [61, "            runService = null;"], [62, "            buildService = null;"], [67, "     * Get access object for contacting the docker daemon"], [69, "     * @return docker access object"], [71, "    public DockerAccess getDockerAccess() {"], [72, "        checkDockerAccessInitialization();"], [73, "        return dockerAccess;"], [96, ""], [112, "     * Get a service for executing goals on other Maven mojos"], [114, "     * @return service for calling other mojos"], [116, "    public MojoExecutionService getMojoExecutionService() {"], [117, "        return mojoExecutionService;"], [121, "        if (dockerAccess == null) {"], [122, "            throw new IllegalStateException(\"Service hub created without a docker access to a docker daemon\");"], [126, ""]], "deleted": [[1, "package org.jolokia.docker.maven.service;"], [17, "    // Track started containers"], [18, "    private final ContainerTracker containerTracker = new ContainerTracker();"], [19, ""], [20, "    /** @component **/"], [21, "    protected BuildPluginManager pluginManager;"], [22, ""], [23, "    /** @component */"], [24, "    protected DockerAssemblyManager dockerAssemblyManager;"], [25, ""], [26, "    /** @component */"], [27, "    protected MavenProject project;"], [28, ""], [29, "    /** @component */"], [30, "    protected MavenSession session;"], [31, ""], [32, "    // Services managed by this hub, requiring"], [33, "    private MojoExecutionService mojoExecutionService;"], [34, "    private QueryService queryService;"], [35, "    private RunService runService;"], [36, "    private LogOutputSpecFactory logOutputSpecFactory;"], [37, "    private BuildService buildService;"], [38, "    private ArchiveService archiveService;"], [39, ""], [40, "    // initialization flags preventing multiple initializations"], [41, "    private boolean initDockerAccess = false;"], [42, "    private boolean initBase = false;"], [43, ""], [44, "    // logger to use"], [45, "    private Logger logger;"], [47, "    /**"], [48, "     * Lifecycle method called early in order to build up the services. It can be called multiple"], [49, "     * times but will run only once."], [50, "     *"], [51, "     * @param log logger to use"], [52, "     * @param logOutputSpecFactory factory for how to do logging"], [53, "     */"], [54, "    public synchronized void init(Logger log, LogOutputSpecFactory logOutputSpecFactory) {"], [55, "        if (!initBase) {"], [56, "            this.logOutputSpecFactory = logOutputSpecFactory;"], [57, "            this.logger = log;"], [58, "            mojoExecutionService = new MojoExecutionService(project, session, pluginManager);"], [59, "            archiveService = new ArchiveService(dockerAssemblyManager, logger);"], [60, "            initBase = true;"], [61, "        }"], [62, "    }"], [64, "    public synchronized void initDockerAccess(DockerAccess dockerAccess) {"], [65, "        if (!initDockerAccess) {"], [66, "            checkBaseInitialization();"], [68, "            runService = new RunService(dockerAccess, queryService, containerTracker, logOutputSpecFactory, logger);"], [70, "            initDockerAccess = true;"], [75, "     * Get a service for executing goals on other Maven mojos"], [77, "     * @return service for calling other mojos"], [79, "    public MojoExecutionService getMojoExecutionService() {"], [80, "        checkBaseInitialization();"], [81, "        return mojoExecutionService;"], [94, ""], [115, ""], [117, "        checkBaseInitialization();"], [122, "     * Get the specification for how to do logging"], [124, "     * @return log specification"], [126, "    public LogOutputSpecFactory getLogOutputSpecFactory() {"], [127, "        checkBaseInitialization();"], [128, "        return logOutputSpecFactory;"], [131, "    // ==========================================================="], [132, ""], [134, "        if (!initDockerAccess) {"], [135, "            throw new IllegalStateException(\"Service hub not yet initialized with docker access\");"], [139, "    private void checkBaseInitialization() {"], [140, "        if (!initBase) {"], [141, "            throw new IllegalStateException(\"Service hub not yet initialized\");"], [142, "        }"], [143, "    }"]]}, "num_lines_added": 56, "num_lines_removed": 73}