{"hash": "b4fe3351b048118ace82ebc4dbee598ad1b63c54", "message": "\u7edf\u4e00\u8f93\u51fa\u5904\u7406\uff0c\u91cd\u65b0\u8bbe\u7f6e\u83b7\u53d6\u662f\u5426rotate\u7684\u4fe1\u606f\u83b7\u53d6", "file_num_lines": 141, "diff_parsed": {"added": [[19, "    private static ProcessBuilder pb = null;"], [20, "    private static Process pro = null;"], [30, "            List<String> commands = Lists.newArrayList(BaseCommandOption.getFFprobeBinary());"], [31, "            commands.add(input.getAbsolutePath());"], [32, "//            if (log.isInfoEnabled())"], [33, "//                log.info(\"get video info commands : '{}'\", FFmpegUtils.ffmpegCmdLine(commands));"], [35, "//                pb = new ProcessBuilder();"], [36, "//                pb.command(commands);"], [37, "//"], [38, "//                pb.redirectErrorStream(true);"], [39, "//"], [40, "//"], [41, "//                pro = pb.start();"], [42, "//                BufferedReader buf = null;"], [43, "//                buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));"], [44, "//                StringBuffer sb = new StringBuffer();"], [45, "//                String line = null;"], [46, "//                while ((line = buf.readLine()) != null) {"], [47, "//                    sb.append(line);"], [48, "//                    continue;"], [49, "//                }"], [50, "//"], [51, "//                int ret = pro.waitFor();"], [52, "//                if (log.isInfoEnabled())"], [53, "//                    log.info(\"get video info process run status:'{}'\", ret);"], [55, "                VideoInfo mi = FFmpegUtils.regInfo(runProcess(commands, null));"], [66, "            } catch (Exception e) {"], [67, "                if (log.isErrorEnabled())"], [68, "                    log.error(\"video '{}' get info Exception :'{} '\", input.getAbsoluteFile(), e.getCause().getMessage());"], [69, "                e.printStackTrace();"], [90, "            List<String> commands = Lists.newArrayList(BaseCommandOption.getFFmpegBinary());"], [133, "            List<String> commands = Lists.newArrayList(BaseCommandOption.getFFmpegBinary());"], [166, ""], [167, "    private static String runProcess(List<String> commands, ProcessCallbackHandler handler) throws Exception {"], [168, "        if (log.isDebugEnabled())"], [169, "            log.debug(\"start to run ffmpeg process... cmd : '{}'\", FFmpegUtils.ffmpegCmdLine(commands));"], [170, "        pb = new ProcessBuilder();"], [171, "        pb.command(commands);"], [172, ""], [173, "        pro = pb.start();"], [174, ""], [175, "        if (null == handler) {"], [176, "            handler = new DefaultProcessCallbackHandler();"], [177, "        }"], [178, "        if (log.isInfoEnabled())"], [179, "            log.info(\"inpuStream:'{}'\", handler.handler(pro.getInputStream()));"], [180, ""], [181, "        String result = null;"], [182, "        try {"], [183, "            result = handler.handler(pro.getErrorStream());"], [184, "        } catch (Exception e) {"], [185, "            log.error(\"errorStream:{}\", result, e);"], [186, "        }"], [187, ""], [188, "        try {"], [189, "            int flag = pro.waitFor();"], [190, "            if (flag != 0) {"], [191, "                throw new IllegalThreadStateException(\"process exit with error value : \" + flag);"], [192, "            }"], [193, "        } catch (InterruptedException e) {"], [194, "            log.error(\"wait for process finish error:{}\", e);"], [195, "        } finally {"], [196, "            if (null != pro)"], [197, "                pro.destroy();"], [198, "        }"], [199, "        return result;"], [200, "    }"]], "deleted": [[19, "    public static ProcessBuilder pb = null;"], [20, "    public static Process pro = null;"], [21, ""], [22, "    private volatile static boolean isRunning = false;"], [32, "            List<String> commands = Lists.newArrayList(BaseCommandOption.getFfmpegBinary());"], [33, "            commands.addAll(BaseCommandOption.toInputCommonsCmdArrays(input.getAbsolutePath()));"], [34, "            if (log.isInfoEnabled())"], [35, "                log.info(\"get video info commands : '{}'\", FFmpegUtils.ffmpegCmdLine(commands));"], [37, "                pb = new ProcessBuilder();"], [38, "                pb.command(commands);"], [39, ""], [40, "                pb.redirectErrorStream(true);"], [41, ""], [43, "                pro = pb.start();"], [44, "                BufferedReader buf = null;"], [45, "                buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));"], [46, "                StringBuffer sb = new StringBuffer();"], [47, "                String line = null;"], [48, "                while ((line = buf.readLine()) != null) {"], [49, "                    sb.append(line);"], [50, "                    continue;"], [51, "                }"], [52, ""], [53, "                int ret = pro.waitFor();"], [54, "                if (log.isInfoEnabled())"], [55, "                    log.info(\"get video info process run status:'{}'\", ret);"], [56, "                VideoInfo mi = FFmpegUtils.regInfo(sb.toString());"], [87, "            List<String> commands = Lists.newArrayList(BaseCommandOption.getFfmpegBinary());"], [130, "            List<String> commands = Lists.newArrayList(BaseCommandOption.getFfmpegBinary());"]]}, "num_lines_added": 67, "num_lines_removed": 29}