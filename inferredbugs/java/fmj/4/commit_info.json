{"hash": "7286baf9874f1594f8bc37f0416c8ee4154a1773", "message": "WIN7\u4e0b \u6267\u884cgenerationHlsTest \u4f1a\u963b\u585e\n\u4f7f\u7528NIO FIX", "file_num_lines": 45, "diff_parsed": {"added": [[6, "import java.io.*;"], [7, "import java.nio.ByteBuffer;"], [8, "import java.nio.channels.Channels;"], [9, "import java.nio.channels.FileChannel;"], [10, "import java.nio.channels.WritableByteChannel;"], [19, "//    public String handler(InputStream errorStream) throws IOException {"], [20, "//        BufferedReader reader = new BufferedReader(new InputStreamReader(errorStream,BaseCommandOption.UTF8));"], [21, "//        StringBuffer sb = new StringBuffer();"], [22, "//        String line;"], [23, "//        try {"], [24, "//            while ((line = reader.readLine()) != null){"], [25, "//                sb.append(line).append(\"\\n\");"], [26, "//            }"], [27, "//        }catch (IOException e){"], [28, "//            log.error(\"read from process error : '{}'\",e);"], [29, "//            throw e;"], [30, "//        }finally {"], [31, "//            try {"], [32, "//                errorStream.close();"], [33, "//            }catch (IOException e){"], [34, "//                log.error(\"close errorStream error: '{}'\",e);"], [35, "//            }"], [36, "//        }"], [37, "//        setResult(sb.toString());"], [38, "//"], [39, "//        return getResult();"], [40, "//    }"], [41, "public String handler(InputStream errorStream) throws IOException {"], [42, "    FileChannel inputChannel =null;"], [43, "    if (errorStream instanceof FileInputStream) {"], [44, "        inputChannel = ((FileInputStream) errorStream).getChannel();"], [45, "    } else{"], [47, "        return \"\";"], [49, "    ByteArrayOutputStream byteArrayStream = new ByteArrayOutputStream(4096);"], [50, "    ByteBuffer buffer = ByteBuffer.allocate(4096);"], [51, "    StringBuffer sb = new StringBuffer();"], [53, "    try {"], [54, "        while (inputChannel.read(buffer) > -1) {"], [55, "            buffer.flip();"], [56, "            sb.append(buffer.get());"], [57, "            buffer.clear();"], [58, "        }"], [59, "    } catch (IOException e) {"], [60, "        // \u5f53\u811a\u672c\u6267\u884c\u8d85\u65f6\uff0c\u7531\u4e8echannel\u7684\u5173\u95ed\u5fc5\u7136\u4f1a\u629b\u51fa\u5f02\u5e38"], [61, "        log.error(\"read from process error : '{}'\",e);"], [62, "        throw e;"], [63, "    }"], [64, "    finally {"], [65, "        if(inputChannel!=null)"], [66, "            inputChannel.close();"], [67, "    }"], [68, "    setResult(sb.toString());"], [69, "    return getResult();"], [70, "}"]], "deleted": [[6, "import java.io.BufferedReader;"], [7, "import java.io.IOException;"], [8, "import java.io.InputStream;"], [9, "import java.io.InputStreamReader;"], [18, "    public String handler(InputStream errorStream) throws IOException {"], [19, "        BufferedReader reader = new BufferedReader(new InputStreamReader(errorStream,BaseCommandOption.UTF8));"], [20, "        StringBuffer sb = new StringBuffer();"], [21, "        String line;"], [22, "        try {"], [23, "            while ((line = reader.readLine()) != null){"], [24, "                sb.append(line).append(\"\\n\");"], [25, "//                if(log.isDebugEnabled())"], [26, "//                    log.debug(line);"], [27, "            }"], [28, "        }catch (IOException e){"], [29, "            log.error(\"read from process error : '{}'\",e);"], [30, "            throw e;"], [31, "        }finally {"], [32, "            try {"], [33, "                errorStream.close();"], [34, "            }catch (IOException e){"], [35, "                log.error(\"close errorStream error: '{}'\",e);"], [36, "            }"], [37, "        }"], [38, "        setResult(sb.toString());"], [40, "        return getResult();"]]}, "num_lines_added": 54, "num_lines_removed": 26}