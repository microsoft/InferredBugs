{"hash": "07ac417b78f779caf36b0c232fbd0914f889a114", "message": "add batch inserts using bulk api", "file_num_lines": 103, "diff_parsed": {"added": [[4, "import com.tinkerpop.gremlin.elastic.elasticservice.*;"], [22, "        config.addProperty(\"elasticsearch.cluster.name\", \"test\");"], [23, "        config.addProperty(\"elasticsearch.index.name\", \"graph\");"], [25, "        config.addProperty(\"elasticsearch.client\", ElasticService.ClientType.NODE);"], [26, ""], [29, ""], [45, "        graph.close();"], [46, ""], [56, "        config.addProperty(\"elasticsearch.client\", ElasticService.ClientType.NODE);"], [57, ""], [58, "        startWatch(\"graph initalization\");"], [59, "        ElasticGraph graph = new ElasticGraph(config);"], [60, "        stopWatch(\"graph initalization\");"], [61, "        ((DefaultSchemaProvider)graph.elasticService.schemaProvider).clearAllData();"], [62, ""], [63, "        startWatch(\"add vertices\");"], [64, "        int count = 10000;"], [65, "        for(int i = 0; i < count; i++)"], [66, "            graph.addVertex();"], [67, "        stopWatch(\"add vertices\");"], [68, ""], [69, "        startWatch(\"vertex iterator\");"], [70, "        Iterator<Vertex> vertexIterator = graph.iterators().vertexIterator();"], [71, "        stopWatch(\"vertex iterator\");"], [72, ""], [73, "        startWatch(\"add edges\");"], [74, "        vertexIterator.forEachRemaining(v -> v.addEdge(\"bla\", v));"], [75, "        stopWatch(\"add edges\");"], [76, ""], [77, "        startWatch(\"edge iterator\");"], [78, "        Iterator<Edge> edgeIterator = graph.iterators().edgeIterator();"], [79, "        stopWatch(\"edge iterator\");"], [80, ""], [81, "        sw.print();"], [82, "        System.out.println(\"-----\");"], [83, "        graph.close();"], [84, "    }"], [85, ""], [86, "    @Test"], [87, "    public void batchLoad() throws IOException {"], [88, "        BaseConfiguration config = new BaseConfiguration();"], [89, "        config.addProperty(Graph.GRAPH, ElasticGraph.class.getName());"], [90, "        config.addProperty(\"elasticsearch.cluster.name\", \"test\");"], [91, "        config.addProperty(\"elasticsearch.index.name\", \"graph\");"], [92, "        config.addProperty(\"elasticsearch.refresh\", true);"], [93, "        config.addProperty(\"elasticsearch.batch\", true);"], [94, "        config.addProperty(\"elasticsearch.client\", ElasticService.ClientType.NODE);"], [99, "        ((DefaultSchemaProvider)graph.elasticService.schemaProvider).clearAllData();"], [105, "        graph.commit();"], [108, ""], [115, "        graph.commit();"]], "deleted": [[4, "import com.tinkerpop.gremlin.elastic.elasticservice.DefaultSchemaProvider;"], [5, "import com.tinkerpop.gremlin.elastic.elasticservice.ElasticService;"], [7, "import com.tinkerpop.gremlin.elastic.elasticservice.TimingAccessor;"], [9, "import com.tinkerpop.gremlin.process.graph.GraphTraversal;"], [10, "import com.tinkerpop.gremlin.process.graph.step.filter.GroovyHasNotTest;"], [11, "import com.tinkerpop.gremlin.process.graph.step.filter.GroovyHasTest;"], [27, "        config.addProperty(Graph.GRAPH, ElasticGraph.class.getName());"], [28, "        config.addProperty(\"elasticsearch.cluster.name\", \"test2\");"], [29, "        String indexName = \"graph2\";"], [30, "        config.addProperty(\"elasticsearch.index.name\", indexName.toLowerCase());"], [31, "        config.addProperty(\"elasticsearch.local\", true);"], [33, "        config.addProperty(\"elasticsearch.client\", \"NODE\");"], [60, "        config.addProperty(\"elasticsearch.client\", ElasticService.ClientType.NODE.toString());"], [86, "        graph.elasticService.collectData();"]]}, "num_lines_added": 51, "num_lines_removed": 14}