    public static void buildSysGenProfilingFile() {
        long startMills = System.currentTimeMillis();
        String filePath = ProfilingConfig.getInstance().getSysProfilingParamsFile();
        String tempFilePath = filePath + "_tmp";
        File tempFile = new File(tempFilePath);
        try (BufferedWriter fileWriter = new BufferedWriter(new FileWriter(tempFile, false), 8 * 1024)) {
            fileWriter.write("#This is a file automatically generated by MyPerf4J, please do not edit!\n");

            MethodTagMaintainer tagMaintainer = MethodTagMaintainer.getInstance();
            Map<Integer, MethodMetricsInfo> methodMap = MethodMetricsHistogram.methodMap;
            for (Map.Entry<Integer, MethodMetricsInfo> entry : methodMap.entrySet()) {
                Integer methodId = entry.getKey();
                MethodMetricsInfo info = entry.getValue();
                if (info.getCount() <= 0) {
                    continue;
                }

                MethodTag methodTag = tagMaintainer.getMethodTag(methodId);
                fileWriter.write(methodTag.getFullDesc());
                fileWriter.write('=');

                int mostTimeThreshold = calMostTimeThreshold(info);
                fileWriter.write(mostTimeThreshold + ":" + calOutThresholdCount(mostTimeThreshold));
                fileWriter.newLine();
            }
            fileWriter.flush();

            File destFile = new File(filePath);
            boolean rename = tempFile.renameTo(destFile);
            Logger.debug("MethodMetricsHistogram.buildSysGenProfilingFile(): rename " + tempFile.getName() + " to " + destFile.getName() + " " + (rename ? "success" : "fail"));
        } catch (Exception e) {
            Logger.error("MethodMetricsHistogram.buildSysGenProfilingFile()", e);
        } finally {
            Logger.debug("MethodMetricsHistogram.buildSysGenProfilingFile() finished, cost=" + (System.currentTimeMillis() - startMills) + "ms");
        }
    }