{"hash": "24883a61704f78a952e948c429f63c4a2ab39912", "message": "Change YamlConfiguration encoding styles.\n\nOn JVMs with UTF-8 default encoding, this commit has no change in behavior.\n\nOn JVMs with ascii default encoding (like some minimal linux installa-\ntions), this commit now uses UTF-8 for YamlConfiguration operations.\nBecause all ascii is valid UTF-8, there is no feature degradation or data\nloss during the transition.\n\nOn JVMs with any non-unicode but ascii-compliant encoding, this commit now\nforces YamlConfiguration to escape special characters when writing to\nfiles, effectively rendering the encoding to be plain ascii. Any affected\nfile will now be able to migrate to UTF-8 in the future without data-loss\nor explicit conversion. When reading files, YamlConfiguration will use the\nsystem default encoding to handle any incoming non-utf8 data, with the\nexpectation that any newly written file is still compliant with the\nsystem's default encoding.\n\nOn JVMs with any non-unicode, but ascii-incompliant encoding (this may be\nthe case for some Eastern character sets on Windows systems), this change\nis breaking, but is justified in claim that these systems would otherwise\nbe unable to read YamlConfiguration for implementation dependent settings\nor from plugins themselves. For these systems, all uses of the encoding\nwill be forced to use UTF-8 in all cases, and is effectively treated as if\nit was configured to be UTF-8 by default.\n\nOn JVMs with unicode encoding of UTF-16 or UTF-32, the ability to load any\nconfigurations from almost any source prior to this change would have been\nunfeasible, if not impossible. As of this change, however, these systems\nnow behave as expected when writing or reading files. However, when\nreading from any plugin jar, UTF-8 will be used, matching a super-majority\nof plugin developer base and requirements for the plugin.yml.\n\nPlugin developers may now mark their plugin as UTF-8 compliant, as\ndocumented in the PluginDescriptionFile class. This change will cause the\nappropriate APIs in JavaPlugin to ignore any system default encoding,\ninstead using a Reader with the UTF-8 encoding, effectively rendering the\njar system independent. This does not affect the aformentioned JVM\nsettings for reading and writing files.\n\nTo coincide with these changes, YamlConfiguration methods that utilize a\nstream are now deprecated to encourage use of a more strict denotation.\nFile methods carry system-specific behaviors to prevent unncessary data\nloss during the transitional phase, while Reader methods are now provided\nthat have a very well-defined encoder behavior. For the transition from\nInputStream methods to Reader methods, an API has been added to JavaPlugin\nto provide a Reader that matches the previous behavior as well as\ncompliance to the UTF-8 flag in the PluginDescriptionFile.\n\nAddresses BUKKIT-314, BUKKIT-1466, BUKKIT-3377", "file_num_lines": 97, "diff_parsed": {"added": [[3, "import com.google.common.base.Charsets;"], [8, ""], [13, "import java.io.FileOutputStream;"], [17, "import java.io.OutputStreamWriter;"], [18, "import java.io.Reader;"], [19, "import java.io.Writer;"], [20, "import java.nio.charset.Charset;"], [21, ""], [24, "import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;"], [32, "     * This value specified that the system default encoding should be"], [33, "     * completely ignored, as it cannot handle the ASCII character set, or it"], [34, "     * is a strict-subset of UTF8 already (plain ASCII)."], [35, "     *"], [36, "     * @deprecated temporary compatibility measure"], [37, "     */"], [38, "    @Deprecated"], [39, "    public static final boolean UTF8_OVERRIDE;"], [40, "    /**"], [41, "     * This value specifies if the system default encoding is unicode, but"], [42, "     * cannot parse standard ASCII."], [43, "     *"], [44, "     * @deprecated temporary compatibility measure"], [45, "     */"], [46, "    @Deprecated"], [47, "    public static final boolean UTF_BIG;"], [48, "    /**"], [49, "     * This value specifies if the system supports unicode."], [50, "     *"], [51, "     * @deprecated temporary compatibility measure"], [52, "     */"], [53, "    @Deprecated"], [54, "    public static final boolean SYSTEM_UTF;"], [55, "    static {"], [56, "        final byte[] testBytes = Base64Coder.decode(\"ICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX4NCg==\");"], [57, "        final String testString = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\r\\n\";"], [58, "        final Charset defaultCharset = Charset.defaultCharset();"], [59, "        final String resultString = new String(testBytes, defaultCharset);"], [60, "        final boolean trueUTF = defaultCharset.name().contains(\"UTF\");"], [61, "        UTF8_OVERRIDE = !testString.equals(resultString) || defaultCharset.equals(Charset.forName(\"US-ASCII\"));"], [62, "        SYSTEM_UTF = trueUTF || UTF8_OVERRIDE;"], [63, "        UTF_BIG = trueUTF && UTF8_OVERRIDE;"], [64, "    }"], [65, ""], [66, "    /**"], [89, "     * <p>"], [90, "     * This method will save using the system default encoding, or possibly"], [91, "     * using UTF8."], [105, "        Writer writer = new OutputStreamWriter(new FileOutputStream(file), UTF8_OVERRIDE && !UTF_BIG ? Charsets.UTF_8 : Charset.defaultCharset());"], [120, "     * <p>"], [121, "     * This method will save using the system default encoding, or possibly"], [122, "     * using UTF8."], [151, "     * <p>"], [152, "     * This will attempt to use the {@link Charset#defaultCharset()} for"], [153, "     * files, unless {@link #UTF8_OVERRIDE} but not {@link #UTF_BIG} is"], [154, "     * specified."], [167, "        final FileInputStream stream = new FileInputStream(file);"], [168, ""], [169, "        load(new InputStreamReader(stream, UTF8_OVERRIDE && !UTF_BIG ? Charsets.UTF_8 : Charset.defaultCharset()));"], [178, "     * <p>"], [179, "     * This will attempt to use the {@link Charset#defaultCharset()}, unless"], [180, "     * {@link #UTF8_OVERRIDE} or {@link #UTF_BIG} is specified."], [187, "     * @deprecated This does not consider encoding"], [188, "     * @see #load(Reader)"], [190, "    @Deprecated"], [194, "        load(new InputStreamReader(stream, UTF8_OVERRIDE ? Charsets.UTF_8 : Charset.defaultCharset()));"], [195, "    }"], [196, ""], [197, "    /**"], [198, "     * Loads this {@link FileConfiguration} from the specified reader."], [199, "     * <p>"], [200, "     * All the values contained within this configuration will be removed,"], [201, "     * leaving only settings and defaults, and the new values will be loaded"], [202, "     * from the given stream."], [203, "     *"], [204, "     * @param reader the reader to load from"], [205, "     * @throws IOException thrown when underlying reader throws an IOException"], [206, "     * @throws InvalidConfigurationException thrown when the reader does not"], [207, "     *      represent a valid Configuration"], [208, "     * @throws IllegalArgumentException thrown when reader is null"], [209, "     */"], [210, "    public void load(Reader reader) throws IOException, InvalidConfigurationException {"], [211, "        BufferedReader input = reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);"], [213, "        StringBuilder builder = new StringBuilder();"]], "deleted": [[11, "import java.io.FileWriter;"], [59, "        FileWriter writer = new FileWriter(file);"], [114, "        load(new FileInputStream(file));"], [133, "        InputStreamReader reader = new InputStreamReader(stream);"], [134, "        StringBuilder builder = new StringBuilder();"], [135, "        BufferedReader input = new BufferedReader(reader);"]]}, "num_lines_added": 83, "num_lines_removed": 6}