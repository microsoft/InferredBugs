    private void commonInitialization(IntVar[] list, int[] weights, IntVar sum) {

        queueIndex = 1;

        assert (list.length == weights.length) : "\nLength of two vectors different in SumWeight";

        numberArgs = (short) (list.length + 1);

        numberId = idNumber.incrementAndGet();

        this.sum = sum;

        HashMap<IntVar, Integer> parameters = new HashMap<IntVar, Integer>();

        for (int i = 0; i < list.length; i++) {

            assert (list[i] != null) : i + "-th element of list in SumWeighted constraint is null";

            if (parameters.get(list[i]) != null) {
                // variable ordered in the scope of the Sum Weight constraint.
                Integer coeff = parameters.get(list[i]);
                Integer sumOfCoeff = coeff + weights[i];
                parameters.put(list[i], sumOfCoeff);
            } else
                parameters.put(list[i], weights[i]);

        }

        assert (parameters.get(sum) == null) : "Sum variable is used in both sides of SumeWeight constraint.";

        this.list = new IntVar[parameters.size()];
        this.weights = new int[parameters.size()];

        int i = 0;
        for (Map.Entry<IntVar,Integer> e : parameters.entrySet()) {
	    this.list[i] = e.getKey();
            this.weights[i] = e.getValue();
            i++;
        }

        checkForOverflow();

    }