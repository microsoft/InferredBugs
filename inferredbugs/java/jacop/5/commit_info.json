{"hash": "aeda9c7f68f94c9945af310ae1986c1497d8e489", "message": "Adding methods to class MinizincBasedTestHelper", "file_num_lines": 34, "diff_parsed": {"added": [[35, "        return fileReader();"], [40, "        testExecution();"], [48, ""]], "deleted": [[28, "//    private String testFilename;"], [29, "//    private static Fz2jacop fz2jacop;"], [30, "//    private static final String relativePath = \"src/test/fz/\";"], [31, "//    private static final String timeCategory = \"upTo5sec/\";"], [32, "//    private static final String listFileName = \"list.txt\";"], [33, "//    private static final boolean printInfo = true;"], [34, ""], [35, "//    @BeforeClass"], [36, "//    public static void initialize() {"], [37, "//        fz2jacop = new Fz2jacop();"], [38, "//    }"], [39, ""], [47, "        FileReader file = new FileReader(relativePath + timeCategory + listFileName);"], [48, "        BufferedReader br = new BufferedReader(file);"], [49, "        String line = \"\";"], [50, "        List<String> list = new ArrayList<String>();"], [51, "        int i = 0;"], [52, "        while ((line = br.readLine())!=null) {"], [53, "            list.add(i, line);"], [54, "            i++;"], [55, "        }"], [56, "        return list;"], [61, "        List<String> expectedResult = new ArrayList<>();"], [62, "        List<String> result = new ArrayList<>();"], [63, ""], [64, "        System.out.println(\"Test file: \" + timeCategory + testFilename);"], [65, "        expectedResult = expected(timeCategory + testFilename + \".out\");"], [66, "        result = result(timeCategory + testFilename + \".fzn\");"], [67, ""], [68, "        for (int i = 0, j = 0; i < result.size() || j < expectedResult.size();) {"], [69, "            if (i < result.size() && result.get(i).trim().isEmpty() )"], [70, "                { i++; continue;}"], [71, "            if (j < expectedResult.size() && expectedResult.get(j).trim().isEmpty() )"], [72, "                { j++; continue;}"], [73, "            if (result.size() == i)"], [74, "                fail(\"\\n\" + \"File path: \" + timeCategory + testFilename + \".out \" + \" gave as a result less textlines that was expected. Expected line \" + (j+1) + \" not found.\");"], [75, "            if (expectedResult.size() == j)"], [76, "                fail(\"\\n\" + \"File path: \" + timeCategory + testFilename + \".out \" + \" gave as a result more textlines that was expected. Actual line \" + (i + 1) + \"not found in expected result\");"], [77, ""], [78, "            assertEquals(\"\\n\" + \"File path: \" + timeCategory + testFilename + \".out \" + \"\\nError line number (expected, actual): (\" + (j + 1) + \",\" + (i + 1) + \")\\n\","], [79, "                    expectedResult.get(j).trim(), result.get(i).trim());"], [80, "            i++; j++;"], [81, "        }"], [84, "    /*public static List<String> result(String filename) {"], [85, ""], [86, "        ByteArrayOutputStream baos = new ByteArrayOutputStream();"], [87, "        PrintStream old = System.out;"], [88, "        System.setOut(new PrintStream(baos));"], [89, ""], [90, ""], [91, "        fz2jacop.main(new String[]{relativePath + filename });"], [92, ""], [93, "        System.out.flush();"], [94, "        System.setOut(old);"], [95, ""], [96, "        String result = baos.toString();"], [97, "        if(printInfo) {"], [98, "            System.out.println(filename+\"\\n\" + result);"], [99, "        }"], [100, ""], [101, "        return Arrays.asList(result.split(\"\\n\"));"], [102, "    }"], [103, ""], [104, ""], [110, "*/"]]}, "num_lines_added": 3, "num_lines_removed": 65}