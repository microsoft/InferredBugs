{"hash": "c68bec5cbc3f3fc5cbdd72750f594b92b589921f", "message": "Adding checking for duplicated variables for constraints that require no duplicates (for example, Among, AmongVar, Binpacking).\nAdding a table for variables created for constants (constraints require them) and assuring that they will be created once. For several constraints (for example, Among, AmongVar, Binpacking) adding list rewriting that constants are not duplicated (duplicated constants for these constraints will make constraint failing or providing wrong results).", "file_num_lines": 2772, "diff_parsed": {"added": [[34, "import java.util.HashSet;"], [87, "    // IntVar zero, one;"], [190, " \t// this.zero = table.zero;"], [191, "\t// this.one = table.one;"], [587, "\t\t\t    sat.generate_xor(a1, dictionary.getConstant(1)); // one);"], [589, "\t\t\t    pose(new XorBool(a1, dictionary.getConstant(1))); // one));"], [831, "\t\t\t    c = new AndBool(a2reduced, dictionary.getConstant(0)); // zero);"], [833, "\t\t\t    c = new OrBool(a1reduced, dictionary.getConstant(1)); // one);"], [1163, "\t\t    // ---- KK, 2015-10-17"], [1164, "\t\t    // among must not have duplicated variables there"], [1165, "\t\t    // could be constants that have the same value and"], [1166, "\t\t    // are duplicated."], [1167, "\t\t    IntVar[] xx = new IntVar[x.length];"], [1168, "\t\t    HashSet<IntVar> varSet = new HashSet<IntVar>();"], [1169, "\t\t    for (int i = 0; i < x.length; i++) {"], [1170, "\t\t\tif (varSet.contains(x[i]) && x[i].singleton())"], [1171, "\t\t\t    xx[i] = new IntVar(store, x[i].min(), x[i].max());"], [1172, "\t\t\telse {"], [1173, "\t\t\t    xx[i] = x[i];"], [1174, "\t\t\t    varSet.add(x[i]);"], [1175, "\t\t\t}"], [1176, "\t\t    }"], [1177, "\t\t    IntVar[] ss = new IntVar[s.length];"], [1178, "\t\t    varSet = new HashSet<IntVar>();"], [1179, "\t\t    for (int i = 0; i < s.length; i++) {"], [1180, "\t\t\tif (varSet.contains(s[i]) && s[i].singleton())"], [1181, "\t\t\t    ss[i] = new IntVar(store, s[i].min(), s[i].max());"], [1182, "\t\t\telse {"], [1183, "\t\t\t    ss[i] = s[i];"], [1184, "\t\t\t    varSet.add(s[i]);"], [1185, "\t\t\t}"], [1186, "\t\t    }"], [1187, "\t\t    IntVar vv;"], [1188, "\t\t    if (varSet.contains(v) && v.singleton())"], [1189, "\t\t\tvv = new IntVar(store, v.min(), v.max());"], [1190, "\t\t    else"], [1191, "\t\t\tvv = v;"], [1192, "\t\t    //----"], [1193, ""], [1194, ""], [1195, "\t\t    delayedConstraints.add(new AmongVar(xx, ss, vv));"], [1203, "\t\t    // ---- KK, 2015-10-17"], [1204, "\t\t    // among must not have duplicated variables. In x vecor"], [1205, "\t\t    // could be constants that have the same value and"], [1206, "\t\t    // are duplicated."], [1207, "\t\t    IntVar[] xx = new IntVar[x.length];"], [1208, "\t\t    HashSet<IntVar> varSet = new HashSet<IntVar>();"], [1209, "\t\t    for (int i = 0; i < x.length; i++) {"], [1210, "\t\t\tif (varSet.contains(x[i]) && x[i].singleton())"], [1211, "\t\t\t    xx[i] = new IntVar(store, x[i].min(), x[i].max());"], [1212, "\t\t\telse {"], [1213, "\t\t\t    xx[i] = x[i];"], [1214, "\t\t\t    varSet.add(x[i]);"], [1215, "\t\t\t}"], [1216, "\t\t    }"], [1217, "\t\t    IntVar vv;"], [1218, "\t\t    if (varSet.contains(v) && v.singleton())"], [1219, "\t\t\tvv = new IntVar(store, v.min(), v.max());"], [1220, "\t\t    else"], [1221, "\t\t\tvv = v;"], [1222, "\t\t    //----"], [1231, "\t\t    pose(new Among(xx, setImpl, vv));"], [1410, "\t\t    /* it seems that it is does not needed since mapping in Regular"], [1411, "\t\t       is only used to queue variables and identify them; constant variables"], [1412, "\t\t       will never be queued"], [1413, ""], [1414, "\t\t    // regular must not have duplicated variables. In x vecor"], [1415, "\t\t    // could be constants that have the same value and"], [1416, "\t\t    // are duplicated."], [1417, "\t\t    IntVar[] xx = new IntVar[x.length];"], [1418, "\t\t    HashSet<IntVar> varSet = new HashSet<IntVar>();"], [1419, "\t\t    for (int i = 0; i < x.length; i++) {"], [1420, "\t\t\tif (varSet.contains(x[i]) && x[i].singleton())"], [1421, "\t\t\t    xx[i] = new IntVar(store, x[i].min(), x[i].max());"], [1422, "\t\t\telse {"], [1423, "\t\t\t    xx[i] = x[i];"], [1424, "\t\t\t    varSet.add(xx[i]);"], [1425, "\t\t\t}"], [1426, "\t\t    }"], [1427, "\t\t    //----"], [1428, "\t\t    */"], [1429, ""], [1587, "\t\t    // ---- KK, 2015-10-18"], [1588, "\t\t    // bin_packing must not have duplicated variables. on x vecor"], [1589, "\t\t    // could be constants that have the same value and"], [1590, "\t\t    // are duplicated."], [1591, "\t\t    IntVar[] binx = new IntVar[bin.length];"], [1592, "\t\t    HashSet<IntVar> varSet = new HashSet<IntVar>();"], [1593, "\t\t    for (int i = 0; i < bin.length; i++) {"], [1594, "\t\t\tif (varSet.contains(bin[i]) && bin[i].singleton())"], [1595, "\t\t\t    binx[i] = new IntVar(store, bin[i].min(), bin[i].max());"], [1596, "\t\t\telse {"], [1597, "\t\t\t    binx[i] = bin[i];"], [1598, "\t\t\t    varSet.add(bin[i]);"], [1599, "\t\t\t}"], [1600, "\t\t    }"], [1601, ""], [1602, "   \t\t    pose( new org.jacop.constraints.binpacking.Binpacking(binx, capacity, w) );"], [1761, "\t    c = new XplusCeqZ(v1, p2.getInt(), dictionary.getConstant(0)); // zero);"], [1765, "\t    c = new XplusCeqZ(v2, p1.getInt(), dictionary.getConstant(0)); // zero);"], [1770, "\t    c = new XplusYeqZ(v1, v2, dictionary.getConstant(0)); // zero);"], [2558, "\t\t\t// pose(new Reified(new XmulCeqZ(p2[0], p1[0], new IntVar(store, p3,p3)), p4));"], [2559, "\t\t\tpose(new Reified(new XmulCeqZ(p2[0], p1[0], dictionary.getConstant(p3)), p4));"], [2611, "\t\t    t = dictionary.getConstant(p3); // new IntVar(store, p3, p3);"], [2618, "\t\t    t = dictionary.getConstant(-p3); // new IntVar(store, -p3, -p3);"], [2646, "\t\t    t = dictionary.getConstant(p3); //new IntVar(store, p3, p3);"], [2653, "\t\t    t = dictionary.getConstant(-p3); //new IntVar(store, -p3, -p3);"], [2700, "\t\t    pose(new XmulCeqZ(p2[0], p1[0], dictionary.getConstant(p3))); // new IntVar(store, p3, p3)));"], [2765, "\t\t\tIntVar v = dictionary.getConstant(p3);"], [2766, "\t\t\t// if (p3==0)"], [2767, "\t\t\t//     v = dictionary.getConstant(0); // zero;"], [2768, "\t\t\t// else if (p3 == 1)"], [2769, "\t\t\t//     v = dictionary.getConstant(1); // one;"], [2770, "\t\t\t// else"], [2771, "\t\t\t    // v = new IntVar(store, p3, p3);"], [2778, "\t\t\tIntVar v = dictionary.getConstant(-p3);"], [2779, ""], [2780, "\t\t\t// if (p3==0)"], [2781, "\t\t\t//     v = zero;"], [2782, "\t\t\t// else"], [2783, "\t\t\t//     v = new IntVar(store, -p3, -p3);"], [2919, "\t\t    t = dictionary.getConstant(p3); //new IntVar(store, p3, p3);"], [2926, "\t\t    t = dictionary.getConstant(-p3); //new IntVar(store, -p3, -p3);"], [3576, "\t    return dictionary.getConstant(val);"], [3577, "\t    // if (val == 0) return zero;"], [3578, "\t    // else if (val == 1) return one;"], [3579, "\t    // else return new IntVar(store, val, val);"], [3583, "\t    return dictionary.getConstant(val);"], [3584, "\t    // if (val == 0) return zero;"], [3585, "\t    // else if (val == 1) return one;"], [3586, "\t    // return new IntVar(store, val, val);"], [3592, "\t\treturn dictionary.getConstant(bInt); // new IntVar(store, bInt, bInt);"], [3593, "\t    }"], [3594, "\t    return int_boolVar;"], [3603, "\t    else {"], [3605, "\t    }"], [3706, "\t\t\t    aa[i] = dictionary.getConstant(ia[i]); // new IntVar(store, ia[i], ia[i]);"]], "deleted": [[86, "    IntVar zero, one;"], [189, " \tthis.zero = table.zero;"], [190, "\tthis.one = table.one;"], [586, "\t\t\t    sat.generate_xor(a1, one);"], [588, "\t\t\t    pose(new XorBool(a1, one));"], [830, "\t\t\t    c = new AndBool(a2reduced, zero);"], [832, "\t\t\t    c = new OrBool(a1reduced, one);"], [1162, "\t\t    delayedConstraints.add(new AmongVar(x, s, v));"], [1170, "\t\t    // if (s.singleton())"], [1171, "\t\t    // pose(new Count(x, v, s.value()));"], [1172, "\t\t    // else {"], [1181, "\t\t    pose(new Among(x, setImpl, v));"], [1494, ""], [1518, "   \t\t    pose( new org.jacop.constraints.binpacking.Binpacking(bin, capacity, w) );"], [1677, "\t    c = new XplusCeqZ(v1, p2.getInt(), zero);"], [1681, "\t    c = new XplusCeqZ(v2, p1.getInt(), zero);"], [1686, "\t    c = new XplusYeqZ(v1, v2, zero);"], [2474, "\t\t\tpose(new Reified(new XmulCeqZ(p2[0], p1[0], new IntVar(store, p3,p3)), p4));"], [2526, "\t\t    t = new IntVar(store, p3, p3);"], [2533, "\t\t    t = new IntVar(store, -p3, -p3);"], [2561, "\t\t    t = new IntVar(store, p3, p3);"], [2568, "\t\t    t = new IntVar(store, -p3, -p3);"], [2615, "\t\t    pose(new XmulCeqZ(p2[0], p1[0], new IntVar(store, p3, p3)));"], [2680, "\t\t\tIntVar v;"], [2681, "\t\t\tif (p3==0)"], [2682, "\t\t\t    v = zero;"], [2683, "\t\t\telse if (p3 == 1)"], [2684, "\t\t\t    v = one;"], [2685, "\t\t\telse"], [2686, "\t\t\t    v = new IntVar(store, p3, p3);"], [2693, "\t\t\tIntVar v;"], [2694, "\t\t\tif (p3==0)"], [2695, "\t\t\t    v = zero;"], [2696, "\t\t\telse"], [2697, "\t\t\t    v = new IntVar(store, -p3, -p3);"], [2833, "\t\t    t = new IntVar(store, p3, p3);"], [2840, "\t\t    t = new IntVar(store, -p3, -p3);"], [3488, ""], [3491, "\t    if (val == 0) return zero;"], [3492, "\t    else if (val == 1) return one;"], [3493, "\t    else return new IntVar(store, val, val);"], [3497, "\t    if (val == 0) return zero;"], [3498, "\t    else if (val == 1) return one;"], [3499, "\t    return new IntVar(store, val, val);"], [3505, "\t\treturn new IntVar(store, bInt, bInt);"], [3506, "\t    }\t    return int_boolVar;"], [3515, "\t    else"], [3617, "\t\t\t    aa[i] = new IntVar(store, ia[i], ia[i]);"], [3618, "\t\t\t    // aa[i] = new IntVar(store, new IntervalDomain(ia[i], ia[i]));"]]}, "num_lines_added": 137, "num_lines_removed": 49}