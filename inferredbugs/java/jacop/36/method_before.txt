    void updateTable(HashSet<IntVar> fdvs) {

        for (IntVar v : fdvs) {

            // recent pruning
            IntDomain cd = v.dom();
            IntDomain pd = cd.previousDomain();
            IntDomain rp;
            int delta;
            if (pd == null) {
                rp = cd;
                delta = IntDomain.MaxInt;
            } else {
                rp = pd.subtract(cd);
                delta = rp.getSize();
                if (delta == 0)
                    continue;
            }

            rbs.clearMask();
            int xIndex = varMap.get(v);

            Map<Integer, long[]> xSupport = supports[xIndex];
            if (delta < cd.getSize()) { // incremental update
                ValueEnumeration e = rp.valueEnumeration();
                while (e.hasMoreElements()) {
                    long[] bs = xSupport.get(e.nextElement());
                    if (bs != null)
                        rbs.addToMask(bs);
                }
                rbs.reverseMask();
            } else { // reset-based update
                ValueEnumeration e = cd.valueEnumeration();
                while (e.hasMoreElements()) {
                    long[] bs = xSupport.get(e.nextElement());
                    if (bs != null)
                        rbs.addToMask(bs);
                }
            }

            rbs.intersectWithMask();
            if (rbs.isEmpty())
                throw store.failException;
        }
    }