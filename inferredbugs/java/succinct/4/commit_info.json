{"hash": "19f27bfb7e2367fc0e5f805c1ddb163da3f865a9", "message": "Improvements to construction and updates to data representation", "file_num_lines": 410, "diff_parsed": {"added": [[129, "    mapFromBuffer(buf);"], [132, "  /**"], [133, "   * Get the total size of the core Succinct data-structures."], [134, "   *"], [135, "   * @return The total size of the core Succinct data-structures."], [136, "   */"], [138, "    int coreSize = baseSize();"], [139, "    coreSize += sa.limit() * SuccinctConstants.LONG_SIZE_BYTES;"], [140, "    coreSize += isa.limit() * SuccinctConstants.LONG_SIZE_BYTES;"], [141, "    coreSize += columnoffsets.limit() * SuccinctConstants.LONG_SIZE_BYTES;"], [142, "    for (ThreadSafeByteBuffer column : columns) {"], [143, "      coreSize += column.limit() * SuccinctConstants.BYTE_SIZE_BYTES;"], [144, "    }"], [145, "    return coreSize;"], [264, "  private void construct(Source input) throws IOException {"], [265, "    File tmpFile = File.createTempFile(\"succinct-construct-\", \".tmp\");"], [266, "    tmpFile.deleteOnExit();"], [267, "    DataOutputStream coreStream = new DataOutputStream(new FileOutputStream(tmpFile));"], [268, ""], [269, "    construct(input, coreStream);"], [270, ""], [271, "    coreStream.close();"], [272, ""], [273, "    readCoreFromFile(tmpFile.getAbsolutePath());"], [274, ""], [275, "    if (!tmpFile.delete()) {"], [276, "      LOG.warning(\"Could not delete temporary file.\");"], [277, "    }"], [278, "  }"], [279, ""], [280, "  public static void construct(final char[] input, DataOutputStream coreStream) throws IOException {"], [281, "    construct(new Source() {"], [282, "      @Override public int length() {"], [283, "        return input.length;"], [284, "      }"], [285, ""], [286, "      @Override public int get(int i) {"], [287, "        return input[i];"], [288, "      }"], [289, "    }, coreStream);"], [290, "  }"], [292, "  public static void construct(final byte[] input, DataOutputStream coreStream) throws IOException {"], [293, "    construct(new Source() {"], [294, "      @Override public int length() {"], [295, "        return input.length;"], [296, "      }"], [297, ""], [298, "      @Override public int get(int i) {"], [299, "        return input[i];"], [300, "      }"], [301, "    }, coreStream);"], [302, "  }"], [303, ""], [304, "  /**"], [305, "   * Construct core Succinct data structures and write them to provided output stream."], [306, "   *"], [307, "   * @param input      The input source."], [308, "   * @param coreStream The data output stream."], [309, "   * @throws IOException"], [310, "   */"], [311, "  public static void construct(Source input, DataOutputStream coreStream) throws IOException {"], [440, "    LOG.info(\"Finished constructing core Succinct data structures in \" + timeTakenGlobal + \"s.\");"], [459, "  public void mapFromBuffer(ByteBuffer core) {"], [481, "    sa.rewind();"], [490, "    isa.rewind();"], [496, "    columnoffsets.rewind();"], [515, "    os.writeInt(getOriginalSize());"], [516, "    os.writeInt(getSamplingRateSA());"], [517, "    os.writeInt(getSamplingRateISA());"], [518, "    os.writeInt(getSamplingRateNPA());"], [519, "    os.writeInt(getSampleBitWidth());"], [520, "    os.writeInt(getAlphabetSize());"], [521, ""], [522, "    for (int i = 0; i < getAlphabetSize(); i++) {"], [523, "      os.writeInt(alphabet[i]);"], [524, "    }"], [525, ""], [526, "    for (int i = 0; i < sa.limit(); i++) {"], [527, "      os.writeLong(sa.get(i));"], [528, "    }"], [529, ""], [530, "    for (int i = 0; i < isa.limit(); i++) {"], [531, "      os.writeLong(isa.get(i));"], [532, "    }"], [533, ""], [534, "    for (int i = 0; i < columnoffsets.limit(); i++) {"], [535, "      os.writeLong(columnoffsets.get(i));"], [536, "    }"], [537, ""], [538, "    for (int i = 0; i < columns.length; i++) {"], [539, "      os.writeInt(columns[i].limit());"], [540, "      dataChannel.write(columns[i].order(ByteOrder.BIG_ENDIAN));"], [541, "      columns[i].rewind();"], [542, "    }"], [551, "  private void readCoreFromStream(DataInputStream is) throws IOException {"], [553, "    setOriginalSize(is.readInt());"], [554, "    setSamplingRateSA(is.readInt());"], [555, "    setSamplingRateISA(is.readInt());"], [556, "    setSamplingRateNPA(is.readInt());"], [557, "    setSampleBitWidth(is.readInt());"], [558, "    setAlphabetSize(is.readInt());"], [559, ""], [560, "    // Read alphabet"], [561, "    alphabet = new int[getAlphabetSize()];"], [562, "    for (int i = 0; i < getAlphabetSize(); i++) {"], [563, "      alphabet[i] = is.readInt();"], [564, "    }"], [565, ""], [566, "    // Compute number of sampled elements"], [567, "    int totalSampledBitsSA ="], [568, "      CommonUtils.numBlocks(getOriginalSize(), getSamplingRateSA()) * getSampleBitWidth();"], [570, "    // Read sa"], [571, "    ByteBuffer saBuf = ByteBuffer"], [572, "      .allocateDirect(BitUtils.bitsToBlocks64(totalSampledBitsSA) * SuccinctConstants.LONG_SIZE_BYTES);"], [573, "    dataChannel.read(saBuf);"], [574, "    saBuf.rewind();"], [575, "    sa = ThreadSafeLongBuffer.fromLongBuffer(saBuf.asLongBuffer());"], [576, ""], [577, "    // Compute number of sampled elements"], [578, "    int totalSampledBitsISA ="], [579, "      CommonUtils.numBlocks(getOriginalSize(), getSamplingRateISA()) * getSampleBitWidth();"], [580, ""], [581, "    // Read isa"], [582, "    ByteBuffer isaBuf = ByteBuffer"], [583, "      .allocateDirect(BitUtils.bitsToBlocks64(totalSampledBitsISA) * SuccinctConstants.LONG_SIZE_BYTES);"], [584, "    dataChannel.read(isaBuf);"], [585, "    isaBuf.rewind();"], [586, "    isa = ThreadSafeLongBuffer.fromLongBuffer(isaBuf.asLongBuffer());"], [587, ""], [588, "    // Read columnoffsets"], [589, "    ByteBuffer coloffsetsBuf ="], [590, "      ByteBuffer.allocateDirect(getAlphabetSize() * SuccinctConstants.LONG_SIZE_BYTES);"], [591, "    dataChannel.read(coloffsetsBuf);"], [592, "    coloffsetsBuf.rewind();"], [593, "    columnoffsets = ThreadSafeLongBuffer.fromLongBuffer(coloffsetsBuf.asLongBuffer());"], [594, ""], [595, "    // Read NPA columns"], [596, "    columns = new ThreadSafeByteBuffer[getAlphabetSize()];"], [597, "    for (int i = 0; i < getAlphabetSize(); i++) {"], [598, "      int columnSize = is.readInt();"], [599, "      ByteBuffer columnBuf = ByteBuffer.allocateDirect(columnSize);"], [600, "      dataChannel.read(columnBuf);"], [601, "      columns[i] = ThreadSafeByteBuffer.fromByteBuffer(((ByteBuffer) columnBuf.rewind()));"], [602, "    }"], [603, "  }"], [604, ""], [605, "  public void readFromStream(DataInputStream is) throws IOException {"], [606, "    readCoreFromStream(is);"], [621, "  private void readCoreFromFile(String path) throws IOException {"], [622, "    FileInputStream fis = new FileInputStream(path);"], [623, "    DataInputStream is = new DataInputStream(fis);"], [624, "    readCoreFromStream(is);"], [625, "  }"], [626, ""], [634, "    readCoreFromFile(path);"], [648, "    mapFromBuffer(fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, size));"]], "deleted": [[40, "  // Succinct core data structures buffer"], [41, "  protected transient ByteBuffer core;"], [42, ""], [70, "    mapFromCore();"], [93, "    mapFromCore();"], [134, "    this.core = buf;"], [135, "    mapFromCore();"], [139, "    return core.limit();"], [258, "  protected void construct(Source input) throws IOException {"], [267, "    File tmpFile = File.createTempFile(\"succinct-construct-\", \".tmp\");"], [268, "    tmpFile.deleteOnExit();"], [269, "    DataOutputStream coreStream = new DataOutputStream(new FileOutputStream(tmpFile));"], [270, ""], [392, "    LOG.info(\"Finished constructing Succinct data structures in \" + timeTakenGlobal + \"s.\");"], [393, ""], [394, "    coreStream.close();"], [395, ""], [396, "    core = ByteBuffer.allocateDirect(((int) tmpFile.length()));"], [397, "    FileChannel inChannel = new FileInputStream(tmpFile).getChannel();"], [398, "    inChannel.read(core);"], [399, "    inChannel.close();"], [400, ""], [401, "    if (!tmpFile.delete()) {"], [402, "      LOG.warning(\"Could not delete temporary file.\");"], [403, "    }"], [422, "  public void mapFromCore() {"], [423, "    core.order(ByteOrder.BIG_ENDIAN);"], [424, "    core.rewind();"], [425, ""], [467, ""], [468, "    core.rewind();"], [480, "    os.writeInt(core.limit());"], [481, "    dataChannel.write(core.order(ByteOrder.BIG_ENDIAN));"], [482, "    core.rewind();"], [491, "  public void readFromStream(DataInputStream is) throws IOException {"], [494, "    int dataSize = is.readInt();"], [495, "    core = ByteBuffer.allocateDirect(dataSize);"], [496, "    dataChannel.read(core);"], [497, "    mapFromCore();"], [498, "    core.rewind();"], [520, "    FileInputStream fis = new FileInputStream(path);"], [521, "    DataInputStream is = new DataInputStream(fis);"], [522, "    readFromStream(is);"], [536, "    ByteBuffer buf = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, size);"], [537, "    int compressedSize = buf.getInt();"], [538, "    core = (ByteBuffer) buf.slice().limit(compressedSize);"], [539, "    mapFromCore();"]]}, "num_lines_added": 156, "num_lines_removed": 47}