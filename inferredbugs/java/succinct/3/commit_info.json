{"hash": "537aca057eb17ce59052ca35c63438d8d9ee29a1", "message": "Updated succinct data structures to handle all types of characters", "file_num_lines": 355, "diff_parsed": {"added": [[189, "  @Override public int lookupC(long i) {"], [247, "//    {"], [248, "//      long startTime = System.currentTimeMillis();"], [249, "//"], [250, "//      // Append the EOF byte"], [251, "//      int end = input.length;"], [252, "//      input = Arrays.copyOf(input, input.length + 1);"], [253, "//      input[end] = EOF;"], [254, "//"], [255, "//      long timeTaken = (System.currentTimeMillis() - startTime) / 1000L;"], [256, "//      logger.info(\"Cleaned input in \" + timeTaken + \"s.\");"], [257, "//    }"], [272, "      setOriginalSize(input.length + 1);"], [289, "      int prevSortedChar = SuccinctConstants.EOF;"], [294, "        if (input[SA[i]] != prevSortedChar) {"], [295, "          prevSortedChar = input[SA[i]];"], [391, "    for (int i = 0; i < getAlphabetSize(); i++) {"], [392, "      os.writeInt(alphabet[i]);"], [434, "    alphabet = new int[getAlphabetSize()];"], [435, "    for (int i = 0; i < getAlphabetSize(); i++) {"], [436, "      alphabet[i] = is.readInt();"], [437, "    }"], [508, "    alphabet = new int[getAlphabetSize()];"], [509, "    for (int i = 0; i < getAlphabetSize(); i++) {"], [510, "      alphabet[i] = buf.getInt();"], [511, "    }"]], "deleted": [[14, "import edu.berkeley.cs.succinct.util.container.Pair;"], [26, "import java.util.Arrays;"], [27, "import java.util.HashMap;"], [192, "  @Override public byte lookupC(long i) {"], [250, "    {"], [251, "      long startTime = System.currentTimeMillis();"], [252, ""], [253, "      // Append the EOF byte"], [254, "      int end = input.length;"], [255, "      input = Arrays.copyOf(input, input.length + 1);"], [256, "      input[end] = EOF;"], [257, ""], [258, "      long timeTaken = (System.currentTimeMillis() - startTime) / 1000L;"], [259, "      logger.info(\"Cleaned input in \" + timeTaken + \"s.\");"], [260, "    }"], [275, "      setOriginalSize(input.length);"], [292, "      alphabetMap = new HashMap<>();"], [293, "      alphabetMap.put(input[SA[0]], new Pair<>(0, pos));"], [298, "        if (input[SA[i]] != input[SA[i - 1]]) {"], [299, "          alphabetMap.put(input[SA[i]], new Pair<>(i, pos));"], [304, "      alphabetMap.put(SuccinctCore.EOA, new Pair<>(getOriginalSize(), getAlphabetSize()));"], [396, "    for (Byte c : alphabetMap.keySet()) {"], [397, "      Pair<Integer, Integer> cval = alphabetMap.get(c);"], [398, "      os.write(c);"], [399, "      os.writeInt(cval.first);"], [400, "      os.writeInt(cval.second);"], [403, "    os.write(alphabet);"], [404, ""], [443, "    // Deserialize alphabetmap"], [444, "    alphabetMap = new HashMap<>();"], [445, "    for (int i = 0; i < getAlphabetSize() + 1; i++) {"], [446, "      byte c = is.readByte();"], [447, "      int v1 = is.readInt();"], [448, "      int v2 = is.readInt();"], [449, "      alphabetMap.put(c, new Pair<>(v1, v2));"], [450, "    }"], [451, ""], [453, "    alphabet = new byte[getAlphabetSize()];"], [454, "    int read = is.read(alphabet);"], [455, "    assert read == getAlphabetSize();"], [525, "    // Deserialize alphabet map"], [526, "    alphabetMap = new HashMap<>();"], [527, "    for (int i = 0; i < getAlphabetSize() + 1; i++) {"], [528, "      byte c = buf.get();"], [529, "      int v1 = buf.getInt();"], [530, "      int v2 = buf.getInt();"], [531, "      alphabetMap.put(c, new Pair<>(v1, v2));"], [532, "    }"], [533, ""], [535, "    alphabet = new byte[getAlphabetSize()];"], [536, "    buf.get(alphabet);"]]}, "num_lines_added": 26, "num_lines_removed": 51}