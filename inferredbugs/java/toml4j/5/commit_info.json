{"hash": "d8a02ce3562e516d81379e83711110d7ea9cc97e", "message": "Support for special cases: char, Character, URL, URI and enums.", "file_num_lines": 339, "diff_parsed": {"added": [[3, "import static org.junit.Assert.assertEquals;"], [5, "import java.io.BufferedReader;"], [6, "import java.io.ByteArrayOutputStream;"], [7, "import java.io.File;"], [8, "import java.io.FileReader;"], [9, "import java.io.IOException;"], [10, "import java.io.StringWriter;"], [11, "import java.io.UnsupportedEncodingException;"], [12, "import java.lang.annotation.RetentionPolicy;"], [13, "import java.math.BigDecimal;"], [14, "import java.math.BigInteger;"], [15, "import java.net.URI;"], [16, "import java.net.URL;"], [18, "import java.util.Calendar;"], [19, "import java.util.Date;"], [20, "import java.util.GregorianCalendar;"], [21, "import java.util.LinkedHashMap;"], [22, "import java.util.LinkedList;"], [23, "import java.util.List;"], [24, "import java.util.Map;"], [26, "import org.junit.Rule;"], [27, "import org.junit.Test;"], [28, "import org.junit.rules.TemporaryFolder;"], [30, "@SuppressWarnings(\"unused\")"], [296, ""], [297, "  @Test"], [298, "  public void should_handle_urls() throws Exception {"], [299, "    class WithUrl {"], [300, "      URL url;"], [301, "      URI uri;"], [302, "    }"], [303, ""], [304, "    WithUrl from = new WithUrl();"], [305, "    from.url = new URL(\"https://github.com\");"], [306, "    from.uri = new URI(\"https://bitbucket.com\");"], [307, ""], [308, "    String expected = \"url = \\\"https://github.com\\\"\\n\""], [309, "      + \"uri = \\\"https://bitbucket.com\\\"\\n\";"], [310, ""], [311, "    assertEquals(expected, new TomlWriter().write(from));"], [312, "  }"], [314, "  @Test"], [315, "  public void should_handle_enum() throws Exception {"], [316, "    class WithEnum {"], [317, "      RetentionPolicy retentionPolicy = RetentionPolicy.RUNTIME;"], [318, "    }"], [319, ""], [320, "    assertEquals(\"retentionPolicy = \\\"RUNTIME\\\"\\n\", new TomlWriter().write(new WithEnum()));"], [321, "  }"], [322, ""], [323, "  @Test"], [324, "  public void should_handle_char() throws Exception {"], [325, "    class WithChar {"], [326, "      char c = 'a';"], [327, "    }"], [328, ""], [329, "    assertEquals(\"c = \\\"a\\\"\\n\", new TomlWriter().write(new WithChar()));"], [330, "  }"], [331, ""], [332, "  @Test"], [333, "  public void should_handle_big_numbers() throws Exception {"], [334, "    class WithBigNumbers {"], [335, "      BigInteger bigInt = BigInteger.valueOf(1);"], [336, "      BigDecimal bigDecimal = BigDecimal.valueOf(2.8);"], [337, "    }"], [338, ""], [339, "    String expected = \"bigInt = 1\\n\""], [340, "      + \"bigDecimal = 2.8\\n\";"], [341, ""], [342, "    assertEquals(expected, new TomlWriter().write(new WithBigNumbers()));"], [343, "  }"], [344, ""], [345, "  @Test"], [346, "  public void should_handle_wrappers() throws Exception {"], [347, "    class WithWrappers {"], [348, "      Character c = Character.valueOf('b');"], [349, "      Long l = Long.valueOf(2);"], [350, "      Double d = Double.valueOf(3.4);"], [351, "    }"], [352, ""], [353, "    String expected = \"c = \\\"b\\\"\\n\""], [354, "      + \"l = 2\\n\""], [355, "      + \"d = 3.4\\n\";"], [356, ""], [357, "    assertEquals(expected, new TomlWriter().write(new WithWrappers()));"], [358, "  }"], [359, ""], [391, "    try {"], [392, "      StringBuilder w = new StringBuilder();"], [393, "      String line = bufferedReader.readLine();"], [394, "      while (line != null) {"], [395, "        w.append(line).append('\\n');"], [396, "        line = bufferedReader.readLine();"], [397, "      }"], [399, "      return w.toString();"], [400, "    } finally {"], [401, "      bufferedReader.close();"], [402, "    }"]], "deleted": [[3, "import org.junit.Rule;"], [4, "import org.junit.Test;"], [5, "import org.junit.rules.TemporaryFolder;"], [7, "import java.io.*;"], [9, "import java.util.*;"], [11, "import static org.junit.Assert.assertEquals;"], [310, "    StringBuilder w = new StringBuilder();"], [311, "    String line = bufferedReader.readLine();"], [312, "    while (line != null) {"], [313, "      w.append(line).append('\\n');"], [314, "      line = bufferedReader.readLine();"], [315, "    }"], [317, "    return w.toString();"]]}, "num_lines_added": 98, "num_lines_removed": 13}