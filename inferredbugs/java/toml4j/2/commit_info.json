{"hash": "86257278b7e46d5e0ed3f5dbc12383b0f8281f14", "message": "Added javadoc. Better null-handling and return empty containers instead\nof null.", "file_num_lines": 129, "diff_parsed": {"added": [[6, "import java.util.Collections;"], [20, " * <p>Provides access to the keys and tables in a TOML data source.</p>"], [22, " * <p>All getters can fall back to default values if they have been provided."], [23, " * Getters for simple values (String, Date, etc.) will return null if no matching key exists."], [24, " * {@link #getList(String, Class)}, {@link #getTable(String)} and {@link #getTables(String)} return empty values if there is no matching key.</p>"], [25, " *"], [26, " * <p>Example usage:</p>"], [27, " * <code><pre>"], [28, " * Toml toml = new Toml().parse(getTomlFile());"], [29, " * String name = toml.getString(\"name\");"], [30, " * Long port = toml.getLong(\"server.ip\"); // compound key. Is equivalent to:"], [31, " * Long port2 = toml.getTable(\"server\").getLong(\"ip\");"], [32, " * MyConfig config = toml.to(MyConfig.class);"], [33, " * </pre></code>"], [41, "  /**"], [42, "   * Creates Toml instance with no defaults."], [43, "   */"], [48, "  /**"], [49, "   * @param defaults fallback values used when the requested key or table is not present."], [50, "   */"], [55, "  /**"], [56, "   * Populates the current Toml instance with values from tomlString."], [57, "   *"], [58, "   * @param file"], [59, "   * @return this instance"], [60, "   * @throws IllegalStateException If file contains invalid TOML"], [61, "   */"], [63, "    Scanner scanner = null;"], [65, "      scanner = new Scanner(file);"], [66, ""], [67, "      return parse(scanner.useDelimiter(\"\\\\Z\").next());"], [70, "    } finally {"], [71, "      if (scanner != null) {"], [72, "        scanner.close();"], [73, "      }"], [77, "  /**"], [78, "   * Populates the current Toml instance with values from tomlString."], [79, "   *"], [80, "   * @param tomlString"], [81, "   * @return this instance"], [82, "   * @throws IllegalStateException If tomlString is not valid TOML"], [83, "   */"], [84, "  public Toml parse(String tomlString) throws IllegalStateException {"], [110, "    List<T> list = (List<T>) get(key);"], [111, ""], [112, "    if (list == null) {"], [113, "      return Collections.emptyList();"], [114, "    }"], [115, ""], [116, "    return list;"], [131, "  /**"], [132, "   * If no value is found for key, an empty Toml instance is returned."], [133, "   *"], [134, "   * @param key"], [135, "   */"], [141, "  /**"], [142, "   * If no value is found for key, an empty list is returned."], [143, "   * @param key"], [144, "   */"], [147, "    List<Map<String, Object>> tableArray = (List<Map<String, Object>>) get(key);"], [148, ""], [149, "    if (tableArray == null) {"], [150, "      return Collections.emptyList();"], [151, "    }"], [152, ""], [154, "    for (Map<String, Object> table : tableArray) {"], [161, "  /**"], [162, "   * <p>Populates an instance of targetClass with the values of this Toml instance."], [163, "   * The target's field names must match keys or tables."], [164, "   * Keys not present in targetClass will be ignored.</p>"], [165, "   *"], [166, "   * <p>Tables are recursively converted to custom classes.</p>"], [167, "   *"], [168, "   * @param targetClass"], [169, "   */"], [170, "  public <T> T to(Class<T> targetClass) {"], [171, "    HashMap<String, Object> valuesCopy = new HashMap<String, Object>(values);"], [172, "    if (defaults != null) {"], [173, "      for (Map.Entry<String, Object> entry : defaults.values.entrySet()) {"], [174, "        if (!valuesCopy.containsKey(entry.getKey())) {"], [175, "          valuesCopy.put(entry.getKey(), entry.getValue());"], [176, "        }"], [177, "      }"], [178, "    }"], [179, "    Gson gson = new Gson();"], [180, "    String json = gson.toJson(valuesCopy);"], [181, "    return gson.fromJson(json, targetClass);"], [182, "  }"], [183, ""], [213, "    this.values = values != null ? values : Collections.<String, Object>emptyMap();"]], "deleted": [[20, " * All getters can fall back to default values if they have been provided and will return null if no matching key exists."], [38, "      return parse(new Scanner(file).useDelimiter(\"\\\\Z\").next());"], [44, "  public Toml parse(String tomlString) {"], [70, "    return (List<T>) get(key);"], [93, "    for (Map<String, Object> table : (List<Map<String, Object>>) get(key)) {"], [129, "    this.values = values;"], [132, ""], [133, "  public <T> T to(Class<T> targetClass) {"], [134, "    HashMap<String, Object> valuesCopy = new HashMap<String, Object>(values);"], [135, "    if (defaults != null) {"], [136, "      for (Map.Entry<String, Object> entry : defaults.values.entrySet()) {"], [137, "        if (!valuesCopy.containsKey(entry.getKey())) {"], [138, "          valuesCopy.put(entry.getKey(), entry.getValue());"], [139, "        }"], [140, "      }"], [141, "    }"], [142, "    Gson gson = new Gson();"], [143, "    String json = gson.toJson(valuesCopy);"], [144, "    return gson.fromJson(json, targetClass);"], [145, "  }"]]}, "num_lines_added": 90, "num_lines_removed": 20}