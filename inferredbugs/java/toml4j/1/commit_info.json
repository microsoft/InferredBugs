{"hash": "40e5adfd2ef9527b5fcdc61ac98aa5257998b07a", "message": "Test uses Toml object", "file_num_lines": 66, "diff_parsed": {"added": [[20, "    Toml toml = new Toml().parse(new File(getClass().getResource(\"example.toml\").getFile()));"], [24, "    assertEquals(\"TOML Example\", toml.getString(\"title\"));"], [26, "    Toml owner = toml.getKeyGroup(\"owner\");"], [27, "    assertEquals(\"Tom Preston-Werner\", owner.getString(\"name\"));"], [28, "    assertEquals(\"GitHub\", owner.getString(\"organization\"));"], [29, "    assertEquals(\"GitHub Cofounder & CEO\\nLikes tater tots and beer.\", owner.getString(\"bio\"));"], [35, "    assertEquals(dob.getTime(), owner.getDate(\"dob\"));"], [36, ""], [37, "    Toml database = toml.getKeyGroup(\"database\");"], [38, "    assertEquals(\"192.168.1.1\", database.getString(\"server\"));"], [39, "    assertEquals(5000L, database.getLong(\"connection_max\").longValue());"], [40, "    assertTrue(database.getBoolean(\"enabled\"));"], [41, "    assertEquals(Arrays.asList(8001L, 8001L, 8002L), database.getList(\"ports\", Long.class));"], [42, ""], [43, "    Toml servers = toml.getKeyGroup(\"servers\");"], [44, "    Toml alphaServers = servers.getKeyGroup(\"alpha\");"], [45, "    assertEquals(\"10.0.0.1\", alphaServers.getString(\"ip\"));"], [46, "    assertEquals(\"eqdc10\", alphaServers.getString(\"dc\"));"], [47, "    Toml betaServers = servers.getKeyGroup(\"beta\");"], [48, "    assertEquals(\"10.0.0.2\", betaServers.getString(\"ip\"));"], [49, "    assertEquals(\"eqdc10\", betaServers.getString(\"dc\"));"], [50, ""], [51, "    Toml clients = toml.getKeyGroup(\"clients\");"], [52, "    assertEquals(asList(asList(\"gamma\", \"delta\"), asList(1L, 2L)), clients.getList(\"data\", String.class));"], [53, "    assertEquals(asList(\"alpha\", \"omega\"), clients.getList(\"hosts\", String.class));"]], "deleted": [[11, "import java.util.Scanner;"], [15, "import org.parboiled.Parboiled;"], [16, "import org.parboiled.parserunners.RecoveringParseRunner;"], [17, "import org.parboiled.support.ParsingResult;"], [24, "    TomlParser parser = Parboiled.createParser(TomlParser.class);"], [25, ""], [26, "    String toml = new Scanner(new File(getClass().getResource(\"example.toml\").getFile())).useDelimiter(\"\\\\Z\").next();"], [27, "    ParsingResult<Object> result = new RecoveringParseRunner<Object>(parser.Toml()).run(toml);"], [28, ""], [29, "    Map<String, Object> root = (Map<String, Object>) result.valueStack.peek(result.valueStack.size() - 2);"], [33, "    assertEquals(\"TOML Example\", root.get(\"title\"));"], [35, "    Map<String, Object> owner = get(root, \"owner\");"], [36, "    assertEquals(\"Tom Preston-Werner\", owner.get(\"name\"));"], [37, "    assertEquals(\"GitHub\", owner.get(\"organization\"));"], [38, "    assertEquals(\"GitHub Cofounder & CEO\\nLikes tater tots and beer.\", owner.get(\"bio\"));"], [44, "    assertEquals(dob.getTime(), owner.get(\"dob\"));"], [45, ""], [46, "    Map<String, Object> database = get(root, \"database\");"], [47, "    assertEquals(\"192.168.1.1\", database.get(\"server\"));"], [48, "    assertEquals(5000L, database.get(\"connection_max\"));"], [49, "    assertTrue((Boolean) database.get(\"enabled\"));"], [50, "    assertEquals(Arrays.asList(8001L, 8001L, 8002L), database.get(\"ports\"));"], [51, ""], [52, "    Map<String, Object> servers = get(root, \"servers\");"], [53, "    Map<String, Object> alphaServers = get(servers, \"alpha\");"], [54, "    assertEquals(\"10.0.0.1\", alphaServers.get(\"ip\"));"], [55, "    assertEquals(\"eqdc10\", alphaServers.get(\"dc\"));"], [56, "    Map<String, Object> betaServers = get(servers, \"beta\");"], [57, "    assertEquals(\"10.0.0.2\", betaServers.get(\"ip\"));"], [58, "    assertEquals(\"eqdc10\", betaServers.get(\"dc\"));"], [59, ""], [60, "    Map<String, Object> clients = get(root, \"clients\");"], [61, "    assertEquals(asList(asList(\"gamma\", \"delta\"), asList(1L, 2L)), clients.get(\"data\"));"], [62, "    assertEquals(asList(\"alpha\", \"omega\"), clients.get(\"hosts\"));"], [91, ""], [92, "  @SuppressWarnings(\"unchecked\")"], [93, "  private Map<String, Object> get(Map<String, Object> map, String key) {"], [94, "    return (Map<String, Object>) map.get(key);"], [95, "  }"]]}, "num_lines_added": 25, "num_lines_removed": 39}