{"hash": "71b1194e8716d4c8f392ccf30fb5ba95a6d65332", "message": "1\u907f\u514d\u5faa\u73af\u5f15\u7528\n2\u8bf7\u6c42\u53c2\u6570\u9012\u5f52\n3\u793a\u4f8b\u4e2d\u8bf7\u6c42\u53c2\u6570\u6839\u636equery\u3001header\u3001body\u4e0d\u540c\u5f62\u5f0f\u5e8f\u5217\u5316\uff0c\u5e8f\u5217\u5316\u4e3acurl\u683c\u5f0f", "file_num_lines": 352, "diff_parsed": {"added": [[103, "                    table.setRequestList(processRequestList(parameters, definitinMap));"], [113, "                    table.setRequestParam(processRequestParam(table.getRequestList()));"], [134, "     * @param definitinMap"], [137, "    private List<Request> processRequestList(List<LinkedHashMap> parameters, Map<String, ModelAttr> definitinMap) {"], [145, "                if (param.get(\"format\") != null) {"], [146, "                    request.setType(request.getType() + \"(\" + param.get(\"format\") + \")\");"], [147, "                }"], [156, "                        request.setType(\"array\");"], [157, "                    }"], [158, "                    if (ref != null) {"], [159, "                        request.setType(request.getType() + \":\" + ref.toString().replaceAll(\"#/definitions/\", \"\"));"], [160, "                        request.setModelAttr(definitinMap.get(ref));"], [260, "        ModelAttr modeAttr;"], [261, "        if ((modeAttr = resMap.get(\"#/definitions/\" + modeName)) == null) {"], [262, "            modeAttr = new ModelAttr();"], [263, "            resMap.put(\"#/definitions/\" + modeName, modeAttr);"], [264, "        } else if (modeAttr.isCompleted()) {"], [278, "            ModelAttr child = new ModelAttr();"], [279, "            child.setName(mEntry.getKey());"], [280, "            child.setType((String) attrInfoMap.get(\"type\"));"], [282, "                child.setType(child.getType() + \"(\" + attrInfoMap.get(\"format\") + \")\");"], [284, "            child.setType(StringUtils.defaultIfBlank(child.getType(), \"object\"));"], [285, ""], [288, "            if (ref != null || (items != null && (ref = ((Map) items).get(\"$ref\")) != null)) {"], [292, "                modeAttr.setCompleted(true);"], [294, "                child.setProperties(refModel.getProperties());"], [295, "                child.setType(child.getType() + \":\" + clsName);"], [297, "            child.setDescription((String) attrInfoMap.get(\"description\"));"], [298, "            attrList.add(child);"], [335, "                        responseMap.put(subModelAttr.getName(), getValue(subModelAttr.getType(), subModelAttr));"], [350, "    private String processRequestParam(List<Request> list) throws IOException {"], [351, "        Map<String, Object> headerMap = new LinkedHashMap<>();"], [352, "        Map<String, Object> queryMap = new LinkedHashMap<>();"], [353, "        Map<String, Object> jsonMap = new LinkedHashMap<>();"], [357, "                String paramType = request.getParamType();"], [358, "                Object value = getValue(request.getType(), request.getModelAttr());"], [359, "                switch (paramType) {"], [360, "                    case \"header\":"], [361, "                        headerMap.put(name, value);"], [363, "                    case \"query\":"], [364, "                        queryMap.put(name, value);"], [367, "                        //TODO \u6839\u636econtent-type\u5e8f\u5217\u5316\u6210\u4e0d\u540c\u683c\u5f0f\uff0c\u76ee\u524d\u53ea\u7528\u4e86json"], [368, "                        jsonMap.put(name, value);"], [369, "                        break;"], [372, ""], [373, "                }"], [374, "            }"], [375, "        }"], [376, "        String res = \"\";"], [377, "        if (!queryMap.isEmpty()) {"], [378, "            res += getUrlParamsByMap(queryMap);"], [379, "        }"], [380, "        if (!headerMap.isEmpty()) {"], [381, "            res += \" \" + getHeaderByMap(headerMap);"], [382, "        }"], [383, "        if (!jsonMap.isEmpty()) {"], [384, "            if (jsonMap.size() == 1) {"], [385, "                for (Entry<String, Object> entry : jsonMap.entrySet()) {"], [386, "                    res += \" -d '\" + JsonUtils.writeJsonStr(entry.getValue()) + \"'\";"], [388, "            } else {"], [389, "                res += \" -d '\" + JsonUtils.writeJsonStr(jsonMap) + \"'\";"], [392, "        return res;"], [393, "    }"], [394, ""], [395, "    /**"], [396, "     * \u4f8b\u5b50\u4e2d\uff0c\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c"], [397, "     *"], [398, "     * @param type      \u7c7b\u578b"], [399, "     * @param modelAttr \u5f15\u7528\u7684\u7c7b\u578b"], [400, "     * @return"], [401, "     */"], [402, "    private Object getValue(String type, ModelAttr modelAttr) {"], [403, "        int pos;"], [404, "        if ((pos = type.indexOf(\":\")) != -1) {"], [405, "            type = type.substring(0, pos);"], [406, "        }"], [407, "        switch (type) {"], [408, "            case \"string\":"], [409, "                return \"string\";"], [410, "            case \"string(date-time)\":"], [411, "                return \"2020/01/01 00:00:00\";"], [412, "            case \"integer\":"], [413, "            case \"integer(int64)\":"], [414, "            case \"integer(int32)\":"], [415, "                return 0;"], [416, "            case \"number\":"], [417, "                return 0.0;"], [418, "            case \"boolean\":"], [419, "                return true;"], [420, "            case \"file\":"], [421, "                return \"(binary)\";"], [422, "            case \"array\":"], [423, "                List list = new ArrayList();"], [424, "                Map<String, Object> map = new LinkedHashMap<>();"], [425, "                if (modelAttr != null && !CollectionUtils.isEmpty(modelAttr.getProperties())) {"], [426, "                    for (ModelAttr subModelAttr : modelAttr.getProperties()) {"], [427, "                        map.put(subModelAttr.getName(), getValue(subModelAttr.getType(), subModelAttr));"], [428, "                    }"], [429, "                }"], [430, "                list.add(map);"], [431, "                return list;"], [432, "            case \"object\":"], [433, "                map = new LinkedHashMap<>();"], [434, "                if (modelAttr != null && !CollectionUtils.isEmpty(modelAttr.getProperties())) {"], [435, "                    for (ModelAttr subModelAttr : modelAttr.getProperties()) {"], [436, "                        map.put(subModelAttr.getName(), getValue(subModelAttr.getType(), subModelAttr));"], [437, "                    }"], [438, "                }"], [439, "                return map;"], [440, "            default:"], [441, "                return null;"], [442, "        }"], [443, "    }"], [444, ""], [445, "    /**"], [446, "     * \u5c06map\u8f6c\u6362\u6210url"], [447, "     */"], [448, "    public static String getUrlParamsByMap(Map<String, Object> map) {"], [449, "        if (map == null || map.isEmpty()) {"], [450, "            return \"\";"], [451, "        }"], [452, "        StringBuffer sb = new StringBuffer();"], [453, "        for (Map.Entry<String, Object> entry : map.entrySet()) {"], [454, "            sb.append(entry.getKey() + \"=\" + entry.getValue());"], [455, "            sb.append(\"&\");"], [456, "        }"], [457, "        String s = sb.toString();"], [458, "        if (s.endsWith(\"&\")) {"], [459, "            s = StringUtils.substringBeforeLast(s, \"&\");"], [460, "        }"], [461, "        return s;"], [462, "    }"], [463, ""], [464, "    /**"], [465, "     * \u5c06map\u8f6c\u6362\u6210header"], [466, "     */"], [467, "    public static String getHeaderByMap(Map<String, Object> map) {"], [468, "        if (map == null || map.isEmpty()) {"], [469, "            return \"\";"], [470, "        }"], [471, "        StringBuffer sb = new StringBuffer();"], [472, "        for (Map.Entry<String, Object> entry : map.entrySet()) {"], [473, "            sb.append(\"--header '\");"], [474, "            sb.append(entry.getKey() + \":\" + entry.getValue());"], [475, "            sb.append(\"'\");"], [476, "        }"], [477, "        return sb.toString();"]], "deleted": [[103, "                    table.setRequestList(processRequestList(parameters));"], [113, "                    table.setRequestParam(processRequestParam(table.getRequestList(), definitinMap));"], [136, "    private List<Request> processRequestList(List<LinkedHashMap> parameters) {"], [153, "                    request.setParamType(ref == null ? \"{}\" : ref.toString());"], [162, "                request.setParamType(request.getParamType().replaceAll(\"#/definitions/\", \"\"));"], [253, "        if (resMap.get(modeName) != null) {"], [267, "            ModelAttr modeAttr = new ModelAttr();"], [268, "            modeAttr.setName(mEntry.getKey());"], [269, "            modeAttr.setType((String) attrInfoMap.get(\"type\"));"], [271, "                modeAttr.setType(modeAttr.getType() + \"(\" + attrInfoMap.get(\"format\") + \")\");"], [275, "            if (ref != null || (items != null && (ref = ((Map)items).get(\"$ref\")) != null)) {"], [280, "                modeAttr.setProperties(refModel.getProperties());"], [282, "            modeAttr.setType(StringUtils.defaultIfBlank(modeAttr.getType(), \"object\"));"], [283, "            modeAttr.setDescription((String) attrInfoMap.get(\"description\"));"], [284, "            attrList.add(modeAttr);"], [286, "        //BaseResult\u00abPageData\u00abDopAppRecordVo\u00bb\u00bb"], [287, "        ModelAttr modeAttr = new ModelAttr();"], [293, "        resMap.put(\"#/definitions/\" + modeName, modeAttr);"], [324, "                        responseMap.put(subModelAttr.getName(), subModelAttr.getType());"], [337, "     * @param definitinMap"], [340, "    private String processRequestParam(List<Request> list, Map<String, ModelAttr> definitinMap) throws IOException {"], [341, "        Map<String, Object> paramMap = new HashMap<>(8);"], [345, "                String type = request.getType();"], [346, "                switch (type) {"], [347, "                    case \"string\":"], [348, "                        paramMap.put(name, \"string\");"], [349, "                        break;"], [350, "                    case \"integer\":"], [351, "                        paramMap.put(name, 0);"], [353, "                    case \"number\":"], [354, "                        paramMap.put(name, 0.0);"], [355, "                        break;"], [356, "                    case \"boolean\":"], [357, "                        paramMap.put(name, true);"], [360, "                    case \"object\":"], [361, "                        ModelAttr modelAttr = definitinMap.get(\"#/definitions/\" + request.getParamType());"], [362, "                        if (modelAttr != null && !CollectionUtils.isEmpty(modelAttr.getProperties())) {"], [363, "                            for (ModelAttr subModelAttr : modelAttr.getProperties()) {"], [364, "                                paramMap.put(subModelAttr.getName(), subModelAttr.getType());"], [365, "                            }"], [366, "                            break;"], [367, "                        }"], [369, "                        paramMap.put(name, null);"], [374, "        return JsonUtils.writeJsonStr(paramMap);"]]}, "num_lines_added": 147, "num_lines_removed": 44}