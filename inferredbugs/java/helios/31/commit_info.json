{"hash": "4e862ac612487c1dcc22d2cfe26843d9451cdfc2", "message": "ZooKeeperRegistrarServiceUtilTest: Use a testing ZK server for all tests\n\nThis fixes a test that was broken because of the recent changes to\nZooKeeperRegistrarUtil.deregisterHost(). It also makes the tests a bit more\nmeaningful.", "file_num_lines": 75, "diff_parsed": {"added": [[27, "import org.junit.After;"], [28, "import org.junit.Before;"], [37, "import static org.junit.Assert.assertNull;"], [47, "  private ZooKeeperTestingServerManager testingServerManager;"], [48, "  private ZooKeeperClient zkClient;"], [49, ""], [50, "  @Before"], [51, "  public void setUp() throws Exception {"], [52, "    testingServerManager = new ZooKeeperTestingServerManager();"], [53, "    testingServerManager.awaitUp(5, TimeUnit.SECONDS);"], [54, "    zkClient = new DefaultZooKeeperClient(testingServerManager.curatorWithSuperAuth());"], [55, "  }"], [56, ""], [57, "  @After"], [58, "  public void tearDown() throws Exception {"], [59, "    zkClient.close();"], [60, "    if (testingServerManager != null) {"], [61, "      testingServerManager.close();"], [62, "    }"], [63, "  }"], [69, ""], [70, "    assertNotNull(zkClient.exists(Paths.configHost(HOSTNAME)));"], [71, "    assertNotNull(zkClient.exists(Paths.configHostJobs(HOSTNAME)));"], [72, "    assertNotNull(zkClient.exists(Paths.configHostPorts(HOSTNAME)));"], [73, "    assertNotNull(zkClient.exists(Paths.statusHost(HOSTNAME)));"], [74, "    assertNotNull(zkClient.exists(Paths.statusHostJobs(HOSTNAME)));"], [75, "    assertEquals(ID, new String(zkClient.getData(idPath)));"], [80, "    final String idPath = Paths.configHostId(HOSTNAME);"], [81, "    ZooKeeperRegistrarUtil.registerHost(zkClient, idPath, HOSTNAME, ID);"], [82, ""], [84, ""], [85, "    assertNull(zkClient.exists(Paths.configHost(HOSTNAME)));"], [86, "    assertNull(zkClient.exists(Paths.statusHost(HOSTNAME)));"], [94, "    // Register the host & add some fake data to its status & config dirs"], [95, "    final String idPath = Paths.configHostId(HOSTNAME);"], [96, "    ZooKeeperRegistrarUtil.registerHost(zkClient, idPath, HOSTNAME, ID);"], [97, "    zkClient.ensurePath(Paths.statusHostJob(HOSTNAME, JOB_ID1));"], [98, "    zkClient.ensurePath(Paths.configHostJob(HOSTNAME, JOB_ID1));"], [99, "    final Stat jobConfigStat = zkClient.stat(Paths.configHostJob(HOSTNAME, JOB_ID1));"], [100, ""], [101, "    // ... and then re-register it"], [102, "    final String newId = UUID.randomUUID().toString();"], [103, "    ZooKeeperRegistrarUtil.reRegisterHost(zkClient, HOSTNAME, newId);"], [104, ""], [105, "    // Verify that the host-id was updated"], [106, "    assertEquals(newId, new String(zkClient.getData(idPath)));"], [107, ""], [108, "    // Verify that /status/hosts/<host>/jobs exists and is EMPTY"], [109, "    assertNotNull(zkClient.exists(Paths.statusHostJobs(HOSTNAME)));"], [110, "    assertThat(zkClient.listRecursive(Paths.statusHostJobs(HOSTNAME)),"], [111, "               contains(Paths.statusHostJobs(HOSTNAME)));"], [112, "    // Verify that re-registering didn't change the nodes in /config/hosts/<host>/jobs"], [113, "    assertEquals("], [114, "        jobConfigStat,"], [115, "        zkClient.stat(Paths.configHostJob(HOSTNAME, JOB_ID1))"], [116, "    );"]], "deleted": [[20, "import com.google.common.collect.ImmutableList;"], [21, ""], [27, "import com.spotify.helios.servicescommon.coordination.ZooKeeperOperation;"], [31, "import org.junit.runner.RunWith;"], [32, "import org.mockito.Mock;"], [33, "import org.mockito.runners.MockitoJUnitRunner;"], [35, "import java.util.List;"], [39, "import static com.google.common.base.Charsets.UTF_8;"], [44, "import static org.mockito.Matchers.anyListOf;"], [45, "import static org.mockito.Mockito.verify;"], [47, "@RunWith(MockitoJUnitRunner.class)"], [54, "  private static final JobId JOB_ID2 ="], [55, "      JobId.newBuilder().setName(\"job2\").setVersion(\"0.2.0\").build();"], [56, "  private static final List<JobId> JOB_IDS = ImmutableList.of(JOB_ID1, JOB_ID2);"], [57, "  private static final String JOB_STRING1 = JOB_ID1.toString();"], [58, "  private static final String JOB_STRING2 = JOB_ID2.toString();"], [59, "  private static final List<String> JOB_STRINGS = ImmutableList.of(JOB_STRING1, JOB_STRING2);"], [61, "  @Mock ZooKeeperClient zkClient;"], [67, "    verify(zkClient).ensurePath(Paths.configHost(HOSTNAME));"], [68, "    verify(zkClient).ensurePath(Paths.configHostJobs(HOSTNAME));"], [69, "    verify(zkClient).ensurePath(Paths.configHostPorts(HOSTNAME));"], [70, "    verify(zkClient).ensurePath(Paths.statusHost(HOSTNAME));"], [71, "    verify(zkClient).ensurePath(Paths.statusHostJobs(HOSTNAME));"], [72, "    verify(zkClient).createAndSetData(idPath, ID.getBytes(UTF_8));"], [78, "    verify(zkClient).transaction(anyListOf(ZooKeeperOperation.class));"], [86, "    ZooKeeperTestingServerManager testingServerManager = null;"], [87, "    try {"], [88, "      testingServerManager = new ZooKeeperTestingServerManager();"], [89, "      testingServerManager.awaitUp(5, TimeUnit.SECONDS);"], [90, ""], [91, "      final ZooKeeperClient zkClient = new DefaultZooKeeperClient("], [92, "          testingServerManager.curatorWithSuperAuth());"], [93, ""], [94, "      // Register the host & add some fake data to its status & config dirs"], [95, "      final String idPath = Paths.configHostId(HOSTNAME);"], [96, "      ZooKeeperRegistrarUtil.registerHost(zkClient, idPath, HOSTNAME, ID);"], [97, "      zkClient.ensurePath(Paths.statusHostJob(HOSTNAME, JOB_ID1));"], [98, "      zkClient.ensurePath(Paths.configHostJob(HOSTNAME, JOB_ID1));"], [99, "      final Stat jobConfigStat = zkClient.stat(Paths.configHostJob(HOSTNAME, JOB_ID1));"], [100, ""], [101, "      // ... and then re-register it"], [102, "      final String newId = UUID.randomUUID().toString();"], [103, "      ZooKeeperRegistrarUtil.reRegisterHost(zkClient, HOSTNAME, newId);"], [104, ""], [105, "      // Verify that the host-id was updated"], [106, "      assertEquals(newId, new String(zkClient.getData(idPath)));"], [107, ""], [108, "      // Verify that /status/hosts/<host>/jobs exists and is EMPTY"], [109, "      assertNotNull(zkClient.exists(Paths.statusHostJobs(HOSTNAME)));"], [110, "      assertThat(zkClient.listRecursive(Paths.statusHostJobs(HOSTNAME)),"], [111, "                 contains(Paths.statusHostJobs(HOSTNAME)));"], [112, "      // Verify that re-registering didn't change the nodes in /config/hosts/<host>/jobs"], [113, "      assertEquals("], [114, "          jobConfigStat,"], [115, "          zkClient.stat(Paths.configHostJob(HOSTNAME, JOB_ID1))"], [116, "      );"], [117, "    } finally {"], [118, "      if (testingServerManager != null) {"], [119, "        testingServerManager.close();"], [120, "      }"], [121, "    }"]]}, "num_lines_added": 56, "num_lines_removed": 61}