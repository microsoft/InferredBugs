{"hash": "74fdb838153694cd2437b46b5274cd6e9df79db2", "message": "Warning fixes.\n\nMostly using try with resources to clean up docker clients", "file_num_lines": 866, "diff_parsed": {"added": [[36, "import com.fasterxml.jackson.databind.util.ISO8601Utils;"], [53, "import com.spotify.helios.TemporaryPorts.AllocatedPort;"], [239, "    try (final DefaultDockerClient docker = new DefaultDockerClient(DOCKER_HOST.uri())) {"], [240, "      try {"], [241, "        docker.inspectImage(BUSYBOX);"], [242, "      } catch (ImageNotFoundException e) {"], [243, "        docker.pull(BUSYBOX);"], [246, "      final ContainerConfig config = ContainerConfig.builder()"], [247, "          .image(BUSYBOX)"], [248, "          .cmd(\"nc\", \"-p\", \"4711\", \"-lle\", \"cat\")"], [249, "          .exposedPorts(ImmutableSet.of(\"4711/tcp\"))"], [250, "          .build();"], [251, "      final HostConfig hostConfig = HostConfig.builder()"], [252, "          .portBindings(ImmutableMap.of(\"4711/tcp\","], [253, "                                        asList(PortBinding.of(\"0.0.0.0\", probePort))))"], [254, "          .build();"], [255, "      final ContainerCreation creation = docker.createContainer(config, testTag + \"-probe\");"], [256, "      final String containerId = creation.id();"], [257, "      docker.startContainer(containerId, hostConfig);"], [258, ""], [259, "      // Wait for container to come up"], [260, "      Polling.await(5, SECONDS, new Callable<Object>() {"], [263, "          final ContainerInfo info = docker.inspectContainer(containerId);"], [264, "          return info.state().running() ? true : null;"], [268, "      log.info(\"Verifying that docker containers are reachable\");"], [269, "      try {"], [270, "        Polling.awaitUnchecked(5, SECONDS, new Callable<Object>() {"], [271, "          @Override"], [272, "          public Object call() throws Exception {"], [273, "            log.info(\"Probing: {}:{}\", DOCKER_HOST.address(), probePort);"], [274, "            try (final Socket ignored = new Socket(DOCKER_HOST.address(), probePort)) {"], [275, "              return true;"], [276, "            } catch (IOException e) {"], [277, "              return false;"], [278, "            }"], [279, "          }"], [280, "        });"], [281, "      } catch (TimeoutException e) {"], [282, "        fail(\"Please ensure that DOCKER_HOST is set to an address that where containers can \" +"], [283, "             \"be reached. If docker is running in a local VM, DOCKER_HOST must be set to the \" +"], [284, "             \"address of that VM. If docker can only be reached on a limited port range, \" +"], [285, "             \"set the environment variable DOCKER_PORT_RANGE=start:end\");"], [286, "      }"], [287, ""], [288, "      docker.killContainer(containerId);"], [289, "    }"], [321, "    try (final DefaultDockerClient dockerClient = new DefaultDockerClient(DOCKER_HOST.uri())) {"]], "deleted": [[24, "import com.fasterxml.jackson.databind.util.ISO8601Utils;"], [114, "import static com.spotify.helios.TemporaryPorts.AllocatedPort;"], [239, "    final DockerClient docker = new DefaultDockerClient(DOCKER_HOST.uri());"], [240, ""], [241, "    try {"], [242, "      docker.inspectImage(BUSYBOX);"], [243, "    } catch (ImageNotFoundException e) {"], [244, "      docker.pull(BUSYBOX);"], [245, "    }"], [246, ""], [247, "    final ContainerConfig config = ContainerConfig.builder()"], [248, "        .image(BUSYBOX)"], [249, "        .cmd(\"nc\", \"-p\", \"4711\", \"-lle\", \"cat\")"], [250, "        .exposedPorts(ImmutableSet.of(\"4711/tcp\"))"], [251, "        .build();"], [252, "    final HostConfig hostConfig = HostConfig.builder()"], [253, "        .portBindings(ImmutableMap.of(\"4711/tcp\","], [254, "                                      asList(PortBinding.of(\"0.0.0.0\", probePort))))"], [255, "        .build();"], [256, "    final ContainerCreation creation = docker.createContainer(config, testTag + \"-probe\");"], [257, "    final String containerId = creation.id();"], [258, "    docker.startContainer(containerId, hostConfig);"], [259, ""], [260, "    // Wait for container to come up"], [261, "    Polling.await(5, SECONDS, new Callable<Object>() {"], [262, "      @Override"], [263, "      public Object call() throws Exception {"], [264, "        final ContainerInfo info = docker.inspectContainer(containerId);"], [265, "        return info.state().running() ? true : null;"], [267, "    });"], [269, "    log.info(\"Verifying that docker containers are reachable\");"], [270, "    try {"], [271, "      Polling.awaitUnchecked(5, SECONDS, new Callable<Object>() {"], [274, "          log.info(\"Probing: {}:{}\", DOCKER_HOST.address(), probePort);"], [275, "          try (final Socket ignored = new Socket(DOCKER_HOST.address(), probePort)) {"], [276, "            return true;"], [277, "          } catch (IOException e) {"], [278, "            return false;"], [279, "          }"], [282, "    } catch (TimeoutException e) {"], [283, "      fail(\"Please ensure that DOCKER_HOST is set to an address that where containers can \" +"], [284, "           \"be reached. If docker is running in a local VM, DOCKER_HOST must be set to the \" +"], [285, "           \"address of that VM. If docker can only be reached on a limited port range, \" +"], [286, "           \"set the environment variable DOCKER_PORT_RANGE=start:end\");"], [287, "    }"], [289, "    docker.killContainer(containerId);"], [321, "    try {"], [322, "      final DockerClient dockerClient = new DefaultDockerClient(DOCKER_HOST.uri());"]]}, "num_lines_added": 47, "num_lines_removed": 48}