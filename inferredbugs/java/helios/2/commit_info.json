{"hash": "74fdb838153694cd2437b46b5274cd6e9df79db2", "message": "Warning fixes.\n\nMostly using try with resources to clean up docker clients", "file_num_lines": 91, "diff_parsed": {"added": [[63, "    try (final DefaultDockerClient dockerClient = new DefaultDockerClient(DOCKER_HOST.uri())) {"], [64, "      final HeliosClient client = defaultClient();"], [65, ""], [66, "      awaitHostStatus(client, testHost(), UP, LONG_WAIT_MINUTES, MINUTES);"], [67, ""], [68, "      final Map<String, PortMapping> ports1 ="], [69, "          ImmutableMap.of(\"foo\", PortMapping.of(4711),"], [70, "                          \"bar\", PortMapping.of(4712, externalPort1));"], [71, ""], [72, "      final ImmutableMap<String, PortMapping> expectedMapping1 ="], [73, "          ImmutableMap.of(\"foo\", PortMapping.of(4711, portRange.lowerEndpoint()),"], [74, "                          \"bar\", PortMapping.of(4712, externalPort1));"], [75, ""], [76, "      final Map<String, PortMapping> ports2 ="], [77, "          ImmutableMap.of(\"foo\", PortMapping.of(4711),"], [78, "                          \"bar\", PortMapping.of(4712, externalPort2));"], [79, ""], [80, "      final ImmutableMap<String, PortMapping> expectedMapping2 ="], [81, "          ImmutableMap.of(\"foo\", PortMapping.of(4711, portRange.lowerEndpoint() + 1),"], [82, "                          \"bar\", PortMapping.of(4712, externalPort2));"], [83, ""], [84, "      final JobId jobId1 = createJob(testJobName + 1, testJobVersion, \"busybox\", IDLE_COMMAND,"], [85, "                                     EMPTY_ENV, ports1);"], [86, ""], [87, "      assertNotNull(jobId1);"], [88, "      deployJob(jobId1, testHost());"], [89, "      final TaskStatus firstTaskStatus1 = awaitJobState(client, testHost(), jobId1, RUNNING,"], [90, "                                                        LONG_WAIT_MINUTES, MINUTES);"], [91, ""], [92, "      final JobId jobId2 = createJob(testJobName + 2, testJobVersion, \"busybox\", IDLE_COMMAND,"], [93, "                                     EMPTY_ENV, ports2);"], [94, ""], [95, "      assertNotNull(jobId2);"], [96, "      deployJob(jobId2, testHost());"], [97, "      final TaskStatus firstTaskStatus2 = awaitJobState(client, testHost(), jobId2, RUNNING,"], [98, "                                                        LONG_WAIT_MINUTES, MINUTES);"], [99, ""], [100, "      assertEquals(expectedMapping1, firstTaskStatus1.getPorts());"], [101, "      assertEquals(expectedMapping2, firstTaskStatus2.getPorts());"], [102, ""], [103, "      // TODO (dano): the supervisor should report the allocated ports at all times"], [104, ""], [105, "      // Verify that port allocation is kept across container restarts"], [106, "      dockerClient.killContainer(firstTaskStatus1.getContainerId());"], [107, "      final TaskStatus restartedTaskStatus1 = Polling.await("], [108, "          LONG_WAIT_MINUTES, MINUTES, new Callable<TaskStatus>() {"], [109, "        @Override"], [110, "        public TaskStatus call() throws Exception {"], [111, "          final HostStatus hostStatus = client.hostStatus(testHost()).get();"], [112, "          final TaskStatus taskStatus = hostStatus.getStatuses().get(jobId1);"], [113, "          return (taskStatus != null && taskStatus.getState() == RUNNING &&"], [114, "                  !Objects.equals(taskStatus.getContainerId(), firstTaskStatus1.getContainerId()))"], [115, "                 ? taskStatus : null;"], [116, "        }"], [117, "      });"], [118, "      assertEquals(expectedMapping1, restartedTaskStatus1.getPorts());"], [119, ""], [120, "      // Verify that port allocation is kept across agent restarts"], [121, "      agent1.stopAsync().awaitTerminated();"], [122, "      dockerClient.killContainer(firstTaskStatus2.getContainerId());"], [123, "      startDefaultAgent(testHost());"], [124, "      final TaskStatus restartedTaskStatus2 = Polling.await("], [125, "          LONG_WAIT_MINUTES, MINUTES, new Callable<TaskStatus>() {"], [126, "        @Override"], [127, "        public TaskStatus call() throws Exception {"], [128, "          final HostStatus hostStatus = client.hostStatus(testHost()).get();"], [129, "          final TaskStatus taskStatus = hostStatus.getStatuses().get(jobId2);"], [130, "          return (taskStatus != null && taskStatus.getState() == RUNNING &&"], [131, "                  !Objects.equals(taskStatus.getContainerId(), firstTaskStatus2.getContainerId()))"], [132, "                 ? taskStatus : null;"], [133, "        }"], [134, "      });"], [135, "      assertEquals(expectedMapping2, restartedTaskStatus2.getPorts());"], [136, "    }"]], "deleted": [[28, "import com.spotify.docker.client.DockerClient;"], [64, "    final DockerClient dockerClient = new DefaultDockerClient(DOCKER_HOST.uri());"], [65, ""], [66, "    final HeliosClient client = defaultClient();"], [67, ""], [68, "    awaitHostStatus(client, testHost(), UP, LONG_WAIT_MINUTES, MINUTES);"], [69, ""], [70, "    final Map<String, PortMapping> ports1 ="], [71, "        ImmutableMap.of(\"foo\", PortMapping.of(4711),"], [72, "                        \"bar\", PortMapping.of(4712, externalPort1));"], [73, ""], [74, "    final ImmutableMap<String, PortMapping> expectedMapping1 ="], [75, "        ImmutableMap.of(\"foo\", PortMapping.of(4711, portRange.lowerEndpoint()),"], [76, "                        \"bar\", PortMapping.of(4712, externalPort1));"], [77, ""], [78, "    final Map<String, PortMapping> ports2 ="], [79, "        ImmutableMap.of(\"foo\", PortMapping.of(4711),"], [80, "                        \"bar\", PortMapping.of(4712, externalPort2));"], [81, ""], [82, "    final ImmutableMap<String, PortMapping> expectedMapping2 ="], [83, "        ImmutableMap.of(\"foo\", PortMapping.of(4711, portRange.lowerEndpoint() + 1),"], [84, "                        \"bar\", PortMapping.of(4712, externalPort2));"], [85, ""], [86, "    final JobId jobId1 = createJob(testJobName + 1, testJobVersion, \"busybox\", IDLE_COMMAND,"], [87, "                                   EMPTY_ENV, ports1);"], [88, ""], [89, "    assertNotNull(jobId1);"], [90, "    deployJob(jobId1, testHost());"], [91, "    final TaskStatus firstTaskStatus1 = awaitJobState(client, testHost(), jobId1, RUNNING,"], [92, "                                                      LONG_WAIT_MINUTES, MINUTES);"], [93, ""], [94, "    final JobId jobId2 = createJob(testJobName + 2, testJobVersion, \"busybox\", IDLE_COMMAND,"], [95, "                                   EMPTY_ENV, ports2);"], [96, ""], [97, "    assertNotNull(jobId2);"], [98, "    deployJob(jobId2, testHost());"], [99, "    final TaskStatus firstTaskStatus2 = awaitJobState(client, testHost(), jobId2, RUNNING,"], [100, "                                                      LONG_WAIT_MINUTES, MINUTES);"], [101, ""], [102, "    assertEquals(expectedMapping1, firstTaskStatus1.getPorts());"], [103, "    assertEquals(expectedMapping2, firstTaskStatus2.getPorts());"], [104, ""], [105, "    // TODO (dano): the supervisor should report the allocated ports at all times"], [106, ""], [107, "    // Verify that port allocation is kept across container restarts"], [108, "    dockerClient.killContainer(firstTaskStatus1.getContainerId());"], [109, "    final TaskStatus restartedTaskStatus1 = Polling.await("], [110, "        LONG_WAIT_MINUTES, MINUTES, new Callable<TaskStatus>() {"], [111, "      @Override"], [112, "      public TaskStatus call() throws Exception {"], [113, "        final HostStatus hostStatus = client.hostStatus(testHost()).get();"], [114, "        final TaskStatus taskStatus = hostStatus.getStatuses().get(jobId1);"], [115, "        return (taskStatus != null && taskStatus.getState() == RUNNING &&"], [116, "                !Objects.equals(taskStatus.getContainerId(), firstTaskStatus1.getContainerId()))"], [117, "               ? taskStatus : null;"], [118, "      }"], [119, "    });"], [120, "    assertEquals(expectedMapping1, restartedTaskStatus1.getPorts());"], [121, ""], [122, "    // Verify that port allocation is kept across agent restarts"], [123, "    agent1.stopAsync().awaitTerminated();"], [124, "    dockerClient.killContainer(firstTaskStatus2.getContainerId());"], [125, "    startDefaultAgent(testHost());"], [126, "    final TaskStatus restartedTaskStatus2 = Polling.await("], [127, "        LONG_WAIT_MINUTES, MINUTES, new Callable<TaskStatus>() {"], [128, "      @Override"], [129, "      public TaskStatus call() throws Exception {"], [130, "        final HostStatus hostStatus = client.hostStatus(testHost()).get();"], [131, "        final TaskStatus taskStatus = hostStatus.getStatuses().get(jobId2);"], [132, "        return (taskStatus != null && taskStatus.getState() == RUNNING &&"], [133, "                !Objects.equals(taskStatus.getContainerId(), firstTaskStatus2.getContainerId()))"], [134, "               ? taskStatus : null;"], [135, "      }"], [136, "    });"], [137, "    assertEquals(expectedMapping2, restartedTaskStatus2.getPorts());"]]}, "num_lines_added": 74, "num_lines_removed": 75}