{"hash": "3a9d9c8a3be41203d64d309402aec82993f61b2e", "message": "Fix for issue #53. Read methods for numbers check and if necessary acquire the next byte store.", "file_num_lines": 90, "diff_parsed": {"added": [[3, "import static org.junit.Assert.assertEquals;"], [4, "import static org.junit.Assert.assertFalse;"], [5, "import static org.junit.Assert.assertNull;"], [6, "import static org.junit.Assert.assertTrue;"], [11, "import java.util.function.BiConsumer;"], [12, "import java.util.function.Function;"], [14, "import org.junit.After;"], [15, "import org.junit.Test;"], [16, ""], [17, "import net.openhft.chronicle.core.OS;"], [23, "        File tempFile = File.createTempFile(\"mapped\", \"bytes\");"], [24, "        tempFile.deleteOnExit();"], [25, "        MappedBytes bytes = MappedBytes.mappedBytes(tempFile, 64 << 10);"], [35, "        tempFile.deleteOnExit();"], [36, "        try (RandomAccessFile raf = new RandomAccessFile(tempFile, \"rw\")) {"], [37, "            raf.setLength(4096);"], [38, "            assertTrue(tempFile.setWritable(false));"], [39, "            try (MappedBytes mappedBytes = MappedBytes.readOnly(tempFile)) {"], [40, "                assertTrue(mappedBytes.isBackingFileReadOnly());"], [41, "            }"], [42, "        }"], [43, ""], [59, "    @Test"], [60, "    public void acquireByteStoreBeforeReadNumberValues() throws Exception {"], [61, "        acquireByteStoreBeforeRead(Long.BYTES, (b, t) -> b.writeLong(t.longValue()), (b) -> b.readLong(), (value) -> Long.valueOf(value));"], [62, "        acquireByteStoreBeforeRead(Integer.BYTES, (b, t) -> b.writeInt(t.intValue()), (b) -> b.readInt(),"], [63, "                (value) -> Integer.valueOf(value));"], [64, "        acquireByteStoreBeforeRead(Short.BYTES, (b, t) -> b.writeShort(t.shortValue()), (b) -> b.readShort(),"], [65, "                (value) -> Short.valueOf(value.shortValue()));"], [66, "        acquireByteStoreBeforeRead(Byte.BYTES, (b, t) -> b.writeByte(t.byteValue()), (b) -> b.readByte(),"], [67, "                (value) -> Byte.valueOf(value.byteValue()));"], [68, "        acquireByteStoreBeforeRead(Double.BYTES, (b, t) -> b.writeDouble(t.doubleValue()), (b) -> b.readDouble(),"], [69, "                (value) -> Double.valueOf(value));"], [70, "        acquireByteStoreBeforeRead(Float.BYTES, (b, t) -> b.writeFloat(t.floatValue()), (b) -> b.readFloat(),"], [71, "                (value) -> Float.valueOf(value));"], [72, "    }"], [73, ""], [74, "    private <T extends Number> void acquireByteStoreBeforeRead(int sizeInBytes, BiConsumer<MappedBytes, T> writer,"], [75, "            Function<MappedBytes, T> reader, Function<Integer, T> converter) throws Exception {"], [76, "        int chunkSize = sizeInBytes * 8;"], [77, "        MappedBytes bytes = null;"], [78, "        try {"], [79, "            File tmpFile = File.createTempFile(\"mapped\", \"bytes\");"], [80, "            tmpFile.deleteOnExit();"], [81, "            bytes = MappedBytes.mappedBytes(tmpFile, chunkSize);"], [82, "            for (int i = 0; i < ((chunkSize * 2) / sizeInBytes); i++) {"], [83, "                writer.accept(bytes, converter.apply(i));"], [84, "            }"], [85, "            bytes.release();"], [86, "            bytes = MappedBytes.mappedBytes(tmpFile, chunkSize);"], [87, "            for (int i = 0; i < ((chunkSize * 2) / sizeInBytes); i++) {"], [88, "                assertEquals(converter.apply(i), reader.apply(bytes));"], [89, "            }"], [90, "            bytes.release();"], [91, ""], [92, "        } finally {"], [93, "            if ((bytes != null) && !bytes.isClosed()) {"], [94, "                bytes.release();"], [95, "            }"], [96, "        }"], [97, "    }"], [98, ""]], "deleted": [[3, "import net.openhft.chronicle.core.OS;"], [4, "import org.junit.After;"], [5, "import org.junit.Test;"], [11, "import static org.junit.Assert.*;"], [17, "        MappedBytes bytes = MappedBytes.mappedBytes(File.createTempFile(\"mapped\", \"bytes\"), 64 << 10);"], [27, "        final RandomAccessFile raf = new RandomAccessFile(tempFile, \"rw\");"], [28, "        raf.setLength(4096);"], [29, "        assertTrue(tempFile.setWritable(false));"], [30, "        final MappedBytes mappedBytes = MappedBytes.readOnly(tempFile);"], [31, ""], [32, "        assertTrue(mappedBytes."], [33, "                isBackingFileReadOnly());"], [34, "        mappedBytes.release();"]]}, "num_lines_added": 62, "num_lines_removed": 13}