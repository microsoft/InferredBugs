    public ClassPrototype generate(Class<?> type) {
        Module module = ModuleRegistry.getDefault().getOrCreate(type.getPackage().getName());
        ClassPrototype prototype = module.get(type.getSimpleName());

        if (prototype != null) {
            return prototype;
        }

        prototype = new ClassPrototype(module, type.getSimpleName());
        prototype.getAssociated().add(type);

        for (Field field : type.getFields()) {
            ClassPrototypeFieldGenerator generator = new ClassPrototypeFieldGenerator(type, prototype, field);
            PrototypeField prototypeField = generator.generate();
            prototype.getFields().add(prototypeField);
        }

        for (Constructor<?> constructor : type.getConstructors()) {
            ClassPrototypeConstructorGenerator generator = new ClassPrototypeConstructorGenerator(type, prototype, constructor);
            PrototypeConstructor prototypeField = generator.generate();
            prototype.getConstructors().add(prototypeField);
        }

        for (Method method : type.getMethods()) {
            switch (method.getName()) {
                case "finalize":
                case "notify":
                case "notifyAll":
                case "wait":
                    continue;
            }

            ClassPrototypeMethodGenerator generator = new ClassPrototypeMethodGenerator(type, prototype, method);
            PrototypeMethod prototypeMethod = generator.generate();
            prototype.getMethods().registerMethod(prototypeMethod);
        }

        return prototype;
    }