    @Override
    public void parse(Tokens source, ParserData data) {
        PandaScript script = data.getComponent(PandaComponents.PANDA_SCRIPT);
        TokenReader reader = new PandaTokenReader(source);

        GappedPatternExtractor extractor = PATTERN.extractor();
        List<Tokens> gaps = extractor.extract(reader);

        if (gaps == null) {
            throw new PandaParserException("Cannot parse expression::instance");
        }

        String className = gaps.get(0).asString();
        ModuleLoader moduleLoader = script.getModuleLoader();
        this.returnType = moduleLoader.forClass(className).fetch();

        if (returnType == null) {
            throw PandaParserFailure.builder()
                    .message("Unknown return type '" + className + "'")
                    .data(data)
                    .source(source)
                    .build();
        }

        ArgumentParser argumentParser = new ArgumentParser();
        this.arguments = argumentParser.parse(data, gaps.get(1));
        this.constructor = ConstructorUtils.matchConstructor(returnType, arguments);

        if (constructor == null) {
            throw new PandaParserFailure("Cannot find constructor of " + returnType.getClassName() + " for the specified arguments " + Arrays.toString(this.arguments), data);
        }
    }