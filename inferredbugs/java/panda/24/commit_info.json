{"hash": "76071ba981fdb31d9f8d71dcc53e6bb3a38aa4de", "message": "Improve references and optionals implementation", "file_num_lines": 66, "diff_parsed": {"added": [[19, "import org.panda_lang.panda.framework.design.architecture.PandaScript;"], [21, "import org.panda_lang.panda.framework.design.architecture.prototype.ClassPrototypeReference;"], [22, "import org.panda_lang.panda.framework.design.architecture.prototype.constructor.ConstructorUtils;"], [24, "import org.panda_lang.panda.framework.design.interpreter.parser.PandaComponents;"], [26, "import org.panda_lang.panda.framework.design.interpreter.pattern.gapped.GappedPattern;"], [27, "import org.panda_lang.panda.framework.design.interpreter.pattern.gapped.GappedPatternBuilder;"], [28, "import org.panda_lang.panda.framework.design.interpreter.pattern.gapped.extractor.GappedPatternExtractor;"], [31, "import org.panda_lang.panda.framework.design.resource.parsers.expression.ExpressionCallbackParser;"], [37, "import org.panda_lang.panda.framework.language.resource.parsers.general.ArgumentParser;"], [41, "import java.util.Optional;"], [49, "    private ClassPrototypeReference returnType;"], [65, ""], [68, "        Optional<ClassPrototypeReference> reference = moduleLoader.forClass(className);"], [69, ""], [70, "        if (!reference.isPresent()) {"], [71, "            throw new PandaParserFailure(\"Unknown return type\", data, source);"], [74, "        this.returnType = reference.get();"], [75, "        this.arguments = new ArgumentParser().parse(data, gaps.get(1));"], [76, "        this.constructor = ConstructorUtils.matchConstructor(returnType.fetch(), arguments);"], [85, "        return new InstanceExpressionCallback(returnType.fetch(), constructor, arguments);"], [96, "    public ClassPrototypeReference getReturnType() {"]], "deleted": [[20, "import org.panda_lang.panda.framework.design.architecture.prototype.ClassPrototype;"], [26, "import org.panda_lang.panda.framework.design.architecture.PandaScript;"], [27, "import org.panda_lang.panda.framework.design.architecture.prototype.constructor.ConstructorUtils;"], [28, "import org.panda_lang.panda.framework.design.interpreter.parser.PandaComponents;"], [31, "import org.panda_lang.panda.framework.language.resource.parsers.general.ArgumentParser;"], [32, "import org.panda_lang.panda.framework.design.resource.parsers.expression.ExpressionCallbackParser;"], [33, "import org.panda_lang.panda.framework.design.interpreter.pattern.gapped.GappedPattern;"], [34, "import org.panda_lang.panda.framework.design.interpreter.pattern.gapped.extractor.GappedPatternExtractor;"], [35, "import org.panda_lang.panda.framework.design.interpreter.pattern.gapped.GappedPatternBuilder;"], [48, "    private ClassPrototype returnType;"], [66, "        this.returnType = moduleLoader.forClass(className).fetch();"], [67, ""], [68, "        if (returnType == null) {"], [69, "            throw PandaParserFailure.builder()"], [70, "                    .message(\"Unknown return type '\" + className + \"'\")"], [71, "                    .data(data)"], [72, "                    .source(source)"], [73, "                    .build();"], [76, "        ArgumentParser argumentParser = new ArgumentParser();"], [77, "        this.arguments = argumentParser.parse(data, gaps.get(1));"], [78, "        this.constructor = ConstructorUtils.matchConstructor(returnType, arguments);"], [87, "        return new InstanceExpressionCallback(returnType, constructor, arguments);"], [98, "    public ClassPrototype getReturnType() {"]]}, "num_lines_added": 21, "num_lines_removed": 23}