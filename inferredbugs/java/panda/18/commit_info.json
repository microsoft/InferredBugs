{"hash": "82ad646f25b142d297708591736c95acabf0155f", "message": "Important fix in MatchableDistributor, part of the compatiblity fixes", "file_num_lines": 85, "diff_parsed": {"added": [[23, "import org.panda_lang.panda.framework.design.interpreter.token.TokensUtils;"], [24, "import org.panda_lang.panda.framework.design.interpreter.token.stream.SourceStream;"], [28, "import org.panda_lang.panda.framework.language.interpreter.parser.expression.ExpressionSubparsers;"], [29, "import org.panda_lang.panda.framework.language.interpreter.token.distributors.DistributorUtils;"], [32, "import org.panda_lang.panda.framework.language.interpreter.token.stream.PandaSourceStream;"], [42, "        SourceStream stream = new PandaSourceStream(source);"], [44, "        ExpressionSubparsers subparsers = main.getSubparsers().fork();"], [45, "        subparsers.removeSubparser(getName());"], [46, ""], [47, "        ExpressionParser parser = new ExpressionParser(main, subparsers);"], [48, "        Tokens value = parser.read(stream);"], [50, "        if (TokensUtils.isEmpty(value)) {"], [54, "        MatchableDistributor matchable = new MatchableDistributor(new TokenDistributor(source));"], [55, "        matchable.getDistributor().setIndex(source.size() - stream.getUnreadLength());"], [56, ""], [57, "        // at least 3 elements required: [ <index> ]"], [58, "        if ((source.size() - matchable.getIndex()) < 3) {"], [59, "            return null;"], [60, "        }"], [82, "        Tokens selected = source.subSource(0, matchable.getIndex() + 1);"], [99, "        Tokens reversed = source.reverse();"], [100, ""], [101, "        MatchableDistributor matchable = new MatchableDistributor(new TokenDistributor(reversed));"], [102, "        matchable.withReplaced(DistributorUtils.REVERSED_OPERATORS);"], [103, ""], [104, "        if (!matchable.nextVerified().contentEquals(Separators.SQUARE_BRACKET_RIGHT)) {"], [105, "            return null;"], [106, "        }"], [107, ""], [108, "        matchable.nextVerified();"], [109, ""], [110, "        // read the [ ] section"], [111, "        while (matchable.hasNext() && !matchable.isMatchable()) {"], [112, "            matchable.nextVerified();"], [113, "        }"], [114, ""], [115, "        if (!matchable.current().contentEquals(Separators.SQUARE_BRACKET_LEFT)) {"], [116, "            return null;"], [117, "        }"], [118, ""], [123, "    public int getMinimumLength() {"], [124, "        return 4;"], [125, "    }"], [126, ""], [127, "    @Override"]], "deleted": [[37, "        Tokens selected = SubparserUtils.readSeparated(main, source, ARRAY_SEPARATORS, SubparserUtils.NAMES_FILTER, MatchableDistributor::hasNext);"], [39, "        MatchableDistributor matchable = new MatchableDistributor(new TokenDistributor(source));"], [40, "        matchable.getDistributor().setIndex(selected != null ? selected.size() : 0);"], [42, "        // at least 4 elements required: <field/variable> [ <index> ]"], [43, "        if ((source.size() - matchable.getIndex()) < 4) {"], [47, "        // read field name"], [48, "        matchable.nextVerified();"], [70, "        selected = source.subSource(0, matchable.getIndex() + 1);"]]}, "num_lines_added": 45, "num_lines_removed": 8}