    @Override
    public void parse(TokenizedSource source, ParserInfo info) {
        PandaScript script = info.getComponent(Components.SCRIPT);
        TokenReader reader = new PandaTokenReader(source);

        Extractor extractor = PATTERN.extractor();
        List<TokenizedSource> gaps = extractor.extract(reader);

        if (gaps == null) {
            throw new PandaParserException("Cannot parse expression::instance");
        }

        String className = gaps.get(0).asString();
        ImportRegistry importRegistry = script.getImportRegistry();
        this.returnType = importRegistry.forClass(className);

        if (returnType == null) {
            throw new PandaParserException("Unknown return type '" + className + "'");
        }

        ArgumentParser argumentParser = new ArgumentParser();
        this.arguments = argumentParser.parse(info, gaps.get(1));
        this.constructor = ConstructorUtils.matchConstructor(returnType, arguments);

        if (constructor == null) {
            throw new PandaParserException("Cannot find " + className + " constructor for the specified arguments");
        }
    }