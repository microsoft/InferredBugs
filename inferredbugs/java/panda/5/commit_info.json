{"hash": "d21fdd385b81f3de092e3e40865d7ed79e3ced45", "message": "Add fields and field-expressions, fix token-pattern and improve callbacks", "file_num_lines": 108, "diff_parsed": {"added": [[19, "import org.panda_lang.panda.core.interpreter.lexer.pattern.TokenPattern;"], [44, "import org.panda_lang.panda.language.syntax.tokens.Separators;"], [50, "    protected static final TokenPattern FIELD_PATTERN = TokenPattern.builder()"], [51, "            .hollow()"], [52, "            .unit(Separators.PERIOD)"], [53, "            .hollow()"], [54, "            .build();"], [55, ""], [104, "                return new Expression(field.getType(), new FieldExpressionCallback(ThisExpressionCallback.asExpression(prototype), field, memoryIndex));"], [128, "        List<TokenizedSource> fieldMatches = FIELD_PATTERN.match(expressionReader);"], [129, ""], [130, "        if (fieldMatches != null && fieldMatches.size() == 2) {"], [131, "            Expression instanceExpression = parse(info, fieldMatches.get(0));"], [132, "            ClassPrototype instanceType = instanceExpression.getReturnType();"], [133, "            Field instanceField = instanceType.getField(fieldMatches.get(1).getLast().getToken().getTokenValue());"], [135, "            if (instanceField == null) {"], [136, ""], [137, "            }"], [139, "            int memoryIndex = instanceType.getFields().indexOf(instanceField);"], [140, "            return new Expression(instanceType, new FieldExpressionCallback(instanceExpression, instanceField, memoryIndex));"]], "deleted": [[42, "import org.panda_lang.panda.language.structure.prototype.structure.field.parser.FieldParser;"], [97, "                return new Expression(field.getType(), new FieldExpressionCallback(field, memoryIndex));"], [121, "        List<TokenizedSource> fieldMatches = FieldParser.PATTERN.match(expressionReader);"], [123, "        if (fieldMatches != null && fieldMatches.size() > 0) {"]]}, "num_lines_added": 20, "num_lines_removed": 4}