    public static ArrayClassPrototype obtain(ModuleLoader loader, String type) {
        ArrayClassPrototype cached = ARRAY_PROTOTYPES.get(type);

        if (cached != null) {
            return cached;
        }

        ClassPrototype prototype = loader.forClass(type.replace(PandaArray.IDENTIFIER, StringUtils.EMPTY));

        if (prototype == null) {
            return null;
        }

        int dimensions = StringUtils.countOccurrences(type, PandaArray.IDENTIFIER);
        Class<?> arrayType = ArrayUtils.getDimensionalArrayType(prototype.getAssociated(), dimensions);
        Class<?> arrayClass = ArrayUtils.getArrayClass(arrayType);

        ArrayClassPrototype arrayPrototype = new ArrayClassPrototype(loader.get(null), arrayClass, arrayType);
        loader.get(null).add(arrayPrototype);

        arrayPrototype.getMethods().registerMethod(PandaMethod.builder()
                .methodName("toString")
                .returnType(PrimitivePrototypeLiquid.OBJECT)
                .methodBody((branch, instance, parameters) -> {
                    if (!instance.getClass().isArray()) {
                        throw new RuntimeException();
                    }

                    branch.setReturnValue(new PandaValue(PrimitivePrototypeLiquid.OBJECT, Arrays.toString((Object[]) instance)));
                })
                .build());

        ARRAY_PROTOTYPES.put(type, arrayPrototype);
        return arrayPrototype;
    }