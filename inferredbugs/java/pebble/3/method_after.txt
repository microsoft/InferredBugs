    @Override
    public void render(PebbleTemplateImpl self, Writer writer, EvaluationContext context)
            throws PebbleException, IOException {
        Object iterableEvaluation = iterableExpression.evaluate(self, context);
        Iterable<?> iterable = null;

        if (iterableEvaluation == null) {
            return;
        }

        iterable = toIterable(iterableEvaluation);

        if (iterable == null) {
            throw new PebbleException(null, "Not an iterable object. Value = [" + iterableEvaluation.toString() + "]",
                getLineNumber(), self.getName());
        }

        Iterator<?> iterator = iterable.iterator();

        boolean newScope = false;

        if (iterator.hasNext()) {

            ScopeChain scopeChain = context.getScopeChain();

            /*
             * Only if there is a variable name conflict between one of the
             * variables added by the for loop construct and an existing
             * variable do we push another scope, otherwise we reuse the current
             * scope for performance purposes.
             */
            if (scopeChain.currentScopeContainsVariable("loop") || scopeChain
                    .currentScopeContainsVariable(variableName)) {
                scopeChain.pushScope();
                newScope = true;
            }

            int length = getIteratorSize(iterableEvaluation);
            int index = 0;

            Map<String, Object> loop = null;

            boolean usingExecutorService = context.getExecutorService() != null;

            while (iterator.hasNext()) {

                /*
                 * If the user is using an executor service (i.e. parallel node), we
                 * must create a new map with every iteration instead of
                 * re-using the same one; it's imperative that each thread would
                 * get it's own distinct copy of the context.
                 */
                if (index == 0 || usingExecutorService) {
                    loop = new HashMap<>();
                    loop.put("first", index == 0);
                    loop.put("last", index == length - 1);
                    loop.put("length", length);
                }else{

                    // second iteration
                    if(index == 1){
                        loop.put("first", false);
                    }

                    // last iteration
                    if(index == length - 1){
                        loop.put("last", true);
                    }
                }

                loop.put("revindex", length - index - 1);
                loop.put("index", index++);

                scopeChain.put("loop", loop);

                scopeChain.put(variableName, iterator.next());
                body.render(self, writer, context);
            }

            if (newScope) {
                scopeChain.popScope();
            }

        } else if (elseBody != null) {
            elseBody.render(self, writer, context);
        }

    }