{"hash": "6c9792ffabec0a5189e35104680af5a0d7456be3", "message": "Swapped the java.io for the java.nio IO API and did some cleanup", "file_num_lines": 127, "diff_parsed": {"added": [[30, "import java.net.URISyntaxException;"], [31, "import java.nio.file.*;"], [40, " * @since 2.4.0"], [42, "public abstract class AbstractPackageMojo extends AbstractCopyDependenciesMojo {"], [45, "    private static final String TEMP_DIR_NAME_PREFIX = \"kumuluzee-loader\";"], [52, "    private String buildDirectory;"], [62, "        buildDirectory = mavenProject.getBuild().getDirectory();"], [63, "        outputDirectory = mavenProject.getBuild().getOutputDirectory();"], [73, "        super.copyDependencies(mavenProject, mavenSession, buildPluginManager, \"lib\");"], [77, ""], [81, ""], [85, "            Path pluginJarFile = Paths.get(pluginJarPath);"], [87, "            FileSystem pluginJarFs = FileSystems.newFileSystem(pluginJarFile, null);"], [89, "            Path loaderJarFile = pluginJarFs.getPath(LOADER_JAR);"], [90, "            Path tmpJar = Files.createTempFile(TEMP_DIR_NAME_PREFIX, \".tmp\");"], [92, "            Files.copy(loaderJarFile, tmpJar, StandardCopyOption.REPLACE_EXISTING);"], [94, "            JarFile loaderJar = new JarFile(tmpJar.toFile());"], [95, ""], [96, "            loaderJar.stream().parallel()"], [100, ""], [101, "                            Path outputPath = Paths.get(outputDirectory, loaderJarEntry.getName());"], [102, ""], [103, "                            Path outputPathParent = outputPath.getParent();"], [104, ""], [105, "                            if (outputPathParent != null) {"], [106, ""], [107, "                                Files.createDirectories(outputPathParent);"], [111, ""], [112, "                            Files.copy(inputStream, outputPath, StandardCopyOption.REPLACE_EXISTING);"], [113, ""], [114, "                            inputStream.close();"], [115, "                        } catch (IOException ignored) {"], [120, ""], [121, "            Files.delete(tmpJar);"], [122, ""], [129, ""], [131, ""], [135, "            if (codeSource == null) {"], [136, ""], [137, "                throw new MojoExecutionException(\"Failed to retrieve plugin JAR file path. Unobtainable Code Source.\");"], [138, "            }"], [139, ""], [140, "            return codeSource.getLocation().toURI().getSchemeSpecificPart();"], [141, "        } catch (URISyntaxException e) {"], [142, "            throw new MojoExecutionException(\"Failed to retrieve plugin JAR file path.\", e);"], [143, "        }"], [147, ""], [152, "                        version(MojoConstants.MAVEN_JAR_PLUGIN_VERSION)"], [157, "                        element(\"outputDirectory\", buildDirectory),"], [171, ""], [173, ""], [174, "            Path sourcePath1 = Paths.get(buildDirectory, finalName + \".jar\");"], [175, ""], [176, "            if (Files.exists(sourcePath1)) {"], [177, ""], [179, "                        sourcePath1,"], [180, "                        sourcePath1.resolveSibling(finalName + \".jar.original\"),"], [185, "            Path sourcePath2 = Paths.get(buildDirectory, finalName + \"-uber.jar\");"], [186, ""], [187, "            if (Files.exists(sourcePath2)) {"], [188, ""], [190, "                        sourcePath2,"], [191, "                        sourcePath2.resolveSibling(finalName + \".jar\"),"], [195, "        } catch (IOException e) {"], [196, "            throw new MojoExecutionException(\"Unable to rename the final build artifact.\");"]], "deleted": [[23, "import org.apache.commons.io.FileUtils;"], [29, "import java.io.File;"], [32, "import java.net.URI;"], [33, "import java.nio.file.Files;"], [34, "import java.nio.file.StandardCopyOption;"], [37, "import java.util.jar.JarEntry;"], [45, "public abstract class AbstractPackageMojo extends AbstractCopyDependenciesAndWebappMojo {"], [48, "    private static final String TEMP_DIR_NAME_PREFIX = \"kumuluzee-loader.\";"], [64, "        outputDirectory = mavenProject.getBuild().getDirectory();"], [74, "        super.copyDependencies(mavenProject, mavenSession, buildPluginManager, \"classes/lib\");"], [77, "//    private void unpackDependencies() throws MojoExecutionException {"], [78, "//        ExecutionEnvironment executionEnvironment = executionEnvironment(mavenProject, mavenSession, buildPluginManager);"], [79, "//"], [80, "//        try {"], [81, "//            executeMojo("], [82, "//                    plugin("], [83, "//                            groupId(\"org.apache.maven.plugins\"),"], [84, "//                            artifactId(\"maven-dependency-plugin\"),"], [85, "//                            version(\"3.0.1\")"], [86, "//                    ),"], [87, "//                    goal(\"unpack\"),"], [88, "//                    configuration("], [89, "//                            element(\"artifact\", LOADER_JAR_GAV),"], [90, "//                            element(\"excludes\", \"META-INF/**\"),"], [91, "//                            element(\"outputDirectory\", \"${project.build.directory}/classes\")"], [92, "//                    ),"], [93, "//                    executionEnvironment"], [94, "//            );"], [95, "//        } catch (MojoExecutionException e) {"], [96, "//            unpackDependenciesFallback();"], [97, "//        }"], [98, "//    }"], [99, ""], [106, "            JarFile pluginJar = new JarFile(new File(pluginJarPath));"], [108, "            // extract loader JAR from plugin JAR"], [109, "            JarEntry pluginJarloaderJarEntry = pluginJar.getJarEntry(LOADER_JAR);"], [110, "            InputStream loaderJarInputStream = pluginJar.getInputStream(pluginJarloaderJarEntry);"], [112, "            File tmpDirectory = new File(System.getProperty(\"java.io.tmpdir\"), \"EeBootLoader\");"], [113, "            if (!tmpDirectory.exists()) {"], [114, "                tmpDirectory.mkdir();"], [115, "            }"], [116, "            chmod777(tmpDirectory);"], [118, "            File tmpLoaderJarFile = File.createTempFile(TEMP_DIR_NAME_PREFIX, null, tmpDirectory);"], [119, "            tmpLoaderJarFile.deleteOnExit();"], [120, "            chmod777(tmpLoaderJarFile);"], [122, "            FileUtils.copyInputStreamToFile(loaderJarInputStream, tmpLoaderJarFile);"], [124, "            // extract loader JAR contents"], [125, "            JarFile loaderJar = new JarFile(tmpLoaderJarFile);"], [126, "            loaderJar"], [127, "                    .stream()"], [128, "                    .parallel()"], [132, "                            File file = new File(outputDirectory, \"classes\" + File.separator + loaderJarEntry.getName());"], [133, "                            if (file.getParentFile() != null) {"], [134, "                                file.getParentFile().mkdirs();"], [138, "                            FileUtils.copyInputStreamToFile(inputStream, file);"], [139, "                        } catch (IOException e) {"], [140, "                            // ignore"], [154, "            URI location = codeSource == null ? null : codeSource.getLocation().toURI();"], [155, "            return location == null ? null : location.getSchemeSpecificPart();"], [156, "        } catch (Exception e) {"], [157, "            throw new MojoExecutionException(\"Failed to retrieve plugin JAR file path.\");"], [158, "        }"], [159, "    }"], [161, "    private void chmod777(File file) {"], [162, "        file.setReadable(true, false);"], [163, "        file.setWritable(true, false);"], [164, "        file.setExecutable(true, false);"], [172, "                        version(\"3.0.2\")"], [177, "                        element(\"outputDirectory\", outputDirectory),"], [192, "            File sourceFile1 = new File(outputDirectory, finalName + \".jar\");"], [193, "            if (sourceFile1.exists()) {"], [195, "                        sourceFile1.toPath(),"], [196, "                        sourceFile1.toPath().resolveSibling(finalName + \".jar.original\"),"], [201, "            File sourceFile2 = new File(outputDirectory, finalName + \"-uber.jar\");"], [202, "            if (sourceFile2.exists()) {"], [204, "                        sourceFile2.toPath(),"], [205, "                        sourceFile2.toPath().resolveSibling(finalName + \".jar\"),"], [209, "        } catch (Exception e) {"], [210, "            throw new MojoExecutionException(\"Unable to rename final build artifact.\");"]]}, "num_lines_added": 65, "num_lines_removed": 79}