{"hash": "82ea0a195ff53e89225d60b34c96872adf24c12b", "message": "build fix", "file_num_lines": 146, "diff_parsed": {"added": [[53, "    private static final String LOADER_JAR_GAV = \"com.kumuluz.ee:kumuluzee-loader:2.3.0-SNAPSHOT\";"], [109, "        ExecutionEnvironment executionEnvironment = executionEnvironment(mavenProject, mavenSession, buildPluginManager);"], [111, "//        try {"], [112, "            executeMojo("], [113, "                    plugin("], [114, "                            groupId(\"org.apache.maven.plugins\"),"], [115, "                            artifactId(\"maven-dependency-plugin\"),"], [116, "                            version(\"3.0.1\")"], [117, "                    ),"], [118, "                    goal(\"unpack\"),"], [119, "                    configuration("], [120, "                            element(\"artifact\", LOADER_JAR_GAV),"], [121, "                            element(\"excludes\", \"META-INF/**\"),"], [122, "                            element(\"outputDirectory\", \"${project.build.directory}/classes\")"], [123, "                    ),"], [124, "                    executionEnvironment"], [125, "            );"], [126, "//        } catch (MojoExecutionException e) {"], [127, "//            unpackDependenciesFallback();"], [128, "//        }"], [131, "//    private void unpackDependenciesFallback() throws MojoExecutionException {"], [132, "//        try {"], [133, "//            // get plugin JAR"], [134, "//            String pluginJarPath = getPluginJarPath();"], [135, "//            JarFile pluginJar = new JarFile(new File(pluginJarPath));"], [136, "//"], [137, "//            // extract loader JAR from plugin JAR"], [138, "//            JarEntry pluginJarloaderJarEntry = pluginJar.getJarEntry(LOADER_JAR);"], [139, "//            InputStream loaderJarInputStream = pluginJar.getInputStream(pluginJarloaderJarEntry);"], [140, "//"], [141, "//            File tmpDirectory = new File(System.getProperty(\"java.io.tmpdir\"), \"EeBootLoader\");"], [142, "//            if (!tmpDirectory.exists()) {"], [143, "//                tmpDirectory.mkdir();"], [144, "//            }"], [145, "//            chmod777(tmpDirectory);"], [146, "//"], [147, "//            File tmpLoaderJarFile = File.createTempFile(TEMP_DIR_NAME_PREFIX, null, tmpDirectory);"], [148, "//            tmpLoaderJarFile.deleteOnExit();"], [149, "//            chmod777(tmpLoaderJarFile);"], [150, "//"], [151, "//            FileUtils.copyInputStreamToFile(loaderJarInputStream, tmpLoaderJarFile);"], [152, "//"], [153, "//            // extract loader JAR contents"], [154, "//            JarFile loaderJar = new JarFile(tmpLoaderJarFile);"], [155, "//            loaderJar"], [156, "//                    .stream()"], [157, "//                    .parallel()"], [158, "//                    .filter(loaderJarEntry -> loaderJarEntry.getName().toLowerCase().endsWith(CLASS_SUFFIX))"], [159, "//                    .forEach(loaderJarEntry -> {"], [160, "//                        try {"], [161, "//                            File file = new File(mavenProject.getBuild().getDirectory(), \"classes/\" + loaderJarEntry.getName());"], [162, "//                            if (file.getParentFile() != null) {"], [163, "//                                file.getParentFile().mkdirs();"], [164, "//                            }"], [165, "//"], [166, "//                            InputStream inputStream = loaderJar.getInputStream(loaderJarEntry);"], [167, "//                            FileUtils.copyInputStreamToFile(inputStream, file);"], [168, "//                        } catch (IOException e) {"], [169, "//                            // ignore"], [170, "//                        }"], [171, "//                    });"], [172, "//"], [173, "//            loaderJar.close();"], [174, "//        } catch (IOException e) {"], [175, "//            throw new MojoExecutionException(\"Failed to unpack kumuluzee-loader dependency: \" + e.getMessage() + \".\");"], [176, "//        }"], [177, "//    }"], [178, ""]], "deleted": [[23, "import org.apache.commons.io.FileUtils;"], [33, "import java.io.IOException;"], [34, "import java.io.InputStream;"], [40, "import java.util.jar.JarEntry;"], [41, "import java.util.jar.JarFile;"], [113, "        try {"], [114, "            // get plugin JAR"], [115, "            String pluginJarPath = getPluginJarPath();"], [116, "            JarFile pluginJar = new JarFile(new File(pluginJarPath));"], [117, ""], [118, "            // extract loader JAR from plugin JAR"], [119, "            JarEntry pluginJarloaderJarEntry = pluginJar.getJarEntry(LOADER_JAR);"], [120, "            InputStream loaderJarInputStream = pluginJar.getInputStream(pluginJarloaderJarEntry);"], [122, "            File tmpDirectory = new File(System.getProperty(\"java.io.tmpdir\"), \"EeBootLoader\");"], [123, "            if (!tmpDirectory.exists()) {"], [124, "                tmpDirectory.mkdir();"], [125, "            }"], [126, "            chmod777(tmpDirectory);"], [127, ""], [128, "            File tmpLoaderJarFile = File.createTempFile(TEMP_DIR_NAME_PREFIX, null, tmpDirectory);"], [129, "            tmpLoaderJarFile.deleteOnExit();"], [130, "            chmod777(tmpLoaderJarFile);"], [131, ""], [132, "            FileUtils.copyInputStreamToFile(loaderJarInputStream, tmpLoaderJarFile);"], [133, ""], [134, "            // extract loader JAR contents"], [135, "            JarFile loaderJar = new JarFile(tmpLoaderJarFile);"], [136, "            loaderJar"], [137, "                    .stream()"], [138, "                    .parallel()"], [139, "                    .filter(loaderJarEntry -> loaderJarEntry.getName().toLowerCase().endsWith(CLASS_SUFFIX))"], [140, "                    .forEach(loaderJarEntry -> {"], [141, "                        try {"], [142, "                            File file = new File(mavenProject.getBuild().getDirectory(), \"classes/\" + loaderJarEntry.getName());"], [143, "                            if (file.getParentFile() != null) {"], [144, "                                file.getParentFile().mkdirs();"], [145, "                            }"], [146, ""], [147, "                            InputStream inputStream = loaderJar.getInputStream(loaderJarEntry);"], [148, "                            FileUtils.copyInputStreamToFile(inputStream, file);"], [149, "                        } catch (IOException e) {"], [150, "                            // ignore"], [151, "                        }"], [152, "                    });"], [153, ""], [154, "            loaderJar.close();"], [155, "        } catch (IOException e) {"], [156, "            throw new MojoExecutionException(\"Failed to unpack kumuluzee-loader dependency: \" + e.getMessage() + \".\");"], [157, "        }"]]}, "num_lines_added": 68, "num_lines_removed": 49}