{"hash": "2de90020eddd7997cb6ff7920d35fe8be32dadb8", "message": "fixed caching+synchronization+brute-force-denial\n\ngit-svn-id: https://svn.berlios.de/svnroot/repos/yacy/trunk@67 6c8d7289-2bf4-0310-a012-ef5d649a1542", "file_num_lines": 622, "diff_parsed": {"added": [[326, "            checkCacheSpace();"], [329, "            //System.out.println(\"read from cache \" + n.toString());"], [338, "            if (n != null) synchronized (cache) {"], [353, "                synchronized (cache) {"], [354, "                    cacheScore.deleteScore(delkey);"], [355, "                    cache.remove(delkey);"], [356, "                }"], [361, "                synchronized (cache) {"], [362, "                    this.cacheScore = new kelondroMScoreCluster();"], [363, "                    this.cache = new HashMap();"], [364, "                }"], [447, "\t    entryFile.seek(seekpos(this.handle));"], [449, "\t\tohBytes[j] = b[j];"], [450, "\t\tentryFile.writeByte(b[j]);"], [451, "\t    }"], [459, "\t    entryFile.seek(seekpos(this.handle) + OHBYTEC);"], [461, "\t\tohHandle[j] = i[j];"], [475, "\t\t    ohBytes[j] = entryFile.readByte();"], [476, "\t\t}"], [561, "\t\tlong seek = seekpos(this.handle) + overhead + COLWIDTHS[0];"], [562, "\t\tfor (int i = 1; i < COLWIDTHS.length; i++) {"], [563, "\t\t    entryFile.seek(seek);"], [564, "\t\t    values[i] = new byte[COLWIDTHS[i]];"], [565, "\t\t    entryFile.read(values[i], 0, values[i].length);"], [566, "\t\t    seek = seek + COLWIDTHS[i];"], [567, "\t\t}"], [568, "\t\tupdateNode();"], [569, "\t\treturn values;"], [574, "\tprotected synchronized void save() throws IOException {"], [591, "\t    if (ohBytes == null) {for (int i = 0; i < OHBYTEC; i++) entryFile.writeByte(0);}"], [593, "\t    if (ohHandle == null) {for (int i = 0; i < OHHANDLEC; i++) entryFile.writeInt(0);}"], [629, "\t\tsynchronized (cache) {"], [630, "                    //System.out.println(\"updateNode \" + this.toString());"], [631, "                    cache.put(handle, this);"], [632, "\t\t    cacheScore.setScore(handle, (int) ((System.currentTimeMillis() - startup) / 1000));"], [633, "                    //System.out.println(\"cache now: \" + cache.toString());"], [634, "\t\t}"], [854, "        public int hashCode() {"], [855, "            return this.index;"], [856, "        }"]], "deleted": [[326, "\t    cache.put(handle, n);"], [327, "\t    cacheScore.setScore(handle, (int) ((System.currentTimeMillis() - startup) / 1000));"], [328, "\t    checkCacheSpace();"], [339, "            if (n != null) {"], [354, "                cacheScore.deleteScore(delkey);"], [355, "                cache.remove(delkey);"], [360, "                this.cacheScore = new kelondroMScoreCluster();"], [361, "                this.cache = new HashMap();"], [444, "            entryFile.seek(seekpos(this.handle));"], [446, "                ohBytes[j] = b[j];"], [447, "                entryFile.writeByte(b[j]);"], [448, "            }"], [456, "            entryFile.seek(seekpos(this.handle) + OHBYTEC);"], [458, "                ohHandle[j] = i[j];"], [472, "                    ohBytes[j] = entryFile.readByte();"], [473, "                }"], [558, "\t\t    long seek = seekpos(this.handle) + overhead + COLWIDTHS[0];"], [559, "\t\t    for (int i = 1; i < COLWIDTHS.length; i++) {"], [560, "\t\t\tentryFile.seek(seek);"], [561, "\t\t\tvalues[i] = new byte[COLWIDTHS[i]];"], [562, "\t\t\tentryFile.read(values[i], 0, values[i].length);"], [563, "\t\t\tseek = seek + COLWIDTHS[i];"], [564, "\t\t    }"], [565, "                    updateNode();"], [566, "\t\t    return values;"], [571, "\tprotected void save() throws IOException {"], [588, "\t    if (ohBytes  == null) {for (int i = 0; i < OHBYTEC; i++) entryFile.writeByte(0);}"], [590, "\t    if (ohHandle   == null) {for (int i = 0; i < OHHANDLEC; i++) entryFile.writeInt(0);}"], [626, "                cache.put(handle, this);"], [627, "                cacheScore.setScore(handle, (int) ((System.currentTimeMillis() - startup) / 1000));"], [847, ""]]}, "num_lines_added": 40, "num_lines_removed": 31}