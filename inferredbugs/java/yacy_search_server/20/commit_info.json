{"hash": "e26ac60c3e308c52b04b1405371577df28a0de91", "message": "modified assortment data structures\n\ngit-svn-id: https://svn.berlios.de/svnroot/repos/yacy/trunk@148 6c8d7289-2bf4-0310-a012-ef5d649a1542", "file_num_lines": 309, "diff_parsed": {"added": [[58, "    private static final int assortmentLimit = 1;"], [59, ""], [69, "    private plasmaWordIndexAssortmentCluster assortmentCluster;"], [97, "\tthis.assortmentCluster = new plasmaWordIndexAssortmentCluster(databaseRoot, assortmentLimit, singletonBufferSize, log);"], [217, "    public int[] assortmentsSizes() {"], [218, "        return assortmentCluster.sizes();"], [222, "        return java.lang.Math.max(assortmentCluster.sizeTotal(), java.lang.Math.max(backend.size(), cache.size()));"], [234, "                                 assortmentCluster.hashConjunction(startWordHash, true),"], [263, "        plasmaWordIndexEntryContainer flushedFromAssortment = assortmentCluster.removeFromAll(key);"], [264, "        if (flushedFromAssortment == null) {"], [265, "            // not found in assortments"], [266, "            if (container.size() <= assortmentLimit) {"], [267, "                // this fits into the assortments"], [268, "                plasmaWordIndexEntryContainer feedback = assortmentCluster.storeTry(key, container);"], [269, "                if (feedback == null) {"], [270, "                    return container.size();"], [271, "                } else {"], [272, "                    // *** should care about another option here ***"], [273, "                    return backend.addEntries(feedback, time);"], [274, "                }"], [280, "            // we have some records and must integrate them into the flush"], [281, "            container.add(flushedFromAssortment);"], [282, ""], [285, "\t\t// put assortmentRecord together with container back to ram"], [294, "\t\treturn backend.addEntries(container, java.lang.Math.max(time, flushedFromAssortment.updated()));"], [301, "        plasmaWordIndexEntryContainer container = assortmentCluster.removeFromAll(key);"], [302, "        if (container == null) {"], [305, "            // we have a non-empty entry-container"], [307, "            return backend.addEntries(container, container.updated()) > 0;"], [399, "        assortmentCluster.removeFromAll(wordHash);"], [409, "    public synchronized int addEntries(plasmaWordIndexEntryContainer container, long updateTime) {"], [424, "                hashDate.put(wordHash, new Long(updateTime));"], [431, "    private void addEntry(String wordHash, plasmaWordIndexEntry newEntry, long updateTime) {"], [434, "        if (entries.add(new plasmaWordIndexEntry[]{newEntry}, updateTime) > 0) {"], [437, "            hashDate.put(wordHash, new Long(updateTime));"], [442, "        assortmentCluster.close();"]], "deleted": [[67, "    private plasmaWordIndexAssortment singletons;"], [95, "\tthis.singletons = new plasmaWordIndexAssortment(databaseRoot, 1, singletonBufferSize, log);"], [215, "    public int singletonsSize() {"], [216, "        return singletons.size();"], [220, "        return java.lang.Math.max(singletons.size(), java.lang.Math.max(backend.size(), cache.size()));"], [232, "                                 singletons.hashes(startWordHash, true, false),"], [261, "        plasmaWordIndexAssortment.record singleton = singletons.remove(key);"], [262, "        if (singleton == null) {"], [263, "            // not found in singletons"], [264, "            if (container.size() == 1) {"], [265, "                // it is a singleton: store to singleton"], [266, "                singletons.store(key, singletons.newRecord(container.getOne(), time));"], [267, "                return 1;"], [273, "            // we have a singleton and need to integrate this in the flush"], [274, "            plasmaWordIndexEntry oldEntry = singleton.entries[0];"], [275, "            long oldTime = singleton.creationTime;"], [276, ""], [277, "\t    // put new entries to the container"], [278, "            if (!(container.contains(oldEntry.getUrlHash()))) container.add(oldEntry);"], [279, ""], [282, "\t\t// put singleton together with container back to ram"], [291, "\t\treturn backend.addEntries(container, java.lang.Math.max(time, oldTime));"], [298, "        plasmaWordIndexAssortment.record singleton = singletons.remove(key);"], [299, "        if (singleton == null) {"], [302, "            // we have a singleton"], [303, "            plasmaWordIndexEntry entry = (plasmaWordIndexEntry) singleton.entries[0];"], [304, "            long time = singleton.creationTime;"], [306, "            return backend.addEntries(plasmaWordIndexEntryContainer.instantContainer(key, entry), time) > 0;"], [398, "        singletons.remove(wordHash);"], [408, "    public synchronized int addEntries(plasmaWordIndexEntryContainer container, long creationTime) {"], [423, "                hashDate.put(wordHash, new Long(creationTime));"], [430, "    private void addEntry(String wordHash, plasmaWordIndexEntry newEntry, long creationTime) {"], [433, "        if (entries.add(newEntry)) {"], [436, "            hashDate.put(wordHash, new Long(creationTime));"], [441, "        singletons.close();"]]}, "num_lines_added": 36, "num_lines_removed": 35}