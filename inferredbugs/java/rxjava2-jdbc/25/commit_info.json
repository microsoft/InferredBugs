{"hash": "d33d23735acf3b89a02fbe9510f625f7a5b4f43c", "message": "close Database instances in unit tests to release Pool threads", "file_num_lines": 2068, "diff_parsed": {"added": [[114, "        try (Database db = db()) {"], [115, "            db.select(\"select score from person where name=?\") //"], [116, "                    .parameters(\"FRED\", \"JOSEPH\") //"], [117, "                    .getAs(Integer.class) //"], [118, "                    .test() //"], [119, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [120, "                    .assertNoErrors() //"], [121, "                    .assertValues(21, 34) //"], [122, "                    .assertComplete();"], [123, "        }"], [128, "        try (Database db = db()) {"], [129, "            db.select(\"select score from person where name=:name\") //"], [130, "                    .parameters(Parameter.named(\"name\", \"FRED\").value(\"JOSEPH\").list()) //"], [131, "                    .getAs(Integer.class) //"], [132, "                    .test() //"], [133, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [134, "                    .assertNoErrors() //"], [135, "                    .assertValues(21, 34) //"], [136, "                    .assertComplete();"], [137, "        }"], [139, ""], [142, "        try (Database db = db()) {"], [143, "            db.select(\"select score from person where name=?\") //"], [144, "                    .parameterStream(Flowable.just(\"FRED\", \"JOSEPH\")) //"], [145, "                    .getAs(Integer.class) //"], [146, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [147, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [148, "                    .assertNoErrors() //"], [149, "                    .assertValues(21, 34) //"], [150, "                    .assertComplete();"], [151, "        }"], [156, "        try (Database db = db()) {"], [157, "            db.select(\"select score from person where name=?\") //"], [158, "                    .parameterListStream("], [159, "                            Flowable.just(Arrays.asList(\"FRED\"), Arrays.asList(\"JOSEPH\"))) //"], [160, "                    .getAs(Integer.class) //"], [161, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [162, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [163, "                    .assertNoErrors() //"], [164, "                    .assertValues(21, 34) //"], [165, "                    .assertComplete();"], [166, "        }"], [171, "        try (Database db = db()) {"], [172, "            db.select(\"select count(*) from person\") //"], [173, "                    .parameters(1, 2, 3) //"], [174, "                    .getAs(Integer.class) //"], [175, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [176, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [177, "                    .assertValues(3, 3, 3) //"], [178, "                    .assertComplete();"], [179, "        }"], [184, "        try (Database db = db()) {"], [185, "            db.select(\"select score from person where name=? and score = ?\") //"], [186, "                    .parameterStream(Flowable.just(\"FRED\", 21, \"JOSEPH\", 34)) //"], [187, "                    .getAs(Integer.class) //"], [188, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [189, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [190, "                    .assertNoErrors() //"], [191, "                    .assertValues(21, 34) //"], [192, "                    .assertComplete();"], [193, "        }"], [198, "        try (Database db = db()) {"], [199, "            db.select(\"select score from person where name=? and score = ?\") //"], [200, "                    .parameterListStream("], [201, "                            Flowable.just(Arrays.asList(\"FRED\", 21), Arrays.asList(\"JOSEPH\", 34))) //"], [202, "                    .getAs(Integer.class) //"], [203, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [204, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [205, "                    .assertNoErrors() //"], [206, "                    .assertValues(21, 34) //"], [207, "                    .assertComplete();"], [208, "        }"], [213, "        try (Database db = Database.test()) {"], [214, "            db //"], [215, "                    .select(\"select score from person where name=?\") //"], [216, "                    .parameters(\"FRED\", \"JOSEPH\") //"], [217, "                    .getAs(Integer.class) //"], [218, "                    .test() //"], [219, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [220, "                    .assertNoErrors() //"], [221, "                    .assertValues(21, 34) //"], [222, "                    .assertComplete();"], [223, "        }"], [228, "        try (Database db = db()) {"], [229, "            db.select(\"select score from person order by name\") //"], [230, "                    .fetchSize(2) //"], [231, "                    .getAs(Integer.class) //"], [232, "                    .test() //"], [233, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [234, "                    .assertNoErrors() //"], [235, "                    .assertValues(21, 34, 25) //"], [236, "                    .assertComplete();"], [237, "        }"], [242, "        try (Database db = db()) {"], [243, "            db.select(\"select score from person order by name\") //"], [244, "                    .fetchSize(0) //"], [245, "                    .getAs(Integer.class) //"], [246, "                    .test() //"], [247, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [248, "                    .assertNoErrors() //"], [249, "                    .assertValues(21, 34, 25) //"], [250, "                    .assertComplete();"], [251, "        }"], [256, "        try (Database db = db()) {"], [257, "            db.select(\"select score from person order by name\") //"], [258, "                    .fetchSize(-1);"], [259, "        }"], [381, "        try (Database db = db()) {"], [382, "            db //"], [383, "                    .select(\"select score from person where name=:name\") //"], [384, "                    .parameter(\"name\", \"FRED\") //"], [385, "                    .parameter(\"name\", \"JOSEPH\") //"], [386, "                    .getAs(Integer.class) //"], [387, "                    .test() //"], [388, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [389, "                    .assertValues(21, 34) //"], [390, "                    .assertComplete();"], [391, "        }"], [396, "        try (Database db = db()) {"], [397, "            db //"], [398, "                    .select(\"select score from person where name=:name and name<>:name2\") //"], [399, "                    .parameter(\"name\", \"FRED\") //"], [400, "                    .parameter(\"name\", \"JOSEPH\") //"], [401, "                    .getAs(Integer.class) //"], [402, "                    .test() //"], [403, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [404, "                    .assertError(NamedParameterMissingException.class) //"], [405, "                    .assertNoValues();"], [406, "        }"], [423, "        try (Database db = db()) {"], [424, "            db //"], [425, "                    .update(\"update person set date_of_birth = :dob\") //"], [426, "                    .parameter(Parameter.create(\"dob\", null)) //"], [427, "                    .counts() //"], [428, "                    .test() //"], [429, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [430, "                    .assertValue(3) //"], [431, "                    .assertComplete();"], [432, "        }"], [437, "        try (Database db = db()) {"], [438, "            insertNullClob(db);"], [439, "            db //"], [440, "                    .update(\"update person_clob set document = :doc\") //"], [441, "                    .parameter(\"doc\", Database.NULL_CLOB) //"], [442, "                    .counts() //"], [443, "                    .test() //"], [444, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [445, "                    .assertValue(1) //"], [446, "                    .assertComplete();"], [447, "        }"], [452, "        try (Database db = db()) {"], [453, "            Clob clob = new JDBCClobFile(new File(\"src/test/resources/big.txt\"));"], [454, "            insertNullClob(db);"], [455, "            db //"], [456, "                    .update(\"update person_clob set document = :doc\") //"], [457, "                    .parameter(\"doc\", clob) //"], [458, "                    .counts() //"], [459, "                    .test() //"], [460, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [461, "                    .assertValue(1) //"], [462, "                    .assertComplete();"], [463, "        }"], [468, "        try (Database db = db()) {"], [469, "            Reader reader = new FileReader(new File(\"src/test/resources/big.txt\"));"], [470, "            insertNullClob(db);"], [471, "            db //"], [472, "                    .update(\"update person_clob set document = :doc\") //"], [473, "                    .parameter(\"doc\", reader) //"], [474, "                    .counts() //"], [475, "                    .test() //"], [476, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [477, "                    .assertValue(1) //"], [478, "                    .assertComplete();"], [479, "        }"], [484, "        try (Database db = db()) {"], [495, "        }"]], "deleted": [[114, "        db().select(\"select score from person where name=?\") //"], [115, "                .parameters(\"FRED\", \"JOSEPH\") //"], [116, "                .getAs(Integer.class) //"], [117, "                .test() //"], [118, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [119, "                .assertNoErrors() //"], [120, "                .assertValues(21, 34) //"], [121, "                .assertComplete();"], [126, "        db().select(\"select score from person where name=:name\") //"], [127, "                .parameters(Parameter.named(\"name\", \"FRED\").value(\"JOSEPH\").list()) //"], [128, "                .getAs(Integer.class) //"], [129, "                .test() //"], [130, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [131, "                .assertNoErrors() //"], [132, "                .assertValues(21, 34) //"], [133, "                .assertComplete();"], [135, ""], [138, "        db().select(\"select score from person where name=?\") //"], [139, "                .parameterStream(Flowable.just(\"FRED\", \"JOSEPH\")) //"], [140, "                .getAs(Integer.class) //"], [141, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [142, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [143, "                .assertNoErrors() //"], [144, "                .assertValues(21, 34) //"], [145, "                .assertComplete();"], [150, "        db().select(\"select score from person where name=?\") //"], [151, "                .parameterListStream(Flowable.just(Arrays.asList(\"FRED\"), Arrays.asList(\"JOSEPH\"))) //"], [152, "                .getAs(Integer.class) //"], [153, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [154, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [155, "                .assertNoErrors() //"], [156, "                .assertValues(21, 34) //"], [157, "                .assertComplete();"], [162, "        db().select(\"select count(*) from person\") //"], [163, "                .parameters(1, 2, 3) //"], [164, "                .getAs(Integer.class) //"], [165, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [166, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [167, "                .assertValues(3, 3, 3) //"], [168, "                .assertComplete();"], [173, "        db().select(\"select score from person where name=? and score = ?\") //"], [174, "                .parameterStream(Flowable.just(\"FRED\", 21, \"JOSEPH\", 34)) //"], [175, "                .getAs(Integer.class) //"], [176, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [177, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [178, "                .assertNoErrors() //"], [179, "                .assertValues(21, 34) //"], [180, "                .assertComplete();"], [185, "        db().select(\"select score from person where name=? and score = ?\") //"], [186, "                .parameterListStream("], [187, "                        Flowable.just(Arrays.asList(\"FRED\", 21), Arrays.asList(\"JOSEPH\", 34))) //"], [188, "                .getAs(Integer.class) //"], [189, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [190, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [191, "                .assertNoErrors() //"], [192, "                .assertValues(21, 34) //"], [193, "                .assertComplete();"], [198, "        Database.test() //"], [199, "                .select(\"select score from person where name=?\") //"], [200, "                .parameters(\"FRED\", \"JOSEPH\") //"], [201, "                .getAs(Integer.class) //"], [202, "                .test() //"], [203, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [204, "                .assertNoErrors() //"], [205, "                .assertValues(21, 34) //"], [206, "                .assertComplete();"], [211, "        db().select(\"select score from person order by name\") //"], [212, "                .fetchSize(2) //"], [213, "                .getAs(Integer.class) //"], [214, "                .test() //"], [215, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [216, "                .assertNoErrors() //"], [217, "                .assertValues(21, 34, 25) //"], [218, "                .assertComplete();"], [223, "        db().select(\"select score from person order by name\") //"], [224, "                .fetchSize(0) //"], [225, "                .getAs(Integer.class) //"], [226, "                .test() //"], [227, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [228, "                .assertNoErrors() //"], [229, "                .assertValues(21, 34, 25) //"], [230, "                .assertComplete();"], [235, "        db().select(\"select score from person order by name\") //"], [236, "                .fetchSize(-1);"], [358, "        db() //"], [359, "                .select(\"select score from person where name=:name\") //"], [360, "                .parameter(\"name\", \"FRED\") //"], [361, "                .parameter(\"name\", \"JOSEPH\") //"], [362, "                .getAs(Integer.class) //"], [363, "                .test() //"], [364, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [365, "                .assertValues(21, 34) //"], [366, "                .assertComplete();"], [371, "        db() //"], [372, "                .select(\"select score from person where name=:name and name<>:name2\") //"], [373, "                .parameter(\"name\", \"FRED\") //"], [374, "                .parameter(\"name\", \"JOSEPH\") //"], [375, "                .getAs(Integer.class) //"], [376, "                .test() //"], [377, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [378, "                .assertError(NamedParameterMissingException.class) //"], [379, "                .assertNoValues();"], [396, "        db() //"], [397, "                .update(\"update person set date_of_birth = :dob\") //"], [398, "                .parameter(Parameter.create(\"dob\", null)) //"], [399, "                .counts() //"], [400, "                .test() //"], [401, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [402, "                .assertValue(3) //"], [403, "                .assertComplete();"], [408, "        Database db = db();"], [409, "        insertNullClob(db);"], [410, "        db //"], [411, "                .update(\"update person_clob set document = :doc\") //"], [412, "                .parameter(\"doc\", Database.NULL_CLOB) //"], [413, "                .counts() //"], [414, "                .test() //"], [415, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [416, "                .assertValue(1) //"], [417, "                .assertComplete();"], [422, "        Database db = db();"], [423, "        Clob clob = new JDBCClobFile(new File(\"src/test/resources/big.txt\"));"], [424, "        insertNullClob(db);"], [425, "        db //"], [426, "                .update(\"update person_clob set document = :doc\") //"], [427, "                .parameter(\"doc\", clob) //"], [428, "                .counts() //"], [429, "                .test() //"], [430, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [431, "                .assertValue(1) //"], [432, "                .assertComplete();"], [437, "        Database db = db();"], [438, "        Reader reader = new FileReader(new File(\"src/test/resources/big.txt\"));"], [439, "        insertNullClob(db);"], [440, "        db //"], [441, "                .update(\"update person_clob set document = :doc\") //"], [442, "                .parameter(\"doc\", reader) //"], [443, "                .counts() //"], [444, "                .test() //"], [445, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [446, "                .assertValue(1) //"], [447, "                .assertComplete();"], [452, "        Database db = db();"]]}, "num_lines_added": 176, "num_lines_removed": 143}