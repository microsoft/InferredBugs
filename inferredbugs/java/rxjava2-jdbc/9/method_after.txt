    @Test
    public void testSimplePool() throws InterruptedException {
        TestScheduler s = new TestScheduler();
        AtomicInteger count = new AtomicInteger();
        MemberFactory<Integer, NonBlockingPool<Integer>> memberFactory = pool -> new NonBlockingMember<Integer>(pool,
                null);
        Pool<Integer> pool = NonBlockingPool.factory(() -> count.incrementAndGet()) //
                .healthy(n -> true) //
                .disposer(n -> {
                }) //
                .maxSize(3) //
                .returnToPoolDelayAfterHealthCheckFailureMs(1000) //
                .memberFactory(memberFactory) //
                .scheduler(s) //
                .build();
        TestObserver<Member<Integer>> ts = pool.member() //
                .doOnSuccess(m -> m.checkin()) //
                .test();
        s.triggerActions();
        ts.assertValueCount(1) //
                .assertComplete();
    }