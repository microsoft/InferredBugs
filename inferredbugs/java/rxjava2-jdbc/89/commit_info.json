{"hash": "8cbc647bddb887ad48d72f3dc9166abb8097bbea", "message": "test database close should shutdown related ExecutorService", "file_num_lines": 2183, "diff_parsed": {"added": [[798, "        try (Database db = db()) {"], [799, "            db //"], [800, "                    .select(\"select score from person where name=?\") //"], [801, "                    .parameters(\"FRED\", \"JOSEPH\") //"], [802, "                    .transacted() //"], [803, "                    .transactedValuesOnly() //"], [804, "                    .getAs(Integer.class) //"], [805, "                    .doOnNext(tx -> log"], [806, "                            .debug(tx.isComplete() ? \"complete\" : String.valueOf(tx.value())))//"], [807, "                    .flatMap(tx -> tx //"], [808, "                            .select(\"select name from person where score = ?\") //"], [809, "                            .parameter(tx.value()) //"], [810, "                            .valuesOnly() //"], [811, "                            .getAs(String.class)) //"], [812, "                    .test() //"], [813, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [814, "                    .assertNoErrors() //"], [815, "                    .assertValues(\"FRED\", \"JOSEPH\") //"], [816, "                    .assertComplete();"], [817, "        }"], [1581, "        try (Database db = db()) {"], [1582, "            insertNullClob(db);"], [1583, "            db.select(\"select document from person_clob where name='FRED'\") //"], [1584, "                    .getAsOptional(String.class) //"], [1585, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1586, "                    .assertValue(Optional.<String>empty()) //"], [1587, "                    .assertComplete();"], [1588, "        }"], [1631, "        try (Database db = db()) {"], [1632, "            insertNullClob(db);"], [1633, "            db.select(\"select document, document from person_clob where name='FRED'\") //"], [1634, "                    .getAs(String.class, String.class) //"], [1635, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1636, "                    .assertValue(Tuple2.create(null, null)) //"], [1637, "                    .assertComplete();"], [1638, "        }"], [1643, "        try (Database db = db()) {"], [1644, "            db.update(\"insert into person_clob(name,document) values(?,?)\") //"], [1645, "                    .parameters(\"FRED\", \"some text here\") //"], [1646, "                    .counts() //"], [1647, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1648, "                    .assertValue(1) //"], [1649, "                    .assertComplete();"], [1650, "            db.select(\"select document from person_clob where name='FRED'\") //"], [1651, "                    .getAs(String.class) //"], [1652, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) // .assertValue(\"some"], [1653, "                                                                         // text"], [1654, "                                                                         // here\")"], [1655, "                                                                         // //"], [1656, "                    .assertComplete();"], [1657, "        }"], [1662, "        try (Database db = db()) {"], [1663, "            db.update(\"insert into person_clob(name,document) values(?,?)\") //"], [1664, "                    .parameters(\"FRED\", \"some text here\") //"], [1665, "                    .counts() //"], [1666, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1667, "                    .assertValue(1) //"], [1668, "                    .assertComplete();"], [1669, "            db.select(\"select document from person_clob where name='FRED'\") //"], [1670, "                    .getAs(Reader.class) //"], [1671, "                    .map(r -> read(r)).test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1672, "                    .assertValue(\"some text here\") //"], [1673, "                    .assertComplete();"], [1674, "        }"], [1679, "        try (Database db = db()) {"], [1680, "            insertPersonBlob(db);"], [1681, "            db.select(\"select document from person_blob where name='FRED'\") //"], [1682, "                    .getAs(byte[].class) //"], [1683, "                    .map(b -> new String(b)) //"], [1684, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1685, "                    .assertValue(\"some text here\") //"], [1686, "                    .assertComplete();"], [1687, "        }"], [1702, "        try (Database db = db()) {"], [1703, "            byte[] bytes = \"some text here\".getBytes();"], [1704, "            db.update(\"insert into person_blob(name,document) values(?,?)\") //"], [1705, "                    .parameters(\"FRED\", new ByteArrayInputStream(bytes)) //"], [1706, "                    .counts() //"], [1707, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1708, "                    .assertValue(1) //"], [1709, "                    .assertComplete();"], [1710, "            db.select(\"select document from person_blob where name='FRED'\") //"], [1711, "                    .getAs(InputStream.class) //"], [1712, "                    .map(is -> read(is)) //"], [1713, "                    .map(b -> new String(b)) //"], [1714, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1715, "                    .assertValue(\"some text here\") //"], [1716, "                    .assertComplete();"], [1717, "        }"], [1855, "        try (Database db = db()) {"], [1856, "            db.update(\"update person set registered=?\") //"], [1857, "                    .parameter(c) //"], [1858, "                    .counts() //"], [1859, "                    .test() //"], [1860, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1861, "                    .assertValue(3) //"], [1862, "                    .assertComplete();"], [1863, "            db.select(\"select registered from person\") //"], [1864, "                    .getAs(Long.class) //"], [1865, "                    .firstOrError() //"], [1866, "                    .test() //"], [1867, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1868, "                    .assertValue(c.getTimeInMillis()) //"], [1869, "                    .assertComplete();"], [1870, "        }"], [1875, "        try (Database db = db()) {"], [1876, "            Time t = new Time(1234);"], [1877, "            db.update(\"update person set registered=?\") //"], [1878, "                    .parameter(t) //"], [1879, "                    .counts() //"], [1880, "                    .test() //"], [1881, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1882, "                    .assertValue(3) //"], [1883, "                    .assertComplete();"], [1884, "            db.select(\"select registered from person\") //"], [1885, "                    .getAs(Long.class) //"], [1886, "                    .firstOrError() //"], [1887, "                    .test() //"], [1888, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1889, "                    .assertValue(1234L) //"], [1890, "                    .assertComplete();"], [1891, "        }"], [1896, "        try (Database db = db()) {"], [1897, "            Timestamp t = new Timestamp(1234);"], [1898, "            db.update(\"update person set registered=?\") //"], [1899, "                    .parameter(t) //"], [1900, "                    .counts() //"], [1901, "                    .test() //"], [1902, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1903, "                    .assertValue(3) //"], [1904, "                    .assertComplete();"], [1905, "            db.select(\"select registered from person\") //"], [1906, "                    .getAs(Long.class) //"], [1907, "                    .firstOrError() //"], [1908, "                    .test() //"], [1909, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1910, "                    .assertValue(1234L) //"], [1911, "                    .assertComplete();"], [1912, "        }"], [1917, "        try (Database db = db()) {"], [1918, "            java.sql.Date t = new java.sql.Date(1234);"], [1920, "            db.update(\"update person set registered=?\") //"], [1921, "                    .parameter(t) //"], [1922, "                    .counts() //"], [1923, "                    .test() //"], [1924, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1925, "                    .assertValue(3) //"], [1926, "                    .assertComplete();"], [1927, "            db.select(\"select registered from person\") //"], [1928, "                    .getAs(Long.class) //"], [1929, "                    .firstOrError() //"], [1930, "                    .test() //"], [1931, "                    .awaitDone(TIMEOUT_SECONDS * 10000, TimeUnit.SECONDS) //"], [1932, "                    // TODO make a more accurate comparison using the current TZ"], [1933, "                    .assertValue(x -> Math.abs(x - 1234) <= TimeUnit.HOURS.toMillis(24)) //"], [1934, "                    .assertComplete();"], [1935, "        }"], [1940, "        try (Database db = db()) {"], [1941, "            Date d = new Date(1234);"], [1942, "            db.update(\"update person set registered=?\") //"], [1943, "                    .parameter(d) //"], [1944, "                    .counts() //"], [1945, "                    .test() //"], [1946, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1947, "                    .assertValue(3) //"], [1948, "                    .assertComplete();"], [1949, "            db.select(\"select registered from person\") //"], [1950, "                    .getAs(Long.class) //"], [1951, "                    .firstOrError() //"], [1952, "                    .test() //"], [1953, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1954, "                    .assertValue(1234L) //"], [1955, "                    .assertComplete();"], [1956, "        }"], [1961, "        try (Database db = db()) {"], [1962, "            db.update(\"update person set registered=? where name='FRED'\") //"], [1963, "                    .parameter(Instant.ofEpochMilli(FRED_REGISTERED_TIME)) //"], [1964, "                    .counts() //"], [1965, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1966, "                    .assertValue(1) //"], [1967, "                    .assertComplete();"], [1968, "            db.select(\"select registered from person where name='FRED'\") //"], [1969, "                    .getAs(Long.class) //"], [1970, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1971, "                    .assertValue(FRED_REGISTERED_TIME) //"], [1972, "                    .assertComplete();"], [1973, "        }"], [1978, "        try (Database db = db()) {"], [1979, "            db.update(\"update person set registered=? where name='FRED'\") //"], [1980, "                    .parameter(ZonedDateTime.ofInstant(Instant.ofEpochMilli(FRED_REGISTERED_TIME),"], [1981, "                            ZoneOffset.UTC.normalized())) //"], [1982, "                    .counts() //"], [1983, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1984, "                    .assertValue(1) //"], [1985, "                    .assertComplete();"], [1986, "            db.select(\"select registered from person where name='FRED'\") //"], [1987, "                    .getAs(Long.class) //"], [1988, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1989, "                    .assertValue(FRED_REGISTERED_TIME) //"], [1990, "                    .assertComplete();"], [1991, "        }"]], "deleted": [[798, "        Database db = db();"], [799, "        db //"], [800, "                .select(\"select score from person where name=?\") //"], [801, "                .parameters(\"FRED\", \"JOSEPH\") //"], [802, "                .transacted() //"], [803, "                .transactedValuesOnly() //"], [804, "                .getAs(Integer.class) //"], [805, "                .doOnNext("], [806, "                        tx -> log.debug(tx.isComplete() ? \"complete\" : String.valueOf(tx.value())))//"], [807, "                .flatMap(tx -> tx //"], [808, "                        .select(\"select name from person where score = ?\") //"], [809, "                        .parameter(tx.value()) //"], [810, "                        .valuesOnly() //"], [811, "                        .getAs(String.class)) //"], [812, "                .test() //"], [813, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [814, "                .assertNoErrors() //"], [815, "                .assertValues(\"FRED\", \"JOSEPH\") //"], [816, "                .assertComplete();"], [1580, "        Database db = db();"], [1581, "        insertNullClob(db);"], [1582, "        db.select(\"select document from person_clob where name='FRED'\") //"], [1583, "                .getAsOptional(String.class) //"], [1584, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1585, "                .assertValue(Optional.<String>empty()) //"], [1586, "                .assertComplete();"], [1629, "        Database db = db();"], [1630, "        insertNullClob(db);"], [1631, "        db.select(\"select document, document from person_clob where name='FRED'\") //"], [1632, "                .getAs(String.class, String.class) //"], [1633, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1634, "                .assertValue(Tuple2.create(null, null)) //"], [1635, "                .assertComplete();"], [1640, "        Database db = db();"], [1641, "        db.update(\"insert into person_clob(name,document) values(?,?)\") //"], [1642, "                .parameters(\"FRED\", \"some text here\") //"], [1643, "                .counts() //"], [1644, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1645, "                .assertValue(1) //"], [1646, "                .assertComplete();"], [1647, "        db.select(\"select document from person_clob where name='FRED'\") //"], [1648, "                .getAs(String.class) //"], [1649, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) // .assertValue(\"some"], [1650, "                                                                     // text"], [1651, "                                                                     // here\")"], [1652, "                                                                     // //"], [1653, "                .assertComplete();"], [1658, "        Database db = db();"], [1659, "        db.update(\"insert into person_clob(name,document) values(?,?)\") //"], [1660, "                .parameters(\"FRED\", \"some text here\") //"], [1661, "                .counts() //"], [1662, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1663, "                .assertValue(1) //"], [1664, "                .assertComplete();"], [1665, "        db.select(\"select document from person_clob where name='FRED'\") //"], [1666, "                .getAs(Reader.class) //"], [1667, "                .map(r -> read(r)).test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1668, "                .assertValue(\"some text here\") //"], [1669, "                .assertComplete();"], [1674, "        Database db = db();"], [1675, "        insertPersonBlob(db);"], [1676, "        db.select(\"select document from person_blob where name='FRED'\") //"], [1677, "                .getAs(byte[].class) //"], [1678, "                .map(b -> new String(b)) //"], [1679, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1680, "                .assertValue(\"some text here\") //"], [1681, "                .assertComplete();"], [1696, "        Database db = db();"], [1697, "        byte[] bytes = \"some text here\".getBytes();"], [1698, "        db.update(\"insert into person_blob(name,document) values(?,?)\") //"], [1699, "                .parameters(\"FRED\", new ByteArrayInputStream(bytes)) //"], [1700, "                .counts() //"], [1701, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1702, "                .assertValue(1) //"], [1703, "                .assertComplete();"], [1704, "        db.select(\"select document from person_blob where name='FRED'\") //"], [1705, "                .getAs(InputStream.class) //"], [1706, "                .map(is -> read(is)) //"], [1707, "                .map(b -> new String(b)) //"], [1708, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1709, "                .assertValue(\"some text here\") //"], [1710, "                .assertComplete();"], [1848, "        Database db = db();"], [1849, "        db.update(\"update person set registered=?\") //"], [1850, "                .parameter(c) //"], [1851, "                .counts() //"], [1852, "                .test() //"], [1853, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1854, "                .assertValue(3) //"], [1855, "                .assertComplete();"], [1856, "        db.select(\"select registered from person\") //"], [1857, "                .getAs(Long.class) //"], [1858, "                .firstOrError() //"], [1859, "                .test() //"], [1860, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1861, "                .assertValue(c.getTimeInMillis()) //"], [1862, "                .assertComplete();"], [1867, "        Database db = db();"], [1868, "        Time t = new Time(1234);"], [1869, "        db.update(\"update person set registered=?\") //"], [1870, "                .parameter(t) //"], [1871, "                .counts() //"], [1872, "                .test() //"], [1873, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1874, "                .assertValue(3) //"], [1875, "                .assertComplete();"], [1876, "        db.select(\"select registered from person\") //"], [1877, "                .getAs(Long.class) //"], [1878, "                .firstOrError() //"], [1879, "                .test() //"], [1880, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1881, "                .assertValue(1234L) //"], [1882, "                .assertComplete();"], [1887, "        Database db = db();"], [1888, "        Timestamp t = new Timestamp(1234);"], [1889, "        db.update(\"update person set registered=?\") //"], [1890, "                .parameter(t) //"], [1891, "                .counts() //"], [1892, "                .test() //"], [1893, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1894, "                .assertValue(3) //"], [1895, "                .assertComplete();"], [1896, "        db.select(\"select registered from person\") //"], [1897, "                .getAs(Long.class) //"], [1898, "                .firstOrError() //"], [1899, "                .test() //"], [1900, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1901, "                .assertValue(1234L) //"], [1902, "                .assertComplete();"], [1907, "        Database db = db();"], [1908, "        java.sql.Date t = new java.sql.Date(1234);"], [1910, "        db.update(\"update person set registered=?\") //"], [1911, "                .parameter(t) //"], [1912, "                .counts() //"], [1913, "                .test() //"], [1914, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1915, "                .assertValue(3) //"], [1916, "                .assertComplete();"], [1917, "        db.select(\"select registered from person\") //"], [1918, "                .getAs(Long.class) //"], [1919, "                .firstOrError() //"], [1920, "                .test() //"], [1921, "                .awaitDone(TIMEOUT_SECONDS * 10000, TimeUnit.SECONDS) //"], [1922, "                // TODO make a more accurate comparison using the current TZ"], [1923, "                .assertValue(x -> Math.abs(x - 1234) <= TimeUnit.HOURS.toMillis(24)) //"], [1924, "                .assertComplete();"], [1929, "        Database db = db();"], [1930, "        Date d = new Date(1234);"], [1931, "        db.update(\"update person set registered=?\") //"], [1932, "                .parameter(d) //"], [1933, "                .counts() //"], [1934, "                .test() //"], [1935, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1936, "                .assertValue(3) //"], [1937, "                .assertComplete();"], [1938, "        db.select(\"select registered from person\") //"], [1939, "                .getAs(Long.class) //"], [1940, "                .firstOrError() //"], [1941, "                .test() //"], [1942, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1943, "                .assertValue(1234L) //"], [1944, "                .assertComplete();"], [1949, "        Database db = db();"], [1950, "        db.update(\"update person set registered=? where name='FRED'\") //"], [1951, "                .parameter(Instant.ofEpochMilli(FRED_REGISTERED_TIME)) //"], [1952, "                .counts() //"], [1953, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1954, "                .assertValue(1) //"], [1955, "                .assertComplete();"], [1956, "        db.select(\"select registered from person where name='FRED'\") //"], [1957, "                .getAs(Long.class) //"], [1958, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1959, "                .assertValue(FRED_REGISTERED_TIME) //"], [1960, "                .assertComplete();"], [1965, "        Database db = db();"], [1966, "        db.update(\"update person set registered=? where name='FRED'\") //"], [1967, "                .parameter(ZonedDateTime.ofInstant(Instant.ofEpochMilli(FRED_REGISTERED_TIME),"], [1968, "                        ZoneOffset.UTC.normalized())) //"], [1969, "                .counts() //"], [1970, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1971, "                .assertValue(1) //"], [1972, "                .assertComplete();"], [1973, "        db.select(\"select registered from person where name='FRED'\") //"], [1974, "                .getAs(Long.class) //"], [1975, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1976, "                .assertValue(FRED_REGISTERED_TIME) //"], [1977, "                .assertComplete();"]]}, "num_lines_added": 201, "num_lines_removed": 187}