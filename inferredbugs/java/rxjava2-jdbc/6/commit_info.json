{"hash": "3bd8a05b86046cf41812e4d92a3512292e677dac", "message": "add tests", "file_num_lines": 592, "diff_parsed": {"added": [[6, "import java.sql.Connection;"], [24, "import org.davidmoten.rx.jdbc.pool.PoolClosedException;"], [39, "import io.reactivex.functions.Predicate;"], [113, "                .parameterListStream(Flowable.just(Arrays.asList(\"FRED\", 21), Arrays.asList(\"JOSEPH\", 34))) //"], [495, "                .getAs(String.class, Integer.class, String.class, Integer.class, String.class, Integer.class) //"], [504, "                .getAs(String.class, Integer.class, String.class, Integer.class, String.class, Integer.class,"], [505, "                        String.class) //"], [507, "                .assertComplete().assertValue(Tuple7.create(\"FRED\", 21, \"FRED\", 21, \"FRED\", 21, \"FRED\")); //"], [522, "        testHealthCheck(c -> {"], [523, "            log.debug(\"doing health check\");"], [524, "            return !once.compareAndSet(true, false);"], [525, "        });"], [526, "    }"], [527, ""], [528, "    @Test"], [529, "    public void testHealthCheckThatThrows() throws InterruptedException {"], [530, "        AtomicBoolean once = new AtomicBoolean(true);"], [531, "        testHealthCheck(c -> {"], [532, "            log.debug(\"doing health check\");"], [533, "            if (!once.compareAndSet(true, false))"], [534, "                return true;"], [535, "            else"], [536, "                throw new RuntimeException(\"health check failed\");"], [537, "        });"], [538, "    }"], [539, ""], [540, "    private void testHealthCheck(Predicate<Connection> healthy) throws InterruptedException {"], [541, "        TestScheduler scheduler = new TestScheduler();"], [542, ""], [548, "                .healthy(healthy) //"], [576, "    }"], [578, "    @Test"], [579, "    public void testShutdownBeforeUse() {"], [580, "        NonBlockingConnectionPool pool = Pools //"], [581, "                .nonBlocking() //"], [582, "                .connectionProvider(DatabaseCreator.connectionProvider()) //"], [583, "                .scheduler(Schedulers.io()) //"], [584, "                .maxPoolSize(1) //"], [585, "                .build();"], [586, "        pool.close();"], [587, "        Database.from(pool) //"], [588, "                .select(\"select score from person where name=?\") //"], [589, "                .parameters(\"FRED\") //"], [590, "                .getAs(Integer.class) //"], [591, "                .test() //"], [592, "                .assertNoValues() //"], [593, "                .assertError(PoolClosedException.class);"]], "deleted": [[110, "                .parameterListStream("], [111, "                        Flowable.just(Arrays.asList(\"FRED\", 21), Arrays.asList(\"JOSEPH\", 34))) //"], [493, "                .getAs(String.class, Integer.class, String.class, Integer.class, String.class,"], [494, "                        Integer.class) //"], [503, "                .getAs(String.class, Integer.class, String.class, Integer.class, String.class,"], [504, "                        Integer.class, String.class) //"], [506, "                .assertComplete()"], [507, "                .assertValue(Tuple7.create(\"FRED\", 21, \"FRED\", 21, \"FRED\", 21, \"FRED\")); //"], [521, "        TestScheduler scheduler = new TestScheduler();"], [528, "                .healthy(c -> {"], [529, "                    log.debug(\"doing health check\");"], [530, "                    return !once.compareAndSet(true, false);"], [531, "                }) //"]]}, "num_lines_added": 47, "num_lines_removed": 13}