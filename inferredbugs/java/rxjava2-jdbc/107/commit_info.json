{"hash": "7f1cea0585bd175d23c6217ed04bea678466cb29", "message": "remove Database references from NonBlockingPoolTest", "file_num_lines": 327, "diff_parsed": {"added": [[134, "        AtomicInteger count = new AtomicInteger();"], [135, "        Pool<Integer> pool = NonBlockingPool //"], [136, "                .factory(() -> count.incrementAndGet()) //"], [137, "                .healthCheck(n -> true) //"], [138, "                .maxSize(2) //"], [139, "                .maxIdleTime(1, TimeUnit.MINUTES) //"], [140, "                .scheduler(s) //"], [141, "                .build();"], [142, "        TestSubscriber<Integer> ts = new FlowableSingleDeferUntilRequest<>(pool.member()) //"], [143, "                .repeat() //"], [144, "                .doOnNext(m -> m.checkin()) //"], [145, "                .map(m -> m.value()) //"], [152, "        assertTrue(list.get(0) == list.get(1));"], [153, "        assertTrue(list.get(1) == list.get(2));"], [154, "        assertTrue(list.get(2) == list.get(3));"], [165, "        AtomicInteger count = new AtomicInteger();"], [166, "        Pool<Integer> pool = NonBlockingPool //"], [167, "                .factory(() -> count.incrementAndGet()) //"], [168, "                .healthCheck(n -> true) //"], [169, "                .maxSize(2) //"], [170, "                .maxIdleTime(1, TimeUnit.MINUTES) //"], [171, "                .scheduler(s) //"], [172, "                .build();"], [173, "        TestSubscriber<Member<Integer>> ts = new FlowableSingleDeferUntilRequest<>(pool.member()) //"], [180, "        List<Member<Integer>> list = new ArrayList<>(ts.values());"], [181, "        list.get(1).checkin(); // should release a connection"], [192, "        list.get(0).checkin();"]], "deleted": [[7, "import java.sql.Connection;"], [18, "import org.davidmoten.rx.jdbc.Database;"], [19, "import org.davidmoten.rx.jdbc.pool.DatabaseCreator;"], [137, "        Database db = DatabaseCreator.create(2, s);"], [138, "        TestSubscriber<Connection> ts = db.connections() //"], [139, "                .doOnNext(System.out::println) //"], [140, "                .doOnNext(c -> {"], [141, "                    // release connection for reuse straight away"], [142, "                    c.close();"], [143, "                }) //"], [150, "        System.out.println(list);"], [151, "        assertTrue(list.get(0).hashCode() == list.get(1).hashCode());"], [152, "        assertTrue(list.get(1).hashCode() == list.get(2).hashCode());"], [153, "        assertTrue(list.get(2).hashCode() == list.get(3).hashCode());"], [164, "        Database db = DatabaseCreator.create(2, s);"], [165, "        TestSubscriber<Connection> ts = db //"], [166, "                .connection() //"], [173, "        List<Connection> list = new ArrayList<>(ts.values());"], [174, "        list.get(1).close(); // should release a connection"], [185, "        list.get(0).close();"]]}, "num_lines_added": 27, "num_lines_removed": 20}