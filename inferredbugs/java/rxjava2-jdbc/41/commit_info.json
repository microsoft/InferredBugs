{"hash": "414ee0c5afbc66dccf1f3898ce45d2d3764d9a48", "message": "test database close should shutdown related ExecutorService", "file_num_lines": 2103, "diff_parsed": {"added": [[828, "        try (Database db = db(1)) {"], [829, "            // we can do this with 1 connection only!"], [830, "            db.select(\"select score from person where name=?\") //"], [831, "                    .parameters(\"FRED\", \"JOSEPH\") //"], [832, "                    .getAs(Integer.class) //"], [833, "                    .doOnNext(System.out::println) //"], [834, "                    .concatMap(score -> {"], [835, "                        log.info(\"score={}\", score);"], [836, "                        return db //"], [837, "                                .select(\"select name from person where score = ?\") //"], [838, "                                .parameter(score) //"], [839, "                                .getAs(String.class) //"], [840, "                                .doOnComplete("], [841, "                                        () -> log.info(\"completed select where score=\" + score));"], [842, "                    }) //"], [843, "                    .test() //"], [844, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [845, "                    .assertNoErrors() //"], [846, "                    .assertValues(\"FRED\", \"JOSEPH\") //"], [847, "                    .assertComplete(); //"], [848, "        }"], [854, "        try (Database db = db()) {"], [855, "            db.select(\"select name from person\") //"], [856, "                    .getAs(String.class) //"], [857, "                    .forEach(System.out::println);"], [858, "        }"], [863, "        try (Database db = Database.test()) {"], [864, "            db.select(\"select nam from person\") //"], [865, "                    .getAs(String.class) //"], [866, "                    .test() //"], [867, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [868, "                    .assertNoValues() //"], [869, "                    .assertError(SQLSyntaxErrorException.class);"], [870, "        }"], [875, "        try (Database db = Database.test()) {"], [876, "            db.select(\"select 'a' from sysibm.sysdummy1\") //"], [877, "                    .getAs(String.class) //"], [878, "                    .test() //"], [879, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [880, "                    .assertValue(\"a\") //"], [881, "                    .assertComplete();"], [882, "        }"], [888, "        try (Database db = db()) {"], [889, "            db.select(\"select name, score from person\") //"], [890, "                    .getAs(String.class, Integer.class) //"], [891, "                    .forEach(System.out::println);"], [892, "        }"], [898, "        try (Database db = db(1)) { //"], [899, "            db.select(\"select score from person where name=?\") //"], [900, "                    .parameter(\"FRED\") //"], [901, "                    .getAs(Integer.class) //"], [902, "                    .doOnNext(x -> Thread.sleep(1000)) //"], [903, "                    .subscribeOn(Schedulers.io()) //"], [904, "                    .subscribe();"], [905, "            Thread.sleep(100);"], [906, "            CountDownLatch latch = new CountDownLatch(1);"], [907, "            db.select(\"select score from person where name=?\") //"], [908, "                    .parameter(\"FRED\") //"], [909, "                    .getAs(Integer.class) //"], [910, "                    .doOnNext(x -> list.add(\"emitted\")) //"], [911, "                    .doOnNext(x -> log.debug(\"emitted on \" + Thread.currentThread().getName())) //"], [912, "                    .doOnNext(x -> latch.countDown()) //"], [913, "                    .subscribe();"], [914, "            list.add(\"subscribed\");"], [915, "            assertTrue(latch.await(TIMEOUT_SECONDS, TimeUnit.SECONDS));"], [916, "            assertEquals(Arrays.asList(\"subscribed\", \"emitted\"), list);"], [917, "        }"]], "deleted": [[828, "        log.debug(\"testSelectChained\");"], [829, "        // we can do this with 1 connection only!"], [830, "        Database db = db(1);"], [831, "        db.select(\"select score from person where name=?\") //"], [832, "                .parameters(\"FRED\", \"JOSEPH\") //"], [833, "                .getAs(Integer.class) //"], [834, "                .doOnNext(System.out::println) //"], [835, "                .concatMap(score -> {"], [836, "                    log.info(\"score={}\", score);"], [837, "                    return db //"], [838, "                            .select(\"select name from person where score = ?\") //"], [839, "                            .parameter(score) //"], [840, "                            .getAs(String.class) //"], [841, "                            .doOnComplete(() -> log.info(\"completed select where score=\" + score));"], [842, "                }) //"], [843, "                .test() //"], [844, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [845, "                .assertNoErrors() //"], [846, "                .assertValues(\"FRED\", \"JOSEPH\") //"], [847, "                .assertComplete(); //"], [853, "        Database db = Database.test();"], [854, "        db.select(\"select name from person\") //"], [855, "                .getAs(String.class) //"], [856, "                .forEach(System.out::println);"], [861, "        Database db = Database.test();"], [862, "        db.select(\"select nam from person\") //"], [863, "                .getAs(String.class) //"], [864, "                .test() //"], [865, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [866, "                .assertNoValues() //"], [867, "                .assertError(SQLSyntaxErrorException.class);"], [872, "        Database db = Database.test();"], [873, "        db.select(\"select 'a' from sysibm.sysdummy1\") //"], [874, "                .getAs(String.class) //"], [875, "                .test() //"], [876, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [877, "                .assertValue(\"a\") //"], [878, "                .assertComplete();"], [884, "        db().select(\"select name, score from person\") //"], [885, "                .getAs(String.class, Integer.class) //"], [886, "                .forEach(System.out::println);"], [892, "        Database db = db(1); //"], [893, "        db.select(\"select score from person where name=?\") //"], [894, "                .parameter(\"FRED\") //"], [895, "                .getAs(Integer.class) //"], [896, "                .doOnNext(x -> Thread.sleep(1000)) //"], [897, "                .subscribeOn(Schedulers.io()) //"], [898, "                .subscribe();"], [899, "        Thread.sleep(100);"], [900, "        CountDownLatch latch = new CountDownLatch(1);"], [901, "        db.select(\"select score from person where name=?\") //"], [902, "                .parameter(\"FRED\") //"], [903, "                .getAs(Integer.class) //"], [904, "                .doOnNext(x -> list.add(\"emitted\")) //"], [905, "                .doOnNext(x -> log.debug(\"emitted on \" + Thread.currentThread().getName())) //"], [906, "                .doOnNext(x -> latch.countDown()) //"], [907, "                .subscribe();"], [908, "        list.add(\"subscribed\");"], [909, "        assertTrue(latch.await(TIMEOUT_SECONDS, TimeUnit.SECONDS));"], [910, "        assertEquals(Arrays.asList(\"subscribed\", \"emitted\"), list);"]]}, "num_lines_added": 67, "num_lines_removed": 60}