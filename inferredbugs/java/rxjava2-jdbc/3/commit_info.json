{"hash": "498c010d2df36a4cc1263463e3aa603fc2b23e13", "message": "builder dev", "file_num_lines": 129, "diff_parsed": {"added": [[13, "import org.davidmoten.rx.jdbc.pool.Pools;"], [33, ""], [35, "        return Database.from( //"], [36, "                Pools.nonBlocking() //"], [37, "                        .url(url) //"], [38, "                        .maxPoolSize(maxPoolSize) //"], [39, "                        .build());"], [47, "        return Database.from( //"], [48, "                Pools.nonBlocking() //"], [49, "                        .connectionProvider(testConnectionProvider()) //"], [50, "                        .maxPoolSize(maxPoolSize) //"], [51, "                        .build());"], [64, "            Sql.statements(Database.class.getResourceAsStream(\"/database-test.sql\")).stream()"], [65, "                    .forEach(x -> {"], [66, "                        try {"], [67, "                            c.prepareStatement(x).execute();"], [68, "                        } catch (SQLException e) {"], [69, "                            throw new SQLRuntimeException(e);"], [70, "                        }"], [71, "                    });"], [125, "        // return new SelectBuilder(null, connections());"], [126, "        // TODO"]], "deleted": [[32, ""], [34, "        return Database.from(new NonBlockingConnectionPool(Util.connectionProvider(url), maxPoolSize, 1000));"], [42, "        return Database.from(new NonBlockingConnectionPool(testConnectionProvider(), maxPoolSize, 1000));"], [55, "            Sql.statements(Database.class.getResourceAsStream(\"/database-test.sql\")).stream().forEach(x -> {"], [56, "                try {"], [57, "                    c.prepareStatement(x).execute();"], [58, "                } catch (SQLException e) {"], [59, "                    throw new SQLRuntimeException(e);"], [60, "                }"], [61, "            });"], [115, "        //return new SelectBuilder(null, connections());"], [116, "        //TODO"]]}, "num_lines_added": 22, "num_lines_removed": 12}