{"hash": "17dd7ee49c8ee8b59ae0b55f1c4e6834d2e0f142", "message": "ensure transaction() is Flowable not single so completion of Single does not commit before emission of Tx", "file_num_lines": 3133, "diff_parsed": {"added": [[52, "import org.davidmoten.rx.jdbc.exceptions.CannotForkTransactedConnection;"], [2299, "        Flowable<Tx<?>> transaction = db //"], [2304, "                .doOnCancel(() -> log.debug(\"disposing\")) //"], [2305, "                .doOnNext(DatabaseTest::println) //"], [2306, "                .flatMap(tx -> {"], [2314, "                .test() //"], [2315, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2349, "    public void testUseTxOnComplete() {"], [2350, "        db(1) //"], [2351, "                .select(Person10.class) //"], [2352, "                .transacted() //"], [2353, "                .get() //"], [2354, "                .lastOrError() //"], [2355, "                .map(tx -> tx.select(\"select count(*) from person\") //"], [2356, "                        .count().blockingGet()) //"], [2357, "                .test() //"], [2358, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2359, "                .assertError(CannotForkTransactedConnection.class) //"], [2360, "                .assertValueCount(0);"], [2361, "    }"], [2362, ""], [2363, "    @Test"], [3271, "        Database db = db(1);"], [3278, "                .assertValueCount(2); // value and complete"]], "deleted": [[2298, "        Single<Tx<?>> transaction = db //"], [2303, "                .doOnDispose(() -> log.debug(\"disposing\")) //"], [2304, "                .doOnSuccess(DatabaseTest::println) //"], [2305, "                .flatMapPublisher(tx -> {"], [2313, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [3254, "        Database db = db();"], [3261, "                .assertValueCount(2);  //value and complete"]]}, "num_lines_added": 24, "num_lines_removed": 7}