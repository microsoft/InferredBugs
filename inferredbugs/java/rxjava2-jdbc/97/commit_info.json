{"hash": "35cdc49e075e40b3fb5c6bab5e79bf44c56a1898", "message": "test database close should shutdown related ExecutorService", "file_num_lines": 2197, "diff_parsed": {"added": [[727, "        try (Database db = db()) {"], [728, "            List<Tx<TupleN<Object>>> list = db //"], [729, "                    .select(\"select name, score from person where name=?\") //"], [730, "                    .parameters(\"FRED\") //"], [731, "                    .transacted() //"], [732, "                    .getTupleN() //"], [733, "                    .test() //"], [734, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [735, "                    .assertValueCount(2) //"], [736, "                    .assertComplete() //"], [737, "                    .values();"], [738, "            assertEquals(\"FRED\", list.get(0).value().values().get(0));"], [739, "            assertEquals(21, (int) list.get(0).value().values().get(1));"], [740, "            assertTrue(list.get(1).isComplete());"], [741, "            assertEquals(2, list.size());"], [742, "        }"], [747, "        try (Database db = db()) {"], [748, "            db //"], [749, "                    .select(\"select name, score, name, score, name, score, name from person where name=?\") //"], [750, "                    .parameters(\"FRED\") //"], [751, "                    .transacted() //"], [752, "                    .count() //"], [753, "                    .test() //"], [754, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [755, "                    .assertValueCount(1) //"], [756, "                    .assertComplete();"], [757, "        }"], [762, "        try (Database db = db()) {"], [763, "            db //"], [764, "                    .select(\"select name from person\") //"], [765, "                    .transacted() //"], [766, "                    .getAs(String.class) //"], [767, "                    .test() //"], [768, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [769, "                    .assertValueCount(4) //"], [770, "                    .assertComplete();"], [771, "        }"], [776, "        try (Database db = db()) {"], [777, "            List<Tx<Optional<String>>> list = db //"], [778, "                    .select(\"select name from person where name=?\") //"], [779, "                    .parameters(\"FRED\") //"], [780, "                    .transacted() //"], [781, "                    .getAsOptional(String.class) //"], [782, "                    .test() //"], [783, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [784, "                    .assertValueCount(2) //"], [785, "                    .assertComplete() //"], [786, "                    .values();"], [787, "            assertTrue(list.get(0).isValue());"], [788, "            assertEquals(\"FRED\", list.get(0).value().get());"], [789, "            assertTrue(list.get(1).isComplete());"], [790, "        }"], [1089, "        try (Database db = Database.test()) {"], [1090, "            db.select(Person10.class) //"], [1091, "                    .get(Person10::name) //"], [1092, "                    .blockingForEach(System.out::println);"], [1093, "        }"], [2004, "        try (Database db = db(1)) {"], [2005, "            db //"], [2006, "                    .update(\"update person set score=-3 where name='FRED'\") //"], [2007, "                    .complete() //"], [2008, "                    .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2009, "                    .blockingAwait();"], [2011, "            int score = db.select(\"select score from person where name='FRED'\") //"], [2012, "                    .getAs(Integer.class) //"], [2013, "                    .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2014, "                    .blockingFirst();"], [2015, "            assertEquals(-3, score);"], [2016, "        }"], [2021, "        try (Database db = db(1)) {"], [2022, "            Completable a = db //"], [2023, "                    .update(\"update person set score=-3 where name='FRED'\") //"], [2024, "                    .complete();"], [2025, "            db.update(\"update person set score=-4 where score = -3\") //"], [2026, "                    .dependsOn(a) //"], [2027, "                    .counts() //"], [2028, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2029, "                    .assertValue(1) //"], [2030, "                    .assertComplete();"], [2031, "        }"], [2036, "        try (Database db = db()) {"], [2037, "            db.update(\"update person set score = -3\") //"], [2038, "                    .transacted() //"], [2039, "                    .countsOnly() //"], [2040, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2041, "                    .assertValues(3) //"], [2042, "                    .assertComplete();"], [2043, "        }"], [2048, "        try (Database db = db()) {"], [2049, "            db.update(\"update person set score = -3\") //"], [2050, "                    .transacted() //"], [2051, "                    .counts() //"], [2052, "                    .doOnNext(System.out::println) //"], [2053, "                    .toList() //"], [2054, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2055, "                    .assertValue(list -> list.get(0).isValue() && list.get(0).value() == 3"], [2056, "                            && list.get(1).isComplete() && list.size() == 2) //"], [2057, "                    .assertComplete();"], [2058, "        }"]], "deleted": [[727, "        List<Tx<TupleN<Object>>> list = db() //"], [728, "                .select(\"select name, score from person where name=?\") //"], [729, "                .parameters(\"FRED\") //"], [730, "                .transacted() //"], [731, "                .getTupleN() //"], [732, "                .test() //"], [733, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [734, "                .assertValueCount(2) //"], [735, "                .assertComplete() //"], [736, "                .values();"], [737, "        assertEquals(\"FRED\", list.get(0).value().values().get(0));"], [738, "        assertEquals(21, (int) list.get(0).value().values().get(1));"], [739, "        assertTrue(list.get(1).isComplete());"], [740, "        assertEquals(2, list.size());"], [745, "        db() //"], [746, "                .select(\"select name, score, name, score, name, score, name from person where name=?\") //"], [747, "                .parameters(\"FRED\") //"], [748, "                .transacted() //"], [749, "                .count() //"], [750, "                .test() //"], [751, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [752, "                .assertValueCount(1) //"], [753, "                .assertComplete();"], [758, "        db() //"], [759, "                .select(\"select name from person\") //"], [760, "                .transacted() //"], [761, "                .getAs(String.class) //"], [762, "                .test() //"], [763, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [764, "                .assertValueCount(4) //"], [765, "                .assertComplete();"], [770, "        List<Tx<Optional<String>>> list = db() //"], [771, "                .select(\"select name from person where name=?\") //"], [772, "                .parameters(\"FRED\") //"], [773, "                .transacted() //"], [774, "                .getAsOptional(String.class) //"], [775, "                .test() //"], [776, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [777, "                .assertValueCount(2) //"], [778, "                .assertComplete() //"], [779, "                .values();"], [780, "        assertTrue(list.get(0).isValue());"], [781, "        assertEquals(\"FRED\", list.get(0).value().get());"], [782, "        assertTrue(list.get(1).isComplete());"], [1081, "        Database //"], [1082, "                .test() //"], [1083, "                .select(Person10.class) //"], [1084, "                .get(Person10::name) //"], [1085, "                .blockingForEach(System.out::println);"], [1996, "        Database db = db(1);"], [1997, "        db //"], [1998, "                .update(\"update person set score=-3 where name='FRED'\") //"], [1999, "                .complete() //"], [2000, "                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2001, "                .blockingAwait();"], [2003, "        int score = db.select(\"select score from person where name='FRED'\") //"], [2004, "                .getAs(Integer.class) //"], [2005, "                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2006, "                .blockingFirst();"], [2007, "        assertEquals(-3, score);"], [2012, "        Database db = db(1);"], [2013, "        Completable a = db //"], [2014, "                .update(\"update person set score=-3 where name='FRED'\") //"], [2015, "                .complete();"], [2016, "        db.update(\"update person set score=-4 where score = -3\") //"], [2017, "                .dependsOn(a) //"], [2018, "                .counts() //"], [2019, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2020, "                .assertValue(1) //"], [2021, "                .assertComplete();"], [2026, "        db().update(\"update person set score = -3\") //"], [2027, "                .transacted() //"], [2028, "                .countsOnly() //"], [2029, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2030, "                .assertValues(3) //"], [2031, "                .assertComplete();"], [2036, "        db().update(\"update person set score = -3\") //"], [2037, "                .transacted() //"], [2038, "                .counts() //"], [2039, "                .doOnNext(System.out::println) //"], [2040, "                .toList() //"], [2041, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [2042, "                .assertValue(list -> list.get(0).isValue() && list.get(0).value() == 3"], [2043, "                        && list.get(1).isComplete() && list.size() == 2) //"], [2044, "                .assertComplete();"]]}, "num_lines_added": 99, "num_lines_removed": 85}