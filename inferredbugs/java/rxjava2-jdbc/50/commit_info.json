{"hash": "cf7a76ca35e16acf0290a21e22de0782ffa26bcd", "message": "test database close should shutdown related ExecutorService", "file_num_lines": 2133, "diff_parsed": {"added": [[980, "        try (Database db = db()) {"], [981, "            db //"], [982, "                    .select(\"select name, score from person order by name\") //"], [983, "                    .autoMap(Person4.class) //"], [984, "                    .firstOrError() //"], [985, "                    .map(Person4::examScore) //"], [986, "                    .test() //"], [987, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [988, "                    .assertNoValues() //"], [989, "                    .assertError(ColumnNotFoundException.class);"], [990, "        }"], [995, "        try (Database db = db()) {"], [996, "            db //"], [997, "                    .select(\"select name, score from person order by name\") //"], [998, "                    .autoMap(Person5.class) //"], [999, "                    .firstOrError() //"], [1000, "                    .map(Person5::examScore) //"], [1001, "                    .test() //"], [1002, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1003, "                    .assertValue(21) //"], [1004, "                    .assertComplete();"], [1005, "        }"], [1010, "        try (Database db = db()) {"], [1011, "            db //"], [1012, "                    .select(\"select name, score from person order by name\") //"], [1013, "                    .autoMap(Person6.class) //"], [1014, "                    .firstOrError() //"], [1015, "                    .map(Person6::examScore) //"], [1016, "                    .test() //"], [1017, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1018, "                    .assertNoValues() //"], [1019, "                    .assertError(ColumnIndexOutOfRangeException.class);"], [1020, "        }"], [1025, "        try (Database db = db()) {"], [1026, "            db //"], [1027, "                    .select(\"select name, score from person order by name\") //"], [1028, "                    .autoMap(Person7.class) //"], [1029, "                    .firstOrError() //"], [1030, "                    .map(Person7::examScore) //"], [1031, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1032, "                    .assertNoValues() //"], [1033, "                    .assertError(ColumnIndexOutOfRangeException.class);"], [1034, "        }"], [1039, "        try (Database db = db()) {"], [1040, "            db //"], [1041, "                    .select(\"select name from person order by name\") //"], [1042, "                    .autoMap(Person8.class) //"], [1043, "                    .map(p -> p.name()) //"], [1044, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1045, "                    .assertNoValues() //"], [1046, "                    .assertError(ClassCastException.class);"], [1047, "        }"], [1052, "        try (Database db = db()) {"], [1053, "            db //"], [1054, "                    .select(\"select name, score from person order by name\") //"], [1055, "                    .autoMap(Person9.class) //"], [1056, "                    .firstOrError() //"], [1057, "                    .map(Person9::score) //"], [1058, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1059, "                    .assertValue(21) //"], [1060, "                    .assertComplete();"], [1061, "        }"], [1066, "        try (Database db = db()) {"], [1067, "            db.select(Person10.class) //"], [1068, "                    .get() //"], [1069, "                    .firstOrError() //"], [1070, "                    .map(Person10::score) //"], [1071, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1072, "                    .assertValue(21) //"], [1073, "                    .assertComplete();"], [1074, "        }"], [1089, "        try (Database db = db()) {"], [1090, "            db.select(Person.class);"], [1091, "        }"], [1096, "        try (Database db = db()) {"], [1097, "            Assert.assertEquals(3, (long) db.select(\"select name from person\") //"], [1098, "                    .count() //"], [1099, "                    .blockingGet());"], [1100, "        }"], [1105, "        try (Database db = db()) {"], [1106, "            db //"], [1107, "                    .select(\"select name, score, name from person order by name\") //"], [1108, "                    .getAs(String.class, Integer.class, String.class) //"], [1109, "                    .firstOrError() //"], [1110, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1111, "                    .assertComplete() //"], [1112, "                    .assertValue(Tuple3.create(\"FRED\", 21, \"FRED\")); //"], [1113, "        }"], [1118, "        try (Database db = db()) {"], [1119, "            db //"], [1120, "                    .select(\"select name, score, name, score from person order by name\") //"], [1121, "                    .getAs(String.class, Integer.class, String.class, Integer.class) //"], [1122, "                    .firstOrError() //"], [1123, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1124, "                    .assertComplete() //"], [1125, "                    .assertValue(Tuple4.create(\"FRED\", 21, \"FRED\", 21)); //"], [1126, "        }"]], "deleted": [[980, "        db() //"], [981, "                .select(\"select name, score from person order by name\") //"], [982, "                .autoMap(Person4.class) //"], [983, "                .firstOrError() //"], [984, "                .map(Person4::examScore) //"], [985, "                .test() //"], [986, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [987, "                .assertNoValues() //"], [988, "                .assertError(ColumnNotFoundException.class);"], [993, "        db() //"], [994, "                .select(\"select name, score from person order by name\") //"], [995, "                .autoMap(Person5.class) //"], [996, "                .firstOrError() //"], [997, "                .map(Person5::examScore) //"], [998, "                .test() //"], [999, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1000, "                .assertValue(21) //"], [1001, "                .assertComplete();"], [1006, "        db() //"], [1007, "                .select(\"select name, score from person order by name\") //"], [1008, "                .autoMap(Person6.class) //"], [1009, "                .firstOrError() //"], [1010, "                .map(Person6::examScore) //"], [1011, "                .test() //"], [1012, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1013, "                .assertNoValues() //"], [1014, "                .assertError(ColumnIndexOutOfRangeException.class);"], [1019, "        db() //"], [1020, "                .select(\"select name, score from person order by name\") //"], [1021, "                .autoMap(Person7.class) //"], [1022, "                .firstOrError() //"], [1023, "                .map(Person7::examScore) //"], [1024, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1025, "                .assertNoValues() //"], [1026, "                .assertError(ColumnIndexOutOfRangeException.class);"], [1031, "        db() //"], [1032, "                .select(\"select name from person order by name\") //"], [1033, "                .autoMap(Person8.class) //"], [1034, "                .map(p -> p.name()) //"], [1035, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1036, "                .assertNoValues() //"], [1037, "                .assertError(ClassCastException.class);"], [1042, "        db() //"], [1043, "                .select(\"select name, score from person order by name\") //"], [1044, "                .autoMap(Person9.class) //"], [1045, "                .firstOrError() //"], [1046, "                .map(Person9::score) //"], [1047, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1048, "                .assertValue(21) //"], [1049, "                .assertComplete();"], [1054, "        db().select(Person10.class) //"], [1055, "                .get() //"], [1056, "                .firstOrError() //"], [1057, "                .map(Person10::score) //"], [1058, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1059, "                .assertValue(21) //"], [1060, "                .assertComplete();"], [1075, "        db().select(Person.class);"], [1080, "        Assert.assertEquals(3, (long) db().select(\"select name from person\") //"], [1081, "                .count() //"], [1082, "                .blockingGet());"], [1087, "        db() //"], [1088, "                .select(\"select name, score, name from person order by name\") //"], [1089, "                .getAs(String.class, Integer.class, String.class) //"], [1090, "                .firstOrError() //"], [1091, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1092, "                .assertComplete() //"], [1093, "                .assertValue(Tuple3.create(\"FRED\", 21, \"FRED\")); //"], [1098, "        db() //"], [1099, "                .select(\"select name, score, name, score from person order by name\") //"], [1100, "                .getAs(String.class, Integer.class, String.class, Integer.class) //"], [1101, "                .firstOrError() //"], [1102, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1103, "                .assertComplete() //"], [1104, "                .assertValue(Tuple4.create(\"FRED\", 21, \"FRED\", 21)); //"]]}, "num_lines_added": 97, "num_lines_removed": 75}