{"hash": "15a47ec0da24d0867eca055067cb4d797c57f56d", "message": "test database close should shutdown related ExecutorService", "file_num_lines": 2169, "diff_parsed": {"added": [[1131, "        try (Database db = db()) {"], [1132, "            db //"], [1133, "                    .select(\"select name, score, name, score, name from person order by name\") //"], [1134, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class) //"], [1135, "                    .firstOrError() //"], [1136, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1137, "                    .assertComplete().assertValue(Tuple5.create(\"FRED\", 21, \"FRED\", 21, \"FRED\")); //"], [1138, "        }"], [1143, "        try (Database db = db()) {"], [1144, "            db //"], [1145, "                    .select(\"select name, score, name, score, name, score from person order by name\") //"], [1146, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class,"], [1147, "                            Integer.class) //"], [1148, "                    .firstOrError() //"], [1149, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1150, "                    .assertComplete()"], [1151, "                    .assertValue(Tuple6.create(\"FRED\", 21, \"FRED\", 21, \"FRED\", 21)); //"], [1152, "        }"], [1157, "        try (Database db = db()) {"], [1158, "            db //"], [1159, "                    .select(\"select name, score, name, score, name, score, name from person order by name\") //"], [1160, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class,"], [1161, "                            Integer.class, String.class) //"], [1162, "                    .firstOrError() //"], [1163, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1164, "                    .assertComplete()"], [1165, "                    .assertValue(Tuple7.create(\"FRED\", 21, \"FRED\", 21, \"FRED\", 21, \"FRED\")); //"], [1166, "        }"], [1171, "        try (Database db = db()) {"], [1172, "            db //"], [1173, "                    .select(\"select name, score, name from person order by name\") //"], [1174, "                    .getTupleN() //"], [1175, "                    .firstOrError().test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1176, "                    .assertComplete() //"], [1177, "                    .assertValue(TupleN.create(\"FRED\", 21, \"FRED\")); //"], [1178, "        }"], [1204, "        try (Database db = db()) {"], [1205, "            db.update(\"update person set score=20 where name='FRED'\") //"], [1206, "                    .counts() //"], [1207, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1208, "                    .assertValue(1) //"], [1209, "                    .assertComplete();"], [1210, "        }"], [1215, "        try (Database db = db()) {"], [1216, "            db.update(\"update person set score=20\") //"], [1217, "                    .counts() //"], [1218, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1219, "                    .assertValue(3) //"], [1220, "                    .assertComplete();"], [1221, "        }"], [1226, "        try (Database db = db()) {"], [1227, "            db.update(\"update person set score=20 where name=?\") //"], [1228, "                    .parameter(\"FRED\").counts() //"], [1229, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1230, "                    .assertValue(1) //"], [1231, "                    .assertComplete();"], [1232, "        }"], [1237, "        try (Database db = db()) {"], [1238, "            db.update(\"update person set score=20 where name=?\") //"], [1239, "                    .parameters(\"FRED\", \"JOSEPH\").counts() //"], [1240, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1241, "                    .assertValues(1, 1) //"], [1242, "                    .assertComplete();"], [1243, "        }"], [1248, "        try (Database db = db()) {"], [1249, "            db.update(\"update person set score=?\") //"], [1250, "                    .parameters(1, 2, 3, 4) //"], [1251, "                    .counts() //"], [1252, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1253, "                    .assertValues(3, 3, 3, 3) //"], [1254, "                    .assertComplete();"], [1255, "        }"], [1260, "        try (Database db = db()) {"], [1261, "            db.update(\"update person set score=?\") //"], [1262, "                    .batchSize(2) //"], [1263, "                    .parameters(1, 2, 3, 4) //"], [1264, "                    .counts() //"], [1265, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1266, "                    .assertValues(3, 3, 3, 3) //"], [1267, "                    .assertComplete();"], [1268, "        }"], [1273, "        try (Database db = db()) {"], [1274, "            db.update(\"update person set score=?\") //"], [1275, "                    .batchSize(3) //"], [1276, "                    .parameters(1, 2, 3, 4) //"], [1277, "                    .counts() //"], [1278, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1279, "                    .assertValues(3, 3, 3, 3) //"], [1280, "                    .assertComplete();"], [1281, "        }"], [1286, "        try (Database db = db()) {"], [1287, "            db.update(\"insert into person(name, score) values(?,?)\") //"], [1288, "                    .parameters(\"DAVE\", 12, \"ANNE\", 18) //"], [1289, "                    .counts() //"], [1290, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1291, "                    .assertValues(1, 1) //"], [1292, "                    .assertComplete();"], [1293, "            List<Tuple2<String, Integer>> list = db.select(\"select name, score from person\") //"], [1294, "                    .getAs(String.class, Integer.class) //"], [1295, "                    .toList() //"], [1296, "                    .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1297, "                    .blockingGet();"], [1298, "            assertTrue(list.contains(Tuple2.create(\"DAVE\", 12)));"], [1299, "            assertTrue(list.contains(Tuple2.create(\"ANNE\", 18)));"], [1300, "        }"], [1305, "        try (Database db = db()) {"], [1306, "            // note is a table with auto increment"], [1307, "            db.update(\"insert into note(text) values(?)\") //"], [1308, "                    .parameters(\"HI\", \"THERE\") //"], [1309, "                    .returnGeneratedKeys() //"], [1310, "                    .getAs(Integer.class)//"], [1311, "                    .test() //"], [1312, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1313, "                    .assertValues(1, 2) //"], [1314, "                    .assertComplete();"], [1316, "            db.update(\"insert into note(text) values(?)\") //"], [1317, "                    .parameters(\"ME\", \"TOO\") //"], [1318, "                    .returnGeneratedKeys() //"], [1319, "                    .getAs(Integer.class)//"], [1320, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1321, "                    .assertValues(3, 4) //"], [1322, "                    .assertComplete();"], [1323, "        }"], [1352, "        try (Database db = db()) {"], [1353, "            // note is a table with auto increment"], [1354, "            db.update(\"insert into note(text) values(?)\") //"], [1355, "                    .parameters(\"HI\", \"THERE\") //"], [1356, "                    .batchSize(2) //"], [1357, "                    .returnGeneratedKeys();"], [1358, "        }"], [1363, "        try (Database db = db()) {"], [1364, "            // note is a table with auto increment"], [1365, "            db.update(\"insert into note(text) values(?)\") //"], [1366, "                    .parameters(\"HI\", \"THERE\") //"], [1367, "                    .transacted() //"], [1368, "                    .returnGeneratedKeys() //"], [1369, "                    .valuesOnly() //"], [1370, "                    .getAs(Integer.class)//"], [1371, "                    .test() //"], [1372, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1373, "                    .assertValues(1, 2) //"], [1374, "                    .assertComplete();"], [1376, "            db.update(\"insert into note(text) values(?)\") //"], [1377, "                    .parameters(\"ME\", \"TOO\") //"], [1378, "                    .transacted() //"], [1379, "                    .returnGeneratedKeys() //"], [1380, "                    .valuesOnly() //"], [1381, "                    .getAs(Integer.class)//"], [1382, "                    .test() //"], [1383, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1384, "                    .assertValues(3, 4) //"], [1385, "                    .assertComplete();"], [1386, "        }"], [1391, "        try (Database db = db()) {"], [1392, "            // note is a table with auto increment"], [1393, "            Flowable<Integer> a = db.update(\"insert into note(text) values(?)\") //"], [1394, "                    .parameters(\"HI\", \"THERE\") //"], [1395, "                    .transacted() //"], [1396, "                    .returnGeneratedKeys() //"], [1397, "                    .valuesOnly() //"], [1398, "                    .getAs(Integer.class);"], [1400, "            db.update(\"insert into note(text) values(?)\") //"], [1401, "                    .parameters(\"ME\", \"TOO\") //"], [1402, "                    .transacted() //"], [1403, "                    .returnGeneratedKeys() //"], [1404, "                    .valuesOnly() //"], [1405, "                    .getAs(Integer.class)//"], [1406, "                    .startWith(a) //"], [1407, "                    .test() //"], [1408, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1409, "                    .assertValues(1, 2, 3, 4) //"], [1410, "                    .assertComplete();"], [1411, "        }"], [1416, "        try (Database db = db()) {"], [1417, "            db //"], [1418, "                    .select(\"select name from person\") //"], [1419, "                    .transactedValuesOnly() //"], [1420, "                    .getAs(String.class) //"], [1421, "                    .doOnNext(System.out::println) //"], [1422, "                    .flatMap(tx -> tx//"], [1423, "                            .update(\"update person set score=-1 where name=:name\") //"], [1424, "                            .batchSize(1) //"], [1425, "                            .parameter(\"name\", tx.value()) //"], [1426, "                            .valuesOnly() //"], [1427, "                            .counts()) //"], [1428, "                    .test() //"], [1429, "                    .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1430, "                    .assertValues(1, 1, 1) //"], [1431, "                    .assertComplete();"], [1432, "        }"], [1437, "        try (Database db = db()) {"], [1438, "            Flowable<Integer> a = db.update(\"update person set score=100 where name=?\") //"], [1439, "                    .parameter(\"FRED\") //"], [1440, "                    .counts();"], [1441, "            db.select(\"select score from person where name=?\") //"], [1442, "                    .parameter(\"FRED\") //"], [1443, "                    .dependsOn(a) //"], [1444, "                    .getAs(Integer.class)//"], [1445, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1446, "                    .assertValues(100) //"], [1447, "                    .assertComplete();"], [1448, "        }"], [1453, "        try (Database db = db()) {"], [1454, "            Observable<Integer> a = db.update(\"update person set score=100 where name=?\") //"], [1455, "                    .parameter(\"FRED\") //"], [1456, "                    .counts().toObservable();"], [1457, "            db.select(\"select score from person where name=?\") //"], [1458, "                    .parameter(\"FRED\") //"], [1459, "                    .dependsOn(a) //"], [1460, "                    .getAs(Integer.class)//"], [1461, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1462, "                    .assertValues(100) //"], [1463, "                    .assertComplete();"], [1464, "        }"], [1469, "        try (Database db = db()) {"], [1470, "            Single<Long> a = db.update(\"update person set score=100 where name=?\") //"], [1471, "                    .parameter(\"FRED\") //"], [1472, "                    .counts().count();"], [1473, "            db.select(\"select score from person where name=?\") //"], [1474, "                    .parameter(\"FRED\") //"], [1475, "                    .dependsOn(a) //"], [1476, "                    .getAs(Integer.class)//"], [1477, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1478, "                    .assertValues(100) //"], [1479, "                    .assertComplete();"], [1480, "        }"], [1485, "        try (Database db = db()) {"], [1486, "            Completable a = db.update(\"update person set score=100 where name=?\") //"], [1487, "                    .parameter(\"FRED\") //"], [1488, "                    .counts().ignoreElements();"], [1489, "            db.select(\"select score from person where name=?\") //"], [1490, "                    .parameter(\"FRED\") //"], [1491, "                    .dependsOn(a) //"], [1492, "                    .getAs(Integer.class)//"], [1493, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1494, "                    .assertValues(100) //"], [1495, "                    .assertComplete();"], [1496, "        }"], [1501, "        try (Database db = db()) {"], [1502, "            db //"], [1503, "                    .select(\"select name from person\") //"], [1504, "                    .transactedValuesOnly() //"], [1505, "                    .getAs(String.class) //"], [1506, "                    .doOnNext(System.out::println) //"], [1507, "                    .flatMap(tx -> tx//"], [1508, "                            .update(\"update person set score=-1 where name=:name\") //"], [1509, "                            .batchSize(0) //"], [1510, "                            .parameter(\"name\", tx.value()) //"], [1511, "                            .valuesOnly() //"], [1512, "                            .counts()) //"], [1513, "                    .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1514, "                    .assertValues(1, 1, 1) //"], [1515, "                    .assertComplete();"], [1516, "        }"]], "deleted": [[1131, "        db() //"], [1132, "                .select(\"select name, score, name, score, name from person order by name\") //"], [1133, "                .getAs(String.class, Integer.class, String.class, Integer.class, String.class) //"], [1134, "                .firstOrError() //"], [1135, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1136, "                .assertComplete().assertValue(Tuple5.create(\"FRED\", 21, \"FRED\", 21, \"FRED\")); //"], [1141, "        db() //"], [1142, "                .select(\"select name, score, name, score, name, score from person order by name\") //"], [1143, "                .getAs(String.class, Integer.class, String.class, Integer.class, String.class,"], [1144, "                        Integer.class) //"], [1145, "                .firstOrError() //"], [1146, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1147, "                .assertComplete().assertValue(Tuple6.create(\"FRED\", 21, \"FRED\", 21, \"FRED\", 21)); //"], [1152, "        db() //"], [1153, "                .select(\"select name, score, name, score, name, score, name from person order by name\") //"], [1154, "                .getAs(String.class, Integer.class, String.class, Integer.class, String.class,"], [1155, "                        Integer.class, String.class) //"], [1156, "                .firstOrError() //"], [1157, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1158, "                .assertComplete()"], [1159, "                .assertValue(Tuple7.create(\"FRED\", 21, \"FRED\", 21, \"FRED\", 21, \"FRED\")); //"], [1164, "        db() //"], [1165, "                .select(\"select name, score, name from person order by name\") //"], [1166, "                .getTupleN() //"], [1167, "                .firstOrError().test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1168, "                .assertComplete() //"], [1169, "                .assertValue(TupleN.create(\"FRED\", 21, \"FRED\")); //"], [1195, "        db().update(\"update person set score=20 where name='FRED'\") //"], [1196, "                .counts() //"], [1197, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1198, "                .assertValue(1) //"], [1199, "                .assertComplete();"], [1204, "        db().update(\"update person set score=20\") //"], [1205, "                .counts() //"], [1206, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1207, "                .assertValue(3) //"], [1208, "                .assertComplete();"], [1213, "        db().update(\"update person set score=20 where name=?\") //"], [1214, "                .parameter(\"FRED\").counts() //"], [1215, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1216, "                .assertValue(1) //"], [1217, "                .assertComplete();"], [1222, "        db().update(\"update person set score=20 where name=?\") //"], [1223, "                .parameters(\"FRED\", \"JOSEPH\").counts() //"], [1224, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1225, "                .assertValues(1, 1) //"], [1226, "                .assertComplete();"], [1231, "        db().update(\"update person set score=?\") //"], [1232, "                .parameters(1, 2, 3, 4) //"], [1233, "                .counts() //"], [1234, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1235, "                .assertValues(3, 3, 3, 3) //"], [1236, "                .assertComplete();"], [1241, "        db().update(\"update person set score=?\") //"], [1242, "                .batchSize(2) //"], [1243, "                .parameters(1, 2, 3, 4) //"], [1244, "                .counts() //"], [1245, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1246, "                .assertValues(3, 3, 3, 3) //"], [1247, "                .assertComplete();"], [1252, "        db().update(\"update person set score=?\") //"], [1253, "                .batchSize(3) //"], [1254, "                .parameters(1, 2, 3, 4) //"], [1255, "                .counts() //"], [1256, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1257, "                .assertValues(3, 3, 3, 3) //"], [1258, "                .assertComplete();"], [1263, "        Database db = db();"], [1264, "        db.update(\"insert into person(name, score) values(?,?)\") //"], [1265, "                .parameters(\"DAVE\", 12, \"ANNE\", 18) //"], [1266, "                .counts() //"], [1267, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1268, "                .assertValues(1, 1) //"], [1269, "                .assertComplete();"], [1270, "        List<Tuple2<String, Integer>> list = db.select(\"select name, score from person\") //"], [1271, "                .getAs(String.class, Integer.class) //"], [1272, "                .toList() //"], [1273, "                .timeout(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1274, "                .blockingGet();"], [1275, "        assertTrue(list.contains(Tuple2.create(\"DAVE\", 12)));"], [1276, "        assertTrue(list.contains(Tuple2.create(\"ANNE\", 18)));"], [1281, "        Database db = db();"], [1282, "        // note is a table with auto increment"], [1283, "        db.update(\"insert into note(text) values(?)\") //"], [1284, "                .parameters(\"HI\", \"THERE\") //"], [1285, "                .returnGeneratedKeys() //"], [1286, "                .getAs(Integer.class)//"], [1287, "                .test() //"], [1288, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1289, "                .assertValues(1, 2) //"], [1290, "                .assertComplete();"], [1292, "        db.update(\"insert into note(text) values(?)\") //"], [1293, "                .parameters(\"ME\", \"TOO\") //"], [1294, "                .returnGeneratedKeys() //"], [1295, "                .getAs(Integer.class)//"], [1296, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1297, "                .assertValues(3, 4) //"], [1298, "                .assertComplete();"], [1327, "        Database db = db();"], [1328, "        // note is a table with auto increment"], [1329, "        db.update(\"insert into note(text) values(?)\") //"], [1330, "                .parameters(\"HI\", \"THERE\") //"], [1331, "                .batchSize(2) //"], [1332, "                .returnGeneratedKeys();"], [1337, "        Database db = db();"], [1338, "        // note is a table with auto increment"], [1339, "        db.update(\"insert into note(text) values(?)\") //"], [1340, "                .parameters(\"HI\", \"THERE\") //"], [1341, "                .transacted() //"], [1342, "                .returnGeneratedKeys() //"], [1343, "                .valuesOnly() //"], [1344, "                .getAs(Integer.class)//"], [1345, "                .test() //"], [1346, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1347, "                .assertValues(1, 2) //"], [1348, "                .assertComplete();"], [1350, "        db.update(\"insert into note(text) values(?)\") //"], [1351, "                .parameters(\"ME\", \"TOO\") //"], [1352, "                .transacted() //"], [1353, "                .returnGeneratedKeys() //"], [1354, "                .valuesOnly() //"], [1355, "                .getAs(Integer.class)//"], [1356, "                .test() //"], [1357, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1358, "                .assertValues(3, 4) //"], [1359, "                .assertComplete();"], [1364, "        Database db = db();"], [1365, "        // note is a table with auto increment"], [1366, "        Flowable<Integer> a = db.update(\"insert into note(text) values(?)\") //"], [1367, "                .parameters(\"HI\", \"THERE\") //"], [1368, "                .transacted() //"], [1369, "                .returnGeneratedKeys() //"], [1370, "                .valuesOnly() //"], [1371, "                .getAs(Integer.class);"], [1373, "        db.update(\"insert into note(text) values(?)\") //"], [1374, "                .parameters(\"ME\", \"TOO\") //"], [1375, "                .transacted() //"], [1376, "                .returnGeneratedKeys() //"], [1377, "                .valuesOnly() //"], [1378, "                .getAs(Integer.class)//"], [1379, "                .startWith(a) //"], [1380, "                .test() //"], [1381, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1382, "                .assertValues(1, 2, 3, 4) //"], [1383, "                .assertComplete();"], [1388, "        db() //"], [1389, "                .select(\"select name from person\") //"], [1390, "                .transactedValuesOnly() //"], [1391, "                .getAs(String.class) //"], [1392, "                .doOnNext(System.out::println) //"], [1393, "                .flatMap(tx -> tx//"], [1394, "                        .update(\"update person set score=-1 where name=:name\") //"], [1395, "                        .batchSize(1) //"], [1396, "                        .parameter(\"name\", tx.value()) //"], [1397, "                        .valuesOnly() //"], [1398, "                        .counts()) //"], [1399, "                .test() //"], [1400, "                .awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1401, "                .assertValues(1, 1, 1) //"], [1402, "                .assertComplete();"], [1407, "        Database db = db();"], [1408, "        Flowable<Integer> a = db.update(\"update person set score=100 where name=?\") //"], [1409, "                .parameter(\"FRED\") //"], [1410, "                .counts();"], [1411, "        db.select(\"select score from person where name=?\") //"], [1412, "                .parameter(\"FRED\") //"], [1413, "                .dependsOn(a) //"], [1414, "                .getAs(Integer.class)//"], [1415, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1416, "                .assertValues(100) //"], [1417, "                .assertComplete();"], [1422, "        Database db = db();"], [1423, "        Observable<Integer> a = db.update(\"update person set score=100 where name=?\") //"], [1424, "                .parameter(\"FRED\") //"], [1425, "                .counts().toObservable();"], [1426, "        db.select(\"select score from person where name=?\") //"], [1427, "                .parameter(\"FRED\") //"], [1428, "                .dependsOn(a) //"], [1429, "                .getAs(Integer.class)//"], [1430, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1431, "                .assertValues(100) //"], [1432, "                .assertComplete();"], [1437, "        Database db = db();"], [1438, "        Single<Long> a = db.update(\"update person set score=100 where name=?\") //"], [1439, "                .parameter(\"FRED\") //"], [1440, "                .counts().count();"], [1441, "        db.select(\"select score from person where name=?\") //"], [1442, "                .parameter(\"FRED\") //"], [1443, "                .dependsOn(a) //"], [1444, "                .getAs(Integer.class)//"], [1445, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1446, "                .assertValues(100) //"], [1447, "                .assertComplete();"], [1452, "        Database db = db();"], [1453, "        Completable a = db.update(\"update person set score=100 where name=?\") //"], [1454, "                .parameter(\"FRED\") //"], [1455, "                .counts().ignoreElements();"], [1456, "        db.select(\"select score from person where name=?\") //"], [1457, "                .parameter(\"FRED\") //"], [1458, "                .dependsOn(a) //"], [1459, "                .getAs(Integer.class)//"], [1460, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1461, "                .assertValues(100) //"], [1462, "                .assertComplete();"], [1467, "        db() //"], [1468, "                .select(\"select name from person\") //"], [1469, "                .transactedValuesOnly() //"], [1470, "                .getAs(String.class) //"], [1471, "                .doOnNext(System.out::println) //"], [1472, "                .flatMap(tx -> tx//"], [1473, "                        .update(\"update person set score=-1 where name=:name\") //"], [1474, "                        .batchSize(0) //"], [1475, "                        .parameter(\"name\", tx.value()) //"], [1476, "                        .valuesOnly() //"], [1477, "                        .counts()) //"], [1478, "                .test().awaitDone(TIMEOUT_SECONDS, TimeUnit.SECONDS) //"], [1479, "                .assertValues(1, 1, 1) //"], [1480, "                .assertComplete();"]]}, "num_lines_added": 254, "num_lines_removed": 218}