{"hash": "cf20cefdb8c66b1bf67c022e4528bdf0adc5b516", "message": "refactor createDerbyWithStoredProcs", "file_num_lines": 2356, "diff_parsed": {"added": [[164, "                    .parameterListStream(Flowable.just(Arrays.asList(\"FRED\"), Arrays.asList(\"JOSEPH\"))) //"], [205, "                    .parameterListStream(Flowable.just(Arrays.asList(\"FRED\", 21), Arrays.asList(\"JOSEPH\", 34))) //"], [348, "    public void testSelectUsingNonBlockingBuilderConcurrencyTest() throws InterruptedException, TimeoutException {"], [607, "                    .doOnNext(tx -> log.debug(tx.isComplete() ? \"complete\" : String.valueOf(tx.value()))) //"], [743, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class, Integer.class) //"], [765, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class, Integer.class,"], [766, "                            String.class) //"], [870, "                    .doOnNext(tx -> log.debug(tx.isComplete() ? \"complete\" : String.valueOf(tx.value())))//"], [909, "                                .doOnComplete(() -> log.info(\"completed select where score=\" + score));"], [1214, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class, Integer.class) //"], [1217, "                    .assertComplete().assertValue(Tuple6.create(\"FRED\", 21, \"FRED\", 21, \"FRED\", 21)); //"], [1226, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class, Integer.class,"], [1227, "                            String.class) //"], [1230, "                    .assertComplete().assertValue(Tuple7.create(\"FRED\", 21, \"FRED\", 21, \"FRED\", 21, \"FRED\")); //"], [2148, "                    .assertValue(list -> list.get(0).isValue() && list.get(0).value() == 3 && list.get(1).isComplete()"], [2149, "                            && list.size() == 2) //"], [2207, "        Single.just(1).flatMapPublisher(n -> Flowable.just(1)).test(1).assertValue(1).assertComplete();"], [2394, "            try (PreparedStatement stmt = con.prepareStatement(\"select count(*) from person where name='FRED'\");"], [2418, "            try (PreparedStatement stmt = con.prepareStatement(\"select count(*) from person where name='FRED'\");"], [2438, "        Database db = DatabaseCreator.createDerbyWithStoredProcs(1);"], [2445, "                assertEquals(2, st.getInt(2));"], [2452, "        Database db = DatabaseCreator.createDerbyWithStoredProcs(1);"]], "deleted": [[164, "                    .parameterListStream("], [165, "                            Flowable.just(Arrays.asList(\"FRED\"), Arrays.asList(\"JOSEPH\"))) //"], [206, "                    .parameterListStream("], [207, "                            Flowable.just(Arrays.asList(\"FRED\", 21), Arrays.asList(\"JOSEPH\", 34))) //"], [350, "    public void testSelectUsingNonBlockingBuilderConcurrencyTest()"], [351, "            throws InterruptedException, TimeoutException {"], [610, "                    .doOnNext(tx -> log"], [611, "                            .debug(tx.isComplete() ? \"complete\" : String.valueOf(tx.value()))) //"], [747, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class,"], [748, "                            Integer.class) //"], [770, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class,"], [771, "                            Integer.class, String.class) //"], [875, "                    .doOnNext(tx -> log"], [876, "                            .debug(tx.isComplete() ? \"complete\" : String.valueOf(tx.value())))//"], [915, "                                .doOnComplete("], [916, "                                        () -> log.info(\"completed select where score=\" + score));"], [1221, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class,"], [1222, "                            Integer.class) //"], [1225, "                    .assertComplete()"], [1226, "                    .assertValue(Tuple6.create(\"FRED\", 21, \"FRED\", 21, \"FRED\", 21)); //"], [1235, "                    .getAs(String.class, Integer.class, String.class, Integer.class, String.class,"], [1236, "                            Integer.class, String.class) //"], [1239, "                    .assertComplete()"], [1240, "                    .assertValue(Tuple7.create(\"FRED\", 21, \"FRED\", 21, \"FRED\", 21, \"FRED\")); //"], [2158, "                    .assertValue(list -> list.get(0).isValue() && list.get(0).value() == 3"], [2159, "                            && list.get(1).isComplete() && list.size() == 2) //"], [2217, "        Single.just(1).flatMapPublisher(n -> Flowable.just(1)).test(1).assertValue(1)"], [2218, "                .assertComplete();"], [2405, "            try (PreparedStatement stmt = con"], [2406, "                    .prepareStatement(\"select count(*) from person where name='FRED'\");"], [2430, "            try (PreparedStatement stmt = con"], [2431, "                    .prepareStatement(\"select count(*) from person where name='FRED'\");"], [2451, "        Database db = DatabaseCreator.createDerby(1);"], [2454, "                stmt.execute("], [2455, "                        \"create table app.person (name varchar(50) primary key, score int not null)\");"], [2456, "                stmt.execute("], [2457, "                        \"call sqlj.install_jar('target/rxjava2-jdbc-stored-procedure.jar', 'APP.examples',0)\");"], [2458, ""], [2459, "                String sql = \"CREATE PROCEDURE APP.GETPERSONCOUNT\" //"], [2460, "                        + \" (IN MIN_SCORE INTEGER,\" //"], [2461, "                        + \" OUT COUNT INTEGER)\" //"], [2462, "                        + \" PARAMETER STYLE JAVA\" //"], [2463, "                        + \" LANGUAGE JAVA\" //"], [2464, "                        + \" EXTERNAL NAME\" //"], [2465, "                        + \" 'org.davidmoten.rx.jdbc.StoredProcExample.getPersonCount'\";"], [2466, "                stmt.execute(sql);"], [2467, "                stmt.execute(\"CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(\""], [2468, "                        + \"'derby.database.classpath', 'APP.examples')\");"], [2473, "                assertEquals(0, st.getInt(2));"], [2480, "        Database db = DatabaseCreator.createDerby(1);"], [2483, "                stmt.execute("], [2484, "                        \"create table app.person (name varchar(50) primary key, score int not null)\");"], [2485, "                stmt.execute(\"insert into app.person(name, score) values('FRED', 24)\");"], [2486, "                stmt.execute(\"insert into app.person(name, score) values('SARAH', 26)\");"], [2487, "                stmt.execute("], [2488, "                        \"call sqlj.install_jar('target/rxjava2-jdbc-stored-procedure.jar', 'APP.examples',0)\");"], [2489, ""], [2490, "                String sql = \"CREATE PROCEDURE APP.RETURNRESULTSETS(in min_score integer)\" //"], [2491, "                        + \" PARAMETER STYLE JAVA\" //"], [2492, "                        + \" LANGUAGE JAVA\" //"], [2493, "                        + \" READS SQL DATA\" //"], [2494, "                        + \" DYNAMIC RESULT SETS 2\" //"], [2495, "                        + \" EXTERNAL NAME\" //"], [2496, "                        + \" 'org.davidmoten.rx.jdbc.StoredProcExample.returnResultSets'\";"], [2497, "                stmt.execute(sql);"], [2498, "                stmt.execute(\"CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(\""], [2499, "                        + \"'derby.database.classpath', 'APP.examples')\");"]]}, "num_lines_added": 22, "num_lines_removed": 67}