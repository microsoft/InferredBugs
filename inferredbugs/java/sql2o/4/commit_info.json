{"hash": "900f941cdadb84c16290fa488a0d75c4bbcca559", "message": "Deprecated createQuery methods on Sql2o class.\nUpdated some tests to not use deprecated API. TODO update more tests.", "file_num_lines": 864, "diff_parsed": {"added": [[117, "        try (Connection con = sql2o.open()) {"], [118, ""], [119, "            Date before = new Date();"], [120, "            List<User> allUsers = con.createQuery(\"select * from User\").executeAndFetch(User.class);"], [121, ""], [122, ""], [123, "            assertNotNull(allUsers);"], [125, "            Date after = new Date();"], [126, "            long span = after.getTime() - before.getTime();"], [127, "            System.out.println(String.format(\"Fetched %s user: %s ms\", insertIntoUsers, span));"], [129, "            // repeat this"], [130, "            before = new Date();"], [131, "            allUsers = con.createQuery(\"select * from User\").executeAndFetch(User.class);"], [132, "            after = new Date();"], [133, "            span = after.getTime() - before.getTime();"], [134, "            System.out.println(String.format(\"Again Fetched %s user: %s ms\", insertIntoUsers, span));"], [135, ""], [136, "            assertTrue(allUsers.size() == insertIntoUsers);"], [137, ""], [138, "        }"], [150, "        try (Connection con = sql2o.open()) {"], [151, "            con.createQuery(sql, \"testExecuteAndFetchWithNulls\").executeUpdate();"], [154, "            Connection connection = sql2o.beginTransaction();"], [155, "            Query insQuery = connection.createQuery(\"insert into testExecWithNullsTbl (text, aNumber, aLongNumber) values(:text, :number, :lnum)\");"], [156, "            insQuery.addParameter(\"text\", \"some text\").addParameter(\"number\", 2).addParameter(\"lnum\", 10L).executeUpdate();"], [157, "            insQuery.addParameter(\"text\", \"some text\").addParameter(\"number\", (Integer) null).addParameter(\"lnum\", 10L).executeUpdate();"], [158, "            insQuery.addParameter(\"text\", (String) null).addParameter(\"number\", 21).addParameter(\"lnum\", (Long) null).executeUpdate();"], [159, "            insQuery.addParameter(\"text\", \"some text\").addParameter(\"number\", 1221).addParameter(\"lnum\", 10).executeUpdate();"], [160, "            insQuery.addParameter(\"text\", \"some text\").addParameter(\"number\", 2311).addParameter(\"lnum\", 12).executeUpdate();"], [161, "            connection.commit();"], [163, "            List<Entity> fetched = con.createQuery(\"select * from testExecWithNullsTbl\").executeAndFetch(Entity.class);"], [165, "            assertTrue(fetched.size() == 5);"], [166, "            assertNull(fetched.get(2).text);"], [167, "            assertNotNull(fetched.get(3).text);"], [169, "            assertNull(fetched.get(1).aNumber);"], [170, "            assertNotNull(fetched.get(2).aNumber);"], [172, "            assertNull(fetched.get(2).aLongNumber);"], [173, "            assertNotNull(fetched.get(3).aLongNumber);"], [174, "        }"]], "deleted": [[117, "        Date before = new Date();"], [118, "        List<User> allUsers = sql2o.createQuery(\"select * from User\").executeAndFetch(User.class);"], [119, "        Date after = new Date();"], [120, "        long span = after.getTime() - before.getTime();"], [121, "        System.out.println(String.format(\"Fetched %s user: %s ms\", insertIntoUsers, span));"], [123, "        // repeat this"], [124, "        before = new Date();"], [125, "        allUsers = sql2o.createQuery(\"select * from User\").executeAndFetch(User.class);"], [126, "        after = new Date();"], [127, "        span = after.getTime() - before.getTime();"], [128, "        System.out.println(String.format(\"Again Fetched %s user: %s ms\", insertIntoUsers, span));"], [130, "        assertTrue(allUsers.size() == insertIntoUsers);"], [142, "        sql2o.createQuery(sql, \"testExecuteAndFetchWithNulls\").executeUpdate();"], [145, "        Connection connection = sql2o.beginTransaction();"], [146, "        Query insQuery = connection.createQuery(\"insert into testExecWithNullsTbl (text, aNumber, aLongNumber) values(:text, :number, :lnum)\");"], [147, "        insQuery.addParameter(\"text\", \"some text\").addParameter(\"number\", 2).addParameter(\"lnum\", 10L).executeUpdate();"], [148, "        insQuery.addParameter(\"text\", \"some text\").addParameter(\"number\", (Integer)null).addParameter(\"lnum\", 10L).executeUpdate();"], [149, "        insQuery.addParameter(\"text\", (String)null).addParameter(\"number\", 21).addParameter(\"lnum\", (Long)null).executeUpdate();"], [150, "        insQuery.addParameter(\"text\", \"some text\").addParameter(\"number\", 1221).addParameter(\"lnum\", 10).executeUpdate();"], [151, "        insQuery.addParameter(\"text\", \"some text\").addParameter(\"number\", 2311).addParameter(\"lnum\", 12).executeUpdate();"], [152, "        connection.commit();"], [154, "        List<Entity> fetched = sql2o.createQuery(\"select * from testExecWithNullsTbl\").executeAndFetch(Entity.class);"], [156, "        assertTrue(fetched.size() == 5);"], [157, "        assertNull(fetched.get(2).text);"], [158, "        assertNotNull(fetched.get(3).text);"], [160, "        assertNull(fetched.get(1).aNumber);"], [161, "        assertNotNull(fetched.get(2).aNumber);"], [163, "        assertNull(fetched.get(2).aLongNumber);"], [164, "        assertNotNull(fetched.get(3).aLongNumber);"]]}, "num_lines_added": 39, "num_lines_removed": 29}