{"hash": "c29ae08b876b741a6329f464988e4850f86396c1", "message": "Fix connection count metric.", "file_num_lines": 405, "diff_parsed": {"added": [[236, "    /**"], [237, "     * Invoked when a client sends its <em>CONNECT</em> packet."], [238, "     * <p>"], [239, "     * Authenticates the client (if required) and registers handlers for processing"], [240, "     * messages published by the client."], [241, "     *"], [242, "     * @param endpoint The MQTT endpoint representing the client."], [243, "     */"], [267, "     * Registers a close handler on the endpoint which invokes {@link #close(MqttEndpoint)}."], [278, "            close(endpoint);"], [290, "            LOG.debug(\"connection request from device [clientId: {}] rejected: {}\","], [292, "            endpoint.reject(MqttConnectReturnCode.CONNECTION_REFUSED_BAD_USER_NAME_OR_PASSWORD);"], [299, "                LOG.debug(\"connection request from device [clientId: {}] rejected: {}\","], [300, "                        endpoint.clientIdentifier(), \"device provided malformed credentials in CONNECT packet\");"], [302, ""], [307, "                        LOG.debug(\"cannot authenticate device [tenant-id: {}, auth-id: {}]: {}\","], [333, "            close(endpoint);"], [336, "            metrics.decrementMqttConnections(authenticatedDevice.getTenantId());"], [341, "        metrics.incrementMqttConnections(authenticatedDevice.getTenantId());"], [572, "        if (registrationAssertions.remove(endpoint) != null) {"], [573, "            LOG.trace(\"removed registration assertion for device [clientId: {}]\", endpoint.clientIdentifier());"], [574, "        }"], [575, "        onClose(endpoint);"], [585, "     * Invoked before the connection with a device is closed."], [586, "     * <p>"], [587, "     * Subclasses should override this method in order to release any device"], [588, "     * specific resources."]], "deleted": [[259, "     * Registers a close handler on the endpoint which first removes any registration assertion"], [260, "     * cached for the client then delegates to {@link #onClose(MqttEndpoint)}."], [272, "            if (registrationAssertions.remove(endpoint) != null) {"], [273, "                LOG.trace(\"removed registration assertion for device [clientId: {}]\", endpoint.clientIdentifier());"], [274, "            }"], [275, "            onClose(endpoint);"], [286, "            endpoint.reject(MqttConnectReturnCode.CONNECTION_REFUSED_BAD_USER_NAME_OR_PASSWORD);"], [287, "            LOG.debug(\"connection request from device [clientId: {}] rejected,  [cause: {}]\","], [295, "                LOG.debug(\"cannot authenticate device [clientId: {}] rejected [cause: {}]\","], [296, "                        endpoint.clientIdentifier(), MqttConnectReturnCode.CONNECTION_REFUSED_BAD_USER_NAME_OR_PASSWORD);"], [298, "                close(endpoint);"], [303, "                        LOG.debug(\"cannot authenticate device [tenant-id: {}, auth-id: {}], cause: {}\","], [312, "                        close(endpoint);"], [320, "                        metrics.incrementMqttConnections(authenticatedDevice.getTenantId());"], [333, "            if (registrationAssertions.remove(endpoint) != null) {"], [334, "                LOG.trace(\"removed registration assertion for device [tenant-id: {}, device-id: {}]\","], [335, "                        authenticatedDevice.getTenantId(), authenticatedDevice.getDeviceId());"], [336, "            }"], [337, "            onClose(endpoint);"], [572, "        registrationAssertions.remove(endpoint);"], [582, "     * Invoked before the connection with a client is closed."], [589, "        metrics.decrementMqttConnections(getCredentials(endpoint.auth()).getTenantId());"]]}, "num_lines_added": 27, "num_lines_removed": 22}