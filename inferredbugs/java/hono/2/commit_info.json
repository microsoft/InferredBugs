{"hash": "a05fa512cf6efa82f3ad793ac2a18d8c8289e9e3", "message": "Properly handle correlation ID in registration requests.\n\nAdd support for x-opt-app-correlation-id annotation as described by AMQP\nJMS binding.", "file_num_lines": 247, "diff_parsed": {"added": [[29, "import static org.eclipse.hono.util.MessageHelper.*;"], [171, "        LOG.debug(\"registering new link for telemetry client [{}]\", linkId);"], [194, "        final ResourceIdentifier messageAddress = ResourceIdentifier.fromString(getAnnotation(msg, APP_PROPERTY_RESOURCE_ID, String.class));"], [204, "                LOG.debug(\"device {}/{} does not exist, closing link\","], [206, "                MessageHelper.rejected(delivery, AmqpError.PRECONDITION_FAILED.toString(), \"device does not exist\");"], [215, "        vertx.eventBus().send(EVENT_BUS_ADDRESS_REGISTRATION_IN, registrationJson, response -> {"], [216, "            if (response.succeeded()) {"], [217, "                final io.vertx.core.eventbus.Message<Object> message = response.result();"]], "deleted": [[29, "import static org.eclipse.hono.util.MessageHelper.APP_PROPERTY_RESOURCE_ID;"], [171, "        LOG.debug(\"registering new link for client [{}]\", linkId);"], [194, "        final ResourceIdentifier messageAddress = ResourceIdentifier.fromString(MessageHelper.getAnnotation(msg, APP_PROPERTY_RESOURCE_ID));"], [204, "                LOG.debug(\"Device {}/{} does not exist, rejecting message.\","], [206, "                ProtonHelper.rejected(delivery, true);"], [215, "        vertx.eventBus().send(EVENT_BUS_ADDRESS_REGISTRATION_IN, registrationJson, async -> {"], [216, "            if (async.succeeded()) {"], [217, "                final io.vertx.core.eventbus.Message<Object> message = async.result();"], [222, "                LOG.debug(\"Failed to retrieve information about device {}/{}: {}\","], [223, "                        resource.getTenantId(), resource.getDeviceId(), async.cause().getMessage());"]]}, "num_lines_added": 8, "num_lines_removed": 10}