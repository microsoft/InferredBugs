    private void sendRegistrationData(final ProtonDelivery delivery, final Message msg) {
        final ResourceIdentifier messageAddress = ResourceIdentifier.fromString(
                MessageHelper.getAnnotation(msg, APP_PROPERTY_RESOURCE_ID));
        checkPermission(messageAddress, permissionGranted -> {
            if (permissionGranted) {
                vertx.runOnContext(run -> {
                    final JsonObject registrationMsg = RegistrationConstants.getRegistrationMsg(msg);
                    vertx.eventBus().send(EVENT_BUS_ADDRESS_REGISTRATION_IN, registrationMsg,
                            result -> {
                                // TODO check for correct session here...?
                                final String replyTo = msg.getReplyTo();
                                if (replyTo != null) {
                                    final JsonObject message = (JsonObject) result.result().body();
                                    message.put(APP_PROPERTY_CORRELATION_ID, createCorrelationId(msg));
                                    vertx.eventBus().send(replyTo, message);
                                } else {
                                    LOG.debug("No reply-to address provided, cannot send reply to client.");
                                }
                            });
                    ProtonHelper.accepted(delivery, true);
                });
            } else {
                LOG.debug("client is not authorized to register devices at [{}]", messageAddress);
                MessageHelper.rejected(delivery, UNAUTHORIZED_ACCESS.toString(),
                        "client is not authorized to register devices at " + messageAddress);
            }
        });
    }