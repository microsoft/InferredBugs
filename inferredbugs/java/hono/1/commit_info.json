{"hash": "c766f9e623008b6f711ad4d8e00d4ac791cf24fc", "message": "extend message filters to check if device_id matches with link target, remove permission check per message", "file_num_lines": 106, "diff_parsed": {"added": [[114, "        vertx.runOnContext(run -> {"], [115, "            final JsonObject registrationMsg = RegistrationConstants.getRegistrationMsg(msg);"], [116, "            vertx.eventBus().send(EVENT_BUS_ADDRESS_REGISTRATION_IN, registrationMsg,"], [117, "                    result -> {"], [118, "                        // TODO check for correct session here...?"], [119, "                        final String replyTo = msg.getReplyTo();"], [120, "                        if (replyTo != null) {"], [121, "                            final JsonObject message = (JsonObject) result.result().body();"], [122, "                            message.put(APP_PROPERTY_CORRELATION_ID, createCorrelationId(msg));"], [123, "                            vertx.eventBus().send(replyTo, message);"], [124, "                        } else {"], [125, "                            LOG.debug(\"No reply-to address provided, cannot send reply to client.\");"], [126, "                        }"], [127, "                    });"], [128, "            ProtonHelper.accepted(delivery, true);"]], "deleted": [[15, "import static org.apache.qpid.proton.amqp.transport.AmqpError.UNAUTHORIZED_ACCESS;"], [18, "import static org.eclipse.hono.util.MessageHelper.APP_PROPERTY_RESOURCE_ID;"], [86, ""], [87, ""], [118, "        final ResourceIdentifier messageAddress = ResourceIdentifier.fromString("], [119, "                MessageHelper.getAnnotation(msg, APP_PROPERTY_RESOURCE_ID));"], [120, "        checkPermission(messageAddress, permissionGranted -> {"], [121, "            if (permissionGranted) {"], [122, "                vertx.runOnContext(run -> {"], [123, "                    final JsonObject registrationMsg = RegistrationConstants.getRegistrationMsg(msg);"], [124, "                    vertx.eventBus().send(EVENT_BUS_ADDRESS_REGISTRATION_IN, registrationMsg,"], [125, "                            result -> {"], [126, "                                // TODO check for correct session here...?"], [127, "                                final String replyTo = msg.getReplyTo();"], [128, "                                if (replyTo != null) {"], [129, "                                    final JsonObject message = (JsonObject) result.result().body();"], [130, "                                    message.put(APP_PROPERTY_CORRELATION_ID, createCorrelationId(msg));"], [131, "                                    vertx.eventBus().send(replyTo, message);"], [132, "                                } else {"], [133, "                                    LOG.debug(\"No reply-to address provided, cannot send reply to client.\");"], [134, "                                }"], [135, "                            });"], [136, "                    ProtonHelper.accepted(delivery, true);"], [137, "                });"], [138, "            } else {"], [139, "                LOG.debug(\"client is not authorized to register devices at [{}]\", messageAddress);"], [140, "                MessageHelper.rejected(delivery, UNAUTHORIZED_ACCESS.toString(),"], [141, "                        \"client is not authorized to register devices at \" + messageAddress);"], [142, "            }"]]}, "num_lines_added": 15, "num_lines_removed": 29}