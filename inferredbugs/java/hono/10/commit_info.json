{"hash": "4bc8113e8956587d05ff1d764d8744aafba1d798", "message": "Omit tenant ID from target address in Tenant client.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch-si.com>", "file_num_lines": 311, "diff_parsed": {"added": [[18, "import java.util.HashMap;"], [77, "    private final Map<Object, TriTuple<Handler<AsyncResult<R>>, Object, Object>> replyMap = new HashMap<>();"], [98, "     * @throws NullPointerException if any of context or configuration are {@code null}."], [103, "        if (tenantId == null) {"], [104, "            this.targetAddress = getName();"], [105, "            this.replyToAddress = String.format(\"%s/%s\", getName(), UUID.randomUUID());"], [106, "        } else {"], [107, "            this.targetAddress = String.format(\"%s/%s\", getName(), tenantId);"], [108, "            this.replyToAddress = String.format(\"%s/%s/%s\", getName(), tenantId, UUID.randomUUID());"], [109, "        }"], [121, "     * @throws NullPointerException if any of the parameters except tenant ID is {@code null}."], [279, "        // the tuple from the reply map contains"], [280, "        // 1. the handler for processing the response and"], [281, "        // 2. the key to use for caching the response"], [283, ""], [284, "        if (handler == null) {"], [288, "        } else {"], [289, "            final R response = getRequestResponseResult(message);"], [290, "            if (response == null) {"], [291, "                LOG.debug(\"discarding malformed response lacking status code [reply-to: {}, correlation ID: {}]\","], [292, "                        replyToAddress, message.getCorrelationId());"], [293, "                ProtonHelper.released(delivery, true);"], [294, "            } else {"], [295, "                LOG.debug(\"received response [reply-to: {}, subject: {}, correlation ID: {}, status: {}]\","], [296, "                        replyToAddress, message.getSubject(), message.getCorrelationId(), response.getStatus());"], [297, "                addToCache(handler.two(), response);"], [298, "                handler.one().handle(Future.succeededFuture(response));"], [299, "                ProtonHelper.accepted(delivery, true);"], [300, "            }"], [330, ""], [335, "        if (status == null) {"], [336, "            return null;"], [337, "        } else {"], [338, "            final String payload = MessageHelper.getPayload(message);"], [339, "            final CacheDirective cacheDirective = CacheDirective.from(MessageHelper.getCacheDirective(message));"], [341, "            return getResult(status, payload, cacheDirective);"], [342, "        }"]], "deleted": [[22, "import java.util.concurrent.ConcurrentHashMap;"], [77, "    private final Map<Object, TriTuple<Handler<AsyncResult<R>>, Object, Object>> replyMap = new ConcurrentHashMap<>();"], [98, "     * @throws NullPointerException if any of the parameters except tenantId is {@code null}."], [103, "        this.targetAddress = String.format(\"%s/%s\", getName(), tenantId);"], [104, "        this.replyToAddress = String.format(\"%s/%s/%s\", getName(), tenantId, UUID.randomUUID());"], [116, "     * @throws NullPointerException if any of the parameters except tenantId is {@code null}."], [275, "        if (handler != null) {"], [276, "            final R response = getRequestResponseResult(message);"], [277, "            LOG.debug(\"received response [reply-to: {}, subject: {}, correlation ID: {}, status: {}]\","], [278, "                    replyToAddress, message.getSubject(), message.getCorrelationId(), response.getStatus());"], [279, "            addToCache(handler.two(), response);"], [280, "            handler.one().handle(Future.succeededFuture(response));"], [281, "            ProtonHelper.accepted(delivery, true);"], [282, "        } else {"], [319, "        final String payload = MessageHelper.getPayload(message);"], [320, "        final CacheDirective cacheDirective = CacheDirective.from(MessageHelper.getCacheDirective(message));"], [322, "        return getResult(status, payload, cacheDirective);"]]}, "num_lines_added": 37, "num_lines_removed": 17}