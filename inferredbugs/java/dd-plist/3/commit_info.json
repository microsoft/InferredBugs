{"hash": "95a67cda84b40dc201fccf1782d966249cf50f84", "message": "Skip #TEXT nodes when parsing XML (Issue 13)", "file_num_lines": 85, "diff_parsed": {"added": [[25, "import java.io.ByteArrayInputStream;"], [60, "        ByteArrayInputStream bis = new ByteArrayInputStream(bytes);"], [61, "        return parse(bis);"], [72, "        //Enable offline parsing"], [73, "        docBuilderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);"], [83, "        //Skip all #TEXT nodes and take the first element node we find as root"], [84, "        NodeList rootNodes = doc.getDocumentElement().getChildNodes();"], [85, "        int rootIndex = getNextElementNode(rootNodes, 0);"], [86, "        if(rootIndex!=-1)"], [87, "            return parseObject(rootNodes.item(rootIndex));"], [88, "        else"], [89, "            throw new Exception(\"No root node found!\");"], [103, "            for (int i = getNextElementNode(children, 0); i != -1; i = getNextElementNode(children, i)) {"], [105, "                i = getNextElementNode(children, i);"], [106, "                Node val = children.item(i);"], [114, "            for (int i = getNextElementNode(children, 0); i != -1; i = getNextElementNode(children,i)) {"], [140, ""], [141, "    /**"], [142, "     * Finds the next element node, starting from the given index."], [143, "     * @param list The list of nodes to search"], [144, "     * @param startIndex The index from where to start searching"], [145, "     * @return The next index of an element node or -1 if none is found."], [146, "     */"], [147, "    private static int getNextElementNode(NodeList list, int startIndex) {"], [148, "        for(int i=startIndex;i<list.getLength();i++) {"], [149, "            if(list.item(i).getNodeType()==Node.ELEMENT_NODE)"], [150, "                return i;"], [151, "        }"], [152, "        return -1;"], [153, "    }"]], "deleted": [[59, ""], [60, "        InputStream is = new InputStream() {"], [61, ""], [62, "            private int pos = 0;"], [63, ""], [64, "            @Override"], [65, "            public int read() throws IOException {"], [66, "                if (pos >= bytes.length) {"], [67, "                    return -1;"], [68, "                }"], [69, "                return bytes[pos++];"], [70, "            }"], [71, "        };"], [72, ""], [73, "        return parse(is);"], [85, "        docBuilderFactory.setIgnoringElementContentWhitespace(true);"], [94, "        return parseObject(doc.getDocumentElement().getFirstChild());"], [108, "            for (int i = 0; i < children.getLength(); i += 2) {"], [110, "                Node val = children.item(i + 1);"], [118, "            for (int i = 0; i < children.getLength(); i++) {"]]}, "num_lines_added": 30, "num_lines_removed": 20}