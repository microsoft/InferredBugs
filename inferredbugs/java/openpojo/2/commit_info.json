{"hash": "cf09cc6792bdb56a7c5207b614fff155c69e092f", "message": "Fixing an issue when you have your package mapping -> path mapping not a 1 to 1.\n(i.e. multiple paths dealing with one package structure)", "file_num_lines": 94, "diff_parsed": {"added": [[20, "import java.io.IOException;"], [24, "import java.util.Enumeration;"], [50, "        List<File> paths = getPackageDirectories(packageName);"], [52, "        for (File path : paths) {"], [53, "            for (File entry : path.listFiles()) {"], [54, "                if (isClass(entry.getName())) {"], [55, "                    Class<?> clazz = getPathEntryAsClass(packageName, entry.getName());"], [56, "                    classes.add(clazz);"], [57, "                }"], [72, "    public static List<File> getPackageDirectories(final String packageName) {"], [73, "        List<String> paths = getFullyQualifiedPathsForPackage(packageName);"], [75, "        List<File> directories = new LinkedList<File>();"], [76, "        for (String path : paths) {"], [77, "            directories.add(new File(path));"], [78, "        }"], [79, "        return directories;"], [86, "    private static List<String> getFullyQualifiedPathsForPackage(final String packageName) {"], [88, "        List<URL> resources = getResources(packageAsPath);"], [89, "        if (resources.size() == 0) {"], [93, "        List<String> paths = new LinkedList<String>();"], [98, "            for (URL resource : resources) {"], [99, "                uri = new URI(resource.toString());"], [100, "                paths.add(uri.getPath());"], [101, "            }"], [102, "            return paths;"], [120, "    private static List<URL> getResources(final String path) {"], [121, "        List<URL> resources = new LinkedList<URL>();"], [122, "        try {"], [123, "            Enumeration<URL> enumeration = ClassLoader.getSystemResources(path);"], [124, "            while (enumeration.hasMoreElements()) {"], [125, "                resources.add(enumeration.nextElement());"], [126, "            }"], [127, "        } catch (IOException e) {"], [128, "            throw ReflectionException.getInstance(e);"], [129, "        }"], [130, "        return resources;"], [161, "        String className = packageName + PojoPackage.PACKAGE_DELIMETER"], [162, "                + fileEntry.substring(0, fileEntry.length() - CLASS_SUFFIX.length());"]], "deleted": [[48, "        File directory = getPackageAsDirectory(packageName);"], [50, "        for (File entry : directory.listFiles()) {"], [51, "            if (isClass(entry.getName())) {"], [52, "                Class<?> clazz = getPathEntryAsClass(packageName, entry.getName());"], [53, "                classes.add(clazz);"], [68, "    public static File getPackageAsDirectory(final String packageName) {"], [70, "        String path = getFullyQualifiedPathForPackage(packageName);"], [71, "        File directory = new File(path);"], [72, "        return directory;"], [79, "    private static String getFullyQualifiedPathForPackage(final String packageName) {"], [81, "        URL resource = getResource(getClassLoader(), packageAsPath);"], [82, "        if (resource == null) {"], [90, "            uri = new URI(resource.toString());"], [91, "            return uri.getPath();"], [109, "    private static URL getResource(final ClassLoader classLoader, final String path) {"], [110, "        return classLoader.getResource(path);"], [141, "        String className = packageName + PojoPackage.PACKAGE_DELIMETER + fileEntry.substring(0, fileEntry.length() - CLASS_SUFFIX.length());"]]}, "num_lines_added": 38, "num_lines_removed": 17}