{"hash": "97d3b26c8b22cc8e18927ca278c79913b71e1688", "message": "GH-146 Delegates getOutputStream and getWriter after withoutBody was called", "file_num_lines": 83, "diff_parsed": {"added": [[3, "import java.io.IOException;"], [4, "import java.io.PrintWriter;"], [7, "import org.junit.Before;"], [8, "import org.junit.Test;"], [10, "import static org.junit.Assert.assertNotSame;"], [13, "import static org.mockito.Mockito.times;"], [14, "import static org.mockito.Mockito.verify;"], [15, "import static org.mockito.Mockito.verifyNoMoreInteractions;"], [20, "    private HttpServletResponse mock;"], [21, "    private LocalResponse unit;"], [22, ""], [23, "    @Before"], [24, "    public void setUp() throws IOException {"], [25, "        mock = mock(HttpServletResponse.class);"], [31, "        unit = new LocalResponse(mock, \"1\");"], [32, "    }"], [34, "    @Test"], [35, "    public void shouldUseSameBody() throws IOException {"], [36, "        unit.getOutputStream().write(\"test\".getBytes());"], [38, "        final byte[] body1 = unit.getBody();"], [39, "        final byte[] body2 = unit.getBody();"], [43, ""], [44, "    @Test"], [45, "    public void shouldUseDifferentBodyAfterWrite() throws IOException {"], [46, "        unit.getOutputStream().write(\"Hello\".getBytes());"], [47, "        final byte[] body1 = unit.getBody();"], [48, ""], [49, "        unit.getOutputStream().write(\"World\".getBytes());"], [50, "        final byte[] body2 = unit.getBody();"], [51, ""], [52, "        assertNotSame(body1, body2);"], [53, "    }"], [54, ""], [55, "    @Test"], [56, "    public void shouldTeeGetOutputStream() throws IOException {"], [57, "        unit.withBody();"], [58, ""], [59, "        final ServletOutputStream os1 = unit.getOutputStream();"], [60, "        final ServletOutputStream os2 = unit.getOutputStream();"], [61, ""], [62, "        assertSame(os1, os2);"], [63, ""], [64, "        verify(mock).getOutputStream();"], [65, "        verifyNoMoreInteractions(mock);"], [66, "    }"], [67, ""], [68, "    @Test"], [69, "    public void shouldDelegateGetOutputStream() throws IOException {"], [70, "        unit.withoutBody();"], [71, ""], [72, "        unit.getOutputStream();"], [73, "        unit.getOutputStream();"], [74, ""], [75, "        verify(mock, times(2)).getOutputStream();"], [76, "        verifyNoMoreInteractions(mock);"], [77, "    }"], [78, ""], [79, "    @Test"], [80, "    public void shouldTeeGetWriter() throws IOException {"], [81, "        unit.withBody();"], [82, ""], [83, "        final PrintWriter writer1 = unit.getWriter();"], [84, "        final PrintWriter writer2 = unit.getWriter();"], [85, ""], [86, "        assertSame(writer1, writer2);"], [87, ""], [88, "        verify(mock).getOutputStream();"], [89, "        verify(mock).getCharacterEncoding();"], [90, "        verifyNoMoreInteractions(mock);"], [91, "    }"], [92, ""], [93, "    @Test"], [94, "    public void shouldDelegateGetWriter() throws IOException {"], [95, "        unit.withoutBody();"], [96, ""], [97, "        unit.getWriter();"], [98, "        unit.getWriter();"], [99, ""], [100, "        verify(mock, times(2)).getWriter();"], [101, "        verifyNoMoreInteractions(mock);"], [102, "    }"], [103, ""], [104, "    @Test(expected = IllegalStateException.class)"], [105, "    public void shouldNotAllowWithBodyAfterWithoutBody() throws IOException {"], [106, "        unit.withoutBody();"], [107, "        unit.withBody();"], [108, "    }"], [109, ""]], "deleted": [[3, "import org.junit.Test;"], [4, ""], [7, "import java.io.IOException;"], [15, "    @Test"], [16, "    public void shouldUseSameBody() throws IOException {"], [17, "        final HttpServletResponse mock = mock(HttpServletResponse.class);"], [24, "        final LocalResponse response = new LocalResponse(mock, \"1\");"], [25, "        response.getOutputStream().write(\"test\".getBytes());"], [27, "        final byte[] body1 = response.getBody();"], [28, "        final byte[] body2 = response.getBody();"]]}, "num_lines_added": 88, "num_lines_removed": 10}