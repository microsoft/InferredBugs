{"hash": "d66dc79565e80f88f29d9236eb2d1b457413f205", "message": "OS-SMART # Multi Steps - if one step failed, dont execute next step. Log also fixed. Better now", "file_num_lines": 131, "diff_parsed": {"added": [[16, "import org.jsmart.smarttester.core.logbuilder.LogCorelationshipPrinter;"], [20, "import java.time.LocalDateTime;"], [24, "import static java.lang.String.format;"], [25, "import static org.jsmart.smarttester.core.logbuilder.LogCorelationshipPrinter.createRelationshipId;"], [56, "    LogCorelationshipPrinter logCorelationshipPrinter = LogCorelationshipPrinter.newInstance(LOGGER);"], [57, ""], [61, "        LOGGER.info(\"\\n-------------------------- Scenario:{} -------------------------\\n\", scenario.getFlowName());"], [62, ""], [74, "            String resolvedRequestJson = jsonTestProcesor.resolveStringJson("], [81, "            final String logPrefixRelationshipId = createRelationshipId();"], [86, "                // Resolve the URL patterns if any"], [87, "                serviceName = jsonTestProcesor.resolveStringJson("], [88, "                        serviceName,"], [89, "                        scenarioExecutionState.getResolvedScenarioState()"], [90, "                );"], [91, ""], [92, "                //"], [93, "                logCorelationshipPrinter.aRequestBuilder()"], [94, "                        .relationshipId(logPrefixRelationshipId)"], [95, "                        .requestTimeStamp(LocalDateTime.now())"], [96, "                        .step(thisStep.getName())"], [97, "                        .url(serviceName)"], [98, "                        .method(operationName)"], [99, "                        .request(SmartUtils.prettyPrintJson(resolvedRequestJson));"], [100, "                //"], [101, ""], [115, "                //"], [116, "                logCorelationshipPrinter.aResponseBuilder()"], [117, "                        .relationshipId(logPrefixRelationshipId)"], [118, "                        .responseTimeStamp(LocalDateTime.now())"], [119, "                        .response(executionResult);"], [120, "                //"], [121, ""], [126, "                String resolvedAssertionJson = jsonTestProcesor.resolveStringJson("], [131, "                LOGGER.info(\"\\n---------> Assertion: <----------\\n{}\", prettyPrintJson(resolvedAssertionJson));"], [134, "                List<AssertionReport> failureResults = jsonTestProcesor.assertAllAndReturnFailed(asserters, executionResult); //<-- write code"], [142, "                flowStepStatusNotifier.notifyFlowStepExecutionPassed(scenario.getFlowName(), thisStep.getName());"], [145, "                logCorelationshipPrinter.aResponseBuilder()"], [146, "                        .relationshipId(logPrefixRelationshipId)"], [147, "                        .responseTimeStamp(LocalDateTime.now())"], [148, "                        .response(ex.getMessage());"], [149, ""], [157, "            finally {"], [158, "                logCorelationshipPrinter.print();"], [159, "            }"]], "deleted": [[19, "import java.util.ArrayList;"], [63, "            LOGGER.info(String.format(\"\\n###RAW: Journey:%s, Step:%s\", scenario.getFlowName(), thisStep.getName()));"], [68, "            String resolvedRequestJson = jsonTestProcesor.resolveRequestJson("], [96, "                String resolvedAssertionJson = jsonTestProcesor.resolveRequestJson("], [101, "                LOGGER.info(\"\\n---------> Assertion: <----------\\n\""], [102, "                        + prettyPrintJson(resolvedAssertionJson));"], [104, "                // TODO: Collect the assertion result into this list, say field by field"], [106, "                List<AssertionReport> failureResults = new ArrayList<>(); //<-- write code"], [114, "                //return flowStepStatusNotifier.notifyFlowStepExecutionPassed(scenario.getFlowName(), thisStep.getName());"], [165, ""]]}, "num_lines_added": 45, "num_lines_removed": 10}