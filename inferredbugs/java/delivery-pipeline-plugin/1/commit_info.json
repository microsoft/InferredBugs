{"hash": "49da9b6f49a3e945d09198a3be78287b39a5aabd", "message": "Refined Status structure.", "file_num_lines": 150, "diff_parsed": {"added": [[5, "import com.diabol.pipefitter.model.status.Status;"], [7, "import com.diabol.pipefitter.model.status.StatusFactory;"], [24, "import static com.diabol.pipefitter.model.status.StatusFactory.idle;"], [25, "import static com.diabol.pipefitter.model.status.StatusFactory.running;"], [27, "import static hudson.model.Result.*;"], [28, "import static java.lang.Math.round;"], [29, "import static java.lang.System.currentTimeMillis;"], [100, "            if (stages.isEmpty() || build != null && build.equals(getDownstreamBuild(job, prevBuild))) {"], [101, "                Status status = build != null? resolveStatus(build): idle();"], [102, "                task = new Task(job.getDisplayName(), status);"], [105, "                task = new Task(job.getDisplayName(), idle());"], [129, "    private Status resolveStatus(AbstractBuild build)"], [130, "    {"], [131, "        if (build.isBuilding()) {"], [132, "            return running((int) round(100.0d * (currentTimeMillis() - build.getTimestamp().getTimeInMillis())"], [133, "                                       / build.getEstimatedDuration()));"], [135, ""], [136, "        Result result = build.getResult();"], [137, "        if (ABORTED.equals(result))"], [138, "            return StatusFactory.cancelled();"], [139, "        else if (SUCCESS.equals(result))"], [140, "            return StatusFactory.success();"], [141, "        else if (FAILURE.equals(result))"], [142, "            return StatusFactory.failed();"], [143, "        else if (UNSTABLE.equals(result))"], [144, "            return StatusFactory.unstable();"], [145, "        throw new IllegalStateException(\"Result \" + result + \" not recognized.\");"]], "deleted": [[5, "import com.diabol.pipefitter.model.Status;"], [91, "        boolean isFirst = true;"], [95, "            if (isFirst || build.equals(getDownstreamBuild(job, prevBuild))) {"], [96, "                Status status = resolveStatus(build);"], [97, "                if (status == Status.RUNNING) {"], [98, "                    task = new Task(job.getDisplayName(), status, (int) Math.round((double) (System.currentTimeMillis() - build.getTimestamp().getTimeInMillis()) / build.getEstimatedDuration() * 100.0));"], [99, "                } else {"], [100, "                    task = new Task(job.getDisplayName(), status, 100);"], [101, "                }"], [104, "                task = new Task(job.getDisplayName(), Status.NOTRUNNED, 0);"], [108, ""], [109, ""], [112, "            isFirst = false;"], [131, "    private Status resolveStatus(AbstractBuild build) {"], [132, "        Status status = Status.UNKNOWN;"], [133, "        if (build != null) {"], [134, "            if (build.isBuilding()) {"], [135, "                status = Status.RUNNING;"], [136, "            } else {"], [137, "                if (build.getResult().equals(Result.ABORTED)) {"], [138, "                    status = Status.CANCELLED;"], [139, "                }"], [140, ""], [141, "                if (build.getResult().equals(Result.SUCCESS)) {"], [142, "                    status = Status.SUCCESS;"], [143, "                }"], [144, ""], [145, "                if (build.getResult().equals(Result.FAILURE)) {"], [146, "                    status = Status.FAILED;"], [147, "                }"], [148, ""], [149, "                if (build.getResult().equals(Result.UNSTABLE)) {"], [150, "                    status = Status.UNSTABLE;"], [151, "                }"], [152, "            }"], [153, ""], [155, "        return status;"], [200, ""]]}, "num_lines_added": 27, "num_lines_removed": 38}