{"hash": "4d73c16f75aaaf2dd68dc0bd8e09574984b97544", "message": "Fixes #832: adding support for watch over port-forward", "file_num_lines": 207, "diff_parsed": {"added": [[20, "import io.fabric8.kubernetes.api.model.LabelSelector;"], [26, "import io.fabric8.maven.core.service.PortForwardService;"], [29, "import io.fabric8.maven.core.util.KubernetesResourceUtil;"], [76, "        String url = getServiceExposeUrl(kubernetes, resources);"], [77, "        if (url == null) {"], [78, "            url = getPortForwardUrl(resources);"], [79, "        }"], [80, ""], [81, "        if (url != null) {"], [82, "            runRemoteSpringApplication(url);"], [83, "        } else {"], [84, "            throw new IllegalStateException(\"Unable to open a channel to the remote pod.\");"], [85, "        }"], [86, "    }"], [87, ""], [88, "    private String getPortForwardUrl(final Set<HasMetadata> resources) throws Exception {"], [89, "        LabelSelector selector = KubernetesResourceUtil.getPodLabelSelector(resources);"], [90, "        if (selector == null) {"], [91, "            log.warn(\"Unable to determine a selector for application pods\");"], [92, "            return null;"], [93, "        }"], [94, ""], [95, "        PortForwardService portForwardService = getContext().getFabric8ServiceHub().getPortForwardService();"], [96, "        // TODO choose the right ports"], [97, "        portForwardService.forwardPortAsync(getContext().getLogger(), selector, 8080, 20000);"], [98, "        return \"http://localhost:20000\";"], [99, "    }"], [100, ""], [101, "    private String getServiceExposeUrl(KubernetesClient kubernetes, Set<HasMetadata> resources) throws InterruptedException {"], [129, "                    return url;"], [133, ""], [134, "        log.info(\"No exposed service found for connecting the dev tools\");"], [135, "        return null;"]], "deleted": [[74, "        boolean serviceFound = false;"], [101, "                    serviceFound = true;"], [102, "                    runRemoteSpringApplication(url);"], [106, "        if (!serviceFound) {"], [107, "            throw new IllegalStateException(\"No external service found for this application! So cannot watch a remote container!\");"], [108, "        }"]]}, "num_lines_added": 33, "num_lines_removed": 6}