{"hash": "a0edba59baaa3a81135f14d9b66db7cfa0421777", "message": "refactor(iot-dev): Use wait and notify to cut down on useless thread creation in transport layer\n\nThe current design of the device client library periodically spawns threads to handle sending and receiving messages as well as invoking callbacks. The device client will spawn these threads regardless of if any messages actually need to be sent/received, though.\n\nWith this change, the send/receive threads will instead wait until a message requires them to wake up. This will cut down on thread creation during less busy times without sacrificing performance during busy times", "file_num_lines": 791, "diff_parsed": {"added": [[71, "    // State lock used to communicate to the IotHubSendTask thread when a message needs to be sent or a callback needs to be invoked."], [72, "    // It is this layer's responsibility to notify that task each time a message is queued to send, or when a callback is queued to be invoked."], [73, "    private final Object sendThreadLock = new Object();"], [74, ""], [75, "    // State lock used to communicate to the IotHubReceiveTask thread when a received message needs to be handled. It is this"], [76, "    // layer's responsibility to notify that task each time a message is received."], [77, "    private final Object receiveThreadLock = new Object();"], [78, ""], [102, "    public Object getSendThreadLock()"], [103, "    {"], [104, "        return this.sendThreadLock;"], [105, "    }"], [106, ""], [107, "    public Object getReceiveThreadLock()"], [108, "    {"], [109, "        return this.receiveThreadLock;"], [110, "    }"], [111, ""], [112, "    public boolean hasMessagesToSend()"], [113, "    {"], [114, "        synchronized (sendThreadLock)"], [115, "        {"], [116, "            return this.waitingPacketsQueue.size() > 0;"], [117, "        }"], [118, "    }"], [119, ""], [120, "    public boolean hasReceivedMessagesToHandle()"], [121, "    {"], [122, "        synchronized (receiveThreadLock)"], [123, "        {"], [124, "            return this.receivedMessagesQueue.size() > 0;"], [125, "        }"], [126, "    }"], [127, ""], [128, "    public boolean hasCallbacksToExecute()"], [129, "    {"], [130, "        synchronized (sendThreadLock)"], [131, "        {"], [132, "            return this.callbackPacketsQueue.size() > 0;"], [133, "        }"], [134, "    }"], [135, ""], [136, "    public boolean isClosed()"], [137, "    {"], [138, "        return this.connectionStatus == IotHubConnectionStatus.DISCONNECTED;"], [139, "    }"], [140, ""], [211, "            this.addToReceivedMessagesQueue(message);"], [370, "        // Notify send thread to finish up so it doesn't survive this close"], [371, "        synchronized (this.sendThreadLock)"], [372, "        {"], [373, "            this.sendThreadLock.notifyAll();"], [374, "        }"], [375, ""], [376, "        // Notify receive thread to finish up so it doesn't survive this close"], [377, "        synchronized (this.receiveThreadLock)"], [378, "        {"], [379, "            this.receiveThreadLock.notifyAll();"], [380, "        }"], [381, ""], [406, "        this.addToWaitingQueue(packet);"], [407, ""], [411, "    public IotHubClientProtocol getProtocol()"], [412, "    {"], [413, "        return this.defaultConfig.getProtocol();"], [414, "    }"], [415, ""], [454, "        //Check waiting packets, remove any that have expired."], [473, "        //Requeue all the non-expired messages."], [669, "                this.addToReceivedMessagesQueue(receivedMessage);"], [688, "            this.addToReceivedMessagesQueue(transportMessage);"], [792, "            for (IotHubTransportPacket packetToRequeue : inProgressPackets.values())"], [793, "            {"], [794, "                this.addToWaitingQueue(packetToRequeue);"], [795, "            }"], [796, ""], [926, "        final Object sendThreadLock;"], [928, "        public MessageRetryRunnable(Queue<IotHubTransportPacket> waitingPacketsQueue, IotHubTransportPacket transportPacket, Object sendThreadLock)"], [932, "            this.sendThreadLock = sendThreadLock;"], [939, ""], [940, "            // Wake up send messages thread so that it can send this message"], [941, "            this.sendThreadLock.notifyAll();"], [966, "                    this.taskScheduler.schedule(new MessageRetryRunnable(this.waitingPacketsQueue, packet, this), retryDecision.getDuration(), MILLISECONDS);"], [1216, "            synchronized (this.sendThreadLock)"], [1217, "            {"], [1218, "                this.callbackPacketsQueue.add(packet);"], [1219, ""], [1220, "                //Wake up send messages thread so that it can process this new callback if it was asleep"], [1221, "                this.sendThreadLock.notifyAll();"], [1222, "            }"], [1223, "        }"], [1224, "    }"], [1225, ""], [1226, "    private void addToWaitingQueue(IotHubTransportPacket packet)"], [1227, "    {"], [1228, "        synchronized (this.sendThreadLock)"], [1229, "        {"], [1230, "            this.waitingPacketsQueue.add(packet);"], [1231, ""], [1232, "            // Wake up IotHubSendTask so it can send this message"], [1233, "            this.sendThreadLock.notifyAll();"], [1234, "        }"], [1235, "    }"], [1236, ""], [1237, "    private void addToReceivedMessagesQueue(IotHubTransportMessage message)"], [1238, "    {"], [1239, "        synchronized (this.receiveThreadLock)"], [1240, "        {"], [1241, "            this.receivedMessagesQueue.add(message);"], [1242, ""], [1243, "            // Wake up IotHubReceiveTask so it can handle receiving this message"], [1244, "            this.receiveThreadLock.notifyAll();"]], "deleted": [[164, "            this.receivedMessagesQueue.add(message);"], [347, "        this.waitingPacketsQueue.add(packet);"], [389, "        //Check waiting packets"], [603, "                this.receivedMessagesQueue.add(receivedMessage);"], [622, "            this.receivedMessagesQueue.add(transportMessage);"], [726, "            this.waitingPacketsQueue.addAll(inProgressPackets.values());"], [857, "        public MessageRetryRunnable(Queue<IotHubTransportPacket> waitingPacketsQueue, IotHubTransportPacket transportPacket)"], [891, "                    this.taskScheduler.schedule(new MessageRetryRunnable(this.waitingPacketsQueue, packet), (long) retryDecision.getDuration(), MILLISECONDS);"], [1141, "            this.callbackPacketsQueue.add(packet);"]]}, "num_lines_added": 112, "num_lines_removed": 9}