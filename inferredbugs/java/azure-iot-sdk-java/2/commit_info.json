{"hash": "f9091c922e8fd2f996f3ecf4f79600cbed038f97", "message": "Fix package and folder structure alignment\n\n1. Move tests to tests.unit from devicetwin package\n2. Move service samples to com.microsoft.azure.sdk.iot.samples.service\n3. Move device samples to com.microsoft.azure.sdk.iot.samples.device\n4. Move device twin package from module DeviceTwin to devicetwin on service only", "file_num_lines": 406, "diff_parsed": {"added": [[5, "package tests.unit.com.microsoft.azure.sdk.iot.device.transport.mqtt;"], [10, "import com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt;"], [11, "import com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttMessaging;"], [94, "                Deencapsulation.invoke(mockMqtt, \"connect\");"], [95, "                Deencapsulation.invoke(mockMqtt, \"subscribe\", anyString);"], [105, "                Deencapsulation.invoke(mockMqtt, \"connect\");"], [107, "                Deencapsulation.invoke(mockMqtt, \"subscribe\", anyString);"], [120, "                Deencapsulation.invoke(mockMqtt, \"connect\");"], [131, "                Deencapsulation.invoke(mockMqtt, \"connect\");"], [133, "                Deencapsulation.invoke(mockMqtt, \"subscribe\", anyString);"], [147, "                Deencapsulation.invoke(mockMqtt, \"connect\");"], [148, "                Deencapsulation.invoke(mockMqtt, \"subscribe\", anyString);"], [159, "                Deencapsulation.invoke(mockMqtt, \"connect\");"], [161, "                Deencapsulation.invoke(mockMqtt, \"subscribe\", anyString);"], [180, "                Deencapsulation.invoke(mockMqtt, \"disconnect\");"], [192, "                Deencapsulation.invoke(mockMqtt, \"disconnect\");"], [208, "                Deencapsulation.invoke(mockMqtt, \"connect\");"], [209, "                Deencapsulation.invoke(mockMqtt, \"subscribe\", anyString);"], [210, "                Deencapsulation.invoke(mockMqtt, \"disconnect\");"], [223, "                Deencapsulation.invoke(mockMqtt, \"disconnect\");"], [246, "        String retrieveTopic = Deencapsulation.invoke(testMqttMessaging, \"parseTopic\");"], [267, "        String retrieveTopic = Deencapsulation.invoke(testMqttMessaging, \"parseTopic\");"], [285, "        String retrieveTopic = Deencapsulation.invoke(testMqttMessaging, \"parseTopic\");"], [305, "        byte[] retrieveMessage = Deencapsulation.invoke(testMqttMessaging, \"parsePayload\", insertTopic);"], [329, "        byte[] retrieveMessage = Deencapsulation.invoke(testMqttMessaging, \"parsePayload\", insertTopic);"], [346, "        byte[] retrieveMessage = Deencapsulation.invoke(testMqttMessaging, \"parsePayload\", insertTopic);"], [366, "        byte[] retrieveMessage = Deencapsulation.invoke(testMqttMessaging, \"parsePayload\", String.class);"], [386, "        byte[] retrieveMessage = Deencapsulation.invoke(testMqttMessaging, \"parsePayload\", insertTopic_messaging);"], [404, "        byte[] retrieveMessage = Deencapsulation.invoke(testMqttMessaging, \"parsePayload\", insertTopic);"], [420, "                Deencapsulation.invoke(mockMqtt, \"publish\", anyString, messageBody);"], [432, "                Deencapsulation.invoke(mockMqtt, \"publish\", anyString, messageBody);"], [449, "                Deencapsulation.invoke(mockMqtt, \"publish\", anyString, messageBody);"], [463, "                Deencapsulation.invoke(mockMqtt, \"publish\", mockParseTopic,  new byte[1]);"], [486, "                Deencapsulation.invoke(mockMqtt, \"publish\", mockParseTopic,  new byte[1]);"], [514, "                Deencapsulation.invoke(mockMqtt, \"publish\", anyString, messageBody);"], [529, "                Deencapsulation.invoke(mockMqtt, \"publish\", publishTopicWithProperties,  messageBody);"], [558, "                Deencapsulation.invoke(mockMqtt, \"publish\", anyString, messageBody);"], [573, "                Deencapsulation.invoke(mockMqtt, \"publish\", publishTopicWithProperties, messageBody);"]], "deleted": [[5, "package com.microsoft.azure.sdk.iot.device.transport.mqtt;"], [92, "                mockMqtt.connect();"], [93, "                mockMqtt.subscribe(anyString);"], [103, "                mockMqtt.connect();"], [105, "                mockMqtt.subscribe(anyString);"], [107, ""], [119, "                mockMqtt.connect();"], [130, "                mockMqtt.connect();"], [132, "                mockMqtt.subscribe(anyString);"], [146, "                mockMqtt.connect();"], [147, "                mockMqtt.subscribe(anyString);"], [158, "                mockMqtt.connect();"], [160, "                mockMqtt.subscribe(anyString);"], [179, "                mockMqtt.disconnect();"], [191, "                mockMqtt.disconnect();"], [207, "                mockMqtt.connect();"], [208, "                mockMqtt.subscribe(anyString);"], [209, "                mockMqtt.disconnect();"], [222, "                mockMqtt.disconnect();"], [245, "        String retrieveTopic = testMqttMessaging.parseTopic();"], [266, "        String retrieveTopic = testMqttMessaging.parseTopic();"], [284, "        String retrieveTopic = testMqttMessaging.parseTopic();"], [304, "        byte[] retrieveMessage = testMqttMessaging.parsePayload(insertTopic);"], [328, "        byte[] retrieveMessage = testMqttMessaging.parsePayload(insertTopic);"], [345, "        byte[] retrieveMessage = testMqttMessaging.parsePayload(insertTopic);"], [365, "        byte[] retrieveMessage = testMqttMessaging.parsePayload(null);"], [367, ""], [386, "        byte[] retrieveMessage = testMqttMessaging.parsePayload(insertTopic_messaging);"], [404, "        byte[] retrieveMessage = testMqttMessaging.parsePayload(insertTopic);"], [420, "                mockMqtt.publish(anyString, messageBody);"], [421, ""], [433, "                mockMqtt.publish(anyString, messageBody);"], [450, "                mockMqtt.publish(anyString, messageBody);"], [464, "                mockMqtt.publish(mockParseTopic, new byte[1]);"], [487, "                mockMqtt.publish(mockParseTopic, new byte[1]);"], [515, "                mockMqtt.publish(anyString, messageBody);"], [530, "                mockMqtt.publish(publishTopicWithProperties, messageBody);"], [559, "                mockMqtt.publish(anyString, messageBody);"], [574, "                mockMqtt.publish(publishTopicWithProperties, messageBody);"]]}, "num_lines_added": 38, "num_lines_removed": 39}