{"hash": "f9091c922e8fd2f996f3ecf4f79600cbed038f97", "message": "Fix package and folder structure alignment\n\n1. Move tests to tests.unit from devicetwin package\n2. Move service samples to com.microsoft.azure.sdk.iot.samples.service\n3. Move device samples to com.microsoft.azure.sdk.iot.samples.device\n4. Move device twin package from module DeviceTwin to devicetwin on service only", "file_num_lines": 909, "diff_parsed": {"added": [[4, "package tests.unit.com.microsoft.azure.sdk.iot.device.transport.mqtt;"], [10, "import com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt;"], [11, "import com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceTwin;"], [74, "                Deencapsulation.invoke(mockMqtt, \"subscribe\", resTopic);"], [93, "                    Deencapsulation.invoke(mockMqtt, \"subscribe\", resTopic);"], [128, "                Deencapsulation.invoke(mockMqtt, \"unsubscribe\", resTopic);"], [146, "                    Deencapsulation.invoke(mockMqtt, \"unsubscribe\", resTopic);"], [179, "        String parsedTopic = Deencapsulation.invoke(testTwin, \"parseTopic\") ;"], [201, "        String parsedTopic = Deencapsulation.invoke(testTwin, \"parseTopic\") ;"], [219, "        String parsedTopic = Deencapsulation.invoke(testTwin, \"parseTopic\") ;"], [236, "        String parsedTopic = Deencapsulation.invoke(testTwin, \"parseTopic\") ;"], [252, "        byte[] parsedPayload = Deencapsulation.invoke(testTwin, \"parsePayload\", String.class) ;"], [271, "        byte[] parsedPayload = Deencapsulation.invoke(testTwin, \"parsePayload\", resTopic) ;"], [293, "        byte[] parsedPayload = Deencapsulation.invoke(testTwin, \"parsePayload\", notTwinTopic);"], [314, "        byte[] parsedPayload = Deencapsulation.invoke(testTwin, \"parsePayload\", insertTopic);"], [341, "        byte[] parsedPayload = Deencapsulation.invoke(testTwin, \"parsePayload\", insertTopic);"], [383, "                Deencapsulation.invoke(mockMqtt, \"publish\", expectedTopic, actualPayload);"], [430, "                    Deencapsulation.invoke(mockMqtt, \"publish\", expectedTopic, actualPayload);"], [475, "                Deencapsulation.invoke(mockMqtt, \"publish\", expectedTopic, actualPayload);"], [518, "                    Deencapsulation.invoke(mockMqtt, \"publish\", expectedTopic, actualPayload);"], [561, "                Deencapsulation.invoke(mockMqtt, \"subscribe\", expectedTopic);"], [563, "                Deencapsulation.invoke(mockMqtt, \"publish\", expectedTopic, actualPayload);"], [606, "                Deencapsulation.invoke(mockMqtt, \"subscribe\", expectedSubscribeTopic);"], [608, "                Deencapsulation.invoke(mockMqtt, \"publish\", expectedTopic, actualPayload);"], [638, "                    Deencapsulation.invoke(mockMqtt, \"publish\", expectedTopic, actualPayload);"], [679, "                    Deencapsulation.invoke(mockMqtt, \"publish\", expectedTopic, actualPayload);"]], "deleted": [[4, "package com.microsoft.azure.sdk.iot.device.transport.mqtt;"], [72, "                mockMqtt.subscribe(resTopic);"], [91, "                    mockMqtt.subscribe(resTopic);"], [126, "                mockMqtt.unsubscribe(resTopic);"], [144, "                    mockMqtt.unsubscribe(resTopic);"], [177, "        String parsedTopic = testTwin.parseTopic();"], [199, "        String parsedTopic = testTwin.parseTopic();"], [217, "        String parsedTopic = testTwin.parseTopic();"], [234, "        String parsedTopic = testTwin.parseTopic();"], [250, "        byte[] parsedPayload = testTwin.parsePayload(null);"], [269, "        byte[] parsedPayload = testTwin.parsePayload(resTopic);"], [291, "        byte[] parsedPayload = testTwin.parsePayload(notTwinTopic);"], [312, "        byte[] parsedPayload = testTwin.parsePayload(insertTopic);"], [339, "        byte[] parsedPayload = testTwin.parsePayload(insertTopic);"], [381, "                mockMqtt.publish(expectedTopic, actualPayload);"], [428, "                    mockMqtt.publish(expectedTopic, actualPayload);"], [473, "                mockMqtt.publish(expectedTopic, actualPayload);"], [516, "                    mockMqtt.publish(expectedTopic, actualPayload);"], [559, "                mockMqtt.subscribe(expectedTopic);"], [561, "                mockMqtt.publish(expectedTopic, actualPayload);"], [604, "                mockMqtt.subscribe(expectedSubscribeTopic);"], [606, "                mockMqtt.publish(expectedTopic, actualPayload);"], [636, "                    mockMqtt.publish(expectedTopic, actualPayload);"], [677, "                    mockMqtt.publish(expectedTopic, actualPayload);"]]}, "num_lines_added": 26, "num_lines_removed": 24}