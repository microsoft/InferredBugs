{"hash": "93d01c05177cd257d2f57467ebc479e655be9ceb", "message": "Adds performance improvement for RedisRateLimiter (#109)\n\nFixes #108", "file_num_lines": 56, "diff_parsed": {"added": [[24, "import java.util.Objects;"], [25, ""], [26, "import static java.util.concurrent.TimeUnit.SECONDS;"], [27, ""], [43, "        if (Objects.nonNull(limit)) {"], [45, "            Long remaining = calcRemaining(limit, refreshInterval, usage, key, rate);"], [46, "            rate.setRemaining(remaining);"], [53, "        if (Objects.nonNull(quota)) {"], [56, "            Long remaining = calcRemaining(quota, refreshInterval, usage, quotaKey, rate);"], [57, "            rate.setRemainingQuota(remaining);"], [61, "    private Long calcRemaining(Long limit, Long refreshInterval, long usage,"], [62, "                               String key, Rate rate) {"], [63, "        rate.setReset(SECONDS.toMillis(refreshInterval));"], [64, "        Long current = 0L;"], [66, "            current = redisTemplate.opsForValue().increment(key, usage);"], [67, "            // Redis returns 1 when the key is incremented for the first time, and the expiration time is set"], [68, "            if (current != null && current.equals(1L)) {"], [69, "                handleExpiration(key, refreshInterval);"], [72, "            String msg = \"Failed retrieving rate for \" + key + \", will return the current value\";"], [73, "            rateLimiterErrorHandler.handleError(msg, e);"], [74, "        }"], [75, "        return Math.max(-1, limit - current);"], [76, "    }"], [77, ""], [78, "    private void handleExpiration(String key, Long refreshInterval) {"], [79, "        try {"], [80, "            this.redisTemplate.expire(key, refreshInterval, SECONDS);"], [81, "        } catch (RuntimeException e) {"]], "deleted": [[19, "import static java.util.concurrent.TimeUnit.SECONDS;"], [20, ""], [41, "        if (limit != null) {"], [43, "            Long current = 0L;"], [44, "            try {"], [45, "                current = redisTemplate.opsForValue().increment(key, usage);"], [46, "                // Redis returns 1 when the key is incremented for the first time, and the expiration time is set"], [47, "                if (current != null && current.equals(1L)) {"], [48, "                    this.redisTemplate.expire(key, refreshInterval, SECONDS);"], [49, "                }"], [50, "            } catch (RuntimeException e) {"], [51, "                String msg = \"Failed retrieving rate for \" + key + \", will return limit\";"], [52, "                rateLimiterErrorHandler.handleError(msg, e);"], [53, "            }"], [54, "            rate.setRemaining(Math.max(-1, limit - current));"], [61, "        if (quota != null) {"], [63, "            handleExpiration(quotaKey, refreshInterval, rate);"], [65, "            Long current = 0L;"], [66, "            try {"], [67, "                current = this.redisTemplate.boundValueOps(quotaKey).increment(usage);"], [68, "            } catch (RuntimeException e) {"], [69, "                String msg = \"Failed retrieving rate for \" + quotaKey + \", will return quota limit\";"], [70, "                rateLimiterErrorHandler.handleError(msg, e);"], [71, "            }"], [72, "            rate.setRemainingQuota(Math.max(-1, quota - current));"], [76, "    private void handleExpiration(String key, Long refreshInterval, Rate rate) {"], [77, "        Long expire = null;"], [79, "            expire = this.redisTemplate.getExpire(key);"], [80, "            if (expire == null || expire.equals(-1L)) {"], [81, "                this.redisTemplate.expire(key, refreshInterval, SECONDS);"], [82, "                expire = refreshInterval;"], [88, "        rate.setReset(SECONDS.toMillis(expire == null ? 0L : expire));"]]}, "num_lines_added": 28, "num_lines_removed": 32}