    @Override
    protected void calcRemainingLimit(Long limit, Long refreshInterval,
                                      Long requestTime, String key, Rate rate) {
        if (limit != null) {
            long usage = requestTime == null ? 1L : 0L;
            Long current = 0L;
            try {
                current = redisTemplate.opsForValue().increment(key, usage);
                // Redis returns 1 when the key is incremented for the first time, and the expiration time is set
                if (current != null && current.equals(1L)) {
                    this.redisTemplate.expire(key, refreshInterval, SECONDS);
                }
            } catch (RuntimeException e) {
                String msg = "Failed retrieving rate for " + key + ", will return limit";
                rateLimiterErrorHandler.handleError(msg, e);
            }
            rate.setRemaining(Math.max(-1, limit - current));
        }
    }