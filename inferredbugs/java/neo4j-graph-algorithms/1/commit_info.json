{"hash": "d8eeccb3c65a72c4afbb6a1a8a2951442797635d", "message": "RLE variation of prepare weights", "file_num_lines": 307, "diff_parsed": {"added": [[3, "import com.carrotsearch.hppc.LongDoubleHashMap;"], [4, "import com.carrotsearch.hppc.LongDoubleMap;"], [5, "import com.carrotsearch.hppc.LongHashSet;"], [6, "import com.carrotsearch.hppc.LongSet;"], [15, "import org.neo4j.graphdb.Result;"], [235, "    RleWeightedInput[] prepareWeights(GraphDatabaseAPI api, String rawData, Map<String, Object> params, long degreeCutoff, Double skipValue) throws Exception {"], [236, "        Result result = api.execute(rawData, params);"], [237, ""], [238, "        Map<Long, LongDoubleMap> map = new HashMap<>();"], [239, "        LongSet ids = new LongHashSet();"], [240, "        result.accept((Result.ResultVisitor<Exception>) resultRow -> {"], [241, "            long item = resultRow.getNumber(\"item\").longValue();"], [242, "            long id = resultRow.getNumber(\"id\").longValue();"], [243, "            ids.add(id);"], [244, "            double weight = resultRow.getNumber(\"weight\").doubleValue();"], [245, "            map.compute(item, (key, agg) -> {"], [246, "                if (agg == null) agg = new LongDoubleHashMap();"], [247, "                agg.put(id, weight);"], [248, "                return agg;"], [249, "            });"], [250, "            return true;"], [251, "        });"], [252, ""], [253, "        RleWeightedInput[] inputs = new RleWeightedInput[map.size()];"], [256, "        long[] idsArray = ids.toArray();"], [257, "        for (Map.Entry<Long, LongDoubleMap> entry : map.entrySet()) {"], [258, "            Long item = entry.getKey();"], [259, "            LongDoubleMap sparseWeights = entry.getValue();"], [261, "            if (sparseWeights.size() > degreeCutoff) {"], [262, "                List<Number> weightsList = new ArrayList<>(ids.size());"], [263, "                for (long id : idsArray) {"], [264, "                    weightsList.add(sparseWeights.getOrDefault(id, skipValue));"], [265, "                }"], [266, "                int size = weightsList.size();"], [267, "                double[] weights = Weights.buildRleWeights(weightsList, REPEAT_CUTOFF);"], [268, ""], [269, "                inputs[idx++] = skipValue == null ? new RleWeightedInput(item, weights, size) : new RleWeightedInput(item, weights, size, skipValue);"], [272, ""]], "deleted": [[230, "    RleWeightedInput[] prepareRleWeights(List<Map<String, Object>> data, long degreeCutoff, Double skipValue) {"], [231, "        RleWeightedInput[] inputs = new RleWeightedInput[data.size()];"], [233, "        for (Map<String, Object> row : data) {"], [235, "            List<Number> weightList = extractValues(row.get(\"weights\"));"], [237, "            int size = weightList.size();"], [238, "            if (size > degreeCutoff) {"], [239, "                double[] weights = Weights.buildRleWeights(weightList, REPEAT_CUTOFF);"], [240, "                inputs[idx++] = skipValue == null ? new RleWeightedInput((Long) row.get(\"item\"), weights, size) : new RleWeightedInput((Long) row.get(\"item\"), weights, size, skipValue);"]]}, "num_lines_added": 38, "num_lines_removed": 8}