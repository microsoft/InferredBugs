{"hash": "ba01aca0df1dde83376fbbd129fe6e501a6af1ec", "message": "Added building automerges", "file_num_lines": 140, "diff_parsed": {"added": [[31, ""], [32, "\tprivate HashSet<GhprbBuild> builds;"], [33, ""], [51, "\t\tbuilds = new HashSet<GhprbBuild>();"], [86, "\t\tIterator<GhprbBuild> it = builds.iterator();"], [88, "\t\t\tGhprbBuild build = it.next();"], [89, "\t\t\tbuild.check();"], [90, "\t\t\tif(build.isFinished()){"], [107, "\t\tIterator<GhprbBuild> it = builds.iterator();"], [108, "\t\twhile(it.hasNext()){"], [109, "\t\t\tGhprbBuild build  = it.next();"], [110, "\t\t\tif (build.getPullID() == id) {"], [111, "\t\t\t\tif (build.cancel()) {"], [112, "\t\t\t\t\tit.remove();"], [113, "\t\t\t\t\treturn true;"], [114, "\t\t\t\t}"], [117, "\t\treturn false;"], [145, ""], [149, ""], [156, "\t\tbuilds.add(new GhprbBuild(this, id, build, false));"], [157, "\t}"], [158, ""], [159, "\tpublic void startMergeJob(int id){"], [160, "\t\tQueueTaskFuture<?> build = trigger.startJob(new GhprbCause(\"**/pr/1/merge\", id));"], [161, "\t\tif(build == null){"], [162, "\t\t\tSystem.out.println(\"WUUUT?!!\");"], [163, "\t\t\treturn;"], [164, "\t\t}"], [165, "\t\tbuilds.add(new GhprbBuild(this, id, build, true));"]], "deleted": [[4, "import hudson.model.Result;"], [5, "import hudson.model.Run;"], [8, "import java.util.HashMap;"], [13, "import java.util.Map.Entry;"], [35, "\tprivate HashMap<Integer, QueueTaskFuture<?>> queuedBuilds;"], [36, "\tprivate HashMap<Integer, QueueTaskFuture<?>> runningBuilds;"], [37, ""], [55, "\t\tqueuedBuilds = new HashMap<Integer, QueueTaskFuture<?>>();"], [56, "\t\trunningBuilds = new HashMap<Integer, QueueTaskFuture<?>>();"], [91, "\t\tIterator<Entry<Integer, QueueTaskFuture<?>>> it;"], [92, "\t\tit = queuedBuilds.entrySet().iterator();"], [93, "\t\twhile(it.hasNext()){"], [94, "\t\t\tEntry<Integer, QueueTaskFuture<?>> e =it.next();"], [95, "\t\t\tif(e.getValue().getStartCondition().isDone()){"], [96, "\t\t\t\tit.remove();"], [97, "\t\t\t\tAbstractBuild<?,?> build;"], [98, "\t\t\t\ttry {"], [99, "\t\t\t\t\tbuild = (AbstractBuild<?, ?>) e.getValue().getStartCondition().get();"], [100, "\t\t\t\t} catch (Exception ex) {"], [101, "\t\t\t\t\tLogger.getLogger(GhprbRepo.class.getName()).log(Level.SEVERE, null, ex);"], [102, "\t\t\t\t\tcontinue;"], [103, "\t\t\t\t}"], [104, "\t\t\t\tcreateCommitStatus(build, GHCommitState.PENDING, \"Build started\");"], [105, "\t\t\t\trunningBuilds.put(e.getKey(), e.getValue());"], [106, "\t\t\t}"], [107, "\t\t}"], [108, ""], [109, "\t\tit = runningBuilds.entrySet().iterator();"], [111, "\t\t\tEntry<Integer, QueueTaskFuture<?>> e =it.next();"], [112, "\t\t\tif(e.getValue().isDone()){"], [114, "\t\t\t\tAbstractBuild<?,?> build;"], [115, "\t\t\t\ttry {"], [116, "\t\t\t\t\tbuild = (AbstractBuild<?, ?>) e.getValue().get();"], [117, "\t\t\t\t} catch (Exception ex) {"], [118, "\t\t\t\t\tLogger.getLogger(GhprbRepo.class.getName()).log(Level.SEVERE, null, ex);"], [119, "\t\t\t\t\tcontinue;"], [120, "\t\t\t\t}"], [121, "\t\t\t\tGHCommitState state;"], [122, "\t\t\t\tif(build.getResult() == Result.SUCCESS){"], [123, "\t\t\t\t\tstate = GHCommitState.SUCCESS;"], [124, "\t\t\t\t}else{"], [125, "\t\t\t\t\tstate = GHCommitState.FAILURE;"], [126, "\t\t\t\t}"], [127, "\t\t\t\tcreateCommitStatus(build, state, \"Build finished\");"], [128, "\t\t\t\tString publishedURL = trigger.getDescriptor().getPublishedURL();"], [129, "\t\t\t\tif (publishedURL != null && !publishedURL.isEmpty()) {"], [130, "\t\t\t\t\taddComment(e.getKey(), \"Build results will soon be (or already are) available at: \" + publishedURL + build.getUrl());"], [131, "\t\t\t\t}"], [147, "\t\tif(queuedBuilds.containsKey(id)){"], [148, "\t\t\ttry {"], [149, "\t\t\t\tRun<?,?> build = (Run) queuedBuilds.get(id).waitForStart();"], [150, "\t\t\t\tif(build.getExecutor() == null) return false;"], [151, "\t\t\t\tbuild.getExecutor().interrupt();"], [152, "\t\t\t\tqueuedBuilds.remove(id);"], [153, "\t\t\t\treturn true;"], [154, "\t\t\t} catch (Exception ex) {"], [155, "\t\t\t\tLogger.getLogger(GhprbRepo.class.getName()).log(Level.WARNING, null, ex);"], [156, "\t\t\t\treturn false;"], [157, "\t\t\t}"], [158, "\t\t}else if(runningBuilds.containsKey(id)){"], [159, "\t\t\ttry {"], [160, "\t\t\t\tRun<?,?> build = (Run) runningBuilds.get(id).waitForStart();"], [161, "\t\t\t\tif(build.getExecutor() == null) return false;"], [162, "\t\t\t\tbuild.getExecutor().interrupt();"], [163, "\t\t\t\trunningBuilds.remove(id);"], [164, "\t\t\t\treturn true;"], [165, "\t\t\t} catch (Exception ex) {"], [166, "\t\t\t\tLogger.getLogger(GhprbRepo.class.getName()).log(Level.WARNING, null, ex);"], [167, "\t\t\t\treturn false;"], [169, "\t\t}else{"], [170, "\t\t\treturn false;"], [199, ""], [203, ""], [210, "\t\tqueuedBuilds.put(id,build);"], [212, ""]]}, "num_lines_added": 29, "num_lines_removed": 75}