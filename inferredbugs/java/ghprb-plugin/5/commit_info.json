{"hash": "c94ab25c082bd08cf40f544b8ed88f8a739bf953", "message": "Fixing some bugs, and adding test cases.", "file_num_lines": 169, "diff_parsed": {"added": [[14, "import org.kohsuke.github.GitUser;"], [88, ""], [93, ""], [94, "\t\tConcurrentMap<Integer, GhprbPullRequest> pulls = trigger.getDescriptor().getPullRequests(project.getName());"], [95, ""], [96, ""], [97, "\t\tpr = pulls.get(cause.getPullID()).getPullRequest();"], [104, "\t\tBoolean isMergeable = cause.isMerged();"], [105, ""], [106, "\t\thelper = new Ghprb(project, trigger, pulls);"], [107, "\t\thelper.init();"], [109, "\t\tif (isMergeable == null || !isMergeable) {"], [115, ""], [116, "\t\tGHUser triggerSender = cause.getTriggerSender();"], [121, "\t\tif (isOnlyAdminsMerge() && !helper.isAdmin(triggerSender.getLogin())){"], [124, "\t\t\t\t\tnew Object[]{triggerSender.getLogin()});"], [127, "\t    \t\t\t\t\ttriggerSender.getName()));"], [139, "\t    if (isDisallowOwnCode() && isOwnCode(pr, triggerSender)) {"], [144, "\t    \t\t\t\t\ttriggerSender.getName()));"], [149, ""], [150, "\t\t\tpr.merge(getMergeComment());"], [151, "\t    \tlogger.log(Level.INFO, \"Pull request successfully merged\");"], [157, ""], [170, "\t\ttry {"], [171, "\t\t\thelper.getRepository().addComment(pr.getNumber(), comment);"], [172, "\t\t} catch (Exception e) {"], [173, "\t\t\tlogger.log(Level.INFO, \"Failed to add comment\", e);"], [174, "\t\t}"], [178, "\tprivate boolean isOwnCode(GHPullRequest pr, GHUser committer) {"], [180, "\t\t\tString commentorName = committer.getName();"], [190, "\t\t\tlogger.log(Level.INFO, \"Unable to get committer name\");"], [195, "    private GhprbCause getCause(AbstractBuild<?, ?> build) {"], [214, "\t\tpublic FormValidation doCheck(@AncestorInPath AbstractProject<?, ?> project, @QueryParameter String value)"]], "deleted": [[8, ""], [88, ""], [89, "\t\tConcurrentMap<Integer, GhprbPullRequest> pulls = trigger.getDescriptor().getPullRequests(project.getName());"], [90, ""], [91, "\t\thelper = new Ghprb(project, trigger, pulls);"], [92, "\t\thelper.getRepository().init();"], [93, ""], [98, "\t\tpr = helper.getRepository().getPullRequest(cause.getPullID());"], [105, "\t\tBoolean isMergeable = pr.getMergeable();"], [106, "\t\tint counter = 0;"], [107, "\t\twhile (counter++ < 15) {"], [108, "\t\t\tif (isMergeable != null) {"], [109, "\t\t\t\tbreak;"], [110, "\t\t\t}"], [111, "\t\t\ttry {"], [112, "\t\t\t\tlogger.log(Level.INFO, \"Waiting for github to settle so we can check if the PR is mergeable.\");"], [113, "\t\t\t\tThread.sleep(1000);"], [114, "\t\t\t} catch (Exception e) {"], [115, ""], [116, "\t\t\t}"], [117, "\t\t\tisMergeable = pr.getMergeable();"], [118, "\t\t}"], [120, "\t\tif (isMergeable == null || isMergeable) {"], [126, "\t\tGHUser commentor = cause.getTriggerSender();"], [131, "\t\tif (isOnlyAdminsMerge() && !helper.isAdmin(commentor.getLogin())){"], [134, "\t\t\t\t\tnew Object[]{commentor.getLogin()});"], [137, "\t    \t\t\t\t\tcommentor.getName()));"], [147, "\t    \treturn true;"], [150, "\t    if (isDisallowOwnCode() && isOwnCode(pr, commentor)) {"], [155, "\t    \t\t\t\t\tcommentor.getName()));"], [160, "\t    \tpr.merge(getMergeComment());"], [166, ""], [179, "\t\thelper.getRepository().addComment(pr.getNumber(), comment);"], [183, "\tprivate boolean isOwnCode(GHPullRequest pr, GHUser commentor) {"], [185, "\t\t\tString commentorName = commentor.getName();"], [195, "\t\t\te.printStackTrace();"], [200, "    private GhprbCause getCause(AbstractBuild build) {"], [219, "\t\tpublic FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value)"]]}, "num_lines_added": 33, "num_lines_removed": 38}