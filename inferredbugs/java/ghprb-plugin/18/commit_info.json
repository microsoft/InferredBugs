{"hash": "0df575926231e93cb0966ae1b6ba36e2aea31007", "message": "Add sync and move the skipBuild check into tryBuild", "file_num_lines": 483, "diff_parsed": {"added": [[164, "    private void checkSkipBuild() {"], [165, "        synchronized (this) {"], [166, "            String skipBuildPhrase = helper.checkSkipBuild(this.pr);"], [167, "            if (!StringUtils.isEmpty(skipBuildPhrase)) {"], [168, "                logger.log(Level.INFO,"], [169, "                           \"Pull request commented with {0} skipBuildPhrase. Hence skipping the build.\","], [170, "                           skipBuildPhrase);"], [171, "                shouldRun = false;"], [172, "            }"], [280, "        synchronized (this) {"], [281, "            checkSkipBuild();"], [282, "            if (helper.isProjectDisabled()) {"], [283, "                logger.log(Level.FINEST, \"Project is disabled, not trying to build\");"], [284, "                shouldRun = false;"], [285, "                triggered = false;"], [286, "            }"], [287, "            if (helper.ifOnlyTriggerPhrase() && !triggered) {"], [288, "                logger.log(Level.FINEST, \"Trigger only phrase but we are not triggered\");"], [289, "                shouldRun = false;"], [290, "            }"], [291, "            triggered = false; // Once we have decided that we are triggered then the flag should be set to false."], [293, "            if (!isWhiteListedTargetBranch()) {"], [294, "                logger.log(Level.FINEST, \"Branch is not whitelisted, skipping the build\");"], [295, "                return;"], [296, "            }"], [297, "            if (shouldRun) {"], [298, "                shouldRun = false; // Change the shouldRun flag as soon as we decide to build."], [299, "                logger.log(Level.FINEST, \"Running the build\");"], [301, "                if (pr != null) {"], [302, "                    logger.log(Level.FINEST, \"PR is not null, checking if mergable\");"], [303, "                    checkMergeable();"], [304, "                    try {"], [305, "                        for (GHPullRequestCommitDetail commitDetails : pr.listCommits()) {"], [306, "                            if (commitDetails.getSha().equals(getHead())) {"], [307, "                                commitAuthor = commitDetails.getCommit().getCommitter();"], [308, "                                break;"], [309, "                            }"], [311, "                    } catch (Exception ex) {"], [312, "                        logger.log(Level.INFO, \"Unable to get PR commits: \", ex);"], [314, ""], [317, "                logger.log(Level.FINEST, \"Running build...\");"], [318, "                build();"]], "deleted": [[161, "        checkSkipBuild(pr);"], [165, "    private void checkSkipBuild(GHIssue issue) {"], [166, "        String skipBuildPhrase = helper.checkSkipBuild(issue);"], [167, "        if (!StringUtils.isEmpty(skipBuildPhrase)) {"], [168, "            logger.log(Level.INFO,"], [169, "                       \"Pull request commented with {0} skipBuildPhrase. Hence skipping the build.\","], [170, "                       skipBuildPhrase);"], [171, "            shouldRun = false;"], [201, "            checkSkipBuild(comment.getParent());"], [280, "        if (helper.isProjectDisabled()) {"], [281, "            logger.log(Level.FINEST, \"Project is disabled, not trying to build\");"], [282, "            shouldRun = false;"], [283, "            triggered = false;"], [284, "        }"], [285, "        if (helper.ifOnlyTriggerPhrase() && !triggered) {"], [286, "            logger.log(Level.FINEST, \"Trigger only phrase but we are not triggered\");"], [287, "            shouldRun = false;"], [288, "        }"], [289, "        triggered = false; // Once we have decided that we are triggered then the flag should be set to false."], [291, "        if (!isWhiteListedTargetBranch()) {"], [292, "            logger.log(Level.FINEST, \"Branch is not whitelisted, skipping the build\");"], [293, "            return;"], [294, "        }"], [295, "        if (shouldRun) {"], [296, "            shouldRun = false; // Change the shouldRun flag as soon as we decide to build."], [297, "            logger.log(Level.FINEST, \"Running the build\");"], [299, "            if (pr != null) {"], [300, "                logger.log(Level.FINEST, \"PR is not null, checking if mergable\");"], [301, "                checkMergeable();"], [302, "                try {"], [303, "                    for (GHPullRequestCommitDetail commitDetails : pr.listCommits()) {"], [304, "                        if (commitDetails.getSha().equals(getHead())) {"], [305, "                            commitAuthor = commitDetails.getCommit().getCommitter();"], [306, "                            break;"], [309, "                } catch (Exception ex) {"], [310, "                    logger.log(Level.INFO, \"Unable to get PR commits: \", ex);"], [314, ""], [315, "            logger.log(Level.FINEST, \"Running build...\");"], [316, "            build();"]]}, "num_lines_added": 42, "num_lines_removed": 39}