{"hash": "344b138a1a3f832b2861f647a9e73ba7bf3bcbd1", "message": "Return WriteResult after save instead of id", "file_num_lines": 69, "diff_parsed": {"added": [[20, "import com.mongodb.WriteResult;"], [51, "        People people = new People(\"John\", \"22 Wall Street Avenue\");"], [52, "        collection.save(people);"], [55, "        assertThat(people.getId()).isNotNull();"], [61, "        People people = new People(\"John\", \"22 Wall Street Avenue\");"], [63, "        WriteResult writeResult = collection.save(people);"], [65, "        assertThat(writeResult.getLastConcern()).isEqualTo(collection.getDBCollection().getWriteConcern());"], [71, "        People people = new People(\"John\", \"22 Wall Street Avenue\");"], [73, "        WriteResult writeResult = collection.save(people, WriteConcern.SAFE);"], [75, "        assertThat(writeResult.getLastConcern()).isEqualTo(WriteConcern.SAFE);"], [81, "        People john = new People(\"John\", \"21 Jump Street\");"], [82, "        collection.save(john);"], [83, "        john.setAddress(\"new address\");"], [86, "        collection.save(john);"], [89, "        ObjectId johnId = john.getId();"], [90, "        People johnWithNewAddress = collection.findOne(johnId).as(People.class);"], [91, "        assertThat(johnWithNewAddress.getId()).isEqualTo(johnId);"], [92, "        assertThat(johnWithNewAddress.getAddress()).isEqualTo(\"new address\");"], [100, "        collection.save(john);"], [102, "        People result = collection.findOne(new ObjectId(\"47cc67093475061e3d95369d\")).as(People.class);"]], "deleted": [[36, "    private People people;"], [41, "        people = new People(\"John\", \"22 Wall Street Avenue\");"], [52, "        String id = collection.save(people);"], [55, "        assertThat(id).isNotNull();"], [59, "    @Ignore"], [62, "        collection.getDBCollection().setWriteConcern(WriteConcern.JOURNAL_SAFE);"], [63, "        WriteConcern writeConcern = spy(collection.getDBCollection().getWriteConcern());"], [65, "        collection.save(people, writeConcern);"], [67, "        verify(writeConcern).callGetLastError();"], [71, "    @Ignore"], [74, "        WriteConcern writeConcern = spy(WriteConcern.SAFE);"], [75, ""], [76, "        collection.save(people, writeConcern);"], [77, ""], [78, "        verify(writeConcern).callGetLastError();"], [79, "    }"], [80, ""], [81, "    @Test"], [82, "    public void canSavedAnObjectWithAnObjectId() throws Exception {"], [83, ""], [84, "        ObjectId id = new ObjectId();"], [85, "        People john = new People(id, \"John\");"], [87, "        String savedId = collection.save(john);"], [89, "        assertThat(savedId).isEqualTo(id.toString());"], [95, "        String idAsString = collection.save(new People(\"John\", \"21 Jump Street\"));"], [96, "        ObjectId id = new ObjectId(idAsString);"], [97, "        People people = collection.findOne(id).as(People.class);"], [98, "        people.setAddress(\"new address\");"], [101, "        collection.save(people);"], [104, "        people = collection.findOne(id).as(People.class);"], [105, "        assertThat(people.getId()).isEqualTo(id);"], [106, "        assertThat(people.getAddress()).isEqualTo(\"new address\");"], [114, "        String id = collection.save(john);"], [116, "        People result = collection.findOne(new ObjectId(id)).as(People.class);"], [118, "        assertThat(result.getId()).isEqualTo(\"47cc67093475061e3d95369d\");"]]}, "num_lines_added": 20, "num_lines_removed": 35}