{"hash": "8f744d40c6fca740ecba2d84e2b6d16070152354", "message": "Add test about mapping only a field", "file_num_lines": 86, "diff_parsed": {"added": [[22, "import org.jongo.ResultHandler;"], [23, "import org.jongo.bson.BsonDocument;"], [24, "import org.jongo.marshall.Unmarshaller;"], [71, "        Party party = new Party();"], [72, "        party.with(new Friend(\"john\"));"], [73, "        party.with(new Friend(\"peter\"));"], [74, "        collection.save(party);"], [97, "    //https://groups.google.com/forum/?fromgroups#!topic/jongo-user/Nu4J1tK0kAM"], [98, "    public void canSelectOnlyAField() throws Exception {"], [99, ""], [100, "        final Unmarshaller unmarshaller = getMapper().getUnmarshaller();"], [101, "        Party party = new Party();"], [102, "        party.with(new Friend(\"John\"));"], [103, "        party.with(new Friend(\"Peter\"));"], [104, "        party.with(new Friend(\"Robert\"));"], [105, "        collection.save(party);"], [106, ""], [107, "        Friend friend = collection.findOne(\"{friends.name:'Peter'}\").projection(\"{friends.$:1}\").map(new ResultHandler<Friend>() {"], [108, "            public Friend map(DBObject dbo) {"], [109, "                Party result = unmarshaller.unmarshall((BsonDocument) dbo, Party.class);"], [110, "                return result.friends.get(0);"], [111, "            }"], [112, "        });"], [113, ""], [114, "        assertThat(friend.getName()).isEqualTo(\"Peter\");"], [115, "    }"], [116, ""], [117, "    @Test"], [125, "        Party party = collection.findOne().as(Party.class);"], [127, "        assertThat(party.friends).onProperty(\"name\").containsExactly(\"Robert\", \"John\");"], [130, "    private static class Party {"], [133, "        public void with(Friend friend) {"], [134, "            friends.add(friend);"]], "deleted": [[19, "import com.fasterxml.jackson.databind.node.ObjectNode;"], [69, "        Friends friends = new Friends();"], [70, "        friends.add(new Friend(\"john\"));"], [71, "        friends.add(new Friend(\"peter\"));"], [72, "        collection.save(friends);"], [102, "        Friends friends = collection.findOne().as(Friends.class);"], [104, "        assertThat(friends.friends).onProperty(\"name\").containsExactly(\"Robert\", \"John\");"], [107, "    private static class Friends {"], [110, "        public void add(Friend buddy) {"], [111, "            friends.add(buddy);"]]}, "num_lines_added": 33, "num_lines_removed": 10}