{"hash": "09c6762c6a47aeed1d5bd6e48f9473e4b067a6af", "message": "\u5927\u91cf\u6539\u52a8\uff0c\u7248\u672c\u6539\u4e3a0.3.0\uff0c\u540e\u7eed\u5b8c\u5584\u6587\u6863\u3002", "file_num_lines": 297, "diff_parsed": {"added": [[31, "import org.apache.ibatis.builder.annotation.ProviderSqlSource;"], [33, "import org.apache.ibatis.session.Configuration;"], [36, "import java.util.*;"], [61, "     * \u7f13\u5b58\u5df2\u7ecf\u5904\u7406\u8fc7\u7684Collection<MappedStatement>"], [62, "     */"], [63, "    private Set<Collection<MappedStatement>> collectionSet = new HashSet<Collection<MappedStatement>>();"], [64, ""], [65, "    /**"], [66, "     * \u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5"], [67, "     */"], [68, "    public MapperHelper() {"], [69, "    }"], [70, ""], [71, "    /**"], [72, "     * \u5e26\u914d\u7f6e\u7684\u6784\u9020\u65b9\u6cd5"], [73, "     *"], [74, "     * @param properties"], [75, "     */"], [76, "    public MapperHelper(Properties properties) {"], [77, "        setProperties(properties);"], [78, "    }"], [79, ""], [80, "    /**"], [97, "            } else if (method.isAnnotationPresent(InsertProvider.class)) {"], [101, "            } else if (method.isAnnotationPresent(DeleteProvider.class)) {"], [105, "            } else if (method.isAnnotationPresent(UpdateProvider.class)) {"], [142, "    public void registerMapper(Class<?> mapperClass) {"], [144, "            registerMapper.put(mapperClass, fromMapperClass(mapperClass));"], [160, "            throw new RuntimeException(\"\u6ce8\u518c\u901a\u7528Mapper[\" + mapperClass + \"]\u5931\u8d25\uff0c\u627e\u4e0d\u5230\u8be5\u901a\u7528Mapper!\");"], [219, "        private String catalog;"], [220, "        private String schema;"], [225, "    /**"], [226, "     * \u8bbe\u7f6eUUID"], [227, "     * @param UUID"], [228, "     */"], [233, "    /**"], [234, "     * \u8bbe\u7f6e\u4e3b\u952e\u81ea\u589e\u56de\u5199\u65b9\u6cd5\uff0c\u9ed8\u8ba4MYSQL"], [235, "     *"], [236, "     * @param IDENTITY"], [237, "     */"], [247, "    /**"], [248, "     * \u8bbe\u7f6eselectKey\u65b9\u6cd5\u7684ORDER\uff0c\u9ed8\u8ba4AFTER"], [249, "     * @param order"], [250, "     */"], [251, "    public void setOrder(String order) {"], [252, "        config.BEFORE = \"BEFORE\".equalsIgnoreCase(order);"], [253, "    }"], [254, ""], [255, "    /**"], [256, "     * \u8bbe\u7f6e\u5e8f\u5217\u683c\u5f0f\u5316\uff0c\u9ed8\u8ba4\u503c\"{0}.nextval\""], [257, "     *"], [258, "     * @param seqFormat"], [259, "     */"], [264, "    /**"], [265, "     * \u8bbe\u7f6ecatalog\uff0c\u9ed8\u8ba4\"\""], [266, "     *"], [267, "     * @param catalog"], [268, "     */"], [269, "    public void setCatalog(String catalog){"], [270, "        config.catalog = catalog;"], [271, "    }"], [272, ""], [273, "    /**"], [274, "     * \u8bbe\u7f6eschema\uff0c\u9ed8\u8ba4\"\""], [275, "     *"], [276, "     * @param schema"], [277, "     */"], [278, "    public void setSchema(String schema){"], [279, "        config.schema = schema;"], [282, "    /**"], [283, "     * \u83b7\u53d6\u8868\u524d\u7f00\uff0c\u5e26catalog\u6216schema"], [284, "     *"], [285, "     * @return"], [286, "     */"], [287, "    public String getPrefix() {"], [288, "        if (config.catalog != null && config.catalog.length() > 0) {"], [289, "            return config.catalog;"], [290, "        }"], [291, "        if (config.schema != null && config.schema.length() > 0) {"], [292, "            return config.catalog;"], [293, "        }"], [294, "        return \"\";"], [295, "    }"], [296, ""], [297, "    /**"], [298, "     * \u83b7\u53d6UUID\u751f\u6210\u89c4\u5219"], [299, "     *"], [300, "     * @return"], [301, "     */"], [309, "    /**"], [310, "     * \u83b7\u53d6\u4e3b\u952e\u81ea\u589e\u56de\u5199SQL"], [311, "     *"], [312, "     * @return"], [313, "     */"], [322, "    /**"], [323, "     * \u83b7\u53d6SelectKey\u7684Order"], [324, "     *"], [325, "     * @return"], [326, "     */"], [331, "    /**"], [332, "     * \u83b7\u53d6\u5e8f\u5217\u683c\u5f0f\u5316\u6a21\u677f"], [333, "     *"], [334, "     * @return"], [335, "     */"], [336, "    public String getSeqFormat() {"], [344, "     * \u83b7\u53d6\u8868\u540d"], [345, "     *"], [346, "     * @param entityClass"], [347, "     * @return"], [348, "     */"], [349, "    public String getTableName(Class<?> entityClass) {"], [350, "        EntityHelper.EntityTable entityTable = EntityHelper.getEntityTable(entityClass);"], [351, "        String prefix = entityTable.getPrefix();"], [352, "        if (prefix.equals(\"\")) {"], [353, "            //\u4f7f\u7528\u5168\u5c40\u914d\u7f6e"], [354, "            prefix = getPrefix();"], [355, "        }"], [356, "        if (!prefix.equals(\"\")) {"], [357, "            return prefix + \".\" + entityTable.getName();"], [358, "        }"], [359, "        return entityTable.getName();"], [360, "    }"], [361, ""], [362, "    /**"], [412, "            if (mapperTemplate != null) {"], [413, "                mapperTemplate.setSqlSource(ms);"], [414, "            }"], [419, ""], [420, "    /**"], [421, "     * \u914d\u7f6e\u5c5e\u6027"], [422, "     *"], [423, "     * @param properties"], [424, "     */"], [425, "    public void setProperties(Properties properties) {"], [426, "        if (properties == null) {"], [427, "            return;"], [428, "        }"], [429, "        String UUID = properties.getProperty(\"UUID\");"], [430, "        if (UUID != null && UUID.length() > 0) {"], [431, "            setUUID(UUID);"], [432, "        }"], [433, "        String IDENTITY = properties.getProperty(\"IDENTITY\");"], [434, "        if (IDENTITY != null && IDENTITY.length() > 0) {"], [435, "            setIDENTITY(IDENTITY);"], [436, "        }"], [437, "        String seqFormat = properties.getProperty(\"seqFormat\");"], [438, "        if (seqFormat != null && seqFormat.length() > 0) {"], [439, "            setSeqFormat(seqFormat);"], [440, "        }"], [441, "        String catalog = properties.getProperty(\"catalog\");"], [442, "        if (catalog != null && catalog.length() > 0) {"], [443, "            setCatalog(catalog);"], [444, "        }"], [445, "        String schema = properties.getProperty(\"schema\");"], [446, "        if (schema != null && schema.length() > 0) {"], [447, "            setSchema(schema);"], [448, "        }"], [449, "        String ORDER = properties.getProperty(\"ORDER\");"], [450, "        if (ORDER != null && ORDER.length() > 0) {"], [451, "            setOrder(ORDER);"], [452, "        }"], [453, "        //\u6ce8\u518c\u901a\u7528\u63a5\u53e3"], [454, "        String mapper = properties.getProperty(\"mappers\");"], [455, "        if (mapper != null && mapper.length() > 0) {"], [456, "            String[] mappers = mapper.split(\",\");"], [457, "            for (String mapperClass : mappers) {"], [458, "                if (mapperClass.length() > 0) {"], [459, "                    registerMapper(mapperClass);"], [460, "                }"], [461, "            }"], [462, "        }"], [463, "    }"], [464, ""], [465, "    /**"], [466, "     * \u5904\u7406configuration\u4e2d\u5168\u90e8\u7684MappedStatement"], [467, "     *"], [468, "     * @param configuration"], [469, "     */"], [470, "    public void processConfiguration(Configuration configuration) {"], [471, "        Collection<MappedStatement> collection = configuration.getMappedStatements();"], [472, "        //\u9632\u6b62\u53cd\u590d\u5904\u7406\u4e00\u4e2a"], [473, "        if (collectionSet.contains(collection)) {"], [474, "            return;"], [475, "        } else {"], [476, "            collectionSet.add(collection);"], [477, "        }"], [478, "        int size = collection.size();"], [479, "        Iterator iterator = collection.iterator();"], [480, "        while (iterator.hasNext()) {"], [481, "            Object object = iterator.next();"], [482, "            if (object instanceof MappedStatement) {"], [483, "                MappedStatement ms = (MappedStatement) object;"], [484, "                if (isMapperMethod(ms.getId())) {"], [485, "                    if (ms.getSqlSource() instanceof ProviderSqlSource) {"], [486, "                        setSqlSource(ms);"], [487, "                    }"], [488, "                }"], [489, "            }"], [490, "            //\u5904\u7406\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u65b0\u589eselectKey\uff0c\u5bfc\u81f4ms\u589e\u591a\uff0c\u6240\u4ee5\u8fd9\u91cc\u5224\u65ad\u5927\u5c0f\uff0c\u91cd\u65b0\u5faa\u73af"], [491, "            if (collection.size() != size) {"], [492, "                size = collection.size();"], [493, "                iterator = collection.iterator();"], [494, "            }"], [495, "        }"], [496, "    }"]], "deleted": [[34, "import java.util.HashMap;"], [35, "import java.util.HashSet;"], [36, "import java.util.Map;"], [37, "import java.util.Set;"], [78, "            }"], [79, "            else if (method.isAnnotationPresent(InsertProvider.class)) {"], [83, "            }"], [84, "            else if (method.isAnnotationPresent(DeleteProvider.class)) {"], [88, "            }"], [89, "            else if (method.isAnnotationPresent(UpdateProvider.class)) {"], [126, "    public void registerMapper(Class<?> mapperClass)  {"], [128, "            registerMapper.put(mapperClass,fromMapperClass(mapperClass));"], [144, "            throw new RuntimeException(\"\u6ce8\u518c\u901a\u7528Mapper[\"+mapperClass+\"]\u5931\u8d25\uff0c\u627e\u4e0d\u5230\u8be5\u901a\u7528Mapper!\");"], [224, "    public void setBEFORE(String BEFORE) {"], [225, "        config.BEFORE = \"BEFORE\".equalsIgnoreCase(BEFORE);"], [247, "    public String getSeqFormat(){"], [304, "            mapperTemplate.setSqlSource(ms);"]]}, "num_lines_added": 205, "num_lines_removed": 17}