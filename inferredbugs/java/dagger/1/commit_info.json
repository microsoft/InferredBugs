{"hash": "0656b1a9d346099d3138da9d50b20c4efa1486e8", "message": "Add support for multi-bindings, such that any method annotated with Provide AND Element contribute that binding to a set-binding, which builds an injectable set at injection time.\n\nCode generation is disabled explicitly at this point, and will be added in another pull request.", "file_num_lines": 159, "diff_parsed": {"added": [[25, "import java.util.Set;"], [46, "  private static final String SET_PREFIX = Set.class.getName() + \"<\";"], [72, "    if (annotation == null && type instanceof Class && !((Class<?>) type).isArray()) {"], [85, "   * wrapped by {@code Set}, reporting failures against {@code subject}."], [86, "   *"], [87, "   * @param annotations the annotations on a single method, field or parameter."], [88, "   *     This array may contain at most one qualifier annotation."], [89, "   */"], [90, "  public static String getElementKey(Type type, Annotation[] annotations, Object subject) {"], [91, "    Annotation qualifier = extractQualifier(annotations, subject);"], [92, "    type = boxIfPrimitive(type);"], [93, "    StringBuilder result = new StringBuilder();"], [94, "    if (qualifier != null) {"], [95, "      result.append(qualifier).append(\"/\");"], [96, "    }"], [97, "    result.append(SET_PREFIX);"], [98, "    typeToString(type, result);"], [99, "    result.append(\">\");"], [100, "    return result.toString();"], [101, "  }"], [102, ""], [103, "  /**"], [104, "   * Returns a key for {@code type} annotated with {@code annotations},"], [111, "    return get(type, extractQualifier(annotations, subject));"], [112, "  }"], [113, ""], [114, "  /**"], [115, "   * Validates that among {@code annotations} there exists only one annotation which is, itself"], [116, "   * qualified by {@code \\@Qualifier}"], [117, "   */"], [118, "  private static Annotation extractQualifier(Annotation[] annotations,"], [119, "      Object subject) {"], [130, "    return qualifier;"]], "deleted": [[70, "    if (annotation == null"], [71, "        && type instanceof Class"], [72, "        && !((Class<?>) type).isArray()) {"], [75, ""], [102, "    return get(type, qualifier);"]]}, "num_lines_added": 33, "num_lines_removed": 5}