    void dfs(int k, int node, float score,
             PriorityQueue<Pair> heap,
             Vector hidden) {
        if (heap.size() == k && score < heap.peek().first) {
            return;
        }

        if (tree[node].left == -1 && tree[node].right == -1) {
            heap.add(new Pair(score, node));
            if (heap.size() > k) {
                heap.remove();
            }
            return;
        }

        float f = sigmoid(wo_.dotRow(hidden, node - osz_));
        dfs(k, tree[node].left, score + log(1.0f - f), heap, hidden);
        dfs(k, tree[node].right, score + log(f), heap, hidden);
    }