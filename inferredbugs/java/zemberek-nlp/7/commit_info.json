{"hash": "61d8894d928bffea7d69f084ff6e78ffa2f737d2", "message": "fixes in fasttext", "file_num_lines": 328, "diff_parsed": {"added": [[29, "            // descending."], [30, "            return Float.compare(o.first, first);"], [87, "    private float binaryLogistic(int target, boolean label, float lr) {"], [101, "    private float negativeSampling(int target, float lr) {"], [115, "    private float hierarchicalSoftmax(int target, float lr) {"], [126, "    private void computeOutputSoftmax(Vector hidden, Vector output) {"], [141, "    private void computeOutputSoftmax() {"], [145, "    private float softmax(int target, float lr) {"], [159, "    private void computeHidden(int[] input, Vector hidden) {"], [169, "    private static final Comparator<Pair> PAIR_COMPARATOR ="], [170, "            (l, r) -> l.first > r.first ? 1 : 0;"], [171, ""], [172, "    List<Pair> predict(int[] input,"], [173, "                 int k,"], [174, "                 Vector hidden,"], [175, "                 Vector output) {"], [178, "        PriorityQueue<Pair> heap = new PriorityQueue<>(k+1, PAIR_COMPARATOR);"], [184, "        List<Pair> result = new ArrayList<>(heap);"], [185, "        Collections.sort(result);"], [186, "        return  result;"], [189, "    List<Pair> predict(int[] input, int k) {"], [190, "        return predict(input, k, hidden_, output_);"], [193, "    private void findKBest(int k,"], [194, "                           PriorityQueue<Pair> heap,"], [195, "                           Vector hidden,"], [196, "                           Vector output) {"], [210, "    private void dfs(int k,"], [211, "                     int node,"], [212, "                     float score,"], [213, "                     PriorityQueue<Pair> heap,"], [214, "                     Vector hidden) {"], [267, "    private void initTableNegatives(long[] counts) {"], [283, "    private int getNegative(int target) {"], [292, "    private void buildTree(long[] counts) {"], [340, "    private static void initSigmoid() {"], [348, "    private static void initLog() {"], [356, "    private float log(float x) {"], [364, "    private float sigmoid(float x) {"]], "deleted": [[29, "            //TODO: check below"], [30, "            return Float.compare(this.first, o.first);"], [87, "    float binaryLogistic(int target, boolean label, float lr) {"], [101, "    float negativeSampling(int target, float lr) {"], [115, "    float hierarchicalSoftmax(int target, float lr) {"], [126, "    void computeOutputSoftmax(Vector hidden, Vector output) {"], [141, "    void computeOutputSoftmax() {"], [145, "    float softmax(int target, float lr) {"], [159, "    void computeHidden(int[] input, Vector hidden) {"], [169, "    void predict(int[] input, int k,"], [170, "                 PriorityQueue<Pair> heap,"], [171, "                 Vector hidden, Vector output) {"], [173, "        //heap.reserve(k + 1);"], [180, "        // TODO: write below if necessary."], [181, "        //std::sort_heap(heap.begin(), heap.end(), comparePairs);"], [184, "    void predict(int[] input, int k,"], [185, "                 PriorityQueue<Pair> heap) {"], [186, "        predict(input, k, heap, hidden_, output_);"], [189, "    void findKBest(int k, PriorityQueue<Pair> heap,"], [190, "                   Vector hidden, Vector output) {"], [204, "    void dfs(int k, int node, float score,"], [205, "             PriorityQueue<Pair> heap,"], [206, "             Vector hidden) {"], [259, ""], [260, "    void initTableNegatives(long[] counts) {"], [276, "    int getNegative(int target) {"], [285, "    void buildTree(long[] counts) {"], [333, "    static void initSigmoid() {"], [341, "    static void initLog() {"], [349, "    float log(float x) {"], [357, "    float sigmoid(float x) {"]]}, "num_lines_added": 38, "num_lines_removed": 31}