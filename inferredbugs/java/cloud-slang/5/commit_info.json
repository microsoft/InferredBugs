{"hash": "c3eb1eebd6437c5d824a79dac646aba116e4258a", "message": "make ForLoopStatement abstract\n\nSigned-off-by: Bonczidai Levente <levente.bonczidai@hp.com>", "file_num_lines": 133, "diff_parsed": {"added": [[8, "import org.openscore.lang.entities.ListForLoopStatement;"], [9, "import org.openscore.lang.entities.MapForLoopStatement;"], [18, "    public static ListForLoopStatement validateListForLoopStatement(ForLoopStatement statement) {"], [19, "        Assert.assertEquals(true, statement instanceof ListForLoopStatement);"], [20, "        return (ListForLoopStatement) statement;"], [21, "    }"], [22, ""], [23, "    public static MapForLoopStatement validateMapForLoopStatement(ForLoopStatement statement) {"], [24, "        Assert.assertEquals(true, statement instanceof MapForLoopStatement);"], [25, "        return (MapForLoopStatement) statement;"], [26, "    }"], [27, ""], [31, "        ListForLoopStatement listForLoopStatement  = validateListForLoopStatement(statement);"], [32, "        Assert.assertEquals(\"x\", listForLoopStatement.getVarName());"], [33, "        Assert.assertEquals(\"collection\", listForLoopStatement.getCollectionExpression());"], [39, "        ListForLoopStatement listForLoopStatement  = validateListForLoopStatement(statement);"], [40, "        Assert.assertEquals(\"x\", listForLoopStatement.getVarName());"], [41, "        Assert.assertEquals(\"range(0, 9)\", listForLoopStatement.getCollectionExpression());"], [47, "        ListForLoopStatement listForLoopStatement  = validateListForLoopStatement(statement);"], [48, "        Assert.assertEquals(\"min\", listForLoopStatement.getVarName());"], [49, "        Assert.assertEquals(\"collection\", listForLoopStatement.getCollectionExpression());"], [77, "        ListForLoopStatement listForLoopStatement  = validateListForLoopStatement(statement);"], [78, "        Assert.assertEquals(\"in\", listForLoopStatement.getCollectionExpression());"], [90, "        MapForLoopStatement mapForLoopStatement  = validateMapForLoopStatement(statement);"], [91, "        Assert.assertEquals(\"k\", mapForLoopStatement.getKeyName());"], [92, "        Assert.assertEquals(\"v\", mapForLoopStatement.getValueName());"], [99, "        MapForLoopStatement mapForLoopStatement  = validateMapForLoopStatement(statement);"], [100, "        Assert.assertEquals(\"k\", mapForLoopStatement.getKeyName());"], [101, "        Assert.assertEquals(\"v\", mapForLoopStatement.getValueName());"], [108, "        MapForLoopStatement mapForLoopStatement  = validateMapForLoopStatement(statement);"], [109, "        Assert.assertEquals(\"k\", mapForLoopStatement.getKeyName());"], [110, "        Assert.assertEquals(\"v\", mapForLoopStatement.getValueName());"], [117, "        MapForLoopStatement mapForLoopStatement  = validateMapForLoopStatement(statement);"], [118, "        Assert.assertEquals(\"k\", mapForLoopStatement.getKeyName());"], [119, "        Assert.assertEquals(\"v\", mapForLoopStatement.getValueName());"], [126, "        MapForLoopStatement mapForLoopStatement  = validateMapForLoopStatement(statement);"], [127, "        Assert.assertEquals(\"k\", mapForLoopStatement.getKeyName());"], [128, "        Assert.assertEquals(\"v\", mapForLoopStatement.getValueName());"], [135, "        MapForLoopStatement mapForLoopStatement  = validateMapForLoopStatement(statement);"], [136, "        Assert.assertEquals(\"k\", mapForLoopStatement.getKeyName());"], [137, "        Assert.assertEquals(\"v\", mapForLoopStatement.getValueName());"]], "deleted": [[8, ""], [9, "import java.io.Serializable;"], [21, "        Assert.assertEquals(ForLoopStatement.Type.LIST, statement.getType());"], [22, "        Assert.assertEquals(\"x\", statement.getVarName());"], [23, "        Assert.assertEquals(\"collection\", statement.getCollectionExpression());"], [29, "        Assert.assertEquals(ForLoopStatement.Type.LIST, statement.getType());"], [30, "        Assert.assertEquals(\"x\", statement.getVarName());"], [31, "        Assert.assertEquals(\"range(0, 9)\", statement.getCollectionExpression());"], [37, "        Assert.assertEquals(ForLoopStatement.Type.LIST, statement.getType());"], [38, "        Assert.assertEquals(\"min\", statement.getVarName());"], [39, "        Assert.assertEquals(\"collection\", statement.getCollectionExpression());"], [67, "        Assert.assertEquals(\"in\", statement.getVarName());"], [68, "        Assert.assertEquals(\"in\", statement.getCollectionExpression());"], [80, "        Assert.assertEquals(ForLoopStatement.Type.MAP, statement.getType());"], [81, "        Assert.assertEquals(\"k v\", statement.getVarName());"], [88, "        Assert.assertEquals(ForLoopStatement.Type.MAP, statement.getType());"], [89, "        Assert.assertEquals(\"k v\", statement.getVarName());"], [96, "        Assert.assertEquals(ForLoopStatement.Type.MAP, statement.getType());"], [97, "        Assert.assertEquals(\"k v\", statement.getVarName());"], [104, "        Assert.assertEquals(ForLoopStatement.Type.MAP, statement.getType());"], [105, "        Assert.assertEquals(\"k v\", statement.getVarName());"], [112, "        Assert.assertEquals(ForLoopStatement.Type.MAP, statement.getType());"], [113, "        Assert.assertEquals(\"k v\", statement.getVarName());"], [120, "        Assert.assertEquals(ForLoopStatement.Type.MAP, statement.getType());"], [121, "        Assert.assertEquals(\"k v\", statement.getVarName());"]]}, "num_lines_added": 41, "num_lines_removed": 25}