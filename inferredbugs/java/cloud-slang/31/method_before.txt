    public List<Value> bindAsyncLoopList(
            AsyncLoopStatement asyncLoopStatement,
            Context flowContext,
            Set<SystemProperty> systemProperties,
            String nodeName) {
        Validate.notNull(asyncLoopStatement, "async loop statement cannot be null");
        Validate.notNull(flowContext, "flow context cannot be null");
        Validate.notNull(systemProperties, "system properties cannot be null");
        Validate.notNull(nodeName, "node name cannot be null");

        List<Value> result = new ArrayList<>();
        try {
            Value evalResult = scriptEvaluator.evalExpr(asyncLoopStatement.getExpression(), flowContext.getImmutableViewOfVariables(), systemProperties);
            if (evalResult.get() != null) {
                //noinspection unchecked
                for (Serializable serializable : ((List<Serializable>)evalResult.get())) {
                    Value value = serializable instanceof Value ? (Value)serializable : ValueFactory.create(serializable, evalResult.isSensitive());
                    result.add(value);
                }
            }
        } catch (Throwable t) {
            throw new RuntimeException(generateAsyncLoopExpressionMessage(nodeName, t.getMessage()), t);
        }
        if (CollectionUtils.isEmpty(result)) {
            throw new RuntimeException(generateAsyncLoopExpressionMessage(nodeName, "expression is empty"));
        }
        return result;
    }