{"hash": "f32bc012a1fcf265956b44b73f7f1bb787778833", "message": "- Fix conditions of failed tests in case of exception\n- Fix exception event from Action runtime\n\nSigned-off-by: Orit Stone <orit.stone@hp.com>", "file_num_lines": 141, "diff_parsed": {"added": [[165, "        if (BooleanUtils.isTrue(testCase.getThrowsException())) {"], [166, "            if(StringUtils.isBlank(errorMessageFlowExecution)) {"], [167, "                throw new RuntimeException(\"Failed test: \" + testCaseName + \" - \" + testCase.getDescription() + \"\\nFlow \" + compilationArtifact.getExecutionPlan().getName() +\" did not throw an exception as expected\");"], [168, "            }"], [169, "            return executionId;"], [171, ""], [172, "        if(StringUtils.isNotBlank(errorMessageFlowExecution)){"], [177, "        if (result != null && !result.equals(executionResult)){"]], "deleted": [[165, "        if(StringUtils.isBlank(errorMessageFlowExecution) && BooleanUtils.isTrue(testCase.getThrowsException())){"], [166, "            throw new RuntimeException(\"Failed test: \" + testCaseName + \" - \" + testCase.getDescription() + \"\\nFlow \" + compilationArtifact.getExecutionPlan().getName() +\" did not throw an exception as expected\");"], [168, "        if(StringUtils.isNotBlank(errorMessageFlowExecution) && BooleanUtils.isFalse(testCase.getThrowsException())){"], [173, "        if (result != null && !executionResult.equals(result)){"]]}, "num_lines_added": 8, "num_lines_removed": 4}