{"hash": "ff4b46d63d75b69043589300be130fda09692f3f", "message": "split method\n\nSigned-off-by: Bonczidai Levente <levente.bonczidai@hp.com>", "file_num_lines": 202, "diff_parsed": {"added": [[130, "            collectBranchesData(runEnv, executionRuntimeServices, nodeName, branchesContext, branchesResult);"], [132, "            Map<String, Serializable> publishValues ="], [133, "                    bindAggregateOutputs("], [134, "                            runEnv,"], [135, "                            executionRuntimeServices,"], [136, "                            taskAggregateValues,"], [137, "                            (Serializable) taskNavigationValues,"], [138, "                            nodeName, (Serializable) branchesContext,"], [139, "                            contextBeforeSplit"], [140, "                    );"], [142, "            flowContext.putVariables(publishValues);"], [144, "            String asyncLoopResult = getAsyncLoopResult(branchesResult);"], [146, "            handleNavigationAndReturnValues(runEnv, executionRuntimeServices, taskNavigationValues, nodeName, publishValues, asyncLoopResult);"], [148, "            runEnv.getStack().pushContext(flowContext);"], [149, "        } catch (RuntimeException e) {"], [150, "            logger.error(\"There was an error running the end task execution step of: \\'\" + nodeName + \"\\'. Error is: \" + e.getMessage());"], [151, "            throw new RuntimeException(\"Error running: \\'\" + nodeName + \"\\': \" + e.getMessage(), e);"], [152, "        }"], [153, "    }"], [155, "    private void handleNavigationAndReturnValues("], [156, "            RunEnvironment runEnv,"], [157, "            ExecutionRuntimeServices executionRuntimeServices,"], [158, "            Map<String, ResultNavigation> taskNavigationValues,"], [159, "            String nodeName,"], [160, "            Map<String, Serializable> publishValues,"], [161, "            String asyncLoopResult) {"], [162, "        // set the position of the next step - for the use of the navigation"], [163, "        // find in the navigation values the correct next step position, according to the async loop result, and set it"], [164, "        ResultNavigation navigation = taskNavigationValues.get(asyncLoopResult);"], [165, "        if (navigation == null) {"], [166, "            // should always have the executable response mapped to a navigation by the task, if not, it is an error"], [167, "            throw new RuntimeException(\"Task: \" + nodeName + \" has no matching navigation for the async loop result: \" + asyncLoopResult);"], [168, "        }"], [169, "        Long nextStepPosition = navigation.getNextStepId();"], [170, "        String presetResult = navigation.getPresetResult();"], [171, ""], [172, "        HashMap<String, Serializable> outputs = new HashMap<>(publishValues);"], [173, "        ReturnValues returnValues = new ReturnValues(outputs, presetResult != null ? presetResult : asyncLoopResult);"], [174, ""], [175, "        fireEvent("], [176, "                executionRuntimeServices,"], [177, "                runEnv,"], [178, "                ScoreLangConstants.EVENT_ASYNC_LOOP_OUTPUT_END,"], [179, "                \"Async loop output binding finished\","], [180, "                Pair.of(LanguageEventData.OUTPUTS, (Serializable) publishValues),"], [181, "                Pair.of(LanguageEventData.RESULT, returnValues.getResult()),"], [182, "                Pair.of(LanguageEventData.NEXT_STEP_POSITION, nextStepPosition),"], [183, "                Pair.of(LanguageEventData.levelName.TASK_NAME.name(), nodeName));"], [184, ""], [185, "        runEnv.putReturnValues(returnValues);"], [186, "        runEnv.putNextStepPosition(nextStepPosition);"], [187, "    }"], [189, "    private String getAsyncLoopResult(List<String> branchesResult) {"], [190, "        // if one of the branches failed then return with FAILURE, otherwise return with SUCCESS"], [191, "        String asyncLoopResult = ScoreLangConstants.SUCCESS_RESULT;"], [192, "        for (String branchResult : branchesResult) {"], [193, "            if (branchResult.equals(ScoreLangConstants.FAILURE_RESULT)) {"], [194, "                asyncLoopResult = ScoreLangConstants.FAILURE_RESULT;"], [195, "                break;"], [196, "            }"], [197, "        }"], [198, "        return asyncLoopResult;"], [199, "    }"], [201, "    private Map<String, Serializable> bindAggregateOutputs("], [202, "            RunEnvironment runEnv,"], [203, "            ExecutionRuntimeServices executionRuntimeServices,"], [204, "            List<Output> taskAggregateValues,"], [205, "            Serializable taskNavigationValues,"], [206, "            String nodeName, Serializable branchesContext,"], [207, "            Map<String, Serializable> contextBeforeSplit) {"], [208, ""], [209, "        Map<String, Serializable> aggregateContext = new HashMap<>();"], [210, "        aggregateContext.put(RuntimeConstants.BRANCHES_CONTEXT_KEY, branchesContext);"], [211, ""], [212, "        fireEvent("], [213, "                executionRuntimeServices,"], [214, "                runEnv,"], [215, "                ScoreLangConstants.EVENT_ASYNC_LOOP_OUTPUT_START,"], [216, "                \"Async loop output binding started\","], [217, "                Pair.of(ScoreLangConstants.TASK_AGGREGATE_KEY, (Serializable) taskAggregateValues),"], [218, "                Pair.of(ScoreLangConstants.TASK_NAVIGATION_KEY, taskNavigationValues),"], [219, "                Pair.of(LanguageEventData.levelName.TASK_NAME.name(), nodeName));"], [220, ""], [221, "        return outputsBinding.bindOutputs(contextBeforeSplit, aggregateContext, taskAggregateValues);"], [222, "    }"], [224, "    private void collectBranchesData("], [225, "            RunEnvironment runEnv,"], [226, "            ExecutionRuntimeServices executionRuntimeServices,"], [227, "            String nodeName,"], [228, "            List<Map<String, Serializable>> branchesContext,"], [229, "            List<String> branchesResult) {"], [231, "        List<EndBranchDataContainer> branches = executionRuntimeServices.getFinishedChildBranchesData();"], [232, "        for (EndBranchDataContainer branch : branches) {"], [233, "            Map<String, Serializable> branchContext = branch.getContexts();"], [234, ""], [235, "            RunEnvironment branchRuntimeEnvironment = (RunEnvironment) branchContext.get(ScoreLangConstants.RUN_ENV);"], [237, "            branchesContext.add(branchRuntimeEnvironment.getStack().popContext().getImmutableViewOfVariables());"], [238, ""], [239, "            ReturnValues executableReturnValues = branchRuntimeEnvironment.removeReturnValues();"], [240, "            branchesResult.add(executableReturnValues.getResult());"], [245, "                    ScoreLangConstants.EVENT_BRANCH_END,"], [246, "                    \"async loop branch ended\","], [247, "                    Pair.of(RuntimeConstants.BRANCH_RETURN_VALUES_KEY, executableReturnValues),"], [248, "                    Pair.of(LanguageEventData.levelName.TASK_NAME.name(), nodeName)"], [249, "            );"]], "deleted": [[125, "            List<EndBranchDataContainer> branches = executionRuntimeServices.getFinishedChildBranchesData();"], [131, "            for (EndBranchDataContainer branch : branches) {"], [132, "                Map<String, Serializable> branchContext = branch.getContexts();"], [134, "                RunEnvironment branchRuntimeEnvironment = (RunEnvironment) branchContext.get(ScoreLangConstants.RUN_ENV);"], [136, "                branchesContext.add(branchRuntimeEnvironment.getStack().popContext().getImmutableViewOfVariables());"], [138, "                ReturnValues executableReturnValues = branchRuntimeEnvironment.removeReturnValues();"], [139, "                branchesResult.add(executableReturnValues.getResult());"], [141, "                fireEvent("], [142, "                        executionRuntimeServices,"], [143, "                        runEnv,"], [144, "                        ScoreLangConstants.EVENT_BRANCH_END,"], [145, "                        \"async loop branch ended\","], [146, "                        Pair.of(RuntimeConstants.BRANCH_RETURN_VALUES_KEY, executableReturnValues),"], [147, "                        Pair.of(LanguageEventData.levelName.TASK_NAME.name(), nodeName)"], [148, "                );"], [149, "            }"], [151, "            Map<String, Serializable> aggregateContext = new HashMap<>();"], [152, "            aggregateContext.put(RuntimeConstants.BRANCHES_CONTEXT_KEY, (Serializable) branchesContext);"], [154, "            fireEvent("], [155, "                    executionRuntimeServices,"], [156, "                    runEnv,"], [157, "                    ScoreLangConstants.EVENT_ASYNC_LOOP_OUTPUT_START,"], [158, "                    \"Async loop output binding started\","], [159, "                    Pair.of(ScoreLangConstants.TASK_AGGREGATE_KEY, (Serializable) taskAggregateValues),"], [160, "                    Pair.of(ScoreLangConstants.TASK_NAVIGATION_KEY, (Serializable) taskNavigationValues),"], [161, "                    Pair.of(LanguageEventData.levelName.TASK_NAME.name(), nodeName));"], [163, "            Map<String, Serializable> publishValues = outputsBinding.bindOutputs(contextBeforeSplit, aggregateContext, taskAggregateValues);"], [165, "            flowContext.putVariables(publishValues);"], [167, "            // if one of the branches failed then return with FAILURE, otherwise return with SUCCESS"], [168, "            String asyncLoopResult = ScoreLangConstants.SUCCESS_RESULT;"], [169, "            for (String branchResult : branchesResult) {"], [170, "                if (branchResult.equals(ScoreLangConstants.FAILURE_RESULT)) {"], [171, "                    asyncLoopResult = ScoreLangConstants.FAILURE_RESULT;"], [172, "                    break;"], [173, "                }"], [174, "            }"], [176, "            // set the position of the next step - for the use of the navigation"], [177, "            // find in the navigation values the correct next step position, according to the async loop result, and set it"], [178, "            ResultNavigation navigation = taskNavigationValues.get(asyncLoopResult);"], [179, "            if (navigation == null) {"], [180, "                // should always have the executable response mapped to a navigation by the task, if not, it is an error"], [181, "                throw new RuntimeException(\"Task: \" + nodeName + \" has no matching navigation for the async loop result: \" + asyncLoopResult);"], [182, "            }"], [183, "            Long nextStepPosition = navigation.getNextStepId();"], [184, "            String presetResult = navigation.getPresetResult();"], [186, "            HashMap<String, Serializable> outputs = new HashMap<>(publishValues);"], [187, "            ReturnValues returnValues = new ReturnValues(outputs, presetResult != null ? presetResult : asyncLoopResult);"], [192, "                    ScoreLangConstants.EVENT_ASYNC_LOOP_OUTPUT_END,"], [193, "                    \"Async loop output binding finished\","], [194, "                    Pair.of(LanguageEventData.OUTPUTS, (Serializable) publishValues),"], [195, "                    Pair.of(LanguageEventData.RESULT, returnValues.getResult()),"], [196, "                    Pair.of(LanguageEventData.NEXT_STEP_POSITION, nextStepPosition),"], [197, "                    Pair.of(LanguageEventData.levelName.TASK_NAME.name(), nodeName));"], [198, ""], [199, "            runEnv.getStack().pushContext(flowContext);"], [200, "            runEnv.putReturnValues(returnValues);"], [201, "            runEnv.putNextStepPosition(nextStepPosition);"], [202, "        } catch (RuntimeException e) {"], [203, "            logger.error(\"There was an error running the end task execution step of: \\'\" + nodeName + \"\\'. Error is: \" + e.getMessage());"], [204, "            throw new RuntimeException(\"Error running: \\'\" + nodeName + \"\\': \" + e.getMessage(), e);"]]}, "num_lines_added": 105, "num_lines_removed": 60}