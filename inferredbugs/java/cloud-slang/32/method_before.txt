    private List<RuntimeException> validateModelWithDependencies(
            Executable executable,
            Map<String, Executable> dependencies,
            Set<Executable> verifiedExecutables,
            List<RuntimeException> errors) {
        //validate that all required & non private parameters with no default value of a reference are provided
        if(!SlangTextualKeys.FLOW_TYPE.equals(executable.getType()) || verifiedExecutables.contains(executable)){
            return errors;
        }
        verifiedExecutables.add(executable);

        Flow flow = (Flow) executable;
        Collection<Step> steps = flow.getWorkflow().getSteps();
        Set<Executable> flowReferences = new HashSet<>();

        for (Step step : steps) {
            String refId = step.getRefId();
            Executable reference = dependencies.get(refId);
            List<String> mandatoryInputNames = getMandatoryInputNames(reference);
            List<String> stepInputNames = getStepInputNames(step);
            List<String> inputsNotWired = getInputsNotWired(mandatoryInputNames, stepInputNames);

            try {
                validateInputNamesEmpty(inputsNotWired, flow, step, reference);
                validateStepInputNamesDifferentFromDependencyOutputNames(flow, step, reference);
                validateDependenciesResultsHaveMatchingNavigations(executable, refId, step, reference);
            } catch (RuntimeException e) {
                errors.add(e);
            }

            flowReferences.add(reference);
        }

        for (Executable reference : flowReferences) {
            validateModelWithDependencies(reference, dependencies, verifiedExecutables, errors);
        }
        return errors;
    }