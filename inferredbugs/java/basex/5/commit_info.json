{"hash": "328737b5e085be6f56d0b5efe0535df1cd028c08", "message": "Simplified IndexIterator: no more(), only size() & next()", "file_num_lines": 242, "diff_parsed": {"added": [[191, "   * Creates an index iterator for all pre/pos values."], [192, "   * @param p pointer of pre/pos data"], [193, "   * @param s number of pre values"], [212, "    final int s = it.size();"], [213, "    final int[] pre = new int[s];"], [214, "    final int[] pos = new int[s];"], [215, "    for(int i = 0; i < s; i++) pre[i] = it.next();"], [216, "    for(int i = 0; i < s; i++) pos[i] = it.next();"], [217, "    return new int[][] { pre, pos };"], [236, "    int dif = Math.abs(tok.length - ts);"], [240, "      dif = Math.abs(tok.length - ts);"], [262, "      dif = Math.abs(tok.length - ts);"], [264, "    return new IndexArrayIterator(ft);"], [274, "    if(p == -1) return IndexIterator.EMPTY;"], [328, "    return new IndexArrayIterator(ids, c);"], [397, ""], [398, "      return new IndexArrayIterator(dt);"]], "deleted": [[11, "import org.basex.util.Array;"], [13, "import org.basex.util.IntList;"], [193, "   * Reads the ftdata from disk."], [194, "   * @param p pointer of ftdata"], [195, "   * @param s size of pre values"], [199, "    final boolean cmp = data.meta.fcompress;"], [200, "    final int[][] d = {"], [201, "        cmp ? dat.readNums(p, s) : dat.readInts(p, p + s * 4L),"], [202, "        cmp ? dat.readNums(s) : dat.readInts(p + s * 4L, p + 2 * s * 4L)"], [203, "    };"], [204, ""], [205, "    return new IndexIterator() {"], [206, "      /** Counter. */"], [207, "      private int c = -1;"], [208, "      /** Pre value flag. */"], [209, "      private boolean pre;"], [210, ""], [211, "      @Override"], [212, "      public boolean more() {"], [213, "        return ++c < s;"], [214, "      }"], [215, "      @Override"], [216, "      public int next() {"], [217, "        return d[(pre ^= true) ? 0 : 1][c];"], [218, "      }"], [219, "      @Override"], [220, "      public int size() {"], [221, "        return s;"], [222, "      }"], [223, "    };"], [224, "  }"], [225, ""], [226, "  /*"], [227, "  private IndexIterator getData(final long p, final int s) {"], [230, "      /* Counter."], [231, "      private int c = -1;"], [232, "      @Override"], [233, "      public boolean more() { return ++c < s; }"], [240, "  */"], [248, "    final IntList pre = new IntList();"], [249, "    final IntList pos = new IntList();"], [250, "    while(it.more()) {"], [251, "      pre.add(it.next());"], [252, "      pos.add(it.next());"], [253, "    }"], [254, "    return new int[][] { pre.finish(), pos.finish() };"], [269, "    int dif;"], [270, ""], [275, "    dif = (tok.length - ts < 0) ?"], [276, "        ts - tok.length : tok.length - ts;"], [280, "      dif = (tok.length - ts < 0) ?"], [281, "          ts - tok.length : tok.length - ts;"], [283, ""], [304, "      dif = (tok.length - ts < 0) ?"], [305, "          ts - tok.length : tok.length - ts;"], [307, "    return new IndexArrayIterator(ft[0], ft[1]);"], [317, "    if (p == -1) return IndexIterator.EMPTY;"], [344, "    if(!ii.more()) return ii;"], [345, ""], [346, "    // cache iterator results (temporary...)"], [374, "    return new IndexArrayIterator("], [375, "        Array.finish(ids[0], c), Array.finish(ids[1], c));"], [435, "        //System.out.println(new String(dtok));"], [439, "        // b[0][1] += b[0][0] * 1L + 8L;"], [441, "        //}"], [447, "      return new IndexArrayIterator(dt[0], dt[1]);"]]}, "num_lines_added": 17, "num_lines_removed": 66}