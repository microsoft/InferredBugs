{"hash": "328737b5e085be6f56d0b5efe0535df1cd028c08", "message": "Simplified IndexIterator: no more(), only size() & next()", "file_num_lines": 997, "diff_parsed": {"added": [[77, "    return ids(ind).size();"], [90, "      return new IndexArrayIterator(ids);"], [97, "        return new IndexArrayIterator(ids);"], [144, "      return new IndexArrayIterator(rIds, count);"], [148, "    return new IndexArrayIterator(tmp);"], [266, "    // start traversing with id of tokFrom"], [267, "    // reduce minimal level, every following node has to be checked"], [457, "   * Traverse case sensitive trie and search case sensitive."], [516, "   * in idNN. If searchNode is contained, the corresponding node id is"], [517, "   * returned, else - 1."], [594, "   * within the range of lb and ub."], [597, "   * @param v appended value for the current node, starting from root"], [755, "   * @return boolean result of constraint check"], [830, "   * @return boolean result of constraint check"], [852, "   * @param dt data found in trie in earlier recursion steps"], [1043, "  /*"], [1045, "   * case sensitive trie."], [1048, "   * an int[1] if one successor exists and an int[2] if 2 successors exists"], [1074, "  /*"], [1106, "   */"], [1116, "   * Looking up node with value, which match ending."], [1117, "   * The parameter lastFound shows, whether chars were found in last recursive"], [1118, "   * call, which correspond to the ending, consequently those chars are"], [1119, "   * considered, which occur successive in ending."], [1120, "   * pointerNode shows the position comparison between value[nodeId] and"], [1121, "   * ending starts"], [1122, "   * pointerEnding shows the position comparison between ending and"], [1123, "   * value[nodeId] starts"], [1124, "   *"], [1125, "   * @param node id on node"], [1126, "   * @param ending ending of value"], [1127, "   * @param lastFound boolean if value was found in last run"], [1128, "   * @param pointerNode pointer on current node"], [1129, "   * @param pointerEnding pointer on value ending"], [1130, "   */"], [1267, "   * Method for wildcards search in trie."], [1272, "   * executes the wildcard search and works on trie via"]], "deleted": [[77, "    final IndexIterator ii  = ids(ind);"], [78, "    int c = 0;"], [79, "    while(ii.more()) c++;"], [80, "    return c;"], [93, "      return new IndexArrayIterator(ids[0], ids[1]);"], [100, "        return new IndexArrayIterator(ids[0], ids[1]);"], [147, ""], [148, "      if(count == 0) return null;"], [149, ""], [150, "      final int[][] tmp = new int[2][count];"], [151, "      System.arraycopy(rIds[0], 0, tmp[0], 0, count);"], [152, "      System.arraycopy(rIds[1], 0, tmp[1], 0, count);"], [153, "      return new IndexArrayIterator(tmp[0], tmp[1]);"], [157, "    return new IndexArrayIterator(tmp[0], tmp[1]);"], [275, "    // start travesing with id of tokFrom"], [276, "    // reduce minimul level, every following node has to be chacked"], [466, "   * Traverse case sentsitive trie and search case sensitive."], [525, "   * in idNN. If searchNode is contained, the corresponding nodeid is"], [526, "   * retruned, else - 1."], [603, "   * wihtin the range of lb and ub."], [606, "   * @param v appened value for the current node, starting from root"], [764, "   * @return boolean result of constraintcheck"], [839, "   * @return boolean result of constraintcheck"], [856, ""], [862, "   * @param dt data found in trie in earlier recursionsteps"], [1025, ""], [1054, ""], [1055, ""], [1056, ""], [1057, "  /**"], [1059, "   * casesensitive trie."], [1062, "   * an int[1] if one successor exists and an int[2] if 2 succsessors exists"], [1085, ""], [1089, "  /**"], [1099, "   */"], [1100, "/*"], [1123, "*/"], [1124, ""], [1125, ""], [1135, "  * Looking up node with value, which match ending."], [1136, "  * The parameter lastFound shows, whether chars were found in last recursive"], [1137, "  * call, which correspond to the ending, consequently those chars are"], [1138, "  * considered, which occur successive in ending."], [1139, "  * pointerNode shows the position comparison between value[nodeId] and"], [1140, "  * ending starts"], [1141, "  * pointerEnding shows the position comparison between ending and"], [1142, "  * value[nodeId] starts"], [1143, "  *"], [1144, "  * @param node id on node"], [1145, "  * @param ending ending of value"], [1146, "  * @param lastFound boolean if value was found in last run"], [1147, "  * @param pointerNode pointer on current node"], [1148, "  * @param pointerEnding pointer on value ending"], [1149, "  */"], [1286, "   * Method for wildcars search in trie."], [1291, "   * executes the wildcardsearch and works on trie via"]]}, "num_lines_added": 37, "num_lines_removed": 56}