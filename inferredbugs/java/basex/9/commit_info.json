{"hash": "ce2ecf9247d06be35837893593793efa2f73fe4b", "message": "full iterator support added for FuzzyIndex", "file_num_lines": 284, "diff_parsed": {"added": [[221, "   * Extracts data from disk and returns it in"], [222, "   * [[pre1, ..., pres], [pos1, ..., poss]] representation."], [223, "   *"], [224, "   * @param s number of pre/pos values"], [225, "   * @param p pointer on data"], [226, "   * @return  int[][] data"], [228, "  private IndexArrayIterator getData(final long p, final int s) {"], [229, "    if(s == 0 || p < 0) return null;"], [230, "    final int[][] dt = new int[2][s];"], [232, ""], [233, "    if (data.meta.ftittr) {"], [234, "      for(int i = 0; i < s; i++) {"], [235, "        dt[0][i] = dat.readNum();"], [236, "        dt[1][i] = dat.readNum();"], [237, "      }"], [238, "    } else {"], [239, "      for(int i = 0; i < s; i++) dt[0][i] = dat.readNum();"], [240, "      for(int i = 0; i < s; i++) dt[1][i] = dat.readNum();"], [241, "    }"], [242, "    return new IndexArrayIterator(dt, true);"], [245, ""], [246, ""], [253, "    final IndexArrayIterator iat = (IndexArrayIterator) it;"], [254, "    return iat.getFTData();"], [255, "    /*"], [259, ""], [260, "    for(int i = 0; i < s && it.more(); i++) {"], [261, "      pre[i] = it.next();"], [262, "    }"], [263, "    for(int i = 0; i < s && it.more(); i++) pos[i] = it.next();"], [265, "    */"], [277, "    IndexArrayIterator it = new IndexArrayIterator(0);"], [302, "          it = IndexArrayIterator.merge(getData(getPointerOnData(p, ts),"], [303, "              getDataSize(p, ts)), it);"], [311, "    return it;"], [454, "      IndexArrayIterator it = new IndexArrayIterator(0);"], [465, "        if (contains(tok, posw, dtok)) {"], [466, "          it = IndexArrayIterator.merge("], [467, "            getData(getPointerOnData(b[0][1], b[0][0]),"], [468, "                getDataSize(b[0][1], b[0][0])), it);"], [469, "        }"], [473, "      if (contains(tok, posw, dtok)) {"], [474, "        it = IndexArrayIterator.merge("], [475, "            getData(getPointerOnData(b[0][1], b[0][0]),"], [476, "                getDataSize(b[0][1], b[0][0])), it);"], [477, "      }"], [478, "      return it;"]], "deleted": [[221, "   * Creates an index iterator for all pre/pos values."], [222, "   * @param p pointer of pre/pos data"], [223, "   * @param s number of pre values"], [224, "   * @return iterator"], [226, "  private IndexIterator getData(final long p, final int s) {"], [228, "    final int[][] d = new int[2][s];"], [229, "    for(int i = 0; i < s; i++) d[0][i] = dat.readNum();"], [230, "    for(int i = 0; i < s; i++) d[1][i] = dat.readNum();"], [231, "    return new IndexArrayIterator(d, true);"], [243, "    for(int i = 0; i < s; i++) pre[i] = it.next();"], [244, "    for(int i = 0; i < s; i++) pos[i] = it.next();"], [257, "    int[][] ft = null;"], [282, "          ft = FTTrie.calculateFTOr(ft,"], [283, "              finish(getData(getPointerOnData(p, ts), getDataSize(p, ts))));"], [291, "    return new IndexArrayIterator(ft, true);"], [434, "      int[][] dt = null;"], [445, "        if (contains(tok, posw, dtok)) dt = FTTrie.calculateFTOr(dt,"], [446, "            finish(getData(getPointerOnData(b[0][1], b[0][0]),"], [447, "                getDataSize(b[0][1], b[0][0]))));"], [451, "      if (contains(tok, posw, dtok)) dt = FTTrie.calculateFTOr(dt,"], [452, "          finish(getData(getPointerOnData(b[0][1], b[0][0]),"], [453, "              getDataSize(b[0][1], b[0][0]))));"], [454, ""], [455, "      return new IndexArrayIterator(dt, true);"]]}, "num_lines_added": 47, "num_lines_removed": 24}