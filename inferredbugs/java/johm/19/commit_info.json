{"hash": "32dc5a4c142b85ee30c0d93d99ce8c8d95b49578", "message": "removed all but very basic collection support", "file_num_lines": 109, "diff_parsed": {"added": [[4, "import java.util.HashSet;"], [20, "public class RedisSet<T extends Model> implements Set<T> {"], [63, "        return internalAdd(element);"], [68, "        return internalRemove(o);"], [80, "            success &= internalAdd(element);"], [94, "            success &= internalAdd(element);"], [107, "            success &= internalRemove(element);"], [117, "    private boolean internalAdd(T element) {"], [122, "    private boolean internalRemove(Object o) {"], [130, "        Set<String> ids = nest.smembers();"], [131, "        Set<T> elements = new HashSet<T>();"], [132, "        for (String id : ids) {"], [133, "            elements.add((T) JOhm.get(clazz, Integer.valueOf(id)));"]], "deleted": [[5, "import java.util.LinkedHashSet;"], [20, "public class RedisSet<T extends Model> extends RedisBaseCollection implements"], [21, "        Set<T> {"], [24, "    private final Set<T> elements;"], [29, "        elements = new LinkedHashSet<T>();"], [35, "        if (repoSize != elements.size()) {"], [36, "            refreshStorage(true);"], [37, "        }"], [69, "        return internalAdd(element, true);"], [74, "        return internalRemove(o, true);"], [86, "            success &= internalAdd(element, false);"], [88, "        refreshStorage(true);"], [101, "            success &= internalAdd(element, false);"], [103, "        refreshStorage(true);"], [115, "            success &= internalRemove(element, false);"], [117, "        refreshStorage(true);"], [124, "        elements.clear();"], [127, "    private boolean internalAdd(T element, boolean refreshStorage) {"], [128, "        element.save();"], [130, "        if (refreshStorage) { // don't trust success-value too much"], [131, "            refreshStorage(true);"], [132, "        }"], [136, "    private boolean internalRemove(Object o, boolean refreshStorage) {"], [139, "        element.delete();"], [140, "        if (refreshStorage) { // don't trust success-value too much"], [141, "            // Since we cannot guarantee all Model's will provide a reasonable"], [142, "            // equals() and hashCode() implementation, using remove() on the Set"], [143, "            // cannot guarantee container-storage purge."], [144, "            refreshStorage(true);"], [145, "        }"], [149, "    protected synchronized void purgeScrollStorage() {"], [150, "        elements.clear();"], [151, "        scrollElements();"], [152, "    }"], [153, ""], [156, "        if (elements.isEmpty()) {"], [157, "            Set<String> ids = nest.smembers();"], [158, "            for (String id : ids) {"], [159, "                elements.add((T) JOhm.get(clazz, Integer.valueOf(id)));"], [160, "            }"]]}, "num_lines_added": 13, "num_lines_removed": 40}