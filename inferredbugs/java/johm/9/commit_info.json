{"hash": "32dc5a4c142b85ee30c0d93d99ce8c8d95b49578", "message": "removed all but very basic collection support", "file_num_lines": 169, "diff_parsed": {"added": [[21, "public class RedisList<T extends Model> implements java.util.List<T> {"], [32, "        return internalAdd(e);"], [37, "        internalIndexedAdd(index, element);"], [44, "            success &= internalAdd(element);"], [52, "            internalIndexedAdd(index++, element);"], [114, "        return internalRemove(o);"], [119, "        return internalIndexedRemove(index);"], [130, "            success &= internalRemove(element);"], [144, "            success &= internalAdd(element);"], [152, "        internalIndexedAdd(index, element);"], [178, "    private boolean internalAdd(T element) {"], [183, "    private void internalIndexedAdd(int index, T element) {"], [187, "    private boolean internalRemove(Object o) {"], [193, "    private T internalIndexedRemove(int index) {"], [195, "        internalRemove(element);"], [201, "        List<T> elements = new ArrayList<T>();"], [202, ""], [203, "        List<String> ids = nest.lrange(0, -1);"], [204, "        for (String id : ids) {"], [205, "            elements.add((T) JOhm.get(clazz, Integer.valueOf(id)));"]], "deleted": [[21, "public class RedisList<T extends Model> extends RedisBaseCollection implements"], [22, "        java.util.List<T> {"], [25, "    private final List<T> elements;"], [30, "        elements = new ArrayList<T>();"], [35, "        return internalAdd(e, true);"], [40, "        internalIndexedAdd(index, element, true);"], [47, "            success &= internalAdd(element, false);"], [49, "        refreshStorage(true);"], [56, "            internalIndexedAdd(index++, element, false);"], [58, "        refreshStorage(true);"], [65, "        refreshStorage(true);"], [120, "        return internalRemove(o, true);"], [125, "        return internalIndexedRemove(index, true);"], [136, "            success &= internalRemove(element, false);"], [138, "        refreshStorage(true);"], [151, "            success &= internalAdd(element, false);"], [153, "        refreshStorage(true);"], [160, "        internalIndexedAdd(index, element, true);"], [167, "        if (repoSize != elements.size()) {"], [168, "            refreshStorage(true);"], [169, "        }"], [189, "    private boolean internalAdd(T element, boolean refreshStorage) {"], [190, "        element.save();"], [192, "        if (refreshStorage) {"], [193, "            refreshStorage(true);"], [194, "        }"], [198, "    private void internalIndexedAdd(int index, T element, boolean refreshStorage) {"], [199, "        element.save();"], [201, "        if (refreshStorage) {"], [202, "            refreshStorage(true);"], [203, "        }"], [206, "    private boolean internalRemove(Object o, boolean refreshStorage) {"], [209, "        element.delete();"], [210, "        if (refreshStorage) {"], [211, "            refreshStorage(true);"], [212, "        }"], [216, "    private T internalIndexedRemove(int index, boolean refreshStorage) {"], [218, "        internalRemove(element, refreshStorage);"], [222, "    protected synchronized void purgeScrollStorage() {"], [223, "        elements.clear();"], [224, "        scrollElements();"], [225, "    }"], [226, ""], [229, "        if (elements.isEmpty()) {"], [230, "            List<String> ids = nest.lrange(0, -1);"], [231, "            for (String id : ids) {"], [232, "                elements.add((T) JOhm.get(clazz, Integer.valueOf(id)));"], [233, "            }"]]}, "num_lines_added": 20, "num_lines_removed": 48}