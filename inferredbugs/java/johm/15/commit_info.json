{"hash": "32dc5a4c142b85ee30c0d93d99ce8c8d95b49578", "message": "removed all but very basic collection support", "file_num_lines": 110, "diff_parsed": {"added": [[4, "import java.util.HashMap;"], [22, "public class RedisMap<K, V extends Model> implements Map<K, V> {"], [45, "        return scrollElements().containsKey(key);"], [50, "        return scrollElements().containsValue(value);"], [55, "        return scrollElements().entrySet();"], [86, "        internalPut(key, value);"], [93, "            internalPut(entry.getKey(), entry.getValue());"], [112, "        return scrollElements().values();"], [115, "    private V internalPut(final K key, final V value) {"], [125, "        Map<String, String> savedHash = nest.hgetAll();"], [126, "        Map<K, V> backingMap = new HashMap<K, V>();"], [127, "        for (Map.Entry<String, String> entry : savedHash.entrySet()) {"], [128, "            K savedKey = (K) JOhmUtils.Convertor.convert(keyClazz, entry"], [129, "                    .getKey());"], [130, "            V savedValue = JOhm.get(valueClazz, Integer.parseInt(entry"], [131, "                    .getValue()));"], [132, "            backingMap.put(savedKey, savedValue);"]], "deleted": [[21, "public class RedisMap<K, V extends Model> extends RedisBaseCollection implements"], [22, "        Map<K, V> {"], [26, "    private final Map<K, V> backingMap;"], [33, "        backingMap = new LinkedHashMap<K, V>();"], [40, "            V value = JOhm.get(valueClazz, Integer.parseInt(entry.getValue()));"], [41, "            value.delete();"], [45, "        refreshStorage(true);"], [50, "        return backingMap.containsKey(key);"], [55, "        return backingMap.containsValue(value);"], [60, "        return backingMap.entrySet();"], [91, "        internalPut(key, value, true);"], [98, "            internalPut(entry.getKey(), entry.getValue(), false);"], [100, "        refreshStorage(true);"], [106, "        value.delete();"], [114, "        if (repoSize != backingMap.size()) {"], [115, "            refreshStorage(true);"], [116, "        }"], [122, "        return backingMap.values();"], [125, "    private V internalPut(final K key, final V value, boolean refreshStorage) {"], [126, "        value.save();"], [130, "        if (refreshStorage) {"], [131, "            refreshStorage(true);"], [132, "        }"], [137, "    protected synchronized void purgeScrollStorage() {"], [138, "        backingMap.clear();"], [139, "        scrollElements();"], [140, "    }"], [141, ""], [144, "        if (backingMap.isEmpty()) {"], [145, "            Map<String, String> savedHash = nest.hgetAll();"], [146, "            for (Map.Entry<String, String> entry : savedHash.entrySet()) {"], [147, "                K savedKey = (K) JOhmUtils.Convertor.convert(keyClazz, entry"], [148, "                        .getKey());"], [149, "                V savedValue = JOhm.get(valueClazz, Integer.parseInt(entry"], [150, "                        .getValue()));"], [151, "                backingMap.put(savedKey, savedValue);"], [152, "            }"]]}, "num_lines_added": 17, "num_lines_removed": 37}