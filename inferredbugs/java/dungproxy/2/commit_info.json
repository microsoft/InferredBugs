{"hash": "cf9ef11c1c5e7d19c07b745aae89d5599d2be0f2", "message": "#14 \u591a\u7ebf\u7a0b\u5728\u7ebf\u5237\u65b0IP\u65b9\u6848\u4f18\u5316,\u5355\u7ebf\u7a0b\u4e0b\u8f7d\u8d44\u6e90,\u591a\u7ebf\u7a0b\u5e76\u53d1\u68c0\u67e5", "file_num_lines": 216, "diff_parsed": {"added": [[6, "import java.util.concurrent.ConcurrentLinkedQueue;"], [7, "import java.util.concurrent.atomic.AtomicBoolean;"], [44, "    // \u5907\u9009\u7684\u4ee3\u7406\u8d44\u6e90,\u4ed6\u662f\u901a\u8fc7IP\u4e0b\u8f7d\u5668\u4e0b\u8f7d\u7684\u7684\u4e00\u6279\u521d\u59cb\u5316IP,\u4f46\u662f\u6ca1\u6709\u7ecf\u8fc7\u53ef\u7528\u6027\u6d4b\u8bd5"], [45, "    private ConcurrentLinkedQueue<AvProxyVO> candidateProxies = new ConcurrentLinkedQueue<>();"], [46, ""], [47, "    private AtomicBoolean isCandidateProxiesDownloading = new AtomicBoolean(false);"], [48, ""], [49, "    private volatile long lastIpImportTimeStamp = 0L;"], [50, ""], [94, "            refresh();// \u5728\u65b0\u7ebf\u7a0b\u5237\u65b0"], [138, "        // logger.info(\"IP\u6c60\u53ef\u7528IP\u6570\u91cf:{} \u5f53\u524d\u51c6\u5907\u8fdb\u884c\u5237\u65b0\u5de5\u4f5c\u7684\u7ebf\u7a0b\u6570\u91cf:{}\", smartProxyQueue.availableSize(), threadNumber);"], [159, "     * \u672c\u65b9\u6cd5\u4f1a\u542f\u52a8\u7ebf\u7a0b\u5f02\u6b65\u5237\u7ebf,\u6240\u4ee5\u4e0d\u9700\u8981\u81ea\u5df1\u5efa\u7acb\u7ebf\u7a0b\u73af\u5883\u4e86,\u4ed6\u4e0d\u4f1a\u68c0\u67e5\u53ef\u7528IP\u662f\u5426\u8db3\u91cf,\u4f46\u662f\u5982\u679cIP\u672c\u8eab\u91cf\u592a\u5927\u7684\u8bdd,\u672c\u8c03\u7528\u4e5f\u51e0\u4e4e\u65e0\u6548(\u4f1a\u68c0\u67e5\u662f\u5426\u9700\u8981\u4e0b\u8f7dIP,\u8fd9\u4e2a\u68c0\u67e5\u4f1a\u5931\u8d25),"], [160, "     *"], [168, "            // logger.info(\"\u5f53\u524d\u5237\u65b0\u7ebf\u7a0b\u6570:{} \u5927\u4e8e\u8c03\u5ea6\u7ebf\u7a0b\u6570:{} \u53d6\u6d88\u672c\u6b21IP\u8d44\u6e90\u5237\u65b0\u4efb\u52a1\", refreshTaskNumber.get(), expectedThreadNumber);"], [173, "            Thread thread = new Thread() {"], [174, "                @Override"], [175, "                public void run() {"], [176, "                    try {"], [177, "                        logger.info(\"IP\u8d44\u6e90\u5237\u65b0\u5f00\u59cb,\u5f53\u524d\u5237\u65b0\u7ebf\u7a0b\u6570\u91cf:{}...\", refreshTaskNumber.get());"], [178, "                        doRefresh();"], [179, "                        logger.info(\"IP\u8d44\u6e90\u5237\u65b0\u7ed3\u675f...\");"], [180, "                    } finally {"], [181, "                        refreshTaskNumber.decrementAndGet();"], [182, "                    }"], [183, "                }"], [184, ""], [185, "            };"], [186, "            thread.setDaemon(true);"], [187, "            thread.start();"], [188, "        }"], [189, "    }"], [190, ""], [191, "    private void checkAndExtendCandidateResource() {"], [192, "        // \u4e24\u5206\u949f\u5185\u4e0b\u8f7d\u8fc7IP,\u5219\u53d6\u6d88IP\u4e0b\u8f7d,\u56e0\u4e3a\u4e00\u6b21IP\u4e0b\u8f7d\u672c\u8eab\u53ef\u80fd\u9700\u8981\u5341\u51e0\u79d2"], [193, "        if (System.currentTimeMillis() - lastIpImportTimeStamp < 120000) {"], [194, "            return;"], [195, "        }"], [196, "        // \u5019\u9009IP\u8db3\u91cf,\u53d6\u6d88IP\u4e0b\u8f7d"], [197, "        if (candidateProxies.size() + smartProxyQueue.availableSize() > (coreSize * 1.5)) {"], [198, "            return;"], [199, "        }"], [200, "        // download new proxies"], [201, "        // \u540c\u4e00\u4e2a\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u884cIP\u4e0b\u8f7d"], [202, "        if (isCandidateProxiesDownloading.compareAndSet(false, true)) {"], [204, "                List<AvProxyVO> avProxies = resourceFacade.importProxy(domain,"], [205, "                        testUrls.get(random.nextInt(testUrls.size())), coreSize);"], [206, "                logger.info(\"\u5728\u7ebfIP\u5237\u65b0,\u5f53\u524d\u4e0b\u8f7d\u5230\u7684IP\u6570\u76ee\u4e3a:{}\", avProxies.size());"], [207, "                candidateProxies.addAll(avProxies);"], [209, "                lastIpImportTimeStamp = System.currentTimeMillis();"], [210, "                isCandidateProxiesDownloading.set(false);"], [213, ""], [217, "        checkAndExtendCandidateResource();"], [218, "        AvProxyVO avProxy;"], [220, "        while ((avProxy = candidateProxies.poll()) != null) {"]], "deleted": [[32, "    // \u7cfb\u7edf\u53ef\u4ee5\u8fd0\u884c\u7684\u65f6\u5019\u9700\u8981\u4fdd\u6301\u7684\u8d44\u6e90\u6570\u76ee,\u5982\u679c\u5c11\u4e8e\u8fd9\u4e2a\u6570\u636e,\u7cfb\u7edf\u5c06\u4f1a\u5ef6\u8fdf\u7b49\u5f85,\u76f4\u5230\u8d44\u6e90load\u5b8c\u6210"], [33, "    private int minSize = 1;"], [87, "            refreshInNewThread();// \u5728\u65b0\u7ebf\u7a0b\u5237\u65b0"], [105, "    private void refreshInNewThread() {"], [106, ""], [107, "        Thread thread = new Thread() {"], [108, "            @Override"], [109, "            public void run() {"], [110, "                refresh();"], [111, "            }"], [112, "        };"], [113, "        thread.setDaemon(true);"], [114, "        thread.start();"], [115, "    }"], [116, ""], [143, "        logger.info(\"IP\u6c60\u53ef\u7528IP\u6570\u91cf:{} \u5f53\u524d\u51c6\u5907\u8fdb\u884c\u5237\u65b0\u5de5\u4f5c\u7684\u7ebf\u7a0b\u6570\u91cf:{}\", smartProxyQueue.availableSize(), threadNumber);"], [164, "     * \u662f\u4e00\u4e2a\u8017\u65f6\u4efb\u52a1,\u4e0a\u5c42\u8c03\u7528\u9700\u8981\u81ea\u5df1\u628a\u672c\u52a8\u4f5c\u653e\u5728\u4e00\u4e2a\u7ebf\u7a0b,\u5f53\u7136\u672c\u65b9\u6cd5\u7ebf\u7a0b\u5b89\u5168"], [172, "            logger.info(\"\u5f53\u524d\u5237\u65b0\u7ebf\u7a0b\u6570:{} \u5927\u4e8e\u8c03\u5ea6\u7ebf\u7a0b\u6570:{} \u53d6\u6d88\u672c\u6b21IP\u8d44\u6e90\u5237\u65b0\u4efb\u52a1\", refreshTaskNumber.get(), expectedThreadNumber);"], [178, "                logger.info(\"IP\u8d44\u6e90\u5237\u65b0\u5f00\u59cb...\");"], [179, "                doRefresh();"], [180, "                logger.info(\"IP\u8d44\u6e90\u5237\u65b0\u7ed3\u675f...\");"], [182, "                refreshTaskNumber.decrementAndGet();"], [188, "        List<AvProxyVO> avProxies = resourceFacade.importProxy(domain, testUrls.get(random.nextInt(testUrls.size())),"], [189, "                coreSize);"], [191, "        for (AvProxyVO avProxy : avProxies) {"], [246, "    public int getMinSize() {"], [247, "        return minSize;"], [248, "    }"], [249, ""], [250, "    public void setMinSize(int minSize) {"], [251, "        this.minSize = minSize;"], [252, "    }"], [253, ""]]}, "num_lines_added": 54, "num_lines_removed": 33}