{"hash": "9892a47e56c290b51a43592f5cb96b49626e89c6", "message": "Enable Kubernetes-dependent tests conditionally, hide log messages during tests", "file_num_lines": 72, "diff_parsed": {"added": [[10, "import oracle.kubernetes.TestUtils;"], [14, "import oracle.kubernetes.operator.logging.LoggingFactory;"], [15, "import org.junit.After;"], [17, "import org.junit.Before;"], [22, "import java.util.List;"], [23, "import java.util.logging.Handler;"], [24, "import java.util.logging.Logger;"], [25, ""], [31, "  private static final Logger logger = LoggingFactory.getLogger(\"Operator\", \"Operator\").getUnderlyingLogger();"], [32, "  private List<Handler> savedhandlers;"], [33, ""], [34, "  @Before"], [35, "  public void disableConsoleLogging() {"], [36, "    savedhandlers = TestUtils.removeConsoleHandlers(logger);"], [37, "  }"], [38, ""], [39, "  @After"], [40, "  public void restoreConsoleLogging() {"], [41, "    TestUtils.restoreConsoleHandlers(logger, savedhandlers);"], [42, "  }"], [43, ""], [45, "  public void testNamespaceWatch() throws Exception {"], [46, "    Assume.assumeTrue(TestUtils.isKubernetesAvailable());"], [70, "  public void testCustomResourceWatch() throws Exception {"], [71, "    Assume.assumeTrue(TestUtils.isKubernetesAvailable());"]], "deleted": [[24, "  public void testNamespaceWatch() {"], [25, "    Assume.assumeTrue(System.getProperty(\"os.name\").toLowerCase().contains(\"nix\"));"], [28, "    try {"], [46, ""], [47, "      for (Watch.Response<V1Namespace> item : watch) {"], [48, "        System.out.printf(\"%s : %s%n\", item.type, item.object.getMetadata().getName());"], [49, "      }"], [50, ""], [51, "    } catch (ApiException e) {"], [52, "      fail();"], [53, "    } catch (RuntimeException e) {"], [54, "      System.out.println(\"stream finished\");"], [55, "    }"], [56, ""], [61, "  public void testCustomResourceWatch() {"], [62, "    Assume.assumeTrue(System.getProperty(\"os.name\").toLowerCase().contains(\"nix\"));"], [65, "    try {"], [66, "      // create a watch"], [67, ""], [84, ""], [85, "      for (Watch.Response<Domain> item : watch) {"], [86, "        System.out.printf(\"%s : %s%n\", item.type, item.object.getMetadata().getName());"], [87, "      }"], [88, ""], [89, "    } catch (ApiException e) {"], [90, "      if (e.getCode() == 404) {"], [91, "        System.out.println(\"***\\n***This test is not able to run because the CRD that I want to watch does not exist on the server\\n***\");"], [92, "      } else {"], [93, "        fail();"], [94, "      }"], [95, "    } catch (RuntimeException e) {"], [96, "      System.out.println(\"stream finished\");"], [97, "    }"], [98, ""]]}, "num_lines_added": 25, "num_lines_removed": 34}