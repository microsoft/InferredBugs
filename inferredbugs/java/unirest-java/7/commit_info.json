{"hash": "65b93e288c4229c99448bea2db2162448b5d50ec", "message": "test to show multiple params", "file_num_lines": 665, "diff_parsed": {"added": [[111, "\tpublic void multipleParams() throws JSONException, UnirestException {"], [112, "\t\tHttpResponse<JsonNode> response = Unirest.get(MockServer.GETJSON + \"?name=ringo\")"], [113, "\t\t\t\t.header(\"accept\", \"application/json\")"], [114, "\t\t\t\t.queryString(\"name\", \"paul\")"], [115, "\t\t\t\t.queryString(\"name\", \"john\")"], [116, "\t\t\t\t.asJson();"], [117, ""], [118, "\t\tFormCapture json = TestUtils.read(response, FormCapture.class);"], [119, "\t\tjson.assertQuery(\"name\", \"ringo\");"], [120, "\t\tjson.assertQuery(\"name\", \"paul\");"], [121, "\t\tjson.assertQuery(\"name\", \"john\");"], [122, "\t}"], [123, ""], [124, "\t@Test"], [126, "\t\tHttpResponse<JsonNode> response = Unirest.get(MockServer.GETJSON)"], [127, "\t\t\t\t.header(\"accept\", \"application/json\")"], [128, "\t\t\t\t.queryString(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\")"], [129, "\t\t\t\t.asJson();"], [131, "\t\tFormCapture json = TestUtils.read(response, FormCapture.class);"], [132, "\t\tjson.assertQuery(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [137, "\t\tHttpResponse response = Unirest.post(MockServer.POSTJSON)"], [138, "\t\t\t\t.header(\"accept\", \"application/json\")"], [139, "\t\t\t\t.field(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\")"], [140, "\t\t\t\t.asJson();"], [142, "\t\tFormCapture json = TestUtils.read(response, FormCapture.class);"], [143, "\t\tjson.assertQuery(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [850, ""], [851, "\tprivate String findAvailableIpAddress() throws IOException {"], [852, "\t\tfor (int i = 100; i <= 255; i++) {"], [853, "\t\t\tString ip = \"192.168.1.\" + i;"], [854, "\t\t\tif (!InetAddress.getByName(ip).isReachable(1000)) {"], [855, "\t\t\t\treturn ip;"], [856, "\t\t\t}"], [857, "\t\t}"], [858, ""], [859, "\t\tthrow new RuntimeException(\"Couldn't find an available IP address in the range of 192.168.0.100-255\");"], [860, "\t}"]], "deleted": [[76, "\tprivate String findAvailableIpAddress() throws IOException {"], [77, "\t\tfor (int i = 100; i <= 255; i++) {"], [78, "\t\t\tString ip = \"192.168.1.\" + i;"], [79, "\t\t\tif (!InetAddress.getByName(ip).isReachable(1000)) {"], [80, "\t\t\t\treturn ip;"], [81, "\t\t\t}"], [82, "\t\t}"], [83, ""], [84, "\t\tthrow new RuntimeException(\"Couldn't find an available IP address in the range of 192.168.0.100-255\");"], [85, "\t}"], [86, ""], [89, "\t\tMockServer.captureAndReturnRequest();"], [90, ""], [107, "\t\tMockServer.captureAndReturnRequest();"], [108, ""], [127, "\t\tHttpResponse<JsonNode> response = Unirest.get(\"http://httpbin.org/get\").queryString(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\").asJson();"], [129, "\t\tassertEquals(response.getBody().getObject().getJSONObject(\"args\").getString(\"param3\"), \"\u3053\u3093\u306b\u3061\u306f\");"], [134, "\t\tHttpResponse<JsonNode> response = Unirest.post(\"http://httpbin.org/post\").field(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\").asJson();"], [136, "\t\tassertEquals(response.getBody().getObject().getJSONObject(\"form\").getString(\"param3\"), \"\u3053\u3093\u306b\u3061\u306f\");"]]}, "num_lines_added": 37, "num_lines_removed": 19}