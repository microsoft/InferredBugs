{"hash": "497ff85c40a79269f0a1411598232673e8b1a25c", "message": "more test refactorings", "file_num_lines": 678, "diff_parsed": {"added": [[89, "\t\tjson.assertParam(\"param1\", \"value1\");"], [90, "\t\tjson.assertParam(\"param2\", \"bye\");"], [100, "\t\tjson.assertParam(\"name\", \"mark\");"], [108, "\t\tjson.assertParam(\"name\", \"mark2\");"], [120, "\t\tjson.assertParam(\"name\", \"ringo\");"], [121, "\t\tjson.assertParam(\"name\", \"paul\");"], [122, "\t\tjson.assertParam(\"name\", \"john\");"], [133, "\t\tjson.assertParam(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [144, "\t\tjson.assertParam(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [156, "\t\tjson.assertParam(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [187, "            parse(response).assertParam(\"try\", String.valueOf(i));"], [199, "        parse.assertParam(\"name\", \"mark\");"], [200, "\t\tparse.assertParam(\"nick\", \"thefosk\");"], [209, "        parse(response).assertParam(\"email\", \"hello@hello.com\");"], [221, "\t\tparse(response).assertParam(testKey, testValue);"], [226, "\t\tHttpResponse<JsonNode> response = Unirest.delete(MockServer.DELETE).asJson();"], [229, "\t\tresponse = Unirest.delete(MockServer.DELETE)"], [230, "\t\t\t\t.field(\"name\", \"mark\")"], [231, "\t\t\t\t.field(\"foo\",\"bar\")"], [232, "\t\t\t\t.asJson();"], [233, ""], [234, "\t\tRequestCapture parse = parse(response);"], [235, "\t\tparse.assertParam(\"name\", \"mark\");"], [236, "\t\tparse.assertParam(\"foo\", \"bar\");"], [242, "\t\tHttpResponse<JsonNode> response = Unirest.delete(MockServer.DELETE)"], [243, "\t\t\t\t.body(body)"], [244, "\t\t\t\t.asJson();"], [245, ""], [247, "\t\tparse(response).asserBody(body);"], [252, "\t\tHttpResponse<JsonNode> response = Unirest.get(MockServer.GETJSON)"], [253, "\t\t\t\t.basicAuth(\"user\", \"test\")"], [254, "\t\t\t\t.asJson();"], [255, ""], [256, "\t\tparse(response).assertHeader(\"Authorization\", \"Basic dXNlcjp0ZXN0\");"], [261, "\t\tFuture<HttpResponse<JsonNode>> future = Unirest.post(MockServer.POST)"], [262, "\t\t\t\t.header(\"accept\", \"application/json\")"], [263, "\t\t\t\t.field(\"param1\", \"value1\")"], [264, "\t\t\t\t.field(\"param2\", \"bye\")"], [265, "\t\t\t\t.asJsonAsync();"], [269, "\t\tRequestCapture req = parse(future.get());"], [270, "\t\treq.assertParam(\"param1\", \"value1\");"], [271, "\t\treq.assertParam(\"param2\", \"bye\");"], [276, "\t\tUnirest.post(MockServer.POST)"], [277, "\t\t\t\t.header(\"accept\", \"application/json\")"], [278, "\t\t\t\t.field(\"param1\", \"value1\")"], [279, "\t\t\t\t.field(\"param2\", \"bye\")"], [280, "\t\t\t\t.asJsonAsync(new Callback<JsonNode>() {"], [287, "\t\t\t\tRequestCapture req = parse(jsonResponse);"], [288, "\t\t\t\treq.assertParam(\"param1\", \"value1\");"], [289, "\t\t\t\treq.assertParam(\"param2\", \"bye\");"], [306, "\t\tHttpResponse<JsonNode> jsonResponse = Unirest.post(\"http://httpbin.org/post\")"], [307, "\t\t\t\t.field(\"name\", \"Mark\")"], [308, "\t\t\t\t.field(\"file\", new File(getClass().getResource(\"/test\").toURI()))"], [309, "\t\t\t\t.asJson();"], [310, ""], [364, "\t\tjson.assertParam(\"name\", \"Mark\");"]], "deleted": [[89, "\t\tjson.assertQuery(\"param1\", \"value1\");"], [90, "\t\tjson.assertQuery(\"param2\", \"bye\");"], [100, "\t\tjson.assertQuery(\"name\", \"mark\");"], [108, "\t\tjson.assertQuery(\"name\", \"mark2\");"], [120, "\t\tjson.assertQuery(\"name\", \"ringo\");"], [121, "\t\tjson.assertQuery(\"name\", \"paul\");"], [122, "\t\tjson.assertQuery(\"name\", \"john\");"], [133, "\t\tjson.assertQuery(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [144, "\t\tjson.assertQuery(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [156, "\t\tjson.assertQuery(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [187, "            parse(response).assertQuery(\"try\", String.valueOf(i));"], [199, "        parse.assertQuery(\"name\", \"mark\");"], [200, "\t\tparse.assertQuery(\"nick\", \"thefosk\");"], [209, "        parse(response).assertQuery(\"email\", \"hello@hello.com\");"], [221, "\t\tparse(response).assertQuery(testKey, testValue);"], [226, "\t\tHttpResponse<JsonNode> response = Unirest.delete(\"http://httpbin.org/delete\").asJson();"], [229, "\t\tresponse = Unirest.delete(\"http://httpbin.org/delete\").field(\"name\", \"mark\").asJson();"], [230, "\t\tassertEquals(\"mark\", response.getBody().getObject().getJSONObject(\"form\").getString(\"name\"));"], [236, "\t\tHttpResponse<JsonNode> response = Unirest.delete(\"http://httpbin.org/delete\").body(body).asJson();"], [238, "\t\tassertEquals(body, response.getBody().getObject().getString(\"data\"));"], [243, "\t\tHttpResponse<JsonNode> response = Unirest.get(\"http://httpbin.org/headers\").basicAuth(\"user\", \"test\").asJson();"], [244, "\t\tassertEquals(\"Basic dXNlcjp0ZXN0\", response.getBody().getObject().getJSONObject(\"headers\").getString(\"Authorization\"));"], [249, "\t\tFuture<HttpResponse<JsonNode>> future = Unirest.post(\"http://httpbin.org/post\").header(\"accept\", \"application/json\").field(\"param1\", \"value1\").field(\"param2\", \"bye\").asJsonAsync();"], [252, "\t\tHttpResponse<JsonNode> jsonResponse = future.get();"], [253, ""], [254, "\t\tassertTrue(jsonResponse.getHeaders().size() > 0);"], [255, "\t\tassertTrue(jsonResponse.getBody().toString().length() > 0);"], [256, "\t\tassertFalse(jsonResponse.getRawBody() == null);"], [257, "\t\tassertEquals(200, jsonResponse.getStatus());"], [259, "\t\tJsonNode json = jsonResponse.getBody();"], [260, "\t\tassertFalse(json.isArray());"], [261, "\t\tassertNotNull(json.getObject());"], [262, "\t\tassertNotNull(json.getArray());"], [263, "\t\tassertEquals(1, json.getArray().length());"], [264, "\t\tassertNotNull(json.getArray().get(0));"], [269, "\t\tUnirest.post(\"http://httpbin.org/post\").header(\"accept\", \"application/json\").field(\"param1\", \"value1\").field(\"param2\", \"bye\").asJsonAsync(new Callback<JsonNode>() {"], [276, "\t\t\t\tassertTrue(jsonResponse.getHeaders().size() > 0);"], [277, "\t\t\t\tassertTrue(jsonResponse.getBody().toString().length() > 0);"], [278, "\t\t\t\tassertFalse(jsonResponse.getRawBody() == null);"], [279, "\t\t\t\tassertEquals(200, jsonResponse.getStatus());"], [280, ""], [281, "\t\t\t\tJsonNode json = jsonResponse.getBody();"], [282, "\t\t\t\tassertFalse(json.isArray());"], [283, "\t\t\t\tassertNotNull(json.getObject());"], [284, "\t\t\t\tassertNotNull(json.getArray());"], [285, "\t\t\t\tassertEquals(1, json.getArray().length());"], [286, "\t\t\t\tassertNotNull(json.getArray().get(0));"], [287, ""], [288, "\t\t\t\tassertEquals(\"value1\", json.getObject().getJSONObject(\"form\").getString(\"param1\"));"], [289, "\t\t\t\tassertEquals(\"bye\", json.getObject().getJSONObject(\"form\").getString(\"param2\"));"], [306, "\t\tHttpResponse<JsonNode> jsonResponse = Unirest.post(\"http://httpbin.org/post\").field(\"name\", \"Mark\").field(\"file\", new File(getClass().getResource(\"/test\").toURI())).asJson();"], [360, "\t\tjson.assertQuery(\"name\", \"Mark\");"]]}, "num_lines_added": 56, "num_lines_removed": 52}