{"hash": "9f097ee88231fbadf9b99f36afe33ae8eadcc246", "message": "moving tests to internal", "file_num_lines": 675, "diff_parsed": {"added": [[52, "import static io.github.openunirest.http.TestUtils.read;"], [87, "\t\tRequestCapture json = parse(jsonResponse);"], [99, "\t\tRequestCapture json = parse(response);"], [107, "\t\tjson = parse(response);"], [119, "\t\tRequestCapture json = parse(response);"], [132, "\t\tRequestCapture json = parse(response);"], [143, "\t\tRequestCapture json = parse(response);"], [155, "\t\tRequestCapture json = parse(response);"], [165, "\t\tHttpResponse<JsonNode> response = Unirest.post(MockServer.POST)"], [166, "\t\t\t\t.body(sentBytes)"], [167, "\t\t\t\t.asJson();"], [169, "\t\tRequestCapture json = parse(response);"], [170, "\t\tjson.asserBody(sourceString);"], [175, "\t\tHttpResponse<JsonNode> response = Unirest.get(MockServer.GETJSON)"], [176, "                .header(\"user-agent\", \"hello-world\")"], [177, "                .asJson();"], [179, "        RequestCapture json = parse(response);"], [180, "        json.assertHeader(\"User-Agent\", \"hello-world\");"], [183, "    @Test"], [186, "\t\t\tHttpResponse<JsonNode> response = Unirest.get(MockServer.GETJSON + \"?try=\" + i).asJson();"], [187, "            parse(response).assertQuery(\"try\", String.valueOf(i));"], [193, "\t\tHttpResponse<JsonNode> response = Unirest.get(MockServer.GETJSON)"], [194, "                .queryString(\"name\", \"mark\")"], [195, "                .queryString(\"nick\", \"thefosk\")"], [196, "                .asJson();"], [197, ""], [198, "        RequestCapture parse = parse(response);"], [199, "        parse.assertQuery(\"name\", \"mark\");"], [200, "\t\tparse.assertQuery(\"nick\", \"thefosk\");"], [205, "\t\tHttpResponse<JsonNode> response = Unirest.get(MockServer.GETJSON)"], [206, "                .queryString(\"email\", \"hello@hello.com\")"], [207, "                .asJson();"], [208, ""], [209, "        parse(response).assertQuery(\"email\", \"hello@hello.com\");"], [216, ""], [217, "\t\tHttpResponse<JsonNode> response = Unirest.get(MockServer.GETJSON)"], [218, "                .queryString(testKey, testValue)"], [219, "                .asJson();"], [220, ""], [221, "\t\tparse(response).assertQuery(testKey, testValue);"], [347, ""], [358, "\t\tRequestCapture json = parse(jsonResponse);"], [871, ""], [872, "    private RequestCapture parse(HttpResponse<JsonNode> response) {"], [873, "        return read(response, RequestCapture.class);"], [874, "    }"]], "deleted": [[86, "\t\tRequestCapture json = TestUtils.read(jsonResponse, RequestCapture.class);"], [98, "\t\tRequestCapture json = TestUtils.read(response, RequestCapture.class);"], [106, "\t\tjson = TestUtils.read(response, RequestCapture.class);"], [118, "\t\tRequestCapture json = TestUtils.read(response, RequestCapture.class);"], [131, "\t\tRequestCapture json = TestUtils.read(response, RequestCapture.class);"], [142, "\t\tRequestCapture json = TestUtils.read(response, RequestCapture.class);"], [154, "\t\tRequestCapture json = TestUtils.read(response, RequestCapture.class);"], [164, "\t\tHttpResponse<JsonNode> response = Unirest.post(\"http://httpbin.org/post\").body(sentBytes).asJson();"], [166, "\t\tassertEquals(sourceString, response.getBody().getObject().getString(\"data\"));"], [171, "\t\tHttpResponse<JsonNode> response = Unirest.get(\"http://httpbin.org/get?name=mark\").header(\"user-agent\", \"hello-world\").asJson();"], [172, "\t\tassertEquals(\"hello-world\", response.getBody().getObject().getJSONObject(\"headers\").getString(\"User-Agent\"));"], [173, ""], [174, "\t\tGetRequest getRequest = Unirest.get(\"http\");"], [175, "\t\tfor (Object current : Arrays.asList(0, 1, 2)) {"], [176, "\t\t\tgetRequest.queryString(\"name\", current);"], [177, "\t\t}"], [181, "\t@Test"], [184, "\t\t\tHttpResponse<JsonNode> response = Unirest.get(\"http://httpbin.org/get?try=\" + i).asJson();"], [185, "\t\t\tassertEquals(response.getBody().getObject().getJSONObject(\"args\").getString(\"try\"), ((Integer) i).toString());"], [191, "\t\tHttpResponse<JsonNode> response = Unirest.get(\"http://httpbin.org/get\").queryString(\"name\", \"mark\").queryString(\"nick\", \"thefosk\").asJson();"], [192, "\t\tassertEquals(response.getBody().getObject().getJSONObject(\"args\").getString(\"name\"), \"mark\");"], [193, "\t\tassertEquals(response.getBody().getObject().getJSONObject(\"args\").getString(\"nick\"), \"thefosk\");"], [198, "\t\tHttpResponse<JsonNode> response = Unirest.get(\"http://httpbin.org/get\").queryString(\"email\", \"hello@hello.com\").asJson();"], [199, "\t\tassertEquals(\"hello@hello.com\", response.getBody().getObject().getJSONObject(\"args\").getString(\"email\"));"], [206, "\t\tHttpResponse<JsonNode> response = Unirest.get(\"http://httpbin.org/get\").queryString(testKey, testValue).asJson();"], [207, "\t\tassertEquals(testValue, response.getBody().getObject().getJSONObject(\"args\").getString(testKey));"], [343, "\t\tRequestCapture json = TestUtils.read(jsonResponse, RequestCapture.class);"], [347, ""], [348, ""], [349, "//\t\tassertTrue(json.getObject().getJSONObject(\"files\").getString(\"type\").contains(\"application/octet-stream\"));"], [350, "//\t\tassertEquals(\"Mark\", json.getObject().getJSONObject(\"form\").getString(\"name\"));"]]}, "num_lines_added": 46, "num_lines_removed": 31}