{"hash": "d2f6ed05808be49a2b7ee6f4fa052f9c57aeaa73", "message": "updated async example", "file_num_lines": 56, "diff_parsed": {"added": [[33, "import java.io.InputStream;"], [34, "import java.util.Map;"], [44, "import com.mashape.unirest.http.async.Callback;"], [72, "//\t\tFuture<HttpResponse<JsonNode>> future = Unirest.post(\"http://httpbin.org/post\")"], [73, "//\t\t\t\t .header(\"accept\", \"application/json\")"], [74, "//\t\t\t\t .field(\"param1\", \"value1\")"], [75, "//\t\t\t\t .field(\"param2\",\"bye\")"], [76, "//\t\t\t\t .asJsonAsync();"], [77, "//"], [78, "//\t\tassertNotNull(future);"], [79, "//\t\tHttpResponse<JsonNode> jsonResponse = future.get();"], [80, "//"], [81, "//\t\tassertTrue(jsonResponse.getHeaders().size() > 0);"], [82, "//\t\tassertTrue(jsonResponse.getBody().toString().length() > 0);"], [83, "//\t\tassertFalse(jsonResponse.getRawBody() == null);"], [84, "//\t\tassertEquals(200, jsonResponse.getCode());"], [85, "//"], [86, "//\t\tJsonNode json = jsonResponse.getBody();"], [87, "//\t\tassertFalse(json.isArray());"], [88, "//\t\tassertNotNull(json.getObject());"], [89, "//\t\tassertNotNull(json.getArray());"], [90, "//\t\tassertEquals(1, json.getArray().length());"], [91, "//\t\tassertNotNull(json.getArray().get(0));"], [94, "\t\tFuture<HttpResponse<JsonNode>> future = Unirest.post(\"http://httpbin.org/post\")"], [95, "\t\t  .header(\"accept\", \"application/json\")"], [96, "\t\t  .field(\"param1\", \"value1\")"], [97, "\t\t  .field(\"param2\", \"value2\")"], [98, "\t\t  .asJsonAsync(new Callback<JsonNode>() {"], [99, ""], [100, "\t\t\tpublic void failed(Exception e) {"], [101, "\t\t\t\tSystem.out.println(\"The request has failed\");"], [102, "\t\t\t}"], [103, ""], [104, "\t\t\tpublic void completed(HttpResponse<JsonNode> response) {"], [105, "\t\t\t\t int code = response.getCode();"], [106, "\t\t\t     Map<String, String> headers = response.getHeaders();"], [107, "\t\t\t     JsonNode body = response.getBody();"], [108, "\t\t\t     InputStream rawBody = response.getRawBody();"], [109, "\t\t\t}"], [110, ""], [111, "\t\t\tpublic void cancelled() {"], [112, "\t\t\t\tSystem.out.println(\"The request has been cancelled\");"], [113, "\t\t\t}"], [114, ""], [115, "\t\t});"]], "deleted": [[69, "\t\tFuture<HttpResponse<JsonNode>> future = Unirest.post(\"http://httpbin.org/post\")"], [70, "\t\t\t\t .header(\"accept\", \"application/json\")"], [71, "\t\t\t\t .field(\"param1\", \"value1\")"], [72, "\t\t\t\t .field(\"param2\",\"bye\")"], [73, "\t\t\t\t .asJsonAsync();"], [75, "\t\tassertNotNull(future);"], [76, "\t\tHttpResponse<JsonNode> jsonResponse = future.get();"], [78, "\t\tassertTrue(jsonResponse.getHeaders().size() > 0);"], [79, "\t\tassertTrue(jsonResponse.getBody().toString().length() > 0);"], [80, "\t\tassertFalse(jsonResponse.getRawBody() == null);"], [81, "\t\tassertEquals(200, jsonResponse.getCode());"], [82, ""], [83, "\t\tJsonNode json = jsonResponse.getBody();"], [84, "\t\tassertFalse(json.isArray());"], [85, "\t\tassertNotNull(json.getObject());"], [86, "\t\tassertNotNull(json.getArray());"], [87, "\t\tassertEquals(1, json.getArray().length());"], [88, "\t\tassertNotNull(json.getArray().get(0));"]]}, "num_lines_added": 45, "num_lines_removed": 18}