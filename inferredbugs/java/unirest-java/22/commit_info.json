{"hash": "4fd6f4fcc0a5ef84aa3819672428236dd8f76cc1", "message": "yet moar test refactoring", "file_num_lines": 671, "diff_parsed": {"added": [[86, "        parse(jsonResponse)"], [87, "                .assertHeader(\"Accept\", \"application/json\")"], [88, "                .assertParam(\"param1\", \"value1\")"], [89, "                .assertParam(\"param2\", \"bye\");"], [98, "        parse(response)"], [99, "                .assertParam(\"name\", \"mark\");"], [106, "        parse(response)"], [107, "                .assertParam(\"name\", \"mark2\");"], [118, "        parse(response)"], [119, "                .assertParam(\"name\", \"ringo\")"], [120, "                .assertParam(\"name\", \"paul\")"], [121, "                .assertParam(\"name\", \"john\");"], [131, "        parse(response)"], [132, "                .assertParam(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [142, "        parse(response)"], [143, "                .assertParam(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [154, "        parse(response)"], [155, "                .assertParam(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\")"], [156, "                .assertFileContent(\"file\", \"This is a test file\");"], [168, "        parse(response)"], [169, "                .asserBody(sourceString);"], [341, "        parse(request)"], [342, "                .assertHeader(\"Accept\", ContentType.MULTIPART_FORM_DATA.toString())"], [343, "                .assertParam(\"name\", \"Mark\")"], [344, "                .getFile(\"image.jpg\")"], [345, "                .assertFileType(\"application/octet-stream\");"], [360, "                        parse(response)"], [361, "                                .assertParam(\"name\", \"Mark\")"], [362, "                                .getFile(\"test\")"], [363, "                                .assertFileType(\"application/octet-stream\");"], [412, "                        parse(response)"], [413, "                                .assertParam(\"name\", \"Mark\")"], [414, "                                .getFile(\"test\")"], [415, "                                .assertFileType(\"application/octet-stream\");"], [444, "                        parse.assertParam(\"name\", \"Mark\");"], [488, "        parse(jsonResponse)"], [489, "                .assertHeader(\"X-Custom-Header\", \"hello\")"], [490, "                .assertHeader(\"User-Agent\", \"foobar\");"], [493, "        parse(jsonResponse)"], [494, "                .assertHeader(\"X-Custom-Header\", \"hello\")"], [495, "                .assertHeader(\"User-Agent\", \"foobar\");"], [500, "        parse(jsonResponse)"], [501, "            .assertNoHeader(\"X-Custom-Header\");"], [576, "    @Ignore // this is flakey"], [598, "                    Unirest.get(MockServer.GET).queryString(\"index\", counter.incrementAndGet()).asString();"], [611, "        Unirest.post(MockServer.POST)"], [612, "                .header(\"accept\", \"application/json\")"], [613, "                .header(\"Content-Type\", \"application/json\")"], [614, "                .body(\"{\\\"hello\\\":\\\"world\\\"}\")"], [615, "                .asJsonAsync(new Callback<JsonNode>() {"], [617, "                    public void failed(UnirestException e) {"], [618, "                        fail();"], [619, "                    }"], [621, "                    public void completed(HttpResponse<JsonNode> jsonResponse) {"], [622, "                        parse(jsonResponse)"], [623, "                                .asserBody(\"{\\\"hello\\\":\\\"world\\\"}\")"], [624, "                                .assertHeader(\"Content-Type\", \"application/json\");"], [626, "                        status = true;"], [627, "                        lock.countDown();"], [628, "                    }"], [630, "                    public void cancelled() {"], [631, "                        fail();"], [632, "                    }"], [633, "                });"], [641, "        Unirest.post(MockServer.POST)"], [642, "                .header(\"accept\", \"application/json\")"], [643, "                .header(\"Content-Type\", \"application/x-www-form-urlencoded\")"], [644, "                .field(\"name\", \"Mark\")"], [645, "                .field(\"hello\", \"world\")"], [646, "                .asJsonAsync(new Callback<JsonNode>() {"], [648, "                    public void failed(UnirestException e) {"], [649, "                        fail();"], [650, "                    }"], [652, "                    public void completed(HttpResponse<JsonNode> jsonResponse) {"], [653, "                        parse(jsonResponse)"], [654, "                                .assertParam(\"name\", \"Mark\")"], [655, "                                .assertParam(\"hello\", \"world\")"], [656, "                                .assertHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");"], [658, "                        status = true;"], [659, "                        lock.countDown();"], [660, "                    }"], [662, "                    public void cancelled() {"], [663, "                        fail();"], [664, "                    }"], [665, "                });"], [673, "        HttpResponse<JsonNode> response = Unirest.get(MockServer.GET)"], [674, "                .queryString(\"name\", \"Mark\")"], [675, "                .queryString(\"name\", \"Tom\")"], [676, "                .asJson();"], [678, "        parse(response)"], [679, "                .assertParam(\"name\", \"Mark\")"], [680, "                .assertParam(\"name\", \"Tom\");"], [685, "        HttpResponse<JsonNode> response = Unirest.post(MockServer.POST)"], [686, "                .field(\"param3\", \"wot\")"], [687, "                .field(\"file1\", new File(getClass().getResource(\"/test\").toURI()))"], [688, "                .field(\"file2\", new File(getClass().getResource(\"/test\").toURI()))"], [689, "                .asJson();"], [691, "        parse(response)"], [692, "                .assertParam(\"param3\", \"wot\")"], [693, "                .assertFileContent(\"file1\", \"This is a test file\")"], [694, "                .assertFileContent(\"file2\", \"This is a test file\");"], [699, "        HttpResponse<JsonNode> response = Unirest.get(MockServer.GET)"], [700, "                .queryString(\"name\", Arrays.asList(\"Mark\", \"Tom\"))"], [701, "                .asJson();"], [703, "        parse(response)"], [704, "                .assertParam(\"name\", \"Mark\")"], [705, "                .assertParam(\"name\", \"Tom\");"], [710, "        HttpResponse<JsonNode> response = Unirest.post(MockServer.POST)"], [711, "                .field(\"name\", \"Mark\")"], [712, "                .field(\"name\", \"Tom\")"], [713, "                .asJson();"], [715, "        parse(response)"], [716, "                .assertParam(\"name\", \"Mark\")"], [717, "                .assertParam(\"name\", \"Tom\");"], [722, "        HttpResponse<JsonNode> response = Unirest.post(MockServer.POST)"], [723, "                .field(\"name\", Arrays.asList(\"Mark\", \"Tom\"))"], [724, "                .asJson();"], [726, "        parse(response)"], [727, "                .assertParam(\"name\", \"Mark\")"], [728, "                .assertParam(\"name\", \"Tom\");"], [733, "        GetRequest request = Unirest.get(MockServer.GET)"], [734, "                .header(\"Name\", \"Marco\");"], [735, ""], [741, "        parse(request.asJson())"], [742, "                .assertHeader(\"Name\", \"Marco\");"], [743, ""], [744, "        request = Unirest.get(MockServer.GET).header(\"Name\", \"Marco\").header(\"Name\", \"John\");"], [790, "        getResponseMock.setUrl(MockServer.GET);"], [792, "        HttpResponse<GetResponse> getResponse = Unirest.get(getResponseMock.getUrl())"], [793, "                .asObject(GetResponse.class);"], [804, "        postResponseMock.setUrl(MockServer.POST);"], [806, "        HttpResponse<JsonNode> postResponse = Unirest.post(postResponseMock.getUrl())"], [807, "                .header(\"accept\", \"application/json\")"], [808, "                .header(\"Content-Type\", \"application/json\")"], [809, "                .body(postResponseMock)"], [810, "                .asJson();"], [813, "        parse(postResponse)"], [814, "                .asserBody(\"{\\\"url\\\":\\\"http://localhost:4567/post\\\"}\");"], [820, "        HttpRequest httpRequest = Unirest.post(\"test\")"], [821, "                .field(\"z\", \"Z\")"], [822, "                .field(\"y\", \"Y\")"], [823, "                .field(\"x\", \"X\")"], [824, "                .getHttpRequest();"]], "deleted": [[86, "        RequestCapture json = parse(jsonResponse);"], [87, "        json.assertHeader(\"Accept\", \"application/json\");"], [88, "        json.assertParam(\"param1\", \"value1\");"], [89, "        json.assertParam(\"param2\", \"bye\");"], [98, "        RequestCapture json = parse(response);"], [99, "        json.assertParam(\"name\", \"mark\");"], [106, "        json = parse(response);"], [107, "        json.assertParam(\"name\", \"mark2\");"], [118, "        RequestCapture json = parse(response);"], [119, "        json.assertParam(\"name\", \"ringo\");"], [120, "        json.assertParam(\"name\", \"paul\");"], [121, "        json.assertParam(\"name\", \"john\");"], [131, "        RequestCapture json = parse(response);"], [132, "        json.assertParam(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [142, "        RequestCapture json = parse(response);"], [143, "        json.assertParam(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [154, "        RequestCapture json = parse(response);"], [155, "        json.assertParam(\"param3\", \"\u3053\u3093\u306b\u3061\u306f\");"], [156, "        json.getFile(\"test\").assertBody(\"This is a test file\");"], [168, "        RequestCapture json = parse(response);"], [169, "        json.asserBody(sourceString);"], [341, "        RequestCapture json = parse(request);"], [342, "        json.assertHeader(\"Accept\", ContentType.MULTIPART_FORM_DATA.toString());"], [343, "        json.assertParam(\"name\", \"Mark\");"], [344, "        json.getFile(\"image.jpg\").assertFileType(\"application/octet-stream\");"], [359, "                        RequestCapture json = parse(response);"], [360, "                        json.assertParam(\"name\", \"Mark\");"], [361, "                        json.getFile(\"test\").assertFileType(\"application/octet-stream\");"], [410, "                        RequestCapture parse = parse(response);"], [411, "                        parse.getFile(\"test\").assertFileType(\"application/octet-stream\");"], [412, "                        parse.assertParam(\"name\", \"Mark\");"], [443, "                        parse.assertParam(\"name\", \"Mark\");"], [485, "        RequestCapture r = parse(jsonResponse);"], [486, "        r.assertHeader(\"X-Custom-Header\", \"hello\");"], [487, "        r.assertHeader(\"User-Agent\", \"foobar\");"], [490, "        r = parse(jsonResponse);"], [491, "        r.assertHeader(\"X-Custom-Header\", \"hello\");"], [492, "        r.assertHeader(\"User-Agent\", \"foobar\");"], [497, "        r = parse(jsonResponse);"], [498, "        r.assertNoHeader(\"X-Custom-Header\");"], [594, "                    Unirest.get(MockServer.HOST + \"/get\").queryString(\"index\", counter.incrementAndGet()).asString();"], [607, "        Unirest.post(\"http://httpbin.org/post\").header(\"accept\", \"application/json\").header(\"Content-Type\", \"application/json\").body(\"{\\\"hello\\\":\\\"world\\\"}\").asJsonAsync(new Callback<JsonNode>() {"], [609, "            public void failed(UnirestException e) {"], [610, "                fail();"], [611, "            }"], [613, "            public void completed(HttpResponse<JsonNode> jsonResponse) {"], [614, "                JsonNode json = jsonResponse.getBody();"], [615, "                assertEquals(\"{\\\"hello\\\":\\\"world\\\"}\", json.getObject().getString(\"data\"));"], [616, "                assertEquals(\"application/json\", json.getObject().getJSONObject(\"headers\").getString(\"Content-Type\"));"], [618, "                status = true;"], [619, "                lock.countDown();"], [620, "            }"], [622, "            public void cancelled() {"], [623, "                fail();"], [624, "            }"], [625, "        });"], [633, "        Unirest.post(\"http://httpbin.org/post\").header(\"accept\", \"application/json\").header(\"Content-Type\", \"application/x-www-form-urlencoded\").field(\"name\", \"Mark\").field(\"hello\", \"world\").asJsonAsync(new Callback<JsonNode>() {"], [634, ""], [635, "            public void failed(UnirestException e) {"], [636, "                fail();"], [637, "            }"], [639, "            public void completed(HttpResponse<JsonNode> jsonResponse) {"], [640, "                JsonNode json = jsonResponse.getBody();"], [641, "                assertEquals(\"Mark\", json.getObject().getJSONObject(\"form\").getString(\"name\"));"], [642, "                assertEquals(\"world\", json.getObject().getJSONObject(\"form\").getString(\"hello\"));"], [644, "                assertEquals(\"application/x-www-form-urlencoded\", json.getObject().getJSONObject(\"headers\").getString(\"Content-Type\"));"], [646, "                status = true;"], [647, "                lock.countDown();"], [648, "            }"], [650, "            public void cancelled() {"], [651, "                fail();"], [652, "            }"], [653, "        });"], [661, "        HttpResponse<JsonNode> response = Unirest.get(\"http://httpbin.org/get\").queryString(\"name\", \"Mark\").queryString(\"name\", \"Tom\").asJson();"], [662, ""], [663, "        JSONArray names = response.getBody().getObject().getJSONObject(\"args\").getJSONArray(\"name\");"], [664, "        assertEquals(2, names.length());"], [666, "        assertEquals(\"Mark\", names.getString(0));"], [667, "        assertEquals(\"Tom\", names.getString(1));"], [672, "        HttpResponse<JsonNode> response = Unirest.post(\"http://httpbin.org/post\").field(\"param3\", \"wot\").field(\"file1\", new File(getClass().getResource(\"/test\").toURI())).field(\"file2\", new File(getClass().getResource(\"/test\").toURI())).asJson();"], [673, ""], [674, "        JSONObject names = response.getBody().getObject().getJSONObject(\"files\");"], [675, "        assertEquals(2, names.length());"], [676, ""], [677, "        assertEquals(\"This is a test file\", names.getString(\"file1\"));"], [678, "        assertEquals(\"This is a test file\", names.getString(\"file2\"));"], [680, "        assertEquals(\"wot\", response.getBody().getObject().getJSONObject(\"form\").getString(\"param3\"));"], [685, "        HttpResponse<JsonNode> response = Unirest.get(\"http://httpbin.org/get\").queryString(\"name\", Arrays.asList(\"Mark\", \"Tom\")).asJson();"], [686, ""], [687, "        JSONArray names = response.getBody().getObject().getJSONObject(\"args\").getJSONArray(\"name\");"], [688, "        assertEquals(2, names.length());"], [690, "        assertEquals(\"Mark\", names.getString(0));"], [691, "        assertEquals(\"Tom\", names.getString(1));"], [696, "        HttpResponse<JsonNode> response = Unirest.post(\"http://httpbin.org/post\").field(\"name\", \"Mark\").field(\"name\", \"Tom\").asJson();"], [697, ""], [698, "        JSONArray names = response.getBody().getObject().getJSONObject(\"form\").getJSONArray(\"name\");"], [699, "        assertEquals(2, names.length());"], [701, "        assertEquals(\"Mark\", names.getString(0));"], [702, "        assertEquals(\"Tom\", names.getString(1));"], [707, "        HttpResponse<JsonNode> response = Unirest.post(\"http://httpbin.org/post\").field(\"name\", Arrays.asList(\"Mark\", \"Tom\")).asJson();"], [708, ""], [709, "        JSONArray names = response.getBody().getObject().getJSONObject(\"form\").getJSONArray(\"name\");"], [710, "        assertEquals(2, names.length());"], [712, "        assertEquals(\"Mark\", names.getString(0));"], [713, "        assertEquals(\"Tom\", names.getString(1));"], [718, "        GetRequest request = Unirest.get(\"http://httpbin.org/headers\").header(\"Name\", \"Marco\");"], [723, "        JSONObject headers = request.asJson().getBody().getObject().getJSONObject(\"headers\");"], [724, "        assertEquals(\"Marco\", headers.getString(\"Name\"));"], [726, "        request = Unirest.get(\"http://httpbin.org/headers\").header(\"Name\", \"Marco\").header(\"Name\", \"John\");"], [772, "        getResponseMock.setUrl(\"http://httpbin.org/get\");"], [774, "        HttpResponse<GetResponse> getResponse = Unirest.get(getResponseMock.getUrl()).asObject(GetResponse.class);"], [785, "        postResponseMock.setUrl(\"http://httpbin.org/post\");"], [787, "        HttpResponse<JsonNode> postResponse = Unirest.post(postResponseMock.getUrl()).header(\"accept\", \"application/json\").header(\"Content-Type\", \"application/json\").body(postResponseMock).asJson();"], [790, "        assertEquals(postResponse.getBody().getObject().getString(\"data\"), \"{\\\"url\\\":\\\"http://httpbin.org/post\\\"}\");"], [796, "        HttpRequest httpRequest = Unirest.post(\"test\").field(\"z\", \"Z\").field(\"y\", \"Y\").field(\"x\", \"X\").getHttpRequest();"]]}, "num_lines_added": 143, "num_lines_removed": 115}