{"hash": "59cb3b2887e05e52fe01a4d0174e14cd60fc6f39", "message": "\u7f51\u5173\u7b7e\u6743\u52a0\u5165jetcache\u7f13\u5b58\uff0c\u9ed8\u8ba410s\u76f8\u540curl\u4e0d\u8fdc\u7a0b\u8c03\u7528\uff0c\u4f7f\u7528\u672c\u5730\u7f13\u5b58", "file_num_lines": 63, "diff_parsed": {"added": [[3, "import com.fasterxml.jackson.core.JsonProcessingException;"], [4, "import com.fasterxml.jackson.databind.ObjectMapper;"], [6, "import com.springboot.cloud.gateway.service.IPermissionService;"], [29, "    private static final String X_CLIENT_TOKEN_USER = \"x-client-token-user\";"], [30, "    private static final String X_CLIENT_TOKEN = \"x-client-token\";"], [31, ""], [38, "    @Autowired"], [39, "    private IPermissionService permissionService;"], [40, ""], [60, ""], [62, "        if (permissionService.permission(authentication, url, method)) {"], [67, "            builder.header(X_CLIENT_TOKEN_USER, getUserToken(authentication));"], [74, "     * \u63d0\u53d6jwt token\u4e2d\u7684\u6570\u636e\uff0c\u8f6c\u4e3ajson"], [75, "     *"], [76, "     * @param authentication"], [77, "     * @return"], [78, "     */"], [79, "    private String getUserToken(String authentication) {"], [80, "        String token = \"{}\";"], [81, "        try {"], [82, "            token = new ObjectMapper().writeValueAsString(authService.getJwt(authentication).getBody());"], [83, "            return token;"], [84, "        } catch (JsonProcessingException e) {"], [85, "            log.error(\"token json error:{}\", e.getMessage());"], [86, "        }"], [87, "        return token;"], [88, "    }"], [89, ""], [90, "    /**"]], "deleted": [[5, "import org.apache.commons.lang.StringUtils;"], [27, "    private final static String X_CLIENT_TOKEN_USER = \"x-client-token-user\";"], [28, "    private final static String X_CLIENT_TOKEN = \"x-client-token\";"], [29, "    private static final String BEARER = \"Bearer\";"], [55, "        // \u5982\u679c\u8bf7\u6c42\u672a\u643a\u5e26token\u4fe1\u606f, \u76f4\u63a5\u8df3\u51fa"], [56, "        if (StringUtils.isBlank(authentication) || !authentication.startsWith(BEARER)) {"], [57, "            log.debug(\"url:{},method:{},headers:{}, \u8bf7\u6c42\u672a\u643a\u5e26token\u4fe1\u606f\", url, method, request.getHeaders());"], [58, "            return unauthorized(exchange);"], [59, "        }"], [61, "        if (authService.hasPermission(authentication, url, method)) {"], [66, "            builder.header(X_CLIENT_TOKEN_USER, authService.getJwt(authentication).getClaims());"]]}, "num_lines_added": 29, "num_lines_removed": 11}