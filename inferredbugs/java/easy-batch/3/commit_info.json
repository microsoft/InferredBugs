{"hash": "6ebdb8d4451434502e7668ad990d9955757b5202", "message": "update tutorials", "file_num_lines": 48, "diff_parsed": {"added": [[28, "import org.easybatch.core.dispatcher.ContentBasedRecordDispatcher;"], [29, "import org.easybatch.core.dispatcher.ContentBasedRecordDispatcherBuilder;"], [34, "import org.easybatch.core.util.PoisonRecordBroadcaster;"], [36, "import java.util.concurrent.BlockingQueue;"], [37, "import java.util.concurrent.ExecutorService;"], [38, "import java.util.concurrent.Executors;"], [39, "import java.util.concurrent.LinkedBlockingQueue;"], [40, ""], [41, "import static org.easybatch.core.impl.EngineBuilder.aNewEngine;"], [50, "    private static final int THREAD_POOL_SIZE = 4;"], [51, ""], [54, "        String fruits = \"1,apple\\n2,orange\\n3,banana\\n4,apple\\n5,pear\";"], [55, ""], [56, "        // Create queues"], [61, "        // Create a content based record dispatcher to dispatch records to according queues based on their content"], [62, "        ContentBasedRecordDispatcher recordDispatcher = new ContentBasedRecordDispatcherBuilder()"], [68, "        // Build a master engine that will read records from the data source and dispatch them to worker engines"], [69, "        Engine masterEngine = aNewEngine()"], [70, "                .reader(new StringRecordReader(fruits))"], [71, "                .processor(recordDispatcher)"], [72, "                .batchProcessEventListener(new PoisonRecordBroadcaster(recordDispatcher))"], [73, "                .build();"], [74, ""], [75, "        // Build easy batch engines"], [76, "        Engine workerEngine1 = buildWorkerEngine(appleQueue);"], [77, "        Engine workerEngine2 = buildWorkerEngine(orangeQueue);"], [78, "        Engine workerEngine3 = buildWorkerEngine(defaultQueue);"], [79, ""], [80, "        // Create a threads pool to call Easy Batch engines in parallel"], [81, "        ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);"], [82, ""], [83, "        // Submit master and worker engines to executor service"], [84, "        executorService.submit(masterEngine);"], [85, "        executorService.submit(workerEngine1);"], [86, "        executorService.submit(workerEngine2);"], [87, "        executorService.submit(workerEngine3);"], [88, ""], [89, "        // Shutdown executor service"], [94, "    public static Engine buildWorkerEngine(BlockingQueue<Record> queue) {"], [95, "        return aNewEngine()"]], "deleted": [[28, "import org.easybatch.core.api.RecordDispatcher;"], [29, "import org.easybatch.core.api.Report;"], [32, "import org.easybatch.core.impl.EngineBuilder;"], [35, "import org.easybatch.core.dispatcher.ContentBasedRecordDispatcherBuilder;"], [36, "import org.easybatch.core.record.PoisonRecord;"], [37, "import org.easybatch.tools.reporting.DefaultReportMerger;"], [38, "import org.easybatch.tools.reporting.ReportMerger;"], [40, "import java.util.concurrent.*;"], [51, "        //Create queues"], [56, "        // Build easy batch engines"], [57, "        Engine engine1 = buildBatchEngine(appleQueue);"], [58, "        Engine engine2 = buildBatchEngine(orangeQueue);"], [59, "        Engine engine3 = buildBatchEngine(defaultQueue);"], [60, ""], [61, "        //create a 3 threads pool to call Easy Batch engines in parallel"], [62, "        ExecutorService executorService = Executors.newFixedThreadPool(3);"], [63, ""], [64, "        //submit workers to executor service"], [65, "        Future<Report> reportFuture1 = executorService.submit(engine1);"], [66, "        Future<Report> reportFuture2 = executorService.submit(engine2);"], [67, "        Future<Report> reportFuture3 = executorService.submit(engine3);"], [68, ""], [69, "        //create a content based record dispatcher to dispatch records to previously created queues"], [70, "        RecordDispatcher recordDispatcher = new ContentBasedRecordDispatcherBuilder()"], [76, "        //read data source and dispatch record to queues based on their content"], [77, "        StringRecordReader stringRecordReader = new StringRecordReader(\"1,apple\\n2,orange\\n3,banana\\n4,apple\\n5,pear\");"], [78, "        stringRecordReader.open();"], [79, "        while (stringRecordReader.hasNextRecord()) {"], [80, "            Record record = stringRecordReader.readNextRecord();"], [81, "            recordDispatcher.dispatchRecord(record);"], [82, "        }"], [83, "        stringRecordReader.close();"], [84, ""], [85, "        //send poison records when all input data has been dispatched to workers"], [86, "        recordDispatcher.dispatchRecord(new PoisonRecord());"], [87, ""], [88, "        //wait for easy batch instances termination and get partial reports"], [89, "        Report report1 = reportFuture1.get();"], [90, "        Report report2 = reportFuture2.get();"], [91, "        Report report3 = reportFuture3.get();"], [92, ""], [93, "        //merge partial reports into a global one"], [94, "        ReportMerger reportMerger = new DefaultReportMerger();"], [95, "        Report finalReport = reportMerger.mergerReports(report1, report2, report3);"], [96, "        System.out.println(finalReport);"], [97, ""], [98, "        //shutdown executor service"], [103, "    public static Engine buildBatchEngine(BlockingQueue<Record> queue) {"], [104, "        return new EngineBuilder()"]]}, "num_lines_added": 40, "num_lines_removed": 49}