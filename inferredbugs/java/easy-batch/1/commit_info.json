{"hash": "18b1b4e63e59afba36082bcb1fa18a457684f73d", "message": "fix merge conflict in BatchConfiguration class", "file_num_lines": 227, "diff_parsed": {"added": [[130, "        configureCB4JLogger();"], [135, "         * Configure record reader"], [137, "        configureRecordReader();"], [139, "        /*"], [140, "        * Configure record parser"], [141, "        */"], [142, "        configureRecordParser();"], [144, "        /*"], [145, "         * Configure loggers for ignored/rejected records"], [146, "         */"], [147, "        configureIgnoredAndRejectedRecordsLoggers();"], [149, "        /*"], [150, "         * Configure batch reporter : if no custom reporter registered, use default implementation"], [151, "         */"], [152, "        if (batchReporter == null) {"], [153, "            batchReporter = new DefaultBatchReporterImpl();"], [154, "        }"], [156, "        /*"], [157, "         * Configure record validator with provided validators : if no custom validator registered, use default implementation"], [158, "         */"], [159, "        if (recordValidator == null) {"], [160, "            recordValidator = new DefaultRecordValidatorImpl(fieldValidators);"], [161, "        }"], [162, ""], [163, "        /*"], [164, "         * Check record mapper"], [165, "         */"], [166, "        if (recordMapper == null) {"], [167, "            String error = \"Configuration failed : no record mapper registered\";"], [173, "         * Check record processor"], [175, "        if (recordProcessor == null) {"], [176, "            String error = \"Configuration failed : no record processor registered\";"], [182, "        * register JMX MBean"], [183, "        */"], [184, "        configureJmxMBean();"], [185, ""], [186, "        logger.info(\"Configuration successful\");"], [187, "        logger.info(\"Configuration parameters details : \" + configurationProperties);"], [188, ""], [189, "    }"], [190, ""], [191, "    /**"], [192, "     * Configure loggers for ignored/rejected records."], [193, "     * @throws BatchConfigurationException thrown if loggers for ignored/rejected records are not correctly configured"], [194, "     */"], [195, "    private void configureIgnoredAndRejectedRecordsLoggers() throws BatchConfigurationException {"], [196, ""], [197, "        String inputDataProperty = configurationProperties.getProperty(BatchConstants.INPUT_DATA_PATH);"], [198, ""], [203, "            outputIgnored = BatchConfigurationUtil.removeExtension(inputDataProperty) + BatchConstants.DEFAULT_IGNORED_SUFFIX;"], [219, "            outputRejected = BatchConfigurationUtil.removeExtension(inputDataProperty) + BatchConstants.DEFAULT_REJECTED_SUFFIX;"], [232, "    }"], [234, "    /**"], [235, "     * Configure CB4J record parser."], [236, "     * @throws BatchConfigurationException thrown if record parser is not correctly configured"], [237, "     */"], [238, "    private void configureRecordParser() throws BatchConfigurationException {"], [240, "        String recordSizeProperty = configurationProperties.getProperty(BatchConstants.INPUT_RECORD_SIZE);"], [241, ""], [242, "        try {"], [243, ""], [244, "            if (recordSizeProperty == null || (recordSizeProperty != null && recordSizeProperty.length() == 0)) {"], [245, "                String error = \"Record size property is mandatory but was not specified\";"], [246, "                logger.severe(error);"], [247, "                throw new BatchConfigurationException(error);"], [248, "            }"], [249, ""], [250, "            int recordSize = Integer.parseInt(recordSizeProperty);"], [251, ""], [252, "            String fieldsSeparator = configurationProperties.getProperty(BatchConstants.INPUT_FIELD_SEPARATOR);"], [253, "            if (fieldsSeparator == null || (fieldsSeparator != null && fieldsSeparator.length() == 0)) {"], [254, "                fieldsSeparator = BatchConstants.DEFAULT_FIELD_SEPARATOR;"], [255, "                logger.warning(\"No field separator specified, using default : '\" + fieldsSeparator + \"'\");"], [256, "            }"], [257, ""], [258, "            logger.config(\"Record size specified : \" + recordSize);"], [259, "            logger.config(\"Fields separator specified : '\" + fieldsSeparator + \"'\");"], [260, "            recordParser = new RecordParserImpl(recordSize, fieldsSeparator);"], [261, ""], [262, "        } catch (NumberFormatException e) {"], [263, "            String error = \"Record size property is not recognized as a number : \" + recordSizeProperty;"], [264, "            logger.severe(error);"], [265, "            throw new BatchConfigurationException(error);"], [267, "    }"], [269, "    /**"], [270, "     * Configure CB4J record reader."], [271, "     * @throws BatchConfigurationException thrown if record reader is not correctly configured"], [272, "     */"], [273, "    private void configureRecordReader() throws BatchConfigurationException {"], [274, ""], [275, "        String inputDataProperty = configurationProperties.getProperty(BatchConstants.INPUT_DATA_PATH);"], [276, "        String encodingProperty = configurationProperties.getProperty(BatchConstants.INPUT_DATA_ENCODING);"], [277, "        String skipHeaderProperty = configurationProperties.getProperty(BatchConstants.INPUT_DATA_SKIP_HEADER);"], [278, ""], [279, "        //check if input data file is specified"], [280, "        if (inputDataProperty == null) {"], [281, "            String error = \"Configuration failed : input data file is mandatory but was not specified\";"], [286, "        try {"], [287, ""], [288, "            boolean skipHeader;"], [289, "            if (skipHeaderProperty != null) {"], [290, "                skipHeader = Boolean.valueOf(skipHeaderProperty);"], [291, "            } else {"], [292, "                skipHeader = BatchConstants.DEFAULT_SKIP_HEADER;"], [293, "                logger.warning(\"Skip header property not specified, default to false\");"], [294, "            }"], [295, ""], [296, "            String encoding;"], [297, "            if (encodingProperty == null || (encodingProperty.length() == 0)) {"], [298, "                encoding = BatchConstants.DEFAULT_FILE_ENCODING;"], [299, "                logger.warning(\"No encoding specified for input data, using system default encoding : \" + encoding);"], [300, "            } else {"], [301, "                if (Charset.availableCharsets().get(encodingProperty) == null || !Charset.isSupported(encodingProperty)) {"], [302, "                    encoding = BatchConstants.DEFAULT_FILE_ENCODING;"], [303, "                    logger.warning(\"Encoding '\" + encodingProperty + \"' not supported, using system default encoding : \" + encoding);"], [304, "                } else {"], [305, "                    encoding = encodingProperty;"], [306, "                    logger.config(\"Using '\" + encoding + \"' encoding for input file reading\");"], [307, "                }"], [308, "            }"], [309, "            recordReader = new RecordReaderImpl(inputDataProperty, encoding, skipHeader);"], [310, "            logger.config(\"Data input file : \" + inputDataProperty);"], [311, "        } catch (FileNotFoundException e) {"], [312, "            String error = \"Configuration failed : input data file '\" + inputDataProperty + \"' could not be opened\";"], [316, "    }"], [317, ""], [318, "    /*"], [319, "    * Configure JMX MBean"], [320, "    */"], [321, "    private void configureJmxMBean(){"], [334, "    }"], [336, "    /**"], [337, "     * Configure CB4J logger."], [338, "     */"], [339, "    private void configureCB4JLogger() {"], [340, "        logger.setUseParentHandlers(false);"], [341, "        ConsoleHandler consoleHandler = new ConsoleHandler();"], [342, "        consoleHandler.setFormatter(new LogFormatter());"], [343, "        logger.addHandler(consoleHandler);"]], "deleted": [[130, "        logger.setUseParentHandlers(false);"], [131, "        ConsoleHandler consoleHandler = new ConsoleHandler();"], [132, "        consoleHandler.setFormatter(new LogFormatter());"], [133, "        logger.addHandler(consoleHandler);"], [138, "         * Configure record reader parameters"], [140, "        String inputData = configurationProperties.getProperty(BatchConstants.INPUT_DATA_PATH);"], [141, "        String encoding = configurationProperties.getProperty(BatchConstants.INPUT_DATA_ENCODING);"], [142, "        final String skipHeaderProperty = configurationProperties.getProperty(BatchConstants.INPUT_DATA_SKIP_HEADER);"], [144, "        //check if input data file is specified"], [145, "        if (inputData == null) {"], [146, "            String error = \"Configuration failed : input data file is mandatory but was not specified\";"], [147, "            logger.severe(error);"], [148, "            throw new BatchConfigurationException(error);"], [149, "        }"], [151, "        try {"], [153, "            boolean skipHeader;"], [154, "            if (skipHeaderProperty != null) {"], [155, "                skipHeader = Boolean.valueOf(skipHeaderProperty);"], [156, "            } else {"], [157, "                skipHeader = BatchConstants.DEFAULT_SKIP_HEADER;"], [158, "                logger.warning(\"Skip header property not specified, default to false\");"], [159, "            }"], [161, "            if (encoding == null || (encoding != null && encoding.length() == 0)) {"], [162, "                encoding = System.getProperty(\"file.encoding\");"], [163, "                logger.warning(\"No encoding specified for input data, using system default encoding : \" + encoding);"], [164, "            } else {"], [165, "                if (Charset.availableCharsets().get(encoding) != null && !Charset.isSupported(encoding)) {"], [166, "                    logger.warning(\"Encoding '\" + encoding + \"' not supported, using system default encoding : \" + System.getProperty(\"file.encoding\"));"], [167, "                    encoding = System.getProperty(\"file.encoding\");"], [168, "                } else {"], [169, "                    logger.config(\"Using '\" + encoding + \"' encoding for input file reading\");"], [170, "                }"], [171, "            }"], [172, "            recordReader = new RecordReaderImpl(inputData, encoding, skipHeader);"], [173, "            logger.config(\"Data input file : \" + inputData);"], [174, "        } catch (FileNotFoundException e) {"], [175, "            String error = \"Configuration failed : input data file '\" + inputData + \"' could not be opened\";"], [181, "         * Configure record parser parameters"], [182, "         * Convention over configuration : default separator is \",\""], [184, "        String recordSizeProperty = configurationProperties.getProperty(BatchConstants.INPUT_RECORD_SIZE);"], [185, "        try {"], [186, ""], [187, "            if (recordSizeProperty == null || (recordSizeProperty != null && recordSizeProperty.length() == 0)) {"], [188, "                String error = \"Record size property is not set\";"], [189, "                logger.severe(error);"], [190, "                throw new BatchConfigurationException(error);"], [191, "            }"], [192, ""], [193, "            int recordSize = Integer.parseInt(recordSizeProperty);"], [194, ""], [195, "            String fieldsSeparator = configurationProperties.getProperty(BatchConstants.INPUT_FIELD_SEPARATOR);"], [196, "            if (fieldsSeparator == null || (fieldsSeparator != null && fieldsSeparator.length() == 0)) {"], [197, "                fieldsSeparator = BatchConstants.DEFAULT_FIELD_SEPARATOR;"], [198, "                logger.warning(\"No field separator specified, using default : '\" + fieldsSeparator + \"'\");"], [199, "            }"], [200, ""], [201, "            logger.config(\"Record size specified : \" + recordSize);"], [202, "            logger.config(\"Fields separator specified : '\" + fieldsSeparator + \"'\");"], [203, "            recordParser = new RecordParserImpl(recordSize, fieldsSeparator);"], [204, "        } catch (NumberFormatException e) {"], [205, "            String error = \"Record size property is not recognized as a number : \" + recordSizeProperty;"], [211, "         * Configure loggers for ignored/rejected records"], [212, "         */"], [217, "            outputIgnored = BatchConfigurationUtil.removeExtension(inputData) + BatchConstants.DEFAULT_IGNORED_SUFFIX;"], [233, "            outputRejected = BatchConfigurationUtil.removeExtension(inputData) + BatchConstants.DEFAULT_REJECTED_SUFFIX;"], [247, "        /*"], [248, "         * Configure batch reporter : if no custom reporter registered, use default implementation"], [249, "         */"], [250, "        if (batchReporter == null) {"], [251, "            batchReporter = new DefaultBatchReporterImpl();"], [252, "        }"], [254, "        /*"], [255, "         * Configure record validator with provided validators : : if no custom validator registered, use default implementation"], [256, "         */"], [257, "        if (recordValidator == null) {"], [258, "            recordValidator = new DefaultRecordValidatorImpl(fieldValidators);"], [261, "        /*"], [262, "           * Check record mapper"], [263, "           */"], [264, "        if (recordMapper == null) {"], [265, "            String error = \"Configuration failed : no record mapper registered\";"], [270, "        /*"], [271, "         * Check record processor"], [272, "         */"], [273, "        if (recordProcessor == null) {"], [274, "            String error = \"Configuration failed : no record processor registered\";"], [279, "        /*"], [280, "         * Configure JMX MBean"], [281, "         */"], [294, "        logger.info(\"Configuration successful\");"], [295, "        logger.info(\"Configuration parameters details : \" + configurationProperties);"], [296, ""]]}, "num_lines_added": 139, "num_lines_removed": 92}