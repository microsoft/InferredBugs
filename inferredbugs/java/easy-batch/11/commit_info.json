{"hash": "96f28f03f3763d59f8f164ebd8c76eef9bd05efe", "message": "issue #238 : do not throw FileNotFoundException at construction time in FlatFileRecordReader", "file_num_lines": 50, "diff_parsed": {"added": [[37, " * A {@link RecordReader} implementation that reads data from a flat file."], [38, " *"], [46, "    private Scanner scanner;"], [48, "    private long currentRecordNumber;"], [51, "     * Create a new flat file record reader."], [52, "     *"], [53, "     * @param fileName the input file name"], [55, "    public FlatFileRecordReader(final String fileName) {"], [56, "        this(fileName, Charset.defaultCharset().name());"], [57, "    }"], [60, "     * Create a new flat file record reader."], [62, "     * @param fileName    the input file name"], [63, "     * @param charsetName the encoding to use to read the file"], [65, "    public FlatFileRecordReader(final String fileName, final String charsetName) {"], [66, "        this(new File(fileName), charsetName);"], [70, "     * Create a new flat file record reader."], [74, "    public FlatFileRecordReader(final File input) {"], [79, "     * Create a new flat file record reader."], [84, "    public FlatFileRecordReader(final File input, final String charsetName) {"], [102, "        scanner = new Scanner(input, charsetName);"], [112, "    private String getDataSourceName() {"], [113, "        return input.getAbsolutePath();"], [114, "    }"], [115, ""]], "deleted": [[32, "import java.io.FileInputStream;"], [33, "import java.io.FileNotFoundException;"], [39, " * A {@link RecordReader} implementation that read data from a flat file."], [40, " * <p/>"], [47, "    /**"], [48, "     * The current read record number."], [49, "     */"], [50, "    private long currentRecordNumber;"], [51, ""], [52, "    /**"], [53, "     * The input file."], [54, "     */"], [56, ""], [57, "    /**"], [58, "     * The input file encoding name."], [59, "     */"], [63, "     * Scanner to read input file."], [65, "    private Scanner scanner;"], [68, "     * Constructs a flat file record reader."], [70, "     * @param fileName the input file"], [71, "     * @throws FileNotFoundException thrown if the file does not exist"], [73, "    public FlatFileRecordReader(final String fileName) throws FileNotFoundException {"], [74, "        this(new File(fileName), Charset.defaultCharset().name());"], [78, "     * Constructs a flat file record reader."], [81, "     * @throws FileNotFoundException thrown if the file does not exist"], [83, "    public FlatFileRecordReader(final File input) throws FileNotFoundException {"], [88, "     * Constructs a flat file record reader."], [92, "     * @throws FileNotFoundException thrown if the file does not exist"], [94, "    public FlatFileRecordReader(final File input, final String charsetName) throws FileNotFoundException {"], [97, ""], [110, "    private String getDataSourceName() {"], [111, "        return input.getAbsolutePath();"], [112, "    }"], [113, ""], [117, "        scanner = new Scanner(new FileInputStream(input), charsetName);"]]}, "num_lines_added": 24, "num_lines_removed": 35}