{"hash": "6ebdb8d4451434502e7668ad990d9955757b5202", "message": "update tutorials", "file_num_lines": 44, "diff_parsed": {"added": [[28, "import org.easybatch.core.dispatcher.RoundRobinRecordDispatcher;"], [32, "import org.easybatch.core.util.PoisonRecordBroadcaster;"], [38, "import java.util.concurrent.BlockingQueue;"], [39, "import java.util.concurrent.ExecutorService;"], [40, "import java.util.concurrent.Executors;"], [41, "import java.util.concurrent.LinkedBlockingQueue;"], [42, ""], [43, "import static org.easybatch.core.impl.EngineBuilder.aNewEngine;"], [52, "    private static final int THREAD_POOL_SIZE = 3;"], [59, "        // Create queues"], [63, "        // Create a round robin record dispatcher that will be used to distribute records to worker engines"], [64, "        RoundRobinRecordDispatcher roundRobinRecordDispatcher = new RoundRobinRecordDispatcher(Arrays.asList(queue1, queue2));"], [66, "        // Build a master engine that will read records from the data source and dispatch them to worker engines"], [67, "        Engine masterEngine = aNewEngine()"], [68, "                .reader(new FlatFileRecordReader(tweets))"], [69, "                .processor(roundRobinRecordDispatcher)"], [70, "                .batchProcessEventListener(new PoisonRecordBroadcaster(roundRobinRecordDispatcher))"], [71, "                .build();"], [73, "        // Build worker engines"], [74, "        Engine workerEngine1 = buildWorkerEngine(queue1);"], [75, "        Engine workerEngine2 = buildWorkerEngine(queue2);"], [77, "        // Create a thread pool to call master and worker engines in parallel"], [78, "        ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);"], [80, "        // Submit workers to executor service"], [81, "        executorService.submit(masterEngine);"], [82, "        executorService.submit(workerEngine1);"], [83, "        executorService.submit(workerEngine2);"], [85, "        // Shutdown executor service"], [90, "    public static Engine buildWorkerEngine(BlockingQueue<Record> queue) {"], [91, "        return aNewEngine()"]], "deleted": [[27, "import org.easybatch.core.api.Report;"], [29, "import org.easybatch.core.api.RecordDispatcher;"], [32, "import org.easybatch.core.impl.EngineBuilder;"], [34, "import org.easybatch.core.dispatcher.RoundRobinRecordDispatcher;"], [35, "import org.easybatch.core.record.PoisonRecord;"], [37, "import org.easybatch.tools.reporting.DefaultReportMerger;"], [38, "import org.easybatch.tools.reporting.ReportMerger;"], [43, "import java.util.concurrent.*;"], [52, "    private static final int THREAD_POOL_SIZE = 2;"], [59, "        //Create queues"], [63, "        // Build easy batch engines"], [64, "        Engine engine1 = buildBatchEngine(queue1);"], [65, "        Engine engine2 = buildBatchEngine(queue2);"], [66, ""], [67, "        //create a 2 threads pool to call engines in parallel"], [68, "        ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);"], [70, "        //submit workers to executor service"], [71, "        Future<Report> reportFuture1 = executorService.submit(engine1);"], [72, "        Future<Report> reportFuture2 = executorService.submit(engine2);"], [73, ""], [74, "        //create a record dispatcher to dispatch records to previously created queues"], [75, "        RecordDispatcher recordDispatcher = new RoundRobinRecordDispatcher(Arrays.asList(queue1, queue2));"], [76, ""], [77, "        //read data source and dispatch records to queues in round-robin fashion"], [78, "        FlatFileRecordReader flatFileRecordReader = new FlatFileRecordReader(tweets);"], [79, "        flatFileRecordReader.open();"], [80, "        while (flatFileRecordReader.hasNextRecord()) {"], [81, "            Record record = flatFileRecordReader.readNextRecord();"], [82, "            recordDispatcher.dispatchRecord(record);"], [83, "        }"], [84, "        flatFileRecordReader.close();"], [86, "        //send poison records when all input data has been dispatched to workers"], [87, "        recordDispatcher.dispatchRecord(new PoisonRecord());"], [89, "        //wait for easy batch instances termination and get partial reports"], [90, "        Report report1 = reportFuture1.get();"], [91, "        Report report2 = reportFuture2.get();"], [93, "        //merge partial reports into a global one"], [94, "        ReportMerger reportMerger = new DefaultReportMerger();"], [95, "        Report finalReport = reportMerger.mergerReports(report1, report2);"], [96, "        System.out.println(finalReport);"], [98, "        //shutdown executor service"], [103, "    public static Engine buildBatchEngine(BlockingQueue<Record> queue) {"], [104, "        return new EngineBuilder()"]]}, "num_lines_added": 30, "num_lines_removed": 43}