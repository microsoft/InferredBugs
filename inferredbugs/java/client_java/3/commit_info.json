{"hash": "5638a2a0fca88b9cfc9ecd6eabb9eb08c522f7f7", "message": "Build upon Michal's work for jvm stats.\n\nSpaces are okay in label values, no need to switch to hyphens.\nExport committed and max separately.\nInline rather than using constants, so it's easier to read.\nUse a summary for GC stats.\n\nAdd a way to pick up current and future jvm collectors.", "file_num_lines": 128, "diff_parsed": {"added": [[15, "import static org.mockito.Mockito.when;"], [30, "    when(mockPoolsBean1.getName()).thenReturn(\"PS Eden Space\");"], [31, "    when(mockPoolsBean1.getUsage()).thenReturn(mockUsage1);"], [32, "    when(mockPoolsBean2.getName()).thenReturn(\"PS Old Gen\");"], [33, "    when(mockPoolsBean2.getUsage()).thenReturn(mockUsage2);"], [34, "    when(mockMemoryBean.getHeapMemoryUsage()).thenReturn(mockUsage1);"], [35, "    when(mockMemoryBean.getNonHeapMemoryUsage()).thenReturn(mockUsage2);"], [36, "    when(mockUsage1.getUsed()).thenReturn(500000L);"], [37, "    when(mockUsage1.getCommitted()).thenReturn(1000000L);"], [38, "    when(mockUsage1.getMax()).thenReturn(2000000L);"], [39, "    when(mockUsage2.getUsed()).thenReturn(10000L);"], [40, "    when(mockUsage2.getCommitted()).thenReturn(20000L);"], [41, "    when(mockUsage2.getMax()).thenReturn(3000000L);"], [50, "            \"jvm_memory_pool_bytes_used\","], [52, "            new String[]{\"PS Eden Space\"}),"], [57, "            \"jvm_memory_pool_bytes_committed\","], [58, "            new String[]{\"pool\"},"], [59, "            new String[]{\"PS Eden Space\"}),"], [60, "        .0000001);"], [61, "    assertEquals("], [62, "        2000000L,"], [63, "        registry.getSampleValue("], [64, "            \"jvm_memory_pool_bytes_max\","], [66, "            new String[]{\"PS Eden Space\"}),"], [71, "            \"jvm_memory_pool_bytes_used\","], [73, "            new String[]{\"PS Old Gen\"}),"], [78, "            \"jvm_memory_pool_bytes_committed\","], [80, "            new String[]{\"PS Old Gen\"}),"], [81, "        .0000001);"], [82, "    assertEquals("], [83, "        3000000L,"], [84, "        registry.getSampleValue("], [85, "            \"jvm_memory_pool_bytes_max\","], [86, "            new String[]{\"pool\"},"], [87, "            new String[]{\"PS Old Gen\"}),"], [96, "            \"jvm_memory_bytes_used\","], [103, "            \"jvm_memory_bytes_committed\","], [104, "            new String[]{\"area\"},"], [105, "            new String[]{\"heap\"}),"], [106, "        .0000001);"], [107, "    assertEquals("], [108, "        2000000L,"], [109, "        registry.getSampleValue("], [110, "            \"jvm_memory_bytes_max\","], [117, "            \"jvm_memory_bytes_used\","], [124, "            \"jvm_memory_bytes_committed\","], [125, "            new String[]{\"area\"},"], [126, "            new String[]{\"nonheap\"}),"], [127, "        .0000001);"], [128, "    assertEquals("], [129, "        3000000L,"], [130, "        registry.getSampleValue("], [131, "            \"jvm_memory_bytes_max\","]], "deleted": [[15, ""], [30, "    Mockito.when(mockPoolsBean1.getName()).thenReturn(\"PS Eden Space\");"], [31, "    Mockito.when(mockPoolsBean1.getUsage()).thenReturn(mockUsage1);"], [32, "    Mockito.when(mockPoolsBean2.getName()).thenReturn(\"PS Old Gen\");"], [33, "    Mockito.when(mockPoolsBean2.getUsage()).thenReturn(mockUsage2);"], [34, "    Mockito.when(mockMemoryBean.getHeapMemoryUsage()).thenReturn(mockUsage1);"], [35, "    Mockito.when(mockMemoryBean.getNonHeapMemoryUsage()).thenReturn(mockUsage2);"], [36, "    Mockito.when(mockUsage1.getUsed()).thenReturn(500000L);"], [37, "    Mockito.when(mockUsage1.getMax()).thenReturn(1000000L);"], [38, "    Mockito.when(mockUsage2.getUsed()).thenReturn(10000L);"], [39, "    Mockito.when(mockUsage2.getMax()).thenReturn(-1L);  // will use committed instead"], [40, "    Mockito.when(mockUsage2.getCommitted()).thenReturn(20000L);"], [49, "            MemoryPoolsExports.POOLS_USED_METRIC,"], [51, "            new String[]{\"PS-Eden-Space\"}),"], [56, "            MemoryPoolsExports.POOLS_LIMIT_METRIC,"], [58, "            new String[]{\"PS-Eden-Space\"}),"], [63, "            MemoryPoolsExports.POOLS_USED_METRIC,"], [65, "            new String[]{\"PS-Old-Gen\"}),"], [70, "            MemoryPoolsExports.POOLS_LIMIT_METRIC,"], [72, "            new String[]{\"PS-Old-Gen\"}),"], [81, "            MemoryPoolsExports.MEMORY_USED_METRIC,"], [88, "            MemoryPoolsExports.MEMORY_LIMIT_METRIC,"], [95, "            MemoryPoolsExports.MEMORY_USED_METRIC,"], [102, "            MemoryPoolsExports.MEMORY_LIMIT_METRIC,"]]}, "num_lines_added": 53, "num_lines_removed": 24}