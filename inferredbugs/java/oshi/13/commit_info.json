{"hash": "420d86014d0c903c346a98c07690b0d5951128df", "message": "Improve processing of memory information, add docs", "file_num_lines": 94, "diff_parsed": {"added": [[28, "import com.sun.jna.ptr.IntByReference;"], [29, "import com.sun.jna.ptr.PointerByReference;"], [32, "import oshi.jna.platform.windows.Pdh;"], [33, "import oshi.jna.platform.windows.Pdh.PdhFmtCounterValue;"], [34, "import oshi.jna.platform.windows.Psapi;"], [35, "import oshi.jna.platform.windows.Psapi.PERFORMANCE_INFORMATION;"], [46, "    private PERFORMANCE_INFORMATION perfInfo = new PERFORMANCE_INFORMATION();"], [47, ""], [48, "    private long lastUpdate = 0;"], [52, "    // Set up Performance Data Helper thread for % pagefile usage"], [53, "    private PointerByReference pagefileQuery = new PointerByReference();"], [54, ""], [55, "    private final IntByReference pFour = new IntByReference(4);"], [56, ""], [57, "    private PointerByReference pPagefile;"], [58, ""], [60, "        initPdh();"], [61, "    }"], [62, ""], [63, "    /**"], [64, "     * Initialize performance monitor counter"], [65, "     */"], [66, "    private void initPdh() {"], [67, "        // Open Pagefile query"], [68, "        int pdhOpenPagefileQueryError = Pdh.INSTANCE.PdhOpenQuery(null, pFour, pagefileQuery);"], [69, "        if (pdhOpenPagefileQueryError != 0) {"], [70, "            LOG.error(\"Failed to open PDH Pagefile Query. Error code: {}\","], [71, "                    String.format(\"0x%08X\", pdhOpenPagefileQueryError));"], [72, "        }"], [73, "        if (pdhOpenPagefileQueryError == 0) {"], [74, "            // \\Paging File(_Total)\\% Usage"], [75, "            String pagefilePath = \"\\\\Paging File(_Total)\\\\% Usage\";"], [76, "            pPagefile = new PointerByReference();"], [77, "            int pdhAddPagefileCounterError = Pdh.INSTANCE.PdhAddEnglishCounterA(pagefileQuery.getValue(), pagefilePath,"], [78, "                    pFour, pPagefile);"], [79, "            if (pdhAddPagefileCounterError != 0) {"], [80, "                LOG.error(\"Failed to add PDH Pagefile Counter. Error code: {}\","], [81, "                        String.format(\"0x%08X\", pdhAddPagefileCounterError));"], [82, "            }"], [83, "        }"], [84, "        // Initialize by collecting data the first time"], [85, "        Pdh.INSTANCE.PdhCollectQueryData(pagefileQuery.getValue());"], [86, ""], [87, "        // Set up hook to close the query on shutdown"], [88, "        Runtime.getRuntime().addShutdownHook(new Thread() {"], [89, "            @Override"], [90, "            public void run() {"], [91, "                Pdh.INSTANCE.PdhCloseQuery(pagefileQuery.getValue());"], [92, "            }"], [93, "        });"], [94, "    }"], [95, ""], [96, "    /**"], [97, "     * Update the performance information no more frequently than every 100ms"], [98, "     */"], [99, "    private void updatePerfInfo() {"], [100, "        long now = System.currentTimeMillis();"], [101, "        if (now - this.lastUpdate > 100) {"], [102, "            if (!Psapi.INSTANCE.GetPerformanceInfo(perfInfo, perfInfo.size())) {"], [103, "                LOG.error(\"Failed to get Performance Info. Error code: {}\", Kernel32.INSTANCE.GetLastError());"], [104, "                this.perfInfo = null;"], [105, "            }"], [106, "            this.lastUpdate = now;"], [112, "        updatePerfInfo();"], [113, "        return this.perfInfo == null ? 0L : perfInfo.PageSize.longValue() * perfInfo.PhysicalAvailable.longValue();"], [118, "        updatePerfInfo();"], [119, "        return this.perfInfo == null ? 0L : perfInfo.PageSize.longValue() * perfInfo.PhysicalTotal.longValue();"], [124, "        updatePerfInfo();"], [125, "        return this.perfInfo == null ? 0L"], [126, "                : perfInfo.PageSize.longValue()"], [127, "                        * (perfInfo.CommitLimit.longValue() - perfInfo.PhysicalTotal.longValue());"], [132, "        PdhFmtCounterValue phPagefileCounterValue = new PdhFmtCounterValue();"], [133, "        int ret = Pdh.INSTANCE.PdhGetFormattedCounterValue(pPagefile.getValue(), Pdh.PDH_FMT_LARGE | Pdh.PDH_FMT_1000,"], [134, "                null, phPagefileCounterValue);"], [135, "        if (ret != 0) {"], [136, "            LOG.warn(\"Failed to get Pagefile % Usage counter. Error code: {}\", String.format(\"0x%08X\", ret));"], [139, "        // Returns results in 1000's of percent, e.g. 5% is 5000"], [140, "        // Multiply by page file size and Divide by 100 * 1000"], [141, "        // Putting division at end avoids need to cast division to double"], [142, "        return getSwapTotal() * phPagefileCounterValue.value.largeValue / 100000;"], [147, "        return NullAwareJsonObjectBuilder.wrap(jsonFactory.createObjectBuilder()).add(\"available\", getAvailable())"], [148, "                .add(\"total\", getTotal()).add(\"swapTotal\", getSwapTotal()).add(\"swapUsed\", getSwapUsed()).build();"]], "deleted": [[28, "import com.sun.jna.platform.win32.WinBase.MEMORYSTATUSEX;"], [29, "import java.math.BigDecimal;"], [42, "    private MEMORYSTATUSEX _memory = new MEMORYSTATUSEX();"], [47, "        if (!Kernel32.INSTANCE.GlobalMemoryStatusEx(this._memory)) {"], [48, "            LOG.error(\"Failed to Initialize MemoryStatusEx. Error code: {}\", Kernel32.INSTANCE.GetLastError());"], [49, "            this._memory = null;"], [55, "        if (!Kernel32.INSTANCE.GlobalMemoryStatusEx(this._memory)) {"], [56, "            LOG.error(\"Failed to Initialize MemoryStatusEx. Error code: {}\", Kernel32.INSTANCE.GetLastError());"], [57, "            this._memory = null;"], [58, "            return 0L;"], [59, "        }"], [60, "        return this._memory.ullAvailPhys.longValue();"], [65, "        if (this._memory == null) {"], [66, "            LOG.warn(\"MemoryStatusEx not initialized. No total memory data available\");"], [67, "            return 0L;"], [68, "        }"], [69, "        return this._memory.ullTotalPhys.longValue();"], [74, "        // NOTE: other ways to get the Windows page file size are:"], [75, "        // 1 - The Win32_PageFile WMI class via OLE32 call;"], [76, "        // 2 - The EnumPageFiles via Psapi call."], [77, ""], [78, "        if (!Kernel32.INSTANCE.GlobalMemoryStatusEx(this._memory)) {"], [79, "            LOG.error(\"Failed to Initialize MemoryStatusEx. Error code: {}\", Kernel32.INSTANCE.GetLastError());"], [80, "            this._memory = null;"], [81, "            return 0L;"], [82, "        }"], [83, ""], [84, "        return this._memory.ullTotalPageFile.longValue() - this._memory.ullTotalPhys.longValue();"], [89, "        long total;"], [90, "        long available;"], [91, ""], [92, "        if (!Kernel32.INSTANCE.GlobalMemoryStatusEx(this._memory)) {"], [93, "            LOG.error(\"Failed to Initialize MemoryStatusEx. Error code: {}\", Kernel32.INSTANCE.GetLastError());"], [94, "            this._memory = null;"], [97, ""], [98, "        total = this.getSwapTotal();"], [99, "        available = this._memory.ullAvailPageFile.longValue() - this._memory.ullAvailPhys.longValue();"], [100, ""], [101, "        return total - available;"], [106, "        return NullAwareJsonObjectBuilder.wrap(jsonFactory.createObjectBuilder()).add(\"available\", getAvailable()).add(\"total\", getTotal()).add(\"swapTotal\", getSwapTotal()).add(\"swapUsed\", getSwapUsed()).build();"]]}, "num_lines_added": 82, "num_lines_removed": 40}