{"hash": "be79773e072c709fcff47c7b97be93378070e66b", "message": "WMI efficiency improvements", "file_num_lines": 238, "diff_parsed": {"added": [[66, "     * For WMI queries requiring array input"], [67, "     */"], [68, "    private static ValueType[] STRING_TYPE = { ValueType.STRING };"], [69, "    private static ValueType[] LONG_TYPE = { ValueType.LONG };"], [70, "    private static ValueType[] FLOAT_TYPE = { ValueType.FLOAT };"], [71, ""], [72, "    /**"], [87, "                wmiClass, whereClause, LONG_TYPE);"], [112, "                wmiClass, whereClause, LONG_TYPE);"], [139, "                wmiClass, whereClause, FLOAT_TYPE);"], [164, "                wmiClass, whereClause, FLOAT_TYPE);"], [191, "                wmiClass, whereClause, STRING_TYPE);"], [216, "                wmiClass, whereClause, STRING_TYPE);"], [240, "     *            An array of types corresponding to the properties, or a single"], [241, "     *            element array"], [245, "     *         propertyTypes array. If only one propertyType is given, all"], [246, "     *         Objects will have that type. It is the responsibility of the"], [247, "     *         caller to cast the returned objects."], [402, "        if (propertyTypes.length > 1 && properties.length != propertyTypes.length) {"], [403, "            throw new IllegalArgumentException(\"Property type array size must be 1 or equal to properties array size.\");"], [425, "                ValueType propertyType = propertyTypes.length > 1 ? propertyTypes[p] : propertyTypes[0];"], [426, "                switch (propertyType) {"], [430, "                case LONG: // WinDef.LONG TODO improve in JNA 4.3"], [444, "                    throw new IllegalArgumentException(\"Unimplemented enum type: \" + propertyType.toString());"]], "deleted": [[80, "                wmiClass, whereClause, ValueType.LONG);"], [105, "                wmiClass, whereClause, ValueType.LONG);"], [132, "                wmiClass, whereClause, ValueType.FLOAT);"], [157, "                wmiClass, whereClause, ValueType.FLOAT);"], [184, "                wmiClass, whereClause, ValueType.STRING);"], [209, "                wmiClass, whereClause, ValueType.STRING);"], [233, "     *            An array of types corresponding to the properties"], [237, "     *         propertyTypes array. It is the responsibility of the caller to"], [238, "     *         cast the returned objects."], [257, "     * @param valType"], [258, "     *            The type of data being queried, to control how VARIANT is"], [259, "     *            parsed"], [260, "     * @return A map, with the string value of each property as the key,"], [261, "     *         containing a list of Objects which can be cast appropriately per"], [262, "     *         valType. The order of objects in each list corresponds to the"], [263, "     *         other lists."], [264, "     */"], [265, "    private static Map<String, List<Object>> queryWMI(String namespace, String properties, String wmiClass,"], [266, "            String whereClause, ValueType valType) {"], [267, "        // Set up empty map"], [268, "        String[] props = properties.split(\",\");"], [269, "        ValueType[] propertyTypes = new ValueType[props.length];"], [270, "        for (int i = 0; i < props.length; i++) {"], [271, "            propertyTypes[i] = valType;"], [272, "        }"], [273, "        return queryWMI(namespace, properties, wmiClass, whereClause, propertyTypes);"], [274, "    }"], [275, ""], [276, "    /**"], [277, "     * Query WMI for values"], [278, "     *"], [279, "     * @param namespace"], [280, "     *            The namespace to query"], [281, "     * @param properties"], [282, "     *            A single property or comma-delimited list of properties to"], [283, "     *            enumerate"], [284, "     * @param wmiClass"], [285, "     *            The WMI class to query"], [422, "        if (properties.length != propertyTypes.length) {"], [423, "            throw new IllegalArgumentException(\"Property type array size must equal properties array size.\");"], [445, "                switch (propertyTypes[p]) {"], [449, "                case LONG: // WinDef.LONG"], [463, "                    LOG.error(\"Unimplemented enum type.\");"]]}, "num_lines_added": 24, "num_lines_removed": 43}