{"hash": "fdce1f98a0610e832861f2cbf1ad24e173d41b08", "message": "Use IOKit to get Mac USB info (#188)", "file_num_lines": 101, "diff_parsed": {"added": [[22, "import java.util.Collections;"], [23, "import java.util.HashMap;"], [25, "import java.util.Map;"], [26, ""], [27, "import com.sun.jna.Memory;"], [28, "import com.sun.jna.Pointer;"], [29, "import com.sun.jna.ptr.IntByReference;"], [30, "import com.sun.jna.ptr.LongByReference;"], [34, "import oshi.jna.platform.mac.CoreFoundation.CFStringRef;"], [35, "import oshi.jna.platform.mac.CoreFoundation.CFTypeRef;"], [36, "import oshi.jna.platform.mac.IOKit;"], [37, "import oshi.util.platform.mac.CfUtil;"], [38, "import oshi.util.platform.mac.IOKitUtil;"], [48, "    /*"], [49, "     * Maps to store information using RegistryEntryID as the key"], [50, "     */"], [51, "    private static Map<Long, String> nameMap = new HashMap<>();"], [52, "    private static Map<Long, String> vendorMap = new HashMap<>();"], [53, "    private static Map<Long, String> serialMap = new HashMap<>();"], [54, "    private static Map<Long, List<Long>> hubMap = new HashMap<>();"], [55, ""], [56, "    /*"], [57, "     * Strings for querying device information from registry"], [58, "     */"], [59, "    private static final CFStringRef cfVendor = CFStringRef.toCFString(\"USB Vendor Name\");"], [60, "    private static final CFStringRef cfSerial = CFStringRef.toCFString(\"USB Serial Number\");"], [61, ""], [66, "        // Reusable buffer for getting IO name strings"], [67, "        Pointer buffer = new Memory(128); // io_name_t is char[128]"], [68, "        // Build a list of devices with no parent; these will be the roots"], [69, "        List<Long> usbControllers = new ArrayList<>();"], [70, "        // Empty out maps"], [71, "        nameMap.clear();"], [72, "        vendorMap.clear();"], [73, "        serialMap.clear();"], [74, "        hubMap.clear();"], [75, ""], [76, "        // Iterate over USB Controllers. All devices are children of one of"], [77, "        // these controllers in the \"IOService\" plane"], [78, "        IntByReference iter = new IntByReference();"], [79, "        IOKitUtil.getMatchingServices(\"IOUSBController\", iter);"], [80, "        int device = IOKit.INSTANCE.IOIteratorNext(iter.getValue());"], [81, "        while (device != 0) {"], [82, "            // Unique global identifier for this device"], [83, "            LongByReference id = new LongByReference();"], [84, "            IOKit.INSTANCE.IORegistryEntryGetRegistryEntryID(device, id);"], [85, "            usbControllers.add(id.getValue());"], [86, ""], [87, "            // Get device name and store in map"], [88, "            IOKit.INSTANCE.IORegistryEntryGetName(device, buffer);"], [89, "            nameMap.put(id.getValue(), buffer.getString(0));"], [90, "            // Controllers don't have vendor and serial so ignore at this level"], [91, ""], [92, "            // Now iterate the children of this device in the \"IOService\" plane."], [93, "            // If devices have a parent, link to that parent, otherwise link to"], [94, "            // the controller as parent"], [95, "            IntByReference childIter = new IntByReference();"], [96, "            IOKit.INSTANCE.IORegistryEntryGetChildIterator(device, \"IOService\", childIter);"], [97, "            int childDevice = IOKit.INSTANCE.IOIteratorNext(childIter.getValue());"], [98, "            while (childDevice != 0) {"], [99, "                // Unique global identifier for this device"], [100, "                LongByReference childId = new LongByReference();"], [101, "                IOKit.INSTANCE.IORegistryEntryGetRegistryEntryID(childDevice, childId);"], [102, ""], [103, "                // Get this device's parent in the \"IOUSB\" plane"], [104, "                IntByReference parent = new IntByReference();"], [105, "                IOKit.INSTANCE.IORegistryEntryGetParentEntry(childDevice, \"IOUSB\", parent);"], [106, ""], [107, "                // If parent is named \"Root\" ignore that id and use the"], [108, "                // controller's id"], [109, "                LongByReference parentId = id;"], [110, "                IOKit.INSTANCE.IORegistryEntryGetName(parent.getValue(), buffer);"], [111, "                if (!buffer.getString(0).equals(\"Root\")) {"], [112, "                    // Unique global identifier for the parent"], [113, "                    parentId = new LongByReference();"], [114, "                    IOKit.INSTANCE.IORegistryEntryGetRegistryEntryID(parent.getValue(), parentId);"], [116, "                // Store parent in map"], [117, "                if (!hubMap.containsKey(parentId.getValue())) {"], [118, "                    hubMap.put(parentId.getValue(), new ArrayList<Long>());"], [120, "                hubMap.get(parentId.getValue()).add(childId.getValue());"], [122, "                // Get device name and store in map"], [123, "                IOKit.INSTANCE.IORegistryEntryGetName(childDevice, buffer);"], [124, "                nameMap.put(childId.getValue(), buffer.getString(0));"], [125, "                // Get vendor and store in map"], [126, "                CFTypeRef vendorRef = IOKit.INSTANCE.IORegistryEntryCreateCFProperty(childDevice, cfVendor,"], [127, "                        CfUtil.ALLOCATOR, 0);"], [128, "                if (vendorRef != null && vendorRef.getPointer() != null) {"], [129, "                    vendorMap.put(childId.getValue(), CfUtil.cfPointerToString(vendorRef.getPointer()));"], [131, "                CfUtil.release(vendorRef);"], [132, "                // Get serial and store in map"], [133, "                CFTypeRef serialRef = IOKit.INSTANCE.IORegistryEntryCreateCFProperty(childDevice, cfSerial,"], [134, "                        CfUtil.ALLOCATOR, 0);"], [135, "                if (serialRef != null && serialRef.getPointer() != null) {"], [136, "                    serialMap.put(childId.getValue(), CfUtil.cfPointerToString(serialRef.getPointer()));"], [137, "                }"], [138, "                CfUtil.release(serialRef);"], [139, ""], [140, "                IOKit.INSTANCE.IOObjectRelease(childDevice);"], [141, "                childDevice = IOKit.INSTANCE.IOIteratorNext(childIter.getValue());"], [143, "            IOKit.INSTANCE.IOObjectRelease(childIter.getValue());"], [144, ""], [145, "            IOKit.INSTANCE.IOObjectRelease(device);"], [146, "            device = IOKit.INSTANCE.IOIteratorNext(iter.getValue());"], [148, "        IOKit.INSTANCE.IOObjectRelease(iter.getValue());"], [150, "        // Build tree and return"], [151, "        List<UsbDevice> controllerDevices = new ArrayList<UsbDevice>();"], [152, "        for (Long controller : usbControllers) {"], [153, "            controllerDevices.add(getDeviceAndChildren(controller));"], [155, "        return controllerDevices.toArray(new UsbDevice[controllerDevices.size()]);"], [159, "     * Recursively creates MacUsbDevices by fetching information from maps to"], [160, "     * populate fields"], [162, "     * @param registryEntryId"], [163, "     *            The device unique registry id."], [164, "     * @return A MacUsbDevice corresponding to this device"], [166, "    private static MacUsbDevice getDeviceAndChildren(Long registryEntryId) {"], [167, "        List<Long> childIds = hubMap.getOrDefault(registryEntryId, new ArrayList<>());"], [168, "        List<MacUsbDevice> usbDevices = new ArrayList<>();"], [169, "        for (Long id : childIds) {"], [170, "            usbDevices.add(getDeviceAndChildren(id));"], [172, "        Collections.sort(usbDevices);"], [173, "        return new MacUsbDevice(nameMap.getOrDefault(registryEntryId, \"\"), vendorMap.getOrDefault(registryEntryId, \"\"),"], [174, "                serialMap.getOrDefault(registryEntryId, \"\"), usbDevices.toArray(new UsbDevice[usbDevices.size()]));"]], "deleted": [[23, "import java.util.regex.Matcher;"], [24, "import java.util.regex.Pattern;"], [28, "import oshi.util.ExecutingCommand;"], [34, "    private static final Pattern XML_STRING = Pattern.compile(\"<string>(.*?)</string>\");"], [35, ""], [44, "        // Get heirarchical list of USB devices"], [45, "        List<String> xml = ExecutingCommand.runNative(\"system_profiler SPUSBDataType -xml\");"], [46, "        // Look for <key>_items</key> which prcedes <array> ... </array>"], [47, "        // Each pair of <dict> ... </dict> following is a USB device/hub"], [48, "        List<String> items = new ArrayList<>();"], [49, "        boolean copy = false;"], [50, "        int indent = 0;"], [51, "        for (String s : xml) {"], [52, "            s = s.trim();"], [53, "            // Read until <key>_items</key>"], [54, "            if (!copy && s.equals(\"<key>_items</key>\")) {"], [55, "                copy = true;"], [56, "                continue;"], [57, "            }"], [58, "            // If we've fond items indent with each <array> tag and copy over"], [59, "            // everything with indent > 0."], [60, "            if (copy) {"], [61, "                if (s.equals(\"</array>\")) {"], [62, "                    if (--indent == 0) {"], [63, "                        copy = false;"], [64, "                        continue;"], [65, "                    }"], [66, "                }"], [67, "                if (indent > 0) {"], [68, "                    items.add(s);"], [70, "                if (s.equals(\"<array>\")) {"], [71, "                    indent++;"], [73, "            }"], [74, "        }"], [75, "        // Items now contains 0 or more sets of <dict>...</dict>"], [76, "        return getUsbDevices(items);"], [77, "    }"], [79, "    /**"], [80, "     * Parses a list of xml into USB devices"], [81, "     *"], [82, "     * @param items"], [83, "     *            A list of XML beginning containing 0 or more <dict>...</dict>"], [84, "     *            entries corresponding to USB buses, hubs, or devices"], [85, "     * @return An array of usb devices corresponding to the <dict> entries"], [86, "     */"], [87, "    private static UsbDevice[] getUsbDevices(List<String> items) {"], [88, "        List<UsbDevice> usbDevices = new ArrayList<UsbDevice>();"], [89, "        List<String> item = new ArrayList<>();"], [90, "        // Separate out item between each pair of <dict>...</dict> tags"], [91, "        int indent = 0;"], [92, "        for (String s : items) {"], [93, "            if (s.equals(\"</dict>\")) {"], [94, "                // If this is the final closing tag, add the singular device"], [95, "                // we've been accumulating in the item list"], [96, "                if (--indent == 0) {"], [97, "                    usbDevices.add(getUsbDevice(item));"], [98, "                    item.clear();"], [99, "                    continue;"], [102, "            if (indent > 0) {"], [103, "                item.add(s);"], [104, "            }"], [105, "            if (s.equals(\"<dict>\")) {"], [106, "                indent++;"], [107, "            }"], [109, "        return usbDevices.toArray(new UsbDevice[usbDevices.size()]);"], [110, "    }"], [112, "    /**"], [113, "     * Parses a list of xml (selected from inside <dict>...</dict> tags) into a"], [114, "     * USB device"], [115, "     *"], [116, "     * @param data"], [117, "     *            A list of XML beginning containing an XML entry corresponding"], [118, "     *            to a USB bus, hub, or device"], [119, "     * @return A usb device corresponding to the entry"], [120, "     */"], [121, "    private static UsbDevice getUsbDevice(List<String> data) {"], [122, "        String name = \"\";"], [123, "        boolean readName = false;"], [124, "        String vendor = \"\";"], [125, "        boolean readVendor = false;"], [126, "        String serialNumber = \"\";"], [127, "        boolean readSerialNumber = false;"], [128, "        List<String> nested = new ArrayList<>();"], [129, "        boolean readNested = false;"], [130, "        int indent = 0;"], [131, "        for (String s : data) {"], [132, "            if (readName) {"], [133, "                name = parseXmlString(s);"], [134, "                readName = false;"], [135, "                continue;"], [136, "            } else if (readVendor) {"], [137, "                vendor = parseXmlString(s);"], [138, "                readVendor = false;"], [139, "                continue;"], [140, "            } else if (readSerialNumber) {"], [141, "                serialNumber = parseXmlString(s);"], [142, "                readSerialNumber = false;"], [143, "                continue;"], [144, "            }"], [145, "            if (s.equals(\"</array>\") || s.equals(\"</dict>\")) {"], [146, "                if (--indent == 0) {"], [147, "                    readNested = false;"], [148, "                    continue;"], [149, "                }"], [150, "            }"], [151, "            if (readNested && indent > 0) {"], [152, "                nested.add(s);"], [153, "            }"], [154, "            if (s.equals(\"<array>\") || s.equals(\"<dict>\")) {"], [155, "                indent++;"], [156, "            }"], [157, "            if (indent == 0) {"], [158, "                switch (s) {"], [159, "                case \"<key>_name</key>\":"], [160, "                    readName = true;"], [161, "                    break;"], [162, "                case \"<key>manufacturer</key>\":"], [163, "                    readVendor = true;"], [164, "                    break;"], [165, "                case \"<key>serial_num</key>\":"], [166, "                    readSerialNumber = true;"], [167, "                    break;"], [168, "                case \"<key>_items</key>\":"], [169, "                    readNested = true;"], [170, "                    break;"], [171, "                default:"], [172, "                }"], [173, "            }"], [175, "        return new MacUsbDevice(name, vendor, serialNumber, getUsbDevices(nested));"], [179, "     * Get the string between tags"], [181, "     * @param s"], [182, "     *            A string between <string> ... </string> tags"], [183, "     * @return The string"], [185, "    private static String parseXmlString(String s) {"], [186, "        Matcher matcher = XML_STRING.matcher(s);"], [187, "        if (matcher.find()) {"], [188, "            return matcher.group(1);"], [190, "        return \"\";"]]}, "num_lines_added": 122, "num_lines_removed": 138}