    public OSFileStore[] getFileStores() {
        // Use getfsstat to map filesystem paths to types
        Map<String, String> fstype = new HashMap<>();
        // Query with null to get total # required
        int numfs = SystemB.INSTANCE.getfsstat64(null, 0, 0);
        if (numfs > 0) {
            // Create array to hold results
            Statfs[] fs = new Statfs[numfs];
            // Fill array with results
            numfs = SystemB.INSTANCE.getfsstat64(fs, numfs * (new Statfs()).size(), SystemB.MNT_NOWAIT);
            for (int f = 0; f < numfs; f++) {
                // Mount to name will match canonical path.
                // Byte arrays are null-terminated strings
                fstype.put(new String(fs[f].f_mntonname).trim(), new String(fs[f].f_fstypename).trim());
            }
        }
        // Now list file systems
        List<OSFileStore> fsList = new ArrayList<>();
        FileSystemView fsv = FileSystemView.getFileSystemView();
        // Mac file systems are mounted in /Volumes
        File volumes = new File("/Volumes");
        if (volumes != null && volumes.listFiles() != null) {
            for (File f : volumes.listFiles()) {
                // Everyone hates DS Store
                if (f.getName().endsWith(".DS_Store")) {
                    continue;
                }
                String name = fsv.getSystemDisplayName(f);
                String description = "Volume";
                String type = "unknown";
                try {
                    String cp = f.getCanonicalPath();
                    if (cp.equals("/"))
                        name = name + " (/)";
                    FileStore fs = Files.getFileStore(f.toPath());
                    if (localDisk.matcher(fs.name()).matches()) {
                        description = "Local Disk";
                    }
                    if (fs.name().startsWith("localhost:") || fs.name().startsWith("//")) {
                        description = "Network Drive";
                    }
                    if (fstype.containsKey(cp)) {
                        type = fstype.get(cp);
                    }
                } catch (IOException e) {
                    LOG.trace("", e);
                    continue;
                }
                fsList.add(new OSFileStore(name, description, type, f.getUsableSpace(), f.getTotalSpace()));
            }
        }
        return fsList.toArray(new OSFileStore[fsList.size()]);
    }