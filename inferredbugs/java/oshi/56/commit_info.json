{"hash": "287e280e1a401c14fc4d39432d59ec9e90c59054", "message": "Simplify PDH handler, misc. format fixes", "file_num_lines": 82, "diff_parsed": {"added": [[26, "import java.util.HashMap;"], [34, "import oshi.annotation.concurrent.NotThreadSafe;"], [40, " * <p>"], [41, " * Not thread safe. Each query handler should only be used in a single thread."], [43, "@NotThreadSafe"], [48, "    // Map of counter handles"], [49, "    private Map<PerfCounter, HANDLEByReference> counterHandleMap = new HashMap<>();"], [50, "    // The query handle"], [51, "    private HANDLEByReference queryHandle = null;"], [54, "     * Begin monitoring a Performance Data counter."], [58, "     * @return True if the counter was successfully added to the query."], [62, "        if (this.queryHandle == null) {"], [63, "            this.queryHandle = new HANDLEByReference();"], [64, "            if (!PerfDataUtil.openQuery(this.queryHandle)) {"], [65, "                LOG.error(\"Failed to open a query for PDH object: {}\", counter.getObject());"], [66, "                this.queryHandle = null;"], [67, "                return false;"], [68, "            }"], [72, "        if (!PerfDataUtil.addCounter(this.queryHandle, counter.getCounterPath(), p)) {"], [73, "            LOG.error(\"Failed to add counter for PDH object: {}\", counter.getObject());"], [74, "            return false;"], [76, "        counterHandleMap.put(counter, p);"], [77, "        return true;"], [81, "     * Stop monitoring a Performance Data counter."], [88, "        boolean success = false;"], [94, "        if (counterHandleMap.isEmpty()) {"], [95, "            PerfDataUtil.closeQuery(queryHandle);"], [96, "            queryHandle = null;"], [105, "        // Remove all counters from counterHandle map"], [110, "        // Remove query"], [111, "        if (this.queryHandle != null) {"], [112, "            PerfDataUtil.closeQuery(this.queryHandle);"], [114, "        this.queryHandle = null;"], [118, "     * Update all counters on this query."], [123, "    public long updateQuery() {"], [124, "        if (queryHandle == null) {"], [125, "            LOG.error(\"Query does not exist to update.\");"], [128, "        return PerfDataUtil.updateQueryTimestamp(queryHandle);"]], "deleted": [[26, "import java.util.ArrayList;"], [27, "import java.util.Collections;"], [28, "import java.util.List;"], [30, "import java.util.concurrent.ConcurrentHashMap;"], [37, "import oshi.annotation.concurrent.ThreadSafe;"], [44, "@ThreadSafe"], [49, "    private Map<PerfCounter, HANDLEByReference> counterHandleMap = new ConcurrentHashMap<>();"], [50, "    private Map<String, HANDLEByReference> queryHandleMap = new ConcurrentHashMap<>();"], [51, "    private Map<String, List<PerfCounter>> queryCounterMap = new ConcurrentHashMap<>();"], [54, "     * Begin monitoring a Performance Data counter, attached to a query whose key is"], [55, "     * the counter's object."], [59, "     * @return True if the counter was successfully added."], [62, "        return addCounterToQuery(counter, counter.getObject());"], [63, "    }"], [64, ""], [65, "    /**"], [66, "     * Begin monitoring a Performance Data counter, attached to a query whose key is"], [67, "     * the specified string."], [68, "     *"], [69, "     * @param counter"], [70, "     *            A PerfCounter object."], [71, "     * @param key"], [72, "     *            A string used as the key for the query. All counters with this key"], [73, "     *            will be updated when any single counter is updated."], [74, "     * @return True if the counter was successfully added."], [75, "     */"], [76, "    public boolean addCounterToQuery(PerfCounter counter, String key) {"], [78, "        HANDLEByReference q = getOrOpenQuery(key);"], [79, "        if (q == null) {"], [80, "            LOG.error(\"Failed to open a query for PDH object: {}\", counter.getObject());"], [81, "            return false;"], [85, "        if (PerfDataUtil.addCounter(q, counter.getCounterPath(), p)) {"], [86, "            counterHandleMap.put(counter, p);"], [87, "            List<PerfCounter> counterList = queryCounterMap.get(key);"], [88, "            if (counterList != null) {"], [89, "                counterList.add(counter);"], [90, "            }"], [91, "            return true;"], [93, "        return false;"], [97, "     * Stop monitoring a Performance Data counter, attached to a query whose key is"], [98, "     * the counter's object."], [105, "        return removeCounterFromQuery(counter, counter.getObject());"], [106, "    }"], [107, ""], [108, "    /**"], [109, "     * Stop monitoring a Performance Data counter, attached to a query whose key is"], [110, "     * the specified string.."], [111, "     *"], [112, "     * @param counter"], [113, "     *            A PerfCounter object"], [114, "     * @param key"], [115, "     *            A string used as the key for the query. All counters with this key"], [116, "     *            will be updated when any single counter is updated."], [117, "     * @return True if the counter was successfully removed."], [118, "     */"], [119, "    public boolean removeCounterFromQuery(PerfCounter counter, String key) {"], [122, "        boolean success = false;"], [126, "        List<PerfCounter> counterList = queryCounterMap.get(key);"], [127, "        // null if list wasn't present"], [128, "        if (counterList != null && counterList.remove(counter) && counterList.isEmpty()) {"], [129, "            queryCounterMap.remove(key);"], [130, "            PerfDataUtil.closeQuery(queryHandleMap.remove(key));"], [136, "     * Stop monitoring Performance Data counters for a particular queryKey and"], [137, "     * release their resources"], [138, "     *"], [139, "     * @param queryKey"], [140, "     *            The counter object to remove counters from"], [141, "     */"], [142, "    public void removeAllCountersFromQuery(String queryKey) {"], [143, "        // Remove counter list from queryCounter Map"], [144, "        List<PerfCounter> counterList = queryCounterMap.remove(queryKey);"], [145, "        if (counterList == null) {"], [146, "            return;"], [147, "        }"], [148, "        // Remove all counters from counterHandle map"], [149, "        for (PerfCounter counter : counterList) {"], [150, "            HANDLEByReference href = counterHandleMap.remove(counter);"], [151, "            // null if handle wasn't present"], [152, "            if (href != null) {"], [153, "                PerfDataUtil.removeCounter(href);"], [154, "            }"], [155, "        }"], [156, "        // Remove query from query map"], [157, "        HANDLEByReference href = queryHandleMap.remove(queryKey);"], [158, "        if (href != null) {"], [159, "            PerfDataUtil.closeQuery(href);"], [160, "        }"], [161, "    }"], [162, ""], [163, "    /**"], [167, "        // Remove all counter handles"], [172, "        // Remove all queries"], [173, "        for (HANDLEByReference query : queryHandleMap.values()) {"], [174, "            PerfDataUtil.closeQuery(query);"], [176, "        queryHandleMap.clear();"], [177, "        queryCounterMap.clear();"], [181, "     * Update all counters on a query."], [183, "     * @param key"], [184, "     *            The key of the query to update."], [188, "    public long updateQuery(String key) {"], [189, "        if (!queryHandleMap.containsKey(key)) {"], [190, "            LOG.error(\"Query key {} does not exist to update.\", key);"], [193, "        return PerfDataUtil.updateQueryTimestamp(queryHandleMap.get(key));"], [222, "    /**"], [223, "     * Open a query for the given string, or confirm a query is already open for"], [224, "     * that string. Multiple counters may be added to this string, but will all be"], [225, "     * queried at the same time."], [226, "     *"], [227, "     * @param key"], [228, "     *            String to associate with the counter. Most code defaults to the"], [229, "     *            English PDH object name so custom keys should avoid these strings."], [230, "     * @return A handle to the query, or null if an error occurred."], [231, "     */"], [232, "    private HANDLEByReference getOrOpenQuery(String key) {"], [233, "        if (queryHandleMap.containsKey(key)) {"], [234, "            return queryHandleMap.get(key);"], [235, "        }"], [236, "        HANDLEByReference q = new HANDLEByReference();"], [237, "        if (PerfDataUtil.openQuery(q)) {"], [238, "            queryHandleMap.put(key, q);"], [239, "            List<PerfCounter> counterList = Collections.synchronizedList(new ArrayList<>());"], [240, "            queryCounterMap.put(key, counterList);"], [241, "            return q;"], [242, "        }"], [243, "        return null;"], [244, "    }"], [245, ""]]}, "num_lines_added": 38, "num_lines_removed": 127}