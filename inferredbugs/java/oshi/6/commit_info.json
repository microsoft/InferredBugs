{"hash": "f8b01954c00d79c3abb2f96dd4c38df63eb759f7", "message": "Use sysinfo for linux total memory, improve MemAvailable calculation, read /proc all at once", "file_num_lines": 64, "diff_parsed": {"added": [[4, " * Daniel Widdis, 2015"], [5, " * widdis[at]gmail[dot]com"], [12, "import java.io.IOException;"], [13, "import java.util.List;"], [16, "import oshi.software.os.linux.Libc;"], [17, "import oshi.software.os.linux.Libc.Sysinfo;"], [18, "import oshi.util.FileUtil;"], [19, ""], [20, "import com.sun.jna.LastErrorException;"], [21, "import com.sun.jna.Native;"], [24, " * Memory obtained by /proc/meminfo and sysinfo.totalram"], [27, " * @author widdis[at]gmail[dot]com"], [34, "\t\tlong availableMemory = 0;"], [35, "\t\tList<String> memInfo = null;"], [37, "\t\t\tmemInfo = FileUtil.readFile(\"/proc/meminfo\");"], [38, "\t\t} catch (IOException e) {"], [39, "\t\t\tSystem.err.println(\"Problem with: /proc/meminfo\");"], [40, "\t\t\tSystem.err.println(e.getMessage());"], [41, "\t\t\treturn availableMemory;"], [43, "\t\tfor (String checkLine : memInfo) {"], [44, "\t\t\t// If we have MemAvailable, it trumps all. See code in"], [45, "\t\t\t// https://git.kernel.org/cgit/linux/kernel/git/torvalds/"], [46, "\t\t\t// linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773"], [49, "\t\t\t\tavailableMemory = parseMeminfo(memorySplit);"], [51, "\t\t\t} else"], [52, "\t\t\t// Otherwise we combine MemFree + Active(file), Inactive(file), and"], [53, "\t\t\t// SReclaimable. Free+cached is no longer appropriate. MemAvailable"], [54, "\t\t\t// reduces these values using watermarks to estimate when swapping"], [55, "\t\t\t// is prevented, omitted here for simplicity (assuming 0 swap)."], [56, "\t\t\tif (checkLine.startsWith(\"MemFree:\")) {"], [57, "\t\t\t\tString[] memorySplit = checkLine.split(\"\\\\s+\");"], [58, "\t\t\t\tavailableMemory += parseMeminfo(memorySplit);"], [59, "\t\t\t} else if (checkLine.startsWith(\"Active(file):\")) {"], [60, "\t\t\t\tString[] memorySplit = checkLine.split(\"\\\\s+\");"], [61, "\t\t\t\tavailableMemory += parseMeminfo(memorySplit);"], [62, "\t\t\t} else if (checkLine.startsWith(\"Inactive(file):\")) {"], [64, "\t\t\t\tavailableMemory += parseMeminfo(memorySplit);"], [65, "\t\t\t} else if (checkLine.startsWith(\"SReclaimable:\")) {"], [67, "\t\t\t\tavailableMemory += parseMeminfo(memorySplit);"], [70, "\t\treturn availableMemory;"], [75, "\t\t\tSysinfo info = new Sysinfo();"], [76, "\t\t\tif (0 != Libc.INSTANCE.sysinfo(info))"], [77, "\t\t\t\tthrow new LastErrorException(\"Error code: \""], [78, "\t\t\t\t\t\t+ Native.getLastError());"], [79, "\t\t\ttotalMemory = info.totalram.longValue() * info.mem_unit;"]], "deleted": [[10, "import java.io.FileNotFoundException;"], [11, "import java.io.FileReader;"], [12, "import java.util.Scanner;"], [17, " * Memory obtained by /proc/meminfo."], [26, "\t\tlong returnCurrentUsageMemory = 0;"], [27, "\t\tScanner in = null;"], [29, "\t\t\tin = new Scanner(new FileReader(\"/proc/meminfo\"));"], [30, "\t\t} catch (FileNotFoundException e) {"], [31, "\t\t\treturn returnCurrentUsageMemory;"], [33, "\t\tin.useDelimiter(\"\\n\");"], [34, "\t\twhile (in.hasNext()) {"], [35, "\t\t\tString checkLine = in.next();"], [38, "\t\t\t\treturnCurrentUsageMemory = parseMeminfo(memorySplit);"], [40, "\t\t\t} else if (checkLine.startsWith(\"MemFree:\")) {"], [42, "\t\t\t\treturnCurrentUsageMemory += parseMeminfo(memorySplit);"], [43, "\t\t\t} else if (checkLine.startsWith(\"Inactive:\")) {"], [45, "\t\t\t\treturnCurrentUsageMemory += parseMeminfo(memorySplit);"], [48, "\t\tin.close();"], [49, "\t\treturn returnCurrentUsageMemory;"], [54, "\t\t\tScanner in = null;"], [55, "\t\t\ttry {"], [56, "\t\t\t\tin = new Scanner(new FileReader(\"/proc/meminfo\"));"], [57, "\t\t\t} catch (FileNotFoundException e) {"], [58, "\t\t\t\ttotalMemory = 0;"], [59, "\t\t\t\treturn totalMemory;"], [60, "\t\t\t}"], [61, "\t\t\tin.useDelimiter(\"\\n\");"], [62, "\t\t\twhile (in.hasNext()) {"], [63, "\t\t\t\tString checkLine = in.next();"], [64, "\t\t\t\tif (checkLine.startsWith(\"MemTotal:\")) {"], [65, "\t\t\t\t\tString[] memorySplit = checkLine.split(\"\\\\s+\");"], [66, "\t\t\t\t\ttotalMemory = parseMeminfo(memorySplit);"], [67, "\t\t\t\t\tbreak;"], [68, "\t\t\t\t}"], [69, "\t\t\t}"], [70, "\t\t\tin.close();"]]}, "num_lines_added": 45, "num_lines_removed": 36}