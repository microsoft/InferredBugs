{"hash": "301a6ecf59b2948c57c13a5120f05913d75a65be", "message": "Make getChildProcesses test more robust to race conditions (#1007)", "file_num_lines": 230, "diff_parsed": {"added": [[34, "import java.util.HashSet;"], [36, "import java.util.Set;"], [126, "        // there's a potential for a race condition here, if a process we"], [127, "        // queried"], [147, "        // Testing child processes is tricky because we don't really know a"], [148, "        // priori what processes might have children, and if we do test the full"], [149, "        // list vs. individual processes, we run into a race condition where"], [150, "        // child processes can start or stop before we measure a second time. So"], [151, "        // we can't really test for one-to-one correspondence of child process"], [152, "        // lists."], [153, "        //"], [154, "        // We can expect code logic failures to occur all/most of the time for"], [155, "        // categories of processes, however, and allow occasional differences"], [156, "        // due to race conditions. So we will test three categories of"], [157, "        // processes: Those with 0 children, those with exactly 1 child process,"], [158, "        // and those with multiple child processes. On the second poll, we"], [159, "        // expect at least half of those categories to still be in the same"], [160, "        // category."], [161, "        //"], [165, "        Set<Integer> zeroChildSet = new HashSet<>();"], [166, "        Set<Integer> oneChildSet = new HashSet<>();"], [167, "        Set<Integer> manyChildSet = new HashSet<>();"], [168, "        // Initialize all processes with no children"], [170, "            zeroChildSet.add(p.getProcessID());"], [172, "        // Move parents with 1 or more children to other set"], [174, "            if (zeroChildSet.contains(p.getParentProcessID())) {"], [175, "                // Zero to One"], [176, "                zeroChildSet.remove(p.getParentProcessID());"], [177, "                oneChildSet.add(p.getParentProcessID());"], [178, "            } else if (oneChildSet.contains(p.getParentProcessID())) {"], [179, "                // One to many"], [180, "                oneChildSet.remove(p.getParentProcessID());"], [181, "                manyChildSet.add(p.getParentProcessID());"], [182, "            }"], [184, "        // Now test that majority of each set is in same category"], [185, "        int matched = 0;"], [186, "        int total = 0;"], [187, "        for (Integer i : zeroChildSet) {"], [188, "            if (os.getChildProcesses(i, 0, null).length == 0) {"], [189, "                matched++;"], [191, "            // Quit if enough to test"], [192, "            if (++total > 9) {"], [196, "        if (total > 4) {"], [197, "            assertTrue(\"Most processes with no children should not suddenly have them.\", matched > total / 2);"], [199, "        matched = 0;"], [200, "        total = 0;"], [201, "        for (Integer i : oneChildSet) {"], [202, "            if (os.getChildProcesses(i, 0, null).length == 1) {"], [203, "                matched++;"], [204, "            }"], [205, "            // Quit if enough to test"], [206, "            if (++total > 9) {"], [207, "                break;"], [210, "        if (total > 4) {"], [211, "            assertTrue(\"Most processes with one child should not suddenly have zero or more than one.\","], [212, "                    matched > total / 2);"], [213, "        }"], [214, "        matched = 0;"], [215, "        total = 0;"], [216, "        for (Integer i : manyChildSet) {"], [217, "            if (os.getChildProcesses(i, 0, null).length > 1) {"], [218, "                matched++;"], [219, "            }"], [220, "            // Quit if enough to test"], [221, "            if (++total > 9) {"], [222, "                break;"], [223, "            }"], [224, "        }"], [225, "        if (total > 4) {"], [226, "            assertTrue(\"Most processes with more than one child should not suddenly have one or less.\","], [227, "                    matched > total / 2);"], [228, "        }"]], "deleted": [[34, "import java.util.HashMap;"], [36, "import java.util.Map;"], [40, "import oshi.PlatformEnum;"], [127, "        // there's a potential for a race condition here, if a process we queried"], [147, "        // Get list of PIDS"], [151, "        Map<Integer, Integer> childMap = new HashMap<>();"], [152, "        // First iteration to set all 0's"], [154, "            childMap.put(p.getProcessID(), 0);"], [155, "            childMap.put(p.getParentProcessID(), 0);"], [157, "        // Second iteration to count children"], [159, "            childMap.put(p.getParentProcessID(), childMap.get(p.getParentProcessID()) + 1);"], [161, "        // Find a PID with 0, 1, and N>1 children"], [162, "        int zeroPid = -1;"], [163, "        int onePid = -1;"], [164, "        int nPid = -1;"], [165, "        int nNum = 0;"], [166, "        int mPid = -1;"], [167, "        int mNum = 0;"], [168, "        for (Integer i : childMap.keySet()) {"], [169, "            if (zeroPid < 0 && childMap.get(i) == 0) {"], [170, "                zeroPid = i;"], [171, "            } else if (onePid < 0 && childMap.get(i) == 1) {"], [172, "                onePid = i;"], [173, "            } else if (nPid < 0 && childMap.get(i) > 1) {"], [174, "                // nPid is probably PID=1 with all PIDs with no other parent"], [175, "                nPid = i;"], [176, "                nNum = childMap.get(i);"], [177, "            } else if (mPid < 0 && childMap.get(i) > 1) {"], [178, "                mPid = i;"], [179, "                mNum = childMap.get(i);"], [181, "            if (zeroPid >= 0 && onePid >= 0 && nPid >= 0 && mPid >= 0) {"], [185, "        if (zeroPid >= 0) {"], [186, "            assertEquals(0, os.getChildProcesses(zeroPid, 0, null).length);"], [188, "        if (SystemInfo.getCurrentPlatformEnum() != PlatformEnum.SOLARIS) {"], [189, "            // Due to race condition, a process may terminate before we count"], [190, "            // its children. Play the odds."], [191, "            // At least one of these tests should work."], [192, "            if (onePid >= 0 && nPid >= 0 && mPid >= 0) {"], [193, "                assertTrue(os.getChildProcesses(onePid, 0, null).length == 1"], [194, "                        || os.getChildProcesses(nPid, 0, null).length == nNum"], [195, "                        || os.getChildProcesses(mPid, 0, null).length == mNum);"]]}, "num_lines_added": 72, "num_lines_removed": 41}