    @Override
    public double getCpuVoltage() {
        ArrayList<String> hwInfo = ExecutingCommand.runNative("wmic cpu get CurrentVoltage");
        for (String checkLine : hwInfo) {
            if (checkLine.length() == 0 || checkLine.toLowerCase().contains("currentvoltage")) {
                continue;
            } else {
                // If successful this line is in tenths of volts
                try {
                    int decivolts = Integer.parseInt(checkLine.trim());
                    if (decivolts > 0) {
                        return decivolts / 10d;
                    }
                } catch (NumberFormatException e) {
                    // If we failed to parse, give up
                }
                break;
            }
        }
        // Above query failed, try something else
        hwInfo = ExecutingCommand.runNative("wmic /namespace:\\\\root\\cimv2 PATH Win32_Processor get CurrentVoltage");
        for (String checkLine : hwInfo) {
            if (checkLine.length() == 0 || checkLine.toLowerCase().contains("currentreading")) {
                continue;
            } else {
                // If successful:
                // If the eighth bit is set, bits 0-6 contain the voltage
                // multiplied by 10. If the eighth bit is not set, then the bit
                // setting in VoltageCaps represents the voltage value.
                try {
                    int decivolts = Integer.parseInt(checkLine.trim());
                    // Check if 8th bit (of 16 bit number) is set
                    if ((decivolts & 0x80) > 0 && decivolts > 0) {
                        return decivolts / 10d;
                    }
                } catch (NumberFormatException e) {
                    // If we failed to parse, give up
                }
                break;
            }
        }
        // Above query failed, try something else
        hwInfo = ExecutingCommand.runNative("wmic /namespace:\\\\root\\cimv2 PATH Win32_Processor get VoltageCaps");
        for (String checkLine : hwInfo) {
            if (checkLine.length() == 0 || checkLine.toLowerCase().contains("currentreading")) {
                continue;
            } else {
                // If successful:
                // Bits 0-3 of the field represent specific voltages that the
                // processor socket can accept.
                try {
                    int voltagebits = Integer.parseInt(checkLine.trim());
                    // Return appropriate voltage
                    if ((voltagebits & 0x1) > 0) {
                        return 5.0;
                    } else if ((voltagebits & 0x2) > 0) {
                        return 3.3;
                    } else if ((voltagebits & 0x4) > 0) {
                        return 2.9;
                    }
                } catch (NumberFormatException e) {
                    // If we failed to parse, give up
                }
                break;
            }
        }
        return 0d;
    }