{"hash": "60e9edeb63167058ed0a432f7227e42f90f29c47", "message": "Make Windows System CPU usage Process-group aware (#1400)", "file_num_lines": 240, "diff_parsed": {"added": [[181, "        // To get load in processor group scenario, we need perfmon counters, but the"], [182, "        // _Total instance is an average rather than total (scaled) number of ticks"], [183, "        // which matches GetSystemTimes() results. We can just query the per-processor"], [184, "        // ticks and add them up. Calling the get() method gains the benefit of"], [185, "        // synchronizing this output with the memoized result of per-processor ticks as"], [186, "        // well."], [188, "        // Sum processor ticks"], [189, "        long[][] procTicks = getProcessorCpuLoadTicks();"], [190, "        for (int i = 0; i < ticks.length; i++) {"], [191, "            for (long[] procTick : procTicks) {"], [192, "                ticks[i] += procTick[i];"], [193, "            }"]], "deleted": [[35, "import com.sun.jna.Native;"], [41, "import com.sun.jna.platform.win32.WinBase;"], [52, "import oshi.driver.windows.perfmon.ProcessorInformation.SystemTickCountProperty;"], [185, "        WinBase.FILETIME lpIdleTime = new WinBase.FILETIME();"], [186, "        WinBase.FILETIME lpKernelTime = new WinBase.FILETIME();"], [187, "        WinBase.FILETIME lpUserTime = new WinBase.FILETIME();"], [188, "        if (!Kernel32.INSTANCE.GetSystemTimes(lpIdleTime, lpKernelTime, lpUserTime)) {"], [189, "            LOG.error(\"Failed to update system idle/kernel/user times. Error code: {}\", Native.getLastError());"], [190, "            return ticks;"], [192, "        // IOwait:"], [193, "        // Windows does not measure IOWait."], [194, ""], [195, "        // IRQ and ticks:"], [196, "        // Percent time raw value is cumulative 100NS-ticks"], [197, "        // Divide by 10_000 to get milliseconds"], [198, ""], [199, "        Map<SystemTickCountProperty, Long> valueMap = ProcessorInformation.querySystemCounters();"], [200, "        ticks[TickType.IRQ.getIndex()] = valueMap.getOrDefault(SystemTickCountProperty.PERCENTINTERRUPTTIME, 0L)"], [201, "                / 10_000L;"], [202, "        ticks[TickType.SOFTIRQ.getIndex()] = valueMap.getOrDefault(SystemTickCountProperty.PERCENTDPCTIME, 0L)"], [203, "                / 10_000L;"], [204, ""], [205, "        ticks[TickType.IDLE.getIndex()] = lpIdleTime.toDWordLong().longValue() / 10_000L;"], [206, "        ticks[TickType.SYSTEM.getIndex()] = lpKernelTime.toDWordLong().longValue() / 10_000L"], [207, "                - ticks[TickType.IDLE.getIndex()];"], [208, "        ticks[TickType.USER.getIndex()] = lpUserTime.toDWordLong().longValue() / 10_000L;"], [209, "        // Additional decrement to avoid double counting in the total array"], [210, "        ticks[TickType.SYSTEM.getIndex()] -= ticks[TickType.IRQ.getIndex()] + ticks[TickType.SOFTIRQ.getIndex()];"]]}, "num_lines_added": 12, "num_lines_removed": 28}