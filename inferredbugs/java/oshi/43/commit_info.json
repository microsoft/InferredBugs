{"hash": "5730ed1fe185c06c3c15e2fcdb8ec915d8f85805", "message": "WindowsFileSystem improvements (#532)\n\n* WindowsFileSystem improvements and network drive test fix\r\n\r\n* line endings", "file_num_lines": 163, "diff_parsed": {"added": [[34, "import oshi.util.platform.windows.WmiUtil.ValueType;"], [52, "    private static final String NAME_PROPERTY = \"Name\";"], [53, "    private static final String DESCRIPTION_PROPERTY = \"Description\";"], [54, "    private static final String PROVIDER_NAME_PROPERTY = \"ProviderName\";"], [55, "    private static final String FILESYSTEM_PROPERTY = \"FileSystem\";"], [56, "    private static final String FREESPACE_PROPERTY = \"Freespace\";"], [57, "    private static final String SIZE_PROPERTY = \"Size\";"], [58, "    private static final String DRIVE_TYPE_PROPERTY = \"DriveType\";"], [59, ""], [60, "    private static final String[] FS_PROPERTIES = new String[] { NAME_PROPERTY, DESCRIPTION_PROPERTY,"], [61, "            PROVIDER_NAME_PROPERTY, FILESYSTEM_PROPERTY, FREESPACE_PROPERTY, SIZE_PROPERTY, DRIVE_TYPE_PROPERTY };"], [62, "    private static final ValueType[] FS_TYPES = { ValueType.STRING, ValueType.STRING, ValueType.STRING,"], [63, "            ValueType.STRING, ValueType.UINT64, ValueType.UINT64, ValueType.UINT32 };"], [64, ""], [67, "    private static final long maxWindowsHandles;"], [68, "    static {"], [69, "        // Determine whether 32-bit or 64-bit handle limit, although both are"], [70, "        // essentially infinite for practical purposes. See"], [71, "        // https://blogs.technet.microsoft.com/markrussinovich/2009/09/29/pushing-the-limits-of-windows-handles/"], [72, "        if (System.getenv(\"ProgramFiles(x86)\") == null) {"], [73, "            maxWindowsHandles = 16_777_216L - 32_768L;"], [74, "        } else {"], [75, "            maxWindowsHandles = 16_777_216L - 65_536L;"], [76, "        }"], [77, "    }"], [78, ""], [82, ""], [193, "        Map<String, List<Object>> drives;"], [201, "        drives = WmiUtil.selectObjectsFrom(null, \"Win32_LogicalDisk\", FS_PROPERTIES, null, FS_TYPES);"], [203, "        for (int i = 0; i < drives.get(NAME_PROPERTY).size(); i++) {"], [204, "            free = (Long) drives.get(FREESPACE_PROPERTY).get(i);"], [205, "            total = (Long) drives.get(SIZE_PROPERTY).get(i);"], [206, "            String description = (String) drives.get(DESCRIPTION_PROPERTY).get(i);"], [207, "            String name = (String) drives.get(NAME_PROPERTY).get(i);"], [208, "            long type = (Long) drives.get(DRIVE_TYPE_PROPERTY).get(i);"], [211, "                Kernel32.INSTANCE.GetVolumeNameForVolumeMountPoint(name + \"\\\\\", chrVolume, BUFSIZE);"], [214, "                volume = (String) drives.get(PROVIDER_NAME_PROPERTY).get(i);"], [221, "            fs.add(new OSFileStore(String.format(\"%s (%s)\", description, name), volume, name + \"\\\\\", getDriveType(name),"], [222, "                    (String) drives.get(FILESYSTEM_PROPERTY).get(i), \"\", free, total));"], [261, "        return maxWindowsHandles;"]], "deleted": [[166, "        Map<String, List<String>> drives;"], [174, "        drives = WmiUtil.selectStringsFrom(null, \"Win32_LogicalDisk\","], [175, "                \"Name,Description,ProviderName,FileSystem,Freespace,Size\", null);"], [176, ""], [177, "        for (int i = 0; i < drives.get(\"Name\").size(); i++) {"], [178, "            free = ParseUtil.parseLongOrDefault(drives.get(\"Freespace\").get(i), 0L);"], [179, "            total = ParseUtil.parseLongOrDefault(drives.get(\"Size\").get(i), 0L);"], [180, "            String description = drives.get(\"Description\").get(i);"], [182, "            long type = WmiUtil.selectUint32From(null, \"Win32_LogicalDisk\", \"DriveType\","], [183, "                    \"WHERE Name = '\" + drives.get(\"Name\").get(i) + \"'\");"], [186, "                Kernel32.INSTANCE.GetVolumeNameForVolumeMountPoint(drives.get(\"Name\").get(i) + \"\\\\\", chrVolume,"], [187, "                        BUFSIZE);"], [190, "                volume = drives.get(\"ProviderName\").get(i);"], [197, "            fs.add(new OSFileStore(String.format(\"%s (%s)\", description, drives.get(\"Name\").get(i)), volume,"], [198, "                    drives.get(\"Name\").get(i) + \"\\\\\", getDriveType(drives.get(\"Name\").get(i)),"], [199, "                    drives.get(\"FileSystem\").get(i), \"\", free, total));"], [238, "        // There is a theoretical limit of 65,536 user handles per session."], [239, "        return 65536L;"]]}, "num_lines_added": 40, "num_lines_removed": 18}