{"hash": "e531390b1fa0778bbf375ea9622066fc3bdcfc53", "message": "Handle JSON nulls", "file_num_lines": 91, "diff_parsed": {"added": [[19, "import java.io.File;"], [20, "import java.io.FilenameFilter;"], [21, "import java.io.IOException;"], [22, "import java.util.List;"], [31, "import oshi.json.NullAwareJsonObjectBuilder;"], [34, "import oshi.util.FileUtil;"], [52, "    private List<String> osRelease;"], [53, ""], [54, "    protected static String getReleaseFilename() {"], [55, "        // Check for existence of primary sources of info:"], [56, "        if ((new File(\"/etc/os-release\")).exists()) {"], [57, "            return \"/etc/os-release\";"], [58, "        }"], [59, "        if ((new File(\"/etc/lsb-release\")).exists()) {"], [60, "            return \"/etc/lsb-release\";"], [61, "        }"], [62, "        // Look for any /etc/*-release, *-version, and variants"], [63, "        File etc = new File(\"/etc\");"], [64, "        File[] files = etc.listFiles(new FilenameFilter() {"], [65, "            @Override"], [66, "            public boolean accept(File dir, String name) {"], [67, "                return (name.endsWith(\"-release\") || name.endsWith(\"-version\") || name.endsWith(\"_version\"));"], [68, "            }"], [69, "        });"], [70, "        if (files.length > 0) {"], [71, "            return files[0].getPath();"], [72, "        }"], [73, "        return \"/etc/release\";"], [74, "    }"], [75, ""], [79, "            String etcOsRelease = getReleaseFilename();"], [80, "            try {"], [81, "                this.osRelease = FileUtil.readFile(etcOsRelease);"], [82, "                for (String line : this.osRelease) {"], [83, "                    String[] splittedLine = line.split(\"=\");"], [84, "                    if ((splittedLine[0].equals(\"NAME\") || splittedLine[0].equals(\"DISTRIB_ID\"))"], [85, "                            && splittedLine.length > 1) {"], [92, "                // If we've gotten to the end without matching, use the filename"], [93, "                if (this._family == null) {"], [94, "                    this._family = etcOsRelease.replace(\"/etc/\", \"\").replace(\"release\", \"\").replace(\"version\", \"\")"], [95, "                            .replace(\"-\", \"\");"], [96, "                }"], [97, "            } catch (IOException e) {"], [113, "            this._version = (osRelease != null) ? new LinuxOSVersionInfoEx(osRelease) : new LinuxOSVersionInfoEx();"], [120, "        return NullAwareJsonObjectBuilder.wrap(jsonFactory.createObjectBuilder()).add(\"manufacturer\", getManufacturer())"], [121, "                .add(\"family\", getFamily()).add(\"version\", getVersion().toJSON()).build();"]], "deleted": [[19, "import java.io.FileNotFoundException;"], [20, "import java.io.FileReader;"], [21, "import java.util.Scanner;"], [52, "            try (final Scanner in = new Scanner(new FileReader(\"/etc/os-release\"))) {"], [53, "                in.useDelimiter(\"\\n\");"], [54, "                while (in.hasNext()) {"], [55, "                    String[] splittedLine = in.next().split(\"=\");"], [56, "                    if (splittedLine[0].equals(\"NAME\")) {"], [63, "            } catch (FileNotFoundException e) {"], [79, "            this._version = new LinuxOSVersionInfoEx();"], [86, "        return jsonFactory.createObjectBuilder().add(\"manufacturer\", getManufacturer()).add(\"family\", getFamily())"], [87, "                .add(\"version\", getVersion().toJSON()).build();"]]}, "num_lines_added": 46, "num_lines_removed": 12}