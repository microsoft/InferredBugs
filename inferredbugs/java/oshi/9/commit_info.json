{"hash": "075b641c2ad1f16ee413e1278c60e31ffc98738b", "message": "Read Windows Sensor info from Open Hardware Monitor as fallback.", "file_num_lines": 213, "diff_parsed": {"added": [[20, "import java.util.List;"], [34, "    // If null, haven't attempted OHM."], [35, "    private String tempIdentifierStr = null;"], [36, "    // Successful (?) WMI path and property"], [37, "    private String wmiTempPath = null;"], [38, "    private String wmiTempProperty = null;"], [39, ""], [40, "    // If false, can't get from WMI"], [41, "    private boolean fanSpeedWMI = true;"], [42, ""], [43, "    // If null, haven't attempted OHM."], [44, "    private String voltIdentifierStr = null;"], [45, "    // Successful (?) WMI path and property"], [46, "    private String wmiVoltPath = null;"], [47, "    private String wmiVoltProperty = null;"], [48, ""], [49, "    /*"], [50, "     * Gets integer value from WMI or -1 if failed"], [51, "     */"], [52, "    private int wmiGetValue(String path, String property) {"], [53, "        int value = -1;"], [54, "        ArrayList<String> data = ExecutingCommand.runNative(String.format(\"wmic %s get %s\", path, property));"], [55, "        for (String checkLine : data) {"], [56, "            if (checkLine.length() == 0 || checkLine.toLowerCase().contains(property.toLowerCase())) {"], [59, "                // If successful this line is the desired value"], [61, "                    value = Integer.parseInt(checkLine.trim());"], [64, "                    value = -1;"], [69, "        return value;"], [70, "    }"], [71, ""], [72, "    /*"], [73, "     * Returns string value in the second property when first property matches"], [74, "     * the key"], [75, "     */"], [76, "    private String[] wmiGetStrValuesForKey(String path, String key, String properties) {"], [77, "        List<String> values = new ArrayList<String>();"], [78, "        ArrayList<String> data = ExecutingCommand.runNative(String.format(\"wmic %s get %s\", path, properties));"], [79, "        for (String checkLine : data) {"], [80, "            String[] keyValue = checkLine.split(\"\\\\s+\");"], [81, "            if (keyValue.length < 2) {"], [83, "            }"], [84, "            if (keyValue[0].equals(key)) {"], [85, "                values.add(keyValue[1]);"], [88, "        return values.toArray(new String[values.size()]);"], [89, "    }"], [90, ""], [91, "    /*"], [92, "     * Returns array of values in the third property when first two properties"], [93, "     * match the keys"], [94, "     */"], [95, "    private double[] wmiGetValuesForKeys(String path, String key0, String key1, String properties) {"], [96, "        List<Double> values = new ArrayList<Double>();"], [97, "        ArrayList<String> data = ExecutingCommand.runNative(String.format(\"wmic %s get %s\", path, properties));"], [98, "        for (String checkLine : data) {"], [99, "            double value;"], [100, "            String[] keyValue = checkLine.split(\"\\\\s+\");"], [101, "            if (keyValue.length < 3) {"], [103, "            }"], [104, "            if ((key0 == null || keyValue[0].equals(key0)) && keyValue[1].equals(key1)) {"], [105, "                // If successful this line is the desired value"], [107, "                    value = Double.parseDouble(keyValue[2]);"], [109, "                    // If we failed to parse, do nothing"], [110, "                    continue;"], [112, "                values.add(value);"], [115, "        double[] valueArray = new double[values.size()];"], [116, "        for (int i = 0; i < values.size(); i++) {"], [117, "            valueArray[i] = values.get(i);"], [118, "        }"], [119, "        return valueArray;"], [120, "    }"], [121, ""], [122, "    @Override"], [123, "    public double getCpuTemperature() {"], [124, "        // Initialize"], [125, "        double tempC = 0d;"], [126, "        // If Open Hardware Monitor identifier is set, we couldn't get through"], [127, "        // normal WMI, and got ID from OHM at least once so go directly to OHM"], [128, "        if (this.tempIdentifierStr != null) {"], [129, "            double[] vals = wmiGetValuesForKeys(\"/namespace:\\\\\\\\root\\\\OpenHardwareMonitor PATH Sensor\","], [130, "                    this.tempIdentifierStr, \"Temperature\", \"Parent,SensorType,Value\");"], [131, "            if (vals.length > 0) {"], [132, "                double sum = 0;"], [133, "                for (double val : vals) {"], [134, "                    sum += val;"], [135, "                }"], [136, "                tempC = sum / vals.length;"], [137, "            }"], [138, "            return tempC;"], [139, "        }"], [140, "        // This branch is used the first time and all subsequent times if"], [141, "        // successful (tempIdenifierStr == null)"], [142, "        // Try to get value using initial or updated successful values"], [143, "        int tempK = 0;"], [144, "        if (this.wmiTempPath == null) {"], [145, "            this.wmiTempPath = \"Temperature\";"], [146, "            this.wmiTempProperty = \"CurrentReading\";"], [147, "            tempK = wmiGetValue(this.wmiTempPath, this.wmiTempProperty);"], [148, "            if (tempK < 0) {"], [149, "                this.wmiTempPath = \"/namespace:\\\\\\\\root\\\\cimv2 PATH Win32_TemperatureProbe\";"], [150, "                tempK = wmiGetValue(this.wmiTempPath, this.wmiTempProperty);"], [151, "            }"], [152, "            if (tempK < 0) {"], [153, "                this.wmiTempPath = \"/namespace:\\\\\\\\root\\\\wmi PATH MSAcpi_ThermalZoneTemperature\";"], [154, "                this.wmiTempProperty = \"CurrentTemperature\";"], [155, "                tempK = wmiGetValue(this.wmiTempPath, this.wmiTempProperty);"], [156, "            }"], [157, "        } else {"], [158, "            // We've successfully read a previous time, or failed both here and"], [159, "            // with OHM"], [160, "            tempK = wmiGetValue(this.wmiTempPath, this.wmiTempProperty);"], [161, "        }"], [162, "        // Convert K to C and return result"], [163, "        if (tempK > 0) {"], [164, "            tempC = (tempK / 10d) - 273.15;"], [165, "        }"], [166, "        if (tempC <= 0d) {"], [167, "            // Unable to get temperature via WMI. Future attempts will be"], [168, "            // attempted via Open Hardware Monitor WMI if successful"], [169, "            String[] cpuIdentifiers = wmiGetStrValuesForKey(\"/namespace:\\\\\\\\root\\\\OpenHardwareMonitor PATH Hardware\","], [170, "                    \"CPU\", \"HardwareType,Identifier\");"], [171, "            if (cpuIdentifiers.length > 0) {"], [172, "                this.tempIdentifierStr = cpuIdentifiers[0];"], [173, "            }"], [174, "            // If not null, recurse and get value via OHM"], [175, "            if (this.tempIdentifierStr != null) {"], [176, "                return getCpuTemperature();"], [177, "            }"], [178, "        }"], [179, "        return tempC;"], [184, "        // Initialize"], [186, "        // If we couldn't get through normal WMI go directly to OHM"], [187, "        if (!this.fanSpeedWMI) {"], [188, "            double[] vals = wmiGetValuesForKeys(\"/namespace:\\\\\\\\root\\\\OpenHardwareMonitor PATH Sensor\", null, \"Fan\","], [189, "                    \"Parent,SensorType,Value\");"], [190, "            if (vals.length > 0) {"], [191, "                fanSpeeds = new int[vals.length];"], [192, "                for (int i = 0; i < vals.length; i++) {"], [193, "                    fanSpeeds[i] = (int) vals[i];"], [196, "            return fanSpeeds;"], [197, "        }"], [198, "        // This branch is used the first time and all subsequent times if"], [199, "        // successful (fanSpeedWMI == true)"], [200, "        // Try to get value"], [201, "        int rpm = wmiGetValue(\"/namespace:\\\\\\\\root\\\\cimv2 PATH Win32_Fan\", \"DesiredSpeed\");"], [202, "        // Set in array and return"], [203, "        if (rpm > 0) {"], [204, "            fanSpeeds[0] = rpm;"], [205, "        } else {"], [206, "            // Fail, switch to OHM"], [207, "            this.fanSpeedWMI = false;"], [208, "            return getFanSpeeds();"], [215, "        // Initialize"], [216, "        double volts = 0d;"], [217, "        // If we couldn't get through normal WMI go directly to OHM"], [218, "        if (this.voltIdentifierStr != null) {"], [219, "            double[] vals = wmiGetValuesForKeys(\"/namespace:\\\\\\\\root\\\\OpenHardwareMonitor PATH Sensor\","], [220, "                    this.voltIdentifierStr, \"Voltage\", \"Identifier,SensorType,Value\");"], [221, "            if (vals.length > 0) {"], [222, "                // Return the first voltage reading"], [223, "                volts = vals[0];"], [225, "            return volts;"], [227, "        // This branch is used the first time and all subsequent times if"], [228, "        // successful (voltIdenifierStr == null)"], [229, "        // Try to get value"], [230, "        // Try to get value using initial or updated successful values"], [231, "        int decivolts = 0;"], [232, "        if (this.wmiVoltPath == null) {"], [233, "            this.wmiVoltPath = \"CPU\";"], [234, "            this.wmiVoltProperty = \"CurrentVoltage\";"], [235, "            decivolts = wmiGetValue(this.wmiVoltPath, this.wmiVoltProperty);"], [236, "            if (decivolts < 0) {"], [237, "                this.wmiVoltPath = \"/namespace:\\\\\\\\root\\\\cimv2 PATH Win32_Processor\";"], [238, "                decivolts = wmiGetValue(this.wmiVoltPath, this.wmiVoltProperty);"], [239, "            }"], [240, "            // If the eighth bit is set, bits 0-6 contain the voltage"], [241, "            // multiplied by 10. If the eighth bit is not set, then the bit"], [242, "            // setting in VoltageCaps represents the voltage value."], [243, "            if ((decivolts & 0x80) == 0 && decivolts > 0) {"], [244, "                this.wmiVoltProperty = \"VoltageCaps\";"], [245, "                // really a bit setting, not decivolts, test later"], [246, "                decivolts = wmiGetValue(this.wmiVoltPath, this.wmiVoltProperty);"], [248, "        } else {"], [249, "            // We've successfully read a previous time, or failed both here and"], [250, "            // with OHM"], [251, "            decivolts = wmiGetValue(this.wmiVoltPath, this.wmiVoltProperty);"], [253, "        // Convert dV to V and return result"], [254, "        if (decivolts > 0) {"], [255, "            if (this.wmiVoltProperty.equals(\"VoltageCaps\")) {"], [256, "                // decivolts are bits"], [257, "                if ((decivolts & 0x1) > 0) {"], [258, "                    volts = 5.0;"], [259, "                } else if ((decivolts & 0x2) > 0) {"], [260, "                    volts = 3.3;"], [261, "                } else if ((decivolts & 0x4) > 0) {"], [262, "                    volts = 2.9;"], [263, "                }"], [265, "                // Value from bits 0-6"], [266, "                volts = (decivolts & 0x7F) / 10d;"], [267, "            }"], [268, "        }"], [269, "        if (volts <= 0d) {"], [270, "            // Unable to get voltage via WMI. Future attempts will be"], [271, "            // attempted via Open Hardware Monitor WMI if successful"], [272, "            String[] voltIdentifiers = wmiGetStrValuesForKey(\"/namespace:\\\\\\\\root\\\\OpenHardwareMonitor PATH Hardware\","], [273, "                    \"Voltage\", \"SensorType,Identifier\");"], [274, "            // Look for identifier containing \"cpu\""], [275, "            for (String id : voltIdentifiers) {"], [276, "                if (id.toLowerCase().contains(\"cpu\")) {"], [277, "                    this.voltIdentifierStr = id;"], [278, "                    break;"], [280, "            }"], [281, "            // If none contain cpu just grab the first one"], [282, "            if (voltIdentifiers.length > 0) {"], [283, "                this.voltIdentifierStr = voltIdentifiers[0];"], [284, "            }"], [285, "            // If not null, recurse and get value via OHM"], [286, "            if (this.voltIdentifierStr != null) {"], [287, "                return getCpuVoltage();"], [290, "        return volts;"], [299, "        return NullAwareJsonObjectBuilder.wrap(jsonFactory.createObjectBuilder())"], [300, "                .add(\"cpuTemperature\", getCpuTemperature()).add(\"fanSpeeds\", fanSpeedsArrayBuilder.build())"], [301, "                .add(\"cpuVoltage\", getCpuVoltage()).build();"]], "deleted": [[26, "import org.slf4j.Logger;"], [27, "import org.slf4j.LoggerFactory;"], [28, ""], [34, "    private static final Logger LOG = LoggerFactory.getLogger(WindowsSensors.class);"], [35, ""], [38, "    @Override"], [39, "    public double getCpuTemperature() {"], [40, "        ArrayList<String> hwInfo = ExecutingCommand.runNative(\"wmic Temperature get CurrentReading\");"], [41, "        for (String checkLine : hwInfo) {"], [42, "            if (checkLine.length() == 0 || checkLine.toLowerCase().contains(\"currentreading\")) {"], [45, "                // If successful this line is in tenths of degrees Kelvin"], [47, "                    int tempK = Integer.parseInt(checkLine.trim());"], [48, "                    if (tempK > 0) {"], [49, "                        return (tempK - 2715) / 10d;"], [50, "                    }"], [57, "        // Above query failed, try something else"], [58, "        hwInfo = ExecutingCommand"], [59, "                .runNative(\"wmic /namespace:\\\\\\\\root\\\\wmi PATH MSAcpi_ThermalZoneTemperature get CurrentTemperature\");"], [60, "        for (String checkLine : hwInfo) {"], [61, "            if (checkLine.length() == 0 || checkLine.toLowerCase().contains(\"currenttemperature\")) {"], [63, "            } else {"], [64, "                // If successful this line is in tenths of degrees Kelvin"], [65, "                try {"], [66, "                    int tempK = Integer.parseInt(checkLine.trim());"], [67, "                    if (tempK > 0) {"], [68, "                        return (tempK - 2715) / 10d;"], [69, "                    }"], [70, "                } catch (NumberFormatException e) {"], [71, "                    // If we failed to parse, give up"], [72, "                }"], [73, "                break;"], [76, "        // Above query failed, try something else"], [77, "        hwInfo = ExecutingCommand"], [78, "                .runNative(\"wmic /namespace:\\\\\\\\root\\\\cimv2 PATH Win32_TemperatureProbe get CurrentReading\");"], [79, "        for (String checkLine : hwInfo) {"], [80, "            if (checkLine.length() == 0 || checkLine.toLowerCase().contains(\"currentreading\")) {"], [82, "            } else {"], [83, "                // If successful this line is in tenths of degrees Kelvin"], [85, "                    int tempK = Integer.parseInt(checkLine.trim());"], [86, "                    if (tempK > 0) {"], [87, "                        return (tempK - 2715) / 10d;"], [88, "                    }"], [90, "                    // If we failed to parse, give up"], [92, "                break;"], [95, "        return 0d;"], [101, "        ArrayList<String> hwInfo = ExecutingCommand"], [102, "                .runNative(\"wmic /namespace:\\\\\\\\root\\\\cimv2 PATH Win32_Fan get DesiredSpeed\");"], [103, "        for (String checkLine : hwInfo) {"], [104, "            if (checkLine.length() == 0 || checkLine.toLowerCase().contains(\"desiredspeed\")) {"], [105, "                continue;"], [106, "            } else {"], [107, "                // If successful"], [108, "                try {"], [109, "                    int rpm = Integer.parseInt(checkLine.trim());"], [110, "                    // Check if 8th bit (of 16 bit number) is set"], [111, "                    if (rpm > 0) {"], [112, "                        fanSpeeds[0] = rpm;"], [113, "                        return fanSpeeds;"], [114, "                    }"], [115, "                } catch (NumberFormatException e) {"], [116, "                    // If we failed to parse, give up"], [118, "                break;"], [126, "        ArrayList<String> hwInfo = ExecutingCommand.runNative(\"wmic cpu get CurrentVoltage\");"], [127, "        for (String checkLine : hwInfo) {"], [128, "            if (checkLine.length() == 0 || checkLine.toLowerCase().contains(\"currentvoltage\")) {"], [129, "                continue;"], [130, "            } else {"], [131, "                // If successful this line is in tenths of volts"], [132, "                try {"], [133, "                    int decivolts = Integer.parseInt(checkLine.trim());"], [134, "                    if (decivolts > 0) {"], [135, "                        return decivolts / 10d;"], [136, "                    }"], [137, "                } catch (NumberFormatException e) {"], [138, "                    // If we failed to parse, give up"], [139, "                }"], [140, "                break;"], [143, "        // Above query failed, try something else"], [144, "        hwInfo = ExecutingCommand.runNative(\"wmic /namespace:\\\\\\\\root\\\\cimv2 PATH Win32_Processor get CurrentVoltage\");"], [145, "        for (String checkLine : hwInfo) {"], [146, "            if (checkLine.length() == 0 || checkLine.toLowerCase().contains(\"currentreading\")) {"], [147, "                continue;"], [148, "            } else {"], [149, "                // If successful:"], [150, "                // If the eighth bit is set, bits 0-6 contain the voltage"], [151, "                // multiplied by 10. If the eighth bit is not set, then the bit"], [152, "                // setting in VoltageCaps represents the voltage value."], [153, "                try {"], [154, "                    int decivolts = Integer.parseInt(checkLine.trim());"], [155, "                    // Check if 8th bit (of 16 bit number) is set"], [156, "                    if ((decivolts & 0x80) > 0 && decivolts > 0) {"], [157, "                        return decivolts / 10d;"], [158, "                    }"], [159, "                } catch (NumberFormatException e) {"], [160, "                    // If we failed to parse, give up"], [161, "                }"], [162, "                break;"], [165, "        // Above query failed, try something else"], [166, "        hwInfo = ExecutingCommand.runNative(\"wmic /namespace:\\\\\\\\root\\\\cimv2 PATH Win32_Processor get VoltageCaps\");"], [167, "        for (String checkLine : hwInfo) {"], [168, "            if (checkLine.length() == 0 || checkLine.toLowerCase().contains(\"currentreading\")) {"], [169, "                continue;"], [171, "                // If successful:"], [172, "                // Bits 0-3 of the field represent specific voltages that the"], [173, "                // processor socket can accept."], [174, "                try {"], [175, "                    int voltagebits = Integer.parseInt(checkLine.trim());"], [176, "                    // Return appropriate voltage"], [177, "                    if ((voltagebits & 0x1) > 0) {"], [178, "                        return 5.0;"], [179, "                    } else if ((voltagebits & 0x2) > 0) {"], [180, "                        return 3.3;"], [181, "                    } else if ((voltagebits & 0x4) > 0) {"], [182, "                        return 2.9;"], [183, "                    }"], [184, "                } catch (NumberFormatException e) {"], [185, "                    // If we failed to parse, give up"], [187, "                break;"], [190, "        return 0d;"], [199, "        return NullAwareJsonObjectBuilder.wrap(jsonFactory.createObjectBuilder()).add(\"cpuTemperature\", getCpuTemperature())"], [200, "                .add(\"fanSpeeds\", fanSpeedsArrayBuilder.build()).add(\"cpuVoltage\", getCpuVoltage()).build();"]]}, "num_lines_added": 222, "num_lines_removed": 121}