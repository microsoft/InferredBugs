{"hash": "7359eac084673853bce3680dc28fcff1b160bcae", "message": "Fix null dereferences", "file_num_lines": 325, "diff_parsed": {"added": [[38, "import com.sun.jna.Pointer; // NOSONAR squid:S1191"], [39, "import com.sun.jna.platform.mac.SystemB;"], [103, "     * Temporarily cache pointers to keys. The values from this map must be released"], [104, "     * after use.}"], [254, "                        if (serviceIterator != null) {"], [255, "                            // Iterate disks"], [256, "                            IORegistryEntry sdService = IOKit.INSTANCE.IOIteratorNext(serviceIterator);"], [257, "                            while (sdService != null) {"], [258, "                                // look up the BSD Name"], [259, "                                String partBsdName = sdService.getStringProperty(\"BSD Name\");"], [260, "                                String name = partBsdName;"], [261, "                                String type = \"\";"], [262, "                                // Get the DiskArbitration dictionary for"], [263, "                                // this partition"], [264, "                                DADiskRef disk = DA.DADiskCreateFromBSDName(CF.CFAllocatorGetDefault(), session,"], [265, "                                        partBsdName);"], [266, "                                if (disk != null) {"], [267, "                                    CFDictionaryRef diskInfo = DA.DADiskCopyDescription(disk);"], [268, "                                    if (diskInfo != null) {"], [269, "                                        // get volume name from its key"], [270, "                                        result = diskInfo.getValue(cfKeyMap.get(CFKey.DA_MEDIA_NAME));"], [271, "                                        CFStringRef volumePtr = new CFStringRef(result);"], [272, "                                        type = volumePtr.stringValue();"], [273, "                                        if (type == null) {"], [274, "                                            type = Constants.UNKNOWN;"], [275, "                                        }"], [276, "                                        result = diskInfo.getValue(cfKeyMap.get(CFKey.DA_VOLUME_NAME));"], [277, "                                        if (result == null) {"], [278, "                                            name = type;"], [279, "                                        } else {"], [280, "                                            volumePtr.setPointer(result);"], [281, "                                            name = volumePtr.stringValue();"], [282, "                                        }"], [283, "                                        diskInfo.release();"], [285, "                                    disk.release();"], [287, "                                String mountPoint;"], [288, "                                if (logicalVolumeMap.containsKey(partBsdName)) {"], [289, "                                    mountPoint = \"Logical Volume: \" + logicalVolumeMap.get(partBsdName);"], [290, "                                } else {"], [291, "                                    mountPoint = mountPointMap.getOrDefault(partBsdName, \"\");"], [292, "                                }"], [293, "                                Long size = sdService.getLongProperty(\"Size\");"], [294, "                                Integer bsdMajor = sdService.getIntegerProperty(\"BSD Major\");"], [295, "                                Integer bsdMinor = sdService.getIntegerProperty(\"BSD Minor\");"], [296, "                                partitions.add(new HWPartition(partBsdName, name, type,"], [297, "                                        sdService.getStringProperty(\"UUID\"), size == null ? 0L : size,"], [298, "                                        bsdMajor == null ? 0 : bsdMajor, bsdMinor == null ? 0 : bsdMinor, mountPoint));"], [299, "                                // iterate"], [300, "                                sdService.release();"], [301, "                                sdService = IOKit.INSTANCE.IOIteratorNext(serviceIterator);"], [303, "                            serviceIterator.release();"]], "deleted": [[38, "import com.sun.jna.Pointer;"], [39, "import com.sun.jna.platform.mac.SystemB; // NOSONAR squid:S1191"], [103, "     * Temporarily cache pointers to keys. The values from this map must be"], [104, "     * released after use.}"], [254, "                        // Iterate disks"], [255, "                        IORegistryEntry sdService = IOKit.INSTANCE.IOIteratorNext(serviceIterator);"], [256, "                        while (sdService != null) {"], [257, "                            // look up the BSD Name"], [258, "                            String partBsdName = sdService.getStringProperty(\"BSD Name\");"], [259, "                            String name = partBsdName;"], [260, "                            String type = \"\";"], [261, "                            // Get the DiskArbitration dictionary for"], [262, "                            // this partition"], [263, "                            DADiskRef disk = DA.DADiskCreateFromBSDName(CF.CFAllocatorGetDefault(), session,"], [264, "                                    partBsdName);"], [265, "                            if (disk != null) {"], [266, "                                CFDictionaryRef diskInfo = DA.DADiskCopyDescription(disk);"], [267, "                                if (diskInfo != null) {"], [268, "                                    // get volume name from its key"], [269, "                                    result = diskInfo.getValue(cfKeyMap.get(CFKey.DA_MEDIA_NAME));"], [270, "                                    CFStringRef volumePtr = new CFStringRef(result);"], [271, "                                    type = volumePtr.stringValue();"], [272, "                                    if (type == null) {"], [273, "                                        type = Constants.UNKNOWN;"], [274, "                                    }"], [275, "                                    result = diskInfo.getValue(cfKeyMap.get(CFKey.DA_VOLUME_NAME));"], [276, "                                    if (result == null) {"], [277, "                                        name = type;"], [278, "                                    } else {"], [279, "                                        volumePtr.setPointer(result);"], [280, "                                        name = volumePtr.stringValue();"], [282, "                                    diskInfo.release();"], [284, "                                disk.release();"], [285, "                            }"], [286, "                            String mountPoint;"], [287, "                            if (logicalVolumeMap.containsKey(partBsdName)) {"], [288, "                                mountPoint = \"Logical Volume: \" + logicalVolumeMap.get(partBsdName);"], [289, "                            } else {"], [290, "                                mountPoint = mountPointMap.getOrDefault(partBsdName, \"\");"], [292, "                            Long size = sdService.getLongProperty(\"Size\");"], [293, "                            Integer bsdMajor = sdService.getIntegerProperty(\"BSD Major\");"], [294, "                            Integer bsdMinor = sdService.getIntegerProperty(\"BSD Minor\");"], [295, "                            partitions.add(new HWPartition(partBsdName, name, type, sdService.getStringProperty(\"UUID\"),"], [296, "                                    size == null ? 0L : size, bsdMajor == null ? 0 : bsdMajor,"], [297, "                                    bsdMinor == null ? 0 : bsdMinor, mountPoint));"], [298, "                            // iterate"], [299, "                            sdService.release();"], [300, "                            sdService = IOKit.INSTANCE.IOIteratorNext(serviceIterator);"], [302, "                        serviceIterator.release();"]]}, "num_lines_added": 51, "num_lines_removed": 49}