{"hash": "b21001c02aa490c4fc102977fdd578557e6de489", "message": "Put Wmi constants in enums (#537)", "file_num_lines": 268, "diff_parsed": {"added": [[76, "    enum WmiProperty {"], [77, "        ANTECEDENT(ValueType.STRING), //"], [78, "        DEPENDENT(ValueType.STRING), //"], [79, "        DESCRIPTION(ValueType.STRING), //"], [80, "        DEVICEID(ValueType.STRING), //"], [81, "        DISKINDEX(ValueType.UINT32), //"], [82, "        INDEX(ValueType.UINT32), //"], [83, "        MANUFACTURER(ValueType.STRING), //"], [84, "        MODEL(ValueType.STRING), //"], [85, "        NAME(ValueType.STRING), //"], [86, "        SERIALNUMBER(ValueType.STRING), //"], [87, "        SIZE(ValueType.UINT64), //"], [88, "        TYPE(ValueType.STRING);"], [90, "        private ValueType type;"], [92, "        public ValueType getType() {"], [93, "            return this.type;"], [94, "        }"], [95, ""], [96, "        WmiProperty(ValueType type) {"], [97, "            this.type = type;"], [98, "        }"], [99, "    }"], [100, ""], [101, "    // Win32_DiskDrive"], [102, "    private static final WmiProperty[] DRIVE_PROPERTIES = new WmiProperty[] { WmiProperty.NAME,"], [103, "            WmiProperty.MANUFACTURER, WmiProperty.MODEL, WmiProperty.SERIALNUMBER, WmiProperty.SIZE,"], [104, "            WmiProperty.INDEX };"], [105, "    private static final String[] DRIVE_STRINGS = new String[DRIVE_PROPERTIES.length];"], [106, "    static {"], [107, "        for (int i = 0; i < DRIVE_PROPERTIES.length; i++) {"], [108, "            DRIVE_STRINGS[i] = DRIVE_PROPERTIES[i].name();"], [109, "        }"], [110, "    }"], [111, "    private static final ValueType[] DRIVE_TYPES = new ValueType[DRIVE_PROPERTIES.length];"], [112, "    static {"], [113, "        for (int i = 0; i < DRIVE_PROPERTIES.length; i++) {"], [114, "            DRIVE_TYPES[i] = DRIVE_PROPERTIES[i].getType();"], [115, "        }"], [116, "    }"], [118, "    // Win32_DiskDriveToDiskPartition and Win32_LogicalDiskToPartition"], [119, "    private static final WmiProperty[] DISK_TO_PARTITION_PROPERTIES = new WmiProperty[] {"], [120, "            WmiProperty.ANTECEDENT, WmiProperty.DEPENDENT };"], [121, "    private static final String[] DISK_TO_PARTITION_STRINGS = new String[DISK_TO_PARTITION_PROPERTIES.length];"], [122, "    static {"], [123, "        for (int i = 0; i < DISK_TO_PARTITION_PROPERTIES.length; i++) {"], [124, "            DISK_TO_PARTITION_STRINGS[i] = DISK_TO_PARTITION_PROPERTIES[i].name();"], [125, "        }"], [126, "    }"], [127, "    private static final ValueType[] DISK_TO_PARTITION_TYPES = new ValueType[DISK_TO_PARTITION_PROPERTIES.length];"], [128, "    static {"], [129, "        for (int i = 0; i < DISK_TO_PARTITION_PROPERTIES.length; i++) {"], [130, "            DISK_TO_PARTITION_TYPES[i] = DISK_TO_PARTITION_PROPERTIES[i].getType();"], [131, "        }"], [132, "    }"], [133, ""], [134, "    // Win32_Paritition"], [135, "    private static final WmiProperty[] PARTITION_PROPERTIES = new WmiProperty[] { WmiProperty.NAME,"], [136, "            WmiProperty.TYPE, WmiProperty.DESCRIPTION, WmiProperty.DEVICEID, WmiProperty.SIZE,"], [137, "            WmiProperty.DISKINDEX, WmiProperty.INDEX };"], [138, "    private static final String[] PARTITION_STRINGS = new String[PARTITION_PROPERTIES.length];"], [139, "    static {"], [140, "        for (int i = 0; i < PARTITION_PROPERTIES.length; i++) {"], [141, "            PARTITION_STRINGS[i] = PARTITION_PROPERTIES[i].name();"], [142, "        }"], [143, "    }"], [144, "    private static final ValueType[] PARTITION_TYPES = new ValueType[PARTITION_PROPERTIES.length];"], [145, "    static {"], [146, "        for (int i = 0; i < PARTITION_PROPERTIES.length; i++) {"], [147, "            PARTITION_TYPES[i] = PARTITION_PROPERTIES[i].getType();"], [148, "        }"], [149, "    }"], [203, "        Map<String, List<Object>> vals = WmiUtil.selectObjectsFrom(null, DISK_DRIVE_CLASS, DRIVE_STRINGS, null,"], [205, "        for (int i = 0; i < vals.get(WmiProperty.NAME.name()).size(); i++) {"], [207, "            ds.setName((String) vals.get(WmiProperty.NAME.name()).get(i));"], [208, "            ds.setModel(String"], [209, "                    .format(\"%s %s\", vals.get(WmiProperty.MODEL.name()).get(i),"], [210, "                            vals.get(WmiProperty.MANUFACTURER.name()).get(i))"], [213, "            ds.setSerial(ParseUtil.hexStringToString((String) vals.get(WmiProperty.SERIALNUMBER.name()).get(i)));"], [214, "            String index = vals.get(WmiProperty.INDEX.name()).get(i).toString();"], [221, "            ds.setSize((Long) vals.get(WmiProperty.SIZE.name()).get(i));"], [311, "        Map<String, List<Object>> partitionQueryMap = WmiUtil.selectObjectsFrom(null, \"Win32_DiskDriveToDiskPartition\","], [312, "                DISK_TO_PARTITION_STRINGS, null, DISK_TO_PARTITION_TYPES);"], [313, "        for (int i = 0; i < partitionQueryMap.get(WmiProperty.ANTECEDENT.name()).size(); i++) {"], [314, "            mAnt = DEVICE_ID.matcher((String) partitionQueryMap.get(WmiProperty.ANTECEDENT.name()).get(i));"], [315, "            mDep = DEVICE_ID.matcher((String) partitionQueryMap.get(WmiProperty.DEPENDENT.name()).get(i));"], [323, "        partitionQueryMap = WmiUtil.selectObjectsFrom(null, \"Win32_LogicalDiskToPartition\","], [324, "                DISK_TO_PARTITION_STRINGS, null, DISK_TO_PARTITION_TYPES);"], [325, "        for (int i = 0; i < partitionQueryMap.get(WmiProperty.ANTECEDENT.name()).size(); i++) {"], [326, "            mAnt = DEVICE_ID.matcher((String) partitionQueryMap.get(WmiProperty.ANTECEDENT.name()).get(i));"], [327, "            mDep = DEVICE_ID.matcher((String) partitionQueryMap.get(WmiProperty.DEPENDENT.name()).get(i));"], [335, "                PARTITION_STRINGS, null, PARTITION_TYPES);"], [336, "        for (int i = 0; i < hwPartitionQueryMap.get(WmiProperty.NAME.name()).size(); i++) {"], [337, "            String deviceID = (String) hwPartitionQueryMap.get(WmiProperty.DEVICEID.name()).get(i);"], [346, "            partitionMap"], [347, "                    .put(deviceID,"], [348, "                            new HWPartition("], [349, "                                    (String) hwPartitionQueryMap"], [350, "                                            .get(WmiProperty.NAME.name()).get("], [351, "                                                    i),"], [352, "                                    (String) hwPartitionQueryMap.get(WmiProperty.TYPE.name()).get(i),"], [353, "                                    (String) hwPartitionQueryMap.get(WmiProperty.DESCRIPTION.name()).get(i), uuid,"], [354, "                                    (Long) hwPartitionQueryMap.get(WmiProperty.SIZE.name()).get(i),"], [355, "                                    ((Long) hwPartitionQueryMap.get(WmiProperty.DISKINDEX.name()).get(i)).intValue(),"], [356, "                                    ((Long) hwPartitionQueryMap.get(WmiProperty.INDEX.name()).get(i)).intValue(),"], [357, "                                    logicalDrive));"]], "deleted": [[42, "import oshi.util.StringUtil;"], [77, "    private static final String ANTECEDENT_PROPERTY = \"Antecedent\";"], [78, "    private static final String DEPENDENT_PROPERTY = \"Dependent\";"], [79, "    private static final String DESCRIPTION_PROPERTY = \"Description\";"], [80, "    private static final String DEVICE_ID_PROPERTY = \"DeviceID\";"], [81, "    private static final String DISK_INDEX_PROPERTY = \"DiskIndex\";"], [82, "    private static final String INDEX_PROPERTY = \"Index\";"], [83, "    private static final String MANUFACTURER_PROPERTY = \"Manufacturer\";"], [84, "    private static final String MODEL_PROPERTY = \"Model\";"], [85, "    private static final String NAME_PROPERTY = \"Name\";"], [86, "    private static final String SERIALNUMBER_PROPERTY = \"SerialNumber\";"], [87, "    private static final String SIZE_PROPERTY = \"Size\";"], [88, "    private static final String TYPE_PROPERTY = \"Type\";"], [90, "    private static final String[] DRIVE_PROPERTIES = new String[] { NAME_PROPERTY, MANUFACTURER_PROPERTY,"], [91, "            MODEL_PROPERTY, SERIALNUMBER_PROPERTY, SIZE_PROPERTY, INDEX_PROPERTY };"], [92, "    private static final ValueType[] DRIVE_TYPES = { ValueType.STRING, ValueType.STRING, ValueType.STRING,"], [93, "            ValueType.STRING, ValueType.STRING, ValueType.UINT32 };"], [95, "    private static final String DRIVE_TO_PARTITION_PROPERTIES = StringUtil.join(\",\","], [96, "            new String[] { ANTECEDENT_PROPERTY, DEPENDENT_PROPERTY });"], [97, "    private static final String LOGICAL_DISK_TO_PARTITION_PROPERTIES = StringUtil.join(\",\","], [98, "            new String[] { ANTECEDENT_PROPERTY, DEPENDENT_PROPERTY });"], [100, "    private static final String[] PARTITION_PROPERTIES = new String[] { NAME_PROPERTY, TYPE_PROPERTY,"], [101, "            DESCRIPTION_PROPERTY, DEVICE_ID_PROPERTY, SIZE_PROPERTY, DISK_INDEX_PROPERTY, INDEX_PROPERTY };"], [102, "    private static final ValueType[] PARTITION_TYPES = { ValueType.STRING, ValueType.STRING, ValueType.STRING,"], [103, "            ValueType.STRING, ValueType.STRING, ValueType.UINT32, ValueType.UINT32 };"], [157, "        Map<String, List<Object>> vals = WmiUtil.selectObjectsFrom(null, DISK_DRIVE_CLASS, DRIVE_PROPERTIES, null,"], [159, "        for (int i = 0; i < vals.get(NAME_PROPERTY).size(); i++) {"], [161, "            ds.setName((String) vals.get(NAME_PROPERTY).get(i));"], [162, "            ds.setModel(String.format(\"%s %s\", vals.get(MODEL_PROPERTY).get(i), vals.get(MANUFACTURER_PROPERTY).get(i))"], [165, "            ds.setSerial(ParseUtil.hexStringToString((String) vals.get(SERIALNUMBER_PROPERTY).get(i)));"], [166, "            String index = vals.get(INDEX_PROPERTY).get(i).toString();"], [173, "            // If successful this line is the desired value"], [174, "            ds.setSize(ParseUtil.parseLongOrDefault((String) vals.get(SIZE_PROPERTY).get(i), 0L));"], [264, "        Map<String, List<String>> partitionQueryMap = WmiUtil.selectStringsFrom(null, \"Win32_DiskDriveToDiskPartition\","], [265, "                DRIVE_TO_PARTITION_PROPERTIES, null);"], [266, "        for (int i = 0; i < partitionQueryMap.get(ANTECEDENT_PROPERTY).size(); i++) {"], [267, "            mAnt = DEVICE_ID.matcher(partitionQueryMap.get(ANTECEDENT_PROPERTY).get(i));"], [268, "            mDep = DEVICE_ID.matcher(partitionQueryMap.get(DEPENDENT_PROPERTY).get(i));"], [276, "        partitionQueryMap = WmiUtil.selectStringsFrom(null, \"Win32_LogicalDiskToPartition\","], [277, "                LOGICAL_DISK_TO_PARTITION_PROPERTIES, null);"], [278, "        for (int i = 0; i < partitionQueryMap.get(ANTECEDENT_PROPERTY).size(); i++) {"], [279, "            mAnt = DEVICE_ID.matcher(partitionQueryMap.get(ANTECEDENT_PROPERTY).get(i));"], [280, "            mDep = DEVICE_ID.matcher(partitionQueryMap.get(DEPENDENT_PROPERTY).get(i));"], [288, "                PARTITION_PROPERTIES, null, PARTITION_TYPES);"], [289, "        for (int i = 0; i < hwPartitionQueryMap.get(NAME_PROPERTY).size(); i++) {"], [290, "            String deviceID = (String) hwPartitionQueryMap.get(DEVICE_ID_PROPERTY).get(i);"], [299, "            partitionMap.put(deviceID,"], [300, "                    new HWPartition((String) hwPartitionQueryMap.get(NAME_PROPERTY).get(i),"], [301, "                            (String) hwPartitionQueryMap.get(TYPE_PROPERTY).get(i),"], [302, "                            (String) hwPartitionQueryMap.get(DESCRIPTION_PROPERTY).get(i), uuid,"], [303, "                            ParseUtil.parseLongOrDefault((String) hwPartitionQueryMap.get(SIZE_PROPERTY).get(i), 0L),"], [304, "                            ((Long) hwPartitionQueryMap.get(DISK_INDEX_PROPERTY).get(i)).intValue(),"], [305, "                            ((Long) hwPartitionQueryMap.get(INDEX_PROPERTY).get(i)).intValue(), logicalDrive));"]]}, "num_lines_added": 105, "num_lines_removed": 53}