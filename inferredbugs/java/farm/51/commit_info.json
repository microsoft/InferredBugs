{"hash": "92684dd40bd51e77ce6e8bdf0ff5dd02b2cc5c4d", "message": "#1317 - don't resubmit error claims", "file_num_lines": 85, "diff_parsed": {"added": [[20, "import com.zerocracy.Farm;"], [28, "import java.io.IOException;"], [41, " * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)"], [67, "            new StkSafeTest.NonTestingFarm(),"], [68, "            new StkSafeTest.StkError()"], [76, "    @Test"], [77, "    public void dontRepeatErrorClaims() throws Exception {"], [78, "        final FkProject project = new FkProject();"], [79, "        new ClaimOut().type(\"Error\").postTo(project);"], [80, "        final XML claim = new Claims(project).iterate().iterator().next();"], [81, "        new StkSafe("], [82, "            \"errors1\","], [83, "            new StkSafeTest.NonTestingFarm(),"], [84, "            new StkSafeTest.StkError()"], [85, "        ).process(project, claim);"], [86, "        MatcherAssert.assertThat("], [87, "            new Claims(project).iterate(),"], [88, "            Matchers.iterableWithSize(1)"], [89, "        );"], [90, "    }"], [91, ""], [92, "    /**"], [93, "     * Always failing stakeholder."], [94, "     */"], [95, "    private static final class StkError implements Stakeholder {"], [96, "        @Override"], [97, "        public void process(final Project project, final XML claim) {"], [98, "            throw new IllegalStateException(\"error\");"], [99, "        }"], [100, "    }"], [101, ""], [102, "    /**"], [103, "     * Props farm without testing flag."], [104, "     */"], [105, "    private static class NonTestingFarm implements Farm {"], [106, ""], [107, "        /**"], [108, "         * Farm."], [109, "         */"], [110, "        private final Farm frm;"], [111, ""], [112, "        /**"], [113, "         * Ctor."], [114, "         */"], [115, "        NonTestingFarm() {"], [116, "            this("], [117, "                new PropsFarm("], [118, "                    new Directives().xpath(\"/props/testing\").remove()"], [119, "                )"], [120, "            );"], [121, "        }"], [122, ""], [123, "        /**"], [124, "         * Ctor."], [125, "         *"], [126, "         * @param farm Farm"], [127, "         */"], [128, "        private NonTestingFarm(final Farm farm) {"], [129, "            this.frm = farm;"], [130, "        }"], [131, ""], [132, "        @Override"], [133, "        public Iterable<Project> find(final String xpath) throws IOException {"], [134, "            return this.frm.find(xpath);"], [135, "        }"], [136, "    }"]], "deleted": [[56, "        final Stakeholder stk = Mockito.mock(Stakeholder.class);"], [63, "        Mockito.doThrow(new IllegalStateException(\"\")).when(stk).process("], [64, "            project, claim"], [65, "        );"], [68, "            new PropsFarm(new Directives().xpath(\"/props/testing\").remove()),"], [69, "            stk"]]}, "num_lines_added": 66, "num_lines_removed": 6}