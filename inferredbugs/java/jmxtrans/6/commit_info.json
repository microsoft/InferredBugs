{"hash": "4d726a94670a41487a02f2108cdf597b52d98bc5", "message": "TCollectorUdpWriter: simplify datagram handling, remove unneeded code.\nOpenTSDBGenericWriter: support JEXL for naming metrics; sanitize metric names, tag names, and tag values; enable skipping of hostname tag.", "file_num_lines": 53, "diff_parsed": {"added": [[10, "import java.net.DatagramPacket;"], [11, "import java.net.DatagramSocket;"], [13, "import java.net.SocketException;"], [30, " * @author Kieren Hynd"], [31, " * @author Arthur Naseef"], [37, "    protected DatagramSocket    dgSocket;"], [41, "     * Do not add the hostname tag \"host\" with the name of the host by default since tcollector normally adds the"], [42, "     * hostname."], [45, "    protected boolean   getAddHostnameTagDefault() {"], [46, "        return  false;"], [50, "     * Setup at start of the writer."], [53, "    public void start() throws LifecycleException {"], [54, "        super.start();"], [57, "            this.dgSocket = new DatagramSocket();"], [58, "            this.address = new InetSocketAddress(this.host, this.port);"], [59, "        } catch ( SocketException sockExc ) {"], [60, "            log.error(\"failed to create a datagram socket\", sockExc);"], [61, "            throw   new LifecycleException(sockExc);"], [72, "    protected void  sendOutput (String metricLine) throws IOException {"], [73, "        DatagramPacket  packet;"], [74, "        byte[]          data;"], [75, "        String          formattedLine;"], [76, ""], [77, "        formattedLine = metricLine + \"\\n\";"], [78, ""], [79, "        data = formattedLine.getBytes(\"UTF-8\");"], [80, "        packet = new DatagramPacket(data, 0, data.length, this.address);"], [81, ""], [82, "        this.dgSocket.send(packet);"]], "deleted": [[6, "import java.nio.channels.DatagramChannel;"], [28, " * @author kieren"], [34, "    protected Socket            socket;"], [35, "    protected DataOutputStream  out;"], [36, ""], [37, "    protected DatagramChannel   channel;"], [41, "     * Prepare for sending metrics."], [44, "    protected void  prepareSender() throws LifecycleException {"], [45, "        try {"], [46, "            channel = DatagramChannel.open();"], [47, "            setBufferSize((short) 1500);"], [48, ""], [49, "            this.address = new InetSocketAddress(this.host, this.port);"], [50, "            tagName = this.getStringSetting(\"tagName\", \"\");"], [51, "        } catch(IOException e) {"], [52, "            log.error(\"error opening socket to TCollector\", e);"], [53, "            throw new LifecycleException(e);"], [54, "        }"], [58, "     * Shutdown the sender as it will no longer be used to send metrics."], [61, "    protected void  shutdownSender() throws LifecycleException {"], [62, "    }"], [64, "    /**"], [65, "     * Start the output for the results of a Query to OpenTSDB."], [66, "     */"], [67, "    @Override"], [68, "    protected void  startOutput() throws IOException {"], [70, "            this.out = new DataOutputStream(socket.getOutputStream());"], [71, "        } catch (IOException e) {"], [72, "            log.error(\"error getting the output stream\", e);"], [73, "            throw e;"], [84, "    protected void  sendOutput(String metricLine) throws IOException {"], [85, "        try {"], [86, "            this.out.writeBytes(\"put \" + metricLine + \"\\n\");"], [87, "        } catch (IOException e) {"], [88, "            log.error(\"error writing result to the output stream\", e);"], [89, "            throw e;"], [90, "        }"], [98, "        try {"], [99, "            this.out.flush();"], [100, "        } catch (IOException e) {"], [101, "            log.error(\"flush failed\");"], [102, "            throw e;"], [103, "        }"], [104, ""], [105, "            // Read and log the response from the server for diagnostic purposes."], [106, ""], [107, "        InputStreamReader socketInputStream = new InputStreamReader(socket.getInputStream());"], [108, "        BufferedReader bufferedSocketInputStream = new BufferedReader(socketInputStream);"], [109, "        String line;"], [110, "        while (socketInputStream.ready() && (line = bufferedSocketInputStream.readLine()) != null) {"], [111, "            log.warn(\"OpenTSDB says: \" + line);"], [112, "        }"], [113, "    }"], [114, ""], [115, "    public synchronized void setBufferSize(short packetBufferSize) {"], [116, "        if(sendBuffer != null) {"], [117, "            flush();"], [118, "        }"], [119, "        sendBuffer = ByteBuffer.allocate(packetBufferSize);"], [120, "    }"], [121, ""], [122, "    protected void  doSend(String stat) {"], [123, "        try {"], [124, "            final byte[] data = stat.getBytes(\"utf-8\");"], [125, ""], [126, "            // If we're going to go past the threshold of the buffer then flush."], [127, "            // the +1 is for the potential '\\n' in multi_metrics below"], [128, "            if (sendBuffer.remaining() < (data.length + 1)) {"], [129, "                flush();"], [130, "            }"], [131, ""], [132, "            if (sendBuffer.position() > 0) { // multiple metrics are separated by '\\n'"], [133, "                sendBuffer.put((byte) '\\n');"], [134, "            }"], [135, ""], [136, "            sendBuffer.put(data); // append the data"], [137, ""], [138, "            flush();"], [139, "        } catch (IOException e) {"], [140, "            log.error(\"failed to send metrics to TCollector\", e);"], [141, "        }"], [142, "    }"], [143, ""], [144, "    public boolean  flush() {"], [145, "        try {"], [146, "            final int sizeOfBuffer = sendBuffer.position();"], [147, ""], [148, "            if (sizeOfBuffer <= 0) {"], [149, "                return false;"], [150, "            } // empty buffer"], [151, ""], [152, "            // send and reset the buffer"], [153, "            sendBuffer.flip();"], [154, "            final int nbSentBytes = channel.send(sendBuffer, this.address);"], [155, "            sendBuffer.limit(sendBuffer.capacity());"], [156, "            sendBuffer.rewind();"], [157, ""], [158, "            if (sizeOfBuffer == nbSentBytes) {"], [159, "                return true;"], [160, "            } else {"], [161, "                return false;"], [162, "            }"], [163, ""], [164, "        } catch (IOException e) {"], [165, "            e.printStackTrace();"], [166, "            return false;"], [167, "        }"]]}, "num_lines_added": 29, "num_lines_removed": 107}