{"hash": "69d1427552c6e58c87b17df875255802b854f623", "message": "after testing, found that these changes cause encoding problems on some setups when the JSON files are read; tried for a bit to find a solution, but gave up since I was having to test on my live server (test VM server was working fine)\nso, reverting for now", "file_num_lines": 19, "diff_parsed": {"added": [[6, " * Harddisc related methods such as read and write."], [13, "\t\tBufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file, false), \"UTF8\"));"], [17, ""], [22, "\t\tBufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"UTF-8\"));"], [23, "\t\tString ret = new String(new byte[0], \"UTF-8\");"], [24, ""], [27, "\t\t\tret += line;"], [30, "\t\tin.close();"], [31, "\t\treturn ret;"]], "deleted": [[6, " * Hard disk related methods such as read and write."], [13, "\t\tBufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file, false), \"UTF-8\"));"], [17, ""], [22, "//\t\tBufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"UTF-8\"));"], [23, "\t\tInputStream inStream = new FileInputStream(file);"], [24, "\t\tBufferedReader in = new BufferedReader(inputStreamToReader(inStream));"], [25, "\t\tStringBuilder ret = new StringBuilder();"], [26, ""], [29, "\t\t\tret.append(line);"], [31, "\t\tin.close();"], [32, ""], [33, "\t\treturn ret.toString();"], [34, "\t}"], [36, "\t/**"], [37, "\t * Helper method for determining and using correct encoding when reading data,"], [38, "\t * since so many people/text editors seem to mess up the encoding; hopefully this will help"], [39, "\t * Adapted from: http://blog.publicobject.com/2010/08/handling-byte-order-mark-in-java.html"], [40, "\t */"], [41, "\tpublic static Reader inputStreamToReader(InputStream in) throws IOException {"], [42, "\t\tif (in.available() < 3)"], [43, "\t\t\treturn new InputStreamReader(in);"], [44, "\t\tint byte1 = in.read();"], [45, "\t\tint byte2 = in.read();"], [46, "\t\tif (byte1 == 0xFF && byte2 == 0xFE) {"], [47, "\t\t\treturn new InputStreamReader(in, \"UTF-16LE\");"], [48, "\t\t} else if (byte1 == 0xFF && byte2 == 0xFF) {"], [49, "\t\t\treturn new InputStreamReader(in, \"UTF-16BE\");"], [50, "\t\t} else {"], [51, "\t\t\tint byte3 = in.read();"], [52, "\t\t\tif (byte1 == 0xEF && byte2 == 0xBB && byte3 == 0xBF) {"], [53, "\t\t\t\treturn new InputStreamReader(in, \"UTF-8\");"], [54, "\t\t\t} else {"], [55, "\t\t\t\tbyte[] first3 = {(byte)byte1, (byte)byte2, (byte)byte3};"], [56, "\t\t\t\tInputStream firstChars = new ByteArrayInputStream(first3);"], [57, "\t\t\t\treturn new InputStreamReader(new SequenceInputStream(firstChars, in));"], [58, "\t\t\t}"], [59, "\t\t}"]]}, "num_lines_added": 9, "num_lines_removed": 37}