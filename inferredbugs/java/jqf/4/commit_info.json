{"hash": "64f623441fd82bad70f54d2f38b2e91b43454e25", "message": "Make Guidance interface more approachable.\n\n- Guidance#getInput() now returns an input stream rather than a File.\n- Renames AFLRedundancyGuidance to AFLPerformanceGuidance.\n- Improves public API documentation by a lot.\n- Cleans up several mistakes.", "file_num_lines": 120, "diff_parsed": {"added": [[45, "import edu.berkeley.cs.jqf.fuzz.guidance.StreamBackedRandom;"], [108, "                Result result = INVALID;"], [112, "                try {"], [113, "                    StreamBackedRandom randomFile = new StreamBackedRandom(guidance.getInput(), Long.BYTES);"], [127, "                        throw new AssumptionViolatedException(\"StreamBackedRandom does not have enough data\", e);"], [158, "                } finally {"], [159, "                    // Wait for any instrumentation events to finish processing"], [160, "                    SingleSnoop.waitForQuiescence();"], [162, "                    // Inform guidance about the outcome of this trial"], [163, "                    guidance.handleResult(result, error);"], [164, "                }"]], "deleted": [[45, "import edu.berkeley.cs.jqf.fuzz.guidance.FileBackedRandom;"], [108, "                Result result;"], [112, "                try (FileBackedRandom randomFile = new FileBackedRandom(guidance.getInputFile(), Long.BYTES)) {"], [126, "                        throw new AssumptionViolatedException(\"FileBackedRandom does not have enough data\", e);"], [157, "                }"], [158, ""], [159, "                // Wait for any instrumentation events to finish processing"], [160, "                SingleSnoop.waitForQuiescence();"], [162, "                // Inform guidance about the outcome of this trial"], [163, "                guidance.handleResult(result, error);"]]}, "num_lines_added": 11, "num_lines_removed": 10}