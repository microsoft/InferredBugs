{"hash": "0ed02f55c5dc6aae58373a6d449e80e15054ae5c", "message": "Implement disk-based caching of loaded data. Serializes data to specified directory, encoding parameters in file name. Configurable in conf files.", "file_num_lines": 98, "diff_parsed": {"added": [[17, "    private HashMap<Integer, Map<String, Integer>> integerEncoding = new HashMap<>();"], [24, "        HashMap<Integer, Map<String, Integer>> newIntegerEncoding = new HashMap<>();"], [35, "        for(Map.Entry<Integer, Map<String, Integer>> entry :"], [66, "        for(Map.Entry<Integer, Map<String, Integer>> entry :"], [88, "        Map<String, Integer> columnEncoding = integerEncoding.get(matchingColumn);"], [89, "        String columnValue = null;"], [90, "        for(Map.Entry<String, Integer> ce : columnEncoding.entrySet()) {"], [91, "            if(ce.getValue() == encodedAttr) {"], [92, "                columnValue = ce.getKey();"], [93, "            }"], [94, "        }"], [109, "        integerEncoding.computeIfAbsent(dimension, key -> new HashMap<>());"], [112, "        Map<String, Integer> dimensionMap = integerEncoding.get(dimension);"]], "deleted": [[17, "    private HashMap<Integer, HashBiMap<String, Integer>> integerEncoding = new HashMap<>();"], [24, "        HashMap<Integer, HashBiMap<String, Integer>> newIntegerEncoding = new HashMap<>();"], [35, "        for(Map.Entry<Integer, HashBiMap<String, Integer>> entry :"], [66, "        for(Map.Entry<Integer, HashBiMap<String, Integer>> entry :"], [88, "        String columnValue = integerEncoding.get(matchingColumn).inverse().get(encodedAttr);"], [103, "        integerEncoding.computeIfAbsent(dimension, key -> HashBiMap.<String, Integer>create());"], [106, "        BiMap<String, Integer> dimensionMap = integerEncoding.get(dimension);"]]}, "num_lines_added": 13, "num_lines_removed": 7}