{"hash": "9755efac1272929403cdfc1d76455e2fe5bb9150", "message": "bugfix", "file_num_lines": 403, "diff_parsed": {"added": [[34, "import java.util.*;"], [139, ""], [147, "            EX_TEMPLATE_REGISTRY = synchronizedMap(new HashMap());"], [208, "    }"], [224, ""], [226, "        EX_TEMPLATE_REGISTRY.put(name, template);"], [227, "    }"], [314, "            /**"], [315, "             * This is an optimization for property expressions."], [316, "             */"], [343, ""], [388, "                        ForeachContext foreachContext = (ForeachContext) currNode.getRegister();"], [389, "                        if (foreachContext.getItererators() == null) {"], [391, "                                String[] lists = getForEachSegment(currNode).split(\",\");"], [393, "                                for (int i = 0; i < lists.length; i++) {"], [395, "                                    if (listObject instanceof Object[]) {"], [396, "                                        listObject = Arrays.asList((Object[]) listObject);"], [397, "                                    }"], [398, "                                    iters[i] = ((Collection) listObject).iterator();"], [400, "                                foreachContext.setIterators(iters);"], [401, "                            }"], [402, "                            catch (ClassCastException e) {"], [411, "                        String[] alias = currNode.getAlias().split(\",\");"], [413, "                        for (int i = 0; i < alias.length; i++) {"], [415, "                        }"], [416, ""], [421, "                            for (int i = 0; i < iters.length; i++) {"], [424, "                            if (foreachContext.getCount() != 0) {"], [425, "                                sbuf.append(foreachContext.getSeperator());"], [427, "                            foreachContext.setCount(foreachContext.getCount() + 1);"], [430, "                            for (int i = 0; i < iters.length; i++) {"], [432, "                            }"], [433, "                            foreachContext.setIterators(null);"], [434, "                            foreachContext.setCount(0);"], [454, "                    case INCLUDE_BY_REF: {"], [455, "                        IncludeRef includeRef = (IncludeRef) nodes[node].getRegister();"], [456, "                        String template = EX_TEMPLATE_REGISTRY.get(includeRef.getName());"], [457, ""], [458, "                        IncludeRefParam[] params = includeRef.getParams();"], [459, "                        Map vars = new HashMap(params.length * 2);"], [460, "                        for (int i = 0; i < params.length; i++) {"], [461, "                            vars.put(params[i].getIdentifier(), MVEL.eval(params[i].getValue(), ctx, tokens));"], [462, "                        }"], [463, ""], [464, "                        sbuf.append(Interpreter.parse(template, ctx, vars));"], [465, "                    }"], [483, ""]], "deleted": [[23, ""], [30, ""], [31, "import static java.lang.Character.isWhitespace;"], [37, "import java.util.Collection;"], [40, "import java.util.Arrays;"], [41, "import java.util.HashMap;"], [42, "import java.util.Iterator;"], [43, "import java.util.Map;"], [44, "import java.util.WeakHashMap;"], [45, ""], [148, ""], [156, "            EX_TEMPLATE_REGISTRY = synchronizedMap( new HashMap() );"], [217, "    }"], [233, ""], [235, "        EX_TEMPLATE_REGISTRY.put( name, template );"], [236, "    }"], [349, "                case INCLUDE_BY_REF: {"], [350, "                    IncludeRef includeRef = (IncludeRef) nodes[0].getRegister();"], [351, "                    String template = EX_TEMPLATE_REGISTRY.get( includeRef.getName() );"], [352, ""], [353, "                    IncludeRefParam[] params = includeRef.getParams();"], [354, "                    Map vars = new HashMap( params.length );"], [355, "                    for ( int i = 0; i < params.length; i++ ) {"], [356, "                        vars.put( params[i].getIdentifier(), parse(params[i].getValue(), ctx, tokens));"], [357, "                    }"], [358, ""], [359, "                    return Interpreter.parse( template, ctx, vars );"], [360, "                }"], [405, "                        ForeachContext foreachContext = ( ForeachContext ) currNode.getRegister();"], [406, "                        if ( foreachContext.getItererators() == null ) {"], [408, "                                String[] lists = getForEachSegment(currNode).split( \",\" );"], [410, "                                for( int i = 0; i < lists.length; i++ ) {"], [412, "                                    if ( listObject instanceof Object[]) {"], [413, "                                        listObject = Arrays.asList( (Object[]) listObject );"], [414, "                                    }"], [415, "                                    iters[i] = ((Collection)listObject).iterator() ;"], [417, "                                foreachContext.setIterators( iters );"], [418, "                            } catch (ClassCastException e) {"], [427, "                        String[] alias = currNode.getAlias().split( \",\" );"], [429, "                        for ( int i = 0; i < alias.length; i++ ) {"], [431, "                        }"], [432, ""], [437, "                            for ( int i = 0; i < iters.length; i++ ) {"], [440, "                            if ( foreachContext.getCount() != 0 ) {"], [441, "                                sbuf.append( foreachContext.getSeperator() );"], [443, "                            foreachContext.setCount( foreachContext.getCount( ) + 1 );"], [446, "                            for ( int i = 0; i < iters.length; i++ ) {"], [448, "                            }"], [449, "                            foreachContext.setIterators( null );"], [450, "                            foreachContext.setCount( 0 );"], [487, ""]]}, "num_lines_added": 47, "num_lines_removed": 51}