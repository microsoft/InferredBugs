{"hash": "b24377d8bf85d4eac5e5a26f293f46a3d26e8af9", "message": "dynamic imports implemented.", "file_num_lines": 1052, "diff_parsed": {"added": [[459, "                return createPropertyToken(start, cursor);"], [888, "        if (parserContext != null && parserContext.get() != null && parserContext.get().hasImports()) {"], [889, "            char[] _subset = subset(expr, start, cursor - start);"], [890, "            int offset;"], [891, ""], [892, "            if ((offset = findFirst('.', _subset)) != -1) {"], [893, "                String iStr = new String(_subset, 0, offset);"], [894, "                if (\"this\".equals(iStr)) {"], [895, "                    lastWasIdentifier = true;"], [896, "                    return lastNode = new ThisValDeepPropertyNode(subset(_subset, offset + 1, _subset.length - offset - 1), fields);"], [897, "                }"], [898, "                else if (getParserContext().hasImport(iStr)) {"], [899, "                    lastWasIdentifier = true;"], [900, "                    return lastNode = new LiteralDeepPropertyNode(subset(_subset, offset + 1, _subset.length - offset - 1), fields, getParserContext().getImport(iStr));"], [901, "                }"], [902, "            }"], [903, "            else {"], [904, "                String iStr = new String(_subset);"], [905, "                if (getParserContext().hasImport(iStr))  {"], [906, "                    lastWasIdentifier = true;"], [907, "                    return lastNode = new LiteralNode(getParserContext().getImport(iStr), Class.class);"], [908, "                }"], [909, ""], [910, ""], [911, "                ASTNode node = new ASTNode(_subset, 0, _subset.length, fields);"], [912, "                lastWasIdentifier = node.isIdentifier();"], [913, "                return lastNode = node;"], [914, "            }"], [915, "        }"], [916, ""], [917, "        lastWasIdentifier = true;"], [918, ""], [919, ""], [920, "        return lastNode = new PropertyASTNode(expr, start, end, fields);"]], "deleted": [[157, ""], [460, ""], [461, "                if (parserContext != null && parserContext.get() != null && parserContext.get().hasImports()) {"], [462, "                    char[] _subset = subset(expr, start, cursor - start);"], [463, "                    int offset;"], [464, ""], [465, "                    if ((offset = findFirst('.', _subset)) != -1) {"], [466, "                        String iStr = new String(_subset, 0, offset);"], [467, "                        if (\"this\".equals(iStr)) {"], [468, "                            lastWasIdentifier = true;"], [469, "                            return lastNode = new ThisValDeepPropertyNode(subset(_subset, offset + 1, _subset.length - offset - 1), fields);"], [470, "                        }"], [471, "                        else if (getParserContext().hasImport(iStr)) {"], [472, "                            lastWasIdentifier = true;"], [473, "                            return lastNode = new LiteralDeepPropertyNode(subset(_subset, offset + 1, _subset.length - offset - 1), fields, getParserContext().getImport(iStr));"], [474, "                        }"], [475, "                    }"], [476, "                    else {"], [477, "                        ASTNode node = new ASTNode(_subset, 0, _subset.length, fields);"], [478, "                        lastWasIdentifier = node.isIdentifier();"], [479, "                        return lastNode = node;"], [480, "                    }"], [481, "                }"], [482, ""], [483, "                //   return createPropertyToken(expr, start, cursor, fields);"], [484, ""], [485, "                lastWasIdentifier = true;"], [486, "                lastNode = createPropertyToken(start, cursor);"], [487, "                return lastNode;"], [711, "//                            else if (LITERALS.containsKey(tokenStr)) {"], [712, "//                                start = cursor;"], [713, "//                                captureToEOS();"], [714, "//                                return new TypeCast(expr, start, cursor, fields, (Class) LITERALS.get(tokenStr));"], [715, "//                            }"], [921, "        return new PropertyASTNode(expr, start, end, fields);"]]}, "num_lines_added": 34, "num_lines_removed": 35}