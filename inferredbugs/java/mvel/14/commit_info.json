{"hash": "24b500aef8fd2a6b95bb07abe99baf75d3485808", "message": "type inferencing fixed.", "file_num_lines": 280, "diff_parsed": {"added": [[4, "import org.mvel.ast.Assignment;"], [35, ""], [36, "        CompiledExpression c = _compile();"], [37, ""], [38, "        if (pCtx.isFatalError()) {"], [39, "            parserContext.remove();"], [40, "            throw new CompileException(\"Failed to _compile: \" + pCtx.getErrorList().size() + \" compilation error(s)\", pCtx.getErrorList());"], [41, "        }"], [42, "        else if (pCtx.isFatalError()) {"], [43, "            parserContext.remove();"], [44, "            throw new CompileException(\"Failed to _compile: \" + pCtx.getErrorList().size() + \" compilation error(s)\", pCtx.getErrorList());"], [45, "        }"], [46, ""], [47, "        return c;"], [83, "                    tk.setAccessor(new ExpressionCompiler(tk.getNameAsArray())._compile());"], [196, "//            if (pCtx.isStrictTypeEnforcement() && tk instanceof Assignment) {"], [197, "//"], [198, "//            }"], [199, ""], [200, ""], [201, "//            if (pCtx.isStrictTypeEnforcement() && tk instanceof Assignment"], [202, "//                    && (pCtx.getInputs() == null"], [203, "//                    || !pCtx.getInputs().containsKey(((Assignment) tk).getAssignmentVar()))) {"], [204, "//"], [205, "//                System.out.println(tk.getEgressType());"], [206, "//"], [207, "//                addFatalError(\"untyped var not permitted in strict-mode: \" + ((Assignment) tk).getAssignmentVar());"], [208, "//                return tk;"], [209, "//            }"], [210, ""]], "deleted": [[4, "import org.mvel.ast.AssignmentNode;"], [20, " //   private Set<String> inputs;"], [21, " //   private Set<String> locals;"], [22, ""], [38, ""], [39, "        return _compile();"], [61, "//                inputs = new LinkedHashSet<String>();"], [62, "//                locals = new LinkedHashSet<String>();"], [63, ""], [77, "                if (pCtx.isStrictTypeEnforcement() && tk instanceof AssignmentNode"], [78, "                        && (pCtx.getInputs() == null"], [79, "                        || !pCtx.getInputs().containsKey(tk.getName()))) {"], [80, ""], [81, "                    addFatalError(\"untyped var not permitted in strict-mode: \" + tk.getName());"], [82, "                }"], [83, ""], [85, "                    ExpressionCompiler subCompiler = new ExpressionCompiler(tk.getNameAsArray());"], [86, "                    tk.setAccessor(subCompiler._compile());"], [87, "//"], [88, "//                    if (verifying) {"], [89, "//                        inputs.addAll(subCompiler.getInputs());"], [90, "//                    }"], [183, "//                for (String s : locals) {"], [184, "//                    inputs.remove(s);"], [185, "//                }"], [189, "            if (pCtx.isFatalError()) {"], [190, "                parserContext.remove();"], [191, "                throw new CompileException(\"Failed to _compile: \" + pCtx.getErrorList().size() + \" compilation error(s)\", pCtx.getErrorList());"], [192, "            }"], [193, "            else if (pCtx.isFatalError()) {"], [194, "                parserContext.remove();"], [195, "                throw new CompileException(\"Failed to _compile: \" + pCtx.getErrorList().size() + \" compilation error(s)\", pCtx.getErrorList());"], [196, "            }"], [235, ""], [389, ""], [390, "//    public Set<String> getInputs() {"], [391, "//        return inputs;"], [392, "//    }"], [393, "//"], [394, "//    public Set<String> getLocals() {"], [395, "//        return locals;"], [396, "//    }"], [397, ""]]}, "num_lines_added": 30, "num_lines_removed": 43}