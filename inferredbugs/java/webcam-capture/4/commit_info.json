{"hash": "b6e9044cab2a83b79e1063755ff106883df16a65", "message": "Add MJPEG support in GStreamer driver, refs #145", "file_num_lines": 301, "diff_parsed": {"added": [[3, "import static com.github.sarxos.webcam.ds.gstreamer.GStreamerDriver.FORMAT_MJPEG;"], [4, ""], [63, "\tprivate final GStreamerDriver driver;"], [64, ""], [70, "\tprivate Element jpegpar = null;"], [71, "\tprivate Element jpegdec = null;"], [72, "\tprivate Element[] elements = null;"], [98, "\tprotected GStreamerDevice(GStreamerDriver driver, String name) {"], [99, "\t\tthis.driver = driver;"], [104, "\tprotected GStreamerDevice(GStreamerDriver driver, File vfile) {"], [105, "\t\tthis.driver = driver;"], [124, "\t\t\tsource = ElementFactory.make(\"dshowvideosrc\", \"dshowvideosrc\");"], [127, "\t\t\tsource = ElementFactory.make(\"v4l2src\", \"v4l2src\");"], [136, "\t\tfilter = ElementFactory.make(\"capsfilter\", \"capsfilter\");"], [138, "\t\tjpegpar = ElementFactory.make(\"jpegparse\", \"jpegparse\");"], [139, "\t\tjpegdec = ElementFactory.make(\"jpegdec\", \"jpegdec\");"], [140, ""], [141, "\t\t// if (Platform.isLinux()) {"], [142, "\t\tpipelineReady();"], [143, "\t\t// }"], [147, "\t\t// if (Platform.isLinux()) {"], [148, "\t\tpipelineStop();"], [149, "\t\t// }"], [162, "\t\tformat = findPreferredFormat(caps);"], [170, "\t\tfinal int n = caps.size();"], [191, "\t\tfinal Dimension[] resolutions = new ArrayList<Dimension>(map.values()).toArray(new Dimension[0]);"], [195, "\t\t\t\tLOG.debug(\"Resolution detected {} with format {}\", d, format);"], [202, "\tprivate String findPreferredFormat(Caps caps) {"], [203, "\t\tfor (String f : driver.getPreferredFormats()) {"], [288, "\t\tcaps = Caps.fromString(String.format(\"%s,framerate=30/1,width=%d,height=%d\", format, size.width, size.height));"], [291, "\t\tLOG.debug(\"Using filter caps: {}\", caps);"], [293, "\t\tpipelinePlay();"], [294, ""], [295, "\t\tLOG.debug(\"Wait for device to be ready\");"], [307, "\tprivate void pipelineElementsReset() {"], [308, "\t\telements = null;"], [309, "\t}"], [310, ""], [311, "\tprivate Element[] pipelineElementsPrepare() {"], [312, "\t\tif (elements == null) {"], [313, "\t\t\tif (FORMAT_MJPEG.equals(format)) {"], [314, "\t\t\t\telements = new Element[] { source, filter, jpegpar, jpegdec, sink };"], [315, "\t\t\t} else {"], [316, "\t\t\t\telements = new Element[] { source, filter, sink };"], [317, "\t\t\t}"], [318, "\t\t}"], [319, "\t\treturn elements;"], [320, "\t}"], [321, ""], [322, "\tprivate void pipelineElementsLink() {"], [323, "\t\tfinal Element[] elements = pipelineElementsPrepare();"], [324, "\t\tpipe.addMany(elements);"], [325, "\t\tif (!Element.linkMany(elements)) {"], [326, "\t\t\tLOG.warn(\"Some elements were not successfully linked!\");"], [327, "\t\t}"], [328, "\t}"], [329, ""], [330, "\tprivate void pipelineElementsUnlink() {"], [331, "\t\tfinal Element[] elements = pipelineElementsPrepare();"], [332, "\t\tElement.unlinkMany(elements);"], [333, "\t\tpipe.removeMany(elements);"], [334, "\t}"], [335, ""], [336, "\tprivate void pipelineReady() {"], [337, "\t\tpipelineElementsLink();"], [338, "\t\tpipe.setState(State.READY);"], [339, "\t}"], [340, ""], [341, "\tprivate void pipelinePlay() {"], [342, "\t\tpipelineElementsReset();"], [343, "\t\tpipelineElementsLink();"], [344, "\t\tpipe.setState(State.PLAYING);"], [345, "\t}"], [346, ""], [347, "\tprivate void pipelineStop() {"], [348, "\t\tpipe.setState(State.NULL);"], [349, "\t\tpipelineElementsUnlink();"], [350, "\t}"], [351, ""], [361, "\t\tpipelineStop();"], [363, "\t\timage = null;"], [378, "\t\tfilter.dispose();"], [379, "\t\tjpegpar.dispose();"], [380, "\t\tjpegdec.dispose();"], [381, "\t\tcaps.dispose();"]], "deleted": [[43, "\t * First formats are better. For example video/x-raw-rgb gives 30 FPS on HD720p where"], [44, "\t * video/x-raw-yuv only 10 FPS on the same resolution. The goal is to use these \"better\" formats"], [45, "\t * first, and then fallback to less efficient when not available."], [46, "\t */"], [47, "\tprivate static final String[] BEST_FORMATS = {"], [48, "\t\t\"video/x-raw-rgb\","], [49, "\t\t\"video/x-raw-yuv\","], [50, "\t};"], [51, ""], [52, "\t/**"], [101, "\tprotected GStreamerDevice(String name) {"], [106, "\tprotected GStreamerDevice(File vfile) {"], [125, "\t\t\tsource = ElementFactory.make(\"dshowvideosrc\", \"source\");"], [128, "\t\t\tsource = ElementFactory.make(\"v4l2src\", \"source\");"], [137, "\t\tfilter = ElementFactory.make(\"capsfilter\", \"filter\");"], [139, "\t\tif (Platform.isLinux()) {"], [140, "\t\t\tpipe.addMany(source, filter, sink);"], [141, "\t\t\tElement.linkMany(source, filter, sink);"], [142, "\t\t\tpipe.setState(State.READY);"], [143, "\t\t}"], [147, "\t\tif (Platform.isLinux()) {"], [148, "\t\t\tpipe.setState(State.NULL);"], [149, "\t\t\tElement.unlinkMany(source, filter, sink);"], [150, "\t\t\tpipe.removeMany(source, filter, sink);"], [151, "\t\t}"], [164, "\t\tformat = findBestFormat(caps);"], [172, "\t\tint n = caps.size();"], [193, "\t\tDimension[] resolutions = new ArrayList<Dimension>(map.values()).toArray(new Dimension[map.size()]);"], [197, "\t\t\t\tLOG.debug(\"Resolution detected {}\", d);"], [204, "\tprivate static String findBestFormat(Caps caps) {"], [205, "\t\tfor (String f : BEST_FORMATS) {"], [290, "\t\tcaps = Caps.fromString(String.format(\"%s,width=%d,height=%d\", format, size.width, size.height));"], [291, ""], [294, "\t\tLOG.debug(\"Link elements\");"], [296, "\t\tpipe.addMany(source, filter, sink);"], [297, "\t\tElement.linkMany(source, filter, sink);"], [298, "\t\tpipe.setState(State.PLAYING);"], [302, "\t\t\tLOG.debug(\"Wait for device to be ready\");"], [320, "\t\timage = null;"], [321, ""], [322, "\t\tLOG.debug(\"Unlink elements\");"], [324, "\t\tpipe.setState(State.NULL);"], [325, "\t\tElement.unlinkMany(source, filter, sink);"], [326, "\t\tpipe.removeMany(source, filter, sink);"], [340, "\t\tfilter.dispose();"], [344, "\t\tcaps.dispose();"]]}, "num_lines_added": 85, "num_lines_removed": 46}