{"hash": "ac13d7f4d2fd8f26910b5e23458a5bc87c0c051b", "message": "Updating to the latest driver and removing flag that are no longer needed. (#1300)\n\n* Updating Cosmos DB to the latest driver and removing flags for\r\nfeatures that are no longer used.  For examply myid was needed\r\nwhen id only supported hash lookup.  Now id supports range index\r\nso scan can be handled.\r\n\r\n* Updating version", "file_num_lines": 307, "diff_parsed": {"added": [[139, "                      + \" useUpsert={}\","], [145, "              this.useUpsert);"], [222, "    if (document != null) {"], [235, "      FeedOptions feedOptions = new FeedOptions();"], [236, "      feedOptions.setEnableCrossPartitionQuery(true);"], [237, "      feedOptions.setMaxDegreeOfParallelism(this.maxDegreeOfParallelismForQuery);"], [239, "            new SqlQuerySpec(\"SELECT TOP @recordcount * FROM root r WHERE r.id >= @startkey\","], [241, "                                               new SqlParameter(\"@startkey\", startkey))),"], [242, "                    feedOptions);"]], "deleted": [[56, "  private static final boolean DEFAULT_USE_SINGLE_PARTITION_COLLECTION = true;"], [58, "  private static final boolean DEFAULT_USE_HASH_QUERY_FOR_SCAN = false;"], [71, ""], [72, "  private String queryText;"], [74, "  private boolean useSinglePartitionCollection;"], [76, "  private boolean useHashQueryForScan;"], [102, "    this.useSinglePartitionCollection = this.getBooleanProperty("], [103, "            \"azurecosmos.useSinglePartitionCollection\","], [104, "            DEFAULT_USE_SINGLE_PARTITION_COLLECTION);"], [105, ""], [110, "    this.useHashQueryForScan = this.getBooleanProperty("], [111, "            \"azurecosmos.useHashQueryForScan\","], [112, "            DEFAULT_USE_HASH_QUERY_FOR_SCAN);"], [113, ""], [150, "    // Query text"], [151, "    this.queryText = this.getQueryText();"], [152, ""], [156, "                      + \" useSinglePartitionCollection={}, useUpsert={}, useHashQueryForScan={}, \""], [157, "                      + \"queryText={}\","], [163, "              this.useSinglePartitionCollection,"], [164, "              this.useUpsert,"], [165, "              this.useHashQueryForScan,"], [166, "              this.queryText);"], [205, "  private String getQueryText() {"], [206, "    return this.useHashQueryForScan ?"], [207, "             \"SELECT * FROM root r WHERE r.id = @startkey\" :"], [208, "             \"SELECT TOP @recordcount * FROM root r WHERE r.myid >= @startkey\";"], [209, "  }"], [210, ""], [249, "    if (null != document) {"], [263, "            new SqlQuerySpec(queryText,"], [265, "                            new SqlParameter(\"@startkey\", startkey))),"], [266, "            getFeedOptions(startkey));"], [395, "  private FeedOptions getFeedOptions(String key) {"], [396, "    if (useSinglePartitionCollection) {"], [397, "      return null;"], [398, "    }"], [399, "    FeedOptions feedOptions = new FeedOptions();"], [400, "    if (this.useHashQueryForScan) {"], [401, "      feedOptions.setEnableCrossPartitionQuery(false);"], [402, "      feedOptions.setPartitionKey(new PartitionKey(key));"], [403, "    } else {"], [404, "      feedOptions.setEnableCrossPartitionQuery(true);"], [405, "      feedOptions.setMaxDegreeOfParallelism(this.maxDegreeOfParallelismForQuery);"], [406, "    }"], [407, "    return feedOptions;"], [408, "  }"], [409, ""], [437, "    if (!this.useHashQueryForScan) {"], [438, "      // This field is only needed for range scans."], [439, "      // Even if this field is present in the document you"], [440, "      // should still partition on id for simplicity of config."], [441, "      document.set(\"myid\", key);"], [442, "    }"]]}, "num_lines_added": 9, "num_lines_removed": 54}