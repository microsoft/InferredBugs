{"hash": "eaff913d28ab736d517fb4df2488ecb563fd2fc2", "message": "Upgrading googlebigtable to the latest version.\nThe API used by googlebigtable has had quite a bit of churn.  This is the minimal set of changes required for the upgrade.\n\nSigned-off-by: Chris Larsen <clarsen@yahoo-inc.com>", "file_num_lines": 350, "diff_parsed": {"added": [[37, "import com.google.bigtable.v2.Column;"], [38, "import com.google.bigtable.v2.Family;"], [39, "import com.google.bigtable.v2.MutateRowRequest;"], [40, "import com.google.bigtable.v2.Mutation;"], [41, "import com.google.bigtable.v2.ReadRowsRequest;"], [42, "import com.google.bigtable.v2.Row;"], [43, "import com.google.bigtable.v2.RowFilter;"], [44, "import com.google.bigtable.v2.RowRange;"], [45, "import com.google.bigtable.v2.RowSet;"], [46, "import com.google.bigtable.v2.Mutation.DeleteFromRow;"], [47, "import com.google.bigtable.v2.Mutation.SetCell;"], [48, "import com.google.bigtable.v2.RowFilter.Chain.Builder;"], [52, "import com.google.cloud.bigtable.grpc.BigtableTableName;"], [54, "import com.google.cloud.bigtable.grpc.async.BulkMutation;"], [108, "  private BulkMutation bulkMutation;"], [109, ""], [115, "    if (getProperties().containsKey(ASYNC_MUTATOR_MAX_MEMORY)) {"], [116, "      CONFIG.set(BigtableOptionsFactory.BIGTABLE_BUFFERED_MUTATOR_MAX_MEMORY_KEY,"], [117, "          getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY));"], [118, "    }"], [119, "    if (getProperties().containsKey(ASYNC_MAX_INFLIGHT_RPCS)) {"], [120, "      CONFIG.set(BigtableOptionsFactory.BIGTABLE_BULK_MAX_ROW_KEY_COUNT,"], [121, "          getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS));"], [122, "    }"], [154, "        asyncExecutor = session.createAsyncExecutor();"], [173, "    if (bulkMutation != null) {"], [174, "      try {"], [175, "        bulkMutation.flush();"], [176, "      } catch(RuntimeException e){"], [177, "        throw new DBException(e);"], [178, "      }"], [179, "    }"], [237, "        .setRows(RowSet.newBuilder()"], [238, "          .addRowKeys(ByteStringer.wrap(key.getBytes())));"], [304, "        .setStartKeyClosed(ByteStringer.wrap(startkey.getBytes()))"], [306, ""], [307, "    final RowSet rowSet = RowSet.newBuilder()"], [308, "        .addRowRanges(range)"], [309, "        .build();"], [310, ""], [314, "        .setRows(rowSet);"], [388, "        bulkMutation.add(rowMutation.build());"], [393, "    } catch (RuntimeException e) {"], [421, "        bulkMutation.add(rowMutation.build());"], [426, "    } catch (RuntimeException e) {"], [440, "      BigtableTableName tableName = options"], [441, "          .getInstanceName()"], [442, "          .toTableName(table);"], [443, "      lastTableBytes = tableName"], [446, "      synchronized(this) {"], [447, "        if (bulkMutation != null) {"], [448, "          bulkMutation.flush();"], [449, "        }"], [450, "        bulkMutation = session.createBulkMutation(tableName, asyncExecutor);"], [451, "      }"]], "deleted": [[37, "import com.google.bigtable.repackaged.com.google.protobuf.ServiceException;"], [38, "import com.google.bigtable.v1.Column;"], [39, "import com.google.bigtable.v1.Family;"], [40, "import com.google.bigtable.v1.MutateRowRequest;"], [41, "import com.google.bigtable.v1.Mutation;"], [42, "import com.google.bigtable.v1.ReadRowsRequest;"], [43, "import com.google.bigtable.v1.Row;"], [44, "import com.google.bigtable.v1.RowFilter;"], [45, "import com.google.bigtable.v1.RowRange;"], [46, "import com.google.bigtable.v1.Mutation.DeleteFromRow;"], [47, "import com.google.bigtable.v1.Mutation.SetCell;"], [48, "import com.google.bigtable.v1.RowFilter.Chain.Builder;"], [53, "import com.google.cloud.bigtable.grpc.async.HeapSizeManager;"], [92, "  private HeapSizeManager heapSizeManager;"], [113, "    CONFIG.set(\"google.bigtable.auth.service.account.enable\", \"true\");"], [114, ""], [146, "        heapSizeManager = new HeapSizeManager("], [147, "            Long.parseLong("], [148, "                getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,"], [149, "                    Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),"], [150, "            Integer.parseInt("], [151, "                getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,"], [152, "                    Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));"], [153, "        asyncExecutor = new AsyncExecutor(client, heapSizeManager);"], [229, "        .setRowKey(ByteStringer.wrap(key.getBytes()));"], [295, "        .setStartKey(ByteStringer.wrap(startkey.getBytes()))"], [297, ""], [301, "        .setRowRange(range);"], [375, "        asyncExecutor.mutateRowAsync(rowMutation.build());"], [380, "    } catch (ServiceException e) {"], [383, "    } catch (InterruptedException e) {"], [384, "      System.err.println(\"Interrupted while inserting key: \" + key + \" \""], [385, "          + e.getMessage());"], [386, "      Thread.currentThread().interrupt();"], [387, "      return Status.ERROR; // never get here, but lets make the compiler happy"], [413, "        asyncExecutor.mutateRowAsync(rowMutation.build());"], [418, "    } catch (ServiceException e) {"], [421, "    } catch (InterruptedException e) {"], [422, "      System.err.println(\"Interrupted while delete key: \" + key + \" \""], [423, "          + e.getMessage());"], [424, "      Thread.currentThread().interrupt();"], [425, "      return Status.ERROR; // never get here, but lets make the compiler happy"], [437, "      lastTableBytes = options"], [438, "          .getClusterName()"], [439, "          .toTableName(table)"]]}, "num_lines_added": 55, "num_lines_removed": 45}