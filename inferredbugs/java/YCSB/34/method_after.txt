  @Override
  public Status update(String table, String key, Map<String, ByteIterator> values) {
    // Azure Cosmos does not have patch support.  Until then we need to read
    // the document, update in place, and then write back.
    // This could actually be made more efficient by using a stored procedure
    // and doing the read/modify write on the server side.  Perhaps
    // that will be a future improvement.

    String documentLink = getDocumentLink(this.databaseName, table, key);
    ResourceResponse<Document> updatedResource = null;
    ResourceResponse<Document> readResouce = null;
    RequestOptions reqOptions = null;
    Document document = null;

    try {
      reqOptions = getRequestOptions(key);
      readResouce = AzureCosmosClient.client.readDocument(documentLink, reqOptions);
      document = readResouce.getResource();
    } catch (DocumentClientException e) {
      if (!this.includeExceptionStackInLog) {
        e = null;
      }
      LOGGER.error("Failed to read key {} in collection {} in database {} during update operation",
          key, table, this.databaseName, e);
      return Status.ERROR;
    }

    // Update values
    for (Entry<String, ByteIterator> entry : values.entrySet()) {
      document.set(entry.getKey(), entry.getValue().toString());
    }

    AccessCondition accessCondition = new AccessCondition();
    accessCondition.setCondition(document.getETag());
    accessCondition.setType(AccessConditionType.IfMatch);
    reqOptions.setAccessCondition(accessCondition);

    try {
      updatedResource = AzureCosmosClient.client.replaceDocument(documentLink, document, reqOptions);
    } catch (DocumentClientException e) {
      if (!this.includeExceptionStackInLog) {
        e = null;
      }
      LOGGER.error("Failed to update key {}", key, e);
      return Status.ERROR;
    }
  
    return Status.OK;
  }