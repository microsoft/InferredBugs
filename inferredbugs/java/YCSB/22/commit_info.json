{"hash": "70f4362bdf63c6de6f408029bdcb6951f02867c6", "message": "[orientdb] OrientDB was updated to 2.2.10 and multithreading bugs fixed (#848)", "file_num_lines": 174, "diff_parsed": {"added": [[20, "import com.orientechnologies.orient.core.db.OPartitionedDatabasePool;"], [21, "import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;"], [30, ""], [40, "  private static final String CLASS        = \"usertable\";"], [41, "  private static final int    FIELD_LENGTH = 32;"], [43, "  private static final String KEY_PREFIX   = \"user\";"], [44, "  private static final int    NUM_FIELDS   = 3;"], [45, "  private static final String TEST_DB_URL  = \"memory:test\";"], [105, "    OPartitionedDatabasePool pool = orientDBClient.getDatabasePool();"], [106, "    try(ODatabaseDocumentTx db = pool.acquire()) {"], [107, "      ODictionary<ORecord> dictionary = db.getDictionary();"], [108, "      ODocument result = dictionary.get(insertKey);"], [110, "      assertTrue(\"Assert a row was inserted.\", result != null);"], [112, "      for (int i = 0; i < NUM_FIELDS; i++) {"], [113, "        assertEquals(\"Assert all inserted columns have correct values.\", result.field(FIELD_PREFIX + i),"], [114, "            insertMap.get(FIELD_PREFIX + i).toString());"], [115, "      }"], [126, "    OPartitionedDatabasePool pool = orientDBClient.getDatabasePool();"], [127, "    try(ODatabaseDocumentTx db = pool.acquire()) {"], [128, "      // Manually insert three documents"], [129, "      for (String key : Arrays.asList(user0, user1, user2)) {"], [130, "        ODocument doc = new ODocument(CLASS);"], [131, "        for (int i = 0; i < NUM_FIELDS; i++) {"], [132, "          doc.field(FIELD_PREFIX + i, preupdateString);"], [133, "        }"], [134, "        doc.save();"], [135, ""], [136, "        ODictionary<ORecord> dictionary = db.getDictionary();"], [137, "        dictionary.put(key, doc);"], [148, "    try(ODatabaseDocumentTx db = pool.acquire()) {"], [149, "      ODictionary<ORecord> dictionary = db.getDictionary();"], [150, "      // Ensure that user0 record was not changed"], [151, "      ODocument result = dictionary.get(user0);"], [152, "      for (int i = 0; i < NUM_FIELDS; i++) {"], [153, "        assertEquals(\"Assert first row fields contain preupdateString\", result.field(FIELD_PREFIX + i), preupdateString);"], [154, "      }"], [156, "      // Check that all the columns have expected values for user1 record"], [157, "      result = dictionary.get(user1);"], [158, "      for (int i = 0; i < NUM_FIELDS; i++) {"], [159, "        assertEquals(\"Assert updated row fields are correct\", result.field(FIELD_PREFIX + i),"], [160, "            updateMap.get(FIELD_PREFIX + i).toString());"], [161, "      }"], [163, "      // Ensure that user2 record was not changed"], [164, "      result = dictionary.get(user2);"], [165, "      for (int i = 0; i < NUM_FIELDS; i++) {"], [166, "        assertEquals(\"Assert third row fields contain preupdateString\", result.field(FIELD_PREFIX + i), preupdateString);"], [167, "      }"], [182, "    for (String field : readFields) {"], [193, "    for (String field : readFields) {"], [210, "    OPartitionedDatabasePool pool = orientDBClient.getDatabasePool();"], [211, "    try(ODatabaseDocumentTx db = pool.acquire()) {"], [212, "      ODictionary<ORecord> dictionary = db.getDictionary();"], [213, ""], [214, "      assertNotNull(\"Assert user0 still exists\", dictionary.get(user0));"], [215, "      assertNull(\"Assert user1 does not exist\", dictionary.get(user1));"], [216, "      assertNotNull(\"Assert user2 still exists\", dictionary.get(user2));"], [217, "    }"], [231, "    int startIndex = 0;"], [243, "    for (HashMap<String, ByteIterator> result : resultVector) {"], [245, "      for (String field : fieldSet) {"], [246, "        assertEquals(\"Assert this field is correct in this row\", keyMap.get(KEY_PREFIX + testIndex).get(field).toString(),"], [247, "            result.get(field).toString());"]], "deleted": [[37, "  private static final String CLASS = \"usertable\";"], [38, "  private static final int FIELD_LENGTH = 32;"], [40, "  private static final String KEY_PREFIX = \"user\";"], [41, "  private static final int NUM_FIELDS = 3;"], [42, "  private static final String TEST_DB_URL = \"memory:test\";"], [44, "  private static ODictionary<ORecord> orientDBDictionary;"], [57, "    orientDBDictionary = orientDBClient.getDB().getDictionary();"], [104, "    ODocument result = orientDBDictionary.get(insertKey);"], [106, "    assertTrue(\"Assert a row was inserted.\", result != null);"], [108, "    for (int i = 0; i < NUM_FIELDS; i++) {"], [109, "      assertEquals(\"Assert all inserted columns have correct values.\", result.field(FIELD_PREFIX + i), insertMap.get(FIELD_PREFIX + i).toString());"], [120, "    // Manually insert three documents"], [121, "    for(String key: Arrays.asList(user0, user1, user2)) {"], [122, "      ODocument doc = new ODocument(CLASS);"], [123, "      for (int i = 0; i < NUM_FIELDS; i++) {"], [124, "        doc.field(FIELD_PREFIX + i, preupdateString);"], [126, "      doc.save();"], [127, "      orientDBDictionary.put(key, doc);"], [137, "    // Ensure that user0 record was not changed"], [138, "    ODocument result = orientDBDictionary.get(user0);"], [139, "    for (int i = 0; i < NUM_FIELDS; i++) {"], [140, "      assertEquals(\"Assert first row fields contain preupdateString\", result.field(FIELD_PREFIX + i), preupdateString);"], [141, "    }"], [143, "    // Check that all the columns have expected values for user1 record"], [144, "    result = orientDBDictionary.get(user1);"], [145, "    for (int i = 0; i < NUM_FIELDS; i++) {"], [146, "      assertEquals(\"Assert updated row fields are correct\", result.field(FIELD_PREFIX + i), updateMap.get(FIELD_PREFIX + i).toString());"], [147, "    }"], [149, "    // Ensure that user2 record was not changed"], [150, "    result = orientDBDictionary.get(user2);"], [151, "    for (int i = 0; i < NUM_FIELDS; i++) {"], [152, "      assertEquals(\"Assert third row fields contain preupdateString\", result.field(FIELD_PREFIX + i), preupdateString);"], [167, "    for (String field: readFields) {"], [178, "    for (String field: readFields) {"], [195, "    assertNotNull(\"Assert user0 still exists\", orientDBDictionary.get(user0));"], [196, "    assertNull(\"Assert user1 does not exist\", orientDBDictionary.get(user1));"], [197, "    assertNotNull(\"Assert user2 still exists\", orientDBDictionary.get(user2));"], [211, "    int startIndex = 1;"], [220, "    /**"], [221, "     * Part of the known issue about the broken iterator in orientdb is that the iterator"], [222, "     * starts at index 1 instead of index 0. Because of this, to test it we must increment"], [223, "     * the start index. When that known issue has been fixed, remove the increment below."], [224, "     * Track the issue here: https://github.com/orientechnologies/orientdb/issues/5541"], [225, "     * This fix was implemented for orientechnologies:orientdb-client:2.1.8"], [226, "     */"], [230, "    for (HashMap<String, ByteIterator> result: resultVector) {"], [232, "      for (String field: fieldSet) {"], [233, "        assertEquals(\"Assert this field is correct in this row\", keyMap.get(KEY_PREFIX + testIndex).get(field).toString(), result.get(field).toString());"]]}, "num_lines_added": 62, "num_lines_removed": 48}