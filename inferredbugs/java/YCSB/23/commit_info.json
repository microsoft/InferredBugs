{"hash": "3e28ed67010fbc52323b3370d4ec5e5fcb71b0b4", "message": "[core] Fix checkstyle for RestWorkload (#896)", "file_num_lines": 208, "diff_parsed": {"added": [[3, " * <p>"], [7, " * <p>"], [9, " * <p>"], [20, "import com.yahoo.ycsb.ByteIterator;"], [21, "import com.yahoo.ycsb.DB;"], [22, "import com.yahoo.ycsb.RandomByteIterator;"], [23, "import com.yahoo.ycsb.WorkloadException;"], [24, "import com.yahoo.ycsb.generator.*;"], [25, ""], [58, ""], [116, "      .parseInt(p.getProperty(INSERT_RECORD_COUNT_PROPERTY, String.valueOf(Integer.MAX_VALUE)));"], [118, "      .parseInt(p.getProperty(DELETE_RECORD_COUNT_PROPERTY, String.valueOf(Integer.MAX_VALUE)));"], [120, "      .parseInt(p.getProperty(UPDATE_RECORD_COUNT_PROPERTY, String.valueOf(Integer.MAX_VALUE)));"], [121, ""], [122, "    readUrlMap = getTrace(p.getProperty(READ_TRACE_FILE, READ_TRACE_FILE_DEFAULT), readRecordCount);"], [123, "    insertUrlMap = getTrace(p.getProperty(INSERT_TRACE_FILE, INSERT_TRACE_FILE_DEFAULT), insertRecordCount);"], [124, "    deleteUrlMap = getTrace(p.getProperty(DELETE_TRACE_FILE, DELETE_TRACE_FILE_DEFAULT), deleteRecordCount);"], [125, "    updateUrlMap = getTrace(p.getProperty(UPDATE_TRACE_FILE, UPDATE_TRACE_FILE_DEFAULT), updateRecordCount);"], [126, ""], [132, "    double readZipfconstant = Double.parseDouble(p.getProperty(READ_ZIPFIAN_CONSTANT, READ_ZIPFIAN_CONSTANT_DEAFULT));"], [146, ""], [148, "    // Re-using CoreWorkload method."], [152, "        .parseDouble(p.getProperty(DELETE_PROPORTION_PROPERTY, DELETE_PROPORTION_PROPERTY_DEFAULT));"], [153, "    if (deleteproportion > 0) {"], [155, "    }"], [160, "                                               Properties p) throws WorkloadException {"], [161, "    NumberGenerator keychooser;"], [162, ""], [163, "    switch (requestDistrib) {"], [164, "    case \"exponential\":"], [165, "      double percentile = Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_PERCENTILE_PROPERTY,"], [166, "          ExponentialGenerator.EXPONENTIAL_PERCENTILE_DEFAULT));"], [167, "      double frac = Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_FRAC_PROPERTY,"], [168, "          ExponentialGenerator.EXPONENTIAL_FRAC_DEFAULT));"], [169, "      keychooser = new ExponentialGenerator(percentile, recordCount * frac);"], [170, "      break;"], [171, "    case \"uniform\":"], [172, "      keychooser = new UniformIntegerGenerator(0, recordCount - 1);"], [173, "      break;"], [174, "    case \"zipfian\":"], [175, "      keychooser = new ZipfianGenerator(recordCount, zipfContant);"], [176, "      break;"], [177, "    case \"latest\":"], [178, "      throw new WorkloadException(\"Latest request distribution is not supported for RestWorkload.\");"], [179, "    case \"hotspot\":"], [180, "      double hotsetfraction = Double.parseDouble(p.getProperty(HOTSPOT_DATA_FRACTION, HOTSPOT_DATA_FRACTION_DEFAULT));"], [181, "      double hotopnfraction = Double.parseDouble(p.getProperty(HOTSPOT_OPN_FRACTION, HOTSPOT_OPN_FRACTION_DEFAULT));"], [182, "      keychooser = new HotspotIntegerGenerator(0, recordCount - 1, hotsetfraction, hotopnfraction);"], [183, "      break;"], [184, "    default:"], [185, "      throw new WorkloadException(\"Unknown request distribution \\\"\" + requestDistrib + \"\\\"\");"], [193, "    String fieldlengthdistribution = p.getProperty(FIELD_LENGTH_DISTRIBUTION_PROPERTY,"], [194, "        FIELD_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT);"], [197, "      int fieldlength = Integer.parseInt(p.getProperty(FIELD_LENGTH_PROPERTY, FIELD_LENGTH_PROPERTY_DEFAULT));"], [198, "      double insertsizezipfconstant = Double"], [199, "          .parseDouble(p.getProperty(INSERT_SIZE_ZIPFIAN_CONSTANT, INSERT_SIZE_ZIPFIAN_CONSTANT_DEAFULT));"], [200, "      fieldLengthGenerator = new ZipfianGenerator(1, fieldlength, insertsizezipfconstant);"], [201, "    }"], [206, "   * Reads the trace file and returns a URL map."], [209, "    throws WorkloadException {"], [218, "        if (count >= recordCount) {"], [220, "        }"], [225, "        \"Error while reading the trace. Please make sure the trace file path is correct. \""], [226, "          + e.getLocalizedMessage());"], [241, "    String operation = operationchooser.nextString();"], [242, "    if (operation == null) {"], [243, "      return false;"], [244, "    }"], [245, ""], [246, "    switch (operation) {"], [261, ""], [263, "   * Returns next URL to be called."], [266, "    if (opType == 1) {"], [268, "    } else if (opType == 2) {"], [270, "    } else if (opType == 3) {"], [272, "    } else {"], [274, "    }"], [281, "  }"], [282, ""], [302, ""]], "deleted": [[3, " *"], [7, " *"], [9, " *"], [27, "import com.yahoo.ycsb.ByteIterator;"], [28, "import com.yahoo.ycsb.DB;"], [29, "import com.yahoo.ycsb.RandomByteIterator;"], [30, "import com.yahoo.ycsb.WorkloadException;"], [31, "import com.yahoo.ycsb.generator.DiscreteGenerator;"], [32, "import com.yahoo.ycsb.generator.ExponentialGenerator;"], [33, "import com.yahoo.ycsb.generator.HotspotIntegerGenerator;"], [34, "import com.yahoo.ycsb.generator.NumberGenerator;"], [35, "import com.yahoo.ycsb.generator.UniformIntegerGenerator;"], [36, "import com.yahoo.ycsb.generator.ZipfianGenerator;"], [37, ""], [63, ""], [121, "        .parseInt(p.getProperty(INSERT_RECORD_COUNT_PROPERTY, String.valueOf(Integer.MAX_VALUE)));"], [123, "        .parseInt(p.getProperty(DELETE_RECORD_COUNT_PROPERTY, String.valueOf(Integer.MAX_VALUE)));"], [125, "        .parseInt(p.getProperty(UPDATE_RECORD_COUNT_PROPERTY, String.valueOf(Integer.MAX_VALUE)));"], [126, ""], [127, "      readUrlMap = getTrace(p.getProperty(READ_TRACE_FILE, READ_TRACE_FILE_DEFAULT), readRecordCount);"], [128, "      insertUrlMap = getTrace(p.getProperty(INSERT_TRACE_FILE, INSERT_TRACE_FILE_DEFAULT), insertRecordCount);"], [129, "      deleteUrlMap = getTrace(p.getProperty(DELETE_TRACE_FILE, DELETE_TRACE_FILE_DEFAULT), deleteRecordCount);"], [130, "      updateUrlMap = getTrace(p.getProperty(UPDATE_TRACE_FILE, UPDATE_TRACE_FILE_DEFAULT), updateRecordCount);"], [131, ""], [137, "    double readZipfconstant = Double"], [138, "        .parseDouble(p.getProperty(READ_ZIPFIAN_CONSTANT, READ_ZIPFIAN_CONSTANT_DEAFULT));"], [152, ""], [154, "     // Re-using CoreWorkload method."], [158, "\t\t        .parseDouble(p.getProperty(DELETE_PROPORTION_PROPERTY, DELETE_PROPORTION_PROPERTY_DEFAULT));"], [159, "    if (deleteproportion > 0)"], [165, "      Properties p) throws WorkloadException {"], [166, "    NumberGenerator keychooser = null;"], [167, ""], [168, "    switch(requestDistrib) {"], [169, "      case \"exponential\":"], [170, "        double percentile = Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_PERCENTILE_PROPERTY,"], [171, "            ExponentialGenerator.EXPONENTIAL_PERCENTILE_DEFAULT));"], [172, "        double frac = Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_FRAC_PROPERTY,"], [173, "            ExponentialGenerator.EXPONENTIAL_FRAC_DEFAULT));"], [174, "        keychooser = new ExponentialGenerator(percentile, recordCount * frac);"], [175, "        break;"], [176, "      case \"uniform\":"], [177, "        keychooser = new UniformIntegerGenerator(0, recordCount - 1);"], [178, "        break;"], [179, "      case \"zipfian\":"], [180, "        keychooser = new ZipfianGenerator(recordCount, zipfContant);"], [181, "        break;"], [182, "      case \"latest\":"], [183, "        throw new WorkloadException(\"Latest request distribution is not supported for RestWorkload.\");"], [184, "      case \"hotspot\":"], [185, "        double hotsetfraction = Double"], [186, "          .parseDouble(p.getProperty(HOTSPOT_DATA_FRACTION, HOTSPOT_DATA_FRACTION_DEFAULT));"], [187, "        double hotopnfraction = Double"], [188, "          .parseDouble(p.getProperty(HOTSPOT_OPN_FRACTION, HOTSPOT_OPN_FRACTION_DEFAULT));"], [189, "        keychooser = new HotspotIntegerGenerator(0, recordCount - 1, hotsetfraction, hotopnfraction);"], [190, "        break;"], [191, "      default:"], [192, "        throw new WorkloadException(\"Unknown request distribution \\\"\" + requestDistrib + \"\\\"\");"], [200, "    String fieldlengthdistribution = p.getProperty("], [201, "            FIELD_LENGTH_DISTRIBUTION_PROPERTY, FIELD_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT);"], [204, "    \t  int fieldlength ="], [205, "    \t\t        Integer.parseInt(p.getProperty(FIELD_LENGTH_PROPERTY, FIELD_LENGTH_PROPERTY_DEFAULT));"], [206, "        double insertsizezipfconstant = Double"], [207, "            .parseDouble(p.getProperty(INSERT_SIZE_ZIPFIAN_CONSTANT, INSERT_SIZE_ZIPFIAN_CONSTANT_DEAFULT));"], [208, "        fieldLengthGenerator = new ZipfianGenerator(1, fieldlength, insertsizezipfconstant);"], [209, "      }"], [214, "   *  Reads the trace file and returns a URL map."], [217, "      throws WorkloadException {"], [226, "        if (count >= recordCount)"], [232, "          \"Error while reading the trace. Please make sure the trace file path is correct. \""], [233, "              + e.getLocalizedMessage());"], [248, "    switch (operationchooser.nextString()) {"], [263, ""], [265, "   *  Returns next URL to be called."], [268, "    if (opType == 1)"], [270, "    else if (opType == 2)"], [272, "    else if (opType == 3)"], [274, "    else"], [282, "  }"], [283, ""], [303, ""]]}, "num_lines_added": 80, "num_lines_removed": 81}