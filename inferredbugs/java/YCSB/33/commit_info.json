{"hash": "38052885bf58c6f32c4bbd0142a221564d53c3ff", "message": "[cassandra] Update CassandraCQLClient to use PreparedStatement for better performance (#1051)\n\n* Optimize PreparedStatement lookup by looking up by field set and avoiding building the query string unless the statement has not been prepared.\r\n* Add tests for update, delete and prepared statements.\r\n* fix logger calls\r\n* Credit to @haaawk for incorporating some of the feedback", "file_num_lines": 402, "diff_parsed": {"added": [[29, "import com.datastax.driver.core.PreparedStatement;"], [30, "import com.datastax.driver.core.BoundStatement;"], [34, "import com.datastax.driver.core.querybuilder.Update;"], [43, "import java.util.HashSet;"], [47, "import java.util.concurrent.ConcurrentHashMap;"], [48, "import java.util.concurrent.ConcurrentMap;"], [50, "import java.util.concurrent.atomic.AtomicReference;"], [51, ""], [52, "import org.slf4j.Logger;"], [53, "import org.slf4j.LoggerFactory;"], [54, "import org.slf4j.helpers.MessageFormatter;"], [65, "  private static Logger logger = LoggerFactory.getLogger(CassandraCQLClient.class);"], [66, ""], [70, "  private static ConcurrentMap<Set<String>, PreparedStatement> readStmts ="], [71, "      new ConcurrentHashMap<Set<String>, PreparedStatement>();"], [72, "  private static ConcurrentMap<Set<String>, PreparedStatement> scanStmts ="], [73, "      new ConcurrentHashMap<Set<String>, PreparedStatement>();"], [74, "  private static ConcurrentMap<Set<String>, PreparedStatement> insertStmts ="], [75, "      new ConcurrentHashMap<Set<String>, PreparedStatement>();"], [76, "  private static ConcurrentMap<Set<String>, PreparedStatement> updateStmts ="], [77, "      new ConcurrentHashMap<Set<String>, PreparedStatement>();"], [78, "  private static AtomicReference<PreparedStatement> readAllStmt ="], [79, "      new AtomicReference<PreparedStatement>();"], [80, "  private static AtomicReference<PreparedStatement> scanAllStmt ="], [81, "      new AtomicReference<PreparedStatement>();"], [82, "  private static AtomicReference<PreparedStatement> deleteStmt ="], [83, "      new AtomicReference<PreparedStatement>();"], [84, ""], [213, "        logger.info(\"Connected to cluster: {}\\n\","], [217, "          logger.info(\"Datacenter: {}; Host: {}; Rack: {}\\n\","], [239, "        readStmts.clear();"], [240, "        scanStmts.clear();"], [241, "        insertStmts.clear();"], [242, "        updateStmts.clear();"], [243, "        readAllStmt.set(null);"], [244, "        scanAllStmt.set(null);"], [245, "        deleteStmt.set(null);"], [277, "      PreparedStatement stmt = (fields == null) ? readAllStmt.get() : readStmts.get(fields);"], [278, ""], [279, "      // Prepare statement on demand"], [280, "      if (stmt == null) {"], [281, "        Select.Builder selectBuilder;"], [282, ""], [283, "        if (fields == null) {"], [284, "          selectBuilder = QueryBuilder.select().all();"], [285, "        } else {"], [286, "          selectBuilder = QueryBuilder.select();"], [287, "          for (String col : fields) {"], [288, "            ((Select.Selection) selectBuilder).column(col);"], [289, "          }"], [292, "        stmt = session.prepare(selectBuilder.from(table)"], [293, "                               .where(QueryBuilder.eq(YCSB_KEY, QueryBuilder.bindMarker()))"], [294, "                               .limit(1));"], [295, "        stmt.setConsistencyLevel(readConsistencyLevel);"], [296, "        if (trace) {"], [297, "          stmt.enableTracing();"], [298, "        }"], [300, "        PreparedStatement prevStmt = (fields == null) ?"], [301, "                                     readAllStmt.getAndSet(stmt) :"], [302, "                                     readStmts.putIfAbsent(new HashSet(fields), stmt);"], [303, "        if (prevStmt != null) {"], [304, "          stmt = prevStmt;"], [305, "        }"], [307, ""], [308, "      logger.debug(stmt.getQueryString());"], [309, "      logger.debug(\"key = {}\", key);"], [310, ""], [311, "      ResultSet rs = session.execute(stmt.bind(key));"], [333, "      logger.error(MessageFormatter.format(\"Error reading key: {}\", key).getMessage(), e);"], [364, "      PreparedStatement stmt = (fields == null) ? scanAllStmt.get() : scanStmts.get(fields);"], [365, ""], [366, "      // Prepare statement on demand"], [367, "      if (stmt == null) {"], [368, "        Select.Builder selectBuilder;"], [369, ""], [370, "        if (fields == null) {"], [371, "          selectBuilder = QueryBuilder.select().all();"], [372, "        } else {"], [373, "          selectBuilder = QueryBuilder.select();"], [374, "          for (String col : fields) {"], [375, "            ((Select.Selection) selectBuilder).column(col);"], [376, "          }"], [379, "        Select selectStmt = selectBuilder.from(table);"], [380, ""], [381, "        // The statement builder is not setup right for tokens."], [382, "        // So, we need to build it manually."], [383, "        String initialStmt = selectStmt.toString();"], [384, "        StringBuilder scanStmt = new StringBuilder();"], [385, "        scanStmt.append(initialStmt.substring(0, initialStmt.length() - 1));"], [386, "        scanStmt.append(\" WHERE \");"], [387, "        scanStmt.append(QueryBuilder.token(YCSB_KEY));"], [388, "        scanStmt.append(\" >= \");"], [389, "        scanStmt.append(\"token(\");"], [390, "        scanStmt.append(QueryBuilder.bindMarker());"], [391, "        scanStmt.append(\")\");"], [392, "        scanStmt.append(\" LIMIT \");"], [393, "        scanStmt.append(QueryBuilder.bindMarker());"], [394, ""], [395, "        stmt = session.prepare(scanStmt.toString());"], [396, "        stmt.setConsistencyLevel(readConsistencyLevel);"], [397, "        if (trace) {"], [398, "          stmt.enableTracing();"], [399, "        }"], [400, ""], [401, "        PreparedStatement prevStmt = (fields == null) ?"], [402, "                                     scanAllStmt.getAndSet(stmt) :"], [403, "                                     scanStmts.putIfAbsent(new HashSet(fields), stmt);"], [404, "        if (prevStmt != null) {"], [405, "          stmt = prevStmt;"], [406, "        }"], [408, ""], [409, "      logger.debug(stmt.getQueryString());"], [410, "      logger.debug(\"startKey = {}, recordcount = {}\", startkey, recordcount);"], [411, ""], [412, "      ResultSet rs = session.execute(stmt.bind(startkey, Integer.valueOf(recordcount)));"], [436, "      logger.error("], [437, "          MessageFormatter.format(\"Error scanning with startkey: {}\", startkey).getMessage(), e);"], [457, "  public Status update(String table, String key, Map<String, ByteIterator> values) {"], [458, ""], [459, "    try {"], [460, "      Set<String> fields = values.keySet();"], [461, "      PreparedStatement stmt = updateStmts.get(fields);"], [462, ""], [463, "      // Prepare statement on demand"], [464, "      if (stmt == null) {"], [465, "        Update updateStmt = QueryBuilder.update(table);"], [466, ""], [467, "        // Add fields"], [468, "        for (String field : fields) {"], [469, "          updateStmt.with(QueryBuilder.set(field, QueryBuilder.bindMarker()));"], [470, "        }"], [471, ""], [472, "        // Add key"], [473, "        updateStmt.where(QueryBuilder.eq(YCSB_KEY, QueryBuilder.bindMarker()));"], [474, ""], [475, "        stmt = session.prepare(updateStmt);"], [476, "        stmt.setConsistencyLevel(writeConsistencyLevel);"], [477, "        if (trace) {"], [478, "          stmt.enableTracing();"], [479, "        }"], [480, ""], [481, "        PreparedStatement prevStmt = updateStmts.putIfAbsent(new HashSet(fields), stmt);"], [482, "        if (prevStmt != null) {"], [483, "          stmt = prevStmt;"], [484, "        }"], [485, "      }"], [486, ""], [487, "      if (logger.isDebugEnabled()) {"], [488, "        logger.debug(stmt.getQueryString());"], [489, "        logger.debug(\"key = {}\", key);"], [490, "        for (Map.Entry<String, ByteIterator> entry : values.entrySet()) {"], [491, "          logger.debug(\"{} = {}\", entry.getKey(), entry.getValue());"], [492, "        }"], [493, "      }"], [494, ""], [495, "      // Add fields"], [496, "      ColumnDefinitions vars = stmt.getVariables();"], [497, "      BoundStatement boundStmt = stmt.bind();"], [498, "      for (int i = 0; i < vars.size() - 1; i++) {"], [499, "        boundStmt.setString(i, values.get(vars.getName(i)).toString());"], [500, "      }"], [501, ""], [502, "      // Add key"], [503, "      boundStmt.setString(vars.size() - 1, key);"], [504, ""], [505, "      session.execute(boundStmt);"], [506, ""], [507, "      return Status.OK;"], [508, "    } catch (Exception e) {"], [509, "      logger.error(MessageFormatter.format(\"Error updating key: {}\", key).getMessage(), e);"], [510, "    }"], [511, ""], [512, "    return Status.ERROR;"], [529, "  public Status insert(String table, String key, Map<String, ByteIterator> values) {"], [532, "      Set<String> fields = values.keySet();"], [533, "      PreparedStatement stmt = insertStmts.get(fields);"], [535, "      // Prepare statement on demand"], [536, "      if (stmt == null) {"], [537, "        Insert insertStmt = QueryBuilder.insertInto(table);"], [539, "        // Add key"], [540, "        insertStmt.value(YCSB_KEY, QueryBuilder.bindMarker());"], [542, "        // Add fields"], [543, "        for (String field : fields) {"], [544, "          insertStmt.value(field, QueryBuilder.bindMarker());"], [545, "        }"], [547, "        stmt = session.prepare(insertStmt);"], [548, "        stmt.setConsistencyLevel(writeConsistencyLevel);"], [549, "        if (trace) {"], [550, "          stmt.enableTracing();"], [551, "        }"], [553, "        PreparedStatement prevStmt = insertStmts.putIfAbsent(new HashSet(fields), stmt);"], [554, "        if (prevStmt != null) {"], [555, "          stmt = prevStmt;"], [556, "        }"], [558, ""], [559, "      if (logger.isDebugEnabled()) {"], [560, "        logger.debug(stmt.getQueryString());"], [561, "        logger.debug(\"key = {}\", key);"], [562, "        for (Map.Entry<String, ByteIterator> entry : values.entrySet()) {"], [563, "          logger.debug(\"{} = {}\", entry.getKey(), entry.getValue());"], [564, "        }"], [566, ""], [567, "      // Add key"], [568, "      BoundStatement boundStmt = stmt.bind().setString(0, key);"], [569, ""], [570, "      // Add fields"], [571, "      ColumnDefinitions vars = stmt.getVariables();"], [572, "      for (int i = 1; i < vars.size(); i++) {"], [573, "        boundStmt.setString(i, values.get(vars.getName(i)).toString());"], [574, "      }"], [575, ""], [576, "      session.execute(boundStmt);"], [580, "      logger.error(MessageFormatter.format(\"Error inserting key: {}\", key).getMessage(), e);"], [599, "      PreparedStatement stmt = deleteStmt.get();"], [600, ""], [601, "      // Prepare statement on demand"], [602, "      if (stmt == null) {"], [603, "        stmt = session.prepare(QueryBuilder.delete().from(table)"], [604, "                               .where(QueryBuilder.eq(YCSB_KEY, QueryBuilder.bindMarker())));"], [605, "        stmt.setConsistencyLevel(writeConsistencyLevel);"], [606, "        if (trace) {"], [607, "          stmt.enableTracing();"], [608, "        }"], [610, "        PreparedStatement prevStmt = deleteStmt.getAndSet(stmt);"], [611, "        if (prevStmt != null) {"], [612, "          stmt = prevStmt;"], [613, "        }"], [615, ""], [616, "      logger.debug(stmt.getQueryString());"], [617, "      logger.debug(\"key = {}\", key);"], [618, ""], [619, "      session.execute(stmt.bind(key));"], [623, "      logger.error(MessageFormatter.format(\"Error deleting key: {}\", key).getMessage(), e);"]], "deleted": [[29, "import com.datastax.driver.core.SimpleStatement;"], [30, "import com.datastax.driver.core.Statement;"], [187, "        System.err.printf(\"Connected to cluster: %s\\n\","], [191, "          System.out.printf(\"Datacenter: %s; Host: %s; Rack: %s\\n\","], [244, "      Statement stmt;"], [245, "      Select.Builder selectBuilder;"], [246, ""], [247, "      if (fields == null) {"], [248, "        selectBuilder = QueryBuilder.select().all();"], [249, "      } else {"], [250, "        selectBuilder = QueryBuilder.select();"], [251, "        for (String col : fields) {"], [252, "          ((Select.Selection) selectBuilder).column(col);"], [254, "      }"], [256, "      stmt = selectBuilder.from(table).where(QueryBuilder.eq(YCSB_KEY, key))"], [257, "          .limit(1);"], [258, "      stmt.setConsistencyLevel(readConsistencyLevel);"], [260, "      if (debug) {"], [261, "        System.out.println(stmt.toString());"], [262, "      }"], [263, "      if (trace) {"], [264, "        stmt.enableTracing();"], [266, ""], [267, "      ResultSet rs = session.execute(stmt);"], [289, "      e.printStackTrace();"], [290, "      System.out.println(\"Error reading key: \" + key);"], [321, "      Statement stmt;"], [322, "      Select.Builder selectBuilder;"], [323, ""], [324, "      if (fields == null) {"], [325, "        selectBuilder = QueryBuilder.select().all();"], [326, "      } else {"], [327, "        selectBuilder = QueryBuilder.select();"], [328, "        for (String col : fields) {"], [329, "          ((Select.Selection) selectBuilder).column(col);"], [331, "      }"], [333, "      stmt = selectBuilder.from(table);"], [334, ""], [335, "      // The statement builder is not setup right for tokens."], [336, "      // So, we need to build it manually."], [337, "      String initialStmt = stmt.toString();"], [338, "      StringBuilder scanStmt = new StringBuilder();"], [339, "      scanStmt.append(initialStmt.substring(0, initialStmt.length() - 1));"], [340, "      scanStmt.append(\" WHERE \");"], [341, "      scanStmt.append(QueryBuilder.token(YCSB_KEY));"], [342, "      scanStmt.append(\" >= \");"], [343, "      scanStmt.append(\"token('\");"], [344, "      scanStmt.append(startkey);"], [345, "      scanStmt.append(\"')\");"], [346, "      scanStmt.append(\" LIMIT \");"], [347, "      scanStmt.append(recordcount);"], [348, ""], [349, "      stmt = new SimpleStatement(scanStmt.toString());"], [350, "      stmt.setConsistencyLevel(readConsistencyLevel);"], [351, ""], [352, "      if (debug) {"], [353, "        System.out.println(stmt.toString());"], [354, "      }"], [355, "      if (trace) {"], [356, "        stmt.enableTracing();"], [358, ""], [359, "      ResultSet rs = session.execute(stmt);"], [383, "      e.printStackTrace();"], [384, "      System.out.println(\"Error scanning with startkey: \" + startkey);"], [404, "  public Status update(String table, String key,"], [405, "                       Map<String, ByteIterator> values) {"], [406, "    // Insert and updates provide the same functionality"], [407, "    return insert(table, key, values);"], [424, "  public Status insert(String table, String key,"], [425, "      Map<String, ByteIterator> values) {"], [428, "      Insert insertStmt = QueryBuilder.insertInto(table);"], [430, "      // Add key"], [431, "      insertStmt.value(YCSB_KEY, key);"], [433, "      // Add fields"], [434, "      for (Map.Entry<String, ByteIterator> entry : values.entrySet()) {"], [435, "        Object value;"], [436, "        ByteIterator byteIterator = entry.getValue();"], [437, "        value = byteIterator.toString();"], [439, "        insertStmt.value(entry.getKey(), value);"], [440, "      }"], [442, "      insertStmt.setConsistencyLevel(writeConsistencyLevel);"], [444, "      if (debug) {"], [445, "        System.out.println(insertStmt.toString());"], [447, "      if (trace) {"], [448, "        insertStmt.enableTracing();"], [450, ""], [451, "      session.execute(insertStmt);"], [455, "      e.printStackTrace();"], [474, "      Statement stmt;"], [475, ""], [476, "      stmt = QueryBuilder.delete().from(table)"], [477, "          .where(QueryBuilder.eq(YCSB_KEY, key));"], [478, "      stmt.setConsistencyLevel(writeConsistencyLevel);"], [480, "      if (debug) {"], [481, "        System.out.println(stmt.toString());"], [482, "      }"], [483, "      if (trace) {"], [484, "        stmt.enableTracing();"], [486, ""], [487, "      session.execute(stmt);"], [491, "      e.printStackTrace();"], [492, "      System.out.println(\"Error deleting key: \" + key);"]]}, "num_lines_added": 233, "num_lines_removed": 102}