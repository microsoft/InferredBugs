{"hash": "0f3944244e31c5763a014f487f45e5e21af55802", "message": "[FIXES MVERSIONS-190] resolve-ranges goal doesn't resolve ranges for artifacts with '${project.groupId}' groupId\n\n* May actually fix a number of other edge cases where the pom was not being updated if the dependency included some core property evaluation.\n\n* This fix is limited to the special properties\n    - project.parent.groupId\n    - project.parent.artifactId\n    - project.parent.version\n    - project.groupId\n    - project.artifactId\n    - project.version\n\n* While support could be added for other properties, it gets trickier when people are affecting those properties via profiles etc., so simpler just to support only 'core' pom properties\n\ngit-svn-id: file:///home/tiste/MOJOHAUS-TO-GIT/SVN-MOJO-WIP/trunk/mojo/versions-maven-plugin@17741 52ab4f32-60fc-0310-b215-8acea882cd1b", "file_num_lines": 1195, "diff_parsed": {"added": [[55, "import java.util.Arrays;"], [58, "import java.util.HashMap;"], [59, "import java.util.HashSet;"], [207, "                path = path + \"/\" + event.asStartElement().getName().getLocalPart();"], [277, "                path = path + \"/\" + event.asStartElement().getName().getLocalPart();"], [325, "                path = path + \"/\" + event.asStartElement().getName().getLocalPart();"], [375, "                path = path + \"/\" + event.asStartElement().getName().getLocalPart();"], [428, "                path = path + \"/\" + elementName;"], [480, ""], [481, "        Set<String> implicitPaths = new HashSet<String>("], [482, "            Arrays.<String>asList( \"/project/parent/groupId\", \"/project/parent/artifactId\", \"/project/parent/version\","], [483, "                                   \"/project/groupId\", \"/project/artifactId\", \"/project/version\" ) );"], [484, "        Map<String, String> implicitProperties = new HashMap<String, String>();"], [485, ""], [486, "        pom.rewind();"], [487, ""], [488, "        while ( pom.hasNext() )"], [489, "        {"], [490, "            while ( pom.hasNext() )"], [491, "            {"], [492, "                XMLEvent event = pom.nextEvent();"], [493, "                if ( event.isStartElement() )"], [494, "                {"], [495, "                    stack.push( path );"], [496, "                    final String elementName = event.asStartElement().getName().getLocalPart();"], [497, "                    path = path + \"/\" + elementName;"], [498, ""], [499, "                    if ( implicitPaths.contains( path ) )"], [500, "                    {"], [501, "                        final String elementText = pom.getElementText().trim();"], [502, "                        implicitProperties.put( path.substring( 1 ).replace( '/', '.' ), elementText );"], [503, "                        path = stack.pop();"], [504, "                    }"], [505, "                }"], [506, "                if ( event.isEndElement() )"], [507, "                {"], [508, "                    path = stack.pop();"], [509, "                }"], [510, "            }"], [511, "        }"], [512, ""], [513, "        boolean modified = true;"], [514, "        while ( modified )"], [515, "        {"], [516, "            modified = false;"], [517, "            for ( Map.Entry<String, String> entry : implicitProperties.entrySet() )"], [518, "            {"], [519, "                if ( entry.getKey().contains( \".parent\" ) )"], [520, "                {"], [521, "                    String child = entry.getKey().replace( \".parent\", \"\" );"], [522, "                    if ( !implicitProperties.containsKey( child ) )"], [523, "                    {"], [524, "                        implicitProperties.put( child, entry.getValue() );"], [525, "                        modified = true;"], [526, "                        break;"], [527, "                    }"], [528, "                }"], [529, "            }"], [530, "        }"], [531, ""], [532, "        System.out.println( \"Props: \" + implicitProperties );"], [533, ""], [534, "        stack = new Stack<String>();"], [535, "        path = \"\";"], [542, "        final Pattern matchScopeRegex = Pattern.compile( \"/project\" + \"(/profiles/profile)?\" +"], [543, "                                                             \"((/dependencyManagement)|(/build(/pluginManagement)?/plugins/plugin))?\""], [544, "                                                             + \"/dependencies/dependency\" );"], [546, "        final Pattern matchTargetRegex = Pattern.compile( \"/project\" + \"(/profiles/profile)?\" +"], [547, "                                                              \"((/dependencyManagement)|(/build(/pluginManagement)?/plugins/plugin))?\""], [548, "                                                              + \"/dependencies/dependency\" +"], [549, "                                                              \"((/groupId)|(/artifactId)|(/version))\" );"], [560, "                path = path + \"/\" + elementName;"], [578, "                        haveGroupId = groupId.equals( evaluate( pom.getElementText().trim(), implicitProperties ) );"], [583, "                        haveArtifactId ="], [584, "                            artifactId.equals( evaluate( pom.getElementText().trim(), implicitProperties ) );"], [634, "     * A lightweight expression evaluation function."], [635, "     *"], [636, "     * @param expr       The expression to evaluate."], [637, "     * @param properties The properties to substitute."], [638, "     * @return The evaluated expression."], [639, "     */"], [640, "    public static String evaluate( String expr, Map<String, String> properties )"], [641, "    {"], [642, "        if ( expr == null )"], [643, "        {"], [644, "            return null;"], [645, "        }"], [646, ""], [647, "        String expression = stripTokens( expr );"], [648, "        if ( expression.equals( expr ) )"], [649, "        {"], [650, "            int index = expr.indexOf( \"${\" );"], [651, "            if ( index >= 0 )"], [652, "            {"], [653, "                int lastIndex = expr.indexOf( \"}\", index );"], [654, "                if ( lastIndex >= 0 )"], [655, "                {"], [656, "                    String retVal = expr.substring( 0, index );"], [657, ""], [658, "                    if ( index > 0 && expr.charAt( index - 1 ) == '$' )"], [659, "                    {"], [660, "                        retVal += expr.substring( index + 1, lastIndex + 1 );"], [661, "                    }"], [662, "                    else"], [663, "                    {"], [664, "                        retVal += evaluate( expr.substring( index, lastIndex + 1 ), properties );"], [665, "                    }"], [666, ""], [667, "                    retVal += evaluate( expr.substring( lastIndex + 1 ), properties );"], [668, "                    return retVal;"], [669, "                }"], [670, "            }"], [671, ""], [672, "            // Was not an expression"], [673, "            if ( expression.contains( \"$$\" ) )"], [674, "            {"], [675, "                return expression.replaceAll( \"\\\\$\\\\$\", \"\\\\$\" );"], [676, "            }"], [677, "            else"], [678, "            {"], [679, "                return expression;"], [680, "            }"], [681, "        }"], [682, ""], [683, "        String value = properties.get( expression );"], [684, ""], [685, "        int exprStartDelimiter = value.indexOf( \"${\" );"], [686, ""], [687, "        if ( exprStartDelimiter >= 0 )"], [688, "        {"], [689, "            if ( exprStartDelimiter > 0 )"], [690, "            {"], [691, "                value = value.substring( 0, exprStartDelimiter ) + evaluate( value.substring( exprStartDelimiter ),"], [692, "                                                                             properties );"], [693, "            }"], [694, "            else"], [695, "            {"], [696, "                value = evaluate( value.substring( exprStartDelimiter ), properties );"], [697, "            }"], [698, "        }"], [699, ""], [700, "        return value == null ? expr : value;"], [701, "    }"], [702, ""], [703, "    /**"], [704, "     * Strips the expression token markers from the start and end of the string."], [705, "     *"], [706, "     * @param expr the string (perhaps with token markers)"], [707, "     * @return the string (definately without token markers)"], [708, "     */"], [709, "    private static String stripTokens( String expr )"], [710, "    {"], [711, "        if ( expr.startsWith( \"${\" ) && expr.indexOf( \"}\" ) == expr.length() - 1 )"], [712, "        {"], [713, "            expr = expr.substring( 2, expr.length() - 1 );"], [714, "        }"], [715, "        return expr;"], [716, "    }"], [717, ""], [718, ""], [719, "    /**"], [800, "                path = path + \"/\" + elementName;"], [1388, "     * @param logger               The logger to log to."]], "deleted": [[204, "                path = new StringBuilder().append( path ).append( \"/\" ).append("], [205, "                    event.asStartElement().getName().getLocalPart() ).toString();"], [275, "                path = new StringBuilder().append( path ).append( \"/\" ).append("], [276, "                    event.asStartElement().getName().getLocalPart() ).toString();"], [324, "                path = new StringBuilder().append( path ).append( \"/\" ).append("], [325, "                    event.asStartElement().getName().getLocalPart() ).toString();"], [375, "                path = new StringBuilder().append( path ).append( \"/\" ).append("], [376, "                    event.asStartElement().getName().getLocalPart() ).toString();"], [429, "                path = new StringBuilder().append( path ).append( \"/\" ).append( elementName ).toString();"], [481, "        final Pattern matchScopeRegex;"], [482, "        final Pattern matchTargetRegex;"], [489, "        matchScopeRegex = Pattern.compile( \"/project\" + \"(/profiles/profile)?\" +"], [490, "                                               \"((/dependencyManagement)|(/build(/pluginManagement)?/plugins/plugin))?\""], [491, "                                               + \"/dependencies/dependency\" );"], [493, "        matchTargetRegex = Pattern.compile( \"/project\" + \"(/profiles/profile)?\" +"], [494, "                                                \"((/dependencyManagement)|(/build(/pluginManagement)?/plugins/plugin))?\""], [495, "                                                + \"/dependencies/dependency\" +"], [496, "                                                \"((/groupId)|(/artifactId)|(/version))\" );"], [507, "                path = new StringBuilder().append( path ).append( \"/\" ).append( elementName ).toString();"], [525, "                        haveGroupId = groupId.equals( pom.getElementText().trim() );"], [530, "                        haveArtifactId = artifactId.equals( pom.getElementText().trim() );"], [660, "                path = new StringBuilder().append( path ).append( \"/\" ).append( elementName ).toString();"], [1248, "     * @param logger"]]}, "num_lines_added": 163, "num_lines_removed": 23}