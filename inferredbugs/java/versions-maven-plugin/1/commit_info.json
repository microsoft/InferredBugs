{"hash": "4251dfbdac2167688f825937ca251006046083f3", "message": "refactor to use the new helper methods\n\ngit-svn-id: file:///home/tiste/MOJOHAUS-TO-GIT/SVN-MOJO-WIP/trunk/mojo/versions-maven-plugin@9269 52ab4f32-60fc-0310-b215-8acea882cd1b", "file_num_lines": 97, "diff_parsed": {"added": [[23, "import org.apache.maven.artifact.Artifact;"], [27, "import org.codehaus.mojo.versions.api.PomHelper;"], [54, "     * @throws MojoFailureException   when things go wrong."], [60, "        Set childModules = PomHelper.getAllChildModules( getProject(), getLog() );"], [62, "        PomHelper.removeMissingChildModules( getLog(), getProject(), childModules );"], [93, "                Artifact parent = PomHelper.getProjectParent( pom, getHelper() );"], [94, "                if ( parent == null )"], [96, "                    getLog().info( \"Module: \" + modulePath + \" does not have a parent\" );"], [97, "                }"], [98, "                else if ( !getProject().getGroupId().equals( parent.getGroupId() )"], [99, "                    || !getProject().getArtifactId().equals( parent.getArtifactId() ) )"], [100, "                {"], [101, "                    getLog().info( \"Module: \" + modulePath + \" does not use \""], [102, "                        + ArtifactUtils.versionlessKey( getProject().getArtifact() ) + \" as its parent\" );"], [103, "                }"], [104, "                else if ( getProject().getVersion().equals( parent.getVersion() ) )"], [105, "                {"], [106, "                    getLog().info( \"Module: \" + modulePath + \" parent is \""], [107, "                        + ArtifactUtils.versionlessKey( getProject().getArtifact() ) + \":\""], [108, "                        + getProject().getVersion() );"], [109, "                }"], [110, "                else"], [111, "                {"], [112, "                    getLog().info( \"Module: \" + modulePath + \" parent was \""], [113, "                        + ArtifactUtils.versionlessKey( getProject().getArtifact() ) + \":\" + parent.getVersion()"], [114, "                        + \", now \" + ArtifactUtils.versionlessKey( getProject().getArtifact() ) + \":\""], [115, "                        + getProject().getVersion() );"], [116, "                    process( moduleProjectFile );"], [152, "     * @throws MojoFailureException   when things go wrong."], [153, "     * @throws XMLStreamException     when things go wrong."], [160, "        if ( PomHelper.setProjectParentVersion( pom, getProject().getVersion() ) )"], [162, "            getLog().debug( \"Made an update to \" + getProject().getVersion() );"]], "deleted": [[23, "import org.apache.maven.execution.MavenSession;"], [24, "import org.apache.maven.model.Profile;"], [27, "import org.apache.maven.project.MavenProject;"], [31, "import javax.xml.stream.events.XMLEvent;"], [36, "import java.util.Stack;"], [37, "import java.util.TreeSet;"], [38, "import java.util.Collection;"], [39, "import java.util.regex.Pattern;"], [60, "     * @throws MojoFailureException when things go wrong."], [66, "        Set childModules = getAllChildModules( getProject() );"], [68, "        removeMissingChildModules( getProject(), childModules );"], [99, "                Stack stack = new Stack();"], [100, "                String path = \"\";"], [101, "                String groupId = null;"], [102, "                String artifactId = null;"], [103, "                String version = null;"], [104, "                Pattern pattern = Pattern.compile( \"/project/parent/(groupId|artifactId|version)\" );"], [105, "                while ( pom.hasNext() )"], [107, "                    XMLEvent event = pom.nextEvent();"], [108, "                    if ( event.isStartDocument() )"], [109, "                    {"], [110, "                        path = \"\";"], [111, "                        stack.clear();"], [112, "                    }"], [113, "                    else if ( event.isStartElement() )"], [114, "                    {"], [115, "                        stack.push( path );"], [116, ""], [117, "                        path = path + \"/\" + event.asStartElement().getName().getLocalPart();"], [118, ""], [119, "                        if ( pattern.matcher( path ).matches() )"], [120, "                        {"], [121, "                            String text = pom.getElementText().trim();"], [122, "                            if ( path.endsWith( \"groupId\" ) )"], [123, "                            {"], [124, "                                groupId = text;"], [125, "                            }"], [126, "                            else if ( path.endsWith( \"artifactId\" ) )"], [127, "                            {"], [128, "                                artifactId = text;"], [129, "                            }"], [130, "                            else if ( path.endsWith( \"version\" ) )"], [131, "                            {"], [132, "                                version = text;"], [133, "                            }"], [134, "                            path = (String) stack.pop();"], [135, "                        }"], [136, "                    }"], [137, "                    else if ( event.isEndElement() )"], [138, "                    {"], [139, "                        if ( \"/project/parent\".equals( path ) )"], [140, "                        {"], [141, "                            getLog().info( \"Module: \" + modulePath );"], [142, ""], [143, "                            if ( getProject().getGroupId().equals( groupId ) && getProject().getArtifactId().equals("], [144, "                                artifactId ) )"], [145, "                            {"], [146, ""], [147, "                                if ( getProject().getVersion().equals( version ) )"], [148, "                                {"], [149, "                                    getLog().info( \"  Parent is \""], [150, "                                        + ArtifactUtils.versionlessKey( getProject().getArtifact() ) + \":\""], [151, "                                        + getProject().getVersion() );"], [152, "                                }"], [153, "                                else"], [154, "                                {"], [155, "                                    getLog().info( \"  Parent was \""], [156, "                                        + ArtifactUtils.versionlessKey( getProject().getArtifact() ) + \":\" + version"], [157, "                                        + \", now \" + ArtifactUtils.versionlessKey( getProject().getArtifact() ) + \":\""], [158, "                                        + getProject().getVersion() );"], [159, "                                    process( moduleProjectFile );"], [160, "                                }"], [161, "                            }"], [162, "                            else"], [163, "                            {"], [164, "                                getLog().info( \"  does not use \""], [165, "                                    + ArtifactUtils.versionlessKey( getProject().getArtifact() ) + \" as its parent\" );"], [166, "                            }"], [167, "                        }"], [168, "                        path = (String) stack.pop();"], [169, "                    }"], [205, "     * @throws MojoFailureException when things go wrong."], [206, "     * @throws XMLStreamException when things go wrong."], [213, "        Stack stack = new Stack();"], [214, "        String path = \"\";"], [215, ""], [216, "        while ( pom.hasNext() )"], [217, "        {"], [218, "            XMLEvent event = pom.nextEvent();"], [219, "            if ( event.isStartElement() )"], [220, "            {"], [221, "                stack.push( path );"], [222, "                path = new StringBuffer()"], [223, "                    .append( path )"], [224, "                    .append( \"/\" )"], [225, "                    .append( event.asStartElement().getName().getLocalPart() )"], [226, "                    .toString();"], [227, ""], [228, "                if ( \"/project/parent/version\".equals( path ) )"], [229, "                {"], [230, "                    pom.mark( 0 );"], [231, "                }"], [232, "            }"], [233, "            if ( event.isEndElement() )"], [234, "            {"], [235, "                if ( \"/project/parent/version\".equals( path ) )"], [236, "                {"], [237, "                    pom.mark( 1 );"], [238, "                    if ( pom.hasMark( 0 ) )"], [239, "                    {"], [240, "                        pom.replaceBetween( 0, 1, getProject().getVersion() );"], [241, "                        getLog().debug( \"Made an update to \" + getProject().getVersion() );"], [242, "                        return;"], [243, "                    }"], [244, "                }"], [245, "                path = (String) stack.pop();"], [246, "            }"], [247, "        }"], [248, "    }"], [249, ""], [250, "    /**"], [251, "     * Returns a set of all child modules for a project, including any defined in profiles (ignoring profile"], [252, "     * activation)."], [253, "     *"], [254, "     * @param project The project."], [255, "     * @return the set of all child modules of the project."], [256, "     */"], [257, "    private Set getAllChildModules( MavenProject project )"], [258, "    {"], [259, "        getLog().debug( \"Finding child modules...\" );"], [260, "        Set childModules = new TreeSet();"], [261, "        childModules.addAll( project.getOriginalModel().getModules() );"], [262, "        Iterator i = project.getOriginalModel().getProfiles().iterator();"], [263, "        while ( i.hasNext() )"], [264, "        {"], [265, "            Profile profile = (Profile) i.next();"], [266, "            childModules.addAll( profile.getModules() );"], [267, "        }"], [268, "        debugModules( \"Child modules:\", childModules );"], [269, "        return childModules;"], [270, "    }"], [271, ""], [272, "    /**"], [273, "     * Outputs a debug message with a list of modules."], [274, "     *"], [275, "     * @param message The message to display."], [276, "     * @param modules The modules to append to the message."], [277, "     */"], [278, "    private void debugModules( String message, Collection modules )"], [279, "    {"], [280, "        Iterator i;"], [281, "        if ( getLog().isDebugEnabled() )"], [283, "            getLog().debug( message );"], [284, "            if ( modules.isEmpty() )"], [285, "            {"], [286, "                getLog().debug( \"None.\" );"], [287, "            }"], [288, "            else"], [289, "            {"], [290, "                i = modules.iterator();"], [291, "                while ( i.hasNext() )"], [292, "                {"], [293, "                    getLog().debug( \"  \" + i.next() );"], [294, "                }"], [295, "            }"], [296, ""], [300, "    /**"], [301, "     * Modifies the collection of child modules removing those which cannot be found relative to the parent."], [302, "     *"], [303, "     * @param project the project."], [304, "     * @param childModules the child modules."], [305, "     */"], [306, "    private void removeMissingChildModules( MavenProject project, Collection childModules )"], [307, "    {"], [308, "        getLog().debug( \"Removing child modules which are missing...\" );"], [309, "        Iterator i = childModules.iterator();"], [310, "        while ( i.hasNext() )"], [311, "        {"], [312, "            String modulePath = (String) i.next();"], [313, "            File moduleFile = new File( project.getBasedir(), modulePath );"], [314, ""], [315, "            if ( moduleFile.isDirectory() && new File(moduleFile, \"pom.xml\").isFile())"], [316, "            {"], [317, "                // it's a directory that exists"], [318, "                continue;"], [319, "            }"], [320, ""], [321, "            if ( moduleFile.isFile())"], [322, "            {"], [323, "                // it's the pom.xml file directly referenced and it exists."], [324, "                continue;"], [325, "            }"], [326, ""], [327, "            getLog().debug( \"Removing missing child module \" + modulePath );"], [328, "            i.remove();"], [329, "        }"], [330, "        debugModules( \"After removing missing\", childModules );"], [331, "    }"]]}, "num_lines_added": 32, "num_lines_removed": 198}