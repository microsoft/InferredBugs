{"hash": "a227f24a42cc1ad23861a17eb58bbafcbc51b2c4", "message": "Refactor TrackUtils", "file_num_lines": 145, "diff_parsed": {"added": [[8, "import com.github.devnied.emvnfccard.model.EmvTrack1;"], [9, "import com.github.devnied.emvnfccard.model.EmvTrack2;"], [20, "\t\tEmvTrack1 track1 = TrackUtils"], [23, "\t\t\t\t\t\t\t\t.fromString(\"42343131313131313131313131313131313F305E202F5E31373032323031313030333F313030313030303030303030303030303F\"));"], [25, "\t\tAssertions.assertThat(track1).isNotNull();"], [26, "\t\tAssertions.assertThat(track1.getCardNumber()).isEqualTo(\"4111111111111111\");"], [28, "\t\tAssertions.assertThat(sdf.format(track1.getExpireDate())).isEqualTo(\"02/2017\");"], [29, "\t\tAssertions.assertThat(track1).isNotNull();"], [30, "\t\tAssertions.assertThat(track1.getService()).isNotNull();"], [31, "\t\tAssertions.assertThat(track1.getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);"], [32, "\t\tAssertions.assertThat(track1.getService().getServiceCode1().getInterchange()).isNotNull();"], [33, "\t\tAssertions.assertThat(track1.getService().getServiceCode1().getTechnology()).isNotNull();"], [34, "\t\tAssertions.assertThat(track1.getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);"], [35, "\t\tAssertions.assertThat(track1.getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();"], [36, "\t\tAssertions.assertThat(track1.getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.NO_RESTRICTION);"], [37, "\t\tAssertions.assertThat(track1.getService().getServiceCode3().getAllowedServices()).isNotNull();"], [38, "\t\tAssertions.assertThat(track1.getService().getServiceCode3().getPinRequirements()).isNotNull();"], [43, "\t\tEmvTrack1 track1 = TrackUtils"], [46, "\t\t\t\t\t\t\t\t.fromString(\"42343131313131313131313131313131313F305E446F652F4A6F686E5E31373032323031313030333F313030313030303030303030303030303F\"));"], [48, "\t\tAssertions.assertThat(track1).isNotNull();"], [49, "\t\tAssertions.assertThat(track1.getCardNumber()).isEqualTo(\"4111111111111111\");"], [51, "\t\tAssertions.assertThat(sdf.format(track1.getExpireDate())).isEqualTo(\"02/2017\");"], [52, "\t\tAssertions.assertThat(track1).isNotNull();"], [53, "\t\tAssertions.assertThat(track1.getHolderFirstname()).isEqualTo(\"John\");"], [54, "\t\tAssertions.assertThat(track1.getHolderLastname()).isEqualTo(\"Doe\");"], [55, "\t\tAssertions.assertThat(track1.getService()).isNotNull();"], [56, "\t\tAssertions.assertThat(track1.getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);"], [57, "\t\tAssertions.assertThat(track1.getService().getServiceCode1().getInterchange()).isNotNull();"], [58, "\t\tAssertions.assertThat(track1.getService().getServiceCode1().getTechnology()).isNotNull();"], [59, "\t\tAssertions.assertThat(track1.getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);"], [60, "\t\tAssertions.assertThat(track1.getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();"], [61, "\t\tAssertions.assertThat(track1.getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.NO_RESTRICTION);"], [62, "\t\tAssertions.assertThat(track1.getService().getServiceCode3().getAllowedServices()).isNotNull();"], [63, "\t\tAssertions.assertThat(track1.getService().getServiceCode3().getPinRequirements()).isNotNull();"], [68, "\t\tEmvTrack1 track1 = TrackUtils"], [71, "\t\t\t\t\t\t\t\t.fromString(\"42353231313131313131313131313131315E202F2020202020202020202020202020202020202020202020205E31363038323032303030303030303030303030312020303030202020202030\"));"], [73, "\t\tAssertions.assertThat(track1).isNotNull();"], [74, "\t\tAssertions.assertThat(track1.getCardNumber()).isEqualTo(\"5211111111111111\");"], [76, "\t\tAssertions.assertThat(sdf.format(track1.getExpireDate())).isEqualTo(\"08/2016\");"], [77, "\t\tAssertions.assertThat(track1.getHolderFirstname()).isNull();"], [78, "\t\tAssertions.assertThat(track1.getHolderLastname()).isNull();"], [79, "\t\tAssertions.assertThat(track1.getService()).isNotNull();"], [80, "\t\tAssertions.assertThat(track1.getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);"], [81, "\t\tAssertions.assertThat(track1.getService().getServiceCode1().getInterchange()).isNotNull();"], [82, "\t\tAssertions.assertThat(track1.getService().getServiceCode1().getTechnology()).isNotNull();"], [83, "\t\tAssertions.assertThat(track1.getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);"], [84, "\t\tAssertions.assertThat(track1.getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();"], [85, "\t\tAssertions.assertThat(track1.getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.GOODS_SERVICES);"], [86, "\t\tAssertions.assertThat(track1.getService().getServiceCode3().getAllowedServices()).isNotNull();"], [87, "\t\tAssertions.assertThat(track1.getService().getServiceCode3().getPinRequirements()).isNotNull();"], [92, "\t\tEmvTrack1 track1 = TrackUtils"], [95, "\t\t\t\t\t\t\t\t.fromString(\"42353231313131313131313131313131315E22202020202020202020202020202020202020202020202020205E31363038323032303030303030303030303030312020303030202020202030\"));"], [97, "\t\tAssertions.assertThat(track1.getCardNumber()).isEqualTo(\"5211111111111111\");"], [99, "\t\tAssertions.assertThat(sdf.format(track1.getExpireDate())).isEqualTo(\"08/2016\");"], [100, "\t\tAssertions.assertThat(track1.getHolderFirstname()).isNull();"], [101, "\t\tAssertions.assertThat(track1.getHolderLastname()).isNull();"], [102, "\t\tAssertions.assertThat(track1.getService()).isNotNull();"], [103, "\t\tAssertions.assertThat(track1.getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);"], [104, "\t\tAssertions.assertThat(track1.getService().getServiceCode1().getInterchange()).isNotNull();"], [105, "\t\tAssertions.assertThat(track1.getService().getServiceCode1().getTechnology()).isNotNull();"], [106, "\t\tAssertions.assertThat(track1.getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);"], [107, "\t\tAssertions.assertThat(track1.getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();"], [108, "\t\tAssertions.assertThat(track1.getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.GOODS_SERVICES);"], [109, "\t\tAssertions.assertThat(track1.getService().getServiceCode3().getAllowedServices()).isNotNull();"], [110, "\t\tAssertions.assertThat(track1.getService().getServiceCode3().getPinRequirements()).isNotNull();"], [114, "\tpublic void track2EquivalentTest() {"], [115, "\t\tEmvTrack2 track2 = TrackUtils.extractTrack2EquivalentData(BytesUtils.fromString(\"55 66 88 77 66 55 66 77 D1 50 62 01 69 28 07 65 90 00 0F\"));"], [116, ""], [117, "\t\tAssertions.assertThat(track2).isNotNull();"], [118, "\t\tAssertions.assertThat(track2.getCardNumber()).isEqualTo(\"5566887766556677\");"], [120, "\t\tAssertions.assertThat(sdf.format(track2.getExpireDate())).isEqualTo(\"06/2015\");"], [121, "\t\tAssertions.assertThat(track2.getService()).isNotNull();"], [122, "\t\tAssertions.assertThat(track2.getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);"], [123, "\t\tAssertions.assertThat(track2.getService().getServiceCode1().getInterchange()).isNotNull();"], [124, "\t\tAssertions.assertThat(track2.getService().getServiceCode1().getTechnology()).isNotNull();"], [125, "\t\tAssertions.assertThat(track2.getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);"], [126, "\t\tAssertions.assertThat(track2.getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();"], [127, "\t\tAssertions.assertThat(track2.getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.NO_RESTRICTION);"], [128, "\t\tAssertions.assertThat(track2.getService().getServiceCode3().getAllowedServices()).isNotNull();"], [129, "\t\tAssertions.assertThat(track2.getService().getServiceCode3().getPinRequirements()).isNotNull();"], [131, ""], [133, "\tpublic void track2EquivalentTest2() {"], [134, "\t\tEmvTrack2 track2 = TrackUtils.extractTrack2EquivalentData(BytesUtils.fromString(\"55 55 55 66 88 77 66 55 66 7D 11 05 62 01 69 28 07 65 90 00 0F\"));"], [135, ""], [136, "\t\tAssertions.assertThat(track2).isNotNull();"], [137, "\t\tAssertions.assertThat(track2.getCardNumber()).isEqualTo(\"5555556688776655667\");"], [139, "\t\tAssertions.assertThat(sdf.format(track2.getExpireDate())).isEqualTo(\"05/2011\");"], [140, "\t\tAssertions.assertThat(track2.getService()).isNotNull();"], [141, "\t\tAssertions.assertThat(track2.getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.NATIONAL_ICC);"], [142, "\t\tAssertions.assertThat(track2.getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.BY_ISSUER);"], [143, "\t\tAssertions.assertThat(track2.getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.NO_RESTRICTION_PIN_REQUIRED);"], [147, "\tpublic void track2EquivalentTestNullService() {"], [148, "\t\tEmvTrack2 track2 = TrackUtils.extractTrack2EquivalentData(BytesUtils.fromString(\"55 55 55 66 88 77 66 55 66 7D 11 05 FF F1 69 28 07 65 90 00 0F\"));"], [149, ""], [150, "\t\tAssertions.assertThat(track2).isNotNull();"], [151, "\t\tAssertions.assertThat(track2.getCardNumber()).isEqualTo(\"5555556688776655667\");"], [153, "\t\tAssertions.assertThat(sdf.format(track2.getExpireDate())).isEqualTo(\"05/2011\");"], [154, "\t\tAssertions.assertThat(track2.getService()).isNotNull();"], [155, "\t\tAssertions.assertThat(track2.getService().getServiceCode1()).isNull();"], [156, "\t\tAssertions.assertThat(track2.getService().getServiceCode2()).isNull();"], [157, "\t\tAssertions.assertThat(track2.getService().getServiceCode3()).isNull();"], [161, "\tpublic void track2EquivalentTestNull() {"], [162, "\t\tEmvTrack2 card = TrackUtils.extractTrack2EquivalentData(BytesUtils.fromString(\"00\"));"], [163, ""], [164, "\t\tAssertions.assertThat(card).isNull();"]], "deleted": [[8, "import com.github.devnied.emvnfccard.model.EmvCard;"], [19, "\t\tEmvCard card = new EmvCard();"], [20, "\t\tboolean ret = TrackUtils"], [22, "\t\t\t\t\t\tcard,"], [24, "\t\t\t\t\t\t\t\t.fromString(\"70 75 9F 6C 02 00 01 9F 62 06 00 00 00 38 00 00 9F 63 06 00 00 00 00 E0 E0 56 34 42343131313131313131313131313131313f305e202f5e31373032323031313030333f313030313030303030303030303030303f30303030 9F 64 01 03 9F 65 02 1C 00 9F 66 02 03 F0 9F 6B 13 5566887766556677 D1 81 02 01 00 00 00 00 00 10 0F 9F 67 01 03 90 00\"));"], [26, "\t\tAssertions.assertThat(ret).isTrue();"], [27, "\t\tAssertions.assertThat(card).isNotNull();"], [28, "\t\tAssertions.assertThat(card.getCardNumber()).isEqualTo(\"4111111111111111\");"], [30, "\t\tAssertions.assertThat(sdf.format(card.getExpireDate())).isEqualTo(\"02/2017\");"], [31, "\t\tAssertions.assertThat(card.getTrack1()).isNotNull();"], [32, "\t\tAssertions.assertThat(card.getTrack1().getService()).isNotNull();"], [33, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);"], [34, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1().getInterchange()).isNotNull();"], [35, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1().getTechnology()).isNotNull();"], [36, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);"], [37, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();"], [38, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.NO_RESTRICTION);"], [39, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3().getAllowedServices()).isNotNull();"], [40, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3().getPinRequirements()).isNotNull();"], [45, "\t\tEmvCard card = new EmvCard();"], [46, "\t\tboolean ret = TrackUtils"], [48, "\t\t\t\t\t\tcard,"], [50, "\t\t\t\t\t\t\t\t.fromString(\"563A42343131313131313131313131313131313F305E446F652F4A6F686E5E31373032323031313030333F313030313030303030303030303030303F30303030\"));"], [52, "\t\tAssertions.assertThat(ret).isTrue();"], [53, "\t\tAssertions.assertThat(card).isNotNull();"], [54, "\t\tAssertions.assertThat(card.getCardNumber()).isEqualTo(\"4111111111111111\");"], [56, "\t\tAssertions.assertThat(sdf.format(card.getExpireDate())).isEqualTo(\"02/2017\");"], [57, "\t\tAssertions.assertThat(card.getTrack1()).isNotNull();"], [58, "\t\tAssertions.assertThat(card.getTrack1().getHolderFirstname()).isEqualTo(\"John\");"], [59, "\t\tAssertions.assertThat(card.getTrack1().getHolderLastname()).isEqualTo(\"Doe\");"], [60, "\t\tAssertions.assertThat(card.getTrack1().getService()).isNotNull();"], [61, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);"], [62, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1().getInterchange()).isNotNull();"], [63, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1().getTechnology()).isNotNull();"], [64, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);"], [65, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();"], [66, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.NO_RESTRICTION);"], [67, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3().getAllowedServices()).isNotNull();"], [68, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3().getPinRequirements()).isNotNull();"], [73, "\t\tEmvCard card = new EmvCard();"], [74, "\t\tboolean ret = TrackUtils"], [76, "\t\t\t\t\t\tcard,"], [78, "\t\t\t\t\t\t\t\t.fromString(\"564C42353231313131313131313131313131315E202F2020202020202020202020202020202020202020202020205E31363038323032303030303030303030303030312020303030202020202030\"));"], [80, "\t\tAssertions.assertThat(ret).isTrue();"], [81, "\t\tAssertions.assertThat(card).isNotNull();"], [82, "\t\tAssertions.assertThat(card.getCardNumber()).isEqualTo(\"5211111111111111\");"], [84, "\t\tAssertions.assertThat(sdf.format(card.getExpireDate())).isEqualTo(\"08/2016\");"], [85, "\t\tAssertions.assertThat(card.getTrack1()).isNotNull();"], [86, "\t\tAssertions.assertThat(card.getTrack1().getHolderFirstname()).isNull();"], [87, "\t\tAssertions.assertThat(card.getTrack1().getHolderLastname()).isNull();"], [88, "\t\tAssertions.assertThat(card.getTrack1().getService()).isNotNull();"], [89, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);"], [90, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1().getInterchange()).isNotNull();"], [91, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1().getTechnology()).isNotNull();"], [92, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);"], [93, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();"], [94, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.GOODS_SERVICES);"], [95, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3().getAllowedServices()).isNotNull();"], [96, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3().getPinRequirements()).isNotNull();"], [101, "\t\tEmvCard card = new EmvCard();"], [102, "\t\tboolean ret = TrackUtils"], [104, "\t\t\t\t\t\tcard,"], [106, "\t\t\t\t\t\t\t\t.fromString(\"564C42353231313131313131313131313131315E22202020202020202020202020202020202020202020202020205E31363038323032303030303030303030303030312020303030202020202030\"));"], [108, "\t\tAssertions.assertThat(ret).isTrue();"], [109, "\t\tAssertions.assertThat(card).isNotNull();"], [110, "\t\tAssertions.assertThat(card.getCardNumber()).isEqualTo(\"5211111111111111\");"], [112, "\t\tAssertions.assertThat(sdf.format(card.getExpireDate())).isEqualTo(\"08/2016\");"], [113, "\t\tAssertions.assertThat(card.getTrack1()).isNotNull();"], [114, "\t\tAssertions.assertThat(card.getTrack1().getHolderFirstname()).isNull();"], [115, "\t\tAssertions.assertThat(card.getTrack1().getHolderLastname()).isNull();"], [116, "\t\tAssertions.assertThat(card.getTrack1().getService()).isNotNull();"], [117, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);"], [118, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1().getInterchange()).isNotNull();"], [119, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode1().getTechnology()).isNotNull();"], [120, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);"], [121, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();"], [122, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.GOODS_SERVICES);"], [123, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3().getAllowedServices()).isNotNull();"], [124, "\t\tAssertions.assertThat(card.getTrack1().getService().getServiceCode3().getPinRequirements()).isNotNull();"], [128, "\tpublic void track2Test() {"], [129, "\t\tEmvCard card = new EmvCard();"], [130, "\t\tboolean ret = TrackUtils.extractTrack2Data(card,"], [131, "\t\t\t\tBytesUtils.fromString(\"57 13 55 66 88 77 66 55 66 77 D1 50 62 01 69 28 07 65 90 00 0F\"));"], [132, ""], [133, "\t\tAssertions.assertThat(ret).isTrue();"], [134, "\t\tAssertions.assertThat(card).isNotNull();"], [135, "\t\tAssertions.assertThat(card.getCardNumber()).isEqualTo(\"5566887766556677\");"], [137, "\t\tAssertions.assertThat(sdf.format(card.getExpireDate())).isEqualTo(\"06/2015\");"], [138, "\t\tAssertions.assertThat(card.getTrack2()).isNotNull();"], [139, "\t\tAssertions.assertThat(card.getTrack2().getService()).isNotNull();"], [140, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);"], [141, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode1().getInterchange()).isNotNull();"], [142, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode1().getTechnology()).isNotNull();"], [143, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);"], [144, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();"], [145, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.NO_RESTRICTION);"], [146, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode3().getAllowedServices()).isNotNull();"], [147, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode3().getPinRequirements()).isNotNull();"], [149, ""], [151, "\tpublic void track2Test2() {"], [152, "\t\tEmvCard card = new EmvCard();"], [153, "\t\tboolean ret = TrackUtils.extractTrack2Data(card,"], [154, "\t\t\t\tBytesUtils.fromString(\"57 15 55 55 55 66 88 77 66 55 66 7D 11 05 62 01 69 28 07 65 90 00 0F\"));"], [155, ""], [156, "\t\tAssertions.assertThat(ret).isTrue();"], [157, "\t\tAssertions.assertThat(card).isNotNull();"], [158, "\t\tAssertions.assertThat(card.getCardNumber()).isEqualTo(\"5555556688776655667\");"], [160, "\t\tAssertions.assertThat(sdf.format(card.getExpireDate())).isEqualTo(\"05/2011\");"], [161, "\t\tAssertions.assertThat(card.getTrack2()).isNotNull();"], [162, "\t\tAssertions.assertThat(card.getTrack2().getService()).isNotNull();"], [163, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.NATIONAL_ICC);"], [164, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.BY_ISSUER);"], [165, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.NO_RESTRICTION_PIN_REQUIRED);"], [169, "\tpublic void track2TestNullService() {"], [170, "\t\tEmvCard card = new EmvCard();"], [171, "\t\tboolean ret = TrackUtils.extractTrack2Data(card,"], [172, "\t\t\t\tBytesUtils.fromString(\"57 15 55 55 55 66 88 77 66 55 66 7D 11 05 FF F1 69 28 07 65 90 00 0F\"));"], [173, ""], [174, "\t\tAssertions.assertThat(ret).isTrue();"], [175, "\t\tAssertions.assertThat(card).isNotNull();"], [176, "\t\tAssertions.assertThat(card.getCardNumber()).isEqualTo(\"5555556688776655667\");"], [178, "\t\tAssertions.assertThat(sdf.format(card.getExpireDate())).isEqualTo(\"05/2011\");"], [179, "\t\tAssertions.assertThat(card.getTrack2()).isNotNull();"], [180, "\t\tAssertions.assertThat(card.getTrack2().getService()).isNotNull();"], [181, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode1()).isNull();"], [182, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode2()).isNull();"], [183, "\t\tAssertions.assertThat(card.getTrack2().getService().getServiceCode3()).isNull();"], [187, "\tpublic void track2TestNull() {"], [188, "\t\tEmvCard card = new EmvCard();"], [189, "\t\tboolean ret = TrackUtils.extractTrack2Data(card,"], [190, "\t\t\t\tBytesUtils.fromString(\"00\"));"], [191, ""], [192, "\t\tAssertions.assertThat(ret).isFalse();"], [193, "\t\tAssertions.assertThat(card).isNotNull();"], [194, "\t\tAssertions.assertThat(card.getTrack2()).isNull();"]]}, "num_lines_added": 105, "num_lines_removed": 135}