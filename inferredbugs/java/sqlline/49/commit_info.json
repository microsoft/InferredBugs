{"hash": "81434e4fb5d4a80420cd13199886ad8ac123bed6", "message": "[SQLLINE-302] Make tests running with its own sqlline.properties via propertiesFile property\nRemove all instantiations of SqlLine from PromptTest", "file_num_lines": 2101, "diff_parsed": {"added": [[41, "import org.junit.jupiter.api.AfterEach;"], [42, "import org.junit.jupiter.api.BeforeEach;"], [62, "  private static final String DEV_NULL = \"/dev/null\";"], [64, "  private SqlLine sqlLine;"], [70, "  @BeforeEach"], [71, "  void init() {"], [72, "    sqlLine = new SqlLine();"], [73, "    sqlLine.getOpts().setPropertiesFile(DEV_NULL);"], [74, "  }"], [75, ""], [76, "  @AfterEach"], [77, "  void finish() {"], [78, "    sqlLine.setExit(true);"], [79, "  }"], [80, ""], [101, "  private Pair run(String... args) {"], [104, "      SqlLine.Status status = begin(sqlLine, os, false, args);"], [116, "  private Pair runScript(ConnectionSpec connectionSpec, File scriptFile,"], [134, "    final Pair result = run(args.toArray(new String[0]));"], [135, "    sqlLine.getOpts().setRun(null);"], [136, "    return result;"], [312, "    final String scriptText = \"--comment\\n\\n\""], [331, "    final String scriptText = \"--comment;;\\n\\n\""], [640, "          begin(sqlLine, baos, false, \"-e\", \"!set maxwidth 80\");"], [642, "      sqlLine.runCommands(new DispatchCallback(), \"!manual\");"], [1226, "    checkScriptFile(headerIntervalScript, true, equalTo(SqlLine.Status.OK),"], [1230, "    checkScriptFile(rowLimitScript, true, equalTo(SqlLine.Status.OK),"], [1321, "      sqlLine.getOpts().setPropertiesFile(DEV_NULL);"], [1323, "      checkScriptFile(okTimeFormat, false, equalTo(SqlLine.Status.OK),"], [1327, "      checkScriptFile(defaultTimeFormat, false, equalTo(SqlLine.Status.OK),"], [1331, "      checkScriptFile(okDateFormat, false, equalTo(SqlLine.Status.OK),"], [1335, "      checkScriptFile(defaultDateFormat, false, equalTo(SqlLine.Status.OK),"], [1339, "      checkScriptFile(okTimestampFormat, false, equalTo(SqlLine.Status.OK),"], [1343, "      checkScriptFile(defaultTimestampFormat, false, equalTo(SqlLine.Status.OK),"], [1355, "      checkScriptFile(wrongTimeFormat, true, equalTo(SqlLine.Status.OTHER),"], [1356, "          allOf(containsString(\"Illegal pattern character 'q'\"),"], [1357, "              containsString(\"Exception\")));"], [1358, "      checkScriptFile(wrongDateFormat, true, equalTo(SqlLine.Status.OTHER),"], [1359, "          allOf(containsString(\"Illegal pattern character 'A'\"),"], [1360, "              containsString(\"Exception\")));"], [1361, "      checkScriptFile(wrongTimestampFormat, true, equalTo(SqlLine.Status.OTHER),"], [1362, "          allOf(containsString(\"Illegal pattern character 'T'\"),"], [1363, "              containsString(\"Exception\")));"], [1451, "          begin(sqlLine, os, false, \"-e\", \"!set maxwidth 80\");"], [1454, "      sqlLine.runCommands(dc,"], [1457, "      sqlLine.runCommands(dc, \"!connect \""], [1460, "      sqlLine.runCommands(dc, \"!tables\");"], [1465, "      sqlLine.runCommands(new DispatchCallback(), \"!quit\");"], [1466, "      assertTrue(sqlLine.isExit());"], [1485, "          begin(sqlLine, os, false, \"-e\", \"!set maxwidth 80\");"], [1488, "      sqlLine.runCommands(dc,"], [1494, "      sqlLine.runCommands(dc, \"!connect \""], [1499, "      sqlLine.runCommands(dc, \"!tables\");"], [1504, "      sqlLine.runCommands(new DispatchCallback(), \"!quit\");"], [1505, "      assertTrue(sqlLine.isExit());"], [1526, "          begin(sqlLine, os, false, \"-e\", \"!set maxwidth 80\");"], [1529, "      sqlLine.runCommands(dc, \"!set maxwidth 80\");"], [1533, "      sqlLine.runCommands(dc, \"!connect \""], [1538, "      sqlLine.runCommands(dc, \"select 1;\");"], [1542, "      sqlLine.runCommands(new DispatchCallback(), \"!quit\");"], [1543, "      assertTrue(sqlLine.isExit());"], [1561, "        begin(sqlLine, os, false, \"-e\", \"!set maxwidth 80\");"], [1566, "      sqlLine.runCommands(dc, \"!set maxwidth 80\");"], [1570, "      sqlLine.runCommands(dc, \"!connect \\\"\""], [1583, "      sqlLine.runCommands(dc, \"!connect \\\"\""], [1589, "      sqlLine.runCommands(dc, \"!set incremental true\");"], [1590, "      sqlLine.runCommands(dc, \"!tables\");"], [1596, "      sqlLine.runCommands(dc, \"select 5;\");"], [1602, "      sqlLine.runCommands(new DispatchCallback(), \"!quit\");"], [1606, "      assertTrue(sqlLine.isExit());"], [1728, "            (JDBCConnection) sqlLine.getConnection());"], [1734, "          begin(sqlLine, os, false, \"-e\", \"!set maxwidth 80\");"], [1737, "      sqlLine.runCommands(dc, \"!connect \""], [1742, "      sqlLine.runCommands(dc, \"!tables\");"], [2058, "      SqlLine.Status status = begin(sqlLine, os, true,"], [2063, "      sqlLine.runCommands(dc,"], [2072, "      sqlLine.runCommands(dc, \"!/ 1\");"], [2083, "      sqlLine.runCommands(dc, \"!/ 4\");"], [2089, "      sqlLine.runCommands(dc, \"!/ 3\");"], [2095, "      sqlLine.runCommands(dc, \"!/ 8\");"], [2101, "      sqlLine.runCommands(dc, \"!rerun \" + Integer.MAX_VALUE);"], [2106, "      sqlLine.runCommands(new DispatchCallback(), \"!quit\");"], [2107, "      assertTrue(sqlLine.isExit());"], [2328, "      SqlLine.Status status = begin(sqlLine, os, true,"], [2335, "      sqlLine.runCommands(dc, \"!set maxHistoryFileRows \" + maxLines);"], [2337, "      sqlLine.runCommands(dc, \"!history\");"], [2349, "    ByteArrayOutputStream os = new ByteArrayOutputStream();"], [2350, "    final String testSqllinePropertiesFile = \"test.sqlline.properties\";"], [2351, "    try {"], [2352, "      SqlLine.Status status = begin(sqlLine, os, false,"], [2353, "          \"--propertiesFile=\" + testSqllinePropertiesFile, \"-e\", \"!save\");"], [2354, "      assertThat(status, equalTo(SqlLine.Status.OK));"], [2355, "      final DispatchCallback dc = new DispatchCallback();"], [2356, ""], [2357, "      assertThat(os.toString(\"UTF8\"),"], [2358, "          allOf(containsString(\"Saving preferences to\"),"], [2359, "              not(containsString(\"Saving to /dev/null not supported\"))));"], [2360, "      os.reset();"], [2361, "      sqlLine.runCommands(dc, \"!set\");"], [2362, "      assertThat(os.toString(\"UTF8\"),"], [2363, "          allOf(containsString(\"autoCommit\"),"], [2364, "              not(containsString(\"Unknown property:\"))));"], [2365, "      os.reset();"], [2366, "      Files.delete(Paths.get(testSqllinePropertiesFile));"], [2367, "    } catch (Exception e) {"], [2368, "      // fail"], [2369, "      throw new RuntimeException(e);"], [2370, "    }"], [2371, "  }"], [2372, ""], [2373, "  @Test"], [2374, "  public void testSaveToDevNull() {"], [2377, "      SqlLine.Status status = begin(sqlLine, os, false,"], [2378, "          \"--propertiesFile=/dev/null\","], [2384, "          allOf(containsString(\"Saving preferences to\"),"], [2385, "              containsString(\"Saving to /dev/null not supported\")));"], [2387, "      sqlLine.runCommands(dc, \"!set\");"], [2451, "      assertThat(sqlLine.getOpts().getConfirm(), is(false));"], [2452, "      begin(sqlLine, os, false, \"-e\", \"!set confirm true\");"], [2453, "      assertThat(sqlLine.getOpts().getConfirm(), is(true));"], [2454, "      begin(sqlLine, os, false, \"-e\", \"!set confirm false\");"], [2455, "      assertThat(sqlLine.getOpts().getConfirm(), is(false));"], [2474, "    assertThat(sqlLine.getOpts().getConfirm(), is(false));"], [2475, "    assertThat(sqlLine.getOpts().getConfirmPattern(),"], [2476, "        is(BuiltInProperty.CONFIRM_PATTERN.defaultValue()));"], [2490, "        containsString(sqlLine.loc(\"abort-action\")));"], [2498, "    assertThat(sqlLine.getOpts().getConfirm(), is(false));"], [2501, "    begin(sqlLine, os, false, \"-e\","], [2503, "    assertThat(sqlLine.getOpts().getConfirmPattern(),"], [2506, "    begin(sqlLine, os, false, \"-e\", \"!set confirmPattern default\");"], [2507, "    assertThat(sqlLine.getOpts().getConfirmPattern(),"], [2508, "        is(sqlLine.loc(\"default-confirm-pattern\")));"], [2518, "      assertThat(sqlLine.getOpts().getConfirm(), is(false));"], [2520, "          begin(sqlLine, os, false, \"-e\","]], "deleted": [[86, "  private static Pair run(String... args) {"], [88, "      SqlLine beeLine = new SqlLine();"], [90, "      SqlLine.Status status = begin(beeLine, os, false, args);"], [102, "  private static Pair runScript(ConnectionSpec connectionSpec, File scriptFile,"], [120, "    return run(args.toArray(new String[0]));"], [296, "    final String scriptText = \"!set incremental false\\n\""], [297, "        + \"--comment\\n\\n\""], [316, "    final String scriptText = \"!set incremental false\\n\""], [317, "        + \"--comment;;\\n\\n\""], [338, "    final SqlLine sqlLine = new SqlLine();"], [514, "    final SqlLine sqlLine = new SqlLine();"], [627, "      SqlLine beeLine = new SqlLine();"], [629, "          begin(beeLine, baos, false, \"-e\", \"!set maxwidth 80\");"], [631, "      beeLine.runCommands(new DispatchCallback(), \"!manual\");"], [902, "      SqlLine sqlLine = new SqlLine();"], [962, "      SqlLine sqlLine = new SqlLine();"], [1077, "    SqlLine sqlLine = new SqlLine();"], [1078, ""], [1104, "    SqlLine sqlLine = new SqlLine();"], [1133, "    SqlLine sqlLine = new SqlLine();"], [1220, "    SqlLine sqlLine = new SqlLine();"], [1222, "    checkScriptFile(headerIntervalScript, false, equalTo(SqlLine.Status.OK),"], [1226, "    checkScriptFile(rowLimitScript, false, equalTo(SqlLine.Status.OK),"], [1317, "      final SqlLine sqlLine = new SqlLine();"], [1319, "      assertThat(errBaos.toString(\"UTF8\"),"], [1323, "      sqlLine.runCommands(new DispatchCallback(), defaultTimeFormat);"], [1324, "      assertThat(errBaos.toString(\"UTF8\"),"], [1328, "      sqlLine.runCommands(new DispatchCallback(), okDateFormat);"], [1329, "      assertThat(errBaos.toString(\"UTF8\"),"], [1333, "      sqlLine.runCommands(new DispatchCallback(), defaultDateFormat);"], [1334, "      assertThat(errBaos.toString(\"UTF8\"),"], [1338, "      sqlLine.runCommands(new DispatchCallback(), okTimestampFormat);"], [1339, "      assertThat(errBaos.toString(\"UTF8\"),"], [1343, "      sqlLine.runCommands(new DispatchCallback(), defaultTimestampFormat);"], [1344, "      assertThat(errBaos.toString(\"UTF8\"),"], [1356, "      sqlLine.runCommands(new DispatchCallback(), wrongTimeFormat);"], [1357, "      assertThat(errBaos.toString(\"UTF8\"),"], [1358, "          containsString(\"Illegal pattern character 'q'\"));"], [1359, "      sqlLine.runCommands(new DispatchCallback(), wrongDateFormat);"], [1360, "      assertThat(errBaos.toString(\"UTF8\"),"], [1361, "          containsString(\"Illegal pattern character 'A'\"));"], [1362, "      sqlLine.runCommands(new DispatchCallback(), wrongTimestampFormat);"], [1363, "      assertThat(errBaos.toString(\"UTF8\"),"], [1364, "          containsString(\"Illegal pattern character 'T'\"));"], [1407, "      SqlLine sqlLine = new SqlLine();"], [1451, "    SqlLine beeLine = new SqlLine();"], [1454, "          begin(beeLine, os, false, \"-e\", \"!set maxwidth 80\");"], [1457, "      beeLine.runCommands(dc,"], [1460, "      beeLine.runCommands(dc, \"!connect \""], [1463, "      beeLine.runCommands(dc, \"!tables\");"], [1468, "      beeLine.runCommands(new DispatchCallback(), \"!quit\");"], [1469, "      assertTrue(beeLine.isExit());"], [1486, "    SqlLine beeLine = new SqlLine();"], [1489, "          begin(beeLine, os, false, \"-e\", \"!set maxwidth 80\");"], [1492, "      beeLine.runCommands(dc,"], [1498, "      beeLine.runCommands(dc, \"!connect \""], [1503, "      beeLine.runCommands(dc, \"!tables\");"], [1508, "      beeLine.runCommands(new DispatchCallback(), \"!quit\");"], [1509, "      assertTrue(beeLine.isExit());"], [1528, "    SqlLine beeLine = new SqlLine();"], [1531, "          begin(beeLine, os, false, \"-e\", \"!set maxwidth 80\");"], [1534, "      beeLine.runCommands(dc, \"!set maxwidth 80\");"], [1538, "      beeLine.runCommands(dc, \"!connect \""], [1543, "      beeLine.runCommands(dc, \"select 1;\");"], [1547, "      beeLine.runCommands(new DispatchCallback(), \"!quit\");"], [1548, "      assertTrue(beeLine.isExit());"], [1564, "    SqlLine beeLine = new SqlLine();"], [1567, "        begin(beeLine, os, false, \"-e\", \"!set maxwidth 80\");"], [1572, "      beeLine.runCommands(dc, \"!set maxwidth 80\");"], [1576, "      beeLine.runCommands(dc, \"!connect \\\"\""], [1589, "      beeLine.runCommands(dc, \"!connect \\\"\""], [1595, "      beeLine.runCommands(dc, \"!set incremental true\");"], [1596, "      beeLine.runCommands(dc, \"!tables\");"], [1602, "      beeLine.runCommands(dc, \"select 5;\");"], [1608, "      beeLine.runCommands(new DispatchCallback(), \"!quit\");"], [1612, "      assertTrue(beeLine.isExit());"], [1730, "    final SqlLine beeLine = new SqlLine();"], [1731, ""], [1736, "            (JDBCConnection) beeLine.getConnection());"], [1742, "          begin(beeLine, os, false, \"-e\", \"!set maxwidth 80\");"], [1745, "      beeLine.runCommands(dc, \"!connect \""], [1750, "      beeLine.runCommands(dc, \"!tables\");"], [2049, "    final SqlLine beeLine = new SqlLine();"], [2067, "      SqlLine.Status status = begin(beeLine, os, true,"], [2072, "      beeLine.runCommands(dc,"], [2081, "      beeLine.runCommands(dc, \"!/ 1\");"], [2092, "      beeLine.runCommands(dc, \"!/ 4\");"], [2098, "      beeLine.runCommands(dc, \"!/ 3\");"], [2104, "      beeLine.runCommands(dc, \"!/ 8\");"], [2110, "      beeLine.runCommands(dc, \"!rerun \" + Integer.MAX_VALUE);"], [2115, "      beeLine.runCommands(new DispatchCallback(), \"!quit\");"], [2116, "      assertTrue(beeLine.isExit());"], [2177, "            + \"!set incremental false\\n\""], [2189, "            + \"!set incremental false\\n\""], [2201, "            + \"!set incremental false\\n\""], [2213, "            + \"!set incremental false\\n\""], [2230, "        + \"!set incremental false\\n\""], [2250, "        + \"!set incremental false\\n\""], [2271, "        + \"!set incremental false\\n\""], [2292, "        + \"!set incremental false\\n\""], [2312, "        + \"!set incremental false\\n\""], [2327, "    final SqlLine beeLine = new SqlLine();"], [2347, "      SqlLine.Status status = begin(beeLine, os, true,"], [2354, "      beeLine.runCommands(dc, \"!set maxHistoryFileRows \" + maxLines);"], [2356, "      beeLine.runCommands(dc, \"!history\");"], [2368, "    final SqlLine beeLine = new SqlLine();"], [2371, "      SqlLine.Status status = begin(beeLine, os, false,"], [2377, "          containsString(\"Saving preferences to\"));"], [2379, "      beeLine.runCommands(dc, \"!set\");"], [2414, "      SqlLine sqlLine = new SqlLine();"], [2443, "      final SqlLine line = new SqlLine();"], [2445, "      assertThat(line.getOpts().getConfirm(), is(false));"], [2446, "      begin(line, os, false, \"-e\", \"!set confirm true\");"], [2447, "      assertThat(line.getOpts().getConfirm(), is(true));"], [2448, "      begin(line, os, false, \"-e\", \"!set confirm false\");"], [2449, "      assertThat(line.getOpts().getConfirm(), is(false));"], [2468, "    final SqlLine line = new SqlLine();"], [2469, "    assertThat(line.getOpts().getConfirm(), is(false));"], [2470, "    assertThat(line.getOpts().getConfirmPattern(), is(\"default\"));"], [2484, "        containsString(line.loc(\"abort-action\")));"], [2492, "    final SqlLine line = new SqlLine();"], [2493, "    assertThat(line.getOpts().getConfirm(), is(false));"], [2496, "    begin(line, os, false, \"-e\","], [2498, "    assertThat(line.getOpts().getConfirmPattern(),"], [2501, "    begin(line, os, false, \"-e\", \"!set confirmPattern default\");"], [2502, "    assertThat(line.getOpts().getConfirmPattern(),"], [2503, "        is(line.loc(\"default-confirm-pattern\")));"], [2512, "      final SqlLine line = new SqlLine();"], [2514, "      assertThat(line.getOpts().getConfirm(), is(false));"], [2516, "          begin(line, os, false, \"-e\","]]}, "num_lines_added": 134, "num_lines_removed": 130}