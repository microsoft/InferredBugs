{"hash": "a7d3a95a39d3bff954ae510574a507c114969997", "message": "[SQLLINE-386] Support saved connections\n1. Path to file with connections could be specified in connectionConfig property\n2. Connections in a file have names, these names could be used as connection nicknames\n3. Connections are allowed for both: input args and !connect command\n4. !rereadconfconnections to reset connections loaded from file or use another file\n5. !showconfconnections to read current connection file content", "file_num_lines": 1836, "diff_parsed": {"added": [[19, "import java.nio.file.Files;"], [20, "import java.nio.file.Path;"], [164, "  private final ConnectionConfigParser conConfParser;"], [168, "    this.conConfParser = new ConnectionConfigParser(sqlLine);"], [1281, "        \"Usage: connect [-p property value]* (-(c|cn) <connectionName> | <url>) [username] [password] [driver]\""], [1305, "    Properties props = null;"], [1306, "    String url = null;"], [1307, "    String nickname = null;"], [1308, "    boolean nickNameFromConfig ="], [1309, "        parts.length >= offset && \"-cn\".equals(parts[offset]);"], [1310, "    if (nickNameFromConfig"], [1311, "        || parts.length >= offset && \"-c\".equals(parts[offset])) {"], [1312, "      if (parts.length == offset + 1) {"], [1313, "        sqlLine.error(example);"], [1314, "        return;"], [1315, "      }"], [1316, "      props = conConfParser.getConnectionProperties(parts[offset + 1]);"], [1317, "      if (props == null) {"], [1318, "        sqlLine.error(parts[offset + 1] + \" not found in connection config\");"], [1319, "        return;"], [1320, "      }"], [1321, "      nickname = nickNameFromConfig ? parts[offset + 1] : nickname;"], [1322, "      offset++;"], [1323, "    } else {"], [1324, "      url = parts.length < offset + 1 ? null : parts[offset];"], [1325, "    }"], [1326, "    if (props == null) {"], [1327, "      props = new Properties();"], [1328, "    }"], [1329, ""], [1333, ""], [1354, "    final DatabaseConnection databaseConnection ="], [1355, "        sqlLine.getDatabaseConnection();"], [1356, "    if (nickNameFromConfig && databaseConnection != null) {"], [1357, "      databaseConnection.setNickname(nickname);"], [1358, "    }"], [1521, "  public void showconfconnections(String line, DispatchCallback callback) {"], [1522, "    final String connectionConfig = sqlLine.getOpts().getConnectionConfig();"], [1523, "    if (connectionConfig == null || connectionConfig.isEmpty()) {"], [1524, "      sqlLine.error(\"Configuration file is not specified\");"], [1525, "      return;"], [1526, "    }"], [1527, "    Path path = Paths.get(connectionConfig);"], [1528, "    if (Files.exists(path) && !Files.isDirectory(path)) {"], [1529, "      try (InputStream in = new FileInputStream(path.toFile())) {"], [1530, "        less(in);"], [1531, "      } catch (IOException e) {"], [1532, "        callback.setToFailure();"], [1533, "        sqlLine.error(e);"], [1534, "      }"], [1535, "    } else {"], [1536, "      sqlLine.error(\"Configuration file '\""], [1537, "          + path + \"' does not exist or is a directory\");"], [1538, "    }"], [1539, "  }"], [1540, ""], [1541, "  public void rereadconfconnections(String line, DispatchCallback callback) {"], [1542, "    String example = \"Usage: rereadconfconnections [new_config]\""], [1543, "        + SqlLine.getSeparator();"], [1544, "    try {"], [1545, "      String[] parts = sqlLine.split(line);"], [1546, "      if (parts == null || parts.length > 2) {"], [1547, "        callback.setToFailure();"], [1548, "        sqlLine.error(example);"], [1549, "        return;"], [1550, "      }"], [1551, "      if (parts.length == 2) {"], [1552, "        sqlLine.getOpts().setConnectionConfig(parts[1]);"], [1553, "      } else {"], [1554, "        resetconfconnections();"], [1555, "      }"], [1556, "      callback.setToSuccess();"], [1557, "    } catch (Exception e) {"], [1558, "      callback.setToFailure();"], [1559, "      sqlLine.error(e);"], [1560, "    }"], [1561, "  }"], [1562, ""], [1563, "  void resetconfconnections() {"], [1564, "    conConfParser.resetConnectionProperties();"], [1565, "  }"], [1566, ""], [1987, "    if (less(in)) {"], [1988, "      callback.setToSuccess();"], [1989, "    } else {"], [1990, "      callback.setToFailure();"], [1991, "    }"], [1992, "  }"], [1993, ""], [1994, "  private boolean less(InputStream in) throws IOException {"], [2007, "        return false;"], [2010, "    return true;"]], "deleted": [[1277, "        \"Usage: connect [-p property value]* <url> [username] [password] [driver]\""], [1301, "    String url = parts.length < offset + 1 ? null : parts[offset];"], [1305, "    Properties props = new Properties();"], [1919, "        callback.setToFailure();"], [1921, "        return;"], [1924, ""], [1925, "    callback.setToSuccess();"]]}, "num_lines_added": 92, "num_lines_removed": 7}