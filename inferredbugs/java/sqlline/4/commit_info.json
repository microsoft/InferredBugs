{"hash": "f4bfb5ce1897e3f6b00602e9f389b57a6036b093", "message": "[SQLLINE-155] Do not use default encoding\n\n[SQLLINE-154] Do not use default locale\n\nIn maven, use forbidden-apis to ensure that we are not implicitly using\ndefault locale or encoding; make corrections based on forbidden-api\nreport. For instance, use Locale.ROOT instead of Locale.getDefault();\nand use String.toUpperCase(Locale.ROOT) rather than String.toUpperCase().\n\nUpdate h2 version to 1.4.197.\n\nRemove calls to deprecated methods.", "file_num_lines": 1310, "diff_parsed": {"added": [[15, "import java.nio.charset.StandardCharsets;"], [73, "    PrintStream beelineOutputStream ="], [74, "        new PrintStream(os, false, StandardCharsets.UTF_8.name());"], [124, "    PrintStream os ="], [125, "        new PrintStream("], [126, "            new FileOutputStream(scriptFile),"], [127, "            false,"], [128, "            StandardCharsets.UTF_8.name());"], [230, "    PrintStream os ="], [231, "        new PrintStream("], [232, "            new FileOutputStream(scriptFile),"], [233, "            false,"], [234, "            StandardCharsets.UTF_8.name());"], [252, "    PrintStream os = new PrintStream("], [253, "        new FileOutputStream(scriptFile),"], [254, "        false,"], [255, "        StandardCharsets.UTF_8.name());"], [369, "        is(true));"], [455, "    PrintStream baoswriter ="], [456, "        new PrintStream(baos, false, StandardCharsets.UTF_8.name());"], [483, "      Writer fw = new OutputStreamWriter("], [484, "          new FileOutputStream(tmpFile), StandardCharsets.UTF_8);"], [530, "                + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n\""], [537, "                + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n\""], [544, "                + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n.*\"));"], [554, "            + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n\""], [578, "        + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n\""], [620, "            + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n\""], [627, "            + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n\""], [634, "            + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n.*\"));"], [644, "            + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n\""], [650, "    final BufferedReader br = new BufferedReader("], [651, "        new InputStreamReader("], [652, "            new FileInputStream(file), StandardCharsets.UTF_8.name()));"], [681, "        + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n\""], [686, "        + \"1 row selected \\\\([0-9.,]+ seconds\\\\)\\n.*\";"], [718, "    PrintStream sqllineOutputStream ="], [719, "        new PrintStream(os, false, StandardCharsets.UTF_8.name());"], [832, "    PrintStream sqllineOutputStream ="], [833, "        new PrintStream(os, false, StandardCharsets.UTF_8.name());"], [852, "    PrintStream sqllineOutputStream ="], [853, "        new PrintStream(os, false, StandardCharsets.UTF_8.name());"], [886, "    PrintStream sqllineOutputStream ="], [887, "        new PrintStream(os, false, StandardCharsets.UTF_8.name());"], [1027, "      System.setErr("], [1028, "          new PrintStream(errBaos, false, StandardCharsets.UTF_8.name()));"], [1112, "    PrintStream beelineOutputStream ="], [1113, "        new PrintStream(os, false, StandardCharsets.UTF_8.name());"], [1128, "            + StringUtils.convertBytesToHex("], [1129, "                fakeNonEmptyPassword.getBytes(StandardCharsets.UTF_8))),"], [1155, "    PrintStream beelineOutputStream ="], [1156, "        new PrintStream(os, false, StandardCharsets.UTF_8.name());"], [1171, "            + StringUtils.convertBytesToHex("], [1172, "                fakeNonEmptyPassword.getBytes(StandardCharsets.UTF_8))),"], [1176, "    final String expected = \"Error:\";"], [1194, "    PrintStream beelineOutputStream ="], [1195, "        new PrintStream(os, false, StandardCharsets.UTF_8.name());"], [1214, "    final String expected0 = \"Error:\";"], [1224, "            + StringUtils.convertBytesToHex("], [1225, "                fakeNonEmptyPassword.getBytes(StandardCharsets.UTF_8))"], [1235, "    final String expected2 = \"Error:\";"], [1237, "    os.reset();"], [1243, "        allOf(not(containsString(\"Error:\")), containsString(\"!quit\")));"], [1523, "    PrintStream beelineOutputStream ="], [1524, "        new PrintStream(os, false, StandardCharsets.UTF_8.name());"], [1530, "             new BufferedWriter("], [1531, "                 new OutputStreamWriter("], [1532, "                     new FileOutputStream(tmpHistoryFile),"], [1533, "                     StandardCharsets.UTF_8))) {"], [1563, "    final String expected0 = \"+----------------------------+\";"], [1564, "    final String expected1 = \"|             C1             |\";"]], "deleted": [[72, "    PrintStream beelineOutputStream = new PrintStream(os);"], [122, "    PrintStream os = new PrintStream(new FileOutputStream(scriptFile));"], [224, "    PrintStream os = new PrintStream(new FileOutputStream(scriptFile));"], [242, "    PrintStream os = new PrintStream(new FileOutputStream(scriptFile));"], [356, "            is(true));"], [442, "    PrintStream baoswriter = new PrintStream(baos);"], [469, "      Writer fw = new FileWriter(tmpFile);"], [515, "                + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n\""], [522, "                + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n\""], [529, "                + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n.*\"));"], [539, "            + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n\""], [563, "        + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n\""], [605, "            + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n\""], [612, "            + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n\""], [619, "            + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n.*\"));"], [629, "            + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n\""], [635, "    final BufferedReader br = new BufferedReader(new FileReader(file));"], [664, "        + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n\""], [669, "        + \"1 row selected \\\\([0-9.]+ seconds\\\\)\\n.*\";"], [701, "    PrintStream sqllineOutputStream = new PrintStream(os);"], [814, "    PrintStream sqllineOutputStream = new PrintStream(os);"], [833, "    PrintStream sqllineOutputStream = new PrintStream(os);"], [866, "    PrintStream sqllineOutputStream = new PrintStream(os);"], [1006, "      System.setErr(new PrintStream(errBaos));"], [1090, "    PrintStream beelineOutputStream = new PrintStream(os);"], [1105, "            + StringUtils.convertBytesToHex(fakeNonEmptyPassword.getBytes())),"], [1131, "    PrintStream beelineOutputStream = new PrintStream(os);"], [1146, "            + StringUtils.convertBytesToHex(fakeNonEmptyPassword.getBytes())),"], [1150, "    final String expected ="], [1151, "        \"Error: Literals of this kind are not allowed; SQL statement:\";"], [1169, "    PrintStream beelineOutputStream = new PrintStream(os);"], [1188, "    final String expected0 = \"\""], [1189, "        + \"Error: Hexadecimal string contains \" + \"non-hex character: \\\"\""], [1190, "        + fakeNonEmptyPassword + \"\\\" \""], [1191, "        + \"[90004-191] (state=90004,code=90004)\";"], [1201, "            + StringUtils.convertBytesToHex(fakeNonEmptyPassword.getBytes())"], [1211, "    final String expected2 ="], [1212, "        \"Error: Literals of this kind are not allowed; SQL statement:\";"], [1219, "        allOf(not(containsString(\"Error: Hexadecimal string contains\")),"], [1220, "            containsString(\"!quit\")));"], [1500, "    PrintStream beelineOutputStream = new PrintStream(os);"], [1506, "             new BufferedWriter(new FileWriter(tmpHistoryFile))) {"], [1536, "    final String expected0 = \"+-------------------------+\";"], [1537, "    final String expected1 = \"|           C1            |\";"]]}, "num_lines_added": 71, "num_lines_removed": 44}