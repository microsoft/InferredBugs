{"hash": "fd7de4a459a0a926eea539a71b822a4ea7ef2b3f", "message": "add the test", "file_num_lines": 68, "diff_parsed": {"added": [[22, "    private static final Logger LOGGER = LoggerFactory.getLogger(RpcClient.class);"], [23, ""], [24, "    private String host;"], [25, "    private int port;"], [26, "    private int timeout = 1000;"], [27, ""], [28, "    private RpcResponse response;"], [29, ""], [30, "    private final Object obj = new Object();"], [31, ""], [32, "    public RpcClient(String host, int port) {"], [33, "        this.host = host;"], [34, "        this.port = port;"], [35, "    }"], [36, ""], [37, "    @Override"], [38, "    public void channelRead0(ChannelHandlerContext ctx, RpcResponse response) throws Exception {"], [39, "        this.response = response;"], [40, "        synchronized (obj) {"], [41, "            obj.notifyAll(); // \u6536\u5230\u54cd\u5e94\uff0c\u5524\u9192\u7ebf\u7a0b"], [42, "        }"], [43, "    }"], [44, ""], [45, "    @Override"], [46, "    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {"], [47, "        LOGGER.error(\"client caught exception\", cause);"], [48, "        ctx.close();"], [49, "    }"], [50, ""], [51, "    public RpcResponse send(RpcRequest request) throws Exception {"], [52, "        EventLoopGroup group = new NioEventLoopGroup();"], [53, "        try {"], [54, "            Bootstrap bootstrap = new Bootstrap();"], [55, "            bootstrap.group(group)"], [56, "                    .channel(NioSocketChannel.class)"], [57, "                    .handler(new ChannelInitializer<SocketChannel>() {"], [58, "                        @Override"], [59, "                        public void initChannel(SocketChannel channel) throws Exception {"], [60, "                            channel.pipeline().addLast(new RpcEncoder(RpcRequest.class)) // \u5c06 RPC \u8bf7\u6c42\u8fdb\u884c\u7f16\u7801\uff08\u4e3a\u4e86\u53d1\u9001\u8bf7\u6c42\uff09"], [61, "                                    .addLast(new RpcDecoder(RpcResponse.class)) // \u5c06 RPC \u54cd\u5e94\u8fdb\u884c\u89e3\u7801\uff08\u4e3a\u4e86\u5904\u7406\u54cd\u5e94\uff09"], [62, "                                    .addLast(RpcClient.this); // \u4f7f\u7528 RpcClient \u53d1\u9001 RPC \u8bf7\u6c42"], [63, "                        }"], [64, "                    })"], [65, "                    .option(ChannelOption.SO_TIMEOUT, timeout)"], [66, "                    .option(ChannelOption.SO_KEEPALIVE, true);"], [67, ""], [68, ""], [69, "            ChannelFuture future = bootstrap.connect(host, port).sync();"], [70, "            future.channel().writeAndFlush(request).sync();"], [71, ""], [72, "            synchronized (obj) {"], [73, "                obj.wait(); // \u672a\u6536\u5230\u54cd\u5e94\uff0c\u4f7f\u7ebf\u7a0b\u7b49\u5f85"], [74, "            }"], [75, ""], [76, "            if (response != null) {"], [77, "                future.channel().closeFuture().sync();"], [78, "            }"], [79, "            return response;"], [80, "        } finally {"], [81, "            group.shutdownGracefully();"], [82, "        }"], [83, "    }"]], "deleted": [[22, "\tprivate static final Logger LOGGER = LoggerFactory.getLogger(RpcClient.class);"], [23, ""], [24, "\tprivate String host;"], [25, "\tprivate int port;"], [26, ""], [27, "\tprivate RpcResponse response;"], [28, ""], [29, "\tprivate final Object obj = new Object();"], [30, ""], [31, "\tpublic RpcClient(String host, int port) {"], [32, "\t\tthis.host = host;"], [33, "\t\tthis.port = port;"], [34, "\t}"], [35, ""], [36, "\t@Override"], [37, "\tpublic void channelRead0(ChannelHandlerContext ctx, RpcResponse response) throws Exception {"], [38, "\t\tthis.response = response;"], [39, "\t\tsynchronized (obj) {"], [40, "\t\t\tobj.notifyAll(); // \u6536\u5230\u54cd\u5e94\uff0c\u5524\u9192\u7ebf\u7a0b"], [41, "\t\t}"], [42, "\t}"], [43, ""], [44, "\t@Override"], [45, "\tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {"], [46, "\t\tLOGGER.error(\"client caught exception\", cause);"], [47, "\t\tctx.close();"], [48, "\t}"], [49, ""], [50, "\tpublic RpcResponse send(RpcRequest request) throws Exception {"], [51, "\t\tEventLoopGroup group = new NioEventLoopGroup();"], [52, "\t\ttry {"], [53, "\t\t\tBootstrap bootstrap = new Bootstrap();"], [54, "\t\t\tbootstrap.group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<SocketChannel>() {"], [55, "\t\t\t\t@Override"], [56, "\t\t\t\tpublic void initChannel(SocketChannel channel) throws Exception {"], [57, "\t\t\t\t\tchannel.pipeline().addLast(new RpcEncoder(RpcRequest.class)) // \u5c06 RPC \u8bf7\u6c42\u8fdb\u884c\u7f16\u7801\uff08\u4e3a\u4e86\u53d1\u9001\u8bf7\u6c42\uff09"], [58, "\t\t\t\t\t\t\t.addLast(new RpcDecoder(RpcResponse.class)) // \u5c06 RPC \u54cd\u5e94\u8fdb\u884c\u89e3\u7801\uff08\u4e3a\u4e86\u5904\u7406\u54cd\u5e94\uff09"], [59, "\t\t\t\t\t\t\t.addLast(RpcClient.this); // \u4f7f\u7528 RpcClient \u53d1\u9001 RPC \u8bf7\u6c42"], [60, "\t\t\t\t}"], [61, "\t\t\t}).option(ChannelOption.SO_KEEPALIVE, true);"], [62, ""], [63, "\t\t\tChannelFuture future = bootstrap.connect(host, port).sync();"], [64, "\t\t\tfuture.channel().writeAndFlush(request).sync();"], [65, ""], [66, "\t\t\tsynchronized (obj) {"], [67, "\t\t\t\tobj.wait(); // \u672a\u6536\u5230\u54cd\u5e94\uff0c\u4f7f\u7ebf\u7a0b\u7b49\u5f85"], [68, "\t\t\t}"], [69, ""], [70, "\t\t\tif (response != null) {"], [71, "\t\t\t\tfuture.channel().closeFuture().sync();"], [72, "\t\t\t}"], [73, "\t\t\treturn response;"], [74, "\t\t} finally {"], [75, "\t\t\tgroup.shutdownGracefully();"], [76, "\t\t}"], [77, "\t}"]]}, "num_lines_added": 62, "num_lines_removed": 56}