{"hash": "0b23ab37a0b555ce6376c1284e2a00478ee1d6c3", "message": "Split warning into two one for global (i.e. constants across many files) or local (i.e. constants in the same file).", "file_num_lines": 90, "diff_parsed": {"added": [[10, "import cfml.parsing.cfscript.script.CFCompDeclStatement;"], [14, ""], [24, "\tfinal protected int WARNING_THRESHOLD = 5;"], [25, ""], [26, "\tprotected int threshold = REPEAT_THRESHOLD;"], [27, "\tprotected int warningThreshold = WARNING_THRESHOLD;"], [29, "\tprotected Map<String, Integer> globalLiterals = new HashMap<String, Integer>();"], [30, "\tprotected Map<String, Integer> functionListerals = new HashMap<String, Integer>();"], [38, "\t\tString maxWarnings = getParameter(\"maxWarnings\");"], [39, "\t\tString warningScope = getParameter(\"warningScope\");"], [45, "\t\tif (maxWarnings != null) {"], [46, "\t\t\twarningThreshold = Integer.parseInt(maxWarnings);"], [47, "\t\t}"], [48, ""], [57, "\t\t\tint lineNo = literal.getLine() + context.startLine() - 1;"], [58, ""], [59, "\t\t\tif (warningScope == null || warningScope.equals(\"global\")) {"], [60, "\t\t\t\tliteralCount(name, lineNo, globalLiterals, true, context, bugs);"], [62, "\t\t\telse if (warningScope.equals(\"local\")) {"], [63, "\t\t\t\tliteralCount(name, lineNo, functionListerals, false, context, bugs);"], [65, "\t\t}"], [66, "\t}"], [67, ""], [68, "\t@Override"], [69, "\tpublic void expression(final CFScriptStatement expression, final Context context, final BugList bugs) {"], [70, "\t\tif (expression instanceof CFCompDeclStatement) {"], [71, "\t\t\tfunctionListerals.clear();"], [72, "\t\t}"], [73, "\t}"], [75, "\tprotected void literalCount(final String name, final int lineNo, Map<String, Integer> literals, boolean global, final Context context, final BugList bugs) {"], [76, "\t\tint count = 1;"], [77, ""], [78, "\t\tif (literals.get(name) == null) {"], [79, "\t\t\tliterals.put(name, count);"], [80, "\t\t}"], [81, "\t\telse {"], [82, "\t\t\tcount = literals.get(name);"], [83, "\t\t\tcount++;"], [84, "\t\t\tliterals.put(name, count);"], [85, "\t\t}"], [86, ""], [87, "\t\tif (count > threshold && (warningThreshold == -1 || (count - threshold) <= warningThreshold)) {"], [88, "\t\t\tif (global) {"], [89, "\t\t\t\tmagicGlobalValue(name, lineNo, context, bugs);"], [90, "\t\t\t}"], [91, "\t\t\telse {"], [92, "\t\t\t\tmagicLocalValue(name, lineNo, context, bugs);"], [101, "\tpublic void magicLocalValue(final String name, final int lineNo, final Context context, final BugList bugs) {"], [102, "\t\tbugs.add(new BugInfo.BugInfoBuilder().setLine(lineNo).setMessageCode(\"LOCAL_LITERAL_VALUE_USED_TOO_OFTEN\")"], [103, "\t\t\t.setSeverity(severity).setFilename(context.getFilename())"], [104, "\t\t\t.setMessage(\"Literal \" + name + \" occurs several times in the same file. Consider giving it a name and not hard coding values.\")"], [105, "\t\t\t.build());"], [106, "\t}"], [107, ""], [108, "\tpublic void magicGlobalValue(final String name, final int lineNo, final Context context, final BugList bugs) {"], [109, "\t\tbugs.add(new BugInfo.BugInfoBuilder().setLine(lineNo).setMessageCode(\"GLOBAL_LITERAL_VALUE_USED_TOO_OFTEN\")"], [111, "\t\t\t.setMessage(\"Literal \" + name + \" occurs several times in one or more files. Consider giving it a name and not hard coding values.\")"]], "deleted": [[23, "\tprotected int threshold = 3;"], [24, "\tprotected Map<String, Integer> literals = new HashMap<String, Integer>();"], [25, "\tprotected Map<String, Boolean> done = new HashMap<String, Boolean>();"], [33, "\t\tint threshold = REPEAT_THRESHOLD;"], [42, "\t\t\tint count = 1;"], [48, "\t\t\tif (literals.get(name) == null) {"], [49, "\t\t\t\tliterals.put(name, count);"], [50, "\t\t\t\tdone.put(name, false);"], [52, "\t\t\telse {"], [53, "\t\t\t\tcount = literals.get(name);"], [54, "\t\t\t\tcount++;"], [55, "\t\t\t\tliterals.put(name, count);"], [58, "\t\t\tif (count > threshold && !done.get(name)) {"], [59, "\t\t\t\tint lineNo = literal.getLine() + context.startLine() - 1;"], [60, "\t\t\t\tmagicValue(name, lineNo, context, bugs);"], [61, "\t\t\t\tdone.put(name, true);"], [70, "\tpublic void magicValue(final String name, final int lineNo, final Context context, final BugList bugs) {"], [71, "\t\tbugs.add(new BugInfo.BugInfoBuilder().setLine(lineNo).setMessageCode(\"LITERAL_VALUE_USED_TOO_OFTEN\")"], [73, "\t\t\t.setMessage(\"Literal \" + name + \" occurs several times. Consider giving it a name and not hard coding values.\")"]]}, "num_lines_added": 57, "num_lines_removed": 19}