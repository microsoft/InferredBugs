{"hash": "133a5e3739feb34c4a7976a1c2a193b1c1413f40", "message": "Added -rules and -config to show what rules are supported. Would be nice to have a description of each rule somewhere and print that out as well.", "file_num_lines": 376, "diff_parsed": {"added": [[35, "import com.cflint.config.CFLintPluginInfo;"], [36, "import com.cflint.config.CFLintPluginInfo.PluginInfoRule;"], [37, "import com.cflint.config.CFLintPluginInfo.PluginInfoRule.PluginMessage;"], [38, "import com.cflint.config.ConfigRuntime;"], [67, "\tprivate String configfile = null;"], [75, "\t\toptions.addOption(\"rules\", false, \"list of all supported rules\");"], [76, "\t\toptions.addOption(\"config\", false, \"list of rules in config file\");"], [113, "\t\tfinal CFLintMain main = new CFLintMain();"], [114, ""], [124, "\t\tif (cmd.hasOption(\"rules\") || cmd.hasOption(\"config\")) {"], [125, "\t\t\tCFLintPluginInfo pluginInfo = new CFLintPluginInfo();"], [126, ""], [127, "\t\t\tif (cmd.hasOption(\"configfile\")) {"], [128, "\t\t\t\tmain.configfile  = cmd.getOptionValue(\"configfile\");"], [129, "\t\t\t}"], [130, "\t\t\tif (cmd.hasOption(\"rules\")) {"], [131, "\t\t\t\tpluginInfo = ConfigUtils.loadDefaultPluginInfo();"], [132, "\t\t\t}"], [133, "\t\t\tConfigRuntime config = new ConfigRuntime(loadConfig(main.configfile), pluginInfo);"], [134, ""], [135, "\t\t\tSystem.out.println(\"Supported rules\");"], [136, "\t\t\tfor (PluginInfoRule rule:config.getRules()) {"], [137, "\t\t\t\tSystem.out.println(\"  \" + rule.getName());"], [138, "\t\t\t\tfor (PluginMessage message:rule.getMessages()) {"], [139, "\t\t\t\t\tSystem.out.println(\"    \" + message.getCode());"], [140, "\t\t\t\t}"], [141, "\t\t\t}"], [142, ""], [143, "\t\t\treturn;"], [144, "\t\t}"], [145, ""], [286, "\tprivate static CFLintConfig loadConfig(String configfile) {"], [287, "\t\tif (configfile != null) {"], [288, "\t\t\ttry {"], [289, "\t\t\t\tif (configfile.toLowerCase().endsWith(\".xml\")) {"], [290, "\t\t\t\t\treturn ConfigUtils.unmarshal(new FileInputStream(configfile), CFLintConfig.class);"], [291, "\t\t\t\t} else {"], [292, "\t\t\t\t\treturn ConfigUtils.unmarshalJson(new FileInputStream(configfile), CFLintConfig.class);"], [293, "\t\t\t\t}"], [294, "\t\t\t}"], [295, "\t\t\tcatch (Exception e) {"], [296, "\t\t\t\tSystem.err.println(\"Unable to load config file. \" + e.getMessage());"], [299, ""], [300, "\t\treturn null;"], [301, "\t}"], [302, ""], [303, "\tprivate void execute() throws IOException, TransformerException, JAXBException {"], [304, "\t\tfinal CFLint cflint = new CFLint(loadConfig(configfile));"]], "deleted": [[60, "\tprivate String configfile = null;"], [71, "\t\t// add t option"], [117, "\t\tfinal CFLintMain main = new CFLintMain();"], [258, "\tprivate void execute() throws IOException, TransformerException, JAXBException {"], [259, "\t\tCFLintConfig config = null;"], [260, "\t\tif(configfile != null){"], [261, "\t\t\tif(configfile.toLowerCase().endsWith(\".xml\")){"], [262, "\t\t\t\tconfig = ConfigUtils.unmarshal(new FileInputStream(configfile), CFLintConfig.class);"], [263, "\t\t\t}else{"], [264, "\t\t\t\tconfig = ConfigUtils.unmarshalJson(new FileInputStream(configfile), CFLintConfig.class);"], [266, ""], [268, "\t\tfinal CFLint cflint = new CFLint(config);"]]}, "num_lines_added": 48, "num_lines_removed": 12}