{"hash": "104cbead5ad7e290f1c25221f03c24c80aead227", "message": "Download via stream instead of Jsoup for #80", "file_num_lines": 124, "diff_parsed": {"added": [[3, "import java.io.BufferedInputStream;"], [7, "import java.io.InputStream;"], [8, "import java.io.OutputStream;"], [9, "import java.net.HttpURLConnection;"], [14, "import org.apache.commons.io.IOUtils;"], [81, "            tries += 1;"], [82, "            InputStream bis = null; OutputStream fos = null;"], [86, ""], [87, "                // Setup HTTP request"], [88, "                HttpURLConnection huc = (HttpURLConnection) this.url.openConnection();"], [89, "                huc.setConnectTimeout(TIMEOUT);"], [90, "                huc.setRequestProperty(\"accept\",  \"*/*\");"], [91, "                huc.setRequestProperty(\"Referer\", referrer); // Sic"], [92, "                huc.setRequestProperty(\"User-agent\", AbstractRipper.USER_AGENT);"], [93, "                String cookie = \"\";"], [94, "                for (String key : cookies.keySet()) {"], [95, "                    if (!cookie.equals(\"\")) {"], [96, "                        cookie += \"; \";"], [97, "                    }"], [98, "                    cookie += key + \"=\" + cookies.get(key);"], [99, "                }"], [100, "                huc.setRequestProperty(\"Cookie\", cookie);"], [101, "                huc.connect();"], [102, ""], [103, "                int statusCode = huc.getResponseCode();"], [104, "                if (statusCode / 100 == 4) { // 4xx errors"], [105, "                    logger.error(\"[!] Non-retriable status code \" + statusCode + \" while downloading from \" + url);"], [106, "                    observer.downloadErrored(url, \"Non-retriable status code \" + statusCode + \" while downloading \" + url.toExternalForm());"], [107, "                    return; // Not retriable, drop out."], [108, "                }"], [109, "                if (statusCode / 100 == 5) { // 5xx errors"], [110, "                    observer.downloadErrored(url, \"Retriable status code \" + statusCode + \" while downloading \" + url.toExternalForm());"], [111, "                    // Throw exception so download can be retried"], [112, "                    throw new IOException(\"Retriable status code \" + statusCode);"], [114, "                if (huc.getContentLength() == 503 && url.getHost().endsWith(\"imgur.com\")) {"], [120, ""], [121, "                // Save file"], [122, "                bis = new BufferedInputStream(huc.getInputStream());"], [123, "                fos = new FileOutputStream(saveAs);"], [124, "                IOUtils.copy(bis, fos);"], [129, "                    observer.downloadErrored(url, \"HTTP status code \" + hse.getStatusCode() + \" while downloading \" + url.toExternalForm());"], [134, "            } finally {"], [135, "                // Close any open streams"], [136, "                try {"], [137, "                    if (bis != null) { bis.close(); }"], [138, "                } catch (IOException e) { }"], [139, "                try {"], [140, "                    if (fos != null) { fos.close(); }"], [141, "                } catch (IOException e) { }"]], "deleted": [[11, "import org.jsoup.Connection.Response;"], [12, "import org.jsoup.Jsoup;"], [36, "    private final int MAX_BODY_SIZE;"], [46, "        this.MAX_BODY_SIZE = Utils.getConfigInteger(\"download.max_bytes\", 1024 * 1024 * 100);"], [83, "                tries += 1;"], [84, "                Response response;"], [85, "                response = Jsoup.connect(url.toExternalForm())"], [86, "                                .ignoreContentType(true)"], [87, "                                .userAgent(AbstractRipper.USER_AGENT)"], [88, "                                .header(\"accept\", \"*/*\")"], [89, "                                .timeout(TIMEOUT)"], [90, "                                .maxBodySize(MAX_BODY_SIZE)"], [91, "                                .cookies(cookies)"], [92, "                                .referrer(referrer)"], [93, "                                .execute();"], [94, "                if (response.statusCode() != 200) {"], [95, "                    logger.error(\"[!] Non-OK status code \" + response.statusCode() + \" while downloading from \" + url);"], [96, "                    observer.downloadErrored(url, \"Non-OK status code \" + response.statusCode() + \" while downloading \" + url.toExternalForm());"], [97, "                    return;"], [99, "                byte[] bytes = response.bodyAsBytes();"], [100, "                if (bytes.length == 503 && url.getHost().endsWith(\"imgur.com\")) {"], [106, "                FileOutputStream out = new FileOutputStream(saveAs);"], [107, "                out.write(response.bodyAsBytes());"], [108, "                out.close();"], [112, "                observer.downloadErrored(url, \"HTTP status code \" + hse.getStatusCode() + \" while downloading \" + url.toExternalForm());"]]}, "num_lines_added": 49, "num_lines_removed": 25}