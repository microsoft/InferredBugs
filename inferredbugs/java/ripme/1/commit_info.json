{"hash": "65d4b55cba102352455b978259c41462628e97af", "message": "Fixed ripper discovery in JARs, moved to 1.7\n\n...I think. Unit tests are passing so that's a good sign.", "file_num_lines": 264, "diff_parsed": {"added": [[7, "import java.net.URISyntaxException;"], [16, "import java.util.jar.JarEntry;"], [17, "import java.util.jar.JarFile;"], [233, "                //logger.error(\"Exception while instantiating: \" + constructor.getName(), e);"], [241, "        for (Class<?> clazz : getClassesForPackage(\"com.rarchives.ripme.ripper.rippers\")) {"], [242, "            if (AbstractRipper.class.isAssignableFrom(clazz)) {"], [243, "                constructors.add( (Constructor<?>) clazz.getConstructor(URL.class) );"], [249, "    private static ArrayList<Class<?>> getClassesForPackage(String pkgname) {"], [250, "        ArrayList<Class<?>> classes = new ArrayList<Class<?>>();"], [251, "        String relPath = pkgname.replace('.', '/');"], [252, "        URL resource = ClassLoader.getSystemClassLoader().getResource(relPath);"], [253, "        if (resource == null) {"], [254, "            throw new RuntimeException(\"No resource for \" + relPath);"], [255, "        }"], [256, ""], [257, "        String fullPath = resource.getFile();"], [258, "        File directory = null;"], [259, "        try {"], [260, "            directory = new File(resource.toURI());"], [261, "        } catch (URISyntaxException e) {"], [262, "            throw new RuntimeException(pkgname + \" (\" + resource + \") does not appear to be a valid URL / URI.  Strange, since we got it from the system...\", e);"], [263, "        } catch (IllegalArgumentException e) {"], [264, "            directory = null;"], [265, "        }"], [266, ""], [267, "        if (directory != null && directory.exists()) {"], [268, "            // Get the list of the files contained in the package"], [269, "            String[] files = directory.list();"], [270, "            for (String file : files) {"], [271, "                if (file.endsWith(\".class\") && !file.contains(\"$\")) {"], [272, "                    String className = pkgname + '.' + file.substring(0, file.length() - 6);"], [273, "                    try {"], [274, "                        classes.add(Class.forName(className));"], [275, "                    } catch (ClassNotFoundException e) {"], [276, "                        throw new RuntimeException(\"ClassNotFoundException loading \" + className);"], [277, "                    }"], [278, "                }"], [279, "            }"], [280, "        }"], [281, "        else {"], [282, "            try {"], [283, "                String jarPath = fullPath.replaceFirst(\"[.]jar[!].*\", \".jar\").replaceFirst(\"file:\", \"\");"], [284, "                JarFile jarFile = new JarFile(jarPath);"], [285, "                Enumeration<JarEntry> entries = jarFile.entries();"], [286, "                while(entries.hasMoreElements()) {"], [287, "                    String entryName = entries.nextElement().getName();"], [288, "                    if(entryName.startsWith(relPath)"], [289, "                            && entryName.length() > (relPath.length() + \"/\".length())) {"], [290, "                        String className = entryName.replace('/', '.').replace('\\\\', '.').replace(\".class\", \"\");"], [291, "                        try {"], [292, "                            classes.add(Class.forName(className));"], [293, "                        } catch (ClassNotFoundException e) {"], [294, "                            throw new RuntimeException(\"ClassNotFoundException loading \" + className);"], [295, "                        }"], [296, "                    }"], [297, "                }"], [298, "            } catch (IOException e) {"], [299, "                throw new RuntimeException(pkgname + \" (\" + directory + \") does not appear to be a valid package\", e);"], [300, "            }"], [301, "        }"], [302, "        return classes;"], [303, "    }"], [304, ""]], "deleted": [[230, "                logger.error(\"Excepion while instantiating: \" + constructor.getClass().getName(), e);"], [236, "    /**"], [237, "     * Gets constructors for all rippers in the \"ripper.rippers\" package"], [238, "     * @return list of constructors for all rippers."], [239, "     * @throws Exception"], [240, "     */"], [243, "        String rippersPackage = \"com.rarchives.ripme.ripper.rippers\";"], [244, "        ClassLoader cl = Thread.currentThread().getContextClassLoader();"], [245, "        Enumeration<URL> urls = cl.getResources(rippersPackage.replaceAll(\"\\\\.\", \"/\"));"], [246, "        if (!urls.hasMoreElements()) {"], [247, "            return constructors;"], [248, "        }"], [249, "        URL classURL = urls.nextElement();"], [250, "        for (File f : new File(classURL.toURI()).listFiles()) {"], [251, "            String className = f.getName();"], [252, "            if (!className.endsWith(\".class\")"], [253, "                    || className.contains(\"$\")"], [254, "                    || className.endsWith(\"Test.class\")) {"], [255, "                // Ignore non-class or nested classes."], [256, "                continue;"], [258, "            className = className.substring(0, className.length() - 6); // Strip .class"], [259, "            String fqname = rippersPackage + \".\" + className;"], [260, "            Class<?> clazz = Class.forName(fqname);"], [261, "            constructors.add( (Constructor<?>) clazz.getConstructor(URL.class));"]]}, "num_lines_added": 63, "num_lines_removed": 24}