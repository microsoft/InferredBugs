{"hash": "812bf26b3c5b2182947f4dd059914281321e47c9", "message": "Fixed UI exceptions caused by modifications to the UI outside the event thread.", "file_num_lines": 211, "diff_parsed": {"added": [[3, "import com.rarchives.ripme.ui.MainWindow;"], [4, "import com.rarchives.ripme.ui.RipStatusHandler;"], [22, "import java.util.Collections;"], [36, "    protected RipStatusHandler observer = null;"], [38, "    protected Map<URL, File> itemsPending = Collections.synchronizedMap(new HashMap<URL, File>());"], [39, "    protected Map<URL, File> itemsCompleted = Collections.synchronizedMap(new HashMap<URL, File>());"], [40, "    protected Map<URL, String> itemsErrored = Collections.synchronizedMap(new HashMap<URL, String>());"], [65, "    public void setObserver(RipStatusHandler obs) {"], [184, "            itemsPending.remove(url);"], [185, "            itemsCompleted.put(url, saveAs);"], [186, "            observer.update(this, msg);"], [187, ""], [188, "            checkIfComplete();"], [203, "        itemsPending.remove(url);"], [204, "        itemsErrored.put(url, reason);"], [205, "        observer.update(this, new RipStatusMessage(STATUS.DOWNLOAD_ERRORED, url + \" : \" + reason));"], [206, ""], [207, "        checkIfComplete();"], [220, ""], [221, "        itemsPending.remove(url);"], [222, "        itemsErrored.put(url, message);"], [223, "        observer.update(this, new RipStatusMessage(STATUS.DOWNLOAD_WARN, url + \" : \" + message));"], [224, ""], [225, ""], [236, ""], [237, "        if (!completed && itemsPending.isEmpty()) {"], [238, "            completed = true;"], [239, "            logger.info(\"   Rip completed!\");"], [240, ""], [241, "            RipStatusMessage msg = new RipStatusMessage(STATUS.RIP_COMPLETE, workingDir);"], [242, "            observer.update(this, msg);"], [323, "        observer.update(this, new RipStatusMessage(status, message));"]], "deleted": [[33, "    protected Observer observer = null;"], [35, "    protected Map<URL, File> itemsPending = new HashMap<URL, File>();"], [36, "    protected Map<URL, File> itemsCompleted = new HashMap<URL, File>();"], [37, "    protected Map<URL, String> itemsErrored = new HashMap<URL, String>();"], [62, "    public void setObserver(Observer obs) {"], [165, "        observer.notifyAll();"], [182, "            synchronized(observer) {"], [183, "                itemsPending.remove(url);"], [184, "                itemsCompleted.put(url, saveAs);"], [185, "                observer.update(this, msg);"], [186, "                observer.notifyAll();"], [187, "                checkIfComplete();"], [188, "            }"], [203, "        synchronized(observer) {"], [204, "            itemsPending.remove(url);"], [205, "            itemsErrored.put(url, reason);"], [206, "            observer.update(this, new RipStatusMessage(STATUS.DOWNLOAD_ERRORED, url + \" : \" + reason));"], [207, "            observer.notifyAll();"], [208, "            checkIfComplete();"], [209, "        }"], [222, "        synchronized(observer) {"], [223, "            itemsPending.remove(url);"], [224, "            itemsErrored.put(url, message);"], [225, "            observer.update(this, new RipStatusMessage(STATUS.DOWNLOAD_WARN, url + \" : \" + message));"], [226, "            observer.notifyAll();"], [227, "        }"], [238, "        synchronized (observer) {"], [239, "            if (!completed && itemsPending.size() == 0) {"], [240, "                completed = true;"], [241, "                logger.info(\"   Rip completed!\");"], [242, "                observer.update(this,"], [243, "                        new RipStatusMessage("], [244, "                                STATUS.RIP_COMPLETE,"], [245, "                                workingDir));"], [246, "                observer.notifyAll();"], [247, "            }"], [328, "        synchronized (observer) {"], [329, "            observer.update(this, new RipStatusMessage(status, message));"], [330, "            observer.notifyAll();"], [331, "        }"]]}, "num_lines_added": 32, "num_lines_removed": 40}