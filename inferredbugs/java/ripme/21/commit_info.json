{"hash": "5545677cfefae6481470c51eeb9c867b74a845ac", "message": "Fix get supported languages dynamically\nRemove UTF8-BOM from de_DE, pl_PL and ru_RU bundles\nAdded test to find is there is a Key in a language bundle but not in the default bundle\nAdded test to list keys missing from a language bundle", "file_num_lines": 53, "diff_parsed": {"added": [[3, "import static org.junit.jupiter.api.Assertions.assertTrue;"], [4, ""], [5, "import java.util.ArrayList;"], [6, "import java.util.Enumeration;"], [7, "import java.util.HashMap;"], [8, "import java.util.ResourceBundle;"], [9, "import java.util.Set;"], [14, "import org.junit.jupiter.api.Assertions;"], [19, "    private static final String DEFAULT_LANG = \"en_US\";"], [23, "        ResourceBundle defaultBundle = Utils.getResourceBundle(null);"], [24, "        HashMap<String, ArrayList<String>> dictionary = new HashMap<>();"], [25, "        for (String lang : Utils.getSupportedLanguages()) {"], [26, "            ResourceBundle.clearCache();"], [27, "            if (lang.equals(DEFAULT_LANG))"], [28, "                continue;"], [29, "            ResourceBundle selectedLang = Utils.getResourceBundle(lang);"], [30, "            for (final Enumeration<String> keys = defaultBundle.getKeys(); keys.hasMoreElements();) {"], [31, "                String element = keys.nextElement();"], [32, "                if (selectedLang.containsKey(element)"], [33, "                        && !selectedLang.getString(element).equals(defaultBundle.getString(element))) {"], [34, "                    if (dictionary.get(lang) == null)"], [35, "                        dictionary.put(lang, new ArrayList<>());"], [36, "                    dictionary.get(lang).add(element);"], [37, "                }"], [41, "        dictionary.keySet().forEach(d -> {"], [42, "            logger.warn(String.format(\"Keys missing in %s\", d));"], [43, "            dictionary.get(d).forEach(v -> logger.warn(v));"], [44, "            logger.warn(\"\\n\");"], [45, "        });"], [48, "    @Test"], [49, "    void testKeyName() {"], [50, "        ResourceBundle defaultBundle = Utils.getResourceBundle(null);"], [51, "        Set<String> defaultSet = defaultBundle.keySet();"], [52, "        for (String lang : Utils.getSupportedLanguages()) {"], [53, "            if (lang.equals(DEFAULT_LANG))"], [54, "                continue;"], [55, "            for (String key : Utils.getResourceBundle(lang).keySet()) {"], [56, "                assertTrue(defaultSet.contains(key),"], [57, "                        String.format(\"The key %s of %s is not in the default bundle\", key, lang));"]], "deleted": [[3, "import java.io.File;"], [4, "import java.io.FilenameFilter;"], [5, "import java.io.IOException;"], [6, "import java.net.URI;"], [7, "import java.net.URISyntaxException;"], [8, "import java.net.URL;"], [9, "import java.nio.file.FileSystem;"], [10, "import java.nio.file.FileSystems;"], [11, "import java.nio.file.Files;"], [12, "import java.nio.file.Path;"], [13, "import java.util.Collections;"], [14, "import java.util.List;"], [15, "import java.util.regex.Matcher;"], [16, "import java.util.regex.Pattern;"], [17, "import java.util.stream.Collectors;"], [21, "import org.apache.log4j.ConsoleAppender;"], [22, "import org.apache.log4j.Level;"], [27, ""], [32, "        ((ConsoleAppender) Logger.getRootLogger().getAppender(\"stdout\")).setThreshold(Level.DEBUG);"], [33, "        File f = new File(\"E:\\\\Downloads\\\\_Isaaku\\\\dev\\\\ripme-1.7.86-jar-with-dependencies.jar\");"], [34, "        File[] files = f.listFiles(new FilenameFilter() {"], [35, ""], [36, "            @Override"], [37, "            public boolean accept(File dir, String name) {"], [38, "                logger.info(\"name: \" + name);"], [39, "                return name.startsWith(\"LabelsBundle_\");"], [41, ""], [42, "        });"], [43, ""], [44, "        for (String s : getResourcesNames(\"\\\\**\")) {"], [45, "            logger.info(s);"], [50, "    public String[] getResourcesNames(String path) {"], [51, "        Class loader = getClassLoader();"], [52, "        /*URL u = loader.getResource(\"/rip.properties\");"], [53, "        path = u.getFile();"], [54, "        path = new File(path).getParent();*/"], [55, ""], [56, "        try {"], [57, "            URL url = loader.getResource(path);"], [58, "            if (url == null) {"], [59, "                return null;"], [60, "            }"], [61, ""], [62, "            URI uri = url.toURI();"], [63, "            if (uri.getScheme().equals(\"jar\")) { // Run from jar"], [64, "                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.emptyMap())) {"], [65, "                    Path resourcePath = fileSystem.getPath(path);"], [66, ""], [67, "                    // Get all contents of a resource (skip resource itself), if entry is a"], [68, "                    // directory remove trailing /"], [69, "                    List<String> resourcesNames = Files.walk(resourcePath, 1).skip(1).map(p -> {"], [70, "                        String name = p.getFileName().toString();"], [71, "                        if (name.endsWith(\"/\")) {"], [72, "                            name = name.substring(0, name.length() - 1);"], [73, "                        }"], [74, "                        return name;"], [75, "                    }).sorted().collect(Collectors.toList());"], [76, ""], [77, "                    return resourcesNames.toArray(new String[resourcesNames.size()]);"], [78, "                }"], [79, "            } else { // Run from IDE"], [80, "                File resource = new File(uri);"], [81, "                return resource.list();"], [83, "        } catch (IOException e) {"], [84, "            return null;"], [85, "        } catch (URISyntaxException e) {"], [86, "            // TODO Auto-generated catch block"], [87, "            return null;"], [90, ""], [91, "    private Class getClassLoader() {"], [92, "        return Utils.class;"], [93, "        //return Thread.currentThread().getContextClassLoader();"], [94, "    }"]]}, "num_lines_added": 39, "num_lines_removed": 73}