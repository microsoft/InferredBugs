{"hash": "c42831fc63b1b6986fa55bc869053e92ba7b677b", "message": "added chevereto ripper", "file_num_lines": 70, "diff_parsed": {"added": [[28, "            String host = url.toExternalForm().split(\"/\")[2];"], [34, "            String host = url.toExternalForm().split(\"/\")[2];"], [42, "                Pattern pa = Pattern.compile(\"(?:https?://)?(?:www\\\\.)?[a-z1-9]*\\\\.[a-z1-9]*/album/([a-zA-Z1-9]*)/?$\");"], [43, "                Matcher ma = pa.matcher(url.toExternalForm());"], [44, "                if (ma.matches()) {"], [45, "                    return true;"], [46, "                }"]], "deleted": [[28, "            String host = url.toExternalForm();"], [34, "            String host = url.toExternalForm();"], [42, "                return true;"], [54, "            else if (m.matches() == false) {"], [55, "                Pattern pa = Pattern.compile(\"(?:https?://)?(?:www\\\\.)?[a-z1-9]*\\\\.[a-z1-9]*/([a-zA-Z1-9_-]*)/albums/?$\");"], [56, "                Matcher ma = pa.matcher(url.toExternalForm());"], [57, "                if (ma.matches()) {"], [58, "                    return ma.group(1);"], [59, "                }"], [60, "            }"], [70, ""], [71, "        @Override"], [72, "        public Document getNextPage(Document doc) throws IOException {"], [73, "            // Find next page"], [74, "            String nextUrl = \"\";"], [75, "            Element elem = doc.select(\"li.pagination-next > a\").first();"], [76, "                String nextPage = elem.attr(\"href\");"], [77, "                if (nextUrl == \"\") {"], [78, "                    throw new IOException(\"No more pages\");"], [79, "                }"], [80, "                // Sleep for half a sec to avoid getting IP banned"], [81, "                sleep(500);"], [82, "                return Http.url(nextUrl).get();"], [83, "            }"], [88, "            Document userpage_doc;"], [89, "            // We check for the following string to see if this is a user page or not"], [90, "            if (doc.toString().contains(\"content=\\\"gallery\\\"\")) {"], [91, "                for (Element elem : doc.select(\"a.image-container\")) {"], [92, "                    String link = elem.attr(\"href\");"], [93, "                    logger.info(\"Grabbing album \" + link);"], [94, "                    try {"], [95, "                        userpage_doc = Http.url(link).get();"], [96, "                    } catch(IOException e){"], [97, "                        logger.warn(\"Failed to log link in Jsoup\");"], [98, "                        userpage_doc = null;"], [99, "                        e.printStackTrace();"], [100, "                    }"], [101, "                    for (Element element : userpage_doc.select(\"a.image-container > img\")) {"], [102, "                            String imageSource = element.attr(\"src\");"], [103, "                            logger.info(\"Found image \" + link);"], [104, "                            // We remove the .md from images so we download the full size image"], [105, "                            // not the medium ones"], [106, "                            imageSource = imageSource.replace(\".md\", \"\");"], [107, "                            result.add(imageSource);"], [108, "                        }"], [109, "                }"], [110, ""], [111, "            }"], [112, "            else {"], [120, "            }"]]}, "num_lines_added": 7, "num_lines_removed": 50}