{"hash": "a2b382da0a7424c9861da2750b40f332543314eb", "message": "Fix Issue #75 - support --project and --type-check (#88)\n\nFix issue #75: adds support for two new options:\r\n\r\n- ```sonar.ts.tslintprojectpath``` - set to 'tsconfig.json' or similar, the path to your TypeScript configuration file describing what files to compile and lint\r\n- ```sonar.ts.tslinttypecheck``` - true/false, defaults to false - if true, requests ```tslint``` perform a type-check too, which allows certain rules requiring type information to work", "file_num_lines": 145, "diff_parsed": {"added": [[17, "import org.sonar.api.utils.command.StreamConsumer;"], [67, "            .addArgument(this.preparePath(config.getConfigFile()));"], [68, ""], [69, "        if (config.useTsConfigInsteadOfFileList()) {"], [70, "            command"], [71, "                .addArgument(\"--project\")"], [72, "                .addArgument(this.preparePath(config.getPathToTsConfig()));"], [73, "        }"], [74, ""], [75, "        if (config.shouldPerformTypeCheck()) {"], [76, "            command"], [77, "                .addArgument(\"--type-check\");"], [78, "        }"], [79, ""], [80, "        command.setNewShell(false);"], [89, "        else if (files == null) {"], [94, "        // We'll use this as our reference for chunking up files, if we need to"], [97, "        Command baseCommand = getBaseCommand(config, tslintOutputFilePath);"], [106, "        if (config.useTsConfigInsteadOfFileList()) {"], [107, "            LOG.debug(\"Running against a single project JSON file\");"], [109, "            // If we're being asked to use a tsconfig.json file, it'll contain"], [110, "            // the file list to lint - so don't batch, and just run with it"], [111, "            toReturn.add(this.getCommandOutput(baseCommand, stdOutConsumer, stdErrConsumer, tslintOutputFile, config.getTimeoutMs()));"], [112, "        }"], [113, "        else {"], [114, "            int baseCommandLength = baseCommand.toCommandLine().length();"], [115, "            int availableForBatching = MAX_COMMAND_LENGTH - baseCommandLength;"], [116, ""], [117, "            List<List<String>> batches = new ArrayList<List<String>>();"], [118, "            List<String> currentBatch = new ArrayList<String>();"], [119, "            batches.add(currentBatch);"], [120, ""], [121, "            int currentBatchLength = 0;"], [122, "            for (int i = 0; i < files.size(); i++) {"], [123, "                String nextPath = this.preparePath(files.get(i).trim());"], [124, ""], [125, "                // +1 for the space we'll be adding between filenames"], [126, "                if (currentBatchLength + nextPath.length() + 1 > availableForBatching) {"], [127, "                    // Too long to add to this batch, create new"], [128, "                    currentBatch = new ArrayList<String>();"], [129, "                    currentBatchLength = 0;"], [130, "                    batches.add(currentBatch);"], [132, ""], [133, "                currentBatch.add(nextPath);"], [134, "                currentBatchLength += nextPath.length() + 1;"], [136, ""], [137, "            LOG.debug(\"Split \" + files.size() + \" files into \" + batches.size() + \" batches for processing\");"], [138, ""], [139, "            for (int i = 0; i < batches.size(); i++) {"], [140, "                StringBuilder outputBuilder = new StringBuilder();"], [141, ""], [142, "                List<String> thisBatch = batches.get(i);"], [143, ""], [144, "                Command thisCommand = getBaseCommand(config, tslintOutputFilePath);"], [145, ""], [146, "                for (int fileIndex = 0; fileIndex < thisBatch.size(); fileIndex++) {"], [147, "                    thisCommand.addArgument(thisBatch.get(fileIndex));"], [148, "                }"], [149, ""], [150, "                LOG.debug(\"Executing TsLint with command: \" + thisCommand.toCommandLine());"], [151, ""], [152, "                // Timeout is specified per file, not per batch (which can vary a lot)"], [153, "                // so multiply it up"], [154, "                toReturn.add(this.getCommandOutput(thisCommand, stdOutConsumer, stdErrConsumer, tslintOutputFile, config.getTimeoutMs() * thisBatch.size()));"], [161, "    private String getCommandOutput(Command thisCommand, StreamConsumer stdOutConsumer, StreamConsumer stdErrConsumer, File tslintOutputFile, Integer timeoutMs) {"], [162, "        LOG.debug(\"Executing TsLint with command: \" + thisCommand.toCommandLine());"], [163, ""], [164, "        // Timeout is specified per file, not per batch (which can vary a lot)"], [165, "        // so multiply it up"], [166, "        this.createExecutor().execute(thisCommand, stdOutConsumer, stdErrConsumer, timeoutMs);"], [167, ""], [168, "        StringBuilder outputBuilder = new StringBuilder();"], [169, ""], [170, "        try {"], [171, "            BufferedReader reader = this.getBufferedReaderForFile(tslintOutputFile);"], [172, ""], [173, "            String str;"], [174, "            while ((str = reader.readLine()) != null) {"], [175, "                outputBuilder.append(str);"], [176, "            }"], [177, ""], [178, "            reader.close();"], [179, ""], [180, "            return outputBuilder.toString();"], [181, "        }"], [182, "        catch (IOException ex) {"], [183, "            LOG.error(\"Failed to re-read TsLint output\", ex);"], [184, "        }"], [185, ""], [186, "        return \"\";"], [187, "    }"], [188, ""]], "deleted": [[66, "            .addArgument(this.preparePath(config.getConfigFile()))"], [67, "            .setNewShell(false);"], [76, ""], [77, "        if (files == null) {"], [82, "        // We'll use this as our reference for chunking up files"], [87, ""], [88, "        int baseCommandLength = getBaseCommand(config, tslintOutputFilePath).toCommandLine().length();"], [89, "        int availableForBatching = MAX_COMMAND_LENGTH - baseCommandLength;"], [91, "        List<List<String>> batches = new ArrayList<List<String>>();"], [92, "        List<String> currentBatch = new ArrayList<String>();"], [93, "        batches.add(currentBatch);"], [94, ""], [95, "        int currentBatchLength = 0;"], [96, "        for (int i = 0; i < files.size(); i++) {"], [97, "            String nextPath = this.preparePath(files.get(i).trim());"], [98, ""], [99, "            // +1 for the space we'll be adding between filenames"], [100, "            if (currentBatchLength + nextPath.length() + 1 > availableForBatching) {"], [101, "                // Too long to add to this batch, create new"], [102, "                currentBatch = new ArrayList<String>();"], [103, "                currentBatchLength = 0;"], [104, "                batches.add(currentBatch);"], [105, "            }"], [106, ""], [107, "            currentBatch.add(nextPath);"], [108, "            currentBatchLength += nextPath.length() + 1;"], [109, "        }"], [110, ""], [111, "        LOG.debug(\"Split \" + files.size() + \" files into \" + batches.size() + \" batches for processing\");"], [112, ""], [118, "        for (int i = 0; i < batches.size(); i++) {"], [119, "            StringBuilder outputBuilder = new StringBuilder();"], [120, ""], [121, "            List<String> thisBatch = batches.get(i);"], [122, ""], [123, "            Command thisCommand = getBaseCommand(config, tslintOutputFilePath);"], [124, ""], [125, "            for (int fileIndex = 0; fileIndex < thisBatch.size(); fileIndex++) {"], [126, "                thisCommand.addArgument(thisBatch.get(fileIndex));"], [127, "            }"], [128, ""], [129, "            LOG.debug(\"Executing TsLint with command: \" + thisCommand.toCommandLine());"], [130, ""], [131, "            // Timeout is specified per file, not per batch (which can vary a lot)"], [132, "            // so multiply it up"], [133, "            this.createExecutor().execute(thisCommand, stdOutConsumer, stdErrConsumer, config.getTimeoutMs() * thisBatch.size());"], [135, "            try {"], [136, "                BufferedReader reader = this.getBufferedReaderForFile(tslintOutputFile);"], [137, ""], [138, "                String str;"], [139, "                while ((str = reader.readLine()) != null) {"], [140, "                    outputBuilder.append(str);"], [142, ""], [143, "                reader.close();"], [144, ""], [145, "                toReturn.add(outputBuilder.toString());"], [147, "            catch (IOException ex) {"], [148, "                LOG.error(\"Failed to re-read TsLint output from \" + tslintOutputFilePath, ex);"]]}, "num_lines_added": 92, "num_lines_removed": 58}