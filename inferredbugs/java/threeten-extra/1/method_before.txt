    @Override
    public long until(final Temporal endExclusive, final TemporalUnit unit) {
        final PaxDate end = PaxDate.from(endExclusive);
        if (unit instanceof ChronoUnit) {
            switch ((ChronoUnit) unit) {
                case DAYS:
                    return daysUntil(end);
                case WEEKS:
                    return daysUntil(end) / DAYS_IN_WEEK;
                case MONTHS:
                    return monthsUntil(end);
                case YEARS:
                    return yearsUntil(end);
                case DECADES:
                    return yearsUntil(end) / YEARS_IN_DECADE;
                case CENTURIES:
                    return yearsUntil(end) / YEARS_IN_CENTURY;
                case MILLENNIA:
                    return yearsUntil(end) / YEARS_IN_MILLENNIUM;
                case ERAS:
                    return end.getLong(ERA) - getLong(ERA);
                default:
                    throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
            }
        }
        return unit.between(this, end);
    }