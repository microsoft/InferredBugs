{"hash": "bba4fbfcd6dd2621048bd12b63fefae2f7ea02a3", "message": "SONARPY-474 Create symbol for Function Definition (#462)", "file_num_lines": 78, "diff_parsed": {"added": [[40, "  }"], [42, "  @Test"], [43, "  public void only_methods() {"], [47, "    assertThat(empty2.classFields()).extracting(Symbol::name).containsExactly(\"f\");"], [73, "    assertThat(c1.classFields()).extracting(Symbol::name).containsExactlyInAnyOrder(\"f\", \"g\");"], [82, "    assertThat(c2.classFields()).extracting(Symbol::name).containsExactlyInAnyOrder(\"f\", \"g\");"], [92, "  @Test"], [93, "  public void same_name() {"], [94, "    ClassDef c = parseClass("], [95, "      \"class C: \","], [96, "      \"  f1 = 1\","], [97, "      \"  def fn():\","], [98, "      \"    self.f1 = 2\");"], [99, "    assertThat(c.classFields()).extracting(Symbol::name).containsExactlyInAnyOrder(\"f1\", \"fn\");"], [100, "    assertThat(c.instanceFields()).isEmpty();"], [101, "  }"], [102, ""]], "deleted": [[44, "    assertThat(empty2.classFields()).isEmpty();"], [70, "    assertThat(c1.classFields()).isEmpty();"], [79, "    assertThat(c2.classFields()).isEmpty();"]]}, "num_lines_added": 17, "num_lines_removed": 3}