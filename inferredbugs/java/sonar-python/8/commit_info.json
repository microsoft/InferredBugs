{"hash": "3d2db34011eb362388eda68755f2f2bc937f51fa", "message": "SONARPY-530 Update FQN of exported names of __init__ modules (#512)", "file_num_lines": 359, "diff_parsed": {"added": [[24, "import org.mockito.Mockito;"], [25, "import org.sonar.plugins.python.api.PythonFile;"], [26, "import org.sonar.plugins.python.api.PythonVisitorContext;"], [30, "import org.sonar.plugins.python.api.tree.ClassDef;"], [37, "import org.sonar.python.parser.PythonParser;"], [38, "import org.sonar.python.tree.PythonTreeMaker;"], [41, "import static org.mockito.Mockito.when;"], [129, "      new SymbolTableBuilder(\"my_package\", \"my_module.py\"),"], [139, "      new SymbolTableBuilder(\"my_package\", \"my_module.py\"),"], [149, "      new SymbolTableBuilder(\"my_package\", \"my_module.py\"),"], [162, "      new SymbolTableBuilder(\"my_package\", \"my_module.py\"),"], [176, "      new SymbolTableBuilder(\"my_package\", \"my_module.py\"),"], [187, "      new SymbolTableBuilder(\"my_package\", \"my_module.py\"),"], [195, "      new SymbolTableBuilder(\"\", \"my_module.py\"),"], [196, "      \"from . import b\""], [197, "    );"], [198, "    b = getFirstChild(tree, t -> t.is(Tree.Kind.NAME));"], [199, "    assertThat(b.symbol().fullyQualifiedName()).isEqualTo(\"b\");"], [200, ""], [201, "    // no package, init file"], [202, "    tree = parse("], [203, "      new SymbolTableBuilder(\"\", \"__init__.py\"),"], [211, "      new SymbolTableBuilder(\"my_package\", \"my_module.py\"),"], [218, "      new SymbolTableBuilder(\"my_package1.my_package2\", \"my_module.py\"),"], [226, "      new SymbolTableBuilder(\"my_package\", \"my_module.py\"),"], [407, "  @Test"], [408, "  public void init_module_relative_import() {"], [409, "    String code = String.join(System.getProperty(\"line.separator\"), \"from .. import fn\", \"fn()\", \"class A: pass\");"], [410, "    FileInput fileInput = new PythonTreeMaker().fileInput(PythonParser.create().parse(code));"], [411, "    PythonFile pythonFile = Mockito.mock(PythonFile.class, \"__init__.py\");"], [412, "    when(pythonFile.fileName()).thenReturn(\"__init__.py\");"], [413, "    PythonVisitorContext context = new PythonVisitorContext(fileInput, pythonFile, null, \"foo.bar\");"], [414, "    fileInput = context.rootTree();"], [415, "    CallExpression callExpression = (CallExpression) getAllDescendant(fileInput, tree -> tree.is(Tree.Kind.CALL_EXPR)).get(0);"], [416, "    assertThat(callExpression.calleeSymbol().fullyQualifiedName()).isEqualTo(\"foo.fn\");"], [417, "    ClassDef classDef = (ClassDef) getAllDescendant(fileInput, tree -> tree.is(Tree.Kind.CLASSDEF)).get(0);"], [418, "    assertThat(classDef.name().symbol().fullyQualifiedName()).isEqualTo(\"foo.bar.A\");"], [419, "  }"], [420, ""]], "deleted": [[122, "      new SymbolTableBuilder(\"my_package.my_module\"),"], [132, "      new SymbolTableBuilder(\"my_package.my_module\"),"], [142, "      new SymbolTableBuilder(\"my_package.my_module\"),"], [155, "      new SymbolTableBuilder(\"my_package.my_module\"),"], [169, "      new SymbolTableBuilder(\"my_package.my_module\"),"], [180, "      new SymbolTableBuilder(\"my_package.my_module\"),"], [188, "      new SymbolTableBuilder(\"my_module\"),"], [196, "      new SymbolTableBuilder(\"my_package.my_module\"),"], [203, "      new SymbolTableBuilder(\"my_package1.my_package2.my_module\"),"], [211, "      new SymbolTableBuilder(\"my_package.my_module\"),"]]}, "num_lines_added": 39, "num_lines_removed": 10}