{"hash": "9c314ae2bb9a7deb7448d9c05eef27ca76f848ff", "message": "Fix some quality flaws", "file_num_lines": 124, "diff_parsed": {"added": [[41, "import javax.annotation.Nullable;"], [43, "import java.io.IOException;"], [75, "  @Override"], [83, "  @Override"], [88, "  @Override"], [93, "  @Override"], [96, "    List<Issue> issues = new LinkedList<>();"], [101, "        LOG.error(\"Report '{}' cannot be found, details: '{}'\", report, e);"], [102, "      } catch(java.io.IOException e) {"], [103, "        LOG.error(\"Report '{}' cannot be read, details: '{}'\", report, e);"], [110, "  private List<Issue> parse(File report) throws IOException {"], [114, "    for(Scanner sc = new Scanner(report.toPath(), fileSystem.encoding().name()); sc.hasNext(); ) {"], [131, "        processRule(pylintIssue, pyfile, rule);"], [137, ""], [138, "  private void processRule(Issue pylintIssue, InputFile pyfile, @Nullable Rule rule) {"], [139, "    if (rule != null) {"], [140, "      if (rule.isEnabled()) {"], [141, "        Issuable issuable = resourcePerspectives.as(Issuable.class, pyfile);"], [142, "        addIssue(pylintIssue, rule, issuable);"], [143, "      } else {"], [144, "        LOG.debug(\"Pylint rule '{}' is disabled in Sonar\", pylintIssue.getRuleId());"], [145, "      }"], [146, "    } else {"], [147, "      LOG.warn(\"Pylint rule '{}' is unknown in Sonar\", pylintIssue.getRuleId());"], [148, "    }"], [149, "  }"], [150, ""], [151, "  private void addIssue(Issue pylintIssue, Rule rule, @Nullable Issuable issuable) {"], [152, "    if (issuable != null) {"], [153, "      org.sonar.api.issue.Issue issue = issuable.newIssueBuilder()"], [154, "        .ruleKey(RuleKey.of(rule.getRepositoryKey(), rule.getKey()))"], [155, "        .line(pylintIssue.getLine())"], [156, "        .message(pylintIssue.getDescr())"], [157, "        .build();"], [158, "      issuable.addIssue(issue);"], [159, "    }"], [160, "  }"]], "deleted": [[90, "    List<Issue> issues = new LinkedList<Issue>();"], [95, "        LOG.error(\"Report '{}' cannot be found, details: '{}'\", report, e.toString());"], [102, "  private List<Issue> parse(File report) throws java.io.FileNotFoundException {"], [106, "    for(Scanner sc = new Scanner(report); sc.hasNext(); ) {"], [123, ""], [124, "        if (rule != null) {"], [125, "          if (rule.isEnabled()) {"], [126, "            Issuable issuable = resourcePerspectives.as(Issuable.class, pyfile);"], [127, ""], [128, "            if (issuable != null) {"], [129, "              org.sonar.api.issue.Issue issue = issuable.newIssueBuilder()"], [130, "                .ruleKey(RuleKey.of(rule.getRepositoryKey(), rule.getKey()))"], [131, "                .line(pylintIssue.getLine())"], [132, "                .message(pylintIssue.getDescr())"], [133, "                .build();"], [134, "              issuable.addIssue(issue);"], [135, "            }"], [136, "          } else {"], [137, "            LOG.debug(\"Pylint rule '{}' is disabled in Sonar\", pylintIssue.getRuleId());"], [138, "          }"], [139, "        } else {"], [140, "          LOG.warn(\"Pylint rule '{}' is unknown in Sonar\", pylintIssue.getRuleId());"], [141, "        }"]]}, "num_lines_added": 37, "num_lines_removed": 23}