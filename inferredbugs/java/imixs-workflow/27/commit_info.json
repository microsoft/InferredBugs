{"hash": "d954dd962c8784b3f16d0ed91a1ee498704feb22", "message": "implementation\n\nissue #474", "file_num_lines": 486, "diff_parsed": {"added": [[173, "\tprotected Event<DocumentEvent> documentEvents;"], [174, ""], [175, "\t@Inject"], [176, "\tprotected Event<UserGroupEvent> userGroupEvents;"], [208, "\t * <p>"], [209, "\t * A client can extend the list of user groups associated with a userId by"], [210, "\t * reacting on the CDI event 'UserGrouptEvent'."], [212, "\t * @see UserGroupEvent"], [238, "\t\t// To extend UserGroups we fire the CDI Event UserGroupEvent..."], [239, "\t\tif (userGroupEvents != null) {"], [240, "\t\t\t// create Group Event"], [241, "\t\t\tUserGroupEvent groupEvent = new UserGroupEvent(ctx.getCallerPrincipal().getName().toString());"], [242, "\t\t\tuserGroupEvents.fire(groupEvent);"], [243, "\t\t\tif (groupEvent.getGroups() != null) {"], [244, "\t\t\t\tuserNameList.addAll(groupEvent.getGroups());"], [245, "\t\t\t}"], [246, ""], [247, "\t\t} else {"], [248, "\t\t\tlogger.warning(\"Missing CDI support for Event<UserGroupEvent> !\");"], [249, "\t\t}"], [250, ""], [251, "\t\t// String[] applicationGroups = getUserGroupList();"], [252, "\t\t// if (applicationGroups != null)"], [253, "\t\t// for (String auserRole : applicationGroups)"], [254, "\t\t// userNameList.add(auserRole);"], [423, "\t\tif (documentEvents != null) {"], [424, "\t\t\tdocumentEvents.fire(new DocumentEvent(document, DocumentEvent.ON_DOCUMENT_SAVE));"], [547, ""], [548, "\t\tif (id == null || id.isEmpty()) {"], [580, "\t\t\tif (documentEvents != null) {"], [581, "\t\t\t\tdocumentEvents.fire(new DocumentEvent(result, DocumentEvent.ON_DOCUMENT_LOAD));"], [608, "\t\tif (document == null) {"], [611, ""], [622, "\t\t\tif (documentEvents != null) {"], [623, "\t\t\t\tdocumentEvents.fire(new DocumentEvent(document, DocumentEvent.ON_DOCUMENT_DELETE));"], [627, ""], [634, ""]], "deleted": [[173, "\tprotected Event<DocumentEvent> events;"], [231, "\t\t// read dynamic user roles from the ContextData (if provided) and add"], [232, "\t\t// them to the query...."], [233, "\t\tString[] applicationGroups = getUserGroupList();"], [234, "\t\tif (applicationGroups != null)"], [235, "\t\t\tfor (String auserRole : applicationGroups)"], [236, "\t\t\t\tuserNameList.add(auserRole);"], [405, "\t\tif (events != null) {"], [406, "\t\t\tevents.fire(new DocumentEvent(document, DocumentEvent.ON_DOCUMENT_SAVE));"], [529, ""], [530, "\t\tif (id==null || id.isEmpty()) {"], [562, "\t\t\tif (events != null) {"], [563, "\t\t\t\tevents.fire(new DocumentEvent(result, DocumentEvent.ON_DOCUMENT_LOAD));"], [590, "\t\tif (document==null) {"], [593, ""], [604, "\t\t\tif (events != null) {"], [605, "\t\t\t\tevents.fire(new DocumentEvent(document, DocumentEvent.ON_DOCUMENT_DELETE));"], [609, ""], [616, ""], [617, ""], [1107, "\t/**"], [1108, "\t * This method read the param USER_GROUP_LIST from the EJB ContextData. This"], [1109, "\t * context data object can provide a string array with application specific"], [1110, "\t * dynamic user groups. These groups are used to grant access to an entity"], [1111, "\t * independent from the static User-Role settings. The method returns null if no"], [1112, "\t * ContextData is set"], [1113, "\t *"], [1114, "\t * @return - list of user group names or null if not USER_GROUP_LIST is defined"], [1115, "\t */"], [1116, "\tprivate String[] getUserGroupList() {"], [1117, "\t\t// read dynamic user roles from the ContextData (if provided) ...."], [1118, "\t\tString[] applicationUserGroupList = (String[]) ctx.getContextData().get(USER_GROUP_LIST);"], [1119, ""], [1120, "\t\tif (applicationUserGroupList != null)"], [1121, "\t\t\t// trim entries...."], [1122, "\t\t\tfor (int i = 0; i < applicationUserGroupList.length; i++) {"], [1123, "\t\t\t\tapplicationUserGroupList[i] = applicationUserGroupList[i].trim();"], [1124, "\t\t\t}"], [1125, ""], [1126, "\t\treturn applicationUserGroupList;"], [1127, "\t}"], [1128, ""]]}, "num_lines_added": 37, "num_lines_removed": 42}