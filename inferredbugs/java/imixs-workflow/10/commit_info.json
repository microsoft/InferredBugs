{"hash": "8a2a32ab3b1cc32502640d3f27e1ab2a5d667d12", "message": "issue #126", "file_num_lines": 266, "diff_parsed": {"added": [[109, "\tprivate String indexDirectoryPath = null;"], [110, "\tprivate String luceneLockFactory = null;"], [111, "\tprivate Properties properties = null;"], [119, "\t * PostContruct event - The method loads the lucene index properties from"], [120, "\t * the imixs.properties file from the classpath. If no properties are"], [121, "\t * defined the method terminates."], [122, "\t *"], [127, "\t\t// try loading imixs-search properties"], [128, "\t\tproperties = propertyService.getProperties();"], [129, ""], [130, "\t\t/**"], [131, "\t\t * Read configuration"], [132, "\t\t */"], [133, "\t\t// String sLuceneVersion = prop.getProperty(\"Version\", \"LUCENE_45\");"], [134, ""], [135, "\t\tindexDirectoryPath = properties.getProperty(\"lucence.indexDir\");"], [136, "\t\tluceneLockFactory = properties.getProperty(\"lucence.lockFactory\");"], [137, ""], [138, "\t\tString sFulltextFieldList = properties.getProperty(\"lucence.fulltextFieldList\");"], [139, "\t\tString sIndexFieldListAnalyse = properties.getProperty(\"lucence.indexFieldListAnalyze\");"], [140, "\t\tString sIndexFieldListNoAnalyse = properties.getProperty(\"lucence.indexFieldListNoAnalyze\");"], [141, ""], [142, "\t\tlogger.fine(\"IndexDir:\" + indexDirectoryPath);"], [143, "\t\tlogger.fine(\"FulltextFieldList:\" + sFulltextFieldList);"], [144, "\t\tlogger.fine(\"IndexFieldListAnalyse:\" + sIndexFieldListAnalyse);"], [145, "\t\tlogger.fine(\"IndexFieldListNoAnalyse:\" + sIndexFieldListNoAnalyse);"], [146, "\t\t// compute search field list"], [147, "\t\tStringTokenizer st = new StringTokenizer(sFulltextFieldList, \",\");"], [148, "\t\tsearchFieldList = new ArrayList<String>();"], [149, "\t\twhile (st.hasMoreElements()) {"], [150, "\t\t\tString sName = st.nextToken().toLowerCase();"], [151, "\t\t\t// do not add internal fields"], [152, "\t\t\tif (!\"$uniqueid\".equals(sName) && !\"$readaccess\".equals(sName))"], [153, "\t\t\t\tsearchFieldList.add(sName);"], [154, "\t\t}"], [155, ""], [156, "\t\t// compute Index field list (Analyze)"], [157, "\t\tst = new StringTokenizer(sIndexFieldListAnalyse, \",\");"], [158, "\t\tindexFieldListAnalyse = new ArrayList<String>();"], [159, "\t\twhile (st.hasMoreElements()) {"], [160, "\t\t\tString sName = st.nextToken().toLowerCase();"], [161, "\t\t\t// do not add internal fields"], [162, "\t\t\tif (!\"$uniqueid\".equals(sName) && !\"$readaccess\".equals(sName))"], [163, "\t\t\t\tindexFieldListAnalyse.add(sName);"], [164, "\t\t}"], [165, ""], [166, "\t\t// compute Index field list (NoAnalyze)"], [167, "\t\tst = new StringTokenizer(sIndexFieldListNoAnalyse, \",\");"], [168, "\t\tindexFieldListNoAnalyse = new ArrayList<String>();"], [169, "\t\twhile (st.hasMoreElements()) {"], [170, "\t\t\tString sName = st.nextToken().toLowerCase();"], [171, "\t\t\t// do not add internal fields"], [172, "\t\t\tif (!\"$uniqueid\".equals(sName) && !\"$readaccess\".equals(sName))"], [173, "\t\t\t\tindexFieldListNoAnalyse.add(sName);"], [174, "\t\t}"], [175, "\t}"], [213, "\t\t\tawriter = createIndexWriter();"], [221, "\t\t\t\tif (matchConditions(workitem)) {"], [268, ""], [269, "\t\ttry {"], [270, "\t\t\tawriter = createIndexWriter();"], [271, "\t\t\tTerm term = new Term(\"$uniqueid\", uniqueID);"], [272, "\t\t\tawriter.deleteDocuments(term);"], [273, "\t\t} catch (CorruptIndexException e) {"], [274, "\t\t\tthrow new PluginException(LucenePlugin.class.getSimpleName(), INVALID_INDEX,"], [275, "\t\t\t\t\t\"Unable to remove workitem '\" + uniqueID + \"' from search index\", e);"], [276, "\t\t} catch (LockObtainFailedException e) {"], [277, "\t\t\tthrow new PluginException(LucenePlugin.class.getSimpleName(), INVALID_INDEX,"], [278, "\t\t\t\t\t\"Unable to remove workitem '\" + uniqueID + \"' from search index\", e);"], [279, "\t\t} catch (IOException e) {"], [280, "\t\t\tthrow new PluginException(LucenePlugin.class.getSimpleName(), INVALID_INDEX,"], [281, "\t\t\t\t\t\"Unable to remove workitem '\" + uniqueID + \"' from search index\", e);"], [283, ""], [294, "\tpublic boolean matchConditions(ItemCollection aworktiem) {"], [296, "\t\tString typePattern = properties.getProperty(\"lucence.matchingType\");"], [297, "\t\tString processIDPattern = properties.getProperty(\"lucence.matchingProcessID\");"], [329, "\tIndexWriter createIndexWriter() throws IOException {"], [334, "\t\tDirectory indexDir = createIndexDirectory();"], [355, "\tDirectory createIndexDirectory() throws IOException {"], [362, "\t\tDirectory indexDir = FSDirectory.open(new File(indexDirectoryPath));"], [367, "\t\tif (luceneLockFactory != null && !\"\".equals(luceneLockFactory)) {"], [370, "\t\t\tlogger.fine(\"[LuceneUpdateService] set LockFactory=\" + luceneLockFactory);"], [373, "\t\t\t\tfsFactoryClass = Class.forName(luceneLockFactory);"]], "deleted": [[116, "\t * PostContruct event - loads the imixs.properties."], [120, "\t}"], [122, ""], [149, "\t * The method loads the lucene index properties from the imixs.properties"], [150, "\t * file from the classpath. If no properties are defined the method"], [151, "\t * terminates."], [152, "\t *"], [162, "\t\t// try loading imixs-search properties"], [163, "\t\tProperties prop = propertyService.getProperties();"], [164, "\t\tif (prop.isEmpty())"], [165, "\t\t\treturn false;"], [168, "\t\t\tawriter = createIndexWriter(prop);"], [176, "\t\t\t\tif (matchConditions(prop, workitem)) {"], [223, "\t\tProperties prop = propertyService.getProperties();"], [224, "\t\tif (!prop.isEmpty()) {"], [225, "\t\t\ttry {"], [226, "\t\t\t\tawriter = createIndexWriter(prop);"], [227, "\t\t\t\tTerm term = new Term(\"$uniqueid\", uniqueID);"], [228, "\t\t\t\tawriter.deleteDocuments(term);"], [229, "\t\t\t} catch (CorruptIndexException e) {"], [230, "\t\t\t\tthrow new PluginException(LucenePlugin.class.getSimpleName(), INVALID_INDEX,"], [231, "\t\t\t\t\t\t\"Unable to remove workitem '\" + uniqueID + \"' from search index\", e);"], [232, "\t\t\t} catch (LockObtainFailedException e) {"], [233, "\t\t\t\tthrow new PluginException(LucenePlugin.class.getSimpleName(), INVALID_INDEX,"], [234, "\t\t\t\t\t\t\"Unable to remove workitem '\" + uniqueID + \"' from search index\", e);"], [235, "\t\t\t} catch (IOException e) {"], [236, "\t\t\t\tthrow new PluginException(LucenePlugin.class.getSimpleName(), INVALID_INDEX,"], [237, "\t\t\t\t\t\t\"Unable to remove workitem '\" + uniqueID + \"' from search index\", e);"], [238, "\t\t\t}"], [250, "\tpublic boolean matchConditions(Properties prop, ItemCollection aworktiem) {"], [252, "\t\tString typePattern = prop.getProperty(\"lucence.matchingType\");"], [253, "\t\tString processIDPattern = prop.getProperty(\"lucence.matchingProcessID\");"], [285, "\tIndexWriter createIndexWriter(Properties prop) throws IOException {"], [286, ""], [287, "\t\t/**"], [288, "\t\t * Read configuration"], [289, "\t\t */"], [290, "\t\t// String sLuceneVersion = prop.getProperty(\"Version\", \"LUCENE_45\");"], [291, ""], [292, "\t\tString sIndexDir = prop.getProperty(\"lucence.indexDir\");"], [293, "\t\tString sFulltextFieldList = prop.getProperty(\"lucence.fulltextFieldList\");"], [294, "\t\tString sIndexFieldListAnalyse = prop.getProperty(\"lucence.indexFieldListAnalyze\");"], [295, "\t\tString sIndexFieldListNoAnalyse = prop.getProperty(\"lucence.indexFieldListNoAnalyze\");"], [296, ""], [297, "\t\tlogger.fine(\"IndexDir:\" + sIndexDir);"], [298, "\t\tlogger.fine(\"FulltextFieldList:\" + sFulltextFieldList);"], [299, "\t\tlogger.fine(\"IndexFieldListAnalyse:\" + sIndexFieldListAnalyse);"], [300, "\t\tlogger.fine(\"IndexFieldListNoAnalyse:\" + sIndexFieldListNoAnalyse);"], [301, "\t\t// compute search field list"], [302, "\t\tStringTokenizer st = new StringTokenizer(sFulltextFieldList, \",\");"], [303, "\t\tsearchFieldList = new ArrayList<String>();"], [304, "\t\twhile (st.hasMoreElements()) {"], [305, "\t\t\tString sName = st.nextToken().toLowerCase();"], [306, "\t\t\t// do not add internal fields"], [307, "\t\t\tif (!\"$uniqueid\".equals(sName) && !\"$readaccess\".equals(sName))"], [308, "\t\t\t\tsearchFieldList.add(sName);"], [309, "\t\t}"], [310, ""], [311, "\t\t// compute Index field list (Analyze)"], [312, "\t\tst = new StringTokenizer(sIndexFieldListAnalyse, \",\");"], [313, "\t\tindexFieldListAnalyse = new ArrayList<String>();"], [314, "\t\twhile (st.hasMoreElements()) {"], [315, "\t\t\tString sName = st.nextToken().toLowerCase();"], [316, "\t\t\t// do not add internal fields"], [317, "\t\t\tif (!\"$uniqueid\".equals(sName) && !\"$readaccess\".equals(sName))"], [318, "\t\t\t\tindexFieldListAnalyse.add(sName);"], [319, "\t\t}"], [320, ""], [321, "\t\t// compute Index field list (Analyze)"], [322, "\t\tst = new StringTokenizer(sIndexFieldListNoAnalyse, \",\");"], [323, "\t\tindexFieldListNoAnalyse = new ArrayList<String>();"], [324, "\t\twhile (st.hasMoreElements()) {"], [325, "\t\t\tString sName = st.nextToken().toLowerCase();"], [326, "\t\t\t// do not add internal fields"], [327, "\t\t\tif (!\"$uniqueid\".equals(sName) && !\"$readaccess\".equals(sName))"], [328, "\t\t\t\tindexFieldListNoAnalyse.add(sName);"], [329, "\t\t}"], [334, "\t\tDirectory indexDir = createIndexDirectory(prop);"], [355, "\tDirectory createIndexDirectory(Properties prop) throws IOException {"], [361, "\t\tString sLuceneLockFactory = prop.getProperty(\"lucence.lockFactory\");"], [362, "\t\tString sIndexDir = prop.getProperty(\"lucence.indexDir\");"], [364, "\t\tDirectory indexDir = FSDirectory.open(new File(sIndexDir));"], [369, "\t\tif (sLuceneLockFactory != null && !\"\".equals(sLuceneLockFactory)) {"], [372, "\t\t\tlogger.fine(\"[LuceneUpdateService] set LockFactory=\" + sLuceneLockFactory);"], [375, "\t\t\t\tfsFactoryClass = Class.forName(sLuceneLockFactory);"]]}, "num_lines_added": 83, "num_lines_removed": 85}