{"hash": "6101d9ecca5055b7d70bcaeb714cb6e291bcaad5", "message": "implementation\n\nissue #299", "file_num_lines": 740, "diff_parsed": {"added": [[52, "\tboolean bSequenceFlow = false;"], [53, ""], [54, "\tboolean bconditionExpression = false;"], [55, ""], [63, ""], [80, "\tMap<String, String> conditionCache = null;"], [81, ""], [83, "\tList<String> conditionalGatewayCache = null;"], [97, "\t\tconditionCache = new HashMap<String, String>();"], [102, "\t\tconditionalGatewayCache = new ArrayList<String>();"], [103, ""], [215, "\t\t\tbSequenceFlow = true;"], [260, "\t\tif (qName.equalsIgnoreCase(\"bpmn2:exclusiveGateway\") || qName.equalsIgnoreCase(\"bpmn2:inclusiveGateway\")"], [261, "\t\t\t\t|| qName.equalsIgnoreCase(\"bpmn2:eventBasedGateway\")) {"], [262, "\t\t\t// Put conditona Gateway ID into th gateway cache..."], [263, "\t\t\tconditionalGatewayCache.add(attributes.getValue(\"id\"));"], [264, "\t\t}"], [265, ""], [266, "\t\t// test for conditional Expression..."], [267, "\t\tif (qName.equalsIgnoreCase(\"bpmn2:conditionExpression\")) {"], [268, "\t\t\tbconditionExpression = true;"], [269, "\t\t\tcharacterStream = new StringBuilder();"], [270, "\t\t}"], [271, ""], [373, "\t\t// test conditional sequence flow..."], [374, "\t\tif (bSequenceFlow && bconditionExpression && qName.equalsIgnoreCase(\"bpmn2:conditionExpression\")) {"], [375, "\t\t\tString svalue = characterStream.toString();"], [376, "\t\t\tlogger.fine(\"conditional SequenceFlow:\" + bpmnID + \"=\" + svalue);"], [377, "\t\t\tbconditionExpression = false;"], [378, "\t\t\tconditionCache.put(bpmnID, svalue);"], [379, "\t\t}"], [380, ""], [387, "\t\tif (bdocumentation || bconditionExpression) {"], [402, "\t * First all task elements were adds as unique process entities into the model."], [403, "\t * In the second step the method adds the Activity elements to the assigned"], [404, "\t * Task. We look also for activities with no incoming SequenceFlow."], [406, "\t * The builder verifies the ProcessIDs for each task element to guaranty that"], [407, "\t * the numProcessID is unique"], [413, "\t * The method tests the model for bpmn2:message elements and replace links in"], [414, "\t * Activity elements attribute 'rtfMailBody'"], [522, "\t * This method returns all SourceTask Elements connected to a given eventID. The"], [523, "\t * method takes care about loop events and follow up events. Later ones are"], [524, "\t * handled by the method addImixsEvent(). For that reason, the result of this"], [525, "\t * method can be also an empty list."], [527, "\t * An event can be a shared event so it is possible that more than one source"], [528, "\t * tasks are found"], [613, "\t * This method computes the target for an event and adds the event to a source"], [614, "\t * task. The method call recursive if the target is a followUp Event."], [618, "\t * If a event has more than one targets (task or event elements) then the event"], [619, "\t * is handled as a loop event."], [621, "\t * If a event is already assigned to the sourceTask, the method returns without"], [622, "\t * adding the event."], [679, "\t\t\t// test if this is a conditional event - search for gateway..."], [680, "\t\t\tList<SequenceFlow> outgoingList = this.findOutgoingFlows(eventID);"], [681, "\t\t\tif (outgoingList != null && outgoingList.size() > 0) {"], [682, "\t\t\t\tMap<Integer,String> conditions=new HashMap<Integer,String>();"], [683, "\t\t\t\tfor (SequenceFlow flow : outgoingList) {"], [684, "\t\t\t\t\tif (conditionalGatewayCache.contains(flow.target)) {"], [685, ""], [686, "\t\t\t\t\t\tString conditionalGatewayID = flow.target;"], [687, "\t\t\t\t\t\t// get all outgoing flows from this gateway"], [688, "\t\t\t\t\t\tList<SequenceFlow> conditionalFlows = this.findOutgoingFlows(conditionalGatewayID);"], [689, "\t\t\t\t\t\tfor (SequenceFlow condFlow : conditionalFlows) {"], [690, "\t\t\t\t\t\t\tItemCollection targetTask = new ElementResolver().findImixsTargetTask(condFlow);"], [691, "\t\t\t\t\t\t\t// build the condition"], [692, "\t\t\t\t\t\t\tif (targetTask != null) {"], [693, "\t\t\t\t\t\t\t\tString sExpression =  findConditionBySquenceFlow(condFlow);"], [694, "\t\t\t\t\t\t\t\tlogger.fine(\"add condition: \" +targetTask.getItemValueInteger(\"numProcessid\") + \"=\"+ sExpression);"], [695, "\t\t\t\t\t\t\t\tconditions.put(targetTask.getItemValueInteger(\"numProcessid\"), sExpression);"], [696, "\t\t\t\t\t\t\t}"], [697, "\t\t\t\t\t\t}"], [698, ""], [699, "\t\t\t\t\t}"], [700, ""], [701, "\t\t\t\t}"], [702, "\t\t\t\t// add the attribute 'keyConditions' if available..."], [703, "\t\t\t\tif (!conditions.isEmpty()) {"], [704, "\t\t\t\t\tevent.replaceItemValue(\"keyConditions\", conditions);"], [705, "\t\t\t\t}"], [706, ""], [707, "\t\t\t}"], [708, ""], [772, "\t * This helper method verifies if the activity of the event is still unique for"], [773, "\t * the task element. If not the method computes a new one and updates the event"], [850, "\t * This method returns all incoming Associations flows for a given element ID"], [869, "\t * This method returns all outgoing Associations flows for a given element ID"], [887, "\t * This method returns an optional condition for a given sequenceFlow object."], [888, "\t * The method iterates the conditionCache to lookup the condition"], [889, "\t *"], [890, "\t * @param flow"], [891, "\t * @return the condition if available or null"], [892, "\t */"], [893, "\tprivate String findConditionBySquenceFlow(SequenceFlow flow) {"], [894, "\t\tif (conditionCache == null) {"], [895, "\t\t\treturn null;"], [896, "\t\t}"], [897, "\t\t// first we need do figure out the squenceFlowID for the flow object"], [898, "\t\tString sequenceID = null;"], [899, "\t\tfor (Map.Entry<String, SequenceFlow> entry : sequenceCache.entrySet()) {"], [900, "\t\t\tString key = entry.getKey();"], [901, "\t\t\tSequenceFlow value = entry.getValue();"], [902, "\t\t\tif (value == flow) {"], [903, "\t\t\t\tsequenceID = key;"], [904, "\t\t\t\tbreak;"], [905, "\t\t\t}"], [906, "\t\t}"], [907, "\t\treturn conditionCache.get(sequenceID);"], [908, "\t}"], [909, ""], [910, "\t/**"], [961, "\t * This helper class provides methods to resolve the connected Imixs elements to"], [962, "\t * a flow element. The constructor is used to initialize a loopDetection cache"], [976, "\t\t * This method searches a Imixs Task Element connected to the given SequenceFlow"], [977, "\t\t * element. If the Sequence Flow is not connected to a Imixs Task element the"], [978, "\t\t * method returns null."], [1026, "\t\t * SequenceFlow element. If the Sequence Flow is not connected to a Imixs Event"], [1027, "\t\t * element the method returns null."], [1030, "\t\t * @return the Imixs event element or null if no event Element was found."], [1074, "\t\t * SequenceFlow element. If the Sequence Flow is not connected to a Imixs Task"], [1075, "\t\t * element the method returns null."], [1120, "\t\t * This method searches the id for a Imixs follow-Up activity. This is the case"], [1121, "\t\t * if the target is another Imixs Event element. The method returns the id of"], [1122, "\t\t * the followup event"], [1124, "\t\t * @return the ID of the Imixs Event element or null if no Event Element was"], [1125, "\t\t *         found."], [1164, "\t\t * This method searches for all target events or task for a outgoing sequence"], [1165, "\t\t * flow. The method returns a List of possible target elemetns."], [1168, "\t\t * @return the ID of the Imixs Event element or null if no Event Element was"], [1169, "\t\t *         found."], [1215, "\t\t * This method searches for all target tasks for a outgoing sequence flow. The"], [1216, "\t\t * method returns a List of possible imixs task elements."], [1219, "\t\t * @return the ID of the Imixs Event element or null if no Event Element was"], [1220, "\t\t *         found."]], "deleted": [[355, "\t\tif (bdocumentation) {"], [370, "\t * First all task elements were adds as unique process entities into the"], [371, "\t * model. In the second step the method adds the Activity elements to the"], [372, "\t * assigned Task. We look also for activities with no incoming SequenceFlow."], [374, "\t * The builder verifies the ProcessIDs for each task element to guaranty"], [375, "\t * that the numProcessID is unique"], [381, "\t * The method tests the model for bpmn2:message elements and replace links"], [382, "\t * in Activity elements attribute 'rtfMailBody'"], [490, "\t * This method returns all SourceTask Elements connected to a given eventID."], [491, "\t * The method takes care about loop events and follow up events. Later ones"], [492, "\t * are handled by the method addImixsEvent(). For that reason, the result of"], [493, "\t * this method can be also an empty list."], [495, "\t * An event can be a shared event so it is possible that more than one"], [496, "\t * source tasks are found"], [581, "\t * This method computes the target for an event and adds the event to a"], [582, "\t * source task. The method call recursive if the target is a followUp Event."], [586, "\t * If a event has more than one targets (task or event elements) then the"], [587, "\t * event is handled as a loop event."], [589, "\t * If a event is already assigned to the sourceTask, the method returns"], [590, "\t * without adding the event."], [676, ""], [678, ""], [712, "\t * This helper method verifies if the activity of the event is still unique"], [713, "\t * for the task element. If not the method computes a new one and updates"], [714, "\t * the event"], [791, "\t * This method returns all incoming Associations flows for a given element"], [792, "\t * ID"], [811, "\t * This method returns all outgoing Associations flows for a given element"], [812, "\t * ID"], [880, "\t * This helper class provides methods to resolve the connected Imixs"], [881, "\t * elements to a flow element. The constructor is used to initialize a"], [882, "\t * loopDetection cache"], [896, "\t\t * This method searches a Imixs Task Element connected to the given"], [897, "\t\t * SequenceFlow element. If the Sequence Flow is not connected to a"], [898, "\t\t * Imixs Task element the method returns null."], [946, "\t\t * SequenceFlow element. If the Sequence Flow is not connected to a"], [947, "\t\t * Imixs Event element the method returns null."], [950, "\t\t * @return the Imixs event element or null if no event Element was"], [951, "\t\t *         found."], [995, "\t\t * SequenceFlow element. If the Sequence Flow is not connected to a"], [996, "\t\t * Imixs Task element the method returns null."], [1041, "\t\t * This method searches the id for a Imixs follow-Up activity. This is"], [1042, "\t\t * the case if the target is another Imixs Event element. The method"], [1043, "\t\t * returns the id of the followup event"], [1045, "\t\t * @return the ID of the Imixs Event element or null if no Event Element"], [1046, "\t\t *         was found."], [1085, "\t\t * This method searches for all target events or task for a outgoing"], [1086, "\t\t * sequence flow. The method returns a List of possible target elemetns."], [1089, "\t\t * @return the ID of the Imixs Event element or null if no Event Element"], [1090, "\t\t *         was found."], [1136, "\t\t * This method searches for all target tasks for a outgoing sequence"], [1137, "\t\t * flow. The method returns a List of possible imixs task elements."], [1140, "\t\t * @return the ID of the Imixs Event element or null if no Event Element"], [1141, "\t\t *         was found."]]}, "num_lines_added": 133, "num_lines_removed": 54}