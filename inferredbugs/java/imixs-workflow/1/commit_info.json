{"hash": "fcf2e3f5fe4a78aadaaf55a0a6618b5d1845efed", "message": "issue #16", "file_num_lines": 569, "diff_parsed": {"added": [[32, "import java.util.ArrayList;"], [38, "import java.util.logging.Level;"], [57, "import org.imixs.workflow.exceptions.PluginException;"], [58, "import org.imixs.workflow.exceptions.ProcessingErrorException;"], [71, " * The method processSingleWorkitem() is used to process a workitem in an"], [72, " * isolated transaction. See: http://blog.imixs.org/?p=155"], [106, "\tList<String> unprocessedIDs = null;"], [172, "\t\t// configItemCollection.replaceItemValue(\"$writeAccess\", \"\");"], [173, "\t\t// configItemCollection.replaceItemValue(\"$readAccess\", \"\");"], [174, ""], [382, "\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid"], [408, "\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid"], [415, "\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid"], [427, "\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid"], [432, "\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid"], [442, "\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid"], [459, "\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid"], [463, "\t\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid"], [471, "\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid + \": \""], [476, "\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid"], [481, "\t\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] \" + suniqueid"], [512, "\t\tlogger.info(\"[WorkflowSchedulerService] started....\");"], [513, ""], [522, ""], [523, "\t\t/*"], [524, "\t\t * Now we process all scheduled worktitems for each model"], [525, "\t\t */"], [526, "\t\tiProcessWorkItems = 0;"], [527, "\t\tunprocessedIDs = new ArrayList<String>();"], [528, "\t\ttry {"], [529, "\t\t\t// get all model versions..."], [530, "\t\t\tList<String> modelVersions = modelService.getAllModelVersions();"], [531, "\t\t\tfor (String version : modelVersions) {"], [532, "\t\t\t\tlogger.info(\"[WorkflowSchedulerService] processing ModelVersion: \""], [533, "\t\t\t\t\t\t+ version);"], [534, "\t\t\t\t// find scheduled Activities"], [535, "\t\t\t\tCollection<ItemCollection> colScheduledActivities = findScheduledActivities(version);"], [536, "\t\t\t\tlogger.info(\"[WorkflowSchedulerService] \""], [537, "\t\t\t\t\t\t+ colScheduledActivities.size()"], [538, "\t\t\t\t\t\t+ \" scheduled activityEntities found in ModelVersion: \""], [539, "\t\t\t\t\t\t+ version);"], [540, "\t\t\t\t// process all workitems for coresponding activities"], [541, "\t\t\t\tfor (ItemCollection aactivityEntity : colScheduledActivities) {"], [542, "\t\t\t\t\tprocessWorkListByActivityEntity(aactivityEntity);"], [543, "\t\t\t\t}"], [544, "\t\t\t}"], [545, ""], [546, "\t\t} catch (Exception e) {"], [547, "\t\t\tlogger.severe(\"[WorkflowSchedulerService] error processing worklist: \""], [548, "\t\t\t\t\t+ e.getMessage());"], [549, "\t\t\tif (logger.isLoggable(Level.FINE)) {"], [550, "\t\t\t\te.printStackTrace();"], [551, "\t\t\t}"], [552, "\t\t}"], [553, ""], [554, "\t\tlogger.info(\"[WorkflowSchedulerService] finished successfull\");"], [555, ""], [556, "\t\tlogger.info(\"[WorkflowSchedulerService] \" + iProcessWorkItems"], [557, "\t\t\t\t+ \" workitems processed\");"], [558, ""], [559, "\t\tif (unprocessedIDs.size() > 0) {"], [560, "\t\t\tlogger.warning(\"[WorkflowSchedulerService] \""], [561, "\t\t\t\t\t+ unprocessedIDs.size() + \" workitems could be processed!\");"], [562, "\t\t\tfor (String aid : unprocessedIDs) {"], [563, "\t\t\t\tlogger.warning(\"[WorkflowSchedulerService]          \" + aid);"], [564, "\t\t\t}"], [565, ""], [566, "\t\t}"], [575, "\t\tconfigItemCollection.replaceItemValue(\"numWorkItemsUnprocessed\","], [576, "\t\t\t\tunprocessedIDs.size());"], [797, "\t * processID is identified by the activityEntity Object (numprocessid)"], [803, "\t *"], [804, "\t * @see http://blog.imixs.org/?p=155"], [805, "\t *"], [809, "\tvoid processWorkListByActivityEntity(ItemCollection activityEntity)"], [810, "\t\t\tthrows Exception {"], [811, ""], [814, "\t\tint iActivityID = activityEntity.getItemValueInteger(\"numActivityID\");"], [819, "\t\tlogger.info(\"[WorkflowSchedulerService] processing \" + iProcessID + \".\""], [820, "\t\t\t\t+ iActivityID + \" (\" + sModelVersion + \") ...\");"], [821, ""], [822, "\t\t// now we need to select by type, $ProcessID and by $modelVersion!"], [823, "\t\tString sQuery = \"SELECT wi FROM Entity as wi \""], [824, "\t\t\t\t+ \" JOIN wi.integerItems AS i \" + \" JOIN wi.textItems as t \""], [825, "\t\t\t\t+ \" WHERE wi.type='workitem' \";"], [826, "\t\tsQuery += \" AND i.itemName = '$processid' AND i.itemValue = '\""], [827, "\t\t\t\t+ iProcessID + \"'\""], [828, "\t\t\t\t+ \" AND t.itemName = '$modelversion' AND t.itemValue = '\""], [829, "\t\t\t\t+ sModelVersion + \"'\";"], [830, ""], [831, "\t\tlogger.fine(\"[WorkflowSchedulerService] select: \" + sQuery);"], [832, ""], [833, "\t\tCollection<ItemCollection> worklist = entityService.findAllEntities("], [834, "\t\t\t\tsQuery, 0, -1);"], [835, ""], [839, "\t\t\t// verify due date"], [840, "\t\t\tif (workItemInDue(workitem, activityEntity)) {"], [841, "\t\t\t\tString sID = workitem"], [842, "\t\t\t\t\t\t.getItemValueString(EntityService.UNIQUEID);"], [843, "\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] workitem \" + sID"], [844, "\t\t\t\t\t\t+ \"is in due\");"], [845, "\t\t\t\tworkitem.replaceItemValue(\"$activityid\", iActivityID);"], [846, "\t\t\t\ttry {"], [847, "\t\t\t\t\tlogger.finest(\"[WorkflowSchedulerService] getBusinessObject.....\");"], [848, "\t\t\t\t\t// call from new instance because of transaction new..."], [849, "\t\t\t\t\t// see: http://blog.imixs.org/?p=155"], [850, "\t\t\t\t\t// see: https://www.java.net/node/705304"], [851, "\t\t\t\t\tctx.getBusinessObject(WorkflowSchedulerService.class)"], [852, "\t\t\t\t\t\t\t.processSingleWorkitem(workitem);"], [853, "\t\t\t\t\tiProcessWorkItems++;"], [854, "\t\t\t\t} catch (Exception e) {"], [855, "\t\t\t\t\tlogger.warning(\"[WorkflowSchedulerService] error processing workitem: \""], [856, "\t\t\t\t\t\t\t+ sID);"], [857, "\t\t\t\t\tif (logger.isLoggable(Level.FINEST)) {"], [858, "\t\t\t\t\t\te.printStackTrace();"], [860, "\t\t\t\t\tunprocessedIDs.add(sID);"], [863, ""], [868, "\t * This method process a single workIten in a new transaction. The method is"], [869, "\t * called by processWorklist()"], [872, "\t * @throws PluginException"], [873, "\t * @throws ProcessingErrorException"], [874, "\t * @throws AccessDeniedException"], [877, "\tpublic void processSingleWorkitem(ItemCollection aWorkitem)"], [878, "\t\t\tthrows AccessDeniedException, ProcessingErrorException,"], [879, "\t\t\tPluginException {"], [880, "\t\tworkflowService.processWorkItem(aWorkitem);"]], "deleted": [[100, "\tint iScheduledWorkItems = 0;"], [373, "\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] \" + suniqueid"], [399, "\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] \" + suniqueid"], [406, "\t\t\t\tSystem.out.println(\"[WorkflowSchedulerService] \" + suniqueid"], [418, "\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] \" + suniqueid"], [423, "\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] \" + suniqueid"], [433, "\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] \" + suniqueid"], [450, "\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] \" + suniqueid"], [454, "\t\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] \" + suniqueid"], [462, "\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] \" + suniqueid + \": \""], [467, "\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] \" + suniqueid"], [472, "\t\t\t\t\tlogger.fine(\"[WorkflowSchedulerService] \" + suniqueid"], [503, "\t\tlogger.info(\"[WorkflowSchedulerService] runTimer started....\");"], [504, ""], [513, "\t\tprocessWorkItems();"], [522, "\t\tconfigItemCollection.replaceItemValue(\"numWorkItemsScheduled\","], [523, "\t\t\t\tiScheduledWorkItems);"], [558, "\t * This is the method which processed scheuduled workitems when the timer is"], [559, "\t * called."], [560, "\t *"], [561, "\t * @param timer"], [562, "\t */"], [563, "\tvoid processWorkItems() {"], [564, ""], [565, "\t\tiProcessWorkItems = 0;"], [566, "\t\tiScheduledWorkItems = 0;"], [567, ""], [568, "\t\tlogger.info(\"[WorkflowSchedulerService] processing workitems...\");"], [569, ""], [570, "\t\ttry {"], [571, ""], [572, "\t\t\tList<String> modelVersions = modelService.getAllModelVersions();"], [573, ""], [574, "\t\t\tfor (String version : modelVersions) {"], [575, "\t\t\t\tlogger.info(\"[WorkflowSchedulerService] ModelVersion=\""], [576, "\t\t\t\t\t\t+ version);"], [577, "\t\t\t\t// find scheduled Activities"], [578, ""], [579, "\t\t\t\tCollection<ItemCollection> colScheduledActivities = findScheduledActivities(version);"], [580, "\t\t\t\tlogger.info(\"[WorkflowSchedulerService] \""], [581, "\t\t\t\t\t\t+ colScheduledActivities.size()"], [582, "\t\t\t\t\t\t+ \" scheduled activityEntities found\");"], [583, "\t\t\t\t// process all workitems for coresponding activities"], [584, "\t\t\t\tfor (ItemCollection aactivityEntity : colScheduledActivities) {"], [585, "\t\t\t\t\tprocessWorkList(aactivityEntity);"], [586, "\t\t\t\t}"], [587, "\t\t\t}"], [588, ""], [589, "\t\t} catch (Exception e) {"], [590, "\t\t\te.printStackTrace();"], [591, "\t\t}"], [592, ""], [593, "\t\tlogger.info(\"[WorkflowSchedulerService] finished successfull\");"], [594, "\t\tlogger.info(\"[WorkflowSchedulerService] \" + iScheduledWorkItems"], [595, "\t\t\t\t+ \" scheduled workitems \");"], [596, "\t\tlogger.info(\"[WorkflowSchedulerService] \" + iProcessWorkItems"], [597, "\t\t\t\t+ \" workitems processed\");"], [598, ""], [599, "\t}"], [600, ""], [601, "\t/**"], [788, "\t * processID is idenfied by the activityEntity Object (numprocessid)"], [797, "\tvoid processWorkList(ItemCollection activityEntity) throws Exception {"], [804, "\t\t// if a query is defined in the activityEntity then use the EQL"], [805, "\t\t// statement"], [806, "\t\t// to query the items. Otherwise use standard method"], [807, "\t\t// getWorklistByProcessID()"], [808, "\t\tString sQuery = activityEntity.getItemValueString(\"txtscheduledview\");"], [809, ""], [810, "\t\t// get all workitems..."], [811, "\t\tCollection<ItemCollection> worklist = null;"], [812, "\t\tif (sQuery != null && !\"\".equals(sQuery)) {"], [813, "\t\t\tlogger.fine(\"[WorkflowSchedulerService] Query=\" + sQuery);"], [814, "\t\t\tworklist = entityService.findAllEntities(sQuery, 0, -1);"], [815, "\t\t} else {"], [816, "\t\t\tlogger.fine(\"[WorkflowSchedulerService] get WorkList for ProcessID:\""], [817, "\t\t\t\t\t+ iProcessID);"], [818, "\t\t\tworklist = workflowService.getWorkListByProcessID(iProcessID, 0,"], [819, "\t\t\t\t\t-1, null, 0);"], [820, "\t\t}"], [823, "\t\tiScheduledWorkItems += worklist.size();"], [825, "\t\t\t// verify processID"], [826, "\t\t\tif (iProcessID == workitem.getItemValueInteger(\"$processid\")) {"], [827, "\t\t\t\t// verify modelversion"], [828, "\t\t\t\tif (sModelVersion.equals(workitem"], [829, "\t\t\t\t\t\t.getItemValueString(\"$modelversion\"))) {"], [830, "\t\t\t\t\t// verify due date"], [831, "\t\t\t\t\tif (workItemInDue(workitem, activityEntity)) {"], [832, ""], [833, "\t\t\t\t\t\tint iActivityID = activityEntity"], [834, "\t\t\t\t\t\t\t\t.getItemValueInteger(\"numActivityID\");"], [835, "\t\t\t\t\t\tworkitem.replaceItemValue(\"$activityid\", iActivityID);"], [836, "\t\t\t\t\t\tprocessWorkitem(workitem);"], [837, "\t\t\t\t\t\tiProcessWorkItems++;"], [838, ""], [846, "\t * start new Transaction for each process step"], [849, "\t * @param aID"], [852, "\tvoid processWorkitem(ItemCollection aWorkitem) {"], [853, "\t\ttry {"], [854, "\t\t\tworkflowService.processWorkItem(aWorkitem);"], [855, "\t\t} catch (Exception e) {"], [856, ""], [857, "\t\t\te.printStackTrace();"], [858, "\t\t}"]]}, "num_lines_added": 126, "num_lines_removed": 104}