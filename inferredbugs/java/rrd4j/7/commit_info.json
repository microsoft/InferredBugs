{"hash": "fbaec96f6b1d2147b7400b3ff23e70e50b16c2a4", "message": "Some locking strategy in pool", "file_num_lines": 283, "diff_parsed": {"added": [[129, "    private boolean tryGetSlot() throws InterruptedException {"], [130, "        boolean incremented = false;"], [131, "        countLock.lockInterruptibly();"], [132, "        if(usage.get() < maxCapacity) {"], [133, "            usage.incrementAndGet();"], [134, "            incremented = true;"], [135, "        }"], [136, "        countLock.unlock();"], [137, "        return incremented;"], [138, "    }"], [139, ""], [157, "        }"], [236, "        try {"], [237, "            //Wait until the pool is not full and"], [239, "            while(ref.count == 0 && ! tryGetSlot()) {"], [241, "                countLock.lockInterruptibly();"], [242, "                full.await();"], [243, "                countLock.unlock();"], [244, "                ref = getEntry(path, true);"], [246, "        } catch (InterruptedException e) {"], [247, "            passNext(ACTION.DROP, ref);"], [248, "            throw new RuntimeException(\"request interrupted for \" + path, e);"], [249, "        } finally {"], [250, "            if(countLock.isHeldByCurrentThread()) {"], [251, "                countLock.unlock();"], [253, "        }"], [254, "        //Someone might have already open it, rechecks"], [255, "        if(ref.count == 0) {"], [256, "            try {"], [257, "                ref.rrdDb = new RrdDb(path);"], [258, "            } catch (IOException e) {"], [259, "                //Don't forget to release the slot reserved earlier"], [260, "                usage.decrementAndGet();"], [261, "                passNext(ACTION.DROP, ref);"], [262, "                throw e;"], [263, "            }"], [266, "        passNext(ACTION.SWAP, ref);"], [288, "            passNext(ACTION.DROP, ref);"], [302, "        RrdEntry ref = null;"], [304, "            ref = waitEmpty(path);"], [305, "            while( ! tryGetSlot()) {"], [309, "                countLock.unlock();"], [310, "                ref = waitEmpty(path);"], [314, "        } catch (InterruptedException e) {"], [315, "            if(ref != null) {"], [316, "                passNext(ACTION.DROP, ref);"], [317, "            }"], [318, "            throw e;"]], "deleted": [[146, "        }"], [147, ""], [226, "        if(ref.count == 0) {"], [227, "            //Wait until the pool is not full"], [229, "            while(usage.get() >= maxCapacity) {"], [231, "                try {"], [232, "                    countLock.lockInterruptibly();"], [233, "                    full.await();"], [234, "                    ref = getEntry(path, true);"], [235, "                    //Get an empty ref, can use it, reserve the slot"], [236, "                    if(ref.count == 0 && usage.get() < maxCapacity) {"], [237, "                        usage.incrementAndGet();"], [238, "                        break;"], [239, "                    }"], [240, "                } catch (InterruptedException e) {"], [241, "                    throw new RuntimeException(\"request interrupted for \" + path, e);"], [242, "                } finally {"], [243, "                    if(countLock.isHeldByCurrentThread()) {"], [244, "                        countLock.unlock();"], [245, "                    }"], [246, "                }"], [248, "            //Someone might have already open it, rechecks"], [249, "            if(ref.count == 0) {"], [250, "                try {"], [251, "                    ref.rrdDb = new RrdDb(path);"], [252, "                    passNext(ACTION.SWAP, ref);"], [253, "                } catch (IOException e) {"], [254, "                    //Don't forget to release the slot reserved earlier"], [255, "                    usage.decrementAndGet();"], [256, "                    passNext(ACTION.DROP, ref);"], [257, "                    throw e;"], [258, "                }"], [260, "        } else {"], [261, "            passNext(ACTION.SWAP, ref);"], [285, "            passNext(ACTION.SWAP, ref);"], [300, "            RrdEntry ref = waitEmpty(path);"], [301, "            while(usage.get() >= maxCapacity) {"], [305, "                ref = waitEmpty(path);"], [307, "            usage.incrementAndGet();"]]}, "num_lines_added": 48, "num_lines_removed": 39}