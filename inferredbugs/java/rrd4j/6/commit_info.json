{"hash": "2e379570cec9638fa794f2f169a04992e98b75fc", "message": "Some lock leak in the pool", "file_num_lines": 263, "diff_parsed": {"added": [[215, "            //Loop if count was 0 (need open) and acquire failed"], [216, "            while(ref.count == 0 && ! capacity.tryAcquire()) {"], [217, "                boolean acquired = false;"], [219, "                    //Don't hold the ref, wait until acquire succeeded"], [220, "                    passNext(ACTION.SWAP, ref);"], [222, "                    acquired = true;"], [223, "                    ref = getEntry(path, true);"], [224, "                    //oups, this was not the real acquire, release for the while test"], [225, "                    capacity.release();"], [227, "                    if(acquired) {"], [228, "                        capacity.release();"], [229, "                    }"], [231, "                }"], [232, "            }"], [233, "            //lock was successfully acquired with an empty ref"], [234, "            if(ref.count == 0) {"], [249, "    private RrdEntry waitEmpty(String path) throws IOException, InterruptedException {"], [253, "                ref = getEntry(path, true);"], [264, "            return ref;"], [269, "            throw e;"], [270, "        }"], [271, "    }"], [272, ""], [273, "    private RrdEntry requestEmpty(String path) throws InterruptedException, IOException {"], [274, "        RrdEntry ref = waitEmpty(path);"], [275, ""], [276, "        //No slot, release the lock and wait"], [277, "        boolean acquired = capacity.tryAcquire();"], [278, "        while(! acquired) {"], [279, "            try {"], [280, "                passNext(ACTION.SWAP, ref);"], [281, "                capacity.acquire();"], [282, "                acquired = true;"], [283, "                ref = waitEmpty(path);"], [284, "            } catch (InterruptedException e) {"], [285, "                if(acquired) {"], [286, "                    capacity.release();"], [287, "                }"], [288, "                throw e;"], [289, "            }"], [291, "        ref.count = 1;"], [292, "        return ref;"], [293, "    }"], [294, ""], [295, "    /**"], [296, "     * Requests a RrdDb reference for the given RRD file definition object.<p>"], [297, "     * <ul>"], [298, "     * <li>If the file with the path specified in the RrdDef object is already open,"], [299, "     * the method blocks until the file is closed."], [300, "     * <li>If the file is not already open and the number of already open RRD files is less than"], [301, "     * {@link #INITIAL_CAPACITY}, a new RRD file will be created and a its RrdDb reference will be returned."], [302, "     * If the file is not already open and the number of already open RRD files is equal to"], [303, "     * {@link #INITIAL_CAPACITY}, the method blocks until some RRD file is closed."], [304, "     * </ul>"], [305, "     *"], [306, "     * @param rrdDef Definition of the RRD file to be created"], [307, "     * @return Reference to the newly created RRD file"], [308, "     * @throws java.io.IOException Thrown in case of I/O error"], [309, "     */"], [310, "    public RrdDb requestRrdDb(RrdDef rrdDef) throws IOException {"], [311, "        RrdEntry ref = null;"], [313, "            ref = requestEmpty(rrdDef.getPath());"], [319, "            if(ref != null) {"], [320, "                passNext(ACTION.SWAP, ref);"], [321, "            }"], [345, "        RrdEntry ref = null;"], [347, "            ref = requestEmpty(path);"], [353, "            if(ref != null) {"], [354, "                passNext(ACTION.SWAP, ref);"], [355, "            }"], [357, ""]], "deleted": [[215, "            //Not opened"], [216, "            if(ref.count == 0) {"], [221, "                }"], [236, "    /**"], [237, "     * Requests a RrdDb reference for the given RRD file definition object.<p>"], [238, "     * <ul>"], [239, "     * <li>If the file with the path specified in the RrdDef object is already open,"], [240, "     * the method blocks until the file is closed."], [241, "     * <li>If the file is not already open and the number of already open RRD files is less than"], [242, "     * {@link #INITIAL_CAPACITY}, a new RRD file will be created and a its RrdDb reference will be returned."], [243, "     * If the file is not already open and the number of already open RRD files is equal to"], [244, "     * {@link #INITIAL_CAPACITY}, the method blocks until some RRD file is closed."], [245, "     * </ul>"], [246, "     *"], [247, "     * @param rrdDef Definition of the RRD file to be created"], [248, "     * @return Reference to the newly created RRD file"], [249, "     * @throws java.io.IOException Thrown in case of I/O error"], [250, "     */"], [251, "    public RrdDb requestRrdDb(RrdDef rrdDef) throws IOException {"], [255, "                ref = getEntry(rrdDef.getPath(), true);"], [270, "            throw new RuntimeException(\"request interrupted for new rrdDef \" + rrdDef.getPath(), e);"], [274, "            ref.count = 1;"], [275, "            capacity.acquire();"], [280, "            passNext(ACTION.SWAP, ref);"], [303, "        RrdEntry ref = null;"], [304, "        try {"], [305, "            do {"], [306, "                ref = getEntry(path, true);"], [307, "                if(ref.count != 0) {"], [308, "                    //Not empty, give it back, but wait for signal"], [309, "                    passNext(ACTION.SWAP, ref);"], [310, "                    ref.waitempty.await();"], [311, "                    // ref is not a real reference (not replaced by a placeholder"], [312, "                    // So must try a get entry before carry on"], [313, "                    ref = null; //might be checked by the catch"], [314, "                    continue;"], [315, "                }"], [316, "            } while(ref.count != 0);"], [317, "        } catch (InterruptedException e) {"], [318, "            if(ref != null) {"], [319, "                passNext(ACTION.SWAP, ref);"], [320, "            }"], [321, "            throw new RuntimeException(\"request interrupted for new rrd \" + path, e);"], [322, "        }"], [326, "            ref.count = 1;"], [327, "            capacity.acquire();"], [332, "            passNext(ACTION.SWAP, ref);"]]}, "num_lines_added": 71, "num_lines_removed": 47}