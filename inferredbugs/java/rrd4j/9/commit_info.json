{"hash": "643d8abc2d36f85a47d814bdde1d0b0082ecff5b", "message": "Still more simple DbPool", "file_num_lines": 249, "diff_parsed": {"added": [[114, "                try {"], [115, "                    countLock.lockInterruptibly();"], [116, "                    while(ref == null && usage.get() >= maxCapacity && cancreate) {"], [117, "                        full.await();"], [118, "                        ref = pool.get(canonicalPath);"], [119, "                    }"], [120, "                    if(ref == null && cancreate) {"], [121, "                        ref = pool.putIfAbsent(canonicalPath, new RrdEntry(true, canonicalPath));"], [122, "                        if(ref == null) {"], [123, "                            ref = new RrdEntry(false, canonicalPath);"], [124, "                            usage.incrementAndGet();"], [125, "                        }"], [126, "                    }"], [127, "                } finally {"], [128, "                    if(countLock.isHeldByCurrentThread()) {"], [129, "                        countLock.unlock();"], [130, "                    }"], [131, "                }"], [155, "            if(usage.decrementAndGet() < maxCapacity) {"], [156, "                try {"], [157, "                    countLock.lockInterruptibly();"], [158, "                    full.signalAll();"], [159, "                    countLock.unlock();"], [160, "                } catch (InterruptedException e1) {"], [161, "                }"], [162, "            }"], [204, "            passNext(ACTION.DROP, ref);"], [284, "        RrdEntry ref = waitEmpty(path);"], [285, "        ref.count = 1;"], [286, "        return ref;"]], "deleted": [[114, "                ref = pool.putIfAbsent(canonicalPath, new RrdEntry(true, canonicalPath));"], [115, "                if(ref == null) {"], [116, "                    ref = cancreate ? new RrdEntry(false, canonicalPath) : null;"], [117, "                }"], [129, "    private boolean tryGetSlot() throws InterruptedException {"], [130, "        boolean incremented = false;"], [131, "        countLock.lockInterruptibly();"], [132, "        if(usage.get() < maxCapacity) {"], [133, "            usage.incrementAndGet();"], [134, "            incremented = true;"], [135, "        }"], [136, "        countLock.unlock();"], [137, "        return incremented;"], [138, "    }"], [139, ""], [193, "            usage.decrementAndGet();"], [194, "            try {"], [195, "                countLock.lockInterruptibly();"], [196, "                if(usage.get() < maxCapacity) {"], [197, "                    full.signal();"], [198, "                }"], [199, "                countLock.unlock();"], [200, "            } catch (InterruptedException e) {"], [201, "                throw new RuntimeException(\"release interrupted for \" + rrdDb, e);"], [202, "            } finally {"], [203, "                passNext(ACTION.DROP, ref);"], [204, "            }"], [236, "        try {"], [237, "            //Wait until the pool is not full and"], [238, "            //Don't lock on anything"], [239, "            while(ref.count == 0 && ! tryGetSlot()) {"], [240, "                passNext(ACTION.SWAP, ref);"], [241, "                countLock.lockInterruptibly();"], [242, "                full.await();"], [243, "                countLock.unlock();"], [244, "                ref = getEntry(path, true);"], [245, "            }"], [246, "        } catch (InterruptedException e) {"], [247, "            passNext(ACTION.DROP, ref);"], [248, "            throw new RuntimeException(\"request interrupted for \" + path, e);"], [249, "        } finally {"], [250, "            if(countLock.isHeldByCurrentThread()) {"], [251, "                countLock.unlock();"], [252, "            }"], [253, "        }"], [302, "        RrdEntry ref = null;"], [303, "        try {"], [304, "            ref = waitEmpty(path);"], [305, "            while( ! tryGetSlot()) {"], [306, "                passNext(ACTION.SWAP, ref);"], [307, "                countLock.lockInterruptibly();"], [308, "                full.await();"], [309, "                countLock.unlock();"], [310, "                ref = waitEmpty(path);"], [311, "            }"], [312, "            ref.count = 1;"], [313, "            return ref;"], [314, "        } catch (InterruptedException e) {"], [315, "            if(ref != null) {"], [316, "                passNext(ACTION.DROP, ref);"], [317, "            }"], [318, "            throw e;"], [319, "        } finally {"], [320, "            if(countLock.isHeldByCurrentThread()) {"], [321, "                countLock.unlock();"], [322, "            }"], [323, "        }"]]}, "num_lines_added": 30, "num_lines_removed": 67}