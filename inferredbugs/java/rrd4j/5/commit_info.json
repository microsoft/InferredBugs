{"hash": "20cde4aa308177b88f0fbe064bc43ca7bc368e66", "message": "a pool with conditionnal variable", "file_num_lines": 258, "diff_parsed": {"added": [[11, "import java.util.concurrent.locks.Condition;"], [12, "import java.util.concurrent.locks.ReentrantLock;"], [36, "        final ReentrantLock inuse = new ReentrantLock();"], [37, "        final Condition empty = inuse.newCondition();"], [55, "    private final ReentrantReadWriteLock poolLock = new ReentrantReadWriteLock();"], [59, "     *"], [60, "     * Not private, used by junit tests"], [62, "    RrdDbPool() {"], [108, ""], [113, "            ref.inuse.lockInterruptibly();"], [125, "            ref.inuse.lockInterruptibly();"], [130, ""], [131, "        try {"], [132, "            while(ref.count.intValue() != 0) {"], [133, "                ref.empty.await();"], [134, "            }"], [135, "            return ref;"], [136, "        } catch (InterruptedException e) {"], [137, "            ref.inuse.unlock();"], [138, "            throw e;"], [139, "        }"], [164, "            ref.inuse.unlock();"], [172, "            ref.empty.signal();"], [173, "            ref.inuse.unlock();"], [176, "        //Ok, the last referenced was removed"], [177, "        //try to avoid the Map to grow and remove the reference"], [183, "                // Already removed"], [184, "                if(ref == null) {"], [185, "                    return;"], [187, "                ref.inuse.lockInterruptibly();"], [188, "                //No one started to wait on it, still no use, remove from the map"], [189, "                if(! ref.inuse.hasWaiters(ref.empty) && ref.count.get() == 0) {"], [190, "                    pool.remove(canonicalPath);"], [191, "                }"], [192, "                ref.inuse.unlock();"], [195, "            } finally {"], [196, "                if (poolLock.isWriteLocked()) {"], [197, "                    poolLock.writeLock().unlock();"], [198, "                }"], [201, "        }"], [247, "            ref.inuse.unlock();;"], [275, "            capacity.acquire();"], [284, "        } catch (InterruptedException e) {"], [285, "            throw new RuntimeException(\"request interrupted for new rrdDef \" + rrdDef.getPath(), e);"], [287, "            ref.inuse.unlock();;"], [318, "            capacity.acquire();"], [324, "        } catch (InterruptedException e) {"], [325, "            throw new RuntimeException(\"request interrupted for new rrd \" + path, e);"], [327, "            ref.inuse.unlock();;"], [338, "        try {"], [339, "            poolLock.writeLock().lockInterruptibly();"], [340, "        } catch (InterruptedException e) {"], [341, "            throw new RuntimeException(\"interrupted while changing capacity\", e);"], [343, "        try {"], [344, "            int available = capacity.drainPermits();"], [345, "            if (available != maxCapacity) {"], [346, "                capacity.release(available);"], [347, "                throw new RuntimeException(\"Can only be done on a empty pool\");"], [348, "            }"], [349, "            else {"], [350, "                capacity = new Semaphore(newCapacity, true) {"], [351, "                    @Override"], [352, "                    public String toString() {"], [353, "                        return \"Capacity semaphore: \" + super.toString();"], [354, "                    }"], [355, "                };"], [356, "            }"], [357, "            maxCapacity = newCapacity;"], [358, "        } finally {"], [359, "            if (poolLock.isWriteLocked()) {"], [360, "                poolLock.writeLock().unlock();"], [361, "            }"]], "deleted": [[4, "import java.util.HashMap;"], [12, "import java.util.concurrent.locks.ReadWriteLock;"], [36, "        //A flag that indicate the rrdDb is in use (count is non zero)"], [37, "        final Semaphore ulock = new Semaphore(1, true);"], [38, "        //A flag that indicate that update operation are active for this rrdDb"], [39, "        final Semaphore rlock = new Semaphore(1, true);"], [57, "    private final ReadWriteLock poolLock = new ReentrantReadWriteLock();"], [62, "    private RrdDbPool() {"], [111, "        boolean acquired = ref.ulock.tryAcquire();"], [113, "            ref.rlock.acquire();"], [115, "        } catch (InterruptedException e) {"], [116, "            if(acquired) {"], [117, "                ref.ulock.release();"], [118, "            }"], [119, "            throw e;"], [129, "        boolean acquired = false;"], [131, "            ref.ulock.acquire();"], [132, "            acquired = true;"], [133, "            ref.rlock.acquire();"], [134, "            return ref;"], [135, "        } catch (InterruptedException e) {"], [136, "            if(acquired) {"], [137, "                ref.ulock.release();"], [138, "            }"], [139, "            throw e;"], [175, "            ref.rlock.release();"], [176, "            ref.ulock.release();"], [184, "                //It if failed, some one is working on it, so that's up to him to manage the cleaning"], [185, "                if(ref != null && ref.rlock.tryAcquire()) {"], [186, "                    if(ref.count.get() == 0)"], [187, "                        pool.remove(canonicalPath);"], [188, "                    ref.rlock.release();"], [190, "                poolLock.writeLock().unlock();"], [194, "        }"], [241, "            ref.rlock.release();"], [278, "            ref.rlock.release();"], [315, "            ref.rlock.release();"], [326, "        int available = capacity.drainPermits();"], [327, "        if (available != maxCapacity) {"], [328, "            capacity.release(available);"], [329, "            throw new RuntimeException(\"Can only be done on a empty pool\");"], [331, "        else {"], [332, "            capacity = new Semaphore(newCapacity, true) {"], [333, "                @Override"], [334, "                public String toString() {"], [335, "                    return \"Capacity semaphore: \" + super.toString();"], [336, "                }"], [337, "            };"], [339, "        maxCapacity = newCapacity;"]]}, "num_lines_added": 72, "num_lines_removed": 49}