{"hash": "dc14c46467f1988468191cd91dddeb448809c56b", "message": "Create list of files in archive\nCache ArchiveStreamFactory\nTidy resultdir even if test fails\nAdd method to create empty archive file\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@759792 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 176, "diff_parsed": {"added": [[24, "import java.io.FileNotFoundException;"], [29, "import java.util.ArrayList;"], [47, "    private File archive; // used to delete the archive in tearDown"], [48, "    protected List archiveList; // Lists the content of the archive as originally created"], [49, ""], [50, "    private ArchiveStreamFactory factory = new ArchiveStreamFactory();"], [100, "     * Creates an archive of textbased files in several directories. The"], [110, "     * <li>bla/test5.xml</li>"], [111, "     * <li>bla/blubber/test6.xml</li>"], [128, "            archiveList = new ArrayList();"], [131, "            out = factory.createArchiveOutputStream(archivename, stream);"], [140, "            addArchiveEntry(out, \"testdata/test1.xml\", file1);"], [141, "            addArchiveEntry(out, \"testdata/test2.xml\", file2);"], [142, "            addArchiveEntry(out, \"test/test3.xml\", file3);"], [143, "            addArchiveEntry(out, \"bla/test4.xml\", file4);"], [144, "            addArchiveEntry(out, \"bla/test5.xml\", file4);"], [145, "            addArchiveEntry(out, \"bla/blubber/test6.xml\", file4);"], [146, "            addArchiveEntry(out, \"test.txt\", file5);"], [147, "            addArchiveEntry(out, \"something/bla\", file6);"], [148, "            addArchiveEntry(out, \"test with spaces.txt\", file6);"], [150, "            return archive;"], [151, "        } finally {"], [152, "            if (out != null) {"], [153, "                out.close();"], [154, "            } else if (stream != null) {"], [155, "                stream.close();"], [156, "            }"], [157, "        }"], [158, "    }"], [160, "    /**"], [161, "     * Add an entry to the archive, and keep track of the names in archiveList."], [162, "     *"], [163, "     * @param out"], [164, "     * @param file1"], [165, "     * @throws IOException"], [166, "     * @throws FileNotFoundException"], [167, "     */"], [168, "    private void addArchiveEntry(ArchiveOutputStream out, String filename, final File infile)"], [169, "            throws IOException, FileNotFoundException {"], [170, "        ZipArchiveEntry entry = new ZipArchiveEntry(filename);"], [171, "        entry.setSize(infile.length());"], [172, "        out.putArchiveEntry(entry);"], [173, "        IOUtils.copy(new FileInputStream(infile), out);"], [174, "        out.closeArchiveEntry();"], [175, "        archiveList.add(filename);"], [176, "    }"], [178, "    /**"], [179, "     * Create an empty archive."], [180, "     * @param archivename"], [181, "     * @return the archive File"], [182, "     * @throws Exception"], [183, "     */"], [184, "    protected File createEmptyArchive(String archivename) throws Exception {"], [185, "        ArchiveOutputStream out = null;"], [186, "        OutputStream stream = null;"], [187, "        try {"], [188, "            archive = File.createTempFile(\"empty\", \".\" + archivename);"], [189, "            stream = new FileOutputStream(archive);"], [190, "            out = factory.createArchiveOutputStream(archivename, stream);"], [198, "        return archive;"], [215, "            final ArchiveInputStream in = factory.createArchiveInputStream(buf);"], [228, "        try {"], [229, "            ArchiveEntry entry = null;"], [230, "            while ((entry = in.getNextEntry()) != null) {"], [231, "                File outfile = new File(result.getCanonicalPath() + \"/result/\""], [232, "                        + entry.getName());"], [233, "                outfile.getParentFile().mkdirs();"], [234, "                OutputStream out = new FileOutputStream(outfile);"], [235, "                long copied=0;"], [236, "                try {"], [237, "                    copied=IOUtils.copy(in, out);"], [238, "                } finally {"], [239, "                    out.close();"], [240, "                }"], [242, "                if (entry.getSize() != -1) {// some test cases don't set the size"], [243, "                    assertEquals(entry.getSize(), copied);"], [244, "                }"], [246, "                if (!outfile.exists()) {"], [247, "                    fail(\"extraction failed: \" + entry.getName());"], [248, "                }"], [249, "                if (!expected.remove(entry.getName())) {"], [250, "                    fail(\"unexpected entry: \" + entry.getName());"], [251, "                }"], [253, "            in.close();"], [254, "            if (expected.size() > 0) {"], [255, "                for (Iterator iterator = expected.iterator(); iterator.hasNext();) {"], [256, "                    String name = (String) iterator.next();"], [257, "                    fail(\"Expected entry: \" + name);"], [258, "                }"], [260, "            assertEquals(0, expected.size());"], [261, "        } finally {"], [262, "            rmdir(result);"]], "deleted": [[45, "    private File archive;"], [95, "     * Creates an archive of 5 textbased files in several directories. The"], [123, "            out = new ArchiveStreamFactory().createArchiveOutputStream("], [124, "                    archivename, stream);"], [133, "            ZipArchiveEntry entry = new ZipArchiveEntry(\"testdata/test1.xml\");"], [134, "            entry.setSize(file1.length());"], [135, "            out.putArchiveEntry(entry);"], [136, "            IOUtils.copy(new FileInputStream(file1), out);"], [137, "            out.closeArchiveEntry();"], [139, "            entry = new ZipArchiveEntry(\"testdata/test2.xml\");"], [140, "            entry.setSize(file2.length());"], [141, "            out.putArchiveEntry(entry);"], [142, "            IOUtils.copy(new FileInputStream(file2), out);"], [143, "            out.closeArchiveEntry();"], [144, ""], [145, "            entry = new ZipArchiveEntry(\"test/test3.xml\");"], [146, "            entry.setSize(file3.length());"], [147, "            out.putArchiveEntry(entry);"], [148, "            IOUtils.copy(new FileInputStream(file3), out);"], [149, "            out.closeArchiveEntry();"], [150, ""], [151, "            entry = new ZipArchiveEntry(\"bla/test4.xml\");"], [152, "            entry.setSize(file4.length());"], [153, "            out.putArchiveEntry(entry);"], [154, "            IOUtils.copy(new FileInputStream(file4), out);"], [155, "            out.closeArchiveEntry();"], [156, ""], [157, "            entry = new ZipArchiveEntry(\"bla/test5.xml\");"], [158, "            entry.setSize(file4.length());"], [159, "            out.putArchiveEntry(entry);"], [160, "            IOUtils.copy(new FileInputStream(file4), out);"], [161, "            out.closeArchiveEntry();"], [162, ""], [163, "            entry = new ZipArchiveEntry(\"bla/blubber/test6.xml\");"], [164, "            entry.setSize(file4.length());"], [165, "            out.putArchiveEntry(entry);"], [166, "            IOUtils.copy(new FileInputStream(file4), out);"], [167, "            out.closeArchiveEntry();"], [168, ""], [169, "            entry = new ZipArchiveEntry(\"test.txt\");"], [170, "            entry.setSize(file5.length());"], [171, "            out.putArchiveEntry(entry);"], [172, "            IOUtils.copy(new FileInputStream(file5), out);"], [173, "            out.closeArchiveEntry();"], [174, ""], [175, "            entry = new ZipArchiveEntry(\"something/bla\");"], [176, "            entry.setSize(file6.length());"], [177, "            out.putArchiveEntry(entry);"], [178, "            IOUtils.copy(new FileInputStream(file6), out);"], [179, "            out.closeArchiveEntry();"], [181, "            entry = new ZipArchiveEntry(\"test with spaces.txt\");"], [182, "            entry.setSize(file6.length());"], [183, "            out.putArchiveEntry(entry);"], [184, "            IOUtils.copy(new FileInputStream(file6), out);"], [185, "            out.closeArchiveEntry();"], [187, "            return archive;"], [211, "            final ArchiveInputStream in = new ArchiveStreamFactory()"], [212, "                .createArchiveInputStream(buf);"], [225, "        ArchiveEntry entry = null;"], [226, "        while ((entry = in.getNextEntry()) != null) {"], [227, "            File outfile = new File(result.getCanonicalPath() + \"/result/\""], [228, "                    + entry.getName());"], [229, "            outfile.getParentFile().mkdirs();"], [230, "            OutputStream out = new FileOutputStream(outfile);"], [231, "            long copied=0;"], [232, "            try {"], [233, "                copied=IOUtils.copy(in, out);"], [234, "            } finally {"], [235, "                out.close();"], [236, "            }"], [238, "            if (entry.getSize() != -1) {// some test cases don't set the size"], [239, "                assertEquals(entry.getSize(), copied);"], [240, "            }"], [242, "            if (!outfile.exists()) {"], [243, "                fail(\"extraction failed: \" + entry.getName());"], [244, "            }"], [245, "            if (!expected.remove(entry.getName())) {"], [246, "                fail(\"unexpected entry: \" + entry.getName());"], [248, "        }"], [249, "        in.close();"], [250, "        if (expected.size() > 0) {"], [251, "            for (Iterator iterator = expected.iterator(); iterator.hasNext();) {"], [252, "                String name = (String) iterator.next();"], [253, "                fail(\"Expected entry: \" + name);"], [256, "        assertEquals(0, expected.size());"], [257, "        rmdir(result);"]]}, "num_lines_added": 92, "num_lines_removed": 86}