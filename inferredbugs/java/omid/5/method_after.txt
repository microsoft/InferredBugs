   @Test
   public void runTestMultiTableConflict() throws Exception {
      TransactionManager tm = new TransactionManager(hbaseConf);
      TTable tt = new TTable(hbaseConf, TEST_TABLE);
      String table2 = TEST_TABLE + 2;

      HBaseAdmin admin = new HBaseAdmin(hbaseConf);

      if (!admin.tableExists(table2)) {
         HTableDescriptor desc = new HTableDescriptor(table2);
         HColumnDescriptor datafam = new HColumnDescriptor(TEST_FAMILY);
         datafam.setMaxVersions(Integer.MAX_VALUE);
         desc.addFamily(datafam);

         admin.createTable(desc);
      }

      if (admin.isTableDisabled(table2)) {
         admin.enableTable(table2);
      }

      TTable tt2 = new TTable(hbaseConf, table2);

      TransactionState t1 = tm.beginTransaction();
      LOG.info("Transaction created " + t1);

      TransactionState t2 = tm.beginTransaction();
      LOG.info("Transaction created" + t2);

      byte[] row = Bytes.toBytes("test-simple");
      byte[] row2 = Bytes.toBytes("test-simple2");
      byte[] fam = Bytes.toBytes(TEST_FAMILY);
      byte[] col = Bytes.toBytes("testdata");
      byte[] data1 = Bytes.toBytes("testWrite-1");
      byte[] data2 = Bytes.toBytes("testWrite-2");

      Put p = new Put(row);
      p.add(fam, col, data1);
      tt.put(t1, p);
      tt2.put(t1, p);

      Put p2 = new Put(row);
      p2.add(fam, col, data2);
      tt.put(t2, p2);
      p2 = new Put(row2);
      p2.add(fam, col, data2);
      tt2.put(t2, p2);

      tm.tryCommit(t2);

      boolean aborted = false;
      try {
         tm.tryCommit(t1);
         assertTrue("Transaction commited successfully", false);
      } catch (CommitUnsuccessfulException e) {
         aborted = true;
      }
      assertTrue("Transaction didn't raise exception", aborted);

      ResultScanner rs = tt2.getScanner(Bytes.toBytes(TEST_FAMILY));
      int count = 0;
      Result r;
      while ((r = rs.next()) != null) {
         count += r.size();
      }
      assertEquals(1, count);
   }