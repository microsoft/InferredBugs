{"hash": "20fc4044147b4876f9aabc42312634e155eed712", "message": "Deleted TSOTestBase\n\nChange-Id: I5b102307a769fc8b65bef6d7b8b608a85d76f6ce", "file_num_lines": 295, "diff_parsed": {"added": [[16, "public class TestBasicTransaction extends OmidTestBase {"], [52, "                   \"Unexpected value for row 1 in col 1: \" + Bytes.toString(val1));"], [59, "                   \"Unexpected value for row 2 in col 1: \" + Bytes.toString(val2));"], [68, "        throws Exception {"], [112, "                   \"Unexpected value for row 1 in col 1: \" + Bytes.toString(val1));"], [121, "                   \"Unexpected value for row 2 in col 1: \" + Bytes.toString(val2));"], [164, "                   \"Unexpected value for read: \" + Bytes.toString(r.getValue(fam, col)));"], [168, "                   \"Unexpected value for SI read \" + tread + \": \" + Bytes.toString(r.getValue(fam, col)));"], [202, "                   \"Unexpected value for read: \" + Bytes.toString(r.getValue(fam, col)));"], [206, "                   \"Unexpected value for SI read \" + tread + \": \" + Bytes.toString(r.getValue(fam, col)));"], [239, "                   \"Unexpected value for SI read \" + tread + \": \" + Bytes.toString(r.getValue(fam, col)));"], [244, "                   \"Unexpected value for read: \" + Bytes.toString(r.getValue(fam, col)));"], [248, "    @Test(expectedExceptions = IllegalArgumentException.class, timeOut = 30_000)"], [249, "    public void testSameCommitRaisesException() throws Exception {"], [299, "                       \"Unexpected value for SI scan \" + tscan + \": \" + Bytes.toString(r.getValue(fam, col)));"], [380, "                       \"Unexpected value for SI scan \" + tscan + \": \" + Bytes.toString(r.getValue(fam, col)));"]], "deleted": [[3, "import com.google.inject.Guice;"], [4, "import com.google.inject.Injector;"], [5, "import com.google.inject.Module;"], [6, "import com.yahoo.omid.TestUtils;"], [7, "import com.yahoo.omid.committable.hbase.CommitTableConstants;"], [8, "import com.yahoo.omid.committable.hbase.CreateTable;"], [9, "import com.yahoo.omid.tso.TSOMockModule;"], [10, "import com.yahoo.omid.tso.TSOServer;"], [11, "import com.yahoo.omid.tso.TSOServerCommandLineConfig;"], [12, "import com.yahoo.omid.tsoclient.TSOClient;"], [13, "import org.apache.commons.configuration.BaseConfiguration;"], [14, "import org.apache.hadoop.conf.Configuration;"], [15, "import org.apache.hadoop.hbase.HBaseConfiguration;"], [16, "import org.apache.hadoop.hbase.HBaseTestingUtility;"], [17, "import org.apache.hadoop.hbase.HColumnDescriptor;"], [18, "import org.apache.hadoop.hbase.HTableDescriptor;"], [19, "import org.apache.hadoop.hbase.MiniHBaseCluster;"], [20, "import org.apache.hadoop.hbase.TableName;"], [22, "import org.apache.hadoop.hbase.client.HBaseAdmin;"], [30, "import org.testng.annotations.AfterClass;"], [31, "import org.testng.annotations.AfterMethod;"], [32, "import org.testng.annotations.BeforeClass;"], [33, "import org.testng.annotations.BeforeMethod;"], [39, "public class TestBasicTransaction {"], [43, "    public static final String TSO_SERVER_HOST = \"localhost\";"], [44, "    private static final int TSO_SERVER_PORT = 1234;"], [45, ""], [46, "    private static final String TEST_TABLE = \"test\";"], [47, "    private static final String TEST_FAMILY = \"data\";"], [48, ""], [49, "    private Configuration hbaseConf;"], [50, "    private HBaseTestingUtility hbaeTestUtil;"], [51, "    private MiniHBaseCluster hbaseCluster;"], [52, ""], [53, "    private TSOServer tsoServer;"], [54, ""], [55, "    @BeforeClass"], [56, "    public void setUpClass() throws Exception {"], [57, ""], [58, "        // ------------------------------------------------------------------------------------------------------------"], [59, "        // HBase setup"], [60, "        // ------------------------------------------------------------------------------------------------------------"], [61, "        hbaseConf = HBaseConfiguration.create();"], [62, "        LOG.info(\"Creating HBase minicluster\");"], [63, "        hbaeTestUtil = new HBaseTestingUtility(hbaseConf);"], [64, "        hbaseCluster = hbaeTestUtil.startMiniCluster(1);"], [65, ""], [66, "        // ------------------------------------------------------------------------------------------------------------"], [67, "        // TSO setup"], [68, "        // ------------------------------------------------------------------------------------------------------------"], [69, "        Module tsoMockModule = new TSOMockModule(TSOServerCommandLineConfig.configFactory(TSO_SERVER_PORT, 1000));"], [70, "        Injector injector = Guice.createInjector(tsoMockModule);"], [71, "        LOG.info(\"Starting TSO\");"], [72, "        tsoServer = injector.getInstance(TSOServer.class);"], [73, "        tsoServer.startAndWait();"], [74, "        TestUtils.waitForSocketListening(TSO_SERVER_HOST, TSO_SERVER_PORT, 1000);"], [75, "        LOG.info(\"Finished loading TSO\");"], [76, ""], [77, "    }"], [78, ""], [79, "    @AfterClass"], [80, "    public void tearDownClass() throws Exception {"], [81, ""], [82, "        tsoServer.stopAndWait();"], [83, "        tsoServer = null;"], [84, "        TestUtils.waitForSocketNotListening(TSO_SERVER_HOST, TSO_SERVER_PORT, 1000);"], [85, ""], [86, "        if (hbaseCluster != null) {"], [87, "            hbaeTestUtil.shutdownMiniCluster();"], [88, "        }"], [89, ""], [90, "    }"], [91, ""], [92, "    @BeforeMethod"], [93, "    public void setUp() throws Exception {"], [94, ""], [95, "        HBaseAdmin admin = hbaeTestUtil.getHBaseAdmin();"], [96, ""], [97, "        // ------------------------------------------------------------------------------------------------------------"], [98, "        // Infrastructure table creation"], [99, "        // ------------------------------------------------------------------------------------------------------------"], [100, "        CreateTable.createTable(hbaseConf, CommitTableConstants.COMMIT_TABLE_DEFAULT_NAME, 1);"], [101, ""], [102, "        // ------------------------------------------------------------------------------------------------------------"], [103, "        // Test table creation"], [104, "        // ------------------------------------------------------------------------------------------------------------"], [105, "        if (!admin.tableExists(TEST_TABLE)) {"], [106, "            HTableDescriptor desc = new HTableDescriptor(TableName.valueOf(TEST_TABLE));"], [107, "            HColumnDescriptor datafam = new HColumnDescriptor(TEST_FAMILY);"], [108, "            datafam.setMaxVersions(Integer.MAX_VALUE);"], [109, "            desc.addFamily(datafam);"], [110, "            admin.createTable(desc);"], [111, "        }"], [112, ""], [113, "        if (admin.isTableDisabled(TEST_TABLE)) {"], [114, "            admin.enableTable(TEST_TABLE);"], [115, "        }"], [116, "        HTableDescriptor[] tables = admin.listTables();"], [117, "        for (HTableDescriptor t : tables) {"], [118, "            LOG.info(t.getNameAsString());"], [119, "        }"], [120, ""], [121, "    }"], [122, ""], [123, "    @AfterMethod"], [124, "    public void tearDown() throws Exception {"], [125, ""], [126, "        HBaseAdmin admin = hbaeTestUtil.getHBaseAdmin();"], [127, "        admin.disableTable(TEST_TABLE);"], [128, "        admin.deleteTable(TEST_TABLE);"], [129, "        admin.disableTable(CommitTableConstants.COMMIT_TABLE_DEFAULT_NAME);"], [130, "        admin.deleteTable(CommitTableConstants.COMMIT_TABLE_DEFAULT_NAME);"], [131, ""], [132, "    }"], [165, "                \"Unexpected value for row 1 in col 1: \" + Bytes.toString(val1));"], [172, "                \"Unexpected value for row 2 in col 1: \" + Bytes.toString(val2));"], [181, "            throws Exception {"], [225, "                \"Unexpected value for row 1 in col 1: \" + Bytes.toString(val1));"], [234, "                \"Unexpected value for row 2 in col 1: \" + Bytes.toString(val2));"], [277, "                \"Unexpected value for read: \" + Bytes.toString(r.getValue(fam, col)));"], [281, "                \"Unexpected value for SI read \" + tread + \": \" + Bytes.toString(r.getValue(fam, col)));"], [315, "                \"Unexpected value for read: \" + Bytes.toString(r.getValue(fam, col)));"], [319, "                \"Unexpected value for SI read \" + tread + \": \" + Bytes.toString(r.getValue(fam, col)));"], [352, "                \"Unexpected value for SI read \" + tread + \": \" + Bytes.toString(r.getValue(fam, col)));"], [357, "                \"Unexpected value for read: \" + Bytes.toString(r.getValue(fam, col)));"], [361, "    @Test(expectedExceptions=IllegalArgumentException.class, timeOut = 30_000)"], [362, "    public void testSameCommitRaisesException() throws Exception  {"], [412, "                    \"Unexpected value for SI scan \" + tscan + \": \" + Bytes.toString(r.getValue(fam, col)));"], [493, "                    \"Unexpected value for SI scan \" + tscan + \": \" + Bytes.toString(r.getValue(fam, col)));"], [499, "    // ----------------------------------------------------------------------------------------------------------------"], [500, "    // Helper methods"], [501, "    // ----------------------------------------------------------------------------------------------------------------"], [502, ""], [503, "    private TransactionManager newTransactionManager() throws OmidInstantiationException {"], [504, ""], [505, "        org.apache.commons.configuration.Configuration clientConf = new BaseConfiguration();"], [506, "        clientConf.setProperty(TSOClient.TSO_HOST_CONFKEY, TSO_SERVER_HOST);"], [507, "        clientConf.setProperty(TSOClient.TSO_PORT_CONFKEY, TSO_SERVER_PORT);"], [508, "        clientConf.setProperty(TSOClient.ZK_CONNECTION_TIMEOUT_IN_SECS_CONFKEY, 0);"], [509, "        TSOClient client = TSOClient.newBuilder().withConfiguration(clientConf).build();"], [510, ""], [511, "        return  HBaseTransactionManager.newBuilder().withTSOClient(client).withConfiguration(hbaseConf).build();"], [512, "    }"]]}, "num_lines_added": 16, "num_lines_removed": 143}