 public void execute() {
		if (help) {
			command.usage("init");
		} else {
			try {
				URL searchURL = new URL(MVN_SEARCH_URL);
				InputStream is = null;
				Map<String, String> pluginsList = new LinkedHashMap<String, String>();
				Map<String, String> pluginsURLs = new LinkedHashMap<String, String>();
				try {
					is = searchURL.openStream();

					String content = readInputStreamAsString(is);
					DefaultJSONParser parser = new DefaultJSONParser(content);
					JSONObject object = parser.parseObject();
					parser.close();

					JSONArray artifactList = (object.getJSONObject("response")).getJSONArray("docs");

					for (int i = 0; i < artifactList.size(); i++) {
						JSONObject artifact = artifactList.getJSONObject(i);
						String artifactId = artifact.getString("a");
						if (artifactId.startsWith("walkmod-") && artifactId.endsWith("-plugin")) {
							String groupId = artifact.getString("g");
							String latestVersion = artifact.getString("latestVersion");
							String pom = artifactId + "-" + latestVersion + ".pom";
							String directory = groupId.replaceAll("\\.", "/");

							URL artifactDetailsURL = new URL(ARTIFACT_DETAILS_URL + directory + "/" + artifactId + "/"
									+ latestVersion + "/" + pom);

							InputStream projectIs = artifactDetailsURL.openStream();

							try {
								DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
								DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
								Document doc = dBuilder.parse(projectIs);

								NodeList nList = doc.getElementsByTagName("description");
								String description = "unavailable description";
								if (nList.getLength() == 1) {
									description = nList.item(0).getTextContent();
								}
								String id = "";
								if (!groupId.equals("org.walkmod")) {
									id = groupId + ":";
								}
								id += artifactId.substring("walkmod-".length(),
										artifactId.length() - "-plugin".length());

								if (Character.isLowerCase(description.charAt(0))) {
									description = Character.toUpperCase(description.charAt(0))
											+ description.substring(1, description.length());
								}
								if (!description.endsWith(".")) {
									description = description + ".";
								}
								pluginsList.put(id, description);
								nList = doc.getChildNodes().item(0).getChildNodes();
								int max = nList.getLength();
								String url = "unavailable url";

								for (int j = 0; j < max; j++) {
									String name = nList.item(j).getNodeName();
									if (name.equals("url")) {
										url = nList.item(j).getTextContent();
										j = max;
									}
								}

								pluginsURLs.put(id, url);

							} finally {
								projectIs.close();
							}
						}
					}
				} finally {
					is.close();
				}
				Set<String> keys = pluginsList.keySet();
				List<String> sortedKeys = new LinkedList<String>(keys);
				Collections.sort(sortedKeys);

				V2_AsciiTable at = new V2_AsciiTable();
				at.addRule();
				at.addRow("PLUGIN NAME (ID)", "URL", "DESCRIPTION");
				at.addStrongRule();
				for (String key : sortedKeys) {
					at.addRow(key, pluginsURLs.get(key), pluginsList.get(key));
				}
				at.addRule();
				V2_AsciiTableRenderer rend = new V2_AsciiTableRenderer();
				rend.setTheme(V2_E_TableThemes.UTF_LIGHT.get());
				rend.setWidth(new WidthLongestLine());
				RenderedTable rt = rend.render(at);
				System.out.println(rt);

			} catch (Exception e) {
				throw new WalkModException("Invalid plugins URL", e);
			}
		}
	}