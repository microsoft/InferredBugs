{"hash": "9e89836739f82ffc9fb9a9d764201b9e7345d4d5", "message": "#41 UT\u5206\u5f00\u6267\u884c", "file_num_lines": 82, "diff_parsed": {"added": [[27, "import java.util.ArrayList;"], [28, "import java.util.Collection;"], [32, "import org.junit.runner.RunWith;"], [33, "import org.junit.runners.Parameterized;"], [34, ""], [43, "@RunWith(Parameterized.class)"], [45, "\tstatic boolean profile = \"true\".equals(System.getProperty(\"profile\"));"], [47, "\t@Parameterized.Parameters"], [48, "\tpublic static Collection<Object[]> prepareData() throws Exception {"], [49, "\t\tif (!profile)"], [52, ""], [60, "\t\tFile directory = new File(ExceptionTest.class.getClassLoader().getResource(dir + \"templates/\").getFile());"], [62, ""], [63, "\t\tfinal List<Object[]> retTestData = new ArrayList<Object[]>();"], [67, "\t\t\tretTestData.add(new Object[]{file.getName()});"], [68, "\t\t}"], [69, ""], [70, "\t\treturn retTestData;"], [71, "\t}"], [72, ""], [73, "\tpublic ExceptionTest(String templateName) {"], [74, "\t\tthis.templateName = templateName;"], [75, "\t}"], [76, ""], [77, "\tprivate String templateName;"], [78, ""], [79, "\t@Test"], [80, "\tpublic void testException() throws Exception {"], [81, "\t\tboolean profile = \"true\".equals(System.getProperty(\"profile\"));"], [82, "\t\tEngine engine = Engine.getEngine(\"httl-exception.properties\");"], [83, "\t\tString dir = engine.getProperty(\"template.directory\", \"\");"], [84, "\t\tif (dir.length() > 0 && dir.startsWith(\"/\")) {"], [85, "\t\t\tdir = dir.substring(1);"], [86, "\t\t}"], [87, "\t\tif (dir.length() > 0 && ! dir.endsWith(\"/\")) {"], [88, "\t\t\tdir += \"/\";"], [89, "\t\t}"], [90, "\t\tURL url = this.getClass().getClassLoader().getResource(dir + \"results/\" + templateName + \".txt\");"], [91, "\t\tif (url == null) {"], [92, "\t\t\tthrow new FileNotFoundException(\"Not found file: \" + dir + \"results/\" + templateName + \".txt\");"], [93, "\t\t}"], [94, "\t\tFile result = new File(url.getFile());"], [95, "\t\tif (! result.exists()) {"], [96, "\t\t\tthrow new FileNotFoundException(\"Not found file: \" + result.getAbsolutePath());"], [97, "\t\t}"], [98, "\t\ttry {"], [99, "\t\t\tengine.getTemplate(\"/templates/\" + templateName);"], [100, "\t\t\tfail(templateName);"], [101, "\t\t} catch (ParseException e) {"], [102, "\t\t\tif (! profile) {"], [103, "\t\t\t\tString message = e.getMessage();"], [104, "\t\t\t\tassertTrue(StringUtils.isNotEmpty(message));"], [105, "\t\t\t\tList<String> expected = IOUtils.readLines(new FileReader(result));"], [106, "\t\t\t\tassertTrue(expected != null && expected.size() > 0);"], [107, "\t\t\t\tfor (String part : expected)  {"], [108, "\t\t\t\t\tassertTrue(StringUtils.isNotEmpty(part));"], [109, "\t\t\t\t\tpart = StringUtils.unescapeString(part).trim();"], [110, "\t\t\t\t\tassertTrue(templateName + \", exception message: \\\"\" + message + \"\\\" not contains: \\\"\" + part + \"\\\"\", message.contains(part));"]], "deleted": [[40, "\t@Test"], [41, "\tpublic void testException() throws Exception {"], [42, "\t\tboolean profile = \"true\".equals(System.getProperty(\"profile\"));"], [43, "\t\tif (! profile)"], [53, "\t\tFile directory = new File(this.getClass().getClassLoader().getResource(dir + \"templates/\").getFile());"], [58, "\t\t\tSystem.out.println(file.getName());"], [59, "\t\t\tURL url = this.getClass().getClassLoader().getResource(dir + \"results/\" + file.getName() + \".txt\");"], [60, "\t\t\tif (url == null) {"], [61, "\t\t\t\tthrow new FileNotFoundException(\"Not found file: \" + dir + \"results/\" + file.getName() + \".txt\");"], [62, "\t\t\t}"], [63, "\t\t\tFile result = new File(url.getFile());"], [64, "\t\t\tif (! result.exists()) {"], [65, "\t\t\t\tthrow new FileNotFoundException(\"Not found file: \" + result.getAbsolutePath());"], [66, "\t\t\t}"], [67, "\t\t\ttry {"], [68, "\t\t\t\tengine.getTemplate(\"/templates/\" + file.getName());"], [69, "\t\t\t\tfail(file.getName());"], [70, "\t\t\t} catch (ParseException e) {"], [71, "\t\t\t\tif (! profile) {"], [72, "\t\t\t\t\tString message = e.getMessage();"], [73, "\t\t\t\t\tassertTrue(StringUtils.isNotEmpty(message));"], [74, "\t\t\t\t\tList<String> expected = IOUtils.readLines(new FileReader(result));"], [75, "\t\t\t\t\tassertTrue(expected != null && expected.size() > 0);"], [76, "\t\t\t\t\tfor (String part : expected)  {"], [77, "\t\t\t\t\t\tassertTrue(StringUtils.isNotEmpty(part));"], [78, "\t\t\t\t\t\tpart = StringUtils.unescapeString(part).trim();"], [79, "\t\t\t\t\t\tassertTrue(file.getName() + \", exception message: \\\"\" + message + \"\\\" not contains: \\\"\" + part + \"\\\"\", message.contains(part));"], [80, "\t\t\t\t\t}"], [85, ""]]}, "num_lines_added": 58, "num_lines_removed": 29}