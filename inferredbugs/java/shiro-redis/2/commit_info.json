{"hash": "1b5f3c73b4dc86949efda7738c6ea44faf3c613f", "message": "- Enhance RedisSessionDaoTest", "file_num_lines": 115, "diff_parsed": {"added": [[8, "import java.io.Serializable;"], [12, "import static org.hamcrest.CoreMatchers.nullValue;"], [15, "import static org.mockito.Mockito.*;"], [22, ""], [23, "    private String testPrefix;"], [35, "        redisSessionDAO.setExpire(1);"], [39, "    public void testDoCreate() throws SerializationException {"], [41, "            redisSessionDAO.doCreate(null);"], [44, "            assertThat(e.getMessage(), is(\"session is null\"));"], [46, "        verify(redisManager, times(0)).set(any((new byte[0]).getClass()), any((new byte[0]).getClass()), eq(1));"], [48, "        RedisSessionDAO prefixTestRedisSessionDao = new RedisSessionDAO();"], [49, "        prefixTestRedisSessionDao.setKeyPrefix(\"abc:\");"], [50, "        prefixTestRedisSessionDao.setRedisManager(redisManager);"], [51, "        prefixTestRedisSessionDao.setExpire(2);"], [52, "        FakeSession fakeSession = new FakeSession(1, \"Tom\");"], [53, "        String sessionId = (String)prefixTestRedisSessionDao.doCreate(fakeSession);"], [54, "        verify(redisManager, times(0)).set(eq(keySerializer.serialize(\"abc:\" + sessionId)), any((new byte[0]).getClass()), eq(2));"], [58, "    public void testUpdate() throws SerializationException {"], [59, "        FakeSession testSession = new FakeSession(1, \"jack\");"], [60, "        byte[] testSessionKeyBytes = keySerializer.serialize(testPrefix + \"1\");"], [61, "        byte[] testSessionValueBytes = valueSeralizer.serialize(testSession);"], [62, "        redisSessionDAO.update(testSession);"], [63, "        verify(redisManager, times(1)).set(testSessionKeyBytes, testSessionValueBytes, 1);"], [65, "            redisSessionDAO.update(null);"], [68, "            assertThat(e.getMessage(), is(\"session or session id is null\"));"], [69, "        }"], [70, ""], [71, "        try {"], [72, "            FakeSession nullIdSession = new FakeSession();"], [73, "            redisSessionDAO.update(nullIdSession);"], [74, "            fail();"], [75, "        } catch (UnknownSessionException e) {"], [76, "            assertThat(e.getMessage(), is(\"session or session id is null\"));"], [81, "    public void testDelete() {"], [82, "        redisSessionDAO.delete(null);"], [83, "        verify(redisManager, times(0)).del(any((new byte[0]).getClass()));"], [84, "        FakeSession nullIdSession = new FakeSession();"], [85, "        redisSessionDAO.delete(nullIdSession);"], [86, "        verify(redisManager, times(0)).del(any((new byte[0]).getClass()));"], [87, "        FakeSession testSession = new FakeSession(2, \"Tom\");"], [88, "        redisSessionDAO.delete(testSession);"], [89, "        verify(redisManager, times(1)).del(any((new byte[0]).getClass()));"], [93, "    public void testDoReadSession() throws NoSuchFieldException, IllegalAccessException {"], [94, "        Session nullSession = redisSessionDAO.doReadSession(null);"], [95, "        assertThat(nullSession, is(nullValue()));"], [96, ""], [97, "        RedisSessionDAO redisSessionDAO2 = new RedisSessionDAO();"], [98, "        redisSessionDAO2.setRedisManager(redisManager);"], [99, "        redisSessionDAO2.setKeyPrefix(testPrefix);"], [100, "        redisSessionDAO2.setExpire(2);"], [101, "        ThreadLocal sessionsInThread = mock(ThreadLocal.class);"], [102, "        Map<Serializable, SessionInMemory> sessionMap = new HashMap<Serializable, SessionInMemory>();"], [103, "        SessionInMemory sessionInMemory = new SessionInMemory();"], [104, "        sessionInMemory.setSession(new FakeSession(1, \"Billy\"));"], [105, "        sessionInMemory.setCreateTime(new Date());"], [106, "        sessionMap.put(\"1\", sessionInMemory);"], [107, "        when(sessionsInThread.get()).thenReturn(sessionMap);"], [108, "        TestUtils.setPrivateField(redisSessionDAO2, \"sessionsInThread\", sessionsInThread);"], [109, "        FakeSession actualSession = (FakeSession)redisSessionDAO2.doReadSession(\"1\");"], [110, "        assertThat(actualSession.getId().toString(), is(\"1\"));"], [111, "        assertThat(actualSession.getName(), is(\"Billy\"));"], [112, "        verify(redisManager, times(0)).get(any((new byte[0]).getClass()));"], [113, "    }"], [114, ""], [115, "    @Test"], [116, "    public void testGetActiveSessions() throws SerializationException {"], [117, "        Set<byte[]> fakeKeys = new HashSet<byte[]>();"], [118, "        byte[] firstKeyBytes = keySerializer.serialize(\"1\");"], [119, "        fakeKeys.add(firstKeyBytes);"], [120, "        byte[] secondKeyBytes = keySerializer.serialize(\"2\");"], [121, "        fakeKeys.add(secondKeyBytes);"], [122, "        when(redisManager.keys(any((new byte[0]).getClass()))).thenReturn(fakeKeys);"], [123, "        FakeSession firstSession = new FakeSession(1, \"Tom\");"], [124, "        when(redisManager.get(firstKeyBytes)).thenReturn(valueSeralizer.serialize(firstSession));"], [125, "        FakeSession secondSession = new FakeSession(2, \"Billy\");"], [126, "        when(redisManager.get(secondKeyBytes)).thenReturn(valueSeralizer.serialize(secondSession));"], [127, ""], [129, "        assertThat(activeSessions.size(), is(2));"]], "deleted": [[5, "import org.apache.shiro.session.mgt.SimpleSession;"], [14, "import static org.mockito.Mockito.mock;"], [15, "import static org.mockito.Mockito.when;"], [22, "    private String testKey;"], [23, "    private String testPrefix;private Set<byte[]> testSet;"], [24, "    private SimpleSession testValue;"], [25, "    private Collection<FakeSession> testValues;"], [26, "    private FakeSession tomSession;"], [27, "    private FakeSession paulSession;"], [28, "    private FakeSession billySession;"], [35, "        testKey = \"testKey\";"], [37, "        testValue = new SimpleSession();"], [38, "        testValue.setId(3);"], [39, "        testSet = new HashSet<byte[]>();"], [40, "        testSet.add(keySerializer.serialize(testPrefix + \"tom\"));"], [41, "        testSet.add(keySerializer.serialize(testPrefix + \"paul\"));"], [42, "        testSet.add(keySerializer.serialize(testPrefix + \"billy\"));"], [43, "        testValues = new ArrayList<FakeSession>();"], [44, "        tomSession = new FakeSession(1, \"tom\");"], [45, "        testValues.add(tomSession);"], [46, "        paulSession = new FakeSession(2, \"paul\");"], [47, "        testValues.add(paulSession);"], [48, "        billySession = new FakeSession(3, \"billy\");"], [49, "        testValues.add(billySession);"], [51, "        when(redisManager.dbSize()).thenReturn(2L);"], [52, "        when(redisManager.get(keySerializer.serialize(testPrefix + testKey))).thenReturn(valueSeralizer.serialize(testValue));"], [53, "        when(redisManager.keys(keySerializer.serialize(testPrefix + \"*\"))).thenReturn(testSet);"], [54, "        when(redisManager.get(keySerializer.serialize(testPrefix + \"tom\"))).thenReturn(valueSeralizer.serialize(tomSession));"], [55, "        when(redisManager.get(keySerializer.serialize(testPrefix + \"paul\"))).thenReturn(valueSeralizer.serialize(paulSession));"], [56, "        when(redisManager.get(keySerializer.serialize(testPrefix + \"billy\"))).thenReturn(valueSeralizer.serialize(billySession));"], [63, "    public void testUpdate() {"], [64, "        redisSessionDAO.update(testValue);"], [66, "            redisSessionDAO.update(null);"], [69, "            assertThat(e.getMessage(), is(\"session or session id is null\"));"], [71, "    }"], [73, "    @Test"], [74, "    public void testDelete() {"], [75, "        redisSessionDAO.delete(null);"], [76, "        redisSessionDAO.delete(testValue);"], [80, "    public void testDoCreate() {"], [81, "        redisSessionDAO.doCreate(testValue);"], [83, "            redisSessionDAO.doCreate(null);"], [86, "            assertThat(e.getMessage(), is(\"session is null\"));"], [91, "    public void testDoReadSession() {"], [92, "        Session actualSession = redisSessionDAO.doReadSession(testKey);"], [93, "        assertThat(actualSession.getId().toString(), is(\"3\"));"], [94, "        redisSessionDAO.doReadSession(null);"], [98, "    public void testGetActiveSessions() {"], [100, "        assertThat(activeSessions.size(), is(3));"], [101, "        for (Iterator<Session> iterator = activeSessions.iterator(); iterator.hasNext(); ) {"], [102, "            FakeSession next = (FakeSession)iterator.next();"], [103, "            if (next.getId() == 2) {"], [104, "                assertThat(next.getName(), is(\"paul\"));"], [105, "            }"], [106, "        }"]]}, "num_lines_added": 78, "num_lines_removed": 55}