{"hash": "594f1306156b343d2fe9354bf8f47621958b8034", "message": "Release 2.8.10\n- Enhance RedisCache", "file_num_lines": 141, "diff_parsed": {"added": [[6, "import java.util.Collection;"], [7, "import java.util.HashSet;"], [8, "import java.util.Set;"], [18, "    private RedisCache<String, FakeAuth> redisCache;"], [22, ""], [23, "    private String tomKey;"], [24, "    private byte[] tomKeyBytes;"], [25, "    private String paulKey;"], [26, "    private String billyKey;"], [33, "        testPrefix = \"testPrefix:\";"], [34, "        redisCache = new RedisCache<String, FakeAuth>(redisManager, keySerializer, valueSerializer, testPrefix, 1);"], [35, ""], [36, "        Set<byte[]> testSet;"], [37, "        testSet = new HashSet<byte[]>();"], [38, "        tomKey = testPrefix + \"tom\";"], [39, "        tomKeyBytes = keySerializer.serialize(tomKey);"], [40, "        testSet.add(tomKeyBytes);"], [41, "        paulKey = testPrefix + \"paul\";"], [42, "        testSet.add(keySerializer.serialize(paulKey));"], [43, "        billyKey = testPrefix + \"billy\";"], [44, "        testSet.add(keySerializer.serialize(billyKey));"], [45, "        byte[] testKeysBytes = keySerializer.serialize(testPrefix + \"*\");"], [46, "        when(redisManager.keys(testKeysBytes)).thenReturn(testSet);"], [55, "            assertThat(e.getMessage(),is(\"redisManager cannot be null.\"));"], [56, "        }"], [57, ""], [58, "        try {"], [59, "            new RedisCache<String, String>(new RedisManager(), null, valueSerializer, \"abc:\", 1);"], [60, "            fail(\"Excepted exception to be thrown\");"], [61, "        } catch (IllegalArgumentException e) {"], [62, "            assertThat(e.getMessage(),is(\"keySerializer cannot be null.\"));"], [63, "        }"], [64, ""], [65, "        try {"], [66, "            new RedisCache<String, String>(new RedisManager(), keySerializer, null, \"abc:\", 1);"], [67, "            fail(\"Excepted exception to be thrown\");"], [68, "        } catch (IllegalArgumentException e) {"], [69, "            assertThat(e.getMessage(),is(\"valueSerializer cannot be null.\"));"], [78, "        when(redisManager.dbSize()).thenReturn(2L);"], [83, "    public void testGet() throws SerializationException {"], [84, "        FakeAuth nullValue = redisCache.get(null);"], [85, "        assertThat(nullValue, nullValue());"], [87, "        byte[] adminKeyBytes = keySerializer.serialize(testPrefix + \"admin\");"], [88, "        FakeAuth adminFakeAuth = new FakeAuth(1, \"admin\");"], [89, "        byte[] adminValueBytes = valueSerializer.serialize(adminFakeAuth);"], [90, "        when(redisManager.get(adminKeyBytes)).thenReturn(adminValueBytes);"], [91, ""], [92, "        FakeAuth actualValue = redisCache.get(\"admin\");"], [93, "        assertThat(actualValue.getId(), is(1));"], [94, "        assertThat(actualValue.getRole(), is(\"admin\"));"], [96, "        FakeAuth nonExistValue = redisCache.get(\"nonExistKey\");"], [101, "    public void testPut() throws SerializationException {"], [103, "        verify(redisManager, times(0)).set(null, null, 1);"], [104, ""], [105, "        FakeAuth emptyFakeAuth = new FakeAuth();"], [106, "        byte[] emptyFakeAuthBytes = valueSerializer.serialize(emptyFakeAuth);"], [107, "        redisCache.put(null, emptyFakeAuth);"], [108, "        verify(redisManager, times(0)).set(null, emptyFakeAuthBytes, 1);"], [109, ""], [110, "        String testKey = \"jack\";"], [111, "        byte[] testKeyBytes = keySerializer.serialize(testPrefix + testKey);"], [112, "        redisCache.put(testKey, null);"], [113, "        verify(redisManager, times(1)).set(testKeyBytes, null, 1);"], [114, ""], [115, "        FakeAuth testValue = new FakeAuth(2, \"user\");"], [116, "        byte[] testValueBytes = valueSerializer.serialize(testValue);"], [118, "        verify(redisManager, times(1)).set(testKeyBytes, testValueBytes, 1);"], [122, "    public void testRemove() throws SerializationException {"], [123, "        FakeAuth nullValue = redisCache.remove(null);"], [124, "        assertThat(nullValue, is(nullValue()));"], [125, ""], [126, "        String testKey = \"billy\";"], [127, "        byte[] testKeyBytes = keySerializer.serialize(testPrefix + testKey);"], [128, "        FakeAuth testValue = new FakeAuth(3, \"client\");"], [129, "        byte[] testValueBytes = valueSerializer.serialize(testValue);"], [130, "        when(redisManager.get(testKeyBytes)).thenReturn(testValueBytes);"], [131, "        FakeAuth actualValue = redisCache.remove(testKey);"], [133, "        assertThat(actualValue.getRole(), is(\"client\"));"], [137, "    public void testClear() throws SerializationException {"], [139, "        verify(redisManager, times(1)).del(tomKeyBytes);"], [143, "    public void testKeys() throws SerializationException {"], [152, "    public void testValues() throws SerializationException {"], [153, "        FakeAuth tomFakeAuth = new FakeAuth(1, \"admin\");"], [154, "        mockRedisManagerGet(tomKey, tomFakeAuth);"], [155, "        FakeAuth paulFakeAuth = new FakeAuth(2, \"client\");"], [156, "        mockRedisManagerGet(paulKey, paulFakeAuth);"], [157, "        FakeAuth billyFakeAuth = new FakeAuth(3, \"user\");"], [158, "        mockRedisManagerGet(billyKey, billyFakeAuth);"], [159, "        Collection<FakeAuth> values = redisCache.values();"], [161, "    }"], [162, ""], [163, "    private void mockRedisManagerGet(String key, FakeAuth value) throws SerializationException {"], [164, "        byte[] keyByte = keySerializer.serialize(key);"], [165, "        byte[] valueByte = valueSerializer.serialize(value);"], [166, "        when(redisManager.get(keyByte)).thenReturn(valueByte);"]], "deleted": [[6, "import java.util.*;"], [16, "    private RedisCache<String, FakeSession> redisCache;"], [17, "    private String testKey;"], [20, "    private FakeSession testValue;"], [22, "    private Set<byte[]> testSet;"], [23, "    private Collection<FakeSession> testValues;"], [24, "    private FakeSession tomSession;"], [25, "    private FakeSession paulSession;"], [26, "    private FakeSession billySession;"], [27, "    private byte[] nullValueByte;"], [31, "        testPrefix = \"testPrefix:\";"], [32, "        testKey = \"testKey\";"], [33, "        testValue = new FakeSession();"], [34, "        testValue.setId(3);"], [35, "        testValue.setName(\"jack\");"], [38, "        testSet = new HashSet<byte[]>();"], [39, "        testSet.add(keySerializer.serialize(testPrefix + \"tom\"));"], [40, "        testSet.add(keySerializer.serialize(testPrefix + \"paul\"));"], [41, "        testSet.add(keySerializer.serialize(testPrefix + \"billy\"));"], [42, "        testValues = new ArrayList<FakeSession>();"], [43, "        tomSession = new FakeSession(1, \"tom\");"], [44, "        testValues.add(tomSession);"], [45, "        paulSession = new FakeSession(2, \"paul\");"], [46, "        testValues.add(paulSession);"], [47, "        billySession = new FakeSession(3, \"billy\");"], [48, "        testValues.add(billySession);"], [50, "        when(redisManager.dbSize()).thenReturn(2L);"], [51, "        when(redisManager.get(keySerializer.serialize(testPrefix + testKey))).thenReturn(valueSerializer.serialize(testValue));"], [52, "        when(redisManager.keys(keySerializer.serialize(testPrefix + \"*\"))).thenReturn(testSet);"], [53, "        when(redisManager.get(keySerializer.serialize(testPrefix + \"tom\"))).thenReturn(valueSerializer.serialize(tomSession));"], [54, "        when(redisManager.get(keySerializer.serialize(testPrefix + \"paul\"))).thenReturn(valueSerializer.serialize(paulSession));"], [55, "        when(redisManager.get(keySerializer.serialize(testPrefix + \"billy\"))).thenReturn(valueSerializer.serialize(billySession));"], [56, "        redisCache = new RedisCache<String, FakeSession>(redisManager, keySerializer, valueSerializer, testPrefix, 1);"], [57, ""], [58, "        nullValueByte = new byte[0];"], [67, "            assertThat(e.getMessage(),is(\"Cache argument cannot be null.\"));"], [80, "    public void testGet() {"], [81, "        FakeSession actualValue = redisCache.get(testKey);"], [82, "        assertThat(actualValue.getId(), is(3));"], [83, "        assertThat(actualValue.getName(), is(\"jack\"));"], [85, "        FakeSession nullValue = redisCache.get(null);"], [86, "        assertThat(nullValue, is(nullValue()));"], [88, "        FakeSession nonExistValue = redisCache.get(\"nonExistKey\");"], [93, "    public void testPut() {"], [95, "        verify(redisManager, times(1)).set(null, nullValueByte, 1);"], [96, "        redisCache.put(null, new FakeSession());"], [101, "    public void testRemove() {"], [102, "        redisCache.remove(null);"], [103, "        FakeSession actualValue = redisCache.remove(testKey);"], [105, "        assertThat(actualValue.getName(), is(\"jack\"));"], [109, "    public void testClear() {"], [114, "    public void testKeys() {"], [123, "    public void testValues() {"], [124, "        Collection<FakeSession> values = redisCache.values();"], [126, "        for (Iterator<FakeSession> iterator = values.iterator(); iterator.hasNext(); ) {"], [127, "            FakeSession next = iterator.next();"], [128, "            if (next.getId() == 2) {"], [129, "                assertThat(next.getName(), is(\"paul\"));"], [130, "            }"], [131, "        }"]]}, "num_lines_added": 95, "num_lines_removed": 60}