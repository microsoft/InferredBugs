{"hash": "7befa02aa55b038b492087438dc61199227592ab", "message": "migrate to java 8.\nremoved guava and migrated to streams api.\nsimplified store.\ncleanups.", "file_num_lines": 255, "diff_parsed": {"added": [[17, "import java.util.Objects;"], [21, "import java.util.stream.Collectors;"], [22, "import java.util.stream.IntStream;"], [199, "                    return IntStream.range(0, inputAnnotations.length)"], [200, "                            .allMatch(i -> areAnnotationMembersMatching(inputAnnotations[i], annotations[i]));"], [329, "        return classes.stream()"], [330, "                .map(className -> (Class<? extends T>) forName(className, classLoaders))"], [331, "                .filter(Objects::nonNull)"], [332, "                .collect(Collectors.toCollection(LinkedHashSet::new));"], [345, "        return Arrays.stream(annotations).flatMap(Arrays::stream).collect(Collectors.toSet());"], [348, "    private static Set<Class<? extends Annotation>> annotationTypes(Collection<Annotation> annotations) {"], [349, "        return annotations.stream().map(Annotation::annotationType).collect(Collectors.toSet());"], [353, "        return Arrays.stream(annotations).map(Annotation::annotationType).toArray(Class[]::new);"], [396, "        return IntStream.range(0, childClasses.length)"], [397, "                .noneMatch(i -> !parentClasses[i].isAssignableFrom(childClasses[i]) ||"], [398, "                        parentClasses[i] == Object.class && childClasses[i] != Object.class);"]], "deleted": [[14, "import java.util.Collections;"], [197, "                    for (int i = 0; i < inputAnnotations.length; i++) {"], [198, "                        if (!areAnnotationMembersMatching(inputAnnotations[i], annotations[i])) return false;"], [199, "                    }"], [328, "        Set<Class<? extends T>> result = new LinkedHashSet<>();"], [329, "        for (String className : classes) {"], [330, "            Class<?> type = forName(className, classLoaders);"], [331, "            if (type != null) {"], [332, "                result.add((Class<? extends T>) type);"], [333, "            }"], [334, "        }"], [335, "        return result;"], [345, "        Set<Annotation> result = new HashSet<>();"], [349, "        for (Annotation[] annotation : annotations) Collections.addAll(result, annotation);"], [350, "        return result;"], [353, "    private static Set<Class<? extends Annotation>> annotationTypes(Iterable<Annotation> annotations) {"], [354, "        Set<Class<? extends Annotation>> result = new HashSet<>();"], [355, "        for (Annotation annotation : annotations) result.add(annotation.annotationType());"], [356, "        return result;"], [360, "        Class<? extends Annotation>[] result = new Class[annotations.length];"], [361, "        for (int i = 0; i < annotations.length; i++) result[i] = annotations[i].annotationType();"], [362, "        return result;"], [405, "        for (int i = 0; i < childClasses.length; i++) {"], [406, "            if (!parentClasses[i].isAssignableFrom(childClasses[i]) ||"], [407, "                    (parentClasses[i] == Object.class && childClasses[i] != Object.class)) {"], [408, "                return false;"], [409, "            }"], [410, "        }"], [411, "        return true;"]]}, "num_lines_added": 16, "num_lines_removed": 29}