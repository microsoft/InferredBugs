{"hash": "18b957be08002e393859716247969fcbac602356", "message": "Support registering content type engines\n\nThe xml and json engine interfaces have been refactored into a ContentTypeEngine\nand the application is now more loosely coupled with content types to allow\nregistration of additional content types. This change also lays the groundwork\nfor accept header negotiation of error responses.\n\nAll engines have been revised to use Initializers instead of ServiceLocators.", "file_num_lines": 284, "diff_parsed": {"added": [[33, "import ro.fortsoft.pippo.core.util.StringUtils;"], [35, "import java.util.Collections;"], [38, "import java.util.TreeMap;"], [56, "    private Map<String, ContentTypeEngine> engines;"], [79, "            throw new PippoRuntimeException(\"There is no application attached to current thread '{}'\", Thread"], [80, "                    .currentThread().getName());"], [96, "        this.engines = new TreeMap<>();"], [140, "    /**"], [141, "     * Registers a template engine if no other engine has been registered."], [142, "     *"], [143, "     * @param engineClass"], [144, "     */"], [145, "    public void registerTemplateEngine(Class<? extends TemplateEngine> engineClass) {"], [146, "        if (templateEngine != null) {"], [147, "            log.debug(\"Template engine already registered, ignoring {}\", engineClass.getName());"], [148, "            return;"], [149, "        }"], [150, "        TemplateEngine engine = null;"], [151, "        try {"], [152, "            engine = engineClass.newInstance();"], [154, "        } catch (Exception e) {"], [155, "            throw new PippoRuntimeException(\"Failed to instantiate '{}'\", e, engineClass.getName());"], [157, "    }"], [159, "    public TemplateEngine getTemplateEngine() {"], [166, "        log.debug(\"Template engine is {}\", templateEngine.getClass().getName());"], [167, ""], [170, "    public Map<String, ContentTypeEngine> getContentTypeEngines() {"], [171, "        return Collections.unmodifiableMap(engines);"], [172, "    }"], [174, "    public boolean hasContentTypeEngine(String contentType) {"], [175, "        return engines.containsKey(contentType);"], [178, "    /**"], [179, "     * Registers a content type engine if no other engine has been registered"], [180, "     * for the content type."], [181, "     *"], [182, "     * @param engineClass"], [183, "     */"], [184, "    public void registerContentTypeEngine(Class<? extends ContentTypeEngine> engineClass) {"], [185, "        ContentTypeEngine engine = null;"], [186, "        try {"], [187, "            engine = engineClass.newInstance();"], [188, "        } catch (Exception e) {"], [189, "            throw new PippoRuntimeException(\"Failed to instantiate '{}'\", e, engineClass.getName());"], [190, "        }"], [191, "        if (!engines.containsKey(engine.getContentType())) {"], [192, "            setContentTypeEngine(engine);"], [193, "        } else {"], [194, "            log.debug(\"'{}' engine already registered, ignoring {}\", engine.getContentType(), engineClass.getName());"], [195, "        }"], [198, "    /**"], [199, "     * Returns the first matching content type engine for a simple content type"], [200, "     * or a complex accept header like:"], [201, "     *"], [202, "     * <pre>"], [203, "     * text/html,application/xhtml+xml,application/xml;q=0.9,image/webp"], [204, "     * </pre>"], [205, "     *"], [206, "     * @param contentType"], [207, "     * @return null or the first matching content type engine"], [208, "     */"], [209, "    public ContentTypeEngine getContentTypeEngine(String contentType) {"], [210, "        if (StringUtils.isNullOrEmpty(contentType)) {"], [211, "            return null;"], [212, "        }"], [213, ""], [214, "        String[] types = contentType.split(\",\");"], [215, "        for (String type : types) {"], [216, "            if (type.contains(\";\")) {"], [217, "                // drop ;q=0.8 quality scores"], [218, "                type = type.substring(type.indexOf(';'));"], [219, "            }"], [220, ""], [221, "            ContentTypeEngine engine = engines.get(type);"], [222, "            if (engine != null) {"], [223, "                return engine;"], [224, "            }"], [227, "        return null;"], [230, "    public void setContentTypeEngine(ContentTypeEngine engine) {"], [231, "        engine.init(this);"], [232, "        engines.put(engine.getContentType(), engine);"], [233, "        log.debug(\"'{}' content engine is {}\", engine.getContentType(), engine.getClass().getName());"], [254, "            throw new PippoRuntimeException(\"You may only register one route for {}\", resourceHandler.getClass()"], [255, "                    .getSimpleName());"]], "deleted": [[33, "import ro.fortsoft.pippo.core.util.ServiceLocator;"], [54, "    private JsonEngine jsonEngine;"], [55, "    private XmlEngine xmlEngine;"], [78, "            throw new PippoRuntimeException(\"There is no application attached to current thread '{}'\","], [79, "                    Thread.currentThread().getName());"], [138, "    public TemplateEngine getTemplateEngine() {"], [139, "        if (templateEngine == null) {"], [140, "            TemplateEngine engine = ServiceLocator.locate(TemplateEngine.class);"], [148, "        // initialize the engine first"], [150, ""], [154, "    public JsonEngine getJsonEngine() {"], [155, "        if (jsonEngine == null) {"], [156, "            jsonEngine = ServiceLocator.locate(JsonEngine.class);"], [157, "        }"], [159, "        return jsonEngine;"], [162, "    public void setJsonEngine(JsonEngine jsonEngine) {"], [163, "        this.jsonEngine = jsonEngine;"], [166, "    public XmlEngine getXmlEngine() {"], [167, "        if (xmlEngine == null) {"], [168, "            xmlEngine = ServiceLocator.locate(XmlEngine.class);"], [171, "        return xmlEngine;"], [174, "    public void setXmlEngine(XmlEngine xmlEngine) {"], [175, "        this.xmlEngine = xmlEngine;"], [196, "            throw new PippoRuntimeException(\"You may only register one route for {}\","], [197, "                    resourceHandler.getClass().getSimpleName());"]]}, "num_lines_added": 83, "num_lines_removed": 25}