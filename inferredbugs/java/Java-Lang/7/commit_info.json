{"hash": "74b581f375a85ddb5be2e555764403ff0855e232", "message": "JLANGX-11 merge memory mapped files implementations", "file_num_lines": 149, "diff_parsed": {"added": [[24, "import static org.junit.Assert.*;"], [32, "        return newTempraryFile(name, true);"], [35, "    private static File newTempraryFile(String name, boolean delete) {"], [40, "        if (delete) {"], [45, "        if(!file.getParentFile().exists()) {"], [46, "            file.getParentFile().mkdirs();"], [47, "        }"], [48, ""], [58, "        //System.out.println(\"Temporay directory is \" + System.getProperty(\"java.io.tmpdir\"));"], [74, "        VanillaMappedFile vmf1 = VanillaMappedFile.readWrite(f1);"], [75, "        VanillaMappedFile vmf2 = VanillaMappedFile.readWrite(f2,128);"], [80, "        assertEquals(0, vmf1.size());"], [89, "        VanillaMappedFile vmf = VanillaMappedFile.readWrite("], [90, "            newTempraryFile(\"vmf-acquire-buffer\"));"], [93, "        assertEquals(1, buffer.refCount());"], [97, "        buffer.writeLong(0, 1L);"], [98, "        assertEquals(1L, buffer.readLong(0));"], [102, "        assertEquals(2L, buffer.readLong(0));"], [111, "        VanillaMappedBlocks blocks = VanillaMappedBlocks.readWrite("], [113, "            128);"], [116, "        assertEquals(128, blocks.size());"], [119, "        assertEquals(256, blocks.size());"], [122, "        assertEquals(256, blocks.size());"], [129, "        assertEquals(1, b1.refCount());"], [131, "        assertEquals(2, b2.refCount());"], [132, "        assertEquals(2, b3.refCount());"], [134, "        b1.release();"], [135, "        b2.release();"], [136, "        b3.release();"], [137, ""], [138, "        blocks.close();"], [143, "        VanillaMappedBlocks blocks = VanillaMappedBlocks.readWrite("], [145, "            64);"], [148, "        for (long i = 0; i < nblocks; i++) {"], [154, "            assertEquals(0, b.refCount());"], [158, "        blocks.close();"], [163, "        File path = newTempraryFile(\"vmf-acquire-overlap\");"], [165, "        VanillaMappedFile   vmf    = VanillaMappedFile.readWrite(path);"], [166, "        VanillaMappedBlocks blocks = VanillaMappedBlocks.readWrite(path,128);"], [172, "        assertEquals(0, b1.refCount());"], [179, "        assertEquals(0, b2.refCount());"], [186, "        assertEquals(0, b3.refCount());"], [190, "        assertEquals(1, b4.refCount());"], [192, "        assertEquals(1L, b4.readLong(0));"], [193, "        assertEquals(2L, b4.readLong(128));"], [194, "        assertEquals(3L, b4.readLong(256));"], [197, "        blocks.close();"], [205, "            VanillaMappedFile   vmf = VanillaMappedFile.readWrite(file);"], [206, "            VanillaMappedBuffer buf = vmf.sliceOf(128);"], [208, "            buf.writeLong(0, 1L);"], [211, "            buf.release();"], [216, "            VanillaMappedFile   vmf = VanillaMappedFile.readWrite(file);"], [217, "            VanillaMappedBuffer buf = vmf.sliceOf(128);"], [219, "            assertEquals(1L, buf.readLong(0));"], [222, "            buf.release();"], [226, "        assertEquals(128, file.length());"]], "deleted": [[23, "import java.io.IOException;"], [25, "import static org.junit.Assert.assertEquals;"], [26, "import static org.junit.Assert.assertNotEquals;"], [27, "import static org.junit.Assert.assertTrue;"], [35, "        return newTempraryFile(name,true);"], [38, "    private static File newTempraryFile(String name,boolean delete) {"], [43, "        if(delete) {"], [57, "        System.out.println(\"Temporay directory is \" +  System.getProperty(\"java.io.tmpdir\"));"], [73, "        VanillaMappedFile vmf1 = new VanillaMappedFile(f1,VanillaMappedMode.RW);"], [74, "        VanillaMappedFile vmf2 = new VanillaMappedFile(f2,VanillaMappedMode.RW,128);"], [79, "        assertEquals(  0, vmf1.size());"], [88, "        VanillaMappedFile vmf = new VanillaMappedFile("], [89, "            newTempraryFile(\"vmf-acquire-buffer\"),"], [90, "            VanillaMappedMode.RW);"], [93, "        assertEquals( 1, buffer.refCount());"], [97, "        buffer.writeLong(0,1L);"], [98, "        assertEquals( 1L, buffer.readLong(0));"], [102, "        assertEquals(2L , buffer.readLong(0));"], [111, "        VanillaMappedFile vmf = new VanillaMappedFile("], [113, "            VanillaMappedMode.RW);"], [114, ""], [115, "        VanillaMappedBlocks blocks = vmf.blocks(128);"], [118, "        assertEquals(128, vmf.size());"], [121, "        assertEquals(256, vmf.size());"], [124, "        assertEquals(256, vmf.size());"], [131, "        assertEquals(  1, b1.refCount());"], [133, "        assertEquals(  2, b2.refCount());"], [134, "        assertEquals(  2, b3.refCount());"], [136, "        vmf.close();"], [141, "        VanillaMappedFile vmf = new VanillaMappedFile("], [143, "            VanillaMappedMode.RW);"], [146, "        final VanillaMappedBlocks blocks = vmf.blocks(64);"], [147, ""], [148, "        for(long i=0; i<nblocks; i++) {"], [154, "            assertEquals(0,b.refCount());"], [158, "        vmf.close();"], [163, "        VanillaMappedFile vmf = new VanillaMappedFile("], [164, "            newTempraryFile(\"vmf-acquire-overlap\"),"], [165, "            VanillaMappedMode.RW);"], [167, "        VanillaMappedBlocks blocks = vmf.blocks(128);"], [173, "        assertEquals(0,b1.refCount());"], [180, "        assertEquals(0,b2.refCount());"], [187, "        assertEquals(0,b3.refCount());"], [191, "        assertEquals(  1, b4.refCount());"], [193, "        assertEquals( 1L, b4.readLong(0));"], [194, "        assertEquals( 2L, b4.readLong(128));"], [195, "        assertEquals( 3L, b4.readLong(256));"], [205, "            VanillaMappedFile vmf = new VanillaMappedFile("], [206, "                file,"], [207, "                VanillaMappedMode.RW);"], [209, "            VanillaMappedBuffer buffer = vmf.sliceOf(128);"], [210, "            buffer.writeLong(0, 1L);"], [213, "            buffer.release();"], [218, "            VanillaMappedFile vmf = new VanillaMappedFile("], [219, "                file,"], [220, "                VanillaMappedMode.RW);"], [222, "            VanillaMappedBuffer buffer = vmf.sliceOf(128);"], [223, "            assertEquals(1L, buffer.readLong(0));"], [226, "            buffer.release();"], [230, "        assertEquals(128,file.length());"], [231, "    }"], [232, ""], [233, "    @Test"], [234, "    public void testCleanup() throws IOException, InterruptedException {"], [235, "        File file = newTempraryFile(\"vmf-cleanup\");"], [236, "        File dir  = file.getParentFile();"], [237, ""], [238, "        long free0 = dir.getFreeSpace();"], [239, ""], [240, "        VanillaMappedFile vmf = new VanillaMappedFile("], [241, "            file,"], [242, "            VanillaMappedMode.RW);"], [243, ""], [244, "        VanillaMappedBlocks blocks = vmf.blocks(1024 * 1024);"], [245, "        VanillaMappedBuffer map0 = blocks.acquire(0);"], [246, "        VanillaMappedBuffer map1 = blocks.acquire(1);"], [247, ""], [248, "        map0.position(0);"], [249, "        while (map0.remaining() >= 8) {"], [250, "            map0.writeLong(0x123456789ABCDEFL);"], [251, "        }"], [252, ""], [253, "        map0.position(1);"], [254, "        while (map1.remaining() >= 8) {"], [255, "            map1.writeLong(0x123456789ABCDEFL);"], [256, "        }"], [257, ""], [258, "        long free1 = dir.getFreeSpace();"], [259, ""], [260, "        map0.release();"], [261, "        assertEquals(0,map0.refCount());"], [262, "        assertTrue(map0.unmapped());"], [263, ""], [264, "        map1.release();"], [265, "        assertEquals(0,map1.refCount());"], [266, "        assertTrue(map1.unmapped());"], [267, ""], [268, "        vmf.close();"], [269, ""], [270, "        long free2 = dir.getFreeSpace();"], [271, ""], [272, "        file.delete();"], [273, ""], [274, "        long free3 = 0;"], [275, "        for (int i = 0; i < 100; i++) {"], [276, "            free3 = dir.getFreeSpace();"], [277, ""], [278, "            System.out.println(\"Freed \" + free0"], [279, "                + \" ~ \" + free1"], [280, "                + \" ~ \" + free2"], [281, "                + \" ~ \" + free3"], [282, "                + \", delete = \" + file.delete()"], [283, "            );"], [284, ""], [285, "            if (free3 > free1) {"], [286, "                break;"], [287, "            }"], [288, ""], [289, "            Thread.sleep(500);"], [290, "        }"], [291, ""], [292, "        assertTrue(\"free3-free1: \" + (free3 - free1), free3 > free1);"], [293, ""]]}, "num_lines_added": 56, "num_lines_removed": 123}