{"hash": "5ecdcce5582b3662a1c767a0c21a5374d5e5c179", "message": "Tune for hex core system", "file_num_lines": 168, "diff_parsed": {"added": [[60, "        final int lockCount = 200 * 1000 * 1000;"], [84, "        int records = 8;"], [85, "        for (int i = 0; i < lockCount; i += records) {"], [86, "            for (long j = 0; j < records * 64; j += 64) {"], [87, "                slice1.positionAndSize(j, 64);"], [88, "                assertTrue("], [89, "                        slice1.tryLockNanosInt(0L, 5 * 1000 * 1000));"], [90, "                int toggle1 = slice1.readInt(4);"], [91, "                if (toggle1 == from) {"], [92, "                    slice1.writeInt(4L, to);"], [93, "                } else {"], [94, "                    i--;"], [95, "                }"], [96, "                slice1.unlockInt(0L);"]], "deleted": [[60, "        final int lockCount = 40 * 1000 * 1000;"], [84, "        for (int i = 0; i < lockCount; i++) {"], [85, "            assertTrue("], [86, "                    slice1.tryLockNanosInt(0L, 5 * 1000 * 1000));"], [87, "            int toggle1 = slice1.readInt(4);"], [88, "            if (toggle1 == from) {"], [89, "                slice1.writeInt(4L, to);"], [90, "            } else {"], [91, "                i--;"], [93, "            slice1.unlockInt(0L);"], [94, "            System.nanoTime(); // do something small between locks"]]}, "num_lines_added": 14, "num_lines_removed": 11}