{"hash": "010831b440e458c33a4ed4915fafca97cae66004", "message": "added procedures importOntologySnippet, streamRDFSnippet, deleteRDFSnippet", "file_num_lines": 666, "diff_parsed": {"added": [[141, "    return Stream.of(doOntoImport(format, url, null, props));"], [142, ""], [143, "  }"], [144, ""], [145, "  @Procedure(mode = Mode.WRITE)"], [146, "  @Description(\"Imports classes, properties (dataType and Object), hierarchies thereof and domain and range info.\")"], [147, "  public Stream<ImportResults> importOntologySnippet(@Name(\"rdf\") String rdf,"], [148, "      @Name(\"format\") String format,"], [149, "      @Name(value = \"params\", defaultValue = \"{}\") Map<String, Object> props) {"], [150, ""], [151, "    return Stream.of(doOntoImport(format, null, rdf, props));"], [152, ""], [153, "  }"], [154, ""], [155, "  private ImportResults doOntoImport(String format, String url,"], [156, "      String rdfFragment, Map<String, Object> props) {"], [157, ""], [168, "      if (rdfFragment != null) {"], [169, "        parseRDF(new ByteArrayInputStream(rdfFragment.getBytes(Charset.defaultCharset())),"], [170, "            \"http://neo4j.com/base/\", format, ontoImporter);"], [171, "      } else {"], [172, "        parseRDF(getInputStream(url, props), url, format, ontoImporter);"], [173, "      }"], [185, "    return importResults;"], [291, "    return doStream(url, null, format, props);"], [292, "  }"], [293, ""], [294, "  private Stream<StreamedStatement> doStream(@Name(\"url\") String url, @Name(\"rdfFragment\") String rdfFragment,"], [295, "      @Name(\"format\") String format, @Name(value = \"params\", defaultValue = \"{}\") Map<String, Object> props) {"], [298, "      if (rdfFragment != null) {"], [299, "        parseRDF(new ByteArrayInputStream(rdfFragment.getBytes(Charset.defaultCharset())),"], [300, "            \"http://neo4j.com/base/\", format, statementStreamer);"], [301, "      } else {"], [302, "        parseRDF(getInputStream(url, props), url, format, statementStreamer);"], [303, "      }"], [304, ""], [310, "  }"], [312, "  @Procedure(mode = Mode.READ)"], [313, "  @Description("], [314, "      \"Parses RDF passed as a string and streams each triple as a record with <S,P,O> along \""], [315, "          + \"with datatype and language tag for Literal values. No writing to the DB.\")"], [316, "  public Stream<StreamedStatement> streamRDFSnippet(@Name(\"rdf\") String rdf, @Name(\"format\") String format,"], [317, "      @Name(value = \"params\", defaultValue = \"{}\") Map<String, Object> props) {"], [318, "    Preconditions.checkArgument("], [319, "        Arrays.stream(availableParsers).anyMatch(x -> x.getName().equals(format)),"], [320, "        \"Input format not supported\");"], [321, "    final boolean verifyUriSyntax = (props.containsKey(\"verifyUriSyntax\") ? (Boolean) props"], [322, "        .get(\"verifyUriSyntax\") : true);"], [324, "    return doStream(null, rdf, format, props);"], [358, "  @Description(\"Deletes triples (parsed from url) from Neo4j. Works on a graph resulted of importing RDF via \""], [362, "    return Stream.of(doDelete(format, url, null, props));"], [363, "  }"], [364, ""], [365, "  @Procedure(mode = Mode.WRITE)"], [366, "  @Description(\"Deletes triples (passed as string) from Neo4j. Works on a graph resulted of importing RDF via \""], [367, "      + \"semantics.importRDF(). Delete config must match the one used on import.\")"], [368, "  public Stream<DeleteResults> deleteRDFSnippet(@Name(\"rdf\") String rdf, @Name(\"format\") String format,"], [369, "      @Name(value = \"params\", defaultValue = \"{}\") Map<String, Object> props) {"], [370, "    return Stream.of(doDelete(format, null, rdf, props));"], [371, "  }"], [372, ""], [373, "  private DeleteResults doDelete(String format, String url, String rdfFragment, Map<String, Object> props) {"], [385, "      InputStream inputStream;"], [386, ""], [387, "      if (rdfFragment != null) {"], [388, "        inputStream = new ByteArrayInputStream(rdfFragment.getBytes(Charset.defaultCharset()));"], [389, "        url = \"http://neo4j.com/base/\";"], [390, "      } else {"], [391, "        inputStream = getInputStream(url, props);"], [392, "      }"], [406, "    return deleteResults;"], [624, "  @Procedure(mode = Mode.WRITE)"], [625, "  @Description(\"Adds namespace - prefix pair definition\")"], [626, "  public Stream<NamespacePrefixesResult> addNamespacePrefixesFromText(@Name(\"prefix\") String prefix,"], [627, "      @Name(\"ns\") String ns) {"], [628, ""], [629, "    Map<String, Object> params = new HashMap<>();"], [630, "    params.put(\"prefix\", prefix);"], [631, ""], [632, "    return db"], [633, "        .execute(String.format(\"MERGE (n:NamespacePrefixDefinition) SET n.`%s` = $prefix \""], [634, "            + \"WITH n UNWIND keys(n) as ns\\n\""], [635, "            + \"RETURN n[ns] as prefix, ns as namespace\", ns), params).stream().map("], [636, "            n -> new NamespacePrefixesResult((String) n.get(\"prefix\"),"], [637, "                (String) n.get(\"namespace\")));"], [638, ""], [639, "  }"], [640, ""]], "deleted": [[151, "      InputStream stream = getInputStream(url, props);"], [152, "      parseRDF(stream, url, format, ontoImporter);"], [153, ""], [165, "    return Stream.of(importResults);"], [273, "      parseRDF(getInputStream(url, props), url, format, statementStreamer);"], [314, "  @Description(\"Deletes triples from Neo4j. Works on a graph resulted of importing RDF via \""], [330, "      InputStream inputStream = getInputStream(url, props);"], [343, "    return Stream.of(deleteResults);"]]}, "num_lines_added": 88, "num_lines_removed": 8}