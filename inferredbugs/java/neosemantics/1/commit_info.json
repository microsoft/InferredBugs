{"hash": "3cecbbe75c85464806dea718d285da0f52fc4d2b", "message": "Added periodic commits for large files. Added dependency on APOC.", "file_num_lines": 96, "diff_parsed": {"added": [[20, ""], [21, "        Result dp_d = check_DP_D();"], [22, ""], [23, "        return dp_d.stream().map(ConsistencyViolation::new);"], [24, ""], [25, "    }"], [26, ""], [27, "    private Result check_DP_D() {"], [31, "        Result detectedConsistencyViolations = null;"], [38, "                Set<String> labels = new HashSet<>();"], [58, "            detectedConsistencyViolations = db.execute(sb.toString());"], [60, "        return detectedConsistencyViolations;"], [61, "    }"], [62, ""], [63, "    private Result check_OP_D() {"], [64, "        Result cc1 = db.execute(\"MATCH (n:Class)<-[:DOMAIN]-(p:DatatypeProperty) \\n\" +"], [65, "                \"RETURN DISTINCT n.uri as classUri, n.label as classLabel, p.uri as prop, p.label as propLabel\");"], [67, "        Result detectedConsistencyViolations = null;"], [68, "        Map<String,Set<String>> propLabelPairs = new HashMap<>();"], [69, "        while (cc1.hasNext()){"], [70, "            Map<String, Object> record = cc1.next();"], [71, "            if(propLabelPairs.containsKey(record.get(\"propLabel\"))){"], [72, "                propLabelPairs.get(record.get(\"propLabel\")).add((String) record.get(\"classLabel\"));"], [73, "            }else {"], [74, "                Set<String> labels = new HashSet<>();"], [75, "                labels.add((String) record.get(\"classLabel\"));"], [76, "                propLabelPairs.put((String) record.get(\"propLabel\"), labels);"], [77, "            }"], [78, "        }"], [79, "        Set<String> props = propLabelPairs.keySet();"], [80, "        StringBuffer sb = new StringBuffer();"], [81, "        sb.append(\"MATCH (x) WHERE \");"], [82, "        for (String prop : props) {"], [83, "            sb.append(\" exists(x.\" + prop + \") AND (\");"], [84, "            Set<String> labels = propLabelPairs.get(prop);"], [85, "            boolean first = true;"], [86, "            for(String label : labels){"], [87, "                if(!first) sb.append(\" OR \");"], [88, "                sb.append(\"(NOT '\" + label + \"' IN labels(x))\");"], [89, "                first = false;"], [90, "            }"], [91, "            sb.append(\") RETURN id(x) as nodeUID, 'DPD' as checkFailed , \" +"], [92, "                    \"'Node labels [' + reduce(s = '', l IN Labels(x) | s + ' ' + l)  + '] should include \" +"], [93, "                    labels + \"' as extraInfo\");"], [94, "            detectedConsistencyViolations = db.execute(sb.toString());"], [95, "        }"], [96, "        return detectedConsistencyViolations;"]], "deleted": [[20, "        //@Name(\"breakOnFirst\") String breakOnFirst"], [21, "        // create holder class for results"], [25, ""], [32, "                Set<String> labels = new HashSet<> ();"], [52, "            return db.execute(sb.toString()).stream().map(ConsistencyViolation::new);"], [55, "        return cc1.stream().map(ConsistencyViolation::new);"]]}, "num_lines_added": 47, "num_lines_removed": 6}