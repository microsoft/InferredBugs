{"hash": "b266ba69ba975e4037907bcb83935d7699d821e9", "message": "refactor code for better readability\nadd javadoc comments", "file_num_lines": 147, "diff_parsed": {"added": [[5, "import static semantics.Util.loadNode;"], [73, "      final Node node = nodeCache"], [74, "          .get(entry.getKey(), loadOrCreateNode(loadNode(entry.getKey(), graphdb), entry.getKey()));"], [104, "      final Node fromNode = nodeCache.get(from, loadNode(from, graphdb));"], [107, "      final Node toNode = nodeCache.get(to, loadNode(from, graphdb));"], [150, "  private Callable<Node> loadOrCreateNode(Callable<Node> loadNode,"], [151, "      ContextResource contextResource) {"], [152, "    return () -> {"], [153, "      Node node = loadNode.call();"], [154, "      if (node == null) {"], [155, "        node = graphdb.createNode(RESOURCE);"], [156, "        node.setProperty(\"uri\", contextResource.getUri());"], [157, "        if (contextResource.getGraphUri() != null) {"], [158, "          node.setProperty(\"graphUri\", contextResource.getGraphUri());"], [159, "        }"], [160, "      }"], [161, "      return node;"], [162, "    };"], [163, "  }"], [164, ""]], "deleted": [[11, "import java.util.NoSuchElementException;"], [23, "import org.neo4j.graphdb.Result;"], [74, "      final Node node = nodeCache.get(entry.getKey(), new Callable<Node>() {"], [75, "        @Override"], [76, "        public Node call() {"], [77, "          Node node = null;"], [78, "          Map<String, Object> params = new HashMap<>();"], [79, "          String cypher = buildCypher(entry.getKey().getUri(),"], [80, "              entry.getKey().getGraphUri(),"], [81, "              params);"], [82, "          Result result = graphdb.execute(cypher, params);"], [83, "          if (result.hasNext()) {"], [84, "            node = (Node) result.next().get(\"n\");"], [85, "            if (result.hasNext()) {"], [86, "              String props ="], [87, "                  \"{uri: \" + entry.getKey().getUri() +"], [88, "                      (entry.getKey().getGraphUri() == null ? \"}\" :"], [89, "                          \", graphUri: \" + entry.getKey().getGraphUri() + \"}\");"], [90, "              throw new IllegalStateException("], [91, "                  \"There are multiple matching nodes for the given properties \" + props);"], [92, "            }"], [93, "          }"], [94, "          if (node == null) {"], [95, "            node = graphdb.createNode(RESOURCE);"], [96, "            node.setProperty(\"uri\", entry.getKey().getUri());"], [97, "            if (entry.getKey().getGraphUri() != null) {"], [98, "              node.setProperty(\"graphUri\", entry.getKey().getGraphUri());"], [99, "            }"], [100, "          }"], [101, "          return node;"], [102, "        }"], [103, "      });"], [133, "      final Node fromNode = nodeCache.get(from, new Callable<Node>() {"], [134, "        @Override"], [135, "        public Node call() {  //throws AnyException"], [136, "          Node node;"], [137, "          Map<String, Object> params = new HashMap<>();"], [138, "          String cypher = buildCypher(st.getSubject().stringValue(),"], [139, "              st.getContext() != null ? st.getContext().stringValue() : null,"], [140, "              params);"], [141, "          Result result = graphdb.execute(cypher, params);"], [142, "          if (result.hasNext()) {"], [143, "            node = (Node) result.next().get(\"n\");"], [144, "            if (result.hasNext()) {"], [145, "              String props ="], [146, "                  \"{uri: \" + st.getSubject().stringValue() +"], [147, "                      (st.getContext() == null ? \"}\" :"], [148, "                          \", graphUri: \" + st.getContext().stringValue() + \"}\");"], [149, "              throw new IllegalStateException("], [150, "                  \"There are multiple matching nodes for the given properties \" + props);"], [151, "            }"], [152, "          } else {"], [153, "            throw new NoSuchElementException("], [154, "                \"There exists no node with \\\"uri\\\": \" + st.getSubject().stringValue()"], [155, "                    + \" and \\\"graphUri\\\": \" + st.getContext().stringValue());"], [156, "          }"], [157, "          return node;"], [158, "        }"], [159, "      });"], [162, "      final Node toNode = nodeCache.get(to, new Callable<Node>() {"], [163, "        @Override"], [164, "        public Node call() {  //throws AnyException"], [165, "          Node node;"], [166, "          Map<String, Object> params = new HashMap<>();"], [167, "          String cypher = buildCypher(st.getObject().stringValue(),"], [168, "              st.getContext() != null ? st.getContext().stringValue() : null,"], [169, "              params);"], [170, "          Result result = graphdb.execute(cypher, params);"], [171, "          if (result.hasNext()) {"], [172, "            node = (Node) result.next().get(\"n\");"], [173, "            if (result.hasNext()) {"], [174, "              String props ="], [175, "                  \"{uri: \" + st.getObject().stringValue() +"], [176, "                      (st.getContext() == null ? \"}\" :"], [177, "                          \", graphUri: \" + st.getContext().stringValue() + \"}\");"], [178, "              throw new IllegalStateException("], [179, "                  \"There are multiple matching nodes for the given properties \" + props);"], [180, "            }"], [181, "          } else {"], [182, "            throw new NoSuchElementException("], [183, "                \"There exists no node with \\\"uri\\\": \" + st.getSubject().stringValue()"], [184, "                    + \" and \\\"graphUri\\\": \" + st.getContext().stringValue());"], [185, "          }"], [186, "          return node;"], [187, "        }"], [188, "      });"]]}, "num_lines_added": 20, "num_lines_removed": 86}