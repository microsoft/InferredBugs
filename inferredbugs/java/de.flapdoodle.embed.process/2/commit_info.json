{"hash": "156d61aa9a65d8d651ed4b2a59d78d3e7d35b22e", "message": "Code refactorings (#68)\n\nrefactoring and clean up\r\n\r\n* refactor: use Arrays.asList instead of deprecated Collections.newArrayList\r\n\r\nBREAKING CHANGE: this removes embed.process.collections.Collections\r\n\r\n* style: remove unnecessary semicolon\r\n\r\n* style: remove unnecessary interface modifiers\r\n\r\n* refactor: simplify boolean expressions\r\n\r\n* refactor: inline redundant variables\r\n\r\n* refactor: remove duplicated throws clause\r\n\r\na more general exception is already declared\r\n\r\n* refactor: remove redundant throws clause\r\n\r\nno exception is thrown\r\n\r\n* refactor: replace if statement with boolean expression\r\n\r\n* refactor: remove unnecessary boxing\r\n\r\n* refactor: replace explicit type with <>\r\n\r\n* refactor: collapse identical catch clauses\r\n\r\n* refactor: use try-with-resources\r\n\r\n* refactor: use method reference\r\n\r\n* refactor: use Map.computeIfAbsent\r\n\r\n* refactor: replace stringbuilder with string\r\n\r\n* refactor: simplify expression\r\n\r\nproxy is always != null\r\n\r\n* refactor: add final modifier\r\n\r\n* style: remove unused imports", "file_num_lines": 123, "diff_parsed": {"added": [[26, "import de.flapdoodle.embed.process.io.directories.Directory;"], [27, "import de.flapdoodle.embed.process.io.directories.PropertyOrPlatformTempDir;"], [32, "import java.io.*;"], [33, "import java.util.UUID;"], [49, "\t\treturn createTempFile(PropertyOrPlatformTempDir.defaultInstance(), tempFileName);"], [52, "\tpublic static File createTempFile(Directory directory, String tempFileName) throws IOException {"], [57, "\tpublic static File createTempFile(File tempDir, String tempFileName) throws IOException {"], [84, "\t\treturn createTempDir(PropertyOrPlatformTempDir.defaultInstance(), prefix);"], [87, "\tpublic static File createTempDir(Directory directory, String prefix) throws IOException {"], [93, "\t\tFile tempFile = new File(tempDir, prefix + \"-\" + UUID.randomUUID().toString());"], [121, "\tpublic static void write(InputStream in, long size, File output) throws IOException {"], [122, "\t\ttry (FileOutputStream out = new FileOutputStream(output)) {"], [140, "\t\ttry (FileOutputStream out = new FileOutputStream(output)) {"], [150, "\t\ttry (final FileOutputStream out = new FileOutputStream(output);"], [151, "\t\t\t final OutputStreamWriter w = new OutputStreamWriter(out)) {"], [161, "\t\t\t\tjava.nio.file.Files.copy(source.toPath(), destination.toPath());"]], "deleted": [[26, "import java.io.File;"], [27, "import java.io.FileInputStream;"], [28, "import java.io.FileOutputStream;"], [29, "import java.io.IOException;"], [30, "import java.io.InputStream;"], [31, "import java.io.OutputStreamWriter;"], [32, "import java.util.UUID;"], [33, ""], [38, "import de.flapdoodle.embed.process.io.directories.Directory;"], [39, "import de.flapdoodle.embed.process.io.directories.PropertyOrPlatformTempDir;"], [55, "\t\treturn createTempFile(PropertyOrPlatformTempDir.defaultInstance(),"], [56, "\t\t\t\ttempFileName);"], [59, "\tpublic static File createTempFile(Directory directory, String tempFileName)"], [60, "\t\t\tthrows IOException {"], [65, "\tpublic static File createTempFile(File tempDir, String tempFileName) throws IOException, FileAlreadyExistsException {"], [92, "\t\treturn createTempDir(PropertyOrPlatformTempDir.defaultInstance(),"], [93, "\t\t\t\tprefix);"], [96, "\tpublic static File createTempDir(Directory directory, String prefix)"], [97, "\t\t\tthrows IOException {"], [103, "\t\tFile tempFile = new File(tempDir, prefix + \"-\""], [104, "\t\t\t\t+ UUID.randomUUID().toString());"], [132, "\tpublic static void write(InputStream in, long size, File output)"], [133, "\t\t\tthrows IOException {"], [134, "\t\tFileOutputStream out = new FileOutputStream(output);"], [135, "\t\ttry {"], [149, "\t\t} finally {"], [150, "\t\t\tout.close();"], [155, "\t\tFileOutputStream out = new FileOutputStream(output);"], [156, ""], [157, "\t\ttry {"], [163, "\t\t} finally {"], [164, "\t\t\tout.close();"], [169, "\t\tFileOutputStream out = new FileOutputStream(output);"], [170, "\t\tOutputStreamWriter w = new OutputStreamWriter(out);"], [171, ""], [172, "\t\ttry {"], [175, "\t\t} finally {"], [176, "\t\t\tout.close();"], [184, "\t\t\t\tcopyFile(source, destination);"], [193, "\tprivate static void copyFile(File source, File destination)"], [194, "\t\t\tthrows IOException {"], [195, "\t\tFileInputStream reader = null;"], [196, "\t\tFileOutputStream writer = null;"], [197, "\t\ttry {"], [198, "\t\t\treader = new FileInputStream(source);"], [199, "\t\t\twriter = new FileOutputStream(destination);"], [200, ""], [201, "\t\t\tint read;"], [202, "\t\t\tbyte[] buf = new byte[BYTE_BUFFER_LENGTH];"], [203, "\t\t\twhile ((read = reader.read(buf)) != -1) {"], [204, "\t\t\t\twriter.write(buf, 0, read);"], [205, "\t\t\t}"], [206, ""], [207, "\t\t} finally {"], [208, "\t\t\tif (reader != null)"], [209, "\t\t\t\treader.close();"], [210, "\t\t\tif (writer != null)"], [211, "\t\t\t\twriter.close();"], [212, "\t\t}"], [213, "\t}"], [214, ""]]}, "num_lines_added": 16, "num_lines_removed": 61}