{"hash": "8bf9413938e3b9248f2574cd7e693cdfe72ed263", "message": "use awaitility to await conditions", "file_num_lines": 129, "diff_parsed": {"added": [[7, "import java.net.ConnectException;"], [16, "import java.util.concurrent.TimeUnit;"], [17, "import org.awaitility.Awaitility;"], [18, "import org.slf4j.Logger;"], [19, "import org.slf4j.LoggerFactory;"], [24, "  private final static Logger LOGGER = LoggerFactory.getLogger(SonarQube.class);"], [25, ""], [113, "  public void waitForReady() throws MalformedURLException {"], [114, "    LOGGER.info(\"Waiting for SonarQube to be available at {}\", getUrl());"], [115, "    Awaitility"], [116, "        .await(\"SonarQube is ready\")"], [117, "        .atMost(3, TimeUnit.MINUTES)"], [118, "        .pollInterval(5, TimeUnit.SECONDS)"], [119, "        .ignoreExceptionsInstanceOf(ConnectException.class)"], [120, "        .until(this::isReady)"], [121, "    ;"], [124, "  private boolean isReady() throws IOException {"], [125, "    HttpURLConnection conn = (HttpURLConnection) getUrl(\"/api/settings/values.protobuf\").openConnection();"], [126, "    conn.connect();"], [127, "    int code = conn.getResponseCode();"], [128, "    return code == 200;"], [129, "  }"], [130, ""], [131, "  private URL getUrl(String file) throws MalformedURLException {"], [132, "    return new URL(\"http\", getHost(), getPort(), file);"], [135, "  public URL getUrl() throws MalformedURLException {"]], "deleted": [[106, "  public void waitForReady() {"], [107, "    while (true) {"], [108, "      System.out.println(\"Waiting for SonarQube to be available at \" + getUrl());"], [109, "      try {"], [110, "        HttpURLConnection conn = (HttpURLConnection)getUrl(\"/api/settings/values.protobuf\").openConnection();"], [111, "        conn.connect();"], [112, "        int code = conn.getResponseCode();"], [113, "        if (code == 200) {"], [114, "          break;"], [115, "        }"], [116, "      } catch (IOException e) {"], [117, "                /* noop */"], [118, "      }"], [119, "      try {"], [120, "        Thread.sleep(5000);"], [121, "      } catch (InterruptedException e) {"], [122, "                /* noop */"], [123, "      }"], [124, "    }"], [125, "    System.out.println(\"SonarQube is ready\");"], [128, "  private URL getUrl(String file) {"], [129, "    try {"], [130, "      return new URL(\"http\", getHost(), getPort(), file);"], [131, "    } catch (MalformedURLException e) {"], [132, "      return null;"], [133, "    }"], [136, "  public URL getUrl() {"]]}, "num_lines_added": 26, "num_lines_removed": 27}