{"hash": "46fcb72cb7306d9e86b6da6f62c347e85e1d1e8c", "message": "Adding multithreading support to SoftMaxRegression.", "file_num_lines": 219, "diff_parsed": {"added": [[18, "import com.datumbox.common.concurrency.StreamMethods;"], [30, "import com.datumbox.framework.machinelearning.common.interfaces.TrainParallelizable;"], [50, "public class SoftMaxRegression extends AbstractClassifier<SoftMaxRegression.ModelParameters, SoftMaxRegression.TrainingParameters, SoftMaxRegression.ValidationMetrics> implements PredictParallelizable, TrainParallelizable {"], [56, "        @BigMap(mapType=MapType.HASHMAP, storageHint=StorageHint.IN_MEMORY, concurrent=true)"], [250, "        }"], [251, ""], [252, "        StreamMethods.stream(trainingData.stream(), isParallelized()).forEach(r -> {"], [253, "            for(Object feature : r.getX().keySet()) {"], [254, "                for(Object theClass : classesSet) {"], [255, "                    thitas.putIfAbsent(Arrays.<Object>asList(feature, theClass), 0.0);"], [258, "        });"], [259, ""], [270, "            Map<List<Object>, Double> tmp_newThitas = dbc.getBigMap(\"tmp_newThitas\", MapType.HASHMAP, StorageHint.IN_MEMORY, true, true);"], [318, "        StreamMethods.stream(trainingData.stream(), isParallelized()).forEach(r -> {"], [334, "                synchronized(newThitas) {"], [335, "                    //update the weight of constant"], [336, "                    List<Object> featureClassTuple = Arrays.<Object>asList(Dataframe.COLUMN_NAME_CONSTANT, theClass);"], [337, "                    newThitas.put(featureClassTuple, newThitas.get(featureClassTuple)+errorMultiplier);"], [338, ""], [339, "                    //update the rest of the weights"], [340, "                    for(Map.Entry<Object, Object> entry : r.getX().entrySet()) {"], [341, "                        Double value = TypeInference.toDouble(entry.getValue());"], [343, "                        Object feature = entry.getKey();"], [344, "                        featureClassTuple = Arrays.<Object>asList(feature, theClass);"], [346, "                        Double thitaWeight = newThitas.get(featureClassTuple);"], [347, "                        if(thitaWeight!=null) {//ensure that the feature is in the dictionary"], [348, "                            newThitas.put(featureClassTuple, thitaWeight+errorMultiplier*value);"], [349, "                        }"], [353, "        });"], [379, "        double error = StreamMethods.stream(trainingData.stream(), isParallelized()).mapToDouble(r -> {"], [382, "            return Math.log(score); //no need to loop through the categories. Just grab the one that we are interested in"], [383, "        }).sum();"]], "deleted": [[48, "public class SoftMaxRegression extends AbstractClassifier<SoftMaxRegression.ModelParameters, SoftMaxRegression.TrainingParameters, SoftMaxRegression.ValidationMetrics> implements PredictParallelizable {"], [54, "        @BigMap(mapType=MapType.HASHMAP, storageHint=StorageHint.IN_MEMORY, concurrent=false)"], [248, ""], [249, "            for(Record r : trainingData) {"], [250, "                for(Object feature : r.getX().keySet()) {"], [251, "                    thitas.put(Arrays.<Object>asList(feature, theClass), 0.0);"], [254, "        }"], [265, "            Map<List<Object>, Double> tmp_newThitas = dbc.getBigMap(\"tmp_newThitas\", MapType.HASHMAP, StorageHint.IN_MEMORY, false, true);"], [313, "        for(Record r : trainingData) {"], [329, ""], [330, "                //update the weight of constant"], [331, "                List<Object> featureClassTuple = Arrays.<Object>asList(Dataframe.COLUMN_NAME_CONSTANT, theClass);"], [332, "                newThitas.put(featureClassTuple, newThitas.get(featureClassTuple)+errorMultiplier);"], [333, ""], [334, "                //update the rest of the weights"], [335, ""], [336, "                for(Map.Entry<Object, Object> entry : r.getX().entrySet()) {"], [337, "                    Double value = TypeInference.toDouble(entry.getValue());"], [339, "                    Object feature = entry.getKey();"], [340, "                    featureClassTuple = Arrays.<Object>asList(feature, theClass);"], [342, "                    Double thitaWeight = newThitas.get(featureClassTuple);"], [343, "                    if(thitaWeight!=null) {//ensure that the feature is in the dictionary"], [344, "                        newThitas.put(featureClassTuple, thitaWeight+errorMultiplier*value);"], [348, "        }"], [373, "        double error=0.0;"], [375, "        for(Record r : trainingData) {"], [378, "            error+=Math.log(score); //no need to loop through the categories. Just grab the one that we are interested in"], [379, "        }"]]}, "num_lines_added": 32, "num_lines_removed": 28}