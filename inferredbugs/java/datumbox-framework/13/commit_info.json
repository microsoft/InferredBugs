{"hash": "fdd2f69dd4709c40cb5f55d1ea984796ee9fbde8", "message": "Make BaseMLrecommender to inherite from BaseMLmodel. User-based CF algorithm is modified to be more generic. Tests will now fail if the external datasets can't be downloaded.", "file_num_lines": 177, "diff_parsed": {"added": [[29, "import com.datumbox.framework.machinelearning.common.validation.CollaborativeFilteringValidation;"], [45, "public class CollaborativeFiltering extends BaseMLrecommender<CollaborativeFiltering.ModelParameters, CollaborativeFiltering.TrainingParameters, CollaborativeFiltering.ValidationMetrics> {"], [138, "     * The ValidationMetrics class stores information about the performance of the"], [139, "     * algorithm."], [140, "     */"], [141, "    public static class ValidationMetrics extends BaseMLrecommender.ValidationMetrics {"], [142, "        private static final long serialVersionUID = 1L;"], [143, ""], [144, "        private double RMSE = 0.0;"], [145, ""], [146, "        /**"], [147, "         * Getter for Root-mean-square deviation."], [148, "         *"], [149, "         * @return"], [150, "         */"], [151, "        public double getRMSE() {"], [152, "            return RMSE;"], [153, "        }"], [154, ""], [155, "        /**"], [156, "         * Setter for Root-mean-square deviation."], [157, "         *"], [158, "         * @param RMSE"], [159, "         */"], [160, "        public void setRMSE(double RMSE) {"], [161, "            this.RMSE = RMSE;"], [162, "        }"], [163, "    }"], [164, ""], [165, "    /**"], [172, "        super(dbName, dbConf, CollaborativeFiltering.ModelParameters.class, CollaborativeFiltering.TrainingParameters.class, CollaborativeFiltering.ValidationMetrics.class, new CollaborativeFilteringValidation<>());"], [182, "            Object y1 = r1.getY();"], [192, ""], [193, "                similarities.put(tkp, similarity);"], [194, "                similarities.put(Arrays.asList(y2, y1), similarity); //add also for the reverse key because similarity is symmetric"], [201, "        _predictDataset(newData, false);"], [202, "    }"], [203, ""], [204, "    private void _predictDataset(Dataframe newData, boolean includeRated) {"], [235, "                    if(includeRated == true || !r.getX().containsKey(column)) {"], [236, "                        recommendations.put(column, previousRecValue+similarity*score);"], [237, "                    }"], [250, "            recommendations = MapFunctions.sortNumberMapByValueDescending(recommendations);"], [251, "            newData._unsafe_set(rId, new Record(r.getX(), r.getY(), recommendations.keySet().iterator().next(), new AssociativeArray(recommendations)));"], [291, ""], [292, "            //Pearson's correlation goes from -1 to 1. This will mess up the"], [293, "            //scaling of the rates. As a result we need to rescale it rescale it to 0-1 range."], [294, "            similarity = (similarity+1.0)/2.0;"], [303, "    @Override"], [304, "    protected ValidationMetrics validateModel(Dataframe validationData) {"], [305, "        _predictDataset(validationData, true);"], [306, ""], [307, "        //create new validation metrics object"], [308, "        ValidationMetrics validationMetrics = knowledgeBase.getEmptyValidationMetricsObject();"], [309, ""], [310, "        double RMSE = 0.0;"], [311, "        int i = 0;"], [312, "        for(Record r : validationData) {"], [313, "            AssociativeArray predictions = r.getYPredictedProbabilities();"], [314, "            for(Map.Entry<Object, Object> entry : r.getX().entrySet()) {"], [315, "                Object column = entry.getKey();"], [316, "                Object value = entry.getValue();"], [317, "                RMSE += Math.pow(TypeInference.toDouble(value)-TypeInference.toDouble(predictions.get(column)), 2.0);"], [318, "                ++i;"], [319, "            }"], [320, "        }"], [321, ""], [322, "        RMSE = Math.sqrt(RMSE/i);"], [323, "        validationMetrics.setRMSE(RMSE);"], [324, ""], [325, "        return validationMetrics;"], [326, "    }"]], "deleted": [[36, "import java.util.Objects;"], [45, "public class CollaborativeFiltering extends BaseMLrecommender<CollaborativeFiltering.ModelParameters, CollaborativeFiltering.TrainingParameters> {"], [144, "        super(dbName, dbConf, CollaborativeFiltering.ModelParameters.class, CollaborativeFiltering.TrainingParameters.class);"], [155, "                Object y1 = r1.getY();"], [158, "                if(Objects.equals(y1, y2)) {"], [159, "                    continue;"], [160, "                }"], [161, ""], [168, "                if(similarity>0) {"], [169, "                    similarities.put(tkp, similarity);"], [170, "                    similarities.put(Arrays.asList(y2, y1), similarity); //add also for the reverse key because similarity is symmetric"], [171, "                }"], [191, "                //Since we can't use 2D Maps due to mongo, we are forced to loop"], [192, "                //the whole similarities map which is very inefficient."], [200, "                    if(r.getX().containsKey(column)) {"], [201, "                        continue; // they already rated this"], [202, "                    }"], [213, "                    recommendations.put(column, previousRecValue+similarity*score);"], [226, "            if(!recommendations.isEmpty()) {"], [227, "                //sort recommendation by popularity"], [228, "                recommendations = MapFunctions.sortNumberMapByValueDescending(recommendations);"], [229, "                newData._unsafe_set(rId, new Record(r.getX(), r.getY(), recommendations.keySet().iterator().next(), new AssociativeArray(recommendations)));"], [230, "            }"]]}, "num_lines_added": 72, "num_lines_removed": 23}