{"hash": "2b16514ed636ea0aaa3af0a1676910e9e0cf3f40", "message": "Adding multithreading support to NLMS.", "file_num_lines": 139, "diff_parsed": {"added": [[18, "import com.datumbox.common.concurrency.StreamMethods;"], [216, "        StreamMethods.stream(trainingData.stream(), isParallelized()).forEach(r -> {"], [222, "            synchronized(newThitas) {"], [223, "                //update the weight of constant"], [224, "                newThitas.put(Dataframe.COLUMN_NAME_CONSTANT, newThitas.get(Dataframe.COLUMN_NAME_CONSTANT)+errorMultiplier);"], [226, "                //update the rest of the weights"], [227, "                for(Map.Entry<Object, Object> entry : r.getX().entrySet()) {"], [228, "                    Object feature = entry.getKey();"], [229, ""], [230, "                    Double thitaWeight = newThitas.get(feature);"], [231, "                    if(thitaWeight!=null) {//ensure that the feature is in the supported features"], [232, "                        Double value = TypeInference.toDouble(entry.getValue());"], [233, "                        newThitas.put(feature, thitaWeight+errorMultiplier*value);"], [234, "                    }"], [237, "        });"], [272, "        double error = StreamMethods.stream(trainingData.entries(), isParallelized()).mapToDouble(e -> {"], [277, "            return Math.pow(TypeInference.toDouble(r.getY()) -yPredicted, 2);"], [278, "        }).sum();"]], "deleted": [[215, "        for(Record r : trainingData) {"], [221, ""], [222, "            //update the weight of constant"], [223, "            newThitas.put(Dataframe.COLUMN_NAME_CONSTANT, newThitas.get(Dataframe.COLUMN_NAME_CONSTANT)+errorMultiplier);"], [225, "            //update the rest of the weights"], [226, "            for(Map.Entry<Object, Object> entry : r.getX().entrySet()) {"], [227, "                Object feature = entry.getKey();"], [228, ""], [229, "                Double thitaWeight = newThitas.get(feature);"], [230, "                if(thitaWeight!=null) {//ensure that the feature is in the supported features"], [231, "                    Double value = TypeInference.toDouble(entry.getValue());"], [232, "                    newThitas.put(feature, thitaWeight+errorMultiplier*value);"], [235, "        }"], [269, "        double error=0.0;"], [271, "        for(Map.Entry<Integer, Record> e : trainingData.entries()) {"], [276, "            error+=Math.pow(TypeInference.toDouble(r.getY()) -yPredicted, 2);"], [277, "        }"]]}, "num_lines_added": 18, "num_lines_removed": 17}