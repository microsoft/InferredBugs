{"hash": "5446e6608f9e1ecc1b1b1cba997ed1844b8847bd", "message": "added storm kafka spout client monitor", "file_num_lines": 484, "diff_parsed": {"added": [[76, "    if (o.isEmpty() || o.get() == null) {"], [78, "      return 0;"], [156, "      StormkafkaPartitionInfo pInfo;"], [157, "      DateTime creation;"], [158, "      DateTime modified;"], [159, "      try {"], [160, "        Stat stat = new Stat();"], [161, "        String msg = zkClient.readData("], [162, "          String.format("], [163, "            \"%s/%s/partition_%d\","], [164, "            zkRoot,"], [165, "            clientId,"], [166, "            pid"], [167, "          ), stat"], [168, "        );"], [169, "        creation = new DateTime(stat.getCtime());"], [170, "        modified = new DateTime(stat.getMtime());"], [171, "        pInfo = Resources.jsonMapper.readValue(msg, StormkafkaPartitionInfo.class);"], [172, "      }catch (Exception e) {"], [173, "        log.warn(\"Storm kafka clientId[%s], partition[%d] not found\", clientId, pid);"], [174, "        pInfo = new StormkafkaPartitionInfo();"], [175, "        pInfo.offset = 0;"], [176, "        pInfo.partition = 0;"], [177, "        pInfo.topic = \"unkown\";"], [178, "        pInfo.topology = new StormTopology();"], [179, "        pInfo.topology.topoName = \"unknown\";"], [180, "        pInfo.topology.workerId = \"unknown\";"], [181, "        creation = new DateTime();"], [182, "        modified = new DateTime();"], [183, "      }"], [191, "      info.offset = pInfo.offset;"], [193, "      info.lag = logSize - pInfo.offset;"], [202, "      log.warn(e, \"Could not parse storm kafka partition info. clientId: [%s] topic: [%d]\", clientId, pid);"], [210, "      return Collections.emptyList();"], [351, "          List<PartitionInfo> infos = getStormkafkaPartitionInfos(id);"], [352, "          for (PartitionInfo info : infos) {"], [353, "            if (!\"unkown\".equals(info.topic)){"], [354, "              it.topic = info.topic;"], [355, "              break;"], [356, "            }"], [358, "          return it;"]], "deleted": [[76, "    if (o.get() == null) {"], [155, "      Stat stat = new Stat();"], [156, "      String msg = zkClient.readData("], [157, "        String.format("], [158, "          \"%s/%s/partition_%d\","], [159, "          zkRoot,"], [160, "          clientId,"], [161, "          pid"], [162, "        ), stat"], [163, "      );"], [164, "      StormkafkaPartitionInfo pInfo = Resources.jsonMapper.readValue(msg, StormkafkaPartitionInfo.class);"], [165, ""], [166, "      Long offset = pInfo.offset;"], [167, "      DateTime creation = new DateTime(stat.getCtime());"], [168, "      DateTime modified = new DateTime(stat.getMtime());"], [176, "      info.offset = offset;"], [178, "      info.lag = logSize - offset;"], [187, "      log.error(e, \"Could not parse storm kafka partition info. clientId: [%s] topic: [%d]\", clientId, pid);"], [195, "      return null;"], [336, "          PartitionInfo info = getStormKafkaPartitionInfo(id, 0);"], [337, "          if (info == null) {"], [338, "            return it;"], [339, "          } else {"], [340, "            it.topic = info.topic;"], [341, "            return it;"]]}, "num_lines_added": 41, "num_lines_removed": 25}