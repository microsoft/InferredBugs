{"hash": "412052e4feafc7716594b49c69ff37b4f8127723", "message": "Print warnings when there is a skipped migration or a missing migration script.", "file_num_lines": 60, "diff_parsed": {"added": [[2, " *    Copyright 2010-2018 the original author or authors."], [50, "    List<Change> changesInDb = getChangelog(connectionProvider, option);"], [51, "    List<Change> migrations = migrationsLoader.getMigrations();"], [52, "    Change specified = new Change(version);"], [53, "    if (!migrations.contains(specified)) {"], [54, "      throw new MigrationException(\"A migration for the specified version number does not exist.\");"], [55, "    }"], [56, "    Change lastChangeInDb = changesInDb.isEmpty() ? null : changesInDb.get(changesInDb.size() - 1);"], [57, "    if (lastChangeInDb == null || specified.compareTo(lastChangeInDb) > 0) {"], [59, "      int steps = 0;"], [60, "      for (Change change : migrations) {"], [61, "        if (change.compareTo(lastChangeInDb) > 0 && change.compareTo(specified) < 1) {"], [62, "          steps++;"], [63, "        }"], [65, "      new UpOperation(steps).operate(connectionProvider, migrationsLoader, option, printStream, upHook);"], [66, "    } else if (specified.compareTo(lastChangeInDb) < 0) {"], [68, "      int steps = 0;"], [69, "      for (Change change : migrations) {"], [70, "        if (change.compareTo(specified) > -1 && change.compareTo(lastChangeInDb) < 0) {"], [71, "          steps++;"], [72, "        }"], [74, "      new DownOperation(steps).operate(connectionProvider, migrationsLoader, option, printStream, downHook);"]], "deleted": [[2, " *    Copyright 2010-2017 the original author or authors."], [50, "    ensureVersionExists(migrationsLoader);"], [51, "    Change change = getLastAppliedChange(connectionProvider, option);"], [52, "    if (change == null || version.compareTo(change.getId()) > 0) {"], [54, "      UpOperation up = new UpOperation(1);"], [55, "      while (!version.equals(change.getId())) {"], [56, "        up.operate(connectionProvider, migrationsLoader, option, printStream, upHook);"], [57, "        change = getLastAppliedChange(connectionProvider, option);"], [59, "    } else if (version.compareTo(change.getId()) < 0) {"], [61, "      DownOperation down = new DownOperation(1);"], [62, "      while (!version.equals(change.getId())) {"], [63, "        down.operate(connectionProvider, migrationsLoader, option, printStream, downHook);"], [64, "        change = getLastAppliedChange(connectionProvider, option);"], [72, ""], [73, "  private void ensureVersionExists(MigrationLoader migrationsLoader) {"], [74, "    List<Change> migrations = migrationsLoader.getMigrations();"], [75, "    if (!migrations.contains(new Change(version))) {"], [76, "      throw new MigrationException(\"A migration for the specified version number does not exist.\");"], [77, "    }"], [78, "  }"]]}, "num_lines_added": 22, "num_lines_removed": 20}