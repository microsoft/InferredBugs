  public VersionOperation operate(ConnectionProvider connectionProvider, MigrationLoader migrationsLoader,
      DatabaseOperationOption option, PrintStream printStream, MigrationHook upHook, MigrationHook downHook) {
    if (option == null) {
      option = new DatabaseOperationOption();
    }
    List<Change> changesInDb = getChangelog(connectionProvider, option);
    List<Change> migrations = migrationsLoader.getMigrations();
    Change specified = new Change(version);
    if (!migrations.contains(specified)) {
      throw new MigrationException("A migration for the specified version number does not exist.");
    }
    Change lastChangeInDb = changesInDb.isEmpty() ? null : changesInDb.get(changesInDb.size() - 1);
    if (lastChangeInDb == null || specified.compareTo(lastChangeInDb) > 0) {
      println(printStream, "Upgrading to: " + version);
      int steps = 0;
      for (Change change : migrations) {
        if (change.compareTo(lastChangeInDb) > 0 && change.compareTo(specified) < 1) {
          steps++;
        }
      }
      new UpOperation(steps).operate(connectionProvider, migrationsLoader, option, printStream, upHook);
    } else if (specified.compareTo(lastChangeInDb) < 0) {
      println(printStream, "Downgrading to: " + version);
      int steps = 0;
      for (Change change : migrations) {
        if (change.compareTo(specified) > -1 && change.compareTo(lastChangeInDb) < 0) {
          steps++;
        }
      }
      new DownOperation(steps).operate(connectionProvider, migrationsLoader, option, printStream, downHook);
    } else {
      println(printStream, "Already at version: " + version);
    }
    println(printStream);
    return this;
  }