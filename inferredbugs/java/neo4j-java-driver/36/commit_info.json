{"hash": "668815c49075349338a4c4c2b5b9049dc50f48ed", "message": "Close connection pool if driver creation fails\n\nConnection pool (`SocketConnectionPool`) is created before drivers and was\nnever closed if driver creation failed. This was especially possible with\n`RoutingDriver` which tries to build routing table in constructor.\n\nThis commit adds closing of the connection pool when creation of driver fails.\nIt also extracts driver creation logic into an internal class `DriverFactory`\nto make it testable.", "file_num_lines": 39, "diff_parsed": {"added": [[23, "import org.neo4j.driver.internal.DriverFactory;"], [126, "        config = config == null ? Config.defaultConfig() : config;"], [128, "        return new DriverFactory().newInstance( uri, authToken, config.routingSettings(), config );"]], "deleted": [[21, "import java.io.IOException;"], [23, "import java.security.GeneralSecurityException;"], [25, "import org.neo4j.driver.internal.ConnectionSettings;"], [26, "import org.neo4j.driver.internal.DirectDriver;"], [27, "import org.neo4j.driver.internal.NetworkSession;"], [28, "import org.neo4j.driver.internal.RoutingDriver;"], [29, "import org.neo4j.driver.internal.net.BoltServerAddress;"], [30, "import org.neo4j.driver.internal.net.SocketConnector;"], [31, "import org.neo4j.driver.internal.net.pooling.PoolSettings;"], [32, "import org.neo4j.driver.internal.net.pooling.SocketConnectionPool;"], [33, "import org.neo4j.driver.internal.security.SecurityPlan;"], [34, "import org.neo4j.driver.internal.spi.Connection;"], [35, "import org.neo4j.driver.internal.spi.ConnectionPool;"], [36, "import org.neo4j.driver.internal.spi.Connector;"], [37, "import org.neo4j.driver.internal.util.Clock;"], [38, "import org.neo4j.driver.v1.exceptions.ClientException;"], [39, "import org.neo4j.driver.v1.util.Function;"], [40, ""], [41, "import static java.lang.String.format;"], [42, "import static org.neo4j.driver.internal.security.SecurityPlan.insecure;"], [43, "import static org.neo4j.driver.v1.Config.EncryptionLevel.REQUIRED;"], [52, ""], [53, "    private static final Function<Connection,Session>"], [54, "            SESSION_PROVIDER = new Function<Connection,Session>()"], [55, "    {"], [56, "        @Override"], [57, "        public Session apply( Connection connection )"], [58, "        {"], [59, "            return new NetworkSession( connection );"], [60, "        }"], [61, "    };"], [62, ""], [156, "        // Break down the URI into its constituent parts"], [157, "        String scheme = uri.getScheme();"], [158, "        BoltServerAddress address = BoltServerAddress.from( uri );"], [159, ""], [161, "        if ( config == null )"], [162, "        {"], [163, "            config = Config.defaultConfig();"], [164, "        }"], [165, ""], [166, "        // Construct security plan"], [167, "        SecurityPlan securityPlan;"], [168, "        try"], [169, "        {"], [170, "            securityPlan = createSecurityPlan( address, config );"], [171, "        }"], [172, "        catch ( GeneralSecurityException | IOException ex )"], [173, "        {"], [174, "            throw new ClientException( \"Unable to establish SSL parameters\", ex );"], [175, "        }"], [176, ""], [177, "        ConnectionPool connectionPool = createConnectionPool( authToken, securityPlan, config );"], [178, ""], [179, "        switch ( scheme.toLowerCase() )"], [180, "        {"], [181, "        case \"bolt\":"], [182, "            return new DirectDriver( address, connectionPool, securityPlan, config.logging() );"], [183, "        case \"bolt+routing\":"], [184, "            return new RoutingDriver("], [185, "                    config.routingSettings(),"], [186, "                    address,"], [187, "                    connectionPool,"], [188, "                    securityPlan,"], [189, "                    Clock.SYSTEM,"], [190, "                    config.logging() );"], [191, "        default:"], [192, "            throw new ClientException( format( \"Unsupported URI scheme: %s\", scheme ) );"], [193, "        }"], [194, "    }"], [195, ""], [196, "    private static ConnectionPool createConnectionPool( AuthToken authToken, SecurityPlan securityPlan,"], [197, "            Config config )"], [198, "    {"], [199, "        authToken = authToken == null ? AuthTokens.none() : authToken;"], [200, ""], [201, "        ConnectionSettings connectionSettings = new ConnectionSettings( authToken );"], [202, "        PoolSettings poolSettings = new PoolSettings( config.maxIdleConnectionPoolSize() );"], [203, "        Connector connector = new SocketConnector( connectionSettings, securityPlan, config.logging() );"], [204, ""], [205, "        return new SocketConnectionPool( poolSettings, connector, Clock.SYSTEM, config.logging() );"], [206, "    }"], [207, ""], [208, "    /*"], [209, "     * Establish a complete SecurityPlan based on the details provided for"], [210, "     * driver construction."], [211, "     */"], [212, "    private static SecurityPlan createSecurityPlan( BoltServerAddress address, Config config )"], [213, "            throws GeneralSecurityException, IOException"], [214, "    {"], [215, "        Config.EncryptionLevel encryptionLevel = config.encryptionLevel();"], [216, "        boolean requiresEncryption = encryptionLevel.equals( REQUIRED );"], [217, ""], [218, "        if ( requiresEncryption )"], [219, "        {"], [220, "            Logger logger = config.logging().getLog( \"session\" );"], [221, "            switch ( config.trustStrategy().strategy() )"], [222, "            {"], [223, ""], [224, "            // DEPRECATED CASES //"], [225, "            case TRUST_ON_FIRST_USE:"], [226, "                logger.warn("], [227, "                        \"Option `TRUST_ON_FIRST_USE` has been deprecated and will be removed in a future \" +"], [228, "                        \"version of the driver. Please switch to use `TRUST_ALL_CERTIFICATES` instead.\" );"], [229, "                return SecurityPlan.forTrustOnFirstUse( config.trustStrategy().certFile(), address, logger );"], [230, "            case TRUST_SIGNED_CERTIFICATES:"], [231, "                logger.warn("], [232, "                        \"Option `TRUST_SIGNED_CERTIFICATE` has been deprecated and will be removed in a future \" +"], [233, "                        \"version of the driver. Please switch to use `TRUST_CUSTOM_CA_SIGNED_CERTIFICATES` instead.\" );"], [234, "                // intentional fallthrough"], [235, "            // END OF DEPRECATED CASES //"], [237, "            case TRUST_CUSTOM_CA_SIGNED_CERTIFICATES:"], [238, "                return SecurityPlan.forCustomCASignedCertificates( config.trustStrategy().certFile() );"], [239, "            case TRUST_SYSTEM_CA_SIGNED_CERTIFICATES:"], [240, "                return SecurityPlan.forSystemCASignedCertificates();"], [241, "            case TRUST_ALL_CERTIFICATES:"], [242, "                return SecurityPlan.forAllCertificates();"], [243, "            default:"], [244, "                throw new ClientException("], [245, "                        \"Unknown TLS authentication strategy: \" + config.trustStrategy().strategy().name() );"], [246, "            }"], [247, "        }"], [248, "        else"], [249, "        {"], [250, "            return insecure();"], [251, "        }"]]}, "num_lines_added": 3, "num_lines_removed": 126}