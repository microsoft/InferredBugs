{"hash": "4b0c5aa995263b82392e883165b2dacc59a9cffd", "message": "Close connection if init failed\n\nInit message is send every time we establish a new socket connection. This is\nthe very first thing connection does. It is possible for the init to fail\n(for example when credentials are wrong). Previously socket connection was not\nclosed after such init failure.\n\nThis commit changes `SocketConnector` to close connection on any init failure.", "file_num_lines": 121, "diff_parsed": {"added": [[37, "import static org.junit.Assert.assertSame;"], [41, "import static org.mockito.Matchers.anyString;"], [44, "import static org.mockito.Mockito.doThrow;"], [56, "        SocketConnector connector = new RecordingSocketConnector( settings );"], [69, "        RecordingSocketConnector connector = new RecordingSocketConnector( settings );"], [82, "        RecordingSocketConnector connector = new RecordingSocketConnector( settings );"], [95, "    @Test"], [96, "    @SuppressWarnings( \"unchecked\" )"], [97, "    public void connectClosesOpenedConnectionIfInitThrows()"], [98, "    {"], [99, "        Connection connection = mock( Connection.class );"], [100, "        RuntimeException initError = new RuntimeException( \"Init error\" );"], [101, "        doThrow( initError ).when( connection ).init( anyString(), any( Map.class ) );"], [102, ""], [103, "        StubSocketConnector connector = new StubSocketConnector( connection );"], [104, ""], [105, "        try"], [106, "        {"], [107, "            connector.connect( LOCAL_DEFAULT );"], [108, "            fail( \"Exception expected\" );"], [109, "        }"], [110, "        catch ( Exception e )"], [111, "        {"], [112, "            assertSame( initError, e );"], [113, "        }"], [114, ""], [115, "        verify( connection ).close();"], [116, "    }"], [117, ""], [128, "    private static class RecordingSocketConnector extends SocketConnector"], [132, "        RecordingSocketConnector( ConnectionSettings settings )"], [134, "            super( settings, SecurityPlan.insecure(), loggingMock() );"], [146, ""], [147, "    private static class StubSocketConnector extends SocketConnector"], [148, "    {"], [149, "        final Connection connection;"], [150, ""], [151, "        StubSocketConnector( Connection connection )"], [152, "        {"], [153, "            super( new ConnectionSettings( basicAuthToken() ), SecurityPlan.insecure(), loggingMock() );"], [154, "            this.connection = connection;"], [155, "        }"], [156, ""], [157, "        @Override"], [158, "        Connection createConnection( BoltServerAddress address, SecurityPlan securityPlan, Logging logging )"], [159, "        {"], [160, "            return connection;"], [161, "        }"], [162, "    }"]], "deleted": [[46, "import static org.neo4j.driver.internal.security.SecurityPlan.insecure;"], [54, "        SocketConnector connector = new TestSocketConnector( settings, insecure(), loggingMock() );"], [67, "        TestSocketConnector connector = new TestSocketConnector( settings, insecure(), loggingMock() );"], [80, "        TestSocketConnector connector = new TestSocketConnector( settings, insecure(), loggingMock() );"], [103, "    private static class TestSocketConnector extends SocketConnector"], [107, "        TestSocketConnector( ConnectionSettings settings, SecurityPlan securityPlan, Logging logging )"], [109, "            super( settings, securityPlan, logging );"]]}, "num_lines_added": 49, "num_lines_removed": 7}