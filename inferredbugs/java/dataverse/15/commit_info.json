{"hash": "9ee864799e0da04bb2f9eb1875a40204b26f0414", "message": "Restrict unprivileged users from seeing unpublished dataset versions\n\nAlso, use jQuery for DV desc counter", "file_num_lines": 531, "diff_parsed": {"added": [[77, "    PermissionServiceBean permissionServiceBean;"], [78, "    @EJB"], [204, "                if (canIssueUpdateCommand()){"], [205, "                   displayVersion = dataset.getLatestVersion();"], [206, "                } else {"], [207, "                   displayVersion = dataset.getReleasedVersion();"], [208, "                }"], [211, "            }"], [212, ""], [230, ""], [231, "            setVersionTabList(resetVersionTabList());"], [664, "    private List<DatasetVersion> versionTabList = new ArrayList();"], [666, "    public List<DatasetVersion> getVersionTabList() {"], [667, "        return versionTabList;"], [670, "    public void setVersionTabList(List<DatasetVersion> versionTabList) {"], [671, "        this.versionTabList = versionTabList;"], [673, ""], [674, "    private boolean canIssueUpdateCommand(){"], [675, "        try {"], [676, "            if (permissionServiceBean.on(dataset).canIssueCommand(\"UpdateDatasetCommand\")) {"], [677, "                return true;"], [678, "            } else {"], [679, "                return false;"], [681, "        } catch (ClassNotFoundException ex) {"], [684, "        return false;"], [686, ""], [687, "    private List<DatasetVersion> resetVersionTabList() {"], [688, "        List <DatasetVersion> retList = new ArrayList();"], [690, "            if (canIssueUpdateCommand()) {"], [691, "                return dataset.getVersions();"], [692, "            } else {"], [693, "                for(DatasetVersion version: dataset.getVersions()){"], [694, "                    if (version.isReleased()){"], [695, "                        retList.add(version);"], [696, "                    }"], [697, "                }"], [698, "                return retList;"], [699, ""], [700, "            }"], [701, "    }"], [702, ""]], "deleted": [[202, "                displayVersion = dataset.getLatestVersion();"], [205, "            }"], [336, "        //TODO update title in page itself"], [337, "        if (replicationFor) {"], [338, "            updateTitle();"], [339, "        }"], [659, "    //boolean for adding \"Replication for\" to title"], [660, "    private boolean replicationFor;"], [662, "    public boolean isReplicationFor() {"], [663, "        return replicationFor;"], [666, "    public void setReplicationFor(boolean replicationFor) {"], [667, "        this.replicationFor = replicationFor;"], [669, ""], [670, "    private void updateTitle() {"], [671, "        System.out.print(replicationFor);"], [672, ""], [673, "        Iterator<DatasetField> dsfIt = dataset.getEditVersion().getDatasetFields().iterator();"], [674, "        while (dsfIt.hasNext()) {"], [675, ""], [676, "            DatasetField toUpdate = dsfIt.next();"], [677, "            if (toUpdate.getDatasetFieldType().getName().equals(DatasetFieldConstant.title)) {"], [678, "                //dsfIt.s"], [682, "        int i = 0;"], [683, "        for (DatasetField dsf : editVersion.getDatasetFields()) {"], [684, "            if (dsf.getDatasetFieldType().getName().equals(DatasetFieldConstant.title)) {"], [685, "                ArrayList<DatasetFieldValue> valList = new ArrayList();"], [686, "                DatasetFieldValue dsfv = new DatasetFieldValue(dsf);"], [687, "                String origVal = dsf.getValue();"], [688, "                dsfv.setValue(\"Replication for: \" + origVal);"], [689, "                valList.add(dsfv);"], [690, "                editVersion.getDatasetFields().get(i).setDatasetFieldValues(valList);"], [691, "            }"], [692, "            i++;"], [693, "        }"]]}, "num_lines_added": 41, "num_lines_removed": 34}