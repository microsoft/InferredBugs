{"hash": "545083e237a5df2cb0a6140d1a24196a30da83ed", "message": "\u589e\u52a0\u652f\u6301serviceSignature\u7684NamingService\u5b9e\u73b0\n\n\u6539\u8fdbProtobufRpcProxy\uff0c\u6bcf\u4e2aProtobufRpc\u5ba2\u6237\u7aef\u4f7f\u7528\u72ec\u7acb\u7684RpcChannel\u7ba1\u7406", "file_num_lines": 194, "diff_parsed": {"added": [[18, "import java.lang.reflect.Method;"], [21, "import java.util.Collection;"], [23, "import java.util.Iterator;"], [26, "import java.util.Map.Entry;"], [27, "import java.util.Set;"], [28, "import java.util.concurrent.atomic.AtomicBoolean;"], [37, "import com.baidu.jprotobuf.pbrpc.ProtobufRPC;"], [45, "import com.baidu.jprotobuf.pbrpc.utils.StringUtils;"], [65, "    private Map<String, Object> instancesMap = new HashMap<String, Object>();"], [66, "    private Map<String, LoadBalanceProxyFactoryBean> lbMap = new HashMap<String, LoadBalanceProxyFactoryBean>();"], [67, "    private Map<String, List<ProtobufRpcProxy<T>>> protobufRpcProxyListMap ="], [68, "            new HashMap<String, List<ProtobufRpcProxy<T>>>();"], [69, ""], [70, "    private AtomicBoolean proxied = new AtomicBoolean(false);"], [71, ""], [119, "        if (proxied.compareAndSet(false, true)) {"], [120, "            ProtobufRpcProxy<T> protobufRpcProxy = onBuildProtobufRpcProxy(rpcClient, interfaceClass);"], [122, "            // get server list from NamingService"], [123, "            Map<String, List<InetSocketAddress>> servers = namingService.list(protobufRpcProxy.getServiceSignatures());"], [124, "            // start update naming service task"], [125, "            startUpdateNamingServiceTask(servers);"], [126, ""], [127, "            createServiceProxy(servers);"], [128, "        }"], [132, ""], [133, "    private void createServiceProxy(Map<String, List<InetSocketAddress>> servers) throws Exception {"], [134, ""], [135, "        Iterator<Entry<String, List<InetSocketAddress>>> iter = servers.entrySet().iterator();"], [136, "        while (iter.hasNext()) {"], [137, "            Entry<String, List<InetSocketAddress>> next = iter.next();"], [138, "            doProxy(next.getKey(), next.getValue());"], [139, "        }"], [140, "    }"], [141, ""], [147, "    private void doProxy(String service, List<InetSocketAddress> serversList) throws Exception {"], [153, "        LoadBalanceProxyFactoryBean lbProxyBean = new LoadBalanceProxyFactoryBean();"], [155, "        List<ProtobufRpcProxy<T>> protobufRpcProxyList = new ArrayList<ProtobufRpcProxy<T>>();"], [175, "            loadBalanceStrategy = new RoundRobinLoadBalanceStrategy(service, namingService);"], [188, "        protobufRpcProxyListMap.put(service, protobufRpcProxyList);"], [189, "        lbMap.put(service, lbProxyBean);"], [190, "        instancesMap.put(service, (T) lbProxyBean.getObject());"], [194, "        Collection<List<ProtobufRpcProxy<T>>> values = protobufRpcProxyListMap.values();"], [195, "        for (List<ProtobufRpcProxy<T>> list : values) {"], [196, "            doClose(null, list);"], [197, "        }"], [198, ""], [199, "        Collection<LoadBalanceProxyFactoryBean> lbs = lbMap.values();"], [200, "        for (LoadBalanceProxyFactoryBean loadBalanceProxyFactoryBean : lbs) {"], [201, "            doClose(loadBalanceProxyFactoryBean, null);"], [202, "        }"], [247, "    protected void reInit(final String service, final List<InetSocketAddress> list) throws Exception {"], [249, "        LoadBalanceProxyFactoryBean oldLbProxyBean = lbMap.get(service);"], [250, "        List<ProtobufRpcProxy<T>> oldProtobufRpcProxyList ="], [251, "                new ArrayList<ProtobufRpcProxy<T>>(protobufRpcProxyListMap.get(service));"], [254, "        loadBalanceStrategy.doReInit(service, new NamingService() {"], [255, ""], [257, "            public Map<String, List<InetSocketAddress>> list(Set<String> serviceSignatures) throws Exception {"], [258, "                Map<String, List<InetSocketAddress>> ret = new HashMap<String, List<InetSocketAddress>>();"], [259, "                ret.put(service, list);"], [260, "                return ret;"], [262, ""], [264, ""], [266, "        doProxy(service, list);"], [282, "        Method method = invocation.getMethod();"], [283, "        ProtobufRPC protobufPRC = method.getAnnotation(ProtobufRPC.class);"], [284, "        if (protobufPRC == null) {"], [285, "            throw new IllegalAccessError(\"Target method is not marked annotation @ProtobufPRC. method name :\""], [286, "                    + method.getDeclaringClass().getName() + \".\" + method.getName());"], [287, "        }"], [288, "        String serviceName = protobufPRC.serviceName();"], [289, "        String methodName = protobufPRC.methodName();"], [290, "        if (StringUtils.isEmpty(methodName)) {"], [291, "            methodName = method.getName();"], [292, "        }"], [293, "        String methodSignature = serviceName + '!' + methodName;"], [294, "        Object instance = instancesMap.get(methodSignature);"]], "deleted": [[53, "    private LoadBalanceProxyFactoryBean lbProxyBean;"], [56, "    private T instance;"], [57, "    private List<ProtobufRpcProxy<T>> protobufRpcProxyList = new ArrayList<ProtobufRpcProxy<T>>();"], [58, ""], [108, "        if (instance != null) {"], [109, "            return instance;"], [110, "        }"], [112, "        // get server list from NamingService"], [113, "        List<InetSocketAddress> servers = namingService.list();"], [114, "        // start update naming service task"], [115, "        startUpdateNamingServiceTask(servers);"], [117, "        instance = doProxy(servers);"], [120, ""], [126, "    private T doProxy(List<InetSocketAddress> serversList) throws Exception {"], [132, "        lbProxyBean = new LoadBalanceProxyFactoryBean();"], [134, ""], [154, "            loadBalanceStrategy = new RoundRobinLoadBalanceStrategy(namingService);"], [167, "        return (T) lbProxyBean.getObject();"], [171, "        doClose(lbProxyBean, protobufRpcProxyList);"], [216, "    protected void reInit(final List<InetSocketAddress> list) throws Exception {"], [218, "        LoadBalanceProxyFactoryBean oldLbProxyBean = lbProxyBean;"], [219, "        List<ProtobufRpcProxy<T>> oldProtobufRpcProxyList = new ArrayList<ProtobufRpcProxy<T>>(protobufRpcProxyList);"], [220, "        protobufRpcProxyList.clear();"], [223, "        loadBalanceStrategy.doReInit(new NamingService() {"], [225, "            public List<InetSocketAddress> list() throws Exception {"], [226, "                return list;"], [229, ""], [230, ""], [232, "        T instance = doProxy(list);"], [233, "        this.instance = instance;"]]}, "num_lines_added": 76, "num_lines_removed": 30}