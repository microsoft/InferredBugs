{"hash": "545083e237a5df2cb0a6140d1a24196a30da83ed", "message": "\u589e\u52a0\u652f\u6301serviceSignature\u7684NamingService\u5b9e\u73b0\n\n\u6539\u8fdbProtobufRpcProxy\uff0c\u6bcf\u4e2aProtobufRpc\u5ba2\u6237\u7aef\u4f7f\u7528\u72ec\u7acb\u7684RpcChannel\u7ba1\u7406", "file_num_lines": 212, "diff_parsed": {"added": [[22, "import java.net.InetSocketAddress;"], [23, "import java.util.Collection;"], [25, "import java.util.HashSet;"], [27, "import java.util.Set;"], [28, "import java.util.logging.Level;"], [29, "import java.util.logging.Logger;"], [52, "    private static Logger LOG = Logger.getLogger(ProtobufRpcProxy.class.getName());"], [53, ""], [58, "    private Map<String, RpcChannel> rpcChannelMap = new HashMap<String, RpcChannel>();"], [67, "    private ServiceLocatorCallback serviceLocatorCallback;"], [68, ""], [69, ""], [70, "    /**"], [71, "     * set serviceLocatorCallback value to serviceLocatorCallback"], [72, "     * @param serviceLocatorCallback the serviceLocatorCallback to set"], [73, "     */"], [74, "    public void setServiceLocatorCallback(ServiceLocatorCallback serviceLocatorCallback) {"], [75, "        this.serviceLocatorCallback = serviceLocatorCallback;"], [76, "    }"], [77, ""], [101, ""], [102, "    public Set<String> getServiceSignatures() {"], [103, "        if (!cachedRpcMethods.isEmpty()) {"], [104, "            return new HashSet<String>(cachedRpcMethods.keySet());"], [105, "        }"], [106, ""], [107, "        Set<String> serviceSignatures = new HashSet<String>();"], [108, "        Method[] methods = interfaceClass.getMethods();"], [109, "        for (Method method : methods) {"], [110, "            ProtobufRPC protobufPRC = method.getAnnotation(ProtobufRPC.class);"], [111, "            if (protobufPRC != null) {"], [112, "                String serviceName = protobufPRC.serviceName();"], [113, "                String methodName = protobufPRC.methodName();"], [114, "                if (StringUtils.isEmpty(methodName)) {"], [115, "                    methodName = method.getName();"], [116, "                }"], [117, ""], [118, "                String methodSignature = serviceName + '!' + methodName;"], [119, "                serviceSignatures.add(methodSignature);"], [120, "            }"], [121, "        }"], [122, "        // if not protobufRpc method defined throw exception"], [123, "        if (serviceSignatures.isEmpty()) {"], [124, "            throw new IllegalArgumentException(\"This no protobufRpc method in interface class:\""], [125, "                    + interfaceClass.getName());"], [126, "        }"], [127, "        return serviceSignatures;"], [128, "    }"], [196, ""], [197, "                // do create rpc channal"], [198, "                String eHost = host;"], [199, "                int ePort = port;"], [200, "                if (serviceLocatorCallback != null) {"], [201, "                    InetSocketAddress address = serviceLocatorCallback.fetchAddress(methodSignature);"], [202, "                    if (address == null) {"], [203, "                        throw new RuntimeException(\"fetch a null address from serviceLocatorCallback\" +"], [204, "                        \t\t\" by serviceSignature '\" + methodSignature + \"'\");"], [205, "                    }"], [206, "                    eHost = address.getHostName();"], [207, "                    port = address.getPort();"], [208, "                }"], [209, "                RpcChannel rpcChannel = new RpcChannel(rpcClient, eHost, ePort);"], [210, "                if (lookupStubOnStartup) {"], [211, "                    rpcChannel.testChannlConnect();"], [212, "                }"], [213, ""], [214, "                rpcChannelMap.put(methodSignature, rpcChannel);"], [234, "        Collection<RpcChannel> rpcChannels = rpcChannelMap.values();"], [235, "        for (RpcChannel rpcChann : rpcChannels) {"], [236, "            try {"], [237, "                rpcChann.close();"], [238, "            } catch (Exception e) {"], [239, "                LOG.log(Level.SEVERE, e.getMessage(), e.getCause());"], [240, "            }"], [242, ""], [281, ""], [282, "        RpcChannel rpcChannel = rpcChannelMap.get(methodSignature);"], [283, "        if (rpcChannel == null) {"], [284, "            throw new RuntimeException(\"No rpcChannel bind with serviceSignature '\" + methodSignature + \"'\");"], [285, "        }"], [286, ""]], "deleted": [[50, "    private RpcChannel rpcChannel;"], [158, "        rpcChannel = new RpcChannel(rpcClient, host, port);"], [159, "        if (lookupStubOnStartup) {"], [160, "            rpcChannel.testChannlConnect();"], [161, "        }"], [162, ""], [173, "        if (rpcChannel != null) {"], [174, "            rpcChannel.close();"]]}, "num_lines_added": 81, "num_lines_removed": 8}