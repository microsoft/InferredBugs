{"hash": "80abeab51abb3ba74edb005a8d69c073023fc12d", "message": "Fixed not to call deprecated methods", "file_num_lines": 41, "diff_parsed": {"added": [[21, "import java.io.IOException;"], [31, "    public void testEvaluate() throws IOException {"], [34, "            Assert.assertEquals(1.f, CosineSimilarityUDF.cosineSimilarity(ftvec1, ftvec1), 0.0);"], [37, "        Assert.assertEquals(0.f, CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"a\", \"b\", \"c\"), Arrays.asList(\"d\", \"e\")), 0.0);"], [38, "        Assert.assertEquals(0.f, CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"a\", \"b\", \"c\"), Arrays.asList(\"d\", \"e\")), 0.0);"], [40, "        Assert.assertEquals(1.f, CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"a\", \"b\"), Arrays.asList(\"a\", \"b\")), 0.0);"], [42, "        Assert.assertEquals(0.5f, CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"a\", \"b\"), Arrays.asList(\"a\", \"c\")), 0.0);"], [44, "        Assert.assertEquals(-1.f, CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"a:1.0\"), Arrays.asList(\"a:-1.0\")), 0.0);"], [46, "        Assert.assertTrue(CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"apple\", \"orange\"), Arrays.asList(\"banana\", \"apple\")) > 0.f);"], [47, "        Assert.assertTrue(CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"apple\", \"orange\"), Arrays.asList(\"banana\", \"apple\")) > 0.f);"], [49, "        Assert.assertTrue((CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"apple\", \"orange\"), Arrays.asList(\"banana\", \"orange\", \"apple\"))) > (CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"apple\", \"orange\"), Arrays.asList(\"banana\", \"orange\"))));"], [51, "        Assert.assertEquals(1.0f, CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"This is a sentence with seven tokens\".split(\" \")), Arrays.<String> asList(\"This is a sentence with seven tokens\".split(\" \"))), 0.0);"], [52, "        Assert.assertEquals(1.0f, CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"This is a sentence with seven tokens\".split(\" \")), Arrays.<String> asList(\"This is a sentence with seven tokens\".split(\" \"))), 0.0);"], [57, "            Assert.assertEquals(0.77777f, CosineSimilarityUDF.cosineSimilarity(tokens1, tokens2), 0.00001f);"], [65, "            Assert.assertEquals(dotp / norm, CosineSimilarityUDF.cosineSimilarity(tokens1, tokens2), 0.00001f);"], [66, "            Assert.assertEquals(dotp / norm, CosineSimilarityUDF.cosineSimilarity(tokens1, tokens2), 0.00001f);"], [68, "            Assert.assertEquals(dotp / norm, CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"6\", \"7\", \"8\", \"10\", \"11\"), Arrays.asList(\"1\", \"2\", \"4\", \"5\", \"6\", \"7\", \"9\", \"10\", \"11\")), 0.00001f);"], [71, "        Assert.assertEquals(0.f, CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"1\", \"2\", \"3\"), Arrays.asList(\"4\", \"5\")), 0.0);"], [72, "        Assert.assertEquals(1.f, CosineSimilarityUDF.cosineSimilarity(Arrays.asList(\"1\", \"2\"), Arrays.asList(\"1\", \"2\")), 0.0);"]], "deleted": [[30, "    public void testEvaluate() {"], [31, "        CosineSimilarityUDF cosine = new CosineSimilarityUDF();"], [32, ""], [35, "            Assert.assertEquals(1.f, cosine.evaluate(ftvec1, ftvec1).get(), 0.0);"], [38, "        Assert.assertEquals(0.f, cosine.evaluate(Arrays.asList(\"a\", \"b\", \"c\"), Arrays.asList(\"d\", \"e\")).get(), 0.0);"], [39, "        Assert.assertEquals(0.f, cosine.evaluate(Arrays.asList(\"a\", \"b\", \"c\"), Arrays.asList(\"d\", \"e\")).get(), 0.0);"], [41, "        Assert.assertEquals(1.f, cosine.evaluate(Arrays.asList(\"a\", \"b\"), Arrays.asList(\"a\", \"b\")).get(), 0.0);"], [43, "        Assert.assertEquals(0.5f, cosine.evaluate(Arrays.asList(\"a\", \"b\"), Arrays.asList(\"a\", \"c\")).get(), 0.0);"], [45, "        Assert.assertEquals(-1.f, cosine.evaluate(Arrays.asList(\"a:1.0\"), Arrays.asList(\"a:-1.0\")).get(), 0.0);"], [47, "        Assert.assertTrue(cosine.evaluate(Arrays.asList(\"apple\", \"orange\"), Arrays.asList(\"banana\", \"apple\")).get() > 0.f);"], [48, "        Assert.assertTrue(cosine.evaluate(Arrays.asList(\"apple\", \"orange\"), Arrays.asList(\"banana\", \"apple\")).get() > 0.f);"], [50, "        Assert.assertTrue((cosine.evaluate(Arrays.asList(\"apple\", \"orange\"), Arrays.asList(\"banana\", \"orange\", \"apple\"))).get() > (cosine.evaluate(Arrays.asList(\"apple\", \"orange\"), Arrays.asList(\"banana\", \"orange\"))).get());"], [52, "        Assert.assertEquals(1.0f, cosine.evaluate(Arrays.asList(\"This is a sentence with seven tokens\".split(\" \")), Arrays.<String> asList(\"This is a sentence with seven tokens\".split(\" \"))).get(), 0.0);"], [53, "        Assert.assertEquals(1.0f, cosine.evaluate(Arrays.asList(\"This is a sentence with seven tokens\".split(\" \")), Arrays.<String> asList(\"This is a sentence with seven tokens\".split(\" \"))).get(), 0.0);"], [58, "            Assert.assertEquals(0.77777f, cosine.evaluate(tokens1, tokens2).get(), 0.00001f);"], [66, "            Assert.assertEquals(dotp / norm, cosine.evaluate(tokens1, tokens2).get(), 0.00001f);"], [67, "            Assert.assertEquals(dotp / norm, cosine.evaluate(tokens1, tokens2).get(), 0.00001f);"], [69, "            Assert.assertEquals(dotp / norm, cosine.evaluate(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"6\", \"7\", \"8\", \"10\", \"11\"), Arrays.asList(\"1\", \"2\", \"4\", \"5\", \"6\", \"7\", \"9\", \"10\", \"11\")).get(), 0.00001f);"], [72, "        Assert.assertEquals(0.f, cosine.evaluate(Arrays.asList(\"1\", \"2\", \"3\"), Arrays.asList(\"4\", \"5\")).get(), 0.0);"], [73, "        Assert.assertEquals(1.f, cosine.evaluate(Arrays.asList(\"1\", \"2\"), Arrays.asList(\"1\", \"2\")).get(), 0.0);"]]}, "num_lines_added": 19, "num_lines_removed": 20}