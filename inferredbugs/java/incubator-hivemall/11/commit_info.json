{"hash": "5798f2ea606ae0df9aac45c7a017d52710a44239", "message": "Refactored again", "file_num_lines": 179, "diff_parsed": {"added": [[1, "/*"], [2, " * Hivemall: Hive scalable Machine Learning Library"], [3, " *"], [4, " * Copyright (C) 2015 Makoto YUI"], [5, " *"], [6, " * Licensed under the Apache License, Version 2.0 (the \"License\");"], [7, " * you may not use this file except in compliance with the License."], [8, " * You may obtain a copy of the License at"], [9, " *"], [10, " *         http://www.apache.org/licenses/LICENSE-2.0"], [11, " *"], [12, " * Unless required by applicable law or agreed to in writing, software"], [13, " * distributed under the License is distributed on an \"AS IS\" BASIS,"], [14, " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."], [15, " * See the License for the specific language governing permissions and"], [16, " * limitations under the License."], [17, " */"], [25, "import java.util.Map;"], [28, "import javax.annotation.Nullable;"], [29, ""], [32, "    private final Map<String, Double> valuesMap;"], [33, "    private final Map<String, Integer> jumpMap;"], [34, "    private final List<Operation> code;"], [35, "    private final Stack<Double> programStack;"], [36, ""], [38, "    private int SP;"], [39, ""], [42, "    private Double result;"], [44, "    public StackMachine() {"], [45, "        this.valuesMap = new HashMap<String, Double>();"], [46, "        this.jumpMap = new HashMap<String, Integer>();"], [47, "        this.code = new ArrayList<Operation>();"], [48, "        this.programStack = new Stack<Double>();"], [49, "        this.SP = 0;"], [50, "        this.result = null;"], [51, "    }"], [53, "    public void run(List<String> scripts, double[] features) throws VMRuntimeException {"], [54, "        for(String line : scripts) {"], [65, "        int size = scripts.size();"], [78, ""], [81, "                throw new VMRuntimeException(\"There is a infinite loop in the Machine code.\");"], [84, "            Operation currentOperation = code.get(IP);"], [94, "            String bindKey = buf.append(\"x[\").append(i).append(\"]\").toString();"], [100, "    @Nullable"], [117, "        if(IP < 0) {"], [119, "        }"], [121, "            case GOTO: {"], [122, "                if(isInt(currentOperation.operand)) {"], [124, "                } else {"], [126, "                }"], [128, "            }"], [129, "            case CALL: {"], [136, "            }"], [137, "            case IFEQ: {"], [143, "                if(a == b || Math.abs(a - b) <= Math.min(absa, absb) * 2.2204460492503131e-16) {"], [144, "                    if(isInt(currentOperation.operand)) {"], [146, "                    } else {"], [148, "                    }"], [149, "                } else {"], [151, "                }"], [153, "            }"], [154, "            case IFGR: {"], [157, "                if(upper > lower) {"], [158, "                    if(isInt(currentOperation.operand)) {"], [160, "                    } else {"], [162, "                    }"], [163, "                } else {"], [165, "                }"], [167, "            }"], [168, "            case POP: {"], [172, "            }"], [173, "            case PUSH: {"], [186, "            }"], [188, "                throw new VMRuntimeException(\"Machine code has wrong opcode :\""], [195, "    private void evaluateBuiltinByName(String name) throws VMRuntimeException {"], [196, "        if(name.equals(\"end\")) {"], [197, "            this.result = pop();"], [198, "        } else {"], [199, "            throw new VMRuntimeException(\"Machine code has wrong builin function :\" + name);"], [200, "        }"]], "deleted": [[12, "    private HashMap<String, Double> valuesMap;"], [13, "    private HashMap<String, Integer> jumpMap;"], [14, "    private ArrayList<Operation> code = new ArrayList<Operation>();"], [15, "    private Stack<Double> programStack;"], [17, "    private int SP = 0;"], [20, "    private double result = 0;"], [22, "    public StackMachine() {}"], [24, "    public void run(List<String> script, double[] features) throws VMRuntimeException {"], [25, "        for(String line : script) {"], [36, "        this.valuesMap = new HashMap<String, Double>();"], [37, "        this.jumpMap = new HashMap<String, Integer>();"], [38, "        int size = script.size();"], [51, "        programStack = new Stack<Double>();"], [54, "                throw new IllegalArgumentException(\"There is a infinite loop in the Machine code.\");"], [57, "            Operation currentOperation = code.get((int) IP);"], [67, "            String bindKey = buf.append(\"x[\").append(String.valueOf(i)).append(\"]\").toString();"], [89, "        if(IP < 0)"], [92, "            case GOTO:"], [93, "                if(isInt(currentOperation.operand))"], [95, "                else"], [98, "            case CALL:"], [105, "            case IFEQ:"], [111, "                if(a == b || Math.abs(a - b) <= Math.min(absa, absb) * 2.2204460492503131e-16)"], [112, "                    if(isInt(currentOperation.operand))"], [114, "                    else"], [116, "                else"], [119, "            case IFGR:"], [122, "                if(upper > lower)"], [123, "                    if(isInt(currentOperation.operand))"], [125, "                    else"], [127, "                else"], [130, "            case POP:"], [134, "            case PUSH:"], [148, "                throw new IllegalArgumentException(\"Machine code has wrong opcode :\""], [155, "    private void evaluateBuiltinByName(String name) {"], [156, "        if(name.equals(\"end\"))"], [157, "            result = pop();"], [158, "        else"], [159, "            throw new IllegalArgumentException(\"Machine code has wrong builin function :\" + name);"]]}, "num_lines_added": 80, "num_lines_removed": 39}