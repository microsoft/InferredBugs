{"hash": "cae7b4a0457b00ed411e15b55877d64fdcae0b1c", "message": "Changed compression level handling", "file_num_lines": 134, "diff_parsed": {"added": [[38, "    public static final int DEFAULT_COMPRESSION_LEVEL = -1;"], [43, "        deflate, xz, lzma2;"], [48, "        return createInputStream(in, algo, DEFAULT_COMPRESSION_LEVEL);"], [49, "    }"], [50, ""], [51, "    @Nonnull"], [52, "    public static InputStream createInputStream(@Nonnull final InputStream in,"], [53, "            @Nonnull final CompressionAlgorithm algo, final int level) {"], [55, "            case deflate: {"], [65, "            case lzma2: {"], [66, "                final int dictSize;"], [67, "                if (level == DEFAULT_COMPRESSION_LEVEL) {"], [68, "                    dictSize = LZMA2Options.DICT_SIZE_DEFAULT; // level 6"], [69, "                } else {"], [70, "                    final LZMA2Options options;"], [71, "                    try {"], [72, "                        options = new LZMA2Options(level);"], [73, "                    } catch (UnsupportedOptionsException e) {"], [74, "                        throw new IllegalStateException(\"LZMA2Option configuration failed\", e);"], [75, "                    }"], [76, "                    dictSize = options.getDictSize();"], [89, "        return createOutputStream(out, algo, DEFAULT_COMPRESSION_LEVEL);"], [90, "    }"], [91, ""], [92, "    @Nonnull"], [93, "    public static FinishableOutputStream createOutputStream(@Nonnull final OutputStream out,"], [94, "            @Nonnull final CompressionAlgorithm algo, int level) {"], [97, "                final DeflaterOutputStream deflateOut;"], [98, "                if (level == DEFAULT_COMPRESSION_LEVEL) {"], [99, "                    deflateOut = new DeflaterOutputStream(out);"], [100, "                } else {"], [101, "                    Deflater d = new Deflater(level);"], [102, "                    deflateOut = new hivemall.utils.io.DeflaterOutputStream(out, d);"], [103, "                }"], [104, "                return new FinishableOutputStreamAdapter(deflateOut) {"], [107, "                        deflateOut.finish();"], [108, "                        deflateOut.flush();"], [114, "                if (level == DEFAULT_COMPRESSION_LEVEL) {"], [115, "                    level = LZMA2Options.PRESET_DEFAULT; // level 6"], [116, "                }"], [119, "                    options = new LZMA2Options(level);"], [137, "            case lzma2: {"], [138, "                if (level == DEFAULT_COMPRESSION_LEVEL) {"], [139, "                    level = LZMA2Options.PRESET_DEFAULT; // level 6"], [143, "                    options = new LZMA2Options(level);"]], "deleted": [[42, "        deflate, deflate_l7, xz, lzma2, lzma2_l5;"], [45, "    @Nonnull"], [49, "            case deflate:"], [50, "            case deflate_l7: {"], [60, "            case lzma2: { // level 6"], [61, "                return new LZMA2InputStream(in, LZMA2Options.DICT_SIZE_DEFAULT);"], [62, "            }"], [63, "            case lzma2_l5: {// level 5"], [64, "                final LZMA2Options options;"], [65, "                try {"], [66, "                    options = new LZMA2Options(5);"], [67, "                } catch (UnsupportedOptionsException e) {"], [68, "                    throw new IllegalStateException(\"LZMA2Option configuration failed\", e);"], [70, "                int dictSize = options.getDictSize();"], [84, "                final DeflaterOutputStream deflate = new DeflaterOutputStream(out);"], [85, "                return new FinishableOutputStreamAdapter(deflate) {"], [86, "                    @Override"], [87, "                    public void finish() throws IOException {"], [88, "                        deflate.finish();"], [89, "                        deflate.flush();"], [90, "                        IOUtils.finishStream(out);"], [91, "                    }"], [92, "                };"], [93, "            }"], [94, "            case deflate_l7: {"], [95, "                final Deflater l7 = new Deflater(7);"], [96, "                final DeflaterOutputStream deflate = new hivemall.utils.io.DeflaterOutputStream("], [97, "                    out, l7);"], [98, "                return new FinishableOutputStreamAdapter(deflate) {"], [101, "                        deflate.finish();"], [102, "                        deflate.flush();"], [110, "                    options = new LZMA2Options(LZMA2Options.PRESET_DEFAULT);"], [128, "            case lzma2: { // level 6"], [129, "                final LZMA2Options options;"], [130, "                try {"], [131, "                    options = new LZMA2Options(LZMA2Options.PRESET_DEFAULT);"], [132, "                } catch (UnsupportedOptionsException e) {"], [133, "                    throw new IllegalStateException(\"LZMA2Option configuration failed\", e);"], [135, "                FinishableWrapperOutputStream wrapped = new FinishableWrapperOutputStream(out);"], [136, "                final org.tukaani.xz.FinishableOutputStream lzma2 = options.getOutputStream(wrapped);"], [137, "                return new FinishableOutputStreamAdapter(lzma2) {"], [138, "                    @Override"], [139, "                    public void finish() throws IOException {"], [140, "                        lzma2.finish();"], [141, "                        IOUtils.finishStream(out);"], [142, "                    }"], [143, "                };"], [144, "            }"], [145, "            case lzma2_l5: {"], [148, "                    options = new LZMA2Options(5);"]]}, "num_lines_added": 45, "num_lines_removed": 50}