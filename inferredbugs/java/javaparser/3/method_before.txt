    @Override
    public Optional<MethodUsage> solveMethodAsUsage(String name, List<TypeUsage> parameterTypes, TypeSolver typeSolver) {
        // TODO consider call of static methods
        if (wrappedNode.getScope() != null) {
            try {
                TypeUsage typeOfScope = JavaParserFacade.get(typeSolver).getType(wrappedNode.getScope());
                return typeOfScope.solveMethodAsUsage(name, parameterTypes, typeSolver, this);
            } catch (UnsolvedSymbolException e){
                // ok, maybe it was instead a static access, so let's look for a type
                if (wrappedNode.getScope() instanceof NameExpr){
                    String className = ((NameExpr)wrappedNode.getScope()).getName();
                    SymbolReference<TypeDeclaration> ref = solveType(className, typeSolver);
                    if (ref.isSolved()) {
                        SymbolReference<MethodDeclaration> m = ref.getCorrespondingDeclaration().solveMethod(name, parameterTypes, typeSolver);
                        if (m.isSolved()) {
                            return Optional.of(new MethodUsage(m.getCorrespondingDeclaration(), typeSolver));
                        }
                    }
                }
                throw e;
            }
        } else {
            //TypeUsage typeOfScope = JavaParserFacade.get(typeSolver).getTypeOfThisIn(wrappedNode);
            //return typeOfScope.solveMethodAsUsage(name, parameterTypes, typeSolver, this);
            return getParent().solveMethodAsUsage(name, parameterTypes, typeSolver);
        }
    }