{"hash": "3e4b012ca278ee33e9e02984367028cb1adf4bf5", "message": "use NodeNavigator.getParentNode", "file_num_lines": 64, "diff_parsed": {"added": [[37, "import static me.tomassetti.symbolsolver.javaparser.Navigator.getParentNode;"], [38, ""], [55, "        return JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver).solveSymbol(name, typeSolver);"], [60, "        return JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver).solveType(name, typeSolver);"], [64, "    public SymbolReference<MethodDeclaration> solveMethod(String name, List<Type> parameterTypes, TypeSolver typeSolver) {"], [65, "        return JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver).solveMethod(name, parameterTypes, typeSolver);"]], "deleted": [[53, "        return JavaParserFactory.getContext(wrappedNode.getParentNode(), typeSolver).solveSymbol(name, typeSolver);"], [58, "        return JavaParserFactory.getContext(wrappedNode.getParentNode(), typeSolver).solveType(name, typeSolver);"], [62, "    public SymbolReference<MethodDeclaration> solveMethod(String name, List<Type> argumentsTypes, TypeSolver typeSolver) {"], [63, "        return JavaParserFactory.getContext(wrappedNode.getParentNode(), typeSolver).solveMethod(name, argumentsTypes, typeSolver);"]]}, "num_lines_added": 6, "num_lines_removed": 4}