{"hash": "9d88cd67abacf53ded599667aa1b26a8da40b6ec", "message": "Made SourceRoot more stable. Replaced system out logging by slf4j logging", "file_num_lines": 94, "diff_parsed": {"added": [[8, "import org.slf4j.Logger;"], [9, "import org.slf4j.LoggerFactory;"], [20, "import java.util.*;"], [28, " * A collection of Java source files located in one directory and its subdirectories on the file system."], [32, "    private final Logger log = LoggerFactory.getLogger(SourceRoot.class);"], [34, "    private final Map<Path, CompilationUnit> content = new HashMap<>();"], [39, "        log.info(f(\"New source root at \\\"%s\\\"\", this.root));"], [42, "    /**"], [43, "     * Parses a package recursively."], [44, "     */"], [45, "    public Map<Path, CompilationUnit> parse(String startPackage, JavaParser parser) throws IOException {"], [46, "        log.info(f(\"Parsing package \\\"%s\\\"\", startPackage));"], [47, "        final Path path = packageAbsolutePath(root, startPackage);"], [48, "        content.clear();"], [58, "        return content;"], [59, "    }"], [60, ""], [61, "    /**"], [62, "     * Parse every Java file in this source root."], [63, "     */"], [64, "    public Map<Path, CompilationUnit> parse(JavaParser parser) throws IOException {"], [65, "        return parse(\"\", parser);"], [68, "    /**"], [69, "     * Save all files back to where they were found."], [70, "     */"], [72, "        saveAll(root);"], [73, "    }"], [74, ""], [75, "    /**"], [76, "     * Save all files back to another path."], [77, "     */"], [78, "    public void saveAll(Path root) throws FileNotFoundException, UnsupportedEncodingException {"], [79, "        log.info(f(\"Saving all files (%s) to %s\", content.size(), root));"], [80, "        for (Map.Entry<Path, CompilationUnit> cu : content.entrySet()) {"], [81, "            final Path path = root.resolve(cu.getKey());"], [82, "            log.debug(f(\"Saving %s\", path));"], [83, "            path.getParent().toFile().mkdirs();"], [84, ""], [85, "            final String code = new PrettyPrinter().print(cu.getValue());"], [86, "            try (PrintWriter out = new PrintWriter(path.toFile(), UTF8.toString())) {"], [92, "    /**"], [93, "     * A complete list of encountered problems while parsing."], [94, "     */"], [99, "    /**"], [100, "     * The Java files that have been parsed by this source root object."], [101, "     */"], [102, "    public Map<Path, CompilationUnit> getContent() {"], [103, "        return content;"], [106, "    /**"], [107, "     * Parse a single Java file and return it."], [108, "     */"], [110, "        final Path relativePath = fileInPackageRelativePath(packag, filename);"], [111, "        if (content.containsKey(relativePath)) {"], [112, "            log.debug(f(\"Retrieving cached %s\", relativePath));"], [113, "            return Optional.of(content.get(relativePath));"], [114, "        }"], [115, "        final Path path = root.resolve(relativePath);"], [116, "        log.debug(f(\"Parsing %s\", path));"], [117, "        final ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(path));"], [119, "            final CompilationUnit cu = result.getResult().get();"], [120, "            content.put(relativePath, cu);"], [122, "            log.error(f(\"Problems occurred parsing %s.\", relativePath));"], [128, "    /**"], [129, "     * Add a newly created Java file to this source root. It will be saved when saveAll is called."], [130, "     */"], [132, "        log.debug(f(\"Adding new file %s.%s\", pkg, filename));"], [133, "        final Path path = fileInPackageRelativePath(pkg, filename);"], [134, "        content.put(path, compilationUnit);"]], "deleted": [[7, "import com.github.javaparser.ast.DataKey;"], [19, "import java.util.ArrayList;"], [20, "import java.util.List;"], [21, "import java.util.Optional;"], [29, " * A collection of files located in one directory and its subdirectories on the file system."], [33, "    public static final DataKey<Path> ORIGINAL_LOCATION = new DataKey<Path>() {"], [34, "    };"], [35, ""], [37, "    private final List<CompilationUnit> compilationUnits = new ArrayList<>();"], [44, "    public void parse(String startPackage, JavaParser parser) throws IOException {"], [45, "        Path path = packagePath(root, startPackage);"], [46, "        compilationUnits.clear();"], [59, "        for (CompilationUnit cu : compilationUnits) {"], [60, "            Path filename = cu.getData(ORIGINAL_LOCATION);"], [61, "            System.out.println(\"Saving \" + filename);"], [62, "            filename.getParent().toFile().mkdirs();"], [63, "            String code = new PrettyPrinter().print(cu);"], [64, "            try (PrintWriter out = new PrintWriter(filename.toFile(), UTF8.toString())) {"], [74, "    public List<CompilationUnit> getCompilationUnits() {"], [75, "        return compilationUnits;"], [79, "        Path path = fileInPackagePath(root, packag, filename);"], [80, "        System.out.println(\"Loading \" + path);"], [81, "        ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(path));"], [83, "            CompilationUnit cu = result.getResult().get();"], [84, "            compilationUnits.add(cu);"], [85, "            cu.setData(ORIGINAL_LOCATION, path);"], [93, "        compilationUnits.add(compilationUnit);"], [94, "        compilationUnit.setData(ORIGINAL_LOCATION, root.resolve(packageToPath(pkg)).resolve(filename));"]]}, "num_lines_added": 68, "num_lines_removed": 28}