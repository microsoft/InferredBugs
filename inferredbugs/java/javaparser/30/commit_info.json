{"hash": "b9caf94b599d1986eb54c1656bd0304bb2927283", "message": "Spring cleaning", "file_num_lines": 213, "diff_parsed": {"added": [[43, "        CombinedTypeSolver combinedTypeSolver = new CombinedTypeSolver("], [44, "                new ReflectionTypeSolver(),"], [45, "                new JavaParserTypeSolver(properSrc, new LeanParserConfiguration()),"], [46, "                new JavaParserTypeSolver(root.resolve(\"generated\"), new LeanParserConfiguration()));"], [47, "        SourceFileInfoExtractor sourceFileInfoExtractor = new SourceFileInfoExtractor(combinedTypeSolver);"], [74, "        if (DEBUG && (sourceFileInfoExtractor.getFailures() != 0 || sourceFileInfoExtractor.getUnsupported() != 0)) {"], [78, "        assertEquals(0, sourceFileInfoExtractor.getFailures(), \"No failures expected when analyzing \" + path);"]], "deleted": [[43, "        CombinedTypeSolver combinedTypeSolver = new CombinedTypeSolver();"], [44, "        combinedTypeSolver.add(new ReflectionTypeSolver());"], [45, "        combinedTypeSolver.add(new JavaParserTypeSolver(properSrc, new LeanParserConfiguration()));"], [46, "        combinedTypeSolver.add(new JavaParserTypeSolver(root.resolve(\"generated\"), new LeanParserConfiguration()));"], [47, "        SourceFileInfoExtractor sourceFileInfoExtractor = new SourceFileInfoExtractor();"], [48, "        sourceFileInfoExtractor.setTypeSolver(combinedTypeSolver);"], [75, "        if (DEBUG && (sourceFileInfoExtractor.getKo() != 0 || sourceFileInfoExtractor.getUnsupported() != 0)) {"], [79, "        assertEquals(0, sourceFileInfoExtractor.getKo(), \"No failures expected when analyzing \" + path);"]]}, "num_lines_added": 7, "num_lines_removed": 8}