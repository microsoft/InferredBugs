{"hash": "49f82c8a5bfaead7da63e0793ed4dec4318f2b89", "message": "inheriting type parameters", "file_num_lines": 323, "diff_parsed": {"added": [[12, "import java.lang.reflect.*;"], [28, "            ReferenceTypeUsage superClass = getSuperClass(typeSolver);"], [29, "            ancestors.add(superClass);"], [134, "        if (getSuperClass(typeSolver) != null) {"], [135, "            ClassDeclaration superClass = (ClassDeclaration)getSuperClass(typeSolver).getTypeDeclaration();"], [176, "        if (getSuperClass(typeSolver) != null) {"], [177, "            ClassDeclaration superClass = (ClassDeclaration)getSuperClass(typeSolver).getTypeDeclaration();"], [307, "        ReferenceTypeUsage superclass = getSuperClass(typeSolver);"], [311, "            return superclass.getTypeDeclaration().hasField(name);"], [351, "    public ReferenceTypeUsage getSuperClass(TypeSolver typeSolvers) {"], [352, "        if (clazz.getGenericSuperclass() == null) {"], [355, "        Type superType = clazz.getGenericSuperclass();"], [356, "        if (superType instanceof ParameterizedType) {"], [357, "            ParameterizedType parameterizedType = (ParameterizedType)superType;"], [358, "            List<TypeUsage> typeParameters = Arrays.stream(parameterizedType.getActualTypeArguments())"], [359, "                    .map((t) -> ReflectionFactory.typeUsageFor(t, typeSolver))"], [360, "                    .collect(Collectors.toList());"], [361, "            return new ReferenceTypeUsage(new ReflectionClassDeclaration(clazz.getSuperclass(), typeSolver), typeParameters, typeSolvers);"], [362, "        }"], [363, "        return new ReferenceTypeUsage(new ReflectionClassDeclaration(clazz.getSuperclass(), typeSolver), typeSolvers);"], [369, "        // TODO use genericInterfaces"]], "deleted": [[12, "import java.lang.reflect.Field;"], [13, "import java.lang.reflect.Method;"], [14, "import java.lang.reflect.Parameter;"], [15, "import java.lang.reflect.TypeVariable;"], [31, "            ancestors.add(new ReferenceTypeUsage(getSuperClass(typeSolver), typeSolver));"], [136, "        ClassDeclaration superClass = getSuperClass(typeSolver);"], [137, "        if (superClass != null) {"], [178, "        ClassDeclaration superClass = getSuperClass(typeSolver);"], [179, "        if (superClass != null) {"], [309, "        ClassDeclaration superclass = getSuperClass(typeSolver);"], [313, "            return superclass.hasField(name);"], [353, "    public ClassDeclaration getSuperClass(TypeSolver typeSolvers) {"], [354, "        if (clazz.getSuperclass() == null) {"], [357, "        return new ReflectionClassDeclaration(clazz.getSuperclass(), typeSolver);"]]}, "num_lines_added": 21, "num_lines_removed": 14}