{"hash": "87089ddb567bc7c03afb1e8d0476edb82413ca31", "message": "attempting to write to a db instance that was closed will always fail.", "file_num_lines": 523, "diff_parsed": {"added": [[131, "        writeLock.lock();"], [133, "            isClosing = true;"], [134, ""], [135, "            try {"], [136, "                if(!compactionManager.stopCompactionThread())"], [137, "                    setIOErrorFlag();"], [138, "            } catch (IOException e) {"], [139, "                logger.error(\"Error while stopping compaction thread. Setting IOError flag\", e);"], [141, "            }"], [143, "            if (options.isCleanUpInMemoryIndexOnClose())"], [144, "                inMemoryIndex.close();"], [146, "            if (currentWriteFile != null) {"], [147, "                currentWriteFile.flushToDisk();"], [148, "                currentWriteFile.getIndexFile().flushToDisk();"], [149, "                currentWriteFile.close();"], [150, "            }"], [151, "            if (currentTombstoneFile != null) {"], [152, "                currentTombstoneFile.flushToDisk();"], [153, "                currentTombstoneFile.close();"], [154, "            }"], [156, "            for (HaloDBFile file : readFileMap.values()) {"], [157, "                file.close();"], [158, "            }"], [160, "            DBMetaData metaData = new DBMetaData(dbDirectory);"], [161, "            metaData.loadFromFileIfExists();"], [162, "            metaData.setOpen(false);"], [163, "            metaData.storeToFile();"], [165, "            dbDirectory.close();"], [167, "            if (dbLock != null) {"], [168, "                dbLock.close();"], [169, "            }"], [170, "        } finally {"], [171, "            writeLock.unlock();"], [295, "        if ((currentWriteFile == null ||  currentWriteFile.getWriteOffset() + size > options.getMaxFileSize()) && !isClosing) {"], [308, "        if ((currentTombstoneFile == null || currentTombstoneFile.getWriteOffset() + size > options.getMaxFileSize()) && !isClosing) {"]], "deleted": [[131, "        isClosing = true;"], [132, ""], [134, "            if(!compactionManager.stopCompactionThread())"], [136, "        } catch (IOException e) {"], [137, "            logger.error(\"Error while stopping compaction thread. Setting IOError flag\", e);"], [138, "            setIOErrorFlag();"], [139, "        }"], [141, "        if (options.isCleanUpInMemoryIndexOnClose())"], [142, "            inMemoryIndex.close();"], [144, "        if (currentWriteFile != null) {"], [145, "            currentWriteFile.flushToDisk();"], [146, "            currentWriteFile.getIndexFile().flushToDisk();"], [147, "            currentWriteFile.close();"], [148, "        }"], [149, "        if (currentTombstoneFile != null) {"], [150, "            currentTombstoneFile.flushToDisk();"], [151, "            currentTombstoneFile.close();"], [152, "        }"], [154, "        for (HaloDBFile file : readFileMap.values()) {"], [155, "            file.close();"], [156, "        }"], [158, "        DBMetaData metaData = new DBMetaData(dbDirectory);"], [159, "        metaData.loadFromFileIfExists();"], [160, "        metaData.setOpen(false);"], [161, "        metaData.storeToFile();"], [163, "        dbDirectory.close();"], [165, "        if (dbLock != null) {"], [166, "            dbLock.close();"], [290, "        if (currentWriteFile == null ||  currentWriteFile.getWriteOffset() + size > options.getMaxFileSize()) {"], [303, "        if (currentTombstoneFile == null || currentTombstoneFile.getWriteOffset() + size > options.getMaxFileSize()) {"]]}, "num_lines_added": 35, "num_lines_removed": 30}