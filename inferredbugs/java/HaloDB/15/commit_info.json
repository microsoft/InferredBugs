{"hash": "cfdc23227d2cf1a036e3455640b81d2fec4ec939", "message": "methods to allow clients to pause and resume compaction.  (#21)\n\nmethods to allow clients to pause and resume compaction.", "file_num_lines": 265, "diff_parsed": {"added": [[8, "import com.google.common.annotations.VisibleForTesting;"], [18, "import java.util.concurrent.locks.ReentrantLock;"], [25, "    private volatile boolean isRunning = false;"], [34, "    private volatile CompactionThread compactionThread;"], [46, "    private final ReentrantLock startStopLock = new ReentrantLock();"], [47, "    private volatile boolean stopInProgress = false;"], [48, ""], [55, "    // If a file is being compacted we wait for it complete before stopping."], [56, "    boolean stopCompactionThread(boolean closeCurrentWriteFile) throws IOException {"], [57, "        stopInProgress = true;"], [58, "        startStopLock.lock();"], [59, "        try {"], [60, "            isRunning = false;"], [61, "            if (isCompactionRunning()) {"], [67, "                if (closeCurrentWriteFile && currentWriteFile != null) {"], [74, "        catch (InterruptedException e) {"], [75, "            logger.error(\"Error while waiting for compaction thread to stop\", e);"], [76, "            return false;"], [77, "        }"], [78, "        finally {"], [79, "            stopInProgress = false;"], [80, "            startStopLock.unlock();"], [81, "        }"], [85, "    void startCompactionThread() {"], [86, "        startStopLock.lock();"], [87, "        try {"], [88, "            if (!isCompactionRunning()) {"], [89, "                isRunning = true;"], [90, "                compactionThread = new CompactionThread();"], [91, "                compactionThread.start();"], [92, "            }"], [93, "        } finally {"], [94, "            startStopLock.unlock();"], [98, "    void pauseCompactionThread() throws IOException, InterruptedException {"], [99, "        logger.info(\"Pausing compaction thread ...\");"], [100, "        stopCompactionThread(false);"], [101, "    }"], [102, ""], [103, "    void resumeCompaction() {"], [104, "        logger.info(\"Resuming compaction thread\");"], [105, "        startCompactionThread();"], [106, "    }"], [107, ""], [154, "    boolean isCompactionRunning() {"], [155, "        return compactionThread != null && compactionThread.isAlive();"], [156, "    }"], [157, ""], [166, "                logger.error(\"Compaction thread crashed\", e);"], [170, "                    } catch (IOException ex) {"], [171, "                        logger.error(\"Error while flushing \" + currentWriteFile.getFileId() + \" to disk\", ex);"], [176, ""], [177, "                if (!stopInProgress) {"], [178, "                    startStopLock.lock();"], [179, "                    try {"], [180, "                        compactionThread = null;"], [181, "                        startCompactionThread();"], [182, "                    } finally {"], [183, "                        startStopLock.unlock();"], [184, "                    }"], [185, "                }"], [186, "                else {"], [187, "                    logger.info(\"Not restarting thread as the lock is held by stop compaction method.\");"], [188, "                }"], [189, ""], [198, "            while (isRunning) {"], [203, "                        // skip rest of the steps and check status of isRunning flag."], [204, "                        // while pausing/stopping compaction isRunning flag must be set to false."], [205, "                        continue;"], [322, "    // Used only for tests. to be called only after all writes in the test have been performed."], [323, "    @VisibleForTesting"], [324, "    synchronized boolean isCompactionComplete() {"], [325, ""], [326, "        if (!isCompactionRunning())"], [331, "                isRunning = false;"]], "deleted": [[23, "    private volatile boolean isRunning = true;"], [32, "    private CompactionThread compactionThread;"], [50, "    boolean stopCompactionThread() throws IOException {"], [51, "        isRunning = false;"], [52, "        if (compactionThread != null) {"], [53, "            try {"], [59, "                if (currentWriteFile != null) {"], [64, "            } catch (InterruptedException e) {"], [65, "                logger.error(\"Error while waiting for compaction thread to stop\", e);"], [66, "                return false;"], [72, "    synchronized void startCompactionThread() {"], [73, "        if (compactionThread == null) {"], [74, "            compactionThread = new CompactionThread();"], [75, "            compactionThread.start();"], [133, "                logger.error(\"Compaction thread crashed. Creating and running another thread. \", e);"], [134, "                compactionThread = null;"], [138, "                    } catch (IOException e1) {"], [139, "                        logger.error(\"Error while flushing \" + currentWriteFile.getFileId() + \" to disk\", e);"], [144, "                startCompactionThread();"], [153, "            while (isRunning && !dbInternal.options.isCompactionDisabled()) {"], [158, "                        break;"], [170, ""], [276, "    // Used only for tests. to be called only after all writes in the test have been performed."], [277, "    boolean isCompactionComplete() {"], [278, "        if (dbInternal.options.isCompactionDisabled())"]]}, "num_lines_added": 74, "num_lines_removed": 25}