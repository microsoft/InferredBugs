{"hash": "ede610f67fb262414e0e2235050215035321ec7f", "message": "Adds PendingRequestRSocket replacing map in Registry", "file_num_lines": 73, "diff_parsed": {"added": [[45, "\t\tRSocket service = findRSocket(payload);"], [46, "\t\treturn service.fireAndForget(payload);"], [57, "\t\t\t\t\tRSocket service = findRSocket(signal.get());"], [58, "\t\t\t\t\treturn service.requestChannel(payloadFlux);"], [64, "\t\tRSocket service = findRSocket(payload);"], [65, "\t\treturn service.requestResponse(payload);"], [70, "\t\tRSocket service = findRSocket(payload);"], [71, "\t\treturn service.requestStream(payload);"], [72, "\t}"], [73, ""], [74, "\tprivate RSocket findRSocket(Payload payload) {"], [78, "\t\tif (service == null) {"], [79, "\t\t\tPendingRequestRSocket pending = new PendingRequestRSocket(metadata);"], [80, "\t\t\tthis.registry.addListener(pending); //TODO: deal with removing?"], [81, "\t\t\tservice = pending;"], [84, "\t\treturn service;"], [88, "\t\tif (tags == null) return null; //TODO: error"]], "deleted": [[30, "import reactor.core.publisher.MonoProcessor;"], [46, "\t\tList<String> metadata = getRoutingMetadata(payload);"], [47, "\t\tRSocket service = findRSocket(metadata);"], [48, ""], [49, "\t\tif (service != null) {"], [50, "\t\t\treturn service.fireAndForget(payload);"], [51, "\t\t}"], [52, ""], [53, "\t\t//TODO: handle concurrency issues"], [54, "\t\tMonoProcessor<RSocket> processor = MonoProcessor.create();"], [55, "\t\tthis.registry.pendingRequest(metadata, processor);"], [56, ""], [57, "\t\treturn processor"], [58, "\t\t\t\t.log(\"pending-request\")"], [59, "\t\t\t\t.flatMap(rSocket -> rSocket.fireAndForget(payload));"], [70, "\t\t\t\t\tPayload payload = signal.get();"], [71, "\t\t\t\t\tList<String> metadata = getRoutingMetadata(payload);"], [72, "\t\t\t\t\tRSocket service = findRSocket(metadata);"], [73, ""], [74, "\t\t\t\t\tif (service != null) {"], [75, "\t\t\t\t\t\treturn service.requestChannel(payloadFlux);"], [76, "\t\t\t\t\t}"], [77, ""], [78, "\t\t\t\t\tMonoProcessor<RSocket> processor = MonoProcessor.create();"], [79, "\t\t\t\t\tthis.registry.pendingRequest(metadata, processor);"], [80, ""], [81, "\t\t\t\t\treturn processor"], [82, "\t\t\t\t\t\t\t.log(\"pending-request\")"], [83, "\t\t\t\t\t\t\t.flatMapMany(rSocket -> rSocket.requestChannel(payloadFlux));"], [89, "\t\tList<String> metadata = getRoutingMetadata(payload);"], [90, "\t\tRSocket service = findRSocket(metadata);"], [91, ""], [92, "\t\tif (service != null) {"], [93, "\t\t\treturn service.requestResponse(payload);"], [94, "\t\t}"], [95, ""], [96, "\t\tMonoProcessor<RSocket> processor = MonoProcessor.create();"], [97, "\t\tthis.registry.pendingRequest(metadata, processor);"], [98, ""], [99, "\t\treturn processor"], [100, "\t\t\t\t.log(\"pending-request\")"], [101, "\t\t\t\t.flatMap(rSocket -> rSocket.requestResponse(payload));"], [109, "\t\tif (service != null) {"], [110, "\t\t\treturn service.requestStream(payload);"], [113, "\t\tMonoProcessor<RSocket> processor = MonoProcessor.create();"], [114, "\t\tthis.registry.pendingRequest(metadata, processor);"], [115, ""], [116, "\t\treturn processor"], [117, "\t\t\t\t.log(\"pending-request\")"], [118, "\t\t\t\t.flatMapMany(rSocket -> rSocket.requestStream(payload));"], [122, "\t\tif (tags == null) return null;"]]}, "num_lines_added": 17, "num_lines_removed": 51}