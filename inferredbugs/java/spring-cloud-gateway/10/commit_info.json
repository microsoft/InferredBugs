{"hash": "6855e15cb37b6eadeae1691e864144b0a7191185", "message": "Updates addWeightConfig to remove synchronized.\n\nInstead of modifying GroupWeightConfigs create a new one and replace it.\n\nFixes gh-1459", "file_num_lines": 195, "diff_parsed": {"added": [[134, "\t\t\t// forces initialization"], [135, "\t\t\trouteLocator.ifAvailable(locator -> locator.getRoutes().subscribe());"], [162, "\t\tGroupWeightConfig config;"], [163, "\t\t// only create new GroupWeightConfig rather than modify"], [164, "\t\t// and put at end of calculations. This avoids concurency problems"], [165, "\t\t// later during filter execution."], [166, "\t\tif (groupWeights.containsKey(group)) {"], [167, "\t\t\tconfig = new GroupWeightConfig(groupWeights.get(group));"], [168, "\t\t}"], [169, "\t\telse {"], [170, "\t\t\tconfig = new GroupWeightConfig(group);"], [173, "\t\tconfig.weights.put(weightConfig.getRouteId(), weightConfig.getWeight());"], [175, "\t\t// recalculate"], [177, "\t\t// normalize weights"], [178, "\t\tint weightsSum = 0;"], [180, "\t\tfor (Integer weight : config.weights.values()) {"], [181, "\t\t\tweightsSum += weight;"], [182, "\t\t}"], [184, "\t\tfinal AtomicInteger index = new AtomicInteger(0);"], [185, "\t\tfor (Map.Entry<String, Integer> entry : config.weights.entrySet()) {"], [186, "\t\t\tString routeId = entry.getKey();"], [187, "\t\t\tInteger weight = entry.getValue();"], [188, "\t\t\tDouble nomalizedWeight = weight / (double) weightsSum;"], [189, "\t\t\tconfig.normalizedWeights.put(routeId, nomalizedWeight);"], [191, "\t\t\t// recalculate rangeIndexes"], [192, "\t\t\tconfig.rangeIndexes.put(index.getAndIncrement(), routeId);"], [193, "\t\t}"], [195, "\t\t// TODO: calculate ranges"], [196, "\t\tconfig.ranges.clear();"], [198, "\t\tconfig.ranges.add(0.0);"], [199, ""], [200, "\t\tList<Double> values = new ArrayList<>(config.normalizedWeights.values());"], [201, "\t\tfor (int i = 0; i < values.size(); i++) {"], [202, "\t\t\tDouble currentWeight = values.get(i);"], [203, "\t\t\tDouble previousRange = config.ranges.get(i);"], [204, "\t\t\tDouble range = previousRange + currentWeight;"], [205, "\t\t\tconfig.ranges.add(range);"], [207, ""], [208, "\t\tif (log.isTraceEnabled()) {"], [209, "\t\t\tlog.trace(\"Recalculated group weight config \" + config);"], [210, "\t\t}"], [211, "\t\t// only update after all calculations"], [212, "\t\tgroupWeights.put(group, config);"], [235, "\t\t\tList<Double> ranges = config.ranges;"], [237, "\t\t\tif (log.isTraceEnabled()) {"], [238, "\t\t\t\tlog.trace(\"Weight for group: \" + group + \", ranges: \" + ranges + \", r: \""], [239, "\t\t\t\t\t\t+ r);"], [240, "\t\t\t}"], [242, "\t\t\tfor (int i = 0; i < ranges.size() - 1; i++) {"], [243, "\t\t\t\tif (r >= ranges.get(i) && r < ranges.get(i + 1)) {"], [244, "\t\t\t\t\tString routeId = config.rangeIndexes.get(i);"], [245, "\t\t\t\t\tweights.put(group, routeId);"], [246, "\t\t\t\t\tbreak;"], [274, "\t\tGroupWeightConfig(GroupWeightConfig other) {"], [275, "\t\t\tthis.group = other.group;"], [276, "\t\t\tthis.weights = new LinkedHashMap<>(other.weights);"], [277, "\t\t\tthis.normalizedWeights = new LinkedHashMap<>(other.normalizedWeights);"], [278, "\t\t\tthis.rangeIndexes = new LinkedHashMap<>(other.rangeIndexes);"], [279, "\t\t}"], [280, ""]], "deleted": [[134, "\t\t\trouteLocator.ifAvailable(locator -> locator.getRoutes().subscribe()); // forces"], [135, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// initialization"], [162, "\t\tGroupWeightConfig c = groupWeights.get(group);"], [163, "\t\tif (c == null) {"], [164, "\t\t\tc = new GroupWeightConfig(group);"], [165, "\t\t\tgroupWeights.put(group, c);"], [167, "\t\tGroupWeightConfig config = c;"], [168, "\t\tsynchronized (config) {"], [169, "\t\t\tconfig.weights.put(weightConfig.getRouteId(), weightConfig.getWeight());"], [171, "\t\t\t// recalculate"], [173, "\t\t\t// normalize weights"], [174, "\t\t\tint weightsSum = config.weights.values().stream().mapToInt(Integer::intValue)"], [175, "\t\t\t\t\t.sum();"], [177, "\t\t\tfinal AtomicInteger index = new AtomicInteger(0);"], [178, "\t\t\tconfig.weights.forEach((routeId, weight) -> {"], [179, "\t\t\t\tDouble nomalizedWeight = weight / (double) weightsSum;"], [180, "\t\t\t\tconfig.normalizedWeights.put(routeId, nomalizedWeight);"], [182, "\t\t\t\t// recalculate rangeIndexes"], [183, "\t\t\t\tconfig.rangeIndexes.put(index.getAndIncrement(), routeId);"], [184, "\t\t\t});"], [186, "\t\t\t// TODO: calculate ranges"], [187, "\t\t\tconfig.ranges.clear();"], [189, "\t\t\tconfig.ranges.add(0.0);"], [191, "\t\t\tList<Double> values = new ArrayList<>(config.normalizedWeights.values());"], [192, "\t\t\tfor (int i = 0; i < values.size(); i++) {"], [193, "\t\t\t\tDouble currentWeight = values.get(i);"], [194, "\t\t\t\tDouble previousRange = config.ranges.get(i);"], [195, "\t\t\t\tDouble range = previousRange + currentWeight;"], [196, "\t\t\t\tconfig.ranges.add(range);"], [197, "\t\t\t}"], [199, "\t\t\tif (log.isTraceEnabled()) {"], [200, "\t\t\t\tlog.trace(\"Recalculated group weight config \" + config);"], [201, "\t\t\t}"], [225, "\t\t\tsynchronized (config) {"], [226, "\t\t\t\tList<Double> ranges = config.ranges;"], [228, "\t\t\t\tif (log.isTraceEnabled()) {"], [229, "\t\t\t\t\tlog.trace(\"Weight for group: \" + group + \", ranges: \" + ranges"], [230, "\t\t\t\t\t\t\t+ \", r: \" + r);"], [231, "\t\t\t\t}"], [233, "\t\t\t\tfor (int i = 0; i < ranges.size() - 1; i++) {"], [234, "\t\t\t\t\tif (r >= ranges.get(i) && r < ranges.get(i + 1)) {"], [235, "\t\t\t\t\t\tString routeId = config.rangeIndexes.get(i);"], [236, "\t\t\t\t\t\tweights.put(group, routeId);"], [237, "\t\t\t\t\t\tbreak;"], [238, "\t\t\t\t\t}"]]}, "num_lines_added": 60, "num_lines_removed": 45}