{"hash": "eb3b3aae28574697f88a5c2423e5f966ca47ad6f", "message": "Moves tags to GatewayExchange", "file_num_lines": 183, "diff_parsed": {"added": [[41, "import org.springframework.util.StringUtils;"], [87, "\t\tGatewayExchange exchange = createExchange(FIRE_AND_FORGET, payload);"], [90, "\t\t\t\t.doOnError(t -> count(exchange, \"error\"))"], [91, "\t\t\t\t.doFinally(s -> count(exchange, \"\"));"], [92, "\t}"], [93, ""], [94, "\tprivate GatewayExchange createExchange(GatewayExchange.Type type, Payload payload) {"], [95, "\t\tGatewayExchange exchange = GatewayExchange.fromPayload(type, payload);"], [96, "\t\tTags tags = getTags(exchange);"], [97, "\t\texchange.setTags(tags);"], [98, "\t\treturn exchange;"], [115, "\t\tGatewayExchange exchange = createExchange(REQUEST_CHANNEL, payload);"], [116, "\t\tTags responderTags = Tags.of(\"source\", \"responder\");"], [119, "\t\t\t\t\tTags requesterTags = Tags.of(\"source\", \"requester\");"], [121, "\t\t\t\t\t\t\t.doOnNext(s -> count(exchange, \"payload\", requesterTags))"], [122, "\t\t\t\t\t\t\t.doOnError(t -> count(exchange, \"error\", requesterTags))"], [123, "\t\t\t\t\t\t\t.doFinally(s -> count(exchange, requesterTags));"], [132, "\t\t\t\t.doOnNext(s -> count(exchange, \"payload\", responderTags))"], [133, "\t\t\t\t.doOnError(t -> count(exchange, \"error\", responderTags))"], [134, "\t\t\t\t.doFinally(s -> count(exchange, responderTags));"], [135, "\t}"], [136, ""], [137, "\tprivate void count(GatewayExchange exchange, String suffix) {"], [138, "\t\tcount(exchange, suffix, Tags.empty());"], [139, "\t}"], [140, ""], [141, "\tprivate void count(GatewayExchange exchange, Tags additionalTags) {"], [142, "\t\tcount(exchange, null, additionalTags);"], [143, "\t}"], [144, ""], [145, "\tprivate void count(GatewayExchange exchange, String suffix, Tags additionalTags) {"], [146, "\t\tTags tags = exchange.getTags().and(additionalTags);"], [147, "\t\tString name = getMetricName(exchange, suffix);"], [148, "\t\tthis.meterRegistry.counter(name, tags).increment();"], [149, "\t}"], [150, ""], [151, "\tprivate String getMetricName(GatewayExchange exchange) {"], [152, "\t\treturn getMetricName(exchange, null);"], [155, "\tprivate String getMetricName(GatewayExchange exchange, String suffix) {"], [156, "\t\tStringBuilder name = new StringBuilder(\"forward.\");"], [157, "\t\tname.append(exchange.getType().getKey());"], [158, "\t\tif (StringUtils.hasLength(suffix)) {"], [159, "\t\t\tname.append(\".\");"], [160, "\t\t\tname.append(suffix);"], [161, "\t\t}"], [162, "\t\treturn name.toString();"], [168, "\t\tGatewayExchange exchange = createExchange(REQUEST_RESPONSE, payload);"], [172, "\t\t\t\t.doOnError(t -> count(exchange, \"error\"))"], [173, "\t\t\t\t.doFinally(s -> timer.get().stop(meterRegistry.timer(getMetricName(exchange), exchange.getTags())));"], [178, "\t\tGatewayExchange exchange = createExchange(REQUEST_STREAM, payload);"], [182, "\t\t\t\t.doOnNext(s -> count(exchange, \"payload\"))"], [183, "\t\t\t\t.doOnError(t -> count(exchange, \"error\"))"], [184, "\t\t\t\t.doFinally(s -> count(exchange, Tags.empty()));"]], "deleted": [[86, "\t\tGatewayExchange exchange = GatewayExchange.fromPayload(FIRE_AND_FORGET, payload);"], [87, "\t\tTags tags = getTags(exchange);"], [90, "\t\t\t\t.doOnError(t -> count(\"forward.request.fnf.error\", tags))"], [91, "\t\t\t\t.doFinally(s -> count(\"forward.request.fnf\", tags));"], [108, "\t\tGatewayExchange exchange = GatewayExchange.fromPayload(REQUEST_CHANNEL, payload);"], [109, "\t\tTags tags = getTags(exchange);"], [110, "\t\tTags responderTags = tags.and(\"source\", \"responder\");"], [113, "\t\t\t\t\tTags requesterTags = tags.and(\"source\", \"requester\");"], [115, "\t\t\t\t\t\t\t.doOnNext(s -> count(\"forward.request.channel.payload\", requesterTags))"], [116, "\t\t\t\t\t\t\t.doOnError(t -> count(\"forward.request.channel.error\", requesterTags))"], [117, "\t\t\t\t\t\t\t.doFinally(s -> count(\"forward.request.channel\", requesterTags));"], [126, "\t\t\t\t.doOnNext(s -> count(\"forward.request.channel.payload\", responderTags))"], [127, "\t\t\t\t.doOnError(t -> count(\"forward.request.channel.error\", responderTags))"], [128, "\t\t\t\t.doFinally(s -> count(\"forward.request.channel\", responderTags));"], [131, "\tprivate void count(String name, Tags responderTags) {"], [132, "\t\tthis.meterRegistry.counter(name, responderTags).increment();"], [138, "\t\tGatewayExchange exchange = GatewayExchange.fromPayload(REQUEST_RESPONSE, payload);"], [139, "\t\tTags tags = getTags(exchange);"], [143, "\t\t\t\t.doOnError(t -> count(\"forward.request.response.error\", tags))"], [144, "\t\t\t\t.doFinally(s -> timer.get().stop(meterRegistry.timer(\"forward.request.response\", tags)));"], [149, "\t\tGatewayExchange exchange = GatewayExchange.fromPayload(REQUEST_STREAM, payload);"], [150, "\t\tTags tags = getTags(exchange);"], [154, "\t\t\t\t//TODO: move tagnames to enum"], [155, "\t\t\t\t.doOnNext(s -> count(\"forward.request.stream.payload\", tags))"], [156, "\t\t\t\t.doOnError(t -> count(\"forward.request.stream.error\", tags))"], [157, "\t\t\t\t.doFinally(s -> count(\"forward.request.stream\", tags));"]]}, "num_lines_added": 53, "num_lines_removed": 26}