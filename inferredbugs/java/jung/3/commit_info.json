{"hash": "a1abb60f12bcfb0f5049ff238eaa05483c7d0ce9", "message": "javadoc, generics, and refactor updates\n Changes to be committed:\n\tmodified:   jung-visualization/src/main/java/edu/uci/ics/jung/visualization/BasicVisualizationServer.java\n\tmodified:   jung-visualization/src/main/java/edu/uci/ics/jung/visualization/spatial/SpatialGrid.java\n\tmodified:   jung-visualization/src/main/java/edu/uci/ics/jung/visualization/spatial/SpatialQuadTree.java", "file_num_lines": 297, "diff_parsed": {"added": [[47, "  private Map<Quadrant, SpatialQuadTree<N>> children;"], [86, "  public SpatialQuadTree<N> setMaxObjects(int o) {"], [95, "  public SpatialQuadTree<N> setMaxLevels(int l) {"], [129, "    SpatialQuadTree<N> ne ="], [130, "        new SpatialQuadTree<>(layoutModel, childLevel, x + width, y, width, height);"], [131, "    SpatialQuadTree<N> nw = new SpatialQuadTree<>(layoutModel, childLevel, x, y, width, height);"], [132, "    SpatialQuadTree<N> sw ="], [133, "        new SpatialQuadTree<>(layoutModel, childLevel, x, y + height, width, height);"], [134, "    SpatialQuadTree<N> se ="], [135, "        new SpatialQuadTree<>(layoutModel, childLevel, x + width, y + height, width, height);"], [219, "      for (Map.Entry<Quadrant, SpatialQuadTree<N>> entry : children.entrySet()) {"], [238, "      for (Map.Entry<Quadrant, SpatialQuadTree<N>> entry : children.entrySet()) {"], [247, "  public static <N> List<SpatialQuadTree<N>> getNodes("], [248, "      List<SpatialQuadTree<N>> list, SpatialQuadTree<N> tree) {"], [262, "      for (Map.Entry<Quadrant, SpatialQuadTree<N>> entry : tree.children.entrySet()) {"], [269, "  private List<SpatialQuadTree<N>> collectNodes("], [270, "      List<SpatialQuadTree<N>> list, SpatialQuadTree<N> tree) {"], [273, "      for (Map.Entry<Quadrant, SpatialQuadTree<N>> entry : tree.children.entrySet()) {"], [319, "      for (Map.Entry<Quadrant, SpatialQuadTree<N>> entry : children.entrySet()) {"], [348, "        for (Map.Entry<Quadrant, SpatialQuadTree<N>> entry : this.children.entrySet()) {"], [395, "    if (locationContainingLeaf != null && !locationContainingLeaf.equals(nodeContainingLeaf)) {"]], "deleted": [[47, "  private Map<Quadrant, SpatialQuadTree> children;"], [77, "    this.layoutModel = layoutModel;"], [87, "  public SpatialQuadTree setMaxObjects(int o) {"], [96, "  public SpatialQuadTree setMaxLevels(int l) {"], [130, "    SpatialQuadTree ne = new SpatialQuadTree(layoutModel, childLevel, x + width, y, width, height);"], [131, "    SpatialQuadTree nw = new SpatialQuadTree(layoutModel, childLevel, x, y, width, height);"], [132, "    SpatialQuadTree sw = new SpatialQuadTree(layoutModel, childLevel, x, y + height, width, height);"], [133, "    SpatialQuadTree se ="], [134, "        new SpatialQuadTree(layoutModel, childLevel, x + width, y + height, width, height);"], [218, "      for (Map.Entry<Quadrant, SpatialQuadTree> entry : children.entrySet()) {"], [237, "      for (Map.Entry<Quadrant, SpatialQuadTree> entry : children.entrySet()) {"], [246, "  public static <N> List<SpatialQuadTree> getNodes("], [247, "      List<SpatialQuadTree> list, SpatialQuadTree<N> tree) {"], [261, "      for (Map.Entry<Quadrant, SpatialQuadTree> entry : tree.children.entrySet()) {"], [268, "  private List<SpatialQuadTree> collectNodes(List<SpatialQuadTree> list, SpatialQuadTree<N> tree) {"], [271, "      for (Map.Entry<Quadrant, SpatialQuadTree> entry : tree.children.entrySet()) {"], [317, "      for (Map.Entry<Quadrant, SpatialQuadTree> entry : children.entrySet()) {"], [346, "        for (Map.Entry<Quadrant, SpatialQuadTree> entry : this.children.entrySet()) {"], [393, "    if (!locationContainingLeaf.equals(nodeContainingLeaf)) {"]]}, "num_lines_added": 21, "num_lines_removed": 19}