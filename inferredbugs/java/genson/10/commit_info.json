{"hash": "4d8b03b56188057a4c347b1880bb4e89432f5e7e", "message": "improved location information (col/row) during parsing and some tests (still needs a bit more testing), replaced illegalstateexception from JsonReader with a new JsonStreamException, added some more javadoc\n\n, using UTF8 as default charset in Genson.createWriter/Reader", "file_num_lines": 500, "diff_parsed": {"added": [[3, "import java.io.CharArrayReader;"], [36, "\tpublic void testParsingErrorPositionSameRow() throws IOException {"], [37, "\t\t@SuppressWarnings(\"resource\")"], [38, "\t\tJsonReader reader = new JsonReader(new StringReader(\"[\" + \"}\"), strictDoubleParse,"], [39, "\t\t\t\treadMetadata);"], [40, "\t\ttry {"], [41, "\t\t\treader.beginArray().endArray();"], [42, "\t\t\tfail();"], [43, "\t\t} catch (JsonStreamException e) {"], [44, "\t\t\tassertEquals(0, e.getRow());"], [45, "\t\t\tassertEquals(1, e.getColumn());"], [46, "\t\t}"], [47, "\t}"], [48, ""], [49, "\t@Test"], [50, "\tpublic void testParsingErrorPositionDifferentRow() throws IOException {"], [51, "\t\t@SuppressWarnings(\"resource\")"], [52, "\t\tJsonReader reader = new JsonReader(new StringReader(\"  [\\n\\n    \\n\" + \"}\"),"], [53, "\t\t\t\tstrictDoubleParse, readMetadata);"], [54, "\t\ttry {"], [55, "\t\t\treader.beginArray().endArray();"], [56, "\t\t\tfail();"], [57, "\t\t} catch (JsonStreamException e) {"], [58, "\t\t\tassertEquals(3, e.getRow());"], [59, "\t\t\tassertEquals(1, e.getColumn());"], [60, "\t\t}"], [61, "\t}"], [62, ""], [63, "\t@Test"], [64, "\tpublic void testParsingErrorPositionDifferentRowWithContent() throws IOException {"], [65, "\t\t@SuppressWarnings(\"resource\")"], [66, "\t\tJsonReader reader = new JsonReader(new StringReader(\"  [1, 2\\n, \\\"aa vb\\\",\\n4330833    \\n\""], [67, "\t\t\t\t+ \"}\"), strictDoubleParse, readMetadata);"], [68, "\t\ttry {"], [69, "\t\t\treader.beginArray().endArray();"], [70, "\t\t\tfail();"], [71, "\t\t} catch (JsonStreamException e) {"], [72, "\t\t\tassertEquals(0, e.getRow());"], [73, "\t\t\tassertEquals(3, e.getColumn());"], [74, "\t\t}"], [75, "\t}"], [76, ""], [77, "\t// must produce same result as testParsingErrorPositionDifferentRow"], [78, "\t@Test"], [79, "\tpublic void testParsingErrorPositionDifferentRowWithContent2() throws IOException {"], [80, "\t\t@SuppressWarnings(\"resource\")"], [81, "\t\tJsonReader reader = new JsonReader(new StringReader(\"  [1, 2\\n, \\\"aa vb\\\",\\n4330833    \\n\""], [82, "\t\t\t\t+ \"}\"), strictDoubleParse, readMetadata);"], [83, "\t\ttry {"], [84, "\t\t\treader.beginArray().next();"], [85, "\t\t\treader.next();"], [86, "\t\t\treader.next();"], [87, "\t\t\treader.next();"], [88, "\t\t\treader.endArray();"], [89, "\t\t\tfail();"], [90, "\t\t} catch (JsonStreamException e) {"], [91, "\t\t\tassertEquals(3, e.getRow());"], [92, "\t\t\tassertEquals(1, e.getColumn());"], [93, "\t\t}"], [94, "\t}"], [95, ""], [96, "\t@Test"], [97, "\tpublic void testParsingErrorPositionLargeInput() throws IOException {"], [98, "\t\t// 2048 is the buffer size, this will allow us to test position"], [99, "\t\t// information for large input that needs to be buffered"], [100, "\t\tchar[] in = new char[2048 + 7];"], [101, "\t\tin[0] = '[';"], [102, "\t\tfor (int i = 1; i < 2046; i++) in[i] = '1';"], [103, "\t\tin[2046] = ',';"], [104, "\t\tin[2047] = '\\n';"], [105, "\t\tin[2048] = '3';"], [106, "\t\tin[2049] = '3';"], [107, "\t\tin[2050] = ',';"], [108, "\t\tin[2051] = '\\n';"], [109, "\t\tin[2052] = '5';"], [110, "\t\tin[2053] = 'x';"], [111, "\t\tin[2054] = ']';"], [112, "\t\t/* looks like :"], [113, "\t\t * [11111.....111,"], [114, "\t\t * 3,"], [115, "\t\t * 5x]"], [116, "\t\t */"], [117, ""], [118, "\t\t@SuppressWarnings(\"resource\")"], [119, "\t\tJsonReader reader = new JsonReader(new CharArrayReader(in), strictDoubleParse, readMetadata);"], [120, "\t\ttry {"], [121, "\t\t\tSystem.out.println(in);"], [122, "\t\t\tfor (reader.beginArray(); reader.hasNext();) {"], [123, "\t\t\t\treader.next();"], [124, "\t\t\t\treader.valueAsDouble();"], [125, "\t\t\t}"], [126, "\t\t\tSystem.out.println(reader.valueAsInt());"], [127, "\t\t\tfail();"], [128, "\t\t} catch (JsonStreamException e) {"], [129, "\t\t\te.printStackTrace();"], [130, "\t\t\tassertEquals(2, e.getRow());"], [131, "\t\t\tassertEquals(1, e.getColumn());"], [132, "\t\t}"], [133, "\t}"], [134, ""], [135, "\t@Test"], [493, "\t\t} catch (JsonStreamException ise) {"], [508, "\t\t} catch (JsonStreamException ise) {"], [522, "\t\t} catch (JsonStreamException ioe) {"], [567, "\t\t} catch (JsonStreamException ise) {"], [571, ""], [572, "\t// TODO this test fails for the moment as we do not handle values that overflow the buffer"], [573, "\t// capacity"], [577, "\t\tarray[array.length - 1] = ']';"], [578, "\t\tfor (int i = 1; i < array.length - 1; i++) {"], [579, "\t\t\tarray[i] = (char) (i % 10 + 48);"]], "deleted": [[392, "\t\t} catch (IllegalStateException ise) {"], [407, "\t\t} catch (IllegalStateException ise) {"], [421, "\t\t} catch (IOException ioe) {"], [466, "\t\t} catch (IllegalStateException ise) {"], [470, ""], [471, "\t// TODO this test fails for the moment as we do not handle values that overflow the buffer capacity"], [475, "\t\tarray[array.length-1] = ']';"], [476, "\t\tfor (int i = 1; i < array.length-1; i++) {"], [477, "\t\t\tarray[i] = (char) (i%10 + 48);"]]}, "num_lines_added": 111, "num_lines_removed": 9}