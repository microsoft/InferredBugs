{"hash": "f0e9b28b81a11b52639fb2a3062c754a4fe6209d", "message": "fixes problem to find exchange rate from historical", "file_num_lines": 84, "diff_parsed": {"added": [[21, "import java.time.format.DateTimeFormatter;"], [22, "import java.util.Comparator;"], [25, "import java.util.function.Predicate;"], [80, "        LocalDate timestamp = getTimeStamp(conversionQuery);"], [100, ""], [101, "\tprivate LocalDate getTimeStamp(ConversionQuery conversionQuery) {"], [102, "\t\tLocalDate timestamp = conversionQuery.get(LocalDate.class);"], [103, "        if (timestamp == null) {"], [104, "            LocalDateTime dateTime = conversionQuery.get(LocalDateTime.class);"], [105, "            if (dateTime != null) {"], [106, "                timestamp = dateTime.toLocalDate();"], [109, "\t\treturn timestamp;"], [110, "\t}"], [112, "    private ExchangeRate lookupRate(List<ExchangeRate> rates,final LocalDate localDate) {"], [113, "        if (Objects.isNull(rates) ) {"], [114, "            return null;"], [115, "        }"], [116, "        if (Objects.isNull(localDate)) {"], [117, "        \tComparator<ExchangeRate> comparator = Comparator.comparing(c -> c.getContext().get(LocalDate.class));"], [118, "        \treturn rates.stream().sorted(comparator.reversed()).findFirst().orElseThrow(() -> new ExchangeRateException(\"There is not more recent exchange rate to  rate on IMFRateProvider.\"));"], [119, "        } else {"], [120, "        \tPredicate<ExchangeRate> filter = rate -> rate.getContext().get(LocalDate.class).equals(localDate);"], [121, "        \treturn rates.stream().filter(filter).findFirst().orElseThrow(() -> new ExchangeRateException(\"There is not recent exchange on day \" + localDate.format(DateTimeFormatter.ISO_LOCAL_DATE) + \" to rate to  rate on IMFRateProvider.\"));"], [122, "        }"]], "deleted": [[77, "        LocalDate timestamp = conversionQuery.get(LocalDate.class);"], [78, "        if (timestamp == null) {"], [79, "            LocalDateTime dateTime = conversionQuery.get(LocalDateTime.class);"], [80, "            if (dateTime != null) {"], [81, "                timestamp = dateTime.toLocalDate();"], [82, "            }"], [83, "        }"], [103, "    private ExchangeRate lookupRate(List<ExchangeRate> list, LocalDate localDate) {"], [104, "        if (Objects.isNull(list)) {"], [105, "            return null;"], [106, "        }"], [107, "        ExchangeRate found = null;"], [108, "        for (ExchangeRate rate : list) {"], [109, "            if (Objects.isNull(localDate)) {"], [110, "                localDate = LocalDate.now();"], [111, "            }"], [112, "            if (isValid(rate.getContext(), localDate)) {"], [113, "                return rate;"], [114, "            }"], [115, "            if (Objects.isNull(found)) {"], [116, "                found = rate;"], [119, "        return found;"], [120, "    }"], [122, "    private boolean isValid(ConversionContext conversionContext, LocalDate timestamp) {"], [123, "        LocalDate validAt = conversionContext.get(LocalDate.class);"], [124, "        return !(Objects.nonNull(validAt)) && validAt.equals(timestamp);"], [126, ""]]}, "num_lines_added": 24, "num_lines_removed": 27}