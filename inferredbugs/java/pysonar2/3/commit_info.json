{"hash": "63a4a10cf324d3fb13f2c4dab208572e020e93b9", "message": "lots of cleanups for Scope etc", "file_num_lines": 343, "diff_parsed": {"added": [[36, "    @NotNull"], [40, "    public Scope(@Nullable Scope parent, ScopeType type) {"], [54, "            this.table = new HashMap<>(s.table);"], [66, "    public void setParent(@Nullable Scope parent) {"], [107, "            globalNames = new HashSet<>();"], [136, "        Binding b = lookupAttr(id);"], [137, "        return insertOrUpdate(b, id, loc, type, kind, tag);"], [138, "    }"], [139, ""], [140, ""], [141, "    public void remove(String id) {"], [142, "        if (table != null) {"], [143, "            table.remove(id);"], [148, "    @NotNull"], [149, "    private Binding insertOrUpdate(@Nullable Binding b, String id, Node loc,"], [150, "                                   @NotNull Type t, Binding.Kind k, int tag) {"], [152, "            b = update(id, new Binding(id, loc, t, k, tag));"], [154, "            b = update(id, new Binding(id, loc, t, k, tag));"], [164, "    public Binding update(String id, Node node, Type type, Binding.Kind kind) {"], [165, "        return update(id, new Binding(id, node, type, kind));"], [166, "    }"], [167, ""], [168, ""], [169, "    @NotNull"], [170, "    public Binding update(String id, @NotNull Binding b) {"], [180, "        if (!getInternalTable().containsKey(id)) {"], [181, "            Indexer.idx.recordBinding(b);"], [182, "            getInternalTable().put(id, b);"], [185, "        return b;"], [211, "    @NotNull"], [258, ""], [259, "    /**"], [260, "     * Look up a name in the module if it is declared as global, otherwise look"], [261, "     * it up locally."], [262, "     */"], [263, "    @Nullable"], [264, "    public Binding lookupScope(String name) {"], [265, "        Binding b = getModuleBindingIfGlobal(name);"], [266, "        if (b != null) {"], [267, "            return b;"], [268, "        } else {"], [269, "            return lookupLocal(name);"], [270, "        }"], [271, "    }"], [272, ""], [273, ""], [281, "    @NotNull"], [282, "    private static Set<Scope> looked = new HashSet<>();    // circularity prevention"], [355, "    @NotNull"], [358, "        if (result != null) {"], [359, "            return result;"], [360, "        } else {"], [361, "            Util.die(\"Couldn't find global table. Shouldn't happen\");"], [362, "            return this;"], [373, "            if (module != this) {"], [380, ""], [381, "    public void putAll(@NotNull Scope other) {"], [382, "        getInternalTable().putAll(other.getInternalTable());"], [385, ""], [395, ""], [401, "        return Collections.emptySet();"], [404, ""], [410, "        return Collections.emptySet();"], [414, "        return table == null || table.isEmpty();"], [423, ""], [427, ""], [437, "                sep = \"@\";"], [440, "                Util.msg(\"unsupported context for extendPath: \" + scopeType);"], [443, ""], [448, "    @NotNull"], [451, "            this.table = new HashMap<>();"]], "deleted": [[36, "    @Nullable"], [40, "    public Scope(Scope parent, ScopeType type) {"], [54, "            this.table = new HashMap<String, Binding>(s.table);"], [66, "    public void setParent(Scope parent) {"], [107, "            globalNames = new HashSet<String>();"], [126, "    /**"], [127, "     * Directly assigns a binding to a name in this table.  Does not add a new"], [128, "     * definition or reference to the binding.  This form of {@code put} is"], [129, "     * often followed by a call to {@link putLocation} to create a reference to"], [130, "     * the binding.  When there is no code location associated with {@code id},"], [131, "     * or it is otherwise undesirable to create a reference, the"], [132, "     * {@link putLocation} call is omitted."], [133, "     */"], [134, "    public void put(String id, @NotNull Binding b) {"], [135, "        getInternalTable().put(id, b);"], [136, "    }"], [137, ""], [148, "        // Attributes are always part of a qualified name.  If there is no qname"], [149, "        // on the target type, it's a bug (we forgot to set the path somewhere.)"], [150, "        if (\"\".equals(path)) {"], [151, "            return null;"], [152, "        } else {"], [153, "            Binding b = lookupAttr(id);"], [154, "            return insertOrUpdate(b, id, loc, type, kind, tag);"], [159, "    /**"], [160, "     * If no bindings are found, or it is rebinding in the same thread of"], [161, "     * control to a new type, then create a new binding and rewrite/shadow the"], [162, "     * old one. Otherwise, use the exisitng binding and update the type."], [163, "     */"], [164, "    @Nullable"], [165, "    private Binding insertOrUpdate(@Nullable Binding b, String id, Node loc, @NotNull Type t, Binding.Kind k, int tag) {"], [167, "            b = insertBinding(id, new Binding(id, loc, t, k, tag));"], [169, "            b = insertBinding(id, new Binding(id, loc, t, k, tag));"], [179, "    private Binding insertBinding(String id, @NotNull Binding b) {"], [184, "            case PARAMETER:"], [185, "                b.setQname(extendPathForParam(b.getName()));"], [186, "                break;"], [191, "        Indexer.idx.putBinding(b);"], [192, "        put(id, b);"], [193, "        return b;"], [194, "    }"], [196, ""], [197, "    public void remove(String id) {"], [198, "        if (table != null) {"], [199, "            table.remove(id);"], [201, "    }"], [203, ""], [204, "    /**"], [205, "     * Adds a new binding for {@code id}.  If a binding already existed,"], [206, "     * replaces its previous definitions, if any, with {@code loc}.  Sets the"], [207, "     * binding's type to {@code type} (not a union with the previous type)."], [208, "     */"], [209, "    @Nullable"], [210, "    public Binding update(String id, Node node, Type type, Binding.Kind kind) {"], [211, "        Binding b = lookupScope(id);"], [212, "        if (b == null) {"], [213, "            return insertBinding(id, new Binding(id, node, type, kind));"], [214, "        } else {"], [215, "            b.getDefs().clear();"], [216, "            b.addDef(node);"], [217, "            b.setType(type);"], [218, "            b.setKind(kind);"], [219, "            return b;"], [220, "        }"], [246, "    @Nullable"], [300, "    @Nullable"], [301, "    private static Set<Scope> looked = new HashSet<Scope>();    // circularity prevention"], [356, "    /**"], [357, "     * Look up a name in the module if it is declared as global, otherwise look"], [358, "     * it up locally."], [359, "     */"], [360, "    @Nullable"], [361, "    public Binding lookupScope(String name) {"], [362, "        Binding b = getModuleBindingIfGlobal(name);"], [363, "        if (b != null) {"], [364, "            return b;"], [365, "        } else {"], [366, "            return lookupLocal(name);"], [367, "        }"], [368, "    }"], [387, "    @Nullable"], [390, "        if (result == null) {"], [391, "            result = this;"], [393, "        return result;"], [403, "            if (module != null && module != this) {"], [410, "    /**"], [411, "     * Merge all records from another symbol table. Used by {@code import from *}."], [412, "     */"], [413, "    public void merge(@NotNull Scope other) {"], [414, "        getInternalTable().putAll(other.table);"], [431, "        Collection<Binding> result = Collections.emptySet();"], [432, "        return result;"], [440, "        Set<Entry<String, Binding>> result = Collections.emptySet();"], [441, "        return result;"], [445, "        return table == null ? true : table.isEmpty();"], [446, "    }"], [447, ""], [448, ""], [449, "    @NotNull"], [450, "    public String extendPathForParam(String name) {"], [451, "        assert(!path.isEmpty());"], [452, ""], [453, "        StringBuilder sb = new StringBuilder();"], [454, "        sb.append(path).append(\"@\").append(name);"], [455, "        return sb.toString();"], [476, "                sep = \"&\";"], [479, "                System.err.println(\"unsupported context for extendPath: \" + scopeType);"], [486, "    @Nullable"], [489, "            this.table = new HashMap<String, Binding>();"], [502, ""], [503, "    @NotNull"], [504, "    public String toShortString() {"], [505, "        return \"<Scope:\" + getScopeType() + \":\" + path + \">\";"], [506, "    }"]]}, "num_lines_added": 71, "num_lines_removed": 114}