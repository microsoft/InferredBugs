{"hash": "64bc8bf1ab623819e824ef548f24527be9aa0576", "message": "Refactored ISE parser tests", "file_num_lines": 58, "diff_parsed": {"added": [[21, "import java.util.Map;"], [24, "import org.json.simple.parser.JSONParser;"], [42, "    /**"], [43, "     * The inputStrings."], [44, "     */"], [45, "     private static String[] inputStrings;"], [47, "\t /**"], [48, "\t * The parser."], [49, "\t */"], [50, "\tprivate static BasicIseParser parser = null;"], [84, "        super.setUp(\"com.opensoc.parsing.test.BasicLancopeParserTest\");"], [85, "        setInputStrings(super.readTestDataFromFile(this.getConfig().getString(\"logFile\")));"], [86, "        BasicIseParserTest.setIseParser(new BasicIseParser());"], [111, "        for (String inputString : getInputStrings()) {"], [112, "            JSONObject parsed = parser.parse(inputString.getBytes());"], [113, "            assertNotNull(parsed);"], [114, ""], [115, "            System.out.println(parsed);"], [116, "            JSONParser parser = new JSONParser();"], [117, ""], [118, "            Map<?, ?> json=null;"], [119, "            try {"], [120, "                json = (Map<?, ?>) parser.parse(parsed.toJSONString());"], [121, "                assertEquals(true, validateJsonData(super.getSchemaJsonString(), json.toString()));"], [122, "            } catch (ParseException e) {"], [123, "                e.printStackTrace();"], [124, "            }"], [125, "        }"], [135, "\t\treturn parser;"], [145, "\tpublic static void setIseParser(BasicIseParser parser) {"], [147, "\t\tBasicIseParserTest.parser = parser;"], [149, "   /**"], [150, "    * Returns the inputStrings."], [151, "    * @return the inputStrings."], [152, "    */"], [153, ""], [154, "   public static String[] getInputStrings() {"], [155, "       return inputStrings;"], [156, "   }"], [157, ""], [158, "   /**"], [159, "    * Sets the inputStrings."], [160, "    * @param inputStrings the inputStrings."], [161, "    */"], [162, ""], [163, "   public static void setInputStrings(String[] inputStrings) {"], [164, "       BasicIseParserTest.inputStrings = inputStrings;"], [165, "   }"]], "deleted": [[19, "import java.io.BufferedReader;"], [20, "import java.io.FileReader;"], [42, ""], [43, "\tprivate static String rawMessage = \"\";"], [45, "\tprivate static BasicIseParser iseParser = null;"], [63, "\t\tsetRawMessage(\"Aug  6 17:26:31 10.34.84.145 Aug  7 00:45:43 stage-pdp01 CISE_Profiler 0000024855 1 0 2014-08-07 00:45:43.741 -07:00 0000288542 80002 INFO  Profiler: Profiler EndPoint profiling event occurred, ConfigVersionId=113, EndpointCertainityMetric=10, EndpointIPAddress=10.56.111.14, EndpointMacAddress=3C:97:0E:C3:F8:F1, EndpointMatchedPolicy=Nortel-Device, EndpointNADAddress=10.56.72.127, EndpointOUI=Wistron InfoComm(Kunshan)Co.\\\\,Ltd., EndpointPolicy=Nortel-Device, EndpointProperty=StaticAssignment=false\\\\,PostureApplicable=Yes\\\\,PolicyVersion=402\\\\,IdentityGroupID=0c1d9270-68a6-11e1-bc72-0050568e013c\\\\,Total Certainty Factor=10\\\\,BYODRegistration=Unknown\\\\,FeedService=false\\\\,EndPointPolicyID=49054ed0-68a6-11e1-bc72-0050568e013c\\\\,FirstCollection=1407397543718\\\\,MatchedPolicyID=49054ed0-68a6-11e1-bc72-0050568e013c\\\\,TimeToProfile=19\\\\,StaticGroupAssignment=false\\\\,NmapSubnetScanID=0\\\\,DeviceRegistrationStatus=NotRegistered\\\\,PortalUser=, EndpointSourceEvent=SNMPQuery Probe, EndpointIdentityGroup=Profiled, ProfilerServer=stage-pdp01.cisco.com,\");"], [64, ""], [72, "\t\tsetRawMessage(\"\");"], [82, "\t\tsuper.setUp();"], [83, "\t\tassertNotNull(getRawMessage());"], [84, "\t\tBasicIseParserTest.setIseParser(new BasicIseParser());"], [109, "\t\t// JSONObject parsed = iseParser.parse(getRawMessage().getBytes());"], [110, "\t\t// assertNotNull(parsed);"], [111, ""], [112, "\t\tURL log_url = getClass().getClassLoader().getResource(\"IseSample.log\");"], [113, ""], [114, "\t\tBufferedReader br = new BufferedReader(new FileReader(log_url.getFile()));"], [115, "\t\tString line = \"\";"], [116, "\t\twhile ((line = br.readLine()) != null) {"], [117, "\t\t\tSystem.out.println(line);"], [118, "\t\t\tJSONObject parsed = iseParser.parse(line.getBytes());"], [119, "\t\t\tSystem.out.println(parsed);"], [120, ""], [121, "\t\t\tassertEquals(true, super.validateJsonData(super.getSchemaJsonString(), parsed.toString()));"], [122, ""], [123, "\t\t}"], [124, "\t\tbr.close();"], [125, "\t}"], [126, ""], [127, "\t/**"], [128, "\t * Returns the rawMessage."], [129, "\t *"], [130, "\t * @return the rawMessage."], [131, "\t */"], [132, ""], [133, "\tpublic static String getRawMessage() {"], [134, "\t\treturn rawMessage;"], [135, ""], [136, "\t}"], [137, ""], [138, "\t/**"], [139, "\t * Sets the rawMessage."], [140, "\t *"], [141, "\t * @param rawMessage"], [142, "\t */"], [143, ""], [144, "\tpublic static void setRawMessage(String rawMessage) {"], [145, ""], [146, "\t\tBasicIseParserTest.rawMessage = rawMessage;"], [156, "\t\treturn iseParser;"], [166, "\tpublic static void setIseParser(BasicIseParser iseParser) {"], [168, "\t\tBasicIseParserTest.iseParser = iseParser;"], [170, ""]]}, "num_lines_added": 48, "num_lines_removed": 53}