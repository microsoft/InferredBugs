{"hash": "fb8179c73010645368f8d8e9bd9dcbdd11322eb9", "message": "Refactored Lancope Parser Tests", "file_num_lines": 58, "diff_parsed": {"added": [[21, "import java.util.Map;"], [24, "import org.json.simple.parser.JSONParser;"], [25, "import org.json.simple.parser.ParseException;"], [39, ""], [40, "    /**"], [41, "     * The inputStrings."], [42, "     */"], [43, "     private static String[] inputStrings;"], [45, ""], [46, "    /**"], [47, "     * The parser."], [48, "     */"], [49, "    private static BasicLancopeParser parser=null;"], [64, "    protected static void setUpBeforeClass() throws Exception {"], [80, "        super.setUp(\"com.opensoc.parsing.test.BasicLancopeParserTest\");"], [81, "        setInputStrings(super.readTestDataFromFile(this.getConfig().getString(\"logFile\")));"], [82, "        BasicLancopeParserTest.setParser(new BasicLancopeParser());"], [104, ""], [105, "        for (String inputString : getInputStrings()) {"], [106, "            JSONObject parsed = parser.parse(inputString.getBytes());"], [107, "            assertNotNull(parsed);"], [108, ""], [109, "            System.out.println(parsed);"], [110, "            JSONParser parser = new JSONParser();"], [111, ""], [112, "            Map<?, ?> json=null;"], [113, "            try {"], [114, "                json = (Map<?, ?>) parser.parse(parsed.toJSONString());"], [115, "                assertEquals(true, validateJsonData(super.getSchemaJsonString(), json.toString()));"], [116, "            } catch (ParseException e) {"], [117, "                e.printStackTrace();"], [123, "    * Returns the parser."], [124, "    * @return the parser."], [125, "    */"], [126, ""], [127, "   public static BasicLancopeParser getParser() {"], [128, "       return parser;"], [129, "   }"], [130, ""], [131, "   /**"], [132, "    * Sets the parser."], [133, "    * @param parser the parser."], [134, "    */"], [135, ""], [136, "   public static void setParser(BasicLancopeParser parser) {"], [137, ""], [138, "       BasicLancopeParserTest.parser = parser;"], [139, "   }"], [140, ""], [141, "   /**"], [142, "    * Returns the inputStrings."], [143, "    * @return the inputStrings."], [144, "    */"], [145, ""], [146, "   public static String[] getInputStrings() {"], [147, "       return inputStrings;"], [148, "   }"], [149, ""], [150, "   /**"], [151, "    * Sets the inputStrings."], [152, "    * @param inputStrings the inputStrings."], [153, "    */"], [154, ""], [155, "   public static void setInputStrings(String[] inputStrings) {"], [156, ""], [157, "       BasicLancopeParserTest.inputStrings = inputStrings;"], [158, "   }"]], "deleted": [[19, "import java.io.BufferedReader;"], [20, "import java.io.FileNotFoundException;"], [21, "import java.io.FileReader;"], [40, "    private  static String rawMessage = \"\";"], [41, "    private static BasicLancopeParser lancopeParser=null;"], [56, "    protected static void setUpBeforeClass() throws Exception {"], [57, "        setRawMessage(\"{\\\"message\\\":\\\"<131>Jul 17 15:59:01 smc-01 StealthWatch[12365]: 2014-07-17T15:58:30Z 10.40.10.254 0.0.0.0 Minor High Concern Index The host's concern index has either exceeded the CI threshold or rapidly increased. Observed 36.55M points. Policy maximum allows up to 20M points.\\\",\\\"@version\\\":\\\"1\\\",\\\"@timestamp\\\":\\\"2014-07-17T15:56:05.992Z\\\",\\\"type\\\":\\\"syslog\\\",\\\"host\\\":\\\"10.122.196.201\\\"}\");"], [73, "        super.setUp();"], [74, "        setRawMessage(\"{\\\"message\\\":\\\"<131>Jul 17 15:59:01 smc-01 StealthWatch[12365]: 2014-07-17T15:58:30Z 10.40.10.254 0.0.0.0 Minor High Concern Index The host's concern index has either exceeded the CI threshold or rapidly increased. Observed 36.55M points. Policy maximum allows up to 20M points.\\\",\\\"@version\\\":\\\"1\\\",\\\"@timestamp\\\":\\\"2014-07-17T15:56:05.992Z\\\",\\\"type\\\":\\\"syslog\\\",\\\"host\\\":\\\"10.122.196.201\\\"}\");"], [75, "        assertNotNull(getRawMessage());"], [76, "        BasicLancopeParserTest.setLancopeParser(new BasicLancopeParser());"], [98, "        URL log_url = getClass().getClassLoader().getResource(\"LancopeSample.log\");"], [99, ""], [100, "        BufferedReader br;"], [101, "        try {"], [102, "            br = new BufferedReader(new FileReader(log_url.getFile()));"], [103, "            String line = \"\";"], [104, "            while ((line = br.readLine()) != null) {"], [105, "                System.out.println(line);"], [106, "                assertNotNull(line);"], [107, "                JSONObject parsed =  lancopeParser.parse(line.getBytes());"], [108, "                System.out.println(parsed);"], [109, "                assertEquals(true, validateJsonData(super.getSchemaJsonString(), parsed.toString()));"], [111, "            br.close();"], [112, "        } catch (FileNotFoundException e) {"], [113, "            e.printStackTrace();"], [114, ""], [117, ""], [118, "    /**"], [119, "     * Returns the rawMessage."], [120, "     * @return the rawMessage."], [121, "     */"], [122, ""], [123, "    public static String getRawMessage() {"], [124, "        return BasicLancopeParserTest.rawMessage;"], [125, "    }"], [128, "     * Sets the rawMessage."], [129, "     * @param rawMessage the rawMessage."], [130, "     */"], [131, ""], [132, "    public static void setRawMessage(String rawMessage) {"], [133, ""], [134, "        BasicLancopeParserTest.rawMessage = rawMessage;"], [135, "    }"], [136, "    /**"], [137, "     * Returns the lancopeParser."], [138, "     * @return the lancopeParser."], [139, "     */"], [140, ""], [141, "    public static BasicLancopeParser getLancopeParser() {"], [142, "        return lancopeParser;"], [143, "    }"], [144, ""], [145, "    /**"], [146, "     * Sets the lancopeParser."], [147, "     * @param lancopeParser the lancopeParser."], [148, "     */"], [149, ""], [150, "    public static void setLancopeParser(BasicLancopeParser lancopeParser) {"], [151, ""], [152, "        BasicLancopeParserTest.lancopeParser = lancopeParser;"], [153, "    }"]]}, "num_lines_added": 67, "num_lines_removed": 62}