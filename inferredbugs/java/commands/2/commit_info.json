{"hash": "fbed6f2be38dcaedfec8270e6acc5acc528d00df", "message": "Add Support for Async Tab Completions for Paper Servers\n\nThis adds the ability for plugins to define completion handlers as async safe (not on games main thread)\n\nWhen they are defined async safe, and ran on a Paper 1.12.2+ server, with a Paper ACF manager,\ncompletions will be handled mostly async, letting you safely do heavier operations in tab completions.", "file_num_lines": 525, "diff_parsed": {"added": [[26, "import co.aikar.commands.annotation.CommandAlias;"], [27, "import co.aikar.commands.annotation.CommandPermission;"], [28, "import co.aikar.commands.annotation.Default;"], [29, "import co.aikar.commands.annotation.HelpCommand;"], [30, "import co.aikar.commands.annotation.PreCommand;"], [31, "import co.aikar.commands.annotation.Subcommand;"], [32, "import co.aikar.commands.annotation.UnknownHandler;"], [34, "import com.google.common.collect.HashMultimap;"], [35, "import com.google.common.collect.ImmutableList;"], [36, "import com.google.common.collect.ImmutableSet;"], [37, "import com.google.common.collect.Iterables;"], [38, "import com.google.common.collect.Lists;"], [39, "import com.google.common.collect.SetMultimap;"], [40, "import com.google.common.collect.Sets;"], [46, "import java.util.ArrayList;"], [47, "import java.util.Arrays;"], [48, "import java.util.Collections;"], [49, "import java.util.HashMap;"], [50, "import java.util.HashSet;"], [51, "import java.util.List;"], [52, "import java.util.Map;"], [53, "import java.util.Objects;"], [55, "import java.util.Set;"], [56, "import java.util.Stack;"], [331, "            CommandOperationContext commandContext = preCommandOperation(issuer, commandLabel, args, false);"], [358, "    RegisteredCommand<?> getRegisteredCommand(String[] args) {"], [359, "        final CommandSearch cmd = findSubCommand(args);"], [360, "        return cmd != null ? cmd.cmd : null;"], [361, "    }"], [362, ""], [370, "    private CommandOperationContext preCommandOperation(CommandIssuer issuer, String commandLabel, String[] args, boolean isAsync) {"], [372, "        CommandOperationContext context = this.manager.createCommandOperationContext(this, issuer, commandLabel, args, isAsync);"], [445, "    public List<String> tabComplete(CommandIssuer issuer, String commandLabel, String[] args) {"], [446, "        return tabComplete(issuer, commandLabel, args, false);"], [447, "    }"], [448, "    public List<String> tabComplete(CommandIssuer issuer, String commandLabel, String[] args, boolean isAsync)"], [452, "        if (args.length == 0) {"], [453, "            args = new String[]{\"\"};"], [454, "        }"], [456, "            CommandOperationContext commandOperationContext = preCommandOperation(issuer, commandLabel, args, isAsync);"], [464, "                cmds.addAll(completeCommand(issuer, search.cmd, Arrays.copyOfRange(args, search.argIndex, args.length), commandLabel, isAsync));"], [466, "                cmds.addAll(completeCommand(issuer, Iterables.getOnlyElement(subCommands.get(UNKNOWN)), args, commandLabel, isAsync));"], [475, "    List<String> getCommandsForCompletion(CommandIssuer issuer, String[] args) {"], [476, "        final Set<String> cmds = new HashSet<>();"], [477, "        String argString = ApacheCommonsLangUtil.join(args, \" \").toLowerCase();"], [478, "        for (Map.Entry<String, RegisteredCommand> entry : subCommands.entries()) {"], [479, "            final String key = entry.getKey();"], [480, "            if (key.startsWith(argString) && !UNKNOWN.equals(key) && !DEFAULT.equals(key)) {"], [481, "                final RegisteredCommand value = entry.getValue();"], [482, "                if (!value.hasPermission(issuer)) {"], [483, "                    continue;"], [484, "                }"], [485, ""], [486, "                String[] split = ACFPatterns.SPACE.split(value.prefSubCommand);"], [487, "                cmds.add(split[args.length - 1]);"], [488, "            }"], [489, "        }"], [490, "        return new ArrayList<>(cmds);"], [491, "    }"], [492, ""], [493, "    private List<String> completeCommand(CommandIssuer issuer, RegisteredCommand cmd, String[] args, String commandLabel, boolean isAsync) {"], [501, "        List<String> cmds = manager.getCommandCompletions().of(cmd, issuer, completions, args, isAsync);"]], "deleted": [[26, "import co.aikar.commands.annotation.*;"], [28, "import com.google.common.collect.*;"], [34, "import java.util.*;"], [310, "            CommandOperationContext commandContext = preCommandOperation(issuer, commandLabel, args);"], [322, ""], [345, "    private CommandOperationContext preCommandOperation(CommandIssuer issuer, String commandLabel, String[] args) {"], [347, "        CommandOperationContext context = this.manager.createCommandOperationContext(this, issuer, commandLabel, args);"], [420, "    public List<String> tabComplete(CommandIssuer issuer, String commandLabel, String[] args)"], [425, "            CommandOperationContext commandOperationContext = preCommandOperation(issuer, commandLabel, args);"], [429, "            String argString = ApacheCommonsLangUtil.join(args, \" \").toLowerCase();"], [434, "                cmds.addAll(completeCommand(commandOperationContext, issuer, search.cmd, Arrays.copyOfRange(args, search.argIndex, args.length), commandLabel));"], [436, "                cmds.addAll(completeCommand(commandOperationContext, issuer, Iterables.getOnlyElement(subCommands.get(UNKNOWN)), args, commandLabel));"], [437, "            }"], [438, ""], [439, "            for (Map.Entry<String, RegisteredCommand> entry : subCommands.entries()) {"], [440, "                final String key = entry.getKey();"], [441, "                if (key.startsWith(argString) && !UNKNOWN.equals(key) && !DEFAULT.equals(key)) {"], [442, "                    final RegisteredCommand value = entry.getValue();"], [443, "                    if (!value.hasPermission(issuer)) {"], [444, "                        continue;"], [445, "                    }"], [446, "                    String prefCommand = value.prefSubCommand;"], [447, ""], [448, "                    final String[] psplit = ACFPatterns.SPACE.split(prefCommand);"], [449, "                    cmds.add(psplit[args.length - 1]);"], [450, "                }"], [459, "    private List<String> completeCommand(CommandOperationContext commandOperationContext, CommandIssuer issuer, RegisteredCommand cmd, String[] args, String commandLabel) {"], [467, "        List<String> cmds = manager.getCommandCompletions().of(commandOperationContext, cmd, issuer, completions, args);"]]}, "num_lines_added": 62, "num_lines_removed": 28}