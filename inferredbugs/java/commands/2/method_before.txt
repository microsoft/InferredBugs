    public List<String> tabComplete(CommandIssuer issuer, String commandLabel, String[] args)
        throws IllegalArgumentException {

        commandLabel = commandLabel.toLowerCase();
        try {
            CommandOperationContext commandOperationContext = preCommandOperation(issuer, commandLabel, args);

            final CommandSearch search = findSubCommand(args, true);

            String argString = ApacheCommonsLangUtil.join(args, " ").toLowerCase();

            final List<String> cmds = new ArrayList<>();

            if (search != null) {
                cmds.addAll(completeCommand(commandOperationContext, issuer, search.cmd, Arrays.copyOfRange(args, search.argIndex, args.length), commandLabel));
            } else if (subCommands.get(UNKNOWN).size() == 1) {
                cmds.addAll(completeCommand(commandOperationContext, issuer, Iterables.getOnlyElement(subCommands.get(UNKNOWN)), args, commandLabel));
            }

            for (Map.Entry<String, RegisteredCommand> entry : subCommands.entries()) {
                final String key = entry.getKey();
                if (key.startsWith(argString) && !UNKNOWN.equals(key) && !DEFAULT.equals(key)) {
                    final RegisteredCommand value = entry.getValue();
                    if (!value.hasPermission(issuer)) {
                        continue;
                    }
                    String prefCommand = value.prefSubCommand;

                    final String[] psplit = ACFPatterns.SPACE.split(prefCommand);
                    cmds.add(psplit[args.length - 1]);
                }
            }

            return filterTabComplete(args[args.length - 1], cmds);
        } finally {
            postCommandOperation();
        }
    }