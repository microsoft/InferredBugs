{"hash": "6301c82b212e84208b75b2e3b12ab8a4230d80b6", "message": "Initial support for stream serialisation. Work paused while we wait for a new bson4jackson release with https://github.com/michel-kraemer/bson4jackson/pull/14 included.", "file_num_lines": 572, "diff_parsed": {"added": [[20, "import net.vz.mongodb.jackson.internal.stream.JacksonEncoderFactory;"], [126, "        DBEncoderFactory encoderFactory = dbCollection.getDBEncoderFactory();"], [127, "        // Make sure we don't double wrap"], [128, "        if (!(encoderFactory instanceof JacksonEncoderFactory)) {"], [129, "            dbCollection.setDBEncoderFactory(new JacksonEncoderFactory(encoderFactory, objectMapper));"], [130, "        }"], [373, "        return update(convertToBasicDbObject(query), convertToBasicDbObject(object), upsert, multi, concern);"], [742, "        return new DBCursor<T>(this, dbCollection.find(convertToBasicDbObject(query)));"], [785, "        return new DBCursor<T>(this, dbCollection.find(convertToBasicDbObject(query), convertToBasicDbObject(keys)));"], [839, "        return findOneById(id, convertToBasicDbObject(fields));"], [1120, "        return dbCollection.getCount(convertToBasicDbObject(query), convertToBasicDbObject(fields), limit, skip);"], [1529, "    DBObject convertToBasicDbObject(T object) throws MongoException {"], [1545, "    DBObject convertToDbObject(T object) throws MongoException {"], [1546, "        if (object == null) {"], [1547, "            return null;"], [1548, "        }"], [1549, "        return new JacksonDBObject<T>(object);"], [1550, "    }"], [1551, ""]], "deleted": [[367, "        return update(convertToDbObject(query), convertToDbObject(object), upsert, multi, concern);"], [368, "    }"], [369, ""], [370, "    /**"], [371, "     * Performs an update operation."], [372, "     *"], [373, "     * @param query   search query for old object to update"], [374, "     * @param object  object with which to update <tt>q</tt>"], [375, "     * @param upsert  if the database should create the element if it does not exist"], [376, "     * @param multi   if the update should be applied to all objects matching (db version 1.1.3 and above). An object will"], [377, "     *                not be inserted if it does not exist in the collection and upsert=true and multi=true."], [378, "     *                See <a href=\"http://www.mongodb.org/display/DOCS/Atomic+Operations\">http://www.mongodb.org/display/DOCS/Atomic+Operations</a>"], [379, "     * @param concern the write concern"], [380, "     * @param encoder the DBEncoder to use"], [381, "     * @return The result"], [382, "     * @throws MongoException If an error occurred"], [383, "     */"], [384, "    public WriteResult<T, K> update(DBObject query, DBObject object, boolean upsert, boolean multi, WriteConcern concern, DBEncoder encoder) throws MongoException {"], [385, "        return new WriteResult<T, K>(this, dbCollection.update(serializeFields(query), object, upsert, multi, concern, encoder));"], [386, "    }"], [387, ""], [388, "    /**"], [389, "     * Performs an update operation."], [390, "     *"], [391, "     * @param query   search query for old object to update"], [392, "     * @param object  object with which to update <tt>q</tt>"], [393, "     * @param upsert  if the database should create the element if it does not exist"], [394, "     * @param multi   if the update should be applied to all objects matching (db version 1.1.3 and above). An object will"], [395, "     *                not be inserted if it does not exist in the collection and upsert=true and multi=true."], [396, "     *                See <a href=\"http://www.mongodb.org/display/DOCS/Atomic+Operations\">http://www.mongodb.org/display/DOCS/Atomic+Operations</a>"], [397, "     * @param concern the write concern"], [398, "     * @param encoder the DBEncoder to use"], [399, "     * @return The result"], [400, "     * @throws MongoException If an error occurred"], [401, "     */"], [402, "    public WriteResult<T, K> update(T query, T object, boolean upsert, boolean multi, WriteConcern concern, DBEncoder encoder) throws MongoException {"], [403, "        return update(convertToDbObject(query), convertToDbObject(object), upsert, multi, concern, encoder);"], [577, "     * Removes objects from the database collection."], [578, "     *"], [579, "     * @param query   the object that documents to be removed must match"], [580, "     * @param concern WriteConcern for this operation"], [581, "     * @param encoder the DBEncoder to use"], [582, "     * @return The result"], [583, "     * @throws MongoException If an error occurred"], [584, "     */"], [585, "    public WriteResult<T, K> remove(DBObject query, WriteConcern concern, DBEncoder encoder) throws MongoException {"], [586, "        return new WriteResult<T, K>(this, dbCollection.remove(serializeFields(query), concern, encoder));"], [587, "    }"], [588, ""], [589, "    /**"], [697, "     * Forces creation of an index on a set of fields, if one does not already exist."], [698, "     *"], [699, "     * @param keys    The keys to index"], [700, "     * @param options The index options"], [701, "     * @param encoder the DBEncoder to use"], [702, "     * @throws MongoException If an error occurred"], [703, "     */"], [704, "    public void createIndex(DBObject keys, DBObject options, DBEncoder encoder) throws MongoException {"], [705, "        dbCollection.createIndex(keys, options, encoder);"], [706, "    }"], [707, ""], [708, "    /**"], [797, "        return new DBCursor<T>(this, dbCollection.find(convertToDbObject(query)));"], [840, "        return new DBCursor<T>(this, dbCollection.find(convertToDbObject(query), convertToDbObject(keys)));"], [894, "        return findOneById(id, convertToDbObject(fields));"], [1175, "        return dbCollection.getCount(convertToDbObject(query), convertToDbObject(fields), limit, skip);"], [1584, "    DBObject convertToDbObject(T object) throws MongoException {"], [1601, "        // Yay for generic array creation"]]}, "num_lines_added": 19, "num_lines_removed": 68}