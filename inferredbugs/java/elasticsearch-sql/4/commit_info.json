{"hash": "5cd6ab63919bd4f366fc721638b31a54e3555b5c", "message": "Join - order by support on first table", "file_num_lines": 513, "diff_parsed": {"added": [[353, "        addOrderByToSelect(select, items, null);"], [354, ""], [355, "    }"], [356, ""], [357, "    private void addOrderByToSelect(Select select, List<SQLSelectOrderByItem> items, String alias) throws SqlParseException {"], [358, "        for (SQLSelectOrderByItem sqlSelectOrderByItem : items) {"], [359, "            SQLExpr expr = sqlSelectOrderByItem.getExpr();"], [360, "            String orderByName = FieldMaker.makeField(expr, null, null).toString();"], [362, "            if (sqlSelectOrderByItem.getType() == null) {"], [363, "                sqlSelectOrderByItem.setType(SQLOrderingSpecification.ASC);"], [364, "            }"], [365, "            String type = sqlSelectOrderByItem.getType().toString();"], [366, ""], [367, "            orderByName = orderByName.replace(\"`\", \"\");"], [368, "            if(alias!=null) orderByName = orderByName.replaceFirst(alias+\"\\\\.\",\"\");"], [369, "            select.addOrderBy(orderByName, type);"], [370, ""], [371, "        }"], [372, "    }"], [373, ""], [374, "    private void findLimit(MySqlSelectQueryBlock.Limit limit, Select select) {"], [426, "        Map<String, List<SQLSelectOrderByItem>> aliasToOrderBy = splitAndFindOrder(query.getOrderBy(), firstTableAlias, secondTableAlias);"], [429, "        fillTableSelectedJoin(joinSelect.getFirstTable(), query, joinedFrom.get(0), aliasToWhere.get(firstTableAlias),aliasToOrderBy.get(firstTableAlias), connectedConditions);"], [430, "        fillTableSelectedJoin(joinSelect.getSecondTable(), query, joinedFrom.get(1), aliasToWhere.get(secondTableAlias), aliasToOrderBy.get(secondTableAlias),connectedConditions);"], [438, "    private Map<String, List<SQLSelectOrderByItem>> splitAndFindOrder(SQLOrderBy orderBy, String firstTableAlias, String secondTableAlias) throws SqlParseException {"], [439, "        Map<String,List<SQLSelectOrderByItem>> aliasToOrderBys = new HashMap<>();"], [440, "        aliasToOrderBys.put(firstTableAlias,new ArrayList<SQLSelectOrderByItem>());"], [441, "        aliasToOrderBys.put(secondTableAlias,new ArrayList<SQLSelectOrderByItem>());"], [442, "        if(orderBy == null) return aliasToOrderBys;"], [443, "        List<SQLSelectOrderByItem> orderByItems = orderBy.getItems();"], [444, "        for(SQLSelectOrderByItem orderByItem : orderByItems){"], [445, "            if(orderByItem.getExpr().toString().startsWith(firstTableAlias+\".\")){"], [446, "                aliasToOrderBys.get(firstTableAlias).add(orderByItem);"], [447, "            }"], [448, "            else if(orderByItem.getExpr().toString().startsWith(secondTableAlias+\".\")){"], [449, "                aliasToOrderBys.get(secondTableAlias).add(orderByItem);"], [450, "            }"], [451, "            else"], [452, "                throw new SqlParseException(\"order by field on join request should have alias before, got \" + orderByItem.getExpr().toString());"], [453, ""], [454, "        }"], [455, "        return aliasToOrderBys;"], [456, "    }"], [457, ""], [491, "    private void fillTableSelectedJoin(TableOnJoinSelect tableOnJoin, MySqlSelectQueryBlock query, From tableFrom, Where where, List<SQLSelectOrderByItem> orderBys, List<Condition> conditions) throws SqlParseException {"], [493, "        fillBasicTableSelectJoin(tableOnJoin, tableFrom, where,orderBys, query);"], [521, "    private void fillBasicTableSelectJoin(TableOnJoinSelect select, From from, Where where, List<SQLSelectOrderByItem> orderBys, MySqlSelectQueryBlock query) throws SqlParseException {"], [525, "        addOrderByToSelect(select, orderBys,from.getAlias());"]], "deleted": [[17, "import org.nlpcn.es4sql.query.join.NestedLoopsElasticRequestBuilder;"], [353, "\t\tList<String> lists = new ArrayList<>();"], [354, "\t\tfor (SQLSelectOrderByItem sqlSelectOrderByItem : items) {"], [355, "\t\t\tSQLExpr expr = sqlSelectOrderByItem.getExpr();"], [356, "\t\t\tlists.add(FieldMaker.makeField(expr, null,null).toString());"], [357, "\t\t\tif (sqlSelectOrderByItem.getType() == null) {"], [358, "\t\t\t\tsqlSelectOrderByItem.setType(SQLOrderingSpecification.ASC);"], [359, "\t\t\t}"], [360, "\t\t\tString type = sqlSelectOrderByItem.getType().toString();"], [361, "\t\t\tfor (String name : lists) {"], [362, "\t\t\t\tname = name.replace(\"`\", \"\");"], [363, "\t\t\t\tselect.addOrderBy(name, type);"], [364, "\t\t\t}"], [365, "\t\t\tlists.clear();"], [366, "\t\t}"], [368, "\t}"], [370, "\tprivate void findLimit(MySqlSelectQueryBlock.Limit limit, Select select) {"], [424, "        fillTableSelectedJoin(joinSelect.getFirstTable(), query, joinedFrom.get(0), aliasToWhere.get(firstTableAlias), connectedConditions);"], [425, "        fillTableSelectedJoin(joinSelect.getSecondTable(), query, joinedFrom.get(1), aliasToWhere.get(secondTableAlias), connectedConditions);"], [466, "    private void fillTableSelectedJoin(TableOnJoinSelect tableOnJoin,MySqlSelectQueryBlock query, From tableFrom,  Where where, List<Condition> conditions) throws SqlParseException {"], [468, "        fillBasicTableSelectJoin(tableOnJoin, tableFrom, where, query);"], [496, "    private void fillBasicTableSelectJoin(TableOnJoinSelect select, From from,  Where where, MySqlSelectQueryBlock query) throws SqlParseException {"]]}, "num_lines_added": 48, "num_lines_removed": 22}