{"hash": "abab7b5cf71674709a4c6f583d03c39c830021e5", "message": "Permission Processing", "file_num_lines": 69, "diff_parsed": {"added": [[4, "import cn.vertxup.rbac.domain.tables.pojos.RRolePerm;"], [15, "import io.vertx.up.fn.Fn;"], [17, "import io.vertx.up.unity.jq.UxJooq;"], [21, "import java.util.ArrayList;"], [22, "import java.util.List;"], [41, "    @Address(Addr.Authority.PERMISSION_DEFINITION_SAVE)"], [42, "    public Future<JsonObject> saveDefinition(final JsonObject processed,"], [43, "                                             final XHeader header) {"], [86, "        return Fn.getEmpty(Ux.futureJArray(), () -> Ux.Jooq.on(RRolePermDao.class)"], [87, "                .fetchAsync(KeField.ROLE_ID, roleId)"], [88, "                .compose(Ux::fnJArray), roleId);"], [89, "    }"], [90, ""], [91, "    @Address(Addr.Authority.PERMISSION_SAVE)"], [92, "    public Future<JsonArray> savePerm(final String roleId, final JsonArray permissions) {"], [93, "        return Fn.getEmpty(Ux.futureJArray(), () -> {"], [94, "            final JsonObject condition = new JsonObject();"], [95, "            condition.put(KeField.ROLE_ID, roleId);"], [96, "            /*"], [97, "             * Delete all the relations that belong to roleId"], [98, "             * that the user provided here"], [99, "             * */"], [100, "            final UxJooq dao = Ux.Jooq.on(RRolePermDao.class);"], [101, "            return dao.deleteAsync(condition).compose(processed -> {"], [102, "                /*"], [103, "                 * Build new relations that belong to the role"], [104, "                 */"], [105, "                final List<RRolePerm> relations = new ArrayList<>();"], [106, "                Ut.itJArray(permissions, String.class, (permissionId, index) -> {"], [107, "                    final RRolePerm item = new RRolePerm();"], [108, "                    item.setRoleId(roleId);"], [109, "                    item.setPermId(permissionId);"], [110, "                    relations.add(item);"], [111, "                });"], [112, "                return dao.insertAsync(relations).compose(inserted -> {"], [113, "                    /*"], [114, "                     * Habit clean for role"], [115, "                     */"], [116, "                    return Ux.future(inserted);"], [117, "                }).compose(Ux::fnJArray);"], [118, "            });"], [119, "        }, roleId);"]], "deleted": [[36, "    @Address(Addr.Authority.PERMISSION_SAVING)"], [37, "    public Future<JsonObject> savingPerm(final JsonObject processed,"], [38, "                                         final XHeader header) {"], [81, "        if (Ut.notNil(roleId)) {"], [82, "            return Ux.Jooq.on(RRolePermDao.class)"], [83, "                    .fetchAsync(KeField.ROLE_ID, roleId)"], [84, "                    .compose(Ux::fnJArray);"], [85, "        } else return Ux.futureJArray();"]]}, "num_lines_added": 42, "num_lines_removed": 8}