{"hash": "758f89145bcf4ac231c02ab78aac5a30a3347548", "message": "ActionFetch Finished", "file_num_lines": 410, "diff_parsed": {"added": [[18, "import java.util.Collection;"], [51, "        this.aggregator = JqAggregator.create(this.analyzer);"], [100, "     *      <-- insertJAsync(T)"], [101, "     *      <-- insertJAsync(JsonObject, pojo)"], [102, "     *      <-- insertJAsync(JsonObject)"], [109, "        return this.workflow.<T>inputAsync(data).compose(this::insertAsync);"], [116, "    public <T> Future<JsonObject> insertJAsync(final T entity) {"], [117, "        return this.insertAsync(entity).compose(this.workflow::outputAsync);"], [120, "    public <T> Future<JsonObject> insertJAsync(final JsonObject data) {"], [121, "        return this.workflow.<T>inputAsync(data).compose(this::insertAsync).compose(this.workflow::outputAsync);"], [124, "    public <T> Future<JsonObject> insertJAsync(final JsonObject data, final String pojo) {"], [142, "        return this.insert((T) this.workflow.input(data));"], [150, "        return this.workflow.output(this.insert(entity));"], [154, "        return this.workflow.output(this.insert((T) this.workflow.input(data)));  // T & List<T> Diff"], [165, "     *  <-- insertAsync(JsonArray, pojo)"], [166, "     *  <-- insertJAsync(List<T>)"], [167, "     *  <-- insertJAsync(JsonArray)"], [168, "     *  <-- insertJAsync(JsonArray, pojo)"], [175, "        return this.workflow.<T>inputAsync(input).compose(this::insertAsync);          // --> `insertAsync(List<T>)`"], [182, "    public <T> Future<JsonArray> insertJAsync(final List<T> list) {"], [183, "        return this.insertAsync(list).compose(this.workflow::outputAsync);"], [186, "    public <T> Future<JsonArray> insertJAsync(final JsonArray input) {"], [187, "        return this.workflow.<T>inputAsync(input).compose(this::insertAsync).compose(this.workflow::outputAsync);"], [190, "    public <T> Future<JsonArray> insertJAsync(final JsonArray input, final String pojo) {"], [209, "        return this.insert(this.workflow.input(data));"], [218, "        return this.workflow.output(this.insert(list));"], [222, "        return this.workflow.output(this.insert(this.workflow.input(data)));"], [231, "    /*"], [232, "     * searchAsync(JsonObject, pojo)"], [233, "     * searchAsync(JsonObject)"], [234, "     * search(JsonObject, pojo)"], [235, "     * search(JsonObject)"], [236, "     */"], [255, "    /*"], [256, "     * fetchAllAsync()"], [257, "     * <-- fetchJAllAsync()"], [258, "     * <-- fetchJAllAsync(pojo)"], [259, "     * fetchAll()"], [260, "     * <-- fetchJAll()"], [261, "     * <-- fetchJAll(pojo)"], [262, "     *"], [263, "     * fetchAsync(String, Object)"], [264, "     * <-- fetchInAsync(String, Object...)"], [265, "     * <-- fetchInAsync(String, Collection)"], [266, "     * <-- fetchInAsync(String, JsonArray)"], [267, "     * <-- fetchJInAsync(String, Object...)"], [268, "     * <-- fetchJInAsync(String, Collection)"], [269, "     * <-- fetchJInAsync(String, JsonArray)"], [270, "     * fetch(String, Object)"], [271, "     * <-- fetchIn(String, Object...)"], [272, "     * <-- fetchIn(String, Collection)"], [273, "     * <-- fetchIn(String, JsonArray)"], [274, "     * <-- fetchJIn(String, Object...)"], [275, "     * <-- fetchJIn(String, Collection)"], [276, "     * <-- fetchJIn(String, JsonArray)"], [277, "     *"], [278, "     * fetchAsync(JsonObject)"], [279, "     * <-- fetchAndAsync(JsonObject)"], [280, "     * <-- fetchJAndAsync(JsonObject)"], [281, "     * <-- fetchOrAsync(JsonObject)"], [282, "     * <-- fetchJOrAsync(JsonObject)"], [283, "     * fetchAsync(JsonObject, pojo)"], [284, "     * <-- fetchAndAsync(JsonObject, pojo)"], [285, "     * <-- fetchJAndAsync(JsonObject, pojo)"], [286, "     * <-- fetchOrAsync(JsonObject, pojo)"], [287, "     * <-- fetchJOrAsync(JsonObject, pojo)"], [288, "     * fetch(JsonObject)"], [289, "     * <-- fetchAnd(JsonObject)"], [290, "     * <-- fetchJAnd(JsonObject)"], [291, "     * <-- fetchOr(JsonObject)"], [292, "     * <-- fetchJOr(JsonObject)"], [293, "     * fetch(JsonObject, pojo)"], [294, "     * <-- fetchAnd(JsonObject, pojo)"], [295, "     * <-- fetchJAnd(JsonObject, pojo)"], [296, "     * <-- fetchOr(JsonObject, pojo)"], [297, "     * <-- fetchJOr(JsonObject, pojo)"], [298, "     */"], [299, "    /* fetchAllAsync() */"], [304, "    public Future<JsonArray> fetchJAllAsync() {"], [305, "        return this.fetchAllAsync().compose(this.workflow::outputAsync);"], [306, "    }"], [307, ""], [308, "    public Future<JsonArray> fetchJAllAsync(final String pojo) {"], [309, "        return this.fetchAllAsync().compose(JqFlow.create(this.analyzer, pojo)::outputAsync);"], [310, "    }"], [311, ""], [312, "    /* fetchAll() */"], [317, "    public JsonArray fetchJAll() {"], [318, "        return this.workflow.output(this.fetchAll());"], [321, "    public JsonArray fetchJAll(final String pojo) {"], [322, "        return JqFlow.create(this.analyzer, pojo).output(this.fetchAll());"], [323, "    }"], [324, ""], [325, "    /* fetchAsync(String, Object) */"], [330, "    public <T> Future<List<T>> fetchInAsync(final String field, final Object... value) {"], [331, "        return this.fetchAsync(field, Arrays.asList(value));"], [332, "    }"], [333, ""], [334, "    public <T> Future<List<T>> fetchInAsync(final String field, final JsonArray values) {"], [335, "        return this.fetchAsync(field, values.getList());"], [336, "    }"], [337, ""], [338, "    public <T> Future<List<T>> fetchInAsync(final String field, final Collection collection) {"], [339, "        return this.fetchAsync(field, collection);"], [340, "    }"], [341, ""], [342, "    public Future<JsonArray> fetchJInAsync(final String field, final Object... value) {"], [343, "        return this.fetchAsync(field, Arrays.asList(value)).compose(this.workflow::outputAsync);"], [344, "    }"], [345, ""], [346, "    public Future<JsonArray> fetchJInAsync(final String field, final JsonArray values) {"], [347, "        return this.fetchAsync(field, values.getList()).compose(this.workflow::outputAsync);"], [348, "    }"], [349, ""], [350, "    public Future<JsonArray> fetchJInAsync(final String field, final Collection collection) {"], [351, "        return this.fetchAsync(field, collection).compose(this.workflow::outputAsync);"], [352, "    }"], [353, ""], [354, "    /* fetch(String, Object) */"], [355, "    public <T> List<T> fetch(final String field, final Object value) {"], [356, "        return this.reader.fetch(field, value);"], [357, "    }"], [358, ""], [359, "    public <T> List<T> fetchIn(final String field, final Object... values) {"], [360, "        return this.fetch(field, Arrays.asList(values));"], [361, "    }"], [362, ""], [363, "    public <T> List<T> fetchIn(final String field, final JsonArray values) {"], [364, "        return this.fetch(field, values.getList());"], [365, "    }"], [366, ""], [367, "    public <T> List<T> fetchIn(final String field, final Collection collection) {"], [368, "        return this.fetch(field, collection);"], [369, "    }"], [370, ""], [371, "    public JsonArray fetchJIn(final String field, final Object... values) {"], [372, "        return this.workflow.output(this.fetch(field, Arrays.asList(values)));"], [373, "    }"], [374, ""], [375, "    public JsonArray fetchJIn(final String field, final JsonArray values) {"], [376, "        return this.workflow.output(this.fetch(field, values.getList()));"], [377, "    }"], [378, ""], [379, "    public JsonArray fetchJIn(final String field, final Collection collection) {"], [380, "        return this.workflow.output(this.fetch(field, collection));"], [381, "    }"], [382, ""], [383, "    /* fetchAsync(JsonObject) */"], [385, "        return this.workflow.inputQrJAsync(criteria).compose(this.reader::fetchAsync);"], [388, "    public <T> Future<List<T>> fetchAndAsync(final JsonObject criteria) {"], [389, "        return this.fetchAsync(criteria.put(Strings.EMPTY, Boolean.TRUE));"], [392, "    public <T> Future<List<T>> fetchOrAsync(final JsonObject criteria) {"], [393, "        return this.fetchAsync(criteria.put(Strings.EMPTY, Boolean.FALSE));"], [394, "    }"], [395, ""], [396, "    public Future<JsonArray> fetchJAndAsync(final JsonObject criteria) {"], [397, "        return this.fetchAsync(criteria.put(Strings.EMPTY, Boolean.TRUE)).compose(this.workflow::outputAsync);"], [398, "    }"], [399, ""], [400, "    public Future<JsonArray> fetchJOrAsync(final JsonObject criteria) {"], [401, "        return this.fetchAsync(criteria.put(Strings.EMPTY, Boolean.FALSE)).compose(this.workflow::outputAsync);"], [402, "    }"], [403, ""], [404, "    /* fetch(JsonObject) */"], [406, "        return this.reader.fetch(this.workflow.inputQrJ(criteria));"], [409, "    public <T> List<T> fetchAnd(final JsonObject criteria) {"], [410, "        return this.fetch(criteria.put(Strings.EMPTY, Boolean.TRUE));"], [413, "    public <T> List<T> fetchOr(final JsonObject criteria) {"], [414, "        return this.fetch(criteria.put(Strings.EMPTY, Boolean.FALSE));"], [417, "    public JsonArray fetchJAnd(final JsonObject criteria) {"], [418, "        return this.workflow.output(this.fetch(criteria.put(Strings.EMPTY, Boolean.TRUE)));"], [421, "    public JsonArray fetchJOr(final JsonObject criteria) {"], [422, "        return this.workflow.output(this.fetch(criteria.put(Strings.EMPTY, Boolean.FALSE)));"], [425, "    /* fetchAsync(JsonObject, pojo) */"], [426, "    public <T> Future<List<T>> fetchAsync(final JsonObject criteria, final String pojo) {"], [427, "        return JqFlow.create(this.analyzer, pojo).inputQrJAsync(criteria).compose(this.reader::fetchAsync);"], [430, "    public <T> Future<List<T>> fetchAndAsync(final JsonObject criteria, final String pojo) {"], [431, "        return this.fetchAsync(criteria.put(Strings.EMPTY, Boolean.TRUE), pojo);"], [434, "    public <T> Future<List<T>> fetchOrAsync(final JsonObject criteria, final String pojo) {"], [435, "        return this.fetchAsync(criteria.put(Strings.EMPTY, Boolean.FALSE), pojo);"], [438, "    public Future<JsonArray> fetchJAndAsync(final JsonObject criteria, final String pojo) {"], [439, "        return this.fetchAsync(criteria.put(Strings.EMPTY, Boolean.TRUE), pojo).compose(JqFlow.create(this.analyzer, pojo)::outputAsync);"], [442, "    public Future<JsonArray> fetchJOrAsync(final JsonObject criteria, final String pojo) {"], [443, "        return this.fetchAsync(criteria.put(Strings.EMPTY, Boolean.FALSE), pojo).compose(JqFlow.create(this.analyzer, pojo)::outputAsync);"], [446, "    /* fetch(JsonObject, pojo) */"], [447, "    public <T> List<T> fetch(final JsonObject criteria, final String pojo) {"], [448, "        return this.reader.fetch(JqFlow.create(this.analyzer, pojo).inputQrJ(criteria));"], [449, "    }"], [450, ""], [451, "    public <T> List<T> fetchAnd(final JsonObject criteria, final String pojo) {"], [452, "        return this.fetch(criteria.put(Strings.EMPTY, Boolean.TRUE), pojo);"], [453, "    }"], [454, ""], [455, "    public <T> List<T> fetchOr(final JsonObject criteria, final String pojo) {"], [456, "        return this.fetch(criteria.put(Strings.EMPTY, Boolean.FALSE), pojo);"], [457, "    }"], [458, ""], [459, "    public JsonArray fetchJAnd(final JsonObject criteria, final String pojo) {"], [460, "        return JqFlow.create(this.analyzer, pojo).output(this.fetch(criteria.put(Strings.EMPTY, Boolean.TRUE), pojo));"], [461, "    }"], [462, ""], [463, "    public JsonArray fetchJOr(final JsonObject criteria, final String pojo) {"], [464, "        return JqFlow.create(this.analyzer, pojo).output(this.fetch(criteria.put(Strings.EMPTY, Boolean.FALSE), pojo));"], [465, "    }"], [635, "        final List<T> list = this.fetch(filters);"], [640, "        final List<T> list = this.fetch(filters);"], [652, "        return this.countAsync(params, this.analyzer.pojoFile());"], [661, "        return this.count(params, this.analyzer.pojoFile());"]], "deleted": [[23, "@SuppressWarnings(\"all\")"], [51, "        this.aggregator = JqAggregator.create(analyzer);"], [100, "     *      <-- insertAsyncJ(T)"], [101, "     *      <-- insertAsyncJ(JsonObject, pojo)"], [102, "     *      <-- insertAsyncJ(JsonObject)"], [109, "        return workflow.<T>inputAsync(data).compose(this::insertAsync);"], [116, "    public <T> Future<JsonObject> insertAsyncJ(final T entity) {"], [117, "        return this.insertAsync(entity).compose(workflow::outputAsync);"], [120, "    public <T> Future<JsonObject> insertAsyncJ(final JsonObject data) {"], [121, "        return workflow.<T>inputAsync(data).compose(this::insertAsync).compose(workflow::outputAsync);"], [124, "    public <T> Future<JsonObject> insertAsyncJ(final JsonObject data, final String pojo) {"], [142, "        return this.insert((T) workflow.input(data));"], [150, "        return workflow.output(this.insert(entity));"], [154, "        return workflow.output(this.insert((T) workflow.input(data)));  // T & List<T> Diff"], [165, "     *  <-- insertAsync(JsonArray,pojo)"], [166, "     *  <-- insertAsyncJ(List<T>)"], [167, "     *  <-- insertAsyncJ(JsonArray)"], [168, "     *  <-- insertAsyncJ(JsonArray, pojo)"], [175, "        return workflow.<T>inputAsync(input).compose(this::insertAsync);          // --> `insertAsync(List<T>)`"], [182, "    public <T> Future<JsonArray> insertAsyncJ(final List<T> list) {"], [183, "        return this.insertAsync(list).compose(workflow::outputAsync);"], [186, "    public <T> Future<JsonArray> insertAsyncJ(final JsonArray input) {"], [187, "        return workflow.<T>inputAsync(input).compose(this::insertAsync).compose(workflow::outputAsync);"], [190, "    public <T> Future<JsonArray> insertAsyncJ(final JsonArray input, final String pojo) {"], [209, "        return this.insert(workflow.input(data));"], [218, "        return workflow.output(this.insert(list));"], [222, "        return workflow.output(this.insert(workflow.input(data)));"], [231, "    /* (Async / Sync) Sort, Projection, Criteria, Pager Search Operations */"], [250, "    /* (Async / Sync) Find All */"], [259, "    public <T> List<T> fetch(final String field, final Object value) {"], [260, "        return this.reader.fetch(field, value);"], [268, "        return this.reader.fetchAsync(criteria, this.workflow);"], [271, "    public <T> Future<List<T>> fetchAsync(final JsonObject criteria, final String pojo) {"], [272, "        return this.reader.fetchAsync(criteria, JqFlow.create(this.analyzer, pojo));"], [276, "        return this.reader.fetch(criteria, this.workflow);"], [279, "    public <T> List<T> fetch(final JsonObject criteria, final String pojo) {"], [280, "        return this.reader.fetch(criteria, JqFlow.create(this.analyzer, pojo));"], [283, "    public <T> Future<List<T>> fetchAndAsync(final JsonObject filters) {"], [284, "        filters.put(Strings.EMPTY, Boolean.TRUE);"], [285, "        return this.fetchAsync(filters);"], [288, "    public <T> List<T> fetchAnd(final JsonObject filters) {"], [289, "        filters.put(Strings.EMPTY, Boolean.TRUE);"], [290, "        return this.fetch(filters);"], [293, "    public <T> Future<List<T>> fetchOrAsync(final JsonObject orFilters) {"], [294, "        orFilters.put(Strings.EMPTY, Boolean.FALSE);"], [295, "        return this.fetchAsync(orFilters);"], [298, "    public <T> List<T> fetchOr(final JsonObject orFilters) {"], [299, "        orFilters.put(Strings.EMPTY, Boolean.FALSE);"], [300, "        return this.fetch(orFilters);"], [303, "    public <T> Future<List<T>> fetchInAsync(final String field, final Object... value) {"], [304, "        return this.fetchAsync(field, Arrays.asList(value));"], [307, "    public <T> Future<List<T>> fetchInAsync(final String field, final JsonArray values) {"], [308, "        return this.fetchAsync(field, values.getList());"], [311, "    public <T> List<T> fetchIn(final String field, final Object... values) {"], [312, "        return this.fetch(field, Arrays.asList(values));"], [315, "    public <T> List<T> fetchIn(final String field, final JsonArray values) {"], [316, "        return this.fetch(field, values.getList());"], [488, "        final List<T> list = fetch(filters);"], [493, "        final List<T> list = fetch(filters);"], [505, "        return countAsync(params, this.analyzer.pojoFile());"], [514, "        return count(params, this.analyzer.pojoFile());"]]}, "num_lines_added": 208, "num_lines_removed": 61}