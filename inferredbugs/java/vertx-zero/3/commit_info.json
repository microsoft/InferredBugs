{"hash": "d2f81b01be55dacba870c39b2a233ff3a20872e8", "message": "Command", "file_num_lines": 72, "diff_parsed": {"added": [[11, "import io.vertx.up.eon.Values;"], [14, "import org.apache.commons.cli.CommandLine;"], [15, "import org.apache.commons.cli.CommandLineParser;"], [16, "import org.apache.commons.cli.DefaultParser;"], [17, "import org.apache.commons.cli.ParseException;"], [19, "import java.util.ArrayList;"], [20, "import java.util.Arrays;"], [37, "         * The command must existing in your configuration files"], [39, "        final String commandName = args[0];"], [40, "        return findAsync(commandName, definition).compose(command -> {"], [45, "                final CommandLine parsed = parser.parse(command.options(), args);"], [51, "        });"], [57, "         * Found command inner run method, double check for CommandAtom"], [59, "        final List<String> args = parsed.getArgList();"], [60, "        return findAsync(args.get(Values.IDX), commands).compose(command -> {"], [64, "            final CommandInput input = getInput(parsed).bind(command);"], [85, "            return binder.apply(commander.bind(command)).executeAsync(input);"], [86, "        });"], [89, "    private static CommandInput getInput(final CommandLine parsed) {"], [90, "        final List<String> names = new ArrayList<>();"], [91, "        final List<String> values = new ArrayList<>();"], [92, "        Arrays.stream(parsed.getOptions()).forEach(option -> {"], [93, "            final String name = option.getLongOpt();"], [94, "            final String value = parsed.getOptionValue(name);"], [95, "            names.add(name);"], [96, "            values.add(value);"], [97, "        });"], [98, "        return CommandInput.create(names, values);"], [99, "    }"], [100, ""], [101, "    private static Future<CommandAtom> findAsync(final String commandName, final List<CommandAtom> commands) {"], [102, "        final CommandAtom atom = commands.stream()"], [103, "                /*"], [104, "                 * Filter by commandName here"], [105, "                 */"], [108, "        if (Objects.isNull(atom)) {"], [109, "            /*"], [110, "             * Unknown command of input throw out exception"], [111, "             */"], [112, "            return Future.failedFuture(new CommandUnknownException(ConsoleTool.class, commandName));"], [113, "        } else {"], [114, "            /*"], [115, "             * Returned Command Atom"], [116, "             */"], [117, "            return Future.succeededFuture(atom);"], [118, "        }"]], "deleted": [[4, "import io.vertx.tp.error.CommandMissingException;"], [14, "import org.apache.commons.cli.*;"], [33, "        final CommandAtom atom = findCommand(args, definition);"], [34, "        if (Objects.isNull(atom)) {"], [35, "            /*"], [36, "             * Unknown command of input."], [37, "             */"], [38, "            final UpException error = new CommandUnknownException(ConsoleTool.class, args[0]);"], [39, "            return Future.failedFuture(error);"], [40, "        } else {"], [45, "                final CommandLine parsed = parser.parse(atom.options(), args);"], [51, "        }"], [52, ""], [58, "         * Found command inner run method"], [60, "        final CommandAtom command = commands.stream()"], [61, "                .filter(each -> parsed.hasOption(each.getName()) || parsed.hasOption(each.getSimple()))"], [62, "                .findAny().orElse(null);"], [63, "        if (Objects.isNull(command) || !command.valid()) {"], [64, "            /*"], [65, "             * Internal error"], [66, "             */"], [67, "            if (Objects.nonNull(command)) {"], [68, "                Sl.failWarn(\" Plugin null -> name = {0},{1}, type = {2}\","], [69, "                        command.getSimple(), command.getName(), command.getType());"], [70, "            }"], [71, "            throw new CommandMissingException(ConsoleInteract.class, Ut.fromJoin(parsed.getArgs()));"], [72, "        } else {"], [73, "            final Options options = new Options();"], [74, "            commands.stream().map(CommandAtom::option).forEach(options::addOption);"], [78, "            final List<String> inputArgs = parsed.getArgList();"], [79, "            final List<String> inputNames = command.getOptionNames();"], [80, "            final CommandInput commandInput = CommandInput.create(inputNames, inputArgs);"], [81, "            commandInput.bind(options);"], [102, "            return binder.apply(commander.bind(command)).executeAsync(commandInput);"], [103, "        }"], [106, "    private static CommandAtom findCommand(final String[] args, final List<CommandAtom> definition) {"], [107, "        final String commandName = args[0];"], [108, "        return definition.stream()"]]}, "num_lines_added": 46, "num_lines_removed": 38}