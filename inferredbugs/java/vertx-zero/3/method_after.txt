    static Future<TermStatus> runAsync(final CommandLine parsed, final List<CommandAtom> commands,
                                       final Function<Commander, Commander> binder) {
        /*
         * Found command inner run method, double check for CommandAtom
         */
        final List<String> args = parsed.getArgList();
        return findAsync(args.get(Values.IDX), commands).compose(command -> {
            /*
             * Create CommandArgs
             */
            final CommandInput input = getInput(parsed).bind(command);
            /*
             * Commander
             */
            final Commander commander;
            if (CommandType.SYSTEM == command.getType()) {
                /*
                 * Sub-System call
                 */
                commander = Ut.instance(ConsoleCommander.class);
            } else {
                /*
                 * Plugin processing
                 * instance instead of single for shared usage
                 */
                commander = Ut.instance(command.getPlugin());
            }
            /*
             * binder processing
             */
            Sl.welcomeCommand(command);
            return binder.apply(commander.bind(command)).executeAsync(input);
        });
    }