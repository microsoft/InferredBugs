{"hash": "63e5d39d8c41dbdbd0db46278bff4f5a29d34a30", "message": "Permission", "file_num_lines": 132, "diff_parsed": {"added": [[7, "import cn.vertxup.rbac.domain.tables.pojos.RRolePerm;"], [9, "import cn.vertxup.rbac.domain.tables.pojos.SPermSet;"], [15, "import io.vertx.tp.rbac.refine.Sc;"], [16, "import io.vertx.up.atom.query.Inquiry;"], [17, "import io.vertx.up.eon.Strings;"], [18, "import io.vertx.up.eon.em.ChangeFlag;"], [19, "import io.vertx.up.fn.Fn;"], [27, "import java.util.concurrent.ConcurrentMap;"], [52, "    public Future<JsonObject> savingPerm(final JsonArray removed, final JsonObject relation) {"], [53, "        /*"], [54, "         * Removed Permission Id from S_ACTION"], [55, "         * Update all the action permissionId = null by key"], [56, "         */"], [57, "        final List<Future<SAction>> entities = new ArrayList<>();"], [58, "        final UxJooq jooq = Ux.Jooq.on(SActionDao.class);"], [59, "        Ut.itJString(removed).map(key -> jooq.<SAction>fetchByIdAsync(key)"], [60, "                /*"], [61, "                 * Set all queried permissionId of each action to null"], [62, "                 * Here should remove permissionId to set resource to freedom"], [63, "                 */"], [64, "                .compose(action -> {"], [65, "                    action.setPermissionId(null);"], [66, "                    return Ux.future(action);"], [67, "                })"], [68, "                .compose(jooq::updateAsync)"], [69, "        ).forEach(entities::add);"], [70, "        return Ux.thenCombineT(entities).compose(actions -> {"], [71, "            /*"], [72, "             * Build relation between actionId -> permissionId"], [73, "             */"], [74, "            final List<Future<SAction>> actionList = new ArrayList<>();"], [75, "            Ut.<String>itJObject(relation, (permissionId, actionId) -> actionList.add("], [76, "                    jooq.<SAction>fetchByIdAsync(actionId).compose(action -> {"], [77, "                        action.setPermissionId(permissionId);"], [78, "                        return Ux.future(action);"], [79, "                    }).compose(jooq::updateAsync)"], [80, "            ));"], [81, "            return Ux.thenCombineT(actionList);"], [82, "        }).compose(nil -> Ux.future(relation));"], [83, "    }"], [84, ""], [85, "    @Override"], [88, "         * 1. permissions ->"], [89, "         * -- ADD = List"], [90, "         * -- UPDATE = List"], [91, "         * -- DELETE = List"], [93, "        final Set<String> permCodes = Ut.mapString(permissions, KeField.CODE);"], [96, "        return null;"], [97, "    }"], [98, ""], [99, "    @Override"], [100, "    public Future<JsonArray> syncPerm(final JsonArray permissions, final String roleId) {"], [101, "        return Fn.getEmpty(Ux.futureA(), () -> {"], [102, "            final JsonObject condition = new JsonObject();"], [103, "            condition.put(KeField.ROLE_ID, roleId);"], [105, "             * Delete all the relations that belong to roleId"], [106, "             * that the user provided here"], [107, "             * */"], [108, "            final UxJooq dao = Ux.Jooq.on(RRolePermDao.class);"], [109, "            return dao.deleteByAsync(condition).compose(processed -> {"], [111, "                 * Build new relations that belong to the role"], [113, "                final List<RRolePerm> relations = new ArrayList<>();"], [114, "                Ut.itJArray(permissions, String.class, (permissionId, index) -> {"], [115, "                    final RRolePerm item = new RRolePerm();"], [116, "                    item.setRoleId(roleId);"], [117, "                    item.setPermId(permissionId);"], [118, "                    relations.add(item);"], [119, "                });"], [120, "                return dao.insertAsync(relations).compose(inserted -> {"], [121, "                    /*"], [122, "                     * Refresh cache pool with Sc interface directly"], [123, "                     */"], [124, "                    return Sc.cachePermission(roleId, permissions)"], [125, "                            .compose(nil -> Ux.future(inserted));"], [126, "                }).compose(Ux::futureA);"], [128, "        }, roleId);"], [129, "    }"], [130, ""], [131, "    @Override"], [132, "    public Future<JsonObject> searchUnReady(final JsonObject query, final String sigma) {"], [133, "        /*"], [134, "         * Result for searching on S_PERMISSIONS"], [135, "         */"], [136, "        return Ux.Jooq.on(SPermSetDao.class).<SPermSet>fetchAsync(KeField.SIGMA, sigma).compose(setList -> {"], [137, "            /*"], [138, "             * Extract perm codes to set"], [139, "             */"], [140, "            final Set<String> codes = setList.stream().map(SPermSet::getCode).collect(Collectors.toSet());"], [141, ""], [142, "            /*"], [143, "             * Search permissions that related current"], [144, "             */"], [145, "            final JsonObject criteriaRef = query.getJsonObject(Inquiry.KEY_CRITERIA);"], [146, "            /*"], [147, "             * Combine condition here"], [148, "             */"], [149, "            final JsonObject criteria = new JsonObject();"], [150, "            criteria.put(KeField.SIGMA, sigma);"], [151, "            criteria.put(\"code,!i\", Ut.toJArray(codes));"], [152, "            criteria.put(Strings.EMPTY, Boolean.TRUE);"], [153, "            if (Ut.notNil(criteriaRef)) {"], [154, "                criteria.put(\"$0\", criteriaRef.copy());"], [155, "            }"], [156, "            /*"], [157, "             * criteria ->"], [158, "             * SIGMA = ??? AND CODE NOT IN (???)"], [159, "             * */"], [160, "            query.put(Inquiry.KEY_CRITERIA, criteria);"], [161, ""], [162, "            /*"], [163, "             * Replace for criteria"], [164, "             */"], [165, "            return Ux.Jooq.on(SPermissionDao.class).searchAsync(query);"], [169, "    // =============================== Private Method for Permissions ==============================="], [202, "    /*"], [203, "     * 1. Fetch all original permissions first, extract data part from json `data` node for all permissions"], [204, "     *    ( unique condition: code + sigma )"], [205, "     * 2. Compare original permissions and latest permissions for"], [206, "     * -- ADD"], [207, "     * -- UPDATE"], [208, "     * -- DELETE"], [209, "     */"], [210, "    private Future<ConcurrentMap<ChangeFlag, List<SPermission>>> fetchPermissions(final JsonArray permissions, final String sigma) {"], [211, "        final Set<String> permCodes = Ut.mapString(permissions, KeField.CODE);"], [212, "        final JsonObject criteria = new JsonObject();"], [213, "        criteria.put(KeField.SIGMA, sigma);"], [214, "        criteria.put(\"code,i\", Ut.toJArray(permCodes));"], [215, "        return Ux.Jooq.on(SPermissionDao.class).<SPermission>fetchAndAsync(criteria).compose(original -> {"], [216, "            final List<SPermission> current = Ux.fromJson(permissions, SPermission.class);"], [217, "            return null;"], [218, "        });"]], "deleted": [[19, "import java.util.Objects;"], [47, "         * Fetch all permissions from database and calculated removed list"], [50, "        condition.put(KeField.GROUP, group);"], [52, "        final UxJooq permDao = Ux.Jooq.on(SPermissionDao.class);"], [53, "        return permDao.<SPermission>fetchAndAsync(condition).compose(existing -> {"], [55, "             * Process filter to get removed"], [56, "             */"], [57, "            final List<SPermission> saved = Ux.fromJson(permissions, SPermission.class);"], [58, "            final Set<String> keeped = saved.stream().map(SPermission::getKey).collect(Collectors.toSet());"], [59, "            final List<String> removedKeys = existing.stream()"], [60, "                    .filter(item -> !keeped.contains(item.getKey()))"], [61, "                    .map(SPermission::getKey).collect(Collectors.toList());"], [62, "            return this.removeAsync(removedKeys, sigma).compose(nil -> {"], [64, "                 * Save Action for SPermission by `key` only"], [66, "                final List<Future<SPermission>> futures = new ArrayList<>();"], [67, "                Ut.itList(saved).map(permission -> permDao.<SPermission>fetchByIdAsync(permission.getKey())"], [68, "                        .compose(queired -> {"], [69, "                            if (Objects.isNull(queired)) {"], [70, "                                /*"], [71, "                                 * Insert entity object into database"], [72, "                                 */"], [73, "                                return permDao.insertAsync(permission);"], [74, "                            } else {"], [75, "                                /*"], [76, "                                 * Update the `key` hitted object into database"], [77, "                                 */"], [78, "                                return permDao.updateAsync(permission.getKey(), permission);"], [79, "                            }"], [80, "                        })).forEach(futures::add);"], [81, "                return Ux.thenCombineT(futures).compose(Ux::futureA);"], [118, "    @Override"], [119, "    public Future<JsonObject> savingPerm(final JsonArray removed, final JsonObject relation) {"], [120, "        /*"], [121, "         * Removed Permission Id from S_ACTION"], [122, "         * Update all the action permissionId = null by key"], [123, "         */"], [124, "        final List<Future<SAction>> entities = new ArrayList<>();"], [125, "        final UxJooq jooq = Ux.Jooq.on(SActionDao.class);"], [126, "        Ut.itJString(removed).map(key -> jooq.<SAction>fetchByIdAsync(key)"], [127, "                /*"], [128, "                 * Set all queried permissionId of each action to null"], [129, "                 * Here should remove permissionId to set resource to freedom"], [130, "                 */"], [131, "                .compose(action -> {"], [132, "                    action.setPermissionId(null);"], [133, "                    return Ux.future(action);"], [134, "                })"], [135, "                .compose(jooq::updateAsync)"], [136, "        ).forEach(entities::add);"], [137, "        return Ux.thenCombineT(entities).compose(actions -> {"], [138, "            /*"], [139, "             * Build relation between actionId -> permissionId"], [140, "             */"], [141, "            final List<Future<SAction>> actionList = new ArrayList<>();"], [142, "            Ut.<String>itJObject(relation, (permissionId, actionId) -> actionList.add("], [143, "                    jooq.<SAction>fetchByIdAsync(actionId).compose(action -> {"], [144, "                        action.setPermissionId(permissionId);"], [145, "                        return Ux.future(action);"], [146, "                    }).compose(jooq::updateAsync)"], [147, "            ));"], [148, "            return Ux.thenCombineT(actionList);"], [149, "        }).compose(nil -> Ux.future(relation));"]]}, "num_lines_added": 131, "num_lines_removed": 62}