{"hash": "c2644e31501f4b440958a814cff32429d51a0a1f", "message": "split logic for computing and storing textrank", "file_num_lines": 63, "diff_parsed": {"added": [[24, "import org.neo4j.graphdb.Label;"], [34, "        TextRankResult result = compute(request);"], [35, "        TextRankPersister persister = new TextRankPersister(Label.label(request.getKeywordLabel()));"], [36, "        persister.peristKeywords(result.getResult(), request.getNode());"], [37, ""], [38, "        return result.getStatus().equals(TextRankResult.TextRankStatus.SUCCESS)"], [39, "                ? SingleResult.success()"], [40, "                : SingleResult.fail();"], [41, "    }"], [42, ""], [43, "    public TextRankResult compute(TextRankRequest request) {"], [60, "        TextRankResult result = textRank.evaluate(request.getNode(),"], [64, "        LOG.info(\"AnnotatedText with ID \" + request.getNode().getId() + \" processed. Result: \" + result.getStatus());"], [65, ""], [66, "        return result;"]], "deleted": [[49, "        boolean res = textRank.evaluate(request.getNode(),"], [53, "        LOG.info(\"AnnotatedText with ID \" + request.getNode().getId() + \" processed. Result: \" + res);"], [54, "        return res ? SingleResult.success() : SingleResult.fail();"]]}, "num_lines_added": 15, "num_lines_removed": 3}