{"hash": "064cdf8ce70063c7036fcab1e8c6f842a97c41af", "message": "TextRank: implemented dependencies enrichment", "file_num_lines": 756, "diff_parsed": {"added": [[67, "            //+ \"WHERE id(a) = {id} and id(node) IN {nodeList}\\n\""], [68, "            + \"WHERE id(a) = {id}\" // new"], [391, "        //params.put(\"nodeList\", topThird); // new (also changed the GET_TAG_QUERY)"], [407, "                item.setRelevance(pageRanks.containsKey(tagId) ? pageRanks.get(tagId) : 0);"], [422, "        Map<String, Long> valToId = idToValue.entrySet().stream().collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));"], [423, ""], [431, "            List<Long> relTagIDs = keywordOccurrence.get().getRelatedTags().stream().map(el -> valToId.get(el)).collect(Collectors.toList()); // new"], [432, "            relTagIDs.retainAll(topThird); // new"], [433, "            if (!topThird.contains(keywordOccurrence.get().getTagId()) && relTagIDs.size()==0) // new"], [434, "                continue;"], [435, "            //System.out.println(\"\\n> \" + currValue.get() + \" - \" + keywordOccurrence.get().getStartPosition());"], [439, "                //System.out.println(\"  cur: \" + currValue.get() + \". Examining next level\");"], [442, "                    //System.out.println(\"    related tags: \" + localResults.entrySet().stream().map(en -> en.getKey()).collect(Collectors.joining(\", \")));"], [469, "            addToResults(keystr, pageRanks.containsKey(key) ? pageRanks.get(key) : 0, results, 1);"], [482, "        Map<String, Keyword> results = new HashMap<>();"], [483, "        if (!coOccurrences.containsKey(tagId))"], [484, "            return results;"], [485, ""], [491, ""], [495, ""], [500, "            //if (!useDependencies || keywordOccurrence.getRelatedTags().contains(relValue.split(\"_\")[0])) {"], [501, "            List<String> merged = new ArrayList<>(keywords.get(tagId).getRelatedTags()); // new"], [502, "            merged.retainAll(keywordOccurrence.getRelatedTags()); // new"], [503, "            //System.out.println(\"    related tag = \" + idToValue.get(ccEntry) + \", related tags = \" + keywords.get(tagId).getRelatedTags().stream().collect(Collectors.joining(\", \")));"], [504, "            //System.out.println(\"      merged = \" + merged.stream().collect(Collectors.joining(\", \")));"], [505, "            if (!useDependencies || keywordOccurrence.getRelatedTags().contains(relValue.split(\"_\")[0]) || merged.size()>0) { // new"], [512, ""], [707, "                        && innerEntry.getValue().getRawKeyword().contains(entry.getValue().getRawKeyword())"], [708, "                        && entry.getValue().getWordsCount() == 1 // new"], [709, "                    ) {"]], "deleted": [[67, "            + \"WHERE id(a) = {id} and id(node) IN {nodeList}\\n\""], [390, "        params.put(\"nodeList\", topThird);"], [406, "                item.setRelevance(pageRanks.get(tagId));"], [428, "            //System.out.println(\"> \" + currValue.get() + \" - \" + keywordOccurrence.get().getStartPosition());"], [432, "                //System.out.println(\"cur: \" + currValue.get() + \" examinating next level\");"], [457, "        /*neExpanded.entrySet().stream()"], [458, "            .filter(en -> {"], [459, "                long n = en.getValue().stream().filter(v -> topThird.contains(v)).count();"], [460, "                return n > 0;"], [461, "                //return n >= en.getValue().size() / 3.0f || (n > 0 && en.getValue().size() == 2);"], [462, "            })"], [463, "            .forEach(en -> {"], [464, "                final String key = idToValue.get(en.getKey()) + \"_en\"; // + lang;"], [465, "                results.put(key, new Keyword(key)); // TO DO: handle counters exactMatch and total"], [466, "            });*/"], [471, "            results.put(keystr, new Keyword(keystr)); // TO DO: handle counters exactMatch and total"], [486, "        Map<String, Keyword> results = new HashMap<>();"], [497, "            if (!useDependencies || keywordOccurrence.getRelatedTags().contains(relValue.split(\"_\")[0])) {"], [698, "                        && innerEntry.getValue().getRawKeyword().contains(entry.getValue().getRawKeyword())) {"]]}, "num_lines_added": 30, "num_lines_removed": 19}