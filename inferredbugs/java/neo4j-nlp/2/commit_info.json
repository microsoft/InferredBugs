{"hash": "9c9f16317a0bd3d53c85b54c929a4dc0d5e95544", "message": "migrated Similarity", "file_num_lines": 209, "diff_parsed": {"added": [[48, "    private final static String DEFAULT_VECTOR_QUERY = \"MATCH (doc:AnnotatedText)\\n\""], [49, "            + \"WITH count(doc) as documentsCount\\n\""], [50, "            + \"MATCH (input:AnnotatedText)-[:CONTAINS_SENTENCE]->(s:Sentence)-[ht:HAS_TAG]->(tag:Tag)\\n\""], [51, "            + \"WHERE id(input) = {id}\\n\""], [52, "            + \"MATCH (tag)<-[:HAS_TAG]-(:Sentence)<-[:CONTAINS_SENTENCE]-(document:AnnotatedText)\\n\""], [53, "            + \"WITH tag, ht.tf as tf, count(distinct document) as documentsCountForTag, documentsCount\\n\""], [54, "            + \"RETURN distinct id(tag) as tagId, sum(tf) as tf, (1.0f + 1.0f*documentsCount)/documentsCountForTag as idf\";"], [56, "    private final static String DEFAULT_VECTOR_QUERY_WITH_CONCEPT = \"MATCH (doc:AnnotatedText)\\n\""], [57, "            + \"WITH count(doc) as documentsCount\\n\""], [58, "            + \"MATCH (document:AnnotatedText)-[:CONTAINS_SENTENCE]->(s:Sentence)-[ht:HAS_TAG]->(tag:Tag)\\n\""], [59, "            + \"WHERE id(document) = {id} and not any (p in tag.pos where p in [\\\"CC\\\", \\\"CD\\\", \\\"DT\\\", \\\"IN\\\", \\\"MD\\\", \\\"PRP\\\", \\\"PRP$\\\", \\\"UH\\\", \\\"WDT\\\", \\\"WP\\\", \\\"WRB\\\", \\\"TO\\\", \\\"PDT\\\", \\\"RP\\\", \\\"WP$\\\"])\\n\" // JJR, JJS ?"], [60, "            + \"WITH tag, sum(ht.tf) as tf, documentsCount, document.numTerms as nTerms\\n\""], [61, "            + \"OPTIONAL MATCH (tag)-[rt:IS_RELATED_TO]->(t2_l1:Tag)\\n\""], [62, "            + \"WHERE id(t2_l1) = tag.idMaxConcept  and exists(t2_l1.word2vec) and com.graphaware.nlp.ml.similarity.cosine(tag.word2vec, t2_l1.word2vec)>0.2\\n\""], [63, "            + \"WITH tag, tf, nTerms, id(t2_l1) as cn5_l1_tag, rt.weight as cn5_l1_tag_w, documentsCount\\n\""], [64, "            + \"MATCH (a:AnnotatedText)-[:CONTAINS_SENTENCE]->(s:Sentence)-[ht:HAS_TAG]->(tag)\\n\""], [65, "            + \"RETURN id(tag) as tagId, tf, (1.0f*documentsCount)/count(distinct a) as idf, nTerms, (case cn5_l1_tag when null then -1 else cn5_l1_tag end) as cn5_l1_tag, cn5_l1_tag_w\\n\""], [66, "            + \"ORDER BY tagId, cn5_l1_tag\";"], [67, ""], [71, "    protected final SimilarityQueueProcessor queueProcessor;"], [75, "        this.queueProcessor = new SimilarityQueueProcessor(database);"], [86, "    public float getFeatureCosine(long firstNode, long secondNode, int depth) {"], [87, "        return similarityFunction.getSimilarity(getTFMap(firstNode, depth), getTFMap(secondNode, depth));"], [88, "    }"], [89, ""], [95, "        tfMap = createFeatureMap(node, query);"], [96, "        tfCache.put(node, tfMap);"], [97, "        return tfMap;"], [98, "    }"], [99, ""], [100, "    private Map<Long, Float> getTFMap(long node, int depth) throws QueryExecutionException {"], [101, "        Map<Long, Float> tfMap = tfCache.getIfPresent(node);"], [102, "        if (tfMap != null) {"], [103, "            return tfMap;"], [104, "        }"], [105, "        tfMap = createFeatureMapWithCN5New(node);"], [122, "            result.put(id, tf * idf);"], [130, "        Result res = database.execute(DEFAULT_VECTOR_QUERY_WITH_CONCEPT, params);"], [146, "            if (cn5_tag > -1) {"], [147, "                if (!result.containsKey(cn5_tag)) {"], [148, "                    result.put(cn5_tag, tf);"], [149, "                    result_idf.put(cn5_tag, idf);"], [150, "                } else {"], [151, "                    result.put(cn5_tag, result.get(cn5_tag) + tf);"], [152, "                    if (result_idf.get(cn5_tag) < idf) // use the highest idf"], [153, "                    {"], [154, "                        result_idf.put(cn5_tag, idf);"], [155, "                    }"], [156, "                }"], [162, ""], [163, "        result.keySet().forEach((key) -> {"], [165, "        });"], [170, "        return computeFeatureSimilarityForNodes(firstNodeIds, DEFAULT_VECTOR_QUERY, Relationships.SIMILARITY_COSINE.name(), 0);"], [172, ""], [173, "    public int computeFeatureSimilarityForNodes(List<Long> firstNodeIds, Integer depth) {"], [174, "        return computeFeatureSimilarityForNodes(firstNodeIds, DEFAULT_VECTOR_QUERY_WITH_CONCEPT, Relationships.SIMILARITY_COSINE_CN5.name(), depth);"], [175, "    }"], [176, ""], [177, "    public int computeFeatureSimilarityForNodes(List<Long> firstNodeIds, String query, String similarityType, int depth) {"], [195, "            computeFeatureSimilarityForNode(firstNode, query, similarityType, countProcessed, countStored, depth);"], [204, "    private void computeFeatureSimilarityForNode(long firstNodeId, String query, String similarityType, AtomicInteger countProcessed, AtomicInteger countStored, Integer depth) {"], [215, "                            //if (secondNode > firstNodeId) { // this way, only one relationship between the same AnnotatedTexts will be stored (lower_id -> higher_id)"], [216, "                            float similarity;"], [217, "                            if (depth != null && depth > 0) {"], [218, "                                similarity = getFeatureCosine(firstNodeId, secondNode, depth);"], [219, "                            } else {"], [220, "                                similarity = getFeatureCosine(firstNodeId, secondNode, query);"], [221, "                            }"], [222, ""], [224, "                                kNN.add(new SimilarityItem(firstNodeId, secondNode, similarity, similarityType));"]], "deleted": [[43, "import org.springframework.beans.factory.annotation.Autowired;"], [44, "import org.springframework.stereotype.Component;"], [46, "@Component"], [50, ""], [51, "    private final static String DEFAULT_VECTOR_QUERY = \"MATCH (doc:AnnotatedText)\\n\""], [52, "                + \"WITH count(doc) as documentsCount\\n\""], [53, "                + \"MATCH (input:AnnotatedText)-[:CONTAINS_SENTENCE]->(s:Sentence)-[ht:HAS_TAG]->(tag:Tag)\\n\""], [54, "                + \"WHERE id(input) = {id}\\n\""], [55, "                + \"MATCH (tag)<-[:HAS_TAG]-(:Sentence)<-[:CONTAINS_SENTENCE]-(document:AnnotatedText)\\n\""], [56, "                + \"WITH tag, ht.tf as tf, count(distinct document) as documentsCountForTag, documentsCount\\n\""], [57, "                + \"RETURN distinct id(tag) as tagId, sum(tf) as tf, (1.0f + 1.0f*documentsCount)/documentsCountForTag as idf\";"], [59, "    // ConceptNet5 depth to go to"], [60, "    private int cn5_depth;"], [65, "    @Autowired"], [66, "    protected SimilarityQueueProcessor queueProcessor;"], [68, "    @Autowired"], [72, "        this.cn5_depth = 0;"], [73, "    }"], [74, ""], [75, "    public void useConceptNet5(int depth) {"], [76, "      this.cn5_depth = depth;"], [91, "        if (cn5_depth==0)"], [92, "            tfMap = createFeatureMap(node, query);"], [93, "        else"], [94, "            //tfMap = createFeatureMapWithCN5(node);"], [95, "            tfMap = createFeatureMapWithCN5New(node);"], [112, "            result.put(id, tf*idf);"], [113, "        }"], [114, "        return result;"], [115, "    }"], [116, ""], [117, "    private Map<Long, Float> createFeatureMapWithCN5(long firstNode) throws QueryExecutionException {"], [118, "        Map<String, Object> params = new HashMap<>();"], [119, "        params.put(\"id\", firstNode);"], [120, "        Result res = database.execute(\"MATCH (doc:AnnotatedText)\\n\""], [121, "                + \"WITH count(doc) as documentsCount\\n\""], [122, "                + \"MATCH (document:AnnotatedText)-[:CONTAINS_SENTENCE]->(s:Sentence)-[ht:HAS_TAG]->(tag:Tag)\\n\""], [123, "                + \"WHERE id(document) = {id} and not any (p in tag.pos where p in [\\\"CC\\\", \\\"CD\\\", \\\"DT\\\", \\\"IN\\\", \\\"MD\\\", \\\"PRP\\\", \\\"PRP$\\\", \\\"UH\\\", \\\"WDT\\\", \\\"WP\\\", \\\"WRB\\\", \\\"TO\\\", \\\"PDT\\\", \\\"RP\\\", \\\"WP$\\\"])\\n\" // JJR, JJS ?"], [124, "                + \"WITH tag, sum(ht.tf) as tf, documentsCount, document.numTerms as nTerms\\n\""], [125, "                + \"OPTIONAL MATCH (tag)-[rt:IS_RELATED_TO]->(t2_l1:Tag)\\n\""], [126, "                + \"WHERE (case tag.word2vec when null then false else (case t2_l1.word2vec when null then false else com.graphaware.nlp.ml.similarity.cosine(tag.word2vec, t2_l1.word2vec) > 0.1 end) end)\\n\""], [127, "                + \"WITH tag, tf, documentsCount, nTerms, collect(id(t2_l1) + \\\"_\\\" + rt.weight) as cn5_l1_tags, sum(rt.weight) as cn5_l1_sum_w, max(rt.weight) as cn5_l1_max_w\\n\""], [128, "                + \"MATCH (a:AnnotatedText)-[:CONTAINS_SENTENCE]->(s:Sentence)-[ht:HAS_TAG]->(tag)\\n\""], [129, "                + \"WITH tag, tf, documentsCount, nTerms,  cn5_l1_tags, cn5_l1_sum_w, cn5_l1_max_w, (1.0f*documentsCount)/count(distinct a) as idf\\n\""], [130, "                + \"UNWIND (CASE cn5_l1_tags WHEN [] THEN [\\\"-1\\\"] ELSE cn5_l1_tags END) as cn5_l1_tagStr\\n\""], [131, "                + \"RETURN distinct id(tag) as tagId, tf, idf, nTerms, split(cn5_l1_tagStr, \\\"_\\\")[0] as cn5_l1_tag, split(cn5_l1_tagStr, \\\"_\\\")[1] as cn5_l1_tag_w, cn5_l1_sum_w, cn5_l1_max_w\\n\""], [132, "                + \"ORDER BY tagId, cn5_l1_tag\", params);"], [133, "        Map<Long, Float> result = new HashMap<>();"], [134, "        Map<Long, Float> result_idf = new HashMap<>();"], [135, "        while (res != null && res.hasNext()) {"], [136, "            Map<String, Object> next = res.next();"], [137, "            long id = (long) next.get(\"tagId\");"], [138, "            int nTerms = (int) next.get(\"nTerms\");"], [139, "            //float tf = getFloatValue(next.get(\"tf\"));"], [140, "            float tf = getFloatValue(next.get(\"tf\")) / nTerms;"], [141, "            float idf = Double.valueOf(Math.log10(Float.valueOf(getFloatValue(next.get(\"idf\"))).doubleValue())).floatValue();"], [142, ""], [143, "            // ConceptNet5 Level_1 tags"], [144, "            float sumW = getFloatValue(next.get(\"cn5_l1_sum_w\"));"], [145, "            float maxW = getFloatValue(next.get(\"cn5_l1_max_w\"));"], [146, "            long cn5_tag = Long.valueOf((String) next.get(\"cn5_l1_tag\"));"], [147, "            float cn5_tag_w = getFloatValue(next.get(\"cn5_l1_tag_w\"));"], [148, ""], [149, "            //result.put(id, tf);"], [150, "            //result_idf.put(id, idf);"], [151, ""], [152, "            if (cn5_tag!=-1) {"], [153, "              if (!result.containsKey(cn5_tag)) {"], [154, "                  result.put(cn5_tag, tf * cn5_tag_w/maxW);"], [155, "                  result_idf.put(cn5_tag, idf);"], [156, "              } else {"], [157, "                  result.put(cn5_tag, result.get(cn5_tag) + tf * cn5_tag_w/maxW);"], [158, "                  if (result_idf.get(cn5_tag) < idf) // use the highest idf"], [159, "                      result_idf.put(cn5_tag, idf);"], [160, "              }"], [161, "            } else {"], [162, "                result.put(id, tf);"], [163, "                result_idf.put(id, idf);"], [164, "            }"], [165, "        }"], [166, ""], [167, "        for (Long key: result.keySet()) {"], [168, "            result.put(key, result.get(key) * result_idf.get(key));"], [176, "        Result res = database.execute(\"MATCH (doc:AnnotatedText)\\n\""], [177, "                + \"WITH count(doc) as documentsCount\\n\""], [178, "                + \"MATCH (document:AnnotatedText)-[:CONTAINS_SENTENCE]->(s:Sentence)-[ht:HAS_TAG]->(tag:Tag)\\n\""], [179, "                + \"WHERE id(document) = {id} and not any (p in tag.pos where p in [\\\"CC\\\", \\\"CD\\\", \\\"DT\\\", \\\"IN\\\", \\\"MD\\\", \\\"PRP\\\", \\\"PRP$\\\", \\\"UH\\\", \\\"WDT\\\", \\\"WP\\\", \\\"WRB\\\", \\\"TO\\\", \\\"PDT\\\", \\\"RP\\\", \\\"WP$\\\"])\\n\" // JJR, JJS ?"], [180, "                + \"WITH tag, sum(ht.tf) as tf, documentsCount, document.numTerms as nTerms\\n\""], [181, "                + \"OPTIONAL MATCH (tag)-[rt:IS_RELATED_TO]->(t2_l1:Tag)\\n\""], [182, "                + \"WHERE id(t2_l1) = tag.idMaxConcept  and exists(t2_l1.word2vec) and com.graphaware.nlp.ml.similarity.cosine(tag.word2vec, t2_l1.word2vec)>0.2\\n\""], [183, "                + \"WITH tag, tf, nTerms, id(t2_l1) as cn5_l1_tag, rt.weight as cn5_l1_tag_w, documentsCount\\n\""], [184, "                + \"MATCH (a:AnnotatedText)-[:CONTAINS_SENTENCE]->(s:Sentence)-[ht:HAS_TAG]->(tag)\\n\""], [185, "                + \"RETURN id(tag) as tagId, tf, (1.0f*documentsCount)/count(distinct a) as idf, nTerms, (case cn5_l1_tag when null then -1 else cn5_l1_tag end) as cn5_l1_tag, cn5_l1_tag_w\\n\""], [186, "                + \"ORDER BY tagId, cn5_l1_tag\", params);"], [202, "            if (cn5_tag>-1) {"], [203, "              if (!result.containsKey(cn5_tag)) {"], [204, "                  result.put(cn5_tag, tf);"], [205, "                  result_idf.put(cn5_tag, idf);"], [206, "              } else {"], [207, "                  result.put(cn5_tag, result.get(cn5_tag) + tf);"], [208, "                  if (result_idf.get(cn5_tag) < idf) // use the highest idf"], [209, "                      result_idf.put(cn5_tag, idf);"], [210, "              }"], [216, ""], [217, "        for (Long key: result.keySet()) {"], [219, "        }"], [224, "        return computeFeatureSimilarityForNodes(firstNodeIds, DEFAULT_VECTOR_QUERY, Relationships.SIMILARITY_COSINE.name());"], [226, ""], [227, "    public int computeFeatureSimilarityForNodes(List<Long> firstNodeIds, String query, String similarityType) {"], [245, "            computeFeatureSimilarityForNode(firstNode, query, similarityType, countProcessed, countStored);"], [254, "    private void computeFeatureSimilarityForNode(long firstNodeId, String query, String similarityType, AtomicInteger countProcessed, AtomicInteger countStored) {"], [265, "                        //if (secondNode > firstNodeId) { // this way, only one relationship between the same AnnotatedTexts will be stored (lower_id -> higher_id)"], [266, "                            float similarity = getFeatureCosine(firstNodeId, secondNode, query);"], [268, "                                if (cn5_depth==0)"], [269, "                                    kNN.add(new SimilarityItem(firstNodeId, secondNode, similarity, similarityType));"], [270, "                                else"], [271, "                                    kNN.add(new SimilarityItem(firstNodeId, secondNode, similarity, Relationships.SIMILARITY_COSINE_CN5.name()));"]]}, "num_lines_added": 70, "num_lines_removed": 117}