{"hash": "c370c52f87ec9dd63fc4deedecbefed45b5c9004", "message": "TIKA-128: HTML parser should produce XHTML SAX events\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tika/trunk@638657 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 100, "diff_parsed": {"added": [[21, "import java.io.StringWriter;"], [22, "import java.util.HashMap;"], [23, "import java.util.Map;"], [29, "import org.apache.tika.sax.TeeContentHandler;"], [30, "import org.apache.tika.sax.TextContentHandler;"], [31, "import org.apache.tika.sax.WriteOutContentHandler;"], [32, "import org.apache.tika.sax.XHTMLContentHandler;"], [33, "import org.apache.tika.sax.xpath.Matcher;"], [34, "import org.apache.tika.sax.xpath.MatchingContentHandler;"], [35, "import org.apache.tika.sax.xpath.XPathParser;"], [44, " * HTML parser. Uses CyberNeko to turn the input document to HTML SAX events,"], [45, " * and post-processes the events to produce XHTML and metadata expected by"], [46, " * Tika clients."], [50, "    /**"], [51, "     * Set of safe mappings from incoming HTML elements to outgoing"], [52, "     * XHTML elements. Ensures that the output is valid XHTML 1.0 Strict."], [53, "     */"], [54, "    private static final Map<String, String> SAFE_ELEMENTS ="], [55, "        new HashMap<String, String>();"], [56, ""], [57, "    static {"], [58, "        // Based on http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"], [59, "        SAFE_ELEMENTS.put(\"P\", \"p\");"], [60, "        SAFE_ELEMENTS.put(\"H1\", \"h1\");"], [61, "        SAFE_ELEMENTS.put(\"H2\", \"h2\");"], [62, "        SAFE_ELEMENTS.put(\"H3\", \"h3\");"], [63, "        SAFE_ELEMENTS.put(\"H4\", \"h4\");"], [64, "        SAFE_ELEMENTS.put(\"H5\", \"h5\");"], [65, "        SAFE_ELEMENTS.put(\"H6\", \"h6\");"], [66, "        SAFE_ELEMENTS.put(\"UL\", \"ul\");"], [67, "        SAFE_ELEMENTS.put(\"OL\", \"ol\");"], [68, "        SAFE_ELEMENTS.put(\"LI\", \"li\");"], [69, "        SAFE_ELEMENTS.put(\"DL\", \"dl\");"], [70, "        SAFE_ELEMENTS.put(\"DT\", \"dt\");"], [71, "        SAFE_ELEMENTS.put(\"DD\", \"dd\");"], [72, "        SAFE_ELEMENTS.put(\"PRE\", \"pre\");"], [73, "        SAFE_ELEMENTS.put(\"BLOCKQUOTE\", \"blockquote\");"], [74, "        SAFE_ELEMENTS.put(\"TABLE\", \"p\"); // TODO colspan/rowspan issues"], [75, "    }"], [76, ""], [80, "        // Protect the stream from being closed by CyberNeko"], [81, "        stream = new CloseShieldInputStream(stream);"], [82, ""], [83, "        // Prepare the HTML content handler that generates proper"], [84, "        // XHTML events to records relevant document metadata"], [85, "        XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);"], [86, "        XPathParser xpath = new XPathParser(null, \"\");"], [87, "        Matcher body = xpath.parse(\"/HTML/BODY//node()\");"], [88, "        Matcher title = xpath.parse(\"/HTML/HEAD/TITLE//node()\");"], [89, "        handler = new TeeContentHandler("], [90, "                new MatchingContentHandler(getBodyHandler(xhtml), body),"], [91, "                new MatchingContentHandler(getTitleHandler(metadata), title));"], [92, ""], [93, "        // Parse the HTML document"], [94, "        xhtml.startDocument();"], [96, "        parser.setContentHandler(handler);"], [97, "        parser.parse(new InputSource(Utils.getUTF8Reader(stream, metadata)));"], [98, "        xhtml.endDocument();"], [101, "    private ContentHandler getTitleHandler(final Metadata metadata) {"], [102, "        final StringWriter writer = new StringWriter();"], [103, "        return new WriteOutContentHandler(writer) {"], [104, "            @Override"], [105, "            public void endElement(String u, String l, String n) {"], [106, "                metadata.set(Metadata.TITLE, writer.toString());"], [108, "        };"], [109, "    }"], [111, "    private ContentHandler getBodyHandler(final XHTMLContentHandler xhtml) {"], [112, "        return new TextContentHandler(xhtml) {"], [113, "            @Override"], [114, "            public void startElement("], [115, "                    String uri, String local, String name, Attributes atts)"], [116, "                    throws SAXException {"], [117, "                String safe = SAFE_ELEMENTS.get(name);"], [118, "                if (safe != null) {"], [119, "                    xhtml.startElement(safe);"], [120, "                } else if (\"A\".equals(name)) {"], [121, "                    String href = atts.getValue(\"href\");"], [122, "                    if (href == null) {"], [123, "                        href = \"\";"], [124, "                    }"], [125, "                    xhtml.startElement(\"a\", \"href\", href);"], [126, "                }"], [129, "            @Override"], [130, "            public void endElement("], [131, "                    String uri, String local, String name) throws SAXException {"], [132, "                String safe = SAFE_ELEMENTS.get(name);"], [133, "                if (safe != null) {"], [134, "                    xhtml.endElement(safe);"], [135, "                } else if (\"A\".equals(name)) {"], [136, "                    xhtml.endElement(\"a\");"], [139, "        };"], [141, ""]], "deleted": [[26, "import org.apache.tika.sax.ContentHandlerDecorator;"], [35, " * Simple HTML parser that extracts title."], [43, "        parser.setContentHandler("], [44, "                new TitleExtractingContentHandler(handler, metadata));"], [45, "        parser.parse(new InputSource(Utils.getUTF8Reader("], [46, "                new CloseShieldInputStream(stream), metadata)));"], [49, "    private static class TitleExtractingContentHandler extends"], [50, "            ContentHandlerDecorator {"], [51, ""], [52, "        private static final String TAG_TITLE = \"TITLE\";"], [53, ""], [54, "        private static final String TAG_HEAD = \"HEAD\";"], [55, ""], [56, "        private static final String TAG_HTML = \"HTML\";"], [57, ""], [58, "        private Phase phase = Phase.START;"], [59, ""], [60, "        private Metadata metadata;"], [61, ""], [62, "        private StringBuilder title = new StringBuilder();"], [63, ""], [64, "        private static enum Phase {"], [65, "            START, HTML, HEAD, TITLE, IGNORE;"], [66, "        }"], [67, ""], [68, "        public TitleExtractingContentHandler(final ContentHandler handler,"], [69, "                final Metadata metadata) {"], [70, "            super(handler);"], [71, "            this.metadata = metadata;"], [72, "        }"], [73, ""], [74, "        @Override"], [75, "        public void startElement(String uri, String localName, String name,"], [76, "                Attributes atts) throws SAXException {"], [77, ""], [78, "            switch (phase) {"], [79, "            case START:"], [80, "                if (TAG_HTML.equals(localName)) {"], [81, "                    phase = Phase.HTML;"], [82, "                }"], [83, "                break;"], [84, "            case HTML:"], [85, "                if (TAG_HEAD.equals(localName)) {"], [86, "                    phase = Phase.HEAD;"], [87, "                }"], [88, "                break;"], [89, "            case HEAD:"], [90, "                if (TAG_TITLE.equals(localName)) {"], [91, "                    phase = Phase.TITLE;"], [92, "                }"], [93, "                break;"], [95, "            super.startElement(uri, localName, name, atts);"], [96, "        }"], [98, "        @Override"], [99, "        public void characters(char[] ch, int start, int length)"], [100, "                throws SAXException {"], [101, "            switch (phase) {"], [102, "            case TITLE:"], [103, "                title.append(ch, start, length);"], [104, "                break;"], [106, "            super.characters(ch, start, length);"], [107, "        }"], [109, "        @Override"], [110, "        public void endElement(String uri, String localName, String name)"], [111, "                throws SAXException {"], [112, "            switch (phase) {"], [113, "            case TITLE:"], [114, "                if (TAG_TITLE.equals(localName)) {"], [115, "                    phase = Phase.IGNORE;"], [117, "                break;"], [119, "            super.endElement(uri, localName, name);"], [120, "        }"], [121, ""], [122, "        @Override"], [123, "        public void endDocument() throws SAXException {"], [124, "            metadata.set(Metadata.TITLE, title.toString());"], [125, "            super.endDocument();"], [126, "        }"]]}, "num_lines_added": 92, "num_lines_removed": 78}