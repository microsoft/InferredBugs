{"hash": "296e279858af9112d5500cc9a828a2d87d3218f5", "message": "TIKA-274: CharsetDetector.setDeclaredEncoding has no effect\n\nModified TXTParser so that an encoding hint in input metadata is used as the default encoding in case automatic detection fails.\n\nAdded better javadocs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/tika/trunk@813624 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 65, "diff_parsed": {"added": [[1, "/*"], [23, "import java.io.InputStreamReader;"], [25, "import java.io.UnsupportedEncodingException;"], [28, "import org.apache.tika.metadata.DublinCore;"], [29, "import org.apache.tika.metadata.HttpHeaders;"], [37, " * Plain text parser. The text encoding of the document stream is"], [38, " * automatically detected based on the byte patterns found at the"], [39, " * beginning of the stream. The input metadata key"], [40, " * {@link HttpHeaders#CONTENT_ENCODING} is used as an encoding hint"], [41, " * if the automatic encoding detection fails."], [42, " * <p>"], [43, " * This parser sets the following output metadata entries:"], [44, " * <dl>"], [45, " *   <dt>{@link HttpHeaders#CONTENT_TYPE}</dt>"], [46, " *   <dd><code>text/plain</code></dd>"], [47, " *   <dt>{@link HttpHeaders#CONTENT_ENCODING}</dt>"], [48, " *   <dd>The detected text encoding of the document.</dd>"], [49, " *   <dt>"], [50, " *     {@link HttpHeaders#CONTENT_LANGUAGE} and {@link DublinCore#LANGUAGE}"], [51, " *   </dt>"], [52, " *   <dd>"], [53, " *     The default language of the detected encoding. Only set if the"], [54, " *     detected encoding is associated with some specific language"], [55, " *     (for example KOI8-R with Russian or SJIS with Japanese)."], [56, " *   </dd>"], [57, " * </dl>"], [64, "        metadata.set(Metadata.CONTENT_TYPE, \"text/plain\");"], [70, ""], [71, "        // Detect the content encoding (the stream is reset to the beginning)"], [72, "        // TODO: Better use of the possible encoding hint in input metadata"], [73, "        CharsetMatch match = new CharsetDetector().setText(stream).detect();"], [74, "        if (match != null) {"], [75, "            metadata.set(Metadata.CONTENT_ENCODING, match.getName());"], [76, ""], [77, "            // Is the encoding language-specific (KOI8-R, SJIS, etc.)?"], [78, "            String language = match.getLanguage();"], [79, "            if (language != null) {"], [80, "                metadata.set(Metadata.CONTENT_LANGUAGE, match.getLanguage());"], [81, "                metadata.set(Metadata.LANGUAGE, match.getLanguage());"], [82, "            }"], [85, "        String encoding = metadata.get(Metadata.CONTENT_ENCODING);"], [86, "        if (encoding == null) {"], [87, "            throw new TikaException("], [88, "                    \"Text encoding could not be detected and no encoding\""], [89, "                    + \" hint is available in document metadata\");"], [92, "        try {"], [93, "            Reader reader ="], [94, "                new BufferedReader(new InputStreamReader(stream, encoding));"], [96, "            // TIKA-240: Drop the BOM when extracting plain text"], [97, "            reader.mark(1);"], [98, "            int bom = reader.read();"], [99, "            if (bom != '\\ufeff') { // zero-width no-break space"], [100, "                reader.reset();"], [101, "            }"], [102, ""], [103, "            XHTMLContentHandler xhtml ="], [104, "                new XHTMLContentHandler(handler, metadata);"], [105, "            xhtml.startDocument();"], [106, ""], [107, "            xhtml.startElement(\"p\");"], [108, "            char[] buffer = new char[4096];"], [109, "            int n = reader.read(buffer);"], [110, "            while (n != -1) {"], [111, "                xhtml.characters(buffer, 0, n);"], [112, "                n = reader.read(buffer);"], [113, "            }"], [114, "            xhtml.endElement(\"p\");"], [116, "            xhtml.endDocument();"], [117, "        } catch (UnsupportedEncodingException e) {"], [118, "            throw new TikaException("], [119, "                    \"Unsupported text encoding: \" + encoding, e);"]], "deleted": [[1, "/**"], [33, " * Text parser"], [40, "        CharsetDetector detector = new CharsetDetector();"], [41, ""], [42, "        // Use the declared character encoding, if available"], [43, "        String encoding = metadata.get(Metadata.CONTENT_ENCODING);"], [44, "        if (encoding != null) {"], [45, "            detector.setDeclaredEncoding(encoding);"], [46, "        }"], [52, "        detector.setText(stream);"], [53, ""], [54, "        CharsetMatch match = detector.detect();"], [55, "        if (match == null) {"], [56, "            throw new TikaException(\"Unable to detect character encoding\");"], [59, "        Reader reader = new BufferedReader(match.getReader());"], [60, "        // TIKA-240: Drop the BOM when extracting plain text"], [61, "        reader.mark(1);"], [62, "        int bom = reader.read();"], [63, "        if (bom != '\\ufeff') { // zero-width no-break space"], [64, "            reader.reset();"], [67, "        metadata.set(Metadata.CONTENT_TYPE, \"text/plain\");"], [68, "        metadata.set(Metadata.CONTENT_ENCODING, match.getName());"], [70, "        String language = match.getLanguage();"], [71, "        if (language != null) {"], [72, "            metadata.set(Metadata.CONTENT_LANGUAGE, match.getLanguage());"], [73, "            metadata.set(Metadata.LANGUAGE, match.getLanguage());"], [74, "        }"], [76, "        XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);"], [77, "        xhtml.startDocument();"], [78, "        xhtml.startElement(\"p\");"], [79, "        char[] buffer = new char[4096];"], [80, "        for (int n = reader.read(buffer); n != -1; n = reader.read(buffer)) {"], [81, "            xhtml.characters(buffer, 0, n);"], [83, "        xhtml.endElement(\"p\");"], [84, "        xhtml.endDocument();"]]}, "num_lines_added": 71, "num_lines_removed": 35}