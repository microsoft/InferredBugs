{"hash": "03fc9809604a983b9ccfc0c5d9b9910bb96013fc", "message": "optimize: remove H2 and pgsql get primary index code and close resultSet (#1535)", "file_num_lines": 233, "diff_parsed": {"added": [[96, "     *"], [99, "    public static void refresh(final DataSourceProxy dataSourceProxy) {"], [103, "            if (entry.getKey().equals(key)) {"], [106, "                    if (!tableMeta.equals(entry.getValue())) {"], [121, "    private static TableMeta fetchSchemeInDefaultWay(DataSource dataSource, String tableName) throws SQLException {"], [185, "                    + \".constraint_name = b.constraint_name and b.constraint_type = 'P' and a.table_name ='\" + tableName"], [186, "                    + \"'\");"], [224, "        ResultSet rsColumns = dbmd.getColumns(catalogName, schemaName, tableName, \"%\");"], [225, "        ResultSet rsIndex = dbmd.getIndexInfo(catalogName, schemaName, tableName, false, true);"], [227, "        try {"], [228, "            while (rsColumns.next()) {"], [229, "                ColumnMeta col = new ColumnMeta();"], [230, "                col.setTableCat(rsColumns.getString(\"TABLE_CAT\"));"], [231, "                col.setTableSchemaName(rsColumns.getString(\"TABLE_SCHEM\"));"], [232, "                col.setTableName(rsColumns.getString(\"TABLE_NAME\"));"], [233, "                col.setColumnName(rsColumns.getString(\"COLUMN_NAME\"));"], [234, "                col.setDataType(rsColumns.getInt(\"DATA_TYPE\"));"], [235, "                col.setDataTypeName(rsColumns.getString(\"TYPE_NAME\"));"], [236, "                col.setColumnSize(rsColumns.getInt(\"COLUMN_SIZE\"));"], [237, "                col.setDecimalDigits(rsColumns.getInt(\"DECIMAL_DIGITS\"));"], [238, "                col.setNumPrecRadix(rsColumns.getInt(\"NUM_PREC_RADIX\"));"], [239, "                col.setNullAble(rsColumns.getInt(\"NULLABLE\"));"], [240, "                col.setRemarks(rsColumns.getString(\"REMARKS\"));"], [241, "                col.setColumnDef(rsColumns.getString(\"COLUMN_DEF\"));"], [242, "                col.setSqlDataType(rsColumns.getInt(\"SQL_DATA_TYPE\"));"], [243, "                col.setSqlDatetimeSub(rsColumns.getInt(\"SQL_DATETIME_SUB\"));"], [244, "                col.setCharOctetLength(rsColumns.getInt(\"CHAR_OCTET_LENGTH\"));"], [245, "                col.setOrdinalPosition(rsColumns.getInt(\"ORDINAL_POSITION\"));"], [246, "                col.setIsNullAble(rsColumns.getString(\"IS_NULLABLE\"));"], [247, "                col.setIsAutoincrement(rsColumns.getString(\"IS_AUTOINCREMENT\"));"], [248, ""], [249, "                tm.getAllColumns().put(col.getColumnName(), col);"], [250, "            }"], [252, "            while (rsIndex.next()) {"], [253, "                String indexName = rsIndex.getString(\"INDEX_NAME\");"], [254, "                String colName = rsIndex.getString(\"COLUMN_NAME\");"], [255, "                ColumnMeta col = tm.getAllColumns().get(colName);"], [256, ""], [257, "                if (tm.getAllIndexes().containsKey(indexName)) {"], [258, "                    IndexMeta index = tm.getAllIndexes().get(indexName);"], [259, "                    index.getValues().add(col);"], [261, "                    IndexMeta index = new IndexMeta();"], [262, "                    index.setIndexName(indexName);"], [263, "                    index.setNonUnique(rsIndex.getBoolean(\"NON_UNIQUE\"));"], [264, "                    index.setIndexQualifier(rsIndex.getString(\"INDEX_QUALIFIER\"));"], [265, "                    index.setIndexName(rsIndex.getString(\"INDEX_NAME\"));"], [266, "                    index.setType(rsIndex.getShort(\"TYPE\"));"], [267, "                    index.setOrdinalPosition(rsIndex.getShort(\"ORDINAL_POSITION\"));"], [268, "                    index.setAscOrDesc(rsIndex.getString(\"ASC_OR_DESC\"));"], [269, "                    index.setCardinality(rsIndex.getInt(\"CARDINALITY\"));"], [270, "                    index.getValues().add(col);"], [271, "                    if (\"PRIMARY\".equalsIgnoreCase(indexName)) {"], [272, "                        index.setIndextype(IndexType.PRIMARY);"], [273, "                    } else if (!index.isNonUnique()) {"], [274, "                        index.setIndextype(IndexType.Unique);"], [275, "                    } else {"], [276, "                        index.setIndextype(IndexType.Normal);"], [277, "                    }"], [278, "                    tm.getAllIndexes().put(indexName, index);"], [282, "            if (tm.getAllIndexes().isEmpty()) {"], [283, "                throw new ShouldNeverHappenException(\"Could not found any index in the table: \" + tableName);"], [284, "            }"], [285, "        } finally {"], [286, "            if (rsColumns != null) {"], [287, "                rsColumns.close();"], [288, "            }"], [289, "            if (rsIndex != null) {"], [290, "                rsIndex.close();"], [291, "            }"], [298, "     *"], [303, "    private static String getCacheKey(DataSourceProxy dataSourceProxy, String tableName) {"]], "deleted": [[98, "    public static void refresh(final DataSourceProxy dataSourceProxy){"], [102, "            if(entry.getKey().equals(key)){"], [105, "                    if (!tableMeta.equals(entry.getValue())){"], [120, "    private static TableMeta fetchSchemeInDefaultWay(DataSource dataSource, String tableName)"], [121, "        throws SQLException {"], [185, "                    + \".constraint_name = b.constraint_name and b.constraint_type = 'P' and a.table_name ='\""], [186, "                    + tableName + \"'\");"], [224, "        ResultSet rs1 = dbmd.getColumns(catalogName, schemaName, tableName, \"%\");"], [225, "        while (rs1.next()) {"], [226, "            ColumnMeta col = new ColumnMeta();"], [227, "            col.setTableCat(rs1.getString(\"TABLE_CAT\"));"], [228, "            col.setTableSchemaName(rs1.getString(\"TABLE_SCHEM\"));"], [229, "            col.setTableName(rs1.getString(\"TABLE_NAME\"));"], [230, "            col.setColumnName(rs1.getString(\"COLUMN_NAME\"));"], [231, "            col.setDataType(rs1.getInt(\"DATA_TYPE\"));"], [232, "            col.setDataTypeName(rs1.getString(\"TYPE_NAME\"));"], [233, "            col.setColumnSize(rs1.getInt(\"COLUMN_SIZE\"));"], [234, "            col.setDecimalDigits(rs1.getInt(\"DECIMAL_DIGITS\"));"], [235, "            col.setNumPrecRadix(rs1.getInt(\"NUM_PREC_RADIX\"));"], [236, "            col.setNullAble(rs1.getInt(\"NULLABLE\"));"], [237, "            col.setRemarks(rs1.getString(\"REMARKS\"));"], [238, "            col.setColumnDef(rs1.getString(\"COLUMN_DEF\"));"], [239, "            col.setSqlDataType(rs1.getInt(\"SQL_DATA_TYPE\"));"], [240, "            col.setSqlDatetimeSub(rs1.getInt(\"SQL_DATETIME_SUB\"));"], [241, "            col.setCharOctetLength(rs1.getInt(\"CHAR_OCTET_LENGTH\"));"], [242, "            col.setOrdinalPosition(rs1.getInt(\"ORDINAL_POSITION\"));"], [243, "            col.setIsNullAble(rs1.getString(\"IS_NULLABLE\"));"], [244, "            col.setIsAutoincrement(rs1.getString(\"IS_AUTOINCREMENT\"));"], [246, "            tm.getAllColumns().put(col.getColumnName(), col);"], [247, "        }"], [249, "        ResultSet rs2 = dbmd.getIndexInfo(catalogName, schemaName, tableName, false, true);"], [250, "        String indexName = \"\";"], [251, "        while (rs2.next()) {"], [252, "            indexName = rs2.getString(\"INDEX_NAME\");"], [253, "            String colName = rs2.getString(\"COLUMN_NAME\");"], [254, "            ColumnMeta col = tm.getAllColumns().get(colName);"], [255, ""], [256, "            if (tm.getAllIndexes().containsKey(indexName)) {"], [257, "                IndexMeta index = tm.getAllIndexes().get(indexName);"], [258, "                index.getValues().add(col);"], [259, "            } else {"], [260, "                IndexMeta index = new IndexMeta();"], [261, "                index.setIndexName(indexName);"], [262, "                index.setNonUnique(rs2.getBoolean(\"NON_UNIQUE\"));"], [263, "                index.setIndexQualifier(rs2.getString(\"INDEX_QUALIFIER\"));"], [264, "                index.setIndexName(rs2.getString(\"INDEX_NAME\"));"], [265, "                index.setType(rs2.getShort(\"TYPE\"));"], [266, "                index.setOrdinalPosition(rs2.getShort(\"ORDINAL_POSITION\"));"], [267, "                index.setAscOrDesc(rs2.getString(\"ASC_OR_DESC\"));"], [268, "                index.setCardinality(rs2.getInt(\"CARDINALITY\"));"], [269, "                index.getValues().add(col);"], [270, "                if (\"PRIMARY\".equalsIgnoreCase(indexName) || indexName.equalsIgnoreCase("], [271, "                    rsmd.getTableName(1) + \"_pkey\")) {"], [272, "                    index.setIndextype(IndexType.PRIMARY);"], [273, "                } else if (!index.isNonUnique()) {"], [274, "                    index.setIndextype(IndexType.Unique);"], [276, "                    index.setIndextype(IndexType.Normal);"], [277, "                }"], [278, "                tm.getAllIndexes().put(indexName, index);"], [280, "            }"], [281, "        }"], [282, "        if(tm.getAllIndexes().isEmpty()){"], [283, "            throw new ShouldNeverHappenException(\"Could not found any index in the table: \" + tableName);"], [284, "        }"], [285, "        IndexMeta index = tm.getAllIndexes().get(indexName);"], [286, "        if (index.getIndextype().value() != 0) {"], [287, "            if (\"H2 JDBC Driver\".equals(dbmd.getDriverName())) {"], [288, "                if (indexName.length() > 11 && \"PRIMARY_KEY\".equalsIgnoreCase(indexName.substring(0, 11))) {"], [289, "                    index.setIndextype(IndexType.PRIMARY);"], [290, "                }"], [291, "            } else if (dbmd.getDriverName() != null && dbmd.getDriverName().toLowerCase().indexOf(\"postgresql\") >= 0) {"], [292, "                if ((tableName + \"_pkey\").equalsIgnoreCase(indexName)) {"], [293, "                    index.setIndextype(IndexType.PRIMARY);"], [306, "    private static String getCacheKey(DataSourceProxy dataSourceProxy, String tableName){"]]}, "num_lines_added": 71, "num_lines_removed": 74}