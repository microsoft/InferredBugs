{"hash": "2dccac478fe0042ac55bf5f8902854d799deb4a8", "message": "optimize: changed xid generation strategy to snowflake  (#2412)", "file_num_lines": 10, "diff_parsed": {"added": [[18, "import io.seata.core.util.IdWorker;"], [33, "        return IdWorker.getInstance().nextId();"], [39, "     * @param serverNode the server node id"], [41, "    public static void init(Long serverNode) {"], [42, "        IdWorker.init(serverNode);"], [44, ""]], "deleted": [[18, "import java.text.ParseException;"], [19, "import java.text.SimpleDateFormat;"], [20, "import java.time.LocalDate;"], [21, "import java.time.temporal.TemporalAdjusters;"], [22, "import java.util.Calendar;"], [23, "import java.util.Date;"], [24, "import java.util.concurrent.atomic.AtomicLong;"], [25, ""], [26, "import io.seata.common.exception.ShouldNeverHappenException;"], [35, "    private static final AtomicLong UUID = new AtomicLong(1000);"], [36, "    private static int serverNodeId = 1;"], [37, "    private static final long UUID_INTERNAL = 2000000000;"], [38, "    private static long initUUID = 0;"], [39, ""], [46, "        long id = UUID.incrementAndGet();"], [47, "        if (id >= getMaxUUID()) {"], [48, "            synchronized (UUID) {"], [49, "                if (UUID.get() >= id) {"], [50, "                    id -= UUID_INTERNAL;"], [51, "                    UUID.set(id);"], [52, "                }"], [53, "            }"], [54, "        }"], [55, "        return id;"], [56, "    }"], [57, ""], [58, "    /**"], [59, "     * Gets current uuid."], [60, "     *"], [61, "     * @return the current uuid"], [62, "     */"], [63, "    public static long getCurrentUUID() {"], [64, "        return UUID.get();"], [65, "    }"], [66, ""], [67, "    /**"], [68, "     * Sets uuid."], [69, "     *"], [70, "     * @param expect the expect"], [71, "     * @param update the update"], [72, "     * @return the uuid"], [73, "     */"], [74, "    public static boolean setUUID(long expect, long update) {"], [75, "        return UUID.compareAndSet(expect, update);"], [76, ""], [77, "    }"], [78, ""], [79, "    /**"], [80, "     * Gets max uuid."], [81, "     *"], [82, "     * @return the max uuid"], [83, "     */"], [84, "    public static long getMaxUUID() {"], [85, "        return UUID_INTERNAL * (serverNodeId + 1);"], [86, "    }"], [87, ""], [88, "    /**"], [89, "     * Gets init uuid."], [90, "     *"], [91, "     * @return the init uuid"], [92, "     */"], [93, "    public static long getInitUUID() {"], [94, "        return initUUID;"], [100, "     * @param serverNodeId the server node id"], [102, "    public static void init(int serverNodeId) {"], [103, "        try {"], [104, "            UUIDGenerator.serverNodeId = serverNodeId;"], [105, "            UUID.set(UUID_INTERNAL * serverNodeId);"], [106, "            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");"], [107, "            Calendar cal = Calendar.getInstance();"], [108, "            String firstDayOfYear = LocalDate.now()"], [109, "                    .with(TemporalAdjusters.firstDayOfYear()).toString();"], [110, "            Date date = format.parse(firstDayOfYear);"], [111, "            cal.setTime(date);"], [112, "            long base = cal.getTimeInMillis();"], [113, "            long current = System.currentTimeMillis();"], [114, "            UUID.addAndGet((current - base) / 1000);"], [115, "            initUUID = getCurrentUUID();"], [116, "        } catch (ParseException e) {"], [117, "            throw new ShouldNeverHappenException(e);"], [118, "        }"]]}, "num_lines_added": 6, "num_lines_removed": 81}