{"hash": "9d221f3f9491c37eaafce053ddf6fc2c8f7fd351", "message": "fix #271 add FileConfigurationTest, add addConfigListener removeConfigListener getConfigListeners impl, rm sample RmClientAT.init(),fix userDefined timeout not function (#272)\n\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function", "file_num_lines": 242, "diff_parsed": {"added": [[19, "import java.util.ArrayList;"], [20, "import java.util.List;"], [21, "import java.util.Map;"], [22, "import java.util.concurrent.ConcurrentHashMap;"], [23, "import java.util.concurrent.ConcurrentMap;"], [41, " * @Project: fescar -all"], [54, "    private ExecutorService configChangeExecutor;"], [55, ""], [58, "    private static final int CORE_CONFIG_CHANGE_THREAD = 1;"], [59, ""], [64, "    private static final long LISTENER_CONFIG_INTERNAL = 1 * 1000;"], [65, ""], [66, "    private final ConcurrentMap<String, List<ConfigChangeListener>> configListenersMap = new ConcurrentHashMap<>();"], [67, ""], [68, "    private final ConcurrentMap<String, String> listenedConfigMap = new ConcurrentHashMap<>();"], [69, ""], [76, "            new NamedThreadFactory(\"configOperate\", MAX_CONFIG_OPERATE_THREAD));"], [77, "        configChangeExecutor = new ThreadPoolExecutor(CORE_CONFIG_CHANGE_THREAD, CORE_CONFIG_CHANGE_THREAD,"], [78, "            Integer.MAX_VALUE, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(),"], [79, "            new NamedThreadFactory(\"configChange\", CORE_CONFIG_CHANGE_THREAD));"], [80, "        configChangeExecutor.submit(new ConfigChangeRunnable());"], [135, "        return (String)configFuture.get(timeoutMills, TimeUnit.MILLISECONDS);"], [169, "        return (Boolean)configFuture.get(timeoutMills, TimeUnit.MILLISECONDS);"], [181, "        return (Boolean)configFuture.get(timeoutMills, TimeUnit.MILLISECONDS);"], [191, "        configListenersMap.putIfAbsent(dataId, new ArrayList<ConfigChangeListener>());"], [192, "        configListenersMap.get(dataId).add(listener);"], [193, "        if (null != listener.getExecutor()) {"], [194, "            ConfigChangeRunnable configChangeTask = new ConfigChangeRunnable(dataId, listener);"], [195, "            listener.getExecutor().submit(configChangeTask);"], [196, "        }"], [201, "        List<ConfigChangeListener> configChangeListeners = getConfigListeners(dataId);"], [202, "        if (configChangeListeners == null) {"], [203, "            return;"], [204, "        }"], [205, "        List<ConfigChangeListener> newChangeListenerList = new ArrayList<>();"], [206, "        for (ConfigChangeListener changeListener : configChangeListeners) {"], [207, "            if (!changeListener.equals(listener)) {"], [208, "                newChangeListenerList.add(changeListener);"], [209, "            }"], [210, "        }"], [211, "        configListenersMap.put(dataId, newChangeListenerList);"], [212, "        if (null != listener.getExecutor()) {"], [213, "            listener.getExecutor().shutdownNow();"], [214, "        }"], [215, ""], [216, "    }"], [218, "    @Override"], [219, "    public List<ConfigChangeListener> getConfigListeners(String dataId) {"], [220, "        return configListenersMap.get(dataId);"], [272, "    /**"], [273, "     * The type Config change runnable."], [274, "     */"], [275, "    class ConfigChangeRunnable implements Runnable {"], [276, ""], [277, "        private String dataId;"], [278, "        private ConfigChangeListener listener;"], [279, ""], [280, "        /**"], [281, "         * Instantiates a new Config change runnable."], [282, "         */"], [283, "        public ConfigChangeRunnable() {}"], [284, ""], [285, "        /**"], [286, "         * Instantiates a new Config change runnable."], [287, "         *"], [288, "         * @param dataId   the data id"], [289, "         * @param listener the listener"], [290, "         */"], [291, "        public ConfigChangeRunnable(String dataId, ConfigChangeListener listener) {"], [292, ""], [293, "            if (null == listener.getExecutor()) {"], [294, "                throw new IllegalArgumentException(\"getExecutor is null.\");"], [295, "            }"], [296, "            this.dataId = dataId;"], [297, "            this.listener = listener;"], [298, "        }"], [299, ""], [300, "        @Override"], [301, "        public void run() {"], [302, "            while (true) {"], [303, "                try {"], [304, "                    Map<String, List<ConfigChangeListener>> configListenerMap;"], [305, "                    if (null != dataId && null != listener) {"], [306, "                        configListenerMap = new ConcurrentHashMap<>();"], [307, "                        configListenerMap.put(dataId, new ArrayList<ConfigChangeListener>());"], [308, "                        configListenerMap.get(dataId).add(listener);"], [309, "                    } else {"], [310, "                        configListenerMap = configListenersMap;"], [311, "                    }"], [312, "                    for (Map.Entry<String, List<ConfigChangeListener>> entry : configListenerMap.entrySet()) {"], [313, "                        String configId = entry.getKey();"], [314, "                        String currentConfig = getConfig(configId);"], [315, "                        if (null != currentConfig && currentConfig.equals(listenedConfigMap.get(configId))) {"], [316, "                            listenedConfigMap.put(configId, currentConfig);"], [317, "                            notifyAllListener(configId, configListenerMap.get(configId));"], [318, ""], [319, "                        } else if (null == currentConfig && null != listenedConfigMap.get(configId)) {"], [320, "                            notifyAllListener(configId, configListenerMap.get(configId));"], [321, "                        }"], [322, "                    }"], [323, "                    Thread.sleep(LISTENER_CONFIG_INTERNAL);"], [324, "                } catch (Exception exx) {"], [325, "                    LOGGER.error(exx.getMessage());"], [326, "                }"], [327, ""], [328, "            }"], [329, "        }"], [330, ""], [331, "        private void notifyAllListener(String dataId, List<ConfigChangeListener> configChangeListeners) {"], [332, "            List<ConfigChangeListener> needNotifyListeners = new ArrayList<>();"], [333, "            if (null != dataId && null != listener) {"], [334, "                needNotifyListeners.addAll(configChangeListeners);"], [335, "            } else {"], [336, "                for (ConfigChangeListener configChangeListener : configChangeListeners) {"], [337, "                    if (null == configChangeListener.getExecutor()) {"], [338, "                        needNotifyListeners.add(configChangeListener);"], [339, "                    }"], [340, "                }"], [341, "            }"], [342, "            for (ConfigChangeListener configChangeListener : needNotifyListeners) {"], [343, "                configChangeListener.receiveConfigInfo(listenedConfigMap.get(dataId));"], [344, "            }"], [345, "        }"], [346, ""], [347, "    }"], [348, ""]], "deleted": [[36, " * @Project: fescar-all"], [61, "            new NamedThreadFactory(\"configOperate\", MAX_CONFIG_OPERATE_THREAD, true));"], [116, "        return (String)configFuture.get();"], [150, "        return (Boolean)configFuture.get();"], [162, "        return (Boolean)configFuture.get();"], [172, ""]]}, "num_lines_added": 126, "num_lines_removed": 6}