{"hash": "29f805a2fa2f603fa7d82076d847abb2aade3bfa", "message": "feature: StateMachine ServiceTask supports asynchronous execution (#1844)", "file_num_lines": 194, "diff_parsed": {"added": [[37, "import java.util.concurrent.ThreadPoolExecutor;"], [49, "    private ThreadPoolExecutor threadPoolExecutor;"], [54, "        if(state.isAsync()){"], [55, "            if(threadPoolExecutor == null){"], [56, "                if(LOGGER.isWarnEnabled()){"], [57, "                    LOGGER.warn(\"threadPoolExecutor is null, Service[{}.{}] cannot execute asynchronously, executing synchronously now. stateName: {}\", state.getServiceName(), state.getServiceMethod(), state.getName());"], [58, "                }"], [59, "                return doInvoke(state, input);"], [60, "            }"], [61, ""], [62, "            if(LOGGER.isInfoEnabled()){"], [63, "                LOGGER.info(\"Submit Service[{}.{}] to asynchronously executing. stateName: {}\", state.getServiceName(), state.getServiceMethod(), state.getName());"], [64, "            }"], [65, "            threadPoolExecutor.execute(new Runnable() {"], [66, "                @Override"], [67, "                public void run() {"], [68, "                    doInvoke(state, input);"], [69, "                }"], [70, "            });"], [71, "            return null;"], [72, "        }"], [73, "        else{"], [74, "            return doInvoke(state, input);"], [75, "        }"], [76, "    }"], [77, ""], [78, "    protected Object doInvoke(ServiceTaskStateImpl state, Object[] input) {"], [97, ""], [121, "    public void setThreadPoolExecutor(ThreadPoolExecutor threadPoolExecutor) {"], [122, "        this.threadPoolExecutor = threadPoolExecutor;"], [123, "    }"], [124, ""]], "deleted": [[51, ""]]}, "num_lines_added": 32, "num_lines_removed": 1}