{"hash": "1cff044672b547049fcde5e48d61fae4d70558f9", "message": "bugfix:rm channel register null resource (#1401)", "file_num_lines": 187, "diff_parsed": {"added": [[18, "import java.util.Map;"], [19, "import java.util.Set;"], [20, "import java.util.concurrent.LinkedBlockingQueue;"], [21, "import java.util.concurrent.ThreadPoolExecutor;"], [22, "import java.util.concurrent.TimeUnit;"], [23, "import java.util.concurrent.TimeoutException;"], [24, "import java.util.concurrent.atomic.AtomicBoolean;"], [25, "import java.util.function.Function;"], [26, ""], [33, "import io.seata.common.util.StringUtils;"], [95, "                        KEEP_ALIVE_TIME, TimeUnit.SECONDS, new LinkedBlockingQueue<>(MAX_QUEUE_SIZE),"], [97, "                            nettyClientConfig.getClientWorkerThreads()), new ThreadPoolExecutor.CallerRunsPolicy());"], [131, ""], [149, "            String resourceIds = getMergedResourceKeys();"], [150, "            synchronized (ResourceManager.RESOURCE_LOCK) {"], [151, "                while (StringUtils.isNullOrEmpty(resourceIds)) {"], [152, "                    try {"], [153, "                        ResourceManager.RESOURCE_LOCK.wait();"], [154, "                    } catch (InterruptedException exx) {"], [155, "                        LOGGER.error(\"wait resourceIds interrupted error:{}\", exx.getMessage(), exx);"], [156, "                    }"], [157, "                    resourceIds = getMergedResourceKeys();"], [158, "                }"], [159, "            }"], [161, "                LOGGER.info(\"RM will register :{}\", resourceIds);"], [168, ""], [169, ""], [179, "            LOGGER.info(\"register RM success. server version:{},channel:{}\", ((RegisterRMResponse)response).getVersion(), channel);"], [181, "        getClientChannelManager().registerChannel(serverAddress, channel);"], [182, "        String dbKey = getMergedResourceKeys();"], [183, "        RegisterRMRequest message = (RegisterRMRequest)requestMessage;"], [184, "        if (message.getResourceIds() != null) {"], [185, "            if (!message.getResourceIds().equals(dbKey)) {"], [186, "                sendRegisterMessage(serverAddress, channel, dbKey);"], [189, ""], [197, "            LOGGER.info(\"register RM failed. server version:{}\", ((RegisterRMResponse)response).getVersion());"], [199, "        throw new FrameworkException(\"register RM failed, channel:\" + channel);"], [201, ""], [210, "            LOGGER.info(\"register to RM resourceId:{}\", resourceId);"], [221, "                    LOGGER.info(\"register resource, resourceId:{}\", resourceId);"], [227, ""], [234, "            if (e.getErrcode() == FrameworkErrorCode.ChannelIsNotWritable && serverAddress != null) {"], [237, "                    LOGGER.info(\"remove channel:{}\", channel);"], [240, "                LOGGER.error(\"register RM failed, channel:{}\", channel, e);"], [246, ""]], "deleted": [[33, "import java.util.Map;"], [34, "import java.util.Set;"], [35, "import java.util.concurrent.LinkedBlockingQueue;"], [36, "import java.util.concurrent.ThreadPoolExecutor;"], [37, "import java.util.concurrent.TimeUnit;"], [38, "import java.util.concurrent.TimeoutException;"], [39, "import java.util.concurrent.atomic.AtomicBoolean;"], [40, "import java.util.function.Function;"], [41, ""], [57, "    private String customerKeys;"], [95, "                        KEEP_ALIVE_TIME, TimeUnit.SECONDS,"], [96, "                        new LinkedBlockingQueue<>(MAX_QUEUE_SIZE),"], [98, "                            nettyClientConfig.getClientWorkerThreads()),"], [99, "                        new ThreadPoolExecutor.CallerRunsPolicy());"], [133, ""], [134, "    /**"], [135, "     * Gets customer keys."], [136, "     *"], [137, "     * @return the customer keys"], [138, "     */"], [139, "    public String getCustomerKeys() {"], [140, "        return customerKeys;"], [141, "    }"], [142, ""], [143, "    /**"], [144, "     * Sets customer keys."], [145, "     *"], [146, "     * @param customerKeys the customer keys"], [147, "     */"], [148, "    public void setCustomerKeys(String customerKeys) {"], [149, "        this.customerKeys = customerKeys;"], [150, "    }"], [151, ""], [169, "            String resourceIds = customerKeys == null ? getMergedResourceKeys() : customerKeys;"], [171, "                LOGGER.info(\"RM will register :\" + resourceIds);"], [178, ""], [188, "            LOGGER.info("], [189, "                \"register RM success. server version:\" + ((RegisterRMResponse)response).getVersion()"], [190, "                    + \",channel:\" + channel);"], [192, "        if (customerKeys == null) {"], [193, "            getClientChannelManager().registerChannel(serverAddress, channel);"], [194, "            String dbKey = getMergedResourceKeys();"], [195, "            RegisterRMRequest message = (RegisterRMRequest)requestMessage;"], [196, "            if (message.getResourceIds() != null) {"], [197, "                if (!message.getResourceIds().equals(dbKey)) {"], [198, "                    sendRegisterMessage(serverAddress, channel, dbKey);"], [199, "                }"], [209, "            LOGGER.info("], [210, "                \"register RM failed. server version:\" + ((RegisterRMResponse)response).getVersion());"], [212, "        throw new FrameworkException(\"register RM failed.\");"], [214, ""], [223, "            LOGGER.info(\"register to RM resourceId:\" + resourceId);"], [234, "                    LOGGER.info(\"register resource, resourceId:\" + resourceId);"], [240, ""], [247, "            if (e.getErrcode() == FrameworkErrorCode.ChannelIsNotWritable"], [248, "                && serverAddress != null) {"], [251, "                    LOGGER.info(\"remove channel:\" + channel);"], [254, "                LOGGER.error(\"register failed: {}\", e.getMessage(), e);"], [260, ""]]}, "num_lines_added": 45, "num_lines_removed": 59}