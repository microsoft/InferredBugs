{"hash": "315e7fbde518c3cfddb33483c6d10832af73fce1", "message": "Inner Caller class for async callbacks", "file_num_lines": 155, "diff_parsed": {"added": [[12, "import java.util.logging.Level;"], [13, "import java.util.logging.Logger;"], [178, "\t\treturn new Caller().call(method, params);"], [278, ""], [279, "\tpublic long callAsync(XMLRPCCallback listener, String methodName, Object[] params) {"], [280, "\t\tlong id = System.currentTimeMillis();"], [281, "\t\tnew Caller(listener, id, methodName, params).start();"], [282, "\t\treturn id;"], [283, ""], [284, "\t}"], [285, ""], [313, ""], [314, "\tprivate class Caller extends Thread {"], [315, ""], [316, "\t\tprivate XMLRPCCallback listener;"], [317, "\t\tprivate long threadId;"], [318, "\t\tprivate String methodName;"], [319, "\t\tprivate Object[] params;"], [320, ""], [321, "\t\tpublic Caller(XMLRPCCallback listener, long threadId, String methodName, Object[] params) {"], [322, "\t\t\tthis.listener = listener;"], [323, "\t\t\tthis.threadId = threadId;"], [324, "\t\t\tthis.methodName = methodName;"], [325, "\t\t\tthis.params = params;"], [326, "\t\t}"], [327, ""], [328, "\t\tpublic Caller() { }"], [329, ""], [330, "\t\t@Override"], [331, "\t\tpublic void run() {"], [332, ""], [333, "\t\t\tif(listener == null)"], [334, "\t\t\t\treturn;"], [335, ""], [336, "\t\t\ttry {"], [337, "\t\t\t\tObject o = this.call(methodName, params);"], [338, "\t\t\t\tlistener.onResponse(threadId, o);"], [339, "\t\t\t} catch(XMLRPCServerException ex) {"], [340, "\t\t\t\tlistener.onServerError(threadId, ex);"], [341, "\t\t\t} catch (XMLRPCException ex) {"], [342, "\t\t\t\tlistener.onError(threadId, ex);"], [343, "\t\t\t}"], [344, ""], [345, "\t\t}"], [346, ""], [347, "\t\tpublic Object call(String methodName, Object[] params) throws XMLRPCException {"], [348, ""], [349, "\t\t\ttry {"], [350, ""], [351, "\t\t\t\tCall c = createCall(methodName, params);"], [352, ""], [353, "\t\t\t\tURLConnection conn = url.openConnection();"], [354, "\t\t\t\tif(!(conn instanceof HttpURLConnection)) {"], [355, "\t\t\t\t\tthrow new IllegalArgumentException(\"The URL is not for a http connection.\");"], [356, "\t\t\t\t}"], [357, ""], [358, "\t\t\t\tHttpURLConnection http = (HttpURLConnection)conn;"], [359, "\t\t\t\thttp.setRequestMethod(HTTP_POST);"], [360, "\t\t\t\thttp.setDoOutput(true);"], [361, "\t\t\t\thttp.setDoInput(true);"], [362, ""], [363, "\t\t\t\t// Set the request parameters"], [364, "\t\t\t\tfor(Map.Entry<String,String> param : httpParameters.entrySet()) {"], [365, "\t\t\t\t\thttp.setRequestProperty(param.getKey(), param.getValue());"], [366, "\t\t\t\t}"], [367, ""], [368, "\t\t\t\tOutputStreamWriter stream = new OutputStreamWriter(http.getOutputStream());"], [369, "\t\t\t\tstream.write(c.getXML());"], [370, "\t\t\t\tstream.flush();"], [371, "\t\t\t\tstream.close();"], [372, ""], [373, "\t\t\t\tInputStream istream = http.getInputStream();"], [374, ""], [375, "\t\t\t\tif(http.getResponseCode() != HttpURLConnection.HTTP_OK) {"], [376, "\t\t\t\t\tthrow new XMLRPCException(\"The status code of the http response must be 200.\");"], [377, "\t\t\t\t}"], [378, ""], [379, "\t\t\t\t// Check for strict parameters"], [380, "\t\t\t\tif(isFlagSet(FLAGS_STRICT)) {"], [381, "\t\t\t\t\tif(!http.getContentType().startsWith(TYPE_XML)) {"], [382, "\t\t\t\t\t\tthrow new XMLRPCException(\"The Content-Type of the response must be text/xml.\");"], [383, "\t\t\t\t\t}"], [384, "\t\t\t\t}"], [385, ""], [386, "\t\t\t\treturn responseParser.parse(istream);"], [387, "\t\t\t} catch (IOException ex) {"], [388, "\t\t\t\tthrow new XMLRPCException(ex);"], [389, "\t\t\t}"], [390, ""], [391, "\t\t}"], [392, ""], [393, "\t}"], [394, ""]], "deleted": [[176, ""], [177, "\t\ttry {"], [178, ""], [179, "\t\t\tCall c = createCall(method, params);"], [180, ""], [181, "\t\t\tURLConnection conn = this.url.openConnection();"], [182, "\t\t\tif(!(conn instanceof HttpURLConnection)) {"], [183, "\t\t\t\tthrow new IllegalArgumentException(\"The URL is not for a http connection.\");"], [184, "\t\t\t}"], [185, ""], [186, "\t\t\tHttpURLConnection http = (HttpURLConnection)conn;"], [187, "\t\t\thttp.setRequestMethod(HTTP_POST);"], [188, "\t\t\thttp.setDoOutput(true);"], [189, "\t\t\thttp.setDoInput(true);"], [190, ""], [191, "\t\t\t// Set the request parameters"], [192, "\t\t\tfor(Map.Entry<String,String> param : httpParameters.entrySet()) {"], [193, "\t\t\t\thttp.setRequestProperty(param.getKey(), param.getValue());"], [194, "\t\t\t}"], [195, ""], [196, "\t\t\tOutputStreamWriter stream = new OutputStreamWriter(http.getOutputStream());"], [197, "\t\t\tstream.write(c.getXML());"], [198, "\t\t\tstream.flush();"], [199, "\t\t\tstream.close();"], [200, ""], [201, "\t\t\tInputStream istream = http.getInputStream();"], [202, ""], [203, "\t\t\tif(http.getResponseCode() != HttpURLConnection.HTTP_OK) {"], [204, "\t\t\t\tthrow new XMLRPCException(\"The status code of the http response must be 200.\");"], [205, "\t\t\t}"], [206, ""], [207, "\t\t\t// Check for strict parameters"], [208, "\t\t\tif(isFlagSet(FLAGS_STRICT)) {"], [209, "\t\t\t\tif(!http.getContentType().startsWith(TYPE_XML)) {"], [210, "\t\t\t\t\tthrow new XMLRPCException(\"The Content-Type of the response must be text/xml.\");"], [211, "\t\t\t\t}"], [212, "\t\t\t}"], [213, ""], [214, "\t\t\treturn responseParser.parse(istream);"], [215, "\t\t} catch (IOException ex) {"], [216, "\t\t\tthrow new XMLRPCException(ex);"], [217, "\t\t}"], [218, ""]]}, "num_lines_added": 93, "num_lines_removed": 43}