{"hash": "77320700c0afd7cef87683929ce41e0f6abc32ba", "message": "Implemented more robust I/O handling", "file_num_lines": 185, "diff_parsed": {"added": [[96, "\t\tif (resource != null && !resource.isEmpty())"], [97, "\t\t\tthis.copyResource(plugin.getResource(resource), file);"], [117, "\t\tBufferedReader reader = null;"], [118, "\t\ttry {"], [119, "\t\t\treader = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"UTF-8\"));"], [120, "\t\t\twhile ((currentLine = reader.readLine()) != null) {"], [121, "\t\t\t\t// Rework comment line so it becomes a normal value in the config file."], [122, "\t\t\t\t// This workaround allows the comment to be saved in the Yaml file."], [123, "\t\t\t\tif (currentLine.startsWith(\"#\")) {"], [124, "\t\t\t\t\taddLine = currentLine.replace(\":\", \"_COLON_\").replace(\"|\", \"_VERT_\").replace(\"-\", \"_HYPHEN_\")"], [125, "\t\t\t\t\t\t\t.replaceFirst(\"#\", plugin.getDescription().getName() + \"_COMMENT_\" + commentNum + \": \");"], [126, "\t\t\t\t\twhole.append(addLine + \"\\n\");"], [127, "\t\t\t\t\tcommentNum++;"], [128, "\t\t\t\t} else {"], [129, "\t\t\t\t\twhole.append(currentLine + \"\\n\");"], [130, "\t\t\t\t}"], [133, "\t\t\tString config = whole.toString();"], [134, "\t\t\tStringReader configStream = new StringReader(config);"], [135, "\t\t\treturn configStream;"], [136, "\t\t} catch (IOException e) {"], [137, "\t\t\tthrow e;"], [138, "\t\t} finally {"], [139, "\t\t\tif (reader != null)"], [140, "\t\t\t\treader.close();"], [141, "\t\t}"], [158, "\t\tBufferedReader reader = null;"], [159, "\t\ttry {"], [160, "\t\t\treader = new BufferedReader(new FileReader(file));"], [161, "\t\t\twhile ((currentLine = reader.readLine()) != null)"], [162, "\t\t\t\tif (currentLine.startsWith(\"#\"))"], [163, "\t\t\t\t\tcomments++;"], [164, ""], [165, "\t\t\treturn comments;"], [166, "\t\t} catch (IOException e) {"], [167, "\t\t\tthrow e;"], [168, "\t\t} finally {"], [169, "\t\t\tif (reader != null)"], [170, "\t\t\t\treader.close();"], [171, "\t\t}"], [229, "\t\tBufferedWriter writer = null;"], [230, "\t\ttry {"], [231, "\t\t\twriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), \"UTF-8\"));"], [232, "\t\t\twriter.write(configuration);"], [233, "\t\t\twriter.flush();"], [234, "\t\t} catch (IOException e) {"], [235, "\t\t\tthrow e;"], [236, "\t\t} finally {"], [237, "\t\t\tif (writer != null)"], [238, "\t\t\t\twriter.close();"], [239, "\t\t}"], [251, "\t\tOutputStream out = null;"], [252, "\t\ttry {"], [253, "\t\t\tout = new FileOutputStream(file);"], [254, "\t\t\tint length;"], [255, "\t\t\tbyte[] buf = new byte[1024];"], [257, "\t\t\twhile ((length = resource.read(buf)) > 0)"], [258, "\t\t\t\tout.write(buf, 0, length);"], [260, "\t\t} catch (IOException e) {"], [261, "\t\t\tthrow e;"], [262, "\t\t} finally {"], [263, "\t\t\tif (out != null)"], [264, "\t\t\t\tout.close();"], [265, "\t\t\tresource.close();"], [266, "\t\t}"], [284, "\t\t\tFileInputStream inStream = null;"], [285, "\t\t\tFileOutputStream outStream = null;"], [286, "\t\t\ttry {"], [287, "\t\t\t\tinStream = new FileInputStream(original);"], [288, "\t\t\t\toutStream = new FileOutputStream(backup);"], [289, ""], [290, "\t\t\t\tbyte[] buffer = new byte[1024];"], [291, ""], [292, "\t\t\t\tint length;"], [293, "\t\t\t\twhile ((length = inStream.read(buffer)) > 0) {"], [294, "\t\t\t\t\toutStream.write(buffer, 0, length);"], [295, "\t\t\t\t}"], [296, "\t\t\t} catch (IOException e) {"], [297, "\t\t\t\tthrow e;"], [298, "\t\t\t} finally {"], [299, "\t\t\t\tif (inStream != null)"], [300, "\t\t\t\t\tinStream.close();"], [301, "\t\t\t\tif (outStream != null)"], [302, "\t\t\t\t\toutStream.close();"]], "deleted": [[16, ""], [97, "\t\tif (resource != null)"], [98, "\t\t\tif (!resource.isEmpty())"], [99, "\t\t\t\tthis.copyResource(plugin.getResource(resource), file);"], [119, "\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"UTF-8\"));"], [120, ""], [121, "\t\twhile ((currentLine = reader.readLine()) != null) {"], [122, "\t\t\t// Rework comment line so it becomes a normal value in the config file."], [123, "\t\t\t// This workaround allows the comment to be saved in the Yaml file."], [124, "\t\t\tif (currentLine.startsWith(\"#\")) {"], [125, "\t\t\t\taddLine = currentLine.replace(\":\", \"_COLON_\").replace(\"|\", \"_VERT_\").replace(\"-\", \"_HYPHEN_\")"], [126, "\t\t\t\t\t\t.replaceFirst(\"#\", plugin.getDescription().getName() + \"_COMMENT_\" + commentNum + \": \");"], [127, "\t\t\t\twhole.append(addLine + \"\\n\");"], [128, "\t\t\t\tcommentNum++;"], [129, "\t\t\t} else {"], [130, "\t\t\t\twhole.append(currentLine + \"\\n\");"], [132, "\t\t}"], [134, "\t\tString config = whole.toString();"], [135, "\t\tStringReader configStream = new StringReader(config);"], [136, ""], [137, "\t\treader.close();"], [138, "\t\treturn configStream;"], [155, "\t\tBufferedReader reader = new BufferedReader(new FileReader(file));"], [156, ""], [157, "\t\twhile ((currentLine = reader.readLine()) != null)"], [158, "\t\t\tif (currentLine.startsWith(\"#\"))"], [159, "\t\t\t\tcomments++;"], [160, ""], [161, "\t\treader.close();"], [162, "\t\treturn comments;"], [220, "\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), \"UTF-8\"));"], [221, "\t\twriter.write(configuration);"], [222, "\t\twriter.flush();"], [223, "\t\twriter.close();"], [224, ""], [236, "\t\tOutputStream out = new FileOutputStream(file);"], [237, ""], [238, "\t\tint length;"], [239, "\t\tbyte[] buf = new byte[1024];"], [241, "\t\twhile ((length = resource.read(buf)) > 0)"], [242, "\t\t\tout.write(buf, 0, length);"], [244, "\t\tout.close();"], [245, "\t\tresource.close();"], [263, "\t\t\tFileInputStream inStream = new FileInputStream(original);"], [264, "\t\t\tFileOutputStream outStream;"], [265, "\t\t\toutStream = new FileOutputStream(backup);"], [266, ""], [267, "\t\t\tbyte[] buffer = new byte[1024];"], [268, ""], [269, "\t\t\tint length;"], [270, "\t\t\twhile ((length = inStream.read(buffer)) > 0) {"], [271, "\t\t\t\toutStream.write(buffer, 0, length);"], [274, "\t\t\tif (inStream != null)"], [275, "\t\t\t\tinStream.close();"], [276, "\t\t\tif (outStream != null)"], [277, "\t\t\t\toutStream.close();"], [279, ""], [281, ""]]}, "num_lines_added": 83, "num_lines_removed": 58}