{"hash": "bb4a4a615cfb076e5f4d79b4594a5218fa22e951", "message": "#758 - Centralize all Forward header handling.\n\nSpring 5.1 is centralizing all Forward header handling. This moves critical bits into one location, making it easy to completely remove once we rebaseline against this version.\n\nAlso adds a test profile to ensure Spring 5.1 doesn't break anything.\n\nOriginal pull request: #717.", "file_num_lines": 179, "diff_parsed": {"added": [[18, "import static org.springframework.hateoas.mvc.ForwardedHeader.handleXForwardedSslHeader;"], [31, "import org.springframework.context.ApplicationContext;"], [310, "\tpublic static UriComponentsBuilder getBuilder() {"], [317, "\t\tServletUriComponentsBuilder builder = ServletUriComponentsBuilder.fromServletMapping(request);"], [319, "\t\t// Spring 5.1 can handle X-Forwarded-Ssl headers..."], [320, "\t\tif (isSpringAtLeast5_1()) {"], [321, "\t\t\treturn builder;"], [322, "\t\t} else {"], [323, "\t\t\treturn handleXForwardedSslHeader(request, builder);"], [324, "\t\t}"], [325, "\t}"], [327, "\t/**"], [328, "\t * Check if the current version of Spring Framework is 5.1 or higher."], [329, "\t *"], [330, "\t * @return"], [331, "\t */"], [332, "\tprivate static boolean isSpringAtLeast5_1() {"], [333, ""], [334, "\t\tString versionOfSpringFramework = ApplicationContext.class.getPackage().getImplementationVersion();"], [336, "\t\tString[] parts = versionOfSpringFramework.split(\"\\\\.\");"], [337, "\t\tint majorVersion = Integer.parseInt(parts[0]);"], [338, "\t\tint minorVersion = Integer.parseInt(parts[1]);"], [340, "\t\treturn (majorVersion >= 5 && minorVersion >= 1) || (majorVersion > 5);"], [375, "\t\tprivate final Map<String, UriTemplate> templates = new ConcurrentReferenceHashMap<>();"], [380, ""], [381, "\t\t\treturn templates.computeIfAbsent(mapping, UriTemplate::new);"]], "deleted": [[18, "import static org.springframework.util.StringUtils.*;"], [309, "\tpublic static UriComponentsBuilder getBuilder() {"], [316, "\t\tUriComponentsBuilder builder = ServletUriComponentsBuilder.fromServletMapping(request);"], [318, "\t\t// special case handling for X-Forwarded-Ssl:"], [319, "\t\t// apply it, but only if X-Forwarded-Proto is unset."], [321, "\t\tString forwardedSsl = request.getHeader(\"X-Forwarded-Ssl\");"], [322, "\t\tForwardedHeader forwarded = ForwardedHeader.of(request.getHeader(ForwardedHeader.NAME));"], [323, "\t\tString proto = hasText(forwarded.getProto()) ? forwarded.getProto() : request.getHeader(\"X-Forwarded-Proto\");"], [325, "\t\tif (!hasText(proto) && hasText(forwardedSsl) && forwardedSsl.equalsIgnoreCase(\"on\")) {"], [326, "\t\t\tbuilder.scheme(\"https\");"], [327, "\t\t}"], [329, "\t\treturn builder;"], [364, "\t\tprivate final Map<String, UriTemplate> templates = new ConcurrentReferenceHashMap<>();"], [369, ""], [370, "\t\t\treturn templates.computeIfAbsent(mapping, UriTemplate::new);"]]}, "num_lines_added": 26, "num_lines_removed": 15}