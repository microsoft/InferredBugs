{"hash": "73dc3481846fdc0c97944c6a7c6ce0cef17ee938", "message": "BOOKKEEPER-72: Fix warnings issued by FindBugs (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1339691 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 172, "diff_parsed": {"added": [[81, "    synchronized public PubSubData getOrigSubData() {"], [101, "            synchronized(this) {"], [102, "                // For successful Subscribe requests, store this Channel locally"], [103, "                // and set it to not be readable initially."], [104, "                // This way we won't be delivering messages for this topic"], [105, "                // subscription until the client explicitly says so."], [106, "                subscribeChannel = channel;"], [107, "                subscribeChannel.setReadable(false);"], [108, "                // Store the original PubSubData used to create this successful"], [109, "                // Subscribe request."], [110, "                origSubData = pubSubData;"], [111, ""], [112, "                // Store the mapping for the TopicSubscriber to the Channel."], [113, "                // This is so we can control the starting and stopping of"], [114, "                // message deliveries from the server on that Channel. Store"], [115, "                // this only on a successful ack response from the server."], [116, "                TopicSubscriber topicSubscriber = new TopicSubscriber(pubSubData.topic, pubSubData.subscriberId);"], [117, "                responseHandler.getSubscriber().setChannelForTopic(topicSubscriber, channel);"], [118, "                // Lazily create the Set (from a concurrent hashmap) to keep track"], [119, "                // of outstanding Messages to be consumed by the client app. At this"], [120, "                // stage, delivery for that topic hasn't started yet so creation of"], [121, "                // this Set should be thread safe. We'll create the Set with an initial"], [122, "                // capacity equal to the configured parameter for the maximum number of"], [123, "                // outstanding messages to allow. The load factor will be set to"], [124, "                // 1.0f which means we'll only rehash and allocate more space if"], [125, "                // we ever exceed the initial capacity. That should be okay"], [126, "                // because when that happens, things are slow already and piling"], [127, "                // up on the client app side to consume messages."], [128, "                outstandingMsgSet = Collections.newSetFromMap("], [129, "                        new ConcurrentHashMap<Message,Boolean>("], [130, "                                responseHandler.getConfiguration().getMaximumOutstandingMessages(), 1.0f));"], [131, "            }"], [167, "        if (logger.isDebugEnabled()) {"], [168, "            logger.debug(\"Handling a Subscribe message in response: {}, topic: {}, subscriberId: {}\","], [169, "                    new Object[] { response, getOrigSubData().topic.toStringUtf8(),"], [170, "                                   getOrigSubData().subscriberId.toStringUtf8() });"], [171, "        }"], [307, "        if (logger.isDebugEnabled()) {"], [308, "            logger.debug(\"Setting the messageHandler for topic: {}, subscriberId: {}\","], [309, "                         getOrigSubData().topic.toStringUtf8(),"], [310, "                         getOrigSubData().subscriberId.toStringUtf8());"], [311, "        }"]], "deleted": [[81, "    public PubSubData getOrigSubData() {"], [101, "            // For successful Subscribe requests, store this Channel locally"], [102, "            // and set it to not be readable initially."], [103, "            // This way we won't be delivering messages for this topic"], [104, "            // subscription until the client explicitly says so."], [105, "            subscribeChannel = channel;"], [106, "            subscribeChannel.setReadable(false);"], [107, "            // Store the original PubSubData used to create this successful"], [108, "            // Subscribe request."], [109, "            origSubData = pubSubData;"], [110, "            // Store the mapping for the TopicSubscriber to the Channel."], [111, "            // This is so we can control the starting and stopping of"], [112, "            // message deliveries from the server on that Channel. Store"], [113, "            // this only on a successful ack response from the server."], [114, "            TopicSubscriber topicSubscriber = new TopicSubscriber(pubSubData.topic, pubSubData.subscriberId);"], [115, "            responseHandler.getSubscriber().setChannelForTopic(topicSubscriber, channel);"], [116, "            // Lazily create the Set (from a concurrent hashmap) to keep track"], [117, "            // of outstanding Messages to be consumed by the client app. At this"], [118, "            // stage, delivery for that topic hasn't started yet so creation of"], [119, "            // this Set should be thread safe. We'll create the Set with an initial"], [120, "            // capacity equal to the configured parameter for the maximum number of"], [121, "            // outstanding messages to allow. The load factor will be set to"], [122, "            // 1.0f which means we'll only rehash and allocate more space if"], [123, "            // we ever exceed the initial capacity. That should be okay"], [124, "            // because when that happens, things are slow already and piling"], [125, "            // up on the client app side to consume messages."], [126, ""], [127, "            outstandingMsgSet = Collections.newSetFromMap(new ConcurrentHashMap<Message,Boolean>("], [128, "                responseHandler.getConfiguration().getMaximumOutstandingMessages(), 1.0f));"], [129, ""], [165, "        if (logger.isDebugEnabled())"], [166, "            logger.debug(\"Handling a Subscribe message in response: \" + response + \", topic: \""], [167, "                         + origSubData.topic.toStringUtf8() + \", subscriberId: \" + origSubData.subscriberId.toStringUtf8());"], [303, "        if (logger.isDebugEnabled())"], [304, "            logger.debug(\"Setting the messageHandler for topic: \" + origSubData.topic.toStringUtf8()"], [305, "                         + \", subscriberId: \" + origSubData.subscriberId.toStringUtf8());"]]}, "num_lines_added": 42, "num_lines_removed": 36}