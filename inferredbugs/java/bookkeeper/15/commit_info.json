{"hash": "cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af", "message": "BOOKKEEPER-337: Add entry fails with MetadataVersionException when last ensemble has morethan one bookie failures (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1378023 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 559, "diff_parsed": {"added": [[655, "    void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {"], [662, "        final ArrayList<InetSocketAddress> newEnsemble = new ArrayList<InetSocketAddress>();"], [663, "        final long newEnsembleStartEntry = lastAddConfirmed + 1;"], [665, "        // avoid parallel ensemble changes to same ensemble."], [666, "        synchronized (metadata) {"], [667, "            try {"], [668, "                newBookie = bk.bookieWatcher"], [670, "            } catch (BKNotEnoughBookiesException e) {"], [671, "                LOG.error(\"Could not get additional bookie to \""], [672, "                        + \"remake ensemble, closing ledger: \" + ledgerId);"], [673, "                handleUnrecoverableErrorDuringAdd(e.getCode());"], [674, "                return;"], [675, "            }"], [676, ""], [677, "            newEnsemble.addAll(metadata.currentEnsemble);"], [678, "            newEnsemble.set(bookieIndex, newBookie);"], [679, ""], [680, "            if (LOG.isDebugEnabled()) {"], [681, "                LOG.debug(\"Changing ensemble from: \" + metadata.currentEnsemble"], [682, "                        + \" to: \" + newEnsemble + \" for ledger: \" + ledgerId"], [683, "                        + \" starting at entry: \" + (lastAddConfirmed + 1));"], [684, "            }"], [685, ""], [686, "            metadata.addEnsemble(newEnsembleStartEntry, newEnsemble);"], [689, "        EnsembleInfo ensembleInfo = new EnsembleInfo(newEnsemble, bookieIndex,"], [690, "                addr);"], [691, "        writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));"], [692, "    }"], [693, ""], [694, "    // Contains newly reformed ensemble, bookieIndex, failedBookieAddress"], [695, "    private static final class EnsembleInfo {"], [696, "        private final ArrayList<InetSocketAddress> newEnsemble;"], [697, "        private final int bookieIndex;"], [698, "        private final InetSocketAddress addr;"], [700, "        public EnsembleInfo(ArrayList<InetSocketAddress> newEnsemble,"], [701, "                int bookieIndex, InetSocketAddress addr) {"], [702, "            this.newEnsemble = newEnsemble;"], [703, "            this.bookieIndex = bookieIndex;"], [704, "            this.addr = addr;"], [706, "    }"], [708, "    /**"], [709, "     * Callback which is updating the ledgerMetadata in zk with the newly"], [710, "     * reformed ensemble. On MetadataVersionException, will reread latest"], [711, "     * ledgerMetadata and act upon."], [712, "     */"], [713, "    private final class ChangeEnsembleCb implements GenericCallback<Void> {"], [714, "        private final EnsembleInfo ensembleInfo;"], [716, "        ChangeEnsembleCb(EnsembleInfo ensembleInfo) {"], [717, "            this.ensembleInfo = ensembleInfo;"], [718, "        }"], [720, "        @Override"], [721, "        public void operationComplete(final int rc, Void result) {"], [723, "            bk.mainWorkerPool.submitOrdered(ledgerId, new SafeRunnable() {"], [724, "                @Override"], [725, "                public void safeRun() {"], [726, "                    if (rc == BKException.Code.MetadataVersionException) {"], [727, "                        rereadMetadata(new ReReadLedgerMetadataCb(rc,"], [728, "                                ensembleInfo));"], [729, "                        return;"], [730, "                    } else if (rc != BKException.Code.OK) {"], [731, "                        LOG.error(\"Could not persist ledger metadata while \""], [732, "                                + \"changing ensemble to: \""], [733, "                                + ensembleInfo.newEnsemble"], [734, "                                + \" , closing ledger\");"], [735, "                        handleUnrecoverableErrorDuringAdd(rc);"], [736, "                        return;"], [738, "                    // the failed bookie has been replaced"], [739, "                    unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);"], [740, "                }"], [741, "            });"], [742, "        }"], [743, "    };"], [744, ""], [745, "    /**"], [746, "     * Callback which is reading the ledgerMetadata present in zk. This will try"], [747, "     * to resolve the version conflicts."], [748, "     */"], [749, "    private final class ReReadLedgerMetadataCb implements"], [750, "            GenericCallback<LedgerMetadata> {"], [751, "        private final int rc;"], [752, "        private final EnsembleInfo ensembleInfo;"], [754, "        ReReadLedgerMetadataCb(int rc, EnsembleInfo ensembleInfo) {"], [755, "            this.rc = rc;"], [756, "            this.ensembleInfo = ensembleInfo;"], [757, "        }"], [758, ""], [759, "        @Override"], [760, "        public void operationComplete(int newrc, LedgerMetadata newMeta) {"], [761, "            if (newrc != BKException.Code.OK) {"], [762, "                LOG.error(\"Error reading new metadata from ledger \""], [763, "                        + \"after changing ensemble, code=\" + newrc);"], [764, "                handleUnrecoverableErrorDuringAdd(rc);"], [765, "            } else {"], [766, "                if (!resolveConflict(newMeta)) {"], [767, "                    LOG.error(\"Could not resolve ledger metadata conflict \""], [768, "                            + \"while changing ensemble to: \""], [769, "                            + ensembleInfo.newEnsemble"], [770, "                            + \", old meta data is \\n\""], [771, "                            + new String(metadata.serialize())"], [772, "                            + \"\\n, new meta data is \\n\""], [773, "                            + new String(newMeta.serialize())"], [774, "                            + \"\\n ,closing ledger\");"], [775, "                    handleUnrecoverableErrorDuringAdd(rc);"], [776, "                }"], [778, "        }"], [780, "        /**"], [781, "         * Resolving the version conflicts between local ledgerMetadata and zk"], [782, "         * ledgerMetadata. This will do the following:"], [783, "         * <ul>"], [784, "         * <li>"], [785, "         * check whether ledgerMetadata state matches of local and zk</li>"], [786, "         * <li>"], [787, "         * if the zk ledgerMetadata still contains the failed bookie, then"], [788, "         * update zookeeper with the newBookie otherwise send write request</li>"], [789, "         * </ul>"], [790, "         */"], [791, "        private boolean resolveConflict(LedgerMetadata newMeta) {"], [792, "            // close have changed, another client has opened"], [793, "            // the ledger, can't resolve this conflict."], [794, "            if (metadata.getState() != newMeta.getState()) {"], [795, "                return false;"], [796, "            }"], [797, "            // update znode version"], [798, "            metadata.setVersion(newMeta.getVersion());"], [799, "            // Resolve the conflicts if zk metadata still contains failed"], [800, "            // bookie."], [801, "            if (newMeta.currentEnsemble.get(ensembleInfo.bookieIndex).equals("], [802, "                    ensembleInfo.addr)) {"], [803, "                // Update ledger metadata in zk, if in-memory metadata doesn't"], [804, "                // contains the failed bookie."], [805, "                if (!metadata.currentEnsemble.get(ensembleInfo.bookieIndex)"], [806, "                        .equals(ensembleInfo.addr)) {"], [807, "                    LOG.info(\"Resolve ledger metadata conflict \""], [808, "                            + \"while changing ensemble to: \""], [809, "                            + ensembleInfo.newEnsemble"], [810, "                            + \", old meta data is \\n\""], [811, "                            + new String(metadata.serialize())"], [812, "                            + \"\\n, new meta data is \\n\""], [813, "                            + new String(newMeta.serialize()));"], [814, "                    writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));"], [815, "                }"], [816, "            } else {"], [817, "                // the failed bookie has been replaced"], [818, "                unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);"], [819, "            }"], [820, "            return true;"], [821, "        }"], [822, ""], [823, "    };"], [824, ""], [825, "    private void unsetSuccessAndSendWriteRequest(final int bookieIndex) {"], [826, "        for (PendingAddOp pendingAddOp : pendingAddOps) {"], [827, "            pendingAddOp.unsetSuccessAndSendWriteRequest(bookieIndex);"], [828, "        }"]], "deleted": [[24, "import java.io.IOException;"], [656, "    void handleBookieFailure(InetSocketAddress addr, final int bookieIndex) {"], [664, "        try {"], [665, "            newBookie = bk.bookieWatcher"], [667, "        } catch (BKNotEnoughBookiesException e) {"], [668, "            LOG"], [669, "            .error(\"Could not get additional bookie to remake ensemble, closing ledger: \""], [670, "                   + ledgerId);"], [671, "            handleUnrecoverableErrorDuringAdd(e.getCode());"], [672, "            return;"], [675, "        final ArrayList<InetSocketAddress> newEnsemble = new ArrayList<InetSocketAddress>("], [676, "            metadata.currentEnsemble);"], [677, "        newEnsemble.set(bookieIndex, newBookie);"], [679, "        if (LOG.isDebugEnabled()) {"], [680, "            LOG.debug(\"Changing ensemble from: \" + metadata.currentEnsemble + \" to: \""], [681, "                      + newEnsemble + \" for ledger: \" + ledgerId + \" starting at entry: \""], [682, "                      + (lastAddConfirmed + 1));"], [685, "        final long newEnsembleStartEntry = lastAddConfirmed + 1;"], [686, "        metadata.addEnsemble(newEnsembleStartEntry, newEnsemble);"], [688, "        final class ChangeEnsembleCb implements GenericCallback<Void> {"], [689, "            @Override"], [690, "            public void operationComplete(final int rc, Void result) {"], [692, "                bk.mainWorkerPool.submitOrdered(ledgerId, new SafeRunnable() {"], [693, "                    @Override"], [694, "                    public void safeRun() {"], [695, "                        if (rc == BKException.Code.MetadataVersionException) {"], [696, "                            rereadMetadata(new GenericCallback<LedgerMetadata>() {"], [697, "                                @Override"], [698, "                                public void operationComplete(int newrc, LedgerMetadata newMeta) {"], [699, "                                    if (newrc != BKException.Code.OK) {"], [700, "                                        LOG.error(\"Error reading new metadata from ledger after changing ensemble, code=\" + newrc);"], [701, "                                        handleUnrecoverableErrorDuringAdd(rc);"], [702, "                                    } else {"], [703, "                                        // a new ensemble is added only when the start entry is larger than zero"], [704, "                                        if (newEnsembleStartEntry > 0) {"], [705, "                                            metadata.getEnsembles().remove(newEnsembleStartEntry);"], [706, "                                        }"], [707, "                                        if (metadata.resolveConflict(newMeta)) {"], [708, "                                            metadata.addEnsemble(newEnsembleStartEntry, newEnsemble);"], [709, "                                            writeLedgerConfig(new ChangeEnsembleCb());"], [710, "                                            return;"], [711, "                                        } else {"], [712, "                                            LOG.error(\"Could not resolve ledger metadata conflict while changing ensemble to: \""], [713, "                                                      + newEnsemble + \", old meta data is \\n\" + new String(metadata.serialize())"], [714, "                                                      + \"\\n, new meta data is \\n\" + new String(newMeta.serialize()) + \"\\n ,closing ledger\");"], [715, "                                            handleUnrecoverableErrorDuringAdd(rc);"], [716, "                                        }"], [717, "                                    }"], [718, "                                }"], [719, "                            });"], [720, "                            return;"], [721, "                        } else if (rc != BKException.Code.OK) {"], [722, "                            LOG.error(\"Could not persist ledger metadata while changing ensemble to: \""], [723, "                                    + newEnsemble + \" , closing ledger\");"], [724, "                            handleUnrecoverableErrorDuringAdd(rc);"], [725, "                            return;"], [726, "                        }"], [728, "                        for (PendingAddOp pendingAddOp : pendingAddOps) {"], [729, "                            pendingAddOp.unsetSuccessAndSendWriteRequest(bookieIndex);"], [730, "                        }"], [732, "                });"], [735, "        };"], [737, "        writeLedgerConfig(new ChangeEnsembleCb());"]]}, "num_lines_added": 154, "num_lines_removed": 63}