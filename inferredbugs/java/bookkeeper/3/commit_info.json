{"hash": "f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68", "message": "BOOKKEEPER-188: Garbage collection code is in the wrong place (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1303286 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 323, "diff_parsed": {"added": [[200, "                entryLogMetaMap = extractMetaFromEntryLogs(entryLogMetaMap);"], [381, ""], [382, "    /**"], [383, "     * Records the total size, remaining size and the set of ledgers that comprise a entry log."], [384, "     */"], [385, "    static class EntryLogMetadata {"], [386, "        long entryLogId;"], [387, "        long totalSize;"], [388, "        long remainingSize;"], [389, "        ConcurrentHashMap<Long, Long> ledgersMap;"], [390, ""], [391, "        public EntryLogMetadata(long logId) {"], [392, "            this.entryLogId = logId;"], [393, ""], [394, "            totalSize = remainingSize = 0;"], [395, "            ledgersMap = new ConcurrentHashMap<Long, Long>();"], [396, "        }"], [397, ""], [398, "        public void addLedgerSize(long ledgerId, long size) {"], [399, "            totalSize += size;"], [400, "            remainingSize += size;"], [401, "            Long ledgerSize = ledgersMap.get(ledgerId);"], [402, "            if (null == ledgerSize) {"], [403, "                ledgerSize = 0L;"], [404, "            }"], [405, "            ledgerSize += size;"], [406, "            ledgersMap.put(ledgerId, ledgerSize);"], [407, "        }"], [408, ""], [409, "        public void removeLedger(long ledgerId) {"], [410, "            Long size = ledgersMap.remove(ledgerId);"], [411, "            if (null == size) {"], [412, "                return;"], [413, "            }"], [414, "            remainingSize -= size;"], [415, "        }"], [416, ""], [417, "        public boolean containsLedger(long ledgerId) {"], [418, "            return ledgersMap.containsKey(ledgerId);"], [419, "        }"], [420, ""], [421, "        public double getUsage() {"], [422, "            if (totalSize == 0L) {"], [423, "                return 0.0f;"], [424, "            }"], [425, "            return (double)remainingSize / totalSize;"], [426, "        }"], [427, ""], [428, "        public boolean isEmpty() {"], [429, "            return ledgersMap.isEmpty();"], [430, "        }"], [431, ""], [432, "        @Override"], [433, "        public String toString() {"], [434, "            StringBuilder sb = new StringBuilder();"], [435, "            sb.append(\"{ totalSize = \").append(totalSize).append(\", remainingSize = \")"], [436, "              .append(remainingSize).append(\", ledgersMap = \").append(ledgersMap).append(\" }\");"], [437, "            return sb.toString();"], [438, "        }"], [439, "    }"], [440, ""], [441, "    /**"], [442, "     * A scanner used to extract entry log meta from entry log files."], [443, "     */"], [444, "    static class ExtractionScanner implements EntryLogScanner {"], [445, "        EntryLogMetadata meta;"], [446, ""], [447, "        public ExtractionScanner(EntryLogMetadata meta) {"], [448, "            this.meta = meta;"], [449, "        }"], [450, ""], [451, "        @Override"], [452, "        public boolean accept(long ledgerId) {"], [453, "            return true;"], [454, "        }"], [455, "        @Override"], [456, "        public void process(long ledgerId, ByteBuffer entry) {"], [457, "            // add new entry size of a ledger to entry log meta"], [458, "            meta.addLedgerSize(ledgerId, entry.limit() + 4);"], [459, "        }"], [460, "    }"], [461, ""], [462, "    /**"], [463, "     * Method to read in all of the entry logs (those that we haven't done so yet),"], [464, "     * and find the set of ledger ID's that make up each entry log file."], [465, "     *"], [466, "     * @param entryLogMetaMap"], [467, "     *          Existing EntryLogs to Meta"], [468, "     * @throws IOException"], [469, "     */"], [470, "    protected Map<Long, EntryLogMetadata> extractMetaFromEntryLogs(Map<Long, EntryLogMetadata> entryLogMetaMap)"], [471, "            throws IOException {"], [472, "        // Extract it for every entry log except for the current one."], [473, "        // Entry Log ID's are just a long value that starts at 0 and increments"], [474, "        // by 1 when the log fills up and we roll to a new one."], [475, "        long curLogId = entryLogger.logId;"], [476, "        for (long entryLogId = 0; entryLogId < curLogId; entryLogId++) {"], [477, "            // Comb the current entry log file if it has not already been extracted."], [478, "            if (entryLogMetaMap.containsKey(entryLogId)) {"], [479, "                continue;"], [480, "            }"], [481, "            LOG.info(\"Extracting entry log meta from entryLogId: \" + entryLogId);"], [482, ""], [483, "            // Read through the entry log file and extract the entry log meta"], [484, "            entryLogMetaMap.put(entryLogId,"], [485, "                                extractMetaFromEntryLog(entryLogger, entryLogId));"], [486, "        }"], [487, "        return entryLogMetaMap;"], [488, "    }"], [489, ""], [490, "    static EntryLogMetadata extractMetaFromEntryLog(EntryLogger entryLogger, long entryLogId)"], [491, "            throws IOException {"], [492, "        EntryLogMetadata entryLogMeta = new EntryLogMetadata(entryLogId);"], [493, "        ExtractionScanner scanner = new ExtractionScanner(entryLogMeta);"], [494, "        try {"], [495, "            // Read through the entry log file and extract the entry log meta"], [496, "            entryLogger.scanEntryLog(entryLogId, scanner);"], [497, "            LOG.info(\"Retrieved entry log meta data entryLogId: \""], [498, "                     + entryLogId + \", meta: \" + entryLogMeta);"], [499, "        } catch(IOException e) {"], [500, "            LOG.warn(\"Premature exception when processing \" + entryLogId +"], [501, "                     \"recovery will take care of the problem\", e);"], [502, "        }"], [503, ""], [504, "        return entryLogMeta;"], [505, "    }"]], "deleted": [[37, "import org.apache.bookkeeper.bookie.EntryLogger.EntryLogMetadata;"], [201, "                entryLogMetaMap = entryLogger.extractMetaFromEntryLogs(entryLogMetaMap);"]]}, "num_lines_added": 126, "num_lines_removed": 2}