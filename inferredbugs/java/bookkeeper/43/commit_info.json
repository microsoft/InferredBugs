{"hash": "b625fdc27a429341143e204338cf5deab3188e9e", "message": "BOOKKEEPER-355: Ledger recovery will mark ledger as closed with -1, in case of slow bookie is added to ensemble during recovery add (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1429756 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 564, "diff_parsed": {"added": [[648, "    ArrayList<InetSocketAddress> replaceBookieInMetadata(final InetSocketAddress addr, final int bookieIndex)"], [649, "            throws BKException.BKNotEnoughBookiesException {"], [651, "        LOG.info(\"Handling failure of bookie: {} index: {}\", addr, bookieIndex);"], [657, "            newBookie = bk.bookieWatcher.getAdditionalBookie(metadata.currentEnsemble);"], [658, ""], [659, "            newEnsemble.addAll(metadata.currentEnsemble);"], [660, "            newEnsemble.set(bookieIndex, newBookie);"], [661, ""], [662, "            if (LOG.isDebugEnabled()) {"], [663, "                LOG.debug(\"Changing ensemble from: \" + metadata.currentEnsemble"], [664, "                        + \" to: \" + newEnsemble + \" for ledger: \" + ledgerId"], [665, "                        + \" starting at entry: \" + (lastAddConfirmed + 1));"], [666, "            }"], [667, ""], [668, "            metadata.addEnsemble(newEnsembleStartEntry, newEnsemble);"], [669, "        }"], [670, "        return newEnsemble;"], [671, "    }"], [672, ""], [673, "    void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {"], [674, "        blockAddCompletions.incrementAndGet();"], [675, ""], [676, "        synchronized (metadata) {"], [686, "                ArrayList<InetSocketAddress> newEnsemble = replaceBookieInMetadata(addr, bookieIndex);"], [687, ""], [688, "                EnsembleInfo ensembleInfo = new EnsembleInfo(newEnsemble, bookieIndex,"], [689, "                                                             addr);"], [690, "                writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));"], [691, "            } catch (BKException.BKNotEnoughBookiesException e) {"], [693, "                          + \"remake ensemble, closing ledger: \" + ledgerId);"], [829, "    void unsetSuccessAndSendWriteRequest(final int bookieIndex) {"]], "deleted": [[648, "    void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {"], [650, ""], [651, "        LOG.debug(\"Handling failure of bookie: {} index: {}\", addr, bookieIndex);"], [653, "        blockAddCompletions.incrementAndGet();"], [667, "                newBookie = bk.bookieWatcher"], [668, "                        .getAdditionalBookie(metadata.currentEnsemble);"], [669, "            } catch (BKNotEnoughBookiesException e) {"], [671, "                        + \"remake ensemble, closing ledger: \" + ledgerId);"], [675, ""], [676, "            newEnsemble.addAll(metadata.currentEnsemble);"], [677, "            newEnsemble.set(bookieIndex, newBookie);"], [678, ""], [679, "            if (LOG.isDebugEnabled()) {"], [680, "                LOG.debug(\"Changing ensemble from: \" + metadata.currentEnsemble"], [681, "                        + \" to: \" + newEnsemble + \" for ledger: \" + ledgerId"], [682, "                        + \" starting at entry: \" + (lastAddConfirmed + 1));"], [683, "            }"], [684, ""], [685, "            metadata.addEnsemble(newEnsembleStartEntry, newEnsemble);"], [687, ""], [688, "        EnsembleInfo ensembleInfo = new EnsembleInfo(newEnsemble, bookieIndex,"], [689, "                addr);"], [690, "        writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));"], [822, "    private void unsetSuccessAndSendWriteRequest(final int bookieIndex) {"]]}, "num_lines_added": 31, "num_lines_removed": 24}