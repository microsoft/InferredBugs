    public void handleSubscribeMessage(PubSubResponse response) {
        if (logger.isDebugEnabled()) {
            logger.debug("Handling a Subscribe message in response: {}, topic: {}, subscriberId: {}",
                    new Object[] { response, getOrigSubData().topic.toStringUtf8(),
                                   getOrigSubData().subscriberId.toStringUtf8() });
        }
        Message message = response.getMessage();

        synchronized (this) {
            // Consume the message asynchronously that the client is subscribed
            // to. Do this only if delivery for the subscription has started and
            // a MessageHandler has been registered for the TopicSubscriber.
            if (messageHandler != null) {
                asyncMessageConsume(message);
            } else {
                // MessageHandler has not yet been registered so queue up these
                // messages for the Topic Subscription. Make the initial lazy
                // creation of the message queue thread safe just so we don't
                // run into a race condition where two simultaneous threads process
                // a received message and both try to create a new instance of
                // the message queue. Performance overhead should be okay
                // because the delivery of the topic has not even started yet
                // so these messages are not consumed and just buffered up here.
                if (subscribeMsgQueue == null)
                    subscribeMsgQueue = new LinkedList<Message>();
                if (logger.isDebugEnabled())
                    logger
                    .debug("Message has arrived but Subscribe channel does not have a registered MessageHandler yet so queueing up the message: "
                           + message);
                subscribeMsgQueue.add(message);
            }
        }
    }