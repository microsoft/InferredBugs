{"hash": "7c1793d2979b01062682b70687839a978bf65c4c", "message": "BOOKKEEPER-530: data might be lost during compaction. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1431378 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 380, "diff_parsed": {"added": [[33, "import java.util.concurrent.atomic.AtomicInteger;"], [35, "import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;"], [51, "    private static final int COMPACTION_MAX_OUTSTANDING_REQUESTS = 1000;"], [74, "    final SafeEntryAdder safeEntryAdder;"], [92, ""], [93, "    /**"], [94, "     * Interface for adding entries. When the write callback is triggered, the"], [95, "     * entry must be guaranteed to be presisted."], [96, "     */"], [97, "    interface SafeEntryAdder {"], [98, "        public void safeAddEntry(long ledgerId, ByteBuffer buffer, GenericCallback<Void> cb);"], [99, "    }"], [100, ""], [106, "        Object completionLock = new Object();"], [107, "        AtomicInteger outstandingRequests = new AtomicInteger(0);"], [108, "        AtomicBoolean allSuccessful = new AtomicBoolean(true);"], [116, "            return meta.containsLedger(ledgerId);"], [120, "        public void process(final long ledgerId, long offset, ByteBuffer entry)"], [122, "            if (!allSuccessful.get()) {"], [123, "                return;"], [124, "            }"], [125, ""], [126, "            outstandingRequests.incrementAndGet();"], [127, "            synchronized (completionLock) {"], [128, "                while (outstandingRequests.get() >= COMPACTION_MAX_OUTSTANDING_REQUESTS) {"], [129, "                    try {"], [130, "                        completionLock.wait();"], [131, "                    } catch (InterruptedException ie) {"], [132, "                        LOG.error(\"Interrupted while waiting to re-add entry\", ie);"], [133, "                        Thread.currentThread().interrupt();"], [134, "                        throw new IOException(\"Interrupted while waiting to re-add entry\", ie);"], [135, "                    }"], [136, "                }"], [137, "            }"], [138, "            safeEntryAdder.safeAddEntry(ledgerId, entry, new GenericCallback<Void>() {"], [139, "                    @Override"], [140, "                    public void operationComplete(int rc, Void result) {"], [141, "                        if (rc != BookieException.Code.OK) {"], [142, "                            LOG.error(\"Error {} re-adding entry for ledger {})\","], [143, "                                      rc, ledgerId);"], [144, "                            allSuccessful.set(false);"], [145, "                        }"], [146, "                        synchronized(completionLock) {"], [147, "                            outstandingRequests.decrementAndGet();"], [148, "                            completionLock.notifyAll();"], [149, "                        }"], [150, "                    }"], [151, "                });"], [152, "        }"], [153, ""], [154, "        void awaitComplete() throws InterruptedException, IOException {"], [155, "            synchronized(completionLock) {"], [156, "                while (outstandingRequests.get() > 0) {"], [157, "                    completionLock.wait();"], [158, "                }"], [159, "                if (allSuccessful.get() == false) {"], [160, "                    throw new IOException(\"Couldn't re-add all entries\");"], [161, "                }"], [162, "            }"], [178, "                                  SafeEntryAdder safeEntryAdder,"], [186, "        this.safeEntryAdder = safeEntryAdder;"], [423, "            CompactionScanner scanner = new CompactionScanner(entryLogMeta);"], [424, "            entryLogger.scanEntryLog(entryLogId, scanner);"], [425, "            scanner.awaitComplete();"], [430, "        } catch (InterruptedException ie) {"], [431, "            Thread.currentThread().interrupt();"], [432, "            LOG.warn(\"Interrupted while compacting\", ie);"]], "deleted": [[49, ""], [72, "    final EntryLogScanner scanner;"], [102, "            return meta.containsLedger(ledgerId) && scanner.accept(ledgerId);"], [106, "        public void process(long ledgerId, long offset, ByteBuffer entry)"], [108, "            scanner.process(ledgerId, offset, entry);"], [124, "                                  EntryLogScanner scanner,"], [132, "        this.scanner = scanner;"], [369, "            entryLogger.scanEntryLog(entryLogId, new CompactionScanner(entryLogMeta));"]]}, "num_lines_added": 67, "num_lines_removed": 8}