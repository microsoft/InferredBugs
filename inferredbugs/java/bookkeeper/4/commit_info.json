{"hash": "48304c7c07513a15d26cb61f311c9f4b998fd8fc", "message": "BOOKKEEPER-190: Add entries would fail when number of open ledgers reaches more than openFileLimit. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1306839 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 584, "diff_parsed": {"added": [[241, "                evictFileInfoIfNecessary();"], [367, "                        LOG.warn(\"Count cannot possibly be zero!\");"], [375, "                LOG.warn(\"Nothing to write, but there were entries!\");"], [456, "                    while (map == null || map.isEmpty()) {"], [458, "                        if (cleanLedgers.isEmpty()) {"], [459, "                            continue outerLoop;"], [460, "                        }"], [461, "                        cleanLedger = cleanLedgers.getFirst();"], [462, "                        map = pages.get(cleanLedger);"], [468, "                            // no clean page found in this ledger"], [469, "                            cleanLedgers.removeFirst();"], [586, ""], [587, "        // remove pages first to avoid page flushed when deleting file info"], [588, "        synchronized(this) {"], [589, "            pages.remove(ledgerId);"], [590, "        }"], [592, "        FileInfo fi = null;"], [593, "        try {"], [594, "            fi = getFileInfo(ledgerId, null);"], [595, "            fi.delete();"], [596, "            fi.close(false);"], [597, "        } finally {"], [598, "            // should release use count"], [599, "            // otherwise the file channel would not be closed."], [600, "            if (null != fi) {"], [601, "                fi.release();"], [602, "            }"], [603, "        }"], [644, "                evictFileInfoIfNecessary();"], [655, "    // evict file info if necessary"], [656, "    private void evictFileInfoIfNecessary() throws IOException {"], [657, "        if (openLedgers.size() > openFileLimit) {"], [658, "            long ledgerToRemove = openLedgers.removeFirst();"], [659, "            LOG.info(\"Ledger {} is evicted from file info cache.\","], [660, "                     ledgerToRemove);"], [661, "            fileInfoCache.remove(ledgerToRemove).close(true);"], [662, "        }"], [663, "    }"], [664, ""], [667, "        FileInfo fi = null;"], [668, "        try {"], [669, "            fi = getFileInfo(ledgerId, masterKey);"], [670, "        } finally {"], [671, "            if (null != fi) {"], [672, "                fi.release();"], [673, "            }"], [674, "        }"]], "deleted": [[241, "                if (openLedgers.size() > openFileLimit) {"], [242, "                    fileInfoCache.remove(openLedgers.removeFirst()).close();"], [243, "                }"], [369, "                        System.out.println(\"Count cannot possibly be zero!\");"], [377, "                System.out.println(\"Nothing to write, but there were entries!\");"], [403, "            //System.out.println(\"Count is zero!\");"], [420, "            //System.out.println(\"Wrote \" + rc + \" to \" + ledger);"], [460, "                    if (map == null || map.isEmpty()) {"], [462, "                        continue;"], [585, "        FileInfo fi = getFileInfo(ledgerId, null);"], [586, "        fi.delete();"], [587, "        fi.close();"], [594, "        synchronized(this) {"], [595, "            pages.remove(ledgerId);"], [596, "        }"], [631, "                if (openLedgers.size() > openFileLimit) {"], [632, "                    fileInfoCache.remove(openLedgers.removeFirst()).close();"], [633, "                }"], [646, "        getFileInfo(ledgerId, masterKey);"]]}, "num_lines_added": 47, "num_lines_removed": 19}