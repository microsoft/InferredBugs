{"hash": "5a3b29d05abd71c6e5d1b3045abafd434db15f24", "message": "BOOKKEEPER-152: Can't recover a ledger whose current ensemble contain failed bookie. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1243539 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 89, "diff_parsed": {"added": [[26, "import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;"], [46, "class LedgerRecoveryOp implements ReadCallback, AddCallback {"], [64, "        ReadLastConfirmedOp rlcop = new ReadLastConfirmedOp(lh,"], [65, "                new ReadLastConfirmedOp.LastConfirmedDataCallback() {"], [66, "                public void readLastConfirmedDataComplete(int rc, RecoveryData data) {"], [67, "                    if (rc == BKException.Code.OK) {"], [68, "                        lh.lastAddPushed = lh.lastAddConfirmed = data.lastAddConfirmed;"], [69, "                        lh.length = data.length;"], [70, "                        doRecoveryRead();"], [71, "                    } else {"], [72, "                        cb.operationComplete(BKException.Code.ReadException, null);"], [73, "                    }"], [74, "                }"], [75, "                });"], [76, ""], [77, "        /**"], [82, "        rlcop.initiateWithFencing();"], [121, "                        LOG.debug(\"After closing length is: \" + lh.getLength());"], [123, "                }"]], "deleted": [[30, "import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;"], [46, "class LedgerRecoveryOp implements ReadEntryCallback, ReadCallback, AddCallback {"], [64, "        /**"], [69, "        int flags = BookieProtocol.FLAG_DO_FENCING;"], [70, "        for (int i = 0; i < lh.metadata.currentEnsemble.size(); i++) {"], [71, "            lh.bk.bookieClient.readEntry(lh.metadata.currentEnsemble.get(i), lh.ledgerId,"], [72, "                                         BookieProtocol.LAST_ADD_CONFIRMED, this, i, flags);"], [73, "        }"], [74, "    }"], [75, ""], [76, "    public synchronized void readEntryComplete(final int rc, final long ledgerId, final long entryId,"], [77, "            final ChannelBuffer buffer, final Object ctx) {"], [78, ""], [79, "        // Already proceeding with recovery, nothing to do"], [80, "        if (proceedingWithRecovery) {"], [81, "            return;"], [82, "        }"], [83, ""], [84, "        int bookieIndex = (Integer) ctx;"], [85, ""], [86, "        numResponsesPending--;"], [87, ""], [88, "        boolean heardValidResponse = false;"], [89, ""], [90, "        if (rc == BKException.Code.OK) {"], [91, "            try {"], [92, "                RecoveryData recoveryData = lh.macManager.verifyDigestAndReturnLastConfirmed(buffer);"], [93, "                maxAddConfirmed = Math.max(maxAddConfirmed, recoveryData.lastAddConfirmed);"], [94, "                maxAddPushed = Math.max(maxAddPushed, recoveryData.entryId);"], [95, "                heardValidResponse = true;"], [96, "            } catch (BKDigestMatchException e) {"], [97, "                // Too bad, this bookie didnt give us a valid answer, we"], [98, "                // still might be able to recover though so continue"], [99, "                LOG.error(\"Mac mismatch while reading last entry from bookie: \""], [100, "                          + lh.metadata.currentEnsemble.get(bookieIndex));"], [101, "            }"], [102, "        }"], [103, ""], [104, "        if (rc == BKException.Code.NoSuchLedgerExistsException || rc == BKException.Code.NoSuchEntryException) {"], [105, "            // this still counts as a valid response, e.g., if the"], [106, "            // client"], [107, "            // crashed without writing any entry"], [108, "            heardValidResponse = true;"], [109, "        }"], [110, ""], [111, "        // other return codes dont count as valid responses"], [112, "        if (heardValidResponse && lh.distributionSchedule.canProceedWithRecovery(bookieIndex)) {"], [113, "            proceedingWithRecovery = true;"], [114, "            lh.lastAddPushed = lh.lastAddConfirmed = maxAddConfirmed;"], [115, "            lh.length = maxLength;"], [116, "            doRecoveryRead();"], [117, "            return;"], [118, "        }"], [119, ""], [120, "        if (numResponsesPending == 0) {"], [121, "            // Have got all responses back but was still not enough to"], [122, "            // start"], [123, "            // recovery, just fail the operation"], [124, "            LOG.error(\"While recovering ledger: \" + ledgerId + \" did not hear success responses from all quorums\");"], [125, "            cb.operationComplete(BKException.Code.LedgerRecoveryException, null);"], [126, "        }"], [127, ""], [166, "                        LOG.debug(\"After closing length is: \" + lh.getLength());"], [168, "                }"], [169, ""]]}, "num_lines_added": 19, "num_lines_removed": 65}