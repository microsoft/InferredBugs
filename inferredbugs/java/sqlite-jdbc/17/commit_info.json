{"hash": "c7c5604bcc584460268abc9a64df2953fca788d3", "message": "Fix some tests (#377)\n\n* BusyHandlerTest should now be deterministic.\r\n* Removed BusyHandlerTest.testInterrupt as it probably didn't test\r\n  what it was supposed to. The other two tests should be enough.\r\n  (The \"expected\" SQLException was a \"query does not return ResultSet\"\r\n  error because of executeQuery for insert instead of execute.)\r\n* More verification in SQLiteJDBCLoaderTest.\r\n* Make tests faster (run all tests in less than 2s instead of 20s).", "file_num_lines": 133, "diff_parsed": {"added": [[11, "import java.util.concurrent.CountDownLatch;"], [12, ""], [36, "        private final CountDownLatch lockedLatch = new CountDownLatch(1);"], [37, "        private final CountDownLatch completeLatch = new CountDownLatch(1);"], [41, "            Function.create(conn, \"wait_for_latch\", new Function() {"], [42, "                @Override"], [43, "                protected void xFunc() throws SQLException {"], [44, "                    lockedLatch.countDown();"], [45, "                    try {"], [46, "                        completeLatch.await();"], [47, "                    } catch (InterruptedException e) {"], [48, "                        throw new SQLException(\"Interrupted\");"], [49, "                    }"], [50, "                    result(100);"], [51, "                }"], [52, "            });"], [60, "                // Generate some work for the sqlite vm"], [61, "                stat.executeUpdate(\"drop table if exists foo;\");"], [62, "                stat.executeUpdate(\"create table foo (id integer);\");"], [63, "                stat.execute(\"insert into foo (id) values (wait_for_latch());\");"], [68, "    private void workWork() throws SQLException {"], [72, "            stat.execute(\"insert into foo (id) values (\" + i + \")\");"], [97, "        // let busyWork block inside insert"], [98, "        busyWork.lockedLatch.await();"], [100, "        try{"], [101, "            workWork();"], [102, "            fail(\"Should throw SQLITE_BUSY exception\");"], [103, "        } catch(SQLException ex) {"], [104, "            assertEquals(SQLiteErrorCode.SQLITE_BUSY.code, ex.getErrorCode());"], [107, "        busyWork.completeLatch.countDown();"], [108, "        busyWork.join();"], [131, "        // let busyWork block inside insert"], [132, "        busyWork.lockedLatch.await();"], [133, "        try{"], [134, "            workWork();"], [135, "            fail(\"Should throw SQLITE_BUSY exception\");"], [136, "        } catch(SQLException ex) {"], [137, "            assertEquals(SQLiteErrorCode.SQLITE_BUSY.code, ex.getErrorCode());"], [139, "        busyWork.completeLatch.countDown();"], [140, "        busyWork.join();"], [147, "        // let busyWork block inside insert"], [148, "        busyWork.lockedLatch.await();"], [149, "        try{"], [150, "            workWork();"], [151, "            fail(\"Should throw SQLITE_BUSY exception\");"], [152, "        } catch(SQLException ex) {"], [153, "            assertEquals(SQLiteErrorCode.SQLITE_BUSY.code, ex.getErrorCode());"], [156, "        busyWork.completeLatch.countDown();"], [157, "        busyWork.join();"]], "deleted": [[43, ""], [45, "                synchronized(this) {"], [46, "                    // Generate some work for the sqlite vm"], [47, "                    stat.executeUpdate(\"drop table if exists foo;\");"], [48, "                    stat.executeUpdate(\"create table foo (id integer);\");"], [49, ""], [50, "                    int i = 0;"], [51, "                    while (i<10000) {"], [52, "                        String stmt = \"insert into foo (id) values (\" + i + \")\";"], [53, "                        stat.addBatch(stmt);"], [54, "                        i++;"], [55, "                    }"], [56, "                }"], [58, ""], [59, "            try {"], [60, "                stat.executeBatch();"], [61, "            } catch (SQLException ex) {System.out.println(\"BLOB\"+ex.toString());}"], [65, "    private void workWork() throws SQLException, InterruptedException {"], [66, "        // I let busyWork inject first so it can busy the db"], [67, "        Thread.sleep(1000);"], [68, ""], [72, "            stat.executeQuery(\"insert into foo (id) values (\" + i + \")\");"], [97, "        // I let busyWork prepare a huge insert"], [98, "        Thread.sleep(1000);"], [100, "        synchronized(busyWork){"], [101, "            try{"], [102, "                workWork();"], [103, "            } catch(SQLException ex) {"], [104, "                assertEquals(SQLiteErrorCode.SQLITE_BUSY.code, ex.getErrorCode());"], [105, "            }"], [108, "        busyWork.interrupt();"], [131, "        // I let busyWork prepare a huge insert"], [132, "        Thread.sleep(1000);"], [133, "        synchronized(busyWork){"], [134, "            try{"], [135, "                workWork();"], [136, "            } catch(SQLException ex) {"], [137, "                assertEquals(SQLiteErrorCode.SQLITE_BUSY.code, ex.getErrorCode());"], [138, "            }"], [146, "        // I let busyWork prepare a huge insert"], [147, "        Thread.sleep(1000);"], [148, "        synchronized(busyWork){"], [149, "            try{"], [150, "                workWork();"], [151, "            } catch(SQLException ex) {"], [152, "                assertEquals(SQLiteErrorCode.SQLITE_BUSY.code, ex.getErrorCode());"], [153, "            }"], [156, "        busyWork.interrupt();"], [159, ""], [160, "    @Test"], [161, "    public void testInterrupt() throws Exception {"], [162, ""], [163, "        try {"], [164, "            BusyHandler.setHandler(conn, new BusyHandler() {"], [165, "                @Override"], [166, "                protected int callback(int nbPrevInvok) throws SQLException {"], [167, "                    return 1;"], [168, "                }"], [169, "            });"], [170, "            workWork();"], [171, "        } catch (SQLException ex) {"], [172, "            // Expected error"], [173, "            return;"], [174, "        }"], [175, "        // Progress function throws, not reached"], [176, "        fail();"], [177, "    }"]]}, "num_lines_added": 49, "num_lines_removed": 67}