{"hash": "39c44b9c75e9459a0c4256e8b29dbd7988dae7b1", "message": "distnum code updated", "file_num_lines": 239, "diff_parsed": {"added": [[10, "    static List<Integer>[] adj;"], [16, "    static int freq[];"], [17, "    static int distinctCount;"], [18, "    static boolean marked[];"], [19, "    static int val[];"], [36, "            final int temp = u;"], [42, "            final int log = log(diff);"], [48, "            for (; i > 0 && DP[i][u] == DP[i][v]; ) {"], [50, "            }"], [62, "        for (final int v : adj[u]) {"], [63, "            if (v != par) {"], [65, "            }"], [66, "        }"], [89, "        } else {"], [97, "        final int Q = in.readInt();"], [98, "        final Query queries[] = new Query[MAX];"], [99, "        final Update updates[] = new Update[MAX];"], [100, "        final Map<Integer, Integer> map = new HashMap<>();    // Used to compress the keys"], [116, "        final int currVal[] = new int[V + 1];"], [118, "        final int edges = V - 1;"], [119, "        for (int i = 0; i < edges; i++) {"], [132, "        final int block[] = new int[2 * (V + 1)];"], [135, "        int numberOfQueries = 0, numberOfUpdates = 0;"], [136, "        for (int i = 0; i < Q; i++) {"], [143, "                    q = new Query(end[u], start[v], numberOfUpdates, LCA(u, v), numberOfQueries);"], [145, "                    q = new Query(end[v], start[u], numberOfUpdates, LCA(u, v), numberOfQueries);"], [148, "                    q = new Query(Math.min(start[u], start[v]),"], [149, "                                  Math.max(start[u], start[v]),"], [150, "                                  numberOfUpdates,"], [151, "                                  -1,"], [152, "                                  numberOfQueries);"], [154, "                queries[numberOfQueries++] = q;"], [162, "                updates[numberOfUpdates++] = new Update(idx, newVal, currVal[idx]);"], [167, "        final int BLOCK_SIZE = (int) (Math.pow(2 * V, 2.0 / 3.0) + 1);"], [168, "        for (int i = 0; i < block.length; i++) {"], [169, "            block[i] = i / BLOCK_SIZE;"], [171, "        Arrays.sort(queries, 0, numberOfQueries, (o1, o2) -> {"], [172, "            if (block[o1.L] != block[o2.L]) {"], [173, "                return block[o1.L] - block[o2.L];"], [174, "            } else if (block[o1.R] != block[o2.R]) {"], [175, "                return block[o1.R] - block[o2.R];"], [176, "            } else {"], [177, "                return o1.updatesTillNow - o2.updatesTillNow;"], [178, "            }"], [179, "        });"], [180, "        final int ans[] = new int[numberOfQueries];"], [182, "        int currentUpdateCount = 0;"], [183, "        for (int i = 0; i < numberOfQueries; i++) {"], [184, "            final Query query = queries[i];"], [185, "            while (currentUpdateCount < query.updatesTillNow) {"], [186, "                final Update update = updates[currentUpdateCount];"], [187, "                update(update.idx, update.newVal);"], [188, "                currentUpdateCount++;"], [190, "            while (currentUpdateCount > query.updatesTillNow) {"], [191, "                currentUpdateCount--;"], [192, "                final Update update = updates[currentUpdateCount];"], [193, "                update(update.idx, update.prevVal);"], [195, "            while (moLeft < query.L - 1) {"], [199, "            while (moLeft >= query.L) {"], [203, "            while (moRight < query.R) {"], [207, "            while (moRight > query.R) {"], [211, "            if (query.LCA != -1) {"], [212, "                visit(query.LCA);"], [214, "            ans[query.id] = distinctCount;"], [215, "            if (query.LCA != -1) {"], [216, "                visit(query.LCA);"], [219, "        final StringBuilder stringBuilder=new StringBuilder();"], [221, "            stringBuilder.append(a).append('\\n');"], [223, "        System.out.println(stringBuilder);"], [224, "    }"], [225, "}"], [226, ""], [227, "class Query {"], [228, "    final int L, R, updatesTillNow, LCA, id;"], [229, ""], [230, "    public Query(final int l, final int r, final int updatesTillNow, final int lCA, final int id) {"], [231, "        L = l;"], [232, "        R = r;"], [233, "        this.updatesTillNow = updatesTillNow;"], [234, "        LCA = lCA;"], [235, "        this.id = id;"], [236, "    }"], [237, ""], [238, "    @Override"], [239, "    public String toString() {"], [240, "        return String.format(\"[L = %d R = %d updatesLess = %d LCA = %d id = %d]\", L, R, updatesTillNow, LCA, id);"], [241, "    }"], [242, "}"], [243, ""], [244, "class Update {"], [245, "    final int idx, prevVal, newVal;"], [246, ""], [247, "    public Update(final int idx, final int newVal, final int prevVal) {"], [248, "        this.idx = idx;"], [249, "        this.newVal = newVal;"], [250, "        this.prevVal = prevVal;"], [251, "    }"], [252, ""], [253, "    @Override"], [254, "    public String toString() {"], [255, "        return String.format(\"[idx = %d prevVal = %d newVal = %d\", idx, prevVal, newVal);"], [257, "}"]], "deleted": [[10, "    static ArrayList<Integer>[] adj;"], [12, "    static int BLOCK_SIZE;"], [13, ""], [34, "            int temp = u;"], [40, "            int log = log(diff);"], [46, "            for (; i > 0 && DP[i][u] == DP[i][v]; )"], [48, ""], [52, ""], [61, "        for (int v : adj[u])"], [62, "            if (v != par)"], [64, ""], [69, ""], [70, "    static class Query {"], [71, "        int L, R, numUpdatesLess, LCA, id;"], [72, ""], [73, "        public Query(int l, int r, int numUpdatesLess, int lCA, int id) {"], [74, "            L = l;"], [75, "            R = r;"], [76, "            this.numUpdatesLess = numUpdatesLess;"], [77, "            LCA = lCA;"], [78, "            this.id = id;"], [79, "        }"], [80, ""], [81, "        @Override"], [82, "        public String toString() {"], [83, "            return String.format(\"[L = %d R = %d updatesLess = %d LCA = %d id = %d]\", L, R, numUpdatesLess, LCA, id);"], [84, "        }"], [85, "    }"], [86, ""], [87, "    static class Update {"], [88, "        int idx, prevVal, newVal;"], [89, ""], [90, "        public Update(int idx, int newVal, int prevVal) {"], [91, "            this.idx = idx;"], [92, "            this.newVal = newVal;"], [93, "            this.prevVal = prevVal;"], [94, "        }"], [95, ""], [96, "        @Override"], [97, "        public String toString() {"], [98, "            return String.format(\"[idx = %d prevVal = %d newVal = %d\", idx, prevVal, newVal);"], [99, "        }"], [100, "    }"], [101, ""], [102, "    static class MoComparator implements Comparator<Query> {"], [103, "        @Override"], [104, "        public int compare(Query o1, Query o2) {"], [105, "            if (blockCache[o1.L] != blockCache[o2.L])"], [106, "                return blockCache[o1.L] - blockCache[o2.L];"], [107, "            else if (blockCache[o1.R] != blockCache[o2.R])"], [108, "                return blockCache[o1.R] - blockCache[o2.R];"], [109, "            else"], [110, "                return o1.numUpdatesLess - o2.numUpdatesLess;"], [111, "        }"], [112, "    }"], [113, ""], [114, "    static int freq[];"], [115, "    static int distinctCount;"], [116, "    static boolean marked[];"], [117, "    static int blockCache[];"], [118, "    static int val[];"], [119, "    static HashMap<Integer, Integer> map;"], [120, ""], [131, ""], [140, "        } else"], [142, "    }"], [143, ""], [144, "    static int countDistinct(int u, int v) {"], [145, "        int lca = LCA(u, v);"], [146, "        BitSet bitSet = new BitSet(map.size());"], [147, "        bitSet.set(val[lca]);"], [148, "        while (u != lca) {"], [149, "            bitSet.set(val[u]);"], [150, "            u = parent[u];"], [151, "        }"], [152, "        while (v != lca) {"], [153, "            bitSet.set(val[v]);"], [154, "            v = parent[v];"], [156, ""], [157, "        return bitSet.cardinality();"], [162, "        int qSZ = 0, uSZ = 0;"], [164, "        int Q = in.readInt();"], [165, "        int E = V - 1;"], [166, "        Query queries[] = new Query[MAX];"], [167, "        Update updates[] = new Update[MAX];"], [168, "        map = new HashMap<>();    // Used to compress the keys"], [184, "        int currVal[] = new int[V + 1];"], [186, "        while (E-- > 0) {"], [199, "        blockCache = new int[2 * (V + 1)];"], [202, "        while (Q-- > 0) {"], [209, "                    q = new Query(end[u], start[v], uSZ, LCA(u, v), qSZ);"], [211, "                    q = new Query(end[v], start[u], uSZ, LCA(u, v), qSZ);"], [214, "                    q = new Query(Math.min(start[u], start[v]), Math.max(start[u], start[v]), uSZ, -1, qSZ);"], [216, "                queries[qSZ++] = q;"], [224, "                updates[uSZ++] = new Update(idx, newVal, currVal[idx]);"], [229, "        BLOCK_SIZE = (int) (Math.pow(2 * V, 2.0 / 3.0) + 1);"], [230, "        for (int i = 0; i < blockCache.length; i++) {"], [231, "            blockCache[i] = i / BLOCK_SIZE;"], [233, "        Arrays.sort(queries, 0, qSZ, new MoComparator());"], [234, "        final int ans[] = new int[qSZ];"], [236, "        int currUpd = 0;"], [237, "        for (int i = 0; i < qSZ; i++) {"], [238, "            final Query q = queries[i];"], [239, "            while (currUpd < q.numUpdatesLess) {"], [240, "                final Update u = updates[currUpd];"], [241, "                update(u.idx, u.newVal);"], [242, "                currUpd++;"], [244, "            while (currUpd > q.numUpdatesLess) {"], [245, "                final Update u = updates[currUpd - 1];"], [246, "                update(u.idx, u.prevVal);"], [247, "                currUpd--;"], [249, "            while (moLeft < q.L - 1) {"], [253, "            while (moLeft >= q.L) {"], [257, "            while (moRight < q.R) {"], [261, "            while (moRight > q.R) {"], [265, "            if (q.LCA != -1) {"], [266, "                visit(q.LCA);"], [268, "            ans[q.id] = distinctCount;"], [269, "            if (q.LCA != -1) {"], [270, "                visit(q.LCA);"], [274, "            System.out.println(a);"], [277, "}"]]}, "num_lines_added": 102, "num_lines_removed": 122}