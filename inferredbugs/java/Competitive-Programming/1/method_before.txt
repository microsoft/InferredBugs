    public long query(int end) {
        end--;
        final int blockIndex = end / sqrt;
        final Map<Integer, Integer> map = new HashMap<>();
        final int[][] elements = new int[sqrt][2];
        int count = 0;
        final int endIndex = end % sqrt;
        for (int i = 0; i <= endIndex; i++) {
            if (!map.containsKey(a[blockIndex * sqrt + i])) {
                map.put(a[blockIndex * sqrt + i], count);
                elements[count][0] = a[blockIndex * sqrt + i];
                count++;
            }
            elements[map.get(a[blockIndex * sqrt + i])][1]++;
        }
        BigInteger result = blockIndex > 0 ? blocks[blockIndex - 1] : BigInteger.ONE;
        for (final Map.Entry<Integer, Integer> entry : map.entrySet()) {
            final int previous = blockIndex > 0 ? frequencies[blockIndex - 1][entry.getKey()] : 0;
            result = result
                    .multiply(invPowers[previous])
                    .mod(modo)
                    .multiply(powers[previous + elements[entry.getValue()][1]])
                    .mod(modo);
        }
        return result.longValue();
    }