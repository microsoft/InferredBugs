    public long query(int end) {
        end--;
        final int blockIndex = end / sqrt;
        final int freq[] = new int[powers.length];
        final int queue[] = new int[sqrt];
        int count = 0;
        final int endIndex = end % sqrt;
        for (int i = 0; i <= endIndex; i++) {
            if (freq[a[blockIndex * sqrt + i]] == 0) {
                queue[count++] = a[blockIndex * sqrt + i];
            }
            freq[a[blockIndex * sqrt + i]]++;
        }
        long result = blockIndex > 0 ? blocks[blockIndex - 1] : 1;
        for (int i = 0; i < count; i++) {
            final int previous = blockIndex > 0 ? frequencies[blockIndex - 1][queue[i]] : 0;
            result = ((((result
                    * invPowers[previous])
                    % mod)
                    * powers[previous + freq[queue[i]]])
                    % mod);
        }
        return result;
    }