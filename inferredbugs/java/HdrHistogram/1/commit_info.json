{"hash": "3928961f461b6cb199bb4a0a6427cc88e4f6d53e", "message": "Tweaked perf test to cover both cases where expectedInterval overflows and (the faster and more common case) where values are below the expectedInterval.", "file_num_lines": 46, "diff_parsed": {"added": [[25, "    void recordLoopWithExpectedInterval(Histogram histogram, long loopCount, long expectedInterval) {"], [27, "            histogram.recordValue(testValueLevel + (i & 0x8000), expectedInterval);"], [30, ""], [31, "    public void testRawRecordingSpeedAtExpectedInterval(long expectedInterval) throws Exception {"], [33, "        System.out.println(\"\\nTiming recording speed with expectedInterval = \" + expectedInterval + \" :\");"], [36, "        recordLoopWithExpectedInterval(histogram, warmupLoopLength, expectedInterval);"], [49, "        recordLoopWithExpectedInterval(histogram, timingLoopCount, expectedInterval);"], [53, "        System.out.println(\"Hot code timing:\");"], [60, ""], [61, "    @Test"], [62, "    public void testRawRecordingSpeed() throws Exception {"], [63, "        testRawRecordingSpeedAtExpectedInterval(1000000000);"], [64, "        testRawRecordingSpeedAtExpectedInterval(10000);"], [65, "    }"], [66, ""]], "deleted": [[25, "    void recordLoop(Histogram histogram, long loopCount) {"], [27, "            histogram.recordValue(testValueLevel + (i & 0x80000), 10000);"], [30, "    @Test"], [31, "    public void testRawRecordingSpeed() throws Exception {"], [35, "        recordLoop(histogram, warmupLoopLength);"], [48, "        recordLoop(histogram, timingLoopCount);"], [52, "        System.out.println(\"Timing:\");"]]}, "num_lines_added": 15, "num_lines_removed": 7}