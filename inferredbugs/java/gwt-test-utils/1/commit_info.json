{"hash": "148a37e197ab1623d9e9e489dde3ebeeb170b2ba", "message": "Add beforeCsvMethodExecution and afterCsvMethodExecution callbacks", "file_num_lines": 401, "diff_parsed": {"added": [[183, ""], [187, "         return;"], [189, ""], [221, "            invokeWithCallbacks(fixture, m, args, paramValues);"], [222, "         } else {"], [223, "            m.invoke(fixture, paramValues);"], [271, ""], [275, "         return null;"], [277, ""], [334, ""], [335, "      Class<?> superClass = clazz.getSuperclass();"], [336, "      if (superClass != null) {"], [337, "         return getCsvMethod(clazz.getSuperclass(), methodName);"], [338, "      }"], [339, "      return null;"], [409, "   private void invokeWithCallbacks(Object fixture, Method csvMethod, List<String> args,"], [410, "            Object[] paramValues) throws IllegalArgumentException, IllegalAccessException,"], [411, "            InvocationTargetException {"], [412, "      String[] paramIdentifiers = args.toArray(new String[args.size()]);"], [413, ""], [414, "      CsvMethodInvocation invocationData = new CsvMethodInvocation(lineNumber + 1,"], [415, "               extendedLineInfo, csvMethod, paramIdentifiers, paramValues);"], [416, "      for (CsvTestExecutionHandler handler : hasCsvMethodInvocationHandlers.getCsvTestExecutionHandlers()) {"], [417, "         handler.beforeCsvMethodInvocation(invocationData);"], [418, "      }"], [419, ""], [420, "      csvMethod.invoke(fixture, paramValues);"], [421, ""], [422, "      for (CsvTestExecutionHandler handler : hasCsvMethodInvocationHandlers.getCsvTestExecutionHandlers()) {"], [423, "         handler.afterCsvMethodInvocation(invocationData);"], [424, "      }"], [425, "   }"], [426, ""]], "deleted": [[218, ""], [219, "            String[] paramIdentifiers = args.toArray(new String[args.size()]);"], [220, ""], [221, "            CsvMethodInvocation invocationData = new CsvMethodInvocation(lineNumber + 1,"], [222, "                     extendedLineInfo, m, paramIdentifiers, paramValues);"], [223, "            for (CsvTestExecutionHandler handler : hasCsvMethodInvocationHandlers.getCsvTestExecutionHandlers()) {"], [224, "               handler.onCsvMethodInvocation(invocationData);"], [225, "            }"], [227, ""], [228, "         m.invoke(fixture, paramValues);"], [334, "      } else {"], [335, "         Class<?> superClass = clazz.getSuperclass();"], [336, "         if (superClass != null)"], [337, "            return getCsvMethod(clazz.getSuperclass(), methodName);"], [338, "         else"], [339, "            return null;"]]}, "num_lines_added": 33, "num_lines_removed": 16}