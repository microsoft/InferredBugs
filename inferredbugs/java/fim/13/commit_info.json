{"hash": "ccf57e72cdc3702a29c1a7afa99d9e4a197ca10c", "message": "Extract HashProgress to increase cohesion of StateGenerator", "file_num_lines": 201, "diff_parsed": {"added": [[21, "import static org.fim.internal.HashProgress.PROGRESS_DISPLAY_FILE_COUNT;"], [59, "\tprivate final HashProgress hashProgress;"], [74, "\t\tthis.hashProgress = new HashProgress(context);"], [103, "\t\tif (hashProgress.isProgressDisplayed())"], [105, "\t\t\tSystem.out.printf(\"(Hash progress legend for files grouped %d by %d: %s)%n\", PROGRESS_DISPLAY_FILE_COUNT, PROGRESS_DISPLAY_FILE_COUNT, hashProgress.hashProgressLegend());"], [113, "\t\thashProgress.progressOutputInit();"], [138, "\t\thashProgress.progressOutputStop();"], [158, "\t\t\t\tFileHasher hasher = new FileHasher(hashProgress, filesToHashQueue, normalizedRootDir);"]], "deleted": [[32, "import java.util.Arrays;"], [41, "import java.util.concurrent.locks.ReentrantLock;"], [45, "import org.apache.commons.lang3.tuple.Pair;"], [56, "\tpublic static final int PROGRESS_DISPLAY_FILE_COUNT = 10;"], [59, "\tprivate static final List<Pair<Character, Integer>> hashProgress = Arrays.asList("], [60, "\t\t\tPair.of('.', 0),"], [61, "\t\t\tPair.of('o', FileState.SIZE_20_MB),"], [62, "\t\t\tPair.of('O', FileState.SIZE_50_MB),"], [63, "\t\t\tPair.of('@', FileState.SIZE_100_MB),"], [64, "\t\t\tPair.of('#', FileState.SIZE_200_MB)"], [65, "\t);"], [66, ""], [70, "\tprivate final ReentrantLock progressLock;"], [74, "\tprivate long summedFileLength;"], [75, "\tprivate int fileCount;"], [87, "\t\tthis.progressLock = new ReentrantLock();"], [116, "\t\tif (displayHashLegend())"], [118, "\t\t\tSystem.out.printf(\"(Hash progress legend for files grouped %d by %d: %s)%n\", PROGRESS_DISPLAY_FILE_COUNT, PROGRESS_DISPLAY_FILE_COUNT, hashProgressLegend());"], [126, "\t\tprogressOutputInit();"], [151, "\t\tprogressOutputStop();"], [171, "\t\t\t\tFileHasher hasher = new FileHasher(this, filesToHashQueue, normalizedRootDir);"], [272, ""], [273, "\tprivate void progressOutputInit()"], [274, "\t{"], [275, "\t\tsummedFileLength = 0;"], [276, "\t\tfileCount = 0;"], [277, "\t}"], [278, ""], [279, "\tpublic void updateProgressOutput(long fileSize) throws IOException"], [280, "\t{"], [281, "\t\tprogressLock.lock();"], [282, "\t\ttry"], [283, "\t\t{"], [284, "\t\t\tfileCount++;"], [285, ""], [286, "\t\t\tif (displayHashLegend())"], [287, "\t\t\t{"], [288, "\t\t\t\tsummedFileLength += fileSize;"], [289, ""], [290, "\t\t\t\tif (fileCount % PROGRESS_DISPLAY_FILE_COUNT == 0)"], [291, "\t\t\t\t{"], [292, "\t\t\t\t\tSystem.out.print(getProgressChar(summedFileLength));"], [293, "\t\t\t\t\tsummedFileLength = 0;"], [294, "\t\t\t\t}"], [295, "\t\t\t}"], [296, ""], [297, "\t\t\tif (fileCount % (100 * PROGRESS_DISPLAY_FILE_COUNT) == 0)"], [298, "\t\t\t{"], [299, "\t\t\t\tif (displayHashLegend())"], [300, "\t\t\t\t{"], [301, "\t\t\t\t\tConsole.newLine();"], [302, "\t\t\t\t}"], [303, "\t\t\t}"], [304, "\t\t}"], [305, "\t\tfinally"], [306, "\t\t{"], [307, "\t\t\tprogressLock.unlock();"], [308, "\t\t}"], [309, "\t}"], [310, ""], [311, "\tprivate String hashProgressLegend()"], [312, "\t{"], [313, "\t\tStringBuilder sb = new StringBuilder();"], [314, "\t\tfor (int progressIndex = hashProgress.size() - 1; progressIndex >= 0; progressIndex--)"], [315, "\t\t{"], [316, "\t\t\tPair<Character, Integer> progressPair = hashProgress.get(progressIndex);"], [317, "\t\t\tchar marker = progressPair.getLeft();"], [318, "\t\t\tsb.append(marker);"], [319, ""], [320, "\t\t\tint fileLength = progressPair.getRight();"], [321, "\t\t\tif (fileLength == 0)"], [322, "\t\t\t{"], [323, "\t\t\t\tsb.append(\" otherwise\");"], [324, "\t\t\t}"], [325, "\t\t\telse"], [326, "\t\t\t{"], [327, "\t\t\t\tsb.append(\" > \").append(FileUtils.byteCountToDisplaySize(fileLength));"], [328, "\t\t\t}"], [329, "\t\t\tsb.append(\", \");"], [330, "\t\t}"], [331, "\t\tString legend = sb.toString();"], [332, "\t\tlegend = legend.substring(0, legend.length() - 2);"], [333, "\t\treturn legend;"], [334, "\t}"], [335, ""], [336, "\tprotected char getProgressChar(long fileLength)"], [337, "\t{"], [338, "\t\tint progressIndex;"], [339, "\t\tfor (progressIndex = hashProgress.size() - 1; progressIndex >= 0; progressIndex--)"], [340, "\t\t{"], [341, "\t\t\tPair<Character, Integer> progressPair = hashProgress.get(progressIndex);"], [342, "\t\t\tif (fileLength >= progressPair.getRight())"], [343, "\t\t\t{"], [344, "\t\t\t\treturn progressPair.getLeft();"], [345, "\t\t\t}"], [346, "\t\t}"], [347, ""], [348, "\t\treturn ' ';"], [349, "\t}"], [350, ""], [351, "\tprivate void progressOutputStop()"], [352, "\t{"], [353, "\t\tif (displayHashLegend())"], [354, "\t\t{"], [355, "\t\t\tif (fileCount >= PROGRESS_DISPLAY_FILE_COUNT)"], [356, "\t\t\t{"], [357, "\t\t\t\tConsole.newLine();"], [358, "\t\t\t}"], [359, "\t\t}"], [360, "\t}"], [361, ""], [362, "\tprivate boolean displayHashLegend()"], [363, "\t{"], [364, "\t\treturn context.isVerbose() && context.getHashMode() != dontHash;"], [365, "\t}"], [366, ""], [367, "\tpublic Context getContext()"], [368, "\t{"], [369, "\t\treturn context;"], [370, "\t}"]]}, "num_lines_added": 8, "num_lines_removed": 120}