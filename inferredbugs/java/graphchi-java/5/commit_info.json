{"hash": "9714e1d86c1afe03ded18cfbfc442b7ada387ed8", "message": "compressed edge shards (now compatible with the research-branch of the C++ version)\n\n--HG--\nbranch : research", "file_num_lines": 181, "diff_parsed": {"added": [[3, "import edu.cmu.graphchi.ChiFilenames;"], [9, "import java.util.ArrayList;"], [10, "import edu.cmu.graphchi.io.*;"], [29, "\tprivate String edgeDataFilename;"], [30, "\tprivate String adjDataFilename;"], [31, "\tprivate int rangeStart;"], [32, "\tprivate int rangeEnd;"], [33, ""], [34, "\tprivate byte[] adjData;"], [35, "\tprivate int[] blockIds = new int[0];"], [36, "\tprivate int[] blockSizes = new int[0];;"], [37, ""], [38, "\tprivate int edataFilesize;"], [39, "\tprivate boolean loaded = false;"], [40, "\tprivate boolean hasSetRangeOffset = false, hasSetOffset = false;"], [41, ""], [42, "\tprivate int rangeStartOffset, rangeStartEdgePtr, rangeContVid;"], [43, ""], [44, "\tprivate DataBlockManager dataBlockManager;"], [45, "\tprivate BytesToValueConverter<EdgeDataType> converter;"], [46, "\tprivate int streamingOffset, streamingOffsetEdgePtr, streamingOffsetVid;"], [47, "\tprivate int blocksize;"], [48, ""], [49, "\tprivate MemoryShard() {}"], [50, ""], [51, "\tpublic MemoryShard(String edgeDataFilename, String adjDataFilename, int rangeStart, int rangeEnd) {"], [52, "\t\tthis.edgeDataFilename = edgeDataFilename;"], [53, "\t\tthis.adjDataFilename = adjDataFilename;"], [54, "\t\tthis.rangeStart = rangeStart;"], [55, "\t\tthis.rangeEnd = rangeEnd;"], [56, ""], [57, "\t}"], [58, ""], [59, "\tpublic void commitAndRelease(boolean modifiesInedges, boolean modifiesOutedges) throws IOException {"], [60, "\t\tint nblocks = blockIds.length;"], [61, ""], [62, "\t\tif (modifiesInedges) {"], [63, "\t\t\tint startStreamBlock = rangeStartEdgePtr / blocksize;"], [64, "\t\t\tfor(int i=0; i < nblocks; i++) {"], [65, "\t\t\t\tString blockFilename = ChiFilenames.getFilenameShardEdataBlock(edgeDataFilename, i, blocksize);"], [66, "\t\t\t\tif (i >= startStreamBlock) {"], [67, "\t\t\t\t\t// Synchronous write"], [68, "\t\t\t\t\tCompressedIO.writeCompressed(new File(blockFilename),"], [69, "\t\t\t\t\t\t\tdataBlockManager.getRawBlock(blockIds[i]),"], [70, "\t\t\t\t\t\t\tblockSizes[i]);"], [71, "\t\t\t\t} else {"], [72, "\t\t\t\t\t// Asynchronous write (not implemented yet, so is same as synchronous)"], [73, "\t\t\t\t\tCompressedIO.writeCompressed(new File(blockFilename),"], [74, "\t\t\t\t\t\t\tdataBlockManager.getRawBlock(blockIds[i]),"], [75, "\t\t\t\t\t\t\tblockSizes[i]);"], [76, "\t\t\t\t}"], [77, "\t\t\t}"], [78, ""], [79, "\t\t} else if (modifiesOutedges) {"], [80, "\t\t\tint last = streamingOffsetEdgePtr;"], [81, "\t\t\tif (last == 0) {"], [82, "\t\t\t\tlast = edataFilesize;"], [83, "\t\t\t}"], [84, "\t\t\tint startblock = (int) (rangeStartEdgePtr / blocksize);"], [85, "\t\t\tint endblock = (int) (last / blocksize);"], [86, "\t\t\tfor(int i=startblock; i <= endblock; i++) {"], [87, "\t\t\t\tString blockFilename = ChiFilenames.getFilenameShardEdataBlock(edgeDataFilename, i, blocksize);"], [88, "\t\t\t\tCompressedIO.writeCompressed(new File(blockFilename),"], [89, "\t\t\t\t\t\tdataBlockManager.getRawBlock(blockIds[i]),"], [90, "\t\t\t\t\t\tblockSizes[i]);"], [91, "\t\t\t}"], [92, "\t\t}"], [93, "\t\t/* Release all blocks */"], [94, "\t\tfor(Integer blockId : blockIds) {"], [95, "\t\t\tdataBlockManager.release(blockId);"], [96, "\t\t}"], [97, "\t}"], [98, ""], [99, "\tpublic void loadVertices(int windowStart, int windowEnd, ChiVertex[] vertices)"], [100, "\t\t\tthrows FileNotFoundException, IOException {"], [101, "\t\tif (adjData == null) {"], [102, "\t\t\tblocksize = ChiFilenames.getBlocksize(converter.sizeOf());"], [103, "\t\t\tloadAdj();"], [104, "\t\t\tloadEdata();"], [105, "\t\t}"], [106, ""], [107, "\t\tSystem.out.println(\"Load memory shard\");"], [108, "\t\tint vid = 0;"], [109, "\t\tint edataPtr = 0;"], [110, "\t\tint adjOffset = 0;"], [111, "\t\tint sizeOf = converter.sizeOf();"], [112, "\t\tDataInputStream adjInput = new DataInputStream(new ByteArrayInputStream(adjData));"], [113, "\t\twhile(adjInput.available() > 0) {"], [114, "\t\t\tif (!hasSetOffset && vid > rangeEnd) {"], [115, "\t\t\t\tstreamingOffset = adjOffset;"], [116, "\t\t\t\tstreamingOffsetEdgePtr = edataPtr;"], [117, "\t\t\t\tstreamingOffsetVid = vid;"], [118, "\t\t\t\thasSetOffset = true;"], [119, "\t\t\t}"], [120, "\t\t\tif (!hasSetRangeOffset && vid >= rangeStart) {"], [121, "\t\t\t\trangeStartOffset = adjOffset;"], [122, "\t\t\t\trangeStartEdgePtr = edataPtr;"], [123, "\t\t\t\thasSetRangeOffset = true;"], [124, "\t\t\t}"], [125, ""], [126, "\t\t\tint n = 0;"], [127, "\t\t\tint ns = adjInput.readUnsignedByte();"], [128, "\t\t\tadjOffset += 1;"], [129, "\t\t\tassert(ns >= 0);"], [130, "\t\t\tif (ns == 0) {"], [131, "\t\t\t\t// next value tells the number of vertices with zeros"], [132, "\t\t\t\tvid++;"], [133, "\t\t\t\tint nz = adjInput.readUnsignedByte();"], [134, "\t\t\t\tadjOffset += 1;"], [135, "\t\t\t\tvid += nz;"], [136, "\t\t\t\tcontinue;"], [137, "\t\t\t}"], [138, "\t\t\tif (ns == 0xff) {   // If 255 is not enough, then stores a 32-bit integer after."], [139, "\t\t\t\tn = Integer.reverseBytes(adjInput.readInt());"], [140, "\t\t\t\tadjOffset += 4;"], [141, "\t\t\t} else {"], [142, "\t\t\t\tn = ns;"], [143, "\t\t\t}"], [144, ""], [145, "\t\t\tChiVertex vertex = null;"], [146, "\t\t\tif (vid >= windowStart && vid <= windowEnd) {"], [147, "\t\t\t\tvertex = vertices[vid - windowStart];"], [148, "\t\t\t}"], [149, ""], [150, "\t\t\twhile (--n >= 0) {"], [151, "\t\t\t\tint target = Integer.reverseBytes(adjInput.readInt());"], [152, "\t\t\t\tadjOffset += 4;"], [153, "\t\t\t\tif (!(target >= rangeStart && target <= rangeEnd))"], [154, "\t\t\t\t\tthrow new IllegalStateException(\"Target \" + target + \" not in range!\");"], [155, "\t\t\t\tif (vertex != null) {"], [156, "\t\t\t\t\tvertex.addOutEdge(blockIds[edataPtr / blocksize], edataPtr % blocksize, target);"], [157, "\t\t\t\t}"], [158, ""], [159, "\t\t\t\tif (target >= windowStart) {"], [160, "\t\t\t\t\tif (target <= windowEnd) {"], [161, "\t\t\t\t\t\tChiVertex dstVertex = vertices[target - windowStart];"], [162, "\t\t\t\t\t\tif (dstVertex != null) {"], [163, "\t\t\t\t\t\t\tdstVertex.addInEdge(blockIds[edataPtr / blocksize], edataPtr % blocksize, vid);"], [164, "\t\t\t\t\t\t}"], [165, "\t\t\t\t\t\tif (vertex != null && dstVertex != null) {"], [166, "\t\t\t\t\t\t\tdstVertex.parallelSafe = false;"], [167, "\t\t\t\t\t\t\tvertex.parallelSafe = false;"], [168, "\t\t\t\t\t\t}"], [169, "\t\t\t\t\t}"], [170, "\t\t\t\t}"], [171, "\t\t\t\tedataPtr += sizeOf;"], [172, ""], [173, "\t\t\t\t// TODO: skip"], [174, "\t\t\t}"], [175, "\t\t\tvid++;"], [176, "\t\t}"], [177, ""], [178, ""], [179, "\t}"], [180, ""], [181, ""], [182, "\tprivate void loadAdj() throws FileNotFoundException, IOException {"], [183, "\t\tFile adjFile = new File(adjDataFilename);"], [184, "\t\tFileInputStream fis = new FileInputStream(adjFile);"], [185, ""], [186, "\t\tint filesize = (int) adjFile.length();"], [187, "\t\tadjData = new byte[filesize];"], [188, ""], [189, "\t\tint read = 0;"], [190, "\t\twhile (read < filesize) {"], [191, "\t\t\tread += fis.read(adjData, read, filesize - read);"], [192, "\t\t}"], [193, ""], [194, "\t}"], [195, ""], [196, "\tprivate void loadEdata() throws FileNotFoundException, IOException {"], [197, "\t\t/* Load the edge data from file. Should be done asynchronously. */"], [198, "\t\tif (!loaded) {"], [199, "\t\t\tedataFilesize = ChiFilenames.getShardEdataSize(edgeDataFilename);"], [200, "\t\t\tint nblocks = edataFilesize / blocksize + (edataFilesize % blocksize == 0 ? 0 : 1);"], [201, "\t\t\tblockIds = new int[nblocks];"], [202, "\t\t\tblockSizes = new int[nblocks];"], [203, "\t\t\tfor(int fileBlockId=0; fileBlockId < nblocks; fileBlockId++) {"], [204, "\t\t\t\tint fsize = Math.min(edataFilesize - blocksize * fileBlockId, blocksize);"], [205, "\t\t\t\tblockIds[fileBlockId] = dataBlockManager.allocateBlock(fsize);"], [206, "\t\t\t\tblockSizes[fileBlockId] = fsize;"], [207, "\t\t\t\tString blockfilename = ChiFilenames.getFilenameShardEdataBlock(edgeDataFilename, fileBlockId, blocksize);"], [208, "\t\t\t\tCompressedIO.readCompressed(new File(blockfilename), dataBlockManager.getRawBlock(blockIds[fileBlockId]), fsize);"], [209, "\t\t\t}"], [210, ""], [211, "\t\t\tloaded = true;"], [212, "\t\t}"], [213, "\t}"], [214, ""], [215, "\tpublic DataBlockManager getDataBlockManager() {"], [216, "\t\treturn dataBlockManager;"], [217, "\t}"], [218, ""], [219, "\tpublic void setDataBlockManager(DataBlockManager dataBlockManager) {"], [220, "\t\tthis.dataBlockManager = dataBlockManager;"], [221, "\t}"], [222, ""], [223, "\tpublic void setConverter(BytesToValueConverter<EdgeDataType> converter) {"], [224, "\t\tthis.converter = converter;"], [225, "\t}"], [226, ""], [227, "\tpublic int getStreamingOffset() {"], [228, "\t\treturn streamingOffset;"], [229, "\t}"], [230, ""], [231, "\tpublic int getStreamingOffsetEdgePtr() {"], [232, "\t\treturn streamingOffsetEdgePtr;"], [233, "\t}"], [234, ""], [235, "\tpublic int getStreamingOffsetVid() {"], [236, "\t\treturn streamingOffsetVid;"], [237, "\t}"]], "deleted": [[26, "    private String edgeDataFilename;"], [27, "    private String adjDataFilename;"], [28, "    private int rangeStart;"], [29, "    private int rangeEnd;"], [30, ""], [31, "    private byte[] adjData;"], [32, "    private int blockId;"], [33, "    private int edataFilesize;"], [34, "    private boolean loaded = false;"], [35, "    private boolean hasSetRangeOffset = false, hasSetOffset = false;"], [36, ""], [37, "    private int rangeStartOffset, rangeStartEdgePtr, rangeContVid;"], [38, ""], [39, "    private DataBlockManager dataBlockManager;"], [40, "    private BytesToValueConverter<EdgeDataType> converter;"], [41, "    private int streamingOffset, streamingOffsetEdgePtr, streamingOffsetVid;"], [42, ""], [43, "    private MemoryShard() {}"], [44, ""], [45, "    public MemoryShard(String edgeDataFilename, String adjDataFilename, int rangeStart, int rangeEnd) {"], [46, "        this.edgeDataFilename = edgeDataFilename;"], [47, "        this.adjDataFilename = adjDataFilename;"], [48, "        this.rangeStart = rangeStart;"], [49, "        this.rangeEnd = rangeEnd;"], [50, "    }"], [51, ""], [52, "    public void commitAndRelease(boolean modifiesInedges, boolean modifiesOutedges) throws IOException {"], [53, "        byte[] data = dataBlockManager.getRawBlock(blockId);"], [54, ""], [55, "        if (modifiesInedges) {"], [56, "            FileOutputStream fos = new FileOutputStream(new File(edgeDataFilename));"], [57, "            fos.write(data);"], [58, "            fos.close();"], [59, "        } else if (modifiesOutedges) {"], [60, "            ucar.unidata.io.RandomAccessFile rFile ="], [61, "                    new ucar.unidata.io.RandomAccessFile(edgeDataFilename, \"rwd\");"], [62, "            rFile.seek(rangeStartEdgePtr);"], [63, "            int last = streamingOffsetEdgePtr;"], [64, "            if (last == 0) last = edataFilesize;"], [65, "            rFile.write(data, rangeStartEdgePtr, last  - rangeStartEdgePtr);"], [66, "            rFile.close();"], [67, "        }"], [68, "        dataBlockManager.release(blockId);"], [69, ""], [70, "    }"], [71, ""], [72, "    public void loadVertices(int windowStart, int windowEnd, ChiVertex[] vertices)"], [73, "            throws FileNotFoundException, IOException {"], [74, "        if (adjData == null) {"], [75, "            loadAdj();"], [76, ""], [77, "            edataFilesize = (int) new File(edgeDataFilename).length();"], [78, "            blockId = dataBlockManager.allocateBlock(edataFilesize);"], [79, "        }"], [80, ""], [81, ""], [82, "        System.out.println(\"Load memory shard\");"], [83, "        int vid = 0;"], [84, "        int edataPtr = 0;"], [85, "        int adjOffset = 0;"], [86, "        int sizeOf = converter.sizeOf();"], [87, "        DataInputStream adjInput = new DataInputStream(new ByteArrayInputStream(adjData));"], [88, "        while(adjInput.available() > 0) {"], [89, "            if (!hasSetOffset && vid > rangeEnd) {"], [90, "                streamingOffset = adjOffset;"], [91, "                streamingOffsetEdgePtr = edataPtr;"], [92, "                streamingOffsetVid = vid;"], [93, "                hasSetOffset = true;"], [94, "            }"], [95, "            if (!hasSetRangeOffset && vid >= rangeStart) {"], [96, "                rangeStartOffset = adjOffset;"], [97, "                rangeStartEdgePtr = edataPtr;"], [98, "                hasSetRangeOffset = true;"], [99, "            }"], [100, ""], [101, "            int n = 0;"], [102, "            int ns = adjInput.readUnsignedByte();"], [103, "            adjOffset += 1;"], [104, "            assert(ns >= 0);"], [105, "            if (ns == 0) {"], [106, "                // next value tells the number of vertices with zeros"], [107, "                vid++;"], [108, "                int nz = adjInput.readUnsignedByte();"], [109, "                adjOffset += 1;"], [110, "                vid += nz;"], [111, "                continue;"], [112, "            }"], [113, "            if (ns == 0xff) {   // If 255 is not enough, then stores a 32-bit integer after."], [114, "                n = Integer.reverseBytes(adjInput.readInt());"], [115, "                adjOffset += 4;"], [116, "            } else {"], [117, "                n = ns;"], [118, "            }"], [119, ""], [120, "            ChiVertex vertex = null;"], [121, "            if (vid >= windowStart && vid <= windowEnd) {"], [122, "                vertex = vertices[vid - windowStart];"], [123, "            }"], [124, ""], [125, "            while (--n >= 0) {"], [126, "                int target = Integer.reverseBytes(adjInput.readInt());"], [127, "                adjOffset += 4;"], [128, "                if (!(target >= rangeStart && target <= rangeEnd))"], [129, "                    throw new IllegalStateException(\"Target \" + target + \" not in range!\");"], [130, "                if (vertex != null) {"], [131, "                    vertex.addOutEdge(blockId, edataPtr, target);"], [132, "                }"], [133, ""], [134, "                if (target >= windowStart) {"], [135, "                    if (target <= windowEnd) {"], [136, "                        ChiVertex dstVertex = vertices[target - windowStart];"], [137, "                        if (dstVertex != null) {"], [138, "                            dstVertex.addInEdge(blockId, edataPtr, vid);"], [139, "                        }"], [140, "                        if (vertex != null && dstVertex != null) {"], [141, "                            dstVertex.parallelSafe = false;"], [142, "                            vertex.parallelSafe = false;"], [143, "                        }"], [144, "                    }"], [145, "                }"], [146, "                edataPtr += sizeOf;"], [147, ""], [148, "                // TODO: skip"], [149, "            }"], [150, "            vid++;"], [151, "        }"], [152, ""], [153, "        /* Load the edge data from file. Should be done asynchronously. */"], [154, "        if (!loaded) {"], [155, "            int read = 0;"], [156, "            FileInputStream fdis = new FileInputStream(new File(edgeDataFilename));"], [157, "            while (read < edataFilesize) {"], [158, "                read += fdis.read(dataBlockManager.getRawBlock(blockId), read, edataFilesize - read);"], [159, "            }"], [160, ""], [161, "            loaded = true;"], [162, "        }"], [163, "    }"], [164, ""], [165, ""], [166, "    private void loadAdj() throws FileNotFoundException, IOException {"], [167, "        File adjFile = new File(adjDataFilename);"], [168, "        FileInputStream fis = new FileInputStream(adjFile);"], [169, ""], [170, "        int filesize = (int) adjFile.length();"], [171, "        adjData = new byte[filesize];"], [172, ""], [173, "        int read = 0;"], [174, "        while (read < filesize) {"], [175, "            read += fis.read(adjData, read, filesize - read);"], [176, "        }"], [177, ""], [178, "    }"], [179, ""], [180, "    public DataBlockManager getDataBlockManager() {"], [181, "        return dataBlockManager;"], [182, "    }"], [183, ""], [184, "    public void setDataBlockManager(DataBlockManager dataBlockManager) {"], [185, "        this.dataBlockManager = dataBlockManager;"], [186, "    }"], [187, ""], [188, "    public void setConverter(BytesToValueConverter<EdgeDataType> converter) {"], [189, "        this.converter = converter;"], [190, "    }"], [191, ""], [192, "    public int getStreamingOffset() {"], [193, "        return streamingOffset;"], [194, "    }"], [195, ""], [196, "    public int getStreamingOffsetEdgePtr() {"], [197, "        return streamingOffsetEdgePtr;"], [198, "    }"], [199, ""], [200, "    public int getStreamingOffsetVid() {"], [201, "        return streamingOffsetVid;"], [202, "    }"]]}, "num_lines_added": 212, "num_lines_removed": 177}