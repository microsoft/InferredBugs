{"hash": "ac0a07d32d1b2b73e12e1d2a94685836aad65721", "message": "Ensure Oak Index - Clean-up\n* Reduced OSGi properties (moved them to definition properties)\n* Cleaned up logging\n* Added recreateOnUpdate flag\n* #checkstyle", "file_num_lines": 282, "diff_parsed": {"added": [[5, " * Copyright (C) 2015 Adobe"], [25, "import com.day.cq.commons.jcr.JcrConstants;"], [63, "    private static final String PN_RECREATE_ON_UPDATE = \"recreateOnUpdate\";"], [65, "    private static final String PN_FORCE_REINDEX = \"forceReindex\";"], [66, ""], [67, "    private static final String PN_DELETE = \"delete\";"], [68, ""], [69, "    private static final String PN_IGNORE = \"ignore\";"], [76, "            // Jcr Properties"], [78, "            JcrConstants.JCR_LASTMODIFIED,"], [79, "            JcrConstants.JCR_LAST_MODIFIED_BY,"], [80, "            JcrConstants.JCR_MIXINTYPES,"], [81, "            JcrConstants.JCR_CREATED,"], [82, "            JcrConstants.JCR_CREATED_BY,"], [83, "            // EnsureOakIndex properties"], [84, "            PN_RECREATE_ON_UPDATE,"], [85, "            PN_FORCE_REINDEX,"], [86, "            PN_DELETE,"], [87, "            PN_IGNORE,"], [88, "            // Oak properties"], [99, "    private static final String DEFAULT_ENSURE_DEFINITIONS_PATH = StringUtils.EMPTY;"], [101, "    @Property(label = \"Ensure Definitions Path\","], [102, "            description = \"The absolute path to the resource containing the \""], [103, "                    + \"ACS AEM Commons ensure definitions\","], [104, "            value = DEFAULT_ENSURE_DEFINITIONS_PATH)"], [105, "    public static final String PROP_ENSURE_DEFINITIONS_PATH = \"ensure-definitions.path\";"], [107, "    private static final String DEFAULT_OAK_INDEXES_PATH = \"/oak:index\";"], [109, "    @Property(label = \"Oak Indexes Path\","], [111, "            value = DEFAULT_OAK_INDEXES_PATH)"], [112, "    public static final String PROP_OAK_INDEXES_PATH = \"oak-indexes.path\";"], [121, "        final String ensureDefinitionsPath = PropertiesUtil.toString(config.get(PROP_ENSURE_DEFINITIONS_PATH),"], [122, "                DEFAULT_ENSURE_DEFINITIONS_PATH);"], [124, "        final String oakIndexesPath = PropertiesUtil.toString(config.get(PROP_OAK_INDEXES_PATH),"], [125, "                DEFAULT_OAK_INDEXES_PATH);"], [127, "        log.info(\"Ensuring Oak Indexes [ {} ~> {} ]\", ensureDefinitionsPath, oakIndexesPath);"], [133, "            if (StringUtils.isBlank(ensureDefinitionsPath)) {"], [135, "                        + PROP_ENSURE_DEFINITIONS_PATH + \"` \" + \"cannot be blank.\");"], [136, "            } else if (StringUtils.isBlank(oakIndexesPath)) {"], [138, "                        + PROP_OAK_INDEXES_PATH + \"` \" + \"cannot be blank.\");"], [144, "                this.ensure(resourceResolver, ensureDefinitionsPath, oakIndexesPath);"], [146, "                log.error(\"Could not ensure management of Oak Index [ {} ]\", oakIndexesPath, e);"], [148, "                log.error(\"Could not ensure management of Oak Index [ {} ]\", oakIndexesPath, e);"], [153, "            log.error(\"Could not get an admin resource resolver to ensure Oak Indexes\", e);"], [164, "     * Main work method. Responsible for ensuring the ensure definitions under srcPath are reflected in the real oak"], [165, "     * index under oakIndexesPath."], [167, "     * @param resourceResolver      the resource resolver (must have permissions to read definitions and change indexes)"], [168, "     * @param ensureDefinitionsPath the path containing the ensure definitions"], [169, "     * @param oakIndexesPath        the path of the real oak index"], [173, "    private void ensure(final ResourceResolver resourceResolver, final String ensureDefinitionsPath,"], [174, "                        final String oakIndexesPath)"], [177, "        final Resource ensureDefinitions = resourceResolver.getResource(ensureDefinitionsPath);"], [178, "        final Resource oakIndexes = resourceResolver.getResource(oakIndexesPath);"], [180, "        if (ensureDefinitions == null) {"], [181, "            throw new IllegalArgumentException(\"Unable to find Ensure Definitions resource at \""], [182, "                    + ensureDefinitionsPath);"], [183, "        } else if (oakIndexes == null) {"], [184, "            throw new IllegalArgumentException(\"Unable to find Oak Indexes source resource at \" + oakIndexesPath);"], [187, "        final Iterator<Resource> ensureDefinitionsIterator = ensureDefinitions.listChildren();"], [188, "        if (!ensureDefinitionsIterator.hasNext()) {"], [189, "            log.info(\"Ensure Definitions path [ {} ] does NOT have children to process\", ensureDefinitions.getPath());"], [193, "        while (ensureDefinitionsIterator.hasNext()) {"], [194, "            final Resource ensureDefinition = ensureDefinitionsIterator.next();"], [195, "            final ValueMap ensureDefinitionProperties = ensureDefinition.getValueMap();"], [196, "            final Resource oakIndex = oakIndexes.getChild(ensureDefinition.getName());"], [198, "            log.debug(\"Ensuring Oak Index [ {} ] ~> [ {} ]\", ensureDefinition.getPath(),"], [199, "                    oakIndexesPath + \"/\" + ensureDefinition.getName());"], [202, "                Resource ensuredOakIndex = null;"], [203, "                if (ensureDefinitionProperties.get(PN_IGNORE, false)) {"], [204, "                    // IGNORE"], [205, "                    log.debug(\"Ignoring index definition at [ {} ]\", ensureDefinition.getPath());"], [206, "                } else if (ensureDefinitionProperties.get(PN_DELETE, false)) {"], [207, "                    // DELETE"], [208, "                    if (oakIndex != null) {"], [209, "                        this.delete(oakIndex);"], [210, "                    } else {"], [211, "                        // Oak index does not exist"], [212, "                        log.info(\"Requesting deletion of a non-existent Oak Index at [ {} ]\\n.\""], [213, "                                + \"Consider removing the Ensure Definition at [ {} ] if it is no longer needed.\","], [214, "                                oakIndexesPath + \"/\" + ensureDefinition.getName(),"], [215, "                                ensureDefinition.getPath());"], [216, "                    }"], [217, "                } else if (oakIndex == null) {"], [218, "                    // CREATE"], [219, "                    validateEnsureDefinition(ensureDefinition);"], [220, "                    ensuredOakIndex = this.create(ensureDefinition, oakIndexes);"], [221, ""], [222, "                    // Force re-index"], [223, "                    if (ensureDefinitionProperties.get(PN_FORCE_REINDEX, false)) {"], [224, "                        this.forceRefresh(ensuredOakIndex);"], [225, "                    }"], [227, "                    // UPDATE"], [228, "                    validateEnsureDefinition(ensureDefinition);"], [229, ""], [230, "                    if (ensureDefinitionProperties.get(PN_RECREATE_ON_UPDATE, false)) {"], [231, "                        // Recreate on Update"], [232, "                        this.delete(oakIndex);"], [233, "                        ensuredOakIndex = this.create(ensureDefinition, oakIndexes);"], [234, "                    } else {"], [235, "                        // Normal Update"], [236, "                        ensuredOakIndex = this.update(ensureDefinition, oakIndexes);"], [237, "                    }"], [238, ""], [239, "                    // Force re-index"], [240, "                    if (ensureDefinitionProperties.get(PN_FORCE_REINDEX, false)) {"], [241, "                        this.forceRefresh(ensuredOakIndex);"], [242, "                    }"], [254, "     * @param oakIndex the index representing the oak index"], [257, "    private void forceRefresh(final Resource oakIndex) throws PersistenceException {"], [258, "        if (oakIndex == null) {"], [262, "        final ModifiableValueMap mvm = oakIndex.adaptTo(ModifiableValueMap.class);"], [265, "        oakIndex.getResourceResolver().commit();"], [267, "        log.info(\"Forcing re-index of [ {} ]\", oakIndex.getPath());"], [273, "     * @param ensuredDefinition the ensure definition"], [274, "     * @param oakIndexes        the parent oak index folder"], [279, "    private Resource create(final Resource ensuredDefinition, final Resource oakIndexes) throws PersistenceException,"], [282, "        final Node oakIndex = JcrUtil.copy("], [283, "                ensuredDefinition.adaptTo(Node.class),"], [284, "                oakIndexes.adaptTo(Node.class),"], [285, "                ensuredDefinition.getName());"], [287, "        oakIndex.setPrimaryType(NT_OAK_QUERY_INDEX_DEFINITION);"], [289, "        ensuredDefinition.getResourceResolver().commit();"], [291, "        log.info(\"Created Oak Index at [ {} ] with Ensure Definition [ {} ]\", oakIndex.getPath(),"], [292, "                ensuredDefinition.getPath());"], [294, "        return ensuredDefinition.getResourceResolver().getResource(oakIndex.getPath());"], [300, "     * @param ensureDefinition the ensure definition"], [301, "     * @param oakIndexes       the parent oak index folder"], [306, "    private Resource update(final Resource ensureDefinition, final Resource oakIndexes)"], [307, "            throws RepositoryException, IOException {"], [309, "        final ValueMap ensureDefinitionProperties = ensureDefinition.getValueMap();"], [310, "        final Resource oakIndex = oakIndexes.getChild(ensureDefinition.getName());"], [311, "        final ModifiableValueMap oakIndexProperties = oakIndex.adaptTo(ModifiableValueMap.class);"], [312, ""], [313, "        if (!needsUpdate(ensureDefinition, oakIndex)) {"], [314, "            log.info(\"Skipping update... Oak Index at [ {} ] is the same as [ {} ]\","], [315, "                    oakIndex.getPath(), ensureDefinition.getPath());"], [323, "        Set<String> keys = new HashSet<String>(oakIndexProperties.keySet());"], [330, "            oakIndexProperties.remove(key);"], [334, "        for (final Map.Entry<String, Object> entry : ensureDefinitionProperties.entrySet()) {"], [339, "            oakIndexProperties.put(entry.getKey(), entry.getValue());"], [347, "        children = oakIndex.listChildren();"], [353, "        children = ensureDefinition.listChildren();"], [356, "            JcrUtil.copy(child.adaptTo(Node.class), oakIndex.adaptTo(Node.class), child.getName());"], [359, "        ensureDefinition.getResourceResolver().commit();"], [361, "        log.info(\"Updated Oak Index at [ {} ] with configuration [ {} ]\", oakIndex.getPath(),"], [362, "                ensureDefinition.getPath());"], [364, "        return oakIndex;"], [370, "     * @param ensureDefinition the ensure index definition"], [371, "     * @param oakIndex         the oak index definition"], [376, "    private boolean needsUpdate(Resource ensureDefinition, Resource oakIndex) throws IOException, RepositoryException {"], [377, "        final Session session = ensureDefinition.getResourceResolver().adaptTo(Session.class);"], [379, "        // Compile checksum for the ensureDefinition node system"], [380, "        final CustomChecksumGeneratorOptions ensureDefinitionOptions = new CustomChecksumGeneratorOptions();"], [381, "        ensureDefinitionOptions.addIncludedNodeTypes(new String[]{ NT_OAK_UNSTRUCTURED });"], [382, "        ensureDefinitionOptions.addExcludedProperties(IGNORE_PROPERTIES);"], [384, "        final Map<String, String> srcChecksum ="], [385, "                ChecksumGenerator.generateChecksum(session, ensureDefinition.getPath(), ensureDefinitionOptions);"], [387, "        // Compile checksum for the oakIndex node system"], [388, "        final CustomChecksumGeneratorOptions oakIndexOptions = new CustomChecksumGeneratorOptions();"], [389, "        oakIndexOptions.addIncludedNodeTypes(new String[]{ NT_OAK_QUERY_INDEX_DEFINITION });"], [390, "        oakIndexOptions.addExcludedProperties(IGNORE_PROPERTIES);"], [393, "                ChecksumGenerator.generateChecksum(session, oakIndex.getPath(), oakIndexOptions);"], [396, "        return !StringUtils.equals(srcChecksum.get(ensureDefinition.getPath()), destChecksum.get(oakIndex.getPath()));"], [402, "     * @param oakIndex the oak index node to delete"], [406, "    private void delete(final Resource oakIndex) throws RepositoryException, PersistenceException {"], [407, "        if (oakIndex == null) {"], [408, "            log.warn(\"Requesting deletion of a non-existent oak index.\");"], [412, "        if (oakIndex.adaptTo(Node.class) != null) {"], [413, "            final String path = oakIndex.getPath();"], [415, "            // Remove the node and its descendants"], [416, "            oakIndex.adaptTo(Node.class).remove();"], [418, "            final long start = System.currentTimeMillis();"], [419, "            oakIndex.getResourceResolver().commit();"], [420, "            log.info(\"Deleted Oak Index at [ {} ] in {} ms\", path, System.currentTimeMillis() - start);"], [421, "        } else {"], [422, "            log.warn(\"Oak Index at [ {} ] could not be adapted to a Node for removal.\", oakIndex.getPath());"], [423, "        }"], [429, "     * @param ensureDefinition the ensure definition ensureDefinition"], [433, "    private void validateEnsureDefinition(Resource ensureDefinition)"], [436, "        if (ensureDefinition == null) {"], [440, "        Node node = ensureDefinition.adaptTo(Node.class);"], [443, "            throw new OakIndexDefinitionException(\"Resource \" + ensureDefinition.getPath()"], [444, "                    + \" cannot be adapted to a Node\");"], [446, "            throw new OakIndexDefinitionException(\"Resource \" + ensureDefinition.getPath()"], [447, "                    + \" is not of jcr:primaryType \" + NT_OAK_UNSTRUCTURED);"], [450, "        final ValueMap properties = ensureDefinition.getValueMap();"], [452, "            throw new OakIndexDefinitionException(\"Ensure Definition at \" + ensureDefinition.getPath() + \" missing \""]], "deleted": [[5, " * Copyright (C) 2014 Adobe"], [25, "import com.adobe.acs.commons.util.InfoWriter;"], [27, "import org.apache.commons.lang.ArrayUtils;"], [33, "import org.apache.jackrabbit.JcrConstants;"], [65, "    private static final String PN_MARK_FOR_DELETION = \"delete\";"], [67, "    private static final String PN_MARK_FOR_IGNORE = \"ignore\";"], [75, "            PN_MARK_FOR_DELETION,"], [76, "            PN_MARK_FOR_IGNORE,"], [87, "    private static final String DEFAULT_SOURCE_OAK_INDEX_PATH = StringUtils.EMPTY;"], [89, "    @Property(label = \"Index Definitions Source\","], [90, "            description = \"The absolute path the folder that contains the index definitions to ensure\")"], [91, "    public static final String PROP_SOURCE_OAK_INDEX_PATH = \"src.path\";"], [93, "    private static final String DEFAULT_DESTINATION_OAK_INDEX_PATH = \"/oak:index\";"], [95, "    @Property(label = \"Oak Index Destination\","], [97, "            value = DEFAULT_DESTINATION_OAK_INDEX_PATH)"], [98, "    public static final String PROP_DESTINATION_OAK_INDEX_PATH = \"dest.path\";"], [99, ""], [100, ""], [101, "    @Property(label = \"Force Reindex\","], [102, "            description = \"Sets reindex=true on the following index if they've been created or updated\","], [103, "            cardinality = Integer.MAX_VALUE,"], [104, "            value = {})"], [105, "    public static final String PROP_FORCE_REINDEX_OF = \"force-reindex\";"], [114, "        final String srcPath = PropertiesUtil.toString(config.get(PROP_SOURCE_OAK_INDEX_PATH),"], [115, "                DEFAULT_SOURCE_OAK_INDEX_PATH);"], [116, ""], [117, "        final String destPath = PropertiesUtil.toString(config.get(PROP_DESTINATION_OAK_INDEX_PATH),"], [118, "                DEFAULT_DESTINATION_OAK_INDEX_PATH);"], [120, "        final String[] forceReindexNames ="], [121, "                PropertiesUtil.toStringArray(config.get(PROP_FORCE_REINDEX_OF), new String[]{});"], [123, ""], [124, "        final InfoWriter iw = new InfoWriter();"], [125, "        iw.title(\"Ensuring Oak Index\");"], [126, "        iw.message(\" * {} ~> {} \", srcPath, destPath);"], [127, "        iw.line();"], [128, "        if (forceReindexNames.length > 0) {"], [129, "            iw.message(\"Force reindex of:\", forceReindexNames);"], [130, "        }"], [131, "        iw.end();"], [132, "        log.info(iw.toString());"], [138, "            if (StringUtils.isBlank(srcPath)) {"], [140, "                        + PROP_SOURCE_OAK_INDEX_PATH + \"` \" + \"cannot be blank.\");"], [141, "            } else if (StringUtils.isBlank(destPath)) {"], [143, "                        + PROP_DESTINATION_OAK_INDEX_PATH + \"` \" + \"cannot be blank.\");"], [149, "                this.ensure(resourceResolver, srcPath, destPath, forceReindexNames);"], [151, "                log.error(\"Could not ensure management of oak index [ {} ]\", destPath, e);"], [153, "                log.error(\"Could not ensure management of oak index [ {} ]\", destPath, e);"], [158, "            log.error(\"Could not get an admin resource resolver to ensure oak indexes\", e);"], [169, "     * Main work method. Responsible for ensuring the ensure defintions under srcPath are reflected in the real oak"], [170, "     * index under destPath."], [172, "     * @param resourceResolver the resource resolver (must have permissions to read srcPath and modify destPath)"], [173, "     * @param srcPath          the path containing the ensure definitions"], [174, "     * @param destPath         the path of the real oak index"], [175, "     * @param forceReindex     true to force reindex (@reindex=true) on any create or updated indexes."], [179, "    private void ensure(final ResourceResolver resourceResolver, final String srcPath, final String destPath,"], [180, "                        final String[] forceReindex)"], [183, "        final Resource src = resourceResolver.getResource(srcPath);"], [184, "        final Resource dest = resourceResolver.getResource(destPath);"], [186, "        if (src == null) {"], [187, "            throw new IllegalArgumentException(\"Unable to find Oak Index source resource at \" + srcPath);"], [188, "        } else if (dest == null) {"], [189, "            throw new IllegalArgumentException(\"Unable to find Oak Index source resource at \" + destPath);"], [192, "        final Iterator<Resource> srcChildren = src.listChildren();"], [193, "        if (!srcChildren.hasNext()) {"], [194, "            log.info(\"Oak Index source folder [ {} ] does NOT have children to process\", src.getPath());"], [198, "        while (srcChildren.hasNext()) {"], [199, "            final Resource srcChild = srcChildren.next();"], [200, "            final ValueMap srcProperties = srcChild.getValueMap();"], [201, "            final Resource destChild = dest.getChild(srcChild.getName());"], [203, "            log.debug(\"Ensuring Oak Index [ {} ] ~> [ {} ]\", srcChild.getPath(), destPath + \"/\" + srcChild.getName());"], [206, "                Resource indexResource = null;"], [207, "                if (srcProperties.get(PN_MARK_FOR_IGNORE, false)) {"], [208, "                    log.debug(\"Ignoring index definition at [ {} ]\", srcChild.getPath());"], [209, "                } else if (srcProperties.get(PN_MARK_FOR_DELETION, false)) {"], [210, "                    // Delete Index"], [211, "                    this.delete(destChild);"], [212, "                } else if (destChild == null) {"], [213, "                    // Create Index"], [214, "                    validateSourceIndexDefinition(srcChild);"], [215, "                    indexResource = this.create(srcChild, dest);"], [216, "                    this.forceRefresh(indexResource, forceReindex);"], [218, "                    // Update Index"], [219, "                    validateSourceIndexDefinition(srcChild);"], [220, "                    indexResource = this.update(srcChild, dest);"], [221, "                    this.forceRefresh(indexResource, forceReindex);"], [233, "     * @param indexResource the index representing the oak index"], [234, "     * @param forceReindex  the oak index names to force reindexing on"], [237, "    private void forceRefresh(final Resource indexResource, final String[] forceReindex) throws PersistenceException {"], [238, "        if (indexResource == null) {"], [239, "            return;"], [240, "        } else if (!ArrayUtils.contains(forceReindex, indexResource.getName())) {"], [244, "        final ModifiableValueMap mvm = indexResource.adaptTo(ModifiableValueMap.class);"], [247, "        indexResource.getResourceResolver().commit();"], [249, "        log.info(\"Forcing reindex of [ {} ]\", indexResource.getPath());"], [255, "     * @param src        the ensure definition"], [256, "     * @param destFolder the parent oak index folder"], [261, "    private Resource create(final Resource src, final Resource destFolder) throws PersistenceException,"], [264, "        final Node destNode = JcrUtil.copy("], [265, "                src.adaptTo(Node.class),"], [266, "                destFolder.adaptTo(Node.class),"], [267, "                src.getName());"], [269, "        destNode.setPrimaryType(NT_OAK_QUERY_INDEX_DEFINITION);"], [271, "        src.getResourceResolver().commit();"], [273, "        log.info(\"Created Oak Index at [ {} ] with configuration from [ {} ]\", destNode.getPath(), src.getPath());"], [275, "        return src.getResourceResolver().getResource(destNode.getPath());"], [281, "     * @param src        the ensure definition"], [282, "     * @param destFolder the parent oak index folder"], [287, "    private Resource update(final Resource src, final Resource destFolder) throws RepositoryException, IOException {"], [288, "        final ValueMap srcProperties = src.getValueMap();"], [289, "        final Resource dest = destFolder.getChild(src.getName());"], [290, "        final ModifiableValueMap destProperties = dest.adaptTo(ModifiableValueMap.class);"], [292, "        if (!needsUpdate(src, dest)) {"], [293, "            log.info(\"Skipping update... Oak Index at [ {} ] is the same as [ {} ]\", dest.getPath(), src.getPath());"], [301, "        Set<String> keys = new HashSet<String>(destProperties.keySet());"], [308, "            destProperties.remove(key);"], [312, "        for (final Map.Entry<String, Object> entry : srcProperties.entrySet()) {"], [317, "            destProperties.put(entry.getKey(), entry.getValue());"], [325, "        children = dest.listChildren();"], [331, "        children = src.listChildren();"], [334, "            JcrUtil.copy(child.adaptTo(Node.class), dest.adaptTo(Node.class), child.getName());"], [337, "        src.getResourceResolver().commit();"], [339, "        log.info(\"Updated Oak Index at [ {} ] with configuration [ {} ]\", dest.getPath(), src.getPath());"], [341, "        return dest;"], [347, "     * @param src  the ensure index definition"], [348, "     * @param dest the oak index definition"], [353, "    private boolean needsUpdate(Resource src, Resource dest) throws IOException, RepositoryException {"], [354, "        final Session session = src.getResourceResolver().adaptTo(Session.class);"], [356, "        // Compile checksum for the src node system"], [357, "        final CustomChecksumGeneratorOptions srcOptions = new CustomChecksumGeneratorOptions();"], [358, "        srcOptions.addIncludedNodeTypes(new String[]{NT_OAK_UNSTRUCTURED});"], [359, "        srcOptions.addExcludedProperties(IGNORE_PROPERTIES);"], [361, "        final Map<String, String> srcChecksum = ChecksumGenerator.generateChecksum(session, src.getPath(), srcOptions);"], [363, "        // Compile checksum for the dest node system"], [364, "        final CustomChecksumGeneratorOptions destOptions = new CustomChecksumGeneratorOptions();"], [365, "        destOptions.addIncludedNodeTypes(new String[]{NT_OAK_QUERY_INDEX_DEFINITION});"], [366, "        destOptions.addExcludedProperties(IGNORE_PROPERTIES);"], [369, "                ChecksumGenerator.generateChecksum(session, dest.getPath(), destOptions);"], [372, "        return !StringUtils.equals(srcChecksum.get(src.getPath()), destChecksum.get(dest.getPath()));"], [378, "     * @param dest the oak index node to delete"], [382, "    private void delete(final Resource dest) throws RepositoryException, PersistenceException {"], [383, "        if (dest == null) {"], [387, "        final String path = dest.getPath();"], [389, "        dest.adaptTo(Node.class).remove();"], [391, "        final long start = System.currentTimeMillis();"], [392, "        dest.getResourceResolver().commit();"], [393, "        log.info(\"Deleted Oak Index at [ {} ] in {} ms\", path, System.currentTimeMillis() - start);"], [399, "     * @param resource the ensure definition resource"], [403, "    private void validateSourceIndexDefinition(Resource resource)"], [406, "        if (resource == null) {"], [410, "        Node node = resource.adaptTo(Node.class);"], [413, "            throw new OakIndexDefinitionException(\"Resource \" + resource.getPath() + \" cannot be adapted to a Node\");"], [415, "            throw new OakIndexDefinitionException(\"Resource \" + resource.getPath() + \" is not of jcr:primaryType \""], [416, "                    + NT_OAK_UNSTRUCTURED);"], [419, "        final ValueMap properties = resource.getValueMap();"], [421, "            throw new OakIndexDefinitionException(\"Source oak definition at \" + resource.getPath() + \" missing \""]]}, "num_lines_added": 186, "num_lines_removed": 155}