    @Activate
    protected final void activate(Map<String, Object> config) throws RepositoryException {
        if (!capabilityHelper.isOak()) {
            log.info("Cowardly refusing to create indexes on non-Oak instance.");
            return;
        }

        final String ensureDefinitionsPath = PropertiesUtil.toString(config.get(PROP_ENSURE_DEFINITIONS_PATH),
                DEFAULT_ENSURE_DEFINITIONS_PATH);

        final String oakIndexesPath = PropertiesUtil.toString(config.get(PROP_OAK_INDEXES_PATH),
                DEFAULT_OAK_INDEXES_PATH);

        log.info("Ensuring Oak Indexes [ {} ~> {} ]", ensureDefinitionsPath, oakIndexesPath);


        ResourceResolver resourceResolver = null;
        try {

            if (StringUtils.isBlank(ensureDefinitionsPath)) {
                throw new IllegalArgumentException("OSGi Configuration Property `"
                        + PROP_ENSURE_DEFINITIONS_PATH + "` " + "cannot be blank.");
            } else if (StringUtils.isBlank(oakIndexesPath)) {
                throw new IllegalArgumentException("OSGi Configuration Property `"
                        + PROP_OAK_INDEXES_PATH + "` " + "cannot be blank.");
            }

            resourceResolver = resourceResolverFactory.getAdministrativeResourceResolver(null);

            try {
                this.ensure(resourceResolver, ensureDefinitionsPath, oakIndexesPath);
            } catch (PersistenceException e) {
                log.error("Could not ensure management of Oak Index [ {} ]", oakIndexesPath, e);
            } catch (IOException e) {
                log.error("Could not ensure management of Oak Index [ {} ]", oakIndexesPath, e);
            }
        } catch (IllegalArgumentException e) {
            log.error(e.getMessage());
        } catch (LoginException e) {
            log.error("Could not get an admin resource resolver to ensure Oak Indexes", e);
        } catch (Exception e) {
            log.error("Unknown error occurred while ensuring indexes", e);
        } finally {
            if (resourceResolver != null) {
                resourceResolver.close();
            }
        }
    }