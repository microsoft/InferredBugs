{"hash": "7575bb73ab46b2fcdc2cbba11625c55fe57254fe", "message": "Closing the JsonWriter from the previous commit.", "file_num_lines": 101, "diff_parsed": {"added": [[53, "\t@Property("], [54, "\t\t\tname=\"sling.servlet.paths\","], [55, "\t\t\tvalue= JSONDumpServlet.SERVLET_PATH"], [56, "\t\t\t),"], [57, "\t@Property("], [58, "\t\t\tname=\"sling.auth.requirements\","], [59, "\t\t\tvalue= \"-\" + JSONDumpServlet.SERVLET_PATH"], [60, "\t\t\t)"], [64, "\tprivate static final Logger log = LoggerFactory.getLogger(JSONDumpServlet.class);"], [65, ""], [66, "\tpublic static final String SERVLET_PATH =  ServletConstants.SERVLET_PATH  + \".\""], [67, "\t\t\t+ ServletConstants.JSON_SERVLET_SELECTOR + \".\""], [68, "\t\t\t+ ServletConstants.JSON_SERVLET_EXTENSION;"], [69, ""], [70, "\t@Override"], [71, "\tpublic final void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws"], [72, "\tServletException, IOException {"], [73, "\t\ttry {"], [74, "\t\t\tthis.handleCORS(request, response);"], [75, "\t\t\tthis.handleRequest(request, response);"], [76, "\t\t} catch (RepositoryException e) {"], [77, "\t\t\tthrow new ServletException(e);"], [78, "\t\t}"], [79, "\t}"], [80, ""], [81, "\tpublic final void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) throws"], [82, "\tServletException, IOException {"], [83, "\t\ttry {"], [84, "\t\t\tthis.handleCORS(request, response);"], [85, "\t\t\tthis.handleRequest(request, response);"], [86, "\t\t} catch (RepositoryException e) {"], [87, "\t\t\tthrow new ServletException(e);"], [88, "\t\t}"], [89, "\t}"], [90, ""], [91, "\tprivate void handleRequest(SlingHttpServletRequest request, SlingHttpServletResponse response)"], [92, "\t\t\tthrows IOException,"], [93, "\t\t\tRepositoryException, ServletException {"], [94, ""], [95, "\t\tresponse.setContentType(\"application/json\");"], [96, "\t\tresponse.setCharacterEncoding(\"UTF-8\");"], [97, ""], [98, "\t\t// Generate current date and time for filename"], [99, "\t\tDateFormat df = new SimpleDateFormat(\"yyyyddMM_HHmmss\");"], [100, "\t\tDate today = Calendar.getInstance().getTime();"], [101, "\t\tString filename = df.format(today);"], [102, ""], [103, "\t\tresponse.setHeader(\"Content-Disposition\", \"filename=jcr-checksum-\""], [104, "\t\t\t\t+ filename + \".json\");"], [105, ""], [106, "\t\tString optionsName = request.getParameter(ServletConstants.OPTIONS_NAME);"], [107, "\t\tChecksumGeneratorOptions options ="], [108, "\t\t\t\tChecksumGeneratorOptionsFactory.getOptions(request, optionsName);"], [109, ""], [110, "\t\tif (log.isDebugEnabled()) {"], [111, "\t\t\tlog.debug(options.toString());"], [112, "\t\t}"], [113, ""], [114, "\t\tSet<String> paths = RequestChecksumGeneratorOptions.getPaths(request);"], [115, ""], [116, "\t\tif (CollectionUtils.isEmpty(paths)) {"], [117, "\t\t\ttry {"], [118, "\t\t\t\tresponse.setStatus(HttpServletResponse.SC_BAD_REQUEST);"], [119, "\t\t\t\tresponse.getWriter().print("], [120, "\t\t\t\t\t\t\"ERROR: At least one path must be specified\");"], [121, "\t\t\t} catch (IOException ioe) {"], [122, "\t\t\t\tthrow ioe;"], [123, "\t\t\t}"], [124, "\t\t} else {"], [125, "\t\t\tSession session = request.getResourceResolver().adaptTo(Session.class);"], [126, ""], [127, "\t\t\tJsonWriter jsonWriter = new JsonWriter(response.getWriter());"], [128, ""], [129, "\t\t\ttry {"], [130, "\t\t\t\tJSONGenerator.generateJSON(session, paths, options, jsonWriter);"], [131, "\t\t\t\tjsonWriter.close();"], [132, "\t\t\t} catch (RepositoryException e) {"], [133, "\t\t\t\tthrow new ServletException(\"Error accessing repository\", e);"], [134, "\t\t\t} catch (IOException e) {"], [135, "\t\t\t\tthrow new ServletException(\"Unable to generate json\", e);"], [136, "\t\t\t}"], [137, "\t\t}"], [138, "\t}"]], "deleted": [[53, "    @Property("], [54, "            name=\"sling.servlet.paths\","], [55, "            value= JSONDumpServlet.SERVLET_PATH"], [56, "    ),"], [57, "    @Property("], [58, "        name=\"sling.auth.requirements\","], [59, "        value= \"-\" + JSONDumpServlet.SERVLET_PATH"], [60, "    )"], [64, "    private static final Logger log = LoggerFactory.getLogger(JSONDumpServlet.class);"], [65, ""], [66, "    public static final String SERVLET_PATH =  ServletConstants.SERVLET_PATH  + \".\""], [67, "            + ServletConstants.JSON_SERVLET_SELECTOR + \".\""], [68, "            + ServletConstants.JSON_SERVLET_EXTENSION;"], [69, ""], [70, "    @Override"], [71, "    public final void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws"], [72, "            ServletException, IOException {"], [73, "        try {"], [74, "            this.handleCORS(request, response);"], [75, "            this.handleRequest(request, response);"], [76, "        } catch (RepositoryException e) {"], [77, "            throw new ServletException(e);"], [78, "        }"], [79, "    }"], [80, ""], [81, "    public final void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) throws"], [82, "            ServletException, IOException {"], [83, "        try {"], [84, "            this.handleCORS(request, response);"], [85, "            this.handleRequest(request, response);"], [86, "        } catch (RepositoryException e) {"], [87, "            throw new ServletException(e);"], [88, "        }"], [89, "    }"], [90, ""], [91, "    private void handleRequest(SlingHttpServletRequest request, SlingHttpServletResponse response)"], [92, "            throws IOException,"], [93, "        RepositoryException, ServletException {"], [94, ""], [95, "        response.setContentType(\"application/json\");"], [96, "        response.setCharacterEncoding(\"UTF-8\");"], [97, ""], [98, "        // Generate current date and time for filename"], [99, "        DateFormat df = new SimpleDateFormat(\"yyyyddMM_HHmmss\");"], [100, "        Date today = Calendar.getInstance().getTime();"], [101, "        String filename = df.format(today);"], [102, ""], [103, "        response.setHeader(\"Content-Disposition\", \"filename=jcr-checksum-\""], [104, "            + filename + \".json\");"], [105, ""], [106, "        String optionsName = request.getParameter(ServletConstants.OPTIONS_NAME);"], [107, "        ChecksumGeneratorOptions options ="], [108, "            ChecksumGeneratorOptionsFactory.getOptions(request, optionsName);"], [109, ""], [110, "        if (log.isDebugEnabled()) {"], [111, "            log.debug(options.toString());"], [112, "        }"], [113, ""], [114, "        Set<String> paths = RequestChecksumGeneratorOptions.getPaths(request);"], [115, ""], [116, "        if (CollectionUtils.isEmpty(paths)) {"], [117, "            try {"], [118, "                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);"], [119, "                response.getWriter().print("], [120, "                    \"ERROR: At least one path must be specified\");"], [121, "            } catch (IOException ioe) {"], [122, "                throw ioe;"], [123, "            }"], [124, "        }"], [125, ""], [126, "        Session session = request.getResourceResolver().adaptTo(Session.class);"], [127, ""], [128, "        JsonWriter jsonWriter = new JsonWriter(response.getWriter());"], [129, ""], [130, "        try {"], [131, "            JSONGenerator.generateJSON(session, paths, options, jsonWriter);"], [132, "        } catch (RepositoryException e) {"], [133, "            throw new ServletException(\"Error accessing repository\", e);"], [134, "        } catch (IOException e) {"], [135, "            throw new ServletException(\"Unable to generate json\", e);"], [136, "        }"], [137, "    }"]]}, "num_lines_added": 83, "num_lines_removed": 82}