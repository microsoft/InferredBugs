{"hash": "2b56c18c7b14e9a371155072a58ffd27d55b9ed4", "message": "Addressed code climate concerns in new request throttler code, also switched index counter to an atomic integer to prevent race conditions on that variable.", "file_num_lines": 92, "diff_parsed": {"added": [[24, "import java.util.concurrent.atomic.AtomicInteger;"], [52, "     * case the timestamp has already expired, Instant.EPOCH is stored. Access"], [53, "     * to this array should be guarded by the lock."], [66, "    protected AtomicInteger currentIndex = new AtomicInteger();"], [76, "        currentIndex.set(0);"], [88, "        int idx = currentIndex.get();"], [89, "        if (isSlotEmpty(idx)) {"], [92, "            timestamps[idx] = clock.instant();"], [93, "            currentIndex.updateAndGet(index -> (index == this.timestamps.length - 1) ? 0 : index+1);"], [99, "            long diff = timestamps[idx].toEpochMilli() + ONE_MINUTE - clock.instant().toEpochMilli();"], [111, "     *"], [133, "     *"], [134, "     * @param newSize new size of queue"], [138, ""], [149, "                // next cycle"], [154, ""], [175, "        currentIndex.set(timestamps.length);"], [176, "        return newQueue.length - timestamps.length; // we have some free slots now"], [182, "        for (int i = currentIndex.get() - 1; i >= 0 && newIndex < newQueue.length; i--, newIndex++) {"], [186, "        for (int i = timestamps.length - 1; i > currentIndex.get() && newIndex < newQueue.length; i--, newIndex++) {"], [190, "        currentIndex.set(0);"], [192, "        return 0; // no free slot"]], "deleted": [[45, ""], [52, "     * case the timestamp has already expired, Instant.EPOCH is stored. Access to"], [53, "     * this array should be guarded by the lock."], [66, "    protected int currentIndex;"], [76, "        currentIndex = 0;"], [88, "        if (isSlotEmpty(currentIndex)) {"], [91, "            timestamps[currentIndex] = clock.instant();"], [92, "            currentIndex = (currentIndex == this.timestamps.length - 1) ? 0 : currentIndex + 1;"], [98, "            long diff = timestamps[currentIndex].toEpochMilli() + ONE_MINUTE - clock.instant().toEpochMilli();"], [110, "     *"], [132, "     *"], [136, ""], [147, "                     // next cycle"], [164, "        int result;"], [173, "        currentIndex = timestamps.length;"], [174, "        result = newQueue.length - timestamps.length; // we have some free slots now"], [175, "        return result;"], [179, "        int result;"], [182, "        for (int i = currentIndex - 1; i >= 0 && newIndex < newQueue.length; i--, newIndex++) {"], [186, "        for (int i = timestamps.length - 1; i > currentIndex && newIndex < newQueue.length; i--, newIndex++) {"], [190, "        currentIndex = 0;"], [192, "        result = 0; // no free slot"], [193, "        return result;"]]}, "num_lines_added": 22, "num_lines_removed": 23}