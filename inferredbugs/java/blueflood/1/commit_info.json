{"hash": "27e5639e6fd0ce65e4b25a33f2e6619ff72c5157", "message": "serialize more things in gauges.\n\nBasically, they are a basic rollup + last value.\n\nThis required a teeny change in the way BasicRollups are deserialized: we only deserialize 4 stats now, rather than everything until the stream empties.", "file_num_lines": 53, "diff_parsed": {"added": [[4, "import java.util.Map;"], [6, "public class GaugeRollup extends BasicRollup {"], [8, "    Points.Point<SimpleNumber> latestValue;"], [14, "        else {"], [15, "            GaugeRollup other = (GaugeRollup)obj;"], [16, "            return super.equals(other) && other.latestValue.equals(this.latestValue);"], [17, "        }"], [18, "    }"], [19, ""], [20, "    public long getTimestamp() {"], [21, "        return latestValue.getTimestamp();"], [22, "    }"], [23, ""], [24, "    public Number getLatestValue() {"], [25, "        return (Number)latestValue.getData().getValue();"], [28, "    public static GaugeRollup buildFromRawSamples(Points<SimpleNumber> input) throws IOException {"], [29, ""], [30, "        // normal stuff."], [31, "        GaugeRollup rollup = new GaugeRollup();"], [32, "        rollup.computeFromSimpleMetrics(input);"], [33, ""], [34, "        // latest value is special."], [35, "        Points.Point<SimpleNumber> latest = null;"], [36, "        for (Map.Entry<Long, Points.Point<SimpleNumber>> entry : input.getPoints().entrySet()) {"], [37, "            if (latest == null || entry.getValue().getTimestamp() > latest.getTimestamp())"], [38, "                latest = entry.getValue();"], [39, "        }"], [40, "        rollup.latestValue = latest;"], [41, ""], [42, "        return rollup;"], [43, "    }"], [44, ""], [46, "        GaugeRollup rollup = new GaugeRollup();"], [47, ""], [48, "        rollup.computeFromRollups(BasicRollup.recast(input, IBasicRollup.class));"], [49, ""], [50, "        Points.Point<SimpleNumber> latest = rollup.latestValue;"], [51, ""], [52, "        for (Map.Entry<Long, Points.Point<GaugeRollup>> entry : input.getPoints().entrySet()) {"], [53, "            if (latest == null || entry.getValue().getTimestamp() > latest.getTimestamp())"], [54, "                latest = entry.getValue().getData().latestValue;"], [56, ""], [57, "        rollup.latestValue = latest;"], [58, ""], [59, "        return rollup;"], [60, "    }"], [61, ""], [62, "    public static GaugeRollup fromBasicRollup(IBasicRollup basic, long timestamp, Number latestValue) {"], [63, "        GaugeRollup rollup = new GaugeRollup();"], [64, ""], [65, "        rollup.setCount(basic.getCount());"], [66, "        rollup.setAverage((Average)basic.getAverage());"], [67, "        rollup.setMin((MinValue)basic.getMinValue());"], [68, "        rollup.setMax((MaxValue)basic.getMaxValue());"], [69, "        rollup.setVariance((Variance)basic.getVariance());"], [70, ""], [71, "        rollup.latestValue = new Points.Point<SimpleNumber>(timestamp, new SimpleNumber(latestValue));"], [72, ""], [73, "        return rollup;"]], "deleted": [[5, "public class GaugeRollup extends SingleValueRollup {"], [7, "    public GaugeRollup withGauge(Number gauge) {"], [8, "        return (GaugeRollup) this.withValue(gauge);"], [9, "    }"], [15, "        else"], [16, "            return getValue().equals(((GaugeRollup)obj).getValue());"], [20, "        // return the one with the latest timestamp."], [21, "        int numSamples = 0;"], [22, "        Points.Point<GaugeRollup> latest = null;"], [23, "        for (Points.Point<GaugeRollup> point : input.getPoints().values()) {"], [24, "            if (latest == null)"], [25, "                latest = point;"], [26, "            else if (latest.getTimestamp() < point.getTimestamp())"], [27, "                latest = point;"], [28, "            numSamples += point.getData().getNumSamplesUnsafe();"], [30, "        GaugeRollup newGauge = new GaugeRollup().withGauge(latest.getData().getValue());"], [31, "        newGauge.numSamples = numSamples;"], [32, "        return newGauge;"]]}, "num_lines_added": 59, "num_lines_removed": 18}