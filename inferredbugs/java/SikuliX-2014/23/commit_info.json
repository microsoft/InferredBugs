{"hash": "a1b1e198baa3eb37622d5d6301c6cf10e272c1b5", "message": "revised: contentlist handling in setup", "file_num_lines": 1712, "diff_parsed": {"added": [[100, "      String vJava = System.getProperty(\"java.runtime.version\");"], [101, "      String vVM = System.getProperty(\"java.vm.version\");"], [102, "      String vClass = System.getProperty(\"java.class.version\");"], [103, "      String vSysArch = System.getProperty(\"os.arch\");"], [104, "      runTime.javaVersion = Integer.parseInt(vJava.substring(2, 3));"], [105, "      if (vSysArch.contains(\"64\")) {"], [106, "        runTime.javaArch = 64;"], [107, "      }"], [108, ""], [109, "      runTime.javaShow = String.format(\"java %d-%d version %s vm %s class %s arch %s\","], [110, "              runTime.javaVersion, runTime.javaArch, vJava, vVM, vClass, vSysArch);"], [111, ""], [112, "      if (Debug.getDebugLevel() > runTime.minLvl) {"], [113, "        runTime.dumpSysProps();"], [114, "      }"], [115, ""], [116, "      runTime.osVersion = runTime.osVersionSysProp;"], [117, "      String os = runTime.osNameSysProp.toLowerCase();"], [118, "      if (os.startsWith(\"windows\")) {"], [119, "        runTime.runningOn = theSystem.WIN;"], [120, "        runTime.sysName = \"windows\";"], [121, "        runTime.osName = \"Windows\";"], [122, "        runTime.runningWindows = true;"], [123, "      } else if (os.startsWith(\"mac\")) {"], [124, "        runTime.runningOn = theSystem.MAC;"], [125, "        runTime.sysName = \"mac\";"], [126, "        runTime.osName = \"Mac OSX\";"], [127, "        runTime.runningMac = true;"], [128, "      } else if (os.startsWith(\"linux\")) {"], [129, "        runTime.runningOn = theSystem.LUX;"], [130, "        runTime.sysName = \"linux\";"], [131, "        runTime.osName = \"Linux\";"], [132, "        runTime.runningLinux = true;"], [133, "      } else {"], [134, "        runTime.terminate(-1, \"running on not supported System: %s (%s)\", os, runTime.osVersion);"], [135, "      }"], [137, ""], [366, ""], [377, ""], [378, "  class LibsFilter implements FilenameFilter {"], [379, ""], [380, "    String sAccept = \"\";"], [381, ""], [385, ""], [388, "      if (dir.getPath().contains(sAccept)) {"], [389, "        return true;"], [390, "      }"], [395, ""], [430, "    }"], [444, "        fpJarLibs += sysName + \"/libs\" + javaArch;"], [447, "      }"], [452, "        String fSrcFolder = typ.toString();"], [453, "        if (Type.SETUP.toString().equals(fSrcFolder)) {"], [454, "          fSrcFolder = \"Setup\";"], [455, "        }"], [456, "        fpLibsFrom = fSxBaseJar.getPath().replace(fSrcFolder, \"Libs\" + sysShort) + \"/\";"], [463, ""], [641, ""], [665, ""], [1075, ""], [1078, "  public int SikuliVersionMinor;"], [1079, "  public int SikuliVersionSub;"], [1080, "  public int SikuliVersionBetaN;"], [1081, "  public String SikuliProjectVersionUsed = \"\";"], [1082, "  public String SikuliProjectVersion = \"\";"], [1083, "  public String SikuliVersionBuild;"], [1084, "  public String SikuliVersionType;"], [1085, "  public String SikuliVersionTypeText;"], [1086, "  public String downloadBaseDirBase;"], [1087, "  public String downloadBaseDirWeb;"], [1088, "  public String downloadBaseDir;"], [1089, "  // used for download of production versions"], [1090, "  private final String dlProdLink = \"https://launchpad.net/raiman/sikulix2013+/\";"], [1091, "  private final String dlProdLink1 = \".0\";"], [1092, "  private final String dlProdLink2 = \"/+download/\";"], [1093, "  // used for download of development versions (nightly builds)"], [1094, "  private final String dlDevLink = \"http://nightly.sikuli.de/\";"], [1095, "  public String SikuliRepo;"], [1096, "  public String SikuliLocalRepo = \"\";"], [1097, "  public String[] ServerList = {\"http://dl.dropboxusercontent.com/u/42895525/SikuliX\"};"], [1098, "  private String sversion;"], [1099, "  private String bversion;"], [1100, "  public String SikuliVersionDefault;"], [1101, "  public String SikuliVersionBeta;"], [1102, "  public String SikuliVersionDefaultIDE;"], [1103, "  public String SikuliVersionBetaIDE;"], [1104, "  public String SikuliVersionDefaultScript;"], [1105, "  public String SikuliVersionBetaScript;"], [1106, "  public String SikuliVersion;"], [1107, "  public String SikuliVersionIDE;"], [1108, "  public String SikuliVersionScript;"], [1109, "  public String SikuliJythonVersion;"], [1110, "  public String SikuliJythonVersion25 = \"2.5.4-rc1\";"], [1111, "  public String SikuliJythonMaven;"], [1112, "  public String SikuliJythonMaven25;"], [1113, "  public String SikuliJython;"], [1114, "  public String SikuliJRubyVersion;"], [1115, "  public String SikuliJRuby;"], [1116, "  public String SikuliJRubyMaven;"], [1117, "  public String dlMavenRelease = \"https://repo1.maven.org/maven2/\";"], [1118, "  public String dlMavenSnapshot = \"https://oss.sonatype.org/content/groups/public/\";"], [1119, ""], [1120, "  public Map<String, String> tessData = new HashMap<String, String>();"], [1121, ""], [1122, "  //TODO needed ???"], [1123, "  public final String libOpenCV = \"libopencv_java248\";"], [1128, ""], [1130, "    SikuliRepo = null;"], [1131, "    Properties prop = new Properties();"], [1132, "    String svf = \"sikulixversion.txt\";"], [1133, "    try {"], [1134, "      InputStream is;"], [1135, "      is = clsRef.getClassLoader().getResourceAsStream(\"Settings/\" + svf);"], [1139, "      prop.load(is);"], [1140, "      is.close();"], [1141, "      String svt = prop.getProperty(\"sikulixdev\");"], [1142, "      SikuliVersionMajor = Integer.decode(prop.getProperty(\"sikulixvmaj\"));"], [1143, "      SikuliVersionMinor = Integer.decode(prop.getProperty(\"sikulixvmin\"));"], [1144, "      SikuliVersionSub = Integer.decode(prop.getProperty(\"sikulixvsub\"));"], [1145, "      SikuliVersionBetaN = Integer.decode(prop.getProperty(\"sikulixbeta\"));"], [1146, "      String ssxbeta = \"\";"], [1147, "      if (SikuliVersionBetaN > 0) {"], [1148, "        ssxbeta = String.format(\"-Beta%d\", SikuliVersionBetaN);"], [1149, "      }"], [1150, "      SikuliVersionBuild = prop.getProperty(\"sikulixbuild\");"], [1151, "      log(lvl + 1, \"%s version from %s: %d.%d.%d%s build: %s\", svf,"], [1152, "              SikuliVersionMajor, SikuliVersionMinor, SikuliVersionSub, ssxbeta,"], [1153, "              SikuliVersionBuild, svt);"], [1154, "      sversion = String.format(\"%d.%d.%d\","], [1155, "              SikuliVersionMajor, SikuliVersionMinor, SikuliVersionSub);"], [1156, "      bversion = String.format(\"%d.%d.%d-Beta%d\","], [1157, "              SikuliVersionMajor, SikuliVersionMinor, SikuliVersionSub, SikuliVersionBetaN);"], [1158, "      SikuliVersionDefault = \"SikuliX \" + sversion;"], [1159, "      SikuliVersionBeta = \"Sikuli \" + bversion;"], [1160, "      SikuliVersionDefaultIDE = \"SikulixIDE \" + sversion;"], [1161, "      SikuliVersionBetaIDE = \"SikulixIDE \" + bversion;"], [1162, "      SikuliVersionDefaultScript = \"SikulixScript \" + sversion;"], [1163, "      SikuliVersionBetaScript = \"SikulixScript \" + bversion;"], [1164, ""], [1165, "      if (\"release\".equals(svt)) {"], [1166, "        downloadBaseDirBase = dlProdLink;"], [1167, "        downloadBaseDirWeb = downloadBaseDirBase + getVersionShortBasic() + dlProdLink1;"], [1168, "        downloadBaseDir = downloadBaseDirWeb + dlProdLink2;"], [1171, "      } else {"], [1172, "        downloadBaseDirBase = dlDevLink;"], [1173, "        downloadBaseDirWeb = dlDevLink;"], [1174, "        downloadBaseDir = dlDevLink;"], [1178, "      }"], [1179, "      if (SikuliVersionBetaN > 0) {"], [1180, "        SikuliVersion = SikuliVersionBeta;"], [1181, "        SikuliVersionIDE = SikuliVersionBetaIDE;"], [1182, "        SikuliVersionScript = SikuliVersionBetaScript;"], [1184, "      } else {"], [1185, "        SikuliVersion = SikuliVersionDefault;"], [1186, "        SikuliVersionIDE = SikuliVersionDefaultIDE;"], [1187, "        SikuliVersionScript = SikuliVersionDefaultScript;"], [1189, "      }"], [1190, "      SikuliProjectVersionUsed = prop.getProperty(\"sikulixvused\");"], [1191, "      SikuliProjectVersion = prop.getProperty(\"sikulixvproject\");"], [1202, "      SikuliLocalRepo = FileManager.slashify(prop.getProperty(\"sikulixlocalrepo\"), true);"], [1203, "      SikuliJythonVersion = prop.getProperty(\"sikulixvjython\");"], [1204, "      SikuliJythonMaven = \"org/python/jython-standalone/\""], [1205, "              + SikuliJythonVersion + \"/jython-standalone-\" + SikuliJythonVersion + \".jar\";"], [1206, "      SikuliJythonMaven25 = \"org/python/jython-standalone/\""], [1207, "              + SikuliJythonVersion25 + \"/jython-standalone-\" + SikuliJythonVersion25 + \".jar\";"], [1208, "      SikuliJython = SikuliLocalRepo + SikuliJythonMaven;"], [1209, "      SikuliJRubyVersion = prop.getProperty(\"sikulixvjruby\");"], [1210, "      SikuliJRubyMaven = \"org/jruby/jruby-complete/\""], [1211, "              + SikuliJRubyVersion + \"/jruby-complete-\" + SikuliJRubyVersion + \".jar\";"], [1212, "      SikuliJRuby = SikuliLocalRepo + SikuliJRubyMaven;"], [1220, "    } catch (Exception e) {"], [1221, "      Debug.error(\"Settings: load version file %s did not work\", svf);"], [1222, "      Sikulix.terminate(999);"], [1223, "    }"], [1224, "    tessData.put(\"eng\", \"http://tesseract-ocr.googlecode.com/files/tesseract-ocr-3.02.eng.tar.gz\");"], [1227, ""], [1234, "   * @param fpRessources path of the subtree relative to root"], [1278, ""], [1283, "   * @param fpRessources path of the subtree or file relative to root"], [1284, "   * @param fFolder folder where to export (if null, only list - no export)"], [1290, "    File faJar = new File(aJar);"], [1341, "      if (!content.startsWith(\"/\")) {"], [1342, "        content = \"/\" + content;"], [1343, "      }"], [1375, "    if (!content.startsWith(\"/\")) {"], [1376, "      content = \"/\" + content;"], [1377, "    }"], [1401, "    } catch (Exception ex) {"], [1402, "    }"], [1408, "    if (!folder.startsWith(\"/\")) {"], [1409, "      folder = \"/\" + folder;"], [1410, "    }"], [1430, "      files = doResourceListFolder(fFolder, files, filter);"], [1449, ""], [1451, "   * write the list as it is produced by calling extractResourcesToFolder to the given file with system line"], [1452, "   * separator<br>"], [1454, "   *"], [1470, "        PrintWriter aPW = new PrintWriter(target);"], [1481, "   * write the list as it is produced by calling extractResourcesToFolder to the given file with system line"], [1482, "   * separator<br>"], [1484, "   *"], [1497, "    String arrString[] = new String[contentList.size()];"], [1502, "        FileManager.deleteFileOrFolder(target);"], [1503, "        target.getParentFile().mkdirs();"], [1504, "        aPW = new PrintWriter(target);"], [1505, "      }"], [1506, "      int n = 0;"], [1507, "      for (String line : contentList) {"], [1508, "        arrString[n++] = line;"], [1509, "        if (targetFolder != null) {"], [1510, "          aPW.println(line);"], [1511, "        }"], [1512, "      }"], [1513, "      if (targetFolder != null) {"], [1514, "        aPW.close();"], [1515, "      }"], [1516, "    } catch (Exception ex) {"], [1517, "      log(-1, \"resourceListAsFile: %s:\\n%s\", target, ex);"], [1518, "    }"], [1519, "    return arrString;"], [1520, "  }"], [1521, ""], [1522, "  /**"], [1523, "   * write the list as it is produced by calling extractResourcesToFolder to the given file with system line"], [1524, "   * separator<br>"], [1525, "   * compact sikulixcontent format"], [1526, "   *"], [1527, "   * @param aJar absolute path to an existing jar or a string identifying the jar on classpath (no leading /)"], [1528, "   * @param folder path of the subtree relative to root with leading /"], [1529, "   * @param targetFolder the folder where to store the file sikulixcontent (if null, only list - no export)"], [1530, "   * @param filter implementation of interface FilenameFilter or null for no filtering"], [1531, "   * @return success"], [1532, "   */"], [1533, "  public String[] resourceListAsSikulixContentFromJar(String aJar, String folder, File targetFolder, FilenameFilter filter) {"], [1534, "    List<String> contentList = extractResourcesToFolderFromJar(aJar, folder, null, filter);"], [1535, "    if (contentList == null) {"], [1536, "      log(-1, \"resourceListAsSikulixContentFromJar: did not work: %s\", folder);"], [1537, "      return null;"], [1538, "    }"], [1539, "    File target = null;"], [1540, "    String arrString[] = new String[contentList.size()];"], [1541, "    try {"], [1542, "      PrintWriter aPW = null;"], [1543, "      if (targetFolder != null) {"], [1544, "        target = new File(targetFolder, fpContent);"], [1545, "        FileManager.deleteFileOrFolder(target);"], [1547, "        aPW = new PrintWriter(target);"], [1568, "   *"], [1576, ""], [1580, "   *"], [1583, "   * @param separator to be used to separate the entries"], [1613, ""], [1651, "      files.addAll(Arrays.asList(contentList));"], [1709, "            if (!subFolder.isEmpty()) {"], [1728, ""], [1746, ""], [1772, "        }"], [1777, "          if (zPath.length() == fpRessource.length() - 1) {"], [1804, "  }"], [1818, ""]], "deleted": [[100, "    String vJava = System.getProperty(\"java.runtime.version\");"], [101, "    String vVM = System.getProperty(\"java.vm.version\");"], [102, "    String vClass = System.getProperty(\"java.class.version\");"], [103, "    String vSysArch = System.getProperty(\"os.arch\");"], [104, "    runTime.javaVersion = Integer.parseInt(vJava.substring(2, 3));"], [105, "    if (vSysArch.contains(\"64\")) {"], [106, "      runTime.javaArch = 64;"], [107, "    }"], [108, ""], [109, "    runTime.javaShow = String.format(\"java %d-%d version %s vm %s class %s arch %s\","], [110, "            runTime.javaVersion, runTime.javaArch, vJava, vVM, vClass, vSysArch);"], [111, ""], [112, "    if (Debug.getDebugLevel() > runTime.minLvl) {"], [113, "      runTime.dumpSysProps();"], [114, "    }"], [115, ""], [116, "    runTime.osVersion = runTime.osVersionSysProp;"], [117, "    String os = runTime.osNameSysProp.toLowerCase();"], [118, "    if (os.startsWith(\"windows\")) {"], [119, "      runTime.runningOn = theSystem.WIN;"], [120, "      runTime.sysName = \"windows\";"], [121, "      runTime.osName = \"Windows\";"], [122, "      runTime.runningWindows = true;"], [123, "    } else if (os.startsWith(\"mac\")) {"], [124, "      runTime.runningOn = theSystem.MAC;"], [125, "      runTime.sysName = \"mac\";"], [126, "      runTime.osName = \"Mac OSX\";"], [127, "      runTime.runningMac = true;"], [128, "    } else if (os.startsWith(\"linux\")) {"], [129, "      runTime.runningOn = theSystem.LUX;"], [130, "      runTime.sysName = \"linux\";"], [131, "      runTime.osName = \"Linux\";"], [132, "      runTime.runningLinux = true;"], [133, "    } else {"], [134, "      runTime.terminate(-1, \"running on not supported System: %s (%s)\", os, runTime.osVersion);"], [135, "    }"], [137, ""], [280, ""], [367, ""], [378, ""], [379, "  class LibsFilter implements FilenameFilter {"], [380, "    String sAccept = \"\";"], [386, "      if (dir.getPath().contains(sAccept)) return true;"], [391, ""], [426, "    }"], [440, "        fpJarLibs += sysName + \"/libs\" + javaArch;"], [443, "      }"], [448, "          String fSrcFolder = typ.toString();"], [449, "          if (Type.SETUP.toString().equals(fSrcFolder)) {"], [450, "            fSrcFolder = \"Setup\";"], [451, "          }"], [452, "          fpLibsFrom = fSxBaseJar.getPath().replace(fSrcFolder, \"Libs\" + sysShort) + \"/\";"], [459, ""], [637, ""], [661, ""], [1071, ""], [1074, "\tpublic int SikuliVersionMinor;"], [1075, "\tpublic int SikuliVersionSub;"], [1076, "\tpublic int SikuliVersionBetaN;"], [1077, "\tpublic String SikuliProjectVersionUsed = \"\";"], [1078, "\tpublic String SikuliProjectVersion = \"\";"], [1079, "\tpublic String SikuliVersionBuild;"], [1080, "\tpublic String SikuliVersionType;"], [1081, "\tpublic String SikuliVersionTypeText;"], [1082, "\tpublic String downloadBaseDirBase;"], [1083, "\tpublic String downloadBaseDirWeb;"], [1084, "\tpublic String downloadBaseDir;"], [1085, "\t// used for download of production versions"], [1086, "\tprivate final String dlProdLink = \"https://launchpad.net/raiman/sikulix2013+/\";"], [1087, "\tprivate final String dlProdLink1 = \".0\";"], [1088, "\tprivate final String dlProdLink2 = \"/+download/\";"], [1089, "\t// used for download of development versions (nightly builds)"], [1090, "\tprivate final String dlDevLink = \"http://nightly.sikuli.de/\";"], [1091, "\tpublic String SikuliRepo;"], [1092, "\tpublic String SikuliLocalRepo = \"\";"], [1093, "\tpublic String[] ServerList = {\"http://dl.dropboxusercontent.com/u/42895525/SikuliX\"};"], [1094, "\tprivate String sversion;"], [1095, "\tprivate String bversion;"], [1096, "\tpublic String SikuliVersionDefault;"], [1097, "\tpublic String SikuliVersionBeta;"], [1098, "\tpublic String SikuliVersionDefaultIDE;"], [1099, "\tpublic String SikuliVersionBetaIDE;"], [1100, "\tpublic String SikuliVersionDefaultScript;"], [1101, "\tpublic String SikuliVersionBetaScript;"], [1102, "\tpublic String SikuliVersion;"], [1103, "\tpublic String SikuliVersionIDE;"], [1104, "\tpublic String SikuliVersionScript;"], [1105, "\tpublic String SikuliJythonVersion;"], [1106, "\tpublic String SikuliJythonVersion25 = \"2.5.4-rc1\";"], [1107, "\tpublic String SikuliJythonMaven;"], [1108, "\tpublic String SikuliJythonMaven25;"], [1109, "\tpublic String SikuliJython;"], [1110, "\tpublic String SikuliJRubyVersion;"], [1111, "\tpublic String SikuliJRuby;"], [1112, "\tpublic String SikuliJRubyMaven;"], [1113, "\tpublic String dlMavenRelease = \"https://repo1.maven.org/maven2/\";"], [1114, "\tpublic String dlMavenSnapshot = \"https://oss.sonatype.org/content/groups/public/\";"], [1115, ""], [1116, "\tpublic Map<String, String> tessData = new HashMap<String, String>();"], [1117, ""], [1118, "\t//TODO needed ???"], [1119, "\tpublic final String libOpenCV = \"libopencv_java248\";"], [1124, ""], [1126, "\t\tSikuliRepo = null;"], [1127, "\t\tProperties prop = new Properties();"], [1128, "\t\tString svf = \"sikulixversion.txt\";"], [1129, "\t\ttry {"], [1130, "\t\t\tInputStream is;"], [1131, "\t\t\tis = clsRef.getClassLoader().getResourceAsStream(\"Settings/\" + svf);"], [1135, "\t\t\tprop.load(is);"], [1136, "\t\t\tis.close();"], [1137, "\t\t\tString svt = prop.getProperty(\"sikulixdev\");"], [1138, "\t\t\tSikuliVersionMajor = Integer.decode(prop.getProperty(\"sikulixvmaj\"));"], [1139, "\t\t\tSikuliVersionMinor = Integer.decode(prop.getProperty(\"sikulixvmin\"));"], [1140, "\t\t\tSikuliVersionSub = Integer.decode(prop.getProperty(\"sikulixvsub\"));"], [1141, "\t\t\tSikuliVersionBetaN = Integer.decode(prop.getProperty(\"sikulixbeta\"));"], [1142, "\t\t\tString ssxbeta = \"\";"], [1143, "\t\t\tif (SikuliVersionBetaN > 0) {"], [1144, "\t\t\t\tssxbeta = String.format(\"-Beta%d\", SikuliVersionBetaN);"], [1145, "\t\t\t}"], [1146, "\t\t\tSikuliVersionBuild = prop.getProperty(\"sikulixbuild\");"], [1147, "\t\t\tlog(lvl + 1, \"%s version from %s: %d.%d.%d%s build: %s\", svf,"], [1148, "\t\t\t\t\t\t\tSikuliVersionMajor, SikuliVersionMinor, SikuliVersionSub, ssxbeta,"], [1149, "\t\t\t\t\t\t\tSikuliVersionBuild, svt);"], [1150, "\t\t\tsversion = String.format(\"%d.%d.%d\","], [1151, "\t\t\t\t\t\t\tSikuliVersionMajor, SikuliVersionMinor, SikuliVersionSub);"], [1152, "\t\t\tbversion = String.format(\"%d.%d.%d-Beta%d\","], [1153, "\t\t\t\t\t\t\tSikuliVersionMajor, SikuliVersionMinor, SikuliVersionSub, SikuliVersionBetaN);"], [1154, "\t\t\tSikuliVersionDefault = \"SikuliX \" + sversion;"], [1155, "\t\t\tSikuliVersionBeta = \"Sikuli \" + bversion;"], [1156, "\t\t\tSikuliVersionDefaultIDE = \"SikulixIDE \" + sversion;"], [1157, "\t\t\tSikuliVersionBetaIDE = \"SikulixIDE \" + bversion;"], [1158, "\t\t\tSikuliVersionDefaultScript = \"SikulixScript \" + sversion;"], [1159, "\t\t\tSikuliVersionBetaScript = \"SikulixScript \" + bversion;"], [1160, ""], [1161, "\t\t\tif (\"release\".equals(svt)) {"], [1162, "\t\t\t\tdownloadBaseDirBase = dlProdLink;"], [1163, "\t\t\t\tdownloadBaseDirWeb = downloadBaseDirBase + getVersionShortBasic() + dlProdLink1;"], [1164, "\t\t\t\tdownloadBaseDir = downloadBaseDirWeb + dlProdLink2;"], [1167, "\t\t\t} else {"], [1168, "\t\t\t\tdownloadBaseDirBase = dlDevLink;"], [1169, "\t\t\t\tdownloadBaseDirWeb = dlDevLink;"], [1170, "\t\t\t\tdownloadBaseDir = dlDevLink;"], [1174, "\t\t\t}"], [1175, "\t\t\tif (SikuliVersionBetaN > 0) {"], [1176, "\t\t\t\tSikuliVersion = SikuliVersionBeta;"], [1177, "\t\t\t\tSikuliVersionIDE = SikuliVersionBetaIDE;"], [1178, "\t\t\t\tSikuliVersionScript = SikuliVersionBetaScript;"], [1180, "\t\t\t} else {"], [1181, "\t\t\t\tSikuliVersion = SikuliVersionDefault;"], [1182, "\t\t\t\tSikuliVersionIDE = SikuliVersionDefaultIDE;"], [1183, "\t\t\t\tSikuliVersionScript = SikuliVersionDefaultScript;"], [1185, "\t\t\t}"], [1186, "\t\t\tSikuliProjectVersionUsed = prop.getProperty(\"sikulixvused\");"], [1187, "\t\t\tSikuliProjectVersion = prop.getProperty(\"sikulixvproject\");"], [1198, "\t\t\tSikuliLocalRepo = FileManager.slashify(prop.getProperty(\"sikulixlocalrepo\"), true);"], [1199, "\t\t\tSikuliJythonVersion = prop.getProperty(\"sikulixvjython\");"], [1200, "\t\t\tSikuliJythonMaven = \"org/python/jython-standalone/\" +"], [1201, "\t\t\t\t\t\t\t SikuliJythonVersion + \"/jython-standalone-\" + SikuliJythonVersion + \".jar\";"], [1202, "\t\t\tSikuliJythonMaven25 = \"org/python/jython-standalone/\" +"], [1203, "\t\t\t\t\t\t\t SikuliJythonVersion25 + \"/jython-standalone-\" + SikuliJythonVersion25 + \".jar\";"], [1204, "\t\t\tSikuliJython = SikuliLocalRepo + SikuliJythonMaven;"], [1205, "\t\t\tSikuliJRubyVersion = prop.getProperty(\"sikulixvjruby\");"], [1206, "\t\t\tSikuliJRubyMaven = \"org/jruby/jruby-complete/\" +"], [1207, "\t\t\t\t\t\t\t SikuliJRubyVersion + \"/jruby-complete-\" + SikuliJRubyVersion + \".jar\";"], [1208, "\t\t\tSikuliJRuby = SikuliLocalRepo + SikuliJRubyMaven;"], [1216, "\t\t} catch (Exception e) {"], [1217, "\t\t\tDebug.error(\"Settings: load version file %s did not work\", svf);"], [1218, "\t\t\tSikulix.terminate(999);"], [1219, "\t\t}"], [1220, "\t\ttessData.put(\"eng\", \"http://tesseract-ocr.googlecode.com/files/tesseract-ocr-3.02.eng.tar.gz\");"], [1223, ""], [1225, ""], [1231, "   * @param fpRessources path of the subtree relative to root"], [1275, ""], [1280, "   * @param fpRessources path of the subtree or file relative to root"], [1281, "   * @param fFolder folder where to export  (if null, only list - no export)"], [1287, "    File faJar = new File(aJar);"], [1338, "      if (!content.startsWith(\"/\")) content = \"/\" + content;"], [1370, "    if (!content.startsWith(\"/\")) content = \"/\" + content;"], [1394, "    } catch (Exception ex) {}"], [1400, "    if (!folder.startsWith(\"/\")) folder = \"/\" + folder;"], [1420, "      files =  doResourceListFolder(fFolder, files, filter);"], [1439, ""], [1441, "   * write the list produced by calling extractResourcesToFolder to the given file with system line separator<br>"], [1458, "        PrintWriter aPW =new PrintWriter(target);"], [1469, "   * write the list produced by calling extractResourcesToFolder to the given file with system line separator<br>"], [1471, "   *"], [1484, "    String arrString[] = new String[contentList.size()];"], [1489, "        FileManager.deleteFileOrFolder(target.getAbsolutePath());"], [1491, "        aPW =new PrintWriter(target);"], [1519, ""], [1525, "   * @param separator to be used to separate the entries"], [1555, ""], [1593, "      files.addAll(Arrays.asList(contentList));"], [1651, "            if (!subFolder.isEmpty()) {"], [1670, ""], [1688, ""], [1714, "        }"], [1719, "          if (zPath.length() == fpRessource.length()-1) {"], [1746, "  }"], [1760, ""]]}, "num_lines_added": 260, "num_lines_removed": 202}