  public <PSI> Match wait(PSI target, double timeout) throws FindFailed {
    lastMatch = null;
    FindFailed shouldAbort = null;
    RepeatableFind rf = new RepeatableFind(target, null);
    Image img = rf._image;
    String targetStr = img.getName();
    Boolean response = true;
    if (!img.isValid() && img.hasIOException()) {
      response = handleImageMissing(img, false);
    }
    while (null != response && response) {
      log(lvl, "find: waiting %.1f secs for %s to appear in %s", timeout, targetStr, this.toStringShort());
      if (rf.repeat(timeout)) {
        lastMatch = rf.getMatch();
        lastMatch.setImage(img);
        if (img != null) {
          img.setLastSeen(lastMatch.getRect(), lastMatch.getScore());
        }
        log(lvl, "find: %s has appeared \nat %s", targetStr, lastMatch);
        return lastMatch;
      } else {
        response = handleFindFailed(target, img, false);
        if (null == response) {
          shouldAbort = FindFailed.createdefault(this, img);
          break;
        } else if (response) {
          if (img.isRecaptured()) {
            rf = new RepeatableFind(target, img);
          }
          continue;
        }
        break;
      }
    }
    log(lvl, "find: %s has not appeared [%d msec]", targetStr, lastFindTime);
    if (shouldAbort != null) {
      throw shouldAbort;
    }
    return lastMatch;
  }