{"hash": "216bcec3935e0b473d71404078cfdcb980c6e7d6", "message": "revised: FileManager.unzip, now available as unzip(from, to) in Jython scripts (can be used to unzip jar files)", "file_num_lines": 1415, "diff_parsed": {"added": [[562, "  public static boolean unzip(String inpZip, String target) {"], [563, "    return unzip(new File(inpZip), new File(target));"], [569, "    log(lvl, \"unzip: from: %s\\nto: %s\", fZip, fTarget);"], [572, "      if (!new File(fpZip).exists()) {"], [573, "        throw new IOException();"], [575, "    } catch (IOException ex) {"], [576, "      log(-1, \"unzip: source not found:\\n%s\\n%s\", fpZip, ex);"], [577, "      return false;"], [578, "    }"], [579, "    try {"], [581, "      deleteFileOrFolder(fpTarget);"], [582, "      new File(fpTarget).mkdirs();"], [583, "      if (!new File(fpTarget).exists()) {"], [584, "        throw new IOException();"], [586, "    } catch (IOException ex) {"], [587, "      log(-1, \"unzip: target cannot be created:\\n%s\\n%s\", fpTarget, ex);"], [588, "      return false;"], [589, "    }"], [590, "    ZipInputStream inpZip = null;"], [591, "    ZipEntry entry = null;"], [592, "    try {"], [594, "      inpZip = new ZipInputStream(new BufferedInputStream(new FileInputStream(fZip)));"], [595, "      while ((entry = inpZip.getNextEntry()) != null) {"], [596, "        if (entry.getName().endsWith(\"/\") || entry.getName().endsWith(\"\\\\\")) {"], [597, "          new File(fpTarget, entry.getName()).mkdir();"], [598, "          continue;"], [599, "        }"], [602, "        File outFile = new File(fpTarget, entry.getName());"], [603, "        File outFileParent = outFile.getParentFile();"], [604, "        if (! outFileParent.exists()) {"], [605, "          outFileParent.mkdirs();"], [606, "        }"], [607, "        FileOutputStream fos = new FileOutputStream(outFile);"], [609, "        while ((count = inpZip.read(data, 0, BUF_SIZE)) != -1) {"], [615, "      log(-1, \"unzip: not possible: source:\\n%s\\ntarget:\\n%s\\n(%s)%s\","], [616, "          fpZip, fpTarget, entry.getName(), ex);"], [617, "      return false;"], [618, "    } finally {"], [619, "      try {"], [620, "        inpZip.close();"], [621, "      } catch (IOException ex) {"], [622, "        log(-1, \"unzip: closing source:\\n%s\\n%s\", fpZip, ex);"], [623, "      }"]], "deleted": [[562, "  public static void unzip(String zip, String path) throws IOException, FileNotFoundException {"], [563, "    final int BUF_SIZE = 2048;"], [564, "    FileInputStream fis = new FileInputStream(zip);"], [565, "    ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));"], [566, "    ZipEntry entry;"], [567, "    while ((entry = zis.getNextEntry()) != null) {"], [568, "      int count;"], [569, "      byte data[] = new byte[BUF_SIZE];"], [570, "      FileOutputStream fos = new FileOutputStream("], [571, "              new File(path, entry.getName()));"], [572, "      BufferedOutputStream dest = new BufferedOutputStream(fos, BUF_SIZE);"], [573, "      while ((count = zis.read(data, 0, BUF_SIZE)) != -1) {"], [574, "        dest.write(data, 0, count);"], [575, "      }"], [576, "      dest.close();"], [577, "    }"], [578, "    zis.close();"], [586, "      if (!fZip.exists()) {"], [587, "        log(-1, \"unzip: source not found:\\n%s\", fpZip);"], [588, "        return false;"], [590, "      fTarget.mkdirs();"], [592, "      if (!fZip.exists()) {"], [593, "        log(-1, \"unzip: target not found:\\n%s\", fTarget);"], [594, "        return false;"], [597, "      ZipInputStream isZip = new ZipInputStream(new BufferedInputStream(new FileInputStream(fZip)));"], [598, "      ZipEntry entry;"], [599, "      while ((entry = isZip.getNextEntry()) != null) {"], [602, "        FileOutputStream fos = new FileOutputStream(new File(fTarget, entry.getName()));"], [604, "        while ((count = isZip.read(data, 0, BUF_SIZE)) != -1) {"], [609, "      isZip.close();"], [611, "      log(-1, \"unzip: not possible: source:\\n%s\\ntarget:\\n%s\\n%s\", fpZip, fpTarget, ex);"]]}, "num_lines_added": 43, "num_lines_removed": 31}