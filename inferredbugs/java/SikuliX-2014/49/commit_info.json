{"hash": "9e11c6c48767430de965b91788df0d40e43951c9", "message": "intermediate: revising FindFailedPrompt and FindFailed handling", "file_num_lines": 2404, "diff_parsed": {"added": [[2146, "  private <PSI> Boolean handleFindFailed(PSI target, Image img, boolean isExists) {"], [2160, "    if (FindFailedResponse.ABORT.equals(response)) {"], [2161, "      state = null;"], [2162, "      if (isExists) {"], [2163, "        state = false;"], [2164, "      }"], [2165, "    }  else if (FindFailedResponse.SKIP.equals(response)) {"], [2166, "      state = false;"], [2167, "    }  else if (FindFailedResponse.RETRY.equals(response)) {"], [2168, "      state = true;"], [2169, "    }"], [2172, "    } else {"], [2173, "      return state;"], [2281, "        response = handleFindFailed(target, img, false);"], [2323, "      log(lvl, \"exists: waiting %.1f secs for %s to appear in %s\", timeout, targetStr, this.toStringShort());"], [2324, "      if (rf.repeat(timeout)) {"], [2325, "        lastMatch = rf.getMatch();"], [2326, "        lastMatch.setImage(img);"], [2327, "        if (img != null) {"], [2328, "          img.setLastSeen(lastMatch.getRect(), lastMatch.getScore());"], [2329, "        }"], [2330, "        log(lvl, \"exists: %s has appeared \\nat %s\", targetStr, lastMatch);"], [2331, "        return lastMatch;"], [2332, "      } else {"], [2333, "        response = handleFindFailed(target, img, true);"], [2397, "      if (!handleFindFailed(target, img, false)) {"], [2642, "    FindFailed shouldAbort = null;"], [2643, "    RepeatableFind rf = new RepeatableFind(target, null);"], [2644, "    Image img = rf._image;"], [2645, "    String targetStr = img.getName();"], [2646, "    Boolean response = true;"], [2647, "    if (!img.isValid() && img.hasIOException()) {"], [2648, "      response = handleImageMissing(img, false);"], [2650, "    while (null != response && response) {"], [2651, "      log(lvl, \"find: waiting %.1f secs for %s to appear in %s\", timeout, targetStr, this.toStringShort());"], [2652, "      if (rf.repeat(timeout)) {"], [2654, "        lastMatch.setImage(img);"], [2655, "        if (img != null) {"], [2656, "          img.setLastSeen(lastMatch.getRect(), lastMatch.getScore());"], [2659, "        return lastMatch;"], [2660, "      } else {"], [2661, "        response = handleFindFailed(target, img, false);"], [2662, "        if (null == response) {"], [2663, "          shouldAbort = FindFailed.createdefault(this, img);"], [2664, "          break;"], [2665, "        } else if (response) {"], [2666, "          if (img.isRecaptured()) {"], [2667, "            rf = new RepeatableFind(target, img);"], [2668, "          }"], [2669, "          continue;"], [2670, "        }"], [2673, "    }"], [2674, "    log(lvl, \"find: %s has not appeared [%d msec]\", targetStr, lastFindTime);"], [2675, "    if (shouldAbort != null) {"], [2676, "      throw shouldAbort;"]], "deleted": [[2146, "  private <PSI> Boolean handleFindFailed(PSI target, Image img) {"], [2269, "        response = handleFindFailed(target, img);"], [2311, "        log(lvl, \"exists: waiting %.1f secs for %s to appear in %s\", timeout, targetStr, this.toStringShort());"], [2312, "        if (rf.repeat(timeout)) {"], [2313, "          lastMatch = rf.getMatch();"], [2314, "          lastMatch.setImage(img);"], [2315, "          if (img != null) {"], [2316, "            img.setLastSeen(lastMatch.getRect(), lastMatch.getScore());"], [2317, "          }"], [2318, "          log(lvl, \"exists: %s has appeared \\nat %s\", targetStr, lastMatch);"], [2319, "          return lastMatch;"], [2320, "        } else {"], [2321, "        response = handleFindFailed(target, img);"], [2385, "      if (!handleFindFailed(target, img)) {"], [2629, "    RepeatableFind rf;"], [2631, "    //Image img = null;"], [2632, "    String targetStr = target.toString();"], [2633, "    if (target instanceof String) {"], [2634, "      targetStr = targetStr.trim();"], [2636, "    while (true) {"], [2637, "      try {"], [2638, "        log(lvl, \"find: waiting %.1f secs for %s to appear in %s\", timeout, targetStr, this.toStringShort());"], [2639, "        rf = new RepeatableFind(target, null);"], [2640, "        rf.repeat(timeout);"], [2642, "      } catch (Exception ex) {"], [2643, "        if (ex instanceof IOException) {"], [2644, "        }"], [2645, "        throw new FindFailed(ex.getMessage());"], [2646, "      }"], [2647, "      if (lastMatch != null) {"], [2648, "        lastMatch.setImage(rf._image);"], [2649, "        if (rf._image != null) {"], [2650, "          rf._image.setLastSeen(lastMatch.getRect(), lastMatch.getScore());"], [2655, "      Image img = rf._image;"], [2656, "      if (handleImageMissing(img, false)) {"], [2657, "        continue;"], [2658, "      }"], [2659, "      log(lvl, \"find: %s has not appeared [%d msec]\", targetStr, lastFindTime);"], [2660, "      if (!handleFindFailed(target, img)) {"], [2661, "        return null;"], [2662, "      }"]]}, "num_lines_added": 55, "num_lines_removed": 41}