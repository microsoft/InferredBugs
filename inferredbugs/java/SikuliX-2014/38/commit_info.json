{"hash": "3ec6b228f99558a686b27ba9b602a57e11ea9dec", "message": "fixed: possible problem with setup running with proxy", "file_num_lines": 1382, "diff_parsed": {"added": [[67, "  public static int tryGetFileSize(URL aUrl) {"], [71, "        conn = (HttpURLConnection) aUrl.openConnection(getProxy());"], [73, "        conn = (HttpURLConnection) aUrl.openConnection();"], [81, "      return 0;"], [83, "      if (conn != null) {"], [84, "        conn.disconnect();"], [85, "      }"], [89, "\tpublic static int isUrlUseabel(String sURL) {"], [90, "\t\ttry {"], [91, "\t\t\treturn isUrlUseabel(new URL(sURL));"], [92, "\t\t} catch (Exception ex) {"], [93, "\t\t\treturn -1;"], [94, "\t\t}"], [95, "\t}"], [96, ""], [97, "\tpublic static int isUrlUseabel(URL aURL) {"], [98, "    HttpURLConnection conn = null;"], [99, "\t\ttry {"], [100, "//\t\t\tHttpURLConnection.setFollowRedirects(false);"], [101, "\t    if (getProxy() != null) {"], [102, "    \t\tconn = (HttpURLConnection) aURL.openConnection(getProxy());"], [103, "      } else {"], [104, "    \t\tconn = (HttpURLConnection) aURL.openConnection();"], [105, "      }"], [106, "//\t\t\tcon.setInstanceFollowRedirects(false);"], [107, "\t\t\tconn.setRequestMethod(\"HEAD\");"], [108, "\t\t\tint retval = conn.getResponseCode();"], [109, "//\t\t\t\tHttpURLConnection.HTTP_BAD_METHOD 405"], [110, "//\t\t\t\tHttpURLConnection.HTTP_NOT_FOUND 404"], [111, "\t\t\tif (retval == HttpURLConnection.HTTP_OK) {"], [112, "\t\t\t\treturn 1;"], [113, "\t\t\t} else if (retval == HttpURLConnection.HTTP_NOT_FOUND) {"], [114, "\t\t\t\treturn 0;"], [115, "\t\t\t} else if (retval == HttpURLConnection.HTTP_FORBIDDEN) {"], [116, "\t\t\t\treturn 0;"], [117, "\t\t\t} else {"], [118, "\t\t\t\treturn -1;"], [119, "\t\t\t}"], [120, "\t\t} catch (Exception ex) {"], [121, "\t\t\treturn -1;"], [122, "    } finally {"], [123, "      if (conn != null) {"], [124, "        conn.disconnect();"], [125, "      }"], [126, "    }"], [127, "\t}"], [128, ""], [320, "      log(-1, \"download to string: bad URL:\\n%s\", src);"], [323, "    return downloadURLtoString(url);"], [327, "    String content = null;"], [329, "    log(lvl, \"download to string from:\\n%s,\", uSrc);"], [339, "        content += (new String(Arrays.copyOfRange(buffer, 0, bytesRead), Charset.forName(\"utf-8\")));"], [343, "      content = null;"], [352, "    return content;"]], "deleted": [[67, "  public static int tryGetFileSize(URL url) {"], [71, "        conn = (HttpURLConnection) url.openConnection(getProxy());"], [73, "        conn = (HttpURLConnection) url.openConnection();"], [81, "//      log0(-1, \"Download: getFileSize: not accessible:\\n\" + ex.getMessage());"], [82, "      return -1;"], [84, "      conn.disconnect();"], [179, "\t\t\tif (srcLength < 0) {"], [180, "\t\t\t\tsrcLength = 0;"], [181, "\t\t\t}"], [282, "      log(-1, \"download: bad URL: \" + src);"], [285, "    String[] path = url.getPath().split(\"/\");"], [286, "    String filename = path[path.length - 1];"], [287, "    String target = \"\";"], [288, "    int srcLength = 1;"], [289, "    int srcLengthKB = 0;"], [290, "\t\tint totalBytesRead = 0;"], [291, "\t\tsrcLength = tryGetFileSize(url);"], [292, "\t\tif (srcLength > 0) {"], [293, "\t\t\tsrcLengthKB = (int) (srcLength / 1024);"], [294, "\t\t\tlog(lvl, \"Downloading %s having %d KB\", filename, srcLengthKB);"], [295, "\t\t\tInputStream reader = null;"], [296, "\t\t\ttry {"], [297, "\t\t\t\tif (getProxy() != null) {"], [298, "\t\t\t\t\treader = url.openConnection(getProxy()).getInputStream();"], [299, "\t\t\t\t} else {"], [300, "\t\t\t\t\treader = url.openConnection().getInputStream();"], [301, "\t\t\t\t}"], [302, "          byte[] buffer = new byte[DOWNLOAD_BUFFER_SIZE];"], [303, "          int bytesRead = 0;"], [304, "\t\t      while ((bytesRead = reader.read(buffer)) > 0) {"], [305, "            totalBytesRead += bytesRead;"], [306, "\t\t\t\t\t\ttarget += (new String(Arrays.copyOfRange(buffer, 0, bytesRead), Charset.forName(\"utf-8\")));"], [307, "          }"], [308, "\t\t\t} catch (Exception ex) {"], [309, "\t\t\t\tlog(-1, \"problems while downloading\\n\" + ex.getMessage());"], [310, "\t\t\t\ttarget= null;"], [311, "\t\t\t} finally {"], [312, "\t\t\t\tif (reader != null) {"], [313, "\t\t\t\t\ttry {"], [314, "\t\t\t\t\t\treader.close();"], [315, "\t\t\t\t\t} catch (IOException ex) {"], [316, "\t\t\t\t\t}"], [317, "\t\t\t\t}"], [318, "\t\t\t}"], [319, "    }"], [320, "    return target;"], [324, "    String target = \"\";"], [335, "        target += (new String(Arrays.copyOfRange(buffer, 0, bytesRead), Charset.forName(\"utf-8\")));"], [339, "      target = null;"], [348, "    return target;"], [932, "\tpublic static int isUrlUseabel(String sURL) {"], [933, "\t\ttry {"], [934, "\t\t\treturn isUrlUseabel(new URL(sURL));"], [935, "\t\t} catch (Exception ex) {"], [936, "\t\t\treturn -1;"], [937, "\t\t}"], [938, "\t}"], [939, ""], [940, "\tpublic static int isUrlUseabel(URL aURL) {"], [941, "\t\ttry {"], [942, "//\t\t\tHttpURLConnection.setFollowRedirects(false);"], [943, "\t\t\tHttpURLConnection con = (HttpURLConnection) aURL.openConnection();"], [944, "//\t\t\tcon.setInstanceFollowRedirects(false);"], [945, "\t\t\tcon.setRequestMethod(\"HEAD\");"], [946, "\t\t\tint retval = con.getResponseCode();"], [947, "//\t\t\t\tHttpURLConnection.HTTP_BAD_METHOD 405"], [948, "//\t\t\t\tHttpURLConnection.HTTP_NOT_FOUND 404"], [949, "\t\t\tif (retval == HttpURLConnection.HTTP_OK) {"], [950, "\t\t\t\treturn 1;"], [951, "\t\t\t} else if (retval == HttpURLConnection.HTTP_NOT_FOUND) {"], [952, "\t\t\t\treturn 0;"], [953, "\t\t\t} else if (retval == HttpURLConnection.HTTP_FORBIDDEN) {"], [954, "\t\t\t\treturn 0;"], [955, "\t\t\t} else {"], [956, "\t\t\t\treturn -1;"], [957, "\t\t\t}"], [958, "\t\t} catch (Exception ex) {"], [959, "\t\t\treturn -1;"], [960, "\t\t}"], [961, ""], [962, "\t}"], [963, ""]]}, "num_lines_added": 54, "num_lines_removed": 82}