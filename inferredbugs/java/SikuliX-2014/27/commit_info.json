{"hash": "2da24f3e55c2c303df0776efa8369209359280cf", "message": "revised: Image: made handling of cachesize threadsafe", "file_num_lines": 818, "diff_parsed": {"added": [[83, "  private static long currentMemory = 0;"], [84, ""], [85, "  private static synchronized long currentMemoryChange(long size, long max) {"], [86, "    long maxMemory = max;"], [87, "    if (max > -1) {"], [88, "      maxMemory = Settings.getImageCache() * MB;"], [89, "      currentMemory += size;"], [90, "    }"], [91, "    if (currentMemory > maxMemory) {"], [92, "      Image first;"], [93, "      while (images.size() > 0 && currentMemory > maxMemory) {"], [94, "        first = images.remove(0);"], [95, "        first.bimg = null;"], [96, "        currentMemory -= first.bsize;"], [97, "      }"], [98, "      if (maxMemory == 0) {"], [99, "        currentMemory = 0;"], [100, "      } else {"], [101, "        currentMemory = Math.max(0, currentMemory);"], [102, "      }"], [103, "    }"], [104, "    if (size < 0) {"], [105, "      currentMemory = Math.max(0, currentMemory);"], [106, "    }"], [107, "    return currentMemory;"], [108, "  }"], [109, ""], [110, "  private static long currentMemoryUp(long size) {"], [111, "    return currentMemoryChange(size, -1);"], [112, "  }"], [113, ""], [114, "  private static long currentMemoryDown(long size) {"], [115, "    currentMemory -= size;"], [116, "    currentMemory = Math.max(0, currentMemory);"], [117, "    return currentMemoryChange(-size, -1);"], [118, "  }"], [119, "  private static long currentMemoryDownUp(int sizeOld, int sizeNew) {"], [120, "    currentMemoryDown(sizeOld);"], [121, "    return currentMemoryUp(sizeNew);"], [122, "  }"], [123, ""], [124, "  private static boolean isCaching() {"], [125, "    return Settings.getImageCache() > 0;"], [126, "  }"], [127, ""], [128, "  public static void clearCache(int maxSize) {"], [129, "    currentMemoryChange(0, maxSize);"], [130, "  }"], [131, ""], [132, "  public static void reload(String fpImage) {"], [133, "    URL uImage = FileManager.makeURL(fpImage);"], [134, "    if (imageFiles.containsKey(uImage)) {"], [135, "      Image image = imageFiles.get(uImage);"], [136, "      int sizeOld = image.bsize;"], [137, "      if (null != image.loadAgain()) {"], [138, "        currentMemoryDownUp(sizeOld, image.bsize);"], [139, "      }"], [140, "    }"], [141, "  }"], [142, ""], [188, "  private int bsize = 0;"], [450, "        if (isCaching()) {"], [451, "          int maxMemory = Settings.getImageCache() * MB;"], [452, "          currentMemoryUp(bsize);"], [466, ""], [467, "  private BufferedImage loadAgain() {"], [468, "    BufferedImage bImage = null;"], [469, "    if (fileURL != null) {"], [470, "      bimg = null;"], [471, "      try {"], [472, "        bImage = ImageIO.read(fileURL);"], [473, "      } catch (Exception e) {"], [474, "        if (!beSilent) {"], [475, "          log(-1, \"could not be loaded again: %s\", fileURL);"], [476, "        }"], [477, "\t\t\t\timageFiles.remove(fileURL);"], [478, "        return null;"], [479, "      }"], [480, "      imageFiles.put(fileURL, this);"], [481, "      imageNames.put(imageName, fileURL);"], [482, "      bwidth = bImage.getWidth();"], [483, "      bheight = bImage.getHeight();"], [484, "      bsize = bImage.getData().getDataBuffer().getSize();"], [485, "      log(lvl, \"loaded again: %s (%s)\", imageName, fileURL);"], [487, "    return bImage;"], [489, ""], [819, "          currentMemoryDown(img.bsize);"]], "deleted": [[81, "  private static int currentMemory = 0;"], [129, "  private long bsize = 0;"], [391, "        int maxMemory = Settings.getImageCache() * MB;"], [392, "        if (maxMemory > 0) {"], [393, "          currentMemory += bsize;"], [394, "          if (currentMemory > maxMemory) {"], [395, "            clearCache(maxMemory);"], [396, "          }"], [410, ""], [411, "  public static void clearCache(int maxSize) {"], [412, "    Image first;"], [413, "    while (images.size() > 0 && currentMemory > maxSize) {"], [414, "      first = images.remove(0);"], [415, "      first.bimg = null;"], [416, "      currentMemory -= first.bsize;"], [417, "    }"], [418, "    if (maxSize == 0) {"], [419, "      currentMemory = 0;"], [420, "    } else {"], [421, "      currentMemory = Math.max(0, currentMemory);"], [424, ""], [754, "          currentMemory -= img.bsize;"], [757, "      currentMemory = Math.max(0, currentMemory);"]]}, "num_lines_added": 87, "num_lines_removed": 23}