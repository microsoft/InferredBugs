{"hash": "78eb47c29f3b4c17d1d7a9853d977879dc1e0dc4", "message": "added: defined Settings attributes can now be set via options file and are collected at startup", "file_num_lines": 1924, "diff_parsed": {"added": [[89, "  public static synchronized RunTime get(Type typ) {"], [90, "    return get(typ, null);"], [91, "  }"], [92, ""], [100, "  public static synchronized RunTime get(Type typ, String[] clArgs) {"], [103, ""], [104, "      if (null != clArgs) {"], [105, "        int debugLevel = checkArgs(clArgs, typ);"], [106, "        if (Type.IDE.equals(typ)) {"], [107, "          if(debugLevel == -1) {"], [108, "            Debug.on(3);"], [109, "            Debug.log(3, \"RunTime: option -d detected --- log goes to SikulixLog.txt\");"], [110, "            Debug.setLogFile(\"\");"], [111, "            Settings.LogTime = true;"], [112, "            System.setProperty(\"sikuli.console\", \"false\");"], [113, "          } else if (debugLevel == 999) {"], [114, "            runTime.runningScripts = true;"], [115, "          }"], [116, "        }"], [117, "      }"], [330, "  public int debuglevelAPI = -1;"], [331, "  private boolean runningScripts = false;"], [376, "    if (Type.IDE.equals(typ) && !runningScripts) {"], [1015, "    for (Object oKey : options.keySet()) {"], [1016, "      String sKey = (String) oKey;"], [1017, "      String[] parts = sKey.split(\"\\\\.\");"], [1018, "      if (parts.length == 1) {"], [1019, "        continue;"], [1020, "      }"], [1021, "      String sClass = parts[0];"], [1022, "      String sAttr = parts[1];"], [1023, "      Class cClass = null;"], [1024, "      Field cField = null;"], [1025, "      Class ccField = null;"], [1026, "      if (sClass.contains(\"Settings\")) {"], [1027, "        try {"], [1028, "          cClass = Class.forName(\"org.sikuli.basics.Settings\");"], [1029, "          cField = cClass.getField(sAttr);"], [1030, "          ccField = cField.getType();"], [1031, "          if (ccField.getName() == \"boolean\") {"], [1032, "            cField.setBoolean(null, isOption(sKey));"], [1033, "          } else if (ccField.getName() == \"int\"){"], [1034, "            cField.setInt(null, getOptionNumber(sKey));"], [1035, "          } else if (ccField.getName() == \"String\") {"], [1036, "            cField.set(null, getOption(sKey));"], [1037, "          }"], [1038, "        } catch (Exception ex) {}"], [1039, "      }"], [1040, "    }"], [1080, "    return isOption(pName, false);"], [2381, "    boolean runningScriptsWithIDE = false;"], [2399, "      } else if (opt.startsWith(\"-r\") || opt.startsWith(\"-t\")) {"], [2400, "        runningScriptsWithIDE = true;"], [2402, "    }"], [2403, "    if (Type.IDE.equals(typ) && runningScriptsWithIDE) {"], [2404, "      return 999;"]], "deleted": [[96, "  public static synchronized RunTime get(Type typ) {"], [355, "    if (Type.IDE.equals(typ)) {"], [1033, "    if (options == null) {"], [1034, "      return false;"], [1035, "    }"], [1036, "    String pVal = options.getProperty(pName, \"false\").toLowerCase();"], [1037, "    if (pVal.isEmpty() || pVal.contains(\"yes\") || pVal.contains(\"true\")) {"], [1038, "      return true;"], [1039, "    }"], [1040, "    return false;"], [2359, "      if (Type.IDE.equals(typ) && debugLevel == -1) {"], [2360, "        Debug.on(3);"], [2361, "        Debug.log(3, \"RunTime: option -d detected --- log goes to SikulixLog.txt\");"], [2362, "        Debug.setLogFile(\"\");"], [2363, "        Settings.LogTime = true;"], [2364, "        System.setProperty(\"sikuli.console\", \"false\");"], [2365, "      }"]]}, "num_lines_added": 56, "num_lines_removed": 17}