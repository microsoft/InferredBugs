{"hash": "d0e2b9d269ee0be92fdf3f5a6192dcd48dbd1fe7", "message": "intermediate: revising FindFailedPrompt and FindFailed handling", "file_num_lines": 2399, "diff_parsed": {"added": [[2241, "    log(lvl, \"handleFindFailedShowDialog: requested %s\", (shouldCapture?\"(with capture)\":\"\"));"], [2279, "        log(lvl, \"find: %s appeared (%s)\", targetStr, lastMatch);"], [2282, "      log(lvl, \"find: %s did not appear [%d msec]\", targetStr, lastFindTime);"], [2330, "        log(lvl, \"exists: %s has appeared (%s)\", targetStr, lastMatch);"], [2356, "      log(lvl, \"exists: %s did not appear [%d msec]\", targetStr, lastFindTime);"], [2372, "    RepeatableFindAll rf = new RepeatableFindAll(target, null);"], [2373, "    Image img = rf._image;"], [2374, "    String targetStr = img.getName();"], [2375, "    Boolean response = true;"], [2376, "    if (!img.isValid() && img.hasIOException()) {"], [2377, "      response = handleImageMissing(img, false);"], [2379, "    if (null != response && response) {"], [2380, "      log(lvl, \"findAll: waiting %.1f secs for (multiple) %s to appear in %s\","], [2381, "              autoWaitTimeout, targetStr, this.toStringShort());"], [2382, "      if (autoWaitTimeout > 0) {"], [2383, "        rf.repeat(autoWaitTimeout);"], [2384, "        lastMatches = rf.getMatches();"], [2385, "      } else {"], [2386, "        lastMatches = doFindAll(target, null);"], [2389, "        log(lvl, \"findAll: %s has appeared\", targetStr);"], [2390, "      } else {"], [2391, "        log(lvl, \"findAll: %s did not appear\", targetStr);"], [2394, "    return lastMatches;"], [2645, "      log(lvl, \"wait: waiting %.1f secs for %s to appear in %s\", timeout, targetStr, this.toStringShort());"], [2652, "        log(lvl, \"wait: %s appeared (%s)\", targetStr, lastMatch);"], [2668, "    log(lvl, \"wait: %s did not appear [%d msec]\", targetStr, lastFindTime);"], [2675, "  /**"], [2676, "   * waits until target vanishes or timeout (in seconds) is passed (AutoWaitTimeout)"], [2677, "   *"], [2678, "   * @param <PSI> Pattern, String or Image"], [2679, "   * @param target The target to wait for it to vanish"], [2680, "   * @return true if the target vanishes, otherwise returns false."], [2681, "   */"], [2682, "  public <PSI> boolean waitVanish(PSI target) {"], [2683, "    return waitVanish(target, autoWaitTimeout);"], [2684, "  }"], [2685, ""], [2686, "  /**"], [2687, "   * waits until target vanishes or timeout (in seconds) is passed"], [2688, "   *"], [2689, "   * @param <PSI> Pattern, String or Image"], [2690, "   * @param target Pattern, String or Image"], [2691, "   * @param timeout time in seconds"], [2692, "   * @return true if target vanishes, false otherwise and if imagefile is missing."], [2693, "   */"], [2694, "  public <PSI> boolean waitVanish(PSI target, double timeout) {"], [2695, "    RepeatableVanish rv = new RepeatableVanish(target);"], [2696, "    Image img = rv._image;"], [2697, "    String targetStr = img.getName();"], [2698, "    Boolean response = true;"], [2699, "    if (!img.isValid() && img.hasIOException()) {"], [2700, "      response = handleImageMissing(img, false);"], [2701, "    }"], [2702, "    if (null != response && response) {"], [2703, "        log(lvl, \"waiting for \" + targetStr + \" to vanish within %.1f secs\", timeout);"], [2704, "        if (rv.repeat(timeout)) {"], [2705, "          log(lvl, \"%s vanished\", targetStr);"], [2706, "          return true;"], [2707, "        }"], [2708, "        log(lvl, \"%s did not vanish before timeout\", targetStr);"], [2709, "        return false;"], [2710, "    }"], [2711, "    return false;"], [2712, "  }"], [2713, ""], [3090, "    public <PSI> RepeatableFindAll(PSI target, Image img) {"], [3092, "      if (img == null) {"], [3093, "        _image = getImage(target);"], [3094, "      } else {"], [3095, "        _image = img;"], [3096, "      }"]], "deleted": [[2278, "        log(lvl, \"find: %s has appeared \\nat %s\", targetStr, lastMatch);"], [2281, "      log(lvl, \"find: %s has not appeared [%d msec]\", targetStr, lastFindTime);"], [2329, "        log(lvl, \"exists: %s has appeared \\nat %s\", targetStr, lastMatch);"], [2355, "      log(lvl, \"exists: %s has not appeared [%d msec]\", targetStr, lastFindTime);"], [2371, "    Image img = null;"], [2372, "    String targetStr = target.toString();"], [2373, "    if (target instanceof String) {"], [2374, "      targetStr = targetStr.trim();"], [2376, "    while (true) {"], [2377, "      try {"], [2378, "        if (autoWaitTimeout > 0) {"], [2379, "          RepeatableFindAll rf = new RepeatableFindAll(target);"], [2380, "          rf.repeat(autoWaitTimeout);"], [2381, "          lastMatches = rf.getMatches();"], [2382, "        } else {"], [2383, "          lastMatches = doFindAll(target, null);"], [2384, "        }"], [2385, "      } catch (Exception ex) {"], [2386, "        if (ex instanceof IOException) {"], [2387, "          if (handleImageMissing(img, false)) {"], [2388, "            continue;"], [2389, "          }"], [2390, "        }"], [2391, "        throw new FindFailed(ex.getMessage());"], [2394, "        return lastMatches;"], [2395, "      }"], [2396, "      if (!handleFindFailed(target, img, false)) {"], [2397, "        return null;"], [2650, "      log(lvl, \"find: waiting %.1f secs for %s to appear in %s\", timeout, targetStr, this.toStringShort());"], [2657, "        log(lvl, \"find: %s has appeared \\nat %s\", targetStr, lastMatch);"], [2673, "    log(lvl, \"find: %s has not appeared [%d msec]\", targetStr, lastFindTime);"], [2739, ""], [2740, "  /**"], [2741, "   * waits until target vanishes or timeout (in seconds) is passed (AutoWaitTimeout)"], [2742, "   *"], [2743, "   * @param <PSI> Pattern, String or Image"], [2744, "   * @param target The target to wait for it to vanish"], [2745, "   * @return true if the target vanishes, otherwise returns false."], [2746, "   */"], [2747, "  public <PSI> boolean waitVanish(PSI target) {"], [2748, "    return waitVanish(target, autoWaitTimeout);"], [2749, "  }"], [2750, ""], [2751, "  /**"], [2752, "   * waits until target vanishes or timeout (in seconds) is passed"], [2753, "   *"], [2754, "   * @param <PSI> Pattern, String or Image"], [2755, "   * @param target Pattern, String or Image"], [2756, "   * @param timeout time in seconds"], [2757, "   * @return true if target vanishes, false otherwise and if imagefile is missing."], [2758, "   */"], [2759, "  public <PSI> boolean waitVanish(PSI target, double timeout) {"], [2760, "    RepeatableVanish rv = null;"], [2761, "    while (true) {"], [2762, "      try {"], [2763, "        log(lvl, \"waiting for \" + target + \" to vanish\");"], [2764, "        rv = new RepeatableVanish(target);"], [2765, "        if (rv.repeat(timeout)) {"], [2766, "          log(lvl, \"\" + target + \" has vanished\");"], [2767, "          return true;"], [2768, "        }"], [2769, "        log(lvl, \"\" + target + \" has not vanished before timeout\");"], [2770, "        return false;"], [2771, "      } catch (Exception ex) {"], [2772, "        if (ex instanceof IOException) {"], [2773, "          if (handleImageMissing(rv._image, false)) {"], [2774, "            continue;"], [2775, "          }"], [2776, "        }"], [2777, "        break;"], [2778, "      }"], [2779, "    }"], [2780, "    return false;"], [2781, "  }"], [3099, "    public <PSI> RepeatableFindAll(PSI target) {"]]}, "num_lines_added": 71, "num_lines_removed": 75}