{"hash": "426310cb9ef3409246cbc028f60bfd54847eec51", "message": "IDE: revised debug logging", "file_num_lines": 1092, "diff_parsed": {"added": [[45, "\tprivate static final String me = \"EditorPane\";"], [46, "  private static final int lvl = 3;"], [47, ""], [48, "  private static void log(int level, String message, Object... args) {"], [49, "    Debug.logx(level, \"\", me + \": \" + message, args);"], [50, "  }"], [51, ""], [53, "\tprivate static final Map<String, Lexer> lexers = new HashMap<String, Lexer>();"], [60, "\tprivate EditorCurrentLineHighlighter _highlighter = null;"], [79, "  private DirtyHandler dirtyHandler;"], [99, "    log(lvl, \"initBeforeLoad: %s\", scriptType);"], [114, "//TODO should know, that scripttype not changed here to avoid unnecessary new setups"], [140, "    if (_highlighter == null) {"], [141, "      _highlighter = new EditorCurrentLineHighlighter(this);"], [142, "  \t\taddCaretListener(_highlighter);"], [143, "  \t\tinitKeyMap();"], [144, "      addKeyListener(this);"], [145, "      addCaretListener(this);"], [146, "    }"], [155, "\t\tupdateDocumentListeners(\"initBeforeLoad\");"], [167, "\t\tlog(lvl, \"InitTab: (%s)\", getSikuliContentType());"], [182, "\tprivate void updateDocumentListeners(String source) {"], [183, "    log(lvl, \"updateDocumentListeners from: %s\", source);"], [184, "    if (dirtyHandler == null) {"], [185, "      dirtyHandler = new DirtyHandler();"], [186, "    }"], [187, "    getDocument().addDocumentListener(dirtyHandler);"], [188, "    getDocument().addUndoableEditListener(getUndoManager());"], [234, "\t\t\tlog(lvl, \"loadFile: Already open in IDE: \" + fname);"], [245, "    log(lvl, \"loadfile: %s\", filename);"], [259, "\t\t\tupdateDocumentListeners(\"loadFile\");"], [262, "\t\t}"], [263, "\t\tif (_editingFile == null) {"], [319, "\t\t\tlog(-1, \"makeBundle: return: \" + cmd[0]);"], [324, "\t\t\t\tlog(-1, \"makeBundle: not possible: .LSOverride\");"], [344, "\t\tlog(lvl, \"saveAsBundle: \" + getSrcBundle());"], [360, "\t\tlog(lvl, \"writeSrcFile: \" + _editingFile.getName());"], [433, "\t\t\t\tlog(lvl, \"save: used image ignored: %s\", img);"], [436, "\t\t\tlog(lvl, \"save: used image: %s\", img);"], [474, "\t\tlog(lvl, \"exportAsZip: \" + zipPath);"], [561, "\t\t\t\tlog(-1, \"getCurrentFile: Problem while trying to save %s\\n%s\","], [591, "\t\t\t\tlog(-1,\"copyFileToBundle: Problem while trying to save %s\\n%s\","], [647, "\t\t\tlog(lvl+1, \"change update\");"], [653, "\t\t\tlog(lvl+1, \"insert update\");"], [659, "\t\t\tlog(lvl+1, \"remove update\");"], [706, "\t\tlog(lvl+1, \"jumpTo pos: \" + lineNo + \",\" + column);"], [727, "\t\tlog(lvl+1, \"jumpTo line: \" + lineNo);"], [751, "\t\tlog(lvl+1, \"jumpTo function: \" + funcName);"], [797, "\t\t\t\tupdateDocumentListeners(\"reparse\");"], [857, "\t\t\tlog(lvl+1, elm.toString());"], [878, "\t\t\tlog(-1, \"parseRange: Problem while trying to parse line\\n%s\", e.getMessage());"], [979, "\t\t\t\tlog(-1, \"insertString: Problem while trying to insert\\n%s\", e.getMessage());"], [994, "\t\t\tlog(-1, \"insertString: Problem while trying to insert at pos\\n%s\", e.getMessage());"], [1007, "\t\t\tlog(-1, \"appendString: Problem while trying to append\\n%s\", e.getMessage());"], [1050, "\t\tDebug.log(lvl, \"search: %s from %d forward: %s\",str,  pos, forward);"], [1077, "\t\t\tlog(-1,\"search: did not work:\\n\" + e.getStackTrace());"], [1133, "\t\t\t\t\tlog(-1, \"MyTransferHandler: exportDone: Problem while trying to remove text\\n%s\", e.getMessage());"], [1158, "\t\t\t\tlog(-1, \"MyTransferHandler: createTransferable: Problem creating text to copy\\n%s\", e.getMessage());"], [1190, "\t\t\t\t\t\t\tDebug.info(\"MyTransferHandler: importData:\" + ptnImgName + \" exists. Rename it to \" + newName);"], [1195, "\t\t\t\t\tlog(-1, \"MyTransferHandler: importData: Problem pasting text\\n%s\", e.getMessage());"]], "deleted": [[45, "\tprivate static final String me = \"EditorPane: \";"], [47, "\tprivate static Map<String, Lexer> lexers = new HashMap<String, Lexer>();"], [54, "\tprivate EditorCurrentLineHighlighter _highlighter;"], [125, "\t\tinitKeyMap();"], [131, "\t\t_highlighter = new EditorCurrentLineHighlighter(this);"], [133, "\t\taddCaretListener(_highlighter);"], [142, "\t\tupdateDocumentListeners();"], [144, "\t\taddKeyListener(this);"], [145, "\t\taddCaretListener(this);"], [156, "\t\tDebug.log(3, \"InitTab: (%s)\", getSikuliContentType());"], [171, "\tprivate void updateDocumentListeners() {"], [172, "\t\tgetDocument().addDocumentListener(new DirtyHandler());"], [173, "\t\tgetDocument().addUndoableEditListener(getUndoManager());"], [219, "\t\t\tDebug.log(2, \"Already open in IDE: \" + fname);"], [243, "\t\t}"], [244, "\t\tif (_editingFile != null) {"], [245, "//\t\t\tupdateDocumentListeners();"], [248, "\t\t} else {"], [304, "\t\t\tDebug.error(\"makeBundle: return: \" + cmd[0]);"], [309, "\t\t\t\tDebug.error(\"makeBundle: not possible: .LSOverride\");"], [329, "\t\tDebug.log(3, \"IDE: saveAsBundle: \" + getSrcBundle());"], [345, "\t\tDebug.log(3, \"IDE: writeSrcFile: \" + _editingFile.getName());"], [418, "\t\t\t\tDebug.log(3, \"IDE: save: used image ignored: %s\", img);"], [421, "\t\t\tDebug.log(3, \"IDE: save: used image: %s\", img);"], [459, "\t\tDebug.log(2, \"export to executable file: \" + zipPath);"], [546, "\t\t\t\tDebug.error(me + \"getCurrentFile: Problem while trying to save %s\\n%s\","], [576, "\t\t\t\tDebug.error(me + \"copyFileToBundle: Problem while trying to save %s\\n%s\","], [632, "\t\t\tDebug.log(9, \"change update\");"], [638, "\t\t\tDebug.log(9, \"insert update\");"], [644, "\t\t\tDebug.log(9, \"remove update\");"], [691, "\t\tDebug.log(6, \"jumpTo: \" + lineNo + \",\" + column);"], [712, "\t\tDebug.log(6, \"jumpTo: \" + lineNo);"], [736, "\t\tDebug.log(6, \"jumpTo: \" + funcName);"], [782, "//\t\t\t\tupdateDocumentListeners();"], [842, "\t\t\tDebug.log(8, elm.toString());"], [863, "\t\t\tDebug.error(me + \"parseRange: Problem while trying to parse line\\n%s\", e.getMessage());"], [964, "\t\t\t\tDebug.error(me + \"insertString: Problem while trying to insert\\n%s\", e.getMessage());"], [979, "\t\t\tDebug.error(me + \"insertString: Problem while trying to insert at pos\\n%s\", e.getMessage());"], [992, "\t\t\tDebug.error(me + \"appendString: Problem while trying to append\\n%s\", e.getMessage());"], [1035, "\t\tDebug.log(9, \"search caret: \" + pos + \", \" + doc.getLength());"], [1062, "\t\t\tDebug.log(7, \"search caret: \" + pos + \", \" + doc.getLength()"], [1063, "\t\t\t\t\t\t\t+ e.getStackTrace());"], [1119, "\t\t\t\t\tDebug.error(me + \"exportDone: Problem while trying to remove text\\n%s\", e.getMessage());"], [1144, "\t\t\t\tDebug.error(me + \"createTransferable: Problem creating text to copy\\n%s\", e.getMessage());"], [1176, "\t\t\t\t\t\t\tDebug.info(ptnImgName + \" exists. Rename it to \" + newName);"], [1181, "\t\t\t\t\tDebug.error(me + \"importData: Problem pasting text\\n%s\", e.getMessage());"]]}, "num_lines_added": 60, "num_lines_removed": 46}