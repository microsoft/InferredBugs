{"hash": "ab6ccc5351532997882e25739b7846b6e2a17d22", "message": "Introduced performance tests\nImproved message sender (errors will be send only once whereas normal messages will be retried 3 times)\nIn broadcast conversation participant will received newJoined signal with master data\nPing will not start immediately after member is joined", "file_num_lines": 64, "diff_parsed": {"added": [[4, "import org.nextrtc.signalingserver.repository.MemberRepository;"], [8, "import javax.inject.Inject;"], [17, "    private MemberRepository members;"], [18, ""], [19, "    @Inject"], [20, "    public DefaultMessageSender(MemberRepository members) {"], [21, "        this.members = members;"], [22, "    }"], [23, ""], [31, "            log.debug(\"Outgoing: \" + message.transformToExternalMessage());"], [33, "        if (message.getSignal() == Signal.ERROR) {"], [34, "            tryToSendErrorMessage(message);"], [37, "        Member destination = message.getTo();"], [38, "        if (destination == null || !destination.getSession().isOpen()) {"], [39, "            log.warn(\"Destination member is not set or session is closed! Message will not be send: \" + message.transformToExternalMessage());"], [40, "            return;"], [41, "        }"], [42, "        members.findBy(destination.getId()).ifPresent(member ->"], [43, "                lockAndRun(message, member, retry)"], [44, "        );"], [45, "    }"], [46, ""], [47, "    private void tryToSendErrorMessage(InternalMessage message) {"], [48, "        try {"], [49, "            Session session = message.getTo().getSession();"], [50, "            synchronized (session) {"], [51, "                session.getBasicRemote().sendObject(message.transformToExternalMessage());"], [52, "            }"], [53, "        } catch (Exception e) {"], [54, "            throw new RuntimeException(\"Unable to send message: \" + message.transformToExternalMessage(), e);"], [55, "        }"], [56, "    }"], [57, ""], [58, "    private void lockAndRun(InternalMessage message, Member destination, int retry) {"], [60, "            RemoteEndpoint.Basic basic = destination.getSession().getBasicRemote();"], [61, "            synchronized (destination) {"], [62, "                basic.sendObject(message.transformToExternalMessage());"], [66, "                log.warn(\"Retrying... \" + message.transformToExternalMessage());"], [69, "            log.error(\"Unable to send message: \" + message.transformToExternalMessage() + \" error during sending!\");"], [70, "            throw new RuntimeException(\"Unable to send message: \" + message.transformToExternalMessage(), e);"]], "deleted": [[21, "        Message messageToSend = message.transformToExternalMessage();"], [23, "            log.info(\"Outgoing: \" + toString());"], [25, "        Session destSession = message.getTo().getSession();"], [26, "        if (!destSession.isOpen()) {"], [27, "            log.warn(\"Session is closed! Message will not be send: \");"], [31, "            RemoteEndpoint.Basic basic = destSession.getBasicRemote();"], [32, "            synchronized (basic) {"], [33, "                basic.sendObject(messageToSend);"], [37, "                log.info(\"Retrying... \" + messageToSend);"], [40, "            log.error(\"Unable to send message: \" + messageToSend + \" error during sending!\");"], [41, "            throw new RuntimeException(\"Unable to send message: \" + messageToSend, e);"]]}, "num_lines_added": 40, "num_lines_removed": 11}