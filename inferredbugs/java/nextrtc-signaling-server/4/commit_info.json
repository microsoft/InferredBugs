{"hash": "ce467829a613b75c4f96eec0f4cf9fdf8beb9d48", "message": "added test for next step of protocol to exchange spd datas", "file_num_lines": 196, "diff_parsed": {"added": [[3, "import static org.apache.commons.lang3.StringUtils.EMPTY;"], [10, "import static org.nextrtc.signalingserver.api.annotation.NextRTCEvents.MEMBER_LOCAL_STREAM_CREATED;"], [26, "import org.nextrtc.signalingserver.domain.ServerTest.LocalStreamCreated;"], [34, "@ContextConfiguration(classes = { ServerEventCheck.class, LocalStreamCreated.class })"], [142, "\t\tassertMatch(s1Matcher, 0, \"s2\", \"s1\", \"joined\", EMPTY);"], [143, "\t\tassertMatch(s1Matcher, 1, \"s2\", \"s1\", \"offerRequest\", EMPTY);"], [146, "\t\tassertMatch(s2Matcher, 0, EMPTY, \"s2\", \"joined\", conversationKey);"], [147, "\t}"], [148, ""], [149, "\t@NextRTCEventListener({ MEMBER_LOCAL_STREAM_CREATED })"], [150, "\tpublic static class LocalStreamCreated extends EventChecker {"], [151, ""], [152, "\t}"], [153, ""], [154, "\t@Autowired"], [155, "\tprivate LocalStreamCreated eventLocalStream;"], [156, ""], [157, "\t@Test"], [158, "\tpublic void shouldCreateConversationJoinMemberAndPassOfferResponseToRestMembers() throws Exception {"], [159, "\t\t// given"], [160, "\t\tMessageMatcher s1Matcher = new MessageMatcher();"], [161, "\t\tMessageMatcher s2Matcher = new MessageMatcher();"], [162, "\t\tSession s1 = mockSession(\"s1\", s1Matcher);"], [163, "\t\tSession s2 = mockSession(\"s2\", s2Matcher);"], [164, "\t\tserver.register(s1);"], [165, "\t\tserver.register(s2);"], [166, ""], [167, "\t\tserver.handle(Message.create()//"], [168, "\t\t\t\t.signal(\"create\")//"], [169, "\t\t\t\t.build(), s1);"], [170, "\t\tString conversationKey = s1Matcher.getMessage().getContent();"], [171, "\t\tserver.handle(Message.create()//"], [172, "\t\t\t\t.signal(\"join\")//"], [173, "\t\t\t\t.content(conversationKey)//"], [174, "\t\t\t\t.build(), s2);"], [175, "\t\ts1Matcher.reset();"], [176, "\t\ts2Matcher.reset();"], [177, ""], [178, "\t\t// when"], [179, "\t\t// s2 has to create local stream"], [180, "\t\tserver.handle(Message.create()//"], [181, "\t\t\t\t.to(\"s1\")//"], [182, "\t\t\t\t.signal(\"offerResponse\")//"], [183, "\t\t\t\t.content(\"s2 spd\")//"], [184, "\t\t\t\t.build(), s2);"], [185, ""], [186, "\t\t// then"], [187, "\t\tassertThat(s1Matcher.getMessages().size(), is(1));"], [188, "\t\tassertMatch(s1Matcher, 0, \"s2\", \"s1\", \"answerRequest\", \"s2 spd\");"], [189, ""], [190, "\t\tassertThat(s2Matcher.getMessages().size(), is(0));"], [191, "\t\tassertThat(eventLocalStream.getEvents().size(), is(1));"], [192, "\t\tassertThat(eventLocalStream.getEvents().get(0).getType(), is(MEMBER_LOCAL_STREAM_CREATED));"], [193, "\t}"], [194, ""], [195, "\t@Test"], [196, "\tpublic void shouldCreateConversationJoinMemberAndPassOfferResponseToRestTwoMembers() throws Exception {"], [197, "\t\t// given"], [198, "\t\tMessageMatcher s1Matcher = new MessageMatcher();"], [199, "\t\tMessageMatcher s2Matcher = new MessageMatcher();"], [200, "\t\tMessageMatcher s3Matcher = new MessageMatcher();"], [201, "\t\tSession s1 = mockSession(\"s1\", s1Matcher);"], [202, "\t\tSession s2 = mockSession(\"s2\", s2Matcher);"], [203, "\t\tSession s3 = mockSession(\"s3\", s3Matcher);"], [204, "\t\tserver.register(s1);"], [205, "\t\tserver.register(s2);"], [206, "\t\tserver.register(s3);"], [207, ""], [208, "\t\tserver.handle(Message.create()//"], [209, "\t\t\t\t.signal(\"create\")//"], [210, "\t\t\t\t.build(), s1);"], [211, "\t\tString conversationKey = s1Matcher.getMessage().getContent();"], [212, "\t\tserver.handle(Message.create()//"], [213, "\t\t\t\t.signal(\"join\")//"], [214, "\t\t\t\t.content(conversationKey)//"], [215, "\t\t\t\t.build(), s2);"], [216, "\t\tserver.handle(Message.create()//"], [217, "\t\t\t\t.signal(\"join\")//"], [218, "\t\t\t\t.content(conversationKey)//"], [219, "\t\t\t\t.build(), s3);"], [220, "\t\ts1Matcher.reset();"], [221, "\t\ts2Matcher.reset();"], [222, "\t\ts3Matcher.reset();"], [223, "\t\t// when"], [224, "\t\t// s2 has to create local stream"], [225, "\t\tserver.handle(Message.create()//"], [226, "\t\t\t\t.to(\"s1\")//"], [227, "\t\t\t\t.signal(\"offerResponse\")//"], [228, "\t\t\t\t.content(\"s2 spd\")//"], [229, "\t\t\t\t.build(), s2);"], [230, "\t\t// s3 has to create local stream"], [231, "\t\tserver.handle(Message.create()//"], [232, "\t\t\t\t.to(\"s1\")//"], [233, "\t\t\t\t.signal(\"offerResponse\")//"], [234, "\t\t\t\t.content(\"s3 spd\")//"], [235, "\t\t\t\t.build(), s3);"], [236, ""], [237, "\t\t// then"], [238, "\t\tassertThat(s1Matcher.getMessages().size(), is(2));"], [239, "\t\tassertMatch(s1Matcher, 0, \"s2\", \"s1\", \"answerRequest\", \"s2 spd\");"], [240, "\t\tassertMatch(s1Matcher, 1, \"s3\", \"s1\", \"answerRequest\", \"s3 spd\");"], [241, ""], [242, "\t\tassertThat(s2Matcher.getMessages().size(), is(0));"], [243, "\t\tassertThat(s3Matcher.getMessages().size(), is(0));"], [244, ""], [245, "\t\tassertThat(eventLocalStream.getEvents().size(), is(2));"], [246, "\t}"], [247, ""], [248, "\tprivate void assertMatch(MessageMatcher matcher, int number, String from, String to, String signal, String content) {"], [249, "\t\tassertThat(matcher.getMessage(number).getFrom(), is(from));"], [250, "\t\tassertThat(matcher.getMessage(number).getTo(), is(to));"], [251, "\t\tassertThat(matcher.getMessage(number).getSignal(), is(signal));"], [252, "\t\tassertThat(matcher.getMessage(number).getContent(), is(content));"], [258, "\t\teventLocalStream.reset();"], [260, "\t\tmembers.unregister(\"s2\");"], [261, "\t\tmembers.unregister(\"s3\");"]], "deleted": [[31, "@ContextConfiguration(classes = { ServerEventCheck.class })"], [139, "\t\tassertThat(s1Matcher.getMessage().getFrom(), is(\"s2\"));"], [140, "\t\tassertThat(s1Matcher.getMessage().getTo(), is(\"s1\"));"], [141, "\t\tassertThat(s1Matcher.getMessage().getSignal(), is(\"joined\"));"], [142, ""], [143, "\t\tassertThat(s1Matcher.getMessage(1).getFrom(), is(\"s2\"));"], [144, "\t\tassertThat(s1Matcher.getMessage(1).getTo(), is(\"s1\"));"], [145, "\t\tassertThat(s1Matcher.getMessage(1).getSignal(), is(\"offerRequest\"));"], [148, "\t\tassertThat(s2Matcher.getMessage().getSignal(), is(\"joined\"));"], [149, "\t\tassertThat(s2Matcher.getMessage().getContent(), is(conversationKey));"]]}, "num_lines_added": 116, "num_lines_removed": 10}