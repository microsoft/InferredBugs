{"hash": "a52d0190b7526031c3860e18fcf1347fd48b3e68", "message": "Use msedgedriver repository to locate Edge drivers (issue #444)", "file_num_lines": 1192, "diff_parsed": {"added": [[56, "import java.io.ByteArrayInputStream;"], [63, "import java.nio.charset.Charset;"], [675, "        if (driverLowerCase.equals(\"chrome\")"], [676, "                || driverLowerCase.equals(\"edge\")) {"], [678, "                    Optional.of(browserVersion), getVersionCharset());"], [814, "            String filterName = getDriverName().equalsIgnoreCase(\"msedgedriver\")"], [815, "                    ? \"edgedriver\""], [816, "                    : getDriverName();"], [817, "            candidateUrls = getLatest ? checkLatest(urls, filterName)"], [818, "                    : getVersion(urls, filterName, version);"], [820, "            if (versionToDownload == null) {"], [1089, "    protected List<URL> getDriversFromXml(URL driverUrl, String xpath)"], [1090, "            throws IOException {"], [1096, "                Document xml = loadXML(response.getEntity().getContent());"], [1097, "                NodeList nodes = (NodeList) newInstance().newXPath()"], [1098, "                        .evaluate(xpath, xml.getDocumentElement(), NODESET);"], [1112, "    Document loadXML(InputStream inputStream)"], [1116, "        return builder.parse(new InputSource("], [1117, "                new ByteArrayInputStream(IOUtils.toByteArray(inputStream))));"], [1277, "    protected Charset getVersionCharset() {"], [1278, "        return defaultCharset();"], [1279, "    }"], [1280, ""], [1281, "    protected String getLatestVersionLabel() {"], [1282, "        return LATEST_RELEASE;"], [1283, "    }"], [1284, ""], [1393, "    protected Optional<String> getLatestFromRepository(Optional<String> version,"], [1394, "            Charset charset) {"], [1395, "        String url = getDriverUrl() + getLatestVersionLabel();"], [1398, ""], [1404, "            result = Optional.of("], [1405, "                    IOUtils.toString(response, charset).replaceAll(\"\\r\\n\", \"\"));"]], "deleted": [[61, "import java.io.Reader;"], [140, "    protected List<String> listVersions;"], [667, "        // TODO here"], [676, "        if (driverLowerCase.equals(\"chrome\")) {"], [678, "                    Optional.of(browserVersion));"], [814, "            candidateUrls = getLatest ? checkLatest(urls, getDriverName())"], [815, "                    : getVersion(urls, getDriverName(), version);"], [817, "            if (versionToDownload == null"], [818, "                    || this.getClass().equals(EdgeDriverManager.class)) {"], [960, "        if (getDriverName().contains(\"msedgedriver\")) {"], [961, "            int i = listVersions.indexOf(version);"], [962, "            if (i != -1) {"], [963, "                out.add(list.get(i));"], [964, "            }"], [965, "        }"], [966, ""], [1094, "    protected List<URL> getDriversFromXml(URL driverUrl) throws IOException {"], [1100, "                BufferedReader reader = new BufferedReader("], [1101, "                        new InputStreamReader("], [1102, "                                response.getEntity().getContent()));"], [1103, "                Document xml = loadXML(reader);"], [1104, "                NodeList nodes = (NodeList) newInstance().newXPath().evaluate("], [1105, "                        \"//Contents/Key\", xml.getDocumentElement(), NODESET);"], [1119, "    protected Document loadXML(Reader reader)"], [1123, "        InputSource is = new InputSource(reader);"], [1124, "        return builder.parse(is);"], [1287, "        listVersions = null;"], [1393, "    protected Optional<String> getLatestFromRepository("], [1394, "            Optional<String> version) {"], [1395, "        String url = getDriverUrl() + LATEST_RELEASE;"], [1403, "            result = Optional.of(IOUtils.toString(response, defaultCharset()));"]]}, "num_lines_added": 33, "num_lines_removed": 31}