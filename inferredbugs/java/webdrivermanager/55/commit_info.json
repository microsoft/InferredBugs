{"hash": "2d5cb0c56a57ca8262cd5851e16977652dde466a", "message": "Smell-fix: refactor logic to reduce cognitive complexity", "file_num_lines": 1135, "diff_parsed": {"added": [[507, "            // Special case for Chromium snap packages"], [524, "            // Special case for Edge"], [540, "            // Manage driver"], [541, "            downloadAndExport(arch, version, getLatest, cache, os);"], [543, "        } catch (Exception e) {"], [544, "            handleException(e, arch, version);"], [545, "        }"], [546, "    }"], [548, "    private void downloadAndExport(Architecture arch, String version,"], [549, "            boolean getLatest, boolean cache, String os)"], [550, "            throws IOException, InterruptedException {"], [551, "        Optional<String> driverInCache = handleCache(arch, version, os,"], [552, "                getLatest, cache);"], [553, "        String versionStr = getLatest ? \"(latest version)\" : version;"], [554, ""], [555, "        if (driverInCache.isPresent() && !config().isOverride()) {"], [556, "            storeVersionToDownload(version);"], [557, "            downloadedVersion = version;"], [558, "            log.debug(\"Driver {} {} found in cache\", getDriverName(),"], [559, "                    versionStr);"], [560, "            exportDriver(driverInCache.get());"], [561, "        } else {"], [562, "            List<URL> candidateUrls = filterCandidateUrls(arch, version,"], [563, "                    getLatest);"], [564, "            if (candidateUrls.isEmpty()) {"], [565, "                String errorMessage = getDriverName() + \" \" + versionStr"], [566, "                        + \" for \" + os + arch.toString() + \" not found in \""], [567, "                        + getDriverUrl();"], [568, "                log.error(errorMessage);"], [569, "                throw new WebDriverManagerException(errorMessage);"], [572, "            downloadCandidateUrls(candidateUrls);"]], "deleted": [[507, "            // For Chromium snap"], [524, "            // For Edge"], [540, "            Optional<String> driverInCache = handleCache(arch, version, os,"], [541, "                    getLatest, cache);"], [543, "            String versionStr = getLatest ? \"(latest version)\" : version;"], [544, "            if (driverInCache.isPresent() && !config().isOverride()) {"], [545, "                storeVersionToDownload(version);"], [546, "                downloadedVersion = version;"], [547, "                log.debug(\"Driver {} {} found in cache\", getDriverName(),"], [548, "                        versionStr);"], [549, "                exportDriver(driverInCache.get());"], [550, "            } else {"], [551, "                List<URL> candidateUrls = filterCandidateUrls(arch, version,"], [552, "                        getLatest);"], [553, "                if (candidateUrls.isEmpty()) {"], [554, "                    String errorMessage = getDriverName() + \" \" + versionStr"], [555, "                            + \" for \" + os + arch.toString() + \" not found in \""], [556, "                            + getDriverUrl();"], [557, "                    log.error(errorMessage);"], [558, "                    throw new WebDriverManagerException(errorMessage);"], [559, "                }"], [561, "                downloadCandidateUrls(candidateUrls);"], [564, "        } catch (Exception e) {"], [565, "            handleException(e, arch, version);"]]}, "num_lines_added": 31, "num_lines_removed": 24}