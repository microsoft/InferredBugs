    protected void manage(String driverVersion) {
        httpClient = new HttpClient(config());
        try (HttpClient wdmHttpClient = httpClient) {
            downloader = new Downloader(getDriverManagerType());
            urlFilter = new UrlFilter();

            if (isUnknown(driverVersion)) {
                preferenceKey = getDriverManagerType().getNameInLowerCase();
                Optional<String> browserVersion = empty();
                if (usePreferences()
                        && preferences.checkKeyInPreferences(preferenceKey)) {
                    browserVersion = Optional.of(
                            preferences.getValueFromPreferences(preferenceKey));
                }
                if (!browserVersion.isPresent()) {
                    browserVersion = detectBrowserVersion();
                }

                if (browserVersion.isPresent()) {
                    // Calculate driverVersion using browserVersion
                    preferenceKey = getDriverManagerType().getNameInLowerCase()
                            + browserVersion.get();
                    if (usePreferences() && preferences
                            .checkKeyInPreferences(preferenceKey)) {
                        driverVersion = preferences
                                .getValueFromPreferences(preferenceKey);
                    }
                    if (isUnknown(driverVersion)) {
                        Optional<String> driverVersionFromRepository = getDriverVersionFromRepository(
                                browserVersion);
                        if (driverVersionFromRepository.isPresent()) {
                            driverVersion = driverVersionFromRepository.get();
                        }
                    }
                    if (isUnknown(driverVersion)) {
                        Optional<String> driverVersionFromProperties = getDriverVersionFromProperties(
                                preferenceKey);
                        if (driverVersionFromProperties.isPresent()) {
                            driverVersion = driverVersionFromProperties.get();
                        }
                    } else {
                        log.info(
                                "Using {} {} (since {} {} is installed in your machine)",
                                getDriverName(), driverVersion,
                                getDriverManagerType(), browserVersion.get());
                    }
                    if (usePreferences()) {
                        preferences.putValueInPreferencesIfEmpty(
                                getDriverManagerType().getNameInLowerCase(),
                                browserVersion.get());
                        preferences.putValueInPreferencesIfEmpty(preferenceKey,
                                driverVersion);
                    }
                    if (isUnknown(driverVersion)) {
                        log.debug(
                                "The driver version for {} {} is unknown ... trying with latest",
                                getDriverManagerType(), browserVersion.get());
                    }
                }

                // if driverVersion is still unknown, try with latest
                if (isUnknown(driverVersion)) {
                    Optional<String> latestDriverVersionFromRepository = getLatestDriverVersionFromRepository();
                    if (latestDriverVersionFromRepository.isPresent()) {
                        driverVersion = latestDriverVersionFromRepository.get();
                    }
                }

            }

            downloadAndExport(driverVersion);

        } catch (Exception e) {
            handleException(e, driverVersion);
        }
    }