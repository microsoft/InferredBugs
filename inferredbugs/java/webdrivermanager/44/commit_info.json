{"hash": "8570a3b93841070e8819a65a980f4a949dfd1759", "message": "Use online versions.properties by default to resolve driver versions", "file_num_lines": 1046, "diff_parsed": {"added": [[139, "    protected Properties versionsProperties;"], [519, "                version = detectDriverVersionFromBrowser();"], [521, "            getLatest = isNullOrEmpty(version);"], [569, "    private String detectDriverVersionFromBrowser() {"], [570, "        String version = \"\";"], [571, "        Optional<String> optionalBrowserVersion = config().isAvoidAutoVersion()"], [572, "                ? empty()"], [573, "                : getBrowserVersion();"], [574, "        if (optionalBrowserVersion.isPresent()) {"], [575, "            String browserVersion = optionalBrowserVersion.get();"], [576, "            log.trace(\"Detected {} version {}\", getDriverManagerType(),"], [577, "                    browserVersion);"], [578, "            preferenceKey = getDriverManagerType().name().toLowerCase()"], [579, "                    + browserVersion;"], [580, "            if (!config.isOverride() && !config().isAvoidAutoVersion()"], [581, "                    && !config().isAvoidPreferences()"], [582, "                    && preferences.checkKeyInPreferences(preferenceKey)) {"], [583, "                // Read from preferences"], [584, "                version = preferences.getValueFromPreferences(preferenceKey);"], [585, "            } else {"], [586, "                // Read version from properties"], [587, "                version = getVersionForInstalledBrowser(browserVersion);"], [588, "            }"], [589, "            if (!isNullOrEmpty(version)) {"], [590, "                log.info("], [591, "                        \"Using {} {} (since {} {} is installed in your machine)\","], [592, "                        getDriverName(), version, getDriverManagerType(),"], [593, "                        browserVersion);"], [594, "            }"], [595, "        }"], [596, "        return version;"], [597, "    }"], [598, ""], [622, "    private String getVersionForInstalledBrowser(String browserVersion) {"], [623, "        String driverVersion = \"\";"], [624, "        DriverManagerType driverManagerType = getDriverManagerType();"], [626, "        Optional<String> driverVersionForBrowser = getDriverVersionForBrowserFromProperties("], [627, "                driverLowerCase + browserVersion);"], [628, "        if (driverVersionForBrowser.isPresent()) {"], [629, "            driverVersion = driverVersionForBrowser.get();"], [630, "        } else {"], [632, "                    \"The driver version for {} {} is unknown ... trying with latest\","], [633, "                    driverManagerType, browserVersion);"], [635, "        return driverVersion;"], [636, "    }"], [637, ""], [638, "    private Optional<String> getDriverVersionForBrowserFromProperties("], [639, "            String key) {"], [640, "        log.trace(\"Getting driver version from properties {}\", key);"], [641, "        String value = getVersionFromProperties().getProperty(key);"], [645, "    private Properties getVersionFromProperties() {"], [646, "        if (versionsProperties != null) {"], [647, "            log.trace(\"Already created versions.properties\");"], [648, "            return versionsProperties;"], [649, "        } else {"], [650, "            try {"], [652, "                        \"Using online version.properties (from GitHub) to find out driver version\");"], [653, "                InputStream inputStream;"], [654, "                try {"], [655, "                    inputStream = httpClient"], [656, "                            .execute(httpClient.createHttpGet(new URL("], [657, "                                    \"https://raw.githubusercontent.com/bonigarcia/webdrivermanager/master/src/main/resources/versions.properties\")))"], [658, "                            .getEntity().getContent();"], [659, "                } catch (Exception e) {"], [660, "                    log.warn("], [661, "                            \"Online version not available, using local version.properties instead\");"], [662, "                    inputStream = Config.class"], [663, "                            .getResourceAsStream(\"/versions.properties\");"], [664, "                }"], [665, "                versionsProperties = new Properties();"], [666, "                versionsProperties.load(inputStream);"], [667, "                inputStream.close();"], [668, "            } catch (Exception e) {"], [669, "                throw new IllegalStateException("], [670, "                        \"Cannot read versions.properties\", e);"], [672, "            return versionsProperties;"], [916, "        DriverManagerType[] browsersWithBeta = { CHROME };"], [917, "        for (DriverManagerType driverManagerType : browsersWithBeta) {"], [919, "            Optional<String> betaVersionString = getDriverVersionForBrowserFromProperties("]], "deleted": [[518, "                Optional<String> optionalBrowserVersion = config()"], [519, "                        .isAvoidAutoVersion() ? empty() : getBrowserVersion();"], [520, "                if (optionalBrowserVersion.isPresent()) {"], [521, "                    String browserVersion = optionalBrowserVersion.get();"], [522, "                    preferenceKey = getDriverManagerType().name().toLowerCase()"], [523, "                            + browserVersion;"], [524, "                    if (getLatest && !config.isOverride()"], [525, "                            && !config().isAvoidAutoVersion()"], [526, "                            && !config().isAvoidPreferences() && preferences"], [527, "                                    .checkKeyInPreferences(preferenceKey)) {"], [528, "                        version = preferences"], [529, "                                .getValueFromPreferences(preferenceKey);"], [530, "                    } else {"], [531, "                        version = getVersionForInstalledBrowser("], [532, "                                getDriverManagerType());"], [533, "                    }"], [534, "                    getLatest = version.isEmpty();"], [535, "                }"], [607, "    private String getVersionForInstalledBrowser("], [608, "            DriverManagerType driverManagerType) {"], [610, "        return getBrowserVersion()"], [611, "                .map(browserVersion -> getDriverVersionForBrowser("], [612, "                        driverLowerCase + browserVersion).map(version -> {"], [613, "                            log.info("], [614, "                                    \"Using {} {} (since {} {} is installed in your machine)\","], [615, "                                    getDriverName(), version, driverManagerType,"], [616, "                                    browserVersion);"], [617, "                            return version;"], [618, "                        }).orElseGet(() -> {"], [619, "                            log.debug("], [620, "                                    \"The driver version for {} {} is unknown ... trying with latest\","], [621, "                                    driverManagerType, browserVersion);"], [622, "                            return \"\";"], [623, "                        }))"], [624, "                .orElse(\"\");"], [625, "    }"], [626, ""], [627, "    private Optional<String> getDriverVersionForBrowser(String key) {"], [628, "        log.trace(\"Getting driver version for browser {}\", key);"], [629, "        String value = getVersionsDescription(false).getProperty(key);"], [630, "        if (value == null && !key.contains(BETA)) {"], [632, "                    \"Browser version {} not found in local versions.properties\","], [633, "                    key);"], [634, "            value = getVersionsDescription(true).getProperty(key);"], [639, "    private Properties getVersionsDescription(boolean online) {"], [640, "        try (InputStream inputStream = online ? new URL("], [641, "                \"https://raw.githubusercontent.com/bonigarcia/webdrivermanager/master/src/main/resources/versions.properties\")"], [642, "                        .openStream()"], [643, "                : Config.class.getResourceAsStream(\"/versions.properties\")) {"], [644, "            if (online) {"], [645, "                log.debug("], [646, "                        \"Using online version.properties (from GitHub) to find out driver version\");"], [647, "            } else {"], [649, "                        \"Using local version.properties to find out driver version\");"], [651, ""], [652, "            Properties props = new Properties();"], [653, "            props.load(inputStream);"], [654, ""], [655, "            return props;"], [656, "        } catch (IOException e) {"], [657, "            throw new IllegalStateException(\"Cannot read versions.properties\","], [658, "                    e);"], [902, "        for (DriverManagerType driverManagerType : DriverManagerType.values()) {"], [904, "            Optional<String> betaVersionString = getDriverVersionForBrowser("]]}, "num_lines_added": 79, "num_lines_removed": 64}