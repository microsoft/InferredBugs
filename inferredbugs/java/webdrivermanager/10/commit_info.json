{"hash": "8e0708777710c39be8c5996b175e918d986ce62c", "message": "Code cleanup of Downloader class", "file_num_lines": 247, "diff_parsed": {"added": [[17, "import static io.github.bonigarcia.wdm.WdmConfig.getBoolean;"], [18, "import static io.github.bonigarcia.wdm.WdmConfig.getString;"], [19, "import static java.io.File.separator;"], [20, "import static java.lang.System.getProperty;"], [21, "import static java.nio.file.Files.createTempDirectory;"], [22, "import static java.nio.file.Files.move;"], [23, "import static java.util.UUID.randomUUID;"], [24, "import static org.apache.commons.io.FileUtils.copyInputStreamToFile;"], [25, "import static org.apache.commons.io.FileUtils.listFiles;"], [26, "import static org.rauschig.jarchivelib.ArchiveFormat.TAR;"], [27, "import static org.rauschig.jarchivelib.ArchiverFactory.createArchiver;"], [28, "import static org.rauschig.jarchivelib.CompressionType.BZIP2;"], [29, "import static org.rauschig.jarchivelib.CompressionType.GZIP;"], [30, ""], [63, "    private boolean override = getBoolean(\"wdm.override\");"], [89, "            File temporaryFile = new File(targetFile.getParentFile(),"], [90, "                    randomUUID().toString());"], [97, "                copyInputStreamToFile(httpClient.execute(get).getContent(),"], [98, "                        temporaryFile);"], [99, "            } catch (IOException e) {"], [117, "        } else {"], [118, "            // Check if existing binary is valid"], [119, "            Collection<File> listFiles = listFiles(targetFile.getParentFile(),"], [120, "                    null, true);"], [121, "            for (File file : listFiles) {"], [122, "                for (String s : driverName) {"], [123, "                    if (file.getName().startsWith(s) && file.canExecute()) {"], [124, "                        binary = file;"], [125, "                        log.debug("], [126, "                                \"Using binary driver previously downloaded {}\","], [127, "                                binary);"], [128, "                        download = false;"], [129, "                        break;"], [130, "                    } else {"], [131, "                        download = true;"], [132, "                    }"], [133, "                }"], [134, "                if (!download) {"], [135, "                    break;"], [136, "                }"], [137, "            }"], [139, ""], [140, "        if (export != null && binary != null) {"], [172, "            Enumeration<?> enu = zipFolder.entries();"], [173, ""], [174, "            while (enu.hasMoreElements()) {"], [175, "                ZipEntry zipEntry = (ZipEntry) enu.nextElement();"], [176, ""], [177, "                String name = zipEntry.getName();"], [178, "                long size = zipEntry.getSize();"], [179, "                long compressedSize = zipEntry.getCompressedSize();"], [180, "                log.trace(\"Unzipping {} (size: {} KB, compressed size: {} KB)\","], [181, "                        name, size, compressedSize);"], [182, ""], [183, "                file = new File("], [184, "                        compressedFile.getParentFile() + separator + name);"], [185, "                if (!file.exists() || override) {"], [186, "                    if (name.endsWith(\"/\")) {"], [187, "                        file.mkdirs();"], [188, "                        continue;"], [189, "                    }"], [191, "                    File parent = file.getParentFile();"], [192, "                    if (parent != null) {"], [193, "                        parent.mkdirs();"], [194, "                    }"], [195, ""], [196, "                    try (InputStream is = zipFolder.getInputStream(zipEntry)) {"], [197, "                        File temporaryFile = new File(parent,"], [198, "                                randomUUID().toString());"], [199, "                        copyInputStreamToFile(is, temporaryFile);"], [200, "                        temporaryFile.renameTo(file);"], [201, "                    }"], [202, "                    file.setExecutable(true);"], [203, "                } else {"], [204, "                    log.debug(file + \" already exists\");"], [205, "                }"], [206, ""], [207, "            }"], [224, "        File target = new File(archive.getParentFile() + separator + fileName);"], [244, "        Archiver archiver = createArchiver(TAR, GZIP);"], [252, "        Archiver archiver = createArchiver(TAR, BZIP2);"], [271, "                .replace(\"_\", separator);"], [274, "                getTargetPath() + folder + separator + version + zip, version);"], [282, "        String targetPath = getString(\"wdm.targetPath\");"], [284, "            targetPath = targetPath.replace(HOME, getProperty(\"user.home\"));"], [300, "        File tmpMsi = new File("], [301, "                createTempDirectory(msi.getName()).toFile().getAbsoluteFile()"], [302, "                        + separator + msi.getName());"], [303, "        move(msi.toPath(), tmpMsi.toPath());"], [320, "        Collection<File> listFiles = listFiles(new File(msi.getParent()),"], [321, "                new String[] { \"exe\" }, true);"]], "deleted": [[23, "import java.nio.file.Files;"], [27, "import java.util.UUID;"], [32, "import org.apache.commons.io.FileUtils;"], [33, "import org.rauschig.jarchivelib.ArchiveFormat;"], [35, "import org.rauschig.jarchivelib.ArchiverFactory;"], [36, "import org.rauschig.jarchivelib.CompressionType;"], [55, "    private boolean override = WdmConfig.getBoolean(\"wdm.override\");"], [80, "        if (!download) {"], [81, "            // Check if existing binary is valid"], [82, "            Collection<File> listFiles = FileUtils"], [83, "                    .listFiles(targetFile.getParentFile(), null, true);"], [84, "            for (File file : listFiles) {"], [85, "                for (String s : driverName) {"], [86, "                    if (file.getName().startsWith(s) && file.canExecute()) {"], [87, "                        binary = file;"], [88, "                        log.debug("], [89, "                                \"Using binary driver previously downloaded {}\","], [90, "                                binary);"], [91, "                        download = false;"], [92, "                        break;"], [93, "                    } else {"], [94, "                        download = true;"], [95, "                    }"], [96, "                }"], [97, "                if (!download) {"], [98, "                    break;"], [99, "                }"], [100, "            }"], [101, "        }"], [102, ""], [104, "            File temporaryFile = new File(targetFile.getParentFile(), UUID.randomUUID().toString());"], [111, "                FileUtils.copyInputStreamToFile("], [112, "                    httpClient.execute(get).getContent(), temporaryFile);"], [113, "            }"], [114, "            catch (IOException e) {"], [133, "        if (export != null) {"], [165, "          Enumeration<?> enu = zipFolder.entries();"], [166, ""], [167, "          while (enu.hasMoreElements()) {"], [168, "            ZipEntry zipEntry = (ZipEntry) enu.nextElement();"], [169, ""], [170, "            String name = zipEntry.getName();"], [171, "            long size = zipEntry.getSize();"], [172, "            long compressedSize = zipEntry.getCompressedSize();"], [173, "            log.trace(\"Unzipping {} (size: {} KB, compressed size: {} KB)\","], [174, "                name, size, compressedSize);"], [175, ""], [176, "            file = new File("], [177, "                compressedFile.getParentFile() + File.separator + name);"], [178, "            if (!file.exists() || override) {"], [179, "              if (name.endsWith(\"/\")) {"], [180, "                file.mkdirs();"], [181, "                continue;"], [182, "              }"], [183, ""], [184, "              File parent = file.getParentFile();"], [185, "              if (parent != null) {"], [186, "                parent.mkdirs();"], [187, "              }"], [188, ""], [189, "              try (InputStream is = zipFolder.getInputStream(zipEntry)) {"], [190, "                File temporaryFile = new File(parent, UUID.randomUUID().toString());"], [191, "                FileUtils.copyInputStreamToFile(is, temporaryFile);"], [192, "                temporaryFile.renameTo(file);"], [193, "              }"], [194, "              file.setExecutable(true);"], [195, "            } else {"], [196, "              log.debug(file + \" already exists\");"], [197, "            }"], [199, "          }"], [216, "        File target = new File("], [217, "                archive.getParentFile() + File.separator + fileName);"], [237, "        Archiver archiver = ArchiverFactory.createArchiver(ArchiveFormat.TAR,"], [238, "                CompressionType.GZIP);"], [246, "        Archiver archiver = ArchiverFactory.createArchiver(ArchiveFormat.TAR,"], [247, "                CompressionType.BZIP2);"], [266, "                .replace(\"_\", File.separator);"], [269, "                getTargetPath() + folder + File.separator + version + zip,"], [270, "                version);"], [278, "        String targetPath = WdmConfig.getString(\"wdm.targetPath\");"], [280, "            targetPath = targetPath.replace(HOME,"], [281, "                    System.getProperty(\"user.home\"));"], [297, "        File tmpMsi = new File(Files.createTempDirectory(msi.getName()).toFile()"], [298, "                .getAbsoluteFile() + File.separator + msi.getName());"], [299, "        Files.move(msi.toPath(), tmpMsi.toPath());"], [316, "        Collection<File> listFiles = FileUtils.listFiles("], [317, "                new File(msi.getParent()), new String[] { \"exe\" }, true);"]]}, "num_lines_added": 91, "num_lines_removed": 87}