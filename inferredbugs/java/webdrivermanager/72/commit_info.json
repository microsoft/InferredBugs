{"hash": "d456dfd83bd2b57e9fe5f3d3bcbf7d732f628afd", "message": "Relocate download and export logic", "file_num_lines": 1155, "diff_parsed": {"added": [[528, "    protected void downloadAndExport(String driverVersion) throws IOException {"], [529, "        Optional<String> driverInCache = searchDriverInCache(driverVersion);"], [530, "        String versionStr = isUnknown(driverVersion) ? \"(latest version)\""], [531, "                : driverVersion;"], [532, ""], [533, "        if (driverInCache.isPresent() && !config().isOverride()) {"], [534, "            storeVersionToDownload(driverVersion);"], [535, "            log.debug(\"Driver {} {} found in cache\", getDriverName(),"], [536, "                    versionStr);"], [537, "            exportDriver(driverInCache.get());"], [538, "        } else {"], [539, "            List<URL> candidateUrls = getCandidateUrls(driverVersion);"], [540, "            if (candidateUrls.isEmpty()) {"], [541, "                Architecture arch = config().getArchitecture();"], [542, "                String os = config().getOs();"], [543, "                String errorMessage = getDriverName() + \" \" + versionStr"], [544, "                        + \" for \" + os + arch.toString() + \" not found in \""], [545, "                        + getDriverUrl();"], [546, "                log.error(errorMessage);"], [547, "                throw new WebDriverManagerException(errorMessage);"], [548, "            }"], [549, ""], [550, "            // Download first candidate URL"], [551, "            URL url = candidateUrls.iterator().next();"], [552, "            String exportValue = downloader.download(url, versionToDownload,"], [553, "                    getDriverName());"], [554, "            exportDriver(exportValue);"], [555, "        }"], [556, "        downloadedVersion = versionToDownload;"], [557, "    }"], [558, ""], [1310, "    protected void storeVersionToDownload(String driverVersion) {"], [1311, "        if (!isUnknown(driverVersion)) {"], [1312, "            if (driverVersion.startsWith(\".\")) {"], [1313, "                driverVersion = driverVersion.substring(1);"], [1315, "            versionToDownload = driverVersion;"], [1353, "    protected String getKeyForPreferences() {"], [1354, "        return getDriverManagerType().name().toLowerCase();"], [1355, "    }"], [1356, ""]], "deleted": [[481, "    protected String getKeyForPreferences() {"], [482, "        return getDriverManagerType().name().toLowerCase();"], [483, "    }"], [484, ""], [584, "    protected void downloadAndExport(String driverVersion) throws IOException {"], [585, "        Optional<String> driverInCache = searchDriverInCache(driverVersion);"], [586, "        String versionStr = isUnknown(driverVersion) ? \"(latest version)\""], [587, "                : driverVersion;"], [588, ""], [589, "        if (driverInCache.isPresent() && !config().isOverride()) {"], [590, "            storeVersionToDownload(driverVersion);"], [591, "            downloadedVersion = driverVersion;"], [592, "            log.debug(\"Driver {} {} found in cache\", getDriverName(),"], [593, "                    versionStr);"], [594, "            exportDriver(driverInCache.get());"], [595, "        } else {"], [596, "            List<URL> candidateUrls = getCandidateUrls(driverVersion);"], [597, "            if (candidateUrls.isEmpty()) {"], [598, "                Architecture arch = config().getArchitecture();"], [599, "                String os = config().getOs();"], [600, "                String errorMessage = getDriverName() + \" \" + versionStr"], [601, "                        + \" for \" + os + arch.toString() + \" not found in \""], [602, "                        + getDriverUrl();"], [603, "                log.error(errorMessage);"], [604, "                throw new WebDriverManagerException(errorMessage);"], [605, "            }"], [606, ""], [607, "            // Download first candidate URL"], [608, "            URL url = candidateUrls.iterator().next();"], [609, "            String exportValue = downloader.download(url, versionToDownload,"], [610, "                    getDriverName());"], [611, "            exportDriver(exportValue);"], [612, "            downloadedVersion = versionToDownload;"], [613, "        }"], [614, "    }"], [615, ""], [1315, "    protected void storeVersionToDownload(String version) {"], [1316, "        if (!isNullOrEmpty(version)) {"], [1317, "            if (version.startsWith(\".\")) {"], [1318, "                version = version.substring(1);"], [1320, "            versionToDownload = version;"]]}, "num_lines_added": 40, "num_lines_removed": 41}