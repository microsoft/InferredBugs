    protected List<URL> getCandidateUrls(String driverVersion)
            throws IOException {
        List<URL> urls = getDrivers();
        List<URL> candidateUrls;
        log.trace("All URLs: {}", urls);
        boolean getLatest = isUnknown(driverVersion);
        Architecture arch = config().getArchitecture();
        boolean continueSearchingVersion;

        do {
            // Get the latest or concrete driver version
            String shortDriverName = getShortDriverName();
            candidateUrls = getLatest
                    ? filterDriverListByLatest(urls, shortDriverName)
                    : filterDriverListByVersion(urls, shortDriverName,
                            driverVersion);
            log.trace("Candidate URLs: {}", candidateUrls);
            if (driverVersionToDownload == null) {
                break;
            }

            // Filter by OS
            if (!getDriverName().equalsIgnoreCase("IEDriverServer")
                    && !getDriverName()
                            .equalsIgnoreCase("selenium-server-standalone")) {
                candidateUrls = urlFilter.filterByOs(candidateUrls,
                        config().getOs());
            }

            // Filter by architecture
            candidateUrls = urlFilter.filterByArch(candidateUrls, arch,
                    forcedArch);

            // Filter by distro
            candidateUrls = filterByDistro(candidateUrls);

            // Filter by ignored driver versions
            candidateUrls = filterByIgnoredDriverVersions(candidateUrls);

            // Filter by beta
            candidateUrls = urlFilter.filterByBeta(candidateUrls,
                    config().isUseBetaVersions());

            // Find out if driver version has been found or not
            continueSearchingVersion = candidateUrls.isEmpty() && getLatest;
            if (continueSearchingVersion) {
                log.info(
                        "No proper driver found for {} {} ... seeking another version",
                        getDriverName(), driverVersionToDownload);
                urls = removeFromList(urls, driverVersionToDownload);
                driverVersionToDownload = null;
            }
        } while (continueSearchingVersion);
        return candidateUrls;
    }