{"hash": "26eb8b4781ddf765188deb22a027640931dd5bea", "message": "Rename version() method to driverVersion() in WebDriverManager API", "file_num_lines": 1178, "diff_parsed": {"added": [[118, "    protected abstract void setDriverVersion(String driverVersion);"], [135, "    protected String driverVersionToDownload;"], [136, "    protected String downloadedDriverVersion;"], [270, "    public WebDriverManager driverVersion(String driverVersion) {"], [271, "        setDriverVersion(driverVersion);"], [341, "    public WebDriverManager ignoreDriverVersions(String... driverVersions) {"], [342, "        config().setIgnoreVersions(driverVersions);"], [429, "        return instanceMap.get(getDriverManagerType()).downloadedDriverVersion;"], [432, "    public List<String> getDriverVersions() {"], [436, "            List<String> driverVersionList = new ArrayList<>();"], [438, "                String driverVersion = getCurrentVersion(url);"], [439, "                if (driverVersion.isEmpty()"], [440, "                        || driverVersion.equalsIgnoreCase(\"icons\")) {"], [443, "                if (!driverVersionList.contains(driverVersion)) {"], [444, "                    driverVersionList.add(driverVersion);"], [447, "            log.trace(\"Driver version list before sorting {}\","], [448, "                    driverVersionList);"], [449, "            sort(driverVersionList, new VersionComparator());"], [450, "            return driverVersionList;"], [481, "                        getDriverVersionLabel(driverVersion));"], [550, "                    getDriverVersionLabel(driverVersion), os, arch.toString(),"], [558, "        return downloader.download(url, driverVersionToDownload,"], [559, "                getDriverName());"], [563, "        downloadedDriverVersion = driverVersionToDownload;"], [595, "    protected String preDownload(String target, String driverVersion) {"], [596, "        log.trace(\"Pre-download. target={}, driverVersion={}\", target,"], [597, "                driverVersion);"], [673, "                    \"Driver for {} not found in {} properties (using {} version.properties)\","], [736, "    protected void handleException(Exception e, String driverVersion) {"], [737, "        String driverVersionStr = getDriverVersionLabel(driverVersion);"], [740, "                driverVersionStr, e.getMessage());"], [744, "            driverVersion = \"\";"], [748, "            manage(driverVersion);"], [765, "            // Get the latest or concrete driver version"], [767, "            candidateUrls = getLatest"], [768, "                    ? filterDriverListByLatest(urls, shortDriverName)"], [769, "                    : filterDriverListByVersion(urls, shortDriverName,"], [770, "                            driverVersion);"], [772, "            if (driverVersionToDownload == null) {"], [791, "            // Filter by ignored driver versions"], [792, "            candidateUrls = filterByIgnoredDriverVersions(candidateUrls);"], [803, "                        getDriverName(), driverVersionToDownload);"], [804, "                urls = removeFromList(urls, driverVersionToDownload);"], [805, "                driverVersionToDownload = null;"], [811, "    protected List<URL> filterByIgnoredDriverVersions(List<URL> candidateUrls) {"], [906, "    protected List<URL> removeFromList(List<URL> list, String driverVersion) {"], [909, "            if (url.getFile().contains(driverVersion)) {"], [916, "    protected List<URL> filterDriverListByVersion(List<URL> list,"], [917, "            String driverName, String driverVersion) {"], [920, "            if (url.getFile().contains(driverName)"], [921, "                    && url.getFile().contains(driverVersion)"], [927, "        if (driverVersionToDownload != null"], [928, "                && !driverVersionToDownload.equals(driverVersion)) {"], [929, "            driverVersionToDownload = driverVersion;"], [930, "            log.info(\"Using {} {}\", driverName, driverVersion);"], [935, "    protected List<URL> filterDriverListByLatest(List<URL> list,"], [936, "            String driverName) {"], [949, "                    if (driverVersionToDownload == null) {"], [950, "                        driverVersionToDownload = currentVersion;"], [952, "                    if (versionCompare(currentVersion,"], [953, "                            driverVersionToDownload) > 0) {"], [954, "                        driverVersionToDownload = currentVersion;"], [957, "                    if (url.getFile().contains(driverVersionToDownload)) {"], [967, "        storeVersionToDownload(driverVersionToDownload);"], [968, "        log.info(\"Latest version of {} is {}\", driverName,"], [969, "                driverVersionToDownload);"], [1103, "            String driverVersion = driverVersionToDownload;"], [1115, "                            getVersionFromGitHub(releaseArray, driverVersion) };"], [1134, "    protected GitHubApi getVersionFromGitHub(GitHubApi[] releaseArray,"], [1135, "            String driverVersion) {"], [1138, "            log.trace(\"Get version {} of {}\", driverVersion, release);"], [1140, "                    && release.getName().contains(driverVersion))"], [1142, "                            && release.getTagName().contains(driverVersion))) {"], [1259, "        driverVersionToDownload = null;"], [1335, "            driverVersionToDownload = driverVersion;"], [1348, "            Optional<String> driverVersion) {"], [1349, "        String url = driverVersion.isPresent()"], [1350, "                ? getDriverUrl() + LATEST_RELEASE + \"_\" + driverVersion.get()"], [1377, "    protected String getDriverVersionLabel(String driverVersion) {"]], "deleted": [[118, "    protected abstract void setDriverVersion(String version);"], [135, "    protected String versionToDownload;"], [136, "    protected String downloadedVersion;"], [270, "    public WebDriverManager version(String version) {"], [271, "        setDriverVersion(version);"], [341, "    public WebDriverManager ignoreVersions(String... versions) {"], [342, "        config().setIgnoreVersions(versions);"], [429, "        return instanceMap.get(getDriverManagerType()).downloadedVersion;"], [432, "    public List<String> getVersions() {"], [436, "            List<String> versions = new ArrayList<>();"], [438, "                String version = getCurrentVersion(url);"], [439, "                if (version.isEmpty() || version.equalsIgnoreCase(\"icons\")) {"], [442, "                if (!versions.contains(version)) {"], [443, "                    versions.add(version);"], [446, "            log.trace(\"Version list before sorting {}\", versions);"], [447, "            sort(versions, new VersionComparator());"], [448, "            return versions;"], [479, "                        getLabel(driverVersion));"], [548, "                    getLabel(driverVersion), os, arch.toString(),"], [556, "        return downloader.download(url, versionToDownload, getDriverName());"], [560, "        downloadedVersion = versionToDownload;"], [592, "    protected String preDownload(String target, String version) {"], [593, "        log.trace(\"Pre-download. target={}, version={}\", target, version);"], [669, "                    \"Driver for {} not found in {} properties (using {} version)\","], [732, "    protected void handleException(Exception e, String version) {"], [733, "        String versionStr = isNullOrEmpty(version) ? \"(latest version)\""], [734, "                : version;"], [737, "                versionStr, e.getMessage());"], [741, "            version = \"\";"], [745, "            manage(version);"], [762, "            // Get the latest or concrete version"], [764, "            candidateUrls = getLatest ? checkLatest(urls, shortDriverName)"], [765, "                    : getVersion(urls, shortDriverName, driverVersion);"], [767, "            if (versionToDownload == null) {"], [786, "            // Filter by ignored versions"], [787, "            candidateUrls = filterByIgnoredVersions(candidateUrls);"], [798, "                        getDriverName(), versionToDownload);"], [799, "                urls = removeFromList(urls, versionToDownload);"], [800, "                versionToDownload = null;"], [806, "    protected List<URL> filterByIgnoredVersions(List<URL> candidateUrls) {"], [901, "    protected List<URL> removeFromList(List<URL> list, String version) {"], [904, "            if (url.getFile().contains(version)) {"], [911, "    protected List<URL> getVersion(List<URL> list, String driver,"], [912, "            String version) {"], [915, "            if (url.getFile().contains(driver)"], [916, "                    && url.getFile().contains(version)"], [922, "        if (versionToDownload != null && !versionToDownload.equals(version)) {"], [923, "            versionToDownload = version;"], [924, "            log.info(\"Using {} {}\", driver, version);"], [929, "    protected List<URL> checkLatest(List<URL> list, String driverName) {"], [942, "                    if (versionToDownload == null) {"], [943, "                        versionToDownload = currentVersion;"], [945, "                    if (versionCompare(currentVersion, versionToDownload) > 0) {"], [946, "                        versionToDownload = currentVersion;"], [949, "                    if (url.getFile().contains(versionToDownload)) {"], [959, "        storeVersionToDownload(versionToDownload);"], [960, "        log.info(\"Latest version of {} is {}\", driverName, versionToDownload);"], [1094, "            String driverVersion = versionToDownload;"], [1106, "                            getVersion(releaseArray, driverVersion) };"], [1125, "    protected GitHubApi getVersion(GitHubApi[] releaseArray, String version) {"], [1128, "            log.trace(\"Get version {} of {}\", version, release);"], [1130, "                    && release.getName().contains(version))"], [1132, "                            && release.getTagName().contains(version))) {"], [1249, "        versionToDownload = null;"], [1325, "            versionToDownload = driverVersion;"], [1338, "            Optional<String> version) {"], [1339, "        String url = version.isPresent()"], [1340, "                ? getDriverUrl() + LATEST_RELEASE + \"_\" + version.get()"], [1367, "    protected String getLabel(String driverVersion) {"]]}, "num_lines_added": 79, "num_lines_removed": 69}