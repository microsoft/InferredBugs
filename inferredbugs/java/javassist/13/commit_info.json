{"hash": "9b3b5570519634919030492e4dd9562cdd64d9a4", "message": "modified the code generator to compute constant expressions at compile time.\n\n\ngit-svn-id: http://anonsvn.jboss.org/repos/javassist/trunk@130 30ef5769-5b8d-40dd-aea6-55b5d6557bb3", "file_num_lines": 731, "diff_parsed": {"added": [[21, "import javassist.Modifier;"], [231, "    /*"], [232, "     * If atBinExpr() substitutes a new expression for the original"], [233, "     * binary-operator expression, it changes the operator name to '+'"], [234, "     * (if the original is not '+') and sets the new expression to the"], [235, "     * left-hand-side expression and null to the right-hand-side expression."], [236, "     */"], [251, "                    expr.setOprand1(e);"], [257, "                ASTree left = expr.oprand1();"], [258, "                ASTree right = expr.oprand2();"], [259, "                left.accept(this);"], [261, "                right.accept(this);"], [262, "                if (!isConstant(expr, token, left, right))"], [263, "                    computeBinExprType(expr, token, type1);"], [273, "    /* EXPR must be a + expression."], [274, "     * atPlusExpr() returns non-null if the given expression is string"], [275, "     * concatenation.  The returned value is \"new StringBuffer().append..\"."], [276, "     */"], [281, "            // this expression has been already type-checked."], [282, "            // see atBinExpr() above."], [283, "            left.accept(this);"], [304, ""], [305, "        if (isConstant(expr, '+', left, right))"], [306, "            return null;"], [307, ""], [325, "    private boolean isConstant(BinExpr expr, int op, ASTree left,"], [326, "                               ASTree right) throws CompileError"], [327, "    {"], [328, "        left = stripPlusExpr(left);"], [329, "        right = stripPlusExpr(right);"], [330, "        ASTree newExpr = null;"], [331, "        if (left instanceof StringL && right instanceof StringL && op == '+')"], [332, "            newExpr = new StringL(((StringL)left).get()"], [333, "                                  + ((StringL)right).get());"], [334, "        else if (left instanceof IntConst)"], [335, "            newExpr = ((IntConst)left).compute(op, right);"], [336, "        else if (left instanceof DoubleConst)"], [337, "            newExpr = ((DoubleConst)left).compute(op, right);"], [338, ""], [339, "        if (newExpr == null)"], [340, "            return false;       // not a constant expression"], [341, "        else {"], [342, "            expr.setOperator('+');"], [343, "            expr.setOprand1(newExpr);"], [344, "            expr.setOprand2(null);"], [345, "            newExpr.accept(this);   // for setting exprType, arrayDim, ..."], [346, "            return true;"], [347, "        }"], [348, "    }"], [349, ""], [350, "    private static ASTree stripPlusExpr(ASTree expr) {"], [351, "        if (expr instanceof BinExpr) {"], [352, "            BinExpr e = (BinExpr)expr;"], [353, "            if (e.getOperator() == '+' && e.oprand2() == null)"], [354, "                return e.getLeft();"], [355, "        }"], [356, "        else if (expr instanceof Expr) {    // note: BinExpr extends Expr."], [357, "            Expr e = (Expr)expr;"], [358, "            int op = e.getOperator();"], [359, "            if (op == MEMBER) {"], [360, "                ASTree cexpr = getConstantFieldValue((Member)e.oprand2());"], [361, "                if (cexpr != null)"], [362, "                    return cexpr;"], [363, "            }"], [364, "            else if (op == '+' && e.getRight() == null)"], [365, "                return e.getLeft();"], [366, "        }"], [367, "        else if (expr instanceof Member) {"], [368, "            ASTree cexpr = getConstantFieldValue((Member)expr);"], [369, "            if (cexpr != null)"], [370, "                return cexpr;"], [371, "        }"], [372, ""], [373, "        return expr;"], [374, "    }"], [375, ""], [376, "    /**"], [377, "     * If MEM is a static final field, this method returns a constant"], [378, "     * expression representing the value of that field."], [379, "     */"], [380, "    private static ASTree getConstantFieldValue(Member mem) {"], [381, "        return getConstantFieldValue(mem.getField());"], [382, "    }"], [383, ""], [384, "    public static ASTree getConstantFieldValue(CtField f) {"], [385, "        if (f == null)"], [386, "            return null;"], [387, ""], [388, "        Object value = f.getConstantValue();"], [389, "        if (value == null)"], [390, "            return null;"], [391, ""], [392, "        if (value instanceof String)"], [393, "            return new StringL((String)value);"], [394, "        else if (value instanceof Double || value instanceof Float) {"], [395, "            int token = (value instanceof Double)"], [396, "                        ? DoubleConstant : FloatConstant;"], [397, "            return new DoubleConst(((Number)value).doubleValue(), token);"], [398, "        }"], [399, "        else if (value instanceof Number) {"], [400, "            int token = (value instanceof Long) ? LongConstant : IntConstant;"], [401, "            return new IntConst(((Number)value).longValue(), token);"], [402, "        }"], [403, "        else if (value instanceof Boolean)"], [404, "            return new Keyword(((Boolean)value).booleanValue()"], [405, "                               ? TokenId.TRUE : TokenId.FALSE);"], [406, "        else"], [407, "            return null;"], [408, "    }"], [409, ""], [520, "            oprand.accept(this);"], [521, "            if (!isConstant(expr, token, oprand))"], [522, "                if (token == '-' || token == '~')"], [523, "                    if (CodeGen.isP_INT(exprType))"], [524, "                        exprType = INT;         // type may be BYTE, ..."], [528, "    private boolean isConstant(Expr expr, int op, ASTree oprand) {"], [529, "        oprand = stripPlusExpr(oprand);"], [530, "        if (oprand instanceof IntConst) {"], [531, "            IntConst c = (IntConst)oprand;"], [532, "            long v = c.get();"], [533, "            if (op == '-')"], [534, "                v = -v;"], [535, "            else if (op == '~')"], [536, "                v = ~v;"], [537, "            else"], [538, "                return false;"], [539, ""], [540, "            c.set(v);"], [541, "        }"], [542, "        else if (oprand instanceof DoubleConst) {"], [543, "            DoubleConst c = (DoubleConst)oprand;"], [544, "            if (op == '-')"], [545, "                c.set(-c.get());"], [546, "            else"], [547, "                return false;"], [548, "        }"], [549, "        else"], [550, "            return false;"], [551, ""], [552, "        expr.setOperator('+');"], [553, "        return true;"], [554, "    }"], [555, ""], [594, "                    e.setOperator(MEMBER);"], [595, "                    e.setOprand1(new Symbol(MemberResolver.jvmToJavaName("], [596, "                                                            className)));"], [613, "                = atMethodCallCore(targetClass, mname, args);"], [724, "    /* if EXPR is to access a static field, fieldAccess() translates EXPR"], [725, "     * into an expression using '#' (MEMBER).  For example, it translates"], [726, "     * java.lang.Integer.TYPE into java.lang.Integer#TYPE.  This translation"], [727, "     * speeds up type resolution by MemberCodeGen."], [728, "     */"], [731, "            Member mem = (Member)expr;"], [732, "            String name = mem.get();"], [734, "                CtField f = thisClass.getField(name);"], [735, "                if (Modifier.isStatic(f.getModifiers()))"], [736, "                    mem.setField(f);"], [737, ""], [738, "                return f;"], [748, "            if (op == MEMBER) {"], [749, "                Member mem = (Member)e.oprand2();"], [750, "                CtField f"], [751, "                    = resolver.lookupField(((Symbol)e.oprand1()).get(), mem);"], [752, "                mem.setField(f);"], [753, "                return f;"], [754, "            }"], [770, "                    Member fname = (Member)e.oprand2();"], [771, "                    String jvmClassName = nfe.getField();"], [772, "                    CtField f = resolver.lookupFieldByJvmName2(jvmClassName,"], [773, "                                                               fname, expr);"], [774, "                    e.setOperator(MEMBER);"], [775, "                    e.setOprand1(new Symbol(MemberResolver.jvmToJavaName("], [776, "                                                            jvmClassName)));"], [777, "                    fname.setField(f);"], [778, "                    return f;"]], "deleted": [[244, "                    expr.setLeft(e);"], [250, "                expr.oprand1().accept(this);"], [252, "                expr.oprand2().accept(this);"], [253, "                computeBinExprType(expr, token, type1);"], [263, "    // expr must be a + expression."], [268, "            /* this expression has been already type-checked since it is"], [269, "               string concatenation."], [270, "               see atBinExpr() above."], [271, "             */"], [272, "            exprType = CLASS;"], [273, "            arrayDim = 0;"], [274, "            className = jvmJavaLangString;"], [422, "            expr.oprand1().accept(this);"], [423, "            if (token == '-' || token == '~')"], [424, "                if (CodeGen.isP_INT(exprType))"], [425, "                    exprType = INT;         // type may be BYTE, ..."], [483, "            = atMethodCallCore(targetClass, mname, args);"], [596, "            String name = ((Member)expr).get();"], [598, "                return thisClass.getField(name);"], [608, "            if (op == MEMBER)"], [609, "                return resolver.lookupField(((Symbol)e.oprand1()).get(),"], [610, "                                            (Symbol)e.oprand2());"], [626, "                    Symbol fname = (Symbol)e.oprand2();"], [627, "                    return resolver.lookupFieldByJvmName2(nfe.getField(),"], [628, "                                                          fname, expr);"]]}, "num_lines_added": 175, "num_lines_removed": 25}