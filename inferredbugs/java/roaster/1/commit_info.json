{"hash": "414d29f066636c17fbedc595d53d627cec89b747", "message": "FORGE-1097: Multiple fields are split into their own FieldDeclarations", "file_num_lines": 459, "diff_parsed": {"added": [[10, "import java.util.Iterator;"], [46, "   private final VariableDeclarationFragment fragment;"], [57, "      this.fragment = ast.newVariableDeclarationFragment();"], [58, "      this.field = ast.newFieldDeclaration(this.fragment);"], [61, "   public FieldImpl(final O parent, final Object internal)"], [63, "      this(parent, internal, false);"], [66, "   @SuppressWarnings(\"unchecked\")"], [67, "   public FieldImpl(final O parent, final Object internal, boolean copy)"], [70, "      if (copy)"], [71, "      {"], [72, "         VariableDeclarationFragment newFieldFragment = (VariableDeclarationFragment) internal;"], [73, "         FieldDeclaration newFieldDeclaration = (FieldDeclaration) newFieldFragment.getParent();"], [74, "         this.field = (FieldDeclaration) ASTNode.copySubtree(ast, newFieldDeclaration);"], [75, "         Iterator<VariableDeclarationFragment> fragmentsIterator = this.field.fragments().iterator();"], [76, "         VariableDeclarationFragment temp = null;"], [77, "         while (fragmentsIterator.hasNext())"], [78, "         {"], [79, "            VariableDeclarationFragment variableDeclarationFragment = fragmentsIterator.next();"], [80, "            if (newFieldFragment.getName().getFullyQualifiedName()"], [81, "                     .equals(variableDeclarationFragment.getName().getFullyQualifiedName()))"], [82, "            {"], [83, "               temp = variableDeclarationFragment;"], [84, "            }"], [85, "            else"], [86, "            {"], [87, "               fragmentsIterator.remove();"], [88, "            }"], [89, "         }"], [90, "         this.fragment = temp;"], [91, "      }"], [92, "      else"], [93, "      {"], [94, "         this.fragment = (VariableDeclarationFragment) internal;"], [95, "         this.field = (FieldDeclaration) this.fragment.getParent();"], [96, "      }"], [108, "      return fragment;"], [304, "      fragment.setName(ast.newSimpleName(name));"], [319, "      int extraDimensions = fragment.getExtraDimensions();"], [325, "            // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return"], [326, "            // value."], [333, "         for (int dimensionsToAdd = 0; dimensionsToAdd < extraDimensions; dimensionsToAdd++)"], [455, "      String result = fragment.getInitializer().toString();"], [462, "      String result = Strings.unquote(fragment.getInitializer().toString());"], [471, "      VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) temp.getFields().get(0).getInternal();"], [472, "      fragment.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));"], [487, "      result = prime * result + ((field == null) ? 0 : field.hashCode());"], [488, "      result = prime * result + ((fragment == null) ? 0 : fragment.hashCode());"], [493, "   public boolean equals(Object obj)"], [509, "      if (fragment == null)"], [510, "      {"], [511, "         if (other.fragment != null)"], [512, "            return false;"], [514, "      else if (!fragment.equals(other.fragment))"], [515, "         return false;"], [533, ""]], "deleted": [[55, "      this.field = ast.newFieldDeclaration(ast.newVariableDeclarationFragment());"], [58, "   public FieldImpl(final O parent, final String declaration)"], [60, "      init(parent);"], [61, ""], [62, "      String stub = \"public class Stub { \" + declaration + \" }\";"], [63, "      JavaClass temp = (JavaClass) JavaParser.parse(stub);"], [64, "      List<Field<JavaClass>> fields = temp.getFields();"], [65, "      FieldDeclaration newField = (FieldDeclaration) fields.get(0).getInternal();"], [66, "      FieldDeclaration subtree = (FieldDeclaration) ASTNode.copySubtree(ast, newField);"], [67, "      this.field = subtree;"], [70, "   public FieldImpl(final O parent, final Object internal)"], [73, "      this.field = (FieldDeclaration) internal;"], [85, "      return field;"], [281, "      for (Object f : field.fragments())"], [282, "      {"], [283, "         if (f instanceof VariableDeclarationFragment)"], [284, "         {"], [285, "            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;"], [286, "            frag.setName(ast.newSimpleName(name));"], [287, "            break;"], [288, "         }"], [289, "      }"], [304, "      int extraDimensions = 0;"], [305, "      for (Object f : field.fragments())"], [306, "      {"], [307, "         if (f instanceof VariableDeclarationFragment)"], [308, "         {"], [309, "            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;"], [310, "            extraDimensions = frag.getExtraDimensions();"], [311, "            break;"], [312, "         }"], [313, "      }"], [319, "            // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return value."], [326, "         for(int dimensionsToAdd = 0; dimensionsToAdd < extraDimensions; dimensionsToAdd++)"], [448, "      String result = null;"], [449, "      for (Object f : field.fragments())"], [450, "      {"], [451, "         if (f instanceof VariableDeclarationFragment)"], [452, "         {"], [453, "            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;"], [454, "            result = frag.getInitializer().toString();"], [455, "            break;"], [456, "         }"], [457, "      }"], [464, "      String result = null;"], [465, "      for (Object f : field.fragments())"], [466, "      {"], [467, "         if (f instanceof VariableDeclarationFragment)"], [468, "         {"], [469, "            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;"], [470, "            result = Strings.unquote(frag.getInitializer().toString());"], [471, "            break;"], [472, "         }"], [473, "      }"], [482, "      FieldDeclaration internal = (FieldDeclaration) temp.getFields().get(0).getInternal();"], [483, ""], [484, "      for (Object f : internal.fragments())"], [485, "      {"], [486, "         if (f instanceof VariableDeclarationFragment)"], [487, "         {"], [488, "            VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) f;"], [489, "            VariableDeclarationFragment localFrag = getFragment(field);"], [490, "            localFrag.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));"], [491, "            break;"], [492, "         }"], [493, "      }"], [494, ""], [504, "   private VariableDeclarationFragment getFragment(final FieldDeclaration field)"], [505, "   {"], [506, "      VariableDeclarationFragment result = null;"], [507, "      for (Object f : field.fragments())"], [508, "      {"], [509, "         if (f instanceof VariableDeclarationFragment)"], [510, "         {"], [511, "            result = (VariableDeclarationFragment) f;"], [512, "            break;"], [513, "         }"], [514, "      }"], [515, "      return result;"], [516, "   }"], [517, ""], [523, "      result = (prime * result) + ((field == null) ? 0 : field.hashCode());"], [528, "   public boolean equals(final Object obj)"], [531, "      {"], [533, "      }"], [535, "      {"], [537, "      }"], [539, "      {"], [541, "      }"], [546, "         {"], [548, "         }"], [551, "      {"], [571, ""]]}, "num_lines_added": 55, "num_lines_removed": 93}