{"hash": "91eedeb27bc3ff5d23f00d808a75914673a88ab7", "message": "fixed bad request bug...", "file_num_lines": 221, "diff_parsed": {"added": [[63, "\tprivate org.apache.commons.httpclient.HttpMethod createHttpMethod("], [64, "\t\t\tHttpMethod method, java.net.URI url) throws HttpClientException {"], [65, "\t\torg.apache.commons.httpclient.HttpMethod httpMethod = null;"], [66, "\t\ttry {"], [67, "\t\t\tURI uri = new URI(url.toString(), false, Consts.UTF_8.name());"], [68, "\t\t\tif (method == HttpMethod.GET) {"], [69, "\t\t\t\thttpMethod = new GetMethod();"], [70, "\t\t\t} else if (method == HttpMethod.HEAD) {"], [71, "\t\t\t\thttpMethod = new HeadMethod();"], [72, "\t\t\t} else if (method == HttpMethod.POST) {"], [73, "\t\t\t\thttpMethod = new PostMethod();"], [74, "\t\t\t} else if (method == HttpMethod.PUT) {"], [75, "\t\t\t\treturn new PutMethod();"], [76, "\t\t\t} else if (method == HttpMethod.DELETE) {"], [77, "\t\t\t\thttpMethod = new DeleteMethod();"], [78, "\t\t\t} else if (method == HttpMethod.OPTIONS) {"], [79, "\t\t\t\thttpMethod = new OptionsMethod();"], [80, "\t\t\t} else if (method == HttpMethod.TRACE) {"], [81, "\t\t\t\treturn new TraceMethod(uri.getEscapedURI());"], [82, "\t\t\t} else {"], [83, "\t\t\t\tthrow new HttpClientException(\"unknown request method \""], [84, "\t\t\t\t\t\t+ method + \"for\" + uri);"], [85, "\t\t\t}"], [86, "\t\t\thttpMethod.setURI(uri);"], [87, "\t\t} catch (IOException e) {"], [88, "\t\t\tthrow new HttpClientException(\"I/O error on \" + method.name()"], [89, "\t\t\t\t\t+ \" setURI for \\\"\" + url.toString() + \"\\\":\""], [90, "\t\t\t\t\t+ e.getMessage(), e);"], [92, "\t\treturn httpMethod;"], [99, "\t\t\torg.apache.commons.httpclient.HttpMethod httpMethod = createHttpMethod("], [100, "\t\t\t\t\trequest.getMethod(), request.getURI());"], [101, "\t\t\tboolean useSSL = \"https\".equals(request.getURI().getScheme());"], [136, "\t\t\t\theaders.set(HttpHeaders.HOST, request.getURI().getHost());"]], "deleted": [[63, "\tprivate org.apache.commons.httpclient.HttpMethod method2method("], [64, "\t\t\tHttpMethod method) {"], [65, "\t\tif (method == HttpMethod.GET) {"], [66, "\t\t\treturn new GetMethod();"], [67, "\t\t} else if (method == HttpMethod.HEAD) {"], [68, "\t\t\treturn new HeadMethod();"], [69, "\t\t} else if (method == HttpMethod.POST) {"], [70, "\t\t\treturn new PostMethod();"], [71, "\t\t} else if (method == HttpMethod.PUT) {"], [72, "\t\t\treturn new PutMethod();"], [73, "\t\t} else if (method == HttpMethod.DELETE) {"], [74, "\t\t\treturn new DeleteMethod();"], [75, "\t\t} else if (method == HttpMethod.OPTIONS) {"], [76, "\t\t\treturn new OptionsMethod();"], [77, "\t\t} else {"], [78, "\t\t\treturn null;"], [86, "\t\t\tURI uri = new URI(request.getURI().toString(), false,"], [87, "\t\t\t\t\tConsts.UTF_8.name());"], [88, "\t\t\torg.apache.commons.httpclient.HttpMethod httpMethod = method2method(request"], [89, "\t\t\t\t\t.getMethod());"], [90, "\t\t\tif (request.getMethod() == HttpMethod.TRACE) {"], [91, "\t\t\t\thttpMethod = new TraceMethod(uri.getEscapedURI());"], [92, "\t\t\t} else {"], [93, "\t\t\t\thttpMethod.setURI(uri);"], [94, "\t\t\t}"], [95, "\t\t\tboolean useSSL = \"https\".equals(uri.getScheme());"], [130, "\t\t\t\theaders.set(HttpHeaders.HOST, uri.getHost());"]]}, "num_lines_added": 33, "num_lines_removed": 27}