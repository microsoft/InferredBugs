{"hash": "b2afd0a547b91c125621d26f75c133cedcb819f1", "message": "don't eat from your piece of pie too early", "file_num_lines": 368, "diff_parsed": {"added": [[40, "    private long evictedEntries;"], [87, "        evictedEntries = 0L;"], [100, "    long evictedEntries()"], [101, "    {"], [102, "        return evictedEntries;"], [103, "    }"], [104, ""], [128, "    synchronized boolean replaceEntry(KeyBuffer key, long newHashEntryAdr, long bytes)"], [130, "        if (freeCapacity - bytes < cleanUpTriggerFree)"], [131, "            cleanUp();"], [132, ""], [133, "        freeCapacity -= bytes;"], [134, ""], [465, "    synchronized void cleanUp()"], [492, "        evictedEntries += evicted;"]], "deleted": [[19, "import static org.caffinitas.ohc.Constants.allocLen;"], [122, "    synchronized boolean replaceEntry(KeyBuffer key, long newHashEntryAdr)"], [454, "    synchronized long allocate(long keyLen, long valueLen)"], [455, "    {"], [456, "        if (keyLen < 0 || valueLen < 0)"], [457, "            throw new IllegalArgumentException();"], [458, ""], [459, "        // allocate memory for whole hash-entry block-chain"], [460, "        long bytes = allocLen(keyLen, valueLen);"], [461, ""], [462, "        if (freeCapacity - bytes < cleanUpTriggerFree)"], [463, "            cleanUp();"], [464, ""], [465, "        freeCapacity-=bytes;"], [466, "        if (freeCapacity < 0L)"], [467, "        {"], [468, "            freeCapacity+=bytes;"], [469, "            return 0L;"], [470, "        }"], [471, ""], [472, "        long adr = Uns.allocate(bytes);"], [473, "        if (adr != 0L)"], [474, "            return adr;"], [475, ""], [476, "        freeCapacity+=bytes;"], [477, "        return 0L;"], [478, "    }"], [479, ""], [480, "    synchronized long cleanUp()"], [507, ""], [508, "        return evicted;"]]}, "num_lines_added": 15, "num_lines_removed": 31}