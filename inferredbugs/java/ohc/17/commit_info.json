{"hash": "a99a0ea703fe7c0a86d3e4aed695801166f7b466", "message": "move dereference operation outside of synchronized/critical path", "file_num_lines": 459, "diff_parsed": {"added": [[18, "import java.util.ArrayList;"], [53, "    private final ThreadLocal<List<Long>> dereferenceList = new ThreadLocal<List<Long>>()"], [54, "    {"], [55, "        protected List<Long> initialValue()"], [56, "        {"], [57, "            return new ArrayList<>();"], [58, "        }"], [59, "    };"], [60, ""], [163, "    boolean putEntry(long newHashEntryAdr, long hash, long keyLen, long bytes, boolean ifAbsent, long oldValueAdr, long oldValueLen)"], [164, "    {"], [165, "        boolean r = putEntryInt(newHashEntryAdr, hash, keyLen, bytes, ifAbsent, oldValueAdr, oldValueLen);"], [166, "        processDereferences();"], [167, "        return r;"], [168, "    }"], [169, ""], [170, "    private synchronized boolean putEntryInt(long newHashEntryAdr, long hash, long keyLen, long bytes, boolean ifAbsent, long oldValueAdr, long oldValueLen)"], [200, "            if (!removeEldest())"], [246, "    void removeEntry(long removeHashEntryAdr)"], [247, "    {"], [248, "        removeEntryInt(removeHashEntryAdr);"], [249, "        processDereferences();"], [250, "    }"], [251, ""], [252, "    void removeEntry(KeyBuffer key)"], [253, "    {"], [254, "        removeEntryInt(key);"], [255, "        processDereferences();"], [256, "    }"], [257, ""], [258, "    private synchronized void removeEntryInt(long removeHashEntryAdr)"], [280, "    private synchronized void removeEntryInt(KeyBuffer key)"], [522, "        // add to a ThreadLocal deref list since a dereference can become very expensive if a free() is involved"], [523, "        dereferenceList.get().add(hashEntryAdr);"], [524, "    }"], [525, ""], [526, "    private void processDereferences()"], [527, "    {"], [528, "        // process ThreadLocal deref list since a dereference can become very expensive if a free() is involved"], [529, "        List<Long> derefList = dereferenceList.get();"], [530, "        for (long hashEntryAdr : derefList)"], [531, "            dereference(hashEntryAdr);"], [532, "        derefList.clear();"], [533, "    }"], [534, ""], [535, "    void dereference(long hashEntryAdr)"], [536, "    {"], [537, "        if (HashEntries.dereference(hashEntryAdr))"], [538, "        {"], [539, "            long bytes = HashEntries.getAllocLen(hashEntryAdr);"], [540, ""], [541, "            HashEntries.free(hashEntryAdr, bytes);"], [542, ""], [543, "            freeCapacity.addAndGet(bytes);"], [544, "        }"], [595, "    private boolean removeEldest()"]], "deleted": [[154, "    synchronized boolean putEntry(long newHashEntryAdr, long hash, long keyLen, long bytes, boolean ifAbsent, long oldValueAdr, long oldValueLen)"], [184, "            if (!removeOldest())"], [230, "    synchronized void removeEntry(long removeHashEntryAdr)"], [252, "    synchronized void removeEntry(KeyBuffer key)"], [473, "    //"], [474, "    // eviction/replacement/cleanup"], [475, "    //"], [476, ""], [498, "        dereference(hashEntryAdr);"], [549, "    private boolean removeOldest()"], [563, ""], [564, "    void dereference(long hashEntryAdr)"], [565, "    {"], [566, "        if (HashEntries.dereference(hashEntryAdr))"], [567, "        {"], [568, "            long bytes = HashEntries.getAllocLen(hashEntryAdr);"], [569, ""], [570, "            HashEntries.free(hashEntryAdr, bytes);"], [571, ""], [572, "            freeCapacity.addAndGet(bytes);"], [573, "        }"], [574, "    }"]]}, "num_lines_added": 56, "num_lines_removed": 22}