{"hash": "7774d96a2d86d846061267e0f63f8c8138bfab3d", "message": "generalized cross vailidation, fixed glitch in pmo", "file_num_lines": 49, "diff_parsed": {"added": [[55, "        double runningLoss = 0;"], [56, "        double runningWeightOfValidationSet = 0;"], [57, "        boolean gotNextCycle= false;"], [58, "        while (dataCycler.hasMore() || gotNextCycle){"], [59, "            List<T> validationSet = dataCycler.getValidationSet();"], [60, "            double validationSetWeight = getInstanceWeights(validationSet);"], [61, "            PM predictiveModel = modelBuilder.buildPredictiveModel(dataCycler.getTrainingSet());"], [62, "            runningLoss += lossChecker.calculateLoss(predictiveModel, validationSet) * validationSetWeight;"], [63, "            runningWeightOfValidationSet += validationSetWeight;"], [64, "            gotNextCycle = dataCycler.nextCycle();"], [66, ""], [67, "        return runningLoss / runningWeightOfValidationSet;"]], "deleted": [[6, "import quickml.data.instances.RegressionInstance;"], [11, "import java.io.BufferedWriter;"], [12, "import java.io.FileWriter;"], [13, "import java.io.IOException;"], [59, "        try  {"], [60, ""], [61, "            double runningLoss = 0;"], [62, "            double runningWeightOfValidationSet = 0;"], [63, "            boolean gotNextCycle = false;"], [64, "            int cycle = 0;"], [65, "            while (dataCycler.hasMore() || gotNextCycle) {"], [66, "                BufferedWriter trainingWriter = new BufferedWriter(new FileWriter(\"training\" + cycle));"], [67, "                trainingWriter.write(\"FileNo\");"], [68, ""], [69, "                for (T instance : dataCycler.getValidationSet()) {"], [70, "                    trainingWriter.write(\"\" + ((RegressionInstance) instance).id + \"\\n\");"], [71, "                }"], [72, "                BufferedWriter testWriter = new BufferedWriter(new FileWriter(\"test\" + cycle));"], [73, "                testWriter.write(\"FileNo,actual,predicted\\n\");"], [74, "                testWriter = new BufferedWriter(new FileWriter(\"validation\" + cycle));"], [75, "                List<T> validationSet = dataCycler.getValidationSet();"], [76, "                double validationSetWeight = getInstanceWeights(validationSet);"], [77, "                PM predictiveModel = modelBuilder.buildPredictiveModel(dataCycler.getTrainingSet());"], [78, "                runningLoss += ((RegressionLossChecker) lossChecker).calculateLoss(predictiveModel, validationSet, testWriter) * validationSetWeight;"], [79, "                runningWeightOfValidationSet += validationSetWeight;"], [80, "                gotNextCycle = dataCycler.nextCycle();"], [81, "                cycle++;"], [82, ""], [83, "                testWriter.flush();"], [84, "                trainingWriter.flush();"], [85, "                testWriter.close();"], [86, "                trainingWriter.close();"], [87, "            }"], [88, "            return runningLoss / runningWeightOfValidationSet;"], [89, "        } catch (IOException e) {"], [90, "            logger.error(\"couldn't write\");"], [92, "        return 0.0;"]]}, "num_lines_added": 12, "num_lines_removed": 37}