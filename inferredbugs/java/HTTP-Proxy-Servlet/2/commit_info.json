{"hash": "8854ca94296dbe8330055327ac65a6decfa4e748", "message": "Re-instate ProxyServlet prior to parameterization temporaryily", "file_num_lines": 324, "diff_parsed": {"added": [[41, "import javax.servlet.ServletConfig;"], [42, "import javax.servlet.ServletException;"], [43, "import javax.servlet.http.HttpServlet;"], [44, "import javax.servlet.http.HttpServletRequest;"], [45, "import javax.servlet.http.HttpServletResponse;"], [46, "import java.io.Closeable;"], [47, "import java.io.IOException;"], [48, "import java.io.OutputStream;"], [49, "import java.lang.reflect.Constructor;"], [50, "import java.net.URI;"], [51, "import java.util.BitSet;"], [52, "import java.util.Enumeration;"], [53, "import java.util.Formatter;"], [54, ""], [110, "    \tthis.doForwardIP = Boolean.parseBoolean(doForwardIPString);"], [113, "    try {"], [114, "      targetUriObj = new URI(servletConfig.getInitParameter(P_TARGET_URI));"], [115, "    } catch (Exception e) {"], [116, "      throw new RuntimeException(\"Trying to process targetUri init parameter: \"+e,e);"], [118, "    targetUri = targetUriObj.toString();"], [119, ""], [188, "    String proxyRequestUri = rewriteUrlFromRequest(servletRequest);"], [201, "    copyRequestHeaders(servletRequest, proxyRequest);"], [211, "      proxyResponse = proxyClient.execute(URIUtils.extractHost(targetUriObj), proxyRequest);"], [216, "      if (doResponseRedirectOrNotModifiedLogic(servletRequest, servletResponse, proxyResponse, statusCode)) {"], [217, "        //the response is already \"committed\" now without any body to send"], [218, "        //TODO copy response headers?"], [219, "        return;"], [221, ""], [270, "      String locStr = rewriteUrlFromResponse(servletRequest, locationHeader.getValue());"], [324, "  protected void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest) {"], [342, "          HttpHost host = URIUtils.extractHost(this.targetUriObj);"], [384, "   * #targetUriObj}. It's used to make the new request."], [386, "  protected String rewriteUrlFromRequest(HttpServletRequest servletRequest) {"], [388, "    uri.append(targetUri);"], [396, "      uri.append('?');"], [399, "      uri.append(encodeUriQuery(queryNoFrag));"], [410, "  protected String rewriteUrlFromResponse(HttpServletRequest servletRequest, String theUrl) {"], [412, "    if (theUrl.startsWith(targetUri)) {"], [419, "      theUrl = curUrl+theUrl.substring(targetUri.length());"]], "deleted": [[19, "import java.io.Closeable;"], [20, "import java.io.IOException;"], [21, "import java.io.OutputStream;"], [22, "import java.lang.reflect.Constructor;"], [23, "import java.net.URI;"], [24, "import java.net.URISyntaxException;"], [25, "import java.util.ArrayList;"], [26, "import java.util.BitSet;"], [27, "import java.util.Enumeration;"], [28, "import java.util.Formatter;"], [29, "import java.util.HashMap;"], [30, "import java.util.List;"], [31, "import java.util.Map;"], [32, "import java.util.regex.Matcher;"], [33, "import java.util.regex.Pattern;"], [34, ""], [35, "import javax.servlet.ServletConfig;"], [36, "import javax.servlet.ServletException;"], [37, "import javax.servlet.http.HttpServlet;"], [38, "import javax.servlet.http.HttpServletRequest;"], [39, "import javax.servlet.http.HttpServletResponse;"], [40, ""], [48, "import org.apache.http.NameValuePair;"], [53, "import org.apache.http.client.utils.URLEncodedUtils;"], [92, ""], [93, "  private static final Pattern URL_ARG_PATTERN = Pattern.compile(\"(?:[$][1-9])|(?:\\\\{[a-zA-Z]\\\\w*\\\\})\");"], [94, ""], [95, "  private static final String UTF_8 = \"UTF-8\";"], [124, "      this.doForwardIP = Boolean.parseBoolean(doForwardIPString);"], [127, "    targetUri = servletConfig.getInitParameter(P_TARGET_URI);"], [128, "    if (!(targetUri.contains(\"$\") || targetUri.contains(\"{\"))) {"], [129, "      try {"], [130, "        targetUriObj = new URI(targetUri);"], [131, "      } catch (Exception e) {"], [132, "        throw new RuntimeException(\"Trying to process targetUri init parameter: \"+e,e);"], [133, "      }"], [134, "      targetUri = targetUriObj.toString();"], [136, ""], [205, ""], [206, "    String targetUriThisRequest;"], [207, "    URI targetUriObjThisRequest;"], [208, "    List<String> proxyArgList = null;"], [209, "    if (targetUriObj != null) {"], [210, "      targetUriObjThisRequest = targetUriObj;"], [211, "      targetUriThisRequest = targetUri;"], [212, "    } else {"], [213, "      Matcher args = URL_ARG_PATTERN.matcher(targetUri);"], [214, "      Map<String,String> params = null;"], [215, "      proxyArgList = new ArrayList<String>();"], [216, "      StringBuffer sb = new StringBuffer();"], [217, "      while (args.find()) {"], [218, ""], [219, "        /**"], [220, "         * Do not use servletRequest.getParameter(arg) because that will"], [221, "         * typically read and consume the servlet InputStream (where our"], [222, "         * form data is stored for POST). We need the InputStream later on."], [223, "         * So we'll parse the query string ourselves. A side benefit is"], [224, "         * we can keep the proxy parameters in the query string and not"], [225, "         * have to add them to a URL encoded form attachment."], [226, "         */"], [227, "        if (params == null) {"], [228, "          String queryString = \"?\"+servletRequest.getQueryString();"], [229, "          int hash = queryString.indexOf('#');"], [230, "          if (hash >= 0) {"], [231, "            queryString = queryString.substring(0, hash);"], [232, "          }"], [233, "          List<NameValuePair> pairs;"], [234, "          try {"], [235, "            pairs = URLEncodedUtils.parse(new URI(queryString), UTF_8);"], [236, "          } catch (URISyntaxException e) {"], [237, "            throw new RuntimeException(\"Unexpected URI parsing error on \"+queryString, e);"], [238, "          }"], [239, "          params = new HashMap<String,String>();"], [240, "          for (NameValuePair pair : pairs) {"], [241, "            params.put(pair.getName(), pair.getValue());"], [242, "          }"], [243, "        }"], [244, "        String arg = args.group();"], [245, "        String replacement;"], [246, "        String proxyArgName;"], [247, "        if (arg.charAt(0) == '$') {"], [248, "          proxyArgName = \"proxyArg\"+arg.charAt(1);"], [249, "          replacement = params.get(proxyArgName);"], [250, "        } else {"], [251, "          proxyArgName = arg.substring(1, arg.length()-1)+\"ProxyArg\";"], [252, "          replacement = params.get(proxyArgName);"], [253, "            // Trying to implement a small subset of http://tools.ietf.org/html/rfc6570."], [254, "            // It might be a nice addition to have some syntax that allowed a proxy arg to be \"optional\", that is,"], [255, "            // don't fail if not present, just return the empty string or a given default. But I don't see"], [256, "            // anything in the spec that supports this kind of construct."], [257, "            // Notionally, it might look like {?host:google.com} would return the value of"], [258, "            // the URL parameter \"?hostProxyArg=somehost.com\" if defined, but if not defined, return \"google.com\"."], [259, "            // Similarly, {?host} could return the value of hostProxyArg or empty string if not present."], [260, "            // But that's not how the spec works. So for now we will require a proxy arg to be present"], [261, "            // if defined for this proxy URL."], [262, "        }"], [263, "        proxyArgList.add(proxyArgName+\"=\"+replacement);"], [264, "        if (replacement == null) {"], [265, "          throw new RuntimeException(\"Missing HTTP paramater \"+proxyArgName+\" for proxy argument \"+arg);"], [266, "        }"], [267, "        args.appendReplacement(sb, replacement);"], [268, "      }"], [269, "      args.appendTail(sb);"], [270, "      targetUriThisRequest = sb.toString();"], [271, "      try {"], [272, "        targetUriObjThisRequest = new URI(targetUriThisRequest);"], [273, "      } catch (Exception e) {"], [274, "        throw new ServletException(\"Trying to process targetUri \"+targetUri+\" with args from request params '\"+servletRequest.getQueryString()+\"': \"+e,e);"], [275, "      }"], [276, "    }"], [277, ""], [278, "    String proxyRequestUri;"], [279, "    if (targetUriObj == null) {"], [280, "      proxyRequestUri = rewriteUrlFromRequest(servletRequest, targetUriThisRequest, proxyArgList);"], [281, "    } else { // for backward compatibility with possible subclass extension"], [282, "      proxyRequestUri = rewriteUrlFromRequest(servletRequest);"], [283, "    }"], [296, "    if (targetUriObj == null) {"], [297, "      copyRequestHeaders(servletRequest, proxyRequest, targetUriObjThisRequest);"], [298, "    } else { // for backward compatibility with possible subclass extension"], [299, "      copyRequestHeaders(servletRequest, proxyRequest);"], [300, "    }"], [310, "      proxyResponse = proxyClient.execute(URIUtils.extractHost(targetUriObjThisRequest), proxyRequest);"], [315, "      if (targetUriObj == null) {"], [316, "        if (doResponseRedirectOrNotModifiedLogic(servletRequest, servletResponse, proxyResponse, statusCode, targetUriThisRequest)) {"], [317, "          //the response is already \"committed\" now without any body to send"], [318, "          //TODO copy response headers?"], [319, "          return;"], [320, "        }"], [321, "      } else { // for backward compatibility with possible subclass extension"], [322, "        if (doResponseRedirectOrNotModifiedLogic(servletRequest, servletResponse, proxyResponse, statusCode)) {"], [323, "          //the response is already \"committed\" now without any body to send"], [324, "          //TODO copy response headers?"], [325, "          return;"], [326, "        }"], [328, ""], [367, "    return doResponseRedirectOrNotModifiedLogic(servletRequest, servletResponse, proxyResponse, statusCode, targetUri);"], [368, "  }"], [369, ""], [370, "  protected boolean doResponseRedirectOrNotModifiedLogic("], [371, "          HttpServletRequest servletRequest, HttpServletResponse servletResponse,"], [372, "          HttpResponse proxyResponse, int statusCode, String targetUriThisRequest)"], [373, "          throws ServletException, IOException {"], [384, "      String locStr = rewriteUrlFromResponse(servletRequest, locationHeader.getValue(), targetUriThisRequest);"], [437, "  protected void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest) {"], [438, "    copyRequestHeaders(servletRequest, proxyRequest, targetUriObj);"], [439, "  }"], [440, ""], [442, "  protected void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest, URI targetUriObjThisRequest) {"], [460, "          HttpHost host = URIUtils.extractHost(targetUriObjThisRequest);"], [501, "  protected String rewriteUrlFromRequest(HttpServletRequest servletRequest) {"], [502, "    return rewriteUrlFromRequest(servletRequest, targetUri, null);"], [503, "  }"], [504, ""], [506, "   * #gargetUriObi}. It's used to make the new request."], [508, "  protected String rewriteUrlFromRequest(HttpServletRequest servletRequest,"], [509, "      String targetUriThisRequest, List<String> proxyArgList) {"], [511, "    uri.append(targetUriThisRequest);"], [521, "      if (proxyArgList != null) {"], [522, "        for (String proxyArg : proxyArgList) {"], [523, "          queryNoFrag = queryNoFrag.replaceFirst(\"[&]*\"+proxyArg, \"\");"], [524, "        }"], [525, "      }"], [526, "      if (queryNoFrag.length() > 0) {"], [527, "        uri.append('?');"], [528, "        uri.append(encodeUriQuery(queryNoFrag));"], [529, "      }"], [537, ""], [538, "  protected String rewriteUrlFromResponse(HttpServletRequest servletRequest, String theUrl) {"], [539, "    return rewriteUrlFromResponse(servletRequest, theUrl, targetUri);"], [540, "  }"], [544, "  protected String rewriteUrlFromResponse(HttpServletRequest servletRequest, String theUrl, String targetUriThisRequest) {"], [546, "    if (theUrl.startsWith(targetUriThisRequest)) {"], [553, "      theUrl = curUrl+theUrl.substring(targetUriThisRequest.length());"]]}, "num_lines_added": 40, "num_lines_removed": 174}