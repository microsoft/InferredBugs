{"hash": "2816a99cd12e0d380205eaf56341b59c0541afe4", "message": "Clean up test", "file_num_lines": 67, "diff_parsed": {"added": [[14, "import static org.hamcrest.Matchers.contains;"], [15, "import static org.hamcrest.Matchers.is;"], [20, "  public void noRaceBetweenSetListenerAndPollingForUpdates() throws Exception {"], [21, "    int limit = 20000;"], [28, "    final DnsSrvResolver srvResolver = new FakeResolver("], [34, "    final ChangeNotifier.Listener<LookupResult> listener = new FakeListener(hosts, latch);"], [46, "    assertThat(hosts.get(), contains(is(LookupResult.create(\"localhost\", 1, 0, 0, 0))));"], [49, "  static class FakeListener implements ChangeNotifier.Listener<LookupResult> {"], [54, "    FakeListener(AtomicReference<Set<LookupResult>> hosts, CountDownLatch latch) {"], [70, "  static class FakeResolver implements DnsSrvResolver {"], [75, "    public FakeResolver(String fqdn, LookupResult result) {"]], "deleted": [[14, "import static org.hamcrest.Matchers.empty;"], [15, "import static org.hamcrest.Matchers.not;"], [20, "  public void triggerRace() throws Exception {"], [21, "    int limit = 100000;"], [23, "      System.out.println(limit);"], [29, "    final DnsSrvResolver srvResolver = new MockResolver("], [35, "    final ChangeNotifier.Listener<LookupResult> listener = new MockListener(hosts, latch);"], [47, "    assertThat(hosts.get(), not(empty()));"], [50, "  static class MockListener implements ChangeNotifier.Listener<LookupResult> {"], [55, "    MockListener(AtomicReference<Set<LookupResult>> hosts, CountDownLatch latch) {"], [71, "  static class MockResolver implements DnsSrvResolver {"], [76, "    public MockResolver(String fqdn, LookupResult result) {"]]}, "num_lines_added": 11, "num_lines_removed": 12}