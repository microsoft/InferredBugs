{"hash": "a8bae14c31cab2f04779ffb3e1b26c4a4997da07", "message": "provided common torrents download statistic into shared torrent", "file_num_lines": 554, "diff_parsed": {"added": [[27, "import com.turn.ttorrent.common.*;"], [77, "  private final TorrentStatistic myTorrentStatistic;"], [113, "  public SharedTorrent(byte[] torrent, File parent, boolean multiThreadHash, boolean seeder, boolean leecher, RequestStrategy requestStrategy,"], [114, "                       TorrentStatisticProvider torrentStatisticProvider)"], [117, "    myTorrentStatistic = torrentStatisticProvider.getTorrentStatistic();"], [171, "  public static SharedTorrent fromFile(File source, File parent, boolean multiThreadHash, boolean seeder,"], [172, "                                       TorrentStatisticProvider torrentStatisticProvider)"], [174, "    return fromFile(source, parent, multiThreadHash, seeder, false,"], [175, "            torrentStatisticProvider);"], [178, "  public static SharedTorrent fromFile(File source, File parent, boolean multiThreadHash, boolean seeder, boolean leecher,"], [179, "                                       TorrentStatisticProvider torrentStatisticProvider)"], [185, "    return new SharedTorrent(data, parent, multiThreadHash, seeder, leecher, DEFAULT_REQUEST_STRATEGY, torrentStatisticProvider);"], [211, "    return myTorrentStatistic.getUploadedBytes();"], [223, "    return myTorrentStatistic.getDownloadedBytes();"], [230, "    return myTorrentStatistic.getLeftBytes();"], [307, "                    (this.getSize() - myTorrentStatistic.getLeftBytes()),"], [369, "          myTorrentStatistic.addLeft(-piece.size());"], [411, "        myTorrentStatistic.addLeft(-piece.size());"], [574, "    myTorrentStatistic.addLeft(-piece.size());"], [803, "    myTorrentStatistic.addUploaded(piece.size());"], [822, "    myTorrentStatistic.addDownloaded(piece.size());"]], "deleted": [[27, "import com.turn.ttorrent.common.Peer;"], [28, "import com.turn.ttorrent.common.Torrent;"], [29, "import com.turn.ttorrent.common.TorrentFile;"], [79, "  private long uploaded;"], [80, "  private long downloaded;"], [81, "  private long left;"], [108, "   * Create a new shared torrent from a base Torrent object."], [109, "   * <p/>"], [110, "   * <p>"], [111, "   * This will recreate a SharedTorrent object from the provided Torrent"], [112, "   * object's encoded meta-info data."], [113, "   * </p>"], [114, "   *"], [115, "   * @param torrent The Torrent object."], [116, "   * @param destDir The destination directory or location of the torrent"], [117, "   *                files."], [118, "   * @throws FileNotFoundException    If the torrent file location or"], [119, "   *                                  destination directory does not exist and can't be created."], [120, "   * @throws IOException              If the torrent file cannot be read or decoded."], [121, "   * @throws NoSuchAlgorithmException"], [122, "   */"], [123, "  public SharedTorrent(Torrent torrent, File destDir, boolean multiThreadHash)"], [124, "          throws IOException, NoSuchAlgorithmException {"], [125, "    this(torrent, destDir, multiThreadHash, false);"], [126, "  }"], [127, ""], [128, "  /**"], [129, "   * Create a new shared torrent from a base Torrent object."], [130, "   * <p/>"], [131, "   * <p>"], [132, "   * This will recreate a SharedTorrent object from the provided Torrent"], [133, "   * object's encoded meta-info data."], [134, "   * </p>"], [135, "   *"], [136, "   * @param torrent The Torrent object."], [137, "   * @param destDir The destination directory or location of the torrent"], [138, "   *                files."], [139, "   * @param seeder  Whether we're a seeder for this torrent or not (disables"], [140, "   *                validation)."], [141, "   * @throws FileNotFoundException    If the torrent file location or"], [142, "   *                                  destination directory does not exist and can't be created."], [143, "   * @throws IOException              If the torrent file cannot be read or decoded."], [144, "   * @throws NoSuchAlgorithmException"], [145, "   */"], [146, "  public SharedTorrent(Torrent torrent, File destDir, boolean multiThreadHash, boolean seeder)"], [147, "          throws IOException, NoSuchAlgorithmException {"], [148, "    this(torrent.getEncoded(), destDir, multiThreadHash, seeder, false, DEFAULT_REQUEST_STRATEGY);"], [149, "  }"], [150, ""], [151, "  /**"], [152, "   * Create a new shared torrent from meta-info binary data."], [153, "   *"], [154, "   * @param torrent The meta-info byte data."], [155, "   * @param destDir The destination directory or location of the torrent"], [156, "   *                files."], [157, "   * @throws FileNotFoundException If the torrent file location or"], [158, "   *                               destination directory does not exist and can't be created."], [159, "   * @throws IOException           If the torrent file cannot be read or decoded."], [160, "   */"], [161, "  public SharedTorrent(byte[] torrent, File destDir, boolean multiThreadHash)"], [162, "          throws IOException, NoSuchAlgorithmException {"], [163, "    this(torrent, destDir, multiThreadHash, false, false, DEFAULT_REQUEST_STRATEGY);"], [164, "  }"], [165, ""], [166, "  /**"], [176, "  public SharedTorrent(byte[] torrent, File parent, boolean multiThreadHash, boolean seeder, boolean leecher, RequestStrategy requestStrategy)"], [179, ""], [226, "    this.uploaded = 0;"], [227, "    this.downloaded = 0;"], [228, "    this.left = this.getSize();"], [229, ""], [237, "  /**"], [238, "   * Create a new shared torrent from the given torrent file."], [239, "   *"], [240, "   * @param source The <code>.torrent</code> file to read the torrent"], [241, "   *               meta-info from."], [242, "   * @param parent The parent directory or location of the torrent files."], [243, "   * @throws IOException              When the torrent file cannot be read or decoded."], [244, "   * @throws NoSuchAlgorithmException"], [245, "   */"], [246, "  public static SharedTorrent fromFile(File source, File parent, boolean multiThreadHash)"], [247, "          throws IOException, NoSuchAlgorithmException {"], [248, "    return fromFile(source, parent, multiThreadHash, false);"], [249, "  }"], [250, ""], [251, "  public static SharedTorrent fromFile(File source, File parent, boolean multiThreadHash, boolean seeder)"], [253, "    return fromFile(source, parent, multiThreadHash, seeder, false);"], [256, "  public static SharedTorrent fromFile(File source, File parent, boolean multiThreadHash, boolean seeder, boolean leecher)"], [262, "    return new SharedTorrent(data, parent, multiThreadHash, seeder, leecher, DEFAULT_REQUEST_STRATEGY);"], [288, "    return this.uploaded;"], [300, "    return this.downloaded;"], [307, "    return this.left;"], [384, "                    (this.getSize() - this.left),"], [446, "          this.left -= piece.size();"], [488, "        this.left -= piece.size();"], [651, "    this.left -= piece.size();"], [880, "    this.uploaded += piece.size();"], [899, "    this.downloaded += piece.size();"]]}, "num_lines_added": 21, "num_lines_removed": 98}