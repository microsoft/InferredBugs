{"hash": "7212389f22018963501614d0c7f75ad35edced6d", "message": "Now queueing more messages for download in order to boost download speed.", "file_num_lines": 489, "diff_parsed": {"added": [[34, "import java.util.concurrent.*;"], [72, "  private static final int MAX_PIPELINED_REQUESTS = 500;"], [81, "  private final ConcurrentMap<Piece, Integer> myRequestedPieces;"], [82, "//  private int lastRequestedOffset;"], [84, "  private final BlockingQueue<PeerMessage.RequestMessage> myRequests;"], [119, "    this.myRequestedPieces = new ConcurrentHashMap<Piece, Integer>();"], [120, "    myRequests = new LinkedBlockingQueue<PeerMessage.RequestMessage>(SharingPeer.MAX_PIPELINED_REQUESTS);"], [158, "      this.myRequestedPieces.clear();"], [249, "  public Set<Piece> getRequestedPiece() {"], [250, "    return myRequestedPieces.keySet();"], [338, "    myRequestedPieces.clear();"], [375, "  public synchronized void downloadPiece(final Piece piece){"], [376, "    downloadPiece(piece, false);"], [377, "  }"], [379, "  public synchronized void downloadPiece(final Piece piece, boolean force)"], [380, "    throws IllegalStateException {"], [381, "    if (!myRequestedPieces.containsKey(piece) || force) {"], [382, "      myRequestedPieces.put(piece, 0);"], [384, "    this.requestNextBlocksForPiece(piece);"], [385, "  }"], [387, "  public boolean isPieceDownloading(final Piece piece){"], [388, "    return myRequestedPieces.get(piece) != null;"], [402, "  private void requestNextBlocksForPiece(final Piece piece) {"], [404, "      while ( myRequestedPieces.get(piece) < piece.size()) {"], [405, "        final int lastRequestedOffset = myRequestedPieces.get(piece);"], [407, "          .craft(piece.getIndex(),lastRequestedOffset,"], [408, "            Math.min((int) (piece.size() - lastRequestedOffset),"], [410, "        removeBlockRequest(piece.getIndex(), lastRequestedOffset);"], [411, "        myRequests.add(request);"], [412, "//        logger.debug(\"---------Queue size: \" + myRequests.size());"], [414, "        myRequestedPieces.put(piece, request.getLength() + lastRequestedOffset);"], [416, "      this.downloading = myRequests.size() > 0;"], [430, "   * @param pieceIdx The piece index of PIECE message received."], [431, "   * @param offset The offset of PIECE message received."], [433, "  private void removeBlockRequest(final int pieceIdx, final int offset) {"], [435, "      for (PeerMessage.RequestMessage request : myRequests) {"], [436, "        if (request.getPiece() == pieceIdx && request.getOffset() == offset) {"], [437, "          myRequests.remove(request);"], [441, "      this.downloading = myRequests.size() > 0;"], [459, "    return cancelPendingRequests(null);"], [460, "  }"], [461, ""], [462, "  public Set<PeerMessage.RequestMessage> cancelPendingRequests(final Piece piece) {"], [464, "      Set<PeerMessage.RequestMessage> cancelled ="], [467, "      for (PeerMessage.RequestMessage request : myRequests) {"], [468, "        if (piece == null || piece.getIndex() == request.getPiece()) {"], [470, "                  request.getOffset(), request.getLength()));"], [471, "          cancelled.add(request);"], [473, "      }"], [475, "      myRequests.removeAll(cancelled);"], [476, "      this.downloading = myRequests.size() > 0;"], [477, ""], [478, "      return cancelled;"], [479, "    }"], [480, "  }"], [481, ""], [482, "  public Set<PeerMessage.RequestMessage> getRemainingRequestedPieces(final Piece piece){"], [483, "    synchronized (this.requestsLock) {"], [484, "      Set<PeerMessage.RequestMessage> pieceParts ="], [485, "              new HashSet<PeerMessage.RequestMessage>();"], [486, ""], [487, "      for (PeerMessage.RequestMessage request : myRequests) {"], [488, "        if (piece.getIndex() == request.getPiece()) {"], [489, "          pieceParts.add(request);"], [490, "        }"], [493, "      return pieceParts;"], [632, "        this.removeBlockRequest(piece.getPiece(), piece.getOffset());"], [638, "              this.cancelPendingRequests(p);"], [650, "            if (getRemainingRequestedPieces(p).size() == 0) {"], [654, "              myRequestedPieces.remove(p);"], [659, "                for (PeerMessage.RequestMessage requestMessage : getRemainingRequestedPieces(p)) {"], [663, "                this.requestNextBlocksForPiece(p);"], [728, "              this.getAvailablePieces());"], [833, "  public int getDownloadingPiecesCount(){"], [834, "    return myRequestedPieces.size();"], [835, "  }"]], "deleted": [[34, "import java.util.concurrent.BlockingQueue;"], [35, "import java.util.concurrent.Future;"], [36, "import java.util.concurrent.LinkedBlockingQueue;"], [74, "  private static final int MAX_PIPELINED_REQUESTS = 5;"], [83, "  private Piece requestedPiece;"], [84, "  private int lastRequestedOffset;"], [86, "  private BlockingQueue<PeerMessage.RequestMessage> requests;"], [123, "    this.requestedPiece = null;"], [159, "      this.requests = null;"], [160, "      this.lastRequestedOffset = 0;"], [251, "  public Piece getRequestedPiece() {"], [252, "    return this.requestedPiece;"], [340, "    this.requestedPiece = null;"], [377, "  public synchronized void downloadPiece(Piece piece)"], [378, "    throws IllegalStateException {"], [379, "    if (this.isDownloading()) {"], [380, "      logger.warn(\"Trying to download a piece #{} while previous download not completed:\\n {}\","], [381, "        piece.getIndex(), Arrays.toString(requests.toArray()));"], [382, "      int b = 2;"], [383, "      while (isDownloading() && b == 2) {"], [384, "        try {"], [385, "          Thread.sleep(100);"], [387, "        } catch (InterruptedException e) {"], [388, "        }"], [389, "      }"], [390, "      throw new IllegalStateException(\"Hello\");"], [393, "    this.requests = new LinkedBlockingQueue<PeerMessage.RequestMessage>("], [394, "      SharingPeer.MAX_PIPELINED_REQUESTS);"], [395, "    this.requestedPiece = piece;"], [396, "    this.lastRequestedOffset = 0;"], [397, "    this.requestNextBlocks();"], [411, "  private void requestNextBlocks() {"], [413, "      if (this.requests == null || this.requestedPiece == null) {"], [414, "        // If we've been taken out of a piece download context it means our"], [415, "        // outgoing requests have been cancelled. Don't enqueue new"], [416, "        // requests until a proper piece download context is"], [417, "        // re-established."], [418, "        return;"], [419, "      }"], [420, ""], [421, "      while (this.requests.remainingCapacity() > 0 &&"], [422, "        this.lastRequestedOffset < this.requestedPiece.size()) {"], [424, "          .craft("], [425, "            this.requestedPiece.getIndex(),"], [426, "            this.lastRequestedOffset,"], [427, "            Math.min("], [428, "              (int) (this.requestedPiece.size() -"], [429, "                this.lastRequestedOffset),"], [431, "        this.requests.add(request);"], [433, "        this.lastRequestedOffset += request.getLength();"], [435, "      this.downloading = this.requests.size() > 0;"], [449, "   * @param message The PIECE message received."], [451, "  private void removeBlockRequest("], [452, "    PeerMessage.PieceMessage message) {"], [454, "      if (this.requests == null) {"], [455, "        return;"], [456, "      }"], [457, ""], [458, "      for (PeerMessage.RequestMessage request : this.requests) {"], [459, "        if (request.getPiece() == message.getPiece() &&"], [460, "          request.getOffset() == message.getOffset()) {"], [461, "          this.requests.remove(request);"], [465, "      this.downloading = this.requests.size() > 0;"], [484, "      Set<PeerMessage.RequestMessage> requests ="], [487, "      if (this.requests != null) {"], [488, "        for (PeerMessage.RequestMessage request : this.requests) {"], [490, "            request.getOffset(), request.getLength()));"], [491, "          requests.add(request);"], [494, "        this.requests = null;"], [495, "        this.downloading = false;"], [498, "      return requests;"], [637, "        this.removeBlockRequest(piece);"], [643, "              this.requestedPiece = null;"], [644, "              this.cancelPendingRequests();"], [656, "            if (requests==null || requests.size() == 0) {"], [660, "              this.requestedPiece = null;"], [665, "                for (PeerMessage.RequestMessage requestMessage : requests) {"], [669, "                this.requestNextBlocks();"], [734, "        this.getAvailablePieces());"]]}, "num_lines_added": 76, "num_lines_removed": 79}