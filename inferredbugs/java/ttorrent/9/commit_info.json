{"hash": "a4133a43ead8f0af32b6c29d546065315bdf5151", "message": "Don't squash exceptions into IllegalArgumentException\n\nSigned-off-by: Maxime Petazzoni <mpetazzoni@turn.com>", "file_num_lines": 385, "diff_parsed": {"added": [[125, "\t * @throws IOException When the info dictionnary can't be read or"], [127, "\t * @throws NoSuchAlgorithmException If the SHA-1 algorithm is not"], [128, "\t * available."], [131, "\t\tthrows IOException, NoSuchAlgorithmException {"], [135, "\t\tthis.decoded = BDecoder.bdecode("], [136, "\t\t\t\tnew ByteArrayInputStream(this.encoded)).getMap();"], [137, ""], [138, "\t\tthis.decoded_info = this.decoded.get(\"info\").getMap();"], [139, "\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();"], [140, "\t\tBEncoder.bencode(this.decoded_info, baos);"], [141, "\t\tthis.encoded_info = baos.toByteArray();"], [142, "\t\tthis.info_hash = Torrent.hash(this.encoded_info);"], [143, "\t\tthis.hex_info_hash = Torrent.byteArrayToHexString(this.info_hash);"], [144, ""], [145, "\t\tthis.announceUrl = this.decoded.get(\"announce\").getString();"], [146, "\t\tthis.createdBy = this.decoded.containsKey(\"created by\")"], [147, "\t\t\t? this.decoded.get(\"created by\").getString()"], [148, "\t\t\t: null;"], [149, "\t\tthis.name = this.decoded_info.get(\"name\").getString();"], [150, ""], [151, "\t\tthis.files = new LinkedList<TorrentFile>();"], [152, ""], [153, "\t\t// Parse multi-file torrent file information structure."], [154, "\t\tif (this.decoded_info.containsKey(\"files\")) {"], [155, "\t\t\tfor (BEValue file : this.decoded_info.get(\"files\").getList()) {"], [156, "\t\t\t\tMap<String, BEValue> fileInfo = file.getMap();"], [157, "\t\t\t\tStringBuffer path = new StringBuffer();"], [158, "\t\t\t\tfor (BEValue pathElement : fileInfo.get(\"path\").getList()) {"], [159, "\t\t\t\t\tpath.append(File.separator)"], [160, "\t\t\t\t\t\t.append(pathElement.getString());"], [163, "\t\t\t\t\tnew File(this.name, path.toString()),"], [164, "\t\t\t\t\tfileInfo.get(\"length\").getLong()));"], [166, "\t\t} else {"], [167, "\t\t\t// For single-file torrents, the name of the torrent is"], [168, "\t\t\t// directly the name of the file."], [169, "\t\t\tthis.files.add(new TorrentFile("], [170, "\t\t\t\tnew File(this.name),"], [171, "\t\t\t\tthis.decoded_info.get(\"length\").getLong()));"], [172, "\t\t}"], [174, "\t\t// Calculate the total size of this torrent from its files' sizes."], [175, "\t\tlong size = 0;"], [176, "\t\tfor (TorrentFile file : this.files) {"], [177, "\t\t\tsize += file.size;"], [179, "\t\tthis.size = size;"], [291, "\t\tFileOutputStream fos = null;"], [292, "\t\ttry {"], [293, "\t\t\tfos = new FileOutputStream(output);"], [294, "\t\t\tfos.write(this.getEncoded());"], [295, "\t\t\tlogger.info(\"Wrote torrent file {}.\", output.getAbsolutePath());"], [296, "\t\t} finally {"], [297, "\t\t\tif (fos != null) {"], [298, "\t\t\t\tfos.close();"], [299, "\t\t\t}"], [300, "\t\t}"], [373, "\t * @throws NoSuchAlgorithmException"], [375, "\tpublic static Torrent load(File torrent, File parent)"], [376, "\t\tthrows IOException, NoSuchAlgorithmException {"], [388, "\t * @throws NoSuchAlgorithmException"], [391, "\t\tthrows IOException, NoSuchAlgorithmException {"], [392, "\t\tFileInputStream fis = null;"], [393, "\t\ttry {"], [394, "\t\t\tfis = new FileInputStream(torrent);"], [395, "\t\t\tbyte[] data = new byte[(int)torrent.length()];"], [396, "\t\t\tfis.read(data);"], [397, "\t\t\treturn new Torrent(data, parent, seeder);"], [398, "\t\t} finally {"], [399, "\t\t\tif (fis != null) {"], [400, "\t\t\t\tfis.close();"], [401, "\t\t\t}"], [402, "\t\t}"]], "deleted": [[125, "\t * @throws IllegalArgumentException When the info dictionnary can't be"], [129, "\t\tthrows IllegalArgumentException {"], [133, "\t\ttry {"], [134, "\t\t\tthis.decoded = BDecoder.bdecode("], [135, "\t\t\t\t\tnew ByteArrayInputStream(this.encoded)).getMap();"], [136, ""], [137, "\t\t\tthis.decoded_info = this.decoded.get(\"info\").getMap();"], [138, "\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();"], [139, "\t\t\tBEncoder.bencode(this.decoded_info, baos);"], [140, "\t\t\tthis.encoded_info = baos.toByteArray();"], [141, "\t\t\tthis.info_hash = Torrent.hash(this.encoded_info);"], [142, "\t\t\tthis.hex_info_hash = Torrent.byteArrayToHexString(this.info_hash);"], [143, ""], [144, "\t\t\tthis.announceUrl = this.decoded.get(\"announce\").getString();"], [145, "\t\t\tthis.createdBy = this.decoded.containsKey(\"created by\")"], [146, "\t\t\t\t? this.decoded.get(\"created by\").getString()"], [147, "\t\t\t\t: null;"], [148, "\t\t\tthis.name = this.decoded_info.get(\"name\").getString();"], [149, ""], [150, "\t\t\tthis.files = new LinkedList<TorrentFile>();"], [151, ""], [152, "\t\t\t// Parse multi-file torrent file information structure."], [153, "\t\t\tif (this.decoded_info.containsKey(\"files\")) {"], [154, "\t\t\t\t// For multi-file torrents, the name of the torrent serves as"], [155, "\t\t\t\t// the top-level parent directory."], [156, "\t\t\t\tparent = new File(parent, this.name);"], [157, ""], [158, "\t\t\t\tfor (BEValue file : this.decoded_info.get(\"files\").getList()) {"], [159, "\t\t\t\t\tMap<String, BEValue> fileInfo = file.getMap();"], [160, "\t\t\t\t\tStringBuffer path = new StringBuffer();"], [161, "\t\t\t\t\tfor (BEValue pathElement : fileInfo.get(\"path\").getList()) {"], [162, "\t\t\t\t\t\tpath.append(File.separator)"], [163, "\t\t\t\t\t\t\t.append(pathElement.getString());"], [164, "\t\t\t\t\t}"], [165, "\t\t\t\t\tthis.files.add(new TorrentFile("], [166, "\t\t\t\t\t\tnew File(this.name, path.toString()),"], [167, "\t\t\t\t\t\tfileInfo.get(\"length\").getLong()));"], [169, "\t\t\t} else {"], [170, "\t\t\t\t// For single-file torrents, the name of the torrent is"], [171, "\t\t\t\t// directly the name of the file."], [173, "\t\t\t\t\tnew File(this.name),"], [174, "\t\t\t\t\tthis.decoded_info.get(\"length\").getLong()));"], [177, "\t\t\t// Calculate the total size of this torrent from its files' sizes."], [178, "\t\t\tlong size = 0;"], [179, "\t\t\tfor (TorrentFile file : this.files) {"], [180, "\t\t\t\tsize += file.size;"], [181, "\t\t\t}"], [182, "\t\t\tthis.size = size;"], [183, "\t\t} catch (Exception e) {"], [184, "\t\t\tthrow new IllegalArgumentException(\"Can't parse torrent information!\", e);"], [297, "\t\tFileOutputStream fos = new FileOutputStream(output);"], [298, "\t\tfos.write(this.getEncoded());"], [299, "\t\tfos.close();"], [300, "\t\tlogger.info(\"Wrote torrent file {}.\", output.getAbsolutePath());"], [374, "\tpublic static Torrent load(File torrent, File parent) throws IOException {"], [388, "\t\tthrows IOException {"], [389, "\t\tFileInputStream fis = new FileInputStream(torrent);"], [390, "\t\tbyte[] data = new byte[(int)torrent.length()];"], [391, "\t\tfis.read(data);"], [392, "\t\tfis.close();"], [393, "\t\treturn new Torrent(data, parent, seeder);"]]}, "num_lines_added": 70, "num_lines_removed": 61}