{"hash": "8b74c2556782240d8d4cea29edd3dfb8713bb40a", "message": "Implemented seeder mode and interruptible initialization\n\nImplemented an initial seeder mode for users of the Torrent classes that\ndisables validation. If the torrent is created and automatically used,\nor if someone wants to manually disable validation of the local data,\nthis mode short-circuits the piece hashing and validation during the\ninitialization of the torrent.\n\nThis initialization has also been made interruptible by being detached\nin a background thread while the client can be interrupted with\nClient.stop(). During initialization, the client is in the new\nVALIDATING ClientState.\n\nAlso adjusted logging levels and default client parameters for unchoking\nfrequency and voluntary outbound connections to improve client\nperformance on start up.\n\nSigned-off-by: David Giffin <david@etsy.com>\nAcked-by: Maxime Petazzoni <mpetazzoni@turn.com>", "file_num_lines": 398, "diff_parsed": {"added": [[62, "\tprivate boolean stop;"], [74, "\tprivate boolean initialized;"], [80, "\t/** Create a new shared torrent from a base Torrent object."], [81, "\t *"], [82, "\t * This will recreate a SharedTorrent object from the provided Torrent"], [83, "\t * object's encoded meta-info data."], [84, "\t *"], [85, "\t * @param torrent The Torrent object."], [86, "\t * @param destDir The destination directory or location of the torrent"], [87, "\t * files."], [88, "\t * @throws IllegalArgumentException When the info dictionnary can't be"], [89, "\t * encoded and hashed back to create the torrent's SHA-1 hash."], [90, "\t * @throws FileNotFoundException If the torrent file location or"], [91, "\t * destination directory does not exist and can't be created."], [92, "\t * @throws IOException If the torrent file cannot be accessed."], [93, "\t */"], [94, "\tpublic SharedTorrent(Torrent torrent, File destDir)"], [95, "\t\tthrows IllegalArgumentException, FileNotFoundException, IOException {"], [96, "\t\tthis(torrent, destDir, false);"], [97, "\t}"], [98, ""], [99, "\t/** Create a new shared torrent from a base Torrent object."], [100, "\t *"], [101, "\t * This will recreate a SharedTorrent object from the provided Torrent"], [102, "\t * object's encoded meta-info data."], [103, "\t *"], [104, "\t * @param torrent The Torrent object."], [105, "\t * @param destDir The destination directory or location of the torrent"], [106, "\t * files."], [107, "\t * @param seeder Whether we're a seeder for this torrent or not (disables"], [108, "\t * validation)."], [109, "\t * @throws IllegalArgumentException When the info dictionnary can't be"], [110, "\t * encoded and hashed back to create the torrent's SHA-1 hash."], [111, "\t * @throws FileNotFoundException If the torrent file location or"], [112, "\t * destination directory does not exist and can't be created."], [113, "\t * @throws IOException If the torrent file cannot be accessed."], [114, "\t */"], [115, "\tpublic SharedTorrent(Torrent torrent, File destDir, boolean seeder)"], [116, "\t\tthrows IllegalArgumentException, FileNotFoundException, IOException {"], [117, "\t\tthis(torrent.getEncoded(), destDir, seeder);"], [118, "\t}"], [119, ""], [133, "\t\tthis(torrent, destDir, false);"], [134, "\t}"], [135, ""], [136, "\t/** Create a new shared torrent from metainfo binary data."], [137, "\t *"], [138, "\t * @param torrent The metainfo byte data."], [139, "\t * @param destDir The destination directory or location of the torrent"], [140, "\t * files."], [141, "\t * @param seeder Whether we're a seeder for this torrent or not (disables"], [142, "\t * validation)."], [143, "\t * @throws IllegalArgumentException When the info dictionary can't be"], [144, "\t * encoded and hashed back to create the torrent's SHA-1 hash."], [145, "\t * @throws FileNotFoundException If the torrent file location or"], [146, "\t * destination directory does not exist and can't be created."], [147, "\t * @throws IOException If the torrent file cannot be accessed."], [148, "\t */"], [149, "\tpublic SharedTorrent(byte[] torrent, File destDir, boolean seeder)"], [150, "\t\tthrows IllegalArgumentException, FileNotFoundException, IOException {"], [151, "\t\tsuper(torrent, seeder);"], [174, "\t\t\t\t\tthis.pieceLength < this.getSize()) {"], [184, "\t\tthis.bucket = new TorrentByteStorage(this.file, this.getSize());"], [187, "\t\tthis.stop = false;"], [188, ""], [191, "\t\tthis.left = this.getSize();"], [193, "\t\tthis.initialized = false;"], [240, "\t/** Tells whether this torrent has been fully initialized yet."], [241, "\t */"], [242, "\tpublic boolean isInitialized() {"], [243, "\t\treturn this.initialized;"], [244, "\t}"], [245, ""], [248, "\t * <p>"], [252, "\t * </p>"], [254, "\t * <p>"], [257, "\t * </p>"], [258, "\t */"], [259, "\tpublic synchronized void init() {"], [260, "\t\tif (this.isInitialized()) {"], [261, "\t\t\tthrow new IllegalStateException(\"Torrent was already initialized!\");"], [262, "\t\t}"], [263, ""], [264, "\t\tnew Thread(\"analyze-\" +"], [265, "\t\t\t\tthis.getHexInfoHash().substring(this.getHexInfoHash().length()-6)) {"], [266, "\t\t\t@Override"], [267, "\t\t\tpublic void run() {"], [268, "\t\t\t\ttry {"], [269, "\t\t\t\t\tanalyze();"], [270, "\t\t\t\t} catch (InterruptedException ie) {"], [271, "\t\t\t\t\tlogger.warn(\"{}\", ie.getMessage());"], [272, "\t\t\t\t} catch (IOException ioe) {"], [273, "\t\t\t\t\tlogger.warn(\"Error while analyzing torrent data: {}\","], [274, "\t\t\t\t\t\tioe.getMessage());"], [275, "\t\t\t\t}"], [276, "\t\t\t}"], [277, "\t\t}.start();"], [278, "\t}"], [279, ""], [280, "\t/** Stop the torrent initialization as soon as possible."], [282, "\tpublic void stop() {"], [283, "\t\tthis.stop = true;"], [284, "\t}"], [285, ""], [286, "\tprivate void analyze() throws InterruptedException, IOException {"], [287, "\t\tint nPieces = new Double(Math.ceil((double)this.getSize() /"], [303, "\t\t\t\t: (int)(this.getSize() % this.pieceLength);"], [306, "\t\t\tthis.pieces[idx] = new Piece(this.bucket, idx, off, len, hash,"], [307, "\t\t\t\tthis.isSeeder());"], [313, ""], [314, "\t\t\tif (this.stop) {"], [315, "\t\t\t\tthrow new InterruptedException(\"Torrent data analysis \" +"], [316, "\t\t\t\t\t\"interrupted at piece \" + this.pieces[idx] + \"!\");"], [317, "\t\t\t}"], [320, "\t\tthis.initialized = true;"], [324, "\t\t\t\t(this.getSize() - this.left),"], [325, "\t\t\t\tthis.getSize(),"], [373, "\t\tif (!this.isInitialized()) {"], [374, "\t\t\tthrow new IllegalStateException(\"Torrent not yet initialized!\");"], [375, "\t\t}"], [376, ""], [391, "\t\tif (!this.isInitialized()) {"], [392, "\t\t\tthrow new IllegalStateException(\"Torrent not yet initialized!\");"], [393, "\t\t}"], [394, ""], [419, "\t\tif (!this.isInitialized()) {"], [420, "\t\t\tthrow new IllegalStateException(\"Torrent not yet initialized!\");"], [421, "\t\t}"], [422, ""]], "deleted": [[70, "\tprivate final int totalLength;"], [92, "\t\tsuper(torrent);"], [111, "\t\t\tthis.totalLength = this.decoded_info.get(\"length\").getInt();"], [116, "\t\t\t\t\tthis.pieceLength < this.totalLength) {"], [126, "\t\tthis.bucket = new TorrentByteStorage(this.file, this.totalLength);"], [131, "\t\tthis.left = this.totalLength;"], [139, "\t/** Create a new shared torrent from a base Torrent object."], [140, "\t *"], [141, "\t * This will recreated a SharedTorrent object from the provided Torrent"], [142, "\t * object's encoded meta-info data."], [143, "\t *"], [144, "\t * @param torrent The Torrent object."], [145, "\t * @param destDir The destination directory or location of the torrent"], [146, "\t * files."], [147, "\t * @throws IllegalArgumentException When the info dictionnary can't be"], [148, "\t * encoded and hashed back to create the torrent's SHA-1 hash."], [149, "\t * @throws FileNotFoundException If the torrent file location or"], [150, "\t * destination directory does not exist and can't be created."], [151, "\t * @throws IOException If the torrent file cannot be accessed."], [152, "\t */"], [153, "\tpublic SharedTorrent(Torrent torrent, File destDir)"], [154, "\t\tthrows IllegalArgumentException, FileNotFoundException, IOException {"], [155, "\t\tthis(torrent.getEncoded(), destDir);"], [156, "\t}"], [157, ""], [207, "\tpublic synchronized void init() throws IOException {"], [208, "\t\tint nPieces = new Double(Math.ceil((double)this.totalLength /"], [224, "\t\t\t\t: this.totalLength % this.pieceLength;"], [227, "\t\t\tthis.pieces[idx] = new Piece(this.bucket, idx, off, len, hash);"], [238, "\t\t\t\t(this.totalLength - this.left),"], [239, "\t\t\t\tthis.totalLength,"]]}, "num_lines_added": 129, "num_lines_removed": 31}