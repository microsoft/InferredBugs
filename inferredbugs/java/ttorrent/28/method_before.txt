  @Override
  public DataProcessor processAndGetNext(ByteChannel socketChannel) throws IOException {
    if (pstrLength == -1) {
      ByteBuffer len = ByteBuffer.allocate(1);
      int readBytes = -1;
      try {
        readBytes = socketChannel.read(len);
      } catch (IOException ignored) {
      }
      if (readBytes == -1) {
        return new ShutdownProcessor(uid, peersStorageFactory);
      }
      if (readBytes == 0) {
        return this;
      }
      len.rewind();
      byte pstrLen = len.get();
      this.pstrLength = pstrLen;
      messageBytes = ByteBuffer.allocate(this.pstrLength + Handshake.BASE_HANDSHAKE_LENGTH);
      messageBytes.put(pstrLen);
    }
    int readBytes = -1;
    try {
      readBytes = socketChannel.read(messageBytes);
    } catch (IOException e) {
      e.printStackTrace();
    }
    if (readBytes == -1) {
      return new ShutdownProcessor(uid, peersStorageFactory);
    }
    if (messageBytes.remaining() != 0) {
      return this;
    }
    Handshake hs;
    try {
      messageBytes.rewind();
      hs = Handshake.parse(messageBytes, pstrLength);
    } catch (ParseException e) {
      logger.debug("incorrect handshake message from " + socketChannel.toString(), e);
      return new ShutdownProcessor(uid, peersStorageFactory);
    }
    if (!torrentsStorageFactory.getTorrentsStorage().hasTorrent(hs.getHexInfoHash())) {
      logger.debug("peer {} try download torrent with hash {}, but it's unknown torrent for self",
              Arrays.toString(hs.getPeerId()),
              hs.getHexInfoHash());
      return new ShutdownProcessor(uid, peersStorageFactory);
    }

    Peer peer = peersStorageFactory.getPeersStorage().getPeer(uid);
    logger.trace("set peer id to peer " + peer);
    peer.setPeerId(ByteBuffer.wrap(hs.getPeerId()));
    peer.setTorrentHash(hs.getHexInfoHash());
    ConnectionUtils.sendHandshake(socketChannel, hs.getInfoHash(), peersStorageFactory.getPeersStorage().getSelf().getPeerIdArray());
    SharedTorrent torrent = torrentsStorageFactory.getTorrentsStorage().getTorrent(hs.getHexInfoHash());
    SharingPeer sharingPeer = new SharingPeer(peer.getIp(), peer.getPort(), peer.getPeerId(), torrent);
    sharingPeer.register(torrent);
    sharingPeer.bind(socketChannel, true);
    peersStorageFactory.getPeersStorage().addSharingPeer(peer, sharingPeer);
    return new WorkingReceiver(this.uid, peersStorageFactory, torrentsStorageFactory);
  }