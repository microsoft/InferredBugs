{"hash": "3bc8295fbd3a5e42728b44903f70994bc677e1f8", "message": "\u4fee\u6539\u6876", "file_num_lines": 78, "diff_parsed": {"added": [[3, "import com.google.common.collect.Maps;"], [9, "import java.nio.ByteBuffer;"], [10, "import java.util.Map;"], [11, ""], [27, "    private static final String BLOCKS_BUCKET_KEY = \"blocks\";"], [44, "    /**"], [45, "     * \u533a\u5757\u6876"], [46, "     */"], [47, "    private Map<ByteBuffer, byte[]> blocksBucket;"], [48, ""], [51, "        initBlockBucket();"], [59, "            Options options = new Options();"], [60, "            options.setCreateIfMissing(true);"], [61, "            rocksDB = RocksDB.open(options, DB_FILE);"], [67, ""], [68, "    /**"], [69, "     * \u521d\u59cb\u5316 blocks \u6570\u636e\u6876"], [70, "     */"], [71, "    private void initBlockBucket() {"], [72, "        try {"], [73, "            byte[] blockBucketKey = SerializeUtils.serialize(BLOCKS_BUCKET_KEY);"], [74, "            byte[] blockBucketBytes = rocksDB.get(blockBucketKey);"], [75, "            if (blockBucketBytes != null) {"], [76, "                blocksBucket = (Map) SerializeUtils.deserialize(blockBucketBytes);"], [77, "            } else {"], [78, "                blocksBucket = Maps.newHashMap();"], [79, "                rocksDB.put(blockBucketKey, SerializeUtils.serialize(blocksBucket));"], [80, "            }"], [81, "        } catch (RocksDBException e) {"], [82, "            e.printStackTrace();"], [83, "        }"], [84, "    }"], [85, ""], [86, ""], [93, "        blocksBucket.put(ByteBuffer.wrap(SerializeUtils.serialize(\"l\")),"], [94, "                SerializeUtils.serialize(tipBlockHash));"], [95, "        rocksDB.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket));"], [103, "    public String getLastBlockHash() {"], [104, "        byte[] lastBlockHashBytes = blocksBucket.get(ByteBuffer.wrap(SerializeUtils.serialize(\"l\")));"], [117, "        byte[] key = SerializeUtils.serialize(block.getHash());"], [118, "        blocksBucket.put(ByteBuffer.wrap(key), SerializeUtils.serialize(block));"], [119, "        rocksDB.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket));"], [128, "    public Block getBlock(String blockHash) {"], [129, "        byte[] key = SerializeUtils.serialize(blockHash);"], [130, "        return (Block) SerializeUtils.deserialize(blocksBucket.get(ByteBuffer.wrap(key)));"]], "deleted": [[23, "    private static final String BLOCKS_BUCKET_PREFIX = \"blocks_\";"], [49, "            rocksDB = RocksDB.open(new Options().setCreateIfMissing(true), DB_FILE);"], [61, "        rocksDB.put(SerializeUtils.serialize(BLOCKS_BUCKET_PREFIX + \"l\"), SerializeUtils.serialize(tipBlockHash));"], [69, "    public String getLastBlockHash() throws Exception {"], [70, "        byte[] lastBlockHashBytes = rocksDB.get(SerializeUtils.serialize(BLOCKS_BUCKET_PREFIX + \"l\"));"], [83, "        byte[] key = SerializeUtils.serialize(BLOCKS_BUCKET_PREFIX + block.getHash());"], [84, "        rocksDB.put(key, SerializeUtils.serialize(block));"], [93, "    public Block getBlock(String blockHash) throws Exception {"], [94, "        byte[] key = SerializeUtils.serialize(BLOCKS_BUCKET_PREFIX + blockHash);"], [95, "        return (Block) SerializeUtils.deserialize(rocksDB.get(key));"]]}, "num_lines_added": 45, "num_lines_removed": 10}