{"hash": "3f92f7cc11f4f7f9a36784f4bdc5380ebbb27c5c", "message": "Create branch for [LOG4J2-1539].", "file_num_lines": 385, "diff_parsed": {"added": [[29, "import java.util.concurrent.ExecutorService;"], [30, "import java.util.concurrent.Executors;"], [31, "import java.util.concurrent.Future;"], [32, "import java.util.concurrent.RejectedExecutionException;"], [33, "import java.util.concurrent.TimeUnit;"], [48, "import org.apache.logging.log4j.core.util.Log4jThreadFactory;"], [81, "    private ExecutorService executorService;"], [82, "    private ExecutorService executorServiceDeamons;"], [305, "        stop(0, null);"], [306, "    }"], [307, ""], [308, "    @Override"], [309, "    public boolean stop(long timeout, TimeUnit timeUnit) {"], [312, "        final boolean shutdownEs;"], [313, "        final boolean shutdownEsd;"], [316, "                return true;"], [335, "            shutdownEs = shutdown(executorService, timeout, timeUnit);"], [336, "            // Do not wait for daemon threads"], [337, "            shutdownEsd = shutdown(executorServiceDeamons, 0, null);"], [343, "        return shutdownEs && shutdownEsd;"], [344, "    }"], [345, ""], [346, "    /**"], [347, "     * Shuts down the given pool."], [348, "     *"], [349, "     * @param pool"], [350, "     *            the pool to shutdown."], [351, "     * @param timeout"], [352, "     *            the maximum time to wait"], [353, "     * @param unit"], [354, "     *            the time unit of the timeout argument"], [355, "     * @return {@code true} if the given executor terminated and {@code false} if the timeout elapsed before termination."], [356, "     */"], [357, "    private boolean shutdown(ExecutorService pool, long timeout, TimeUnit timeUnit) {"], [358, "        pool.shutdown(); // Disable new tasks from being submitted"], [359, "        if (timeout > 0 && timeUnit == null) {"], [360, "            throw new IllegalArgumentException("], [361, "                    String.format(\"Logger context '%s' can't shutdown %s when timeout = %,d and timeUnit = %s.\","], [362, "                            getName(), pool, timeout, timeUnit));"], [363, "        }"], [364, "        if (timeout > 0) {"], [365, "            try {"], [366, "                // Wait a while for existing tasks to terminate"], [367, "                if (!pool.awaitTermination(timeout, timeUnit)) {"], [368, "                    pool.shutdownNow(); // Cancel currently executing tasks"], [369, "                    // Wait a while for tasks to respond to being cancelled"], [370, "                    if (!pool.awaitTermination(timeout, timeUnit)) {"], [371, "                        LOGGER.error(\"LoggerContext '{}' pool {} did not terminate after {} {}\", getName(), pool, timeout, timeUnit);"], [372, "                    }"], [373, "                    return false;"], [374, "                }"], [375, "            } catch (InterruptedException ie) {"], [376, "                // (Re-)Cancel if current thread also interrupted"], [377, "                pool.shutdownNow();"], [378, "                // Preserve interrupt status"], [379, "                Thread.currentThread().interrupt();"], [380, "            }"], [381, "        }"], [382, "        return true;"], [551, "            executorService = Executors.newCachedThreadPool(Log4jThreadFactory.createThreadFactory(contextName));"], [552, "            executorServiceDeamons = Executors.newCachedThreadPool(Log4jThreadFactory.createDaemonThreadFactory(contextName));"], [553, ""], [694, "    /**"], [695, "     * Gets the executor service to submit normal tasks."], [696, "     *"], [697, "     * @return the ExecutorService to submit normal tasks."], [698, "     */"], [699, "    public ExecutorService getExecutorService() {"], [700, "        return executorService;"], [701, "    }"], [702, ""], [703, "    /**"], [704, "     * Gets the executor service to submit daemon tasks."], [705, "     *"], [706, "     * @return the ExecutorService to submit normal daemon tasks."], [707, "     */"], [708, "    public ExecutorService getExecutorServiceDeamons() {"], [709, "        return executorServiceDeamons;"], [710, "    }"], [711, ""], [712, "    /**"], [713, "     * Submits a Runnable task for normal execution and returns a Future representing that task. The Future's"], [714, "     * {@code get} method will return {@code null} upon <em>successful</em> completion."], [715, "     *"], [716, "     * @param task the task to submit"], [717, "     * @return a Future representing pending completion of the task"], [718, "     * @throws RejectedExecutionException if the task cannot be"], [719, "     *         scheduled for execution"], [720, "     * @throws NullPointerException if the task is null"], [721, "     */"], [722, "    public Future<?> submit(Runnable task) {"], [723, "        return executorService.submit(task);"], [724, "    }"], [725, ""], [726, "    /**"], [727, "     * Submits a Runnable task for daemon execution and returns a Future representing that task. The Future's"], [728, "     * {@code get} method will return {@code null} upon <em>successful</em> completion."], [729, "     *"], [730, "     * @param task"], [731, "     *            the task to submit"], [732, "     * @return a Future representing pending completion of the task"], [733, "     * @throws RejectedExecutionException"], [734, "     *             if the task cannot be scheduled for execution"], [735, "     * @throws NullPointerException"], [736, "     *             if the task is null"], [737, "     */"], [738, "    public Future<?> submitDaemon(Runnable task) {"], [739, "        return executorServiceDeamons.submit(task);"], [740, "    }"], [741, ""]], "deleted": [[301, "                return;"]]}, "num_lines_added": 110, "num_lines_removed": 1}