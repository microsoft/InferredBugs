{"hash": "b4fe986a30bf2003a6c8523c5f21e732d1e382a9", "message": "[LOG4J2-982] Use System.nanoTime() to measure time intervals. Changes to\nlog4j-core only. No changes to log4j-flume-ng.", "file_num_lines": 62, "diff_parsed": {"added": [[21, "import java.util.concurrent.TimeUnit;"], [34, "    static final int MIN_INTERVAL = 5;"], [38, "    private volatile long lastModified;"], [42, "    private final long intervalNano;"], [44, "    private volatile long nextCheck;"], [66, "        this.intervalNano = TimeUnit.SECONDS.toNanos(Math.max(intervalSeconds, MIN_INTERVAL));"], [67, "        this.nextCheck = System.nanoTime() + this.intervalNano;"], [76, "        if (((counter.incrementAndGet() & MASK) == 0) && ((current = System.nanoTime()) - nextCheck >= 0)) {"], [79, "                nextCheck = current + intervalNano;"], [80, "                final long currentLastModified = file.lastModified();"], [81, "                if (currentLastModified > lastModified) {"], [82, "                    lastModified = currentLastModified;"], [95, "    private static class ReconfigurationWorker implements Runnable {"]], "deleted": [[33, "    private static final int MIN_INTERVAL = 5;"], [34, ""], [35, "    private static final int MILLIS_PER_SECOND = 1000;"], [39, "    private long lastModified;"], [43, "    private final int intervalSeconds;"], [45, "    private long nextCheck;"], [67, "        this.intervalSeconds = (intervalSeconds < MIN_INTERVAL ? MIN_INTERVAL : intervalSeconds) * MILLIS_PER_SECOND;"], [68, "        this.nextCheck = System.currentTimeMillis() + intervalSeconds;"], [77, "        if (((counter.incrementAndGet() & MASK) == 0) && ((current = System.currentTimeMillis()) >= nextCheck)) {"], [80, "                nextCheck = current + intervalSeconds;"], [81, "                if (file.lastModified() > lastModified) {"], [82, "                    lastModified = file.lastModified();"], [95, "    private class ReconfigurationWorker implements Runnable {"]]}, "num_lines_added": 13, "num_lines_removed": 13}