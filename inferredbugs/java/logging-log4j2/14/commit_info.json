{"hash": "f91ce9347be991d052e76a4f620cc343322b4edb", "message": "LOG4J2-177, LOG4J2-181 - Fix NPE in DatagramSocketManager and write header whenever the OutputStream is set in OutputStreamManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1460497 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 134, "diff_parsed": {"added": [[32, "import java.util.ArrayList;"], [33, "import java.util.List;"], [40, "import static org.junit.Assert.*;"], [55, "        List<String> list = new ArrayList<String>();"], [56, "        TestSocketServer server = new TestSocketServer(list);"], [57, "        server.start();"], [58, "        Thread.sleep(300);"], [59, ""], [60, "        //System.err.println(\"Initializing logger\");"], [61, "        final Logger logger = LogManager.getLogger(SocketReconnectTest.class);"], [62, ""], [63, "        String message = \"Log #1\";"], [64, "        logger.error(message);"], [65, "        String expectedHeader = \"Header\";"], [66, ""], [67, "        String msg = null;"], [68, "        String header = null;"], [69, "        for (int i = 0; i < 5; ++i) {"], [70, "            Thread.sleep(100);"], [71, "            if (list.size() > 1) {"], [72, "                header = list.get(0);"], [73, "                msg = list.get(1);"], [74, "                break;"], [75, "            }"], [76, "        }"], [77, "        assertNotNull(\"No header\", header);"], [78, "        assertEquals(expectedHeader, header);"], [79, "        assertNotNull(\"No message\", msg);"], [80, "        assertEquals(message, msg);"], [82, "        server.shutdown();"], [83, "        server.join();"], [85, "        list.clear();"], [87, "        message = \"Log #2\";"], [88, "        boolean exceptionCaught = false;"], [90, "        for (int i = 0; i < 5; ++i) {"], [94, "                exceptionCaught = true;"], [95, "                break;"], [98, "        }"], [99, "        assertTrue(\"No Exception thrown\", exceptionCaught);"], [100, "        message = \"Log #3\";"], [101, ""], [102, ""], [103, "        server = new TestSocketServer(list);"], [104, "        server.start();"], [105, "        Thread.sleep(300);"], [106, ""], [107, "        msg = null;"], [108, "        header = null;"], [109, "        logger.error(message);"], [110, "        for (int i = 0; i < 5; ++i) {"], [111, "            Thread.sleep(100);"], [112, "            if (list.size() > 1) {"], [113, "                header = list.get(0);"], [114, "                msg = list.get(1);"], [115, "                break;"], [118, "        assertNotNull(\"No header\", header);"], [119, "        assertEquals(expectedHeader, header);"], [120, "        assertNotNull(\"No message\", msg);"], [121, "        assertEquals(message, msg);"], [122, "        server.shutdown();"], [123, "        server.join();"], [127, "    private static class TestSocketServer extends Thread {"], [128, "        private volatile boolean shutdown = false;"], [129, "        private List<String> list;"], [132, "        public TestSocketServer(List<String> list) {"], [133, "            this.list = list;"], [136, "        public void run() {"], [137, "            ServerSocket server = null;"], [138, "            client = null;"], [139, "            try {"], [140, "                server = new ServerSocket(SOCKET_PORT);"], [141, "                client = server.accept();"], [142, "                while (!shutdown) {"], [143, "                    BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));"], [144, "                    list.add(reader.readLine());"], [146, "            } catch (Exception ex) {"], [147, "                ex.printStackTrace();"], [148, "            } finally {"], [149, "                if (client != null) {"], [150, "                    try {"], [151, "                        client.close();"], [152, "                    } catch (Exception ex) {"], [153, "                        System.out.println(\"Unable to close socket \" + ex.getMessage());"], [154, "                    }"], [155, "                }"], [156, "                if (server != null) {"], [157, "                    try {"], [158, "                        server.close();"], [159, "                    } catch (Exception ex) {"], [160, "                        System.out.println(\"Unable to close server socket \" + ex.getMessage());"], [161, "                    }"], [166, "        public void shutdown() {"], [167, "            shutdown = true;"], [168, "            try {"], [169, "                client.shutdownInput();"], [170, "            } catch (Exception ex) {"], [171, "                ex.printStackTrace();"], [172, "            }"]], "deleted": [[38, "import static org.junit.Assert.assertEquals;"], [39, "import static org.junit.Assert.fail;"], [53, "        TestSocketServer testServer = null;"], [54, "        ExecutorService executor = null;"], [55, "        Future<InputStream> futureIn;"], [56, "        final InputStream in;"], [58, "        try {"], [59, "            executor = Executors.newSingleThreadExecutor();"], [60, "            System.err.println(\"Initializing server\");"], [61, "            testServer = new TestSocketServer();"], [62, "            futureIn = executor.submit(testServer);"], [63, "            Thread.sleep(300);"], [64, ""], [65, "            //System.err.println(\"Initializing logger\");"], [66, "            final Logger logger = LogManager.getLogger(SocketReconnectTest.class);"], [67, ""], [68, "            String message = \"Log #1\";"], [69, "            logger.error(message);"], [71, "            BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));"], [72, "            assertEquals(message, reader.readLine());"], [74, "            closeQuietly(testServer);"], [75, "            executor.shutdown();"], [76, "            try {"], [77, "                // Wait a while for existing tasks to terminate"], [78, "                if (!executor.awaitTermination(100, TimeUnit.MILLISECONDS)) {"], [79, "                    executor.shutdownNow();"], [80, "                    if (!executor.awaitTermination(100, TimeUnit.MILLISECONDS)) {"], [81, "                        System.err.println(\"Pool did not terminate\");"], [82, "                    }"], [83, "                }"], [84, "            } catch (InterruptedException ie) {"], [85, "                // (Re-)Cancel if current thread also interrupted"], [86, "                executor.shutdownNow();"], [87, "                // Preserve interrupt status"], [88, "                Thread.currentThread().interrupt();"], [89, "            }"], [91, "            message = \"Log #2\";"], [92, "            logger.error(message);"], [94, "            message = \"Log #3\";"], [100, ""], [101, "            //System.err.println(\"Re-initializing server\");"], [102, "            executor = Executors.newSingleThreadExecutor();"], [103, "            testServer = new TestSocketServer();"], [104, "            futureIn = executor.submit(testServer);"], [105, "            Thread.sleep(500);"], [106, ""], [107, "            try {"], [108, "                logger.error(message);"], [109, "                reader = new BufferedReader(new InputStreamReader(futureIn.get()));"], [110, "                assertEquals(message, reader.readLine());"], [111, "            } catch (final AppenderRuntimeException e) {"], [112, "                e.printStackTrace();"], [113, "                fail(\"Unexpected Exception\");"], [115, "            //System.err.println(\"Sleeping to demonstrate repeated re-connections\");"], [116, "            //Thread.sleep(5000);"], [117, "        } finally {"], [118, "            closeQuietly(testServer);"], [119, "            closeQuietly(executor);"], [124, "    private static class TestSocketServer implements Callable<InputStream> {"], [125, "        private ServerSocket server;"], [128, "        public InputStream call() throws Exception {"], [129, "            server = new ServerSocket(SOCKET_PORT);"], [130, "            client = server.accept();"], [131, "            return client.getInputStream();"], [134, "        public void close() {"], [135, "            closeQuietly(client);"], [136, "            closeQuietly(server);"], [137, "        }"], [138, ""], [139, "        private void closeQuietly(final ServerSocket socket) {"], [140, "            if (null != socket) {"], [141, "                try {"], [142, "                    socket.close();"], [143, "                } catch (final IOException ignore) {"], [145, "            }"], [146, "        }"], [147, ""], [148, "        private void closeQuietly(final Socket socket) {"], [149, "            if (null != socket) {"], [150, "                try {"], [151, "                    socket.close();"], [152, "                } catch (final IOException ignore) {"], [156, "    }"], [158, "    private static void closeQuietly(final ExecutorService executor) {"], [159, "        if (null != executor) {"], [160, "            executor.shutdownNow();"], [161, "        }"], [162, "    }"], [163, ""], [164, "    private static void closeQuietly(final TestSocketServer testServer) {"], [165, "        if (null != testServer) {"], [166, "            testServer.close();"]]}, "num_lines_added": 98, "num_lines_removed": 92}