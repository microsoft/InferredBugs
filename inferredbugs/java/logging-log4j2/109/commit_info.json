{"hash": "873beebf413b5ad33839bd0ae17b5de1cc6a5e37", "message": "LOG4J2-1278\tremoved old Unbox class from perf.nogc package", "file_num_lines": 99, "diff_parsed": {"added": [[19, "import java.lang.management.GarbageCollectorMXBean;"], [22, "import java.lang.reflect.Method;"], [23, "import java.util.List;"], [29, "import org.apache.logging.log4j.core.async.AsyncLoggerContext;"], [31, "import org.apache.logging.log4j.spi.LoggerContext;"], [35, " *"], [36, " * -XX:+UnlockDiagnosticVMOptions -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationConcurrentTime -XX:+PrintGCApplicationStoppedTime"], [39, "    static final int ITERATIONS = 100000;"], [40, ""], [48, "        // work around a bug in Log4j-2.5"], [49, "        workAroundLog4j2_5Bug();"], [50, ""], [51, "        logger.error(\"Starting...\");"], [52, "        System.out.println(\"Starting...\");"], [56, "        final long testStartNanos = System.nanoTime();"], [57, "        final long[] UPTIMES = new long[1024];"], [58, "        final long[] DURATIONS = new long[1024];"], [63, "        int warmupCount = 0;"], [65, "            runTest(logger, runtimeMXBean, UPTIMES, DURATIONS, warmupCount);"], [66, "            warmupCount++;"], [72, "            int count = warmupCount + i;"], [73, "            runTest(logger, runtimeMXBean, UPTIMES, DURATIONS, count);"], [76, "        double testDurationNanos = System.nanoTime() - testStartNanos;"], [77, "        System.out.println(\"Done. Calculating stats...\");"], [78, ""], [79, "        printReport(\"Warmup\", UPTIMES, DURATIONS, 0, warmupCount);"], [80, "        printReport(\"Test\", UPTIMES, DURATIONS, warmupCount, COUNT);"], [81, ""], [82, "        StringBuilder sb = new StringBuilder(512);"], [83, "        sb.append(\"Test took: \").append(testDurationNanos/(1000.0*1000.0*1000.0)).append(\" sec\");"], [84, "        System.out.println(sb);"], [85, ""], [86, "        final List<GarbageCollectorMXBean> gcBeans = ManagementFactory.getGarbageCollectorMXBeans();"], [87, "        for (int i = 0; i < gcBeans.size(); i++) {"], [88, "            GarbageCollectorMXBean gcBean = gcBeans.get(i);"], [89, "            sb.setLength(0);"], [90, "            sb.append(\"GC[\").append(gcBean.getName()).append(\"] \");"], [91, "            sb.append(gcBean.getCollectionCount()).append(\" collections, collection time=\");"], [92, "            sb.append(gcBean.getCollectionTime()).append(\" millis.\");"], [93, "            System.out.println(sb);"], [94, "        }"], [95, "    }"], [96, ""], [97, "    private static void printReport(final String label, final long[] UPTIMES, final long[] DURATIONS,"], [98, "            final int offset, final int length) {"], [99, "        StringBuilder sb = new StringBuilder(512);"], [100, "        long total = 0;"], [101, "        for (int i = offset; i < offset + length; i++) {"], [102, "            sb.setLength(0);"], [103, "            final long opsPerSec = (1000L * 1000L * 1000L * ITERATIONS) / DURATIONS[i];"], [105, "            sb.append(UPTIMES[i]).append(\" \");"], [106, "            sb.append(label).append(\": Throughput: \").append(opsPerSec).append(\" ops/s\");"], [107, "            System.out.println(sb);"], [109, "        sb.setLength(0);"], [110, "        sb.append(\"Average \").append(label).append(\" throughput: \").append(total/length).append(\" ops/s\");"], [111, "        System.out.println(sb);"], [112, ""], [113, "        sb.setLength(0);"], [114, "        System.out.println(sb.append(label).append(\" ran: \").append(length).append(\" iterations\"));"], [115, "    }"], [116, ""], [117, "    private static void runTest(final Logger logger, final RuntimeMXBean runtimeMXBean, final long[] UPTIMES,"], [118, "            final long[] DURATIONS, final int index) {"], [119, "        UPTIMES[index] = runtimeMXBean.getUptime();"], [120, "        long startNanos = System.nanoTime();"], [121, "        loop(logger, ITERATIONS);"], [122, "        long endNanos = System.nanoTime();"], [123, "        DURATIONS[index] = endNanos - startNanos;"], [131, "//        logger.error(\"7 arg message {} {} {} {} {} {} {}\");"], [132, "//        logger.error(\"7 arg message {} {} \");"], [133, ""], [134, "            logger.error(\"simple text message\");"], [135, "        }"], [136, "    }"], [138, "    private static void workAroundLog4j2_5Bug() {"], [139, "        // use reflection so we can use the same test with older versions of log4j2"], [140, "        try {"], [141, "            Method setUseThreadLocals ="], [142, "                    AsyncLoggerContext.class.getDeclaredMethod(\"setUseThreadLocals\", new Class[]{boolean.class});"], [143, "            LoggerContext context = LogManager.getContext(false);"], [144, "            setUseThreadLocals.invoke(context, new Object[] {Boolean.TRUE});"], [145, "        } catch (Throwable ignored) {"]], "deleted": [[39, "        logger.info(\"Starting...\");"], [45, "        final int ITERATIONS = 100000;"], [48, "        long total = 0;"], [49, "        int count = 0;"], [50, "        StringBuilder sb = new StringBuilder(512);"], [52, "            sb.setLength(0);"], [53, "            long startNanos = System.nanoTime();"], [54, "            long uptime = runtimeMXBean.getUptime();"], [55, "            loop(logger, ITERATIONS);"], [56, "            long endNanos = System.nanoTime();"], [57, "            long durationNanos = endNanos - startNanos;"], [58, "            final long opsPerSec = (1000L * 1000L * 1000L * ITERATIONS) / durationNanos;"], [59, "            sb.append(uptime).append(\" Warmup: Throughput: \").append(opsPerSec).append(\" ops/s\");"], [60, "            System.out.println(sb);"], [61, "            total += opsPerSec;"], [62, "            count++;"], [65, "        System.out.printf(\"Average warmup throughput: %,d ops/s%n\", total/count);"], [68, "        final long[] durationNanos = new long[10];"], [70, "            final long startNanos = System.nanoTime();"], [71, "            loop(logger, ITERATIONS);"], [72, "            long endNanos = System.nanoTime();"], [73, "            durationNanos[i] = endNanos - startNanos;"], [76, "        total = 0;"], [77, "        for (int i = 0; i < COUNT; i++) {"], [78, "            final long opsPerSec = (1000L * 1000L * 1000L * ITERATIONS) / durationNanos[i];"], [79, "            System.out.printf(\"Throughput: %,d ops/s%n\", opsPerSec);"], [82, "        System.out.printf(\"Average throughput: %,d ops/s%n\", total/COUNT);"], [90, "//        logger.info(\"7 arg message {} {} {} {} {} {} {}\");"], [91, "//        logger.info(\"7 arg message {} {} \");"], [93, "            logger.info(\"simple text message\");"]]}, "num_lines_added": 82, "num_lines_removed": 30}