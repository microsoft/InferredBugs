{"hash": "ee87a184c7ccbfe03234782ebd6cc76c954a4a3c", "message": "[LOG4J2-1604] Log4j2 TcpSocketServer in background.", "file_num_lines": 90, "diff_parsed": {"added": [[34, " * Listens for Log4j events on a datagram socket and passes them on to Log4j."], [38, " * @see #main(String[])"], [82, "     * Main startup for the server. Run with \"--help\" for to print command line help on the console."], [90, "        final CommandLineArguments cla = parseCommandLine(args, UdpSocketServer.class, new CommandLineArguments());"], [91, "        if (cla.isHelp()) {"], [94, "        if (cla.getConfigLocation() != null) {"], [95, "            ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(cla.getConfigLocation()));"], [97, "        final UdpSocketServer<ObjectInputStream> socketServer = UdpSocketServer"], [98, "                .createSerializedSocketServer(cla.getPort());"], [99, "        final Thread serverThread = new Log4jThread(socketServer);"], [100, "        serverThread.start();"], [101, "        if (cla.isInteractive()) {"], [102, "            final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));"], [103, "            while (true) {"], [104, "                final String line = reader.readLine();"], [105, "                if (line == null || line.equalsIgnoreCase(\"Quit\") || line.equalsIgnoreCase(\"Stop\")"], [106, "                        || line.equalsIgnoreCase(\"Exit\")) {"], [107, "                    socketServer.shutdown();"], [108, "                    serverThread.join();"], [109, "                    break;"], [110, "                }"], [115, "    private final DatagramSocket datagramSocket;"], [116, ""], [117, "    // max size so we only have to deal with one packet"], [118, "    private final int maxBufferSize = 1024 * 65 + 1024;"], [119, ""], [120, "    /**"], [121, "     * Constructor."], [122, "     *"], [123, "     * @param port"], [124, "     *            to listen on."], [125, "     * @param logEventInput"], [126, "     * @throws IOException"], [127, "     *             If an error occurs."], [128, "     */"], [129, "    public UdpSocketServer(final int port, final LogEventBridge<T> logEventInput) throws IOException {"], [130, "        super(port, logEventInput);"], [131, "        this.datagramSocket = new DatagramSocket(port);"]], "deleted": [[34, " * Listens for events over a socket connection."], [41, "    private final DatagramSocket datagramSocket;"], [42, ""], [43, "    // max size so we only have to deal with one packet"], [44, "    private final int maxBufferSize = 1024 * 65 + 1024;"], [45, ""], [46, "    /**"], [47, "     * Constructor."], [48, "     *"], [49, "     * @param port"], [50, "     *            to listen on."], [51, "     * @param logEventInput"], [52, "     * @throws IOException"], [53, "     *             If an error occurs."], [54, "     */"], [55, "    public UdpSocketServer(final int port, final LogEventBridge<T> logEventInput) throws IOException {"], [56, "        super(port, logEventInput);"], [57, "        this.datagramSocket = new DatagramSocket(port);"], [58, "    }"], [59, ""], [100, "     * Main startup for the server."], [108, "        if (args.length < 1 || args.length > 2) {"], [109, "            System.err.println(\"Incorrect number of arguments: \" + args.length);"], [110, "            printUsage();"], [113, "        final int port = Integer.parseInt(args[0]);"], [114, "        if (port <= 0 || port >= MAX_PORT) {"], [115, "            System.err.println(\"Invalid port number:\" + port);"], [116, "            printUsage();"], [117, "            return;"], [119, "        if (args.length == 2 && args[1].length() > 0) {"], [120, "            ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(args[1]));"], [121, "        }"], [122, "        final UdpSocketServer<ObjectInputStream> socketServer = UdpSocketServer.createSerializedSocketServer(port);"], [123, "        final Thread server = new Log4jThread(socketServer);"], [124, "        server.start();"], [125, "        final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));"], [126, "        while (true) {"], [127, "            final String line = reader.readLine();"], [128, "            if (line == null || line.equalsIgnoreCase(\"Quit\") || line.equalsIgnoreCase(\"Stop\")"], [129, "                    || line.equalsIgnoreCase(\"Exit\")) {"], [130, "                socketServer.shutdown();"], [131, "                server.join();"], [132, "                break;"], [137, "    private static void printUsage() {"], [138, "        System.out.println(\"Usage: ServerSocket port configFilePath\");"]]}, "num_lines_added": 38, "num_lines_removed": 45}