{"hash": "3659a825bfa6641bd9391e5c3f99e4ee9fe99e7c", "message": "Clean up test to use fewer global variables.", "file_num_lines": 298, "diff_parsed": {"added": [[54, "import org.junit.Ignore;"], [66, "    static TCPSocketServer tcpServer;"], [67, "    static UDPSocketServer udpServer;"], [69, "    private LoggerContext context = LoggerContext.getContext();"], [70, "    private Logger root = context.getLogger(SocketAppenderTest.class.getName());"], [89, "        removeAndStopAppenders();"], [90, "        reset();"], [91, "    }"], [92, ""], [93, "    void removeAndStopAppenders() {"], [102, "    static void reset() {"], [103, "        tcpServer.reset();"], [104, "        udpServer.reset();"], [108, "    public void testTcpAppender1() throws Exception {"], [109, "        testTcpAppender(root, Constants.ENCODER_BYTE_BUFFER_SIZE, tcpServer.getQueue());"], [113, "    @Ignore(\"WIP Bug when this method runs after testTcpAppender1()\")"], [114, "    public void testTcpAppender2() throws Exception {"], [115, "        testTcpAppender(root, Constants.ENCODER_BYTE_BUFFER_SIZE, tcpServer.getQueue());"], [118, "    static void testTcpAppender(final Logger rootLogger, final int bufferSize, final BlockingQueue<LogEvent> blockingQ)"], [119, "            throws Exception {"], [134, "        rootLogger.addAppender(appender);"], [135, "        rootLogger.setAdditive(false);"], [136, "        rootLogger.setLevel(Level.DEBUG);"], [143, "            rootLogger.debug(\"This is a test message\");"], [145, "            rootLogger.error(\"Throwing an exception\", child);"], [146, "            rootLogger.debug(\"This is another test message\");"], [152, "        LogEvent event = blockingQ.poll(3, TimeUnit.SECONDS);"], [155, "        assertTrue(\"Message not delivered via TCP\", tcpServer.getCount() > 0);"], [157, "        event = blockingQ.poll(3, TimeUnit.SECONDS);"], [160, "        assertTrue(\"Message not delivered via TCP\", tcpServer.getCount() > 1);"], [206, "        final LogEvent event = udpServer.getQueue().poll(3, TimeUnit.SECONDS);"], [209, "        assertTrue(\"Message not delivered via UDP\", udpServer.getCount() > 0);"], [230, "        final TCPSocketServer tcpSocketServer = new TCPSocketServer(DYN_PORT);"], [231, "        try {"], [232, "            tcpSocketServer.start();"], [234, "            root.debug(\"This message is written because a deadlock never.\");"], [236, "            final LogEvent event = tcpSocketServer.getQueue().poll(3, TimeUnit.SECONDS);"], [237, "            assertNotNull(\"No event retrieved\", event);"], [238, "        } finally {"], [239, "            tcpSocketServer.shutdown();"], [240, "        }"], [276, "        private volatile int count = 0;"], [277, "        private final BlockingQueue<LogEvent> queue;"], [281, "            this.queue = new ArrayBlockingQueue<>(10);"], [282, "        }"], [283, ""], [284, "        public void reset() {"], [285, "            queue.clear();"], [286, "            count = 0;"], [304, "                    ++count;"], [307, "                    queue.add(event);"], [316, ""], [317, "        public int getCount() {"], [318, "            return count;"], [319, "        }"], [320, ""], [321, "        public BlockingQueue<LogEvent> getQueue() {"], [322, "            return queue;"], [323, "        }"], [329, "        private volatile boolean shutdown = false;"], [330, "        private volatile int count = 0;"], [331, "        private final BlockingQueue<LogEvent> queue;"], [335, "            this.queue = new ArrayBlockingQueue<>(10);"], [336, "        }"], [337, ""], [338, "        public void reset() {"], [339, "            queue.clear();"], [340, "            count = 0;"], [351, "                try (final Socket socket = sock.accept()) {"], [352, "                    if (socket != null) {"], [353, "                        final ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());"], [354, "                        while (!shutdown) {"], [355, "                            queue.add((LogEvent) ois.readObject());"], [356, "                            ++count;"], [357, "                        }"], [368, ""], [369, "        public BlockingQueue<LogEvent> getQueue() {"], [370, "            return queue;"], [371, "        }"], [372, ""], [373, "        public int getCount() {"], [374, "            return count;"], [375, "        }"]], "deleted": [[65, "    private static BlockingQueue<LogEvent> list = new ArrayBlockingQueue<>(10);"], [67, "    private static TCPSocketServer tcpServer;"], [68, "    private static UDPSocketServer udpServer;"], [69, ""], [70, "    LoggerContext context = LoggerContext.getContext();"], [71, "    Logger root = context.getLogger(\"SocketAppenderTest\");"], [72, ""], [73, "    private static int tcpCount = 0;"], [74, "    private static int udpCount = 0;"], [89, "        list.clear();"], [100, "        tcpCount = 0;"], [101, "        udpCount = 0;"], [102, "        list.clear();"], [105, "    @Test"], [106, "    public void testTcpAppenderDefaultBufferSize() throws Exception {"], [107, "        testTcpAppender(Constants.ENCODER_BYTE_BUFFER_SIZE);"], [111, "    public void testTcpAppenderSmallestBufferSize() throws Exception {"], [112, "        testTcpAppender(1);"], [116, "    public void testTcpAppenderLargeBufferSize() throws Exception {"], [117, "        testTcpAppender(Constants.ENCODER_BYTE_BUFFER_SIZE * 100);"], [120, "    private void testTcpAppender(final int bufferSize) throws Exception {"], [121, ""], [136, "        root.addAppender(appender);"], [137, "        root.setAdditive(false);"], [138, "        root.setLevel(Level.DEBUG);"], [145, "            root.debug(\"This is a test message\");"], [147, "            root.error(\"Throwing an exception\", child);"], [148, "            root.debug(\"This is another test message\");"], [154, "        LogEvent event = list.poll(3, TimeUnit.SECONDS);"], [157, "        assertTrue(\"Message not delivered via TCP\", tcpCount > 0);"], [159, "        event = list.poll(3, TimeUnit.SECONDS);"], [162, "        assertTrue(\"Message not delivered via TCP\", tcpCount > 1);"], [208, "        final LogEvent event = list.poll(3, TimeUnit.SECONDS);"], [211, "        assertTrue(\"Message not delivered via UDP\", udpCount > 0);"], [232, "        new TCPSocketServer(DYN_PORT).start();"], [234, "        root.debug(\"This message is written because a deadlock never.\");"], [236, "        final LogEvent event = list.poll(3, TimeUnit.SECONDS);"], [237, "        assertNotNull(\"No event retrieved\", event);"], [293, "                    ++udpCount;"], [296, "                    list.add(event);"], [310, "        private boolean shutdown = false;"], [324, "                final Socket socket = sock.accept();"], [325, "                if (socket != null) {"], [326, "                    final ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());"], [327, "                    while (!shutdown) {"], [328, "                        list.add((LogEvent) ois.readObject());"], [329, "                        ++tcpCount;"]]}, "num_lines_added": 83, "num_lines_removed": 47}