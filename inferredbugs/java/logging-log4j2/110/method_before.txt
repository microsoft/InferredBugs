    public static void main(String[] args) throws Exception {
        System.setProperty("Log4jContextSelector", AsyncLoggerContextSelector.class.getName());

        Logger logger = LogManager.getLogger();
        if (!(logger instanceof AsyncLogger)) {
            throw new IllegalStateException();
        }
        logger.info("Starting...");
        Thread.sleep(100);

        final RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();

        // warmup
        final int ITERATIONS = 100000;
        long startMs = System.currentTimeMillis();
        long end = startMs + TimeUnit.SECONDS.toMillis(10);
        long total = 0;
        int count = 0;
        StringBuilder sb = new StringBuilder(512);
        do {
            sb.setLength(0);
            long startNanos = System.nanoTime();
            long uptime = runtimeMXBean.getUptime();
            loop(logger, ITERATIONS);
            long endNanos = System.nanoTime();
            long durationNanos = endNanos - startNanos;
            final long opsPerSec = (1000L * 1000L * 1000L * ITERATIONS) / durationNanos;
            sb.append(uptime).append(" Warmup: Throughput: ").append(opsPerSec).append(" ops/s");
            System.out.println(sb);
            total += opsPerSec;
            count++;
            // Thread.sleep(1000);// drain buffer
        } while (System.currentTimeMillis() < end);
        System.out.printf("Average warmup throughput: %,d ops/s%n", total/count);

        final int COUNT = 10;
        final long[] durationNanos = new long[10];
        for (int i = 0; i < COUNT; i++) {
            final long startNanos = System.nanoTime();
            loop(logger, ITERATIONS);
            long endNanos = System.nanoTime();
            durationNanos[i] = endNanos - startNanos;
            // Thread.sleep(1000);// drain buffer
        }
        total = 0;
        for (int i = 0; i < COUNT; i++) {
            final long opsPerSec = (1000L * 1000L * 1000L * ITERATIONS) / durationNanos[i];
            System.out.printf("Throughput: %,d ops/s%n", opsPerSec);
            total += opsPerSec;
        }
        System.out.printf("Average throughput: %,d ops/s%n", total/COUNT);
    }