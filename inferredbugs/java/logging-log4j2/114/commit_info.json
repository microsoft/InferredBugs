{"hash": "61f706fc0a811c3184e941f2e8d1e012b5cbdb39", "message": "[LOG4J2-1501] FileAppender should be able to create files lazily.", "file_num_lines": 257, "diff_parsed": {"added": [[27, "import java.nio.file.Path;"], [48, "import org.junit.runner.RunWith;"], [49, "import org.junit.runners.Parameterized;"], [50, "import org.junit.runners.Parameterized.Parameters;"], [53, " * Tests {@link FileAppender}."], [55, "@RunWith(Parameterized.class)"], [58, "    @Parameters(name = \"lazyCreate = {0}\")"], [59, "    public static Boolean[] getParameters() {"], [60, "        return new Boolean[] { false, true };"], [61, "    }"], [62, ""], [63, "    private static final String FILE_NAME = \"target/fileAppenderTest.log\";"], [64, "    private static final Path PATH = Paths.get(FILE_NAME);"], [67, "    public FileAppenderTest(boolean lazyCreate) {"], [68, "        super();"], [69, "        this.lazyCreate = lazyCreate;"], [70, "    }"], [71, ""], [72, "    private final boolean lazyCreate;"], [73, "    private final int threadCount = THREADS;"], [74, ""], [76, "    public CleanFiles files = new CleanFiles(PATH);"], [80, "        assertTrue(\"Manager for \" + FILE_NAME + \" not removed\", !AbstractManager.hasManager(FILE_NAME));"], [85, "        final int logEventCount = 1;"], [86, "        writer(false, logEventCount, \"test\", lazyCreate, false);"], [87, "        verifyFile(logEventCount);"], [88, "    }"], [89, ""], [90, "    @Test"], [91, "    public void testLazyStart() throws Exception {"], [92, "        final Layout<String> layout = PatternLayout.newBuilder().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)"], [93, "                .build();"], [94, "        final FileAppender appender = FileAppender.createAppender(FILE_NAME, true, false, \"test\", false, false, false,"], [95, "                1, layout, null, false, null, lazyCreate, null);"], [96, "        try {"], [97, "            Assert.assertNotEquals(lazyCreate, Files.exists(PATH));"], [98, "            appender.start();"], [99, "            Assert.assertNotEquals(lazyCreate, Files.exists(PATH));"], [100, "        } finally {"], [101, "            appender.stop();"], [102, "        }"], [103, "        Assert.assertNotEquals(lazyCreate, Files.exists(PATH));"], [108, "        final Layout<String> layout = PatternLayout.newBuilder().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)"], [109, "                .build();"], [110, "        final FileAppender appender = FileAppender.createAppender(FILE_NAME, true, false, \"test\", false, false, false,"], [111, "                1, layout, null, false, null, lazyCreate, null);"], [112, "        try {"], [113, "            appender.start();"], [114, "            final File file = new File(FILE_NAME);"], [115, "            assertTrue(\"Appender did not start\", appender.isStarted());"], [116, "            Assert.assertNotEquals(lazyCreate, Files.exists(PATH));"], [117, "            long curLen = file.length();"], [118, "            long prevLen = curLen;"], [119, "            assertTrue(\"File length: \" + curLen, curLen == 0);"], [120, "            for (int i = 0; i < 100; ++i) {"], [121, "                final LogEvent event = Log4jLogEvent.newBuilder().setLoggerName(\"TestLogger\") //"], [122, "                        .setLoggerFqcn(FileAppenderTest.class.getName()).setLevel(Level.INFO) //"], [123, "                        .setMessage(new SimpleMessage(\"Test\")).setThreadName(this.getClass().getSimpleName()) //"], [124, "                        .setTimeMillis(System.currentTimeMillis()).build();"], [125, "                try {"], [126, "                    appender.append(event);"], [127, "                    curLen = file.length();"], [128, "                    assertTrue(\"File length: \" + curLen, curLen > prevLen);"], [129, "                    // Give up control long enough for another thread/process to occasionally do something."], [130, "                    Thread.sleep(25);"], [131, "                } catch (final Exception ex) {"], [132, "                    throw ex;"], [133, "                }"], [134, "                prevLen = curLen;"], [136, "        } finally {"], [137, "            appender.stop();"], [144, "        final int logEventCount = 1;"], [145, "        writer(true, logEventCount, \"test\", lazyCreate, false);"], [146, "        verifyFile(logEventCount);"], [150, "    public void testMultipleAppenderThreads() throws Exception {"], [151, "        testMultipleLockingAppenderThreads(false, threadCount);"], [152, "    }"], [153, ""], [154, "    private void testMultipleLockingAppenderThreads(final boolean lock, int threadCount)"], [155, "            throws InterruptedException, Exception {"], [156, "        final ExecutorService threadPool = Executors.newFixedThreadPool(threadCount);"], [157, "        final Exception[] exceptionRef = new Exception[1];"], [158, "        final int logEventCount = 100;"], [159, "        final Runnable runnable = new FileWriterRunnable(lock, logEventCount, exceptionRef);"], [160, "        for (int i = 0; i < threadCount; ++i) {"], [161, "            threadPool.execute(runnable);"], [163, "        threadPool.shutdown();"], [164, "        Assert.assertTrue(\"The thread pool has not shutdown: \" + threadPool,"], [165, "                threadPool.awaitTermination(10, TimeUnit.SECONDS));"], [166, "        if (exceptionRef[0] != null) {"], [167, "            throw exceptionRef[0];"], [169, "        verifyFile(threadCount * logEventCount);"], [173, "    public void testMultipleLockingAppenders() throws Exception {"], [174, "        testMultipleLockingAppenderThreads(true, threadCount);"], [181, "        final Integer logEventCount = 10;"], [182, "        final int processCount = 3;"], [183, "        final Process[] processes = new Process[processCount];"], [184, "        final ProcessBuilder[] builders = new ProcessBuilder[processCount];"], [185, "        for (int index = 0; index < processCount; ++index) {"], [187, "                    \"Process \" + index, logEventCount.toString(), \"true\", Boolean.toString(lazyCreate));"], [189, "        for (int index = 0; index < processCount; ++index) {"], [192, "        for (int index = 0; index < processCount; ++index) {"], [203, "        verifyFile(logEventCount * processCount);"], [206, "    private static void writer(final boolean lock, final int logEventCount, final String name, boolean lazyCreate,"], [207, "            boolean concurrent) throws Exception {"], [208, "        final Layout<String> layout = PatternLayout.newBuilder().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)"], [209, "                .build();"], [210, "        final FileAppender appender = FileAppender.createAppender(FILE_NAME, true, lock, \"test\", false, false, false,"], [211, "                FileAppender.DEFAULT_BUFFER_SIZE, layout, null, false, null, lazyCreate, null);"], [212, "        try {"], [213, "            appender.start();"], [214, "            assertTrue(\"Appender did not start\", appender.isStarted());"], [215, "            final boolean exists = Files.exists(PATH);"], [216, "            String msg = String.format(\"concurrent = %s, lazyCreate = %s, file exists = %s\", concurrent, lazyCreate,"], [217, "                    exists);"], [218, "            // If concurrent the file might have been created (or not.)"], [219, "            // Can't really test lazyCreate && concurrent."], [220, "            final boolean expectFileCreated = !lazyCreate;"], [221, "            if (concurrent && expectFileCreated) {"], [222, "                Assert.assertTrue(msg, exists);"], [223, "            } else if (expectFileCreated) {"], [224, "                Assert.assertNotEquals(msg, lazyCreate, exists);"], [226, "            for (int i = 0; i < logEventCount; ++i) {"], [227, "                final LogEvent logEvent = Log4jLogEvent.newBuilder().setLoggerName(\"TestLogger\")"], [228, "                        .setLoggerFqcn(FileAppenderTest.class.getName()).setLevel(Level.INFO)"], [229, "                        .setMessage(new SimpleMessage(\"Test\")).setThreadName(name)"], [230, "                        .setTimeMillis(System.currentTimeMillis()).build();"], [231, "                try {"], [232, "                    appender.append(logEvent);"], [233, "                    Thread.sleep(25); // Give up control long enough for another thread/process to occasionally do"], [234, "                                      // something."], [235, "                } catch (final Exception ex) {"], [236, "                    throw ex;"], [237, "                }"], [238, "            }"], [239, "        } finally {"], [240, "            appender.stop();"], [242, "        assertFalse(\"Appender did not stop\", appender.isStarted());"], [249, "        int lines = 0;"], [250, "        try (final BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(FILE_NAME)))) {"], [251, "            String str = Strings.EMPTY;"], [252, "            while (is.ready()) {"], [253, "                str = is.readLine();"], [254, "                // System.out.println(str);"], [255, "                ++lines;"], [256, "                final Matcher matcher = pattern.matcher(str);"], [257, "                assertTrue(\"Unexpected data: \" + str, matcher.matches());"], [258, "            }"], [260, "        Assert.assertEquals(count, lines);"], [265, "        private final int logEventCount;"], [266, "        private final Exception[] exceptionRef;"], [268, "        public FileWriterRunnable(final boolean lock, final int logEventCount, final Exception[] exceptionRef) {"], [270, "            this.logEventCount = logEventCount;"], [271, "            this.exceptionRef = exceptionRef;"], [279, "                writer(lock, logEventCount, thread.getName(), lazyCreate, true);"], [281, "                exceptionRef[0] = ex;"], [305, "            final boolean lazyCreate = Boolean.parseBoolean(args[2]);"], [306, ""], [310, "                writer(lock, count, id, lazyCreate, true);"]], "deleted": [[49, " *"], [53, "    private static final String FILENAME = \"target/fileAppenderTest.log\";"], [57, "    public CleanFiles files = new CleanFiles(FILENAME);"], [61, "        assertTrue(\"Manager for \" + FILENAME + \" not removed\", !AbstractManager.hasManager(FILENAME));"], [66, "        writer(false, 1, \"test\");"], [67, "        verifyFile(1);"], [72, "        final Layout<String> layout = PatternLayout.newBuilder().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN).build();"], [73, "        final String bufferSizeStr = \"1\";"], [74, "        final FileAppender appender = FileAppender.createAppender(FILENAME, \"true\", \"false\", \"test\", \"false\", \"false\","], [75, "                \"false\", bufferSizeStr, layout, null, \"false\", null, null);"], [76, "        appender.start();"], [77, "        final File file = new File(FILENAME);"], [78, "        assertTrue(\"Appender did not start\", appender.isStarted());"], [79, "        long curLen = file.length();"], [80, "        long prevLen = curLen;"], [81, "        assertTrue(\"File length: \" + curLen, curLen == 0);"], [82, "        for (int i = 0; i < 100; ++i) {"], [83, "            final LogEvent event = Log4jLogEvent.newBuilder().setLoggerName(\"TestLogger\") //"], [84, "                    .setLoggerFqcn(FileAppenderTest.class.getName()).setLevel(Level.INFO) //"], [85, "                    .setMessage(new SimpleMessage(\"Test\")).setThreadName(this.getClass().getSimpleName()) //"], [86, "                    .setTimeMillis(System.currentTimeMillis()).build();"], [87, "            try {"], [88, "                appender.append(event);"], [89, "                curLen = file.length();"], [90, "                assertTrue(\"File length: \" + curLen, curLen > prevLen);"], [91, "                Thread.sleep(25); // Give up control long enough for another thread/process to occasionally do"], [92, "                                  // something."], [93, "            } catch (final Exception ex) {"], [94, "                throw ex;"], [96, "            prevLen = curLen;"], [98, "        appender.stop();"], [104, "        writer(true, 1, \"test\");"], [105, "        verifyFile(1);"], [109, "    public void testMultipleAppenders() throws Exception {"], [110, "        final ExecutorService pool = Executors.newFixedThreadPool(THREADS);"], [111, "        final Exception[] error = new Exception[1];"], [112, "        final int count = 100;"], [113, "        final Runnable runnable = new FileWriterRunnable(false, count, error);"], [114, "        for (int i = 0; i < THREADS; ++i) {"], [115, "            pool.execute(runnable);"], [117, "        pool.shutdown();"], [118, "        pool.awaitTermination(10, TimeUnit.SECONDS);"], [119, "        if (error[0] != null) {"], [120, "            throw error[0];"], [122, "        verifyFile(THREADS * count);"], [126, "    public void testMultipleLockedAppenders() throws Exception {"], [127, "        final ExecutorService pool = Executors.newFixedThreadPool(THREADS);"], [128, "        final Exception[] error = new Exception[1];"], [129, "        final int count = 100;"], [130, "        final Runnable runnable = new FileWriterRunnable(true, count, error);"], [131, "        for (int i = 0; i < THREADS; ++i) {"], [132, "            pool.execute(runnable);"], [133, "        }"], [134, "        pool.shutdown();"], [135, "        pool.awaitTermination(10, TimeUnit.SECONDS);"], [136, "        if (error[0] != null) {"], [137, "            throw error[0];"], [138, "        }"], [139, "        verifyFile(THREADS * count);"], [146, "        final Integer count = 10;"], [147, "        final int processeCount = 3;"], [148, "        final Process[] processes = new Process[processeCount];"], [149, "        final ProcessBuilder[] builders = new ProcessBuilder[processeCount];"], [150, "        for (int index = 0; index < processeCount; ++index) {"], [152, "                    \"Process \" + index, count.toString(), \"true\");"], [154, "        for (int index = 0; index < processeCount; ++index) {"], [157, "        for (int index = 0; index < processeCount; ++index) {"], [168, "        verifyFile(count * processeCount);"], [171, "    private static void writer(final boolean lock, final int count, final String name) throws Exception {"], [172, "        final Layout<String> layout = PatternLayout.newBuilder().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN).build();"], [173, "        final FileAppender app = FileAppender.createAppender(FILENAME, \"true\", Boolean.toString(lock), \"test\", \"false\","], [174, "                \"false\", \"false\", null, layout, null, \"false\", null, null);"], [175, "        app.start();"], [176, "        assertTrue(\"Appender did not start\", app.isStarted());"], [177, "        Assert.assertTrue(Files.exists(Paths.get(FILENAME)));"], [178, "        for (int i = 0; i < count; ++i) {"], [179, "            final LogEvent event = Log4jLogEvent.newBuilder().setLoggerName(\"TestLogger\")"], [180, "                    .setLoggerFqcn(FileAppenderTest.class.getName()).setLevel(Level.INFO)"], [181, "                    .setMessage(new SimpleMessage(\"Test\")).setThreadName(name).setTimeMillis(System.currentTimeMillis())"], [182, "                    .build();"], [183, "            try {"], [184, "                app.append(event);"], [185, "                Thread.sleep(25); // Give up control long enough for another thread/process to occasionally do"], [186, "                                  // something."], [187, "            } catch (final Exception ex) {"], [188, "                throw ex;"], [191, "        app.stop();"], [192, "        assertFalse(\"Appender did not stop\", app.isStarted());"], [199, "        final FileInputStream fis = new FileInputStream(FILENAME);"], [200, "        final BufferedReader is = new BufferedReader(new InputStreamReader(fis));"], [201, "        int counter = 0;"], [202, "        String str = Strings.EMPTY;"], [203, "        while (is.ready()) {"], [204, "            str = is.readLine();"], [205, "            // System.out.println(str);"], [206, "            ++counter;"], [207, "            final Matcher matcher = pattern.matcher(str);"], [208, "            assertTrue(\"Bad data: \" + str, matcher.matches());"], [210, "        fis.close();"], [211, "        assertTrue(\"Incorrect count: was \" + counter + \" should be \" + count, count == counter);"], [212, "        fis.close();"], [213, ""], [218, "        private final int count;"], [219, "        private final Exception[] error;"], [221, "        public FileWriterRunnable(final boolean lock, final int count, final Exception[] error) {"], [223, "            this.count = count;"], [224, "            this.error = error;"], [232, "                writer(lock, count, thread.getName());"], [233, ""], [235, "                error[0] = ex;"], [262, "                writer(lock, count, id);"]]}, "num_lines_added": 159, "num_lines_removed": 111}