{"hash": "50609f9c70679c03bc94229ea4fdd3d11337bb92", "message": "[LOG4J2-1774]: Refactor JmsAppenderTest to use JndiRule and Mockito", "file_num_lines": 115, "diff_parsed": {"added": [[20, "import java.io.Serializable;"], [21, "import java.util.Map;"], [22, "import java.util.concurrent.ConcurrentHashMap;"], [23, "import javax.jms.Connection;"], [24, "import javax.jms.ConnectionFactory;"], [25, "import javax.jms.Destination;"], [26, "import javax.jms.MessageProducer;"], [28, "import javax.jms.Session;"], [34, "import org.apache.logging.log4j.junit.JndiRule;"], [37, "import org.junit.Before;"], [40, "import org.junit.rules.RuleChain;"], [42, "import static org.mockito.ArgumentMatchers.anyLong;"], [43, "import static org.mockito.ArgumentMatchers.anyString;"], [44, "import static org.mockito.ArgumentMatchers.eq;"], [45, "import static org.mockito.ArgumentMatchers.isA;"], [46, "import static org.mockito.BDDMockito.given;"], [47, "import static org.mockito.BDDMockito.then;"], [48, "import static org.mockito.Mockito.mock;"], [49, "import static org.mockito.Mockito.times;"], [53, "    private static final String CONNECTION_FACTORY_NAME = \"jms/connectionFactory\";"], [54, "    private static final String QUEUE_FACTORY_NAME = \"jms/queues\";"], [61, "    private ConnectionFactory connectionFactory = mock(ConnectionFactory.class);"], [62, "    private Connection connection = mock(Connection.class);"], [63, "    private Session session = mock(Session.class);"], [64, "    private Destination destination = mock(Destination.class);"], [65, "    private MessageProducer messageProducer = mock(MessageProducer.class);"], [66, "    private TextMessage textMessage = mock(TextMessage.class);"], [67, "    private ObjectMessage objectMessage = mock(ObjectMessage.class);"], [68, ""], [69, "    private JndiRule jndiRule = new JndiRule(createBindings());"], [70, "    private LoggerContextRule ctx = new LoggerContextRule(\"JmsAppenderTest.xml\");"], [71, ""], [72, "    @Rule"], [73, "    public RuleChain rules = RuleChain.outerRule(jndiRule).around(ctx);"], [74, ""], [75, "    private Map<String, Object> createBindings() {"], [76, "        final ConcurrentHashMap<String, Object> map = new ConcurrentHashMap<>();"], [77, "        map.put(CONNECTION_FACTORY_NAME, connectionFactory);"], [78, "        map.put(DESTINATION_NAME, destination);"], [79, "        map.put(QUEUE_FACTORY_NAME, connectionFactory);"], [80, "        map.put(QUEUE_NAME, destination);"], [81, "        map.put(TOPIC_FACTORY_NAME, connectionFactory);"], [82, "        map.put(TOPIC_NAME, destination);"], [83, "        return map;"], [86, "    public JmsAppenderTest() throws Exception {"], [87, "        // this needs to set up before LoggerContextRule"], [88, "        given(connectionFactory.createConnection()).willReturn(connection);"], [89, "        given(connectionFactory.createConnection(anyString(), anyString())).willThrow(IllegalArgumentException.class);"], [90, "        given(connection.createSession(eq(false), eq(Session.AUTO_ACKNOWLEDGE))).willReturn(session);"], [91, "        given(session.createProducer(eq(destination))).willReturn(messageProducer);"], [92, "        given(session.createTextMessage(anyString())).willReturn(textMessage);"], [93, "        given(session.createObjectMessage(isA(Serializable.class))).willReturn(objectMessage);"], [96, "    @Before"], [97, "    public void setUp() throws Exception {"], [98, "        // we have 3 appenders all connecting to the same ConnectionFactory"], [99, "        then(connection).should(times(3)).start();"], [100, "    }"], [107, "        then(session).should().createTextMessage(eq(LOG_MESSAGE));"], [108, "        then(textMessage).should().setJMSTimestamp(anyLong());"], [109, "        then(messageProducer).should().send(textMessage);"], [110, "        appender.stop();"], [111, "        then(session).should().close();"], [112, "        then(connection).should().close();"], [120, "        then(session).should().createObjectMessage(eq(expected));"], [121, "        then(objectMessage).should().setJMSTimestamp(anyLong());"], [122, "        then(messageProducer).should().send(objectMessage);"], [123, "        appender.stop();"], [124, "        then(session).should().close();"], [125, "        then(connection).should().close();"], [133, "        then(session).should().createObjectMessage(eq(expected));"], [134, "        then(objectMessage).should().setJMSTimestamp(anyLong());"], [135, "        then(messageProducer).should().send(objectMessage);"], [136, "        appender.stop();"], [137, "        then(session).should().close();"], [138, "        then(connection).should().close();"]], "deleted": [[20, "import javax.jms.Message;"], [23, "import javax.naming.Context;"], [24, "import javax.naming.InitialContext;"], [29, "import org.apache.logging.log4j.core.util.JndiCloser;"], [32, "import org.junit.AfterClass;"], [33, "import org.junit.BeforeClass;"], [36, "import org.mockejb.jms.MockQueue;"], [37, "import org.mockejb.jms.MockTopic;"], [38, "import org.mockejb.jms.QueueConnectionFactoryImpl;"], [39, "import org.mockejb.jms.TopicConnectionFactoryImpl;"], [40, "import org.mockejb.jndi.MockContextFactory;"], [42, "import static org.hamcrest.CoreMatchers.instanceOf;"], [43, "import static org.junit.Assert.*;"], [47, "    private static final String CONNECTION_FACTORY_NAME = \"jms/queues\";"], [54, "    private static Context context;"], [55, ""], [56, "    private static MockQueue destination;"], [57, "    private static MockQueue queue;"], [58, "    private static MockTopic topic;"], [59, ""], [60, "    @BeforeClass"], [61, "    public static void setUpClass() throws Exception {"], [62, "        MockContextFactory.setAsInitial();"], [63, "        context = new InitialContext();"], [64, "        context.rebind(CONNECTION_FACTORY_NAME, new QueueConnectionFactoryImpl());"], [65, "        context.rebind(TOPIC_FACTORY_NAME, new TopicConnectionFactoryImpl());"], [66, "        destination = new MockQueue(DESTINATION_NAME);"], [67, "        context.rebind(DESTINATION_NAME, destination);"], [68, "        queue = new MockQueue(QUEUE_NAME);"], [69, "        context.rebind(QUEUE_NAME, queue);"], [70, "        topic = new MockTopic(TOPIC_NAME);"], [71, "        context.rebind(TOPIC_NAME, topic);"], [74, "    @AfterClass"], [75, "    public static void tearDownClass() throws Exception {"], [76, "        JndiCloser.close(context);"], [79, "    @Rule"], [80, "    public LoggerContextRule ctx = new LoggerContextRule(\"JmsAppenderTest.xml\");"], [84, "        assertEquals(0, destination.size());"], [88, "        assertEquals(1, destination.size());"], [89, "        final Message message = destination.getMessageAt(0);"], [90, "        assertNotNull(message);"], [91, "        assertThat(message, instanceOf(TextMessage.class));"], [92, "        final TextMessage textMessage = (TextMessage) message;"], [93, "        assertEquals(LOG_MESSAGE, textMessage.getText());"], [98, "        assertEquals(0, queue.size());"], [102, "        assertEquals(1, queue.size());"], [103, "        final Message message = queue.getMessageAt(0);"], [104, "        assertNotNull(message);"], [105, "        assertThat(message, instanceOf(ObjectMessage.class));"], [106, "        final ObjectMessage objectMessage = (ObjectMessage) message;"], [107, "        final Object o = objectMessage.getObject();"], [108, "        assertThat(o, instanceOf(LogEvent.class));"], [109, "        final LogEvent actual = (LogEvent) o;"], [110, "        assertEquals(expected.getMessage().getFormattedMessage(), actual.getMessage().getFormattedMessage());"], [115, "        assertEquals(0, topic.size());"], [119, "        assertEquals(1, topic.size());"], [120, "        final Message message = topic.getMessageAt(0);"], [121, "        assertNotNull(message);"], [122, "        assertThat(message, instanceOf(ObjectMessage.class));"], [123, "        final ObjectMessage objectMessage = (ObjectMessage) message;"], [124, "        final Object o = objectMessage.getObject();"], [125, "        assertThat(o, instanceOf(LogEvent.class));"], [126, "        final LogEvent actual = (LogEvent) o;"], [127, "        assertEquals(expected.getMessage().getFormattedMessage(), actual.getMessage().getFormattedMessage());"]]}, "num_lines_added": 75, "num_lines_removed": 64}