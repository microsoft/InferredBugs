{"hash": "ee87a184c7ccbfe03234782ebd6cc76c954a4a3c", "message": "[LOG4J2-1604] Log4j2 TcpSocketServer in background.", "file_num_lines": 177, "diff_parsed": {"added": [[26, "import java.net.InetAddress;"], [38, "import com.beust.jcommander.Parameter;"], [39, "import com.beust.jcommander.validators.PositiveInteger;"], [40, ""], [42, " * Listens for Log4j events on a TCP server socket and passes them on to Log4j."], [46, " * @see #main(String[])"], [50, "    protected static class CommandLineArguments extends AbstractSocketServer.CommandLineArguments {"], [51, ""], [52, "        @Parameter(names = { \"--backlog\","], [53, "                \"-b\" }, validateWith = PositiveInteger.class, description = \"Server socket backlog.\")"], [54, "        // Same default as ServerSocket"], [55, "        private int backlog = 50;"], [56, ""], [57, "        int getBacklog() {"], [58, "            return backlog;"], [59, "        }"], [60, ""], [61, "        void setBacklog(final int backlog) {"], [62, "            this.backlog = backlog;"], [63, "        }"], [64, ""], [65, "    }"], [66, ""], [146, "     * Creates a socket server that reads serialized log events."], [147, "     *"], [148, "     * @param port the port to listen"], [149, "     * @param localBindAddress The server socket's local bin address"], [150, "     * @return a new a socket server"], [151, "     * @throws IOException"], [152, "     *         if an I/O error occurs when opening the socket."], [153, "     * @since 2.7"], [154, "     */"], [155, "    public static TcpSocketServer<ObjectInputStream> createSerializedSocketServer(final int port, final int backlog,"], [156, "            InetAddress localBindAddress) throws IOException {"], [157, "        LOGGER.entry(port);"], [158, "        final TcpSocketServer<ObjectInputStream> socketServer = new TcpSocketServer<>(port, backlog, localBindAddress,"], [159, "                new ObjectInputStreamLogEventBridge());"], [160, "        return LOGGER.exit(socketServer);"], [161, "    }"], [162, ""], [163, "    /**"], [179, "     * Main startup for the server. Run with \"--help\" for to print command line help on the console."], [187, "        final CommandLineArguments cla = parseCommandLine(args, TcpSocketServer.class, new CommandLineArguments());"], [188, "        if (cla.isHelp()) {"], [191, "        if (cla.getConfigLocation() != null) {"], [192, "            ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(cla.getConfigLocation()));"], [194, "        final TcpSocketServer<ObjectInputStream> socketServer = TcpSocketServer"], [195, "                .createSerializedSocketServer(cla.getPort(), cla.getBacklog(), cla.getLocalBindAddress());"], [198, "        if (cla.isInteractive()) {"], [199, "            final Charset enc = Charset.defaultCharset();"], [200, "            final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in, enc));"], [201, "            while (true) {"], [202, "                final String line = reader.readLine();"], [203, "                if (line == null || line.equalsIgnoreCase(\"Quit\") || line.equalsIgnoreCase(\"Stop\")"], [204, "                        || line.equalsIgnoreCase(\"Exit\")) {"], [205, "                    socketServer.shutdown();"], [206, "                    serverThread.join();"], [207, "                    break;"], [208, "                }"], [213, "    private final ConcurrentMap<Long, SocketHandler> handlers = new ConcurrentHashMap<>();"], [214, ""], [215, "    private final ServerSocket serverSocket;"], [216, ""], [217, "    /**"], [218, "     * Constructor."], [219, "     *"], [220, "     * @param port"], [221, "     *        The server socket port."], [222, "     * @param backlog"], [223, "     *        The server socket backlog."], [224, "     * @param localBindAddress TODO"], [225, "     * @param logEventInput"], [226, "     *        the log even input"], [227, "     * @throws IOException"], [228, "     *         if an I/O error occurs when opening the socket."], [229, "     * @since 2.7"], [230, "     */"], [231, "    @SuppressWarnings(\"resource\")"], [232, "    public TcpSocketServer(final int port, final int backlog, InetAddress localBindAddress, final LogEventBridge<T> logEventInput) throws IOException {"], [233, "        this(port, logEventInput, new ServerSocket(port, backlog, localBindAddress));"], [234, "    }"], [235, ""], [236, "    /**"], [237, "     * Constructor."], [238, "     *"], [239, "     * @param port"], [240, "     *        to listen."], [241, "     * @param logEventInput"], [242, "     *        the log even input"], [243, "     * @throws IOException"], [244, "     *         if an I/O error occurs when opening the socket."], [245, "     */"], [246, "    public TcpSocketServer(final int port, final LogEventBridge<T> logEventInput) throws IOException {"], [247, "        this(port, logEventInput, extracted(port));"], [248, "    }"], [249, ""], [250, "    private static ServerSocket extracted(final int port) throws IOException {"], [251, "        return new ServerSocket(port);"], [252, "    }"], [253, ""], [254, "    /**"], [255, "     * Constructor."], [256, "     *"], [257, "     * @param port"], [258, "     *        to listen."], [259, "     * @param logEventInput"], [260, "     *        the log even input"], [261, "     * @param serverSocket"], [262, "     *        the socket server"], [263, "     * @throws IOException"], [264, "     *         if an I/O error occurs when opening the socket."], [265, "     */"], [266, "    public TcpSocketServer(final int port, final LogEventBridge<T> logEventInput, final ServerSocket serverSocket)"], [267, "            throws IOException {"], [268, "        super(port, logEventInput);"], [269, "        this.serverSocket = serverSocket;"], [284, "                logger.debug(\"Listening for a connection {}...\", serverSocket);"], [286, "                logger.debug(\"Acepted connection on {}...\", serverSocket);"]], "deleted": [[38, " * Listens for events over a socket connection."], [93, "    private final ConcurrentMap<Long, SocketHandler> handlers = new ConcurrentHashMap<>();"], [94, ""], [95, "    private final ServerSocket serverSocket;"], [96, ""], [97, "    /**"], [98, "     * Constructor."], [99, "     *"], [100, "     * @param port"], [101, "     *        to listen."], [102, "     * @param logEventInput"], [103, "     *        the log even input"], [104, "     * @throws IOException"], [105, "     *         if an I/O error occurs when opening the socket."], [106, "     */"], [107, "    public TcpSocketServer(final int port, final LogEventBridge<T> logEventInput) throws IOException {"], [108, "        this(port, logEventInput, new ServerSocket(port));"], [109, "    }"], [110, ""], [111, "    /**"], [112, "     * Constructor."], [113, "     *"], [114, "     * @param port"], [115, "     *        to listen."], [116, "     * @param logEventInput"], [117, "     *        the log even input"], [118, "     * @param serverSocket"], [119, "     *        the socket server"], [120, "     * @throws IOException"], [121, "     *         if an I/O error occurs when opening the socket."], [122, "     */"], [123, "    public TcpSocketServer(final int port, final LogEventBridge<T> logEventInput, final ServerSocket serverSocket)"], [124, "            throws IOException {"], [125, "        super(port, logEventInput);"], [126, "        this.serverSocket = serverSocket;"], [127, "    }"], [128, ""], [175, "     * Main startup for the server."], [183, "        if (args.length < 1 || args.length > 2) {"], [184, "            System.err.println(\"Incorrect number of arguments: \" + args.length);"], [185, "            printUsage();"], [186, "            return;"], [187, "        }"], [188, "        final int port = Integer.parseInt(args[0]);"], [189, "        if (port <= 0 || port >= MAX_PORT) {"], [190, "            System.err.println(\"Invalid port number: \" + port);"], [191, "            printUsage();"], [194, "        if (args.length == 2 && args[1].length() > 0) {"], [195, "            ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(args[1]));"], [197, "        final TcpSocketServer<ObjectInputStream> socketServer = TcpSocketServer.createSerializedSocketServer(port);"], [200, "        final Charset enc = Charset.defaultCharset();"], [201, "        final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in, enc));"], [202, "        while (true) {"], [203, "            final String line = reader.readLine();"], [204, "            if (line == null || line.equalsIgnoreCase(\"Quit\") || line.equalsIgnoreCase(\"Stop\")"], [205, "                    || line.equalsIgnoreCase(\"Exit\")) {"], [206, "                socketServer.shutdown();"], [207, "                serverThread.join();"], [208, "                break;"], [213, "    private static void printUsage() {"], [214, "        System.out.println(\"Usage: ServerSocket port configFilePath\");"], [229, "                logger.debug(\"Socket accept()...\");"]]}, "num_lines_added": 118, "num_lines_removed": 62}