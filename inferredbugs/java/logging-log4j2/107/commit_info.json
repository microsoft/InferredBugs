{"hash": "50f05baea0aa488c01dc439efeb85e604435c38e", "message": "Refactor JeroMqAppender to use a manager.", "file_num_lines": 129, "diff_parsed": {"added": [[60, "    private final JeroMqManager manager;"], [73, "        this.manager = JeroMqManager.getJeroMqManager(name, affinity, backlog, delayAttachOnConnect, identity, ipv4Only,"], [74, "            linger, maxMsgSize, rcvHwm, receiveBufferSize, receiveTimeOut, reconnectIVL, reconnectIVLMax,"], [75, "            sendBufferSize, sendTimeOut, sndHWM, tcpKeepAlive, tcpKeepAliveCount, tcpKeepAliveIdle,"], [76, "            tcpKeepAliveInterval, xpubVerbose, endpoints);"], [131, "        LOGGER.debug(\"Creating JeroMqAppender with name={}, filter={}, layout={}, ignoreExceptions={}, endpoints={}\","], [143, "        if (manager.send(getLayout().toByteArray(event))) {"], [147, "            LOGGER.error(\"Appender {} could not send message {} to JeroMQ {}\", getName(), sendRcFalse, formattedMessage);"], [151, "    @Override"], [152, "    public void stop() {"], [153, "        manager.release();"], [154, "        super.stop();"], [155, "    }"], [156, ""], [174, "        return \"JeroMqAppender{\" +"], [175, "            \"name=\" + getName() +"], [176, "            \", state=\" + getState() +"], [177, "            \", manager=\" + manager +"], [178, "            \", endpoints=\" + endpoints +"], [179, "            '}';"]], "deleted": [[22, "import java.util.Arrays;"], [25, "import org.apache.logging.log4j.LogManager;"], [26, "import org.apache.logging.log4j.Logger;"], [40, "import org.apache.logging.log4j.core.util.ShutdownCallbackRegistry;"], [41, "import org.apache.logging.log4j.status.StatusLogger;"], [42, "import org.apache.logging.log4j.util.PropertiesUtil;"], [44, "import org.zeromq.ZMQ;"], [45, "import org.zeromq.ZMQ.Socket;"], [60, "    /**"], [61, "     * System property to enable shutdown hook."], [62, "     */"], [63, "    static final String SYS_PROPERTY_ENABLE_SHUTDOWN_HOOK = \"log4j.jeromq.enableShutdownHook\";"], [64, ""], [65, "    /**"], [66, "     * System property to control JeroMQ I/O thread count."], [67, "     */"], [68, "    static final String SYS_PROPERTY_IO_THREADS = \"log4j.jeromq.ioThreads\";"], [69, ""], [70, "    // Per ZMQ docs, there should usually only be one ZMQ context per process."], [71, "    private static volatile ZMQ.Context context;"], [72, ""], [81, "    private static Logger logger;"], [82, ""], [83, "    // ZMQ sockets are not thread safe."], [84, "    private static ZMQ.Socket publisher;"], [85, ""], [86, "    private static final String SIMPLE_NAME = JeroMqAppender.class.getSimpleName();"], [87, ""], [88, "    static {"], [89, "        logger = StatusLogger.getLogger();"], [90, "        final PropertiesUtil managerProps = PropertiesUtil.getProperties();"], [91, "        final int ioThreads = managerProps.getIntegerProperty(SYS_PROPERTY_IO_THREADS, 1);"], [92, "        final boolean enableShutdownHook = managerProps.getBooleanProperty(SYS_PROPERTY_ENABLE_SHUTDOWN_HOOK, true);"], [93, "        final String simpleName = SIMPLE_NAME;"], [94, "        logger.trace(\"{} using ZMQ version {}\", simpleName, ZMQ.getVersionString());"], [95, "        logger.trace(\"{} creating ZMQ context with ioThreads={}\", simpleName, ioThreads);"], [96, "        context = ZMQ.context(ioThreads);"], [97, "        logger.trace(\"{} created ZMQ context {}\", simpleName, context);"], [98, "        if (enableShutdownHook) {"], [99, "            logger.trace(\"{} adding shutdown hook\", simpleName);"], [100, "            ((ShutdownCallbackRegistry) LogManager.getFactory()).addShutdownCallback(new Runnable() {"], [101, "                @Override"], [102, "                public void run() {"], [103, "                    shutdown();"], [104, "                }"], [105, "            });"], [106, "        }"], [107, "    }"], [108, ""], [109, "    private final long affinity;"], [110, "    private final long backlog;"], [111, "    private final boolean delayAttachOnConnect;"], [113, "    private final byte[] identity;"], [114, "    private final int ioThreads = 1;"], [115, "    private final boolean ipv4Only;"], [116, "    private final long linger;"], [117, "    private final long maxMsgSize;"], [118, "    private final long rcvHwm;"], [119, "    private final long receiveBufferSize;"], [120, "    private final int receiveTimeOut;"], [121, "    private final long reconnectIVL;"], [122, "    private final long reconnectIVLMax;"], [123, "    private final long sendBufferSize;"], [126, "    private final int sendTimeOut;"], [127, "    private final long sndHwm;"], [128, "    private final int tcpKeepAlive;"], [129, "    private final long tcpKeepAliveCount;"], [130, "    private final long tcpKeepAliveIdle;"], [131, "    private final long tcpKeepAliveInterval;"], [132, "    private final boolean xpubVerbose;"], [143, "        this.affinity = affinity;"], [144, "        this.backlog = backlog;"], [145, "        this.delayAttachOnConnect = delayAttachOnConnect;"], [146, "        this.identity = identity;"], [147, "        this.ipv4Only = ipv4Only;"], [148, "        this.linger = linger;"], [149, "        this.maxMsgSize = maxMsgSize;"], [150, "        this.rcvHwm = rcvHwm;"], [151, "        this.receiveBufferSize = receiveBufferSize;"], [152, "        this.receiveTimeOut = receiveTimeOut;"], [153, "        this.reconnectIVL = reconnectIVL;"], [154, "        this.reconnectIVLMax = reconnectIVLMax;"], [155, "        this.sendBufferSize = sendBufferSize;"], [156, "        this.sendTimeOut = sendTimeOut;"], [157, "        this.sndHwm = sndHWM;"], [158, "        this.tcpKeepAlive = tcpKeepAlive;"], [159, "        this.tcpKeepAliveCount = tcpKeepAliveCount;"], [160, "        this.tcpKeepAliveIdle = tcpKeepAliveIdle;"], [161, "        this.tcpKeepAliveInterval = tcpKeepAliveInterval;"], [162, "        this.xpubVerbose = xpubVerbose;"], [216, "        logger.debug(\"Creating JeroMqAppender with name={}, filter={}, layout={}, ignoreExceptions={}, endpoints={}\","], [224, "    static ZMQ.Context getContext() {"], [225, "        return context;"], [226, "    }"], [227, ""], [228, "    private static ZMQ.Socket getPublisher() {"], [229, "        return publisher;"], [230, "    }"], [231, ""], [232, "    private static ZMQ.Socket newPublisher() {"], [233, "        logger.trace(\"{} creating a new ZMQ PUB socket with context {}\", SIMPLE_NAME, context);"], [234, "        final Socket socketPub = context.socket(ZMQ.PUB);"], [235, "        logger.trace(\"{} created new ZMQ PUB socket {}\", SIMPLE_NAME, socketPub);"], [236, "        return socketPub;"], [237, "    }"], [238, ""], [239, "    static void shutdown() {"], [240, "        if (context != null) {"], [241, "            logger.trace(\"{} terminating JeroMQ context {}\", SIMPLE_NAME, context);"], [242, "            context.term();"], [243, "            context = null;"], [244, "        }"], [245, "    }"], [246, ""], [251, "        if (getPublisher().send(getLayout().toByteArray(event))) {"], [255, "            logger.error(\"Appender {} could not send message {} to JeroMQ {}\", getName(), sendRcFalse, formattedMessage);"], [275, "    public synchronized void start() {"], [276, "        super.start();"], [277, "        publisher = newPublisher();"], [278, "        final String name = getName();"], [279, "        final String prefix = \"JeroMQ Appender\";"], [280, "        logger.debug(\"Starting {} {} using ZMQ version {}\", prefix, name, ZMQ.getVersionString());"], [281, "        logger.debug(\"{} {} context {} with ioThreads={}\", prefix, name, context, ioThreads);"], [282, "        //"], [283, "        final ZMQ.Socket socketPub = getPublisher();"], [284, "        logger.trace(\"{} {} setting {} publisher properties for instance {}\", prefix, name, socketPub.getClass()"], [285, "                .getName(), socketPub);"], [286, "        logger.trace(\"{} {} publisher setAffinity({})\", prefix, name, affinity);"], [287, "        socketPub.setAffinity(affinity);"], [288, "        logger.trace(\"{} {} publisher setBacklog({})\", prefix, name, backlog);"], [289, "        socketPub.setBacklog(backlog);"], [290, "        logger.trace(\"{} {} publisher setDelayAttachOnConnect({})\", prefix, name, delayAttachOnConnect);"], [291, "        socketPub.setDelayAttachOnConnect(delayAttachOnConnect);"], [292, "        if (identity != null) {"], [293, "            logger.trace(\"{} {} publisher setIdentity({})\", prefix, name, Arrays.toString(identity));"], [294, "            socketPub.setIdentity(identity);"], [295, "        }"], [296, "        logger.trace(\"{} {} publisher setIPv4Only({})\", prefix, name, ipv4Only);"], [297, "        socketPub.setIPv4Only(ipv4Only);"], [298, "        logger.trace(\"{} {} publisher setLinger({})\", prefix, name, linger);"], [299, "        socketPub.setLinger(linger);"], [300, "        logger.trace(\"{} {} publisher setMaxMsgSize({})\", prefix, name, maxMsgSize);"], [301, "        socketPub.setMaxMsgSize(maxMsgSize);"], [302, "        logger.trace(\"{} {} publisher setRcvHWM({})\", prefix, name, rcvHwm);"], [303, "        socketPub.setRcvHWM(rcvHwm);"], [304, "        logger.trace(\"{} {} publisher setReceiveBufferSize({})\", prefix, name, receiveBufferSize);"], [305, "        socketPub.setReceiveBufferSize(receiveBufferSize);"], [306, "        logger.trace(\"{} {} publisher setReceiveTimeOut({})\", prefix, name, receiveTimeOut);"], [307, "        socketPub.setReceiveTimeOut(receiveTimeOut);"], [308, "        logger.trace(\"{} {} publisher setReconnectIVL({})\", prefix, name, reconnectIVL);"], [309, "        socketPub.setReconnectIVL(reconnectIVL);"], [310, "        logger.trace(\"{} {} publisher setReconnectIVLMax({})\", prefix, name, reconnectIVLMax);"], [311, "        socketPub.setReconnectIVLMax(reconnectIVLMax);"], [312, "        logger.trace(\"{} {} publisher setSendBufferSize({})\", prefix, name, sendBufferSize);"], [313, "        socketPub.setSendBufferSize(sendBufferSize);"], [314, "        logger.trace(\"{} {} publisher setSendTimeOut({})\", prefix, name, sendTimeOut);"], [315, "        socketPub.setSendTimeOut(sendTimeOut);"], [316, "        logger.trace(\"{} {} publisher setSndHWM({})\", prefix, name, sndHwm);"], [317, "        socketPub.setSndHWM(sndHwm);"], [318, "        logger.trace(\"{} {} publisher setTCPKeepAlive({})\", prefix, name, tcpKeepAlive);"], [319, "        socketPub.setTCPKeepAlive(tcpKeepAlive);"], [320, "        logger.trace(\"{} {} publisher setTCPKeepAliveCount({})\", prefix, name, tcpKeepAliveCount);"], [321, "        socketPub.setTCPKeepAliveCount(tcpKeepAliveCount);"], [322, "        logger.trace(\"{} {} publisher setTCPKeepAliveIdle({})\", prefix, name, tcpKeepAliveIdle);"], [323, "        socketPub.setTCPKeepAliveIdle(tcpKeepAliveIdle);"], [324, "        logger.trace(\"{} {} publisher setTCPKeepAliveInterval({})\", prefix, name, tcpKeepAliveInterval);"], [325, "        socketPub.setTCPKeepAliveInterval(tcpKeepAliveInterval);"], [326, "        logger.trace(\"{} {} publisher setXpubVerbose({})\", prefix, name, xpubVerbose);"], [327, "        socketPub.setXpubVerbose(xpubVerbose);"], [328, "        //"], [329, "        if (logger.isDebugEnabled()) {"], [330, "            logger.debug("], [331, "                    \"Created JeroMQ {} publisher {} type {}, affinity={}, backlog={}, delayAttachOnConnect={}, events={}, IPv4Only={}, linger={}, maxMsgSize={}, multicastHops={}, \""], [332, "                            + \"rate={}, rcvHWM={}, receiveBufferSize={}, receiveTimeOut={}, reconnectIVL={}, reconnectIVLMax={}, recoveryInterval={}, sendBufferSize={}, \""], [333, "                            + \"sendTimeOut={}, sndHWM={}, TCPKeepAlive={}, TCPKeepAliveCount={}, TCPKeepAliveIdle={}, TCPKeepAliveInterval={}, TCPKeepAliveSetting={}\","], [334, "                    name, socketPub, socketPub.getType(), socketPub.getAffinity(), socketPub.getBacklog(),"], [335, "                    socketPub.getDelayAttachOnConnect(), socketPub.getEvents(), socketPub.getIPv4Only(),"], [336, "                    socketPub.getLinger(), socketPub.getMaxMsgSize(), socketPub.getMulticastHops(),"], [337, "                    socketPub.getRate(), socketPub.getRcvHWM(), socketPub.getReceiveBufferSize(),"], [338, "                    socketPub.getReceiveTimeOut(), socketPub.getReconnectIVL(), socketPub.getReconnectIVLMax(),"], [339, "                    socketPub.getRecoveryInterval(), socketPub.getSendBufferSize(), socketPub.getSendTimeOut(),"], [340, "                    socketPub.getSndHWM(), socketPub.getTCPKeepAlive(), socketPub.getTCPKeepAliveCount(),"], [341, "                    socketPub.getTCPKeepAliveIdle(), socketPub.getTCPKeepAliveInterval(),"], [342, "                    socketPub.getTCPKeepAliveSetting());"], [343, "        }"], [344, "        for (final String endpoint : endpoints) {"], [345, "            logger.debug(\"Binding {} appender {} to endpoint {}\", SIMPLE_NAME, name, endpoint);"], [346, "            socketPub.bind(endpoint);"], [347, "        }"], [348, "    }"], [349, ""], [350, "    @Override"], [351, "    public synchronized void stop() {"], [352, "        super.stop();"], [353, "        final Socket socketPub = getPublisher();"], [354, "        if (socketPub != null) {"], [355, "            logger.debug(\"Closing {} appender {} publisher {}\", SIMPLE_NAME, getName(), socketPub);"], [356, "            socketPub.close();"], [357, "            publisher = null;"], [358, "        }"], [359, "    }"], [360, ""], [361, "    @Override"], [363, "        return \"JeroMqAppender [context=\" + context + \", publisher=\" + publisher + \", endpoints=\" + endpoints + \"]\";"], [365, ""]]}, "num_lines_added": 20, "num_lines_removed": 205}