{"hash": "2d54d35570b5138ce5fc2d3dd3c5812be6af86eb", "message": "0.3", "file_num_lines": 111, "diff_parsed": {"added": [[32, ""], [130, "      //update"], [131, "      KcpOnUdp temp = null;"], [132, "      for (KcpOnUdp ku : this.kcps.values())"], [133, "      {"], [134, "        ku.update();"], [135, "        if (ku.isClosed())"], [137, "          temp = ku;"], [140, "      if (temp != null)//\u5220\u6389\u8fc7\u65f6\u7684kcp"], [141, "      {"], [142, "        this.kcps.remove((InetSocketAddress) temp.getKcp().getUser());"], [143, "      }"], [144, "      try"], [145, "      {"], [146, "        Thread.sleep(this.interval);"], [147, "      } catch (InterruptedException ex)"], [148, "      {"], [149, "      }"]], "deleted": [[8, "import java.util.Comparator;"], [11, "import java.util.PriorityQueue;"], [12, "import java.util.Queue;"], [14, "import java.util.logging.Level;"], [15, "import java.util.logging.Logger;"], [37, ""], [38, ""], [39, "  private Object wakeup = new Object();"], [40, "  public void threadNotify() {"], [41, "      synchronized(wakeup) {"], [42, "           this.wakeup.notify();"], [43, "      }"], [44, "  }"], [45, "  private Queue<KcpOnUdp> pqueue;"], [46, "  private Comparator<KcpOnUdp> cmp = new Comparator<KcpOnUdp>() {"], [47, "      @Override"], [48, "      public int compare(KcpOnUdp e1, KcpOnUdp e2) {"], [49, "        return (int) (e2.getTimeout() - e1.getTimeout());"], [50, "      }"], [51, "    };"], [105, "    pqueue = new PriorityQueue<>(10, cmp);"], [147, "          pqueue.add(ku);"], [151, ""], [152, "      //\u9009\u51fa\u7b2c\u4e00\u4e2akcp\u66f4\u65b0\u72b6\u6001"], [153, "      KcpOnUdp first = pqueue.poll();"], [154, "      if(first != null && first.getTimeout() < System.currentTimeMillis()) {"], [155, "          first.update();"], [156, "          if(!first.isClosed()) {"], [157, "              pqueue.add(first);"], [158, "          } else {"], [159, "              this.kcps.remove((InetSocketAddress) first.getKcp().getUser());"], [160, "          }"], [161, "      }"], [162, ""], [163, "      //\u6bcf30s\uff0c\u66f4\u65b0\u4e00\u904d\u6240\u6709\u7684kcp\u72b6\u6001"], [164, "      if(System.currentTimeMillis()%(1000*30) == 0) {"], [165, "        //update"], [166, "        KcpOnUdp temp = null;"], [167, "        for (KcpOnUdp ku : this.kcps.values())"], [169, "          ku.update();"], [170, "          if (ku.isClosed()) {//\u5220\u6389\u8fc7\u65f6\u7684kcp"], [171, "            this.kcps.remove((InetSocketAddress) temp.getKcp().getUser());"], [172, "            pqueue.remove(ku);"], [173, "          }"], [176, ""], [177, "    //\u7b49\u5f85"], [178, "    try {"], [179, "        synchronized(wakeup){"], [180, "          wakeup.wait(5*60*1000);"], [181, "        }"], [182, "    } catch (InterruptedException ex) {"], [183, "        Logger.getLogger(KcpThread.class.getName()).log(Level.SEVERE, null, ex);"], [184, "    }"], [185, ""], [198, "    this.threadNotify();"]]}, "num_lines_added": 18, "num_lines_removed": 55}