{"hash": "1f641e8214b7aef5ddc2878eaaa20a833d38ba2e", "message": "Skip BuildConfig generation by checking for transitive dep", "file_num_lines": 671, "diff_parsed": {"added": [[822, "        // Generate the BuildConfig for any APKLIB and AAR dependencies."], [823, "        // Need to generate for AAR, because some old AARs like ActionBarSherlock do not have BuildConfig (or R)"], [824, "        for ( Artifact artifact : getTransitiveDependencyArtifacts( APKLIB, AAR ) )"], [825, "        {"], [826, "            if ( skipBuildConfigGeneration( artifact ) )"], [827, "            {"], [828, "                continue;"], [829, "            }"], [830, ""], [831, "            final File manifest = new File( getUnpackedLibFolder( artifact ), \"AndroidManifest.xml\" );"], [832, "            final String depPackageName = extractPackageNameFromAndroidManifest( manifest );"], [833, ""], [834, "            generateBuildConfigForPackage( depPackageName );"], [835, "        }"], [836, "    }"], [837, ""], [838, "    private boolean skipBuildConfigGeneration( Artifact artifact ) throws MojoExecutionException"], [839, "    {"], [840, "        if ( artifact.getType().equals( AAR ) )"], [842, "            if ( isBuildConfigPresent( artifact ) )"], [844, "                return true;"], [845, "            }"], [847, "            Set< Artifact > transitiveDep = getArtifactResolverHelper()"], [848, "                    .getFilteredArtifacts( project.getArtifacts(), AAR );"], [849, ""], [850, "            for ( Artifact transitiveArtifact : transitiveDep )"], [851, "            {"], [852, "                if ( isBuildConfigPresent( transitiveArtifact ) )"], [854, "                    return true;"], [856, "            }"], [857, "        }"], [858, "        return false;"], [859, "    }"], [861, "    private boolean isBuildConfigPresent( Artifact artifact ) throws MojoExecutionException"], [862, "    {"], [863, "        try"], [864, "        {"], [865, "            File manifest = new File( getUnpackedLibFolder( artifact ), \"AndroidManifest.xml\" );"], [866, "            String depPackageName = extractPackageNameFromAndroidManifest( manifest );"], [867, ""], [868, "            JarFile jar = new JarFile( getUnpackedAarClassesJar( artifact ) );"], [869, "            JarEntry entry = jar.getJarEntry( depPackageName.replace( '.', '/' ) + \"/BuildConfig.class\" );"], [870, ""], [871, "            if ( entry != null )"], [872, "            {"], [873, "                getLog().info( \"Skip BuildConfig.java generation for \""], [874, "                        + artifact.getGroupId() + \" \" + artifact.getArtifactId() );"], [875, "                return true;"], [877, "            return false;"]], "deleted": [[822, "        try"], [824, "            // Generate the BuildConfig for any APKLIB and AAR dependencies."], [825, "            // Need to generate for AAR, because some old AARs like ActionBarSherlock do not have BuildConfig (or R)"], [826, "            for ( Artifact artifact : getTransitiveDependencyArtifacts( APKLIB, AAR ) )"], [828, "                final File manifest = new File( getUnpackedLibFolder( artifact ), \"AndroidManifest.xml\" );"], [829, "                final String depPackageName = extractPackageNameFromAndroidManifest( manifest );"], [831, "                if ( artifact.getType().equals( AAR ) )"], [833, "                    final JarFile jar = new JarFile( getUnpackedAarClassesJar( artifact ) );"], [834, "                    final JarEntry entry = jar.getJarEntry( depPackageName.replace( '.', '/' ) + \"/BuildConfig.class\" );"], [835, ""], [836, "                    if ( entry != null )"], [837, "                    {"], [838, "                        getLog().info( \"Skip BuildConfig.java generation for \""], [839, "                                + artifact.getGroupId() + \" \" + artifact.getArtifactId() );"], [840, "                        continue;"], [841, "                    }"], [844, "                generateBuildConfigForPackage( depPackageName );"]]}, "num_lines_added": 49, "num_lines_removed": 17}