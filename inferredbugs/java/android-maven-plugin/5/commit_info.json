{"hash": "35d8edc9c01d21c8d5f4add2992454834316336c", "message": "Upgraded AndroidSdk to use path and platform utilities from sdklib\n\nSearching for paths of tools and locating the installed Android platforms now done using sdklib. This should hopefully make the plugin more resilient to directory structure changes like we had in tools 22.", "file_num_lines": 273, "diff_parsed": {"added": [[18, "import com.android.SdkConstants;"], [19, "import com.android.sdklib.BuildToolInfo;"], [20, "import com.android.sdklib.IAndroidTarget;"], [21, "import com.android.sdklib.SdkManager;"], [22, "import com.android.utils.NullLogger;"], [23, "import org.apache.maven.plugin.MojoExecutionException;"], [24, ""], [59, "    private File platformToolsPath;"], [60, "    private File toolsPath;"], [62, "    private IAndroidTarget androidTarget;"], [63, "    private SdkManager sdkManager;"], [64, "    private int sdkMajorVersion;"], [69, ""], [70, "        System.out.println( \"AndroidSdk \" + sdkPath + \",\" + platformOrApiLevel );"], [71, ""], [72, "        if ( sdkPath != null )"], [73, "        {"], [74, "            sdkManager = SdkManager.createManager( sdkPath.getPath(), new NullLogger() );"], [75, "            platformToolsPath = new File( sdkPath, SdkConstants.FD_PLATFORM_TOOLS );"], [76, "            toolsPath = new File( sdkPath, SdkConstants.FD_TOOLS );"], [77, ""], [78, "            if ( sdkManager == null )"], [79, "            {"], [80, "                throw invalidSdkException( sdkPath, platformOrApiLevel );"], [81, "            }"], [82, "        }"], [87, "            androidTarget = null;"], [92, "            androidTarget = findPlatformByNameOrApiLevel( platformOrApiLevel );"], [93, "            if ( androidTarget == null )"], [95, "                throw invalidSdkException( sdkPath, platformOrApiLevel );"], [100, "    private InvalidSdkException invalidSdkException( File sdkPath, String platformOrApiLevel )"], [101, "    {"], [102, "        throw new InvalidSdkException( \"Invalid SDK: Platform/API level \" + platformOrApiLevel"], [103, "                + \" not available. This command should give you all you need:\\n\" + sdkPath.getAbsolutePath()"], [104, "                + File.separator + \"tools\" + File.separator + \"android update sdk --no-ui --obsolete --force\" );"], [105, "    }"], [106, ""], [107, "    private IAndroidTarget findPlatformByNameOrApiLevel( String platformOrApiLevel )"], [109, "        // try find by api level first"], [110, "        IAndroidTarget target = sdkManager.getTargetFromHashString("], [111, "                IAndroidTarget.PLATFORM_HASH_PREFIX + platformOrApiLevel );"], [112, "        if ( target != null )"], [114, "            return target;"], [115, "        }"], [116, "        System.out.println( \"Failed to find target by hash: \""], [117, "                + IAndroidTarget.PLATFORM_HASH_PREFIX + platformOrApiLevel );"], [118, ""], [119, ""], [120, "        // fallback to searching for platform on standard Android platforms (isPlatform() is true)"], [121, "        for ( IAndroidTarget t: sdkManager.getTargets() )"], [122, "        {"], [123, "            System.out.println( \"Checking \" + t.getVersionName() + \" against \" + platformOrApiLevel );"], [124, "            if ( t.isPlatform() && t.getVersionName().equals( platformOrApiLevel ) )"], [126, "                return t;"], [132, ""], [133, ""], [140, "        LAYOUT_1_5, LAYOUT_2_3;"], [147, ""], [148, "        if ( platformToolsPath.exists() && platformToolsPath.isDirectory() )"], [176, "     * Get the aapt tool path."], [177, "     *"], [178, "     * @return"], [180, "    public String getAaptPath()"], [182, "        return getPathForBuildTool( BuildToolInfo.PathId.AAPT );"], [183, "    }"], [185, "    /**"], [186, "     * Get the aild tool path"], [187, "     * @return"], [188, "     */"], [189, "    public String getAidlPath()"], [190, "    {"], [191, "        return getPathForBuildTool( BuildToolInfo.PathId.AIDL );"], [192, "    }"], [194, "    /**"], [195, "     * Get the path for dx.jar"], [196, "     * @return"], [197, "     */"], [198, "    public String getDxJarPath()"], [199, "    {"], [200, "        return getPathForBuildTool( BuildToolInfo.PathId.DX_JAR );"], [205, "     *"], [210, "        return getPathForPlatformTool( SdkConstants.FN_ADB );"], [215, "     *"], [220, "        return getPathForPlatformTool( SdkConstants.FN_ZIPALIGN );"], [230, "        return getPathForTool( \"lint\" + ext( \".bat\", \"\" ) );"], [240, "        return getPathForTool( \"monkeyrunner\" + ext( \".bat\", \"\" ) );"], [241, "    }"], [242, ""], [243, "    /**"], [244, "     * Get the apkbuilder path."], [245, "     *"], [246, "     * @return"], [247, "     */"], [248, "    public String getApkBuilderPath()"], [249, "    {"], [250, "        return getPathForTool( \"apkbuilder\" + ext( \".bat\", \"\" ) );"], [251, "    }"], [252, ""], [253, "    /**"], [254, "     * Get the android tool path."], [255, "     *"], [256, "     * @return"], [257, "     */"], [258, "    public String getAndroidPath()"], [259, "    {"], [260, "        return getPathForTool( SdkConstants.androidCmdName() );"], [261, "    }"], [262, ""], [263, "    /**"], [264, "     * Get the path to the tools directory."], [265, "     * @return"], [266, "     */"], [267, "    public File getToolsPath()"], [268, "    {"], [269, "        return toolsPath;"], [270, "    }"], [271, ""], [272, "    private String getPathForBuildTool( BuildToolInfo.PathId pathId )"], [273, "    {"], [274, "        if ( androidTarget != null )"], [275, "        {"], [276, "            return androidTarget.getBuildToolInfo().getPath( pathId );"], [277, "        }"], [278, "        // if no valid target is defined used the latest"], [279, "        return sdkManager.getLatestBuildTool().getPath( pathId );"], [280, "    }"], [281, ""], [282, "    private String getPathForPlatformTool( String tool )"], [283, "    {"], [284, "        return new File( platformToolsPath, tool ).getAbsolutePath();"], [285, "    }"], [286, ""], [287, "    private String getPathForTool( String tool )"], [288, "    {"], [289, "        return new File( toolsPath, tool ).getAbsolutePath();"], [290, "    }"], [291, ""], [292, "    private static String ext( String windowsExtension, String nonWindowsExtension )"], [293, "    {"], [294, "        if ( SdkConstants.currentPlatform() == SdkConstants.PLATFORM_WINDOWS )"], [295, "        {"], [296, "            return windowsExtension;"], [297, "        }"], [298, "        else"], [299, "        {"], [300, "            return nonWindowsExtension;"], [301, "        }"], [311, "        return androidTarget.getPath( IAndroidTarget.ANDROID_AIDL );"], [323, "        return new File( androidTarget.getPath( IAndroidTarget.ANDROID_JAR ) );"], [362, "     * \"latest\" version."], [372, "        if ( androidTarget == null )"], [374, "            IAndroidTarget latestTarget = null;"], [375, "            for ( IAndroidTarget target:  sdkManager.getTargets() )"], [376, "            {"], [377, "                if ( target.isPlatform() )"], [378, "                {"], [379, "                    if ( latestTarget == null"], [380, "                            || target.getVersion().getApiLevel() > latestTarget.getVersion().getApiLevel() )"], [381, "                    {"], [382, "                        latestTarget = target;"], [383, "                    }"], [384, "                }"], [385, "            }"], [386, "            platformDirectory = new File ( latestTarget.getLocation() );"], [390, "            platformDirectory = new File( androidTarget.getLocation() );"]], "deleted": [[21, "import java.util.ArrayList;"], [22, "import java.util.Arrays;"], [23, "import java.util.HashSet;"], [25, "import java.util.Set;"], [26, ""], [27, "import org.apache.maven.plugin.MojoExecutionException;"], [43, "     * property name for platform version in sdk source.properties file."], [44, "     */"], [45, "    private static final String PLATFORM_VERSION_PROPERTY = \"Platform.Version\";"], [46, "    /**"], [47, "     * property name for api level version in sdk source.properties file."], [48, "     */"], [49, "    private static final String API_LEVEL_PROPERTY = \"AndroidVersion.ApiLevel\";"], [50, "    /**"], [60, "    /**"], [61, "     * folder name for the sdk sub folder that contains the platform tools."], [62, "     */"], [63, "    private static final String PLATFORM_TOOLS_FOLDER_NAME = \"platform-tools\";"], [64, ""], [65, "    /**"], [66, "     * folder name for the sdk sub folder that contains the build tools."], [67, "     */"], [68, "    private static final String BUILD_TOOLS_FOLDER_NAME = \"build-tools\";"], [69, ""], [75, "    private static final class Platform"], [76, "    {"], [77, "        final String name;"], [78, "        final String apiLevel;"], [79, "        final String path;"], [80, ""], [81, "        public Platform( String name, String apiLevel, String path )"], [82, "        {"], [83, "            super();"], [84, "            this.name = name;"], [85, "            this.apiLevel = apiLevel;"], [86, "            this.path = path;"], [87, "        }"], [88, "    }"], [89, ""], [91, "    private final Platform platform;"], [92, "    private int sdkMajorVersion;"], [94, "    private Set< Platform > availablePlatforms;"], [99, "        findAvailablePlatforms();"], [104, "            platform = null;"], [109, "            platform = findPlatformByNameOrApiLevel( platformOrApiLevel );"], [110, "            if ( platform == null )"], [112, "                throw new InvalidSdkException( \"Invalid SDK: Platform/API level \" + platformOrApiLevel"], [113, "                        + \" not available. This command should give you all you need:\\n\" + sdkPath.getAbsolutePath()"], [114, "                        + File.separator + \"tools\" + File.separator + \"android update sdk --no-ui --obsolete --force\" );"], [119, "    private Platform findPlatformByNameOrApiLevel( String platformOrApiLevel )"], [121, "        for ( Platform p : availablePlatforms )"], [123, "            if ( p.name.equals( platformOrApiLevel ) || p.apiLevel.equals( platformOrApiLevel ) )"], [125, "                return p;"], [137, "        LAYOUT_1_5, LAYOUT_2_3"], [139, ""], [145, "        final File platformTools = new File( sdkPath, PLATFORM_TOOLS_FOLDER_NAME );"], [146, "        if ( platformTools.exists() && platformTools.isDirectory() )"], [174, "     * Returns the complete path for a tool, based on this SDK."], [175, "     *"], [176, "     * @param tool"], [177, "     *            which tool, for example <code>adb</code> or <code>dx.jar</code>."], [178, "     * @return the complete path as a <code>String</code>, including the tool's filename."], [180, "    public String getPathForTool( String tool )"], [183, "        String[] possiblePaths ="], [184, "        { sdkPath + \"/\" + PLATFORM_TOOLS_FOLDER_NAME + \"/\" + tool,"], [185, "                sdkPath + \"/\" + PLATFORM_TOOLS_FOLDER_NAME + \"/\" + tool + \".exe\","], [186, "                sdkPath + \"/\" + PLATFORM_TOOLS_FOLDER_NAME + \"/\" + tool + \".bat\","], [187, "                sdkPath + \"/\" + PLATFORM_TOOLS_FOLDER_NAME + \"/lib/\" + tool, getPlatform() + \"/tools/\" + tool,"], [188, "                getPlatform() + \"/tools/\" + tool + \".exe\", getPlatform() + \"/tools/\" + tool + \".bat\","], [189, "                getPlatform() + \"/tools/lib/\" + tool, sdkPath + \"/tools/\" + tool, sdkPath + \"/tools/\" + tool + \".exe\","], [190, "                sdkPath + \"/tools/\" + tool + \".bat\", sdkPath + \"/tools/lib/\" + tool,"], [191, "                sdkPath + \"/\" + BUILD_TOOLS_FOLDER_NAME + \"/17.0.0/\" + tool,"], [192, "                sdkPath + \"/\" + BUILD_TOOLS_FOLDER_NAME + \"/17.0.0/\" + tool + \".bat\","], [193, "                sdkPath + \"/\" + BUILD_TOOLS_FOLDER_NAME + \"/17.0.0/\" + tool + \".exe\","], [194, "                sdkPath + \"/\" + BUILD_TOOLS_FOLDER_NAME + \"/17.0.0/lib/\" + tool };"], [195, ""], [196, "        for ( String possiblePath : possiblePaths )"], [197, "        {"], [198, "            File file = new File( possiblePath );"], [199, "            if ( file.exists() && !file.isDirectory() )"], [200, "            {"], [201, "                return file.getAbsolutePath();"], [202, "            }"], [203, "        }"], [205, "        throw new InvalidSdkException( \"Could not find tool '\" + tool + \"'. \" + PARAMETER_MESSAGE );"], [210, "     *"], [215, "        return getPathForTool( \"adb\" );"], [220, "     *"], [225, "        return getPathForTool( \"zipalign\" );"], [235, "        return getPathForTool( \"lint\" );"], [245, "        return getPathForTool( \"monkeyrunner\" );"], [255, "        final Layout layout = getLayout();"], [256, "        switch ( layout )"], [257, "        {"], [258, "            case LAYOUT_1_5: // intentional fall-through"], [259, "            case LAYOUT_2_3:"], [260, "                return getPlatform() + \"/framework.aidl\";"], [261, "            default:"], [262, "                throw new InvalidSdkException( \"Unsupported layout \\\"\" + layout + \"\\\"! \" + PARAMETER_MESSAGE );"], [263, "        }"], [275, "        final Layout layout = getLayout();"], [276, "        switch ( layout )"], [277, "        {"], [278, "            case LAYOUT_1_5: // intentional fall-through"], [279, "            case LAYOUT_2_3:"], [280, "                return new File( getPlatform() + \"/android.jar\" );"], [281, "            default:"], [282, "                throw new MojoExecutionException( \"Invalid Layout \\\"\" + getLayout() + \"\\\"! \" + PARAMETER_MESSAGE );"], [283, "        }"], [322, "     * \"latest\" version. This is actually broken as it performs a lexicographic sort rather than sorting the versions in"], [323, "     * proper order."], [333, "        if ( platform == null )"], [335, "            final File[] platformDirectories = platformsDirectory.listFiles();"], [336, "            Arrays.sort( platformDirectories );"], [337, "            platformDirectory = platformDirectories[ platformDirectories.length - 1 ];"], [341, "            platformDirectory = new File( platform.path );"], [348, "     * Initialize the maps matching platform and api levels from the source properties files."], [349, "     *"], [350, "     * @throws InvalidSdkException"], [351, "     */"], [352, "    private void findAvailablePlatforms()"], [353, "    {"], [354, "        availablePlatforms = new HashSet< Platform >();"], [355, ""], [356, "        ArrayList< File > platformDirectories = getPlatformDirectories();"], [357, "        for ( File pDir : platformDirectories )"], [358, "        {"], [359, "            File propFile = new File( pDir, SOURCE_PROPERTIES_FILENAME );"], [360, "            Properties properties = new Properties();"], [361, "            try"], [362, "            {"], [363, "                properties.load( new FileInputStream( propFile ) );"], [364, "            }"], [365, "            catch ( IOException e )"], [366, "            {"], [367, "                throw new InvalidSdkException( \"Error reading \" + propFile.getAbsoluteFile() );"], [368, "            }"], [369, "            if ( properties.containsKey( PLATFORM_VERSION_PROPERTY ) && properties.containsKey( API_LEVEL_PROPERTY ) )"], [370, "            {"], [371, "                String platform = properties.getProperty( PLATFORM_VERSION_PROPERTY );"], [372, "                String apiLevel = properties.getProperty( API_LEVEL_PROPERTY );"], [373, "                availablePlatforms.add( new Platform( platform, apiLevel, pDir.getAbsolutePath() ) );"], [374, "            }"], [375, "        }"], [376, "    }"], [377, ""], [378, "    /**"], [421, "     * Gets the source properties files from all locally installed platforms."], [422, "     *"], [423, "     * @return"], [424, "     */"], [425, "    private ArrayList< File > getPlatformDirectories()"], [426, "    {"], [427, "        ArrayList< File > sourcePropertyFiles = new ArrayList< File >();"], [428, "        final File platformsDirectory = new File( sdkPath, PLATFORMS_FOLDER_NAME );"], [429, "        assertPathIsDirectory( platformsDirectory );"], [430, "        final File[] platformDirectories = platformsDirectory.listFiles();"], [431, "        for ( File file : platformDirectories )"], [432, "        {"], [433, "            // only looking in android- folder so only works on reasonably new sdk revisions.."], [434, "            if ( file.isDirectory() && file.getName().startsWith( \"android-\" ) )"], [435, "            {"], [436, "                sourcePropertyFiles.add( file );"], [437, "            }"], [438, "        }"], [439, "        return sourcePropertyFiles;"], [440, "    }"], [441, ""], [442, "    /**"], [451, ""]]}, "num_lines_added": 165, "num_lines_removed": 170}