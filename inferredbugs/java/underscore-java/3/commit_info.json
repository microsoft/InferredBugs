{"hash": "33a00d844c46adbc5300477c747d768f135dac4d", "message": "Add support for the pick(object, keys), after(count, function),\nbefore(count, function) and Optional object.", "file_num_lines": 1303, "diff_parsed": {"added": [[269, "        final Optional<Integer> result = _.find(asList(1, 2, 3, 4, 5, 6),"], [275, "        assertEquals(\"Optional.of(2)\", result.toString());"], [284, "        final Optional<Integer> result = _.detect(asList(1, 2, 3, 4, 5, 6),"], [290, "        assertEquals(\"Optional.of(2)\", result.toString());"], [497, "            Tuple.<String, Object>create(\"year\", Integer.valueOf(1611)))).get().toString());"], [502, "            Tuple.<String, Object>create(\"year\", Integer.valueOf(1611)))).get().toString());"], [698, "        final List<Integer> result3 = _.without(asList(null, 2, null, 0, 3, null, 4), (Integer) null);"], [699, "        assertEquals(\"[2, 0, 3, 4]\", result3.toString());"], [1069, "_.pick({name: 'moe', age: 50, userid: 'moe1'}, 'name', 'age');"], [1070, "=> {name: 'moe', age: 50}"], [1071, "*/"], [1072, "    @Test"], [1073, "    public void pick() throws Exception {"], [1074, "        final List<Tuple<String, Object>> result = _.pick("], [1075, "            new LinkedHashMap<String, Object>() {{ put(\"name\", \"moe\"); put(\"age\", 50); put(\"userid\", \"moe1\"); }},"], [1076, "            \"name\", \"age\""], [1077, "        );"], [1078, "        assertEquals(\"[(name, moe), (age, 50)]\", result.toString());"], [1079, "    }"], [1080, ""], [1081, "/*"], [1664, "var renderNotes = _.after(notes.length, render);"], [1665, "_.each(notes, function(note) {"], [1666, "  note.asyncSave({success: renderNotes});"], [1667, "});"], [1668, "// renderNotes is run once, after all notes have saved."], [1669, "*/"], [1670, "    @Test"], [1671, "    public void after() throws Exception {"], [1672, "        final List<Integer> notes = asList(1, 2, 3);"], [1673, "        final Function<Integer> renderNotes = _.after(notes.size(),"], [1674, "            new Function<Integer>() { public Integer apply() { return 4; }});"], [1675, "        final List<Integer> result = new ArrayList<Integer>();"], [1676, "        _.<Integer>each(notes, new Block<Integer>() {"], [1677, "            public void apply(Integer item) {"], [1678, "                result.add(item);"], [1679, "                Integer afterResult = renderNotes.apply();"], [1680, "                if (afterResult != null) {"], [1681, "                    result.add(afterResult);"], [1682, "                }"], [1683, "            }"], [1684, "        });"], [1685, "        assertEquals(\"[1, 2, 3, 4]\", result.toString());"], [1686, "    }"], [1687, ""], [1688, "/*"], [1689, "var monthlyMeeting = _.before(3, askForRaise);"], [1690, "monthlyMeeting();"], [1691, "monthlyMeeting();"], [1692, "monthlyMeeting();"], [1693, "// the result of any subsequent calls is the same as the second call"], [1694, "*/"], [1695, "    @Test"], [1696, "    public void before() throws Exception {"], [1697, "        final List<Integer> notes = asList(1, 2, 3);"], [1698, "        final Function<Integer> renderNotes = _.before(notes.size() - 1,"], [1699, "            new Function<Integer>() { public Integer apply() { return 4; }});"], [1700, "        final List<Integer> result = new ArrayList<Integer>();"], [1701, "        _.<Integer>each(notes, new Block<Integer>() {"], [1702, "            public void apply(Integer item) {"], [1703, "                result.add(item);"], [1704, "                Integer afterResult = renderNotes.apply();"], [1705, "                if (afterResult != null) {"], [1706, "                    result.add(afterResult);"], [1707, "                }"], [1708, "            }"], [1709, "        });"], [1710, "        assertEquals(\"[1, 4, 2, 4, 3]\", result.toString());"], [1711, "    }"], [1712, ""], [1713, "/*"], [1825, ""], [1826, "    @Test"], [1827, "    public void optional() {"], [1828, "        assertTrue(Optional.absent().equals(Optional.absent()));"], [1829, "        assertTrue(Optional.of(1).equals(Optional.of(1)));"], [1830, "        assertTrue(Optional.of(null).equals(Optional.of(null)));"], [1831, "        assertFalse(Optional.absent().equals(Optional.of(1)));"], [1832, "        assertFalse(Optional.of(null).equals(Optional.of(1)));"], [1833, "        assertFalse(Optional.of(1).equals(Optional.of(null)));"], [1834, "        assertFalse(Optional.of(1).equals(Optional.absent()));"], [1835, "        assertFalse(Optional.of(1).equals(Optional.of(2)));"], [1836, "        assertFalse(Optional.of(1).equals(\"test\"));"], [1837, "        assertEquals(0, Optional.absent().hashCode());"], [1838, "        assertEquals(\"123\".hashCode(), Optional.of(\"123\").hashCode());"], [1839, "        assertEquals(\"Optional.absent()\", Optional.absent().toString());"], [1840, "        assertEquals(\"Optional.of(1)\", Optional.of(1).toString());"], [1841, "    }"]], "deleted": [[269, "        final Integer result = _.find(asList(1, 2, 3, 4, 5, 6),"], [275, "        assertEquals(\"2\", result.toString());"], [284, "        final Integer result = _.detect(asList(1, 2, 3, 4, 5, 6),"], [290, "        assertEquals(\"2\", result.toString());"], [497, "            Tuple.<String, Object>create(\"year\", Integer.valueOf(1611)))).toString());"], [502, "            Tuple.<String, Object>create(\"year\", Integer.valueOf(1611)))).toString());"]]}, "num_lines_added": 88, "num_lines_removed": 6}