{"hash": "640386d09985445b068b95027101862998eb464d", "message": "Fixed BinaryLogClient disconnect synchronization issue", "file_num_lines": 473, "diff_parsed": {"added": [[45, "import java.util.concurrent.LinkedBlockingQueue;"], [47, "import java.util.concurrent.ThreadPoolExecutor;"], [51, "import java.util.concurrent.locks.Lock;"], [52, "import java.util.concurrent.locks.ReentrantLock;"], [87, ""], [88, "    private volatile ThreadPoolExecutor keepAliveThreadExecutor;"], [89, "    private long keepAliveThreadShutdownTimeout = TimeUnit.SECONDS.toMillis(6);"], [90, ""], [91, "    private final Lock shutdownLock = new ReentrantLock();"], [210, "        if (keepAlive && !isKeepAliveThreadRunning()) {"], [217, "        keepAliveThreadExecutor = newSingleDaemonThreadExecutor(\"blc-keepalive-\" + hostname + \":\" + port);"], [218, "        keepAliveThreadExecutor.submit(new Runnable() {"], [221, "                while (true) {"], [222, "                    try {"], [223, "                        Thread.sleep(keepAliveInterval);"], [224, "                    } catch (InterruptedException e) {"], [225, "                        // expected in case of disconnect"], [226, "                    }"], [227, "                    shutdownLock.lock();"], [228, "                    try {"], [229, "                        if (keepAliveThreadExecutor.isShutdown()) {"], [230, "                            return;"], [239, "                                if (isConnected()) {"], [240, "                                    disconnectChannel();"], [246, "                                        \". Next attempt in \" + keepAliveInterval + \"ms\");"], [250, "                    } finally {"], [251, "                        shutdownLock.unlock();"], [258, "    private ThreadPoolExecutor newSingleDaemonThreadExecutor(final String threadName) {"], [259, "        return new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS,"], [260, "            new LinkedBlockingQueue<Runnable>(), new ThreadFactory() {"], [261, ""], [262, "            @Override"], [263, "            public Thread newThread(Runnable r) {"], [264, "                Thread thread = new Thread(r, threadName);"], [265, "                thread.setDaemon(true);"], [266, "                return thread;"], [267, "            }"], [268, "        });"], [269, "    }"], [270, ""], [271, "    protected boolean isKeepAliveThreadRunning() {"], [272, "        return keepAliveThreadExecutor != null && !keepAliveThreadExecutor.isShutdown();"], [273, "    }"], [274, ""], [275, "    public void connect(long timeout, TimeUnit timeUnit) throws IOException, TimeoutException {"], [298, "        boolean started = false;"], [299, "        try {"], [300, "            started = countDownLatch.await(timeout, timeUnit);"], [301, "        } catch (InterruptedException e) {"], [302, "            if (logger.isLoggable(Level.WARNING)) {"], [303, "                logger.log(Level.WARNING, e.getMessage());"], [304, "            }"], [305, "        }"], [375, "                    if (isConnected()) {"], [384, "                if (isConnected()) {"], [390, "            if (isConnected()) {"], [398, "            if (isConnected()) {"], [399, "                disconnectChannel();"], [525, "        shutdownLock.lock();"], [526, "        try {"], [527, "            if (isKeepAliveThreadRunning()) {"], [528, "                keepAliveThreadExecutor.shutdownNow();"], [529, "            }"], [530, "            disconnectChannel();"], [531, "        } finally {"], [532, "            shutdownLock.unlock();"], [533, "        }"], [534, "        if (isKeepAliveThreadRunning()) {"], [535, "            waitForKeepAliveThreadToBeTerminated();"], [536, "        }"], [537, "    }"], [538, ""], [539, "    private void waitForKeepAliveThreadToBeTerminated() {"], [540, "        boolean terminated = false;"], [541, "        try {"], [542, "            terminated = keepAliveThreadExecutor.awaitTermination(keepAliveThreadShutdownTimeout,"], [543, "                TimeUnit.MILLISECONDS);"], [544, "        } catch (InterruptedException e) {"], [545, "            if (logger.isLoggable(Level.WARNING)) {"], [546, "                logger.log(Level.WARNING, e.getMessage());"], [547, "            }"], [548, "        }"], [549, "        if (!terminated) {"], [550, "            throw new IllegalStateException(\"BinaryLogClient was unable to shut keep alive thread down in \" +"], [551, "                keepAliveThreadShutdownTimeout + \"ms\");"], [552, "        }"], [553, "    }"], [554, ""], [555, "    private void disconnectChannel() throws IOException {"]], "deleted": [[83, "    private volatile boolean keepAliveThreadRunning;"], [202, "        if (keepAlive && !keepAliveThreadRunning) {"], [209, "        Thread keepAliveThread = new Thread(new Runnable() {"], [212, "                keepAliveThreadRunning = true;"], [213, "                try {"], [214, "                    while (connected) {"], [215, "                        try {"], [216, "                            Thread.sleep(keepAliveInterval);"], [217, "                        } catch (InterruptedException e) {"], [218, "                            e.printStackTrace();"], [227, "                                if (connected) {"], [228, "                                    disconnect();"], [234, "                                            \". Next attempt in \" + keepAliveInterval + \"ms\");"], [239, "                } finally {"], [240, "                    keepAliveThreadRunning = false;"], [244, "        keepAliveThread.setName(\"blc-keepalive-\" + hostname + \":\" + port);"], [245, "        keepAliveThread.setDaemon(true);"], [246, "        keepAliveThread.start();"], [249, "    public void connect(long timeout, TimeUnit timeUnit) throws IOException, TimeoutException, InterruptedException {"], [272, "        boolean started = countDownLatch.await(timeout, timeUnit);"], [342, "                    if (connected) {"], [351, "                if (connected) {"], [357, "            if (connected) {"], [365, "            if (connected) {"], [366, "                disconnect();"], [367, "            } else {"], [368, "                if (channel.isOpen()) {"], [369, "                    channel.close();"], [370, "                }"]]}, "num_lines_added": 89, "num_lines_removed": 29}