    public void connect() throws IOException {
        if (connected) {
            throw new IllegalStateException("BinaryLogClient is already connected");
        }
        GreetingPacket greetingPacket;
        try {
            try {
                Socket socket = socketFactory != null ? socketFactory.createSocket() : new Socket();
                socket.connect(new InetSocketAddress(hostname, port));
                channel = new PacketChannel(socket);
                if (channel.getInputStream().peek() == -1) {
                    throw new EOFException();
                }
            } catch (IOException e) {
                throw new IOException("Failed to connect to MySQL on " + hostname + ":" + port +
                    ". Please make sure it's running.", e);
            }
            greetingPacket = receiveGreeting();
            authenticate(greetingPacket);
            if (binlogFilename == null) {
                fetchBinlogFilenameAndPosition();
            }
            if (binlogPosition < 4) {
                if (logger.isLoggable(Level.WARNING)) {
                    logger.warning("Binary log position adjusted from " + binlogPosition + " to " + 4);
                }
                binlogPosition = 4;
            }
            ChecksumType checksumType = fetchBinlogChecksum();
            if (checksumType != ChecksumType.NONE) {
                confirmSupportOfChecksum(checksumType);
            }
            requestBinaryLogStream();
        } catch (IOException e) {
            if (channel != null && channel.isOpen()) {
                channel.close();
            }
            throw e;
        }
        connected = true;
        connectionId = greetingPacket.getThreadId();
        if (logger.isLoggable(Level.INFO)) {
            String position;
            synchronized (gtidSetAccessLock) {
                position = gtidSet != null ? gtidSet.toString() : binlogFilename + "/" + binlogPosition;
            }
            logger.info("Connected to " + hostname + ":" + port + " at " + position +
                " (" + (blocking ? "sid:" + serverId + ", " : "") + "cid:" + connectionId + ")");
        }
        synchronized (lifecycleListeners) {
            for (LifecycleListener lifecycleListener : lifecycleListeners) {
                lifecycleListener.onConnect(this);
            }
        }
        if (keepAlive && !isKeepAliveThreadRunning()) {
            spawnKeepAliveThread();
        }
        ensureEventDataDeserializer(EventType.ROTATE, RotateEventDataDeserializer.class);
        synchronized (gtidSetAccessLock) {
            if (gtidSet != null) {
                ensureEventDataDeserializer(EventType.GTID, GtidEventDataDeserializer.class);
            }
        }
        listenForEventPackets();
    }