{"hash": "8dd49eb5dec6d05637a5ac21dfdd45ab5718b013", "message": "Fixed #113 - a race condition that could result in duplicate events to be emitted on reconnect", "file_num_lines": 726, "diff_parsed": {"added": [[143, "    private volatile PacketChannel channel;"], [154, "    private final Lock connectLock = new ReentrantLock();"], [399, "        if (!connectLock.tryLock()) {"], [402, "        boolean notifyWhenDisconnected = false;"], [405, "                channel = openChannel();"], [406, "                GreetingPacket greetingPacket = receiveGreeting();"], [407, "                authenticate(greetingPacket);"], [408, "                connectionId = greetingPacket.getThreadId();"], [409, "                if (binlogFilename == null) {"], [410, "                    fetchBinlogFilenameAndPosition();"], [412, "                if (binlogPosition < 4) {"], [413, "                    if (logger.isLoggable(Level.WARNING)) {"], [414, "                        logger.warning(\"Binary log position adjusted from \" + binlogPosition + \" to \" + 4);"], [415, "                    }"], [416, "                    binlogPosition = 4;"], [417, "                }"], [418, "                ChecksumType checksumType = fetchBinlogChecksum();"], [419, "                if (checksumType != ChecksumType.NONE) {"], [420, "                    confirmSupportOfChecksum(checksumType);"], [421, "                }"], [422, "                requestBinaryLogStream();"], [424, "                disconnectChannel();"], [425, "                throw e;"], [427, "            connected = true;"], [428, "            notifyWhenDisconnected = true;"], [429, "            if (logger.isLoggable(Level.INFO)) {"], [430, "                String position;"], [431, "                synchronized (gtidSetAccessLock) {"], [432, "                    position = gtidSet != null ? gtidSet.toString() : binlogFilename + \"/\" + binlogPosition;"], [434, "                logger.info(\"Connected to \" + hostname + \":\" + port + \" at \" + position +"], [435, "                    \" (\" + (blocking ? \"sid:\" + serverId + \", \" : \"\") + \"cid:\" + connectionId + \")\");"], [437, "            synchronized (lifecycleListeners) {"], [438, "                for (LifecycleListener lifecycleListener : lifecycleListeners) {"], [439, "                    lifecycleListener.onConnect(this);"], [440, "                }"], [442, "            if (keepAlive && !isKeepAliveThreadRunning()) {"], [443, "                spawnKeepAliveThread();"], [445, "            ensureEventDataDeserializer(EventType.ROTATE, RotateEventDataDeserializer.class);"], [447, "                if (gtidSet != null) {"], [448, "                    ensureEventDataDeserializer(EventType.GTID, GtidEventDataDeserializer.class);"], [449, "                }"], [451, "            listenForEventPackets();"], [452, "        } finally {"], [453, "            connectLock.unlock();"], [454, "            if (notifyWhenDisconnected) {"], [455, "                synchronized (lifecycleListeners) {"], [456, "                    for (LifecycleListener lifecycleListener : lifecycleListeners) {"], [457, "                        lifecycleListener.onDisconnect(this);"], [458, "                    }"], [459, "                }"], [462, "    }"], [463, ""], [464, "    private PacketChannel openChannel() throws IOException {"], [465, "        try {"], [466, "            Socket socket = socketFactory != null ? socketFactory.createSocket() : new Socket();"], [467, "            socket.connect(new InetSocketAddress(hostname, port));"], [468, "            PacketChannel channel = new PacketChannel(socket);"], [469, "            if (channel.getInputStream().peek() == -1) {"], [470, "                throw new EOFException();"], [472, "            return channel;"], [473, "        } catch (IOException e) {"], [474, "            throw new IOException(\"Failed to connect to MySQL on \" + hostname + \":\" + port +"], [475, "                \". Please make sure it's running.\", e);"], [557, "        final ExecutorService threadExecutor ="], [558, "            Executors.newSingleThreadExecutor(new ThreadFactory() {"], [560, "                @Override"], [561, "                public Thread newThread(Runnable runnable) {"], [562, "                    return newNamedThread(runnable, \"blc-keepalive-\" + hostname + \":\" + port);"], [563, "                }"], [564, "            });"], [565, "        threadExecutor.submit(new Runnable() {"], [568, "                while (!threadExecutor.isShutdown()) {"], [574, "                    if (threadExecutor.isShutdown()) {"], [575, "                        return;"], [576, "                    }"], [578, "                        channel.write(new PingCommand());"], [579, "                    } catch (IOException e) {"], [580, "                        if (logger.isLoggable(Level.INFO)) {"], [581, "                            logger.info(\"Trying to restore lost connection to \" + hostname + \":\" + port);"], [584, "                            terminateConnect();"], [585, "                            connect(keepAliveConnectTimeout);"], [586, "                        } catch (Exception ce) {"], [587, "                            if (logger.isLoggable(Level.WARNING)) {"], [588, "                                logger.warning(\"Failed to restore connection to \" + hostname + \":\" + port +"], [589, "                                    \". Next attempt in \" + keepAliveInterval + \"ms\");"], [596, "        keepAliveThreadExecutor = threadExecutor;"], [907, "    public void unregisterLifecycleListener(Class<? extends LifecycleListener> listenerClass) {"], [922, "    public void unregisterLifecycleListener(LifecycleListener eventListener) {"], [934, "        terminateKeepAliveThread();"], [935, "        terminateConnect();"], [936, "    }"], [937, ""], [938, "    private void terminateKeepAliveThread() {"], [939, "        ExecutorService keepAliveThreadExecutor = this.keepAliveThreadExecutor;"], [940, "        if (keepAliveThreadExecutor == null) {"], [941, "            return;"], [943, "        keepAliveThreadExecutor.shutdownNow();"], [944, "        while (!awaitTerminationInterruptibly(keepAliveThreadExecutor,"], [945, "            Long.MAX_VALUE, TimeUnit.NANOSECONDS)) {"], [946, "            // ignore"], [950, "    private static boolean awaitTerminationInterruptibly(ExecutorService executorService, long timeout, TimeUnit unit) {"], [952, "            return executorService.awaitTermination(timeout, unit);"], [954, "            return false;"], [956, "    }"], [957, ""], [958, "    private void terminateConnect() throws IOException {"], [959, "        do {"], [960, "            disconnectChannel();"], [961, "        } while (!tryLockInterruptibly(connectLock, 1000, TimeUnit.MILLISECONDS));"], [962, "        connectLock.unlock();"], [963, "    }"], [964, ""], [965, "    private static boolean tryLockInterruptibly(Lock lock, long time, TimeUnit unit) {"], [966, "        try {"], [967, "            return lock.tryLock(time, unit);"], [968, "        } catch (InterruptedException e) {"], [969, "            return false;"], [974, "        connected = false;"], [975, "        if (channel != null && channel.isOpen()) {"], [976, "            channel.close();"]], "deleted": [[143, "    private PacketChannel channel;"], [153, "    private long keepAliveThreadShutdownTimeout = TimeUnit.SECONDS.toMillis(6);"], [155, "    private final Lock shutdownLock = new ReentrantLock();"], [400, "        if (connected) {"], [403, "        GreetingPacket greetingPacket;"], [406, "                Socket socket = socketFactory != null ? socketFactory.createSocket() : new Socket();"], [407, "                socket.connect(new InetSocketAddress(hostname, port));"], [408, "                channel = new PacketChannel(socket);"], [409, "                if (channel.getInputStream().peek() == -1) {"], [410, "                    throw new EOFException();"], [413, "                throw new IOException(\"Failed to connect to MySQL on \" + hostname + \":\" + port +"], [414, "                    \". Please make sure it's running.\", e);"], [416, "            greetingPacket = receiveGreeting();"], [417, "            authenticate(greetingPacket);"], [418, "            if (binlogFilename == null) {"], [419, "                fetchBinlogFilenameAndPosition();"], [420, "            }"], [421, "            if (binlogPosition < 4) {"], [422, "                if (logger.isLoggable(Level.WARNING)) {"], [423, "                    logger.warning(\"Binary log position adjusted from \" + binlogPosition + \" to \" + 4);"], [425, "                binlogPosition = 4;"], [427, "            ChecksumType checksumType = fetchBinlogChecksum();"], [428, "            if (checksumType != ChecksumType.NONE) {"], [429, "                confirmSupportOfChecksum(checksumType);"], [431, "            requestBinaryLogStream();"], [432, "        } catch (IOException e) {"], [433, "            if (channel != null && channel.isOpen()) {"], [434, "                channel.close();"], [436, "            throw e;"], [437, "        }"], [438, "        connected = true;"], [439, "        connectionId = greetingPacket.getThreadId();"], [440, "        if (logger.isLoggable(Level.INFO)) {"], [441, "            String position;"], [443, "                position = gtidSet != null ? gtidSet.toString() : binlogFilename + \"/\" + binlogPosition;"], [445, "            logger.info(\"Connected to \" + hostname + \":\" + port + \" at \" + position +"], [446, "                \" (\" + (blocking ? \"sid:\" + serverId + \", \" : \"\") + \"cid:\" + connectionId + \")\");"], [447, "        }"], [448, "        synchronized (lifecycleListeners) {"], [449, "            for (LifecycleListener lifecycleListener : lifecycleListeners) {"], [450, "                lifecycleListener.onConnect(this);"], [453, "        if (keepAlive && !isKeepAliveThreadRunning()) {"], [454, "            spawnKeepAliveThread();"], [455, "        }"], [456, "        ensureEventDataDeserializer(EventType.ROTATE, RotateEventDataDeserializer.class);"], [457, "        synchronized (gtidSetAccessLock) {"], [458, "            if (gtidSet != null) {"], [459, "                ensureEventDataDeserializer(EventType.GTID, GtidEventDataDeserializer.class);"], [462, "        listenForEventPackets();"], [543, "        keepAliveThreadExecutor = Executors.newSingleThreadExecutor(new ThreadFactory() {"], [545, "            @Override"], [546, "            public Thread newThread(Runnable runnable) {"], [547, "                return newNamedThread(runnable, \"blc-keepalive-\" + hostname + \":\" + port);"], [548, "            }"], [549, "        });"], [550, "        keepAliveThreadExecutor.submit(new Runnable() {"], [553, "                while (true) {"], [559, "                    shutdownLock.lock();"], [561, "                        if (keepAliveThreadExecutor.isShutdown()) {"], [562, "                            return;"], [565, "                            channel.write(new PingCommand());"], [566, "                        } catch (IOException e) {"], [567, "                            if (logger.isLoggable(Level.INFO)) {"], [568, "                                logger.info(\"Trying to restore lost connection to \" + hostname + \":\" + port);"], [569, "                            }"], [570, "                            try {"], [571, "                                if (isConnected()) {"], [572, "                                    disconnectChannel();"], [573, "                                }"], [574, "                                connect(keepAliveConnectTimeout);"], [575, "                            } catch (Exception ce) {"], [576, "                                if (logger.isLoggable(Level.WARNING)) {"], [577, "                                    logger.warning(\"Failed to restore connection to \" + hostname + \":\" + port +"], [578, "                                        \". Next attempt in \" + keepAliveInterval + \"ms\");"], [579, "                                }"], [582, "                    } finally {"], [583, "                        shutdownLock.unlock();"], [898, "    public synchronized void unregisterLifecycleListener(Class<? extends LifecycleListener> listenerClass) {"], [913, "    public synchronized void unregisterLifecycleListener(LifecycleListener eventListener) {"], [925, "        shutdownLock.lock();"], [926, "        try {"], [927, "            if (isKeepAliveThreadRunning()) {"], [928, "                keepAliveThreadExecutor.shutdownNow();"], [929, "            }"], [930, "            disconnectChannel();"], [931, "        } finally {"], [932, "            shutdownLock.unlock();"], [934, "        if (isKeepAliveThreadRunning()) {"], [935, "            waitForKeepAliveThreadToBeTerminated();"], [939, "    private void waitForKeepAliveThreadToBeTerminated() {"], [940, "        boolean terminated = false;"], [942, "            terminated = keepAliveThreadExecutor.awaitTermination(keepAliveThreadShutdownTimeout,"], [943, "                TimeUnit.MILLISECONDS);"], [945, "            if (logger.isLoggable(Level.WARNING)) {"], [946, "                logger.log(Level.WARNING, e.getMessage());"], [947, "            }"], [949, "        if (!terminated) {"], [950, "            throw new IllegalStateException(\"BinaryLogClient was unable to shut keep alive thread down in \" +"], [951, "                keepAliveThreadShutdownTimeout + \"ms\");"], [956, "        try {"], [957, "            connected = false;"], [958, "            if (channel != null && channel.isOpen()) {"], [959, "                channel.close();"], [960, "            }"], [961, "        } finally {"], [962, "            synchronized (lifecycleListeners) {"], [963, "                for (LifecycleListener lifecycleListener : lifecycleListeners) {"], [964, "                    lifecycleListener.onDisconnect(this);"], [965, "                }"], [966, "            }"]]}, "num_lines_added": 120, "num_lines_removed": 110}