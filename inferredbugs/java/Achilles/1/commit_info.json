{"hash": "ce92a50d66bf3bfa434cdbef3b102ebf3f413261", "message": "Add TTL to prepared statements", "file_num_lines": 222, "diff_parsed": {"added": [[66, ""], [67, "        insert.using(ttl(bindMarker()));"], [103, "\t\tRegularStatement statement = prepareWhereClauseForUpdate(idMeta, assignments,true);"], [169, "\t\tRegularStatement incrementStatement = prepareWhereClauseForUpdate(idMeta,update(tableName)"], [170, "                .with(incr(counterName, bindMarker())),false);"], [172, "\t\tRegularStatement decrementStatement = prepareWhereClauseForUpdate(idMeta,update(tableName)"], [173, "                .with(decr(counterName, bindMarker())), false);"], [179, "\t\tMap<CQLQueryType, PreparedStatement> clusteredCounterPSMap = new HashMap<>();"], [180, "\t\tclusteredCounterPSMap.put(INCR, session.prepare(incrementStatement));"], [181, "\t\tclusteredCounterPSMap.put(DECR, session.prepare(decrementStatement));"], [182, "\t\tclusteredCounterPSMap.put(SELECT, session.prepare(selectStatement));"], [183, "\t\tclusteredCounterPSMap.put(DELETE, session.prepare(deleteStatement));"], [229, "\tprivate RegularStatement prepareWhereClauseForUpdate(PropertyMeta idMeta, Assignments update,boolean prepareTTL) {"], [230, "        Update.Where where = null;"], [231, "        if (idMeta.isEmbeddedId()) {"], [242, "            where = update.where(eq(idMeta.getPropertyName(), bindMarker()));"], [243, "\t\t\t//statement = update.where(eq(idMeta.getPropertyName(), bindMarker())).using(ttl(bindMarker()));"], [245, ""], [246, "        if(prepareTTL) {"], [247, "            return where.using(ttl(bindMarker()));"], [248, "        } else {"], [249, "            return where;"], [250, "        }"]], "deleted": [[101, "\t\tRegularStatement statement = prepareWhereClauseForUpdate(idMeta, assignments);"], [167, "\t\tRegularStatement incrStatement = prepareWhereClauseForUpdate(idMeta,"], [168, "\t\t\t\tupdate(tableName).with(incr(counterName, 100L)));"], [169, "\t\tString incr = incrStatement.getQueryString().replaceAll(\"100\", \"?\");"], [171, "\t\tRegularStatement decrStatement = prepareWhereClauseForUpdate(idMeta,"], [172, "\t\t\t\tupdate(tableName).with(decr(counterName, 100L)));"], [173, "\t\tString decr = decrStatement.getQueryString().replaceAll(\"100\", \"?\");"], [176, "\t\tString select = selectStatement.getQueryString();"], [179, "\t\tString delete = deleteStatement.getQueryString();"], [181, "\t\tMap<CQLQueryType, PreparedStatement> clusteredCounterPSMap = new HashMap<AchillesCounter.CQLQueryType, PreparedStatement>();"], [182, "\t\tclusteredCounterPSMap.put(INCR, session.prepare(incr.toString()));"], [183, "\t\tclusteredCounterPSMap.put(DECR, session.prepare(decr.toString()));"], [184, "\t\tclusteredCounterPSMap.put(SELECT, session.prepare(select.toString()));"], [185, "\t\tclusteredCounterPSMap.put(DELETE, session.prepare(delete.toString()));"], [231, "\tprivate RegularStatement prepareWhereClauseForUpdate(PropertyMeta idMeta, Assignments update) {"], [232, "\t\tRegularStatement statement;"], [233, "\t\tif (idMeta.isEmbeddedId()) {"], [234, "\t\t\tUpdate.Where where = null;"], [244, "\t\t\tstatement = where;"], [246, "\t\t\tstatement = update.where(eq(idMeta.getPropertyName(), bindMarker()));"], [248, "\t\treturn statement;"]]}, "num_lines_added": 23, "num_lines_removed": 21}