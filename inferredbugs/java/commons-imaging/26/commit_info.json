{"hash": "5c25ede1eb081639085da0a3401894357b1eab41", "message": "Simplify IptcAddTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/imaging/trunk@1651172 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 71, "diff_parsed": {"added": [[69, "        if (metadata == null) {"], [70, "            // FIXME select only files with meta for this test"], [71, "            return;"], [72, "        }"], [74, "        final List<IptcBlock> newBlocks = new ArrayList<IptcBlock>();"], [75, "        newBlocks.addAll(metadata.photoshopApp13Data.getNonIptcBlocks());"], [76, "        final List<IptcRecord> oldRecords = metadata.photoshopApp13Data.getRecords();"], [78, "        List<IptcRecord> newRecords = new ArrayList<IptcRecord>();"], [79, "        for (final IptcRecord record : oldRecords) {"], [80, "            if (record.iptcType != IptcTypes.CITY"], [81, "                    && record.iptcType != IptcTypes.CREDIT) {"], [82, "                newRecords.add(record);"], [84, "        }"], [86, "        newRecords.add(new IptcRecord(IptcTypes.CITY, \"Albany, NY\"));"], [87, "        newRecords.add(new IptcRecord(IptcTypes.CREDIT, \"William Sorensen\"));"], [88, ""], [89, "        final PhotoshopApp13Data newData = new PhotoshopApp13Data(newRecords, newBlocks);"], [90, ""], [91, "        final File updated = createTempFile(imageFile.getName() + \".iptc.add.\", \".jpg\");"], [92, "        OutputStream os = null;"], [93, "        boolean canThrow = false;"], [94, "        try {"], [95, "            os = new FileOutputStream(updated);"], [96, "            os = new BufferedOutputStream(os);"], [97, "            new JpegIptcRewriter().writeIPTC(byteSource, os, newData);"], [98, "            canThrow = true;"], [99, "        } finally {"], [100, "            IoUtils.closeQuietly(canThrow, os);"], [101, "        }"], [103, "        final ByteSource updateByteSource = new ByteSourceFile(updated);"], [104, "        final JpegPhotoshopMetadata outMetadata = new JpegImageParser()"], [105, "                .getPhotoshopMetadata(updateByteSource, params);"], [107, "        assertNotNull(outMetadata);"], [108, "        assertTrue(outMetadata.getItems().size() == newRecords.size());"]], "deleted": [[70, "        {"], [71, "            final List<IptcBlock> newBlocks = new ArrayList<IptcBlock>();"], [72, "            List<IptcRecord> newRecords = new ArrayList<IptcRecord>();"], [73, ""], [74, "            if (null != metadata) {"], [75, "                final boolean keepOldIptcNonTextValues = true;"], [76, "                if (keepOldIptcNonTextValues) {"], [77, "                    newBlocks.addAll(metadata.photoshopApp13Data"], [78, "                            .getNonIptcBlocks());"], [79, "                }"], [80, "                final boolean keepOldIptcTextValues = true;"], [81, "                if (keepOldIptcTextValues) {"], [82, "                    final List<IptcRecord> oldRecords = metadata.photoshopApp13Data"], [83, "                            .getRecords();"], [84, ""], [85, "                    newRecords = new ArrayList<IptcRecord>();"], [86, "                    for (int j = 0; j < oldRecords.size(); j++) {"], [87, "                        final IptcRecord record = oldRecords.get(j);"], [88, "                        if (record.iptcType != IptcTypes.CITY"], [89, "                                && record.iptcType != IptcTypes.CREDIT) {"], [90, "                            newRecords.add(record);"], [91, "                        }"], [92, "                    }"], [93, "                }"], [94, "            }"], [96, "            newRecords.add(new IptcRecord(IptcTypes.CITY, \"Albany, NY\"));"], [97, "            newRecords.add(new IptcRecord(IptcTypes.CREDIT,"], [98, "                    \"William Sorensen\"));"], [99, ""], [100, "            final PhotoshopApp13Data newData = new PhotoshopApp13Data(newRecords,"], [101, "                    newBlocks);"], [102, ""], [103, "            final File updated = createTempFile(imageFile.getName()"], [104, "                    + \".iptc.add.\", \".jpg\");"], [105, "            OutputStream os = null;"], [106, "            boolean canThrow = false;"], [107, "            try {"], [108, "                os = new FileOutputStream(updated);"], [109, "                os = new BufferedOutputStream(os);"], [110, "                new JpegIptcRewriter().writeIPTC(byteSource, os, newData);"], [111, "                canThrow = true;"], [112, "            } finally {"], [113, "                IoUtils.closeQuietly(canThrow, os);"], [116, "            // Debug.debug(\"Destination Segments:\");"], [117, "            // new JpegUtils().dumpJFIF(new ByteSourceFile(updated));"], [118, ""], [119, "            final ByteSource updateByteSource = new ByteSourceFile(updated);"], [120, "            final JpegPhotoshopMetadata outMetadata = new JpegImageParser()"], [121, "                    .getPhotoshopMetadata(updateByteSource, params);"], [123, "            // Debug.debug(\"outMetadata\", outMetadata.toString());"], [124, "            // Debug.debug(\"hasIptcSegment\", new JpegImageParser()"], [125, "            // .hasIptcSegment(updateByteSource));"], [127, "            assertNotNull(outMetadata);"], [128, "            assertTrue(outMetadata.getItems().size() == newRecords.size());"], [129, "            // assertEquals(metadata.toString(), outMetadata.toString());"], [130, "        }"]]}, "num_lines_added": 34, "num_lines_removed": 56}