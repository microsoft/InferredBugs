{"hash": "e8b45d0ead59bd44693e2114d4fe9e2715ee0062", "message": "Fix some Findbugs problems.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/imaging/trunk@1343020 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 249, "diff_parsed": {"added": [[257, "        BinaryInputStream bis = null;"], [258, "        try {"], [259, "            bis = new BinaryInputStream(bytes, APP13_BYTE_ORDER);"], [260, ""], [261, "            // Note that these are unsigned quantities. Name is always an even"], [262, "            // number of bytes (including the 1st byte, which is the size.)"], [263, ""], [264, "            byte[] idString = bis.readByteArray("], [265, "                    PHOTOSHOP_IDENTIFICATION_STRING.size(),"], [266, "                    \"App13 Segment missing identification string\");"], [267, "            if (!PHOTOSHOP_IDENTIFICATION_STRING.equals(idString))"], [268, "                throw new ImageReadException(\"Not a Photoshop App13 Segment\");"], [269, ""], [270, "            // int index = PHOTOSHOP_IDENTIFICATION_STRING.length;"], [271, ""], [272, "            while (true) {"], [273, "                byte[] imageResourceBlockSignature = bis"], [274, "                        .readByteArray(CONST_8BIM.size(),"], [275, "                                \"App13 Segment missing identification string\","], [276, "                                false, false);"], [277, "                if (null == imageResourceBlockSignature)"], [279, "                if (!CONST_8BIM.equals(imageResourceBlockSignature))"], [280, "                    throw new ImageReadException("], [281, "                            \"Invalid Image Resource Block Signature\");"], [282, ""], [283, "                int blockType = bis"], [284, "                        .read2ByteInteger(\"Image Resource Block missing type\");"], [285, "                if (verbose)"], [286, "                    Debug.debug(\"blockType\","], [287, "                            blockType + \" (0x\" + Integer.toHexString(blockType)"], [288, "                                    + \")\");"], [289, ""], [290, "                int blockNameLength = bis"], [291, "                        .read1ByteInteger(\"Image Resource Block missing name length\");"], [292, "                if (verbose && blockNameLength > 0)"], [293, "                    Debug.debug(\"blockNameLength\", blockNameLength + \" (0x\""], [294, "                            + Integer.toHexString(blockNameLength) + \")\");"], [295, "                byte[] blockNameBytes;"], [296, "                if (blockNameLength == 0) {"], [297, "                    bis.read1ByteInteger(\"Image Resource Block has invalid name\");"], [298, "                    blockNameBytes = new byte[0];"], [299, "                } else {"], [300, "                    blockNameBytes = bis.readByteArray(blockNameLength,"], [301, "                            \"Invalid Image Resource Block name\", verbose, strict);"], [302, "                    if (null == blockNameBytes)"], [303, "                        break;"], [304, ""], [305, "                    if (blockNameLength % 2 == 0)"], [306, "                        bis.read1ByteInteger(\"Image Resource Block missing padding byte\");"], [307, "                }"], [308, ""], [309, "                int blockSize = bis"], [310, "                        .read4ByteInteger(\"Image Resource Block missing size\");"], [311, "                if (verbose)"], [312, "                    Debug.debug(\"blockSize\","], [313, "                            blockSize + \" (0x\" + Integer.toHexString(blockSize)"], [314, "                                    + \")\");"], [315, ""], [316, "                /*"], [317, "                 * doesn't catch cases where blocksize is invalid but is still less"], [318, "                 * than bytes.length but will at least prevent OutOfMemory errors"], [319, "                 */"], [320, "                if (blockSize > bytes.length) {"], [321, "                    throw new ImageReadException(\"Invalid Block Size : \""], [322, "                            + blockSize + \" > \" + bytes.length);"], [323, "                }"], [324, ""], [325, "                byte[] blockData = bis.readByteArray(blockSize,"], [326, "                        \"Invalid Image Resource Block data\", verbose, strict);"], [327, "                if (null == blockData)"], [328, "                    break;"], [329, ""], [330, "                blocks.add(new IptcBlock(blockType, blockNameBytes, blockData));"], [331, ""], [332, "                if ((blockSize % 2) != 0)"], [335, ""], [336, "            return blocks;"], [337, "        } finally {"], [338, "            if (bis != null) {"], [339, "                bis.close();"]], "deleted": [[257, "        BinaryInputStream bis = new BinaryInputStream(bytes, APP13_BYTE_ORDER);"], [258, ""], [259, "        // Note that these are unsigned quantities. Name is always an even"], [260, "        // number of bytes (including the 1st byte, which is the size.)"], [261, ""], [262, "        byte[] idString = bis.readByteArray("], [263, "                PHOTOSHOP_IDENTIFICATION_STRING.size(),"], [264, "                \"App13 Segment missing identification string\");"], [265, "        if (!PHOTOSHOP_IDENTIFICATION_STRING.equals(idString))"], [266, "            throw new ImageReadException(\"Not a Photoshop App13 Segment\");"], [267, ""], [268, "        // int index = PHOTOSHOP_IDENTIFICATION_STRING.length;"], [269, ""], [270, "        while (true) {"], [271, "            byte[] imageResourceBlockSignature = bis"], [272, "                    .readByteArray(CONST_8BIM.size(),"], [273, "                            \"App13 Segment missing identification string\","], [274, "                            false, false);"], [275, "            if (null == imageResourceBlockSignature)"], [276, "                break;"], [277, "            if (!CONST_8BIM.equals(imageResourceBlockSignature))"], [278, "                throw new ImageReadException("], [279, "                        \"Invalid Image Resource Block Signature\");"], [280, ""], [281, "            int blockType = bis"], [282, "                    .read2ByteInteger(\"Image Resource Block missing type\");"], [283, "            if (verbose)"], [284, "                Debug.debug(\"blockType\","], [285, "                        blockType + \" (0x\" + Integer.toHexString(blockType)"], [286, "                                + \")\");"], [287, ""], [288, "            int blockNameLength = bis"], [289, "                    .read1ByteInteger(\"Image Resource Block missing name length\");"], [290, "            if (verbose && blockNameLength > 0)"], [291, "                Debug.debug(\"blockNameLength\", blockNameLength + \" (0x\""], [292, "                        + Integer.toHexString(blockNameLength) + \")\");"], [293, "            byte[] blockNameBytes;"], [294, "            if (blockNameLength == 0) {"], [295, "                bis.read1ByteInteger(\"Image Resource Block has invalid name\");"], [296, "                blockNameBytes = new byte[0];"], [297, "            } else {"], [298, "                blockNameBytes = bis.readByteArray(blockNameLength,"], [299, "                        \"Invalid Image Resource Block name\", verbose, strict);"], [300, "                if (null == blockNameBytes)"], [302, ""], [303, "                if (blockNameLength % 2 == 0)"], [306, ""], [307, "            int blockSize = bis"], [308, "                    .read4ByteInteger(\"Image Resource Block missing size\");"], [309, "            if (verbose)"], [310, "                Debug.debug(\"blockSize\","], [311, "                        blockSize + \" (0x\" + Integer.toHexString(blockSize)"], [312, "                                + \")\");"], [313, ""], [314, "            /*"], [315, "             * doesn't catch cases where blocksize is invalid but is still less"], [316, "             * than bytes.length but will at least prevent OutOfMemory errors"], [317, "             */"], [318, "            if (blockSize > bytes.length) {"], [319, "                throw new ImageReadException(\"Invalid Block Size : \""], [320, "                        + blockSize + \" > \" + bytes.length);"], [322, ""], [323, "            byte[] blockData = bis.readByteArray(blockSize,"], [324, "                    \"Invalid Image Resource Block data\", verbose, strict);"], [325, "            if (null == blockData)"], [326, "                break;"], [327, ""], [328, "            blocks.add(new IptcBlock(blockType, blockNameBytes, blockData));"], [329, ""], [330, "            if ((blockSize % 2) != 0)"], [331, "                bis.read1ByteInteger(\"Image Resource Block missing padding byte\");"], [333, ""], [334, "        return blocks;"]]}, "num_lines_added": 80, "num_lines_removed": 73}