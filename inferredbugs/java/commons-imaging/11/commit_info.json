{"hash": "e8b45d0ead59bd44693e2114d4fe9e2715ee0062", "message": "Fix some Findbugs problems.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/imaging/trunk@1343020 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 106, "diff_parsed": {"added": [[113, "        MyByteArrayOutputStream baos = null;"], [114, "        try {"], [115, "            baos = new MyByteArrayOutputStream("], [116, "                    bytes.length * 2); // max length 1 extra byte for every 128"], [117, ""], [118, "            int ptr = 0;"], [119, "            int count = 0;"], [120, "            while (ptr < bytes.length) {"], [121, "                count++;"], [122, "                int dup = findNextDuplicate(bytes, ptr);"], [123, ""], [124, "                if (dup == ptr) // write run length"], [125, "                {"], [126, "                    int len = findRunLength(bytes, dup);"], [127, "                    int actual_len = Math.min(len, 128);"], [128, "                    baos.write(-(actual_len - 1));"], [129, "                    baos.write(bytes[ptr]);"], [130, "                    ptr += actual_len;"], [131, "                } else { // write literals"], [132, "                    int len = dup - ptr;"], [133, ""], [134, "                    if (dup > 0) {"], [135, "                        int runlen = findRunLength(bytes, dup);"], [136, "                        if (runlen < 3) // may want to discard next run."], [138, "                            int nextptr = ptr + len + runlen;"], [139, "                            int nextdup = findNextDuplicate(bytes, nextptr);"], [140, "                            if (nextdup != nextptr) // discard 2-byte run"], [141, "                            {"], [142, "                                dup = nextdup;"], [143, "                                len = dup - ptr;"], [144, "                            }"], [147, ""], [148, "                    if (dup < 0)"], [149, "                        len = bytes.length - ptr;"], [150, "                    int actual_len = Math.min(len, 128);"], [151, ""], [152, "                    baos.write(actual_len - 1);"], [153, "                    for (int i = 0; i < actual_len; i++) {"], [154, "                        baos.write(bytes[ptr]);"], [155, "                        ptr++;"], [156, "                    }"], [159, "            byte result[] = baos.toByteArray();"], [160, ""], [161, "            return result;"], [162, "        } finally {"], [163, "            if (baos != null) {"], [164, "                baos.close();"], [165, "            }"]], "deleted": [[113, "        MyByteArrayOutputStream baos = new MyByteArrayOutputStream("], [114, "                bytes.length * 2); // max length 1 extra byte for every 128"], [115, ""], [116, "        int ptr = 0;"], [117, "        int count = 0;"], [118, "        while (ptr < bytes.length) {"], [119, "            count++;"], [120, "            int dup = findNextDuplicate(bytes, ptr);"], [121, ""], [122, "            if (dup == ptr) // write run length"], [123, "            {"], [124, "                int len = findRunLength(bytes, dup);"], [125, "                int actual_len = Math.min(len, 128);"], [126, "                baos.write(-(actual_len - 1));"], [127, "                baos.write(bytes[ptr]);"], [128, "                ptr += actual_len;"], [129, "            } else { // write literals"], [130, "                int len = dup - ptr;"], [131, ""], [132, "                if (dup > 0) {"], [133, "                    int runlen = findRunLength(bytes, dup);"], [134, "                    if (runlen < 3) // may want to discard next run."], [135, "                    {"], [136, "                        int nextptr = ptr + len + runlen;"], [137, "                        int nextdup = findNextDuplicate(bytes, nextptr);"], [138, "                        if (nextdup != nextptr) // discard 2-byte run"], [140, "                            dup = nextdup;"], [141, "                            len = dup - ptr;"], [144, "                }"], [145, ""], [146, "                if (dup < 0)"], [147, "                    len = bytes.length - ptr;"], [148, "                int actual_len = Math.min(len, 128);"], [149, ""], [150, "                baos.write(actual_len - 1);"], [151, "                for (int i = 0; i < actual_len; i++) {"], [152, "                    baos.write(bytes[ptr]);"], [153, "                    ptr++;"], [157, "        byte result[] = baos.toByteArray();"], [158, ""], [159, "        return result;"], [160, ""]]}, "num_lines_added": 48, "num_lines_removed": 42}