{"hash": "af86c7b38c34572942f0b2ecf4808c72025855d7", "message": "Break up large test into smaller tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/imaging/trunk@1651171 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 156, "diff_parsed": {"added": [[26, "import java.io.IOException;"], [34, "import org.apache.commons.imaging.ImageReadException;"], [35, "import org.apache.commons.imaging.ImageWriteException;"], [67, "        params.put(PARAM_KEY_READ_THUMBNAILS, Boolean.valueOf(!ignoreImageData));"], [73, "        final File noIptcFile = removeIptc(byteSource);"], [74, ""], [75, "        final JpegPhotoshopMetadata outMetadata = new JpegImageParser()"], [76, "                .getPhotoshopMetadata(new ByteSourceFile(noIptcFile),"], [77, "                        params);"], [78, ""], [79, "        // FIXME should either be null or empty"], [80, "        assertTrue(outMetadata == null"], [81, "                || outMetadata.getItems().size() == 0);"], [82, "    }"], [83, ""], [84, "    public File removeIptc(ByteSource byteSource) throws Exception {"], [85, "        final File noIptcFile = createTempFile(imageFile.getName() + \".iptc.remove.\", \".jpg\");"], [86, ""], [87, "        OutputStream os = new FileOutputStream(noIptcFile);"], [88, "        os = new BufferedOutputStream(os);"], [89, "        new JpegIptcRewriter().removeIPTC(byteSource, os);"], [90, "        os.close();"], [91, "        return noIptcFile;"], [95, "    public void testInsert() throws Exception {"], [100, "        params.put(PARAM_KEY_READ_THUMBNAILS, Boolean.valueOf(!ignoreImageData));"], [102, "        final JpegPhotoshopMetadata metadata = new JpegImageParser().getPhotoshopMetadata(byteSource, params);"], [105, "        final File noIptcFile = removeIptc(byteSource);"], [106, ""], [107, "        final List<IptcBlock> newBlocks = new ArrayList<IptcBlock>();"], [108, "        final List<IptcRecord> newRecords = new ArrayList<IptcRecord>();"], [109, ""], [110, "        newRecords.add(new IptcRecord(IptcTypes.CITY, \"Albany, NY\"));"], [111, "        newRecords.add(new IptcRecord(IptcTypes.CREDIT,"], [112, "                \"William Sorensen\"));"], [113, ""], [114, "        final PhotoshopApp13Data newData = new PhotoshopApp13Data(newRecords,"], [115, "                newBlocks);"], [116, ""], [117, "        final File updated = createTempFile(imageFile.getName()"], [118, "                + \".iptc.insert.\", \".jpg\");"], [119, "        OutputStream os = null;"], [120, "        boolean canThrow = false;"], [121, "        try {"], [122, "            os = new FileOutputStream(updated);"], [123, "            os = new BufferedOutputStream(os);"], [124, "            new JpegIptcRewriter().writeIPTC(new ByteSourceFile("], [125, "                    noIptcFile), os, newData);"], [126, "            canThrow = true;"], [127, "        } finally {"], [128, "            IoUtils.closeQuietly(canThrow, os);"], [131, "        final ByteSource updateByteSource = new ByteSourceFile(updated);"], [132, "        final JpegPhotoshopMetadata outMetadata = new JpegImageParser()"], [133, "                .getPhotoshopMetadata(updateByteSource, params);"], [135, "        assertNotNull(outMetadata);"], [136, "        assertTrue(outMetadata.getItems().size() == 2);"], [137, "    }"], [139, "    @Test"], [140, "    public void testUpdate() throws Exception {"], [141, "        final ByteSource byteSource = new ByteSourceFile(imageFile);"], [143, "        final Map<String, Object> params = new HashMap<String, Object>();"], [144, "        final boolean ignoreImageData = isPhilHarveyTestImage(imageFile);"], [145, "        params.put(PARAM_KEY_READ_THUMBNAILS, Boolean.valueOf(!ignoreImageData));"], [147, "        final JpegPhotoshopMetadata metadata = new JpegImageParser().getPhotoshopMetadata(byteSource, params);"], [148, "        assertNotNull(metadata);"], [150, "        final List<IptcBlock> newBlocks = metadata.photoshopApp13Data.getNonIptcBlocks();"], [151, "        final List<IptcRecord> newRecords = new ArrayList<IptcRecord>();"], [152, ""], [153, "        newRecords.add(new IptcRecord(IptcTypes.CITY, \"Albany, NY\"));"], [154, "        newRecords.add(new IptcRecord(IptcTypes.CREDIT,"], [155, "                \"William Sorensen\"));"], [156, ""], [157, "        final PhotoshopApp13Data newData = new PhotoshopApp13Data(newRecords,"], [158, "                newBlocks);"], [160, "        final File updated = writeIptc(byteSource, newData);"], [162, "        final ByteSource updateByteSource = new ByteSourceFile(updated);"], [163, "        final JpegPhotoshopMetadata outMetadata = new JpegImageParser()"], [164, "                .getPhotoshopMetadata(updateByteSource, params);"], [166, "        assertNotNull(outMetadata);"], [167, "        assertTrue(outMetadata.getItems().size() == 2);"], [168, "    }"], [170, "    public File writeIptc(ByteSource byteSource, PhotoshopApp13Data newData) throws IOException, ImageReadException, ImageWriteException {"], [171, "        final File updated = createTempFile(imageFile.getName()"], [172, "                + \".iptc.update.\", \".jpg\");"], [173, "        OutputStream os = null;"], [174, "        boolean canThrow = false;"], [175, "        try {"], [176, "            os = new FileOutputStream(updated);"], [177, "            os = new BufferedOutputStream(os);"], [178, "            new JpegIptcRewriter().writeIPTC(byteSource, os, newData);"], [179, "            canThrow = true;"], [180, "        } finally {"], [181, "            IoUtils.closeQuietly(canThrow, os);"], [183, "        return updated;"], [184, "    }"], [185, ""], [186, "    @Test"], [187, "    public void testNoChangeUpdate() throws Exception {"], [188, "        final ByteSource byteSource = new ByteSourceFile(imageFile);"], [189, ""], [190, "        final Map<String, Object> params = new HashMap<String, Object>();"], [191, "        final boolean ignoreImageData = isPhilHarveyTestImage(imageFile);"], [192, "        params.put(PARAM_KEY_READ_THUMBNAILS, Boolean.valueOf(!ignoreImageData));"], [194, "        final JpegPhotoshopMetadata metadata = new JpegImageParser().getPhotoshopMetadata(byteSource, params);"], [195, "        assertNotNull(metadata);"], [196, ""], [197, "        final List<IptcBlock> newBlocks = metadata.photoshopApp13Data.getNonIptcBlocks();"], [198, "        final List<IptcRecord> oldRecords = metadata.photoshopApp13Data.getRecords();"], [199, "        final List<IptcRecord> newRecords = new ArrayList<IptcRecord>();"], [200, "        for (final IptcRecord record : oldRecords) {"], [201, "            if (record.iptcType != IptcTypes.CITY"], [202, "                    && record.iptcType != IptcTypes.CREDIT) {"], [203, "                newRecords.add(record);"], [205, "        }"], [207, "        newRecords.add(new IptcRecord(IptcTypes.CITY, \"Albany, NY\"));"], [208, "        newRecords.add(new IptcRecord(IptcTypes.CREDIT, \"William Sorensen\"));"], [210, "        final PhotoshopApp13Data newData = new PhotoshopApp13Data(newRecords, newBlocks);"], [212, "        final File updated = writeIptc(byteSource, newData);"], [214, "        final ByteSource updateByteSource = new ByteSourceFile(updated);"], [215, "        final JpegPhotoshopMetadata outMetadata = new JpegImageParser().getPhotoshopMetadata(updateByteSource, params);"], [217, "        assertNotNull(outMetadata);"], [218, "        assertTrue(outMetadata.getItems().size() == newRecords.size());"]], "deleted": [[37, "import org.apache.commons.imaging.util.Debug;"], [39, "import org.junit.After;"], [40, "import org.junit.Before;"], [67, "        params.put(PARAM_KEY_READ_THUMBNAILS, new Boolean(!ignoreImageData));"], [72, "        // metadata.dump();"], [73, ""], [74, "        final File noIptcFile = createTempFile(imageFile.getName()"], [75, "                + \".iptc.remove.\", \".jpg\");"], [76, "        {"], [77, "            // test remove"], [78, ""], [79, "            OutputStream os = null;"], [80, "            boolean canThrow = false;"], [81, "            try {"], [82, "                os = new FileOutputStream(noIptcFile);"], [83, "                os = new BufferedOutputStream(os);"], [84, "                new JpegIptcRewriter().removeIPTC(byteSource, os);"], [85, "                canThrow = true;"], [86, "            } finally {"], [87, "                IoUtils.closeQuietly(canThrow, os);"], [88, "            }"], [90, "            final JpegPhotoshopMetadata outMetadata = new JpegImageParser()"], [91, "                    .getPhotoshopMetadata(new ByteSourceFile(noIptcFile),"], [92, "                            params);"], [93, "            assertTrue(outMetadata == null"], [94, "                    || outMetadata.getItems().size() == 0);"], [95, "        }"], [99, "    public void testRemoveInsertUpdate() throws Exception {"], [101, "        // Debug.debug(\"Segments:\");"], [102, "        // new JpegUtils().dumpJFIF(byteSource);"], [106, "        params.put(PARAM_KEY_READ_THUMBNAILS, new Boolean(!ignoreImageData));"], [107, "        // params.put(PARAM_KEY_VERBOSE, Boolean.TRUE);"], [108, "        // params.put(PARAM_KEY_VERBOSE, Boolean.TRUE);"], [110, "        final JpegPhotoshopMetadata metadata = new JpegImageParser()"], [111, "                .getPhotoshopMetadata(byteSource, params);"], [113, "        metadata.dump();"], [114, ""], [115, "        final File noIptcFile = createTempFile(imageFile.getName()"], [116, "                + \".iptc.remove.\", \".jpg\");"], [117, "        {"], [118, "            // test remove"], [119, ""], [120, "            OutputStream os = null;"], [121, "            boolean canThrow = false;"], [122, "            try {"], [123, "                os = new FileOutputStream(noIptcFile);"], [124, "                os = new BufferedOutputStream(os);"], [125, "                new JpegIptcRewriter().removeIPTC(byteSource, os);"], [126, "                canThrow = true;"], [127, "            } finally {"], [128, "                IoUtils.closeQuietly(canThrow, os);"], [129, "            }"], [130, ""], [131, "            // Debug.debug(\"Source Segments:\");"], [132, "            // new JpegUtils().dumpJFIF(new ByteSourceFile(noIptcFile));"], [134, "            final JpegPhotoshopMetadata outMetadata = new JpegImageParser()"], [135, "                    .getPhotoshopMetadata(new ByteSourceFile(noIptcFile),"], [136, "                            params);"], [137, "            assertTrue(outMetadata == null"], [138, "                    || outMetadata.getItems().size() == 0);"], [140, "        {"], [141, "            // test no-change update"], [142, ""], [143, "            final List<IptcBlock> newBlocks = metadata.photoshopApp13Data.getNonIptcBlocks();"], [144, "            final List<IptcRecord> oldRecords = metadata.photoshopApp13Data.getRecords();"], [145, "            final List<IptcRecord> newRecords = new ArrayList<IptcRecord>();"], [146, "            for (int j = 0; j < oldRecords.size(); j++) {"], [147, "                final IptcRecord record = oldRecords.get(j);"], [148, "                if (record.iptcType != IptcTypes.CITY"], [149, "                        && record.iptcType != IptcTypes.CREDIT) {"], [150, "                    newRecords.add(record);"], [151, "                }"], [152, "            }"], [154, "            newRecords.add(new IptcRecord(IptcTypes.CITY, \"Albany, NY\"));"], [155, "            newRecords.add(new IptcRecord(IptcTypes.CREDIT,"], [156, "                    \"William Sorensen\"));"], [157, ""], [158, "            final PhotoshopApp13Data newData = new PhotoshopApp13Data(newRecords,"], [159, "                    newBlocks);"], [160, ""], [161, "            final File updated = createTempFile(imageFile.getName()"], [162, "                    + \".iptc.update.\", \".jpg\");"], [163, "            OutputStream os = null;"], [164, "            boolean canThrow = false;"], [165, "            try {"], [166, "                os = new FileOutputStream(updated);"], [167, "                os = new BufferedOutputStream(os);"], [168, "                new JpegIptcRewriter().writeIPTC(byteSource, os, newData);"], [169, "                canThrow = true;"], [170, "            } finally {"], [171, "                IoUtils.closeQuietly(canThrow, os);"], [172, "            }"], [174, "            // Debug.debug(\"Source Segments:\");"], [175, "            // new JpegUtils().dumpJFIF(new ByteSourceFile(updated));"], [177, "            final ByteSource updateByteSource = new ByteSourceFile(updated);"], [178, "            final JpegPhotoshopMetadata outMetadata = new JpegImageParser()"], [179, "                    .getPhotoshopMetadata(updateByteSource, params);"], [181, "            // Debug.debug(\"outMetadata\", outMetadata.toString());"], [182, "            // Debug.debug(\"hasIptcSegment\", new JpegImageParser()"], [183, "            // .hasIptcSegment(updateByteSource));"], [185, "            assertNotNull(outMetadata);"], [186, "            assertTrue(outMetadata.getItems().size() == newRecords.size());"], [187, "            // assertEquals(metadata.toString(), outMetadata.toString());"], [188, "        }"], [190, "        {"], [191, "            // test update"], [192, ""], [193, "            final List<IptcBlock> newBlocks = metadata.photoshopApp13Data.getNonIptcBlocks();"], [194, "            final List<IptcRecord> newRecords = new ArrayList<IptcRecord>();"], [195, ""], [196, "            newRecords.add(new IptcRecord(IptcTypes.CITY, \"Albany, NY\"));"], [197, "            newRecords.add(new IptcRecord(IptcTypes.CREDIT,"], [198, "                    \"William Sorensen\"));"], [199, ""], [200, "            final PhotoshopApp13Data newData = new PhotoshopApp13Data(newRecords,"], [201, "                    newBlocks);"], [202, ""], [203, "            final File updated = createTempFile(imageFile.getName()"], [204, "                    + \".iptc.update.\", \".jpg\");"], [205, "            OutputStream os = null;"], [206, "            boolean canThrow = false;"], [207, "            try {"], [208, "                os = new FileOutputStream(updated);"], [209, "                os = new BufferedOutputStream(os);"], [210, "                new JpegIptcRewriter().writeIPTC(byteSource, os, newData);"], [211, "                canThrow = true;"], [212, "            } finally {"], [213, "                IoUtils.closeQuietly(canThrow, os);"], [214, "            }"], [216, "            // Debug.debug(\"Source Segments:\");"], [217, "            // new JpegUtils().dumpJFIF(new ByteSourceFile(updated));"], [219, "            final ByteSource updateByteSource = new ByteSourceFile(updated);"], [220, "            final JpegPhotoshopMetadata outMetadata = new JpegImageParser()"], [221, "                    .getPhotoshopMetadata(updateByteSource, params);"], [223, "            // Debug.debug(\"outMetadata\", outMetadata.toString());"], [224, "            // Debug.debug(\"hasIptcSegment\", new JpegImageParser()"], [225, "            // .hasIptcSegment(updateByteSource));"], [227, "            assertNotNull(outMetadata);"], [228, "            assertTrue(outMetadata.getItems().size() == 2);"], [229, "            // assertEquals(metadata.toString(), outMetadata.toString());"], [232, "        {"], [233, "            // test insert"], [234, ""], [235, "            final List<IptcBlock> newBlocks = new ArrayList<IptcBlock>();"], [236, "            final List<IptcRecord> newRecords = new ArrayList<IptcRecord>();"], [237, ""], [238, "            newRecords.add(new IptcRecord(IptcTypes.CITY, \"Albany, NY\"));"], [239, "            newRecords.add(new IptcRecord(IptcTypes.CREDIT,"], [240, "                    \"William Sorensen\"));"], [241, ""], [242, "            final PhotoshopApp13Data newData = new PhotoshopApp13Data(newRecords,"], [243, "                    newBlocks);"], [244, ""], [245, "            final File updated = createTempFile(imageFile.getName()"], [246, "                    + \".iptc.insert.\", \".jpg\");"], [247, "            OutputStream os = null;"], [248, "            boolean canThrow = false;"], [249, "            try {"], [250, "                os = new FileOutputStream(updated);"], [251, "                os = new BufferedOutputStream(os);"], [252, "                new JpegIptcRewriter().writeIPTC(new ByteSourceFile("], [253, "                        noIptcFile), os, newData);"], [254, "                canThrow = true;"], [255, "            } finally {"], [256, "                IoUtils.closeQuietly(canThrow, os);"], [259, "            // Debug.debug(\"Source Segments:\");"], [260, "            // new JpegUtils().dumpJFIF(new ByteSourceFile(updated));"], [262, "            final ByteSource updateByteSource = new ByteSourceFile(updated);"], [263, "            final JpegPhotoshopMetadata outMetadata = new JpegImageParser()"], [264, "                    .getPhotoshopMetadata(updateByteSource, params);"], [266, "            // Debug.debug(\"outMetadata\", outMetadata.toString());"], [267, "            // Debug.debug(\"hasIptcSegment\", new JpegImageParser()"], [268, "            // .hasIptcSegment(updateByteSource));"], [270, "            assertNotNull(outMetadata);"], [271, "            assertTrue(outMetadata.getItems().size() == 2);"], [272, "            // assertEquals(metadata.toString(), outMetadata.toString());"], [273, "        }"]]}, "num_lines_added": 121, "num_lines_removed": 177}