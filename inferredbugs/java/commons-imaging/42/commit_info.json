{"hash": "20515734fb4a2567afc6fc8a8a39257e69b4aab8", "message": "Use try with resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/imaging/trunk@1775928 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 170, "diff_parsed": {"added": [[118, "        try (final BitInputStream bis = new BitInputStream(new ByteArrayInputStream(bytes), byteOrder)) {"], [120, "            final int pixelsPerTile = tileWidth * tileLength;"], [122, "            int tileX = 0;"], [123, "            int tileY = 0;"], [125, "            int[] samples = new int[bitsPerSampleLength];"], [126, "            resetPredictor();"], [127, "            for (int i = 0; i < pixelsPerTile; i++) {"], [129, "                final int x = tileX + startX;"], [130, "                final int y = tileY + startY;"], [132, "                getSamplesAsBytes(bis, samples);"], [134, "                if ((x < xLimit) && (y < yLimit)) {"], [135, "                    samples = applyPredictor(samples);"], [136, "                    photometricInterpreter.interpretPixel(imageBuilder, samples, x, y);"], [137, "                }"], [139, "                tileX++;"], [141, "                if (tileX >= tileWidth) {"], [142, "                    tileX = 0;"], [143, "                    resetPredictor();"], [144, "                    tileY++;"], [145, "                    bis.flushCache();"], [146, "                    if (tileY >= tileLength) {"], [147, "                        break;"], [148, "                    }"], [151, "            }"]], "deleted": [[118, "        final BitInputStream bis = new BitInputStream(new ByteArrayInputStream(bytes), byteOrder);"], [120, "        final int pixelsPerTile = tileWidth * tileLength;"], [122, "        int tileX = 0;"], [123, "        int tileY = 0;"], [125, "        int[] samples = new int[bitsPerSampleLength];"], [126, "        resetPredictor();"], [127, "        for (int i = 0; i < pixelsPerTile; i++) {"], [129, "            final int x = tileX + startX;"], [130, "            final int y = tileY + startY;"], [132, "            getSamplesAsBytes(bis, samples);"], [134, "            if ((x < xLimit) && (y < yLimit)) {"], [135, "                samples = applyPredictor(samples);"], [136, "                photometricInterpreter.interpretPixel(imageBuilder, samples, x,"], [137, "                        y);"], [138, "            }"], [140, "            tileX++;"], [142, "            if (tileX >= tileWidth) {"], [143, "                tileX = 0;"], [144, "                resetPredictor();"], [145, "                tileY++;"], [146, "                bis.flushCache();"], [147, "                if (tileY >= tileLength) {"], [148, "                    break;"], [150, "            }"]]}, "num_lines_added": 24, "num_lines_removed": 24}