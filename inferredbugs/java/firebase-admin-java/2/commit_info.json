{"hash": "08c3d3249e0ce0989a9af59e12cc642831de8804", "message": "Fail fast semantics in the FirebaseCredentials API (#18)", "file_num_lines": 235, "diff_parsed": {"added": [[10, "import com.google.common.collect.ImmutableList;"], [11, "import com.google.common.io.CharStreams;"], [35, "      ImmutableList.of("], [39, "  private FirebaseCredentials() {"], [40, "  }"], [42, "  private static String streamToString(InputStream inputStream) throws IOException {"], [43, "    InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);"], [44, "    return CharStreams.toString(reader);"], [82, "   * @throws IOException If an error occurs while parsing the service account certificate."], [85, "  public static FirebaseCredential fromCertificate(InputStream serviceAccount) throws IOException {"], [86, "    return fromCertificate(serviceAccount, Utils.getDefaultTransport(),"], [87, "        Utils.getDefaultJsonFactory());"], [91, "  static FirebaseCredential fromCertificate(InputStream serviceAccount, HttpTransport transport,"], [92, "      JsonFactory jsonFactory) throws IOException {"], [107, "   * @throws IOException If an error occurs while parsing the refresh token."], [110, "  public static FirebaseCredential fromRefreshToken(InputStream refreshToken) throws IOException {"], [116, "  static FirebaseCredential fromRefreshToken(final InputStream refreshToken,"], [117, "      HttpTransport transport, JsonFactory jsonFactory) throws IOException {"], [145, "    abstract GoogleCredential fetchCredential() throws IOException;"], [148, "    abstract FirebaseAccessToken fetchToken(GoogleCredential credential) throws IOException;"], [223, "    private final String jsonData;"], [224, "    private final String projectId;"], [226, "    CertCredential(InputStream inputStream, HttpTransport transport,"], [227, "        JsonFactory jsonFactory) throws IOException {"], [229, "      jsonData = streamToString(checkNotNull(inputStream));"], [230, "      JSONObject jsonObject = new JSONObject(jsonData);"], [234, "        throw new IOException(\"Failed to parse service account: 'project_id' must be set\", e);"], [239, "    GoogleCredential fetchCredential() throws IOException {"], [254, "    FirebaseAccessToken fetchToken(GoogleCredential credential) throws IOException {"], [259, "    Task<String> getProjectId() {"], [271, "    GoogleCredential fetchCredential() throws IOException {"], [277, "    FirebaseAccessToken fetchToken(GoogleCredential credential) throws IOException {"], [285, "    private final String jsonData;"], [287, "    RefreshTokenCredential(InputStream inputStream, HttpTransport transport,"], [288, "        JsonFactory jsonFactory) throws IOException {"], [290, "      jsonData = streamToString(checkNotNull(inputStream));"], [294, "    GoogleCredential fetchCredential() throws IOException {"], [309, "    FirebaseAccessToken fetchToken(GoogleCredential credential) throws IOException {"]], "deleted": [[19, "import java.io.Reader;"], [21, "import java.util.Arrays;"], [35, "      Arrays.asList("], [39, "  private static String streamToString(InputStream inputStream) throws IOException {"], [40, "    StringBuilder stringBuilder = new StringBuilder();"], [41, "    Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);"], [42, "    char[] buffer = new char[256];"], [43, "    int length;"], [45, "    while ((length = reader.read(buffer)) != -1) {"], [46, "      stringBuilder.append(buffer, 0, length);"], [47, "    }"], [48, "    inputStream.close();"], [49, "    return stringBuilder.toString();"], [89, "  public static FirebaseCredential fromCertificate(InputStream serviceAccount) {"], [90, "    return fromCertificate(serviceAccount,"], [91, "        Utils.getDefaultTransport(), Utils.getDefaultJsonFactory());"], [95, "  static FirebaseCredential fromCertificate("], [96, "      InputStream serviceAccount, HttpTransport transport, JsonFactory jsonFactory) {"], [113, "  public static FirebaseCredential fromRefreshToken(InputStream refreshToken) {"], [119, "  static FirebaseCredential fromRefreshToken("], [120, "      final InputStream refreshToken, HttpTransport transport, JsonFactory jsonFactory) {"], [148, "    abstract GoogleCredential fetchCredential() throws Exception;"], [151, "    abstract FirebaseAccessToken fetchToken(GoogleCredential credential) throws Exception;"], [226, "    private String jsonData;"], [227, "    private String projectId;"], [228, "    private Exception streamException;"], [230, "    CertCredential(InputStream inputStream, HttpTransport transport, JsonFactory jsonFactory) {"], [233, "        jsonData = streamToString(checkNotNull(inputStream));"], [234, "        JSONObject jsonObject = new JSONObject(jsonData);"], [236, "      } catch (IOException e) {"], [237, "        streamException = new IOException(\"Failed to read service account\", e);"], [239, "        streamException ="], [240, "            new JSONException(\"Failed to parse service account: 'project_id' must be set\");"], [245, "    GoogleCredential fetchCredential() throws Exception {"], [246, "      if (streamException != null) {"], [247, "        throw streamException;"], [248, "      }"], [249, ""], [264, "    FirebaseAccessToken fetchToken(GoogleCredential credential) throws Exception {"], [265, "      if (streamException != null) {"], [266, "        throw streamException;"], [267, "      }"], [268, ""], [273, "    Task<String> getProjectId(boolean forceRefresh) {"], [274, "      if (streamException != null) {"], [275, "        return Tasks.forException(streamException);"], [276, "      }"], [277, ""], [289, "    GoogleCredential fetchCredential() throws Exception {"], [295, "    FirebaseAccessToken fetchToken(GoogleCredential credential) throws Exception {"], [303, "    private String jsonData;"], [304, "    private Exception streamException;"], [306, "    RefreshTokenCredential("], [307, "        InputStream inputStream, HttpTransport transport, JsonFactory jsonFactory) {"], [309, "      try {"], [310, "        jsonData = streamToString(checkNotNull(inputStream));"], [311, "      } catch (IOException e) {"], [312, "        streamException = new IOException(\"Failed to read refresh token\", e);"], [313, "      }"], [317, "    GoogleCredential fetchCredential() throws Exception {"], [318, "      if (streamException != null) {"], [319, "        throw streamException;"], [320, "      }"], [321, ""], [336, "    FirebaseAccessToken fetchToken(GoogleCredential credential) throws Exception {"], [337, "      if (streamException != null) {"], [338, "        throw streamException;"], [339, "      }"], [340, ""]]}, "num_lines_added": 38, "num_lines_removed": 69}