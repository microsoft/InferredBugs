{"hash": "33e280f1fcd047d3782cb04e1a23d113cd5f5247", "message": "PR changes", "file_num_lines": 358, "diff_parsed": {"added": [[209, "        Service service = ModelsGenerator.createAndSubmitService(apolloTestClient);"], [210, "        DeployableVersion blockedDeployableVersion = ModelsGenerator.createAndSubmitDeployableVersion(apolloTestClient, blockedService);"], [211, "        DeployableVersion deployableVersion = ModelsGenerator.createAndSubmitDeployableVersion(apolloTestClient, service);"], [214, ""], [215, "        ModelsGenerator.createAndSubmitDeployment(apolloTestClient, environment, service, deployableVersion);"], [216, ""], [217, "        assertThatThrownBy(() -> ModelsGenerator.createAndSubmitDeployment(apolloTestClient, environment, blockedService, blockedDeployableVersion)).isInstanceOf(Exception.class)"], [227, "        Environment blockedEnvironment = ModelsGenerator.createAndSubmitEnvironment(availability, apolloTestClient);"], [228, "        Environment environment = ModelsGenerator.createAndSubmitEnvironment(apolloTestClient);"], [234, "        createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", null, null, null, availability);"], [235, "        assertThatThrownBy(() -> ModelsGenerator.createAndSubmitDeployment(apolloTestClient, blockedEnvironment, service, deployableVersion)).isInstanceOf(Exception.class)"], [236, "                                                                                                                                         .hasMessageContaining(\"Deployment is currently blocked\");"], [244, "        String availability = \"BLOCK-ME-3\";"], [246, "        String errorMessage = \"Trying to add invalid blocker.\";"], [261, "        Stack environmentsStack = ModelsGenerator.createAndSubmitEnvironmentsStack(apolloTestClient, Arrays.asList(environment.getId()));"], [263, "        ModelsGenerator.createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", environment, null, servicesStack);"], [264, "        ModelsGenerator.createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", null, service, environmentsStack);"], [266, "        String errorMessage = \"Trying to add invalid blocker. \";"], [268, "        assertThatThrownBy(() -> ModelsGenerator.createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", null, service, servicesStack)).isInstanceOf(ApolloClientException.class)"], [269, "                                                                                                                                                                   .hasMessageContaining(errorMessage);"], [271, "        assertThatThrownBy(() -> ModelsGenerator.createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", environment, service, servicesStack)).isInstanceOf(ApolloClientException.class)"], [272, "                                                                                                                                                                .hasMessageContaining(errorMessage);"]], "deleted": [[211, "        DeployableVersion deployableVersion = ModelsGenerator.createAndSubmitDeployableVersion(apolloTestClient, blockedService);"], [212, "        assertThatThrownBy(() -> ModelsGenerator.createAndSubmitDeployment(apolloTestClient, environment, blockedService, deployableVersion)).isInstanceOf(Exception.class)"], [222, "        Environment environment = ModelsGenerator.createAndSubmitEnvironment(availability, apolloTestClient);"], [224, ""], [225, "        createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", null, null, null, availability);"], [227, "        assertThatThrownBy(() -> ModelsGenerator.createAndSubmitDeployment(apolloTestClient, environment, service, deployableVersion)).isInstanceOf(Exception.class)"], [228, "                                                                                                                                         .hasMessageContaining(\"Deployment is currently blocked\");"], [229, "    }"], [230, ""], [231, "    @Test"], [232, "    public void testNonBlockedDeploymentWithAvailabilityBlockerOnSpecificService() throws Exception {"], [233, "        ApolloTestClient apolloTestClient = Common.signupAndLogin();"], [234, "        ApolloTestAdminClient apolloTestAdminClient = Common.getAndLoginApolloTestAdminClient();"], [236, "        String availability = \"BLOCK-ME-3\";"], [237, "        Environment environment = ModelsGenerator.createAndSubmitEnvironment(availability, apolloTestClient); //Environment in this availability"], [238, "        Service blockedService = ModelsGenerator.createAndSubmitService(apolloTestClient);"], [239, "        Service service = ModelsGenerator.createAndSubmitService(apolloTestClient);"], [240, ""], [241, "        createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", null, blockedService, null, availability);"], [242, "        DeployableVersion deployableVersion = ModelsGenerator.createAndSubmitDeployableVersion(apolloTestClient, service);"], [244, "    }"], [245, ""], [246, "    @Test"], [247, "    public void testNonBlockedDeploymentWithAnotherAvailabilityBlocker() throws Exception {"], [248, "        ApolloTestClient apolloTestClient = Common.signupAndLogin();"], [249, "        ApolloTestAdminClient apolloTestAdminClient = Common.getAndLoginApolloTestAdminClient();"], [250, ""], [251, "        String availability = \"BLOCK-ME-4\";"], [252, "        Environment environment = ModelsGenerator.createAndSubmitEnvironment(apolloTestClient); //Random availability"], [253, "        Service blockedService = ModelsGenerator.createAndSubmitService(apolloTestClient);"], [254, "        Service service = ModelsGenerator.createAndSubmitService(apolloTestClient);"], [256, "        createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", null, blockedService, null, availability);"], [257, "        DeployableVersion deployableVersion = ModelsGenerator.createAndSubmitDeployableVersion(apolloTestClient, service);"], [258, "        ModelsGenerator.createAndSubmitDeployment(apolloTestClient, environment, service, deployableVersion);"], [266, "        String availability = \"BLOCK-ME-5\";"], [268, "        String errorMessage = String.format(\"Trying to add invalid blocker. stackId - null, environmentId - %s, serviceId - null, availability - %s\", environment.getId(), availability);"], [284, "        String errorMessage = \"Trying to add invalid blocker. \";"], [286, "        assertThatThrownBy(() -> ModelsGenerator. createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", null, service, servicesStack)).isInstanceOf(ApolloClientException.class)"], [287, "                                                                                                                                                                   .hasMessageContaining(errorMessage + String.format(\"stackId - %s, environmentId - null, serviceId - %s, availability - null\", servicesStack.getId(), service.getId()));"], [289, "        assertThatThrownBy(() -> ModelsGenerator. createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", environment, null, servicesStack)).isInstanceOf(ApolloClientException.class)"], [290, "                                                                                                                                                                   .hasMessageContaining(errorMessage + String.format(\"stackId - %s, environmentId - %s, serviceId - null\", servicesStack.getId(), environment.getId()));"], [292, "        assertThatThrownBy(() -> ModelsGenerator. createAndSubmitBlocker(apolloTestAdminClient, \"unconditional\", \"{}\", environment, service, servicesStack)).isInstanceOf(ApolloClientException.class)"], [293, "                                                                                                                                                                .hasMessageContaining(errorMessage + String.format(\"stackId - %s, environmentId - %s, serviceId - %s\", servicesStack.getId(), environment.getId(), service.getId()));"]]}, "num_lines_added": 22, "num_lines_removed": 43}