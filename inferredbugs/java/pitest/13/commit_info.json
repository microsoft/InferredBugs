{"hash": "31a6f85a6530871e0841777b8f198df52bbd1aa0", "message": "moved all test discovery to child processes", "file_num_lines": 140, "diff_parsed": {"added": [[24, "import java.util.HashMap;"], [26, "import java.util.Map;"], [30, "import org.pitest.Pitest;"], [34, "import org.pitest.dependency.DependencyExtractor;"], [36, "import org.pitest.extension.common.NullDiscoveryListener;"], [37, "import org.pitest.extension.common.UnGroupedStrategy;"], [38, "import org.pitest.functional.F;"], [39, "import org.pitest.functional.FCollection;"], [40, "import org.pitest.internal.ClassPath;"], [41, "import org.pitest.internal.ClassPathByteArraySource;"], [43, "import org.pitest.util.Functions;"], [46, "import org.pitest.util.Unchecked;"], [79, "      final List<TestUnit> tus = getTestsFromParent(dis, paramsFromParent);"], [110, "  private static List<TestUnit> getTestsFromParent("], [111, "      final SafeDataInputStream dis, final SlaveArguments paramsFromParent)"], [113, "    final List<String> classes = receiveTestClassesFromParent(dis);"], [114, ""], [115, "    final List<TestUnit> tus = discoverTests(paramsFromParent, classes);"], [116, ""], [117, "    final List<TestUnit> filteredTus = filterTestsByDependencyAnalysis("], [118, "        paramsFromParent, tus);"], [119, ""], [120, "    LOG.info(\"Dependency analysis reduced number of potential tests by \""], [121, "        + (tus.size() - filteredTus.size()));"], [122, "    return filteredTus;"], [123, ""], [124, "  }"], [125, ""], [126, "  private static List<TestUnit> discoverTests("], [127, "      final SlaveArguments paramsFromParent, final List<String> classes) {"], [128, "    final List<TestUnit> tus = Pitest.findTestUnitsForAllSuppliedClasses("], [129, "        paramsFromParent.getPitConfig(), new NullDiscoveryListener(),"], [130, "        new UnGroupedStrategy(),"], [131, "        FCollection.flatMap(classes, Functions.stringToClass()));"], [132, "    LOG.info(\"Found  \" + tus.size() + \" tests\");"], [133, "    return tus;"], [134, "  }"], [135, ""], [136, "  private static List<String> receiveTestClassesFromParent("], [137, "      final SafeDataInputStream dis) {"], [139, "    final List<String> classes = new ArrayList<String>(count);"], [141, "      classes.add(dis.readString());"], [143, "    LOG.fine(\"Receiving \" + count + \" tests classes from parent\");"], [144, "    return classes;"], [145, "  }"], [146, ""], [147, "  private static List<TestUnit> filterTestsByDependencyAnalysis("], [148, "      final SlaveArguments paramsFromParent, final List<TestUnit> tus) {"], [149, "    final ClassPath cp = new ClassPath();"], [150, "    final int maxDistance = paramsFromParent.getDependencyAnalysisMaxDistance();"], [151, "    if (maxDistance < 0) {"], [152, "      return tus;"], [153, "    } else {"], [154, "      return FCollection.filter(tus,"], [155, "          isWithinReach(maxDistance, paramsFromParent, cp));"], [156, "    }"], [157, "  }"], [158, ""], [159, "  private static F<TestUnit, Boolean> isWithinReach(final int maxDistance,"], [160, "      final SlaveArguments paramsFromParent, final ClassPath classPath) {"], [161, "    final DependencyExtractor analyser = new DependencyExtractor("], [162, "        new ClassPathByteArraySource(classPath), maxDistance);"], [163, ""], [164, "    return new F<TestUnit, Boolean>() {"], [165, "      private final Map<String, Boolean> cache = new HashMap<String, Boolean>();"], [166, ""], [167, "      public Boolean apply(final TestUnit a) {"], [168, "        final String each = a.getDescription().getFirstTestClass().getName();"], [169, "        try {"], [170, "          boolean inReach;"], [171, "          if (this.cache.containsKey(each)) {"], [172, "            inReach = this.cache.get(each);"], [173, "          } else {"], [174, "            inReach = !analyser.extractCallDependenciesForPackages(each,"], [175, "                paramsFromParent.getFilter()).isEmpty();"], [176, "            this.cache.put(each, inReach);"], [177, "          }"], [178, ""], [179, "          if (inReach) {"], [180, "            return true;"], [181, "          }"], [182, "        } catch (final IOException e) {"], [183, "          throw Unchecked.translateCheckedException(e);"], [184, "        }"], [185, ""], [186, "        return false;"], [187, "      }"], [189, "    };"]], "deleted": [[67, "      final List<TestUnit> tus = getTestsFromParent(dis);"], [98, "  private static List<TestUnit> getTestsFromParent(final SafeDataInputStream dis)"], [101, "    final List<TestUnit> tus = new ArrayList<TestUnit>(count);"], [103, "      tus.add(dis.read(TestUnit.class));"], [105, "    LOG.fine(\"Receiving \" + count + \" tests from parent\");"], [106, "    return tus;"]]}, "num_lines_added": 88, "num_lines_removed": 6}