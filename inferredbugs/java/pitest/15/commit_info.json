{"hash": "54991a7ea7d0f6943e6bbfe5497e96e74556b4af", "message": "write basic stats to console", "file_num_lines": 109, "diff_parsed": {"added": [[56, "  public void shouldPrintMutatorNameOnFirstLine() {"], [57, "    final String[] ss = generateReportLines();"], [58, "    assertEquals(\"> foo\", ss[0]);"], [59, "  }"], [60, ""], [61, "  @Test"], [62, "  public void shouldPrintTotalsAndPercentageInSecondLine() {"], [63, "    final String[] ss = generateReportLines();"], [64, "    assertEquals(\">> Generated 0 Killed 0 (100%)\", ss[1]);"], [65, "  }"], [66, ""], [67, "  @Test"], [69, "    final String[] ss = generateReportLines();"], [70, "    assertEquals(\"> KILLED 0 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 \", ss[2]);"], [71, "  }"], [72, ""], [73, "  private String[] generateReportLines() {"], [79, "    return ss;"], [80, "  }"], [81, ""], [82, "  @Test"], [83, "  public void shouldCalculateTotalNumberOfMutationsWhenNoneRegistered() {"], [84, "    assertEquals(0, this.testee.getTotalMutations());"], [85, "  }"], [86, ""], [87, "  @Test"], [88, "  public void shouldCalculateTotalNumberOfDectedMutationsWhenNoneRegistered() {"], [89, "    assertEquals(0, this.testee.getTotalDetectedMutations());"], [90, "  }"], [91, ""], [92, "  @Test"], [93, "  public void shouldCalculateTotalNumberOfMutationsWhenSomeRegistered() {"], [94, "    this.testee.registerResult(DetectionStatus.KILLED);"], [95, "    this.testee.registerResult(DetectionStatus.NO_COVERAGE);"], [96, "    assertEquals(2, this.testee.getTotalMutations());"], [97, "  }"], [98, ""], [99, "  @Test"], [100, "  public void shouldCalculateTotalNumberOfDetectedMutationsWhenSomeRegistered() {"], [101, "    this.testee.registerResult(DetectionStatus.KILLED);"], [102, "    this.testee.registerResult(DetectionStatus.NO_COVERAGE);"], [103, "    this.testee.registerResult(DetectionStatus.TIMED_OUT);"], [104, "    this.testee.registerResult(DetectionStatus.SURVIVED);"], [105, "    assertEquals(2, this.testee.getTotalDetectedMutations());"], [106, "  }"], [107, ""], [108, "  @Test"], [109, "  public void shouldCalculatePercentageDetectedWhenNoneFound() {"], [110, "    assertEquals(100, this.testee.getPercentageDetected());"], [111, "  }"], [112, ""], [113, "  @Test"], [114, "  public void shouldCalculatePercentageDetectedWhenNoneDetected() {"], [115, "    this.testee.registerResult(DetectionStatus.SURVIVED);"], [116, "    assertEquals(0, this.testee.getPercentageDetected());"], [117, "  }"], [118, ""], [119, "  @Test"], [120, "  public void shouldCalculatePercentageDetectedWhenSomeDetected() {"], [121, "    registerResults(DetectionStatus.SURVIVED, 2);"], [122, "    registerResults(DetectionStatus.KILLED, 1);"], [123, "    assertEquals(33, this.testee.getPercentageDetected());"], [124, "  }"], [125, ""], [126, "  @Test"], [127, "  public void shouldCalculatePercentageDetectedWhenAllDetected() {"], [128, "    registerResults(DetectionStatus.KILLED, 8);"], [129, "    assertEquals(100, this.testee.getPercentageDetected());"], [130, "  }"], [131, ""], [132, "  private void registerResults(DetectionStatus status, int times) {"], [133, "    for (int i = 0; i != times; i++) {"], [134, "      this.testee.registerResult(status);"], [135, "    }"]], "deleted": [[62, "    assertEquals(\"> foo\", ss[0]);"], [63, "    assertEquals(\"> KILLED 0 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 \", ss[1]);"]]}, "num_lines_added": 74, "num_lines_removed": 2}