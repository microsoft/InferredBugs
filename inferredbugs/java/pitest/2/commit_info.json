{"hash": "9c9effd3c92c58cbb5b76e2a4706665892113540", "message": "test units passed individual to reduce max memory overhead", "file_num_lines": 111, "diff_parsed": {"added": [[4, "import java.io.BufferedWriter;"], [7, "import java.io.OutputStream;"], [8, "import java.io.OutputStreamWriter;"], [9, "import java.io.Writer;"], [13, "import java.util.logging.Logger;"], [22, "import org.pitest.internal.IsolationUtils;"], [23, "import org.pitest.util.Log;"], [28, "  private final static Logger               LOG = Log.getLogger();"], [29, ""], [46, "    Socket clientSocket = null;"], [49, "      clientSocket = socket.accept();"], [52, ""], [53, "      sendTests(clientSocket);"], [54, ""], [56, "      receiveCoverage(is);"], [58, "    } catch (final IOException e) {"], [59, "      throw Unchecked.translateCheckedException(e);"], [60, "    } finally {"], [61, "      try {"], [62, "        if (clientSocket != null) {"], [63, "          clientSocket.close();"], [64, "        }"], [66, "        if (socket != null) {"], [67, "          socket.close();"], [68, "        }"], [69, "      } catch (final IOException e) {"], [70, "        throw Unchecked.translateCheckedException(e);"], [71, "      }"], [72, "    }"], [74, "  }"], [76, "  private void receiveCoverage(final DataInputStream is) throws IOException {"], [77, "    Description d = null;"], [78, "    final CoverageStatistics cs = new CoverageStatistics();"], [80, "    byte control = is.readByte();"], [81, "    while (control != CoveragePipe.DONE) {"], [82, "      switch (control) {"], [83, "      case CoveragePipe.CLAZZ:"], [85, "        final int id = is.readInt();"], [86, "        final String name = is.readUTF();"], [88, "        final int newId = cs.registerClass(name);"], [89, "        if (id != newId) {"], [90, "          throw new PitError(\"Coverage id out of sync\");"], [91, "        }"], [93, "        break;"], [94, "      case CoveragePipe.LINE:"], [96, "        final int classId = is.readInt();"], [97, "        final int lineId = is.readInt();"], [99, "        cs.visitLine(classId, lineId);"], [101, "        break;"], [102, "      case CoveragePipe.OUTCOME:"], [104, "        final boolean isGreen = is.readBoolean();"], [105, "        final long executionTime = is.readLong();"], [106, "        final CoverageResult cr = new CoverageResult(d, executionTime, isGreen,"], [107, "            cs.getClassStatistics());"], [109, "        this.handler.apply(cr);"], [111, "        cs.clearCoverageStats();"], [112, ""], [113, "        break;"], [114, "      case CoveragePipe.TEST_CHANGE:"], [115, ""], [116, "        final int index = is.readInt();"], [117, "        d = this.tus.get(index).getDescription();"], [118, "        break;"], [119, "      case CoveragePipe.DONE:"], [122, "      control = is.readByte();"], [123, "    }"], [124, "  }"], [125, ""], [126, "  private void sendTests(final Socket clientSocket) throws IOException {"], [127, "    final OutputStream os = clientSocket.getOutputStream();"], [128, "    final Writer w = new BufferedWriter(new OutputStreamWriter(os));"], [129, "    // send individually to reduce memory overhead of deserializing large suite"], [130, "    for (final TestUnit tu : this.tus) {"], [131, "      w.write(IsolationUtils.toTransportString(tu) + \"\\n\");"], [133, "    w.write(\"END\\n\");"], [134, "    w.flush();"], [135, "    LOG.info(\"Sent tests to slave\");"]], "deleted": [[39, "      final Socket clientSocket = socket.accept();"], [44, "      Description d = null;"], [45, "      final CoverageStatistics cs = new CoverageStatistics();"], [47, "      byte control = is.readByte();"], [48, "      while (control != CoveragePipe.DONE) {"], [49, "        switch (control) {"], [50, "        case CoveragePipe.CLAZZ:"], [52, "          final int id = is.readInt();"], [53, "          final String name = is.readUTF();"], [55, "          final int newId = cs.registerClass(name);"], [56, "          if (id != newId) {"], [57, "            throw new PitError(\"Coverage id out of sync\");"], [58, "          }"], [60, "          break;"], [61, "        case CoveragePipe.LINE:"], [63, "          final int classId = is.readInt();"], [64, "          final int lineId = is.readInt();"], [66, "          cs.visitLine(classId, lineId);"], [68, "          break;"], [69, "        case CoveragePipe.OUTCOME:"], [71, "          final boolean isGreen = is.readBoolean();"], [72, "          final long executionTime = is.readLong();"], [73, "          final CoverageResult cr = new CoverageResult(d, executionTime,"], [74, "              isGreen, cs.getClassStatistics());"], [76, "          this.handler.apply(cr);"], [78, "          cs.clearCoverageStats();"], [80, "          break;"], [81, "        case CoveragePipe.TEST_CHANGE:"], [83, "          final int index = is.readInt();"], [84, "          d = this.tus.get(index).getDescription();"], [85, "          break;"], [86, "        case CoveragePipe.DONE:"], [88, "        }"], [89, "        control = is.readByte();"], [90, "      }"], [92, "    } catch (final IOException e) {"], [93, "      throw Unchecked.translateCheckedException(e);"], [94, "    } finally {"], [95, "      if (socket != null) {"], [96, "        try {"], [97, "          socket.close();"], [98, "        } catch (final IOException e) {"], [99, "          throw Unchecked.translateCheckedException(e);"], [100, "        }"]]}, "num_lines_added": 77, "num_lines_removed": 44}