{"hash": "5318fa796fe87e7a7cff7ee0e42e38d485aff59e", "message": "cleanup of mutationtestslave", "file_num_lines": 136, "diff_parsed": {"added": [[20, "import java.net.UnknownHostException;"], [54, "  private static final Logger LOG = Log.getLogger();"], [56, "  private final SafeDataInputStream        dis;"], [57, "  private final Reporter reporter;"], [59, "  public MutationTestSlave(final SafeDataInputStream dis, final Reporter reporter) {"], [60, "    this.dis = dis;"], [61, "    this.reporter = reporter;"], [62, "  }"], [64, "  public void run() {"], [71, "      final F3<String, ClassLoader, byte[], Boolean> hotswap = new F3<String, ClassLoader, byte[], Boolean>() {"], [73, "        public Boolean apply(final String clazzName, final ClassLoader loader,"], [74, "            final byte[] b) {"], [75, "          Class<?> clazz;"], [77, "            clazz = Class.forName(clazzName, false, loader);"], [79, "          } catch (final ClassNotFoundException e) {"], [82, ""], [87, ""], [91, "          paramsFromParent.engine.createMutator(new ClassloaderByteArraySource("], [97, "      worker.run(paramsFromParent.mutations, reporter, new TimeOutDecoratedTestSource("], [98, "          paramsFromParent.timeoutStrategy, tests, reporter));"], [99, "      reporter.done(ExitCode.OK);"], [100, "    } catch (final Throwable ex) {"], [101, "      LOG.log(Level.WARNING, \"Error during mutation test\", ex);"], [102, "      reporter.done(ExitCode.UNKNOWN_ERROR);"], [103, "    }"], [104, ""], [105, "  }"], [106, ""], [107, "  public static void main(final String[] args) {"], [109, "    enablePowerMockSupport();"], [110, ""], [111, "    final int port = Integer.valueOf(args[0]);"], [112, ""], [113, "    Socket s = null;"], [114, "    try {"], [115, "      s = new Socket(\"localhost\", port);"], [116, "      final SafeDataInputStream dis = new SafeDataInputStream("], [117, "          s.getInputStream());"], [118, ""], [119, "      Reporter reporter = new DefaultReporter(s.getOutputStream());"], [120, "      addMemoryWatchDog(reporter);"], [121, ""], [122, "      final MutationTestSlave instance = new MutationTestSlave(dis, reporter);"], [123, "      instance.run();"], [124, "    } catch (final UnknownHostException ex) {"], [125, "      LOG.log(Level.WARNING, \"Error during mutation test\", ex);"], [126, "    } catch (final IOException ex) {"], [129, "      if ( s != null ) {"], [130, "        safelyCloseSocket(s);"]], "deleted": [[53, "  private final static Logger LOG = Log.getLogger();"], [55, "  public static void main(final String[] args) {"], [57, "    enablePowerMockSupport();"], [59, "    Socket s = null;"], [60, "    Reporter r = null;"], [62, "      final int port = Integer.valueOf(args[0]);"], [63, ""], [64, "      s = new Socket(\"localhost\", port);"], [65, ""], [66, "      final SafeDataInputStream dis = new SafeDataInputStream("], [67, "          s.getInputStream());"], [73, "      final F3<String, ClassLoader,byte[], Boolean> hotswap = new F3<String, ClassLoader, byte[], Boolean>() {"], [75, "        public Boolean apply(final String clazzName, ClassLoader loader, final byte[] b) {"], [76, "           Class<?> clazz;"], [78, "            clazz = Class.forName(clazzName, false,"], [79, "                 loader);"], [81, "          } catch (ClassNotFoundException e) {"], [84, ""], [89, "      r = new DefaultReporter(s.getOutputStream());"], [90, "      addMemoryWatchDog(r);"], [94, "          paramsFromParent.config.createMutator(new ClassloaderByteArraySource("], [100, "      worker.run(paramsFromParent.mutations, r, new TimeOutDecoratedTestSource("], [101, "          paramsFromParent.timeoutStrategy, tests, r));"], [103, "    } catch (final Exception ex) {"], [105, "      if (r != null) {"], [106, "        r.done(ExitCode.UNKNOWN_ERROR);"], [107, "      }"], [108, "      safelyCloseSocket(s);"], [110, "      if (r != null) {"], [111, "        r.done(ExitCode.OK);"], [113, ""], [114, "      safelyCloseSocket(s);"]]}, "num_lines_added": 49, "num_lines_removed": 32}