{"hash": "f24e7f6e9776a17051cbf2d72415dbbb94eccb3c", "message": "Interim phase.", "file_num_lines": 83, "diff_parsed": {"added": [[26, "import com.github.horrorho.inflatabledonkey.chunk.engine.ChunksContainer;"], [45, "import com.github.horrorho.inflatabledonkey.chunk.engine.ChunkKeyEncryptionKey;"], [46, "import com.github.horrorho.inflatabledonkey.chunk.engine.ChunkKeyEncryptionKeys;"], [74, "        ChunkKeyEncryptionKeys keks = Voodoo.keyEncryptionKeys(voodoos);"], [79, "            accept(HttpClient httpClient, Voodoo voodoo, ChunkKeyEncryptionKeys keks, BiConsumer<Asset, List<Chunk>> consumer) {"], [80, "        List<ChunkReference> chunkReferences = voodoo.chunkReferences();"], [82, "                .filter(u -> u"], [83, "                        .keySet()"], [84, "                        .containsAll(chunkReferences))"], [85, "                .map(u -> chunkReferences"], [86, "                        .stream()"], [87, "                        .map(u::get)"], [88, "                        .collect(Collectors.toList()))"], [102, "            fetch(HttpClient httpClient, ChunkKeyEncryptionKeys keks, Map<Integer, StorageHostChunkList> containers,"], [117, "            fetch(HttpClient httpClient, ChunkKeyEncryptionKey kek, StorageHostChunkList container, int index) {"], [118, "        ChunksContainer shclContainer = new ChunksContainer(container, kek, index);"]], "deleted": [[26, "import com.github.horrorho.inflatabledonkey.chunk.engine.SHCLContainer;"], [40, "import java.util.function.Function;"], [73, "        KeyEncryptionKeys keks = Voodoo.keyEncryptionKeys(voodoos);"], [78, "            accept(HttpClient httpClient, Voodoo voodoo, KeyEncryptionKeys keks, BiConsumer<Asset, List<Chunk>> consumer) {"], [80, "                .flatMap(u -> assemble(u, voodoo.chunkReferences()))"], [94, "            fetch(HttpClient httpClient, KeyEncryptionKeys keks, Map<Integer, StorageHostChunkList> containers,"], [109, "            fetch(HttpClient httpClient, Function<Integer, Optional<byte[]>> kek, StorageHostChunkList container, int index) {"], [110, "        SHCLContainer shclContainer = new SHCLContainer(container, kek, index);"], [113, ""], [114, "    Optional<List<Chunk>>"], [115, "            assemble(Map<ChunkReference, Chunk> map, List<ChunkReference> references) {"], [116, "        if (map.keySet().containsAll(references)) {"], [117, "            logger.warn(\"-- assemble() - missing chunks\");"], [118, "            return Optional.empty();"], [119, "        }"], [120, ""], [121, "        List<Chunk> chunkList = references.stream()"], [122, "                .map(map::get)"], [123, "                .collect(Collectors.toList());"], [124, "        return Optional.of(chunkList);"], [125, "    }"]]}, "num_lines_added": 16, "num_lines_removed": 21}