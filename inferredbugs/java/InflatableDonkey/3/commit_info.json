{"hash": "22813f5ae4654558ea9180bfb587fdd94d169454", "message": "Tamed forced functional style.", "file_num_lines": 107, "diff_parsed": {"added": [[100, "        Optional<Chunk> chunk = store.chunk(checksum);"], [101, "        if (chunk.isPresent()) {"], [102, "            logger.debug(\"-- chunk() - chunk present in store: 0x:{}\", Hex.toHexString(checksum));"], [103, "            return chunk;"], [104, "        }"], [105, "        logger.debug(\"-- chunk() - chunk not present in store: 0x:{}\", Hex.toHexString(checksum));"], [106, "        byte[] chunkEncryptionKey = chunkInfo.getChunkEncryptionKey().toByteArray();"], [107, "        return decrypt(bis, chunkEncryptionKey, checksum, index);"], [112, "        Optional<byte[]> key = unwrapKey(chunkEncryptionKey, index);"], [113, "        if (key.isPresent()) {"], [114, "            byte[] k = key.get();"], [115, "            logger.debug(\"-- decrypt() - key: 0x{} chunk: 0x{}\", Hex.toHexString(k), Hex.toHexString(checksum));"], [116, "            store(cipherInputStreams.apply(k, bis), checksum);"], [117, "        } else {"], [118, "            logger.warn(\"-- decrypt() - key unwrap failed chunk: 0x{}\", Hex.toHexString(checksum));"], [119, "        }"], [129, "        Optional<OutputStream> os = store.outputStream(checksum);"], [130, "        if (os.isPresent()) {"], [131, "            logger.debug(\"-- store() - copying chunk into store: 0x{}\", Hex.toHexString(checksum));"], [132, "            copy(is, os.get());"], [133, "        } else {"], [134, "            logger.debug(\"-- store() - store now already contains chunk: 0x{}\", Hex.toHexString(checksum));"], [135, "        }"]], "deleted": [[29, "import com.github.horrorho.inflatabledonkey.io.IORunnable;"], [30, "import com.github.horrorho.inflatabledonkey.io.IOSupplier;"], [102, "        return store.chunk(checksum)"], [103, "                .<IOSupplier<Optional<Chunk>>>map(u -> () -> {"], [104, "                    logger.debug(\"-- chunk() - chunk present in store: 0x:{}\", Hex.toHexString(checksum));"], [105, "                    return Optional.of(u);"], [106, "                })"], [107, "                .orElseGet(() -> () -> {"], [108, "                    logger.debug(\"-- chunk() - chunk not present in store: 0x:{}\", Hex.toHexString(checksum));"], [109, "                    byte[] chunkEncryptionKey = chunkInfo.getChunkEncryptionKey().toByteArray();"], [110, "                    return decrypt(bis, chunkEncryptionKey, checksum, index);"], [111, "                })"], [112, "                .get();"], [117, "        unwrapKey(chunkEncryptionKey, index)"], [118, "                .map(u -> {"], [119, "                    logger.debug(\"-- decrypt() - key unwrapped: 0x{} chunk: 0x{}\","], [120, "                            Hex.toHexString(u), Hex.toHexString(checksum));"], [121, "                    return cipherInputStreams.apply(u, bis);"], [122, "                })"], [123, "                .<IORunnable>map(u -> () -> store(u, checksum))"], [124, "                .orElse(() -> {"], [125, "                    logger.warn(\"-- decrypt() - key unwrap failed chunk: 0x{}\", Hex.toHexString(checksum));"], [126, "                })"], [127, "                .run();"], [137, "        store.outputStream(checksum)"], [138, "                .<IORunnable>map(u -> () -> {"], [139, "                    logger.debug(\"-- store() - copying chunk into store: 0x{}\", Hex.toHexString(checksum));"], [140, "                    copy(is, u);"], [141, "                })"], [142, "                .orElse(() -> {"], [143, "                    logger.debug(\"-- store() - store now contains chunk: 0x{}\", Hex.toHexString(checksum));"], [144, "                })"], [145, "                .run();"]]}, "num_lines_added": 23, "num_lines_removed": 33}