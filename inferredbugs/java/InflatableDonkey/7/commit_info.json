{"hash": "feccb6ae473763f281cbd2bcc6b2a25325f4ca44", "message": "Bugfix/ tidy AuthorizeAssetsResponseHandler timestamp handling.", "file_num_lines": 99, "diff_parsed": {"added": [[27, "import com.github.horrorho.inflatabledonkey.protobuf.ChunkServer.FileChecksumStorageHostChunkLists;"], [28, "import com.github.horrorho.inflatabledonkey.protobuf.ChunkServer.FileGroups;"], [29, "import com.github.horrorho.inflatabledonkey.protobuf.ChunkServer.HostInfo;"], [30, "import com.github.horrorho.inflatabledonkey.protobuf.ChunkServer.StorageHostChunkList;"], [36, "import java.util.Optional;"], [48, "public class AuthorizeAssetsResponseHandler extends DonkeyResponseHandler<FileGroups> {"], [52, "    private final IOFunction<InputStream, FileGroups> parser;"], [53, "    private final long fallbackDurationMS;"], [55, "    public AuthorizeAssetsResponseHandler(IOFunction<InputStream, FileGroups> parser, long fallbackDurationMS) {"], [57, "        this.fallbackDurationMS = fallbackDurationMS;"], [60, "    public AuthorizeAssetsResponseHandler(long fallbackDurationMS) {"], [61, "        this(FileGroups.PARSER::parseFrom, fallbackDurationMS);"], [65, "    public FileGroups"], [66, "            handleEntityTimestampOffset(HttpEntity entity, Optional<Long> timestampOffset) throws IOException {"], [67, "        logger.trace(\"-- handleEntityTimestampOffset() - timestamp offset: {}\", timestampOffset);"], [68, "        FileGroups fileGroups = handleEntity(entity);"], [69, "        return adjustExpiryTimestamp(fileGroups, timestampOffset);"], [73, "    public FileGroups handleEntity(HttpEntity entity) throws IOException {"], [79, "    FileGroups adjustExpiryTimestamp(FileGroups fileGroups, Optional<Long> timestampOffset) {"], [80, "        // We adjust the FileGroups timestamps based on machine time/ server time deltas. This allows us to function"], [81, "        // with inaccurate machine clocks."], [82, "        List<FileChecksumStorageHostChunkLists> fileGroupsList = fileGroups.getFileGroupsList()"], [84, "                .map(u -> adjustExpiryTimestamp(u, timestampOffset))"], [86, "        return fileGroups"], [87, "                .toBuilder()"], [88, "                .clearFileGroups()"], [89, "                .addAllFileGroups(fileGroupsList)"], [90, "                .build();"], [93, "    FileChecksumStorageHostChunkLists"], [94, "            adjustExpiryTimestamp(FileChecksumStorageHostChunkLists fileGroup, Optional<Long> timestampOffset) {"], [95, "        List<StorageHostChunkList> list = fileGroup.getStorageHostChunkListList()"], [97, "                .map(u -> adjustExpiryTimestamp(u, timestampOffset))"], [99, "        return fileGroup"], [100, "                .toBuilder()"], [101, "                .clearStorageHostChunkList()"], [102, "                .addAllStorageHostChunkList(list)"], [103, "                .build();"], [106, "    StorageHostChunkList adjustExpiryTimestamp(StorageHostChunkList container, Optional<Long> timestampOffset) {"], [108, "            // Shouldn't happen."], [109, "            logger.warn(\"-- adjustExpiryTimestamp() - no expiry timestamp: {} reverting to default\","], [110, "                    container.getHostInfo().getUri());"], [111, "            return defaultExpiryTimestamp(container);"], [112, "        }"], [113, "        if (!timestampOffset.isPresent()) {"], [114, "            // Probably shouldn't happen."], [115, "            logger.debug(\"-- adjustExpiryTimestamp() - no timestamp offset: {} reverting to default\","], [116, "                    container.getHostInfo().getUri());"], [117, "            return defaultExpiryTimestamp(container);"], [118, "        }"], [119, "        long timestamp = container.getHostInfo().getExpiry() + timestampOffset.get();"], [120, "        if (timestamp < System.currentTimeMillis()) {"], [121, "            // Shouldn't happen."], [122, "            logger.warn(\"-- adjustExpiryTimestamp() - negative timestamp offset: {} reverting to default\","], [123, "                    container.getHostInfo().getUri());"], [124, "            return defaultExpiryTimestamp(container);"], [129, "    StorageHostChunkList defaultExpiryTimestamp(StorageHostChunkList container) {"], [130, "        return setExpiryTimestamp(container, System.currentTimeMillis() + fallbackDurationMS);"], [131, "    }"], [132, ""], [133, "    StorageHostChunkList setExpiryTimestamp(StorageHostChunkList container, long timestamp) {"], [134, "        HostInfo hostInfo = container"], [135, "                .getHostInfo()"], [136, "                .toBuilder()"], [137, "                .setExpiry(timestamp)"], [138, "                .build();"], [139, "        return container"], [140, "                .toBuilder()"], [141, "                .setHostInfo(hostInfo)"], [142, "                .build();"]], "deleted": [[27, "import com.github.horrorho.inflatabledonkey.protobuf.ChunkServer;"], [44, "public class AuthorizeAssetsResponseHandler extends DonkeyResponseHandler<ChunkServer.FileGroups> {"], [48, "    private static final long FALLBACK_DURATION_MS = 30 * 60 * 1000;"], [50, "    private final IOFunction<InputStream, ChunkServer.FileGroups> parser;"], [51, "    private final long timestampTolerance;"], [52, ""], [53, "    public AuthorizeAssetsResponseHandler(IOFunction<InputStream, ChunkServer.FileGroups> parser,"], [54, "            long timestampTolerance) {"], [56, "        this.timestampTolerance = timestampTolerance;"], [59, "    public AuthorizeAssetsResponseHandler(long timestampTolerance) {"], [60, "        this(ChunkServer.FileGroups.PARSER::parseFrom, timestampTolerance);"], [64, "    public ChunkServer.FileGroups"], [65, "            handleEntityTimestampOffset(HttpEntity entity, long timestampOffset) throws IOException {"], [66, "        ChunkServer.FileGroups fileGroups = handleEntity(entity);"], [67, ""], [68, "        if (Math.abs(timestampOffset) > timestampTolerance) {"], [69, "            logger.debug(\"-- handleEntityTimestampOffset() - system timestamp out of tolerance: {} ms\", timestampOffset);"], [70, "            adjustExpiryTimestamp(fileGroups, timestampOffset);"], [71, "        }"], [72, "        return fileGroups;"], [76, "    public ChunkServer.FileGroups handleEntity(HttpEntity entity) throws IOException {"], [82, "    ChunkServer.FileGroups adjustExpiryTimestamp(ChunkServer.FileGroups fileGroups, long offset) {"], [83, "        List<ChunkServer.FileChecksumStorageHostChunkLists> fileGroupsList = fileGroups.getFileGroupsList()"], [85, "                .map(u -> AuthorizeAssetsResponseHandler.this.adjustExpiryTimestamp(u, offset))"], [87, "        return fileGroups.toBuilder().clearFileGroups().addAllFileGroups(fileGroupsList).build();"], [90, "    ChunkServer.FileChecksumStorageHostChunkLists"], [91, "            adjustExpiryTimestamp(ChunkServer.FileChecksumStorageHostChunkLists fileGroup, long offset) {"], [92, "        List<ChunkServer.StorageHostChunkList> list = fileGroup.getStorageHostChunkListList()"], [94, "                .map(u -> AuthorizeAssetsResponseHandler.this.adjustExpiryTimestamp(u, offset))"], [96, "        return fileGroup.toBuilder().clearStorageHostChunkList().addAllStorageHostChunkList(list).build();"], [99, "    ChunkServer.StorageHostChunkList adjustExpiryTimestamp(ChunkServer.StorageHostChunkList container, long offset) {"], [101, "            // Shouldn't happen, can probably remove this check."], [102, "            logger.warn(\"-- adjustExpiryTimestamp() - no expiry timestamp: {}\", container.getHostInfo());"], [103, "            return setExpiryTimestamp(container, System.currentTimeMillis() + FALLBACK_DURATION_MS);"], [105, "        long timestamp = container.getHostInfo().getExpiry() + offset;"], [109, "    ChunkServer.StorageHostChunkList setExpiryTimestamp(ChunkServer.StorageHostChunkList container, long timestamp) {"], [110, "        ChunkServer.HostInfo hostInfo = container.getHostInfo().toBuilder().setExpiry(timestamp).build();"], [111, "        return container.toBuilder().setHostInfo(hostInfo).build();"]]}, "num_lines_added": 69, "num_lines_removed": 38}