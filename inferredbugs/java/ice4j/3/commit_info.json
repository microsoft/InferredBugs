{"hash": "c63180534936f7f1dd9cb12d02d0d76d11f25fb4", "message": "Fixes the verification of MESSAGE-INTEGRITY attribute values (which didn't seem to always work with the previous fix).", "file_num_lines": 544, "diff_parsed": {"added": [[672, "        String username = null;"], [676, "            username = LongTermCredential.toString(unameAttr.getUsername());"], [677, "            if (!validateUsername(username))"], [688, "                    \"Non-recognized username: \" + username);"], [714, "            if (!validateMessageIntegrity("], [715, "                    msgIntAttr,"], [716, "                    username,"], [717, "                    true,"], [718, "                    evt.getRawMessage()))"], [780, "     * @param shortTermCredentialMechanism <tt>true</tt> if <tt>msgInt</tt> is"], [781, "     * to be validated as part of the STUN short-term credential mechanism or"], [782, "     * <tt>false</tt> for the STUN long-term credential mechanism"], [788, "    public boolean validateMessageIntegrity("], [791, "            boolean                   shortTermCredentialMechanism,"], [794, "        int colon = -1;"], [796, "        if ((username == null)"], [797, "                || (username.length() < 1)"], [798, "                || (shortTermCredentialMechanism"], [799, "                        && ((colon = username.indexOf(\":\")) < 1)))"], [809, "        if (shortTermCredentialMechanism)"], [810, "            username = username.substring(0, colon); // lfrag"], [812, "        byte[] key = getCredentialsManager().getLocalKey(username);"], [824, "         * after it."], [826, "        byte[] binMsg = new byte[msgInt.getLocationInMessage()];"], [828, "        System.arraycopy(message.getBytes(), 0, binMsg, 0, binMsg.length);"], [830, "        char messageLength"], [831, "            = (char)"], [832, "                (binMsg.length"], [833, "                    + Attribute.HEADER_LENGTH"], [834, "                    + msgInt.getDataLength()"], [835, "                    - Message.HEADER_LENGTH);"], [837, "        binMsg[2] = (byte) (messageLength >> 8);"], [838, "        binMsg[3] = (byte) (messageLength & 0xFF);"], [840, "        byte[] expectedMsgIntHmacSha1Content;"], [841, ""], [842, "        try"], [843, "        {"], [844, "            expectedMsgIntHmacSha1Content"], [845, "                = MessageIntegrityAttribute.calculateHmacSha1("], [846, "                        binMsg, 0, binMsg.length,"], [847, "                        key);"], [849, "        catch (IllegalArgumentException iaex)"], [851, "            expectedMsgIntHmacSha1Content = null;"], [854, "        byte[] msgIntHmacSha1Content = msgInt.getHmacSha1Content();"], [855, ""], [856, "        if (!Arrays.equals("], [857, "                expectedMsgIntHmacSha1Content,"], [858, "                msgIntHmacSha1Content))"], [862, "                logger.log("], [863, "                        Level.FINE,"], [864, "                        \"Received a message with a wrong \""], [865, "                            +\"MESSAGE-INTEGRITY HMAC-SHA1 signature: \""], [866, "                            + \"expected: \""], [867, "                            + toHexString(expectedMsgIntHmacSha1Content)"], [868, "                            + \", received: \""], [869, "                            + toHexString(msgIntHmacSha1Content));"], [880, "     * Returns a <tt>String</tt> representation of a specific <tt>byte</tt>"], [881, "     * array as an unsigned integer in base 16."], [882, "     *"], [883, "     * @param bytes the <tt>byte</tt> to get the <tt>String</tt> representation"], [884, "     * of as an unsigned integer in base 16"], [885, "     * @return a <tt>String</tt> representation of the specified <tt>byte</tt>"], [886, "     * array as an unsigned integer in base 16"], [888, "    private static String toHexString(byte[] bytes)"], [890, "        if (bytes == null)"], [891, "            return null;"], [892, "        else"], [893, "        {"], [894, "            StringBuilder hexStringBuilder"], [895, "                = new StringBuilder(2 * bytes.length);"], [896, "            char[] hexes"], [897, "                = new char[]"], [898, "                            {"], [899, "                                '0', '1', '2', '3', '4', '5', '6', '7', '8',"], [900, "                                '9', 'A', 'B', 'C', 'D', 'E', 'F'"], [901, "                            };"], [902, ""], [903, "            for (int i = 0; i < bytes.length; i++)"], [904, "            {"], [905, "                byte b = bytes[i];"], [906, ""], [907, "                hexStringBuilder.append(hexes[(b & 0xF0) >> 4]);"], [908, "                hexStringBuilder.append(hexes[b & 0x0F]);"], [909, "            }"], [910, "            return hexStringBuilder.toString();"], [911, "        }"], [912, "    }"], [914, "    /**"], [915, "     * Asserts the validity of a specific username (e.g. which we've received in"], [916, "     * a USERNAME attribute)."], [917, "     *"], [918, "     * @param username the username to be validated"], [919, "     * @return <tt>true</tt> if <tt>username</tt> contains a valid username;"], [920, "     * <tt>false</tt>, otherwise"], [921, "     */"], [922, "    private static boolean validateUsername(String username)"], [923, "    {"], [926, "        if ((username.length() < 1) || (colon < 1))"]], "deleted": [[672, "        String username;"], [676, "            username = new String(unameAttr.getUsername());"], [677, "            if (!validateUsername( unameAttr))"], [688, "                    \"Non-recognized username: \""], [689, "                    + new String(unameAttr.getUsername()));"], [715, "            if (!validateMessageIntegrity(msgIntAttr,"], [716, "                            new String(unameAttr.getUsername()),"], [717, "                            evt.getRawMessage()))"], [784, "    private boolean validateMessageIntegrity("], [789, "        int colon = username.indexOf(\":\");"], [791, "        if( (username.length() < 1) || colon < 1)"], [801, "        String lfrag = username.substring(0, colon);"], [803, "        byte[] key = StunStack.getInstance()"], [804, "                .getCredentialsManager().getLocalKey(lfrag);"], [816, "         * after it. So for the sake of preventing code duplication, clone the"], [817, "         * message and calculate the expected MESSAGE-INTEGRITY in the clone."], [819, "        MessageIntegrityAttribute expectedMsgInt;"], [821, "        try"], [822, "        {"], [823, "            Message decodedMessage"], [824, "                = Message.decode("], [825, "                        message.getBytes(),"], [826, "                        (char) 0,"], [827, "                        (char) message.getMessageLength());"], [830, "            expectedMsgInt"], [831, "                = (MessageIntegrityAttribute)"], [832, "                    decodedMessage.getAttribute(Attribute.MESSAGE_INTEGRITY);"], [834, "            if (expectedMsgInt != null)"], [835, "            {"], [836, "                /*"], [837, "                 * Encode the decodedMessage so that its"], [838, "                 * MessageIntegrityAttribute populates with the expectedSha1."], [839, "                 * But don't forget to set the username of the"], [840, "                 * MessageIntegrityAttribute first or its encoding will crash."], [841, "                 */"], [842, "                expectedMsgInt.setUsername(lfrag);"], [843, "                decodedMessage.encode();"], [844, "            }"], [846, "        catch (StunException sex)"], [848, "            expectedMsgInt = null;"], [851, "        if ((expectedMsgInt == null)"], [852, "                || !Arrays.equals("], [853, "                        expectedMsgInt.getHmacSha1Content(),"], [854, "                        msgInt.getHmacSha1Content()))"], [858, "                logger.log(Level.FINE, \"Received a message with a wrong \""], [859, "                            +\"MESSAGE-INTEGRITY HMAC-SHA1 signature\");"], [866, ""], [871, "     * Asserts the validity of the user name we've received in"], [872, "     * <tt>unameAttr</tt>."], [873, "     *"], [874, "     * @param unameAttr the attribute that we need to validate."], [875, "     *"], [876, "     * @return <tt>true</tt> if <tt>unameAttr</tt> contains a valid user name"], [877, "     * and <tt>false</tt> otherwise."], [879, "    private static boolean validateUsername(UsernameAttribute unameAttr)"], [881, "        String username = new String(unameAttr.getUsername());"], [885, "        if( username.length() < 1"], [886, "            || colon < 1)"], [893, ""]]}, "num_lines_added": 98, "num_lines_removed": 59}