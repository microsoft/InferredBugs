{"hash": "7d58fe7a29a321972bfaf9ee859d9f07f245b5d4", "message": "Supports address filtering for UDP host candidates.", "file_num_lines": 461, "diff_parsed": {"added": [[28, " * @author Boris Grozev"], [56, "     * The list of allowed addresses."], [57, "     */"], [58, "    private static List<InetAddress> allowedAddresses;"], [59, ""], [60, "    /**"], [61, "     * The list of blocked addresses."], [62, "     */"], [63, "    private static List<InetAddress> blockedAddresses;"], [64, ""], [65, "    /**"], [69, "    private static boolean interfaceFiltersInitialized = false;"], [70, ""], [71, "    /**"], [72, "     * A boolean value that indicates whether the host candidate address"], [73, "     * filters have been initialized or not."], [74, "     */"], [75, "    private static boolean addressFiltersInitialized = false;"], [83, "        if (!interfaceFiltersInitialized)"], [105, "        if (!interfaceFiltersInitialized)"], [122, "     * Gets the list of explicitly allowed addresses."], [123, "     * @return the list of explicitly allowed addresses."], [124, "     */"], [125, "    public static List<InetAddress> getAllowedAddresses()"], [126, "    {"], [127, "        synchronized (HostCandidateHarvester.class)"], [128, "        {"], [129, "            if (!addressFiltersInitialized)"], [130, "            {"], [131, "                initializeAddressFilters();"], [132, "            }"], [133, "        }"], [134, ""], [135, "        return allowedAddresses;"], [136, "    }"], [137, ""], [138, "    /**"], [139, "     * Gets the list of blocked addresses."], [140, "     * @return the list of blocked addresses."], [141, "     */"], [142, "    public static List<InetAddress> getBlockedAddresses()"], [143, "    {"], [144, "        synchronized (HostCandidateHarvester.class)"], [145, "        {"], [146, "            if (!addressFiltersInitialized)"], [147, "            {"], [148, "                initializeAddressFilters();"], [149, "            }"], [150, "        }"], [151, ""], [152, "        return blockedAddresses;"], [153, "    }"], [154, ""], [155, "    /**"], [156, "     * Initializes the lists of allowed and blocked addresses according to the"], [157, "     * configuration properties."], [158, "     */"], [159, "    private static void initializeAddressFilters()"], [160, "    {"], [161, "        synchronized (HostCandidateHarvester.class)"], [162, "        {"], [163, "            if (addressFiltersInitialized)"], [164, "                return;"], [165, ""], [166, "            String[] allowedAddressesStr"], [167, "                = StackProperties.getStringArray("], [168, "                        StackProperties.ALLOWED_ADDRESSES, \";\");"], [169, ""], [170, "            if (allowedAddressesStr != null)"], [171, "            {"], [172, "                for (String addressStr : allowedAddressesStr)"], [173, "                {"], [174, "                    InetAddress address;"], [175, "                    try"], [176, "                    {"], [177, "                        address = InetAddress.getByName(addressStr);"], [178, "                    }"], [179, "                    catch (Exception e)"], [180, "                    {"], [181, "                        logger.warning(\"Failed to add an allowed address: \""], [182, "                            + addressStr);"], [183, "                        continue;"], [184, "                    }"], [185, ""], [186, "                    if (allowedAddresses == null)"], [187, "                        allowedAddresses = new ArrayList<InetAddress>();"], [188, ""], [189, "                    allowedAddresses.add(address);"], [190, "                }"], [191, "            }"], [192, ""], [193, "            String[] blockedAddressesStr"], [194, "                    = StackProperties.getStringArray("], [195, "                    StackProperties.BLOCKED_ADDRESSES, \";\");"], [196, "            if (blockedAddressesStr != null)"], [197, "            {"], [198, "                for (String addressStr : blockedAddressesStr)"], [199, "                {"], [200, "                    InetAddress address;"], [201, "                    try"], [202, "                    {"], [203, "                        address = InetAddress.getByName(addressStr);"], [204, "                    }"], [205, "                    catch (Exception e)"], [206, "                    {"], [207, "                        logger.warning(\"Failed to add a blocked address: \""], [208, "                                               + addressStr);"], [209, "                        continue;"], [210, "                    }"], [211, ""], [212, "                    if (blockedAddresses == null)"], [213, "                        blockedAddresses = new ArrayList<InetAddress>();"], [214, ""], [215, "                    blockedAddresses.add(address);"], [216, "                }"], [217, "            }"], [218, ""], [219, "            addressFiltersInitialized = true;"], [220, "        }"], [221, "    }"], [222, ""], [223, "    /**"], [292, "                if (!isAddressAllowed(addr))"], [435, "     * Returns <tt>true</tt> if <tt>address</tt> is allowed to be used by this"], [436, "     * <tt>HostCandidateHarvester</tt> for the purposes of candidate allocation,"], [437, "     * and <tt>false</tt> otherwise."], [438, "     *"], [439, "     * An address is considered allowed, if"], [440, "     * 1. It is not a loopback address."], [441, "     * 2. Either no addresses have explicitly been configured allowed (via the"], [442, "     * <tt>StackProperties.ALLOWED_ADDRESSES</tt> property), or <tt>address</tt>"], [443, "     * is explicitly configured allowed."], [444, "     * 3. <tt>address</tt> is not explicitly configured blocked (via the"], [445, "     * <tt>StackProperties.BLOCKED_ADDRESSES</tt> property)."], [446, "     *"], [447, "     * @param address the address to check"], [448, "     * @return <tt>true</tt> if <tt>address</tt> is allowed to be used by this"], [449, "     * <tt>HostCandidateHarvester</tt>."], [450, "     */"], [451, "    private static boolean isAddressAllowed(InetAddress address)"], [452, "    {"], [453, "        if (address.isLoopbackAddress())"], [454, "        {"], [455, "            return false;"], [456, "        }"], [457, ""], [458, "        boolean ret = true;"], [459, "        List<InetAddress> allowed = getAllowedAddresses();"], [460, "        List<InetAddress> blocked = getBlockedAddresses();"], [461, ""], [462, "        if (allowed != null)"], [463, "            ret = allowed.contains(address);"], [464, "        if (blocked != null)"], [465, "            ret = ret && !blocked.contains(address);"], [466, ""], [467, "        return ret;"], [468, "    }"], [469, ""], [470, "    /**"], [716, "            if (interfaceFiltersInitialized)"], [719, "            interfaceFiltersInitialized = true;"], [720, ""], [721, "            // Should we hold this lock until we are done modifying the fields?"]], "deleted": [[58, "    private static boolean interfaceFiltersinitialized = false;"], [66, "        if (!interfaceFiltersinitialized)"], [88, "        if (!interfaceFiltersinitialized)"], [173, "                if (addr.isLoopbackAddress())"], [175, "                    //loopback again"], [562, "            if (interfaceFiltersinitialized)"], [565, "            interfaceFiltersinitialized = true;"]]}, "num_lines_added": 163, "num_lines_removed": 7}