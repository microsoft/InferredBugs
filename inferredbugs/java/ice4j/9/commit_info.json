{"hash": "b4a5e2eb83c1ee700219d662f26da6d795bef33c", "message": "refactor: Refactors the Component's socket API.", "file_num_lines": 468, "diff_parsed": {"added": [[127, "     * The single {@link ComponentSocket} instance for this {@link Component},"], [128, "     * which will merge the multiple sockets from the candidate/pairs."], [130, "    private final ComponentSocket componentSocket;"], [133, "     * The public view of {@link #componentSocket}, wrapped in a"], [134, "     * {@link MultiplexingDatagramSocket} for the convenience of users of the"], [135, "     * library."], [136, "     * This is the instance which should be used by applications for"], [137, "     * reading/writing application data."], [139, "    private final MultiplexingDatagramSocket socket;"], [140, ""], [141, "    /**"], [142, "     * A wrapper around {@link #socket}, kept only to help preserve the old"], [143, "     * API (see {@link LocalCandidate#getIceSocketWrapper()} and"], [144, "     * {@link CandidatePair#getIceSocketWrapper()})"], [145, "     */"], [146, "    @Deprecated"], [147, "    private final IceSocketWrapper socketWrapper;"], [166, "            componentSocket = new ComponentSocket(this);"], [167, "            socket = new MultiplexingDatagramSocket(componentSocket);"], [168, "            socketWrapper = new IceUdpSocketWrapper(socket);"], [819, "        getComponentSocket().close();"], [953, "     * @return the internal merging socket for this component. This is for"], [954, "     * ice4j use only."], [955, "     * For reading/writing application data, use {@link #getSocket()}."], [956, "     */"], [957, "    public ComponentSocket getComponentSocket()"], [958, "    {"], [959, "        return componentSocket;"], [960, "    }"], [961, ""], [962, "    /**"], [963, "     * @return the socket for this {@link Component}, which should be used for"], [964, "     * reading/writing application data."], [966, "    public MultiplexingDatagramSocket getSocket()"], [968, "        return socket;"], [973, "     * candidate (see {@link #getComponentSocket()})."], [977, "        return socketWrapper;"]], "deleted": [[127, "     * The {@link MergingDatagramSocket} instance which will serve as the"], [128, "     * single socket instance for this {@link Component}, merging received"], [129, "     * packets from all of its candidates."], [131, "    private final MergingDatagramSocket mergingDatagramSocket;"], [134, "     * A wrapper around {@link #mergingDatagramSocket}."], [136, "    private final IceUdpSocketWrapper mergingDatagramSocketWrapper;"], [155, "            mergingDatagramSocket = new ComponentSocket(this);"], [156, "            mergingDatagramSocketWrapper"], [157, "                = new IceUdpSocketWrapper("], [158, "                        new MultiplexingDatagramSocket("], [159, "                            mergingDatagramSocket));"], [810, "        getSocket().close();"], [944, "     * @return the single socket for this {@link Component} which should be"], [945, "     * used for reading and writing data."], [947, "    public MergingDatagramSocket getSocket()"], [949, "        return mergingDatagramSocket;"], [954, "     * candidate (see {@link #getSocket()})."], [955, "     * @deprecated Use {@link #getSocket()} directly. This is only introduced"], [956, "     * to ease the transition of applications which are already written to use"], [957, "     * an {@link IceSocketWrapper} instance."], [959, "    @Deprecated"], [962, "        return mergingDatagramSocketWrapper;"]]}, "num_lines_added": 37, "num_lines_removed": 22}