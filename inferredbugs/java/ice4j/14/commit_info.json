{"hash": "ba7e30c18980556f126e5e72ecbdb637616dd1bf", "message": "Fix thread leak when Agent is freed before termination timer triggered. (#150)\n\n* Fix thread leak when Agent is freed before termination timer triggered.\r\n\r\n* Use ScheduledExecutorService to terminate agent with timeout\r\n\r\n* Fixed formatting to match project code style.", "file_num_lines": 1277, "diff_parsed": {"added": [[26, "import java.util.concurrent.*;"], [119, "     *  The ScheduledExecutorService to execute planned agent termination"], [120, "     */"], [121, "    private static final ScheduledExecutorService agentTerminationScheduler;"], [122, ""], [123, "    static"], [124, "    {"], [125, "        final ScheduledThreadPoolExecutor terminationExecutor"], [126, "            = new ScheduledThreadPoolExecutor(0);"], [127, "        terminationExecutor.setKeepAliveTime(10, TimeUnit.SECONDS);"], [128, "        terminationExecutor.setRemoveOnCancelPolicy(true);"], [129, "        agentTerminationScheduler"], [130, "            = Executors.unconfigurableScheduledExecutorService("], [131, "                terminationExecutor);"], [132, "    }"], [133, ""], [134, "    /**"], [135, "     * Termination task which will be scheduled with timeout"], [136, "     */"], [137, "    private final Runnable terminationRunnable = new Runnable()"], [138, "    {"], [139, "        @Override"], [140, "        public void run()"], [141, "        {"], [142, "            terminate(IceProcessingState.TERMINATED);"], [143, "            synchronized (terminationFutureSyncRoot)"], [144, "            {"], [145, "                terminationFuture = null;"], [146, "            }"], [147, "        }"], [148, "    };"], [149, ""], [150, "    /**"], [282, "     * The scheduled task to terminate this <tt>Agent</tt>"], [284, "    private ScheduledFuture<?> terminationFuture;"], [287, "     * The object used to synchronize access to {@link #terminationFuture}."], [289, "    private final Object terminationFutureSyncRoot = new Object();"], [2186, "     * Initializes and starts the {@link #terminationFuture}"], [2190, "        /*"], [2191, "         * RFC 5245 says: Once ICE processing has reached the Completed state for"], [2192, "         * all peers for media streams using those candidates, the agent SHOULD"], [2193, "         * wait an additional three seconds, and then it MAY cease responding to"], [2194, "         * checks or generating triggered checks on that candidate.  It MAY free"], [2195, "         * the candidate at that time."], [2196, "         * <p>"], [2197, "         * This method is scheduling such a termination."], [2198, "         */"], [2199, "        boolean runTerminationImmediately = false;"], [2200, ""], [2201, "        synchronized (terminationFutureSyncRoot)"], [2203, "            if (terminationFuture == null)"], [2205, "                long terminationDelay"], [2206, "                    = Integer.getInteger("], [2207, "                        StackProperties.TERMINATION_DELAY,"], [2208, "                        DEFAULT_TERMINATION_DELAY);"], [2209, ""], [2210, "                if (terminationDelay > 0)"], [2211, "                {"], [2212, "                    terminationFuture"], [2213, "                        = agentTerminationScheduler.schedule("], [2214, "                            terminationRunnable,"], [2215, "                            terminationDelay,"], [2216, "                            TimeUnit.MILLISECONDS);"], [2217, "                }"], [2218, "                else"], [2219, "                {"], [2220, "                    runTerminationImmediately = true;"], [2221, "                }"], [2224, ""], [2225, "        if (runTerminationImmediately)"], [2226, "        {"], [2227, "            terminationRunnable.run();"], [2228, "        }"], [2365, "        // cancel termination timer in case agent is freed"], [2366, "        // before termination timer is triggered"], [2367, "        synchronized (terminationFutureSyncRoot)"], [2368, "        {"], [2369, "            if (terminationFuture != null)"], [2370, "            {"], [2371, "                terminationFuture.cancel(true);"], [2372, "                terminationFuture = null;"], [2373, "            }"], [2374, "        }"], [2375, ""]], "deleted": [[249, "     * The thread that we use for moving from COMPLETED into a TERMINATED state."], [251, "    private TerminationThread terminationThread;"], [254, "     * The object used to synchronize access to {@link #terminationThread}."], [256, "    private final Object terminationThreadSyncRoot = new Object();"], [2153, "     * Initializes and starts the {@link TerminationThread}"], [2157, "        synchronized (terminationThreadSyncRoot)"], [2159, "            if (terminationThread == null)"], [2161, "                terminationThread = new TerminationThread();"], [2162, "                terminationThread.start();"], [2712, ""], [2713, "    /**"], [2714, "     * RFC 5245 says: Once ICE processing has reached the Completed state for"], [2715, "     * all peers for media streams using those candidates, the agent SHOULD"], [2716, "     * wait an additional three seconds, and then it MAY cease responding to"], [2717, "     * checks or generating triggered checks on that candidate.  It MAY free"], [2718, "     * the candidate at that time."], [2719, "     * <p>"], [2720, "     * This <tt>TerminationThread</tt> is scheduling such a termination and"], [2721, "     * garbage collection in three seconds."], [2722, "     */"], [2723, "    private class TerminationThread"], [2724, "        extends Thread"], [2725, "    {"], [2726, ""], [2727, "        /**"], [2728, "         * Creates a new termination timer."], [2729, "         */"], [2730, "        private TerminationThread()"], [2731, "        {"], [2732, "            super(\"TerminationThread\");"], [2733, "        }"], [2734, ""], [2735, "        /**"], [2736, "         * Waits for a period of three seconds (or whatever termination"], [2737, "         * interval the user has specified) and then moves this <tt>Agent</tt>"], [2738, "         * into the terminated state and frees all non-nominated candidates."], [2739, "         */"], [2740, "        @Override"], [2741, "        public synchronized void run()"], [2742, "        {"], [2743, "            long terminationDelay"], [2744, "                = Integer.getInteger("], [2745, "                StackProperties.TERMINATION_DELAY,"], [2746, "                DEFAULT_TERMINATION_DELAY);"], [2747, ""], [2748, "            if (terminationDelay >= 0)"], [2749, "            {"], [2750, "                try"], [2751, "                {"], [2752, "                    wait(terminationDelay);"], [2753, "                }"], [2754, "                catch (InterruptedException ie)"], [2755, "                {"], [2756, "                    logger.log(Level.FINEST, \"Interrupted while waiting. Will \""], [2757, "                                   + \"speed up termination\","], [2758, "                               ie);"], [2759, "                }"], [2760, "            }"], [2761, ""], [2762, "            terminate(IceProcessingState.TERMINATED);"], [2763, ""], [2764, "            synchronized (terminationThreadSyncRoot)"], [2765, "            {"], [2766, "                terminationThread = null;"], [2767, "            }"], [2768, "        }"], [2769, "    }"]]}, "num_lines_added": 84, "num_lines_removed": 67}