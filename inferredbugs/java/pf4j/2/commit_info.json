{"hash": "0cf3fc42ff8d3a71ba10bb599a5ec64885c86681", "message": "added support for PluginManager.getExtensionClassNames(String pluginId) and simplify enable/disable plugin", "file_num_lines": 496, "diff_parsed": {"added": [[17, "import ro.fortsoft.pf4j.util.*;"], [19, "import java.io.File;"], [20, "import java.io.FileFilter;"], [21, "import java.io.IOException;"], [22, "import java.util.*;"], [169, ""], [179, "            PluginState pluginState = pluginWrapper.getPluginState();"], [180, "            if ((PluginState.DISABLED != pluginState) && (PluginState.STARTED != pluginState)) {"], [182, "                    PluginDescriptor pluginDescriptor = pluginWrapper.getDescriptor();"], [205, "    \tif (PluginState.STARTED == pluginWrapper.getPluginState()) {"], [210, "        if (PluginState.DISABLED == pluginWrapper.getPluginState()) {"], [211, "            // automatically enable plugin on manual plugin start"], [212, "            if (!enablePlugin(pluginId)) {"], [213, "                return pluginWrapper.getPluginState();"], [214, "            }"], [243, "            if (PluginState.STARTED == pluginWrapper.getPluginState()) {"], [245, "                    PluginDescriptor pluginDescriptor = pluginWrapper.getDescriptor();"], [268, "    \tif (PluginState.STOPPED == pluginWrapper.getPluginState()) {"], [274, "        if (PluginState.DISABLED == pluginWrapper.getPluginState()) {"], [356, "    \t\tif (PluginState.STOPPED != state) {"], [384, ""], [395, "        if (!plugins.containsKey(pluginId)) {"], [396, "            throw new IllegalArgumentException(String.format(\"Unknown pluginId %s\", pluginId));"], [399, ""], [400, "        PluginWrapper pluginWrapper = plugins.get(pluginId);"], [401, "        PluginDescriptor pluginDescriptor = pluginWrapper.getDescriptor();"], [402, ""], [403, "        if (PluginState.DISABLED == getPlugin(pluginId).getPluginState()) {"], [404, "        \tlog.debug(\"Already disabled plugin '{}:{}'\", pluginDescriptor.getPluginId(), pluginDescriptor.getVersion());"], [405, "           \treturn true;"], [406, "        }"], [407, ""], [408, "        if (PluginState.STOPPED == stopPlugin(pluginId)) {"], [409, "            getPlugin(pluginId).setPluginState(PluginState.DISABLED);"], [410, "            extensionFinder.reset();"], [411, ""], [412, "            if (disabledPlugins.add(pluginId)) {"], [413, "                try {"], [414, "                    FileUtils.writeLines(disabledPlugins, new File(pluginsDirectory, \"disabled.txt\"));"], [415, "                } catch (IOException e) {"], [416, "                    log.error(\"Failed to disable plugin {}\", pluginId, e);"], [417, "                    return false;"], [418, "                }"], [420, "            log.info(\"Disabled plugin '{}:{}'\", pluginDescriptor.getPluginId(), pluginDescriptor.getVersion());"], [421, ""], [422, "            return true;"], [430, "        if (!plugins.containsKey(pluginId)) {"], [431, "            throw new IllegalArgumentException(String.format(\"Unknown pluginId %s\", pluginId));"], [432, "        }"], [433, ""], [434, "        PluginWrapper pluginWrapper = plugins.get(pluginId);"], [435, "        PluginDescriptor pluginDescriptor = pluginWrapper.getDescriptor();"], [436, ""], [437, "        if (PluginState.DISABLED != getPlugin(pluginId).getPluginState()) {"], [438, "            log.debug(\"Plugin plugin '{}:{}' is not disabled\", pluginDescriptor.getPluginId(), pluginDescriptor.getVersion());"], [443, "            if (disabledPlugins.remove(pluginId)) {"], [444, "                FileUtils.writeLines(disabledPlugins, new File(pluginsDirectory, \"disabled.txt\"));"], [445, "            }"], [448, "            return false;"], [451, "        getPlugin(pluginId).setPluginState(PluginState.CREATED);"], [452, "        extensionFinder.reset();"], [453, ""], [454, "        log.info(\"Enabled plugin '{}:{}'\", pluginDescriptor.getPluginId(), pluginDescriptor.getVersion());"], [455, ""], [456, "        return true;"], [524, "    public Set<String> getExtensionClassNames(String pluginId) {"], [525, "        return extensionFinder.findClassNames(pluginId);"], [526, "    }"], [527, ""], [528, "    @Override"], [574, "    \treturn new DefaultExtensionFinder(this);"], [681, ""], [687, ""]], "deleted": [[15, "import java.io.File;"], [16, "import java.io.FileFilter;"], [17, "import java.io.IOException;"], [18, "import java.util.ArrayList;"], [19, "import java.util.Collections;"], [20, "import java.util.HashMap;"], [21, "import java.util.Iterator;"], [22, "import java.util.List;"], [23, "import java.util.Map;"], [24, ""], [28, "import ro.fortsoft.pf4j.util.AndFileFilter;"], [29, "import ro.fortsoft.pf4j.util.CompoundClassLoader;"], [30, "import ro.fortsoft.pf4j.util.DirectoryFileFilter;"], [31, "import ro.fortsoft.pf4j.util.FileUtils;"], [32, "import ro.fortsoft.pf4j.util.HiddenFilter;"], [33, "import ro.fortsoft.pf4j.util.NotFileFilter;"], [34, "import ro.fortsoft.pf4j.util.Unzip;"], [35, "import ro.fortsoft.pf4j.util.ZipFileFilter;"], [94, "     * A compound class loader of resolved plugins."], [95, "     */"], [96, "    protected CompoundClassLoader compoundClassLoader;"], [97, ""], [98, "    /**"], [182, "        \tcompoundClassLoader.addLoader(pluginWrapper.getPluginClassLoader());"], [197, "            PluginDescriptor pluginDescriptor = pluginWrapper.getDescriptor();"], [198, "            if (!isPluginDisabled(pluginDescriptor.getPluginId())) {"], [222, "    \tif (pluginWrapper.getPluginState().equals(PluginState.STARTED)) {"], [227, "        // test for disabled plugin"], [228, "        if (isPluginDisabled(pluginDescriptor.getPluginId())) {"], [229, "            // do nothing"], [230, "            return pluginWrapper.getPluginState();"], [259, "        \tPluginDescriptor pluginDescriptor = pluginWrapper.getDescriptor();"], [260, "            if (!isPluginDisabled(pluginDescriptor.getPluginId())) {"], [284, "    \tif (pluginWrapper.getPluginState().equals(PluginState.STOPPED)) {"], [290, "        if (isPluginDisabled(pluginDescriptor.getPluginId())) {"], [372, "    \t\tif (!PluginState.STOPPED.equals(state)) {"], [394, "    \t\t\tcompoundClassLoader.removeLoader(classLoader);"], [411, "        if (plugins.containsKey(pluginId)) {"], [412, "            log.debug(\"Unloading plugin {}\", pluginId);"], [413, "            unloadPlugin(pluginId);"], [416, "        if (disabledPlugins.add(pluginId)) {"], [417, "            try {"], [418, "                FileUtils.writeLines(disabledPlugins, new File(pluginsDirectory, \"disabled.txt\"));"], [419, "                return true;"], [420, "            } catch (IOException e) {"], [421, "                log.error(\"Failed to disable plugin {}\", pluginId, e);"], [430, "        if (!disabledPlugins.remove(pluginId)) {"], [431, "            log.debug(\"Plugin {} was not disabled\", pluginId);"], [436, "            FileUtils.writeLines(disabledPlugins, new File(pluginsDirectory, \"disabled.txt\"));"], [437, "            return true;"], [442, "        return false;"], [555, "    \treturn new DefaultExtensionFinder(compoundClassLoader);"], [615, "        compoundClassLoader = new CompoundClassLoader();"], [663, "        /*"], [669, "        */"], [720, "        \tcompoundClassLoader.addLoader(pluginWrapper.getPluginClassLoader());"]]}, "num_lines_added": 73, "num_lines_removed": 56}