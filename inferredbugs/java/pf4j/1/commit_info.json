{"hash": "07550657ef0412eae460e57439a8fc543b75233f", "message": "work on plugin dependecy", "file_num_lines": 180, "diff_parsed": {"added": [[52, "    private Map<String, PluginWrapper> plugins;"], [67, "    private List<PluginWrapper> unresolvedPlugins;"], [72, "    private List<PluginWrapper> resolvedPlugins;"], [77, "    private List<PluginWrapper> disabledPlugins;"], [96, "        plugins = new HashMap<String, PluginWrapper>();"], [99, "        unresolvedPlugins = new ArrayList<PluginWrapper>();"], [100, "        resolvedPlugins = new ArrayList<PluginWrapper>();"], [101, "        disabledPlugins = new ArrayList<PluginWrapper>();"], [110, "    public List<PluginWrapper> getPlugins() {"], [111, "        return new ArrayList<PluginWrapper>(plugins.values());"], [114, "\tpublic List<PluginWrapper> getResolvedPlugins() {"], [118, "\tpublic PluginWrapper getPlugin(String pluginId) {"], [122, "    public List<PluginWrapper> getUnresolvedPlugins() {"], [126, "\tpublic List<PluginWrapper> getDisabledPlugins() {"], [134, "    \tList<PluginWrapper> resolvedPlugins = getResolvedPlugins();"], [135, "        for (PluginWrapper pluginWrapper : resolvedPlugins) {"], [137, "            \tLOG.info(\"Start plugin '\" + pluginWrapper.getDescriptor().getPluginId() + \"'\");"], [138, "\t\t\t\tpluginWrapper.getPlugin().start();"], [140, "\t\t\t\tLOG.error(e.getMessage(), e);"], [149, "    \tList<PluginWrapper> resolvedPlugins = getResolvedPlugins();"], [150, "        for (PluginWrapper pluginWrapper : resolvedPlugins) {"], [152, "            \tLOG.info(\"Stop plugin '\" + pluginWrapper.getDescriptor().getPluginId() + \"'\");"], [153, "            \tpluginWrapper.getPlugin().stop();"], [155, "\t\t\t\tLOG.error(e.getMessage(), e);"], [187, "            } catch (PluginException e) {"], [199, "        try {"], [200, "\t\t\tresolvePlugins();"], [201, "\t\t} catch (PluginException e) {"], [202, "\t\t\tLOG.error(e.getMessage(), e);"], [203, "\t\t}"], [213, "\tpublic <T> List<T> getExtensions(Class<T> type) {"], [214, "\t\tList<ExtensionWrapper<T>> extensionsWrapper = extensionFinder.find(type);"], [215, "\t\tList<T> extensions = new ArrayList<T>(extensionsWrapper.size());"], [216, "\t\tfor (ExtensionWrapper<T> extensionWrapper : extensionsWrapper) {"], [217, "\t\t\textensions.add(extensionWrapper.getInstance());"], [218, "\t\t}"], [219, ""], [220, "\t\treturn extensions;"], [223, "\tprivate void loadPlugin(String fileName) throws PluginException {"], [252, "        PluginLoader pluginLoader = new PluginLoader(this, pluginDescriptor, pluginDirectory);"], [256, "        // create the plugin wrapper"], [257, "        LOG.debug(\"Creating wrapper for plugin '\" + pluginPath + \"'\");"], [258, "        PluginWrapper pluginWrapper = new PluginWrapper(pluginDescriptor, pluginPath, pluginLoader.getPluginClassLoader());"], [259, "        LOG.debug(\"Created wrapper '\" + pluginWrapper + \"' for plugin '\" + pluginPath + \"'\");"], [264, "        plugins.put(pluginId, pluginWrapper);"], [265, "        unresolvedPlugins.add(pluginWrapper);"], [292, "\tprivate void resolvePlugins() throws PluginException {"], [293, "\t\tresolveDependencies();"], [296, "\tprivate void resolveDependencies() throws PluginException {"], [298, "\t\tresolvedPlugins = dependencyResolver.getSortedPlugins();"], [299, "        for (PluginWrapper pluginWrapper : resolvedPlugins) {"], [300, "        \tunresolvedPlugins.remove(pluginWrapper);"], [301, "        \tuberClassLoader.addLoader(pluginWrapper.getPluginClassLoader());"], [302, "        \tLOG.info(\"Plugin '\" + pluginWrapper.getDescriptor().getPluginId() + \"' resolved\");"]], "deleted": [[18, "import java.lang.reflect.Constructor;"], [19, "import java.lang.reflect.Modifier;"], [33, ""], [55, "    private Map<String, Plugin> plugins;"], [70, "    private List<Plugin> unresolvedPlugins;"], [75, "    private List<Plugin> resolvedPlugins;"], [80, "    private List<Plugin> disabledPlugins;"], [99, "        plugins = new HashMap<String, Plugin>();"], [102, "        unresolvedPlugins = new ArrayList<Plugin>();"], [103, "        resolvedPlugins = new ArrayList<Plugin>();"], [104, "        disabledPlugins = new ArrayList<Plugin>();"], [113, "    public List<Plugin> getPlugins() {"], [114, "        return new ArrayList<Plugin>(plugins.values());"], [117, "\tpublic List<Plugin> getResolvedPlugins() {"], [121, "\tpublic Plugin getPlugin(String pluginId) {"], [125, "    public List<Plugin> getUnresolvedPlugins() {"], [129, "\tpublic List<Plugin> getDisabledPlugins() {"], [137, "    \tList<Plugin> resolvedPlugins = getResolvedPlugins();"], [138, "        for (Plugin plugin : resolvedPlugins) {"], [140, "\t\t\t\tplugin.start();"], [142, "\t\t\t\t// TODO Auto-generated catch block"], [143, "\t\t\t\te.printStackTrace();"], [152, "    \tList<Plugin> resolvedPlugins = getResolvedPlugins();"], [153, "        for (Plugin plugin : resolvedPlugins) {"], [155, "\t\t\t\tplugin.stop();"], [157, "\t\t\t\t// TODO Auto-generated catch block"], [158, "\t\t\t\te.printStackTrace();"], [181, "\t\t\t\te.printStackTrace();"], [191, "            } catch (Exception e) {"], [193, "                e.printStackTrace();"], [204, "        resolvePlugins();"], [214, "\tpublic <T> List<ExtensionWrapper<T>> getExtensions(Class<T> type) {"], [215, "\t\treturn extensionFinder.find(type);"], [218, "\tprivate void loadPlugin(String fileName) throws Exception {"], [247, "        PluginWrapper pluginWrapper = new PluginWrapper(pluginDescriptor);"], [248, "        PluginLoader pluginLoader = new PluginLoader(this, pluginWrapper, pluginDirectory);"], [252, "        // set some variables in plugin wrapper"], [253, "        pluginWrapper.setPluginPath(pluginPath);"], [254, "        pluginWrapper.setPluginClassLoader(pluginLoader.getPluginClassLoader());"], [255, ""], [256, "        // create the plugin instance"], [257, "        LOG.debug(\"Creating instance for plugin '\" + pluginPath + \"'\");"], [258, "        Plugin plugin = getPluginInstance(pluginWrapper, pluginLoader);"], [259, "        LOG.debug(\"Created instance '\" + plugin + \"' for plugin '\" + pluginPath + \"'\");"], [264, "        plugins.put(pluginId, plugin);"], [265, "        unresolvedPlugins.add(plugin);"], [292, "    private Plugin getPluginInstance(PluginWrapper pluginWrapper, PluginLoader pluginLoader)"], [293, "    \t\tthrows Exception {"], [294, "    \tString pluginClassName = pluginWrapper.getDescriptor().getPluginClass();"], [295, ""], [296, "        ClassLoader pluginClassLoader = pluginLoader.getPluginClassLoader();"], [297, "        Class<?> pluginClass = pluginClassLoader.loadClass(pluginClassName);"], [298, ""], [299, "        // once we have the class, we can do some checks on it to ensure"], [300, "        // that it is a valid implementation of a plugin."], [301, "        int modifiers = pluginClass.getModifiers();"], [302, "        if (Modifier.isAbstract(modifiers) || Modifier.isInterface(modifiers)"], [303, "                || (!Plugin.class.isAssignableFrom(pluginClass))) {"], [304, "            throw new PluginException(\"The plugin class '\" + pluginClassName"], [305, "                    + \"' is not compatible.\");"], [306, "        }"], [307, ""], [308, "        // create the plugin instance"], [309, "        Constructor<?> constructor = pluginClass.getConstructor(new Class[] { PluginWrapper.class });"], [310, "        Plugin plugin = (Plugin) constructor.newInstance(new Object[] { pluginWrapper });"], [311, ""], [312, "        return plugin;"], [313, "    }"], [314, ""], [315, "\tprivate void resolvePlugins() {"], [316, "        resolveDependencies();"], [319, "\tprivate void resolveDependencies() {"], [321, "        resolvedPlugins = dependencyResolver.getSortedDependencies();"], [322, "        for (Plugin plugin : resolvedPlugins) {"], [323, "        \tunresolvedPlugins.remove(plugin);"], [324, "        \tuberClassLoader.addLoader(plugin.getWrapper().getPluginClassLoader());"]]}, "num_lines_added": 54, "num_lines_removed": 76}