{"hash": "e80ae328688cac8876cea441e6f36fc053373979", "message": "Allow inspection of disabled plugins by not stopping resource loading\n\nThe differences between a DISABLED plugin and a STARTED plugin are:\n\n1. a STARTED plugin has executed Plugin.start(), a DISABLED plugin has not\n2. a STARTED plugin may contribute extension instances, a DISABLED plugin may not\n\nDISABLED plugins still have valid classloaders and their classes can be manually\nloaded and explored, but the resource loading - which is important for inspection\nhas been handicapped by the DISABLED check.\n\nInstead of preventing loading the extension indexes for DISABLED plugins, the\nextension finder should only return ExtensionWrappers for STARTED plugins.", "file_num_lines": 123, "diff_parsed": {"added": [[59, ""], [60, "            PluginWrapper pluginWrapper = pluginManager.getPlugin(pluginId);"], [61, "            if (PluginState.STARTED != pluginWrapper.getPluginState()) {"], [62, "            \tcontinue;"], [63, "            }"], [64, ""], [101, "    \treadIndexFiles();"], [105, "    @Override"], [106, "\tpublic void pluginStateChanged(PluginStateEvent event) {"], [145, "        List<PluginWrapper> plugins = pluginManager.getPlugins();"], [146, "        for (PluginWrapper plugin : plugins) {"], [175, "    private boolean isExtensionPoint(Class<?> type) {"]], "deleted": [[98, "    public void pluginStateChanged(PluginStateEvent event) {"], [137, "        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();"], [138, "        for (PluginWrapper plugin : startedPlugins) {"], [167, "    private boolean isExtensionPoint(Class type) {"]]}, "num_lines_added": 12, "num_lines_removed": 4}