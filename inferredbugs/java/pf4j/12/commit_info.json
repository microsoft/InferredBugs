{"hash": "6e15379429bf23fd1d0ecc674944d09907ed0890", "message": "Close the input stream after read it and remove redundant util method", "file_num_lines": 56, "diff_parsed": {"added": [[70, "        if (destination.exists() && destination.isDirectory()) {"], [71, "            FileUtils.delete(destination.toPath());"], [74, "    \ttry (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(source))) {"], [75, "            ZipEntry zipEntry;"], [76, "            while ((zipEntry = zipInputStream.getNextEntry()) != null) {"], [77, "                try {"], [78, "                    File file = new File(destination, zipEntry.getName());"], [79, ""], [80, "                    // create intermediary directories - sometimes zip don't add them"], [81, "                    File dir = new File(file.getParent());"], [82, "                    dir.mkdirs();"], [83, ""], [84, "                    if (zipEntry.isDirectory()) {"], [85, "                        file.mkdirs();"], [86, "                    } else {"], [87, "                        byte[] buffer = new byte[1024];"], [88, "                        int length;"], [89, "                        try (FileOutputStream fos = new FileOutputStream(file)) {"], [90, "                            while ((length = zipInputStream.read(buffer)) >= 0) {"], [91, "                                fos.write(buffer, 0, length);"], [92, "                            }"], [93, "                        }"], [94, "                    }"], [95, "                } catch (FileNotFoundException e) {"], [96, "                    log.error(\"File '{}' not found\", zipEntry.getName());"], [97, "                }"]], "deleted": [[70, "        removeDirectory(destination);"], [71, ""], [72, "    \tZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(source));"], [73, ""], [74, "\t    ZipEntry zipEntry;"], [75, "    \twhile ((zipEntry = zipInputStream.getNextEntry()) != null) {"], [76, "\t        try {"], [77, "\t\t        File file = new File(destination, zipEntry.getName());"], [78, ""], [79, "        \t\t// create intermediary directories - sometimes zip don't add them"], [80, "        \t\tFile dir = new File(file.getParent());"], [81, "        \t\tdir.mkdirs();"], [82, ""], [83, "        \t\tif (zipEntry.isDirectory()) {"], [84, "\t\t            file.mkdirs();"], [85, "        \t\t} else {"], [86, "\t\t            byte[] buffer = new byte[1024];"], [87, "        \t\t    int length = 0;"], [88, "\t\t            FileOutputStream fos = new FileOutputStream(file);"], [89, ""], [90, "        \t\t    while ((length = zipInputStream.read(buffer)) >= 0) {"], [91, "\t\t            \tfos.write(buffer, 0, length);"], [92, "        \t\t    }"], [93, ""], [94, "\t\t            fos.close();"], [95, "                }"], [96, "    \t    } catch (FileNotFoundException e) {"], [97, "    \t    \tlog.error(\"File '{}' not found\", zipEntry.getName());"], [98, "    \t    }"], [99, "\t    }"], [100, ""], [101, "    \tzipInputStream.close();"], [102, "    }"], [103, ""], [104, "    private boolean removeDirectory(File directory) {"], [105, "        if (!directory.exists()) {"], [106, "            return true;"], [109, "        if (!directory.isDirectory()) {"], [110, "            return false;"], [111, "        }"], [112, ""], [113, "        File[] files = directory.listFiles();"], [114, "        for (File file : files) {"], [115, "            if (file.isDirectory()) {"], [116, "                removeDirectory(file);"], [117, "            } else {"], [118, "                file.delete();"], [121, ""], [122, "        return directory.delete();"]]}, "num_lines_added": 26, "num_lines_removed": 49}