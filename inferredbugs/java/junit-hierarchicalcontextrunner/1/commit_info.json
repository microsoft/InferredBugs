{"hash": "3bbf4be4c6cf6f5f3fb2c5556a98afa81e8b4bde", "message": "#3 Adding support for hierarchical rules", "file_num_lines": 126, "diff_parsed": {"added": [[5, "import org.junit.Rule;"], [8, "import org.junit.rules.MethodRule;"], [9, "import org.junit.rules.TestRule;"], [19, "import java.util.ArrayList;"], [84, "            final TestClass tClass = TestClassPool.forClass(instance.getClass());"], [96, "            final TestClass tClass = TestClassPool.forClass(instance.getClass());"], [104, "    protected List<org.junit.rules.MethodRule> rules(Object target) {"], [105, "        final List<MethodRule> rules = new ArrayList<MethodRule>();"], [106, "        for (int i = instances.size() - 1; i >= 0; i--) {"], [107, "            final TestClass tClass = TestClassPool.forClass(instances.get(i).getClass());"], [108, "            rules.addAll(tClass.getAnnotatedFieldValues(instances.get(i), Rule.class, MethodRule.class));"], [109, "        }"], [110, "        return rules;"], [111, "    }"], [112, ""], [113, "    @Override"], [114, "    protected List<TestRule> getTestRules(Object target) {"], [115, "        final List<TestRule> rules = new ArrayList<TestRule>();"], [116, "        for (int i = instances.size() - 1; i >= 0; i--) {"], [117, "            final TestClass tClass = TestClassPool.forClass(instances.get(i).getClass());"], [118, "            rules.addAll(tClass.getAnnotatedMethodValues(instances.get(i), Rule.class, TestRule.class));"], [119, "            rules.addAll(tClass.getAnnotatedFieldValues(instances.get(i), Rule.class, TestRule.class));"], [120, "        }"], [121, "        return rules;"], [122, "    }"], [123, ""], [124, "    @Override"], [126, "        instances = createHierarchicalFixtures();"], [131, "     * Creates new fixtures for the entire class hierarchy for running a test."], [136, "    protected LinkedList<Object> createHierarchicalFixtures() throws Exception {"], [137, "        final Stack<Class<?>> classHierarchy = getClassHierarchy();"], [138, "        LinkedList<Object> instances = new LinkedList<Object>();"], [139, ""], [140, "        // Top level class has empty constructor"], [141, "        instances.add(classHierarchy.pop().newInstance());"], [142, ""], [143, "        // Inner class constructors require the enclosing instance"], [144, "        while (!classHierarchy.empty()) {"], [145, "            final Object enclosingInstance = instances.getLast();"], [146, "            final Class<?> innerClass = classHierarchy.pop();"], [147, "            instances.add(createInnerInstance(enclosingInstance, innerClass));"], [149, ""], [150, "        return instances;"]], "deleted": [[80, "            final TestClass tClass = new TestClass(instance.getClass());"], [92, "            final TestClass tClass = new TestClass(instance.getClass());"], [101, "        ensureHierarchicalFixturesAreValid();"], [106, "     * Returns new fixtures for the entire class hierarchy for running a test."], [111, "    protected synchronized void ensureHierarchicalFixturesAreValid() throws Exception {"], [112, "        if (instances == null) {"], [113, "            final Stack<Class<?>> classHierarchy = getClassHierarchy();"], [114, "            instances = new LinkedList<Object>();"], [115, ""], [116, "            // Top level class has empty constructor"], [117, "            instances.add(classHierarchy.pop().newInstance());"], [118, ""], [119, "            // Inner class constructors require the enclosing instance"], [120, "            while (!classHierarchy.empty()) {"], [121, "                final Object enclosingInstance = instances.getLast();"], [122, "                final Class<?> innerClass = classHierarchy.pop();"], [123, "                instances.add(createInnerInstance(enclosingInstance, innerClass));"], [124, "            }"]]}, "num_lines_added": 43, "num_lines_removed": 18}