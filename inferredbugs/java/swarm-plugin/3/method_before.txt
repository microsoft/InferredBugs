    public void doCreateSlave(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name,
                              @QueryParameter String description, @QueryParameter int executors,
                              @QueryParameter String remoteFsRoot, @QueryParameter String labels,
                              @QueryParameter String secret, @QueryParameter Node.Mode mode,
                              @QueryParameter(fixEmpty = true) String hash,
                              @QueryParameter boolean deleteExistingClients) throws IOException {
        if (!getSwarmSecret().equals(secret)) {
            rsp.setStatus(SC_FORBIDDEN);
            return;
        }

        try {
            Jenkins jenkins = Jenkins.getInstance();

            jenkins.checkPermission(SlaveComputer.CREATE);

            List<NodeProperty<Node>> nodeProperties = new ArrayList<>();

            String[] toolLocations = req.getParameterValues("toolLocation");
            if (!ArrayUtils.isEmpty(toolLocations)) {
                List<ToolLocation> parsedToolLocations = parseToolLocations(toolLocations);
                nodeProperties.add(new ToolLocationNodeProperty(parsedToolLocations));
            }

            String[] environmentVariables = req.getParameterValues("environmentVariable");
            if (!ArrayUtils.isEmpty(environmentVariables)) {
                List<EnvironmentVariablesNodeProperty.Entry> parsedEnvironmentVariables =
                        parseEnvironmentVariables(environmentVariables);
                nodeProperties.add(
                        new EnvironmentVariablesNodeProperty(parsedEnvironmentVariables));
            }

            if (hash == null && jenkins.getNode(name) != null && !deleteExistingClients) {
                // this is a legacy client, they won't be able to pick up the new name, so throw them away
                // perhaps they can find another master to connect to
                rsp.setStatus(SC_CONFLICT);
                rsp.setContentType("text/plain; UTF-8");
                rsp.getWriter().printf(
                        "A slave called '%s' already exists and legacy clients do not support name disambiguation%n",
                        name);
                return;
            }
            if (hash != null) {
                // try to make the name unique. Swarm clients are often replicated VMs, and they may have the same name.
                name = name + '-' + hash;
            }
            // check for existing connections
            {
                Node n = jenkins.getNode(name);
                if (n != null && !deleteExistingClients) {
                    Computer c = n.toComputer();
                    if (c != null && c.isOnline()) {
                        // this is an existing connection, we'll only cause issues
                        // if we trample over an online connection
                        rsp.setStatus(SC_CONFLICT);
                        rsp.setContentType("text/plain; UTF-8");
                        rsp.getWriter().printf("A slave called '%s' is already created and on-line%n", name);
                        return;
                    }
                }
            }

            SwarmSlave slave =
                    new SwarmSlave(
                            name,
                            "Swarm slave from "
                                    + req.getRemoteHost()
                                    + ((description == null || description.isEmpty())
                                            ? ""
                                            : (": " + description)),
                            remoteFsRoot,
                            String.valueOf(executors),
                            mode,
                            "swarm " + Util.fixNull(labels),
                            nodeProperties);

            jenkins.addNode(slave);
            rsp.setContentType("text/plain; charset=iso-8859-1");
            Properties props = new Properties();
            props.put("name", name);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            props.store(bos, "");
            byte[] response = bos.toByteArray();
            rsp.setContentLength(response.length);
            ServletOutputStream outputStream = rsp.getOutputStream();
            outputStream.write(response);
            outputStream.flush();
        } catch (FormException e) {
            e.printStackTrace();
        }
    }