{"hash": "ca3ebf8e6bce8bfaf377bd22b329cf74f9e7150f", "message": "refactoring to remove repeated code", "file_num_lines": 447, "diff_parsed": {"added": [[140, "  private byte [] _readArray(final int items, final JBBPBitNumber bitNumber) throws IOException {"], [141, "    final boolean readByteArray = bitNumber == null;"], [142, ""], [148, "        final int next = readByteArray ? read() : readBits(bitNumber);"], [169, "      if (readByteArray){"], [170, "        final int read = this.read(buffer, 0, items);"], [171, "        if (read != items) {"], [172, "          throw new EOFException(\"Have read only \" + read + \" byte(s) instead of \" + items + \" byte(s)\");"], [173, "        }"], [174, "      }else{"], [182, "      }"], [186, ""], [187, "  /**"], [188, "   * Read array of bit sequence."], [189, "   *"], [190, "   * @param bitNumber bit number for each bit sequence item, must be 1..8"], [191, "   * @param items number of items to be read, if less than zero then read whole"], [192, "   * stream till the end"], [193, "   * @return array of read bit items as a byte array"], [194, "   * @throws IOException it will be thrown for any transport problem during the"], [195, "   * operation"], [196, "   */"], [197, "  public byte[] readBitsArray(final int items, final JBBPBitNumber bitNumber) throws IOException {"], [198, "    return _readArray(items, bitNumber);"], [199, "  }"], [211, "    return _readArray(items, null);"]], "deleted": [[140, "  /**"], [141, "   * Read array of bit sequence."], [142, "   *"], [143, "   * @param bitNumber bit number for each bit sequence item, must be 1..8"], [144, "   * @param items number of items to be read, if less than zero then read whole"], [145, "   * stream till the end"], [146, "   * @return array of read bit items as a byte array"], [147, "   * @throws IOException it will be thrown for any transport problem during the"], [148, "   * operation"], [149, "   */"], [150, "  public byte[] readBitsArray(final int items, final JBBPBitNumber bitNumber) throws IOException {"], [156, "        final int next = readBits(bitNumber);"], [198, "    int pos = 0;"], [199, "    if (items < 0) {"], [200, "      byte[] buffer = new byte[INITIAL_ARRAY_BUFFER_SIZE];"], [201, "      // till end"], [202, "      while (true) {"], [203, "        final int next = read();"], [204, "        if (next < 0) {"], [205, "          break;"], [206, "        }"], [207, "        if (buffer.length == pos) {"], [208, "          final byte[] newbuffer = new byte[buffer.length << 1];"], [209, "          System.arraycopy(buffer, 0, newbuffer, 0, buffer.length);"], [210, "          buffer = newbuffer;"], [211, "        }"], [212, "        buffer[pos++] = (byte) next;"], [213, "      }"], [214, "      if (buffer.length == pos) {"], [215, "        return buffer;"], [216, "      }"], [217, "      final byte[] result = new byte[pos];"], [218, "      System.arraycopy(buffer, 0, result, 0, pos);"], [219, "      return result;"], [220, "    }"], [221, "    else {"], [222, "      // number"], [223, "      final byte[] buffer = new byte[items];"], [224, "      final int read = this.read(buffer, 0, items);"], [225, "      if (read != items) {"], [226, "        throw new EOFException(\"Have read only \" + read + \" byte(s) instead of \" + items + \" byte(s)\");"], [227, "      }"], [228, "      return buffer;"], [229, "    }"]]}, "num_lines_added": 26, "num_lines_removed": 44}