{"hash": "cf8e65c6bad3e65535e6515d65b9391565cedfd6", "message": "fixedinput bit stream byte array reading method", "file_num_lines": 426, "diff_parsed": {"added": [[22, " * A Filter stream implementing a countable bit stream interface. It allows read"], [23, " * not only bytes but also bits from an input stream. The Class is not a"], [24, " * thread-safe one."], [57, "   * Flag shows that bit operations must be processed for MSB0 (most significant"], [58, "   * bit 0) mode."], [64, "   *"], [73, "   *"], [86, "   * Read array of boolean values."], [87, "   *"], [88, "   * @param items number of items to be read, if less than zero then read whole"], [89, "   * stream till the end"], [90, "   * @return read values as boolean array"], [91, "   * @throws IOException it will be thrown for transport error"], [92, "   */"], [93, "  public boolean[] readBooleanArray(final int items) throws IOException {"], [94, "    int pos = 0;"], [95, "    byte[] buffer;"], [96, "    if (items < 0) {"], [97, "      buffer = new byte[INITIAL_ARRAY_BUFFER_SIZE];"], [98, "      // till end"], [99, "      while (true) {"], [100, "        final int read = this.read(buffer, pos, buffer.length - pos);"], [101, "        if (read < 0) {"], [102, "          break;"], [103, "        }"], [104, "        pos += read;"], [105, ""], [106, "        if (buffer.length == pos) {"], [107, "          final byte[] newbuffer = new byte[buffer.length << 1];"], [108, "          System.arraycopy(buffer, 0, newbuffer, 0, buffer.length);"], [109, "          buffer = newbuffer;"], [110, "        }"], [111, "      }"], [112, "    }"], [113, "    else {"], [114, "      // number"], [115, "      buffer = new byte[items];"], [116, "      int len = items;"], [117, "      while (len > 0) {"], [118, "        final int read = this.read(buffer, pos, len);"], [119, "        if (read < 0) {"], [120, "          throw new EOFException(\"Have read only \" + pos + \" bit portions instead of \" + items);"], [121, "        }"], [122, "        pos += read;"], [123, "        len -= read;"], [124, "      }"], [125, "    }"], [126, ""], [127, "    final boolean[] result = new boolean[pos];"], [128, "    for (int i = 0; i < pos; i++) {"], [129, "      result[i] = buffer[i] != 0;"], [130, "    }"], [131, "    return result;"], [132, "  }"], [133, ""], [134, "  /**"], [136, "   *"], [138, "   * @param items number of items to be read, if less than zero then read whole"], [139, "   * stream till the end"], [141, "   * @throws IOException it will be thrown for any transport problem during the"], [142, "   * operation"], [184, "   *"], [185, "   * @param items number of items to be read, if less than zero then read whole"], [186, "   * stream till the end"], [218, "      final int read = this.read(buffer, 0, items);"], [219, "      if (read != items) {"], [220, "        throw new EOFException(\"Have read only \" + read + \" bit portions instead of \" + items);"], [228, "   *"], [229, "   * @param items number of items to be read from the input stream, if less than"], [230, "   * zero then all stream till the end will be read"], [357, "   *"], [422, "   *"], [431, "   *"], [440, "   *"], [449, "   *"], [460, "   *"], [464, "   * @throws IllegalArgumentException it will be thrown for wrong number of bits"], [465, "   * to be read"], [469, ""], [473, ""], [515, "  /**"], [516, "   * Read a boolean value saved as a byte."], [517, "   *"], [518, "   * @return true if the value is not zero, false if the value is zero"], [519, "   * @throws IOException it will be thrown for transport errors."], [520, "   */"], [521, "  public boolean readBoolean() throws IOException {"], [522, "    final int read = this.read();"], [523, "    if (read < 0) {"], [524, "      throw new EOFException(\"Can't read a boolean value\");"], [525, "    }"], [526, "    return read != 0;"], [527, "  }"], [528, ""], [579, "   *"], [596, "   *"], [613, "   * Align read byte. If there are unread bits in inside bit buffer, it will be"], [614, "   * aligned to read the next byte from stream instead of reading from the bit"], [615, "   * buffer."], [618, "    if (this.bitsInBuffer > 0 && this.bitsInBuffer < 8) {"], [625, "   *"], [639, "      int readBytes = 0;"], [640, "      int tmpoffset = offset;"], [641, "      int tmplen = length;"], [642, "      while (tmplen > 0) {"], [643, "        int read = this.in.read(array, tmpoffset, tmplen);"], [644, "        if (read < 0) {"], [645, "          readBytes = readBytes == 0 ? read : readBytes;"], [648, "        tmplen -= read;"], [649, "        tmpoffset += read;"], [650, "        readBytes += read;"], [651, "        this.byteCounter += read;"], [652, "      }"], [653, ""], [654, "      if (this.msb0) {"], [655, "        int index = offset;"], [656, "        int number = readBytes;"], [657, "        while (number > 0) {"], [658, "          array[index] = JBBPUtils.reverseByte(array[index]);"], [659, "          index++;"], [660, "          number--;"], [661, "        }"], [663, ""]], "deleted": [[22, " * A Filter stream implementing a countable bit stream interface. It allows read not only bytes but also bits from an input stream. The Class is not a thread-safe one."], [55, "   * Flag shows that bit operations must be processed for MSB0 (most significant bit 0) mode."], [83, "   * @param items number of items to be read, if less than zero then read whole stream till the end"], [85, "   * @throws IOException it will be thrown for any transport problem during the operation"], [127, "   * @param items number of items to be read, if less than zero then read whole stream till the end"], [159, "      for (int i = 0; i < items; i++) {"], [160, "        final int next = read();"], [161, "        if (next < 0) {"], [162, "          throw new EOFException(\"Have read only \" + i + \" bit portions instead of \" + items);"], [163, "        }"], [164, "        buffer[i] = (byte) next;"], [172, "   * @param items number of items to be read from the input stream, if less than zero then all stream till the end will be read"], [400, "   * @throws IllegalArgumentException it will be thrown for wrong number of bits to be read"], [404, ""], [408, ""], [532, "   * Align read byte. If there are unread bits in inside bit buffer, it will be aligned to read the next byte from stream instead of reading from the bit buffer."], [535, "    if (this.bitsInBuffer > 0 && this.bitsInBuffer<8) {"], [555, "      int readBytes;"], [556, "      readBytes = 0;"], [557, "      int i = offset;"], [558, "      int y = length;"], [559, "      while (y > 0) {"], [560, "        int value = this.read();"], [561, "        if (value < 0) {"], [564, "        array[i++] = (byte) value;"], [565, "        y--;"], [566, "        readBytes++;"]]}, "num_lines_added": 123, "num_lines_removed": 27}