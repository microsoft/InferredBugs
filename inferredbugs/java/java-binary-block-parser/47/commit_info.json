{"hash": "64e7362777574a151edc54fd44ae5939ae82c4e5", "message": "minor refactoring", "file_num_lines": 760, "diff_parsed": {"added": [[32, "  /**"], [33, "   * An Auxiliary class to be used for class field ordering in save operations."], [34, "   */"], [35, "  private static final class OrderedField implements Comparable<OrderedField> {"], [36, "    final int order;"], [37, "    final Field field;"], [38, ""], [39, "    OrderedField(final int order, final Field field) {"], [40, "      this.order = order;"], [41, "      this.field = field;"], [42, "    }"], [43, ""], [44, "    @Override"], [45, "    public boolean equals(final Object obj) {"], [46, "      if (obj == null) return false;"], [47, "      if (obj == this) return true;"], [48, "      if (obj instanceof OrderedField){"], [49, "        return this.field == ((OrderedField)obj).field;"], [50, "      }"], [51, "      return false;"], [52, "    }"], [53, ""], [54, "    @Override"], [55, "    public int hashCode() {"], [56, "      return this.order;"], [57, "    }"], [58, ""], [59, "    public int compareTo(final OrderedField o) {"], [60, "      return this.order < o.order ? -1 : 1;"], [61, "    }"], [62, "  }"], [952, "  /**"], [953, "   * Inside JBBPOut.Bin command creates cached list of fields of a saved class, the method allows to reset the inside cache."], [954, "   */"], [964, "  /**"], [965, "   * Save fields of an object marked by Bin annotation. Fields will be ordered through {@link Bin#order()} field, NB! By default Java doesn't keep field order."], [966, "   * Ordered fields of class will be saved into internal cache for speed but the cache can be reset through {@link #resetInsideClassCache()}"], [967, "   * @param object an object to be saved into stream, must not be null"], [968, "   * @return the context"], [969, "   * @throws IOException it will be thrown for any transport error"], [970, "   * @see #resetInsideClassCache()"], [971, "   * @see Bin"], [972, "   */"], [975, "      JBBPUtils.assertNotNull(object, \"Object must not be null\");"], [976, ""], [1047, "  /**"], [1048, "   * INside auxiliary method to read object field value."], [1049, "   * @param obj an object which field is read"], [1050, "   * @param field a field to be read"], [1051, "   * @return a value from the field of the object"], [1052, "   * @throws JBBPException if the field can't be read"], [1053, "   */"], [1063, "  /**"], [1064, "   * Check that a field defined as an array."], [1065, "   * @param field a field which is checked"], [1066, "   * @throws IllegalArgumentException if the field is not an array"], [1067, "   */"], [1068, "  private static void assertFieldArray(final Field field) {"], [1069, "    if (!field.getType().isArray()) {"], [1074, "  /**"], [1075, "   * Inside auxiliary method to write a field of an object."], [1076, "   * @param obj the object which field under processing, must not be null"], [1077, "   * @param field the field to be written, must not be null"], [1078, "   * @param annotation the annotation to be used as data source about the field, must not be null"], [1079, "   * @throws IOException  the exception will be thrown if there is any error"], [1080, "   */"], [1180, "            assertFieldArray(field);"], [1202, "            assertFieldArray(field);"], [1215, "              assertFieldArray(field);"], [1234, "              assertFieldArray(field);"], [1259, "            assertFieldArray(field);"], [1283, "            assertFieldArray(field);"], [1316, "            assertFieldArray(field);"], [1324, "            throw new Error(\"Unexpected situation for field type, contact developer [\" + type + ']');"]], "deleted": [[26, "import java.util.logging.Level;"], [27, "import java.util.logging.Logger;"], [934, ""], [952, ""], [953, "        final class OrderedField implements Comparable<OrderedField> {"], [954, ""], [955, "          final int order;"], [956, "          final Field field;"], [957, ""], [958, "          OrderedField(final int order, final Field field) {"], [959, "            this.order = order;"], [960, "            this.field = field;"], [961, "          }"], [962, ""], [963, "          public int compareTo(final OrderedField o) {"], [964, "            return this.order < o.order ? -1 : 1;"], [965, "          }"], [966, "        }"], [967, ""], [1030, "  private static void assertFieldArray(final Field field, final Class<?> fieldType) {"], [1031, "    if (!fieldType.isArray()) {"], [1135, "            assertFieldArray(field, fieldType);"], [1157, "            assertFieldArray(field, fieldType);"], [1170, "              assertFieldArray(field, fieldType);"], [1189, "              assertFieldArray(field, fieldType);"], [1214, "            assertFieldArray(field, fieldType);"], [1238, "            assertFieldArray(field, fieldType);"], [1271, "            assertFieldArray(field, fieldType);"], [1279, "            throw new Error(\"Unsupported field type [\" + type + ']');"]]}, "num_lines_added": 74, "num_lines_removed": 29}