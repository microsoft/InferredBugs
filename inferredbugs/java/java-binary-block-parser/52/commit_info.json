{"hash": "30cd77cac59b71e52af2d91e7e555e81f2e2b29d", "message": "improved test", "file_num_lines": 549, "diff_parsed": {"added": [[78, "    return this.callRead(instance, new JBBPBitInputStream(new ByteArrayInputStream(array)));"], [79, "  }"], [80, ""], [81, "  private Object callRead(final Object instance, final JBBPBitInputStream inStream) throws Exception {"], [82, "    instance.getClass().getMethod(\"read\", JBBPBitInputStream.class).invoke(instance, inStream);"], [88, "    final JBBPBitOutputStream bitout = new JBBPBitOutputStream(bout);"], [89, "    instance.getClass().getMethod(\"write\", JBBPBitOutputStream.class).invoke(instance, bitout);"], [90, "    bitout.close();"], [94, "  private void callWrite(final Object instance, final JBBPBitOutputStream outStream) throws Exception {"], [95, "    final ByteArrayOutputStream bout = new ByteArrayOutputStream();"], [96, "    instance.getClass().getMethod(\"write\", JBBPBitOutputStream.class).invoke(instance, outStream);"], [97, "  }"], [98, ""], [552, "  @Test"], [553, "  public void testReadWrite_NetPacket() throws Exception {"], [554, "    final Object ethernetHeader = compileAndMakeInstance(\"byte[6] MacDestination;\""], [555, "        + \"byte[6] MacSource;\""], [556, "        + \"ushort EtherTypeOrLength;\");"], [557, ""], [558, "    final Object ipHeader = compileAndMakeInstance(\"bit:4 InternetHeaderLength;\""], [559, "        + \"bit:4 Version;\""], [560, "        + \"bit:2 ECN;\""], [561, "        + \"bit:6 DSCP;\""], [562, "        + \"ushort TotalPacketLength;\""], [563, "        + \"ushort Identification;\""], [564, "        + \"ushort IPFlagsAndFragmentOffset;\""], [565, "        + \"ubyte TTL;\""], [566, "        + \"ubyte Protocol;\""], [567, "        + \"ushort HeaderChecksum;\""], [568, "        + \"int SourceAddress;\""], [569, "        + \"int DestinationAddress;\""], [570, "        + \"byte [(InternetHeaderLength-5)*4] Options;\");"], [571, ""], [572, "    final Object tcpHeader = compileAndMakeInstance(\"ushort SourcePort;\""], [573, "        + \"ushort DestinationPort;\""], [574, "        + \"int SequenceNumber;\""], [575, "        + \"int AcknowledgementNumber;\""], [576, "        + \"bit:1 NONCE;\""], [577, "        + \"bit:3 RESERVED;\""], [578, "        + \"bit:4 HLEN;\""], [579, "        + \"bit:1 FIN;\""], [580, "        + \"bit:1 SYN;\""], [581, "        + \"bit:1 RST;\""], [582, "        + \"bit:1 PSH;\""], [583, "        + \"bit:1 ACK;\""], [584, "        + \"bit:1 URG;\""], [585, "        + \"bit:1 ECNECHO;\""], [586, "        + \"bit:1 CWR;\""], [587, "        + \"ushort WindowSize;\""], [588, "        + \"ushort TCPCheckSum;\""], [589, "        + \"ushort UrgentPointer;\""], [590, "        + \"byte [$$-HLEN*4] Option;\");"], [591, ""], [592, "    final byte[] netPacketEtalon = loadResource(\"tcppacket.bin\");"], [593, ""], [594, "    final JBBPBitInputStream inStream = new JBBPBitInputStream(new ByteArrayInputStream(netPacketEtalon));"], [595, ""], [596, "    callRead(ethernetHeader, inStream);"], [597, "    assertArrayEquals(\"Destination MAC\", new byte[]{(byte) 0x60, (byte) 0x67, (byte) 0x20, (byte) 0xE1, (byte) 0xF9, (byte) 0xF8}, getField(ethernetHeader, \"macdestination\", byte[].class));"], [598, "    assertArrayEquals(\"Source MAC\", new byte[]{(byte) 0x00, (byte) 0x26, (byte) 0x44, (byte) 0x74, (byte) 0xFE, (byte) 0x66}, getField(ethernetHeader, \"macsource\", byte[].class));"], [599, "    final int etherTypeOrLength = getField(ethernetHeader, \"ethertypeorlength\", Character.class).charValue();"], [600, "    assertEquals(\"Ethernet type or length\", 0x800, etherTypeOrLength);"], [601, ""], [602, "    inStream.resetCounter();"], [603, "    callRead(ipHeader, inStream);"], [604, ""], [605, "    assertEquals(\"IP Version\", 4, getField(ipHeader, \"version\", Byte.class).intValue());"], [606, ""], [607, "    final int internetHeaderLength = getField(ipHeader, \"internetheaderlength\", Byte.class).intValue();"], [608, "    assertEquals(\"Length of the IP header (in 4 byte items)\", 5, internetHeaderLength);"], [609, "    assertEquals(\"Differentiated Services Code Point\", 0, getField(ipHeader, \"dscp\", Byte.class).intValue());"], [610, "    assertEquals(\"Explicit Congestion Notification\", 0, getField(ipHeader, \"ecn\", Byte.class).intValue());"], [611, ""], [612, "    final int ipTotalPacketLength = getField(ipHeader, \"totalpacketlength\", Character.class);"], [613, ""], [614, "    assertEquals(\"Entire IP packet size, including header and data, in bytes\", 159, ipTotalPacketLength);"], [615, "    assertEquals(\"Identification\", 30810, getField(ipHeader, \"identification\", Character.class).charValue());"], [616, ""], [617, "    final int ipFlagsAndFragmentOffset = getField(ipHeader, \"ipflagsandfragmentoffset\", Character.class);"], [618, ""], [619, "    assertEquals(\"Extracted IP flags\", 0x2, ipFlagsAndFragmentOffset >>> 13);"], [620, "    assertEquals(\"Extracted Fragment offset\", 0x00, ipFlagsAndFragmentOffset & 0x1FFF);"], [621, ""], [622, "    assertEquals(\"Time To Live\", 0x39, getField(ipHeader, \"ttl\", Character.class).charValue());"], [623, "    assertEquals(\"Protocol (RFC-790)\", 0x06, getField(ipHeader, \"protocol\", Character.class).charValue());"], [624, "    assertEquals(\"IPv4 Header Checksum\", 0x7DB6, getField(ipHeader, \"headerchecksum\", Character.class).charValue());"], [625, "    assertEquals(\"Source IP address\", 0xD5C7B393, getField(ipHeader, \"sourceaddress\", Integer.class).intValue());"], [626, "    assertEquals(\"Destination IP address\", 0xC0A80145, getField(ipHeader, \"destinationaddress\", Integer.class).intValue());"], [627, ""], [628, "    assertEquals(0, getField(ipHeader, \"options\", byte[].class).length);"], [629, ""], [630, "    inStream.resetCounter();"], [631, "    callRead(tcpHeader, inStream);"], [632, ""], [633, "    assertEquals(40018, getField(tcpHeader, \"sourceport\", Character.class).charValue());"], [634, "    assertEquals(56344, getField(tcpHeader, \"destinationport\", Character.class).charValue());"], [635, "    assertEquals(0xE0084171, getField(tcpHeader, \"sequencenumber\", Integer.class).intValue());"], [636, "    assertEquals(0xAB616F71, getField(tcpHeader, \"acknowledgementnumber\", Integer.class).intValue());"], [637, ""], [638, "    assertEquals(0, getField(tcpHeader, \"fin\", Byte.class).intValue());"], [639, "    assertEquals(0, getField(tcpHeader, \"syn\", Byte.class).intValue());"], [640, "    assertEquals(0, getField(tcpHeader, \"rst\", Byte.class).intValue());"], [641, "    assertEquals(1, getField(tcpHeader, \"psh\", Byte.class).intValue());"], [642, "    assertEquals(1, getField(tcpHeader, \"ack\", Byte.class).intValue());"], [643, "    assertEquals(0, getField(tcpHeader, \"urg\", Byte.class).intValue());"], [644, "    assertEquals(0, getField(tcpHeader, \"ecnecho\", Byte.class).intValue());"], [645, "    assertEquals(0, getField(tcpHeader, \"cwr\", Byte.class).intValue());"], [646, "    assertEquals(0, getField(tcpHeader, \"nonce\", Byte.class).intValue());"], [647, "    assertEquals(0, getField(tcpHeader, \"reserved\", Byte.class).intValue());"], [648, ""], [649, "    assertEquals(5, getField(tcpHeader, \"hlen\", Byte.class).intValue());"], [650, ""], [651, "    assertEquals(40880, getField(tcpHeader, \"windowsize\", Character.class).charValue());"], [652, "    assertEquals(0x8BB6, getField(tcpHeader, \"tcpchecksum\", Character.class).charValue());"], [653, "    assertEquals(0, getField(tcpHeader, \"urgentpointer\", Character.class).charValue());"], [654, ""], [655, "    assertEquals(0, getField(tcpHeader, \"option\", byte[].class).length);"], [656, ""], [657, "    final int payloadDataLength = ipTotalPacketLength - (internetHeaderLength * 4) - (int) inStream.getCounter();"], [658, "    final byte[] data = inStream.readByteArray(payloadDataLength);"], [659, "    assertEquals(119, data.length);"], [660, ""], [661, "    assertFalse(inStream.hasAvailableData());"], [662, ""], [663, "    final ByteArrayOutputStream bos = new ByteArrayOutputStream();"], [664, "    final JBBPBitOutputStream outStream = new JBBPBitOutputStream(bos);"], [665, ""], [666, "    callWrite(ethernetHeader, outStream);"], [667, "    outStream.resetCounter();"], [668, "    callWrite(ipHeader, outStream);"], [669, "    outStream.resetCounter();"], [670, "    callWrite(tcpHeader, outStream);"], [671, ""], [672, "    outStream.write(data);"], [673, ""], [674, "    outStream.close();"], [675, "    assertArrayEquals(netPacketEtalon, bos.toByteArray());"], [676, "  }"], [677, ""]], "deleted": [[78, "    instance.getClass().getMethod(\"read\", JBBPBitInputStream.class).invoke(instance, new JBBPBitInputStream(new ByteArrayInputStream(array)));"], [84, "    instance.getClass().getMethod(\"write\", JBBPBitOutputStream.class).invoke(instance, new JBBPBitOutputStream(bout));"], [85, "    bout.close();"]]}, "num_lines_added": 139, "num_lines_removed": 3}