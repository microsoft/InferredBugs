{"hash": "486872367c2e261bba4b48278751561f0cc29a2a", "message": "Flawed caching strategy", "file_num_lines": 431, "diff_parsed": {"added": [[7, "import java.util.HashMap;"], [9, "import java.util.Map;"], [99, "    private static WildcardType UNBOUNDED_WILDCARD = new WildcardType(null, true);"], [103, "    private Map<String, TypeVariable> typeParameters = new HashMap<String, TypeVariable>();"], [248, "        this.typeParameters.clear();"], [249, ""], [273, "        int end = scanReferenceTypeEnd();"], [274, "        String signature = this.signature;"], [275, "        NameTable.Slice slice = names.createSlice(signature, pos, end);"], [276, "        Type type = names.getType(slice);"], [277, ""], [278, "        if (type != null) {"], [279, "            this.pos = end;"], [280, "            return type;"], [281, "        }"], [282, ""], [293, "            int suffixEnd = advanceNameEnd();"], [294, "            name = names.wrap(name, signature.substring(mark, suffixEnd), true);"], [307, "        this.pos++; // ;"], [308, "        type = type != null ? type : new ClassType(name);"], [309, "        names.storeType(slice, type);"], [310, "        return type;"], [313, "    private int scanReferenceTypeEnd() {"], [314, "        String signature = this.signature;"], [315, "        int i = pos;"], [316, "        int open = 0;"], [317, ""], [318, "        while (i < signature.length()) {"], [319, "            switch (signature.charAt(i++)) {"], [320, "                case '<':"], [321, "                    open++;"], [322, "                    break;"], [323, "                case '>':"], [324, "                    open--;"], [325, "                    break;"], [326, "                case ';':"], [327, "                    if (open == 0) {"], [328, "                        return i;"], [329, "                    }"], [330, "            }"], [331, "        }"], [332, ""], [333, "        throw new IllegalArgumentException(\"Invalid signature, class type is missing terminator\");"], [334, "    }"], [350, ""], [351, "        int end = scanListEnd();"], [352, "        NameTable.Slice slice = names.createSlice(signature, pos, end);"], [353, "        Type[] typeList = names.getTypeList(slice);"], [354, "        if (typeList != null) {"], [355, "            this.pos = end;"], [356, "            return typeList;"], [357, "        }"], [358, ""], [367, "        return names.storeTypeList(slice, types.toArray(new Type[types.size()]));"], [368, "    }"], [369, ""], [370, "    private int scanListEnd() {"], [371, "        String signature = this.signature;"], [372, "        int i = pos;"], [373, "        int open = 0;"], [374, ""], [375, "        while (i < signature.length()) {"], [376, "            switch (signature.charAt(i++)) {"], [377, "                case '<':"], [378, "                    open++;"], [379, "                    break;"], [380, "                case '>':"], [381, "                    if (--open < 0) {"], [382, "                        return i;"], [383, "                    }"], [384, ""], [385, "                    break;"], [386, "            }"], [387, "        }"], [388, ""], [389, "        throw new IllegalArgumentException(\"Invalid signature, class type is missing terminator\");"], [400, "                return parseWildCard(false);"], [403, "                return parseWildCard(true);"], [411, "    private Type parseWildCard(boolean isExtends) {"], [412, "        int end = scanReferenceTypeEnd();"], [413, "        NameTable.Slice slice = names.createSlice(signature, pos, end);"], [414, "        Type type = names.getType(slice);"], [415, "        if (type != null) {"], [416, "            pos = end;"], [417, "            return type;"], [418, "        }"], [419, ""], [420, "        Type bound = parseReferenceType();"], [421, "        return names.storeType(slice,  new WildcardType(bound, isExtends));"], [422, "    }"], [423, ""], [426, "        String signature = this.signature;"], [433, "        int end = scanTypeParameterEnd();"], [434, "        NameTable.Slice slice = names.createSlice(signature, start, end);"], [435, "        TypeVariable type = (TypeVariable) names.getType(slice);"], [436, "        if (type != null) {"], [437, "            return type;"], [438, "        }"], [439, ""], [456, "        type = new TypeVariable(name, bounds.toArray(new Type[bounds.size()]));"], [457, "        names.storeType(slice, type);"], [458, "        typeParameters.put(type.identifier(), type);"], [459, "        return type;"], [460, "    }"], [461, ""], [462, "    private int scanTypeParameterEnd() {"], [463, "        String signature = this.signature;"], [464, "        int i = pos;"], [465, "        int open = 0;"], [466, ""], [467, "        while (i < signature.length() - 1) {"], [468, "            char c = signature.charAt(i++);"], [469, "            switch (c) {"], [470, "                case ':': {"], [471, "                    char peek = signature.charAt(i);"], [472, "                    if (peek != 'T' && peek != 'L' && peek != '[') {"], [473, "                        return i;"], [474, "                    }"], [475, "                    break;"], [476, "                }"], [477, "                case '<':"], [478, "                    open++;"], [479, "                    break;"], [480, "                case '>':"], [481, "                    open--;"], [482, "                    break;"], [483, "                case ';':"], [484, "                    if (open == 0) {"], [485, "                        char peek = signature.charAt(i);"], [486, "                        if (peek != ':') {"], [487, "                            return i;"], [488, "                        }"], [489, "                    }"], [490, "                    break;"], [491, "            }"], [492, "        }"], [493, ""], [494, "        throw new IllegalArgumentException(\"Invalid signature, class type is missing terminator\");"], [511, "                return parseTypeVariable();"], [515, "                return parseArrayType();"], [521, "    private Type parseArrayType() {"], [522, "        int mark = this.pos;"], [523, "        int end = scanReferenceTypeEnd();"], [524, "        NameTable.Slice slice = names.createSlice(signature, mark, end);"], [525, ""], [526, "        Type type = names.getType(slice);"], [527, "        if (type != null) {"], [528, "            pos = end;"], [529, "            return type;"], [530, "        }"], [531, ""], [532, "        int last = advanceNot('[');"], [533, "        type = new ArrayType(parseJavaType(), last - mark);"], [534, "        names.storeType(slice, type);"], [535, "        return type;"], [536, "    }"], [537, ""], [538, "    private Type parseTypeVariable() {"], [539, "        String name = names.intern(signature.substring(pos + 1, advancePast(';')));"], [540, "        Type type = typeParameters.get(name);"], [541, "        return type == null ? new TypeVariable(name) : type;"], [542, "    }"], [543, ""], [598, "        MethodSignature sig1 = parser.parseMethodSignature(\"<U:Ljava/lang/Foo;>(Ljava/lang/Class<TU;>;TU;)Ljava/lang/Class<+TU;>;\");"], [599, "        MethodSignature sig2 = parser.parseMethodSignature(\"<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;Ljava/lang/Class<TK;>;Ljava/lang/Class<TV;>;)Ljava/util/Map<TK;TV;>;\");"], [600, "        MethodSignature sig3 = parser.parseMethodSignature(\"<T:Ljava/lang/Object;>(Ljava/util/Collection<-TT;>;[TT;)Z\");"], [601, "       MethodSignature sig4 = parser.parseMethodSignature(\"(Ljava/util/Collection<*>;Ljava/util/Collection<*>;)Z\");"], [602, "      MethodSignature sig7 = parser.parseMethodSignature(\"()Lcom/sun/xml/internal/bind/v2/model/impl/ElementInfoImpl<Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Field;Ljava/lang/reflect/Method;>.PropertyImpl;\");"], [603, "        ClassSignature sig5 = parser.parseClassSignature(\"<C:Lio/undertow/server/protocol/framed/AbstractFramedChannel<TC;TR;TS;>;R:Lio/undertow/server/protocol/framed/AbstractFramedStreamSourceChannel<TC;TR;TS;>;S:Lio/undertow/server/protocol/framed/AbstractFramedStreamSinkChannel<TC;TR;TS;>;>Ljava/lang/Object;Lorg/xnio/channels/ConnectedChannel;\");"], [604, "        ClassSignature sig6 = parser.parseClassSignature(\"Lcom/apple/laf/AquaUtils$RecyclableSingleton<Ljavax/swing/text/LayeredHighlighter$LayerPainter;>;\");"], [605, "        System.out.println(sig1);"], [606, "        System.out.println(sig2);"], [607, "        System.out.println(sig3);"], [608, "        System.out.println(sig4);"], [609, "        System.out.println(sig5);"], [610, "        System.out.println(sig6);"], [611, "       System.out.println(sig7);"], [612, ""], [613, "//        BufferedReader reader = new BufferedReader(new FileReader(\"/Users/jason/sigmethods.txt\"));"], [614, "//        String line;"], [615, "//        while ((line = reader.readLine()) != null) {"], [616, "//            try {"], [617, "//                System.out.println(parser.parseMethodSignature(line));"], [618, "//            } catch (Exception e) {"], [619, "//                System.err.println(line);"], [620, "//                e.printStackTrace(System.err);"], [621, "//                System.exit(-1);"], [622, "//            }"], [623, "//        }"]], "deleted": [[4, "import java.io.FileNotFoundException;"], [98, "    private static WildcardType UNBOUNDED_WILDCARD = new WildcardType(null, null);"], [271, "        Type type = null;"], [280, "            int end = advanceNameEnd();"], [281, "            name = names.wrap(name, signature.substring(mark, end), true);"], [294, "        advancePast(';');"], [295, "        return type != null ? type : new ClassType(name);"], [321, "        return types.toArray(new Type[types.size()]);"], [332, "                Type lowerBound = parseReferenceType();"], [333, "                return new WildcardType(lowerBound, null);"], [336, "                Type upperBound = parseReferenceType();"], [337, "                return new WildcardType(null, upperBound);"], [354, "        String signature = this.signature;"], [370, "        return new TypeVariable(name, bounds.toArray(new Type[bounds.size()]));"], [387, "                String name = names.intern(signature.substring(mark + 1, advancePast(';')));"], [388, "                return new TypeVariable(name);"], [392, "                int last = advanceNot('[');"], [393, "                return new ArrayType(parseJavaType(), last - mark);"], [453, "//        MethodSignature sig1 = parser.parseMethodSignature(\"<U:Ljava/lang/Object;>(Ljava/lang/Class<TU;>;)Ljava/lang/Class<+TU;>;\");"], [454, "//        MethodSignature sig2 = parser.parseMethodSignature(\"<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;Ljava/lang/Class<TK;>;Ljava/lang/Class<TV;>;)Ljava/util/Map<TK;TV;>;\");"], [455, "//        MethodSignature sig3 = parser.parseMethodSignature(\"<T:Ljava/lang/Object;>(Ljava/util/Collection<-TT;>;[TT;)Z\");"], [456, "//        MethodSignature sig4 = parser.parseMethodSignature(\"(Ljava/util/Collection<*>;Ljava/util/Collection<*>;)Z\");"], [457, "      //MethodSignature sig7 = parser.parseMethodSignature(\"()Lcom/sun/xml/internal/bind/v2/model/impl/ElementInfoImpl<Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Field;Ljava/lang/reflect/Method;>.PropertyImpl;\");"], [458, "//        ClassSignature sig5 = parser.parseClassSignature(\"<C:Lio/undertow/server/protocol/framed/AbstractFramedChannel<TC;TR;TS;>;R:Lio/undertow/server/protocol/framed/AbstractFramedStreamSourceChannel<TC;TR;TS;>;S:Lio/undertow/server/protocol/framed/AbstractFramedStreamSinkChannel<TC;TR;TS;>;>Ljava/lang/Object;Lorg/xnio/channels/ConnectedChannel;\");"], [459, "//        ClassSignature sig6 = parser.parseClassSignature(\"Lcom/apple/laf/AquaUtils$RecyclableSingleton<Ljavax/swing/text/LayeredHighlighter$LayerPainter;>;\");"], [460, "//        System.out.println(sig1);"], [461, "//        System.out.println(sig2);"], [462, "//        System.out.println(sig3);"], [463, "//        System.out.println(sig4);"], [464, "//        System.out.println(sig5);"], [465, "//        System.out.println(sig6);"], [466, "       // System.out.println(sig7);"], [467, ""], [468, "        BufferedReader reader = new BufferedReader(new FileReader(\"/Users/jason/sigmethods.txt\"));"], [469, "        String line;"], [470, "        while ((line = reader.readLine()) != null) {"], [471, "            try {"], [472, "                System.out.println(parser.parseMethodSignature(line));"], [473, "            } catch (Exception e) {"], [474, "                System.err.println(line);"], [475, "                e.printStackTrace(System.err);"], [476, "                System.exit(-1);"], [477, "            }"], [478, "        }"]]}, "num_lines_added": 189, "num_lines_removed": 44}