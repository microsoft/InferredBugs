{"hash": "9940cb59824d5b1d6400890b818a4bfeb38f810e", "message": "Upgraded mime4j to version 0.6\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@750894 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 176, "diff_parsed": {"added": [[37, "import java.nio.ByteBuffer;"], [38, "import java.nio.CharBuffer;"], [45, "import org.apache.james.mime4j.field.FieldName;"], [49, "import org.apache.james.mime4j.message.Header;"], [50, "import org.apache.james.mime4j.message.MessageWriter;"], [52, "import org.apache.james.mime4j.parser.Field;"], [53, "import org.apache.james.mime4j.util.ByteArrayBuffer;"], [54, "import org.apache.james.mime4j.util.ByteSequence;"], [67, "    private static ByteArrayBuffer encode(Charset charset, String string) {"], [68, "        ByteBuffer encoded = charset.encode(CharBuffer.wrap(string));"], [69, "        ByteArrayBuffer bab = new ByteArrayBuffer(encoded.remaining());"], [70, "        bab.append(encoded.array(), encoded.position(), encoded.remaining());"], [71, "        return bab;"], [72, "    }"], [73, ""], [74, "    private static void writeBytes(ByteArrayBuffer b, OutputStream out) throws IOException {"], [75, "        out.write(b.buffer(), 0, b.length());"], [76, "    }"], [77, ""], [78, "    private static void writeBytes(ByteSequence b, OutputStream out) throws IOException {"], [79, "        if (b instanceof ByteArrayBuffer) {"], [80, "            writeBytes((ByteArrayBuffer) b, out);"], [81, "        } else {"], [82, "            out.write(b.toByteArray());"], [83, "        }"], [84, "    }"], [85, ""], [86, "    private static final ByteArrayBuffer CR_LF = encode(MIME.DEFAULT_CHARSET, \"\\r\\n\");"], [87, "    private static final ByteArrayBuffer TWO_DASHES = encode(MIME.DEFAULT_CHARSET, \"--\");"], [88, ""], [107, "                FieldName.CONTENT_TYPE);"], [128, "                FieldName.CONTENT_TYPE);"], [137, "        List<BodyPart> bodyParts = getBodyParts();"], [140, "        ByteArrayBuffer boundary = encode(charset, getBoundary());"], [146, "                ByteArrayBuffer b = encode(charset, preamble);"], [147, "                writeBytes(b, out);"], [148, "                writeBytes(CR_LF, out);"], [152, "                writeBytes(TWO_DASHES, out);"], [153, "                writeBytes(boundary, out);"], [154, "                writeBytes(CR_LF, out);"], [155, ""], [156, "                BodyPart part = bodyParts.get(i);"], [157, "                Header header = part.getHeader();"], [158, ""], [159, "                List<Field> fields = header.getFields();"], [160, "                for (Field field: fields) {"], [161, "                    writeBytes(field.getRaw(), out);"], [162, "                    writeBytes(CR_LF, out);"], [163, "                }"], [164, "                writeBytes(CR_LF, out);"], [166, "                    MessageWriter.DEFAULT.writeBody(part.getBody(), out);"], [168, "                writeBytes(CR_LF, out);"], [170, "            writeBytes(TWO_DASHES, out);"], [171, "            writeBytes(boundary, out);"], [172, "            writeBytes(TWO_DASHES, out);"], [173, "            writeBytes(CR_LF, out);"], [176, "                ByteArrayBuffer b = encode(charset, epilogue);"], [177, "                writeBytes(b, out);"], [178, "                writeBytes(CR_LF, out);"], [188, "                writeBytes(TWO_DASHES, out);"], [189, "                writeBytes(boundary, out);"], [190, "                writeBytes(CR_LF, out);"], [194, ""], [195, "                StringBuilder s = new StringBuilder();"], [196, "                s.append(cd.getName());"], [197, "                s.append(\": \");"], [198, "                s.append(cd.getBody());"], [199, "                writeBytes(encode(charset, s.toString()), out);"], [200, "                writeBytes(CR_LF, out);"], [201, "                writeBytes(CR_LF, out);"], [203, "                    MessageWriter.DEFAULT.writeBody(part.getBody(), out);"], [205, "                writeBytes(CR_LF, out);"], [208, "            writeBytes(TWO_DASHES, out);"], [209, "            writeBytes(boundary, out);"], [210, "            writeBytes(TWO_DASHES, out);"], [211, "            writeBytes(CR_LF, out);"]], "deleted": [[34, "import java.io.BufferedWriter;"], [38, "import java.io.OutputStreamWriter;"], [44, "import org.apache.james.mime4j.MimeException;"], [46, "import org.apache.james.mime4j.field.Field;"], [52, "import org.apache.james.mime4j.util.MessageUtils;"], [82, "                Field.CONTENT_TYPE);"], [103, "                Field.CONTENT_TYPE);"], [112, "        List<?> bodyParts = getBodyParts();"], [114, "        String boundary = getBoundary();"], [116, "        BufferedWriter writer = new BufferedWriter("], [117, "                new OutputStreamWriter(out, charset),"], [118, "                8192);"], [124, "                writer.write(preamble);"], [125, "                writer.write(\"\\r\\n\");"], [129, "                writer.write(\"--\");"], [130, "                writer.write(boundary);"], [131, "                writer.write(\"\\r\\n\");"], [132, "                writer.flush();"], [133, "                BodyPart part = (BodyPart) bodyParts.get(i);"], [134, "                part.getHeader().writeTo(out, MessageUtils.STRICT_IGNORE);"], [136, "                    part.getBody().writeTo(out, MessageUtils.STRICT_IGNORE);"], [138, "                writer.write(\"\\r\\n\");"], [140, ""], [141, "            writer.write(\"--\");"], [142, "            writer.write(boundary);"], [143, "            writer.write(\"--\\r\\n\");"], [146, "                writer.write(epilogue);"], [147, "                writer.write(\"\\r\\n\");"], [149, "            writer.flush();"], [158, "                writer.write(\"--\");"], [159, "                writer.write(boundary);"], [160, "                writer.write(\"\\r\\n\");"], [161, "                writer.flush();"], [165, "                writer.write(cd.toString());"], [166, "                writer.write(\"\\r\\n\");"], [167, "                writer.write(\"\\r\\n\");"], [168, "                writer.flush();"], [170, "                    part.getBody().writeTo(out, MessageUtils.LENIENT);"], [172, ""], [173, "                writer.write(\"\\r\\n\");"], [176, "            writer.write(\"--\");"], [177, "            writer.write(boundary);"], [178, "            writer.write(\"--\\r\\n\");"], [179, "            writer.flush();"], [195, "    @Override"], [196, "    public void writeTo(final OutputStream out, int mode) throws IOException, MimeException {"], [197, "        if (mode == MessageUtils.LENIENT) {"], [198, "            doWriteTo(HttpMultipartMode.BROWSER_COMPATIBLE, out, true);"], [199, "        } else {"], [200, "            doWriteTo(HttpMultipartMode.STRICT, out, true);"], [201, "        }"], [202, "    }"], [203, ""]]}, "num_lines_added": 76, "num_lines_removed": 53}