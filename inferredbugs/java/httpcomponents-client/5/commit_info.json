{"hash": "70f61a78a88dfad17116a853c731223a5b2bc91e", "message": "* refactored local test server\n* added option to specify an SSL context for the local test server\n* fixed SSL socket factory test case failing intermittently when running JRE 1.6\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@722180 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 120, "diff_parsed": {"added": [[45, "import javax.net.ssl.KeyManager;"], [46, "import javax.net.ssl.KeyManagerFactory;"], [47, "import javax.net.ssl.SSLContext;"], [48, "import javax.net.ssl.SSLException;"], [49, "import javax.net.ssl.SSLSession;"], [50, "import javax.net.ssl.SSLSocket;"], [51, "import javax.net.ssl.TrustManager;"], [52, "import javax.net.ssl.TrustManagerFactory;"], [58, "import org.apache.http.HttpHost;"], [59, "import org.apache.http.HttpResponse;"], [60, "import org.apache.http.client.methods.HttpGet;"], [61, "import org.apache.http.conn.scheme.Scheme;"], [62, "import org.apache.http.impl.client.DefaultHttpClient;"], [63, "import org.apache.http.localserver.LocalTestServer;"], [91, "    static class TestX509HostnameVerifier implements X509HostnameVerifier {"], [92, ""], [93, "        private boolean fired = false;"], [94, ""], [95, "        public boolean verify(String host, SSLSession session) {"], [96, "            return true;"], [97, "        }"], [98, ""], [99, "        public void verify(String host, SSLSocket ssl) throws IOException {"], [100, "            this.fired = true;"], [101, "        }"], [102, ""], [103, "        public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {"], [104, "        }"], [105, ""], [106, "        public void verify(String host, X509Certificate cert) throws SSLException {"], [107, "        }"], [108, ""], [109, "        public boolean isFired() {"], [110, "            return this.fired;"], [111, "        }"], [112, ""], [113, "    }"], [114, ""], [147, "        KeyManagerFactory kmfactory = KeyManagerFactory.getInstance(KeyManagerFactory"], [148, "                .getDefaultAlgorithm());"], [149, "        kmfactory.init(ks, pwd);"], [150, "        KeyManager[] keymanagers = kmfactory.getKeyManagers();"], [151, ""], [152, "        TrustManagerFactory tmfactory = TrustManagerFactory.getInstance("], [153, "                TrustManagerFactory.getDefaultAlgorithm());"], [154, "        tmfactory.init(ks);"], [155, "        TrustManager[] trustmanagers = tmfactory.getTrustManagers();"], [156, ""], [157, "        SSLContext sslcontext = SSLContext.getInstance(\"TLSv1\");"], [158, "        sslcontext.init(keymanagers, trustmanagers, null);"], [159, ""], [160, "        LocalTestServer server = new LocalTestServer(null, null, null, sslcontext);"], [161, "        server.registerDefaultHandlers();"], [162, "        server.start();"], [164, ""], [165, "            TestX509HostnameVerifier hostnameVerifier = new TestX509HostnameVerifier();"], [166, ""], [167, "            SSLSocketFactory socketFactory = new SSLSocketFactory(sslcontext);"], [168, "            socketFactory.setHostnameVerifier(hostnameVerifier);"], [169, ""], [170, "            Scheme https = new Scheme(\"https\", socketFactory, 443);"], [171, "            DefaultHttpClient httpclient = new DefaultHttpClient();"], [172, "            httpclient.getConnectionManager().getSchemeRegistry().register(https);"], [173, ""], [174, "            HttpHost target = new HttpHost("], [175, "                    LocalTestServer.TEST_SERVER_ADDR.getHostName(),"], [176, "                    server.getServicePort(),"], [177, "                    \"https\");"], [178, "            HttpGet httpget = new HttpGet(\"/random/100\");"], [179, "            HttpResponse response = httpclient.execute(target, httpget);"], [180, "            assertEquals(200, response.getStatusLine().getStatusCode());"], [181, "            assertTrue(hostnameVerifier.isFired());"], [182, "        } finally {"], [183, "            server.stop();"]], "deleted": [[35, "import java.io.File;"], [36, "import java.io.FileOutputStream;"], [39, "import java.io.OutputStream;"], [41, "import java.net.ServerSocket;"], [42, "import java.net.Socket;"], [50, "import javax.net.ServerSocketFactory;"], [51, "import javax.net.ssl.SSLServerSocketFactory;"], [116, "        File tempFile = File.createTempFile(\"junit\", \"jks\");"], [118, "            String path = tempFile.getCanonicalPath();"], [119, "            tempFile.deleteOnExit();"], [120, "            FileOutputStream fOut = new FileOutputStream(tempFile);"], [121, "            ks.store(fOut, pwd);"], [122, "            fOut.close();"], [123, ""], [124, "            System.setProperty(\"javax.net.ssl.keyStore\", path);"], [125, "            System.setProperty(\"javax.net.ssl.keyStorePassword\", password);"], [126, "            System.setProperty(\"javax.net.ssl.trustStore\", path);"], [127, "            System.setProperty(\"javax.net.ssl.trustStorePassword\", password);"], [128, ""], [129, "            ServerSocketFactory server = SSLServerSocketFactory.getDefault();"], [130, "            // Let the operating system just choose an available port:"], [131, "            ServerSocket serverSocket = server.createServerSocket(0);"], [132, "            serverSocket.setSoTimeout(30000);"], [133, "            int port = serverSocket.getLocalPort();"], [134, "            // System.out.println(\"\\nlistening on port: \" + port);"], [135, ""], [136, "            SSLSocketFactory ssf = SSLSocketFactory.getSocketFactory();"], [137, "            ssf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);"], [138, ""], [139, "            // Test 1 - createSocket()"], [140, "            IOException[] e = new IOException[1];"], [141, "            boolean[] success = new boolean[1];"], [142, "            listen(serverSocket, e, success);"], [143, "            Socket s = ssf.connectSocket(null, \"localhost\", port,"], [144, "                                         null, 0, params);"], [145, "            exerciseSocket(s, e, success);"], [146, ""], [147, "            // Test 2 - createSocket( Socket ), where we upgrade a plain socket"], [148, "            //          to SSL."], [149, "            success[0] = false;"], [150, "            listen(serverSocket, e, success);"], [151, "            s = new Socket(\"localhost\", port);"], [152, "            s = ssf.createSocket(s, \"localhost\", port, true);"], [153, "            exerciseSocket(s, e, success);"], [154, "        }"], [155, "        finally {"], [156, "            tempFile.delete();"], [160, "    private static void listen(final ServerSocket ss,"], [161, "                               final IOException[] e,"], [162, "                               final boolean[] success) {"], [163, "        Runnable r = new Runnable() {"], [164, "            public void run() {"], [165, "                try {"], [166, "                    Socket s = ss.accept();"], [167, "                    InputStream in = s.getInputStream();"], [168, "                    OutputStream out = s.getOutputStream();"], [169, "                    out.write(\"server says hello\\n\".getBytes());"], [170, "                    byte[] buf = new byte[4096];"], [171, "                    in.read(buf);"], [172, "                    out.close();"], [173, "                    in.close();"], [174, "                    s.close();"], [175, "                } catch(IOException ioe) {"], [176, "                    e[0] = ioe;"], [177, "                } finally {"], [178, "                    success[0] = true;"], [179, "                }"], [180, "            }"], [181, "        };"], [182, "        new Thread(r).start();"], [183, "        Thread.yield();"], [184, "    }"], [185, ""], [186, "    private static void exerciseSocket(Socket s, IOException[] e,"], [187, "                                       boolean[] success)"], [188, "          throws IOException {"], [189, "        InputStream in = s.getInputStream();"], [190, "        OutputStream out = s.getOutputStream();"], [191, "        out.write(42);"], [192, "        byte[] buf = new byte[4096];"], [193, "        in.read(buf);"], [194, "        out.close();"], [195, "        in.close();"], [196, "        s.close();"], [197, "        // String response = new String( buf, 0, c );"], [198, "        while(!success[0]) {"], [199, "            Thread.yield();"], [200, "        }"], [201, "        if(e[0] != null) {"], [202, "            throw e[0];"], [203, "        }"], [204, "    }"], [205, ""], [206, ""]]}, "num_lines_added": 74, "num_lines_removed": 94}