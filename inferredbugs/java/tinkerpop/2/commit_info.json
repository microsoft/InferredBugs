{"hash": "55dd0eb4cd0e6377a119b1f8802fc71af92eb497", "message": "ScriptEngine now supports imports through configuration in yaml file.", "file_num_lines": 112, "diff_parsed": {"added": [[12, "import java.util.HashSet;"], [27, " * <p>"], [28, " * The shared ScriptEngine for sessionless requests can not be dynamically re-initialized as doing so essentially"], [29, " * equates to restarting the server.  It's easier to just do that."], [30, " * <p>"], [31, " * The sessioned ScriptEngine is initialized with settings once per session and can be reset by the session itself."], [41, "    private ScriptEngines sharedScriptEngines;"], [46, "    private Map<UUID, GremlinSession> sessionedScriptEngines = new ConcurrentHashMap<>();"], [47, ""], [48, "    /**"], [49, "     * True if initialized and false otherwise."], [50, "     */"], [51, "    private boolean initialized = false;"], [52, ""], [53, "    private Settings settings = null;"], [60, "    public synchronized void init(final Settings settings) {"], [61, "        if (!initialized) {"], [62, "            if (logger.isDebugEnabled()) logger.debug(\"Initializing GremlinExecutor\");"], [63, "            sharedScriptEngines = createScriptEngine(settings);"], [64, "            this.settings = settings;"], [65, "            initialized = true;"], [66, "        }"], [67, "    }"], [68, ""], [69, "    private synchronized static ScriptEngines createScriptEngine(final Settings settings) {"], [70, "        final ScriptEngines scriptEngines = new ScriptEngines();"], [71, "        for (Map.Entry<String,Settings.ScriptEngineSettings> config: settings.scriptEngines.entrySet()) {"], [72, "            scriptEngines.reload(config.getKey(), new HashSet<>(config.getValue().imports),"], [73, "                    new HashSet<>(config.getValue().staticImports));"], [74, "        }"], [75, "        return scriptEngines;"], [76, "    }"], [77, ""], [78, "    /**"], [79, "     * Determines whether or not the GremlinExecutor was initialized with the appropriate settings or not."], [80, "     */"], [81, "    public boolean isInitialized() {"], [82, "        return initialized;"], [83, "    }"], [84, ""], [93, "        final String language = message.<String>optionalArgs(\"language\").orElse(\"gremlin-groovy\");"], [94, ""], [102, "            return s -> session.eval(message.<String>optionalArgs(RequestMessage.FIELD_GREMLIN).get(), bindings, language);"], [113, "                    final Object o = sharedScriptEngines.eval(message.<String>optionalArgs(RequestMessage.FIELD_GREMLIN).get(), bindings, language);"], [134, "    private GremlinSession getGremlinSession(final UUID sessionId, final Bindings bindings) {"], [139, "            session = new GremlinSession(sessionId, bindings, settings);"], [158, "        private final ScriptEngines scriptEngines;"], [166, "        public GremlinSession(final UUID session, final Bindings initialBindings, final Settings settings) {"], [169, "            this.scriptEngines = createScriptEngine(settings);"], [173, "        public Object eval(final String script, final Bindings bindings, final String language)"], [178, "                    (Callable<Object>) () -> scriptEngines.eval(script, this.bindings, language));"]], "deleted": [[5, "import com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;"], [36, "    private static final GremlinGroovyScriptEngine sharedScriptEngine = new GremlinGroovyScriptEngine();"], [41, "    private static final Map<UUID, GremlinSession> sessionedScriptEngines = new ConcurrentHashMap<>();"], [63, "            return s -> session.eval(message.<String>optionalArgs(RequestMessage.FIELD_GREMLIN).get(), bindings);"], [74, "                    final Object o = sharedScriptEngine.eval(message.<String>optionalArgs(RequestMessage.FIELD_GREMLIN).get(), bindings);"], [95, "    private GremlinSession getGremlinSession(final UUID sessionId, Bindings bindings) {"], [100, "            session = new GremlinSession(sessionId, bindings);"], [119, "        private final GremlinGroovyScriptEngine scriptEngine = new GremlinGroovyScriptEngine();"], [127, "        public GremlinSession(final UUID session, final Bindings initialBindings) {"], [133, "        public Object eval(final String script, final Bindings bindings)"], [138, "                    (Callable<Object>) () -> scriptEngine.eval(script, this.bindings));"]]}, "num_lines_added": 51, "num_lines_removed": 11}