{"hash": "b1c4de594a53187f73af1be04950df6692060db5", "message": "lots of work on Gremlin OLAP -- Gremlin with path and non-path tracking is possible and its nicely hidden. The GremlinVertexProgram is as simple as simple can be -- all the computation is in the GremlinMessage. Will probably split the GremlinMessages into a GremlinCountMessage and a GremlinPathMessage to be very explicit.", "file_num_lines": 38, "diff_parsed": {"added": [[10, "import java.util.List;"], [28, "                        //Gremlin.of().out(\"created\").in(\"created\").value(\"name\").map(o -> o.toString().length()))"], [29, "                        Gremlin.of().out().out().property(\"name\").value().path())"], [30, "                        //Gremlin.of().as(\"x\").outE().inV().loop(\"x\", o -> o.getLoops() < 2).value(\"name\").map(s -> s.toString().length()).path())"], [36, "        if (result.getGraphMemory().get(GremlinVertexProgram.TRACK_PATHS)) {"], [37, "            System.out.println(\"gremlin> \" + result.getGraphMemory().<Supplier>get(\"gremlinPipeline\").get());"], [38, "            StreamFactory.stream(g.query().vertices()).forEach(v -> {"], [39, "                final GremlinPaths tracker = result.getVertexMemory().<GremlinPaths>getProperty(v, GremlinVertexProgram.GREMLIN_TRACKER).get();"], [40, "                tracker.getDoneGraphTracks().forEach((a, b) -> Stream.generate(() -> 1).limit(((List) b).size()).forEach(t -> System.out.println(\"==>\" + a)));"], [41, "                tracker.getDoneObjectTracks().forEach((a, b) -> Stream.generate(() -> 1).limit(((List) b).size()).forEach(t -> System.out.println(\"==>\" + a)));"], [42, "            });"], [43, "        } else {"], [44, "            System.out.println(\"gremlin> \" + result.getGraphMemory().<Supplier>get(\"gremlinPipeline\").get());"], [45, "            StreamFactory.stream(g.query().vertices()).forEach(v -> {"], [46, "                final GremlinCounter tracker = result.getVertexMemory().<GremlinCounter>getProperty(v, GremlinVertexProgram.GREMLIN_TRACKER).get();"], [47, "                tracker.getDoneGraphTracks().forEach((a, b) -> Stream.generate(() -> 1).limit(b).forEach(t -> System.out.println(\"==>\" + a)));"], [48, "                tracker.getDoneObjectTracks().forEach((a, b) -> Stream.generate(() -> 1).limit(b).forEach(t -> System.out.println(\"==>\" + a)));"], [49, "            });"], [50, "        }"]], "deleted": [[27, "                        //Gremlin.of().out(\"created\").in(\"created\").property(\"name\"))"], [28, "                        Gremlin.of().as(\"x\").outE().inV().loop(\"x\", o -> o.getLoops() < 2).value(\"name\").map(s -> s.toString().length()).path())"], [34, "        System.out.println(\"gremlin> \" + result.getGraphMemory().<Supplier>get(\"gremlinPipeline\").get());"], [35, "        StreamFactory.stream(g.query().vertices()).forEach(v -> {"], [36, "            final GremlinTracker tracker = result.getVertexMemory().<GremlinTracker>getProperty(v, GremlinVertexProgram.GREMLIN_TRACKER).get();"], [37, "            tracker.getDoneGraphHolders().forEach((a, b) -> Stream.generate(() -> 1).limit(b.size()).forEach(t -> System.out.println(\"==>\" + a)));"], [38, "            tracker.getDoneObjectHolders().forEach((a, b) -> Stream.generate(() -> 1).limit(b.size()).forEach(t -> System.out.println(\"==>\" + a)));"], [39, "        });"]]}, "num_lines_added": 19, "num_lines_removed": 8}