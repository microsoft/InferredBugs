{"hash": "565ba02687c17815dc6c6bcc4363aad4f779e106", "message": "update agent&deposit", "file_num_lines": 171, "diff_parsed": {"added": [[3, " * <p>"], [5, " * <p>"], [12, " * <p>"], [15, " * <p>"], [31, "import java.util.ArrayList;"], [32, "import java.util.HashSet;"], [33, "import java.util.List;"], [34, "import java.util.Set;"], [35, "import java.util.concurrent.CopyOnWriteArrayList;"], [45, "    private List<BlockHeaderChain> chainList = new CopyOnWriteArrayList<>();"], [57, "        boolean result = add(header);"], [58, "        if (result) {"], [59, "            checkIt();"], [61, "        return result;"], [66, "        for (BlockHeaderChain chain : chainList) {"], [72, "        for (int i = chainList.size() - 1; i >= 0; i--) {"], [73, "            BlockHeaderChain chain = chainList.get(i);"], [145, "        if (chainList.isEmpty()) {"], [146, "            return;"], [148, "        List<BlockHeaderChain> tempList = new ArrayList<>(this.chainList);"], [149, "        tempList.forEach((BlockHeaderChain chain) -> removeBlock(chain, hash));"], [179, "        List<String> hashList = this.getHashList(height);"], [180, "        if (hashList.size() == 1) {"], [181, "            return true;"], [182, "        }"], [183, "        if (hashList.isEmpty()) {"], [184, "            Log.warn(\"lost a block:\" + height);"], [185, "            return false;"], [186, "        }"], [187, "        int maxSize = 0;"], [188, "        int secondMaxSize = 0;"], [189, "        for (BlockHeaderChain chain : chainList) {"], [190, "            int size = chain.size();"], [191, "            if (size > maxSize) {"], [192, "                secondMaxSize = maxSize;"], [193, "                maxSize = size;"], [194, "            } else if (size > secondMaxSize) {"], [195, "                secondMaxSize = size;"], [196, "            } else if (size == maxSize) {"], [197, "                secondMaxSize = size;"], [199, "        }"], [200, "        if (maxSize <= (secondMaxSize + 6)) {"], [201, "            return false;"], [202, "        }"], [203, "        for (int i = chainList.size() - 1; i >= 0; i--) {"], [204, "            if (chainList.size() < maxSize) {"], [205, "                chainList.remove(i);"], [208, "        return true;"], [209, "    }"], [210, ""], [211, "    public int getHashSize() {"], [212, "        Set<String> hashSet = new HashSet<>();"], [213, "        for (BlockHeaderChain chain : chainList) {"], [214, "            hashSet.addAll(chain.getHashSet());"], [215, "        }"], [216, "        return hashSet.size();"]], "deleted": [[3, " *"], [5, " *"], [12, " *"], [15, " *"], [28, "import io.nuls.core.chain.entity.NulsDigestData;"], [32, "import java.util.*;"], [33, "import java.util.concurrent.locks.Lock;"], [34, "import java.util.concurrent.locks.ReentrantLock;"], [44, "    private List<BlockHeaderChain> chainList = Collections.synchronizedList(new ArrayList<>());"], [48, "    private Lock lock = new ReentrantLock();"], [49, ""], [58, "        lock.lock();"], [59, "        try {"], [60, "            boolean result = add(header);"], [61, "            if (result) {"], [62, "                checkIt();"], [63, "            }"], [64, "            return result;"], [65, "        } finally {"], [66, "            lock.unlock();"], [71, "        List<BlockHeaderChain> chainList1 = new ArrayList<>(this.chainList);"], [73, "        for (BlockHeaderChain chain : chainList1) {"], [79, "        for (BlockHeaderChain chain : chainList1) {"], [151, "        lock.lock();"], [152, "        try {"], [153, "            if (chainList.isEmpty()) {"], [154, "                return;"], [155, "            }"], [156, "            List<BlockHeaderChain> tempList = new ArrayList<>(this.chainList);"], [157, "            tempList.forEach((BlockHeaderChain chain) -> removeBlock(chain, hash));"], [158, "        } finally {"], [159, "            lock.unlock();"], [190, "        lock.lock();"], [191, "        try {"], [192, "            List<String> hashList = this.getHashList(height);"], [193, "            if (hashList.size() == 1) {"], [194, "                return true;"], [195, "            }"], [196, "            if (hashList.isEmpty()) {"], [197, "                Log.warn(\"lost a block:\" + height);"], [198, "                return false;"], [199, "            }"], [200, "            List<BlockHeaderChain> longestChainList = new ArrayList<>();"], [201, "            int size = 0;"], [202, "            for (BlockHeaderChain chain : chainList) {"], [203, "                if (chain.size() == size) {"], [204, "                    longestChainList.add(chain);"], [205, "                } else if (chain.size() > size && size == 0) {"], [206, "                    longestChainList.add(chain);"], [207, "                } else if (chain.size() > size && size != 0) {"], [208, "                    longestChainList.clear();"], [209, "                    longestChainList.add(chain);"], [210, "                }"], [212, "            if (longestChainList.size() != 1) {"], [213, "                return false;"], [215, "            chainList = longestChainList;"], [216, "            return true;"], [217, "        } finally {"], [218, "            lock.unlock();"]]}, "num_lines_added": 56, "num_lines_removed": 59}