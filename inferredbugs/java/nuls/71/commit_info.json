{"hash": "ee8e96316fdf693773d82ccf968d93f6839a257b", "message": "update consensus", "file_num_lines": 355, "diff_parsed": {"added": [[40, "import java.util.concurrent.locks.Lock;"], [41, "import java.util.concurrent.locks.ReentrantLock;"], [68, "    private Lock lock = new ReentrantLock();"], [69, ""], [72, "        Block bestBlock = getBestBlock();"], [90, "    public PocMeetingRound resetCurrentMeetingRound() {"], [91, "        lock.lock();"], [92, "        try {"], [93, "            Block currentBlock = getBestBlock();"], [94, "            BlockRoundData currentRoundData = new BlockRoundData(currentBlock.getHeader().getExtend());"], [95, "            boolean needCalcRound = false;"], [96, "            do {"], [97, "                if (null == currentRound || needReSet) {"], [98, "                    needCalcRound = true;"], [99, "                    needReSet = false;"], [100, "                    break;"], [101, "                }"], [102, "                if (currentRound.getEndTime() <= TimeService.currentTimeMillis()) {"], [103, "                    needCalcRound = true;"], [104, "                    break;"], [105, "                }"], [106, "                boolean thisIsLastBlockOfRound = currentRoundData.getPackingIndexOfRound() == currentRoundData.getConsensusMemberCount();"], [107, "                if (currentRound.getIndex() == currentRoundData.getRoundIndex() && !thisIsLastBlockOfRound) {"], [108, "                    needCalcRound = false;"], [109, "                    break;"], [110, "                }"], [111, "                if (currentRound.getIndex() == (currentRoundData.getRoundIndex() + 1) && thisIsLastBlockOfRound) {"], [112, "                    needCalcRound = false;"], [113, "                    break;"], [114, "                }"], [116, "            } while (false);"], [117, "            PocMeetingRound resultRound = null;"], [118, "            if (needCalcRound) {"], [119, "                resultRound = calcNextRound(currentBlock, currentRoundData);"], [120, "            } else {"], [121, "                resultRound = this.currentRound;"], [123, ""], [124, "            if (resultRound.getPreRound() == null) {"], [125, "                resultRound.setPreRound(ROUND_MAP.get(currentRoundData.getRoundIndex() - 1));"], [128, "            List<Account> accountList = accountService.getAccountList();"], [129, "            resultRound.calcLocalPacker(accountList);"], [130, "            this.currentRound = resultRound;"], [131, "            ROUND_MAP.put(resultRound.getIndex(), resultRound);"], [132, "            return resultRound;"], [133, "        }finally {"], [134, "            lock.unlock();"], [146, ""], [147, "        if(round.getStartTime()<TimeService.currentTimeMillis()){"], [148, ""], [149, ""], [150, ""], [151, ""], [152, ""], [153, ""], [154, "        }"], [155, ""], [397, "        lock.lock();try{"], [399, "        ROUND_MAP.clear();"], [400, "        this.init();}finally {"], [401, "            lock.unlock();"], [402, "        }"], [403, "    }"], [404, ""], [405, ""], [406, ""], [407, "    private Block getBestBlock() {"], [408, "        Block block = NulsContext.getInstance().getBestBlock();"], [409, "        Block highestBlock = BlockManager.getInstance().getHighestBlock();"], [410, "        if (null != highestBlock && highestBlock.getHeader().getHeight() > block.getHeader().getHeight()) {"], [411, "            return highestBlock;"], [412, "        }"], [413, "        return block;"]], "deleted": [[68, "        Block bestBlock = NulsContext.getInstance().getBestBlock();"], [86, "    public synchronized PocMeetingRound resetCurrentMeetingRound() {"], [87, "        Block currentBlock = NulsContext.getInstance().getBestBlock();"], [88, "        BlockRoundData currentRoundData = new BlockRoundData(currentBlock.getHeader().getExtend());"], [89, "        boolean needCalcRound = false;"], [90, "        do {"], [91, "            if (null == currentRound || needReSet) {"], [92, "                needCalcRound = true;"], [93, "                needReSet = false;"], [94, "                break;"], [95, "            }"], [96, "            if (currentRound.getEndTime() <= TimeService.currentTimeMillis()) {"], [98, "                break;"], [99, "            }"], [100, "            boolean thisIsLastBlockOfRound = currentRoundData.getPackingIndexOfRound() == currentRoundData.getConsensusMemberCount();"], [101, "            if (currentRound.getIndex() == currentRoundData.getRoundIndex() && !thisIsLastBlockOfRound) {"], [102, "                needCalcRound = false;"], [103, "                break;"], [105, "            if (currentRound.getIndex() == (currentRoundData.getRoundIndex() + 1) && thisIsLastBlockOfRound) {"], [106, "                needCalcRound = false;"], [107, "                break;"], [109, "            needCalcRound = true;"], [110, "        } while (false);"], [111, "        PocMeetingRound resultRound = null;"], [112, "        if (needCalcRound) {"], [113, "            resultRound = calcNextRound(currentBlock, currentRoundData);"], [114, "        } else {"], [115, "            resultRound = this.currentRound;"], [116, "        }"], [118, "        if (resultRound.getPreRound() == null) {"], [119, "            resultRound.setPreRound(ROUND_MAP.get(currentRoundData.getRoundIndex() - 1));"], [121, ""], [122, "        List<Account> accountList = accountService.getAccountList();"], [123, "        resultRound.calcLocalPacker(accountList);"], [124, "        this.currentRound = resultRound;"], [125, "        ROUND_MAP.put(resultRound.getIndex(), resultRound);"], [126, "        return resultRound;"]]}, "num_lines_added": 72, "num_lines_removed": 37}