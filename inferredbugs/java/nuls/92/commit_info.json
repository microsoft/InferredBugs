{"hash": "4f838b9c56334bc9c7df8ea753838ccd9bd5bc9c", "message": "update consensus", "file_num_lines": 405, "diff_parsed": {"added": [[3, " * *"], [5, " * *"], [12, " * *"], [15, " * *"], [123, "        BlockLog.info(\"packing round:\" + round.toString());"], [175, "            BlockLog.info(\"produce block height:\" + newBlock.getHeader().getHeight() + \", preHash:\" + newBlock.getHeader().getPreHash() + \" , hash:\" + newBlock.getHeader().getHash() + \", address:\" + Address.fromHashs(newBlock.getHeader().getPackingAddress()));"], [241, "        StringBuilder str = new StringBuilder();"], [242, "        str.append(\"produce a Block: height:\" + block.getHeader().getHeight() + \", hash:\" + block.getHeader().getHash() + \" ,packingAddress:\" + Address.fromHashs(block.getHeader().getPackingAddress()));"], [249, "        str.append(\"txs:\\n\");"], [251, "            str.append(tx.getHash() + \",\\n\");"], [260, "        BlockLog.info(str.toString());"], [264, "            BlockLog.info(\"send block height:\" + block.getHeader().getHeight() + \", node:\" + nodeId);"], [277, "            BlockLog.info(\"wait for available nodes,count:\" + nodes.size());"], [294, ""], [295, "                BlockLog.info(\"wait for network synchronize complete,status:\" + downloadService.getStatus());"], [301, "        if (!hasInit) {"], [400, "                BlockLog.info(\"discard tx:\" + tx.getHash());"], [408, "                BlockLog.info(\"discard tx:\" + tx.getHash());"], [418, "            addOrphanTx(packingTxList, totalSize, self, bd.getHeight());"], [425, "            BlockLog.warn(\"packing block error:\" + result.getMessage());"], [434, "    private void addOrphanTx(List<Transaction> txList, long totalSize, PocMeetingMember self, long blockHeight) {"], [482, "        BlockLog.info(\"create coinbase:\" + coinBaseTransaction.getHash() + \",time:\" + coinBaseTransaction.getTime());"], [491, "            StringBuilder str = new StringBuilder(\"create yellowPunish:\" + yellowPunishTransaction.getHash() + \",time:\" + yellowPunishTransaction.getTime()+\"\\n\");"], [492, "            for (Address address : yellowPunishTransaction.getTxData().getAddressList()) {"], [493, "                str.append(address.toString()+\",\\n\");"], [494, "            }"]], "deleted": [[3, " **"], [5, " **"], [12, " **"], [15, " **"], [34, "import io.nuls.consensus.constant.MaintenanceStatus;"], [36, "import io.nuls.consensus.download.DownloadProcessor;"], [37, "import io.nuls.consensus.download.NetworkNewestBlockInfos;"], [126, ""], [178, "            BlockLog.debug(\"produce block height:\" + newBlock.getHeader().getHeight() + \", preHash:\" + newBlock.getHeader().getPreHash() + \" , hash:\" + newBlock.getHeader().getHash() + \", address:\" + Address.fromHashs(newBlock.getHeader().getPackingAddress()));"], [259, ""], [263, "            BlockLog.debug(\"send block height:\" + block.getHeader().getHeight() + \", node:\" + nodeId);"], [297, "        if(!hasInit) {"], [326, ""], [327, ""], [378, "        StringBuilder str = new StringBuilder();"], [379, "        str.append(self.getPackingAddress());"], [380, "        str.append(\" ,order:\" + self.getPackingIndexOfRound());"], [381, "        str.append(\",packTime:\" + new Date(self.getPackEndTime()));"], [382, "        str.append(\"\\n\");"], [383, "        BlockLog.debug(\"pack round:\" + str);"], [384, ""], [421, "            addOrphanTx(packingTxList, totalSize, self,bd.getHeight());"], [425, "        Log.info(\"txCount:\" + packingTxList.size());"], [427, "        System.out.printf(\"========height:\" + newBlock.getHeader().getHeight() + \",time:\" + DateUtil.convertDate(new Date(newBlock.getHeader().getTime())) + \",packEndTime:\" +"], [428, "                DateUtil.convertDate(new Date(self.getPackEndTime())));"], [431, "            Log.warn(\"packing block error:\" + result.getMessage());"], [440, "    private void addOrphanTx(List<Transaction> txList, long totalSize, PocMeetingMember self,long blockHeight) {"], [488, "//        coinBaseTransaction.setScriptSig(accountService.createP2PKHScriptSigFromDigest(coinBaseTransaction.getHash(), round.getLocalPacker(), NulsContext.getCachedPasswordOfWallet()).serialize());"]]}, "num_lines_added": 26, "num_lines_removed": 28}