{"hash": "fa4df8fcf023ea5b060933a70901249a2fe9309c", "message": "update", "file_num_lines": 190, "diff_parsed": {"added": [[4, "import io.nuls.kernel.constant.KernelErrorCode;"], [6, "import io.nuls.kernel.model.RpcClientResult;"], [12, " * @author: Charlie"], [13, " * @date: 2018/6/2"], [26, "    public static String getNewPwd() {"], [27, "        System.out.print(\"Please enter the new password(8-20 characters, the combination of letters and numbers).\\nEnter your new password:\");"], [28, "        ConsoleReader reader = null;"], [29, "        try {"], [30, "            reader = new ConsoleReader();"], [31, "            String pwd = null;"], [32, "            do {"], [33, "                pwd = reader.readLine('*');"], [34, "                if (!StringUtils.validPassword(pwd)) {"], [35, "                    System.out.print(\"The password is invalid, (8-20 characters, the combination of letters and numbers) .\\nReenter the new password: \");"], [36, "                }"], [37, "            } while (!StringUtils.validPassword(pwd));"], [38, "            return pwd;"], [39, "        } catch (IOException e) {"], [40, "            return null;"], [41, "        } finally {"], [42, "            try {"], [43, "                if (!reader.delete()) {"], [44, "                    reader.close();"], [45, "                }"], [46, "            } catch (IOException e) {"], [47, "                e.printStackTrace();"], [48, "            }"], [54, "        System.out.print(\"Please confirm new password:\");"], [61, "                if (!newPwd.equals(confirmed)) {"], [62, "                    System.out.print(\"Password confirmation doesn't match the password.\\nConfirm new password: \");"], [67, "        } finally {"], [69, "                if (!reader.delete()) {"], [77, "    public static String getPwd() {"], [78, "        return getPwd(null);"], [79, "    }"], [81, "    public static String getPwd(String prompt) {"], [82, "        if(StringUtils.isBlank(prompt)){"], [83, "            prompt = \"Please enter the password, if the account has no password directly return.\\nEnter your password:\";"], [84, "        }"], [85, "        System.out.print(prompt);"], [89, "            String npwd = null;"], [90, "            do {"], [91, "                npwd = reader.readLine('*');"], [92, "                if (\"\".equals(npwd)) {"], [93, "                    System.out.print(\"The password is required.\\nEnter your password:\");"], [94, "                }"], [95, "            } while (\"\".equals(npwd));"], [96, "            return npwd;"], [99, "        } finally {"], [101, "                if (!reader.delete()) {"], [120, "    public static String naToNuls(Object object) {"], [121, "        if (null == object) {"], [125, "        if (object instanceof Long) {"], [126, "            na = (Long) object;"], [127, "        } else if (object instanceof Integer) {"], [128, "            na = ((Integer) object).longValue();"], [129, "        } else {"], [135, "    public static String txTypeExplain(Integer type) {"], [136, "        if (null == type) {"], [139, "        switch (type) {"], [163, "    public static String consensusExplain(Integer status) {"], [164, "        if (null == status) {"], [167, "        switch (status) {"], [178, "    public static String statusConfirmExplain(Integer status) {"], [179, "        if (null == status) {"], [182, "        switch (status) {"], [192, ""], [193, ""], [194, "    /**"], [195, "     * \u6839\u636e\u8d26\u6237\u83b7\u53d6\u5bc6\u7801"], [196, "     * 1.\u5982\u679c\u8d26\u6237\u6709\u5bc6\u7801, \u5219\u8ba9\u7528\u6237\u8f93\u5165\u5bc6\u7801"], [197, "     * 2.\u5982\u679c\u8d26\u6237\u6ca1\u6709\u8bbe\u7f6e\u5bc6\u7801, \u76f4\u63a5\u8fd4\u56de"], [198, "     *"], [199, "     * @param address"], [200, "     * @param restFul"], [201, "     * @return RpcClientResult"], [202, "     */"], [203, "    public static RpcClientResult getPassword(String address, RestFulUtils restFul) {"], [204, "       return getPassword(address, restFul, null);"], [205, "    }"], [206, ""], [207, "    /**"], [208, "     * \u6839\u636e\u8d26\u6237\u83b7\u53d6\u5bc6\u7801"], [209, "     * 1.\u5982\u679c\u8d26\u6237\u6709\u5bc6\u7801, \u5219\u8ba9\u7528\u6237\u8f93\u5165\u5bc6\u7801"], [210, "     * 2.\u5982\u679c\u8d26\u6237\u6ca1\u6709\u8bbe\u7f6e\u5bc6\u7801, \u76f4\u63a5\u8fd4\u56de"], [211, "     *"], [212, "     * @param address"], [213, "     * @param restFul"], [214, "     * @param prompt \u81ea\u5b9a\u4e49\u63d0\u793a"], [215, "     * @return RpcClientResult"], [216, "     */"], [217, "    public static RpcClientResult getPassword(String address, RestFulUtils restFul, String prompt) {"], [218, "        if (StringUtils.isBlank(address)) {"], [219, "            return RpcClientResult.getFailed(\"address is wrong\");"], [220, "        }"], [221, "        RpcClientResult result = restFul.get(\"/account/encrypted/\" + address, null);"], [222, "        if (!result.getCode().equals(KernelErrorCode.SUCCESS.getCode()) || result.isFailed()) {"], [223, "            return result;"], [224, "        }"], [225, "        String pwd = getPwd(prompt);"], [226, "        RpcClientResult rpcClientResult = new RpcClientResult();"], [227, "        rpcClientResult.setSuccess(true);"], [228, "        rpcClientResult.setCode(KernelErrorCode.SUCCESS.getCode());"], [229, "        rpcClientResult.setData(pwd);"], [230, "        return rpcClientResult;"], [231, "    }"]], "deleted": [[7, "import java.io.Console;"], [9, "import java.util.Scanner;"], [12, " * @Desription:"], [13, " * @Author: PierreLuo"], [14, " * @Date:"], [27, "/*  public static void confirmPwd(String newPwd) {"], [28, "        System.out.print(\"Please enter your password again:\");"], [29, "        Scanner scanner = new Scanner(System.in);"], [30, "        String confirmed = scanner.nextLine();"], [31, "        while (!newPwd.equals(confirmed)) {"], [32, "            System.out.print(\"The password you entered did not match.\\nEnter your new password: \");"], [33, "            confirmed = scanner.nextLine();"], [37, "   public static String getPwd(){"], [38, "        System.out.print(\"Please enter the password, if the account has no password directly return.\\npassword:\");"], [39, "        Scanner scanner = new Scanner(System.in);"], [40, "        return scanner.nextLine();"], [41, "    }*/"], [44, "        System.out.print(\"Please enter your new password again:\");"], [51, "                if(!newPwd.equals(confirmed)){"], [52, "                    System.out.print(\"The password you entered did not match.\\nEnter your new password: \");"], [57, "        }finally {"], [59, "                if(!reader.delete()){"], [68, "    public static String getPwd(){"], [69, "        System.out.print(\"Please enter the password, if the account has no password directly return.\\nEnter your password:\");"], [73, "            String pwd = reader.readLine('*');"], [74, "            return pwd;"], [77, "        }finally {"], [79, "                if(!reader.delete()){"], [98, "    public static String naToNuls(Object object){"], [99, "        if(null == object){"], [103, "        if(object instanceof Long){"], [104, "            na = (Long)object;"], [105, "        }else if(object instanceof Integer){"], [106, "            na = ((Integer)object).longValue();"], [107, "        }else{"], [113, "    public static String txTypeExplain(Integer type){"], [114, "        if(null == type){"], [117, "        switch (type){"], [141, "    public static String consensusExplain(Integer status){"], [142, "        if(null == status){"], [145, "        switch (status){"], [156, "    public static String statusConfirmExplain(Integer status){"], [157, "        if(null == status){"], [160, "        switch (status){"]]}, "num_lines_added": 106, "num_lines_removed": 44}