{"hash": "9e482a4fafdbd1364951e524f05baa6b6dd76854", "message": "update block handler", "file_num_lines": 11, "diff_parsed": {"added": [[29, "import io.nuls.protocol.base.utils.BlockSendThread;"], [39, "    @Override"], [40, "    public void onMessage(GetBlockRequest message, Node fromNode) {"], [41, "        BlockSendThread.offer(message, fromNode);"]], "deleted": [[27, "import io.nuls.core.tools.log.Log;"], [28, "import io.nuls.kernel.context.NulsContext;"], [29, "import io.nuls.kernel.exception.NulsException;"], [30, "import io.nuls.kernel.model.Block;"], [31, "import io.nuls.kernel.model.NulsDigestData;"], [32, "import io.nuls.kernel.model.Result;"], [35, "import io.nuls.protocol.constant.NotFoundType;"], [36, "import io.nuls.protocol.message.BlockMessage;"], [38, "import io.nuls.protocol.message.NotFoundMessage;"], [39, "import io.nuls.protocol.model.GetBlockDataParam;"], [40, "import io.nuls.protocol.model.NotFound;"], [41, "import io.nuls.protocol.service.BlockService;"], [48, "    private static final int MAX_SIZE = 1000;"], [49, "    private BlockService blockService = NulsContext.getServiceBean(BlockService.class);"], [51, "    @Override"], [52, "    public void onMessage(GetBlockRequest message, Node fromNode) throws NulsException {"], [53, "        GetBlockDataParam param = message.getMsgBody();"], [54, "        if (param.getSize() > MAX_SIZE) {"], [55, "            return;"], [56, "        }"], [57, "        if (param.getSize() == 1) {"], [58, "            Block block = null;"], [59, "            Result<Block> result = this.blockService.getBlock(param.getStartHash());"], [60, "            if (result.isFailed()) {"], [61, "                sendNotFound(param.getStartHash(), fromNode);"], [62, "                return;"], [63, "            }"], [64, "            block = result.getData();"], [65, "            sendBlock(block, fromNode);"], [66, "            return;"], [67, "        }"], [68, "        Block chainStartBlock = null;"], [69, "        Result<Block> blockResult = this.blockService.getBlock(param.getStartHash());"], [70, "        if (blockResult.isFailed()) {"], [71, "            sendNotFound(param.getStartHash(), fromNode);"], [72, "            return;"], [73, "        } else {"], [74, "            chainStartBlock = blockResult.getData();"], [75, "        }"], [76, "        Block chainEndBlock = null;"], [77, "        blockResult = this.blockService.getBlock(param.getEndHash());"], [78, "        if (blockResult.isFailed()) {"], [79, "            sendNotFound(param.getEndHash(), fromNode);"], [80, "            return;"], [81, "        } else {"], [82, "            chainEndBlock = blockResult.getData();"], [83, "        }"], [84, "        if (chainEndBlock.getHeader().getHeight() < chainStartBlock.getHeader().getHeight()) {"], [85, "            return;"], [86, "        }"], [87, "        long end = param.getStart() + param.getSize() - 1;"], [88, "        if (chainStartBlock.getHeader().getHeight() > param.getStart() || chainEndBlock.getHeader().getHeight() < end) {"], [89, "            sendNotFound(param.getStartHash(), fromNode);"], [90, "            return;"], [91, "        }"], [92, ""], [93, "        Block block = chainEndBlock;"], [94, "        while (true) {"], [95, "            this.sendBlock(block, fromNode);"], [96, "            if (block.getHeader().getHash().equals(chainStartBlock.getHeader().getHash())) {"], [97, "                break;"], [98, "            }"], [99, "            if (block.getHeader().getPreHash().equals(chainStartBlock.getHeader().getHash())) {"], [100, "                block = chainStartBlock;"], [101, "                continue;"], [102, "            }"], [103, "            block = blockService.getBlock(block.getHeader().getPreHash()).getData();"], [104, "        }"], [105, "    }"], [107, "    private void sendNotFound(NulsDigestData hash, Node node) {"], [108, "        NotFoundMessage event = new NotFoundMessage();"], [109, "        NotFound data = new NotFound(NotFoundType.BLOCK, hash);"], [110, "        event.setMsgBody(data);"], [111, "        Result result = this.messageBusService.sendToNode(event, node, true);"], [112, "        if (result.isFailed()) {"], [113, "            Log.warn(\"send not found failed:\" + node.getId() + \", hash:\" + hash);"], [114, "        }"], [115, "    }"], [116, ""], [117, "    private void sendBlock(Block block, Node fromNode) {"], [118, "        if (null == block) {"], [119, "            Log.warn(\"there is a null block\");"], [120, "            return;"], [121, "        }"], [122, "        BlockMessage blockMessage = new BlockMessage();"], [123, "        blockMessage.setMsgBody(block);"], [124, "        Result result = this.messageBusService.sendToNode(blockMessage, fromNode, true);"], [125, "        if (result.isFailed()) {"], [126, "            Log.warn(\"send block failed:\" + fromNode.getId() + \",height:\" + block.getHeader().getHeight());"], [127, "        }"], [129, ""]]}, "num_lines_added": 4, "num_lines_removed": 91}