{"hash": "f233860a016e129759b4b06c71ae4cc78a6b3cd0", "message": "//network module implement", "file_num_lines": 125, "diff_parsed": {"added": [[15, "import io.nuls.network.manager.NodeManager;"], [16, "import io.nuls.network.protocol.message.HandshakeMessage;"], [17, "import io.nuls.network.protocol.message.NetworkMessageBody;"], [26, " * @author Vivi"], [33, "    @Autowired"], [34, "    private NodeManager nodeManager;"], [35, ""], [43, ""], [44, "        // \u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u65e2\u662f\u670d\u52a1\u5668\uff0c\u540c\u65f6\u4e5f\u4f1a\u4f5c\u4e3a\u5ba2\u6237\u7aef\u53bb\u4e3b\u52a8\u8fde\u63a5\u5176\u4ed6\u8282\u70b9\uff0c"], [45, "        // \u4e3a\u9632\u6b62\u4e24\u4e2a\u8282\u70b9\u540c\u65f6\u4f5c\u4e3a\u670d\u52a1\u5668\u4e00\u65b9\u76f8\u4e92\u8fde\u63a5\uff0c\u5728\u8fd9\u91cc\u505a\u786c\u6027\u89c4\u5b9a\uff0c"], [46, "        // \u4e24\u4e2a\u8282\u70b9\u540c\u65f6\u76f8\u4e92\u8fde\u63a5\u65f6\uff0cip\u6570\u5b57\u5c0f\u7684\u4e00\u65b9\u4f5c\u4e3a\u670d\u52a1\u5668\uff0c\u5927\u7684\u4e00\u65b9\u4f5c\u4e3a\u5ba2\u6237\u7aef"], [52, "                    boolean isLocalServer = IpUtil.judgeLocalIsServer(localIP, remoteIP);"], [53, "                    //\u5224\u65ad\u81ea\u5df1\u662f\u5426\u4e3a\u670d\u52a1\u5668\u7aef"], [55, "                        //\u4e0d\u662f\u5219\u5220\u9664\u8fde\u63a5"], [59, "                        //\u5982\u679c\u81ea\u5df1\u662f\u670d\u52a1\u5668\u7aef\uff0c\u5219\u5220\u9664\u5f53\u524d\u4e3b\u52a8\u4f5c\u4e3a\u5ba2\u6237\u7aef\u8fde\u63a5\u51fa\u53bb\u7684\u8282\u70b9\uff0c\u4fdd\u5b58\u5f53\u524d\u4f5c\u4e3a\u670d\u52a1\u5668\u7aef\u7684\u8fde\u63a5"], [61, "                        networkService.removeNode(node.getId());"], [68, "        // \u5982\u679c\u76f8\u540cip\u7684\u8fde\u63a5\u5df2\u7ecf\u8d85\u8fc7\u4e8610\u4e2a\uff0c\u5219\u4e0d\u518d\u63a5\u53d7"], [92, "        boolean success = nodeManager.addConnNode(node);"], [93, ""], [99, "        NetworkMessageBody body = new NetworkMessageBody(NetworkConstant.HANDSHAKE_SEVER_TYPE, networkService.getNetworkParam().getPort(),"], [100, "                bestBlock.getHeader().getHeight(), bestBlock.getHeader().getHash());"], [101, "        HandshakeMessage handshakeMessage = new HandshakeMessage(body);"], [102, "        networkService.sendToNode(handshakeMessage, node, false);"], [113, "        Node node = networkService.getNode(nodeId);"], [114, ""], [118, "                networkService.removeNode(nodeId);"], [120, "                Log.info(\"--------------server channel id different----------------------\");"], [121, "                Log.info(\"--------node:\" + node.getId() + \",type:\" + node.getType());"], [122, "                Log.info(node.getChannelId());"], [123, "                Log.info(channelId);"], [136, "                + \", localInfo: \" + local + \", remoteInfo: \" + remote);"], [145, "        Node node = networkService.getNode(nodeId);"]], "deleted": [[23, " * @author Vive"], [38, "                //getNetworkService().getNodes();"], [43, "                    boolean isLocalServer = IpUtil.judgeIsLocalServer(localIP, remoteIP);"], [49, "                        getNetworkService().removeNode(node.getId());"], [55, "        // if has a node with same ip, and it's a out node, close this channel"], [80, "//        boolean success = getNetworkService().addConnNode(node);"], [81, "        boolean success = false;"], [87, "//        HandshakeEvent event = new HandshakeEvent(NetworkConstant.HANDSHAKE_SEVER_TYPE, getNetworkService().getNetworkParam().getPort(),"], [88, "//                bestBlock.getHeader().getHeight(), bestBlock.getHeader().getHash().getDigestHex());"], [89, "//        getNetworkService().sendToNode(event, nodeId, false);"], [100, "        Node node = getNetworkService().getNode(nodeId);"], [104, "                getNetworkService().removeNode(nodeId);"], [106, "                Log.debug(\"--------------channel id different----------------------\");"], [107, "                Log.debug(node.getChannelId());"], [108, "                Log.debug(channelId);"], [121, "                    + \", localInfo: \" + local + \", remoteInfo: \" + remote);"], [130, "        Node node = getNetworkService().getNode(nodeId);"], [142, "    private NetworkService getNetworkService() {"], [143, "        if (networkService == null) {"], [144, "            networkService = NulsContext.getServiceBean(NetworkService.class);"], [145, "        }"], [146, "        return networkService;"], [147, "    }"]]}, "num_lines_added": 32, "num_lines_removed": 23}