{"hash": "f913cf6b8c54e6673d998a7c9e8856fe9751c7c6", "message": "Migrate to the new fabric8 client for kubernetes.", "file_num_lines": 376, "diff_parsed": {"added": [[27, "import io.fabric8.kubernetes.api.model.PodBuilder;"], [29, "import io.fabric8.kubernetes.client.KubernetesClient;"], [37, "import javax.annotation.CheckForNull;"], [87, "    private transient KubernetesClient client;"], [177, "    public KubernetesClient connect()  {"], [181, "        if (client == null) {"], [183, "                if (client != null)"], [184, "                    return client;"], [186, "                client = new KubernetesFactoryAdapter(serverUrl, serverCertificate, credentialsId, skipTlsVerify)"], [187, "                        .createClient();"], [190, "        return client;"], [215, ""], [216, "        return new PodBuilder()"], [217, "                .withNewMetadata()"], [218, "                    .withName(slave.getNodeName())"], [219, "                    .withLabels(getLabelsFor(id))"], [220, "                .endMetadata()"], [221, "                .withNewSpec()"], [222, "                    .addNewContainer()"], [223, "                        .withName(CONTAINER_NAME)"], [224, "                        .withImage(template.getImage())"], [225, "                        .withNewSecurityContext()"], [226, "                            .withPrivileged(template.isPrivileged())"], [227, "                        .endSecurityContext()"], [228, "                        .withEnv(env)"], [229, "                        .withCommand(parseDockerCommand(template.getCommand()))"], [230, "                        .addToArgs(slave.getComputer().getJnlpMac())"], [231, "                        .addToArgs(slave.getComputer().getName())"], [232, "                .endContainer()"], [233, "                .withRestartPolicy(\"Never\")"], [234, "                .endSpec()"], [235, "                .build();"], [306, "                pod = connect().pods().inNamespace(namespace).create(pod);"], [322, "                    pod = connect().pods().inNamespace(namespace).withName(podId).get();"], [390, "        KubernetesClient client = connect();"], [391, "        PodList slaveList = client.pods().inNamespace(namespace).withLabels(POD_LABEL).list();"], [392, "        PodList namedList = client.pods().inNamespace(namespace).withLabel(\"name\", getIdForLabel(label)).list();"], [393, ""], [394, ""], [395, "        if (containerCap < slaveList.getItems().size()) {"], [396, "            LOGGER.log(Level.INFO, \"Total container cap of \" + containerCap + \" reached, not provisioning.\");"], [397, "            return false;"], [400, "        if (template.getInstanceCap() < namedList.getItems().size()) {"], [401, "            LOGGER.log(Level.INFO, \"Template instance cap of \" + template.getInstanceCap() + \" reached for template \""], [402, "                    + template.getImage() + \", not provisioning.\");"], [403, "            return false; // maxed out"], [404, "        }"], [466, "            KubernetesClient client = new KubernetesFactoryAdapter(serverUrl.toExternalForm(),"], [467, "                    Util.fixEmpty(serverCertificate), Util.fixEmpty(credentialsId), skipTlsVerify)"], [468, "                    .createClient();"], [470, "            client.pods().inNamespace(namespace).list();"]], "deleted": [[13, ""], [25, "import io.fabric8.kubernetes.api.Kubernetes;"], [26, "import io.fabric8.kubernetes.api.KubernetesHelper;"], [27, "import io.fabric8.kubernetes.api.model.Container;"], [32, "import io.fabric8.kubernetes.api.model.PodSpec;"], [33, "import io.fabric8.kubernetes.api.model.SecurityContext;"], [34, "import io.fabric8.utils.Filter;"], [37, ""], [58, "import javax.annotation.CheckForNull;"], [59, ""], [94, "    private transient Kubernetes connection;"], [184, "    public Kubernetes connect() throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {"], [188, "        if (connection == null) {"], [190, "                if (connection != null)"], [191, "                    return connection;"], [193, "                connection = new KubernetesFactoryAdapter(serverUrl, serverCertificate, credentialsId, skipTlsVerify)"], [194, "                        .createKubernetes();"], [197, "        return connection;"], [211, "        Pod pod = new Pod();"], [212, ""], [213, "        KubernetesHelper.setName(pod, slave.getNodeName());"], [214, ""], [215, "        pod.getMetadata().setLabels(getLabelsFor(id));"], [216, ""], [217, "        Container manifestContainer = new Container();"], [218, ""], [219, "        manifestContainer.setName(CONTAINER_NAME);"], [220, "        manifestContainer.setImage(template.getImage());"], [221, "        if (template.isPrivileged())"], [222, "            manifestContainer.setSecurityContext(new SecurityContext(null, true, null, null));"], [223, ""], [235, "        manifestContainer.setEnv(env);"], [236, ""], [237, "        // command: SECRET SLAVE_NAME"], [238, "        List<String> cmd = parseDockerCommand(template.getCommand());"], [239, "        List<String> args = parseDockerCommand(template.getArgs());"], [240, "        args = args == null ? new ArrayList<String>(2) : args;"], [241, "        args.add(slave.getComputer().getJnlpMac()); // secret"], [242, "        args.add(slave.getComputer().getName()); // name"], [243, "        manifestContainer.setCommand(cmd);"], [244, "        manifestContainer.setArgs(args);"], [245, ""], [246, "        List<Container> containers = new ArrayList<Container>();"], [247, "        containers.add(manifestContainer);"], [248, ""], [249, "        PodSpec podSpec = new PodSpec();"], [250, "        pod.setSpec(podSpec);"], [251, "        podSpec.setContainers(containers);"], [252, "        podSpec.setRestartPolicy(\"Never\");"], [253, ""], [254, "        return pod;"], [325, "                String podJson = connect().createPod(pod, namespace);"], [341, "                    pod = connect().getPod(podId, namespace);"], [409, "        final Filter<Pod> slaveFilter = KubernetesHelper.createPodFilter(POD_LABEL);"], [410, "        final Filter<Pod> nameFilter = KubernetesHelper.createPodFilter(ImmutableMap.of(\"name\", getIdForLabel(label)));"], [411, ""], [412, "        // fabric8 does not support labelSelector query parameter"], [413, "        PodList allPods = connect().getPods(namespace);"], [414, "        int c = 0;"], [415, "        int t = 0;"], [416, "        for (Pod pod : allPods.getItems()) {"], [417, "            if (slaveFilter.matches(pod)) {"], [418, "                if (++c > containerCap) {"], [419, "                    LOGGER.log(Level.INFO, \"Total container cap of \" + containerCap + \" reached, not provisioning.\");"], [420, "                    return false; // maxed out"], [421, "                }"], [422, "            }"], [423, "            if (nameFilter.matches(pod)) {"], [424, "                if (++t > template.getInstanceCap()) {"], [425, "                    LOGGER.log(Level.INFO, \"Template instance cap of \" + template.getInstanceCap() + \" reached for template \""], [426, "                            + template.getImage() + \", not provisioning.\");"], [427, "                    return false; // maxed out"], [428, "                }"], [429, "            }"], [493, "            Kubernetes kube = new KubernetesFactoryAdapter(serverUrl.toExternalForm(),"], [494, "                    Util.fixEmpty(serverCertificate), Util.fixEmpty(credentialsId), skipTlsVerify).createKubernetes();"], [495, "            kube.getPods(namespace);"]]}, "num_lines_added": 51, "num_lines_removed": 77}