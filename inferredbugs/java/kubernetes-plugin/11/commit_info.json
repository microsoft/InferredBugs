{"hash": "5c83b83ab49979bc3b9ad95129a1b4fab29118fb", "message": "[JENKINS-50525] Fix duplicated volume mounts\n\nVolume mounts were being compared by name instead of mountPath which needs to be unique per container", "file_num_lines": 110, "diff_parsed": {"added": [[10, "import java.util.function.Function;"], [11, "import java.util.logging.Level;"], [12, "import java.util.logging.Logger;"], [13, "import java.util.stream.Collectors;"], [18, "import org.jvnet.hudson.test.LoggerRule;"], [36, "    @Rule"], [37, "    public LoggerRule logs = new LoggerRule().record(Logger.getLogger(KubernetesCloud.class.getPackage().getName()),"], [38, "            Level.ALL);"], [39, ""], [82, "        setupStubs();"], [83, "        Pod pod = new PodTemplateBuilder(template).withSlave(slave).build();"], [84, "        validatePod(pod);"], [85, "    }"], [87, "    private void setupStubs() {"], [99, "        Map<String, Container> containers = pod.getSpec().getContainers().stream()"], [100, "                .collect(Collectors.toMap(Container::getName, Function.identity()));"], [107, "        Map<String, Volume> volumes = pod.getSpec().getVolumes().stream()"], [108, "                .collect(Collectors.toMap(Volume::getName, Function.identity()));"], [109, "        assertEquals(3, volumes.size());"], [112, "        assertNotNull(volumes.get(\"host-volume\"));"], [115, "        assertEquals(2, mounts.size());"], [116, "        assertEquals(new VolumeMount(\"/container/data\", \"host-volume\", null, null), mounts.get(0));"], [117, "        assertEquals(new VolumeMount(\"/home/jenkins\", \"workspace-volume\", false, null), mounts.get(1));"], [122, ""], [123, "    @Test"], [124, "    public void testOverridesFromYaml() throws Exception {"], [125, "        PodTemplate template = new PodTemplate();"], [126, "        template.setYaml(new String(IOUtils.toByteArray(getClass().getResourceAsStream(\"pod-overrides.yaml\"))));"], [127, "        setupStubs();"], [128, "        Pod pod = new PodTemplateBuilder(template).withSlave(slave).build();"], [129, ""], [130, "        Map<String, Container> containers = pod.getSpec().getContainers().stream()"], [131, "                .collect(Collectors.toMap(Container::getName, Function.identity()));"], [132, "        assertEquals(1, containers.size());"], [133, "        Container jnlp = containers.get(\"jnlp\");"], [134, "        assertEquals(\"Wrong number of volume mounts: \" + jnlp.getVolumeMounts(), 1, jnlp.getVolumeMounts().size());"], [135, "    }"], [136, ""]], "deleted": [[79, ""], [80, "        Pod pod = new PodTemplateBuilder(template).withSlave(slave).build();"], [81, "        validatePod(pod);"], [88, "        Map<String, Container> containers = new HashMap<>();"], [89, "        for (Container c : pod.getSpec().getContainers()) {"], [90, "            containers.put(c.getName(), c);"], [91, "        }"], [98, "        Map<String, Volume> volumes = new HashMap<>();"], [99, "        for (Volume v : pod.getSpec().getVolumes()) {"], [100, "            volumes.put(v.getName(), v);"], [101, "        }"], [102, "        assertEquals(2, volumes.size());"], [107, "        assertEquals(1, mounts.size());"]]}, "num_lines_added": 38, "num_lines_removed": 13}