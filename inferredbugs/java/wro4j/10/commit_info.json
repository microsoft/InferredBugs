{"hash": "252fb145afe3d4cba7abda8f4c43bb72a748c46e", "message": "create LessCssFilter", "file_num_lines": 83, "diff_parsed": {"added": [[5, "import java.io.Reader;"], [6, "import java.io.StringReader;"], [7, "import java.io.StringWriter;"], [8, "import java.io.Writer;"], [26, "import ro.isdc.wro.model.group.processor.Injector;"], [27, "import ro.isdc.wro.model.group.processor.InjectorBuilder;"], [29, "import ro.isdc.wro.util.StopWatch;"], [48, "    doInit(config);"], [52, "   * Allows custom initialization."], [53, "   */"], [54, "  protected void doInit(final FilterConfig config) {"], [55, "  }"], [56, ""], [57, "  /**"], [67, "      final ByteArrayOutputStream os = new ByteArrayOutputStream();"], [68, "      HttpServletResponse wrappedResponse = new RedirectedStreamServletResponseWrapper(os, response);"], [69, ""], [70, "      chain.doFilter(req, wrappedResponse);"], [71, ""], [72, "      final Reader reader = new StringReader(new String(os.toByteArray(), Context.get().getConfig().getEncoding()));"], [73, "      doProcess(reader, response.getWriter());"], [76, "    } finally {"], [80, ""], [81, "  /**"], [82, "   * Applies configured processor on the intercepted stream."], [83, "   */"], [84, "  private void doProcess(final Reader reader, final Writer writer) throws IOException {"], [85, "    Reader input = reader;"], [86, "    Writer output = null;"], [87, "    final StopWatch stopWatch = new StopWatch();"], [88, "    Injector injector = new InjectorBuilder().build();"], [89, "    for (final ResourcePreProcessor processor : processorsList()) {"], [90, "      stopWatch.start(\"Using \" + processor.getClass().getSimpleName());"], [91, "      //inject all required properites"], [92, "      injector.inject(processor);"], [93, ""], [94, "      output = new StringWriter();"], [95, "      processor.process(null, input, output);"], [96, ""], [97, "      input = new StringReader(output.toString());"], [98, "      stopWatch.stop();"], [99, "    }"], [100, "    LOG.debug(stopWatch.prettyPrint());"], [101, "    writer.write(output.toString());"], [102, "  }"], [103, ""], [115, "      chain.doFilter(Context.get().getRequest(), response);"], [126, ""], [127, "  /**"], [128, "   * {@inheritDoc}"], [129, "   */"], [130, "  public void destroy() {"], [131, "  }"]], "deleted": [[5, "import java.io.OutputStream;"], [54, "      chain.doFilter(req, res);"], [57, "    } finally {"], [61, ""], [73, "      final OutputStream os = new ByteArrayOutputStream();"], [74, "      HttpServletResponse wrappedResponse = new RedirectedStreamServletResponseWrapper(os, response);"], [75, "      chain.doFilter(Context.get().getRequest(), wrappedResponse);"]]}, "num_lines_added": 53, "num_lines_removed": 7}