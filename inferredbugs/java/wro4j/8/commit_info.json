{"hash": "9708456ec29d8dcff77301ecfb533bd9ad558087", "message": "create redirectedStream response wrapper & associated unit test", "file_num_lines": 77, "diff_parsed": {"added": [[23, "import ro.isdc.wro.http.support.RedirectedStreamServletResponseWrapper;"], [34, "  /**"], [35, "   * Used to locate external resources. No wildcard handling is required."], [36, "   */"], [37, "  private UriLocator externalResourceLocator = new UrlUriLocator() {"], [38, "    protected boolean disableWildcards() {"], [39, "      return true;"], [40, "    };"], [41, "  };"], [42, ""], [71, "        return externalResourceLocator.locate(absolutePath);"], [74, "      final ServletRequest servletRequest = getWrappedServletRequest(request, location);"], [76, "      final ServletResponse servletResponse = new RedirectedStreamServletResponseWrapper(os, response);"], [79, "      dispatcher.include(servletRequest, servletResponse);"], [84, "      servletResponse.getWriter().flush();"]], "deleted": [[10, "import java.io.OutputStream;"], [11, "import java.io.PrintWriter;"], [12, "import java.net.URL;"], [13, "import java.net.URLConnection;"], [16, "import javax.servlet.ServletOutputStream;"], [22, "import javax.servlet.http.HttpServletResponseWrapper;"], [24, "import org.apache.commons.io.IOUtils;"], [30, "import ro.isdc.wro.config.jmx.WroConfiguration;"], [31, "import ro.isdc.wro.http.support.DelegatingServletOutputStream;"], [42, ""], [71, ""], [72, "        return getLocationStream(absolutePath);"], [75, "      final ServletRequest wrappedRequest = getWrappedServletRequest(request, location);"], [77, "      final ServletResponse wrappedResponse = getWrappedServletResponse(response, os);"], [80, "      dispatcher.include(wrappedRequest, wrappedResponse);"], [85, "      wrappedResponse.getWriter().flush();"], [105, ""], [106, "  /**"], [107, "   * Opens a connection for a given location and retrive the stream. The connection will be configured with correct"], [108, "   * timout based on values from {@link WroConfiguration}."], [109, "   */"], [110, "  private InputStream getLocationStream(final String location) throws IOException {"], [111, "    Validate.notNull(location);"], [112, "    final int timeout = Context.get().getConfig().getConnectionTimeout();"], [113, "    final URL url = new URL(location);"], [114, "    final URLConnection connection = url.openConnection();"], [115, "    // avoid jar file locking on Windows."], [116, "    connection.setUseCaches(false);"], [117, "    // setting these timeouts ensures the client does not deadlock indefinitely"], [118, "    // when the server has problems."], [119, "    LOG.debug(\"Computed timeout milliseconds: {}\", timeout);"], [120, "    connection.setConnectTimeout(timeout);"], [121, "    connection.setReadTimeout(timeout);"], [122, "    return connection.getInputStream();"], [123, "  }"], [124, ""], [149, ""], [150, ""], [151, "  /**"], [152, "   * Build a wrapped servlet response which will be used for dispatching."], [153, "   */"], [154, "  private ServletResponse getWrappedServletResponse(final HttpServletResponse response, final ByteArrayOutputStream os) {"], [155, "    /**"], [156, "     * Both servletOutputStream and PrintWriter must be overriden in order to be sure that dispatched servlet will write"], [157, "     * to the pipe."], [158, "     */"], [159, "    final HttpServletResponseWrapper wrappedResponse = new HttpServletResponseWrapper(response) {"], [160, "      /**"], [161, "       * PrintWrapper of wrapped response."], [162, "       */"], [163, "      private PrintWriter pw = new PrintWriter(os);"], [164, ""], [165, "      /**"], [166, "       * Servlet output stream of wrapped response."], [167, "       */"], [168, "      private ServletOutputStream sos = new DelegatingServletOutputStream(os);"], [169, ""], [170, ""], [171, "      /**"], [172, "       * {@inheritDoc}"], [173, "       */"], [174, "      @Override"], [175, "      public void sendError(final int sc)"], [176, "        throws IOException {"], [177, "        onError(sc, \"\");"], [178, "        super.sendError(sc);"], [179, "      }"], [180, ""], [181, ""], [182, "      /**"], [183, "       * {@inheritDoc}"], [184, "       */"], [185, "      @Override"], [186, "      public void sendError(final int sc, final String msg)"], [187, "        throws IOException {"], [188, "        onError(sc, msg);"], [189, "        super.sendError(sc, msg);"], [190, "      }"], [191, ""], [192, ""], [193, "      /**"], [194, "       * Use an empty stream to avoid container writing unwanted message when a resource is missing."], [195, "       *"], [196, "       * @param sc status code."], [197, "       * @param msg"], [198, "       */"], [199, "      private void onError(final int sc, final String msg) {"], [200, "        LOG.debug(\"Error detected with code: {} and message: {}\", sc, msg);"], [201, "        final OutputStream emptyStream = new ByteArrayOutputStream();"], [202, "        pw = new PrintWriter(emptyStream);"], [203, "        sos = new DelegatingServletOutputStream(emptyStream);"], [204, "      }"], [205, ""], [206, ""], [207, "      @Override"], [208, "      public ServletOutputStream getOutputStream()"], [209, "        throws IOException {"], [210, "        return sos;"], [211, "      }"], [212, ""], [213, ""], [214, "      /**"], [215, "       * By default, redirect does not allow writing to output stream its content. In order to support this use-case, we"], [216, "       * need to open a new connection and read the content manually."], [217, "       */"], [218, "      @Override"], [219, "      public void sendRedirect(final String location)"], [220, "        throws IOException {"], [221, "        try {"], [222, "          LOG.debug(\"redirecting to: {}\", location);"], [223, "          final InputStream is = getLocationStream(location);"], [224, "          IOUtils.copy(is, sos);"], [225, "          is.close();"], [226, "        } catch (final IOException e) {"], [227, "          LOG.warn(\"{}: Invalid response for location: {}\", e.getClass().getName(), location);"], [228, "          throw e;"], [229, "        }"], [230, "      }"], [231, ""], [232, ""], [233, "      @Override"], [234, "      public PrintWriter getWriter()"], [235, "        throws IOException {"], [236, "        return pw;"], [237, "      }"], [238, "    };"], [239, "    return wrappedResponse;"], [240, "  }"]]}, "num_lines_added": 15, "num_lines_removed": 128}