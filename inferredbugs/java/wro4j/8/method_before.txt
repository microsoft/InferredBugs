  public InputStream getInputStream(final HttpServletRequest request, final HttpServletResponse response,
    final String location)
    throws IOException {
    Validate.notNull(request);
    Validate.notNull(response);
    // where to write the bytes of the stream
    final ByteArrayOutputStream os = new ByteArrayOutputStream();
    boolean warnOnEmptyStream = false;

    // preserve context, in case it is unset during dispatching
    final Context originalContext = Context.get();
    try {
      final RequestDispatcher dispatcher = request.getRequestDispatcher(location);
      if (dispatcher == null) {
        // happens when dynamic servlet context relative resources are included outside of the request cycle (inside
        // the thread responsible for refreshing resources)
        // Returns the part URL from the protocol name up to the query string and contextPath.
        final String servletContextPath = request.getRequestURL().toString().replace(request.getServletPath(), "");
        final String absolutePath = servletContextPath + location;

        return getLocationStream(absolutePath);
      }
      // Wrap request
      final ServletRequest wrappedRequest = getWrappedServletRequest(request, location);
      // Wrap response
      final ServletResponse wrappedResponse = getWrappedServletResponse(response, os);
      LOG.debug("dispatching request to location: " + location);
      // use dispatcher
      dispatcher.include(wrappedRequest, wrappedResponse);
      warnOnEmptyStream = true;
      // force flushing - the content will be written to
      // BytArrayOutputStream. Otherwise exactly 32K of data will be
      // written.
      wrappedResponse.getWriter().flush();
      os.close();
    } catch (final Exception e) {
      // Not only servletException can be thrown, also dispatch.include can throw NPE when the scheduler runs outside
      // of the request cycle, thus connection is unavailable. This is caused mostly when invalid resources are
      // included.
      LOG.debug("[FAIL] Error while dispatching the request for location {}", location);
      throw new IOException("Error while dispatching the request for location " + location);
    } finally {
      if (warnOnEmptyStream && os.size() == 0) {
        LOG.warn("Wrong or empty resource with location: {}", location);
      }
      // Put the context back
      if (!Context.isContextSet()) {
        Context.set(originalContext);
      }
    }
    return new ByteArrayInputStream(os.toByteArray());
  }