{"hash": "ee738a70862ab66c98dfbef5134825b583c3b641", "message": "searcher integration for Gov2 queries", "file_num_lines": 182, "diff_parsed": {"added": [[20, "import io.anserini.rerank.IdentityReranker;"], [21, "import io.anserini.rerank.RerankerCascade;"], [22, "import io.anserini.rerank.rm3.Rm3Reranker;"], [23, "import org.apache.logging.log4j.LogManager;"], [24, "import org.apache.logging.log4j.Logger;"], [25, "import org.apache.lucene.analysis.en.EnglishAnalyzer;"], [26, "import org.apache.lucene.document.Document;"], [27, "import org.apache.lucene.index.DirectoryReader;"], [28, "import org.apache.lucene.index.IndexReader;"], [29, "import org.apache.lucene.queryparser.classic.ParseException;"], [30, "import org.apache.lucene.queryparser.classic.QueryParser;"], [31, "import org.apache.lucene.search.IndexSearcher;"], [32, "import org.apache.lucene.search.Query;"], [33, "import org.apache.lucene.search.ScoreDoc;"], [34, "import org.apache.lucene.search.similarities.BM25Similarity;"], [35, "import org.apache.lucene.search.similarities.LMDirichletSimilarity;"], [36, "import org.apache.lucene.search.similarities.Similarity;"], [37, "import org.apache.lucene.store.Directory;"], [38, "import org.apache.lucene.store.FSDirectory;"], [39, "import org.apache.lucene.store.MMapDirectory;"], [40, "import org.kohsuke.args4j.CmdLineException;"], [41, "import org.kohsuke.args4j.CmdLineParser;"], [42, "import org.kohsuke.args4j.OptionHandlerFilter;"], [43, "import org.kohsuke.args4j.ParserProperties;"], [57, "import static io.anserini.index.IndexClueWeb09b.*;"], [60, " * Searcher for Gov2, ClueWeb09, and ClueWeb12 datasets."], [61, " * TREC Web Tracks from 2009 to 2014"], [62, " * TREC Terabyte Tracks from 2004 to 2006"], [66, "  private static final Logger LOG = LogManager.getLogger(SearchClueWeb09b.class);"], [67, ""], [100, "   * Read topics of TREC Web Tracks from 2009 to 2014"], [101, "   *"], [102, "   * @param topicsFile One of: topics.web.1-50.txt topics.web.51-100.txt topics.web.101-150.txt topics.web.151-200.txt topics.web.201-250.txt topics.web.251-300.txt"], [106, "  public static SortedMap<Integer, String> readWebTrackQueries(Path topicsFile) throws IOException {"], [134, "   * Read topics of TREC Terabyte Tracks from 2004 to 2006"], [136, "   * @param topicsFile One of: topics.701-750.txt topics.751-800.txt topics.801-850.txt"], [137, "   * @return SortedMap where keys are query/topic IDs and values are title portions of the topics"], [140, "  public static SortedMap<Integer, String> readTeraByteTackQueries(Path topicsFile) throws IOException {"], [142, "    SortedMap<Integer, String> map = new TreeMap<>();"], [143, "    List<String> lines = Files.readAllLines(topicsFile, StandardCharsets.UTF_8);"], [144, ""], [145, "    String number = \"\";"], [146, "    String query = \"\";"], [148, "    boolean found = false;"], [149, "    for (String line : lines) {"], [151, "      line = line.trim();"], [152, ""], [153, "      if (!found && \"<top>\".equals(line)) {"], [154, "        found = true;"], [155, "        continue;"], [156, "      }"], [157, ""], [158, "      if (found && line.startsWith(\"<title>\"))"], [159, "        query = line.substring(7).trim();"], [160, ""], [161, "      if (found && line.startsWith(\"<num>\")) {"], [162, "        int i = line.lastIndexOf(\" \");"], [163, "        if (-1 == i) throw new RuntimeException(\"cannot find space in : \" + line);"], [164, "        number = line.substring(i).trim();"], [165, "      }"], [166, ""], [167, "      if (found && \"</top>\".equals(line)) {"], [168, "        found = false;"], [169, "        int qID = Integer.parseInt(number);"], [170, ""], [171, "        map.put(qID, query);"], [172, ""], [173, "      }"], [175, "    lines.clear();"], [176, "    return map;"], [177, "  }"], [178, ""], [179, "  /**"], [180, "   * Prints TREC submission file to the standard output stream."], [181, "   *"], [182, "   * @param topics     queries"], [183, "   * @param similarity similarity"], [184, "   * @throws IOException"], [185, "   * @throws ParseException"], [186, "   */"], [187, ""], [188, "  public void search(SortedMap<Integer, String> topics, String submissionFile, Similarity similarity) throws IOException, ParseException {"], [189, ""], [192, "    searcher.setSimilarity(similarity);"], [195, "    final String runTag = \"BM25_Krovetz_\" + FIELD_BODY + \"_\" + similarity.toString();"], [201, "    queryParser.setDefaultOperator(QueryParser.Operator.OR);"], [212, "      ScoreDoc[] hits = searcher.search(query, 10000).scoreDocs;"], [243, "    long curTime = System.nanoTime();"], [244, "    SearchArgs searchArgs = new SearchArgs();"], [245, "    CmdLineParser parser = new CmdLineParser(searchArgs, ParserProperties.defaults().withUsageWidth(90));"], [246, ""], [247, "    try {"], [248, "      parser.parseArgument(args);"], [249, "    } catch (CmdLineException e) {"], [250, "      System.err.println(e.getMessage());"], [251, "      parser.printUsage(System.err);"], [252, "      System.err.println(\"Example: SearchGov2\" + parser.printExample(OptionHandlerFilter.REQUIRED));"], [253, "      return;"], [254, "    }"], [255, ""], [256, "    LOG.info(\"Reading index at \" + searchArgs.index);"], [257, "    Directory dir;"], [258, "    if (searchArgs.inmem) {"], [259, "      LOG.info(\"Using MMapDirectory with preload\");"], [260, "      dir = new MMapDirectory(Paths.get(searchArgs.index));"], [261, "      ((MMapDirectory) dir).setPreload(true);"], [262, "    } else {"], [263, "      LOG.info(\"Using default FSDirectory\");"], [264, "      dir = FSDirectory.open(Paths.get(searchArgs.index));"], [265, "    }"], [266, ""], [267, "    Similarity similarity = null;"], [268, ""], [269, "    if (searchArgs.ql) {"], [270, "      LOG.info(\"Using QL scoring model\");"], [271, "      similarity = new LMDirichletSimilarity(searchArgs.mu);"], [272, "    } else if (searchArgs.bm25) {"], [273, "      LOG.info(\"Using BM25 scoring model\");"], [274, "      similarity = new BM25Similarity(searchArgs.k1, searchArgs.b);"], [275, "    } else {"], [276, "      LOG.error(\"Error: Must specify scoring model!\");"], [277, "      System.exit(-1);"], [278, "    }"], [279, ""], [280, "    RerankerCascade cascade = new RerankerCascade();"], [281, "    if (searchArgs.rm3) {"], [282, "      cascade.add(new Rm3Reranker(new EnglishAnalyzer(), \"body\", \"src/main/resources/io/anserini/rerank/rm3/rm3-stoplist.gov2.txt\"));"], [283, "    } else {"], [284, "      cascade.add(new IdentityReranker());"], [285, "    }"], [286, ""], [287, "    Path topicsFile = Paths.get(searchArgs.topics);"], [288, ""], [289, "    if (!Files.exists(topicsFile) || !Files.isRegularFile(topicsFile) || !Files.isReadable(topicsFile)) {"], [290, "      throw new IllegalArgumentException(\"Topics file : \" + topicsFile + \" does not exist or is not a (readable) file.\");"], [293, "    SortedMap<Integer, String> topics = io.anserini.document.Collection.GOV2.equals(searchArgs.collection) ? readTeraByteTackQueries(topicsFile) : readWebTrackQueries(topicsFile);"], [295, "    SearchClueWeb09b searcher = new SearchClueWeb09b(searchArgs.index);"], [296, "    searcher.search(topics, searchArgs.output, similarity);"]], "deleted": [[20, "import static io.anserini.index.IndexClueWeb09b.FIELD_BODY;"], [21, "import static io.anserini.index.IndexClueWeb09b.FIELD_ID;"], [22, "import static io.anserini.index.IndexClueWeb09b.analyzer;"], [36, "import org.apache.lucene.document.Document;"], [37, "import org.apache.lucene.index.DirectoryReader;"], [38, "import org.apache.lucene.index.IndexReader;"], [39, "import org.apache.lucene.queryparser.classic.ParseException;"], [40, "import org.apache.lucene.queryparser.classic.QueryParser;"], [41, "import org.apache.lucene.search.IndexSearcher;"], [42, "import org.apache.lucene.search.Query;"], [43, "import org.apache.lucene.search.ScoreDoc;"], [44, "import org.apache.lucene.search.similarities.BM25Similarity;"], [45, "import org.apache.lucene.store.FSDirectory;"], [48, " * Searcher for ClueWeb09 Category B Corpus."], [49, " * 200 Topics from TREC 2009-1012 Web Track."], [85, "   * @param topicsFile One of: topics.web.1-50.txt topics.web.51-100.txt topics.web.101-150.txt topics.web.151-200.txt"], [89, "  static SortedMap<Integer, String> readQueries(Path topicsFile) throws IOException {"], [117, "   * Prints TREC submission file to the standard output stream."], [119, "   * @param topicsFile One of: topics.web.1-50.txt topics.web.51-100.txt topics.web.101-150.txt topics.web.151-200.txt"], [120, "   * @param operator   Default search operator: AND or OR"], [122, "   * @throws ParseException"], [125, "  public void search(String topicsFile, String submissionFile, QueryParser.Operator operator) throws IOException, ParseException {"], [127, "    Path topicsPath = Paths.get(topicsFile);"], [129, "    if (!Files.exists(topicsPath) || !Files.isRegularFile(topicsPath) || !Files.isReadable(topicsPath)) {"], [130, "      throw new IllegalArgumentException(\"Topics file : \" + topicsFile + \" does not exist or is not a (readable) file.\");"], [134, "    searcher.setSimilarity(new BM25Similarity());"], [137, "    final String runTag = \"BM25_Krovetz_\" + FIELD_BODY + \"_\" + operator.toString();"], [143, "    queryParser.setDefaultOperator(operator);"], [144, ""], [145, ""], [146, "    SortedMap<Integer, String> topics = readQueries(topicsPath);"], [157, "      ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;"], [188, "    if (args.length != 3) {"], [189, "      System.err.println(\"Usage: SearcherCW09B <topicsFile> <submissionFile> <indexDir>\");"], [190, "      System.err.println(\"topicsFile: input file containing queries. One of: topics.web.1-50.txt topics.web.51-100.txt topics.web.101-150.txt topics.web.151-200.txt\");"], [191, "      System.err.println(\"submissionFile: redirect stdout to capture the submission file for trec_eval or gdeval.pl\");"], [192, "      System.err.println(\"indexDir: index directory\");"], [193, "      System.exit(1);"], [196, "    String topicsFile = args[0];"], [197, "    String submissionFile = args[1];"], [198, "    String indexDir = args[2];"], [200, "    SearchClueWeb09b searcher = new SearchClueWeb09b(indexDir);"], [201, "    searcher.search(topicsFile, submissionFile, QueryParser.Operator.OR);"]]}, "num_lines_added": 138, "num_lines_removed": 43}