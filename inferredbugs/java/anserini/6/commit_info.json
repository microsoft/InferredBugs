{"hash": "f1e0432991c865c4e39d7a71490afe4b878c62e4", "message": "Freebase refactoring: object value normalization + LookupNode (#197)\n\nMore Freebase refactoring:\r\n+ better normalization of object values:\r\n   1. removes quote around string literals\r\n   2. undos MQL key escaping\r\n+ simplified code of LookupNode", "file_num_lines": 73, "diff_parsed": {"added": [[11, "import org.apache.lucene.search.TopDocs;"], [33, "    @Option(name = \"-index\", metaVar = \"[path]\", required = true, usage = \"index path\")"], [34, "    public Path index;"], [40, "  private LookupNode(Path indexPath) throws IOException {"], [42, "      throw new IllegalArgumentException(indexPath + \" does not exist or is not a directory.\");"], [54, "   * Prints all known facts about a particular mid."], [55, "   * @param mid subject mid"], [58, "  public void search(String mid) throws IOException {"], [62, "    TermQuery query = new TermQuery(new Term(IndexNodes.FIELD_MID, mid));"], [63, ""], [64, "    TopDocs topDocs = searcher.search(query, 1);"], [65, "    if (topDocs.totalHits == 0) {"], [66, "      System.err.println(\"Error: mid not found!\");"], [67, "      System.exit(-1);"], [68, "    }"], [69, "    if (topDocs.totalHits > 1) {"], [70, "      System.err.println(\"Error: more than one matching mid found. This shouldn't happen!\");"], [71, "      System.exit(-1);"], [74, "    Document doc = reader.document(topDocs.scoreDocs[0].doc);"], [75, "    doc.forEach(field -> {"], [76, "      System.out.println(field.name() + \" = \" + field.stringValue());"], [77, "    });"], [82, "    CmdLineParser parser = new CmdLineParser(searchArgs, ParserProperties.defaults().withUsageWidth(90));"], [89, "      System.err.println(\"Example: \"+ LookupNode.class.getSimpleName() +"], [90, "          parser.printExample(OptionHandlerFilter.REQUIRED));"], [94, "    LookupNode lookup = new LookupNode(searchArgs.index);"], [95, "    lookup.search(searchArgs.subject);"], [96, "    lookup.close();"]], "deleted": [[9, "import org.apache.lucene.search.CheckHits;"], [23, "import java.nio.file.Paths;"], [24, "import java.util.HashSet;"], [25, "import java.util.Set;"], [36, "    // Required arguments"], [37, ""], [38, "    @Option(name = \"-index\", metaVar = \"[Path]\", required = true, usage = \"index path\")"], [39, "    public String index;"], [43, ""], [44, "    // Optional arguments"], [45, ""], [46, "    @Option(name = \"-property\", metaVar = \"[name]\", usage = \"property\")"], [47, "    String predicate;"], [50, "  private LookupNode(String indexDir) throws IOException {"], [51, "    // Initialize index reader"], [52, "    LOG.info(\"Reading index from \" + indexDir);"], [53, ""], [54, "    Path indexPath = Paths.get(indexDir);"], [55, ""], [57, "      throw new IllegalArgumentException(indexDir + \" does not exist or is not a directory.\");"], [69, "   * Prints query results to the standard output stream."], [70, "   *"], [71, "   * @param subject the subject to search"], [72, "   * @param predicate the predicate to search, or null to print all properties"], [75, "  public void search(String subject, String predicate) throws Exception {"], [76, "    LOG.info(\"Querying started...\");"], [77, ""], [78, "    // Initialize index searcher"], [82, "    TermQuery query = new TermQuery(new Term(IndexNodes.FIELD_MID, subject));"], [83, ""], [84, "    // Collect all matching lucene document ids"], [85, "    Set<Integer> matchingDocIds = new HashSet<>(5);"], [86, "    searcher.search(query, new CheckHits.SetCollector(matchingDocIds));"], [87, ""], [88, "    if (matchingDocIds.size() == 0) { // We couldn't find any matching documents"], [89, "      String msg = \"Cannot find subject: \" + query;"], [90, "      LOG.warn(msg);"], [91, "    } else {"], [92, "      // Retrieve and print documents"], [93, "      matchingDocIds.forEach(luceneDocId -> {"], [94, "        try {"], [95, "          Document doc = reader.document(luceneDocId);"], [96, "          doc.iterator().forEachRemaining(field -> {"], [97, "            if (predicate == null || field.name().equals(predicate)) {"], [98, "              String fieldMessage = field.name() + \"\\t:\\t \" + field.stringValue();"], [99, "              LOG.info(fieldMessage);"], [100, "            }"], [101, "          });"], [102, "        } catch (IOException e) {"], [103, "          LOG.error(\"Error retrieving lucene document: {}\", luceneDocId, e);"], [104, "        }"], [105, "      });"], [108, "    LOG.info(\"Querying completed.\");"], [113, ""], [114, "    // Parse args"], [115, "    CmdLineParser parser = new CmdLineParser(searchArgs,"], [116, "            ParserProperties.defaults().withUsageWidth(90));"], [123, "      System.err.println(\"Example command: \"+ LookupNode.class.getSimpleName() +"], [124, "              parser.printExample(OptionHandlerFilter.REQUIRED));"], [128, "    new LookupNode(searchArgs.index).search(searchArgs.subject, searchArgs.predicate);"]]}, "num_lines_added": 28, "num_lines_removed": 60}