{"hash": "59eacf835ba16b2dc717a1c22e3846fcdd32a0ea", "message": "Refactored IndexTopics (#200)\n\n+ Refactored IndexTopics\r\n+ Refactored LookupTopic", "file_num_lines": 83, "diff_parsed": {"added": [[3, "import io.anserini.rerank.ScoredDocuments;"], [6, "import org.apache.lucene.analysis.core.SimpleAnalyzer;"], [11, "import org.apache.lucene.search.IndexSearcher;"], [14, "import org.apache.lucene.store.FSDirectory;"], [30, "  private static final Logger LOG = LogManager.getLogger(LookupNode.class);"], [35, "    @Option(name = \"-index\", metaVar = \"[path]\", required = true, usage = \"index path\")"], [36, "    public Path index;"], [41, "    @Option(name=\"-hits\", metaVar = \"[hits]\", usage = \"number of search hits\")"], [42, "    private int numHits = 20;"], [43, "  }"], [45, "  private LookupTopic(Path indexPath) throws IOException {"], [47, "      throw new IllegalArgumentException(indexPath + \" does not exist or is not a directory.\");"], [59, "   * Prints all known facts about a particular mid."], [60, "   * @param queryName query topic name"], [63, "  public void search(String queryName, int numHits) throws Exception {"], [67, "    // search for query in multiple fields"], [69, "            new String[]{ IndexTopics.FIELD_TITLE, IndexTopics.FIELD_LABEL, IndexTopics.FIELD_NAME },"], [70, "            new SimpleAnalyzer());"], [74, "    TopDocs rs = searcher.search(query, numHits);"], [75, "    ScoredDocuments docs = ScoredDocuments.fromTopDocs(rs, searcher);"], [78, "      String resultDoc = String.format(\"%d - SCORE: %f\\nTOPIC_MID: %s\\nOBJECT_NAME: %s\\nWIKI_TITLE: %s\\nW3_LABEL: %s\\n\","], [81, "              docs.documents[i].getField(IndexTopics.FIELD_TOPIC_MID).stringValue(),"], [82, "              docs.documents[i].getField(IndexTopics.FIELD_NAME).stringValue(),"], [83, "              docs.documents[i].getField(IndexTopics.FIELD_TITLE).stringValue(),"], [84, "              docs.documents[i].getField(IndexTopics.FIELD_LABEL).stringValue() );"], [91, "    CmdLineParser parser = new CmdLineParser(searchArgs, ParserProperties.defaults().withUsageWidth(90));"], [98, "      System.err.println(\"Example: \"+ LookupNode.class.getSimpleName() +"], [103, "    LOG.info(String.format(\"Index: %s\", searchArgs.index));"], [104, "    LOG.info(String.format(\"Query: %s\", searchArgs.query));"], [105, "    LOG.info(String.format(\"Hits: %s\", searchArgs.numHits));"], [106, ""], [107, "    LookupTopic lookup = new LookupTopic(searchArgs.index);"], [108, "    lookup.search(searchArgs.query, searchArgs.numHits);"], [109, "    lookup.close();"]], "deleted": [[3, "import io.anserini.kg.freebase.IndexTopics.TopicLuceneDocumentGenerator;"], [4, ""], [9, "import org.apache.lucene.search.similarities.BM25Similarity;"], [10, "import org.apache.lucene.search.similarities.Similarity;"], [11, "import org.apache.lucene.search.IndexSearcher;"], [12, "import org.apache.lucene.store.FSDirectory;"], [13, "import org.apache.lucene.analysis.core.SimpleAnalyzer;"], [18, "import io.anserini.rerank.ScoredDocuments;"], [29, "import java.nio.file.Paths;"], [35, "  private static final Logger LOG = LogManager.getLogger(LookupTopic.class);"], [40, "    // Required arguments"], [41, ""], [42, "    @Option(name = \"-index\", metaVar = \"[Path]\", required = true, usage = \"index path\")"], [43, "    public String index;"], [47, "  }"], [48, ""], [49, "  private LookupTopic(String indexDir) throws IOException {"], [50, "    // Initialize index reader"], [51, "    LOG.info(\"Reading index from \" + indexDir);"], [53, "    Path indexPath = Paths.get(indexDir);"], [56, "      throw new IllegalArgumentException(indexDir + \" does not exist or is not a directory.\");"], [68, "   * Prints query results to the standard output stream."], [69, "   *"], [70, "   * @param queryName the entity name to search"], [73, "  public void search(String queryName) throws Exception {"], [74, "    LOG.info(\"Querying started...\");"], [75, ""], [78, "    SimpleAnalyzer analyzer = new SimpleAnalyzer();"], [79, "    int numHits = 20;"], [80, ""], [81, "    // find exact title"], [82, "    QueryParser titleParser = new QueryParser(TopicLuceneDocumentGenerator.FIELD_TITLE, analyzer);"], [83, "    Query titleQuery = titleParser.parse(queryName);"], [84, "    TopDocs rs = searcher.search(titleQuery, numHits);"], [85, "    ScoredDocuments docs = ScoredDocuments.fromTopDocs(rs, searcher);"], [87, "    for (int i = 0; i < docs.documents.length; i++) {"], [88, "      String resultDoc = String.format(\"%d - SCORE: %f\\nTOPIC_MID: %s\\nWIKI_TITLE: %s\\nW3_LABEL: %s\\n\\n\","], [89, "              (i + 1),"], [90, "              docs.scores[i],"], [91, "              docs.documents[i].getField(TopicLuceneDocumentGenerator.FIELD_TOPIC_MID).stringValue(),"], [92, "              docs.documents[i].getField(TopicLuceneDocumentGenerator.FIELD_TITLE).stringValue(),"], [93, "              docs.documents[i].getField(TopicLuceneDocumentGenerator.FIELD_LABEL).stringValue());"], [94, "      System.out.println(resultDoc);"], [95, "    }"], [96, ""], [97, "    if (docs.documents.length != 0) {"], [98, "      System.out.println(\"Exact WIKI_TITLE found! Ending search.\");"], [99, "      return;"], [100, "    } else {"], [101, "      System.out.println(\"Exact WIKI_TITLE not found. Searching for the label...\");"], [102, "    }"], [103, "    System.out.println();"], [104, ""], [105, "    // find exact label"], [106, "    QueryParser labelParser = new QueryParser(TopicLuceneDocumentGenerator.FIELD_LABEL, analyzer);"], [107, "    Query labelQuery = labelParser.parse(queryName);"], [108, "    rs = searcher.search(labelQuery, numHits);"], [109, "    docs = ScoredDocuments.fromTopDocs(rs, searcher);"], [110, ""], [111, "    for (int i = 0; i < docs.documents.length; i++) {"], [112, "      String resultDoc = String.format(\"%d - SCORE: %f\\nTOPIC_MID: %s\\nWIKI_TITLE: %s\\nW3_LABEL: %s\\n\\n\","], [113, "              (i + 1),"], [114, "              docs.scores[i],"], [115, "              docs.documents[i].getField(TopicLuceneDocumentGenerator.FIELD_TOPIC_MID).stringValue(),"], [116, "              docs.documents[i].getField(TopicLuceneDocumentGenerator.FIELD_TITLE).stringValue(),"], [117, "              docs.documents[i].getField(TopicLuceneDocumentGenerator.FIELD_LABEL).stringValue());"], [118, "      System.out.println(resultDoc);"], [119, "    }"], [120, ""], [121, "    if (docs.documents.length != 0) {"], [122, "      System.out.println(\"Exact W3_LABEL found! Ending search.\");"], [123, "      return;"], [124, "    } else {"], [125, "      System.out.println(\"Exact W3_LABEL not found. Ranking the topics using BM25 according the text/title/label...\");"], [126, "    }"], [127, "    System.out.println();"], [128, ""], [129, "    float k1 = 1.5f;"], [130, "    float b = 0.75f;"], [131, "    Similarity similarity = new BM25Similarity(k1, b);"], [132, "    searcher.setSimilarity(similarity);"], [134, "            new String[]{ TopicLuceneDocumentGenerator.FIELD_TITLE,"], [135, "                    TopicLuceneDocumentGenerator.FIELD_LABEL,"], [136, "                    TopicLuceneDocumentGenerator.FIELD_TEXT },"], [137, "            analyzer);"], [141, "    rs = searcher.search(query, numHits);"], [142, "    docs = ScoredDocuments.fromTopDocs(rs, searcher);"], [145, "      String resultDoc = String.format(\"%d - SCORE: %f\\nTOPIC_MID: %s\\nWIKI_TITLE: %s\\nW3_LABEL: %s\\n\","], [148, "              docs.documents[i].getField(TopicLuceneDocumentGenerator.FIELD_TOPIC_MID).stringValue(),"], [149, "              docs.documents[i].getField(TopicLuceneDocumentGenerator.FIELD_TITLE).stringValue(),"], [150, "              docs.documents[i].getField(TopicLuceneDocumentGenerator.FIELD_LABEL).stringValue() );"], [153, ""], [154, "    LOG.info(\"Querying completed.\");"], [159, ""], [160, "    // Parse args"], [161, "    CmdLineParser parser = new CmdLineParser(searchArgs,"], [162, "            ParserProperties.defaults().withUsageWidth(90));"], [169, "      System.err.println(\"Example command: \"+ LookupTopic.class.getSimpleName() +"], [174, "    new LookupTopic(searchArgs.index).search(searchArgs.query);"]]}, "num_lines_added": 34, "num_lines_removed": 99}