{"hash": "ee8c96fb4586509b4ce6b901ff8e6153494beb9d", "message": "Add test for #61", "file_num_lines": 131, "diff_parsed": {"added": [[67, "\t    assertEquals(33, paths.count());"], [76, "    private void initFile() {"], [77, "\tString[] listFile = { \"util/util.go\", \"mathutil/mathutil.go\", \"pixel/pixel.go\","], [78, "\t\t\"mathutil/filewithnocoverage.go\", \"issue60/a.go\", \"issue61/simplelinecomment.go\","], [79, "\t\t\"issue61/multilinecomment.go\", \"issue61/typestruct.go\" };"], [81, "\tBufferedReader reader;"], [84, "\t    for (int i = 0; i < listFile.length; i++) {"], [85, "\t\tSystem.out.println(listFile[i]);"], [86, "\t\treader = new BufferedReader(new FileReader("], [87, "\t\t\tnew File(CoverageSensor.class.getResource(\"/coverage/\" + listFile[i]).getFile())));"], [89, "\t\tString sCurrentLine;"], [91, "\t\tStringBuilder sb = new StringBuilder();"], [92, "\t\twhile ((sCurrentLine = reader.readLine()) != null) {"], [93, "\t\t    sb.append(sCurrentLine + \"\\n\");"], [94, "\t\t}"], [96, "\t\ttesterContext.fileSystem().add(new DefaultInputFile(\"myProjectKey\", listFile[i])"], [97, "\t\t\t.setLanguage(GoLanguage.KEY).initMetadata(sb.toString()));"], [101, "\t} catch (FileNotFoundException e) {"], [102, "\t    // TODO Auto-generated catch block"], [103, "\t    e.printStackTrace();"], [104, "\t} catch (IOException e) {"], [105, "\t    // TODO Auto-generated catch block"], [106, "\t    e.printStackTrace();"], [107, "\t}"], [108, "    }"], [110, "    @Test"], [111, "    public void testExecution() {"], [112, "\tfinal CoverageSensor sensor = new CoverageSensor();"], [113, "\tinitFile();"], [114, "\tsensor.execute(testerContext);"], [115, ""], [116, "\tMap<String, Map<Integer, Integer>> map = new HashMap<>();"], [117, "\tmap.put(\"myProjectKey:mathutil/mathutil.go\", ImmutableMap.of(7, 1));"], [118, "\tmap.put(\"myProjectKey:pixel/pixel.go\", ImmutableMap.of(21, 0, 37, 0));"], [119, ""], [120, "\tMap<Integer, Integer> testValuesMap = new HashMap<>();"], [121, ""], [122, "\ttestValuesMap.put(3, null);"], [123, "\ttestValuesMap.put(1, null);"], [124, "\ttestValuesMap.put(4, null);"], [125, "\ttestValuesMap.put(8, 0);"], [126, "\ttestValuesMap.put(12, 0);"], [127, ""], [128, "\tmap.put(\"myProjectKey:mathutil/filewithnocoverage.go\", testValuesMap);"], [129, "\tmap.put(\"myProjectKey:issue60/a.go\", ImmutableMap.of(8, 0, 9, 0));"], [130, "\tMap<Integer, Integer> testValuesMap2 = new HashMap<>();"], [131, "\ttestValuesMap2.put(1, null);"], [132, "\ttestValuesMap2.put(2, null);"], [133, "\ttestValuesMap2.put(3, null);"], [134, "\ttestValuesMap2.put(4, null);"], [135, "\ttestValuesMap2.put(5, null);"], [136, "\ttestValuesMap2.put(6, null);"], [137, "\ttestValuesMap2.put(8, 0);"], [138, "\ttestValuesMap2.put(9, 0);"], [139, "\ttestValuesMap2.put(11, null);"], [140, "\tmap.put(\"myProjectKey:issue61/simplelinecomment.go\", testValuesMap2);"], [141, ""], [142, "\tMap<Integer, Integer> testValuesMap3 = new HashMap<>();"], [143, ""], [144, "\tfor (int i = 1; i <= 20; i++) {"], [145, "\t    testValuesMap3.put(i, null);"], [146, "\t}"], [147, "\ttestValuesMap3.put(26, null);"], [148, "\ttestValuesMap3.put(27, null);"], [149, "\ttestValuesMap3.put(28, null);"], [150, "\ttestValuesMap3.put(30, 0);"], [151, "\ttestValuesMap3.put(31, 0);"], [153, "\tmap.put(\"myProjectKey:issue61/multilinecomment.go\", testValuesMap3);"], [155, "\tMap<Integer, Integer> testValuesMap4 = new HashMap<>();"], [156, "\tfor (int i = 6; i <= 48; i++) {"], [157, "\t    testValuesMap4.put(i, null);"], [159, "\tmap.put(\"myProjectKey:issue61/typestruct.go\", testValuesMap4);"], [160, "\tmap.forEach((key, mapValue) -> {"], [161, "\t    mapValue.forEach((line, value) -> {"], [162, "\t\tassertEquals(\"line \" + line + \" \" + key, value, testerContext.lineHits(key, CoverageType.UNIT, line));"], [163, "\t    });"], [164, "\t});"]], "deleted": [[67, "\t    assertEquals(28, paths.count());"], [76, "    @Test"], [77, "    public void testExecution() {"], [78, "\tfinal CoverageSensor sensor = new CoverageSensor();"], [81, "\t    BufferedReader reader = new BufferedReader("], [82, "\t\t    new FileReader(new File(CoverageSensor.class.getResource(\"/coverage/util/util.go\").getFile())));"], [83, ""], [84, "\t    String sCurrentLine;"], [85, ""], [86, "\t    StringBuilder sb = new StringBuilder();"], [87, "\t    while ((sCurrentLine = reader.readLine()) != null) {"], [88, "\t\tsb.append(sCurrentLine + \"\\n\");"], [89, "\t    }"], [90, ""], [91, "\t    testerContext.fileSystem().add(new DefaultInputFile(\"myProjectKey\", \"util/util.go\")"], [92, "\t\t    .setLanguage(GoLanguage.KEY).initMetadata(sb.toString()));"], [93, ""], [94, "\t    reader = new BufferedReader(new FileReader("], [95, "\t\t    new File(CoverageSensor.class.getResource(\"/coverage/mathutil/mathutil.go\").getFile())));"], [96, ""], [97, "\t    sb = new StringBuilder();"], [98, "\t    while ((sCurrentLine = reader.readLine()) != null) {"], [99, "\t\tsb.append(sCurrentLine + \"\\n\");"], [100, "\t    }"], [101, ""], [102, "\t    testerContext.fileSystem().add(new DefaultInputFile(\"myProjectKey\", \"mathutil/mathutil.go\")"], [103, "\t\t    .setLanguage(GoLanguage.KEY).initMetadata(sb.toString()));"], [105, "\t    reader = new BufferedReader("], [106, "\t\t    new FileReader(new File(CoverageSensor.class.getResource(\"/coverage/pixel/pixel.go\").getFile())));"], [108, "\t    sb = new StringBuilder();"], [109, "\t    while ((sCurrentLine = reader.readLine()) != null) {"], [110, "\t\tsb.append(sCurrentLine + \"\\n\");"], [111, "\t    }"], [113, "\t    testerContext.fileSystem().add(new DefaultInputFile(\"myProjectKey\", \"pixel/pixel.go\")"], [114, "\t\t    .setLanguage(GoLanguage.KEY).initMetadata(sb.toString()));"], [116, "\t    reader = new BufferedReader(new FileReader("], [117, "\t\t    new File(CoverageSensor.class.getResource(\"/coverage/mathutil/filewithnocoverage.go\").getFile())));"], [119, "\t    sb = new StringBuilder();"], [120, "\t    while ((sCurrentLine = reader.readLine()) != null) {"], [121, "\t\tsb.append(sCurrentLine + \"\\n\");"], [124, "\t    testerContext.fileSystem().add(new DefaultInputFile(\"myProjectKey\", \"mathutil/filewithnocoverage.go\")"], [125, "\t\t    .setLanguage(GoLanguage.KEY).initMetadata(sb.toString()));"], [126, ""], [127, "\t    reader = new BufferedReader("], [128, "\t\t    new FileReader(new File(CoverageSensor.class.getResource(\"/coverage/mathutil/a.go\").getFile())));"], [129, ""], [130, "\t    sb = new StringBuilder();"], [131, "\t    while ((sCurrentLine = reader.readLine()) != null) {"], [132, "\t\tsb.append(sCurrentLine + \"\\n\");"], [133, "\t    }"], [134, ""], [135, "\t    testerContext.fileSystem().add(new DefaultInputFile(\"myProjectKey\", \"mathutil/a.go\")"], [136, "\t\t    .setLanguage(GoLanguage.KEY).initMetadata(sb.toString()));"], [137, ""], [138, "\t    sensor.execute(testerContext);"], [139, ""], [140, "\t    Map<String, Map<Integer, Integer>> map = new HashMap<>();"], [141, "\t    map.put(\"myProjectKey:mathutil/mathutil.go\", ImmutableMap.of(7, 1));"], [142, "\t    map.put(\"myProjectKey:pixel/pixel.go\", ImmutableMap.of(21, 0, 37, 0));"], [143, ""], [144, "\t    Map<Integer, Integer> testValuesMap = new HashMap<>();"], [145, ""], [146, "\t    testValuesMap.put(3, null);"], [147, "\t    testValuesMap.put(1, null);"], [148, "\t    testValuesMap.put(4, null);"], [149, "\t    testValuesMap.put(8, 0);"], [150, "\t    testValuesMap.put(12, 0);"], [152, "\t    map.put(\"myProjectKey:mathutil/filewithnocoverage.go\", testValuesMap);"], [153, "\t    map.put(\"myProjectKey:mathutil/a.go\", ImmutableMap.of(8, 0, 9, 0));"], [155, "\t    map.forEach((key, mapValue) -> {"], [156, "\t\tmapValue.forEach((line, value) -> {"], [157, "\t\t    assertEquals(\"line \" + line + \" \" + key, value,"], [158, "\t\t\t    testerContext.lineHits(key, CoverageType.UNIT, line));"], [159, "\t\t});"], [160, "\t    });"], [162, "\t} catch (final FileNotFoundException e) {"], [163, "\t    e.printStackTrace();"], [164, "\t} catch (final IOException e) {"], [165, "\t    e.printStackTrace();"]]}, "num_lines_added": 77, "num_lines_removed": 79}