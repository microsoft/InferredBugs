{"hash": "83a387dcdf45b2470a07bc05a9820cabb214b724", "message": "change for user ProjectExplorer", "file_num_lines": 69, "diff_parsed": {"added": [[4, "import java.io.FileNotFoundException;"], [11, "import java.util.ArrayList;"], [13, "import java.util.List;"], [17, "import org.sonar.api.batch.fs.InputFile;"], [22, "import fr.univartois.sonargo.core.ProjectExplorer;"], [23, ""], [29, "    private List<Path> paths;"], [39, "\tProjectExplorer explorer = new ProjectExplorer(context);"], [40, "\tpaths = new ArrayList<>();"], [41, "\texplorer.searchByType(InputFile.Type.TEST).forEach(i -> paths.add(i.file().toPath()));"], [42, ""], [46, ""], [55, "    private CharBuffer getFileAsBufferFromPath(Path p) {"], [56, "\ttry (FileInputStream input = new FileInputStream(p.toString())) {"], [57, "\t    FileChannel channel = input.getChannel();"], [58, "\t    ByteBuffer bbuf = channel.map(FileChannel.MapMode.READ_ONLY, 0, (int) channel.size());"], [59, "\t    return Charset.forName(\"utf8\").newDecoder().decode(bbuf);"], [60, "\t} catch (FileNotFoundException e) {"], [61, "\t    LOGGER.warn(\"IO Exception caught -\", e);"], [62, "\t} catch (IOException e) {"], [63, "\t    LOGGER.warn(\"IO Exception caught -\", e);"], [64, "\t}"], [65, "\treturn null;"], [73, "\tMatcher matcher = MATCH_FUNC_NAME.matcher(getFileAsBufferFromPath(p));"], [74, "\twhile (matcher.find()) {"], [75, "\t    String func = matcher.group(\"functionName\");"], [76, "\t    LOGGER.debug(\"Found function \" + func + \" at path \" + absolutePath);"], [77, "\t    if (func != null && absolutePath != null) {"], [78, "\t\tresult.put(func, absolutePath);"]], "deleted": [[9, "import java.nio.file.Files;"], [11, "import java.nio.file.Paths;"], [15, "import java.util.stream.Stream;"], [26, "    private Stream<Path> paths;"], [36, "\tpaths = Files.walk(Paths.get(baseDir)).filter(p -> p.toFile().getName().endsWith(\"_test.go\"));"], [48, "    private CharBuffer getFileAsBufferFromPath(Path p) throws IOException {"], [49, "\tFileInputStream input = new FileInputStream(p.toString());"], [50, "\tFileChannel channel = input.getChannel();"], [51, "\tByteBuffer bbuf = channel.map(FileChannel.MapMode.READ_ONLY, 0, (int) channel.size());"], [52, "\treturn Charset.forName(\"utf8\").newDecoder().decode(bbuf);"], [60, "\ttry {"], [61, "\t    Matcher matcher = MATCH_FUNC_NAME.matcher(getFileAsBufferFromPath(p));"], [62, "\t    while (matcher.find()) {"], [63, "\t\tString func = matcher.group(\"functionName\");"], [64, "\t\tLOGGER.debug(\"Found function \" + func + \" at path \" + absolutePath);"], [65, "\t\tif (func != null && absolutePath != null) {"], [66, "\t\t    result.put(func, absolutePath);"], [67, "\t\t}"], [69, "\t} catch (IOException e) {"], [70, "\t    LOGGER.warn(\"IO Exception caught -\", e);"]]}, "num_lines_added": 29, "num_lines_removed": 20}