{"hash": "e2d09f31a1f2ef67d13e3967150db9319ec0c6b4", "message": "using jOOL to simplify exception handling inside lambdas", "file_num_lines": 45, "diff_parsed": {"added": [[18, "import java.io.IOException;"], [23, "import java.util.logging.Level;"], [24, "import java.util.logging.Logger;"], [28, " * Provider of candidates for recommendation consisting in the preferences in a test set plus a set of randomly selected items from a test file for each user."], [31, " *"], [48, "     * @param candidatesPath path to the file of random items to add to the candidates"], [59, "        try (BufferedReader candidatesReader = new BufferedReader(new FileReader(candidatesPath))) {"], [60, "            return candidatesReader.lines().parallel().map(line -> {"], [61, "                CharSequence[] tokens = split(line, '\\t', 3);"], [62, "                final U user = uParser.parse(tokens[0]);"], [63, "                final List<I> candidates = new ArrayList<>();"], [64, "                for (CharSequence candidate : split(tokens[1], ',')) {"], [65, "                    candidates.add(iParser.parse(candidate));"], [66, "                }"], [67, "                testData.getUserPreferences(user).forEach(iv -> candidates.add(iv.id));"], [68, ""], [69, "                return new IdObject<>(user, candidates);"], [70, "            });"], [71, "        } catch (IOException ex) {"]], "deleted": [[25, " * Provider of candidates for recommendation consisting in the preferences in a"], [26, " * test set plus a set of randomly selected items from a test file for each user."], [29, " *"], [46, "     * @param candidatesPath path to the file of random items to add to the"], [47, "     * candidates"], [58, "        BufferedReader candidatesReader;"], [59, "        try {"], [60, "            candidatesReader = new BufferedReader(new FileReader(candidatesPath));"], [61, "        } catch (FileNotFoundException ex) {"], [64, ""], [65, "        return candidatesReader.lines().parallel().map(line -> {"], [66, "            CharSequence[] tokens = split(line, '\\t', 3);"], [67, "            final U user = uParser.parse(tokens[0]);"], [68, "            final List<I> candidates = new ArrayList<>();"], [69, "            for (CharSequence candidate : split(tokens[1], ',')) {"], [70, "                candidates.add(iParser.parse(candidate));"], [71, "            }"], [72, "            testData.getUserPreferences(user).forEach(iv -> candidates.add(iv.id));"], [73, ""], [74, "            return new IdObject<>(user, candidates);"], [75, "        });"]]}, "num_lines_added": 19, "num_lines_removed": 21}