{"hash": "e581657492431d82d204976058341c2592334f4e", "message": "English documentation. And make build(Map) compatible with HashMap and so on.", "file_num_lines": 118, "diff_parsed": {"added": [[60, "    public void testBuildAndParseWithBigFile() throws Exception"], [61, "    {"], [62, "        // Load test data from disk"], [63, "        Set<String> dictionary = loadDictionary(\"cn/dictionary.txt\");"], [64, "        final String text = loadText(\"cn/text.txt\");"], [65, "        // You can use any type of Map to hold data"], [66, "        Map<String, String> map = new TreeMap<String, String>();"], [67, "//        Map<String, String> map = new HashMap<String, String>();"], [68, "//        Map<String, String> map = new LinkedHashMap<String, String>();"], [69, "        for (String key : dictionary)"], [70, "        {"], [71, "            map.put(key, key);"], [72, "        }"], [73, "        // Build an AhoCorasickDoubleArrayTrie"], [74, "        AhoCorasickDoubleArrayTrie<String> acdat = new AhoCorasickDoubleArrayTrie<String>();"], [75, "        acdat.build(map);"], [76, "        // Test it"], [77, "        acdat.parseText(text, new AhoCorasickDoubleArrayTrie.IHit<String>()"], [78, "        {"], [79, "            @Override"], [80, "            public void hit(int begin, int end, String value)"], [81, "            {"], [82, "                assertEquals(text.substring(begin, end), value);"], [83, "            }"], [84, "        });"], [85, "    }"], [86, ""], [90, "        BufferedReader br = new BufferedReader(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream(path), \"UTF-8\"));"], [104, "        BufferedReader br = new BufferedReader(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream(path), \"UTF-8\"));"]], "deleted": [[63, "        BufferedReader br = new BufferedReader(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream(path)));"], [77, "        BufferedReader br = new BufferedReader(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream(path)));"]]}, "num_lines_added": 29, "num_lines_removed": 2}