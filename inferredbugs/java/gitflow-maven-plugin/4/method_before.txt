    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
        try {
            // check uncommitted changes
            checkUncommittedChanges();

            // git for-each-ref --format='%(refname:short)' refs/heads/release/*
            final String releaseBranches = gitFindBranches(gitFlowConfig
                    .getReleaseBranchPrefix());

            String releaseVersion = null;

            if (StringUtils.isBlank(releaseBranches)) {
                throw new MojoFailureException("There is no release branch.");
            } else if (StringUtils.countMatches(releaseBranches,
                    gitFlowConfig.getReleaseBranchPrefix()) > 1) {
                throw new MojoFailureException(
                        "More than one release branch exists. Cannot finish release.");
            } else {
                releaseVersion = releaseBranches.trim().substring(
                        releaseBranches.lastIndexOf(gitFlowConfig
                                .getReleaseBranchPrefix())
                                + gitFlowConfig.getReleaseBranchPrefix()
                                        .length());
            }

            if (StringUtils.isBlank(releaseVersion)) {
                throw new MojoFailureException("Release version is blank.");
            }

            if (!skipTestProject) {
                // git checkout release/...
                gitCheckout(releaseBranches.trim());

                // mvn clean test
                mvnCleanTest();
            }

            // git checkout master
            gitCheckout(gitFlowConfig.getProductionBranch());

            // git merge --no-ff release/...
            gitMergeNoff(gitFlowConfig.getReleaseBranchPrefix()
                    + releaseVersion);

            // get current project version from pom
            final String currentVersion = getCurrentProjectVersion();

            if (!skipTag) {
                String tagVersion = currentVersion;
                if (tychoBuild && ArtifactUtils.isSnapshot(currentVersion)) {
                    tagVersion = currentVersion.replace("-"
                            + Artifact.SNAPSHOT_VERSION, "");
                }

                // git tag -a ...
                gitTag(gitFlowConfig.getVersionTagPrefix() + tagVersion,
                        "tagging release");
            }

            // git checkout develop
            gitCheckout(gitFlowConfig.getDevelopmentBranch());

            // git merge --no-ff release/...
            gitMergeNoff(gitFlowConfig.getReleaseBranchPrefix()
                    + releaseVersion);

            String nextSnapshotVersion = null;
            // get next snapshot version
            try {
                final DefaultVersionInfo versionInfo = new DefaultVersionInfo(
                        currentVersion);
                nextSnapshotVersion = versionInfo.getNextVersion()
                        .getSnapshotVersionString();
            } catch (VersionParseException e) {
                if (getLog().isDebugEnabled()) {
                    getLog().debug(e);
                }
            }

            if (StringUtils.isBlank(nextSnapshotVersion)) {
                throw new MojoFailureException(
                        "Next snapshot version is blank.");
            }

            // mvn versions:set -DnewVersion=... -DgenerateBackupPoms=false
            mvnSetVersions(nextSnapshotVersion);

            // git commit -a -m updating for next development version
            gitCommit("updating for next development version");

            if (installProject) {
                // mvn clean install
                mvnCleanInstall();
            }

            if (!keepBranch) {
                // git branch -d release/...
                gitBranchDelete(gitFlowConfig.getReleaseBranchPrefix()
                        + releaseVersion);
            }
        } catch (CommandLineException e) {
            getLog().error(e);
        }
    }