{"hash": "e74173e758ceaa037a00b03ab1785557c0f5bd58", "message": "FileAdapter code optimization", "file_num_lines": 77, "diff_parsed": {"added": [[17, "import org.apache.commons.io.IOUtils;"], [23, "import java.io.FileInputStream;"], [24, "import java.io.FileOutputStream;"], [25, "import java.io.IOException;"], [26, "import java.io.InputStream;"], [27, "import java.nio.charset.Charset;"], [28, "import java.util.ArrayList;"], [30, "import java.util.stream.Collectors;"], [53, "        if (filePath != null && !\"\".equals(filePath)) {"], [54, "            try (FileInputStream fis = new FileInputStream(filePath)) {"], [55, "                loadPolicyData(model, Helper::loadPolicyLine, fis);"], [56, "            } catch (IOException e) {"], [57, "                throw new Error(\"file operator error\", e.getCause());"], [58, "            }"], [67, "        if (filePath == null || \"\".equals(filePath)) {"], [71, "        List<String> policy = new ArrayList<>();"], [72, "        policy.addAll(getModelPolicy(model, \"p\"));"], [73, "        policy.addAll(getModelPolicy(model, \"g\"));"], [75, "        savePolicyFile(String.join(\"\\n\", policy));"], [78, "    private List<String> getModelPolicy(Model model, String ptype) {"], [79, "        List<String> policy = new ArrayList<>();"], [80, "        model.model.get(ptype).forEach((k, v) -> {"], [81, "            List<String> p = v.policy.parallelStream().map(x -> k + \", \" + Util.arrayToString(x)).collect(Collectors.toList());"], [82, "            policy.addAll(p);"], [83, "        });"], [84, "        return policy;"], [85, "    }"], [87, "    private void loadPolicyData(Model model, Helper.loadPolicyLineHandler<String, Model> handler, InputStream inputStream) {"], [89, "            List<String> lines = IOUtils.readLines(inputStream, Charset.forName(\"UTF-8\"));"], [90, "            lines.forEach(x -> handler.accept(x, model));"], [93, "            throw new Error(\"Policy load error\");"], [98, "        try (FileOutputStream fos = new FileOutputStream(filePath)) {"], [99, "            IOUtils.write(text, fos, Charset.forName(\"UTF-8\"));"], [102, "            throw new Error(\"Policy save error\");"]], "deleted": [[17, "import org.casbin.jcasbin.model.Assertion;"], [23, "import java.io.*;"], [25, "import java.util.Map;"], [48, "        if (filePath.equals(\"\")) {"], [49, "            // throw new Error(\"invalid file path, file path cannot be empty\");"], [50, "            return;"], [52, ""], [53, "        loadPolicyFile(model, Helper::loadPolicyLine);"], [61, "        if (filePath.equals(\"\")) {"], [65, "        StringBuilder tmp = new StringBuilder();"], [66, ""], [67, "        for (Map.Entry<String, Assertion> entry : model.model.get(\"p\").entrySet()) {"], [68, "            String ptype = entry.getKey();"], [69, "            Assertion ast = entry.getValue();"], [70, ""], [71, "            for (List<String> rule : ast.policy) {"], [72, "                tmp.append(ptype + \", \");"], [73, "                tmp.append(Util.arrayToString(rule));"], [74, "                tmp.append(\"\\n\");"], [75, "            }"], [76, "        }"], [77, ""], [78, "        for (Map.Entry<String, Assertion> entry : model.model.get(\"g\").entrySet()) {"], [79, "            String ptype = entry.getKey();"], [80, "            Assertion ast = entry.getValue();"], [81, ""], [82, "            for (List<String> rule : ast.policy) {"], [83, "                tmp.append(ptype + \", \");"], [84, "                tmp.append(Util.arrayToString(rule));"], [85, "                tmp.append(\"\\n\");"], [86, "            }"], [87, "        }"], [89, "        savePolicyFile(tmp.toString().trim());"], [93, "    private void loadPolicyFile(Model model, Helper.loadPolicyLineHandler<String, Model> handler) {"], [94, "        FileInputStream fis;"], [95, "        try {"], [96, "            fis = new FileInputStream(filePath);"], [97, "        } catch (FileNotFoundException e) {"], [98, "            e.printStackTrace();"], [99, "            throw new Error(\"policy file not found\");"], [100, "        }"], [101, "        BufferedReader br = new BufferedReader(new InputStreamReader(fis));"], [102, ""], [103, "        String line;"], [105, "            while((line = br.readLine()) != null)"], [106, "            {"], [107, "                handler.accept(line, model);"], [108, "            }"], [109, ""], [110, "            fis.close();"], [111, "            br.close();"], [114, "            throw new Error(\"IO error occurred\");"], [119, "        try {"], [120, "            FileOutputStream fos = new FileOutputStream(filePath);"], [121, "            fos.write(text.getBytes());"], [122, "            fos.close();"], [125, "            throw new Error(\"IO error occurred\");"]]}, "num_lines_added": 34, "num_lines_removed": 57}