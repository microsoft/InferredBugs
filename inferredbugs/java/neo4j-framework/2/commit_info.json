{"hash": "5d9e85cd70dab4e3701e6caf5cd414cef6786168", "message": "test fixing", "file_num_lines": 482, "diff_parsed": {"added": [[123, "        verify(mockModule).getMetadataClass();"], [151, "        verify(mockModule).getMetadataClass();"], [179, "        verify(mockModule).getMetadataClass();"], [242, "            repository.persistModuleMetadata(mockModule, new DefaultTxDrivenModuleMetadata(NullTxDrivenModuleConfiguration.getInstance()));"], [243, "            repository.persistModuleMetadata(unusedModule, new DefaultTxDrivenModuleMetadata(NullTxDrivenModuleConfiguration.getInstance()));"], [254, "        verify(mockModule).getMetadataClass();"], [262, "    @Test"], [263, "    public void usedCorruptModulesShouldBeReInitialized() {"], [276, ""], [277, "        verify(mockModule, atLeastOnce()).getId();"], [278, "        verify(mockModule, atLeastOnce()).getConfiguration();"], [279, "        verify(mockModule).reinitialize(database);"], [280, "        verifyNoMoreInteractions(mockModule);"], [281, ""], [282, "        try (Transaction tx = database.beginTx()) {"], [283, "            TxDrivenModuleMetadata moduleMetadata = repository.getModuleMetadata(mockModule);"], [284, "            assertEquals(NullTxDrivenModuleConfiguration.getInstance(), moduleMetadata.getConfig());"], [285, "            assertFalse(moduleMetadata.needsInitialization());"], [286, "            assertEquals(-1, moduleMetadata.timestamp());"], [287, "        }"], [288, "    }"], [289, ""], [290, "    @Test"], [291, "    public void usedCorruptModulesShouldBeInitialized2() {"], [292, "        final TxDrivenModule mockModule = createMockModule();"], [293, ""], [294, "        try (Transaction tx = database.beginTx()) {"], [295, "            Node root = createRuntimeRoot();"], [296, "            root.setProperty(GA_PREFIX + RUNTIME + \"_\" + MOCK, new byte[]{2, 3, 4});"], [297, "            tx.success();"], [298, "        }"], [299, ""], [300, "        GraphAwareRuntime runtime = GraphAwareRuntimeFactory.createRuntime(database);"], [301, "        runtime.registerModule(mockModule);"], [302, ""], [303, "        runtime.start();"], [304, ""], [305, "        verify(mockModule, atLeastOnce()).getId();"], [306, "        verify(mockModule, atLeastOnce()).getConfiguration();"], [307, "        verify(mockModule).getMetadataClass();"], [308, "        verify(mockModule).reinitialize(database);"], [309, "        verifyNoMoreInteractions(mockModule);"], [310, ""], [311, "        try (Transaction tx = database.beginTx()) {"], [312, "            TxDrivenModuleMetadata moduleMetadata = repository.getModuleMetadata(mockModule);"], [313, "            assertEquals(NullTxDrivenModuleConfiguration.getInstance(), moduleMetadata.getConfig());"], [314, "            assertFalse(moduleMetadata.needsInitialization());"], [315, "            assertEquals(-1, moduleMetadata.timestamp());"], [316, "        }"], [325, "            repository.persistModuleMetadata(mockModule, new DefaultTxDrivenModuleMetadata(NullTxDrivenModuleConfiguration.getInstance()));"], [327, "            root.setProperty(GA_PREFIX + RUNTIME + \"_UNUSED2\", new byte[]{1, 2, 3});"], [338, "        verify(mockModule).getMetadataClass();"], [405, "            TxDrivenModuleMetadata moduleMetadata = repository.getModuleMetadata(mockModule);"], [406, "            assertEquals(NullTxDrivenModuleConfiguration.getInstance(), moduleMetadata.getConfig());"], [407, "            assertFalse(moduleMetadata.needsInitialization());"], [408, "            assertEquals(-1, moduleMetadata.timestamp());"], [417, "            TxDrivenModuleMetadata moduleMetadata = repository.getModuleMetadata(mockModule);"], [418, "            assertEquals(NullTxDrivenModuleConfiguration.getInstance(), moduleMetadata.getConfig());"], [419, "            assertTrue(moduleMetadata.needsInitialization());"], [420, "            assertTrue(moduleMetadata.timestamp() > System.currentTimeMillis() - 1000);"], [442, "            firstFailureTimestamp = repository.getModuleMetadata(mockModule).timestamp();"], [454, "            secondFailureTimestamp = repository.getModuleMetadata(mockModule).timestamp();"]], "deleted": [[239, "            repository.persistModuleMetadata(mockModule, new DefaultTxDrivenModuleMetadata(new MinimalTxDrivenModuleConfiguration(InclusionStrategies.none())));"], [240, "            repository.persistModuleMetadata(unusedModule, new DefaultTxDrivenModuleMetadata(new MinimalTxDrivenModuleConfiguration(InclusionStrategies.none())));"], [258, "    @Test(expected = IllegalStateException.class)"], [259, "    public void usedCorruptModulesShouldThrowException() {"], [280, "            root.setProperty(GA_PREFIX + RUNTIME + \"_\" + MOCK, Serializer.toString(NullTxDrivenModuleConfiguration.getInstance(), CONFIG));"], [358, "            assertTrue(getRuntimeRoot().getProperty(GA_PREFIX + RUNTIME + \"_\" + MOCK).toString().startsWith(CONFIG));"], [359, "            tx.success();"], [368, "            assertTrue(getRuntimeRoot().getProperty(GA_PREFIX + RUNTIME + \"_\" + MOCK).toString().startsWith(FORCE_INITIALIZATION));"], [369, "            tx.success();"], [391, "            firstFailureTimestamp = Long.valueOf(getRuntimeRoot().getProperty(GA_PREFIX + RUNTIME + \"_\" + MOCK).toString().replaceFirst(FORCE_INITIALIZATION, \"\"));"], [403, "            secondFailureTimestamp = Long.valueOf(getRuntimeRoot().getProperty(GA_PREFIX + RUNTIME + \"_\" + MOCK).toString().replaceFirst(FORCE_INITIALIZATION, \"\"));"]]}, "num_lines_added": 62, "num_lines_removed": 11}