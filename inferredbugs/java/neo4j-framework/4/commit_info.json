{"hash": "c49ae9e386b6e13322f541f5de81a5702a6b4ec4", "message": "Similarity comparison added, PR Integration", "file_num_lines": 97, "diff_parsed": {"added": [[3, "import java.util.*;"], [9, "import com.graphaware.common.util.testing.RankNodePairComparator;"], [10, "import com.graphaware.common.util.testing.SimilarityComparison;"], [40, "import static java.util.Collections.sort;"], [41, ""], [68, ""], [69, "   /*  @Test"], [72, "            // LOG.info(\"Creating arbitrary social network database...\");"], [74, "            long time; //= System.currentTimeMillis();"], [75, "            // GraphGenerator graphGenerator = new Neo4jGraphGenerator(this.database);"], [76, "            // graphGenerator.generateGraph(new BasicGeneratorConfiguration("], [77, "                //    9,"], [78, "              //      new SimpleGraphRelationshipGenerator(new SimpleDegreeDistribution(Arrays.asList(1, 1, 1, 2, 3, 4, 4, 3, 3))),"], [79, "                  //  SocialNetworkNodeCreator.getInstance(),"], [80, "                   // SocialNetworkRelationshipCreator.getInstance()));"], [82, "            //time = System.currentTimeMillis() - time;"], [84, "            //LOG.info(\"Created database in \" + time + \"ms\");"], [86, "            final int totalSteps = 500;"], [104, "    }*/"], [112, "\t\tfinal int numberOfNodes = 50;"], [118, "\t\t\t\tnew BarabasiAlbertConfig(numberOfNodes, 2)), SocialNetworkNodeCreator.getInstance(), SocialNetworkRelationshipCreator"], [135, "            //LOG.info(pageRankResult.toString());"], [152, "            ArrayList<RankNodePair> neoRank = new ArrayList<>();"], [154, "                Node node = pair.node();"], [157, "                //System.out.printf(\"%s\\t%s\\t%s\\n\", node.getProperty(\"name\"),"], [158, "                  //      \"NeoRank: \" + rank, \"PageRank: \" + pair.rank());"], [159, ""], [160, "                neoRank.add(new RankNodePair(rank, node));"], [162, ""], [163, "            sort(neoRank, new RankNodePairComparator());"], [164, "            LOG.info(\"The highest NeoRank in the network is: \" + neoRank.get(0).node().getProperty(\"name\").toString());"], [165, ""], [166, "            // Perform an analysis of the results:"], [167, "            LOG.info(\"Analysing results:\");"], [168, "            analyseResults(RankNodePair.convertToRankedNodeList(pageRankResult), RankNodePair.convertToRankedNodeList(neoRank));"], [172, "    /**"], [173, "     * Analyses and compares"], [174, "     * the results of PageRank and NeoRank"], [175, "     *"], [176, "     * The input lists have to be"], [177, "     * in descending order and have the same length"], [178, "     */"], [179, "    private void analyseResults(List<Node> pageRank, List<Node> neoRank) {"], [180, "        SimilarityComparison similarityComparison = new SimilarityComparison();"], [181, "        LOG.info(\"Similarity of all entries: \" + similarityComparison.compareListsOfEqualLength(pageRank, neoRank));"], [182, ""], [183, "        List<Node> pageRank20 = pageRank.subList(0, (int) (pageRank.size()*.2));"], [184, "        List<Node> neoRank20 = neoRank.subList(0, (int) (neoRank.size()*.2));"], [185, "        LOG.info(\"Similarity of top 20% entries: \" + similarityComparison.compareListsOfEqualLength(pageRank20, neoRank20));"], [186, ""], [187, "        List<Node> pageRank5 = pageRank.subList(0, 5);"], [188, "        List<Node> neoRank5 = neoRank.subList(0, 5);"], [189, "        LOG.info(\"Unordered similarity of the top 5 entries: \" + 100*similarityComparison.unorderedComparisonOfEqualLengthLists(pageRank5, neoRank5) + \"%\");"], [190, ""], [191, "    }"], [192, ""]], "deleted": [[3, "import java.util.Arrays;"], [4, "import java.util.List;"], [5, "import java.util.Map;"], [66, "    @Test"], [69, "            LOG.info(\"Creating arbitrary social network database...\");"], [71, "            long time = System.currentTimeMillis();"], [72, "            GraphGenerator graphGenerator = new Neo4jGraphGenerator(this.database);"], [73, "            graphGenerator.generateGraph(new BasicGeneratorConfiguration("], [74, "                    9,"], [75, "                    new SimpleGraphRelationshipGenerator(new SimpleDegreeDistribution(Arrays.asList(1, 1, 1, 2, 3, 4, 4, 3, 3))),"], [76, "                    SocialNetworkNodeCreator.getInstance(),"], [77, "                    SocialNetworkRelationshipCreator.getInstance()));"], [79, "            time = System.currentTimeMillis() - time;"], [81, "            LOG.info(\"Created database in \" + time + \"ms\");"], [83, "            final int totalSteps = 100;"], [101, "    }"], [109, "\t\tfinal int numberOfNodes = 10;"], [115, "\t\t\t\tnew BarabasiAlbertConfig(numberOfNodes, 5)), SocialNetworkNodeCreator.getInstance(), SocialNetworkRelationshipCreator"], [132, "            LOG.info(pageRankResult.toString());"], [144, "\t\t\t// XXX: I understand this is WIP, but why does this return a list if it's called get..Map?"], [145, "            // YYY: I call it a Map, since it is effectivelly the inverse of the Node, Integer hashMap from the NetworkMatrixFactory"], [146, "            //      and it is used only to map the indices from of the pagerank values back to the Nodes. Quite clumsy, on todo list ;)"], [152, "            int topRank  = 0;"], [153, "            Node topNode = null;"], [154, ""], [156, "                System.out.printf(\"%s\\t%s\\t%s\\n\", pair.node().getProperty(\"name\"),"], [157, "                        \"NeoRank: \" + pair.node().getProperty(RandomWalkerPageRankModule.PAGE_RANK_PROPERTY_KEY).toString(),  \"PageRank: \" + pair.rank());"], [158, ""], [161, "                if (rank > topRank) {"], [162, "                    topRank = rank;"], [163, "                    topNode = pair.node();"], [164, "                }"], [166, "            LOG.info(\"The highest NeoRank in the network is: \" + topNode.getProperty(\"name\").toString());"]]}, "num_lines_added": 56, "num_lines_removed": 33}