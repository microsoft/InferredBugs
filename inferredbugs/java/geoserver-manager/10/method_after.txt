    private GSImageMosaicEncoder copyParameters(String wsName, String coverageStoreName,
            String csname) throws NumberFormatException {
        // get current config for the coverage to extract the params we want to set again
        final RESTCoverage coverage = reader.getCoverage(wsName, coverageStoreName, csname);
        if (coverage==null)
            return null;
        final Map<String, String> params = coverage.getParametersList();     
        
        // prepare and fill the encoder 
        final GSImageMosaicEncoder coverageEncoder = new GSImageMosaicEncoder();
        coverageEncoder.setName("mosaic");
        
        // set the current params, change here if you want to change the values
        for(Map.Entry<String, String> entry:params.entrySet()){
            if(entry.getKey().equals(GSImageMosaicEncoder.allowMultithreading)){
                coverageEncoder.setAllowMultithreading(Boolean.parseBoolean(entry.getValue()));
                continue;
            }
            
            if(entry.getKey().equals(GSImageMosaicEncoder.backgroundValues)){
                coverageEncoder.setBackgroundValues(entry.getValue());
                continue;
            }
            
            if(entry.getKey().equals(GSImageMosaicEncoder.filter)){
                coverageEncoder.setFilter(entry.getValue());
                continue;
            }
            
            if(entry.getKey().equals(GSImageMosaicEncoder.inputTransparentColor)){
                coverageEncoder.setInputTransparentColor(entry.getValue());
                continue;
            }
            
            if(entry.getKey().equals(GSImageMosaicEncoder.maxAllowedTiles)){
                coverageEncoder.setMaxAllowedTiles(Integer.parseInt(entry.getValue()));
                continue;
            }
            
            if(entry.getKey().equals(GSImageMosaicEncoder.MERGEBEHAVIOR)){
                coverageEncoder.setMergeBehavior(entry.getValue());
                continue;
            }
            
            if(entry.getKey().equals(GSImageMosaicEncoder.outputTransparentColor)){
                coverageEncoder.setOutputTransparentColor(entry.getValue());
                continue;
            }
            
            if(entry.getKey().equals(GSImageMosaicEncoder.SORTING)){
                coverageEncoder.setSORTING(entry.getValue());
                continue;
            }
            
            if(entry.getKey().equals(GSImageMosaicEncoder.SUGGESTED_TILE_SIZE)){
                coverageEncoder.setSUGGESTED_TILE_SIZE(entry.getValue());
                continue;
            }
            
            if(entry.getKey().equals(GSImageMosaicEncoder.USE_JAI_IMAGEREAD)){
                coverageEncoder.setUSE_JAI_IMAGEREAD(Boolean.parseBoolean(entry.getValue()));
                continue;
            }
            
        }
        return coverageEncoder;
    }