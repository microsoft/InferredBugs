{"hash": "fea8bec1f6a05827ce853e9829f7234f17f3f336", "message": "improving support for imagemosaic", "file_num_lines": 1269, "diff_parsed": {"added": [[27, "import it.geosolutions.geoserver.rest.decoder.RESTCoverage;"], [2421, ""], [2423, "     * Configure an existing coverage in a given workspace and coverage store"], [2432, "        return configureCoverage(ce, wsname, csname, ce.getName());"], [2433, "    }"], [2434, ""], [2435, "    /**"], [2436, "     * Configure an existing coverage in a given workspace and coverage store"], [2437, "     *"], [2438, "     * @param ce contains the coverage name to configure and the configuration to apply"], [2439, "     * @param wsname the workspace to search for existent coverage"], [2440, "     * @param csname the coverage store to search for existent coverage"], [2441, "     * @param coverageName the name of the coverage, useful for changing name for the coverage itself"], [2442, "     * @return true if success"], [2443, "     */"], [2444, "    public boolean configureCoverage(final GSCoverageEncoder ce, final String wsname,"], [2445, "            final String csname, final String coverageName) {"], [2446, "        if (coverageName == null) {"], [2460, ""], [2461, "        // optimized search, left the old code for reference"], [2462, "        RESTCoverage coverage = reader.getCoverage(wsname, csname, coverageName);"], [2463, "//        final RESTCoverageList covList = reader.getCoverages(wsname, csname);"], [2464, "//        if (covList==null||covList.isEmpty()) {"], [2465, "//            if (LOGGER.isErrorEnabled())"], [2466, "//                LOGGER.error(\"No coverages found in new coveragestore \" + csname);"], [2467, "//            return false;"], [2468, "//        }"], [2469, "//        final Iterator<NameLinkElem> it = covList.iterator();"], [2470, "//        while (it.hasNext()) {"], [2471, "//            NameLinkElem nameElem = it.next();"], [2472, "//            if (nameElem.getName().equals(coverageName)) {"], [2473, "//                found = true;"], [2474, "//                break;"], [2475, "//            }"], [2476, "//        }"], [2478, "        if (coverage==null) {"], [2481, "                        + coverageName);"], [2487, "                + \"/coverages/\" + coverageName + \".xml\";"], [2494, "                        + coverageName);"], [2498, "                LOGGER.warn(\"Error configuring coverage \" + wsname + \":\" + csname + \":\" + coverageName"]], "deleted": [[2420, ""], [2422, "     * Configure an existent coverage in a given workspace and coverage store"], [2431, "        final String cname = ce.getName();"], [2432, "        if (cname == null) {"], [2446, "        final RESTCoverageList covList = reader.getCoverages(wsname, csname);"], [2447, "        if (covList.isEmpty()) {"], [2448, "            if (LOGGER.isErrorEnabled())"], [2449, "                LOGGER.error(\"No coverages found in new coveragestore \" + csname);"], [2450, "            return false;"], [2451, "        }"], [2452, "        final Iterator<NameLinkElem> it = covList.iterator();"], [2453, "        boolean found = false;"], [2454, "        while (it.hasNext()) {"], [2455, "            NameLinkElem nameElem = it.next();"], [2456, "            if (nameElem.getName().equals(cname)) {"], [2457, "                found = true;"], [2458, "                break;"], [2459, "            }"], [2460, "        }"], [2462, "        if (!found) {"], [2465, "                        + cname);"], [2471, "                + \"/coverages/\" + cname + \".xml\";"], [2478, "                        + cname);"], [2482, "                LOGGER.warn(\"Error configuring coverage \" + wsname + \":\" + csname + \":\" + cname"]]}, "num_lines_added": 40, "num_lines_removed": 24}