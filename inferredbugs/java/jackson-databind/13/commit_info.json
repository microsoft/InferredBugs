{"hash": "2abf5a321405a82ed4e0d3a7c876c82bb05188f9", "message": "Fix #734 (error recovery for `ObjectReader.readValues()`)", "file_num_lines": 64, "diff_parsed": {"added": [[12, "        public int a, b;"], [14, "        @Override public String toString() { return \"{Bean, a=\"+a+\", b=\"+b+\"}\"; }"], [27, "        final String JSON = aposToQuotes(\"{'a':3} {'x':5}\");"], [38, "            verifyException(e, \"Unrecognized field \\\"x\\\"\");"], [40, "        // 21-May-2015, tatu: With [databind#734], recovery, we now know there's no more data!"], [41, "        assertFalse(it.hasNextValue());"], [42, ""], [43, "        it.close();"], [44, "    }"], [45, ""], [46, "    // for [databind#734]"], [47, "    // Simple test for verifying that basic recover works for a case of"], [48, "    // unknown structured value"], [49, "    public void testSimpleRootRecovery() throws Exception"], [50, "    {"], [51, "        final String JSON = aposToQuotes(\"{'a':3}{'a':27,'foo':[1,2],'b':{'x':3}}  {'a':1,'b':2} \");"], [52, ""], [53, "        MappingIterator<Bean> it = MAPPER.readerFor(Bean.class).readValues(JSON);"], [54, "        Bean bean = it.nextValue();"], [55, ""], [56, "        assertNotNull(bean);"], [57, "        assertEquals(3, bean.a);"], [58, ""], [59, "        // second one problematic"], [60, "        try {"], [61, "            it.nextValue();"], [62, "        } catch (JsonMappingException e) {"], [63, "            verifyException(e, \"Unrecognized field \\\"foo\\\"\");"], [64, "        }"], [65, ""], [66, "        // but should recover nicely"], [68, "        assertNotNull(bean);"], [69, "        assertEquals(1, bean.a);"], [70, "        assertEquals(2, bean.b);"], [71, ""], [72, "        assertFalse(it.hasNextValue());"], [73, ""], [74, "        it.close();"], [75, "    }"], [76, ""], [77, "    // Similar to \"raw\" root-level Object sequence, but in array"], [78, "    public void testSimpleArrayRecovery() throws Exception"], [79, "    {"], [80, "        final String JSON = aposToQuotes(\"[{'a':3},{'a':27,'foo':[1,2],'b':{'x':3}}  ,{'a':1,'b':2}  ]\");"], [81, ""], [82, "        MappingIterator<Bean> it = MAPPER.readerFor(Bean.class).readValues(JSON);"], [83, "        Bean bean = it.nextValue();"], [84, ""], [85, "        assertNotNull(bean);"], [86, "        assertEquals(3, bean.a);"], [87, ""], [88, "        // second one problematic"], [89, "        try {"], [90, "            it.nextValue();"], [91, "        } catch (JsonMappingException e) {"], [92, "            verifyException(e, \"Unrecognized field \\\"foo\\\"\");"], [93, "        }"], [94, ""], [95, "        // but should recover nicely"], [96, "        bean = it.nextValue();"], [97, "        assertNotNull(bean);"], [98, "        assertEquals(1, bean.a);"], [99, "        assertEquals(2, bean.b);"], [100, ""], [102, ""]], "deleted": [[12, "        public int a;"], [14, "        @Override public String toString() { return \"{Bean, a=\"+a+\"}\"; }"], [27, "        final String JSON = aposToQuotes(\"{'a':3} {'b':5}\");"], [38, "            verifyException(e, \"Unrecognized field\");"], [40, "        // 24-Mar-2015, tatu: With 2.5, best we can do is to avoid infinite loop;"], [41, "        //    also, since the next token is END_OBJECT, will produce empty Object"], [42, "        assertTrue(it.hasNextValue());"], [44, "        assertEquals(0, bean.a);"], [45, "        // and we should be done now"]]}, "num_lines_added": 65, "num_lines_removed": 9}