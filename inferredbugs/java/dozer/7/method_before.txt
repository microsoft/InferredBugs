  void initialize(GlobalSettings globalSettings, ClassLoader classLoader) {
    if (globalSettings.isAutoregisterJMXBeans()) {
      // Register JMX MBeans. If an error occurs, don't propagate exception
      try {
        registerJMXBeans(new JMXPlatformImpl());
      } catch (Throwable t) {
        log.warn("Unable to register Dozer JMX MBeans with the PlatformMBeanServer.  Dozer will still function "
            + "normally, but management via JMX may not be available", t);
      }
    }

    String classLoaderName = globalSettings.getClassLoaderName();
    String proxyResolverName = globalSettings.getProxyResolverName();

    DefaultClassLoader defaultClassLoader = new DefaultClassLoader(classLoader);
    BeanContainer beanContainer = BeanContainer.getInstance();

    Class<? extends DozerClassLoader> classLoaderType = loadBeanType(classLoaderName, defaultClassLoader, DozerClassLoader.class);
    Class<? extends DozerProxyResolver> proxyResolverType = loadBeanType(proxyResolverName, defaultClassLoader, DozerProxyResolver.class);

    // TODO Chicken-egg problem - investigate
//    DozerClassLoader classLoaderBean = ReflectionUtils.newInstance(classLoaderType);
    DozerClassLoader classLoaderBean = defaultClassLoader;
    DozerProxyResolver proxyResolverBean = ReflectionUtils.newInstance(proxyResolverType);

    beanContainer.setClassLoader(classLoaderBean);
    beanContainer.setProxyResolver(proxyResolverBean);

    if (globalSettings.isElEnabled()) {
      ELEngine engine = new ELEngine();
      engine.init();
      beanContainer.setElEngine(engine);
      beanContainer.setElementReader(new ExpressionElementReader(engine));
    }

    for (DozerModule module : ServiceLoader.load(DozerModule.class)) {
      module.init();
    }
  }