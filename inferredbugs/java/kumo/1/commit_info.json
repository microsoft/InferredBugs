{"hash": "a55455b1fd05ca2bcd537cd22aac2f5506606ecf", "message": "add support for polar cli + bug fixes\n\nissue #31", "file_num_lines": 173, "diff_parsed": {"added": [[4, "import com.kennycason.kumo.PolarWordCloud;"], [11, "import com.kennycason.kumo.cli.CliParameters.WordStartType;"], [32, "import java.util.Arrays;"], [52, "                buildPolarWordCloud();"], [53, "                break;"], [59, "    private void buildPolarWordCloud() {"], [60, "        if (cliParameters.getInputSources().size() != 2) {"], [61, "            throw new IllegalArgumentException(\"Polar word clouds require exactly 2 input sources. Found: \" + cliParameters.getInputSources().size());"], [62, "        }"], [63, "        final PolarWordCloud wordCloud = new PolarWordCloud("], [64, "                new Dimension(cliParameters.getWidth(), cliParameters.getHeight()),"], [65, "                cliParameters.getCollisionMode(),"], [66, "                cliParameters.getPolarBlendMode()"], [67, "        );"], [68, "        if (!cliParameters.getBackgrounds().isEmpty()) {"], [69, "            wordCloud.setBackground(buildBackground(cliParameters.getBackgrounds().get(0)));"], [70, "        }"], [71, "        wordCloud.setBackgroundColor(cliParameters.getBackgroundColor());"], [72, "        if (cliParameters.getLayeredColors().size() >= 1) {"], [73, "            wordCloud.setColorPalette(new ColorPalette(cliParameters.getLayeredColors().get(0)));"], [74, "        }"], [75, "        if (cliParameters.getLayeredColors().size() >= 2) {"], [76, "            wordCloud.setColorPalette2(new ColorPalette(cliParameters.getLayeredColors().get(1)));"], [77, "        }"], [78, "        wordCloud.setFontScalar(buildFontScalar(cliParameters.getFontScalarType()));"], [79, "        wordCloud.setPadding(cliParameters.getPadding());"], [80, "        wordCloud.setWordStartScheme(buildWordStart(cliParameters.getWordStartType()));"], [81, "        wordCloud.setKumoFont(buildKumoFont(cliParameters.getFontWeights().get(0)));"], [82, "        wordCloud.build(loadFrequencies(cliParameters.getInputSources().get(0)), loadFrequencies(cliParameters.getInputSources().get(1)));"], [83, "        wordCloud.writeToFile(cliParameters.getOutputSource());"], [84, "    }"], [85, ""], [100, "        wordCloud.setWordStartScheme(buildWordStart(cliParameters.getWordStartType()));"], [113, ""], [114, "            if (cliParameters.getNormalizers().isEmpty()) {"], [115, "                cliParameters.getNormalizers().addAll(Arrays.asList(NormalizerType.TRIM, NormalizerType.CHARACTER_STRIPPING, NormalizerType.LOWERCASE));"], [116, "            }"], [118, "                frequencyAnalyzer.addNormalizer(buildNormalizer(normalizer));"], [120, ""], [155, "    private static WordStartStrategy buildWordStart(final WordStartType wordStartType) {"], [156, "        switch (wordStartType) {"], [160, "        throw new IllegalStateException(\"Unknown word start: \" + wordStartType);"]], "deleted": [[10, "import com.kennycason.kumo.cli.CliParameters.WordStart;"], [69, "        wordCloud.setWordStartScheme(buildWordStart(cliParameters.getWordStart()));"], [83, "                frequencyAnalyzer.setNormalizer(buildNormalizer(normalizer));"], [119, "    private static WordStartStrategy buildWordStart(final WordStart wordStart) {"], [120, "        switch (wordStart) {"], [124, "        throw new IllegalStateException(\"Unknown word start: \" + wordStart);"]]}, "num_lines_added": 42, "num_lines_removed": 6}