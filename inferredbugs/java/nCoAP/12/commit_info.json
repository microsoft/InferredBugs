{"hash": "6e2c0a7fcee7658cb610b2ca32040dcd915a2125", "message": "Bugfix for immediate ACK", "file_num_lines": 85, "diff_parsed": {"added": [[27, "* To send a message either schedule a automatic response using addMessageToOutgoingQueue (using setWriteEnabled(true))"], [45, "    //contains a list of test specific messages to be sent"], [46, "    private LinkedList<MessageReceiverResponse> outgoingMessageQueue = new LinkedList<MessageReceiverResponse>();"], [79, ""], [80, "            log.info(\"Incoming #{} (from {}): {}.\","], [81, "                    new Object[]{getReceivedMessages().size(), e.getRemoteAddress(), coapMessage});"], [89, "//    public LinkedList<MessageReceiverResponse> getOutgoingMessageQueue(){"], [90, "//        return outgoingMessageQueue;"], [91, "//    }"], [103, "//        outgoingMessageQueue.clear();"], [109, "        if(!writeEnabled){"], [110, "            log.error(\"Write is disabled!\");"], [111, "            return;"], [112, "        }"], [113, ""], [114, "        log.info(\"Write message: \" + coapMessage);"], [118, "//    public void writeNextMessage(InetSocketAddress remoteAddress){"], [119, "//        if(!writeEnabled)"], [120, "//            fail(\"Write is disabled!\");"], [121, "//        CoapMessage coapMessage = outgoingMessageQueue.poll();"], [122, "//        log.info(\"Write message: {}\", coapMessage);"], [123, "//        Channels.write(channel, coapMessage, remoteAddress);"], [124, "//    }"], [125, "//"], [126, "//"], [127, "//    public void addMessageToOutgoingQueue(MessageReceiverResponse response) {"], [128, "//        outgoingMessageQueue.add(response);"], [129, "//    }"]], "deleted": [[8, "import de.uniluebeck.itm.spitfire.nCoap.message.header.InvalidHeaderException;"], [28, "* To send a message either schedule a automatic response using addResponse (using setWriteEnabled(true))"], [46, "    //contains a list of test specific responses"], [47, "    private LinkedList<MessageReceiverResponse> responsesToSend = new LinkedList<MessageReceiverResponse>();"], [79, ""], [81, "            log.info(\"Incoming (from \" + e.getRemoteAddress() + \") # \" +  getReceivedMessages().size() + \": \""], [82, "                    + coapMessage);"], [83, ""], [84, "            if(writeEnabled && (coapMessage instanceof CoapRequest)){"], [85, "                if (responsesToSend.isEmpty()) {"], [86, "                    fail(\"responsesToSend is empty. This could be caused by an unexpected request.\");"], [87, "                }"], [88, "                MessageReceiverResponse responseToSend = responsesToSend.remove(0);"], [89, ""], [90, "                if (responseToSend == null) {"], [91, "                    throw new InternalError(\"Unexpected request received. No response for: \" + coapMessage);"], [92, "                }"], [93, ""], [94, "                CoapResponse coapResponse = responseToSend;"], [95, "                if (responseToSend.getReceiverSetsMsgID()) {"], [96, "                    coapResponse.setMessageID(coapMessage.getMessageID());"], [97, "                }"], [98, "                if (responseToSend.getReceiverSetsToken()) {"], [99, "                    coapResponse.setToken(coapMessage.getToken());"], [100, "                }"], [101, "                Channels.write(channel, coapResponse, e.getRemoteAddress());"], [102, "            }"], [110, "    public LinkedList<MessageReceiverResponse> getResponsesToSend(){"], [111, "        return responsesToSend;"], [112, "    }"], [124, "//        responsesToSend.clear();"], [130, "        log.debug(\"Write message: \" + coapMessage);"], [134, "    public void addResponse(MessageReceiverResponse response) {"], [135, "        responsesToSend.add(response);"], [136, "    }"], [160, ""], [161, ""], [162, "//    public void blockUntilMessagesReceivedOrTimeout(long timeout, int messagesCount)"], [163, "//            throws InterruptedException {"], [164, "//        long startTime = System.currentTimeMillis();"], [165, "//        while(System.currentTimeMillis() - startTime < timeout) {"], [166, "//            synchronized(this) {"], [167, "//                if (receivedMessages.size() >= messagesCount) {"], [168, "//                    return;"], [169, "//                }"], [170, "//            }"], [171, "//            Thread.sleep(50);"], [172, "//        }"], [173, "//    }"], [174, ""], [175, ""]]}, "num_lines_added": 28, "num_lines_removed": 51}