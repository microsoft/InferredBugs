{"hash": "bd6787acfdee3943eda737cd6adc10d4d6991a84", "message": "JDK-8169739: LinkedBlockingDeque spliterator needs to support node self-linking (#251)", "file_num_lines": 165, "diff_parsed": {"added": [[2, " * Written by Doug Lea with assistance from members of JCP JSR-166"], [3, " * Expert Group and released to the public domain, as explained at"], [4, " * http://creativecommons.org/publicdomain/zero/1.0/"], [30, "// CVS rev. 1.65"], [51, "        return (Spliterator.ORDERED |"], [52, "                Spliterator.NONNULL |"], [53, "                Spliterator.CONCURRENT);"], [64, "        if (exhausted)"], [65, "            return;"], [66, "        exhausted = true;"], [69, "        Object p = current;"], [70, "        current = null;"], [71, "        do {"], [72, "            E e = null;"], [73, "            lock.lock();"], [74, "            try {"], [75, "                if ((p != null && p != getNextNode(p)) || (p = getQueueFirst(q)) != null) {"], [76, "                    e = getNodeItem(p);"], [77, "                    p = getNextNode(p);"], [79, "            } finally {"], [80, "                lock.unlock();"], [81, "            }"], [82, "            if (e != null)"], [83, "                action.accept(e);"], [84, "        } while (p != null);"], [105, "        if (exhausted)"], [106, "            return false;"], [109, "        Object p = current;"], [110, "        E e = null;"], [111, "        lock.lock();"], [112, "        try {"], [113, "            if ((p != null && p != getNextNode(p)) || (p = getQueueFirst(q)) != null) {"], [114, "                e = getNodeItem(p);"], [115, "                p = getNextNode(p);"], [117, "        } finally {"], [118, "            lock.unlock();"], [120, "        exhausted = ((current = p) == null);"], [121, "        if (e == null)"], [122, "            return false;"], [123, "        action.accept(e);"], [124, "        return true;"], [133, "        if (!exhausted &&"], [134, "            (((h = current) != null && h != getNextNode(h))"], [135, "             || (h = getQueueFirst(q)) != null)"], [136, "            && getNextNode(h) != null) {"], [143, "                if (((p != null && p != getNextNode(p)) || (p = getQueueFirst(q)) != null)"], [144, "                    && getNodeItem(p) != null)"], [145, "                    for (; p != null && i < n; p = getNextNode(p))"], [146, "                        a[i++] = getNodeItem(p);"], [154, "            else if ((est -= i) < 0L)"], [155, "                est = 0L;"], [158, "                return Spliterators.spliterator"], [159, "                    (a, 0, i, (Spliterator.ORDERED |"], [160, "                               Spliterator.NONNULL |"], [161, "                               Spliterator.CONCURRENT));"]], "deleted": [[2, " * Copyright (c) 2012, 2014, Oracle and/or its affiliates. All rights reserved."], [3, " * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."], [4, " *"], [5, " * This code is free software; you can redistribute it and/or modify it"], [6, " * under the terms of the GNU General Public License version 2 only, as"], [7, " * published by the Free Software Foundation.  Oracle designates this"], [8, " * particular file as subject to the \"Classpath\" exception as provided"], [9, " * by Oracle in the LICENSE file that accompanied this code."], [10, " *"], [11, " * This code is distributed in the hope that it will be useful, but WITHOUT"], [12, " * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or"], [13, " * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License"], [14, " * version 2 for more details (a copy is included in the LICENSE file that"], [15, " * accompanied this code)."], [16, " *"], [17, " * You should have received a copy of the GNU General Public License version"], [18, " * 2 along with this work; if not, write to the Free Software Foundation,"], [19, " * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA."], [20, " *"], [21, " * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA"], [22, " * or visit www.oracle.com if you need additional information or have any"], [23, " * questions."], [49, ""], [70, "        return Spliterator.ORDERED | Spliterator.NONNULL"], [71, "                | Spliterator.CONCURRENT;"], [84, "        if (!exhausted) {"], [85, "            exhausted = true;"], [86, "            Object p = current;"], [87, "            do {"], [88, "                E e = null;"], [89, "                lock.lock();"], [90, "                try {"], [91, "                    if (p == null) {"], [92, "                        p = getQueueFirst(q);"], [93, "                    }"], [94, "                    while (p != null) {"], [95, "                        e = getNodeItem(p);"], [96, "                        p = getNextNode(p);"], [97, "                        if (e != null) {"], [98, "                            break;"], [99, "                        }"], [100, "                    }"], [101, "                } finally {"], [102, "                    lock.unlock();"], [103, "                }"], [104, "                if (e != null) {"], [105, "                    action.accept(e);"], [107, "            } while (p != null);"], [108, "        }"], [131, "        if (!exhausted) {"], [132, "            E e = null;"], [133, "            lock.lock();"], [134, "            try {"], [135, "                if (current == null) {"], [136, "                    current = getQueueFirst(q);"], [137, "                }"], [138, "                while (current != null) {"], [139, "                    e = getNodeItem(current);"], [140, "                    current = getNextNode(current);"], [141, "                    if (e != null) {"], [142, "                        break;"], [143, "                    }"], [144, "                }"], [145, "            } finally {"], [146, "                lock.unlock();"], [147, "            }"], [148, "            if (current == null) {"], [149, "                exhausted = true;"], [150, "            }"], [151, "            if (e != null) {"], [152, "                action.accept(e);"], [153, "                return true;"], [156, "        return false;"], [165, "        if (!exhausted"], [166, "                && ((h = current) != null || (h = getQueueFirst(q)) != null)"], [167, "                && getNextNode(h) != null) {"], [174, "                if (p != null || (p = getQueueFirst(q)) != null) {"], [175, "                    do {"], [176, "                        if ((a[i] = getNodeItem(p)) != null) {"], [177, "                            ++i;"], [178, "                        }"], [179, "                    } while ((p = getNextNode(p)) != null && i < n);"], [180, "                }"], [187, "            } else if ((est -= i) < 0L) {"], [188, "                est = 0L;"], [192, "                return Spliterators.spliterator(a, 0, i, Spliterator.ORDERED"], [193, "                        | Spliterator.NONNULL | Spliterator.CONCURRENT);"]]}, "num_lines_added": 55, "num_lines_removed": 87}