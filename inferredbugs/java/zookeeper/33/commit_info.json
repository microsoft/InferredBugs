{"hash": "320fd3b0c9eddec2e6336f557e675b28ed33fffe", "message": "ZOOKEEPER-336. single bad client can cause server to stop accepting connections\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/zookeeper/trunk@782878 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 780, "diff_parsed": {"added": [[35, "import java.util.HashMap;"], [88, "        HashMap<InetAddress, Set<NIOServerCnxn>> ipMap = new HashMap<InetAddress, Set<NIOServerCnxn>>( );"], [92, "        int maxClientCnxns = 10;"], [93, ""], [94, ""], [95, "        /**"], [96, "         * Construct a new server connection factory which will accept an unlimited number"], [97, "         * of concurrent connections from each client (up to the file descriptor"], [98, "         * limits of the operating system). startup(zks) must be called subsequently."], [99, "         * @param port"], [103, "            this(port,0);"], [104, "        }"], [105, ""], [106, ""], [107, "        /**"], [108, "         * Constructs a new server connection factory where the number of concurrent connections"], [109, "         * from a single IP address is limited to maxcc (or unlimited if 0)."], [110, "         * startup(zks) must be called subsequently."], [111, "         * @param port - the port to listen on for connections."], [112, "         * @param maxcc - the number of concurrent connections allowed from a single client."], [113, "         * @throws IOException"], [114, "         */"], [115, "        public Factory(int port, int maxcc) throws IOException {"], [118, "            maxClientCnxns = maxcc;"], [123, "            ss.register(selector, SelectionKey.OP_ACCEPT);"], [134, "        public void startup(ZooKeeperServer zks) throws IOException,"], [135, "                InterruptedException {"], [166, "                synchronized (ipMap){"], [167, "                    InetAddress addr = cnxn.sock.socket().getInetAddress();"], [168, "                    Set<NIOServerCnxn> s = ipMap.get(addr);"], [169, "                    if (s == null) {"], [170, "                        s = new HashSet<NIOServerCnxn>();"], [171, "                    }"], [172, "                    s.add(cnxn);"], [173, "                    ipMap.put(addr,s);"], [174, "                }"], [183, "        private int getClientCnxnCount( InetAddress cl) {"], [184, "            Set<NIOServerCnxn> s = ipMap.get(cl);"], [185, "            if (s == null) return 0;"], [186, "            return s.size();"], [187, "        }"], [188, ""], [189, "        public void run() {"], [203, "                                    .channel()).accept();"], [204, "                            InetAddress ia = sc.socket().getInetAddress();"], [205, "                            int cnxncount = getClientCnxnCount(ia);"], [206, "                            if (maxClientCnxns > 0 && cnxncount >= maxClientCnxns){"], [207, "                                LOG.warn(\"Too many connections from \" + ia"], [208, "                                         + \" - max is \" + maxClientCnxns );"], [209, "                                sc.close();"], [210, "                            } else {"], [211, "                                sc.configureBlocking(false);"], [212, "                                SelectionKey sk = sc.register(selector,"], [213, "                                        SelectionKey.OP_READ);"], [214, "                                NIOServerCnxn cnxn = createConnection(sc, sk);"], [215, "                                sk.attach(cnxn);"], [216, "                                addCnxn(cnxn);"], [217, "                            }"], [809, ""], [814, "        synchronized (factory.ipMap)"], [815, "        {"], [816, "            Set<NIOServerCnxn> s = factory.ipMap.get(sock.socket().getInetAddress());"], [817, "            s.remove(this);"], [818, "        }"]], "deleted": [[90, "        /** Create the factory, startup(zks) must be called subsequently."], [91, "         * @param port listener port"], [101, "            ss.register(selector, SelectionKey.OP_ACCEPT);"], [112, "        public void startup(ZooKeeperServer zks)"], [113, "            throws IOException, InterruptedException"], [114, "        {"], [153, "        public void run() {"], [167, "                                    .channel()).accept();"], [168, "                            sc.configureBlocking(false);"], [169, "                            SelectionKey sk = sc.register(selector,"], [170, "                                    SelectionKey.OP_READ);"], [171, "                            NIOServerCnxn cnxn = createConnection(sc, sk);"], [172, "                            sk.attach(cnxn);"], [173, "                            addCnxn(cnxn);"], [765, ""]]}, "num_lines_added": 64, "num_lines_removed": 15}