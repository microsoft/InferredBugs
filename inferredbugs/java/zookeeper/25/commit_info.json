{"hash": "bdcdc82e97512d6094ea25775a8d77c1597e1223", "message": "ZOOKEEPER-252. PurgeTxnLog is not handling the new dataDir directory structure\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/zookeeper/trunk@739479 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 77, "diff_parsed": {"added": [[31, "import org.apache.log4j.Logger;"], [35, "/**"], [36, " * this class is used to clean up the"], [37, " * snapshot and data log dir's. This is usually"], [38, " * run as a cronjob on the zookeeper server machine."], [39, " * Invocation of this class will clean up the datalogdir"], [40, " * files and snapdir files keeping the last \"-n\" snapshot files"], [41, " * and the corresponding logs."], [42, " */"], [44, "    private static final Logger LOG = Logger.getLogger(PurgeTxnLog.class);"], [47, "        System.out.println(\"PurgeTxnLog dataLogDir [snapDir] -n count\");"], [50, "        System.out.println(\"\\tcount -- the number of old snaps/logs you want to keep\");"], [53, ""], [55, "     * purges the snapshot and logs keeping the last num snapshots"], [56, "     * and the corresponding logs."], [57, "     * @param dataDir the dir that has the logs"], [58, "     * @param snapDir the dir that has the snapshots"], [59, "     * @param num the number of snapshots to keep"], [60, "     * @throws IOException"], [62, "    public static void purge(File dataDir, File snapDir, int num) throws IOException {"], [63, "        if (num < 3) {"], [64, "            throw new IllegalArgumentException(\"count should be greater than 3\");"], [65, "        }"], [73, "        List<File> snaps = txnLog.findNRecentSnapshots(num);"], [74, "        if (snaps.size() == 0)"], [75, "            return;"], [76, "        File snapShot = snaps.get(snaps.size() -1);"], [77, "        for (File f: snaps) {"], [78, "            exc.add(f);"], [79, "        }"], [97, "                Arrays.asList(txnLog.getDataDir().listFiles(new MyFileFilter(\"log.\"))));"], [99, "        files.addAll(Arrays.asList(txnLog.getSnapDir().listFiles(new MyFileFilter(\"snapshot.\"))));"], [110, ""], [111, "    }"], [112, ""], [113, "    /**"], [114, "     * @param args PurgeTxnLog dataLogDir"], [115, "     *     dataLogDir -- txn log directory"], [116, "     *     -n num (number of snapshots to keep)"], [117, "     */"], [118, "    public static void main(String[] args) throws IOException {"], [119, "        if(args.length<3 || args.length>4)"], [120, "            printUsage();"], [121, "        int i = 0;"], [122, "        File dataDir=new File(args[0]);"], [123, "        File snapDir=dataDir;"], [124, "        if(args.length==4){"], [125, "            i++;"], [126, "            snapDir=new File(args[i]);"], [127, "        }"], [128, "        i++; i++;"], [129, "        int num = Integer.parseInt(args[i]);"], [130, "        purge(dataDir, snapDir, num);"]], "deleted": [[37, "        System.out.println(\"PurgeTxnLog dataLogDir [snapDir]\");"], [43, "     * @param args PurgeTxnLog dataLogDir"], [44, "     *     dataLogDir -- txn log directory"], [46, "    public static void main(String[] args) throws IOException {"], [47, "        if(args.length<1 || args.length>2)"], [48, "            printUsage();"], [50, "        File dataDir=new File(args[0]);"], [51, "        File snapDir=dataDir;"], [52, "        if(args.length==2){"], [53, "            snapDir=new File(args[1]);"], [54, "            }"], [61, "        File snapShot = txnLog.findMostRecentSnapshot();"], [62, "        exc.add(txnLog.findMostRecentSnapshot());"], [80, "                Arrays.asList(dataDir.listFiles(new MyFileFilter(\"log.\"))));"], [82, "        files.addAll(Arrays.asList(snapDir.listFiles(new MyFileFilter(\"snapshot.\"))));"]]}, "num_lines_added": 53, "num_lines_removed": 15}