{"hash": "df79147340366c1c7f9d76e4e2292b8fa6b79b06", "message": "JSEC-8 - Removed event-class specific methods in Listeners for a single onEvent method allowing for the most flexibility.  Listener implementations are now free to choose to implement delegation, visitor pattern, etc., in whatever way is appropriate for the application.  Logging implementations are provided as simple examples of both AuthenticationEventListener and SessionEventListener interfaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jsecurity/trunk@710537 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 48, "diff_parsed": {"added": [[29, "import org.jsecurity.authc.event.AuthenticationEvent;"], [30, "import org.jsecurity.authc.event.AuthenticationEventListener;"], [31, "import org.jsecurity.authc.event.AuthenticationEventSender;"], [37, " * Simple implementation that synchronously calls any registered"], [38, " * {@link org.jsecurity.authc.event.AuthenticationEventListener}s."], [39, " *"], [40, " * @see AuthenticationEventListener#onEvent"], [65, "            for ( AuthenticationEventListener ael : listeners ) {"], [66, "                ael.onEvent( event );"], [71, "                    \"AuthenticationEventListeners will be notified of event [\" +"], [72, "                    event + \"]\";"]], "deleted": [[29, "import org.jsecurity.authc.AuthenticationException;"], [30, "import org.jsecurity.authc.LockedAccountException;"], [31, "import org.jsecurity.authc.event.*;"], [37, " * Simple implementation of the {@link AuthenticationEventSender} interface that synchronously calls"], [38, " * any registered {@link org.jsecurity.authc.event.AuthenticationEventListener}s."], [40, " * @see #setListeners"], [61, "     *"], [62, "     * @see AuthenticationEventSender#send( org.jsecurity.authc.event.AuthenticationEvent event )"], [66, "            synchronized ( listeners ) {"], [67, "                for ( AuthenticationEventListener ael : listeners ) {"], [68, "                    if ( event instanceof SuccessfulAuthenticationEvent) {"], [69, "                        ael.accountAuthenticated( event );"], [70, "                    } else if ( event instanceof UnlockedAccountEvent) {"], [71, "                        ael.accountUnlocked( event );"], [72, "                    } else if ( event instanceof LogoutEvent) {"], [73, "                        ael.accountLoggedOut( event );"], [74, "                    } else if ( event instanceof FailedAuthenticationEvent) {"], [75, "                        FailedAuthenticationEvent failedEvent = (FailedAuthenticationEvent)event;"], [76, "                        AuthenticationException cause = failedEvent.getCause();"], [77, ""], [78, "                        if ( cause != null && ( cause instanceof LockedAccountException ) ) {"], [79, "                            ael.accountLocked( event );"], [80, "                        } else {"], [81, "                            ael.authenticationFailed( event );"], [82, "                        }"], [83, "                    } else {"], [84, "                        String msg = \"Received argument of type [\" + event.getClass() + \"].  This \" +"], [85, "                                     \"implementation can only send event instances of types \" +"], [86, "                                     SuccessfulAuthenticationEvent.class.getName() + \", \" +"], [87, "                                     FailedAuthenticationEvent.class.getName() + \", \" +"], [88, "                                     UnlockedAccountEvent.class.getName() + \", or \" +"], [89, "                                     LogoutEvent.class.getName();"], [90, "                        throw new IllegalArgumentException( msg );"], [91, "                    }"], [92, "                }"], [97, "                             \"AuthenticationEventListeners will be notified of event [\" +"], [98, "                             event + \"]\";"]]}, "num_lines_added": 11, "num_lines_removed": 37}