{"hash": "df7ae6e10496485553f0ad1ef5de1b4f2053c7bc", "message": "javadoc updates, chunked up BasicHttpAuthenticationFilter's logic to be more maintainable and configurable\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jsecurity/trunk@711044 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 140, "diff_parsed": {"added": [[24, "import org.jsecurity.authc.AuthenticationToken;"], [28, "import org.jsecurity.web.WebUtils;"], [35, "import java.net.InetAddress;"], [196, "        String authzHeader = getAuthzHeader(request);"], [200, "    protected String getAuthzHeader( ServletRequest request ) {"], [201, "        HttpServletRequest httpRequest = toHttp(request);"], [202, "        return httpRequest.getHeader(AUTHORIZATION_HEADER);"], [203, "    }"], [204, ""], [246, "     * Executes a login attempt with the provided credentials in the http header and returns <code>true</code>"], [247, "     * if the login attempt is successful and <code>false</code> otherwise."], [248, "     * <p/>"], [249, "     * This implementation:"], [250, "     * <ol><li>acquires the username and password based on the request's"], [251, "     * {@link #getAuthzHeader(javax.servlet.ServletRequest) authorization header} via the"], [252, "     * {@link #getPrincipalsAndCredentials(String, javax.servlet.ServletRequest) getPrincipalsAndCredentials} method</li>"], [253, "     * <li>The return value of that method is converted to an <code>AuthenticationToken</code> via the"], [254, "     * {@link #createToken(String, String, javax.servlet.ServletRequest) createToken} method</li>"], [255, "     * <li>Finally, the login attempt is executed using that token by calling"], [256, "     * {@link #executeLogin(org.jsecurity.authc.AuthenticationToken, javax.servlet.ServletRequest, javax.servlet.ServletResponse)}</li>"], [257, "     * </ol>"], [268, "        String authorizationHeader = getAuthzHeader(request);"], [269, "        if (authorizationHeader == null || authorizationHeader.length() == 0 ) {"], [270, "            return false;"], [271, "        }"], [273, "        if (log.isDebugEnabled()) {"], [274, "            log.debug(\"Attempting to execute login with headers [\" + authorizationHeader + \"]\");"], [275, "        }"], [277, "        String[] prinCred = getPrincipalsAndCredentials(authorizationHeader, request);"], [278, "        if ( prinCred == null || prinCred.length < 2 ) {"], [279, "            return false;"], [280, "        }"], [281, ""], [282, "        String username = prinCred[0];"], [283, "        String password = prinCred[1];"], [284, ""], [285, "        if (log.isDebugEnabled()) {"], [286, "            log.debug(\"Processing login request for username [\" + username + \"]\");"], [287, "        }"], [288, ""], [289, "        AuthenticationToken token = createToken(username, password, request );"], [290, "        if ( token != null ) {"], [291, "            return executeLogin(token, request, response );"], [298, ""], [299, "    /**"], [300, "     * Executes a login attmept for the"], [301, "     * {@link #getSubject(javax.servlet.ServletRequest, javax.servlet.ServletResponse) currently executing}"], [302, "     * <code>Subject</code> using the specified authentication <code>token</code>."], [303, "     * <p/>"], [304, "     * The login attempt constitutes calling {@link Subject#login currentSubject.login(token)}.  If the method"], [305, "     * call returns successfully, <code>true</code> is returned, <code>false</code> otherwise."], [306, "     *"], [307, "     * @param token the <code>AuthenticationToken</code> representing the submitted username and password."], [308, "     * @param request the incoming ServletRequest"], [309, "     * @param response the outgoing ServletResponse"], [310, "     * @return <code>true</code> if the authentication attempt is successful, <code>false</code> otherwise."], [311, "     */"], [312, "    protected boolean executeLogin( AuthenticationToken token, ServletRequest request, ServletResponse response ) {"], [313, "        Subject subject = getSubject(request, response);"], [314, "        if ( token != null && subject != null ) {"], [315, "            try {"], [316, "                subject.login(token);"], [317, "                if (log.isDebugEnabled()) {"], [318, "                    log.debug(\"Successfully logged in user [\" + token.getPrincipal() + \"]\");"], [319, "                }"], [320, "                return true;"], [321, "            } catch (AuthenticationException ae) {"], [322, "                if (log.isDebugEnabled()) {"], [323, "                    log.debug(\"Unable to log in user [\" + token.getPrincipal()+ \"]\", ae);"], [324, "                }"], [325, "            }"], [326, "        }"], [327, ""], [328, "        //always default to false - authentication attempt never occurred or wasn't successful:"], [329, "        return false;"], [330, "    }"], [331, ""], [332, "    /**"], [333, "     * Returns the username (at String[] index 0) and password (at String[] index 1) obtained from the"], [334, "     * {@link #getAuthzHeader(javax.servlet.ServletRequest) authorizationHeader}."], [335, "     * @param authorizationHeader the authorization header obtained from the request."], [336, "     * @param request the incoming ServletRequest"], [337, "     * @return the username/password pair submitted by the user for the given header value and request."], [338, "     * @see #getAuthzHeader(javax.servlet.ServletRequest)"], [339, "     */"], [340, "    protected String[] getPrincipalsAndCredentials( String authorizationHeader, ServletRequest request ) {"], [341, "        if ( authorizationHeader == null ) {"], [342, "            return null;"], [343, "        }"], [344, "        String[] authTokens = authorizationHeader.split(\" \");"], [345, "        String scheme = getAuthcHeaderScheme();"], [346, "        if ( authTokens == null || authTokens.length < 2 || !authTokens[0].equalsIgnoreCase(scheme) ) {"], [347, "            return null;"], [348, "        }"], [349, ""], [350, "        String encodedCredentials = authTokens[1];"], [351, "        String decodedCredentials = Base64.decodeToString(encodedCredentials);"], [352, "        return decodedCredentials.split(\":\");"], [353, "    }"], [354, ""], [355, "    /**"], [356, "     * Creates an AuthenticationToken based on the username and password and incoming request to be submitted to"], [357, "     * the {@link Subject#login Subject.login} method for authentication."], [358, "     * <p/>"], [359, "     * The default implementation acquires the request's associated"], [360, "     * {@link #getInetAddress(javax.servlet.ServletRequest) inetAddress} as well as a potential"], [361, "     * {@link #isRememberMeEnabled(javax.servlet.ServletRequest) rememberMe} status, and with the given"], [362, "     * <code>username</code> and <code>password</code>, returns a"], [363, "     * <code>new {@link org.jsecurity.authc.UsernamePasswordToken UsernamePasswordToken}</code>.  That is:"], [364, "     * <br/><br/>"], [365, "     * <pre>       InetAddress addr = getInetAddress(request);"], [366, "     * boolean rememberMe = isRememberMeEnabled(request);"], [367, "     * return new UsernamePasswordToken(username, password, rememberMe, addr );</pre>"], [368, "     * <p/>"], [369, "     * It should be noted that Basic HTTP Authentication does not support any concept of <code>rememberMe</code, but"], [370, "     * we still allow subclasses to enable this feature for any given request via the"], [371, "     * {@link #isRememberMeEnabled(javax.servlet.ServletRequest) isRememberMeEnabled} method if subclasses wish to"], [372, "     * override that method in custom environments."], [373, "     *"], [374, "     * @param username the username obtained from the request's 'Authorization' header."], [375, "     * @param password the password obtained from the request's 'Authorization' header."], [376, "     * @param request the incoming ServletRequest."], [377, "     * @return a constructed <code>AuthenticationToken</code> that will be used to execute a login attempt for the"], [378, "     * current <code>Subject</code>."], [379, "     */"], [380, "    protected AuthenticationToken createToken( String username, String password, ServletRequest request ) {"], [381, "        InetAddress addr = getInetAddress(request);"], [382, "        boolean rememberMe = isRememberMeEnabled(request);"], [383, "        return new UsernamePasswordToken(username, password, rememberMe, addr );"], [384, "    }"], [385, ""], [386, "    /**"], [387, "     * Returns the InetAddress associated with the current subject.  This method is primarily provided for use"], [388, "     * during construction of an <code>AuthenticationToken</code>."], [389, "     * <p/>"], [390, "     * The default implementation merely returns"], [391, "     * {@link WebUtils#getInetAddress(javax.servlet.ServletRequest) WebUtils.getInetAddress(request)}."], [392, "     *"], [393, "     * @param request the incoming ServletRequest"], [394, "     * @return the <code>InetAddress</code> to associate with the login attempt."], [395, "     */"], [396, "    protected InetAddress getInetAddress( ServletRequest request ) {"], [397, "        return WebUtils.getInetAddress(request);"], [398, "    }"], [399, ""], [400, "    /**"], [401, "     * Returns <code>true</code> if &quot;rememberMe&quot; should be enabled for the login attempt associated with the"], [402, "     * current <code>request</code>, <code>false</code> otherwise."], [403, "     * <p/>"], [404, "     * This implementation always returns <code>false</code> in all cases because Basic HTTP Authentication does not"], [405, "     * support the concept of <code>rememberMe</code>.  However, this method is provided as a template hook to"], [406, "     * subclasses that might wish to determine <code>rememberMe</code> in a custom mannner based on the current"], [407, "     * <code>request</code>."], [408, "     * @param request the incoming ServletRequest"], [409, "     * @return <code>true</code> if &quot;rememberMe&quot; should be enabled for the login attempt associated with the"], [410, "     * current <code>request</code>, <code>false</code> otherwise."], [411, "     */"], [412, "    protected boolean isRememberMeEnabled( ServletRequest request ) {"], [413, "        return false;"], [414, "    }"], [415, ""]], "deleted": [[193, "        HttpServletRequest httpRequest = toHttp(request);"], [194, "        String authzHeader = httpRequest.getHeader(AUTHORIZATION_HEADER);"], [239, "     * Initiates a login attempt with the provided credentials in the http header."], [250, "        HttpServletRequest httpRequest = toHttp(request);"], [251, "        String authorizationHeader = httpRequest.getHeader(AUTHORIZATION_HEADER);"], [253, "        if (authorizationHeader != null && authorizationHeader.length() > 0) {"], [254, "            if (log.isDebugEnabled()) {"], [255, "                log.debug(\"Executing login with headers [\" + authorizationHeader + \"]\");"], [256, "            }"], [258, "            String[] authTokens = authorizationHeader.split(\" \");"], [259, ""], [260, "            if (authTokens[0].trim().equalsIgnoreCase(HttpServletRequest.BASIC_AUTH)) {"], [261, "                String encodedCredentials = authTokens[1];"], [262, ""], [263, "                String decodedCredentials = Base64.decodeToString(encodedCredentials);"], [264, ""], [265, "                String[] credentials = decodedCredentials.split(\":\");"], [266, ""], [267, "                if (credentials != null && credentials.length > 1) {"], [268, "                    if (log.isDebugEnabled()) {"], [269, "                        log.debug(\"Processing login request [\" + credentials[0] + \"]\");"], [270, "                    }"], [271, "                    Subject subject = getSubject(request, response);"], [272, "                    UsernamePasswordToken usernamePasswordToken = new UsernamePasswordToken(credentials[0], credentials[1]);"], [273, "                    try {"], [274, "                        subject.login(usernamePasswordToken);"], [275, "                        if (log.isDebugEnabled()) {"], [276, "                            log.debug(\"Successfully logged in user [\" + credentials[0] + \"]\");"], [277, "                        }"], [278, "                        return true;"], [279, "                    } catch (AuthenticationException ae) {"], [280, "                        if (log.isDebugEnabled()) {"], [281, "                            log.debug(\"Unable to log in subject [\" + credentials[0] + \"]\", ae);"], [282, "                        }"], [283, "                    }"], [284, "                }"], [285, "            }"]]}, "num_lines_added": 161, "num_lines_removed": 37}