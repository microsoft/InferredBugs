    @Override
    byte[] prepareKeyExchangeMessage() {
        RSAPublicKey publicKey = null;
        Certificate cert = tlsContext.getServerCertificate();
        X509CertificateObject certObject;
        try {
            certObject = new X509CertificateObject(cert.getCertificateAt(0));
        } catch (CertificateParsingException ex) {
            throw new WorkflowExecutionException("Could not parse server certificate", ex);
        }
        if (!certObject.getPublicKey().getAlgorithm().equals("RSA")) {

            if (tlsContext.getConfig().isFuzzingMode()) {
                if (bufferedKey == null) {
                    KeyPairGenerator keyGen = null;
                    try {
                        keyGen = KeyPairGenerator.getInstance("RSA", "BC");
                    } catch (NoSuchAlgorithmException | NoSuchProviderException ex) {
                        LOGGER.error(ex.getLocalizedMessage(), ex);
                    }
                    bufferedKey = (RSAPublicKey) keyGen.genKeyPair().getPublic();
                }
                publicKey = bufferedKey;// TODO not multithreadable
            } else {
                throw new WorkflowExecutionException("Cannot use non-RSA public Key in RSA-ClientKeyExchangeHandler");
            }
        } else {
            publicKey = (RSAPublicKey) certObject.getPublicKey();

        }
        int keyByteLength = publicKey.getModulus().bitLength() / 8;
        // the number of random bytes in the pkcs1 message
        int randomByteLength = keyByteLength - HandshakeByteLength.PREMASTER_SECRET - 3;
        byte[] padding = new byte[randomByteLength];
        RandomHelper.getRandom().nextBytes(padding);
        ArrayConverter.makeArrayNonZero(padding);

        byte[] premasterSecret = new byte[HandshakeByteLength.PREMASTER_SECRET];

        RandomHelper.getRandom().nextBytes(premasterSecret);
        premasterSecret[0] = tlsContext.getSelectedProtocolVersion().getMajor();
        premasterSecret[1] = tlsContext.getSelectedProtocolVersion().getMinor();
        protocolMessage.setPremasterSecret(premasterSecret);

        LOGGER.debug("Computed PreMaster Secret: {}",
                ArrayConverter.bytesToHexString(protocolMessage.getPremasterSecret().getValue()));

        protocolMessage.setPlainPaddedPremasterSecret(ArrayConverter.concatenate(new byte[] { 0x00, 0x02 }, padding,
                new byte[] { 0x00 }, protocolMessage.getPremasterSecret().getValue()));

        byte[] paddedPremasterSecret = protocolMessage.getPlainPaddedPremasterSecret().getValue();

        byte[] random = tlsContext.getClientServerRandom();

        PRFAlgorithm prfAlgorithm = AlgorithmResolver.getPRFAlgorithm(tlsContext.getSelectedProtocolVersion(),
                tlsContext.getSelectedCipherSuite());
        byte[] masterSecret = PseudoRandomFunction.compute(prfAlgorithm, protocolMessage.getPremasterSecret()
                .getValue(), PseudoRandomFunction.MASTER_SECRET_LABEL, random, HandshakeByteLength.MASTER_SECRET);
        protocolMessage.setMasterSecret(masterSecret);
        LOGGER.debug("Computed Master Secret: {}", ArrayConverter.bytesToHexString(masterSecret));

        tlsContext.setMasterSecret(protocolMessage.getMasterSecret().getValue());

        try {
            Cipher cipher = Cipher.getInstance("RSA/None/NoPadding", "BC");
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            LOGGER.debug("Encrypting the following padded premaster secret: {}",
                    ArrayConverter.bytesToHexString(paddedPremasterSecret));
            // TODO can throw a tooMuchData for RSA Block exception
            if (paddedPremasterSecret.length == 0) {
                paddedPremasterSecret = new byte[] { 0 };
            }
            if (new BigInteger(paddedPremasterSecret).compareTo(publicKey.getModulus()) == 1) {
                if (tlsContext.getConfig().isFuzzingMode()) {
                    paddedPremasterSecret = masterSecret;
                } else {
                    throw new IllegalStateException("Trying to encrypt more data then modulus size!");
                }
            }
            byte[] encrypted = null;
            try {
                encrypted = cipher.doFinal(paddedPremasterSecret);
            } catch (org.bouncycastle.crypto.DataLengthException | ArrayIndexOutOfBoundsException E) {
                // too much data for RSA block
                throw new UnsupportedOperationException(E);
            }
            protocolMessage.setEncryptedPremasterSecret(encrypted);
            protocolMessage
                    .setEncryptedPremasterSecretLength(protocolMessage.getEncryptedPremasterSecret().getValue().length);
            return ArrayConverter.concatenate(ArrayConverter.intToBytes(protocolMessage
                    .getEncryptedPremasterSecretLength().getValue(),
                    HandshakeByteLength.ENCRYPTED_PREMASTER_SECRET_LENGTH), protocolMessage
                    .getEncryptedPremasterSecret().getValue());
        } catch (BadPaddingException | IllegalBlockSizeException | NoSuchProviderException | InvalidKeyException
                | NoSuchAlgorithmException | NoSuchPaddingException ex) {
            LOGGER.info(ex);
            throw new WorkflowExecutionException(ex.getLocalizedMessage());
        }

    }