{"hash": "a9cd5b838e436e8a600491f3ceb3136f5359fc63", "message": "Added command to generate Server.config Files", "file_num_lines": 135, "diff_parsed": {"added": [[12, "import Helper.GitIgnoreFileFilter;"], [19, "public class ServerManager"], [20, "{"], [21, ""], [26, "     *"], [29, "    public static ServerManager getInstance()"], [30, "    {"], [31, "        return ServerManagerHolder.INSTANCE;"], [36, "    private ServerManager()"], [37, "    {"], [38, "        serverList = new ArrayList<>();"], [43, "     *"], [46, "    public void addServer(TLSServer server)"], [47, "    {"], [48, "        serverList.add(server);"], [51, "    public void init(EvolutionaryFuzzerConfig config)"], [52, "    {"], [53, "        File file = new File(config.getServerCommandFromFile());"], [54, "        if (!file.exists())"], [55, "        {"], [56, "            LOG.log(Level.INFO, \"Could not find Server Configuration Files:\" + file.getAbsolutePath());"], [57, "            LOG.log(Level.INFO, \"You can create new Configuration files with the command new-server\");"], [58, "            System.exit(-1);"], [59, ""], [60, "        }"], [61, "        else"], [62, "        {"], [63, "            if (file.isDirectory())"], [64, "            {"], [65, "                File[] filesInDic = file.listFiles(new GitIgnoreFileFilter());"], [66, "                if (filesInDic.length == 0)"], [67, "                {"], [68, "                    LOG.log(Level.INFO, \"No Server Configurations Files in the Server Config Folder:\"+file.getAbsolutePath());"], [69, "                    LOG.log(Level.INFO, \"You can create new Configuration files with the command new-server\");"], [70, "                    System.exit(-1);"], [71, "                }"], [72, "                else"], [73, "                {"], [74, "                    // ServerConfig is a Folder"], [75, "                    for (File f : filesInDic)"], [76, "                    {"], [77, "                        try"], [78, "                        {"], [79, "                            if (f.isFile())"], [80, "                            {"], [81, "                                TLSServer server = ServerSerializer.read(f);"], [82, "                                addServer(server);"], [83, "                            }"], [84, "                        }"], [85, "                        catch (Exception ex)"], [86, "                        {"], [87, "                            LOG.log(Level.SEVERE, \"Could not read Server!\", ex);"], [88, "                        }"], [89, "                    }"], [90, "                }"], [91, "            }"], [92, "            else"], [93, "            {"], [94, "                // ServerConfig is a File"], [95, "                try"], [96, "                {"], [97, "                    TLSServer server = ServerSerializer.read(file);"], [98, "                    addServer(server);"], [99, ""], [100, "                }"], [101, "                catch (Exception ex)"], [102, "                {"], [103, "                    LOG.log(Level.SEVERE, \"Could not read Server!\", ex);"], [104, "                }"], [105, "            }"], [106, "        }"], [107, ""], [115, "     *"], [118, "    public synchronized TLSServer getFreeServer()"], [119, "    {"], [120, "        // System.out.println(\"Getting Server\");"], [121, "        long startSearch = System.currentTimeMillis();"], [122, "        if (serverList.isEmpty())"], [123, "        {"], [124, "            return null;"], [125, "        }"], [126, "        int i = 0;"], [127, "        while (true)"], [128, "        {"], [129, "            TLSServer server = serverList.get(i % serverList.size());"], [130, "            if (server.isFree())"], [131, "            {"], [132, "                // Try to get a free Server"], [133, ""], [134, "                server.occupie();"], [135, "                // System.out.println(\"Got:\"+server.toString());"], [136, "                return server;"], [137, "            }"], [138, "            i++;"], [139, "            if (startSearch < System.currentTimeMillis() - Config.ConfigManager.getInstance().getConfig().getTimeout())"], [140, "            {"], [141, "                // Searched longer than a minute and didnt find a free Server"], [142, "                throw new RuntimeException("], [143, "                        \"Could not find a free Server, if you have >= #servers than #executors there is a bug in the Code that causes Servers to not be properly released or not restart properly.\");"], [144, "            }"], [145, "        }"], [152, "    public void clear()"], [153, "    {"], [154, "        serverList = new ArrayList<>();"], [159, "     *"], [162, "    public int getNumberOfServers()"], [163, "    {"], [164, "        return serverList.size();"], [167, "    public int getServerCount()"], [168, "    {"], [169, "        return serverList.size();"], [172, "    public int getFreeServerCount()"], [173, "    {"], [174, "        int count = 0;"], [175, "        for (TLSServer server : serverList)"], [176, "        {"], [177, "            if (server.isFree())"], [178, "            {"], [179, "                count++;"], [180, "            }"], [181, "        }"], [182, "        return serverList.size();"], [185, "    public List<TLSServer> getAllServers()"], [186, "    {"], [187, "        return serverList;"], [191, "    private static class ServerManagerHolder"], [192, "    {"], [194, "        private static final ServerManager INSTANCE = new ServerManager();"]], "deleted": [[18, "public class ServerManager {"], [23, "     *"], [26, "    public static ServerManager getInstance() {"], [27, "\treturn ServerManagerHolder.INSTANCE;"], [32, "    private ServerManager() {"], [33, "\tserverList = new ArrayList<>();"], [38, "     *"], [41, "    public void addServer(TLSServer server) {"], [42, "\tserverList.add(server);"], [45, "    public void init(EvolutionaryFuzzerConfig config) {"], [46, "\tFile file = new File(config.getServerCommandFromFile());"], [47, "\tif (file.isDirectory()) {"], [48, "\t    // ServerConfig is a Folder"], [49, "\t    for (File f : file.listFiles()) {"], [50, "\t\ttry {"], [51, "\t\t    if (f.isFile()) {"], [52, "\t\t\tTLSServer server = ServerSerializer.read(f);"], [53, "\t\t\taddServer(server);"], [54, "\t\t    }"], [55, "\t\t} catch (Exception ex) {"], [56, "\t\t    LOG.log(Level.SEVERE, \"Could not read Server!\", ex);"], [57, "\t\t}"], [58, "\t    }"], [59, "\t} else {"], [60, "\t    // ServerConfig is a File"], [61, "\t    try {"], [62, "\t\tTLSServer server = ServerSerializer.read(file);"], [63, "\t\taddServer(server);"], [64, ""], [65, "\t    } catch (Exception ex) {"], [66, "\t\tLOG.log(Level.SEVERE, \"Could not read Server!\", ex);"], [67, "\t    }"], [68, "\t}"], [76, "     *"], [79, "    public synchronized TLSServer getFreeServer() {"], [80, "\t// System.out.println(\"Getting Server\");"], [81, "\tlong startSearch = System.currentTimeMillis();"], [82, "\tif (serverList.isEmpty()) {"], [83, "\t    return null;"], [84, "\t}"], [85, "\tint i = 0;"], [86, "\twhile (true) {"], [87, "\t    TLSServer server = serverList.get(i % serverList.size());"], [88, "\t    if (server.isFree()) {"], [89, "\t\t// Try to get a free Server"], [90, ""], [91, "\t\tserver.occupie();"], [92, "\t\t// System.out.println(\"Got:\"+server.toString());"], [93, "\t\treturn server;"], [94, "\t    }"], [95, "\t    i++;"], [96, "\t    if (startSearch < System.currentTimeMillis() - Config.ConfigManager.getInstance().getConfig().getTimeout()) {"], [97, "\t\t// Searched longer than a minute and didnt find a free Server"], [98, "\t\tthrow new RuntimeException("], [99, "\t\t\t\"Could not find a free Server, if you have >= #servers than #executors there is a bug in the Code that causes Servers to not be properly released or not restart properly.\");"], [100, "\t    }"], [101, "\t}"], [108, "    public void clear() {"], [109, "\tserverList = new ArrayList<>();"], [114, "     *"], [117, "    public int getNumberOfServers() {"], [118, "\treturn serverList.size();"], [121, "    public int getServerCount() {"], [122, "\treturn serverList.size();"], [125, "    public int getFreeServerCount() {"], [126, "\tint count = 0;"], [127, "\tfor (TLSServer server : serverList) {"], [128, "\t    if (server.isFree()) {"], [129, "\t\tcount++;"], [130, "\t    }"], [131, "\t}"], [132, "\treturn serverList.size();"], [135, "    public List<TLSServer> getAllServers() {"], [136, "\treturn serverList;"], [141, "    private static class ServerManagerHolder {"], [142, ""], [143, "\tprivate static final ServerManager INSTANCE = new ServerManager();"]]}, "num_lines_added": 128, "num_lines_removed": 77}