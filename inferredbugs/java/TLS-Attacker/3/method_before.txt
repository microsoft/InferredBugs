    public static void execute(WorkflowTrace trace) {
	TLSServer server = null;
	try {
	    BasicAFLAgent agent = new BasicAFLAgent();
	    // TODO The agent should not be generated by the Executor, the
	    // Modules should be distinct
	    server = ServerManager.getInstance().getFreeServer();
	    server.start();

	    agent.onApplicationStart();
	    ConfigHandler configHandler = ConfigHandlerFactory.createConfigHandler("client");

	    GeneralConfig gc = new GeneralConfig();
	    gc.setLogLevel(Level.OFF);
	    configHandler.initialize(gc);

	    EvolutionaryFuzzerConfig fc = new EvolutionaryFuzzerConfig();

	    TransportHandler transportHandler = null;
	    long time = System.currentTimeMillis();
	    while (transportHandler == null) {
		try {

		    transportHandler = configHandler.initializeTransportHandler(fc);

		} catch (ConfigurationException E) {
		    // TODO Timeout spezifizieren
		    if (time + 10000 < System.currentTimeMillis()) {
			System.out.println("Could not start Server! Trying to Restart it!");
			server.restart();
			time = System.currentTimeMillis();
		    }
		    // TODO what if it really is a configuration exception?
		    // It may happen that the implementation is not ready yet
		}
	    }// TODO Change to config
	    TlsContext tlsContext = new TlsContext();
	    tlsContext.setWorkflowTrace(trace);

	    KeyStore ks = KeystoreHandler.loadKeyStore(fc.getKeystore(), fc.getPassword());
	    tlsContext.setKeyStore(ks);
	    tlsContext.setAlias(fc.getAlias());
	    tlsContext.setPassword(fc.getPassword());
	    if (LOG.getLevel() == java.util.logging.Level.FINE) {
		Enumeration<String> aliases = ks.aliases();
		LOG.log(java.util.logging.Level.FINE, "Successfully read keystore with the following aliases: ");
		while (aliases.hasMoreElements()) {
		    String alias = aliases.nextElement();
		    LOG.log(java.util.logging.Level.FINE, "  {}", alias);
		}
	    }

	    java.security.cert.Certificate sunCert = tlsContext.getKeyStore().getCertificate("alias");
	    if (sunCert == null) {
		throw new ConfigurationException("The certificate cannot be fetched. Have you provided correct "
			+ "certificate alias and key? (Current alias: " + "alias" + ")");
	    }
	    byte[] certBytes = sunCert.getEncoded();

	    ASN1Primitive asn1Cert = TlsUtils.readDERObject(certBytes);
	    org.bouncycastle.asn1.x509.Certificate cert = org.bouncycastle.asn1.x509.Certificate.getInstance(asn1Cert);

	    org.bouncycastle.asn1.x509.Certificate[] certs = new org.bouncycastle.asn1.x509.Certificate[1];
	    certs[0] = cert;
	    org.bouncycastle.crypto.tls.Certificate tlsCerts = new org.bouncycastle.crypto.tls.Certificate(certs);

	    X509CertificateObject x509CertObject = new X509CertificateObject(tlsCerts.getCertificateAt(0));

	    tlsContext.setX509ServerCertificateObject(x509CertObject);
	    // tlsContext.setProtocolVersion(ProtocolVersion.TLS12);
	    WorkflowExecutor workflowExecutor = new GenericWorkflowExecutor(transportHandler, tlsContext);

	    // tlsContext.setServerCertificate(certificate);
	    try {
		workflowExecutor.executeWorkflow();
	    } catch (WorkflowExecutionException ex) {
		ex.printStackTrace();
	    }
	    transportHandler.closeConnection();
	    // TODO What if server never exited?
	    while (!server.exited()) {
	    }
	    agent.onApplicationStop();

	} catch (KeyStoreException ex) {
	    Logger.getLogger(DebugExecutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (CertificateParsingException ex) {
	    Logger.getLogger(DebugExecutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IOException ex) {
	    Logger.getLogger(DebugExecutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (CertificateEncodingException ex) {
	    Logger.getLogger(DebugExecutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (NoSuchAlgorithmException ex) {
	    Logger.getLogger(DebugExecutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (CertificateException ex) {
	    Logger.getLogger(DebugExecutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (Throwable t) {
	    t.printStackTrace();
	} finally {
	    server.release();
	}
    }