{"hash": "975229905fe18002f5e9beaa62a5318d218e482a", "message": "Splitted functionallity in multiple Functions to allow easier unit testing", "file_num_lines": 265, "diff_parsed": {"added": [[38, " *"], [42, ""], [66, "     *"], [67, "     * @param config Configuration used by the Controller"], [102, "        LOG.log(Level.INFO, \"Stopping Fuzzer!\");"], [105, "        do {"], [106, "            try {"], [107, "                Thread.sleep(50);"], [108, "            } catch (InterruptedException ex) {"], [109, "                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [110, "            }"], [111, "        } while (pool.hasRunningThreads());"], [112, "        LOG.log(Level.INFO, \"Fuzzer stopped!\");"], [113, "    }"], [114, ""], [115, "    public void printServerStatus() {"], [116, "        List<TLSServer> serverList = ServerManager.getInstance().getAllServers();"], [117, "        for (TLSServer server : serverList) {"], [118, "            System.out.println(server);"], [119, "        }"], [120, "    }"], [121, ""], [122, "    public void dumpEdges(String split[]) {"], [123, "        String file = \"edges.dump\";"], [124, "        if (split.length == 2) {"], [125, "            file = split[1];"], [126, "        }"], [127, "        LOG.log(Level.INFO, \"Dumping Edge Information to {0}\", file);"], [128, "        stopFuzzer();"], [129, "        do {"], [130, "            try {"], [131, "                Thread.sleep(50);"], [132, "            } catch (InterruptedException ex) {"], [133, "                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [134, "            }"], [135, "        } while (pool.hasRunningThreads());"], [136, ""], [137, "        BranchTrace trace = (((IsGoodRule) ((RuleAnalyzer) (ResultContainer.getInstance().getAnalyzer()))"], [138, "                .getRule(IsGoodRule.class))).getBranchTrace();// TODO"], [139, "        // fix"], [140, "        // rule"], [141, "        // analyzer"], [142, ""], [143, "        PrintWriter writer;"], [144, "        try {"], [145, "            writer = new PrintWriter(file, \"UTF-8\");"], [146, "            Map<Edge, Edge> set = trace.getEdgeMap();"], [147, "            for (Edge edge : set.values()) {"], [148, "                writer.println(edge.getSource() + \" \" + edge.getDestination());"], [149, "            }"], [150, "            writer.close();"], [151, "        } catch (FileNotFoundException ex) {"], [152, "            Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [153, "        } catch (UnsupportedEncodingException ex) {"], [154, "            Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [155, "        }"], [156, "        LOG.log(Level.INFO, \"Dump finished\");"], [157, "        startFuzzer();"], [158, "    }"], [159, ""], [160, "    public void dumpVertices(String[] split) {"], [161, "        String file = \"vertices.dump\";"], [162, "        if (split.length == 2) {"], [163, "            file = split[1];"], [164, "        }"], [165, "        LOG.log(Level.INFO, \"Dumping Vertex Information to {0}\", file);"], [166, "        stopFuzzer();"], [167, "        do {"], [168, "            try {"], [169, "                Thread.sleep(50);"], [170, "            } catch (InterruptedException ex) {"], [171, "                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [172, "            }"], [173, "        } while (pool.hasRunningThreads());"], [174, ""], [175, "        BranchTrace trace = (((IsGoodRule) ((RuleAnalyzer) (ResultContainer.getInstance().getAnalyzer()))"], [176, "                .getRule(IsGoodRule.class))).getBranchTrace();// TODO"], [177, "        // fix"], [178, "        // rule"], [179, "        // analyzer"], [180, "        PrintWriter writer = null;"], [181, "        try {"], [182, "            writer = new PrintWriter(file, \"UTF-8\");"], [183, "            Set<Long> set = trace.getVerticesSet();"], [184, "            for (Long vertex : set) {"], [185, "                writer.println(vertex);"], [186, "            }"], [187, "            writer.close();"], [188, "        } catch (FileNotFoundException ex) {"], [189, "            Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [190, "        } catch (UnsupportedEncodingException ex) {"], [191, "            Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [192, "        }"], [193, "        LOG.log(Level.INFO, \"Dump finished\");"], [194, "        startFuzzer();"], [195, "    }"], [196, ""], [197, "    public void loadGraph(String[] split) {"], [198, "        BranchTrace trace = (((IsGoodRule) ((RuleAnalyzer) (ResultContainer.getInstance().getAnalyzer()))"], [199, "                .getRule(IsGoodRule.class))).getBranchTrace();// TODO"], [200, "        // fix"], [201, "        // rule"], [202, "        // analyzer"], [203, "        if (split.length != 2) {"], [204, "            LOG.log(Level.INFO, \"You need to specify a File to load\");"], [205, "        } else {"], [206, "            String file = split[1];"], [207, "            LOG.log(Level.INFO, \"Loading from:{0}\", file);"], [208, "            ObjectInputStream objectinputstream = null;"], [209, "            try {"], [210, "                FileInputStream streamIn = new FileInputStream(file);"], [211, "                objectinputstream = new ObjectInputStream(streamIn);"], [212, "                BranchTrace tempTrace = (BranchTrace) objectinputstream.readObject();"], [213, "                trace.merge(tempTrace);"], [214, "            } catch (Exception e) {"], [215, "                e.printStackTrace();"], [216, "            } finally {"], [217, "                if (objectinputstream != null) {"], [218, "                    try {"], [219, "                        objectinputstream.close();"], [220, "                    } catch (IOException ex) {"], [221, "                        Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null,"], [222, "                                ex);"], [223, "                    }"], [224, "                }"], [225, "            }"], [226, "        }"], [227, "    }"], [228, ""], [229, "    public void saveGraph(String split[]) {"], [230, "        BranchTrace trace = (((IsGoodRule) ((RuleAnalyzer) (ResultContainer.getInstance().getAnalyzer()))"], [231, "                .getRule(IsGoodRule.class))).getBranchTrace();// TODO"], [232, "        // fix"], [233, "        // rule"], [234, "        // analyzer"], [235, "        if (split.length != 2) {"], [236, "            LOG.log(Level.INFO, \"You need to specify a File to Save to\");"], [237, "        } else {"], [238, "            String file = split[1];"], [239, "            LOG.log(Level.INFO, \"Saving to:{0}\", file);"], [240, "            FileOutputStream fout = null;"], [241, "            ObjectOutputStream oos = null;"], [242, "            try {"], [243, "                fout = new FileOutputStream(file);"], [244, "                oos = new ObjectOutputStream(fout);"], [245, "                oos.writeObject(trace);"], [246, ""], [247, "            } catch (FileNotFoundException ex) {"], [248, "                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [249, "            } catch (UnsupportedEncodingException ex) {"], [250, "                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [251, "            } catch (IOException ex) {"], [252, "                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [253, "            } finally {"], [254, "                if (fout != null) {"], [255, "                    try {"], [256, "                        fout.close();"], [257, "                    } catch (IOException ex) {"], [258, "                        Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null,"], [259, "                                ex);"], [260, "                    }"], [261, "                }"], [262, "                if (oos != null) {"], [263, "                    try {"], [264, "                        oos.close();"], [265, "                    } catch (IOException ex) {"], [266, "                        Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null,"], [267, "                                ex);"], [268, "                    }"], [269, "                }"], [270, "            }"], [271, "        }"], [272, "    }"], [273, ""], [274, "    public void printUsage() {"], [275, "        System.out"], [276, "                .println(\"Commands: start, stop, status, server, edges <file>, vertices <file>, loadGraph <file>, saveGraph <file>\");"], [277, ""], [278, "    }"], [279, ""], [280, "    public void printStatus() {"], [281, "        ResultContainer con = ResultContainer.getInstance();"], [282, "        System.out.println(con.getAnalyzer().getReport());"], [309, "                        printStatus();"], [312, "                        printServerStatus();"], [315, "                        dumpEdges(split);"], [318, "                        dumpVertices(split);"], [321, "                        loadGraph(split);"], [324, "                        saveGraph(split);"], [327, "                        printUsage();"]], "deleted": [[38, " *"], [65, "     *"], [66, "     * @param config"], [67, "     *            Configuration used by the Controller"], [125, ""], [128, "                        LOG.log(Level.INFO, \"Stopping Fuzzer!\");"], [130, "                        do {"], [131, "                            try {"], [132, "                                Thread.sleep(50);"], [133, "                            } catch (InterruptedException ex) {"], [134, "                                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [135, "                            }"], [136, "                        } while (pool.hasRunningThreads());"], [137, "                        LOG.log(Level.INFO, \"Fuzzer stopped!\");"], [140, "                        ResultContainer con = ResultContainer.getInstance();"], [141, "                        System.out.println(con.getAnalyzer().getReport());"], [144, "                        List<TLSServer> serverList = ServerManager.getInstance().getAllServers();"], [145, "                        for (TLSServer server : serverList) {"], [146, "                            System.out.println(server);"], [147, "                        }"], [150, "                        String file = \"edges.dump\";"], [151, "                        if (split.length == 2) {"], [152, "                            file = split[1];"], [153, "                        }"], [154, "                        LOG.log(Level.INFO, \"Dumping Edge Information to {0}\", file);"], [155, "                        stopFuzzer();"], [156, "                        do {"], [157, "                            try {"], [158, "                                Thread.sleep(50);"], [159, "                            } catch (InterruptedException ex) {"], [160, "                                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [161, "                            }"], [162, "                        } while (pool.hasRunningThreads());"], [163, ""], [164, "                        BranchTrace trace = (((IsGoodRule) ((RuleAnalyzer) (ResultContainer.getInstance().getAnalyzer()))"], [165, "                                .getRule(IsGoodRule.class))).getBranchTrace();// TODO"], [166, "                                                                              // fix"], [167, "                                                                              // rule"], [168, "                                                                              // analyzer"], [169, ""], [170, "                        PrintWriter writer;"], [171, "                        try {"], [172, "                            writer = new PrintWriter(file, \"UTF-8\");"], [173, "                            Map<Edge, Edge> set = trace.getEdgeMap();"], [174, "                            for (Edge edge : set.values()) {"], [175, "                                writer.println(edge.getSource() + \" \" + edge.getDestination());"], [176, "                            }"], [177, "                            writer.close();"], [178, "                        } catch (FileNotFoundException ex) {"], [179, "                            Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [180, "                        } catch (UnsupportedEncodingException ex) {"], [181, "                            Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [182, "                        }"], [183, "                        LOG.log(Level.INFO, \"Dump finished\");"], [184, "                        startFuzzer();"], [187, "                        file = \"vertices.dump\";"], [188, "                        if (split.length == 2) {"], [189, "                            file = split[1];"], [190, "                        }"], [191, "                        LOG.log(Level.INFO, \"Dumping Vertex Information to {0}\", file);"], [192, "                        stopFuzzer();"], [193, "                        do {"], [194, "                            try {"], [195, "                                Thread.sleep(50);"], [196, "                            } catch (InterruptedException ex) {"], [197, "                                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [198, "                            }"], [199, "                        } while (pool.hasRunningThreads());"], [200, ""], [201, "                        trace = (((IsGoodRule) ((RuleAnalyzer) (ResultContainer.getInstance().getAnalyzer()))"], [202, "                                .getRule(IsGoodRule.class))).getBranchTrace();// TODO"], [203, "                                                                              // fix"], [204, "                                                                              // rule"], [205, "                                                                              // analyzer"], [206, "                        writer = null;"], [207, "                        try {"], [208, "                            writer = new PrintWriter(file, \"UTF-8\");"], [209, "                            Set<Long> set = trace.getVerticesSet();"], [210, "                            for (Long vertex : set) {"], [211, "                                writer.println(vertex);"], [212, "                            }"], [213, "                            writer.close();"], [214, "                        } catch (FileNotFoundException ex) {"], [215, "                            Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [216, "                        } catch (UnsupportedEncodingException ex) {"], [217, "                            Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [218, "                        }"], [219, "                        LOG.log(Level.INFO, \"Dump finished\");"], [220, "                        startFuzzer();"], [223, "                        trace = (((IsGoodRule) ((RuleAnalyzer) (ResultContainer.getInstance().getAnalyzer()))"], [224, "                                .getRule(IsGoodRule.class))).getBranchTrace();// TODO"], [225, "                                                                              // fix"], [226, "                                                                              // rule"], [227, "                                                                              // analyzer"], [228, "                        if (split.length != 2) {"], [229, "                            LOG.log(Level.INFO, \"You need to specify a File to load\");"], [230, "                        } else {"], [231, "                            file = split[1];"], [232, "                            LOG.log(Level.INFO, \"Loading from:{0}\", file);"], [233, "                            ObjectInputStream objectinputstream = null;"], [234, "                            try {"], [235, "                                FileInputStream streamIn = new FileInputStream(file);"], [236, "                                objectinputstream = new ObjectInputStream(streamIn);"], [237, "                                BranchTrace tempTrace = (BranchTrace) objectinputstream.readObject();"], [238, "                                trace.merge(tempTrace);"], [239, "                            } catch (Exception e) {"], [240, "                                e.printStackTrace();"], [241, "                            } finally {"], [242, "                                if (objectinputstream != null) {"], [243, "                                    try {"], [244, "                                        objectinputstream.close();"], [245, "                                    } catch (IOException ex) {"], [246, "                                        Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null,"], [247, "                                                ex);"], [248, "                                    }"], [249, "                                }"], [250, "                            }"], [251, "                        }"], [254, "                        trace = (((IsGoodRule) ((RuleAnalyzer) (ResultContainer.getInstance().getAnalyzer()))"], [255, "                                .getRule(IsGoodRule.class))).getBranchTrace();// TODO"], [256, "                                                                              // fix"], [257, "                                                                              // rule"], [258, "                                                                              // analyzer"], [259, "                        if (split.length != 2) {"], [260, "                            LOG.log(Level.INFO, \"You need to specify a File to Save to\");"], [261, "                        } else {"], [262, "                            file = split[1];"], [263, "                            LOG.log(Level.INFO, \"Saving to:{0}\", file);"], [264, "                            FileOutputStream fout = null;"], [265, "                            ObjectOutputStream oos = null;"], [266, "                            try {"], [267, "                                fout = new FileOutputStream(file);"], [268, "                                oos = new ObjectOutputStream(fout);"], [269, "                                oos.writeObject(trace);"], [270, ""], [271, "                            } catch (FileNotFoundException ex) {"], [272, "                                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [273, "                            } catch (UnsupportedEncodingException ex) {"], [274, "                                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [275, "                            } catch (IOException ex) {"], [276, "                                Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null, ex);"], [277, "                            } finally {"], [278, "                                if (fout != null) {"], [279, "                                    try {"], [280, "                                        fout.close();"], [281, "                                    } catch (IOException ex) {"], [282, "                                        Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null,"], [283, "                                                ex);"], [284, "                                    }"], [285, "                                }"], [286, "                                if (oos != null) {"], [287, "                                    try {"], [288, "                                        oos.close();"], [289, "                                    } catch (IOException ex) {"], [290, "                                        Logger.getLogger(CommandLineController.class.getName()).log(Level.SEVERE, null,"], [291, "                                                ex);"], [292, "                                    }"], [293, "                                }"], [294, "                            }"], [295, "                        }"], [298, "                        System.out"], [299, "                                .println(\"Commands: start, stop, status, server, edges <file>, vertices <file>, loadGraph <file>, saveGraph <file>\");"]]}, "num_lines_added": 190, "num_lines_removed": 162}