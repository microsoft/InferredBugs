{"hash": "2b050dbfc5a74dcbe33453c64255ceb5b166be13", "message": "Cleaned up testing code warnings", "file_num_lines": 419, "diff_parsed": {"added": [[23, "import com.google.common.collect.Sets;"], [40, "    @BeforeClass"], [41, "    public static void setup() throws IOException {"], [42, "        TDigestTest.setup(\"avl\");"], [43, "    }"], [45, "    private AvlDigestFactory factory = new AvlDigestFactory() {"], [47, "        public AVLTreeDigest create() {"], [159, "                        double base = 0;"], [161, "                        @Override"], [162, "                        public double nextDouble() {"], [163, "                            base += Math.PI * 1e-5;"], [164, "                            return base;"], [165, "                        }"], [166, "                    }, 100, new double[]{0.001, 0.01, 0.1, 0.5, 0.9, 0.99, 0.999},"], [337, "        runSizeControl(\"scaling-avl.tsv\", new AvlDigestFactory());"], [338, ""], [339, "    }"], [340, ""], [341, "    private void runSizeControl(String name, final DigestFactory<? extends TDigest> factory) throws FileNotFoundException, InterruptedException {"], [347, "        final PrintWriter out = new PrintWriter(new FileOutputStream(name));"], [350, "        ExecutorService pool = Executors.newFixedThreadPool(20);"], [351, ""], [352, "        Set<Future<String>> tasks = Sets.newHashSet();"], [353, "        for (final int size : new int[]{10000, 1000, 100, 10}) {"], [354, "            for (int k = 0; k < 20; k++) {"], [356, "                Callable<String> task = new Callable<String>() {"], [365, "                            TDigest dist = factory.create(compression);"], [373, "                        System.out.printf(\"Done with %d,%d\\n\", currentK, size);"], [376, "                };"], [377, ""], [378, "                tasks.add(pool.submit(task));"], [382, "        // this idiom allows us to abort if there are any exceptions"], [383, "        // using pool.invokeAll(...) would require us to wait for all tasks"], [384, "        try {"], [385, "            while (tasks.size() > 0) {"], [386, "                List<Future<String>> done = Lists.newArrayList();"], [387, "                for (Future<String> result : tasks) {"], [388, "                    if (result.isDone()) {"], [389, "                        done.add(result);"], [390, "                    }"], [391, "                }"], [392, "                tasks.removeAll(done);"], [393, "                Thread.sleep(100);"], [394, "            }"], [395, "        } finally {"], [396, "            pool.shutdownNow();"], [402, "    private static class AvlDigestFactory extends DigestFactory<AVLTreeDigest> {"], [403, "        @Override"], [404, "        public AVLTreeDigest create() {"], [405, "            return create(50);"], [406, "        }"], [407, ""], [408, "        @Override"], [409, "        public AVLTreeDigest create(double compression) {"], [410, "            return new AVLTreeDigest(compression);"], [411, "        }"], [412, "    }"], [413, ""]], "deleted": [[40, "    private DigestFactory<TDigest> factory = new DigestFactory<TDigest>() {"], [42, "        public TDigest create() {"], [52, "    @After"], [53, "    public void flush() {"], [54, "        sizeDump.flush();"], [55, "        errorDump.flush();"], [56, "        deviationDump.flush();"], [57, "    }"], [58, ""], [161, "                double base = 0;"], [163, "                @Override"], [164, "                public double nextDouble() {"], [165, "                    base += Math.PI * 1e-5;"], [166, "                    return base;"], [167, "                }"], [168, "            }, 100, new double[]{0.001, 0.01, 0.1, 0.5, 0.9, 0.99, 0.999},"], [344, "        final PrintWriter out = new PrintWriter(new FileOutputStream(\"scaling.tsv\"));"], [347, "        List<Callable<String>> tasks = Lists.newArrayList();"], [348, "        for (int k = 0; k < 20; k++) {"], [349, "            for (final int size : new int[]{10, 100, 1000, 10000}) {"], [351, "                tasks.add(new Callable<String>() {"], [360, "                            AVLTreeDigest dist = new AVLTreeDigest(compression);"], [370, "                });"], [374, "        for (Future<String> result : Executors.newFixedThreadPool(20).invokeAll(tasks)) {"], [375, "            out.write(result.get());"]]}, "num_lines_added": 58, "num_lines_removed": 25}