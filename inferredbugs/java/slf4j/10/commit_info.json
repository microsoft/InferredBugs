{"hash": "227f986525ce611069e7bf7f8cc300149002b9b2", "message": "fix SLF4J-361", "file_num_lines": 256, "diff_parsed": {"added": [[29, "import java.util.ArrayList;"], [35, "import java.util.concurrent.LinkedBlockingQueue;"], [85, "    static volatile int INITIALIZATION_STATE = UNINITIALIZED;"], [152, "            replayEvents();"], [184, "    private static void replayEvents() {"], [185, "        final LinkedBlockingQueue<SubstituteLoggingEvent> queue = SUBST_FACTORY.getEventQueue();"], [186, "        final int queueSize = queue.size();"], [187, "        int count = 0;"], [188, "        final int maxDrain = 128;"], [189, "        List<SubstituteLoggingEvent> eventList = new ArrayList<SubstituteLoggingEvent>(maxDrain);"], [190, "        while (true) {"], [191, "            int numDrained = queue.drainTo(eventList, maxDrain);"], [192, "            if (numDrained == 0)"], [194, "            for (SubstituteLoggingEvent event : eventList) {"], [195, "                replaySingleEvent(event);"], [196, "                if (count++ == 0)"], [197, "                    emitReplayOrSubstituionWarning(event, queueSize);"], [199, "            eventList.clear();"], [203, "    private static void emitReplayOrSubstituionWarning(SubstituteLoggingEvent event, int queueSize) {"], [204, "        if (event.getLogger().isDelegateEventAware()) {"], [205, "            emitReplayWarning(queueSize);"], [206, "        } else if (event.getLogger().isDelegateNOP()) {"], [207, "            // nothing to do"], [208, "        } else {"], [209, "            emitSubstitutionWarning();"], [210, "        }"], [211, "    }"], [213, "    private static void replaySingleEvent(SubstituteLoggingEvent event) {"], [214, "        if (event == null)"], [216, ""], [217, "        SubstituteLogger substLogger = event.getLogger();"], [218, "        String loggerName = substLogger.getName();"], [219, "        if (substLogger.isDelegateNull()) {"], [220, "            Logger logger = getLogger(loggerName);"], [221, "            substLogger.setDelegate(logger);"], [224, "        if (substLogger.isDelegateNOP()) {"], [225, "            // nothing to do"], [226, "        } else if (substLogger.isDelegateEventAware()) {"], [227, "            substLogger.log(event);"], [228, "        } else {"], [229, "            Util.report(loggerName);"]], "deleted": [[83, "    static int INITIALIZATION_STATE = UNINITIALIZED;"], [150, "            fixSubstitutedLoggers();"], [151, "            playRecordedEvents();"], [152, "            SUBST_FACTORY.clear();"], [184, "    private static void playRecordedEvents() {"], [185, "        List<SubstituteLoggingEvent> events = SUBST_FACTORY.getEventList();"], [186, ""], [187, "        if (events.isEmpty()) {"], [188, "            return;"], [189, "        }"], [190, ""], [191, "        for (int i = 0; i < events.size(); i++) {"], [192, "            SubstituteLoggingEvent event = events.get(i);"], [193, "            SubstituteLogger substLogger = event.getLogger();"], [194, "            if (substLogger.isDelegateNOP()) {"], [196, "            } else if (substLogger.isDelegateEventAware()) {"], [197, "                if (i == 0)"], [198, "                    emitReplayWarning(events.size());"], [199, "                substLogger.log(event);"], [200, "            } else {"], [201, "                if (i == 0)"], [202, "                    emitSubstitutionWarning();"], [203, "                Util.report(substLogger.getName());"], [208, "    private final static void fixSubstitutedLoggers() {"], [209, "        List<SubstituteLogger> loggers = SUBST_FACTORY.getLoggers();"], [211, "        if (loggers.isEmpty()) {"], [215, "        for (SubstituteLogger subLogger : loggers) {"], [216, "            Logger logger = getLogger(subLogger.getName());"], [217, "            subLogger.setDelegate(logger);"], [382, ""]]}, "num_lines_added": 41, "num_lines_removed": 30}