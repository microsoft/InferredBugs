{"hash": "7fb17286e326364240b69a3e80793849205f725c", "message": "Markers are now Serializable.\nThey do not need the MarkerFactory anymore.", "file_num_lines": 84, "diff_parsed": {"added": [[57, ""], [58, "  private static final long serialVersionUID = 1803952589649545191L;"], [59, ""], [63, "  BasicMarker(String name) {"], [130, "  /**"], [131, "   * This method is mainly used with Expression Evaluators."], [132, "   */"], [135, "      throw new IllegalArgumentException(\"Other cannot be null\");"], [137, ""], [138, "    if (this.name.equals(name)) {"], [139, "      return true;"], [141, ""], [142, "    if (hasChildren()) {"], [143, "      for(int i = 0; i < children.size(); i++) {"], [144, "        Marker child = (Marker) children.get(i);"], [145, "        if(child.contains(name)) {"], [146, "          return true;"], [147, "        }"], [148, "      }"], [149, "    }"], [150, ""], [151, "    return false;"]], "deleted": [[41, "import org.slf4j.IMarkerFactory;"], [60, "  final IMarkerFactory factory;"], [62, "  BasicMarker(String name, IMarkerFactory factory) {"], [64, "    this.factory = factory;"], [132, "      return false;"], [134, "    if(factory.exists(name)) {"], [135, "      Marker other = factory.getMarker(name);"], [136, "      return contains(other);"], [137, "    } else {"], [138, "      return false;"]]}, "num_lines_added": 22, "num_lines_removed": 10}