{"hash": "e45f59c73b2da5e18a6e5d69cd2ddaf03f834a73", "message": "Better Handling of Describe Stream Throttling\n\nImprove the handling of describe stream throttling by no longer\ntriggering a null pointer exception when all requests are throttled.\nAlso store the last position reached, and always restart from\nthere.", "file_num_lines": 263, "diff_parsed": {"added": [[26, "import lombok.Data;"], [65, "    private ShardIterationState shardIterationState = null;"], [168, "            throws ResourceNotFoundException, LimitExceededException {"], [174, ""], [175, "        LimitExceededException lastException = null;"], [176, ""], [179, "        while (response == null) {"], [190, "                lastException = le;"], [193, "            if (remainingRetryTimes <= 0 && response == null) {"], [194, "                if (lastException != null) {"], [195, "                    throw lastException;"], [196, "                }"], [197, "                throw new IllegalStateException(\"Received null from DescribeStream call.\");"], [198, "            }"], [235, "    public synchronized List<Shard> getShardList() {"], [237, "        DescribeStreamResult response;"], [238, "        if (shardIterationState == null) {"], [239, "            shardIterationState = new ShardIterationState();"], [240, "        }"], [243, "            response = getStreamInfo(shardIterationState.getLastShardId());"], [252, "                shardIterationState.update(response.getStreamDescription().getShards());"], [255, "        this.listOfShardsSinceLastGet.set(shardIterationState.getCollected());"], [256, ""], [257, "        return shardIterationState.getAndReset();"], [359, "    @Data"], [360, "    static class ShardIterationState {"], [361, ""], [362, "        private List<Shard> collected;"], [363, "        private String lastShardId;"], [364, ""], [365, "        public ShardIterationState() {"], [366, "            collected = new ArrayList<>();"], [367, "        }"], [368, ""], [369, "        public void update(List<Shard> shards) {"], [370, "            if (shards == null || shards.isEmpty()) {"], [371, "                return;"], [372, "            }"], [373, "            collected.addAll(shards);"], [374, "            Shard lastShard = shards.get(shards.size() - 1);"], [375, "            if (lastShardId == null || lastShardId.compareTo(lastShard.getShardId()) < 0) {"], [376, "                lastShardId = lastShard.getShardId();"], [377, "            }"], [378, "        }"], [379, ""], [380, "        public List<Shard> getAndReset() {"], [381, "            List<Shard> result = collected;"], [382, "            collected = new ArrayList<>();"], [383, "            lastShardId = null;"], [384, "            return result;"], [385, "        }"], [386, "    }"], [387, ""]], "deleted": [[166, "        throws ResourceNotFoundException, LimitExceededException {"], [174, "        while ((remainingRetryTimes >= 0) && (response == null)) {"], [223, "    public List<Shard> getShardList() {"], [224, "        List<Shard> result = new ArrayList<Shard>();"], [226, "        DescribeStreamResult response = null;"], [227, "        String lastShardId = null;"], [230, "            response = getStreamInfo(lastShardId);"], [239, "                List<Shard> shards = response.getStreamDescription().getShards();"], [240, "                result.addAll(shards);"], [241, "                lastShardId = shards.get(shards.size() - 1).getShardId();"], [244, "        this.listOfShardsSinceLastGet.set(result);"], [245, "        return result;"]]}, "num_lines_added": 53, "num_lines_removed": 12}