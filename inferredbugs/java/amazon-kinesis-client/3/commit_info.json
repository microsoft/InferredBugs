{"hash": "56c59f685ae0c0ec2daa0ee5355a602b8c1c9c9c", "message": "Allow Disabling Shard Sync at Startup (#102)\n\nAllow disabling the shard sync at startup if the lease table already\r\ncontains leases.  This will reduce the startup load for larger streams\r\nwhen restarted the Kinesis application.", "file_num_lines": 636, "diff_parsed": {"added": [[73, "    private final long parentShardPollIntervalMillis;"], [94, ""], [95, "    private final boolean skipShardSyncAtWorkerInitializationIfLeasesExist;"], [213, "                new V1ToV2RecordProcessorFactoryAdapter(recordProcessorFactory),"], [240, "                config.getSkipShardSyncAtWorkerInitializationIfLeasesExist(),"], [242, ""], [299, "            boolean skipShardSyncAtWorkerInitializationIfLeasesExist,"], [321, "        this.failoverTimeMillis = failoverTimeMillis;"], [322, "        this.skipShardSyncAtWorkerInitializationIfLeasesExist = skipShardSyncAtWorkerInitializationIfLeasesExist;"], [404, "                TaskResult result = null;"], [405, "                if (!skipShardSyncAtWorkerInitializationIfLeasesExist"], [406, "                        || leaseCoordinator.getLeaseManager().isLeaseTableEmpty()) {"], [407, "                    LOG.info(\"Syncing Kinesis shard info\");"], [408, "                    ShardSyncTask shardSyncTask ="], [409, "                            new ShardSyncTask(streamConfig.getStreamProxy(),"], [410, "                                    leaseCoordinator.getLeaseManager(),"], [411, "                                    initialPosition,"], [412, "                                    cleanupLeasesUponShardCompletion,"], [413, "                                    0L);"], [414, "                    result = new MetricsCollectingTaskDecorator(shardSyncTask, metricsFactory).call();"], [415, "                } else {"], [416, "                    LOG.info(\"Skipping shard sync per config setting (and lease table is not empty)\");"], [417, "                }"], [419, "                if (result == null || result.getException() == null) {"], [582, "                executorService, metricsFactory, taskBackoffTimeMillis, skipShardSyncAtWorkerInitializationIfLeasesExist);"], [1006, "                    config.getSkipShardSyncAtWorkerInitializationIfLeasesExist(),"], [1008, ""]], "deleted": [[73, "    private final long parentShardPollIntervalMillis;"], [211, "                new V1ToV2RecordProcessorFactoryAdapter(recordProcessorFactory),"], [316, "        this.failoverTimeMillis = failoverTimeMillis;"], [398, "                LOG.info(\"Syncing Kinesis shard info\");"], [399, "                ShardSyncTask shardSyncTask ="], [400, "                        new ShardSyncTask(streamConfig.getStreamProxy(),"], [401, "                                leaseCoordinator.getLeaseManager(),"], [402, "                                initialPosition,"], [403, "                                cleanupLeasesUponShardCompletion,"], [404, "                                0L);"], [405, "                TaskResult result = new MetricsCollectingTaskDecorator(shardSyncTask, metricsFactory).call();"], [407, "                if (result.getException() == null) {"], [570, "                executorService, metricsFactory, taskBackoffTimeMillis);"]]}, "num_lines_added": 27, "num_lines_removed": 13}