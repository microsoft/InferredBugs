{"hash": "6ea3c0f8ddef8ad0f99b1a9d3e787dc051e87ff8", "message": "Don't Use Checkpoint for Equality in ShardInfo\n\nDon't include checkpoint in hashCode/equality for ShardInfo, since it\nchanges. Checkpointing would cause the Worker to recreate the\nShardConsumer.  Add unit tests that verify the equality constraints.\n\nRemove the equality test for checkpoint from ShardInfoTests.  Nothing\nappears to rely on the checkpoint being part of ShardInfo.\n\nFix WorkerTest broken in overzealous simplification.", "file_num_lines": 625, "diff_parsed": {"added": [[49, "import com.google.common.annotations.VisibleForTesting;"], [345, "            runProcessLoop();"], [346, "        }"], [347, ""], [348, "        finalShutdown();"], [349, "        LOG.info(\"Worker loop is complete. Exiting from worker.\");"], [350, "    }"], [352, "    @VisibleForTesting"], [353, "    void runProcessLoop() {"], [354, "        try {"], [355, "            boolean foundCompletedShard = false;"], [356, "            Set<ShardInfo> assignedShards = new HashSet<>();"], [357, "            for (ShardInfo shardInfo : getShardInfoForAssignments()) {"], [358, "                ShardConsumer shardConsumer = createOrGetShardConsumer(shardInfo, recordProcessorFactory);"], [359, "                if (shardConsumer.isShutdown() && shardConsumer.getShutdownReason().equals(ShutdownReason.TERMINATE)) {"], [360, "                    foundCompletedShard = true;"], [361, "                } else {"], [362, "                    shardConsumer.consumeShard();"], [364, "                assignedShards.add(shardInfo);"], [365, "            }"], [367, "            if (foundCompletedShard) {"], [368, "                controlServer.syncShardAndLeaseInfo(null);"], [369, "            }"], [370, ""], [371, "            // clean up shard consumers for unassigned shards"], [372, "            cleanupShardConsumers(assignedShards);"], [374, "            wlog.info(\"Sleeping ...\");"], [375, "            Thread.sleep(idleTimeInMilliseconds);"], [376, "        } catch (Exception e) {"], [377, "            LOG.error(String.format(\"Worker.run caught exception, sleeping for %s milli seconds!\","], [378, "                    String.valueOf(idleTimeInMilliseconds)), e);"], [379, "            try {"], [381, "            } catch (InterruptedException ex) {"], [382, "                LOG.info(\"Worker: sleep interrupted after catching exception \", ex);"], [385, "        wlog.resetInfoLogging();"], [558, "            consumer = buildConsumer(shardInfo, factory);"], [565, "    protected ShardConsumer buildConsumer(ShardInfo shardInfo, IRecordProcessorFactory factory) {"], [566, "        IRecordProcessor recordProcessor = factory.createProcessor();"], [567, ""], [568, "        return new ShardConsumer(shardInfo, streamConfig, checkpointTracker, recordProcessor,"], [569, "                leaseCoordinator.getLeaseManager(), parentShardPollIntervalMillis, cleanupLeasesUponShardCompletion,"], [570, "                executorService, metricsFactory, taskBackoffTimeMillis);"], [571, ""], [572, "    }"], [573, ""]], "deleted": [[41, "import com.amazonaws.services.kinesis.clientlibrary.lib.worker.Worker.Builder;"], [345, "            try {"], [346, "                boolean foundCompletedShard = false;"], [347, "                Set<ShardInfo> assignedShards = new HashSet<ShardInfo>();"], [348, "                for (ShardInfo shardInfo : getShardInfoForAssignments()) {"], [349, "                    ShardConsumer shardConsumer = createOrGetShardConsumer(shardInfo, recordProcessorFactory);"], [350, "                    if (shardConsumer.isShutdown()"], [351, "                            && shardConsumer.getShutdownReason().equals(ShutdownReason.TERMINATE)) {"], [352, "                        foundCompletedShard = true;"], [353, "                    } else {"], [354, "                        shardConsumer.consumeShard();"], [355, "                    }"], [356, "                    assignedShards.add(shardInfo);"], [357, "                }"], [359, "                if (foundCompletedShard) {"], [360, "                    controlServer.syncShardAndLeaseInfo(null);"], [363, "                // clean up shard consumers for unassigned shards"], [364, "                cleanupShardConsumers(assignedShards);"], [366, "                wlog.info(\"Sleeping ...\");"], [368, "            } catch (Exception e) {"], [369, "                LOG.error(String.format(\"Worker.run caught exception, sleeping for %s milli seconds!\","], [370, "                        String.valueOf(idleTimeInMilliseconds)),"], [371, "                        e);"], [372, "                try {"], [373, "                    Thread.sleep(idleTimeInMilliseconds);"], [374, "                } catch (InterruptedException ex) {"], [375, "                    LOG.info(\"Worker: sleep interrupted after catching exception \", ex);"], [376, "                }"], [378, "            wlog.resetInfoLogging();"], [380, ""], [381, "        finalShutdown();"], [382, "        LOG.info(\"Worker loop is complete. Exiting from worker.\");"], [555, "            IRecordProcessor recordProcessor = factory.createProcessor();"], [556, ""], [557, "            consumer ="], [558, "                    new ShardConsumer(shardInfo,"], [559, "                           streamConfig,"], [560, "                           checkpointTracker,"], [561, "                           recordProcessor,"], [562, "                           leaseCoordinator.getLeaseManager(),"], [563, "                           parentShardPollIntervalMillis,"], [564, "                           cleanupLeasesUponShardCompletion,"], [565, "                           executorService,"], [566, "                           metricsFactory,"], [567, "                           taskBackoffTimeMillis);"]]}, "num_lines_added": 45, "num_lines_removed": 45}