{"hash": "2d70002258413f1145de2184782f71ec374d00da", "message": "Fixing bug in PrefetchRecordsPublisher which was causing retry storms if initial requests fail due to no wait time between get calls.", "file_num_lines": 581, "diff_parsed": {"added": [[35, "import static org.mockito.Mockito.reset;"], [80, "import software.amazon.awssdk.core.exception.SdkException;"], [203, "        ProcessRecordsInput result = blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache,"], [204, "                \"shardId\"), 1000L)"], [214, "    @Test(expected = RuntimeException.class)"], [215, "    public void testGetRecordsWithInitialFailures_LessThanRequiredWait_Throws() {"], [216, "        // Create a new PrefetchRecordsPublisher with 1s idle time between get calls"], [217, "        getRecordsCache = new PrefetchRecordsPublisher("], [218, "                MAX_SIZE,"], [219, "                3 * SIZE_1_MB,"], [220, "                MAX_RECORDS_COUNT,"], [221, "                MAX_RECORDS_PER_CALL,"], [222, "                getRecordsRetrievalStrategy,"], [223, "                executorService,"], [224, "                1000,"], [225, "                new NullMetricsFactory(),"], [226, "                operation,"], [227, "                \"shardId\");"], [228, "        // Setup the retrieval strategy to fail initial calls before succeeding"], [229, "        when(getRecordsRetrievalStrategy.getRecords(eq(MAX_RECORDS_PER_CALL))).thenThrow(new"], [230, "                RetryableRetrievalException(\"Timed out\")).thenThrow(new"], [231, "                RetryableRetrievalException(\"Timed out again\")).thenReturn(getRecordsResponse);"], [232, "        record = Record.builder().data(createByteBufferWithSize(SIZE_512_KB)).build();"], [233, ""], [234, "        when(records.size()).thenReturn(1000);"], [235, ""], [236, "        final List<KinesisClientRecord> expectedRecords = records.stream()"], [237, "                .map(KinesisClientRecord::fromRecord).collect(Collectors.toList());"], [238, ""], [239, "        getRecordsCache.start(sequenceNumber, initialPosition);"], [240, "        ProcessRecordsInput result = null;"], [241, "        // Setup timeout to be less than what the PrefetchRecordsPublisher will need based on the idle time between"], [242, "        // get calls to validate exception is thrown"], [243, "        result = blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache,"], [244, "                \"shardId\"), 1000L)"], [245, "                .processRecordsInput();"], [246, "    }"], [247, ""], [248, "    @Test"], [249, "    public void testGetRecordsWithInitialFailures_AdequateWait_Success() {"], [250, "        // Create a new PrefetchRecordsPublisher with 1s idle time between get calls"], [251, "        getRecordsCache = new PrefetchRecordsPublisher("], [252, "                MAX_SIZE,"], [253, "                3 * SIZE_1_MB,"], [254, "                MAX_RECORDS_COUNT,"], [255, "                MAX_RECORDS_PER_CALL,"], [256, "                getRecordsRetrievalStrategy,"], [257, "                executorService,"], [258, "                1000,"], [259, "                new NullMetricsFactory(),"], [260, "                operation,"], [261, "                \"shardId\");"], [262, "        // Setup the retrieval strategy to fail initial calls before succeeding"], [263, "        when(getRecordsRetrievalStrategy.getRecords(eq(MAX_RECORDS_PER_CALL))).thenThrow(new"], [264, "                RetryableRetrievalException(\"Timed out\")).thenThrow(new"], [265, "                RetryableRetrievalException(\"Timed out again\")).thenReturn(getRecordsResponse);"], [266, "        record = Record.builder().data(createByteBufferWithSize(SIZE_512_KB)).build();"], [267, ""], [268, "        when(records.size()).thenReturn(1000);"], [269, ""], [270, "        final List<KinesisClientRecord> expectedRecords = records.stream()"], [271, "                .map(KinesisClientRecord::fromRecord).collect(Collectors.toList());"], [272, ""], [273, "        getRecordsCache.start(sequenceNumber, initialPosition);"], [274, "        ProcessRecordsInput result = null;"], [275, "        // Setup timeout to be more than what the PrefetchRecordsPublisher will need based on the idle time between"], [276, "        // get calls and then validate the mocks later"], [277, "        result = blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache,"], [278, "                \"shardId\"), 4000L)"], [279, "                .processRecordsInput();"], [280, ""], [281, "        assertEquals(expectedRecords, result.records());"], [282, "        assertEquals(new ArrayList<>(), result.childShards());"], [283, ""], [284, "        verify(executorService).execute(any());"], [285, "        // Validate at least 3 calls were including the 2 failed ones"], [286, "        verify(getRecordsRetrievalStrategy, atLeast(3)).getRecords(eq(MAX_RECORDS_PER_CALL));"], [287, "    }"], [288, ""], [319, "                .shardId(\"shardId-000000000001\")"], [320, "                .parentShards(parentShards)"], [321, "                .hashKeyRange(ShardObjectHelper.newHashKeyRange(\"0\", \"49\"))"], [322, "                .build();"], [324, "                .shardId(\"shardId-000000000002\")"], [325, "                .parentShards(parentShards)"], [326, "                .hashKeyRange(ShardObjectHelper.newHashKeyRange(\"50\", \"99\"))"], [327, "                .build();"], [373, "        //        TODO: fix this verification"], [374, "        //        verify(getRecordsRetrievalStrategy, times(callRate)).getRecords(MAX_RECORDS_PER_CALL);"], [375, "        //        assertEquals(spyQueue.size(), callRate);"], [491, ""]], "deleted": [[201, "        ProcessRecordsInput result = blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache, \"shardId\"), 1000L)"], [241, "                                         .shardId(\"shardId-000000000001\")"], [242, "                                         .parentShards(parentShards)"], [243, "                                         .hashKeyRange(ShardObjectHelper.newHashKeyRange(\"0\", \"49\"))"], [244, "                                         .build();"], [246, "                                          .shardId(\"shardId-000000000002\")"], [247, "                                          .parentShards(parentShards)"], [248, "                                          .hashKeyRange(ShardObjectHelper.newHashKeyRange(\"50\", \"99\"))"], [249, "                                          .build();"], [295, "//        TODO: fix this verification"], [296, "//        verify(getRecordsRetrievalStrategy, times(callRate)).getRecords(MAX_RECORDS_PER_CALL);"], [297, "//        assertEquals(spyQueue.size(), callRate);"], [413, ""]]}, "num_lines_added": 91, "num_lines_removed": 13}