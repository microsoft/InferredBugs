{"hash": "5221e1cd5451abfbcf9a13bb91f34b9aab5a22d7", "message": "Fixing unit tests", "file_num_lines": 586, "diff_parsed": {"added": [[128, "        verify(shardConsumer).handleInput(any(ProcessRecordsInput.class), any(Subscription.class));"], [142, "        verify(shardConsumer, times(100)).handleInput(any(ProcessRecordsInput.class), any(Subscription.class));"], [177, "        verify(shardConsumer, times(20)).handleInput(any(ProcessRecordsInput.class), any(Subscription.class));"], [202, "        verify(shardConsumer, times(10)).handleInput(any(ProcessRecordsInput.class), any(Subscription.class));"], [238, "        verify(shardConsumer, times(20)).handleInput(any(ProcessRecordsInput.class), any(Subscription.class));"], [302, "        verify(shardConsumer, times(100)).handleInput(any(ProcessRecordsInput.class), any(Subscription.class));"], [341, "        verify(shardConsumer, never()).handleInput(any(ProcessRecordsInput.class), any(Subscription.class));"], [357, "        verify(shardConsumer, times(100)).handleInput(any(ProcessRecordsInput.class), any(Subscription.class));"], [401, "        verify(shardConsumer, never()).handleInput(any(ProcessRecordsInput.class), any(Subscription.class));"], [417, "        verify(shardConsumer, times(100)).handleInput(any(ProcessRecordsInput.class), any(Subscription.class));"]], "deleted": [[22, "import static org.mockito.Matchers.argThat;"], [129, "        verify(shardConsumer).handleInput(argThat(eqProcessRecordsInput(processRecordsInput)), any(Subscription.class));"], [143, "        verify(shardConsumer, times(100)).handleInput(argThat(eqProcessRecordsInput(processRecordsInput)),"], [144, "                any(Subscription.class));"], [179, "        verify(shardConsumer, times(20)).handleInput(argThat(eqProcessRecordsInput(processRecordsInput)),"], [180, "                any(Subscription.class));"], [205, "        verify(shardConsumer, times(10)).handleInput(argThat(eqProcessRecordsInput(processRecordsInput)),"], [206, "                any(Subscription.class));"], [242, "        verify(shardConsumer, times(20)).handleInput(argThat(eqProcessRecordsInput(processRecordsInput)),"], [243, "                any(Subscription.class));"], [307, "        verify(shardConsumer, times(100)).handleInput(argThat(eqProcessRecordsInput(processRecordsInput)),"], [308, "                any(Subscription.class));"], [328, "        log.info(\"recordsPublisher and subscriber is created successfully.\");"], [332, "            log.info(\"Handling input for: {}\", input.toString());"], [349, "        verify(shardConsumer, never()).handleInput(argThat(eqProcessRecordsInput(processRecordsInput)),"], [350, "                any(Subscription.class));"], [351, "        log.info(\"Verified no records were sent back and subscription has not started correctly\");"], [359, "        log.info(\"Health check was successful without exceptions\");"], [368, "        verify(shardConsumer, times(100)).handleInput(any(ProcessRecordsInput.class),"], [369, "                any(Subscription.class));"], [370, "        log.info(\"Verified that handleInput was called 100 times\");"], [414, "        verify(shardConsumer, never()).handleInput(argThat(eqProcessRecordsInput(processRecordsInput)),"], [415, "                any(Subscription.class));"], [431, "        verify(shardConsumer, times(100)).handleInput(argThat(eqProcessRecordsInput(processRecordsInput)),"], [432, "                any(Subscription.class));"]]}, "num_lines_added": 10, "num_lines_removed": 25}