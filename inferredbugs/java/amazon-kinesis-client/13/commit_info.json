{"hash": "3fead19df7f28afb355062e48818609692d25627", "message": "Fix to prevent the onNext event going to stale subscription when restart happens in poller (#606)\n\n* Fix to prevent the onNext event going to stale subscription when restart happens in poller\r\n\r\n* Isolating session variables into a new class. Replacing thread control shifting logic for publishing with monitor based control\r\n\r\n* Refactoring based on review comments\r\n\r\n* Addressing review comments on unit test cases", "file_num_lines": 435, "diff_parsed": {"added": [[21, "import static org.junit.Assert.assertFalse;"], [57, "import com.google.common.annotations.VisibleForTesting;"], [135, "        spyQueue = spy(getRecordsCache.getPublisherSession().prefetchRecordsQueue());"], [152, "        ProcessRecordsInput result = blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache, \"shardId\"), 1000L)"], [222, "        ProcessRecordsInput processRecordsInput = evictPublishedEvent(getRecordsCache, \"shardId\").processRecordsInput();"], [231, "        ProcessRecordsInput processRecordsInput2 = evictPublishedEvent(getRecordsCache, \"shardId\").processRecordsInput();"], [242, "        getRecordsCache.drainQueueForRequests();"], [248, "        getRecordsCache.drainQueueForRequests();"], [261, "        blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache, \"shardId\"), 1000L);"], [276, "        RecordsRetrieved records = blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache, \"shardId\"), 1000);"], [280, "    @Test(timeout = 10000L)"], [290, "        final int[] sequenceNumberInResponse = { 0 };"], [291, ""], [292, "        when(getRecordsRetrievalStrategy.getRecords(anyInt())).thenAnswer( i -> GetRecordsResponse.builder().records("], [293, "                Record.builder().data(SdkBytes.fromByteArray(new byte[] { 1, 2, 3 })).sequenceNumber(++sequenceNumberInResponse[0] + \"\").build())"], [294, "                .build());"], [302, "        while (getRecordsCache.getPublisherSession().prefetchRecordsQueue().size() < MAX_SIZE) {"], [306, "        log.info(\"Queue is currently at {} starting subscriber\", getRecordsCache.getPublisherSession().prefetchRecordsQueue().size());"], [308, ""], [313, "        final boolean[] isRecordNotInorder = { false };"], [314, "        final String[] recordNotInOrderMessage = { \"\" };"], [315, ""], [318, "            int receivedSeqNum = 0;"], [329, "                if (Integer.parseInt(((PrefetchRecordsPublisher.PrefetchRecordsRetrieved) recordsRetrieved)"], [330, "                        .lastBatchSequenceNumber()) != ++receivedSeqNum) {"], [331, "                    isRecordNotInorder[0] = true;"], [332, "                    recordNotInOrderMessage[0] = \"Expected : \" + receivedSeqNum + \" Actual : \""], [333, "                            + ((PrefetchRecordsPublisher.PrefetchRecordsRetrieved) recordsRetrieved)"], [334, "                            .lastBatchSequenceNumber();"], [335, "                }"], [373, "        assertFalse(recordNotInOrderMessage[0], isRecordNotInorder[0]);"], [376, "    @Test(timeout = 10000L)"], [394, "        while (getRecordsCache.getPublisherSession().prefetchRecordsQueue().size() < MAX_SIZE) {"], [398, "        log.info(\"Queue is currently at {} starting subscriber\", getRecordsCache.getPublisherSession().prefetchRecordsQueue().size());"], [400, ""], [477, "        RecordsRetrieved lastProcessed = blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache, \"shardId\"), 1000);"], [478, "        RecordsRetrieved expected = blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache, \"shardId\"), 1000);"], [483, "        blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache, \"shardId\"), 1000);"], [484, "        blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache, \"shardId\"), 1000);"], [488, "        while(getRecordsCache.getPublisherSession().prefetchRecordsQueue().remainingCapacity() > 0) {"], [493, "        RecordsRetrieved postRestart = blockUntilRecordsAvailable(() -> evictPublishedEvent(getRecordsCache, \"shardId\"), 1000);"], [501, "    private RecordsRetrieved evictPublishedEvent(PrefetchRecordsPublisher publisher, String shardId) {"], [502, "        return publisher.getPublisherSession().evictPublishedRecordAndUpdateDemand(shardId);"], [503, "    }"], [504, ""]], "deleted": [[56, "import io.reactivex.plugins.RxJavaPlugins;"], [134, "        spyQueue = spy(getRecordsCache.getRecordsResultQueue);"], [151, "        ProcessRecordsInput result = blockUntilRecordsAvailable(getRecordsCache::pollNextResultAndUpdatePrefetchCounters, 1000L)"], [221, "        ProcessRecordsInput processRecordsInput = getRecordsCache.pollNextResultAndUpdatePrefetchCounters().processRecordsInput();"], [230, "        ProcessRecordsInput processRecordsInput2 = getRecordsCache.pollNextResultAndUpdatePrefetchCounters().processRecordsInput();"], [241, "        getRecordsCache.pollNextResultAndUpdatePrefetchCounters();"], [247, "        getRecordsCache.pollNextResultAndUpdatePrefetchCounters();"], [260, "        blockUntilRecordsAvailable(() -> getRecordsCache.pollNextResultAndUpdatePrefetchCounters(), 1000L);"], [275, "        RecordsRetrieved records = blockUntilRecordsAvailable(getRecordsCache::pollNextResultAndUpdatePrefetchCounters, 1000);"], [279, "    @Test(timeout = 20000L)"], [288, "        GetRecordsResponse response = GetRecordsResponse.builder().records("], [289, "                Record.builder().data(SdkBytes.fromByteArray(new byte[] { 1, 2, 3 })).sequenceNumber(\"123\").build())"], [290, "                .build();"], [291, "        when(getRecordsRetrievalStrategy.getRecords(anyInt())).thenReturn(response);"], [293, "        RxJavaPlugins.setErrorHandler(e -> e.printStackTrace());"], [301, "        while (getRecordsCache.getRecordsResultQueue.size() < MAX_SIZE) {"], [305, "        log.info(\"Queue is currently at {} starting subscriber\", getRecordsCache.getRecordsResultQueue.size());"], [362, "    @Test(timeout = 20000L)"], [380, "        while (getRecordsCache.getRecordsResultQueue.size() < MAX_SIZE) {"], [384, "        log.info(\"Queue is currently at {} starting subscriber\", getRecordsCache.getRecordsResultQueue.size());"], [462, "        RecordsRetrieved lastProcessed = blockUntilRecordsAvailable(getRecordsCache::pollNextResultAndUpdatePrefetchCounters, 1000);"], [463, "        RecordsRetrieved expected = blockUntilRecordsAvailable(getRecordsCache::pollNextResultAndUpdatePrefetchCounters, 1000);"], [468, "        blockUntilRecordsAvailable(getRecordsCache::pollNextResultAndUpdatePrefetchCounters, 1000);"], [469, "        blockUntilRecordsAvailable(getRecordsCache::pollNextResultAndUpdatePrefetchCounters, 1000);"], [473, "        while(getRecordsCache.getRecordsResultQueue.remainingCapacity() > 0) {"], [478, "        RecordsRetrieved postRestart = blockUntilRecordsAvailable(getRecordsCache::pollNextResultAndUpdatePrefetchCounters, 1000);"]]}, "num_lines_added": 45, "num_lines_removed": 26}