{"hash": "a88fdf643eeeb82b2bcba99a6a35fc3d9b26af52", "message": "Updating tests to use current API and a fix for #91", "file_num_lines": 580, "diff_parsed": {"added": [[9, "import org.apache.poi.ss.usermodel.Workbook;"], [27, "import static org.apache.poi.ss.usermodel.CellType.BOOLEAN;"], [28, "import static org.apache.poi.ss.usermodel.CellType.NUMERIC;"], [29, "import static org.apache.poi.ss.usermodel.CellType.STRING;"], [30, "import static org.apache.poi.ss.usermodel.Row.MissingCellPolicy.CREATE_NULL_AS_BLANK;"], [31, "import static org.apache.poi.ss.usermodel.Row.MissingCellPolicy.RETURN_BLANK_AS_NULL;"], [54, "        Workbook wb = StreamingReader.builder().open(is);"], [59, "      for(Row r : wb.getSheetAt(0)) {"], [72, "      assertEquals(STRING, row.get(0).getCellTypeEnum());"], [73, "      assertEquals(STRING, row.get(1).getCellTypeEnum());"], [81, "      assertEquals(STRING, row.get(0).getCellTypeEnum());"], [82, "      assertEquals(STRING, row.get(1).getCellTypeEnum());"], [90, "      assertEquals(STRING, row.get(0).getCellTypeEnum());"], [91, "      assertEquals(NUMERIC, row.get(1).getCellTypeEnum());"], [98, "      assertEquals(STRING, row.get(0).getCellTypeEnum());"], [99, "      assertEquals(NUMERIC, row.get(1).getCellTypeEnum());"], [106, "      assertEquals(STRING, row.get(0).getCellTypeEnum());"], [107, "      assertEquals(NUMERIC, row.get(1).getCellTypeEnum());"], [115, "      assertEquals(STRING, row.get(0).getCellTypeEnum());"], [116, "      assertEquals(STRING, row.get(1).getCellTypeEnum());"], [117, "      assertEquals(STRING, row.get(2).getCellTypeEnum());"], [118, "      assertEquals(STRING, row.get(3).getCellTypeEnum());"], [119, "      assertEquals(STRING, row.get(4).getCellTypeEnum());"], [120, "      assertEquals(STRING, row.get(5).getCellTypeEnum());"], [121, "      assertEquals(STRING, row.get(6).getCellTypeEnum());"], [139, "      assertEquals(STRING, row.get(0).getCellTypeEnum());"], [140, "      assertEquals(BOOLEAN, row.get(1).getCellTypeEnum());"], [141, "      assertEquals(BOOLEAN, row.get(2).getCellTypeEnum());"], [153, "        Workbook wb = StreamingReader.builder().open(is);"], [158, "      for(Row r : wb.getSheetAt(0)) {"], [169, "      cal.setTime(dt);"], [178, ""], [183, "        Workbook wb = StreamingReader.builder().open(is);"], [188, "      for(Row r : wb.getSheetAt(0)) {"], [199, "      cal.setTime(dt);"], [213, "        Workbook wb = StreamingReader.builder().open(is);"], [218, "      for(Row r : wb.getSheetAt(0)) {"], [236, "        Workbook wb = StreamingReader.builder().open(is);"], [240, "      for(Row r : wb.getSheetAt(0)) {"], [253, "      assertEquals(STRING, row.get(0).getCellTypeEnum());"], [254, "      assertEquals(STRING, row.get(1).getCellTypeEnum());"], [266, "      assertEquals(STRING, row.get(0).getCellTypeEnum());"], [267, "      assertEquals(STRING, row.get(1).getCellTypeEnum());"], [283, "        Workbook wb = StreamingReader.builder().open(is);"], [287, "      for(Row r : wb.getSheetAt(0)) {"], [309, "        Workbook wb = StreamingReader.builder().open(is);"], [314, "      for(Row r : wb.getSheetAt(1)) {"], [336, "        Workbook wb = StreamingReader.builder().open(is);"], [341, "      for(Row r : wb.getSheet(\"SheetZulu\")) {"], [363, "        Workbook wb = StreamingReader.builder().open(is);"], [367, "      for(Row r : wb.getSheet(\"SheetAlpha\")) {"], [389, "        Workbook wb = StreamingReader.builder().open(is);"], [391, "      wb.getSheet(\"asdfasdfasdf\");"], [399, "    try(Workbook wb = StreamingReader.builder().open(f)) {"], [400, "      wb.getSheet(\"asdfasdfasdf\");"], [411, "        Workbook wb = StreamingReader.builder()"], [413, "            .open(f)) {"], [415, "      for(Row r : wb.getSheetAt(0)) {"], [428, "    try(Workbook wb = StreamingReader.builder().open(f)) {"], [429, "      Iterator<Row> iter = wb.getSheetAt(0).iterator();"], [435, "      assertEquals(NUMERIC, r1.getCell(0).getCellTypeEnum());"], [441, "      assertEquals(STRING, r2.getCell(0).getCellTypeEnum());"], [449, "    try(Workbook wb = StreamingReader.builder().open(f)) {"], [450, "      Iterator<Row> iter = wb.getSheetAt(0).iterator();"], [460, "    try(Workbook wb = StreamingReader.builder().open(f)) {"], [461, "      for(Row row : wb.getSheetAt(0)) {"], [498, "    try(Workbook wb = StreamingReader.builder().open(f)) {"], [499, "      Row row = wb.getSheetAt(0).iterator().next();"], [510, "    try(Workbook wb = StreamingReader.builder().open(f)) {"], [511, "      Row row = wb.getSheetAt(0).iterator().next();"], [520, "        Workbook wb = StreamingReader.builder().open(is)) {"], [521, "      for(Row r : wb.getSheetAt(0)) {"], [533, "        Workbook wb = StreamingReader.builder().password(\"test\").open(is)) {"], [535, "      for(Row r : wb.getSheetAt(0)) {"], [549, "        Workbook wb = StreamingReader.builder().open(is);"], [551, "      for(Row r : wb.getSheetAt(0)) {"], [564, "        Workbook wb = StreamingReader.builder().open(is);"], [566, "      for(Row r : wb.getSheetAt(0)) {"], [569, "            assertEquals(NUMERIC, cell.getCellTypeEnum());"], [581, "        Workbook wb = StreamingReader.builder().open(is);"], [583, "      Row row = wb.getSheetAt(0).iterator().next();"], [624, "        Workbook wb = StreamingReader.builder().open(is);"], [626, "      Iterator<Row> iterator = wb.getSheetAt(0).iterator();"], [633, "  @Test"], [634, "  public void testShouldReturnNullForMissingCellPolicy_RETURN_BLANK_AS_NULL() throws Exception {"], [635, "    try("], [636, "        InputStream is = new FileInputStream(new File(\"src/test/resources/blank_cells.xlsx\"));"], [637, "        Workbook wb = StreamingReader.builder().open(is);"], [638, "    ) {"], [639, "      Row row = wb.getSheetAt(0).iterator().next();"], [640, "      assertNotNull(row.getCell(0, RETURN_BLANK_AS_NULL)); //Remain unchanged"], [641, "      assertNull(row.getCell(1, RETURN_BLANK_AS_NULL));"], [642, "    }"], [643, "  }"], [644, ""], [645, "  @Test"], [646, "  public void testShouldReturnBlankForMissingCellPolicy_CREATE_NULL_AS_BLANK() throws Exception {"], [647, "    try("], [648, "        InputStream is = new FileInputStream(new File(\"src/test/resources/null_cell.xlsx\"));"], [649, "        Workbook wb = StreamingReader.builder().open(is);"], [650, "    ) {"], [651, "      Row row = wb.getSheetAt(0).iterator().next();"], [652, "      assertEquals(\"B1 is Null ->\", row.getCell(0, CREATE_NULL_AS_BLANK).getStringCellValue()); //Remain unchanged"], [653, "      assertEquals(\"B1 is Null ->\", row.getCell(0, CREATE_NULL_AS_BLANK).getRichStringCellValue().getString()); //Remain unchanged"], [654, "      assertThat(row.getCell(1), is(nullValue()));"], [655, "      assertNotNull(row.getCell(1, CREATE_NULL_AS_BLANK));"], [656, "    }"], [657, "  }"]], "deleted": [[48, "        StreamingReader reader = StreamingReader.builder().read(is);"], [53, "      for(Row r : reader) {"], [66, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(0).getCellType());"], [67, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(1).getCellType());"], [75, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(0).getCellType());"], [76, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(1).getCellType());"], [84, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(0).getCellType());"], [85, "      assertEquals(Cell.CELL_TYPE_NUMERIC, row.get(1).getCellType());"], [92, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(0).getCellType());"], [93, "      assertEquals(Cell.CELL_TYPE_NUMERIC, row.get(1).getCellType());"], [100, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(0).getCellType());"], [101, "      assertEquals(Cell.CELL_TYPE_NUMERIC, row.get(1).getCellType());"], [109, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(0).getCellType());"], [110, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(1).getCellType());"], [111, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(2).getCellType());"], [112, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(3).getCellType());"], [113, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(4).getCellType());"], [114, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(5).getCellType());"], [115, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(6).getCellType());"], [133, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(0).getCellType());"], [134, "      assertEquals(Cell.CELL_TYPE_BOOLEAN, row.get(1).getCellType());"], [135, "      assertEquals(Cell.CELL_TYPE_BOOLEAN, row.get(2).getCellType());"], [147, "        StreamingReader reader = StreamingReader.builder().read(is);"], [152, "      for(Row r : reader) {"], [163, "      cal.setTime(dt );"], [176, "        StreamingReader reader = StreamingReader.builder().read(is);"], [181, "      for(Row r : reader) {"], [192, "      cal.setTime(dt );"], [206, "        StreamingReader reader = StreamingReader.builder().read(is);"], [211, "      for(Row r : reader) {"], [229, "        StreamingReader reader = StreamingReader.builder().read(is);"], [233, "      for(Row r : reader) {"], [246, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(0).getCellType());"], [247, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(1).getCellType());"], [259, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(0).getCellType());"], [260, "      assertEquals(Cell.CELL_TYPE_STRING, row.get(1).getCellType());"], [276, "        StreamingReader reader = StreamingReader.builder()"], [277, "            .sheetIndex(0)"], [278, "            .read(is);"], [282, "      for(Row r : reader) {"], [304, "        StreamingReader reader = StreamingReader.builder()"], [305, "            .sheetIndex(1)"], [306, "            .read(is);"], [311, "      for(Row r : reader) {"], [333, "        StreamingReader reader = StreamingReader.builder()"], [334, "            .sheetName(\"SheetZulu\")"], [335, "            .read(is);"], [340, "      for(Row r : reader) {"], [362, "        StreamingReader reader = StreamingReader.builder()"], [363, "            .sheetName(\"SheetAlpha\")"], [364, "            .read(is);"], [368, "      for(Row r : reader) {"], [390, "        StreamingReader reader = StreamingReader.builder()"], [391, "            .sheetName(\"adsfasdfasdfasdf\")"], [392, "            .read(is);"], [401, "    try("], [402, "        StreamingReader reader = StreamingReader.builder()"], [403, "            .sheetName(\"adsfasdfasdfasdf\")"], [404, "            .read(f);"], [405, "    ) {"], [416, "        StreamingReader reader = StreamingReader.builder()"], [418, "            .read(f)) {"], [420, "      for(Row r : reader) {"], [433, "    try(StreamingReader reader = StreamingReader.builder().read(f)) {"], [434, "      Iterator<Row> iter = reader.iterator();"], [440, "      assertEquals(Cell.CELL_TYPE_NUMERIC, r1.getCell(0).getCellType());"], [446, "      assertEquals(Cell.CELL_TYPE_STRING, r2.getCell(0).getCellType());"], [454, "    try(StreamingReader reader = StreamingReader.builder().read(f)) {"], [455, "      Iterator<Row> iter = reader.iterator();"], [465, "    try(StreamingReader reader = StreamingReader.builder().read(f)) {"], [466, "      for(Row row : reader) {"], [503, "    try(StreamingReader reader = StreamingReader.builder().read(f)) {"], [504, "      Row row = reader.iterator().next();"], [515, "    try(StreamingReader reader = StreamingReader.builder().read(f)) {"], [516, "      Row row = reader.iterator().next();"], [525, "        StreamingReader reader = StreamingReader.builder().read(is);) {"], [526, "      for(Row r : reader) {"], [538, "        StreamingReader reader = StreamingReader.builder().password(\"test\").read(is);) {"], [540, "      for(Row r : reader) {"], [554, "        StreamingReader reader = StreamingReader.builder().read(is);"], [556, "      for(Row r : reader) {"], [569, "        StreamingReader reader = StreamingReader.builder().read(is);"], [571, "      for(Row r : reader) {"], [574, "            assertEquals(0, cell.getCellType());"], [586, "        StreamingReader reader = StreamingReader.builder().read(is);"], [588, "      Row row = reader.iterator().next();"], [629, "        StreamingReader reader = StreamingReader.builder().read(is);"], [631, "      Iterator<Row> iterator = reader.iterator();"], [638, "\t@Test"], [639, "\tpublic void testShouldReturnNullForMissingCellPolicy_RETURN_BLANK_AS_NULL() throws Exception {"], [640, "  \t  try ("], [641, "\t    InputStream is = new FileInputStream(new File(\"src/test/resources/blank_cells.xlsx\"));"], [642, "\t\tStreamingReader reader = StreamingReader.builder()"], [643, "\t\t    .read(is);"], [644, "\t\t) {"], [645, "  \t  \t  Row row = reader.iterator().next();"], [646, "\t\t  assertNotNull(row.getCell(0, Row.RETURN_BLANK_AS_NULL)); //Remain unchanged"], [647, "\t\t  assertNull(row.getCell(1, Row.RETURN_BLANK_AS_NULL));"], [648, "\t\t}"], [649, "\t}"], [650, ""], [651, "\t@Test"], [652, "\tpublic void testShouldReturnBlankForMissingCellPolicy_CREATE_NULL_AS_BLANK() throws Exception {"], [653, "  \t  try ("], [654, "\t    InputStream is = new FileInputStream(new File(\"src/test/resources/null_cell.xlsx\"));"], [655, "\t\tStreamingReader reader = StreamingReader.builder()"], [656, "\t\t    .read(is);"], [657, "\t\t) {"], [658, "  \t  \t  Row row = reader.iterator().next();"], [659, "\t\t  assertEquals(\"B1 is Null ->\", row.getCell(0, Row.CREATE_NULL_AS_BLANK).getStringCellValue()); //Remain unchanged"], [660, "\t\t  assertEquals(\"B1 is Null ->\", row.getCell(0, Row.CREATE_NULL_AS_BLANK).getRichStringCellValue().getString()); //Remain unchanged"], [661, "\t\t  assertThat(row.getCell(1), is(nullValue()));"], [662, "\t\t  assertNotNull(row.getCell(1, Row.CREATE_NULL_AS_BLANK));"], [663, "\t\t}"], [664, "\t}"]]}, "num_lines_added": 108, "num_lines_removed": 115}