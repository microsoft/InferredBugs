{"hash": "19054ade4f38b06e4ad79eb475705ca86558a43a", "message": "Fixes for POOL-136. Make syncs consistent.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/pool/trunk@776085 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 941, "diff_parsed": {"added": [[949, "        byte whenExhaustedAction;"], [950, "        long maxWait;"], [952, "            // Get local copy of current config. Can't sync when used later as"], [953, "            // it can result in a deadlock. Has the added advantage that config"], [954, "            // is consistent for entire method execution"], [955, "            whenExhaustedAction = _whenExhaustedAction;"], [956, "            maxWait = _maxWait;"], [957, ""], [958, "            // Add this request to the queue"], [974, "                    switch(whenExhaustedAction) {"], [986, "                                    if(maxWait <= 0) {"], [992, "                                        final long waitTime = maxWait - elapsed;"], [1003, "                            if(maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {"], [1009, "                            throw new IllegalArgumentException(\"whenExhaustedAction \" + whenExhaustedAction + \" not recognized.\");"], [1514, "        boolean testWhileIdle;"], [1515, "        long minEvictableIdleTimeMillis;"], [1516, ""], [1518, "            // Get local copy of current config. Can't sync when used later as"], [1519, "            // it can result in a deadlock. Has the added advantage that config"], [1520, "            // is consistent for entire method execution"], [1521, "            testWhileIdle = _testWhileIdle;"], [1522, "            minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;"], [1523, ""], [1524, "            // Initialize key to last key value"], [1603, "            if((minEvictableIdleTimeMillis > 0) &&"], [1605, "               minEvictableIdleTimeMillis)) {"], [1608, "            if(testWhileIdle && removeObject == false) {"], [1799, "    private synchronized int getNumTests() {"], [1858, "            synchronized (GenericKeyedObjectPool.this) {"], [1859, "                _totalActive++;"], [1860, "            }"], [1865, "            synchronized (GenericKeyedObjectPool.this) {"], [1866, "                _totalActive--;"], [1867, "            }"], [1874, "            synchronized (GenericKeyedObjectPool.this) {"], [1875, "                _totalInternalProcessing++;"], [1876, "            }"], [1881, "            synchronized (GenericKeyedObjectPool.this) {"], [1882, "                _totalInternalProcessing--;"], [1883, "            }"], [1886, "    }"]], "deleted": [[965, "                    switch(_whenExhaustedAction) {"], [977, "                                    if(_maxWait <= 0) {"], [983, "                                        final long waitTime = _maxWait - elapsed;"], [994, "                            if(_maxWait > 0 && ((System.currentTimeMillis() - starttime) >= _maxWait)) {"], [1000, "                            throw new IllegalArgumentException(\"whenExhaustedAction \" + _whenExhaustedAction + \" not recognized.\");"], [1504, "        // Initialize key to last key value"], [1585, "            if((_minEvictableIdleTimeMillis > 0) &&"], [1587, "               _minEvictableIdleTimeMillis)) {"], [1590, "            if(_testWhileIdle && removeObject == false) {"], [1781, "    private int getNumTests() {"], [1840, "            _totalActive++;"], [1845, "            _totalActive--;"], [1852, "            _totalInternalProcessing++;"], [1857, "            _totalInternalProcessing--;"], [1860, "}"]]}, "num_lines_added": 41, "num_lines_removed": 15}