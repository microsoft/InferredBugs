{"hash": "f760383e3aabad0142cbfa51bd06306265bb60cd", "message": "Fix POOL-199. Ensure only one thread can call evict() at a time. Use a dedicated (more fine-grained) lock rather than locking on the object.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/pool/trunk@1214507 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 951, "diff_parsed": {"added": [[1283, "        synchronized (evictionLock) {"], [1284, "            boolean testWhileIdle = getTestWhileIdle();"], [1285, "            long idleEvictTime = Long.MAX_VALUE;"], [1286, ""], [1287, "            if (getMinEvictableIdleTimeMillis() > 0) {"], [1288, "                idleEvictTime = getMinEvictableIdleTimeMillis();"], [1289, "            }"], [1290, ""], [1291, "            PooledObject<T> underTest = null;"], [1292, "            LinkedBlockingDeque<PooledObject<T>> idleObjects = null;"], [1293, ""], [1294, "            for (int i = 0, m = getNumTests(); i < m; i++) {"], [1295, "                if(evictionIterator == null || !evictionIterator.hasNext()) {"], [1296, "                    if (evictionKeyIterator == null ||"], [1297, "                            !evictionKeyIterator.hasNext()) {"], [1298, "                        List<K> keyCopy = new ArrayList<K>();"], [1299, "                        keyCopy.addAll(poolKeyList);"], [1300, "                        evictionKeyIterator = keyCopy.iterator();"], [1302, "                    while (evictionKeyIterator.hasNext()) {"], [1303, "                        evictionKey = evictionKeyIterator.next();"], [1304, "                        ObjectDeque<T> objectDeque = poolMap.get(evictionKey);"], [1305, "                        if (objectDeque == null) {"], [1306, "                            continue;"], [1307, "                        }"], [1308, "                        idleObjects = objectDeque.getIdleObjects();"], [1309, ""], [1310, "                        if (getLifo()) {"], [1311, "                            evictionIterator = idleObjects.descendingIterator();"], [1312, "                        } else {"], [1313, "                            evictionIterator = idleObjects.iterator();"], [1314, "                        }"], [1315, "                        if (evictionIterator.hasNext()) {"], [1316, "                            break;"], [1317, "                        }"], [1318, "                        evictionIterator = null;"], [1320, "                }"], [1321, "                if (evictionIterator == null) {"], [1322, "                    // Pools exhausted"], [1323, "                    return;"], [1324, "                }"], [1325, "                try {"], [1326, "                    underTest = evictionIterator.next();"], [1327, "                } catch (NoSuchElementException nsee) {"], [1328, "                    // Object was borrowed in another thread"], [1329, "                    // Don't count this as an eviction test so reduce i;"], [1330, "                    i--;"], [1332, "                    continue;"], [1334, ""], [1335, "                if (!underTest.startEvictionTest()) {"], [1336, "                    // Object was borrowed in another thread"], [1337, "                    // Don't count this as an eviction test so reduce i;"], [1338, "                    i--;"], [1339, "                    continue;"], [1340, "                }"], [1341, ""], [1342, "                if (idleEvictTime < underTest.getIdleTimeMillis()) {"], [1343, "                    destroy(evictionKey, underTest, true);"], [1344, "                    destroyedByEvictorCount.incrementAndGet();"], [1345, "                } else {"], [1346, "                    if (testWhileIdle) {"], [1347, "                        boolean active = false;"], [1348, "                        try {"], [1349, "                            factory.activateObject(evictionKey,"], [1350, "                                    underTest.getObject());"], [1351, "                            active = true;"], [1352, "                        } catch (Exception e) {"], [1355, "                        }"], [1356, "                        if (active) {"], [1357, "                            if (!factory.validateObject(evictionKey,"], [1358, "                                    underTest.getObject())) {"], [1361, "                            } else {"], [1362, "                                try {"], [1363, "                                    factory.passivateObject(evictionKey,"], [1364, "                                            underTest.getObject());"], [1365, "                                } catch (Exception e) {"], [1366, "                                    destroy(evictionKey, underTest, true);"], [1367, "                                    destroyedByEvictorCount.incrementAndGet();"], [1368, "                                }"], [1372, "                    if (!underTest.endEvictionTest(idleObjects)) {"], [1373, "                        // TODO - May need to add code here once additional states"], [1374, "                        // are used"], [1375, "                    }"], [1643, "    protected final void startEvictor(long delay) {"], [1644, "        synchronized (evictionLock) {"], [1645, "            if (null != evictor) {"], [1646, "                EvictionTimer.cancel(evictor);"], [1647, "                evictor = null;"], [1648, "            }"], [1649, "            if (delay > 0) {"], [1650, "                evictor = new Evictor();"], [1651, "                EvictionTimer.schedule(evictor, delay, delay);"], [1652, "            }"], [2088, "     * My idle object eviction {@link TimerTask}, if any."], [2089, "     */"], [2090, "    private Evictor evictor = null; // @GuardedBy(\"evictionLock\")"], [2091, ""], [2092, "    /**"], [2096, "    private Iterator<PooledObject<T>> evictionIterator = null; // @GuardedBy(\"evictionLock\") - except close()"], [2101, "    private Iterator<K> evictionKeyIterator = null; // @GuardedBy(\"evictionLock\") - except close()"], [2107, "    private K evictionKey = null; // @GuardedBy(\"evictionLock\")"], [2108, ""], [2109, "    /** Object used to ensure thread safety of eviction process */"], [2110, "    private final Object evictionLock = new Object();"]], "deleted": [[1283, "        boolean testWhileIdle = getTestWhileIdle();"], [1284, "        long idleEvictTime = Long.MAX_VALUE;"], [1285, ""], [1286, "        if (getMinEvictableIdleTimeMillis() > 0) {"], [1287, "            idleEvictTime = getMinEvictableIdleTimeMillis();"], [1288, "        }"], [1289, ""], [1290, "        PooledObject<T> underTest = null;"], [1291, "        LinkedBlockingDeque<PooledObject<T>> idleObjects = null;"], [1292, ""], [1293, "        for (int i = 0, m = getNumTests(); i < m; i++) {"], [1294, "            if(evictionIterator == null || !evictionIterator.hasNext()) {"], [1295, "                if (evictionKeyIterator == null ||"], [1296, "                        !evictionKeyIterator.hasNext()) {"], [1297, "                    List<K> keyCopy = new ArrayList<K>();"], [1298, "                    keyCopy.addAll(poolKeyList);"], [1299, "                    evictionKeyIterator = keyCopy.iterator();"], [1300, "                }"], [1301, "                while (evictionKeyIterator.hasNext()) {"], [1302, "                    evictionKey = evictionKeyIterator.next();"], [1303, "                    ObjectDeque<T> objectDeque = poolMap.get(evictionKey);"], [1304, "                    if (objectDeque == null) {"], [1305, "                        continue;"], [1306, "                    }"], [1307, "                    idleObjects = objectDeque.getIdleObjects();"], [1308, ""], [1309, "                    if (getLifo()) {"], [1310, "                        evictionIterator = idleObjects.descendingIterator();"], [1311, "                    } else {"], [1312, "                        evictionIterator = idleObjects.iterator();"], [1314, "                    if (evictionIterator.hasNext()) {"], [1315, "                        break;"], [1319, "            }"], [1320, "            if (evictionIterator == null) {"], [1321, "                // Pools exhausted"], [1322, "                return;"], [1323, "            }"], [1324, "            try {"], [1325, "                underTest = evictionIterator.next();"], [1326, "            } catch (NoSuchElementException nsee) {"], [1327, "                // Object was borrowed in another thread"], [1328, "                // Don't count this as an eviction test so reduce i;"], [1329, "                i--;"], [1330, "                evictionIterator = null;"], [1331, "                continue;"], [1332, "            }"], [1333, ""], [1334, "            if (!underTest.startEvictionTest()) {"], [1335, "                // Object was borrowed in another thread"], [1336, "                // Don't count this as an eviction test so reduce i;"], [1337, "                i--;"], [1338, "                continue;"], [1339, "            }"], [1340, ""], [1341, "            if (idleEvictTime < underTest.getIdleTimeMillis()) {"], [1342, "                destroy(evictionKey, underTest, true);"], [1343, "                destroyedByEvictorCount.incrementAndGet();"], [1344, "            } else {"], [1345, "                if (testWhileIdle) {"], [1346, "                    boolean active = false;"], [1347, "                    try {"], [1348, "                        factory.activateObject(evictionKey,"], [1349, "                                underTest.getObject());"], [1350, "                        active = true;"], [1351, "                    } catch (Exception e) {"], [1352, "                        destroy(evictionKey, underTest, true);"], [1353, "                        destroyedByEvictorCount.incrementAndGet();"], [1354, "                    }"], [1355, "                    if (active) {"], [1356, "                        if (!factory.validateObject(evictionKey,"], [1357, "                                underTest.getObject())) {"], [1360, "                        } else {"], [1361, "                            try {"], [1362, "                                factory.passivateObject(evictionKey,"], [1363, "                                        underTest.getObject());"], [1364, "                            } catch (Exception e) {"], [1370, "                }"], [1371, "                if (!underTest.endEvictionTest(idleObjects)) {"], [1372, "                    // TODO - May need to add code here once additional states"], [1373, "                    // are used"], [1641, "    protected final synchronized void startEvictor(long delay) {"], [1642, "        if (null != evictor) {"], [1643, "            EvictionTimer.cancel(evictor);"], [1644, "            evictor = null;"], [1645, "        }"], [1646, "        if (delay > 0) {"], [1647, "            evictor = new Evictor();"], [1648, "            EvictionTimer.schedule(evictor, delay, delay);"], [2065, "    /**"], [2066, "     * My idle object eviction {@link TimerTask}, if any."], [2067, "     */"], [2068, "    private Evictor evictor = null; // @GuardedBy(\"this\")"], [2069, ""], [2092, "    private Iterator<PooledObject<T>> evictionIterator = null;"], [2097, "    private Iterator<K> evictionKeyIterator = null;"], [2103, "    private K evictionKey = null;"]]}, "num_lines_added": 103, "num_lines_removed": 96}