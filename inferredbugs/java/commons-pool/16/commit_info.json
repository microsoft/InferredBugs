{"hash": "485fb4439072a83fafe6efe943a47205419c28f0", "message": "Move to using LinkedBlockingDeque for the queue of idle objects.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/pool/trunk@1101516 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 756, "diff_parsed": {"added": [[22, "import java.util.Iterator;"], [27, "import java.util.concurrent.LinkedBlockingDeque;"], [599, "        _pool = new LinkedBlockingDeque<PooledObject<T>>();"], [1151, "                                        returnObject(latch.getPair().getObject());"], [1186, "                    latch.setPair(new PooledObject<T>(obj));"], [1201, "                _factory.activateObject(latch.getPair().getObject());"], [1203, "                        !_factory.validateObject(latch.getPair().getObject())) {"], [1210, "                return latch.getPair().getObject();"], [1216, "                    _factory.destroyObject(latch.getPair().getObject());"], [1314, "        List<PooledObject<T>> toDestroy = new ArrayList<PooledObject<T>>();"], [1318, "            _numInternalProcessing = _numInternalProcessing + _pool.size();"], [1333, "    private void destroy(Collection<PooledObject<T>> c, PoolableObjectFactory<T> factory) {"], [1334, "        for (PooledObject<T> pair : c) {"], [1336, "                factory.destroyObject(pair.getObject());"], [1445, "                        _pool.addFirst(new PooledObject<T>(obj));"], [1447, "                        _pool.addLast(new PooledObject<T>(obj));"], [1512, "        List<PooledObject<T>> toDestroy = new ArrayList<PooledObject<T>>();"], [1520, "                _numInternalProcessing = _numInternalProcessing + _pool.size();"], [1544, "        if (_pool.size() == 0) {"], [1545, "            return;"], [1546, "        }"], [1547, ""], [1548, "        PooledObject<T> underTest = null;"], [1549, ""], [1550, "        for (int i = 0, m = getNumTests(); i < m; i++) {"], [1551, "            if (_evictionIterator == null || !_evictionIterator.hasNext()) {"], [1552, "                if (getLifo()) {"], [1553, "                    _evictionIterator = _pool.descendingIterator();"], [1554, "                } else {"], [1555, "                    _evictionIterator = _pool.iterator();"], [1558, "            if (!_evictionIterator.hasNext()) {"], [1559, "                // Pool exhausted, nothing to do here"], [1560, "                return;"], [1561, "            } else {"], [1563, "                    underTest = _evictionIterator.next();"], [1564, "                } catch (NoSuchElementException nsee) {"], [1565, "                    // Object was borrowed in another thread"], [1566, "                    // Don't count this as an eviction test so reduce i;"], [1567, "                    i--;"], [1568, "                    _evictionIterator = null;"], [1569, "                    continue;"], [1573, "            if (!underTest.startEvictionTest()) {"], [1574, "                // Object was borrowed in another thread"], [1575, "                // Don't count this as an eviction test so reduce i;"], [1576, "                i--;"], [1577, "                continue;"], [1579, ""], [1580, "            if (getMinEvictableIdleTimeMillis() > 0 &&"], [1581, "                        getMinEvictableIdleTimeMillis() <"], [1582, "                            underTest.getIdleTimeMillis() ||"], [1583, "                    (getSoftMinEvictableIdleTimeMillis() > 0 &&"], [1584, "                            getSoftMinEvictableIdleTimeMillis() <"], [1585, "                                underTest.getIdleTimeMillis() &&"], [1586, "                            getMinIdle() < _pool.size())) {"], [1587, "                destroy(underTest);"], [1588, "            } else {"], [1589, "                if (getTestWhileIdle()) {"], [1590, "                    boolean active = false;"], [1591, "                    try {"], [1592, "                        _factory.activateObject(underTest.getObject());"], [1593, "                        active = true;"], [1594, "                    } catch(Exception e) {"], [1595, "                        destroy(underTest);"], [1597, "                    if(active) {"], [1598, "                        if(!_factory.validateObject(underTest.getObject())) {"], [1599, "                            destroy(underTest);"], [1600, "                        } else {"], [1601, "                            try {"], [1602, "                                _factory.passivateObject(underTest.getObject());"], [1603, "                            } catch(Exception e) {"], [1604, "                                destroy(underTest);"], [1605, "                            }"], [1606, "                        }"], [1607, "                    }"], [1608, "                }"], [1609, "                if (!underTest.endEvictionTest()) {"], [1610, "                    // TODO - May need to add code here once additional states"], [1611, "                    // are used"], [1615, ""], [1616, "        return;"], [1617, "    }"], [1618, ""], [1619, "    private void destroy(PooledObject<T> toDestory) {"], [1620, "        _pool.remove(toDestory);"], [1621, "        try {"], [1622, "            _factory.destroyObject(toDestory.getObject());"], [1623, "        } catch (Exception e) {"], [1624, "            // Ignore"], [1625, "        }"], [1731, "        for (PooledObject<T> pair  : _pool) {"], [1732, "            buf.append(\"\\t\").append(pair.toString());"], [1855, "        private PooledObject<T> _pair;"], [1864, "        private synchronized PooledObject<T> getPair() {"], [1872, "        private synchronized void setPair(PooledObject<T> pair) {"], [2052, "    private LinkedBlockingDeque<PooledObject<T>> _pool = null;"], [2054, "    private Iterator<PooledObject<T>> _evictionIterator = null;"]], "deleted": [[31, "import org.apache.commons.pool2.impl.GenericKeyedObjectPool.ObjectTimestampPair;"], [598, "        _pool = new CursorableLinkedList<ObjectTimestampPair<T>>();"], [1150, "                                        returnObject(latch.getPair().getValue());"], [1185, "                    latch.setPair(new ObjectTimestampPair<T>(obj));"], [1200, "                _factory.activateObject(latch.getPair().getValue());"], [1202, "                        !_factory.validateObject(latch.getPair().getValue())) {"], [1209, "                return latch.getPair().getValue();"], [1215, "                    _factory.destroyObject(latch.getPair().getValue());"], [1313, "        List<ObjectTimestampPair<T>> toDestroy = new ArrayList<ObjectTimestampPair<T>>();"], [1317, "            _numInternalProcessing = _numInternalProcessing + _pool._size;"], [1332, "    private void destroy(Collection<ObjectTimestampPair<T>> c, PoolableObjectFactory<T> factory) {"], [1333, "        for (ObjectTimestampPair<T> pair : c) {"], [1335, "                factory.destroyObject(pair.getValue());"], [1444, "                        _pool.addFirst(new ObjectTimestampPair<T>(obj));"], [1446, "                        _pool.addLast(new ObjectTimestampPair<T>(obj));"], [1511, "        List<ObjectTimestampPair<T>> toDestroy = new ArrayList<ObjectTimestampPair<T>>();"], [1519, "                _numInternalProcessing = _numInternalProcessing + _pool._size;"], [1542, "        synchronized (this) {"], [1543, "            if(_pool.isEmpty()) {"], [1544, "                return;"], [1545, "            }"], [1546, "            if (null == _evictionCursor) {"], [1547, "                _evictionCursor = (_pool.cursor(_lifo ? _pool.size() : 0));"], [1548, "            }"], [1549, "        }"], [1551, "        for (int i=0,m=getNumTests();i<m;i++) {"], [1552, "            final ObjectTimestampPair<T> pair;"], [1553, "            synchronized (this) {"], [1554, "                if ((_lifo && !_evictionCursor.hasPrevious()) ||"], [1555, "                        !_lifo && !_evictionCursor.hasNext()) {"], [1556, "                    _evictionCursor.close();"], [1557, "                    _evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);"], [1559, ""], [1560, "                pair = _lifo ?"], [1561, "                        _evictionCursor.previous() :"], [1562, "                        _evictionCursor.next();"], [1563, ""], [1564, "                _evictionCursor.remove();"], [1565, "                _numInternalProcessing++;"], [1566, "            }"], [1567, ""], [1568, "            boolean removeObject = false;"], [1569, "            final long idleTimeMilis = System.currentTimeMillis() - pair.getTstamp();"], [1570, "            if ((getMinEvictableIdleTimeMillis() > 0) &&"], [1571, "                    (idleTimeMilis > getMinEvictableIdleTimeMillis())) {"], [1572, "                removeObject = true;"], [1573, "            } else if ((getSoftMinEvictableIdleTimeMillis() > 0) &&"], [1574, "                    (idleTimeMilis > getSoftMinEvictableIdleTimeMillis()) &&"], [1575, "                    ((getNumIdle() + 1)> getMinIdle())) { // +1 accounts for object we are processing"], [1576, "                removeObject = true;"], [1578, "            if(getTestWhileIdle() && !removeObject) {"], [1579, "                boolean active = false;"], [1581, "                    _factory.activateObject(pair.getValue());"], [1582, "                    active = true;"], [1583, "                } catch(Exception e) {"], [1584, "                    removeObject=true;"], [1585, "                }"], [1586, "                if(active) {"], [1587, "                    if(!_factory.validateObject(pair.getValue())) {"], [1588, "                        removeObject=true;"], [1589, "                    } else {"], [1590, "                        try {"], [1591, "                            _factory.passivateObject(pair.getValue());"], [1592, "                        } catch(Exception e) {"], [1593, "                            removeObject=true;"], [1594, "                        }"], [1595, "                    }"], [1599, "            if (removeObject) {"], [1600, "                try {"], [1601, "                    _factory.destroyObject(pair.getValue());"], [1602, "                } catch(Exception e) {"], [1603, "                    // ignored"], [1604, "                }"], [1606, "            synchronized (this) {"], [1607, "                if(!removeObject) {"], [1608, "                    _evictionCursor.add(pair);"], [1609, "                    if (_lifo) {"], [1610, "                        // Skip over the element we just added back"], [1611, "                        _evictionCursor.previous();"], [1614, "                _numInternalProcessing--;"], [1617, "        allocate();"], [1723, "        long time = System.currentTimeMillis();"], [1724, "        for (ObjectTimestampPair<T> pair  : _pool) {"], [1725, "            buf.append(\"\\t\").append(pair.getValue()).append(\"\\t\").append(time - pair.getTstamp()).append(\"\\n\");"], [1848, "        private ObjectTimestampPair<T> _pair;"], [1857, "        private synchronized ObjectTimestampPair<T> getPair() {"], [1865, "        private synchronized void setPair(ObjectTimestampPair<T> pair) {"], [2045, "    private CursorableLinkedList<ObjectTimestampPair<T>> _pool = null;"], [2047, "    /** Eviction cursor - keeps track of idle object evictor position */"], [2048, "    private CursorableLinkedList<ObjectTimestampPair<T>>.Cursor _evictionCursor = null;"]]}, "num_lines_added": 96, "num_lines_removed": 90}