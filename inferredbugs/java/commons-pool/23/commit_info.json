{"hash": "b969ef4f2df44f83af00a0f31a4cd57fc4de0f60", "message": "Consistent naming\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/pool/trunk@1214408 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 946, "diff_parsed": {"added": [[238, "        this.factory = factory;"], [296, "        return maxTotalPerKey;"], [307, "        this.maxTotalPerKey = maxTotalPerKey;"], [317, "        return maxTotal;"], [333, "        this.maxTotal = maxTotal;"], [375, "        return maxWait;"], [392, "        this.maxWait = maxWait;"], [463, "        return testOnBorrow;"], [478, "        this.testOnBorrow = testOnBorrow;"], [491, "        return testOnReturn;"], [504, "        this.testOnReturn = testOnReturn;"], [517, "        return timeBetweenEvictionRunsMillis;"], [530, "        this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;"], [531, "        startEvictor(timeBetweenEvictionRunsMillis);"], [543, "        return numTestsPerEvictionRun;"], [562, "        this.numTestsPerEvictionRun = numTestsPerEvictionRun;"], [575, "        return minEvictableIdleTimeMillis;"], [591, "        this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;"], [605, "        return testWhileIdle;"], [619, "        this.testWhileIdle = testWhileIdle;"], [654, "         return lifo;"], [668, "         this.lifo = lifo;"], [678, "         return factory;"], [789, "                        factory.activateObject(key, p.getObject());"], [808, "                            validate = factory.validateObject(key, p.getObject());"], [884, "             if (!factory.validateObject(key, t)) {"], [896, "             factory.passivateObject(key, t);"], [1348, "                        factory.activateObject(evictionKey,"], [1356, "                        if (!factory.validateObject(evictionKey,"], [1362, "                                factory.passivateObject(evictionKey,"], [1415, "            t = factory.makeObject(key);"], [1451, "                    factory.destroyObject(key, toDestroy.getObject());"], [1585, "            factory.passivateObject(key, p.getObject());"], [1608, "        if (factory == null) {"], [1939, "    private int maxTotalPerKey ="], [1947, "    private int maxTotal = GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL;"], [1963, "    private long maxWait = GenericKeyedObjectPoolConfig.DEFAULT_MAX_WAIT;"], [1987, "    private volatile boolean testOnBorrow ="], [1999, "    private volatile boolean testOnReturn ="], [2013, "    private boolean testWhileIdle ="], [2025, "    private long timeBetweenEvictionRunsMillis ="], [2041, "    private int numTestsPerEvictionRun ="], [2056, "    private long minEvictableIdleTimeMillis ="], [2060, "    private boolean lifo = GenericKeyedObjectPoolConfig.DEFAULT_LIFO;"], [2063, "    final private KeyedPoolableObjectFactory<K,T> factory;"], [2083, "     * {@link #maxTotal} but there will never be more than {@link #maxTotal}"]], "deleted": [[238, "        this._factory = factory;"], [296, "        return _maxTotalPerKey;"], [307, "        _maxTotalPerKey = maxTotalPerKey;"], [317, "        return _maxTotal;"], [333, "        _maxTotal = maxTotal;"], [375, "        return _maxWait;"], [392, "        _maxWait = maxWait;"], [463, "        return _testOnBorrow;"], [478, "        _testOnBorrow = testOnBorrow;"], [491, "        return _testOnReturn;"], [504, "        _testOnReturn = testOnReturn;"], [517, "        return _timeBetweenEvictionRunsMillis;"], [530, "        _timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;"], [531, "        startEvictor(_timeBetweenEvictionRunsMillis);"], [543, "        return _numTestsPerEvictionRun;"], [562, "        _numTestsPerEvictionRun = numTestsPerEvictionRun;"], [575, "        return _minEvictableIdleTimeMillis;"], [591, "        _minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;"], [605, "        return _testWhileIdle;"], [619, "        _testWhileIdle = testWhileIdle;"], [654, "         return _lifo;"], [668, "         this._lifo = lifo;"], [678, "         return _factory;"], [789, "                        _factory.activateObject(key, p.getObject());"], [808, "                            validate = _factory.validateObject(key, p.getObject());"], [884, "             if (!_factory.validateObject(key, t)) {"], [896, "             _factory.passivateObject(key, t);"], [1348, "                        _factory.activateObject(evictionKey,"], [1356, "                        if (!_factory.validateObject(evictionKey,"], [1362, "                                _factory.passivateObject(evictionKey,"], [1415, "            t = _factory.makeObject(key);"], [1451, "                    _factory.destroyObject(key, toDestroy.getObject());"], [1585, "            _factory.passivateObject(key, p.getObject());"], [1608, "        if (_factory == null) {"], [1939, "    private int _maxTotalPerKey ="], [1947, "    private int _maxTotal = GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL;"], [1963, "    private long _maxWait = GenericKeyedObjectPoolConfig.DEFAULT_MAX_WAIT;"], [1987, "    private volatile boolean _testOnBorrow ="], [1999, "    private volatile boolean _testOnReturn ="], [2013, "    private boolean _testWhileIdle ="], [2025, "    private long _timeBetweenEvictionRunsMillis ="], [2041, "    private int _numTestsPerEvictionRun ="], [2056, "    private long _minEvictableIdleTimeMillis ="], [2060, "    private boolean _lifo = GenericKeyedObjectPoolConfig.DEFAULT_LIFO;"], [2063, "    final private KeyedPoolableObjectFactory<K,T> _factory;"], [2083, "     * {@link #_maxTotal} but there will never be more than {@link #_maxTotal}"]]}, "num_lines_added": 46, "num_lines_removed": 46}