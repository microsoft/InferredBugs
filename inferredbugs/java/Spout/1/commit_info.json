{"hash": "83fd8726822923de21f08958e2113b3aa3f3e0df", "message": "Changed to use atomic integer arrays\n\nSigned-off-by: Raphfrk <raphfrk@gmail.com>", "file_num_lines": 92, "diff_parsed": {"added": [[4, "import java.util.concurrent.atomic.AtomicIntegerArray;"], [16, "\tprivate final AtomicIntegerArray live;"], [17, "\tprivate final AtomicIntegerArray dirtyArray;"], [18, "\tprivate final int dirtySize;"], [27, "\t\tthis.live = new AtomicIntegerArray(initial.length>>1);"], [28, "\t\tthis.dirtySize = dirtySize;"], [29, "\t\tthis.dirtyArray = new AtomicIntegerArray(dirtySize);"], [32, "\t\t\tset(i, initial[i]);"], [55, "\t\tint packed = live.get(index >> 1);"], [56, "\t\tif ((index & 0x1) == 0) {"], [57, "\t\t\treturn unpackZero(packed);"], [58, "\t\t} else {"], [59, "\t\t\treturn unpackOne(packed);"], [68, "\t * @return the old value"], [72, "\t\tboolean success = false;"], [73, "\t\tint divIndex = index >> 1;"], [74, "\t\tboolean isZero = (index & 0x1) == 0;"], [75, "\t\tshort one;"], [76, "\t\tshort zero;"], [77, "\t\tshort old = 0;"], [78, ""], [79, "\t\twhile (!success) {"], [80, "\t\t\tint packed = live.get(divIndex);"], [81, "\t\t\tif (isZero) {"], [82, "\t\t\t\told = unpackZero(packed);"], [83, "\t\t\t\tone = unpackOne(packed);"], [84, "\t\t\t\tzero = value;"], [85, "\t\t\t} else {"], [86, "\t\t\t\told = unpackOne(packed);"], [87, "\t\t\t\tone = value;"], [88, "\t\t\t\tzero = unpackZero(packed);"], [89, "\t\t\t}"], [90, "\t\t\tsuccess = live.compareAndSet(divIndex, packed, pack(zero, one));"], [92, "\t\tmarkDirty(index);"], [93, "\t\treturn old;"], [94, "\t}"], [95, ""], [96, "\tprivate void markDirty(int index) {"], [98, "\t\tif (localDirtyIndex < dirtySize) {"], [99, "\t\t\tdirtyArray.set(localDirtyIndex, index);"], [109, "\t\tif (length <= dirtySize) {"], [111, "\t\t\t\tint index = dirtyArray.get(i);"], [112, "\t\t\t\tthis.snapshot[index] = getLive(i);"], [115, "\t\t\tfor (int i = 0; i < snapshot.length; i++) {"], [116, "\t\t\t\tthis.snapshot[i] = getLive(i);"], [120, ""], [121, "\tprivate int pack(short zero, short one) {"], [122, "\t\treturn (one & 0xFFFF) << 16 | (zero & 0xFFFF);"], [123, "\t}"], [124, ""], [125, "\tprivate short unpackZero(int value) {"], [126, "\t\treturn (short)value;"], [127, "\t}"], [128, ""], [129, "\tprivate short unpackOne(int value) {"], [130, "\t\treturn (short)(value >> 16);"], [131, "\t}"]], "deleted": [[15, "\tprivate final short[] live;"], [16, "\tprivate final int[] dirtyArray;"], [25, "\t\tthis.live = new short[initial.length];"], [26, "\t\tthis.dirtyArray = new int[dirtySize];"], [29, "\t\t\tthis.live[i] = initial[i];"], [52, "\t\tsynchronized (live) {"], [53, "\t\t\treturn live[index];"], [65, "\t\tsynchronized (live) {"], [66, "\t\t\tlive[index] = value;"], [69, "\t\tif (localDirtyIndex < dirtyArray.length) {"], [70, "\t\t\tdirtyArray[localDirtyIndex] = index;"], [72, "\t\treturn snapshot[index];"], [81, "\t\tif (length <= dirtyArray.length) {"], [83, "\t\t\t\tint index = dirtyArray[i];"], [84, "\t\t\t\tthis.snapshot[index] = live[index];"], [87, "\t\t\tfor (int i = 0; i < live.length; i++) {"], [88, "\t\t\t\tthis.snapshot[i] = live[i];"]]}, "num_lines_added": 57, "num_lines_removed": 17}