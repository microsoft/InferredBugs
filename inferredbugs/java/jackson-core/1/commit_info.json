{"hash": "6ebc7598f84a2c4b1829b54b28e5d9be67af098d", "message": "VersionUtil: fix fd leak in .versionFor()\n\nIf the resource was not null, the opened InputStreamReader was never closed.\nFix.\n\nCreate a separate private doReadVersion() method to avoid deeply nested\ntry/catch/finally blocks.", "file_num_lines": 128, "diff_parsed": {"added": [[68, "        final InputStream in = cls.getResourceAsStream(VERSION_FILE);"], [69, ""], [70, "        if (in == null)"], [71, "            return Version.unknownVersion();"], [74, "            InputStreamReader reader = new InputStreamReader(in, \"UTF-8\");"], [75, "            try {"], [76, "                return doReadVersion(reader);"], [77, "            } finally {"], [79, "                    reader.close();"], [80, "                } catch (IOException ignored) {"], [83, "        } catch (UnsupportedEncodingException e) {"], [84, "            return Version.unknownVersion();"], [85, "        } finally {"], [86, "            try {"], [87, "                in.close();"], [88, "            } catch (IOException e) {"], [89, "                throw new RuntimeException(e);"], [90, "            }"], [91, "        }"], [92, "    }"], [93, ""], [94, "    private static Version doReadVersion(final Reader reader)"], [95, "    {"], [96, "        String version = null, group = null, artifact = null;"], [97, ""], [98, "        final BufferedReader br = new BufferedReader(reader);"], [99, "        try {"], [100, "            version = br.readLine();"], [101, "            if (version != null) {"], [102, "                group = br.readLine();"], [103, "                if (group != null)"], [104, "                    artifact = br.readLine();"], [105, "            }"], [106, "        } catch (IOException ignored) {"], [107, "        } finally {"], [108, "            try {"], [109, "                br.close();"], [110, "            } catch (IOException ignored) {"], [111, "            }"], [112, "        }"], [113, ""], [114, "        // We don't trim() version: parseVersion() takes care ot that"], [115, "        if (group != null)"], [116, "            group = group.trim();"], [117, "        if (artifact != null)"], [118, "            artifact = artifact.trim();"], [119, "        return parseVersion(version, group, artifact);"]], "deleted": [[68, "        InputStream in;"], [69, "        Version version = null;"], [72, "            in = cls.getResourceAsStream(VERSION_FILE);"], [73, "            if (in != null) {"], [75, "                    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));"], [76, "                    String groupStr = null, artifactStr = null;"], [77, "                    String versionStr = br.readLine();"], [78, "                    if (versionStr != null) {"], [79, "                        groupStr = br.readLine();"], [80, "                        if (groupStr != null) {"], [81, "                            groupStr = groupStr.trim();"], [82, "                            artifactStr = br.readLine();"], [83, "                            if (artifactStr != null) {"], [84, "                                artifactStr = artifactStr.trim();"], [85, "                            }"], [86, "                        }"], [87, "                    }"], [88, "                    version = parseVersion(versionStr, groupStr, artifactStr);"], [89, "                } finally {"], [90, "                    try {"], [91, "                        in.close();"], [92, "                    } catch (IOException e) {"], [93, "                        throw new RuntimeException(e);"], [94, "                    }"], [97, "        } catch (IOException e) { }"], [98, "        return (version == null) ? Version.unknownVersion() : version;"]]}, "num_lines_added": 47, "num_lines_removed": 26}