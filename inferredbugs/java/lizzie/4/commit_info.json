{"hash": "3f8de3b15a29fa9de4658c443b5a2c1875937609", "message": "Support for new leela zero GTP format. Now works with standard leela zero.", "file_num_lines": 290, "diff_parsed": {"added": [[19, "import java.util.Collections;"], [30, "    private int cmdNumber;"], [31, "    private int currentCmdNum;"], [54, "    private boolean isCheckingVersion;"], [68, "        cmdNumber = 1;"], [69, "        currentCmdNum = -1;"], [115, "        // Send a version request to check that we have a supported version"], [116, "        // Response handled in  parseLine"], [117, "        isCheckingVersion = true;"], [118, "        sendCommand(\"version\");"], [119, ""], [132, "    private void parseInfo(String line) {"], [133, ""], [134, "        bestMoves = new ArrayList<>();"], [135, "        String[] variations = line.split(\" info \");"], [136, "        for (String var : variations) {"], [137, "            bestMoves.add(new MoveData(var));"], [138, "        }"], [139, "        // Not actually necessary to sort with current version of LZ (0.15)"], [140, "        // but not guaranteed to be ordered in the future"], [141, "        Collections.sort(bestMoves);"], [142, "    }"], [143, ""], [151, "            if (line.equals(\"\\n\")) {"], [152, "                // End of response"], [153, "            } else if (line.startsWith(\"info\")) {"], [154, "                if (currentCmdNum == cmdNumber -1) {"], [155, "                    // This should not be stale data when the command number match"], [156, "                    parseInfo(line.substring(5));"], [157, "                    notifyBestMoveListeners();"], [158, "                    if (Lizzie.frame != null) Lizzie.frame.repaint();"], [159, "                    if (System.currentTimeMillis() - startPonderTime > maxAnalyzeTimeMillis) {"], [160, "                        sendCommand(\"name\"); // Send any command to stop ponder"], [163, "            } else if (line.startsWith(\"play\")) {"], [164, "                // In lz-genmove_analyze"], [165, "                if (Lizzie.frame.isPlayingAgainstLeelaz) {"], [166, "                    Lizzie.board.place(line.substring(5).trim());"], [168, "                isThinking = false;"], [170, "            } else if (Lizzie.frame != null && line.startsWith(\"=\")) {"], [171, "                if (printCommunication) {"], [172, "                    System.out.print(line);"], [173, "                }"], [174, "                String[] params = line.trim().split(\" \");"], [175, "                currentCmdNum = Integer.parseInt(params[0].substring(1).trim());"], [177, "                if (params.length == 1) return;"], [180, "                if (isSettingHandicap) {"], [181, "                    for (int i = 2; i < params.length; i++) {"], [182, "                        int[] coordinates = Lizzie.board.convertNameToCoordinates(params[i]);"], [183, "                        Lizzie.board.getHistory().setStone(coordinates, Stone.BLACK);"], [185, "                    isSettingHandicap = false;"], [186, "                } else if (isThinking && !isPondering) {"], [187, "                    if (Lizzie.frame.isPlayingAgainstLeelaz) {"], [188, "                        Lizzie.board.place(params[1]);"], [189, "                    }"], [190, "                } else if (isCheckingVersion) {"], [191, "                    String[] ver = params[1].split(\"\\\\.\");"], [192, "                    int minor = Integer.parseInt(ver[1]);"], [193, "                    // Gtp support added in version 15"], [194, "                    if (minor < 15) {"], [195, "                        JOptionPane.showMessageDialog(Lizzie.frame, \"Lizzie requires version 0.15 or later of Leela Zero for analysis (found \" + params[1] + \")\");"], [197, "                    isCheckingVersion = false;"], [253, "        command = cmdNumber + \" \" + command;"], [254, "        cmdNumber++;"], [294, "    public void genmove(String color) {"], [295, "        String command = \"genmove \" + color;"], [296, "        /*"], [297, "         * We don't support displaying this while playing, so no reason to request it (for now)"], [298, "        if (isPondering) {"], [299, "            command = \"lz-genmove_analyze \" + color + \" 10\";"], [300, "        }*/"], [301, "        sendCommand(command);"], [302, "        isThinking = true;"], [303, "    }"], [304, ""], [320, "        sendCommand(\"lz-analyze \" + Lizzie.config.config.getJSONObject(\"leelaz\").getInt(\"analyze-update-interval-centisec\"));    // until it responds to this, incoming ponder results are obsolete"]], "deleted": [[3, "import jdk.nashorn.internal.runtime.arrays.ArrayIndex;"], [8, "import wagner.stephanie.lizzie.analysis.Leelaz.WinrateStats;"], [38, "    private boolean isValidVersion = false;"], [40, "    private boolean isReadingPonderOutput;"], [49, "    // True while we're waiting for old ponder output to get flushed"], [50, "    private boolean isWaitingToStartPonder = false;"], [51, ""], [58, "    private boolean failSafeMode = false;"], [66, "        isReadingPonderOutput = false;"], [118, "        if (!isCorrectVersion()) {"], [119, "            // warn user"], [120, "            JOptionPane.showMessageDialog(Lizzie.frame, \"This version of Leela Zero is incompatible with Lizzie.\\nPlease follow the instructions in the readme.\\n(Trying failsafe mode...)\");"], [121, "            failSafeMode = true;"], [122, "        }"], [128, "     * verify that leelaz is the lizzie-variant with ~begin etc ponder output"], [129, "     *"], [130, "     * @return true if this leelaz will work for lizzie, false otherwise"], [131, "     */"], [132, "    private boolean isCorrectVersion() {"], [133, "        final int maxTestTime = 1000; // 1 second test"], [134, "        try {"], [135, "            boolean hasSeenName = false;"], [136, "            int c;"], [137, "            StringBuilder line = new StringBuilder();"], [138, "            sendCommand(\"time_left B 0 0\");"], [139, ""], [140, "            while ((c = inputStream.read()) != -1) {"], [141, "                line.append((char) c);"], [142, "                if ((c == '\\n')) {"], [143, "                    String lineString = line.toString();"], [144, "                    if (lineString.startsWith(\"=\")) {"], [145, "                        if (!hasSeenName) {"], [146, "                            hasSeenName = true;"], [147, "                            // break from this loop in up to maxTestTime."], [148, "                            new Thread(() -> {"], [149, "                                try {"], [150, "                                    Thread.sleep(maxTestTime);"], [151, "                                } catch (InterruptedException e) {"], [152, "                                    e.printStackTrace();"], [153, "                                }"], [154, "                                if (!isValidVersion)"], [155, "                                    sendCommand(\"name\");"], [156, "                            }).start();"], [157, "                        } else {"], [158, "                            return false;"], [159, "                        }"], [160, "                    } else if (lineString.startsWith(\"~begin\")) {"], [161, "                        isValidVersion = true;"], [162, "                        return true;"], [163, "                    }"], [164, ""], [165, "                    line = new StringBuilder();"], [166, "                }"], [167, "            }"], [168, "            // this line will be reached when Leelaz shuts down"], [169, "            System.out.println(\"Leelaz process ended.\");"], [170, ""], [171, "            shutdown();"], [172, "            System.exit(-1);"], [173, "        } catch (IOException e) {"], [174, "            e.printStackTrace();"], [175, "        }"], [176, ""], [177, "        return false;"], [178, "    }"], [179, ""], [180, "    /**"], [194, "        if (failSafeMode) {"], [195, "            parseLineFailSafe(line);"], [196, "        } else {"], [197, "            parseLineNormal(line);"], [198, "        }"], [199, "    }"], [200, ""], [201, "    private void parseLineNormal(String line) {"], [203, "            if (line.startsWith(\"~begin\") && !isWaitingToStartPonder) {"], [204, "                if (System.currentTimeMillis() - startPonderTime > maxAnalyzeTimeMillis) {"], [205, "                    // we have pondered for enough time. pause pondering"], [206, "                    togglePonder();"], [207, "                }"], [208, ""], [209, "                isReadingPonderOutput = true;"], [210, "                bestMovesTemp = new ArrayList<>();"], [211, "            } else if (line.startsWith(\"~end\") && !isWaitingToStartPonder) {"], [212, "                isReadingPonderOutput = false;"], [213, "                bestMoves = bestMovesTemp;"], [214, ""], [215, "                notifyBestMoveListeners();"], [216, ""], [217, "                if (Lizzie.frame != null) Lizzie.frame.repaint();"], [218, "            } else {"], [219, ""], [220, "                if (isReadingPonderOutput && !isWaitingToStartPonder) {"], [221, "                    line = line.trim();"], [222, "                    // ignore passes, and only accept lines that start with a coordinate letter"], [223, "                    if (line.length() > 0 && Character.isLetter(line.charAt(0)) && !line.startsWith(\"pass\")) {"], [224, "                        if (!(Lizzie.frame != null && Lizzie.frame.isPlayingAgainstLeelaz && Lizzie.frame.playerIsBlack != Lizzie.board.getData().blackToPlay)) {"], [225, "                            try {"], [226, "                                bestMovesTemp.add(new MoveData(line));"], [227, "                            } catch (ArrayIndexOutOfBoundsException e) {"], [228, "                                // this is very rare but is possible. ignore"], [229, "                            }"], [230, "                        }"], [231, "                    }"], [232, "                } else {"], [233, "                    if (printCommunication) {"], [234, "                        System.out.print(line);"], [235, "                    }"], [236, ""], [237, "                    line = line.trim();"], [238, "                    if (Lizzie.frame != null && line.startsWith(\"=\") && line.length() > 2) {"], [239, ""], [240, "                        if (isWaitingToStartPonder) {"], [241, "                            // Now we can tell it to actually start pondering"], [242, "                            sendCommand(\"time_left b 0 0\");"], [243, "                            isWaitingToStartPonder = false;"], [244, "                        }"], [245, ""], [246, "                        if (isSettingHandicap) {"], [247, "                            line = line.substring(2);"], [248, "                            String[] stones = line.split(\" \");"], [249, "                            for (String stone : stones) {"], [250, "                                int[] coordinates = Lizzie.board.convertNameToCoordinates(stone);"], [251, "                                Lizzie.board.getHistory().setStone(coordinates, Stone.BLACK);"], [252, "                            }"], [253, "                            isSettingHandicap = false;"], [254, "                        } else if (isThinking) {"], [255, "                            if (Lizzie.frame.isPlayingAgainstLeelaz) {"], [256, "                                Lizzie.board.place(line.substring(2));"], [257, "                            }"], [258, "                            isThinking = false;"], [259, "                        }"], [262, "            }"], [263, "        }"], [264, "    }"], [265, ""], [266, "    private void parseLineFailSafe(String line) {"], [267, "        synchronized (this) {"], [268, "            boolean isMoveDataLine = line.matches(\"(?s) *([A-T][0-9]+|pass) -> +[0-9].*\");"], [269, "            if (!isReadingPonderOutput && isMoveDataLine && !isWaitingToStartPonder) {"], [270, "                if (System.currentTimeMillis() - startPonderTime > maxAnalyzeTimeMillis) {"], [271, "                    // we have pondered for enough time. pause pondering"], [272, "                    togglePonder();"], [275, "                isReadingPonderOutput = true;"], [276, "                bestMovesTemp = new ArrayList<>();"], [277, "                parseMoveDataLine(line);"], [278, "            } else if (isReadingPonderOutput && !isMoveDataLine && !isWaitingToStartPonder) {"], [279, "                isReadingPonderOutput = false;"], [280, "                bestMoves = bestMovesTemp;"], [282, "                notifyBestMoveListeners();"], [284, "                if (Lizzie.frame != null) Lizzie.frame.repaint();"], [285, "                if (isPondering) {"], [286, "                    startPonder();"], [287, "                }"], [288, "            } else {"], [290, "                if (isReadingPonderOutput && !isWaitingToStartPonder) {"], [291, "                    parseMoveDataLine(line);"], [292, "                } else {"], [293, "                    if (printCommunication) {"], [294, "                        System.out.print(line);"], [296, ""], [297, "                    line = line.trim();"], [298, "                    if (Lizzie.frame != null && line.startsWith(\"=\") && line.length() > 2) {"], [299, ""], [300, "                        if (isWaitingToStartPonder) {"], [301, "                            // Now we can tell it to actually start pondering"], [302, "                            startPonder();"], [303, "                        }"], [304, ""], [305, "                        if (isSettingHandicap) {"], [306, "                            line = line.substring(2);"], [307, "                            String[] stones = line.split(\" \");"], [308, "                            for (String stone : stones) {"], [309, "                                int[] coordinates = Lizzie.board.convertNameToCoordinates(stone);"], [310, "                                Lizzie.board.getHistory().setStone(coordinates, Stone.BLACK);"], [311, "                            }"], [312, "                            isSettingHandicap = false;"], [313, "                        } else if (isThinking) {"], [314, "                            if (Lizzie.frame.isPlayingAgainstLeelaz && line.matches(\"(?s)= ([A-T][0-9]+|pass).*\")) {"], [315, "                                Lizzie.board.place(line.substring(2));"], [316, "                                isThinking = false;"], [317, "                            }"], [318, "                        }"], [345, "     * Tell Leelaz to start pondering"], [346, "     *"], [347, "     */"], [348, "    private void startPonder() {"], [349, "        sendCommand(\"time_left b 0 0\");"], [350, "        isWaitingToStartPonder = false;"], [351, "        Timer ponderStopTimer = new Timer();"], [352, "        ponderStopTimer.schedule(new ponderStopTask(), 1000);"], [353, "    }"], [354, ""], [355, "    class ponderStopTask extends TimerTask {"], [356, "        public void run() {"], [357, "            // Send any command to terminate pondering."], [358, "            sendCommand(\"name\");"], [359, "            isReadingPonderOutput = false;"], [360, "        }"], [361, "    }"], [362, ""], [363, "    /**"], [399, "        if (command.startsWith(\"genmove\"))"], [400, "            isThinking = true;"], [449, "        isWaitingToStartPonder = true;"], [451, "        sendCommand(\"name\");    // until it responds to this, incoming ponder results are obsolete"]]}, "num_lines_added": 75, "num_lines_removed": 206}