{"hash": "b4b6dfc30ad980e4388b8a0c9a039707d8601a87", "message": "Don't display nonexistent info in winrate bar", "file_num_lines": 473, "diff_parsed": {"added": [[19, "import wagner.stephanie.lizzie.rules.BoardData;"], [454, "        double lastWR = 50;     // winrate the previous move"], [455, "        boolean validLastWinrate = false; // whether it was actually calculated"], [456, "        BoardData lastNode = Lizzie.board.getHistory().getPrevious();"], [457, "        if (lastNode != null && lastNode.playouts > 0) {"], [458, "            lastWR = lastNode.winrate;"], [459, "            validLastWinrate = true;"], [460, "        }"], [463, "        double curWR = stats.maxWinrate; // winrate on this move"], [464, "        boolean validWinrate = (stats.totalPlayouts > 0); // and whether it was actually calculated"], [466, "            validWinrate = false;"], [468, "        if (!validWinrate) {"], [469, "            curWR = 100 - lastWR; // display last move's winrate for now (with color difference)"], [487, "        g.drawLine(posX + strokeRadius, posY + strokeRadius,"], [488, "                   posX - strokeRadius + width, posY + strokeRadius);"], [489, "        g.drawLine(posX + strokeRadius, posY + 3 * strokeRadius,"], [490, "                   posX + strokeRadius, posY - strokeRadius + height);"], [491, "        g.drawLine(posX - strokeRadius + width, posY + 3 * strokeRadius,"], [492, "                   posX - strokeRadius + width, posY - strokeRadius + height);"], [508, "        if (validLastWinrate && validWinrate)"], [509, "            g.drawString(resourceBundle.getString(\"LizzieFrame.display.lastMove\") +"], [510, "                         String.format(\": %.1f%%\", 100 - lastWR - curWR),"], [511, "                         posX + 2 * strokeRadius,"], [512, "                         posY + height - 2 * strokeRadius); // - font.getSize());"], [513, "        else {"], [514, "            // I think it's more elegant to just not display anything when we don't have"], [515, "            // valid data --dfannius"], [516, "            // g.drawString(resourceBundle.getString(\"LizzieFrame.display.lastMove\") + \": ?%\","], [517, "            //              posX + 2 * strokeRadius, posY + height - 2 * strokeRadius);"], [518, "        }"], [520, "        if (validWinrate || validLastWinrate) {"], [521, "            int maxBarwidth = (int) (width);"], [522, "            int barWidthB = (int) (blackWR * maxBarwidth / 100);"], [523, "            int barWidthW = (int) (whiteWR * maxBarwidth / 100);"], [524, "            int barPosY = posY + height / 3;"], [525, "            int barPosxB = (int) (posX);"], [526, "            int barPosxW = barPosxB + barWidthB;"], [527, "            int barHeight = height / 3;"], [528, ""], [529, "            // Draw winrate bars"], [530, "            g.fillRect(barPosxW, barPosY, barWidthW, barHeight);"], [531, "            g.setColor(Color.BLACK);"], [532, "            g.fillRect(barPosxB, barPosY, barWidthB, barHeight);"], [533, ""], [534, "            // Show percentage above bars"], [535, "            g.setColor(Color.WHITE);"], [536, "            g.drawString(String.format(\"%.1f%%\", blackWR),"], [537, "                         barPosxB + 2 * strokeRadius,"], [538, "                         posY + barHeight - 2 * strokeRadius);"], [539, "            String winString = String.format(\"%.1f%%\", whiteWR);"], [540, "            int sw = g.getFontMetrics().stringWidth(winString);"], [541, "            g.drawString(winString,"], [542, "                         barPosxB + maxBarwidth - sw - 2 * strokeRadius,"], [543, "                         posY + barHeight - 2 * strokeRadius);"], [544, ""], [545, "            g.setColor(Color.GRAY);"], [546, "            Stroke oldstroke = g.getStroke();"], [547, "            Stroke dashed = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0,"], [548, "                                            new float[]{4}, 0);"], [549, "            g.setStroke(dashed);"], [550, ""], [551, "            int middleX = barPosxB + (int) (maxBarwidth / 2);"], [552, "            g.drawLine(middleX, barPosY, middleX, barPosY + barHeight);"], [553, "            g.setStroke(oldstroke);"], [554, "        }"]], "deleted": [[453, "        double lastWR;"], [454, "        if (Lizzie.board.getData().moveNumber == 0)"], [455, "            lastWR = 50;"], [456, "        else"], [457, "            lastWR = Lizzie.board.getHistory().getPrevious().winrate;"], [460, "        double curWR = stats.maxWinrate;"], [462, "            curWR = -100;"], [464, "        if (curWR < 0) {"], [465, "            curWR = 100 - lastWR;"], [483, "        g.drawLine(posX + strokeRadius, posY + strokeRadius, posX - strokeRadius + width, posY + strokeRadius);"], [484, "        g.drawLine(posX + strokeRadius, posY + 3 * strokeRadius, posX + strokeRadius, posY - strokeRadius + height);"], [485, "        g.drawLine(posX - strokeRadius + width, posY + 3 * strokeRadius, posX - strokeRadius + width, posY - strokeRadius + height);"], [501, "        if (lastWR < 0)"], [502, "            // In case leelaz didnt have time to calculate"], [503, "            g.drawString(resourceBundle.getString(\"LizzieFrame.display.lastMove\") + \": ?%\", posX + 2 * strokeRadius, posY + height - 2 * strokeRadius);"], [504, "        else"], [505, "            g.drawString(resourceBundle.getString(\"LizzieFrame.display.lastMove\") + String.format(\": %.1f%%\", 100 - lastWR - curWR), posX + 2 * strokeRadius,"], [506, "                    posY + height - 2 * strokeRadius);// - font.getSize());"], [507, ""], [508, ""], [509, "        int maxBarwidth = (int) (width);"], [510, "        int barWidthB = (int) (blackWR * maxBarwidth / 100);"], [511, "        int barWidthW = (int) (whiteWR * maxBarwidth / 100);"], [512, "        int barPosY = posY + height / 3;"], [513, "        int barPosxB = (int) (posX);"], [514, "        int barPosxW = barPosxB + barWidthB;"], [515, "        int barHeight = height / 3;"], [516, ""], [517, "        // Draw winrate bars"], [518, "        g.fillRect(barPosxW, barPosY, barWidthW, barHeight);"], [519, "        g.setColor(Color.BLACK);"], [520, "        g.fillRect(barPosxB, barPosY, barWidthB, barHeight);"], [522, "        // Show percentage above bars"], [523, "        g.setColor(Color.WHITE);"], [524, "        g.drawString(String.format(\"%.1f%%\", blackWR), barPosxB + 2 * strokeRadius, posY + barHeight - 2 * strokeRadius);"], [525, "        String winString = String.format(\"%.1f%%\", whiteWR);"], [526, "        int sw = g.getFontMetrics().stringWidth(winString);"], [527, "        g.drawString(winString, barPosxB + maxBarwidth - sw - 2 * strokeRadius, posY + barHeight - 2 * strokeRadius);"], [528, ""], [529, "        g.setColor(Color.GRAY);"], [530, "        Stroke oldstroke = g.getStroke();"], [531, "        Stroke dashed = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0,"], [532, "                new float[]{4}, 0);"], [533, "        g.setStroke(dashed);"], [534, ""], [535, "        int middleX = barPosxB + (int) (maxBarwidth / 2);"], [536, "        g.drawLine(middleX, barPosY, middleX, barPosY + barHeight);"], [537, "        g.setStroke(oldstroke);"]]}, "num_lines_added": 65, "num_lines_removed": 48}