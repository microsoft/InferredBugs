{"hash": "8512ebc4470fb16638b44c796612db3ed29ecf0f", "message": "Remove jar based theme infrastructure\n\nTo be replaced by #378", "file_num_lines": 730, "diff_parsed": {"added": [[19, "import java.io.IOException;"], [22, "import javax.imageio.ImageIO;"], [43, "    private BufferedImage cachedBoardImage = null;"], [44, "    private BufferedImage cachedWallpaperImage = null;"], [88, "        drawGoban(g);"], [157, "    private void drawGoban(Graphics2D g0) {"], [646, "            if  (cachedBoardImage == null) {"], [647, "                try {"], [648, "                    cachedBoardImage = ImageIO.read(getClass().getResourceAsStream(\"/assets/board.png\"));"], [649, "                } catch (IOException e) {"], [650, "                    e.printStackTrace();"], [651, "                }"], [652, "            }"], [653, ""], [655, "            drawTextureImage(g, cachedBoardImage, x - 2 * shadowRadius, y - 2 * shadowRadius, boardLength + 4 * shadowRadius, boardLength + 4 * shadowRadius);"], [767, "                g.drawImage(getScaleStone(isBlack, size), centerX - stoneRadius, centerY - stoneRadius, size, size, null);"], [783, "    private BufferedImage getScaleStone(boolean isBlack, int size) {"], [785, "        if (stone == null) {"], [786, "            stone = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);"], [787, "            String imgPath = isBlack ? \"/assets/black0.png\" : \"/assets/white0.png\";"], [788, "            Image img = null;"], [789, "            try {"], [790, "               img = ImageIO.read(getClass().getResourceAsStream(imgPath));"], [791, "            } catch (IOException e) {"], [792, "              e.printStackTrace();"], [793, "            }"], [795, "            g2.drawImage(img.getScaledInstance(size, size, java.awt.Image.SCALE_SMOOTH), 0, 0, null);"], [806, "    public BufferedImage getWallpaper() {"], [807, "      if (cachedWallpaperImage == null) {"], [808, "        try {"], [809, "            cachedWallpaperImage = ImageIO.read(getClass().getResourceAsStream(\"/assets/background.jpg\"));"], [810, "        } catch (IOException e) {"], [811, "            e.printStackTrace();"], [812, "        }"], [813, "      }"], [814, "      return cachedWallpaperImage;"], [815, "    }"], [816, ""]], "deleted": [[13, "import featurecat.lizzie.theme.DefaultTheme;"], [14, "import featurecat.lizzie.theme.ITheme;"], [54, "    public ITheme theme;"], [70, "        theme = ITheme.loadTheme(uiConfig.getString(\"theme\"));"], [71, "        if (theme == null) {"], [72, "            theme = new DefaultTheme();"], [73, "        }"], [91, "        drawBackground(g);"], [160, "    private void drawBackground(Graphics2D g0) {"], [649, "            // fancy version"], [651, "            BufferedImage boardImage = theme.getBoard();"], [652, "            // Support seamless texture"], [653, "            drawTextureImage(g, boardImage == null ? theme.getBoard() : boardImage, x - 2 * shadowRadius, y - 2 * shadowRadius, boardLength + 4 * shadowRadius, boardLength + 4 * shadowRadius);"], [662, "            // simple version"], [765, "                Image stone = isBlack ? theme.getBlackStone(new int[]{x, y}) : theme.getWhiteStone(new int[]{x, y});"], [767, "                g.drawImage(getScaleStone(stone, isBlack, size, size), centerX - stoneRadius, centerY - stoneRadius, size, size, null);"], [783, "    public BufferedImage getScaleStone(Image img, boolean isBlack, int width, int height) {"], [785, "        if (stone == null || stone.getWidth() != width || stone.getHeight() != height) {"], [786, "            stone = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);"], [788, "            g2.drawImage(img.getScaledInstance(width, height, java.awt.Image.SCALE_SMOOTH), 0, 0, null);"]]}, "num_lines_added": 38, "num_lines_removed": 20}