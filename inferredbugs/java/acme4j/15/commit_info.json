{"hash": "1297ca4de277124c92f52c87ab63a4476409ecad", "message": "Send POST-as-GET requests", "file_num_lines": 787, "diff_parsed": {"added": [[667, "     * Test signed POST requests."], [670, "    public void testSendSignedRequest() throws Exception {"], [671, "        final String nonce1 = Base64Url.encode(\"foo-nonce-1-foo\".getBytes());"], [672, "        final String nonce2 = Base64Url.encode(\"foo-nonce-2-foo\".getBytes());"], [673, "        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();"], [674, ""], [676, "        when(mockUrlConnection.getOutputStream()).thenReturn(outputStream);"], [678, "        try (DefaultConnection conn = new DefaultConnection(mockHttpConnection) {"], [679, "            @Override"], [680, "            public void resetNonce(Session session) {"], [681, "                assertThat(session, is(sameInstance(DefaultConnectionTest.this.session)));"], [682, "                if (session.getNonce() == null) {"], [683, "                    session.setNonce(nonce1);"], [684, "                } else {"], [685, "                    fail(\"unknown nonce\");"], [686, "                }"], [687, "            }"], [688, ""], [689, "            @Override"], [690, "            public String getNonce() {"], [691, "                assertThat(session, is(sameInstance(DefaultConnectionTest.this.session)));"], [692, "                if (session.getNonce() == nonce1) {"], [693, "                    return nonce2;"], [694, "                } else {"], [695, "                    fail(\"unknown nonce\");"], [696, "                    return null;"], [697, "                }"], [698, "            }"], [699, "        }) {"], [700, "            JSONBuilder cb = new JSONBuilder();"], [701, "            cb.put(\"foo\", 123).put(\"bar\", \"a-string\");"], [702, "            conn.sendSignedRequest(requestUrl, cb, login);"], [705, "        verify(mockUrlConnection).setRequestMethod(\"POST\");"], [706, "        verify(mockUrlConnection).setRequestProperty(\"Accept\", \"application/json\");"], [709, "        verify(mockUrlConnection).setRequestProperty(\"Content-Type\", \"application/jose+json\");"], [711, "        verify(mockUrlConnection).setDoOutput(true);"], [712, "        verify(mockUrlConnection).setFixedLengthStreamingMode(outputStream.toByteArray().length);"], [714, "        verify(mockUrlConnection).getOutputStream();"], [717, ""], [718, "        JSON data = JSON.parse(new String(outputStream.toByteArray(), \"utf-8\"));"], [719, "        String encodedHeader = data.get(\"protected\").asString();"], [720, "        String encodedSignature = data.get(\"signature\").asString();"], [721, "        String encodedPayload = data.get(\"payload\").asString();"], [722, ""], [723, "        StringBuilder expectedHeader = new StringBuilder();"], [724, "        expectedHeader.append('{');"], [725, "        expectedHeader.append(\"\\\"nonce\\\":\\\"\").append(nonce1).append(\"\\\",\");"], [726, "        expectedHeader.append(\"\\\"url\\\":\\\"\").append(requestUrl).append(\"\\\",\");"], [727, "        expectedHeader.append(\"\\\"alg\\\":\\\"RS256\\\",\");"], [728, "        expectedHeader.append(\"\\\"kid\\\":\\\"\").append(accountUrl).append('\"');"], [729, "        expectedHeader.append('}');"], [730, ""], [731, "        assertThat(Base64Url.decodeToUtf8String(encodedHeader), sameJSONAs(expectedHeader.toString()));"], [732, "        assertThat(Base64Url.decodeToUtf8String(encodedPayload), sameJSONAs(\"{\\\"foo\\\":123,\\\"bar\\\":\\\"a-string\\\"}\"));"], [733, "        assertThat(encodedSignature, not(isEmptyOrNullString()));"], [734, ""], [735, "        JsonWebSignature jws = new JsonWebSignature();"], [736, "        jws.setCompactSerialization(CompactSerializer.serialize(encodedHeader, encodedPayload, encodedSignature));"], [737, "        jws.setKey(login.getKeyPair().getPublic());"], [738, "        assertThat(jws.verifySignature(), is(true));"], [742, "     * Test signed POST-as-GET requests."], [745, "    public void testSendSignedPostAsGetRequest() throws Exception {"], [775, "            conn.sendSignedPostAsGetRequest(requestUrl, login);"], [805, "        assertThat(Base64Url.decodeToUtf8String(encodedPayload), is(\"\"));"], [815, "     * Test certificate POST-as-GET requests."], [816, "     */"], [817, "    @Test"], [818, "    public void testSendCertificateRequest() throws Exception {"], [819, "        final String nonce1 = Base64Url.encode(\"foo-nonce-1-foo\".getBytes());"], [820, "        final String nonce2 = Base64Url.encode(\"foo-nonce-2-foo\".getBytes());"], [821, "        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();"], [822, ""], [823, "        when(mockUrlConnection.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);"], [824, "        when(mockUrlConnection.getOutputStream()).thenReturn(outputStream);"], [825, ""], [826, "        try (DefaultConnection conn = new DefaultConnection(mockHttpConnection) {"], [827, "            @Override"], [828, "            public void resetNonce(Session session) {"], [829, "                assertThat(session, is(sameInstance(DefaultConnectionTest.this.session)));"], [830, "                if (session.getNonce() == null) {"], [831, "                    session.setNonce(nonce1);"], [832, "                } else {"], [833, "                    fail(\"unknown nonce\");"], [834, "                }"], [835, "            }"], [836, ""], [837, "            @Override"], [838, "            public String getNonce() {"], [839, "                assertThat(session, is(sameInstance(DefaultConnectionTest.this.session)));"], [840, "                if (session.getNonce() == nonce1) {"], [841, "                    return nonce2;"], [842, "                } else {"], [843, "                    fail(\"unknown nonce\");"], [844, "                    return null;"], [845, "                }"], [846, "            }"], [847, "        }) {"], [848, "            conn.sendCertificateRequest(requestUrl, login);"], [849, "        }"], [850, ""], [851, "        verify(mockUrlConnection).setRequestMethod(\"POST\");"], [852, "        verify(mockUrlConnection).setRequestProperty(\"Accept\", \"application/pem-certificate-chain\");"], [853, "        verify(mockUrlConnection).setRequestProperty(\"Accept-Charset\", \"utf-8\");"], [854, "        verify(mockUrlConnection).setRequestProperty(\"Accept-Language\", \"ja-JP\");"], [855, "        verify(mockUrlConnection).setRequestProperty(\"Content-Type\", \"application/jose+json\");"], [856, "        verify(mockUrlConnection).setDoOutput(true);"], [857, "        verify(mockUrlConnection).connect();"], [858, "        verify(mockUrlConnection).setFixedLengthStreamingMode(outputStream.toByteArray().length);"], [859, "        verify(mockUrlConnection).getResponseCode();"], [860, "        verify(mockUrlConnection).getOutputStream();"], [861, "        verify(mockUrlConnection, atLeast(0)).getHeaderFields();"], [862, "        verifyNoMoreInteractions(mockUrlConnection);"], [863, "    }"], [864, ""], [865, "    /**"]], "deleted": [[667, "     * Test certificate GET requests."], [670, "    public void testSendCertificateRequest() throws Exception {"], [673, "        try (DefaultConnection conn = new DefaultConnection(mockHttpConnection)) {"], [674, "            conn.sendCertificateRequest(requestUrl, session);"], [677, "        verify(mockUrlConnection).setRequestMethod(\"GET\");"], [678, "        verify(mockUrlConnection).setRequestProperty(\"Accept\", \"application/pem-certificate-chain\");"], [681, "        verify(mockUrlConnection).setDoOutput(false);"], [689, "     * Test signed POST requests."], [692, "    public void testSendSignedRequest() throws Exception {"], [722, "            JSONBuilder cb = new JSONBuilder();"], [723, "            cb.put(\"foo\", 123).put(\"bar\", \"a-string\");"], [724, "            conn.sendSignedRequest(requestUrl, cb, login);"], [754, "        assertThat(Base64Url.decodeToUtf8String(encodedPayload), sameJSONAs(\"{\\\"foo\\\":123,\\\"bar\\\":\\\"a-string\\\"}\"));"]]}, "num_lines_added": 115, "num_lines_removed": 13}