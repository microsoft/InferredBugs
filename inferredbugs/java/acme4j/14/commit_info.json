{"hash": "7093fe7e9229f2606e0b07fa9ba8b9389a606eca", "message": "Add JSR305 annotations\n\nAlso fix FindBugs errors about possible null pointer dereferences.\n\nNull-aware languages like Kotlin can now enjoy null-checks.", "file_num_lines": 396, "diff_parsed": {"added": [[40, "import javax.annotation.CheckForNull;"], [41, "import javax.annotation.Nullable;"], [42, "import javax.annotation.ParametersAreNonnullByDefault;"], [43, ""], [67, "@ParametersAreNonnullByDefault"], [171, "    private int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair, @Nullable URL accountLocation)"], [197, "    @CheckForNull"], [259, "    @CheckForNull"], [278, "    @CheckForNull"], [319, "    private int performRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair,"], [320, "                @Nullable URL accountLocation)"], [424, "            JSON problemJson = readJsonResponse();"], [425, "            if (problemJson == null) {"], [426, "                throw new AcmeProtocolException(\"Empty problem response\");"], [428, "            Problem problem = new Problem(problemJson, conn.getURL());"], [526, "    @CheckForNull"], [527, "    private URL resolveRelative(@Nullable String link) {"], [548, "    @CheckForNull"], [549, "    private URI resolveUri(@Nullable String uri) {"]], "deleted": [[166, "    private int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair, URL accountLocation)"], [311, "    private int performRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair, URL accountLocation)"], [415, "            Problem problem = new Problem(readJsonResponse(), conn.getURL());"], [416, ""], [417, "            if (problem.getType() == null) {"], [418, "                throw new AcmeException(problem.getDetail());"], [517, "    private URL resolveRelative(String link) {"], [538, "    private URI resolveUri(String uri) {"]]}, "num_lines_added": 19, "num_lines_removed": 8}