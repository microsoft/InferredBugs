{"hash": "7d83ef0e807ba103f12707e77ac764ec844f51a0", "message": "Add pre-authorization support", "file_num_lines": 404, "diff_parsed": {"added": [[44, "import org.shredzone.acme4j.exception.AcmeServerException;"], [255, "     * Test that a domain can be pre-authorized."], [258, "    public void testPreAuthorizeDomain() throws Exception {"], [296, "        Authorization auth = registration.preAuthorizeDomain(domainName);"], [310, "     * Test that a domain pre-authorization can fail."], [311, "     */"], [312, "    @Test"], [313, "    public void testNoPreAuthorizeDomain() throws Exception {"], [314, "        URI problemType = URI.create(\"urn:ietf:params:acme:error:rejectedIdentifier\");"], [315, "        String problemDetail = \"example.org is blacklisted\";"], [316, ""], [317, "        TestableConnectionProvider provider = new TestableConnectionProvider() {"], [318, "            @Override"], [319, "            public void sendSignedRequest(URL url, JSONBuilder claims, Session session) {"], [320, "                assertThat(url, is(resourceUrl));"], [321, "                assertThat(claims.toString(), sameJSONAs(getJSON(\"newAuthorizationRequest\").toString()));"], [322, "                assertThat(session, is(notNullValue()));"], [323, "            }"], [324, ""], [325, "            @Override"], [326, "            public int accept(int... httpStatus) throws AcmeException {"], [327, "                Problem problem = TestUtils.createProblem(problemType, problemDetail, resourceUrl);"], [328, "                throw new AcmeServerException(problem);"], [329, "            }"], [330, "        };"], [331, ""], [332, "        Session session = provider.createSession();"], [333, ""], [334, "        provider.putTestResource(Resource.NEW_AUTHZ, resourceUrl);"], [335, ""], [336, "        Registration registration = new Registration(session, locationUrl);"], [337, ""], [338, "        try {"], [339, "            registration.preAuthorizeDomain(\"example.org\");"], [340, "            fail(\"preauthorization was accepted\");"], [341, "        } catch (AcmeServerException ex) {"], [342, "            assertThat(ex.getType(), is(problemType));"], [343, "            assertThat(ex.getMessage(), is(problemDetail));"], [344, "        }"], [345, ""], [346, "        provider.close();"], [347, "    }"], [348, ""], [349, "    /**"], [355, "        // just provide a resource record so the provider returns a directory"], [356, "        provider.putTestResource(Resource.NEW_NONCE, resourceUrl);"], [357, ""], [362, "            registration.preAuthorizeDomain(null);"], [369, "            registration.preAuthorizeDomain(\"\");"], [375, "        try {"], [376, "            registration.preAuthorizeDomain(\"example.com\");"], [377, "            fail(\"preauthorization was accepted\");"], [378, "        } catch (AcmeException ex) {"], [379, "            // expected"], [380, "            assertThat(ex.getMessage(), is(\"Server does not allow pre-authorization\"));"], [381, "        }"], [382, ""]], "deleted": [[254, "     * Test that a new {@link Authorization} can be created."], [257, "    public void testAuthorizeDomain() throws Exception {"], [295, "        Authorization auth = registration.authorizeDomain(domainName);"], [318, "            registration.authorizeDomain(null);"], [325, "            registration.authorizeDomain(\"\");"]]}, "num_lines_added": 57, "num_lines_removed": 5}