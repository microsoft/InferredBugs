    public static byte[] encodeInteger(Number number) {

        ByteBuffer iBuf = null;
        long longValue = number.longValue();
        if (longValue == Long.MIN_VALUE) {
            throw new IllegalArgumentException(
                    "Could not encode Long.MIN_VALUE, because of signed magnitude representation.");
        }

        long positiveValue = longValue < 0 ? -longValue : longValue;
        if (positiveValue <= Byte.MAX_VALUE) {
            iBuf = ByteBuffer.allocate(1);
            iBuf.put((byte) positiveValue);
        } else if (positiveValue <= Short.MAX_VALUE) {
            iBuf = ByteBuffer.allocate(2);
            iBuf.putShort((short) positiveValue);
        } else if (positiveValue <= Integer.MAX_VALUE) {
            iBuf = ByteBuffer.allocate(4);
            iBuf.putInt((int) positiveValue);
        } else if (positiveValue <= Long.MAX_VALUE) {
            iBuf = ByteBuffer.allocate(8);
            iBuf.putLong(positiveValue);
        }

        byte[] bytes = iBuf.array();
        // set the most significant bit to 1 if negative value
        if (number.longValue() < 0) {
            bytes[0] |= 0b1000_0000;
        }
        return bytes;
    }