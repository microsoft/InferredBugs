{"hash": "2fb88abcf5b5873301d4e5358866419944486ecc", "message": "#597:add a way to do atomic read/write/observe at instance enabler level", "file_num_lines": 255, "diff_parsed": {"added": [[143, "            for (LwM2mInstanceEnabler instance : instances.values()) {"], [144, "                ReadResponse response = instance.read(identity);"], [145, "                if (response.isSuccess()) {"], [146, "                    lwM2mObjectInstances.add((LwM2mObjectInstance) response.getContent());"], [147, "                }"], [158, "            return instance.read(identity);"], [172, "            for (LwM2mInstanceEnabler instance : instances.values()) {"], [173, "                ReadResponse response = instance.observe(identity);"], [174, "                if (response.isSuccess()) {"], [175, "                    lwM2mObjectInstances.add((LwM2mObjectInstance) response.getContent());"], [176, "                }"], [187, "            return instance.observe(identity);"], [204, "            return instance.write(identity, request.isReplaceRequest(), (LwM2mObjectInstance) request.getNode());"]], "deleted": [[28, "import org.eclipse.leshan.ResponseCode;"], [32, "import org.eclipse.leshan.core.model.ResourceModel;"], [145, "            for (Entry<Integer, LwM2mInstanceEnabler> entry : instances.entrySet()) {"], [146, "                lwM2mObjectInstances.add(getLwM2mObjectInstance(entry.getKey(), entry.getValue(), identity, false));"], [157, "            return ReadResponse.success(getLwM2mObjectInstance(path.getObjectInstanceId(), instance, identity, false));"], [171, "            for (Entry<Integer, LwM2mInstanceEnabler> entry : instances.entrySet()) {"], [172, "                lwM2mObjectInstances.add(getLwM2mObjectInstance(entry.getKey(), entry.getValue(), identity, true));"], [183, "            return ObserveResponse"], [184, "                    .success(getLwM2mObjectInstance(path.getObjectInstanceId(), instance, identity, true));"], [191, "    LwM2mObjectInstance getLwM2mObjectInstance(int instanceid, LwM2mInstanceEnabler instance, ServerIdentity identity,"], [192, "            boolean observe) {"], [193, "        List<LwM2mResource> resources = new ArrayList<>();"], [194, "        for (ResourceModel resourceModel : getObjectModel().resources.values()) {"], [195, "            // check, if internal request (SYSTEM) or readable"], [196, "            if (identity.isSystem() || resourceModel.operations.isReadable()) {"], [197, "                if (observe) {"], [198, "                    ObserveResponse response = instance.observe(identity, resourceModel.id);"], [199, "                    if (response.getCode() == ResponseCode.CONTENT && response.getContent() instanceof LwM2mResource)"], [200, "                        resources.add((LwM2mResource) response.getContent());"], [201, "                } else {"], [202, "                    ReadResponse response = instance.read(identity, resourceModel.id);"], [203, "                    if (response.getCode() == ResponseCode.CONTENT && response.getContent() instanceof LwM2mResource)"], [204, "                        resources.add((LwM2mResource) response.getContent());"], [205, "                }"], [206, "            }"], [207, "        }"], [208, "        return new LwM2mObjectInstance(instanceid, resources);"], [209, "    }"], [210, ""], [221, "            // instance write"], [222, "            Map<Integer, LwM2mResource> writeResources = ((LwM2mObjectInstance) request.getNode()).getResources();"], [223, "            if (request.isReplaceRequest()) {"], [224, "                // REPLACE"], [225, "                writeResources = new HashMap<>(writeResources); // make them modifiable"], [226, "                for (ResourceModel resourceModel : getObjectModel().resources.values()) {"], [227, "                    if (!identity.isLwm2mServer() || resourceModel.operations.isWritable()) {"], [228, "                        LwM2mResource writeResource = writeResources.remove(resourceModel.id);"], [229, "                        if (null != writeResource) {"], [230, "                            instance.write(identity, resourceModel.id, writeResource);"], [231, "                        } else {"], [232, "                            instance.reset(resourceModel.id);"], [233, "                        }"], [234, "                    }"], [235, "                }"], [236, "            }"], [237, "            // UPDATE and resources currently not in the model"], [238, "            for (LwM2mResource resource : writeResources.values()) {"], [239, "                instance.write(identity, resource.getId(), resource);"], [240, "            }"], [241, "            return WriteResponse.success();"]]}, "num_lines_added": 13, "num_lines_removed": 50}