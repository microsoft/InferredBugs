{"hash": "d3df2d5854fb55f65a8db44f4ecb4814148e495f", "message": "Delete deprecated dependency stack APIs.\n\nPiperOrigin-RevId: 338343877", "file_num_lines": 49, "diff_parsed": {"added": [[32, "  private final IdentityHashMap<Object, ConstructionContext<?>> constructionContexts ="], [33, "      new IdentityHashMap<>();"], [93, "  /**"], [94, "   * Used to set the current dependency."], [95, "   *"], [96, "   * <p>The currentDependency field is only used by InternalFactoryToProviderAdapter to propagate"], [97, "   * information to singleton scope. See comments in that class about alternatives."], [98, "   */"], [99, "  void setDependency(Dependency<?> dependency) {"]], "deleted": [[22, "import java.util.Map;"], [33, "  private final Map<Object, ConstructionContext<?>> constructionContexts ="], [34, "      new IdentityHashMap<Object, ConstructionContext<?>>();"], [40, "   * Keeps track of the hierarchy of types needed during injection."], [41, "   *"], [42, "   * <p>This is a pairwise combination of dependencies and sources, with dependencies or keys on"], [43, "   * even indices, and sources on odd indices. This structure is to avoid the memory overhead of"], [44, "   * DependencyAndSource objects, which can add to several tens of megabytes in large applications."], [45, "   */"], [46, "  private Object[] dependencyStack = new Object[16];"], [47, ""], [48, "  private int dependencyStackSize = 0;"], [49, ""], [50, "  /**"], [105, "  /** Sets the new current dependency & adds it to the state. */"], [106, "  Dependency<?> pushDependency(Dependency<?> dependency, Object source) {"], [107, "    Dependency<?> previous = this.dependency;"], [109, "    doPushState(dependency, source);"], [110, "    return previous;"], [111, "  }"], [112, ""], [113, "  /** Pops the current state & sets the new dependency. */"], [114, "  void popStateAndSetDependency(Dependency<?> newDependency) {"], [115, "    popState();"], [116, "    this.dependency = newDependency;"], [117, "  }"], [118, ""], [119, "  /** Adds to the state without setting the dependency. */"], [120, "  void pushState(com.google.inject.Key<?> key, Object source) {"], [121, "    doPushState(key, source);"], [122, "  }"], [123, ""], [124, "  private void doPushState(Object dependencyOrKey, Object source) {"], [125, "    int localSize = dependencyStackSize;"], [126, "    Object[] localStack = dependencyStack;"], [127, "    if (localStack.length < localSize + 2) {"], [128, "      localStack = dependencyStack ="], [129, "        java.util.Arrays.copyOf(localStack, (localStack.length * 3) / 2 + 2);"], [130, "    }"], [131, "    localStack[localSize++] = dependencyOrKey;"], [132, "    localStack[localSize++] = source;"], [133, "    dependencyStackSize = localSize;"], [134, "  }"], [135, ""], [136, "  /** Pops from the state without setting a dependency. */"], [137, "  void popState() {"], [138, "    // N.B. we don't null out the array entries.  It isn't necessary since all the objects in the"], [139, "    // array (Key, Dependency, or Binding source objects) are all tied to the lifetime of the"], [140, "    // injector, which is greater than the lifetime of this object.  So removing them from the array"], [141, "    // doesn't matter."], [142, "    dependencyStackSize -= 2;"], [143, "  }"], [144, ""], [145, "  /** Returns the current dependency chain (all the state stored in the dependencyStack). */"], [146, "  java.util.List<com.google.inject.spi.DependencyAndSource> getDependencyChain() {"], [147, "    com.google.common.collect.ImmutableList.Builder<com.google.inject.spi.DependencyAndSource>"], [148, "        builder = com.google.common.collect.ImmutableList.builder();"], [149, "    for (int i = 0; i < dependencyStackSize; i += 2) {"], [150, "      Object evenEntry = dependencyStack[i];"], [151, "      Dependency<?> dependency;"], [152, "      if (evenEntry instanceof com.google.inject.Key) {"], [153, "        dependency = Dependency.get((com.google.inject.Key<?>) evenEntry);"], [154, "      } else {"], [155, "        dependency = (Dependency<?>) evenEntry;"], [156, "      }"], [157, "      builder.add(new com.google.inject.spi.DependencyAndSource(dependency, dependencyStack[i + 1]));"], [158, "    }"], [159, "    return builder.build();"]]}, "num_lines_added": 9, "num_lines_removed": 68}