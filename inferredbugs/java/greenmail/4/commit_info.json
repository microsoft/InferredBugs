{"hash": "3b576ba4c47570e98254a7d42dd6d6a3dcbb7850", "message": "Issue #142 : Support attached message (message/rfc822)\n\n- Extended test for  validated forwarded and original message\n- Added (ugly) fix for mail attachment.\n\nFetchCommand and SimpleMessageAttributes require major cleanup work", "file_num_lines": 441, "diff_parsed": {"added": [[24, "import java.util.regex.Pattern;"], [38, "    private static final Flags FLAGS_SEEN = new Flags(Flags.Flag.SEEN);"], [39, "    private static final Pattern NUMBER_MATCHER = Pattern.compile(\"^\\\\d+$\");"], [224, "            if (contentType.toLowerCase().startsWith(\"text/plain\") && \"1\".equals(sectionSpecifier)) {"], [229, ""], [230, "                // Find part by number spec, eg \"1\" or \"2.1\" or \"4.3.1\" ..."], [231, "                String spec = sectionSpecifier;"], [232, ""], [233, "                int dotIdx = spec.indexOf('.');"], [234, "                String pre = dotIdx < 0 ? spec : spec.substring(0, dotIdx);"], [235, "                while (null != pre && NUMBER_MATCHER.matcher(pre).matches()) {"], [236, "                    int partNumber = Integer.parseInt(pre) - 1;"], [243, ""], [244, "                    dotIdx = spec.indexOf('.');"], [245, "                    if (dotIdx > 0) { // Another sub part index?"], [246, "                        spec = spec.substring(dotIdx + 1);"], [247, "                        pre = spec.substring(0, dotIdx);"], [248, "                    } else {"], [249, "                        pre = null;"], [250, "                    }"], [251, "                }"], [252, ""], [253, "                if (null == part) {"], [254, "                    throw new IllegalStateException(\"Got null for \" + sectionSpecifier);"], [255, "                }"], [256, ""], [257, "                // A bit optimistic to only cover theses cases ... TODO"], [258, "                if (\"message/rfc822\".equalsIgnoreCase(part.getContentType())) {"], [259, "                    handleBodyFetch((MimeMessage) part.getContent(), spec, partial, response);"], [260, "                } else if (\"TEXT\".equalsIgnoreCase(spec)) {"], [261, "                    handleBodyFetchForText(mimeMessage, partial, response);"], [262, "                } else {"], [263, "                    byte[] bytes = GreenMailUtil.getBodyAsBytes(part);"], [264, "                    bytes = doPartial(partial, bytes, response);"], [265, "                    addLiteral(bytes, response);"], [359, "        FetchRequest fetchRequest(ImapRequestLineReader request)"]], "deleted": [[37, "    static final Flags FLAGS_SEEN = new Flags(Flags.Flag.SEEN);"], [222, "            if (contentType.startsWith(\"text/plain\") && \"1\".equals(sectionSpecifier)) {"], [227, "                String[] nestedIdx = sectionSpecifier.split(\"\\\\.\");"], [228, "                for (String idx : nestedIdx) {"], [229, "                    int partNumber = Integer.parseInt(idx) - 1;"], [237, "                byte[] bytes = GreenMailUtil.getBodyAsBytes(part);"], [238, "                bytes = doPartial(partial, bytes, response);"], [239, "                addLiteral(bytes, response);"], [332, "        public FetchRequest fetchRequest(ImapRequestLineReader request)"]]}, "num_lines_added": 36, "num_lines_removed": 9}