{"hash": "7030f0fdd2c3e7b95dc6f6bcf597c5fd5b8877fb", "message": "Minor test refactoring", "file_num_lines": 93, "diff_parsed": {"added": [[13, "import org.junit.Before;"], [14, "import org.junit.Rule;"], [15, "import org.junit.Test;"], [16, ""], [17, "import static org.assertj.core.api.Assertions.assertThat;"], [23, "    public final GreenMailRule greenMail = new GreenMailRule(ServerSetupTest.POP3){"], [24, "        @Override"], [25, "        public void start() {"], [26, "            super.start();"], [27, "            System.out.println(\"Started\");"], [28, "        }"], [29, "    };"], [40, "    @FunctionalInterface"], [41, "    public interface ConnectionHandler {"], [42, "        void apply(PrintStream printStream, BufferedReader reader) throws IOException;"], [43, "    }"], [44, ""], [45, "    private void withConnection(ConnectionHandler handler) throws IOException {"], [48, "            try (PrintStream printStream = new PrintStream(socket.getOutputStream());"], [49, "                 final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {"], [50, "                handler.apply(printStream, reader);"], [51, "            }"], [52, "        }"], [53, "    }"], [55, "    @Test"], [56, "    public void authPlain() throws IOException {"], [57, "        withConnection((printStream, reader) -> {"], [63, "            try {"], [64, "                greenMail.getManagers().getUserManager()"], [65, "                        .createUser(\"test@localhost\", \"test\", \"testpass\");"], [66, "            } catch (UserException e) {"], [67, "                throw new IllegalStateException(e);"], [68, "            }"], [72, "            assertThat(reader.readLine()).isEqualTo(\"-ERR Authentication failed, expected base64 encoding : Last unit does not have enough valid bits\");"], [77, "        });"], [82, "        greenMail.getManagers().getUserManager()"], [83, "                .createUser(\"test@localhost\", \"test\", \"testpass\");"], [84, "        withConnection((printStream, reader) -> {"], [90, "        });"], [94, "    public void authDisabled() throws IOException {"], [95, "        greenMail.getManagers().getUserManager().setAuthRequired(false);"], [96, "        withConnection((printStream, reader) -> {"], [100, "        });"], [104, "    public void authEnabled() throws IOException {"], [105, "        greenMail.getManagers().getUserManager().setAuthRequired(true);"], [106, "        withConnection((printStream, reader) -> {"], [110, "        });"]], "deleted": [[3, "import static org.assertj.core.api.Assertions.assertThat;"], [4, ""], [11, "import javax.mail.MessagingException;"], [12, ""], [13, "import org.junit.Before;"], [14, "import org.junit.Rule;"], [15, "import org.junit.Test;"], [16, ""], [26, "    public final GreenMailRule greenMail = new GreenMailRule(ServerSetupTest.POP3);"], [37, "    @Test"], [38, "    public void authPlain() throws IOException, MessagingException, UserException {"], [41, "            PrintStream printStream = new PrintStream(socket.getOutputStream());"], [42, "            final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));"], [49, "            greenMail.getManagers().getUserManager().createUser(\"test@localhost\", \"test\", \"testpass\");"], [53, "            assertThat(reader.readLine()).isEqualTo("], [54, "                    \"-ERR Authentication failed, expected base64 encoding : Last unit does not have enough valid bits\");"], [59, "        }"], [64, "        try (Socket socket = new Socket(hostAddress, port)) {"], [65, "            assertThat(socket.isConnected()).isTrue();"], [66, "            PrintStream printStream = new PrintStream(socket.getOutputStream());"], [67, "            final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));"], [68, "            greenMail.getManagers().getUserManager().createUser(\"test@localhost\", \"test\", \"testpass\");"], [69, ""], [75, "        }"], [79, "    public void authDisabled() throws IOException, UserException {"], [80, "        try (Socket socket = new Socket(hostAddress, port)) {"], [81, "            assertThat(socket.isConnected()).isTrue();"], [82, "            PrintStream printStream = new PrintStream(socket.getOutputStream());"], [83, "            final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));"], [84, ""], [85, "            greenMail.getManagers().getUserManager().setAuthRequired(false);"], [86, ""], [90, "        }"], [94, "    public void authEnabled() throws IOException, UserException {"], [95, "        try (Socket socket = new Socket(hostAddress, port)) {"], [96, "            assertThat(socket.isConnected()).isTrue();"], [97, "            PrintStream printStream = new PrintStream(socket.getOutputStream());"], [98, "            final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));"], [99, ""], [100, "            greenMail.getManagers().getUserManager().setAuthRequired(true);"], [101, ""], [105, "        }"]]}, "num_lines_added": 47, "num_lines_removed": 42}