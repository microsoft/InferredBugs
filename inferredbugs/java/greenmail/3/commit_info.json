{"hash": "b003a555cabbc46421c4efcd719bfd51f0f317d9", "message": "Issue #43: Fix threading issue\n\nAlways close server socket in run loop.\n\nPreviously, GreenMail only closed server socket when stopping the server.\nThis sometimes did not work when repeatedly starting/stopping the server using Circle CI (see Issue #69).", "file_num_lines": 239, "diff_parsed": {"added": [[72, "                if (log.isTraceEnabled()) {"], [83, "        try {"], [84, "            initServerSocket();"], [86, "            if (log.isDebugEnabled()) {"], [87, "                log.debug(\"Started \" + getName());"], [88, "            }"], [90, "            // Handle connections"], [91, "            while (keepOn()) {"], [92, "                try {"], [93, "                    Socket clientSocket = serverSocket.accept();"], [94, "                    if (!keepOn()) {"], [95, "                        clientSocket.close();"], [96, "                    } else {"], [97, "                        handleClientSocket(clientSocket);"], [98, "                    }"], [99, "                } catch (IOException ignored) {"], [100, "                    //ignored"], [101, "                    if (log.isTraceEnabled()) {"], [102, "                        log.trace(\"Error while processing client socket for \" + getName(), ignored);"], [103, "                    }"], [106, "        } finally {"], [107, "            closeServerSocket();"], [114, "            setRunning(true);"], [119, "        } finally {"], [120, "            // Notify everybody that we're ready to accept connections or failed to start."], [121, "            // Otherwise will run into startup timeout, see #waitTillRunning(long)."], [122, "            synchronized (startupMonitor) {"], [123, "                startupMonitor.notifyAll();"], [124, "            }"], [125, "        }"], [126, "    }"], [127, ""], [128, "    /**"], [129, "     * Closes the server socket."], [130, "     */"], [131, "    protected void closeServerSocket() {"], [132, "        // Close server socket, we do not accept new requests anymore."], [133, "        // This also terminates the server thread if blocking on socket.accept."], [134, "        if (null != serverSocket) {"], [135, "            try {"], [136, "                if (!serverSocket.isClosed()) {"], [137, "                    serverSocket.close();"], [138, "                    if (log.isTraceEnabled()) {"], [139, "                        log.trace(\"Closed server socket \" + serverSocket + \"/ref=\""], [140, "                                + Integer.toHexString(System.identityHashCode(serverSocket))"], [141, "                                + \" for \" + getName());"], [142, "                    }"], [143, "                }"], [144, "            } catch (IOException e) {"], [145, "                throw new IllegalStateException(\"Failed to successfully quit server \" + getName(), e);"], [146, "            }"], [187, "    /**"], [188, "     * Quits server by closing server socket and closing client socket handlers."], [189, "     */"], [194, "        closeServerSocket();"], [196, "        // Close all handlers. Handler threads terminate if run loop exits"], [197, "        synchronized (handlers) {"], [198, "            for (ProtocolHandler handler : handlers) {"], [199, "                handler.close();"], [201, "            handlers.clear();"], [202, "        }"], [203, "        if (log.isDebugEnabled()) {"], [204, "            log.debug(\"Stopped \" + getName());"]], "deleted": [[72, "                if(log.isTraceEnabled()) {"], [83, "        initServerSocket();"], [84, ""], [85, "        // Notify everybody that we're ready to accept connections"], [86, "        synchronized (startupMonitor) {"], [87, "            startupMonitor.notifyAll();"], [88, "        }"], [90, "        if (log.isDebugEnabled()) {"], [91, "            log.debug(\"Started \" + getName());"], [92, "        }"], [94, "        // Handle connections"], [95, "        while (keepOn()) {"], [96, "            try {"], [97, "                Socket clientSocket = serverSocket.accept();"], [98, "                if (!keepOn()) {"], [99, "                    clientSocket.close();"], [100, "                } else {"], [101, "                    handleClientSocket(clientSocket);"], [102, "                }"], [103, "            } catch (IOException ignored) {"], [104, "                //ignored"], [105, "                if (log.isTraceEnabled()) {"], [106, "                    log.trace(\"Error while processing client socket for \" + getName(), ignored);"], [120, "        setRunning(true);"], [164, "        try {"], [165, "            // Close server socket, we do not accept new requests anymore."], [166, "            // This also terminates the server thread if blocking on socket.accept."], [167, "            if (null != serverSocket) {"], [168, "                serverSocket.close();"], [169, "                serverSocket = null;"], [170, "            }"], [172, "            // Close all handlers. Handler threads terminate if run loop exits"], [173, "            synchronized (handlers) {"], [174, "                for (ProtocolHandler handler : handlers) {"], [175, "                    handler.close();"], [176, "                }"], [177, "                handlers.clear();"], [178, "            }"], [179, "            if (log.isDebugEnabled()) {"], [180, "                log.debug(\"Stopped \" + getName());"], [182, "        } catch (IOException e) {"], [183, "            throw new IllegalStateException(\"Failed to successfully quit server \" + getName(), e);"]]}, "num_lines_added": 63, "num_lines_removed": 42}