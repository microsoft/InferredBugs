{"hash": "8847099e23cdcf0ddc701c8a094c90b14d8de005", "message": "Issue #43 : Working on threading issue and server cleanup\n\n- Refactored Service into interface, as AbstractServer is the base implmentation.\n- Cleaned up Service methods (unused params etc.)\n- Switched startup loop-sleep-wait-with-timeout into notify-wait and simplified GreenMail#start()", "file_num_lines": 180, "diff_parsed": {"added": [[25, "public abstract class AbstractServer extends Thread implements Service {"], [31, "    private final List<ProtocolHandler> handlers = Collections.synchronizedList(new ArrayList<ProtocolHandler>());"], [66, "                    wait(10L);"], [68, "                    if (log.isDebugEnabled()) {"], [88, "            synchronized (startupMonitor) {"], [89, "                startupMonitor.notifyAll();"], [90, "            }"], [107, "                            // Make sure to deregister, see https://github.com/greenmail-mail-test/greenmail/issues/18"], [114, "                if (log.isTraceEnabled()) {"], [146, "            if (null != serverSocket) {"], [147, "                if (!serverSocket.isClosed()) {"], [153, "            throw new IllegalStateException(e);"], [176, ""], [177, "    private final Object startupMonitor = new Object();"], [178, "    @Override"], [179, "    public void waitTillRunning(long timeoutInMs) throws InterruptedException {"], [180, "        synchronized (startupMonitor) {"], [181, "            startupMonitor.wait(timeoutInMs);"], [182, "        }"], [183, "    }"], [184, ""], [185, "    private volatile boolean keepRunning = false;"], [186, "    private volatile boolean running = false;"], [187, ""], [188, "    public boolean isRunning() {"], [189, "        return running;"], [190, "    }"], [191, ""], [192, "    protected void setRunning(boolean r) {"], [193, "        this.running = r;"], [194, "    }"], [195, ""], [196, "    final protected boolean keepOn() {"], [197, "        return keepRunning;"], [198, "    }"], [199, ""], [200, "    @Override"], [201, "    public synchronized void startService() {"], [202, "        if (!keepRunning) {"], [203, "            keepRunning = true;"], [204, "            start();"], [205, "        }"], [206, "    }"], [207, ""], [208, ""], [209, "    /**"], [210, "     * Stops the service. If a timeout is given and the service has still not"], [211, "     * gracefully been stopped after timeout ms the service is stopped by force."], [212, "     *"], [213, "     * @param millis value in ms"], [214, "     */"], [215, "    @Override"], [216, "    public synchronized final void stopService(long millis) {"], [217, "        running = false;"], [218, "        try {"], [219, "            if (keepRunning) {"], [220, "                keepRunning = false;"], [221, "                interrupt();"], [222, "                quit();"], [223, "                if (0L == millis) {"], [224, "                    join();"], [225, "                } else {"], [226, "                    join(millis);"], [227, "                }"], [228, "            }"], [229, "        } catch (InterruptedException e) {"], [230, "            //its possible that the thread exits between the lines keepRunning=false and interrupt above"], [231, "            log.warn(\"Got interrupted while stopping\", e);"], [232, "        }"], [233, "    }"], [234, ""], [235, "    /**"], [236, "     * Stops the service (without timeout)."], [237, "     */"], [238, "    @Override"], [239, "    public final void stopService() {"], [240, "        stopService(0L);"], [241, "    }"]], "deleted": [[25, "public abstract class AbstractServer extends Service {"], [31, "    private List<ProtocolHandler> handlers = Collections.synchronizedList(new ArrayList<ProtocolHandler>());"], [66, "                    Thread.sleep(10L);"], [68, "                    if(log.isDebugEnabled()) {"], [104, "                             // Make sure to deregister, see https://github.com/greenmail-mail-test/greenmail/issues/18"], [111, "                if(log.isTraceEnabled()) {"], [136, "    @Override"], [144, "        } catch (Exception e) {"], [145, "            throw new RuntimeException(e);"], [146, "        }"], [147, ""], [148, "        try {"], [149, "            if (null != serverSocket ) {"], [150, "                if(!serverSocket.isClosed()) {"], [156, "            throw new RuntimeException(e);"]]}, "num_lines_added": 78, "num_lines_removed": 15}