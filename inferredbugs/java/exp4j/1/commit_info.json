{"hash": "b0191a4545fde31aa66fe4d22ac7821fa0c154d4", "message": "added CustomFunction with variable arguments\\nThis is a broken commit since mutliargumetn functions wont work as intended", "file_num_lines": 344, "diff_parsed": {"added": [[19, "\t\t\tpublic double applyFunction(double ...values) {"], [20, "\t\t\t\treturn values[0] * Math.PI;"], [32, "\t\t\tpublic double applyFunction(double ... values) {"], [33, "\t\t\t\treturn Math.log(Math.log(values[0]));"], [45, "\t\t\tpublic double applyFunction(double ... values) {"], [46, "\t\t\t\treturn values[0] * Math.E;"], [51, "\t\t\tpublic double applyFunction(double ... values) {"], [52, "\t\t\t\treturn values[0] * Math.PI;"], [64, "\t\t\tpublic double applyFunction(double ... values) {"], [65, "\t\t\t\treturn values[0] * Math.E;"], [78, "\t\t\tpublic double applyFunction(double ... values) {"], [79, "\t\t\t\treturn values[0] * Math.E;"], [84, "\t\t\tpublic double applyFunction(double ... values) {"], [85, "\t\t\t\treturn values[0] * Math.PI;"], [98, "\t\t\tpublic double applyFunction(double ... values) {"], [99, "\t\t\t\treturn values[0] * Math.E;"], [104, "\t\t\tpublic double applyFunction(double ... values) {"], [105, "\t\t\t\treturn values[0] * Math.PI;"], [118, "\t\t\tpublic double applyFunction(double ... values) {"], [119, "\t\t\t\treturn values[0]/2;"], [130, "\t\t\tpublic double applyFunction(double ... values) {"], [131, "\t\t\t\treturn values[0]/2;"], [138, "    @Test"], [139, "    public void testCustomFunction10() throws Exception {"], [140, "        CustomFunction custom1 = new CustomFunction(\"max\",2) {"], [141, "            @Override"], [142, "            public double applyFunction(double ... values) {"], [143, "                return values[0] < values[1] ? values[1] : values[0];"], [144, "            }"], [145, "        };"], [146, "        Calculable calc = new ExpressionBuilder(\"max(x,y)\").withVariable(\"x\", 1d).withVariable(\"y\", 2).withCustomFunction(custom1).build();"], [147, "        assertTrue(2 == calc.calculate());"], [148, "    }"], [149, ""], [150, "    @Test"], [151, "    public void testCustomFunction11() throws Exception {"], [152, "        CustomFunction custom1 = new CustomFunction(\"power\",2) {"], [153, "            @Override"], [154, "            public double applyFunction(double ... values) {"], [155, "                return Math.pow(values[0],values[1]);"], [156, "            }"], [157, "        };"], [158, "        Calculable calc = new ExpressionBuilder(\"power(x,y)\").withVariable(\"x\", 2d).withVariable(\"y\", 4d).withCustomFunction(custom1).build();"], [159, "        assertTrue(Math.pow(2,4) == calc.calculate());"], [160, "    }"], [161, ""], [162, "    @Test"], [163, "    public void testCustomFunction12() throws Exception {"], [164, "        CustomFunction custom1 = new CustomFunction(\"max\",5) {"], [165, "            @Override"], [166, "            public double applyFunction(double ... values) {"], [167, "                double max=values[0];"], [168, "                for (int i=1;i<this.getArgumentCount();i++) {"], [169, "                    if (values[i] > max) {"], [170, "                        max=values[i];"], [171, "                    }"], [172, "                }"], [173, "                return max;"], [174, "            }"], [175, "        };"], [176, "        Calculable calc = new ExpressionBuilder(\"max(1,2.43311,51.13,43,12)\").withCustomFunction(custom1).build();"], [177, "        assertTrue(51.13d == calc.calculate());"], [178, "    }"], [179, ""], [180, "    @Test"], [181, "    public void testCustomFunction13() throws Exception {"], [182, "        CustomFunction custom1 = new CustomFunction(\"max\",3) {"], [183, "            @Override"], [184, "            public double applyFunction(double ... values) {"], [185, "                double max=values[0];"], [186, "                for (int i=1;i<this.getArgumentCount();i++) {"], [187, "                    if (values[i] > max) {"], [188, "                        max=values[i];"], [189, "                    }"], [190, "                }"], [191, "                return max;"], [192, "            }"], [193, "        };"], [194, "        double varX=Math.E;"], [195, "        Calculable calc = new ExpressionBuilder(\"max(log(x),sin(x),x)\").withVariable(\"x\", varX).withCustomFunction(custom1).build();"], [196, "        assertTrue(varX == calc.calculate());"], [197, "    }"], [198, ""], [199, "    @Test"], [200, "    public void testCustomFunction14() throws Exception {"], [201, "        CustomFunction custom1 = new CustomFunction(\"multiply\",2) {"], [202, "            @Override"], [203, "            public double applyFunction(double ... values) {"], [204, "                return values[0] * values[1];"], [205, "            }"], [206, "        };"], [207, "        double varX=1;"], [208, "        Calculable calc = new ExpressionBuilder(\"multiply(sin(x),x+1)\").withVariable(\"x\", varX).withCustomFunction(custom1).build();"], [209, "        double expected=Math.sin(varX) * (varX +1);"], [210, "        System.out.println(\"expected: \"+ expected);"], [211, "        System.out.println(\"exp4j: \" + calc.calculate());"], [212, "        System.out.println(calc.getExpression());"], [213, "        assertTrue(expected == calc.calculate());"], [214, "    }"], [215, ""], [216, "    @Test"], [296, "\t\t\tpublic double applyFunction(double ... values) {"], [297, "\t\t\t\treturn values[0] / 2;"], [322, "\t\tif (System.getProperty(\"skipBenchmark\") != null) {"], [340, "\t\tSystem.out.println(\"\\n:: running simple benchmarks [\" + timeout + \" seconds]\");"]], "deleted": [[19, "\t\t\tpublic double applyFunction(double value) {"], [20, "\t\t\t\treturn value * Math.PI;"], [32, "\t\t\tpublic double applyFunction(double value) {"], [33, "\t\t\t\treturn Math.log(Math.log(value));"], [45, "\t\t\tpublic double applyFunction(double value) {"], [46, "\t\t\t\treturn value * Math.E;"], [51, "\t\t\tpublic double applyFunction(double value) {"], [52, "\t\t\t\treturn value * Math.PI;"], [64, "\t\t\tpublic double applyFunction(double value) {"], [65, "\t\t\t\treturn value * Math.E;"], [78, "\t\t\tpublic double applyFunction(double value) {"], [79, "\t\t\t\treturn value * Math.E;"], [84, "\t\t\tpublic double applyFunction(double value) {"], [85, "\t\t\t\treturn value * Math.PI;"], [98, "\t\t\tpublic double applyFunction(double value) {"], [99, "\t\t\t\treturn value * Math.E;"], [104, "\t\t\tpublic double applyFunction(double value) {"], [105, "\t\t\t\treturn value * Math.PI;"], [118, "\t\t\tpublic double applyFunction(double value) {"], [119, "\t\t\t\treturn value/2;"], [130, "\t\t\tpublic double applyFunction(double value) {"], [131, "\t\t\t\treturn value/2;"], [138, "\t@Test"], [218, "\t\t\tpublic double applyFunction(double value) {"], [219, "\t\t\t\treturn value / 2;"], [244, "\t\tif (System.getProperty(\"skipBenchmark\") != null && System.getProperty(\"skipBenchmark\").equals(\"true\")) {"], [262, "\t\tSystem.out.println(\"\\n:: [PostfixExpression] simple benchmark\");"]]}, "num_lines_added": 105, "num_lines_removed": 27}