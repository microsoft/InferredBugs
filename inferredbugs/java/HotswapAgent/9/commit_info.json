{"hash": "e829336f20e5dfb459f78731365b4f7f839ddfee", "message": "fix xml can only be reloaded once", "file_num_lines": 178, "diff_parsed": {"added": [[66, "     *"], [102, "     *"], [115, "     * @param basePackage     base package on witch the transformer was registered, used to obtain associated scanner."], [152, "            removeIfExists(beanName);"], [154, "            BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName);"], [155, "            definitionHolder = applyScopedProxyMode(scopeMetadata, definitionHolder, registry);"], [157, "            LOGGER.reload(\"Registering Spring bean '{}'\", beanName);"], [158, "            LOGGER.debug(\"Bean definition '{}'\", beanName, candidate);"], [159, "            registerBeanDefinition(definitionHolder, registry);"], [164, "        ProxyReplacer.clearAllProxies();"], [165, ""], [170, "     *"], [173, "    private void removeIfExists(String beanName) {"], [175, "            LOGGER.debug(\"Removing bean definition '{}'\", beanName);"], [176, "            registry.removeBeanDefinition(beanName);"], [177, ""], [181, "                ResetBeanPostProcessorCaches.reset(bf);"], [186, ""], [189, "            return (DefaultListableBeanFactory) registry;"], [199, "            ((DefaultListableBeanFactory) registry).freezeConfiguration();"], [230, "                    CachingMetadataReaderFactory.class, \"metadataReaderCache\");"]], "deleted": [[113, "     * @param basePackage base package on witch the transformer was registered, used to obtain associated scanner."], [150, "            clearCahceIfExists(beanName);"], [152, "            DefaultListableBeanFactory bf = maybeRegistryToBeanFactory();"], [154, "            // use previous singleton bean, if modified class is not bean, a exception will be throw"], [155, "            Object bean;"], [156, "            try {"], [157, "                bean = bf.getBean(beanName);"], [158, "            } catch (NoSuchBeanDefinitionException e) {"], [159, "                LOGGER.warning(\"{} is not managed by spring\", beanName);"], [160, "                return;"], [161, "            }"], [162, "            BeanWrapper bw = new BeanWrapperImpl(bf.getBean(beanName));"], [163, "            RootBeanDefinition rootBeanDefinition = (RootBeanDefinition)ReflectionHelper.invoke(bf, AbstractBeanFactory.class,"], [164, "                    \"getMergedLocalBeanDefinition\", new Class[]{String.class},"], [165, "                    beanName);"], [166, "            ReflectionHelper.invoke(bf, AbstractAutowireCapableBeanFactory.class,"], [167, "                    \"populateBean\", new Class[]{String.class, RootBeanDefinition.class, BeanWrapper.class},"], [168, "                    beanName,rootBeanDefinition , bw);"], [171, ""], [172, ""], [173, "\t\t\tProxyReplacer.clearAllProxies();"], [182, "    private void clearCahceIfExists(String beanName) {"], [187, "            \tResetBeanPostProcessorCaches.reset(bf);"], [192, ""], [195, "            return (DefaultListableBeanFactory)registry;"], [205, "            ((DefaultListableBeanFactory)registry).freezeConfiguration();"], [236, "                        CachingMetadataReaderFactory.class, \"metadataReaderCache\");"]]}, "num_lines_added": 21, "num_lines_removed": 27}