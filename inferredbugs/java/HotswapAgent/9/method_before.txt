    public void defineBean(BeanDefinition candidate) {
        synchronized (getClass()) { // TODO sychronize on DefaultListableFactory.beanDefinitionMap?
            ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate);
            candidate.setScope(scopeMetadata.getScopeName());
            String beanName = this.beanNameGenerator.generateBeanName(candidate, registry);
            if (candidate instanceof AbstractBeanDefinition) {
                postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);
            }
            if (candidate instanceof AnnotatedBeanDefinition) {
                processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);
            }

            clearCahceIfExists(beanName);

            DefaultListableBeanFactory bf = maybeRegistryToBeanFactory();

            // use previous singleton bean, if modified class is not bean, a exception will be throw
            Object bean;
            try {
                bean = bf.getBean(beanName);
            } catch (NoSuchBeanDefinitionException e) {
                LOGGER.warning("{} is not managed by spring", beanName);
                return;
            }
            BeanWrapper bw = new BeanWrapperImpl(bf.getBean(beanName));
            RootBeanDefinition rootBeanDefinition = (RootBeanDefinition)ReflectionHelper.invoke(bf, AbstractBeanFactory.class,
                    "getMergedLocalBeanDefinition", new Class[]{String.class},
                    beanName);
            ReflectionHelper.invoke(bf, AbstractAutowireCapableBeanFactory.class,
                    "populateBean", new Class[]{String.class, RootBeanDefinition.class, BeanWrapper.class},
                    beanName,rootBeanDefinition , bw);

            freezeConfiguration();


			ProxyReplacer.clearAllProxies();
        }

    }