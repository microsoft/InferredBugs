{"hash": "f5a2c88f85b15a40bdca504baf0e71285b393219", "message": "Allow multiple files containing different tables\n\nUpdate DbUnitRunner so that multiple IDataSet files are collated into\na CompositeDataSet before operations are applied.\n\nPrior to this commit, when db was in dirty state (possibly after\nprevious tests run) and we had more than one database setup file then\ntables from second and further files were not cleaned up before insert.\n\nFixes gh-27\nCloses gh-56", "file_num_lines": 158, "diff_parsed": {"added": [[28, "import org.dbunit.dataset.CompositeDataSet;"], [45, " *"], [49, " * @author Oleksii Lomako"], [138, "\tprivate void setupOrTeardown(DbUnitTestContext testContext, boolean isSetup,"], [139, "\t\t\tCollection<AnnotationAttributes> annotations) throws Exception {"], [140, "\t\tIDatabaseConnection connection = testContext.getConnection();"], [141, "\t\tfor (AnnotationAttributes annotation : annotations) {"], [142, "\t\t\tList<IDataSet> datasets = loadDataSets(testContext, annotation);"], [143, "\t\t\tDatabaseOperation operation = annotation.getType();"], [144, "\t\t\torg.dbunit.operation.DatabaseOperation dbUnitOperation = getDbUnitDatabaseOperation(testContext, operation);"], [145, "\t\t\tif (!datasets.isEmpty()) {"], [146, "\t\t\t\tif (logger.isDebugEnabled()) {"], [147, "\t\t\t\t\tlogger.debug(\"Executing \" + (isSetup ? \"Setup\" : \"Teardown\") + \" of @DatabaseTest using \""], [148, "\t\t\t\t\t\t\t+ operation + \" on \" + datasets.toString());"], [149, "\t\t\t\t}"], [150, "\t\t\t\tIDataSet dataSet = new CompositeDataSet(datasets.toArray(new IDataSet[datasets.size()]));"], [151, "\t\t\t\tdbUnitOperation.execute(connection, dataSet);"], [152, "\t\t\t}"], [153, "\t\t}"], [154, "\t}"], [155, ""], [156, "\tprivate List<IDataSet> loadDataSets(DbUnitTestContext testContext, AnnotationAttributes annotation)"], [157, "\t\t\tthrows Exception {"], [158, "\t\tList<IDataSet> datasets = new ArrayList<IDataSet>();"], [159, "\t\tfor (String dataSetLocation : annotation.getValue()) {"], [160, "\t\t\tdatasets.add(loadDataset(testContext, dataSetLocation));"], [161, "\t\t}"], [162, "\t\treturn datasets;"], [163, "\t}"], [164, ""], [177, "\t\t\tDatabaseOperation operation) {"], [180, "\t\tAssert.state(databaseOperation != null, \"The database operation \" + operation + \" is not supported\");"]], "deleted": [[44, " *"], [147, "\tprivate void setupOrTeardown(DbUnitTestContext testContext, boolean isSetup,"], [148, "\t\t\tCollection<AnnotationAttributes> annotations) throws Exception {"], [149, "\t\tIDatabaseConnection connection = testContext.getConnection();"], [150, "\t\tDatabaseOperation lastOperation = null;"], [151, "\t\tfor (AnnotationAttributes annotation : annotations) {"], [152, "\t\t\tfor (String dataSetLocation : annotation.getValue()) {"], [153, "\t\t\t\tDatabaseOperation operation = annotation.getType();"], [154, "\t\t\t\torg.dbunit.operation.DatabaseOperation dbUnitDatabaseOperation = getDbUnitDatabaseOperation("], [155, "\t\t\t\t\t\ttestContext, operation, lastOperation);"], [156, "\t\t\t\tIDataSet dataSet = loadDataset(testContext, dataSetLocation);"], [157, "\t\t\t\tif (dataSet != null) {"], [158, "\t\t\t\t\tif (logger.isDebugEnabled()) {"], [159, "\t\t\t\t\t\tlogger.debug(\"Executing \" + (isSetup ? \"Setup\" : \"Teardown\") + \" of @DatabaseTest using \""], [160, "\t\t\t\t\t\t\t\t+ operation + \" on \" + dataSetLocation);"], [161, "\t\t\t\t\t}"], [162, "\t\t\t\t\tdbUnitDatabaseOperation.execute(connection, dataSet);"], [163, "\t\t\t\t\tlastOperation = operation;"], [164, "\t\t\t\t}"], [165, "\t\t\t}"], [166, "\t\t}"], [167, "\t}"], [168, ""], [170, "\t\t\tDatabaseOperation operation, DatabaseOperation lastOperation) {"], [171, "\t\tif ((operation == DatabaseOperation.CLEAN_INSERT) && (lastOperation == DatabaseOperation.CLEAN_INSERT)) {"], [172, "\t\t\toperation = DatabaseOperation.INSERT;"], [173, "\t\t}"], [176, "\t\tAssert.state(databaseOperation != null, \"The databse operation \" + operation + \" is not supported\");"]]}, "num_lines_added": 32, "num_lines_removed": 28}