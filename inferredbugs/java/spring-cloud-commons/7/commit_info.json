{"hash": "bf6b31ee8ae28c2a75dfb42b025cc3269f92d50c", "message": "caffeine cache for loadbalancer Fix gh 638  (#643)\n\n* Add Caffeine-based loadBalancerCacheManager.\r\n\r\n* Add more tests.\r\n\r\n* Fix test.\r\n\r\n* Only enable loadBalancer caching if caffeine is on classpath. Warn if\r\ncaffeine is not on classpath.\r\n\r\n* Add javadocs.\r\n\r\n* Add docs. Change property name.\r\n\r\n* Fix configuration.\r\n\r\n* Fix after code review. Add another constructor to CaffeineBasedLoadBalancerCacheManager,\r\nallowing to pass cache name, in order to support alternative ServiceInstanceListSupplierImplementations.", "file_num_lines": 63, "diff_parsed": {"added": [[21, "import org.springframework.boot.autoconfigure.AutoConfigurations;"], [23, "import org.springframework.boot.test.context.runner.ApplicationContextRunner;"], [25, "import org.springframework.cache.annotation.EnableCaching;"], [26, "import org.springframework.cache.caffeine.CaffeineCacheManager;"], [28, "import org.springframework.context.annotation.Configuration;"], [42, "\t\tApplicationContextRunner contextRunner = baseApplicationRunner();"], [43, ""], [44, "\t\tcontextRunner.run(context -> {"], [45, "\t\t\tassertThat(context.getBeansOfType(CacheManager.class)).hasSize(1);"], [46, "\t\t\tassertThat(((CacheManager) context.getBean(\"loadBalancerCacheManager\"))"], [47, "\t\t\t\t\t.getCacheNames()).hasSize(1);"], [48, "\t\t\tassertThat(context.getBean(\"loadBalancerCacheManager\"))"], [49, "\t\t\t\t\t.isInstanceOf(CaffeineCacheManager.class);"], [50, "\t\t\tassertThat(((CacheManager) context.getBean(\"loadBalancerCacheManager\"))"], [51, "\t\t\t\t\t.getCacheNames()).contains(\"CachingServiceInstanceListSupplierCache\");"], [52, "\t\t});"], [53, "\t}"], [54, ""], [55, "\t@Test"], [56, "\tvoid loadBalancerCacheShouldNotOverrideCacheTypeSetting() {"], [57, "\t\tApplicationContextRunner contextRunner = baseApplicationRunner()"], [58, "\t\t\t\t.withUserConfiguration(TestConfiguration.class)"], [59, "\t\t\t\t.withPropertyValues(\"spring.cache.type=none\");"], [60, ""], [61, "\t\tcontextRunner.run(context -> {"], [62, "\t\t\tassertThat(context.getBeansOfType(CacheManager.class)).hasSize(2);"], [63, "\t\t\tassertThat(context.getBean(\"loadBalancerCacheManager\"))"], [64, "\t\t\t\t\t.isInstanceOf(CaffeineCacheManager.class);"], [65, "\t\t\tassertThat(context.getBeansOfType(CacheManager.class).get(\"cacheManager\"))"], [66, "\t\t\t\t\t.isInstanceOf(NoOpCacheManager.class);"], [67, ""], [68, "\t\t});"], [72, "\tvoid loadBalancerCacheShouldNotOverrideExistingCaffeineCacheManager() {"], [73, "\t\tApplicationContextRunner contextRunner = baseApplicationRunner()"], [74, "\t\t\t\t.withUserConfiguration(TestConfiguration.class);"], [75, ""], [76, "\t\tcontextRunner.run(context -> {"], [77, "\t\t\tassertThat(context.getBeansOfType(CacheManager.class)).hasSize(2);"], [78, "\t\t\tassertThat(context.getBean(\"cacheManager\"))"], [79, "\t\t\t\t\t.isInstanceOf(CaffeineCacheManager.class);"], [80, "\t\t\tassertThat(((CacheManager) context.getBean(\"cacheManager\")).getCacheNames())"], [81, "\t\t\t\t\t.isEmpty();"], [82, "\t\t\tassertThat(((CacheManager) context.getBean(\"loadBalancerCacheManager\"))"], [83, "\t\t\t\t\t.getCacheNames()).hasSize(1);"], [84, "\t\t\tassertThat(((CacheManager) context.getBean(\"loadBalancerCacheManager\"))"], [85, "\t\t\t\t\t.getCacheNames()).contains(\"CachingServiceInstanceListSupplierCache\");"], [86, "\t\t});"], [87, ""], [90, "\tprivate ApplicationContextRunner baseApplicationRunner() {"], [91, "\t\treturn new ApplicationContextRunner().withConfiguration(AutoConfigurations.of("], [92, "\t\t\t\tCacheAutoConfiguration.class, LoadBalancerCacheAutoConfiguration.class));"], [93, "\t}"], [94, ""], [95, "\t@Configuration(proxyBeanMethods = false)"], [96, "\t@EnableCaching"], [97, "\tstatic class TestConfiguration {"], [98, ""]], "deleted": [[19, "import java.util.ArrayList;"], [20, "import java.util.List;"], [21, ""], [25, "import org.springframework.boot.test.util.TestPropertyValues;"], [28, "import org.springframework.context.annotation.AnnotationConfigApplicationContext;"], [29, "import org.springframework.util.StringUtils;"], [43, "\t\tAnnotationConfigApplicationContext context = setup(\"\");"], [44, "\t\tassertThat(context.getBeansOfType(CacheManager.class)).isNotEmpty();"], [45, "\t\tassertThat(context.getBeansOfType(CacheManager.class).get(\"cacheManager\"))"], [46, "\t\t\t\t.isNotInstanceOf(NoOpCacheManager.class);"], [50, "\tvoid shouldUseNoOpCacheIfCacheTypeNone() {"], [51, "\t\tAnnotationConfigApplicationContext context = setup(\"spring.cache.type=none\");"], [52, "\t\tassertThat(context.getBeansOfType(CacheManager.class)).isNotEmpty();"], [53, "\t\tassertThat(context.getBeansOfType(CacheManager.class).get(\"cacheManager\"))"], [54, "\t\t\t\t.isInstanceOf(NoOpCacheManager.class);"], [57, "\tprivate AnnotationConfigApplicationContext setup(String property) {"], [58, "\t\tList<Class> config = new ArrayList<>();"], [59, "\t\tconfig.add(LoadBalancerCacheAutoConfiguration.class);"], [60, "\t\tconfig.add(CacheAutoConfiguration.class);"], [61, "\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();"], [62, "\t\tif (StringUtils.hasText(property)) {"], [63, "\t\t\tTestPropertyValues.of(property).applyTo(context);"], [64, "\t\t}"], [65, "\t\tcontext.register(config.toArray(new Class[0]));"], [66, "\t\tcontext.refresh();"], [67, "\t\treturn context;"]]}, "num_lines_added": 57, "num_lines_removed": 26}