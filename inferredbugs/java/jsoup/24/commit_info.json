{"hash": "6dc38f26dd31f1a367961f27c56b143cd0462e5a", "message": "Use jsoup's CharacterReader instead of regexes to parse Entities\n\nFaster, less memory.", "file_num_lines": 234, "diff_parsed": {"added": [[4, "import org.jsoup.helper.DataUtil;"], [6, "import org.jsoup.parser.CharacterReader;"], [11, "import java.nio.ByteBuffer;"], [12, "import java.nio.charset.Charset;"], [26, "    private static final int empty = -1;"], [27, "    private static final String emptyName = \"\";"], [31, "        /**"], [32, "         * Restricted entities suitable for XHTML output: lt, gt, amp, and quot only."], [33, "         */"], [35, "        /**"], [36, "         * Default HTML output entities."], [37, "         */"], [39, "        /**"], [40, "         * Complete HTML entities."], [41, "         */"], [66, "                return (index < nameVals.length - 1 && codeKeys[index + 1] == codepoint) ?"], [67, "                    nameVals[index + 1] : nameVals[index];"], [84, "     *"], [94, "     *"], [105, "     *"], [116, "     *"], [245, "     *"], [291, "    private static final char[] codeDelims = {',', ';'};"], [292, ""], [302, ""], [305, "            ByteBuffer bytes = DataUtil.readToByteBuffer(stream, 0);"], [306, "            String contents = Charset.forName(\"ascii\").decode(bytes).toString();"], [307, "            CharacterReader reader = new CharacterReader(contents);"], [308, ""], [309, "            while (!reader.isEmpty()) {"], [311, ""], [312, "                final String name = reader.consumeTo('=');"], [313, "                reader.advance();"], [314, "                final int cp1 = Integer.parseInt(reader.consumeToAny(codeDelims), codepointRadix);"], [315, "                final char codeDelim = reader.current();"], [316, "                reader.advance();"], [317, "                final int cp2;"], [318, "                if (codeDelim == ',') {"], [319, "                    cp2 = Integer.parseInt(reader.consumeTo(';'), codepointRadix);"], [320, "                    reader.advance();"], [321, "                } else {"], [322, "                    cp2 = empty;"], [324, "                final int index = Integer.parseInt(reader.consumeTo('\\n'), codepointRadix);"], [325, "                reader.advance();"], [326, ""], [327, "                e.nameKeys[i] = name;"], [328, "                e.codeVals[i] = cp1;"], [329, "                e.codeKeys[index] = cp1;"], [330, "                e.nameVals[index] = name;"], [331, ""], [332, "                if (cp2 != empty) {"], [333, "                    multipoints.put(name, new String(new int[]{cp1, cp2}, 0, 2));"], [334, "                }"], [335, "                i++;"], [336, ""]], "deleted": [[7, "import java.io.BufferedReader;"], [10, "import java.io.InputStreamReader;"], [14, "import java.util.regex.Matcher;"], [15, "import java.util.regex.Pattern;"], [26, "    private static Pattern entityPattern = Pattern.compile(\"^(\\\\w+)=(\\\\w+)(?:,(\\\\w+))?;(\\\\w+)$\");"], [27, "    static final int empty = -1;"], [28, "    static final String emptyName = \"\";"], [32, "        /** Restricted entities suitable for XHTML output: lt, gt, amp, and quot only. */"], [34, "        /** Default HTML output entities. */"], [36, "        /** Complete HTML entities. */"], [61, "                return (index < nameVals.length-1 && codeKeys[index+1] == codepoint) ?"], [62, "                    nameVals[index+1] : nameVals[index];"], [290, "        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));"], [291, "        String entry;"], [294, "            while ((entry = reader.readLine()) != null) {"], [296, "                final Matcher match = entityPattern.matcher(entry);"], [297, "                if (match.find()) {"], [298, "                    final String name = match.group(1);"], [299, "                    final int cp1 = Integer.parseInt(match.group(2), codepointRadix);"], [300, "                    final int cp2 = match.group(3) != null ? Integer.parseInt(match.group(3), codepointRadix) : empty;"], [301, "                    final int index = Integer.parseInt(match.group(4), codepointRadix);"], [302, ""], [303, "                    e.nameKeys[i] = name;"], [304, "                    e.codeVals[i] = cp1;"], [305, "                    e.codeKeys[index] = cp1;"], [306, "                    e.nameVals[index] = name;"], [307, ""], [308, "                    if (cp2 != empty) {"], [309, "                        multipoints.put(name, new String(new int[]{cp1, cp2}, 0, 2));"], [310, "                    }"], [311, "                    i++;"], [315, "            reader.close();"]]}, "num_lines_added": 55, "num_lines_removed": 32}