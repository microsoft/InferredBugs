{"hash": "7eeb74d133625c8819ba8da52e37f4e4db4b8a26", "message": "Automatically determine charset when parsing from URL or File.", "file_num_lines": 78, "diff_parsed": {"added": [[4, "import org.jsoup.nodes.Document;"], [5, "import org.jsoup.nodes.Element;"], [10, "import java.nio.ByteBuffer;"], [11, "import java.nio.charset.Charset;"], [12, "import java.util.regex.Matcher;"], [13, "import java.util.regex.Pattern;"], [20, "    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=([^\\\\s;]*)\");"], [21, "    private static final String defaultCharset = \"UTF-8\"; // used if not found in header or http-equiv"], [22, "    private static final int bufferSize = 0x20000; // ~130K."], [65, "        String charSet = getCharsetFromContentType(contentType); // may be null, readInputStream deals with it"], [72, "    // reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support"], [73, "    // switching the chartset midstream when a meta http-equiv tag defines the charset."], [75, "        byte[] buffer = new byte[bufferSize];"], [76, "        ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);"], [78, "        while(true) {"], [79, "            read  = inStream.read(buffer);"], [80, "            if (read == -1) break;"], [81, "            outStream.write(buffer, 0, read);"], [82, "        }"], [83, "        ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());"], [84, ""], [85, "        String docData;"], [86, "        if (charsetName == null) { // determine from http-equiv. safe parse as UTF-8"], [87, "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], [88, "            Document doc = Jsoup.parse(docData);"], [89, "            Element httpEquiv = doc.select(\"meta[http-equiv]\").first();"], [90, "            if (httpEquiv != null) { // if not found, will keep utf-8 as best attempt"], [91, "                String foundCharset = getCharsetFromContentType(httpEquiv.attr(\"content\"));"], [92, "                if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode"], [93, "                    byteData.rewind();"], [94, "                    docData = Charset.forName(foundCharset).decode(byteData).toString();"], [95, "                }"], [97, "        } else { // specified by content type header (or by user on file load)"], [98, "            docData = Charset.forName(charsetName).decode(byteData).toString();"], [99, "        }"], [100, "        return docData;"], [101, "    }"], [102, ""], [103, "    /**"], [104, "     * Parse out a charset from a content type header."], [105, "     * @param contentType e.g. \"text/html; charset=EUC-JP\""], [106, "     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased."], [107, "     */"], [108, "    static String getCharsetFromContentType(String contentType) {"], [109, "        if (contentType == null) return null;"], [110, ""], [111, "        Matcher m = charsetPattern.matcher(contentType);"], [112, "        if (m.find()) {"], [113, "            return m.group(1).trim().toUpperCase();"], [114, "        }"], [115, "        return null;"]], "deleted": [[56, "        String charSet = \"UTF-8\"; // todo[must]: get from content-encoding, or http-equiv (two-pass?)"], [64, "        char[] buffer = new char[0x20000]; // ~ 130K"], [65, "        StringBuilder data = new StringBuilder(0x20000);"], [66, "        Reader inReader = new InputStreamReader(inStream, charsetName);"], [68, "        do {"], [69, "            read = inReader.read(buffer, 0, buffer.length);"], [70, "            if (read > 0) {"], [71, "                data.append(buffer, 0, read);"], [73, ""], [74, "        } while (read >= 0);"], [75, ""], [76, "        return data.toString();"]]}, "num_lines_added": 51, "num_lines_removed": 12}