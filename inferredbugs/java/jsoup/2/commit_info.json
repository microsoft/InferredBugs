{"hash": "e2f6a9d19c7025431278f0d77085dde4dc2da798", "message": "Neatened Parser", "file_num_lines": 178, "diff_parsed": {"added": [[95, "        while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {"], [117, "            TextNode textNode = TextNode.createFromEncoded(data); // TODO: maybe have this be another data type? So doesn't come back in text()?"], [164, "                while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {"], [181, "        String text = tq.consumeTo(\"<\");"], [182, "        TextNode textNode = TextNode.createFromEncoded(text);"]], "deleted": [[95, "        while (!tq.matches(\"<\") && !tq.matches(\"/>\") && !tq.matches(\">\") && !tq.isEmpty()) {"], [117, "            TextNode textNode = TextNode.createFromEncoded(data);"], [164, "                while (!tq.matches(\"<\") && !tq.matches(\"/>\") && !tq.matches(\">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {"], [181, "        StringBuilder textAccum = new StringBuilder();"], [182, "        while (!tq.matches(\"<\") && !tq.isEmpty()) { // scan to next tag"], [183, "            textAccum.append(tq.consume());"], [184, "        }"], [185, "        TextNode textNode = TextNode.createFromEncoded(textAccum.toString());"]]}, "num_lines_added": 5, "num_lines_removed": 8}