{"hash": "59f10777132745ec84eefad77dcabd2109947e97", "message": "Element#previousElementSiblings() and Element#nextElementSiblings now return empty list", "file_num_lines": 1112, "diff_parsed": {"added": [[17, "import static org.junit.Assert.*;"], [1324, "        Document doc = Jsoup.parse(\"<ul id='ul'>\" +"], [1325, "            \"<li id='a'>a</li>\" +"], [1327, "            \"<li id='c'>c</li>\" +"], [1328, "            \"</ul>\" +"], [1329, "            \"<div id='div'>\" +"], [1330, "            \"<li id='d'>d</li>\" +"], [1331, "            \"</div>\");"], [1332, ""], [1337, "        assertEquals(\"b\", elementSiblings.get(0).id());"], [1338, "        assertEquals(\"c\", elementSiblings.get(1).id());"], [1340, "        Element element1 = doc.getElementById(\"b\");"], [1342, "        assertNotNull(elementSiblings1);"], [1343, "        assertEquals(1, elementSiblings1.size());"], [1344, "        assertEquals(\"c\", elementSiblings1.get(0).id());"], [1345, ""], [1346, "        Element element2 = doc.getElementById(\"c\");"], [1347, "        List<Element> elementSiblings2 = element2.nextElementSiblings();"], [1348, "        assertEquals(0, elementSiblings2.size());"], [1349, ""], [1350, "        Element ul = doc.getElementById(\"ul\");"], [1351, "        List<Element> elementSiblings3 = ul.nextElementSiblings();"], [1352, "        assertNotNull(elementSiblings3);"], [1353, "        assertEquals(1, elementSiblings3.size());"], [1354, "        assertEquals(\"div\", elementSiblings3.get(0).id());"], [1355, ""], [1356, "        Element div = doc.getElementById(\"div\");"], [1357, "        List<Element> elementSiblings4 = div.nextElementSiblings();"], [1358, "        try {"], [1359, "            Element elementSibling = elementSiblings4.get(0);"], [1360, "            fail(\"This element should has no next siblings\");"], [1361, "        } catch (IndexOutOfBoundsException e) {"], [1362, "        }"], [1367, "        Document doc = Jsoup.parse(\"<ul id='ul'>\" +"], [1368, "            \"<li id='a'>a</li>\" +"], [1370, "            \"<li id='c'>c</li>\" +"], [1371, "            \"</ul>\" +"], [1372, "            \"<div id='div'>\" +"], [1373, "            \"<li id='d'>d</li>\" +"], [1374, "            \"</div>\");"], [1375, ""], [1380, "        assertEquals(\"a\", elementSiblings.get(0).id());"], [1384, "        assertEquals(0, elementSiblings1.size());"], [1385, ""], [1386, "        Element element2 = doc.getElementById(\"c\");"], [1387, "        List<Element> elementSiblings2 = element2.previousElementSiblings();"], [1388, "        assertNotNull(elementSiblings2);"], [1389, "        assertEquals(2, elementSiblings2.size());"], [1390, "        assertEquals(\"a\", elementSiblings2.get(0).id());"], [1391, "        assertEquals(\"b\", elementSiblings2.get(1).id());"], [1392, ""], [1393, "        Element ul = doc.getElementById(\"ul\");"], [1394, "        List<Element> elementSiblings3 = ul.previousElementSiblings();"], [1395, "        try {"], [1396, "            Element element3 = elementSiblings3.get(0);"], [1397, "            fail(\"This element should has no previous siblings\");"], [1398, "        } catch (IndexOutOfBoundsException e) {"], [1399, "        }"]], "deleted": [[17, "import static org.junit.Assert.assertEquals;"], [18, "import static org.junit.Assert.assertFalse;"], [19, "import static org.junit.Assert.assertNotNull;"], [20, "import static org.junit.Assert.assertNull;"], [21, "import static org.junit.Assert.assertTrue;"], [22, "import static org.junit.Assert.fail;"], [1329, "        Document doc = Jsoup.parse(\"<li id='a'>a</li>\" +"], [1331, "            \"<li id='c'>c</li>\");"], [1337, "        Element element1 = doc.getElementById(\"c\");"], [1339, "        assertNull(elementSiblings1);"], [1344, "        Document doc = Jsoup.parse(\"<li id='a'>a</li>\" +"], [1346, "            \"<li id='c'>c</li>\");"], [1354, "        assertNull(elementSiblings1);"]]}, "num_lines_added": 58, "num_lines_removed": 13}