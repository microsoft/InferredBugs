{"hash": "19aecf27292e894fefe4552309549325387163d2", "message": "TokenQueue optimisations", "file_num_lines": 218, "diff_parsed": {"added": [[79, ""], [80, "    /**"], [81, "     * Case sensitive match test."], [82, "     * @param seq"], [83, "     * @return"], [84, "     */"], [85, "    public boolean matchesCS(String seq) {"], [86, "        return queue.startsWith(seq, pos);"], [87, "    }"], [91, "     Tests if the next characters match any of the sequences. Case insensitive."], [103, "    public boolean matchesAny(char... seq) {"], [104, "        if (isEmpty())"], [105, "            return false;"], [106, ""], [107, "        for (char c: seq) {"], [108, "            if (queue.charAt(pos) == c)"], [109, "                return true;"], [110, "        }"], [111, "        return false;"], [112, "    }"], [113, ""], [114, "    public boolean matchesStartTag() {"], [115, "        // micro opt for matching \"<x\""], [116, "        return (remainingLength() > 2 && queue.charAt(pos) == '<' && Character.isLetterOrDigit(queue.charAt(pos+1)));"], [117, "    }"], [118, ""], [127, "            pos += seq.length();"], [139, "        return !isEmpty() && Character.isWhitespace(queue.charAt(pos));"], [147, "        return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));"], [162, "        Character c = queue.charAt(pos);"], [316, "            pos++;"], [340, "        while (!isEmpty() && (matchesWord() || matchesAny(':', '_', '-')))"], [353, "        while (!isEmpty() && (matchesWord() || matchesAny('|', '_', '-')))"], [365, "        int start = pos;"], [366, "        while (!isEmpty() && (matchesWord() || matchesAny('-', '_')))"], [367, "            pos++;"], [368, ""], [369, "        return queue.substring(start, pos);"], [378, "        while (!isEmpty() && (matchesWord() || matchesAny('-', '_', ':')))"]], "deleted": [[82, "     Tests if the next characters match any of the sequences."], [102, "            consume(seq);"], [114, "        return !isEmpty() && Character.isWhitespace(peek());"], [122, "        return !isEmpty() && Character.isLetterOrDigit(peek());"], [137, "        Character c= queue.charAt(pos);"], [291, "            consume();"], [315, "        while (!isEmpty() && (matchesWord() || matchesAny(\":\", \"_\", \"-\")))"], [328, "        while (!isEmpty() && (matchesWord() || matchesAny(\"|\", \"_\", \"-\")))"], [340, "        StringBuilder accum = new StringBuilder();"], [341, "        Character c = peek();"], [342, "        while (!isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) {"], [343, "            accum.append(consume());"], [344, "            c = peek();"], [345, "        }"], [346, "        return accum.toString();"], [355, "        while (!isEmpty() && (matchesWord() || matchesAny(\"-\", \"_\", \":\")))"]]}, "num_lines_added": 39, "num_lines_removed": 16}