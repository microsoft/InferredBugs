{"hash": "01a62698797658b0f51d323fdfb5e9744d843773", "message": "Use ArrayList instead of LinkedList\n\nMuch less GC - less iterators, lest next items, etc.", "file_num_lines": 565, "diff_parsed": {"added": [[39, "    private ArrayList<Element> formattingElements = new ArrayList<Element>(); // active (open) formatting elements"], [84, "            stack.add(root);"], [256, "        int size = stack.size();"], [257, "        return stack.remove(size-1);"], [264, "    ArrayList<Element> getStack() {"], [272, "    private boolean isElementInQueue(ArrayList<Element> queue, Element element) {"], [273, "        for (int pos = queue.size() -1; pos >= 0; pos--) {"], [274, "            Element next = queue.get(pos);"], [283, "        for (int pos = stack.size() -1; pos >= 0; pos--) {"], [284, "            Element next = stack.get(pos);"], [293, "        for (int pos = stack.size() -1; pos >= 0; pos--) {"], [294, "            Element next = stack.get(pos);"], [296, "                stack.remove(pos);"], [304, "        for (int pos = stack.size() -1; pos >= 0; pos--) {"], [305, "            Element next = stack.get(pos);"], [306, "            stack.remove(pos);"], [307, "            if (next.nodeName().equals(elName))"], [313, "        for (int pos = stack.size() -1; pos >= 0; pos--) {"], [314, "            Element next = stack.get(pos);"], [315, "            stack.remove(pos);"], [316, "            if (StringUtil.in(next.nodeName(), elNames))"], [322, "        for (int pos = stack.size() -1; pos >= 0; pos--) {"], [323, "            Element next = stack.get(pos);"], [327, "                stack.remove(pos);"], [345, "        for (int pos = stack.size() -1; pos >= 0; pos--) {"], [346, "            Element next = stack.get(pos);"], [350, "                stack.remove(pos);"], [356, "        for (int pos = stack.size() -1; pos >= 0; pos--) {"], [357, "            Element next = stack.get(pos);"], [359, "                return stack.get(pos-1);"], [375, "    private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) {"], [378, "        queue.set(i, in);"], [383, "        for (int pos = stack.size() -1; pos >= 0; pos--) {"], [384, "            Element node = stack.get(pos);"], [385, "            if (pos == 0) {"], [436, "        for (int pos = stack.size() -1; pos >= 0; pos--) {"], [437, "            Element el = stack.get(pos);"], [477, "        for (int pos = stack.size() -1; pos >= 0; pos--) {"], [478, "            Element el = stack.get(pos);"], [551, "    Element lastFormattingElement() {"], [552, "        return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null;"], [553, "    }"], [554, ""], [555, "    Element removeLastFormattingElement() {"], [556, "        int size = formattingElements.size();"], [557, "        if (size > 0)"], [558, "            return formattingElements.remove(size-1);"], [559, "        else"], [560, "            return null;"], [561, "    }"], [562, ""], [566, "        for (int pos = formattingElements.size() -1; pos >= 0; pos--) {"], [567, "            Element el = formattingElements.get(pos);"], [575, "                formattingElements.remove(pos);"], [591, "        Element last = lastFormattingElement();"], [592, "        if (last == null || onStack(last))"], [595, "        Element entry = last;"], [596, "        int size = formattingElements.size();"], [620, "            formattingElements.set(pos, newEl);"], [630, "            Element el = removeLastFormattingElement();"], [637, "        for (int pos = formattingElements.size() -1; pos >= 0; pos--) {"], [638, "            Element next = formattingElements.get(pos);"], [640, "                formattingElements.remove(pos);"], [651, "        for (int pos = formattingElements.size() -1; pos >= 0; pos--) {"], [652, "            Element next = formattingElements.get(pos);"]], "deleted": [[3, "import org.jsoup.helper.DescendableLinkedList;"], [10, "import java.util.Iterator;"], [11, "import java.util.LinkedList;"], [42, "    private DescendableLinkedList<Element> formattingElements = new DescendableLinkedList<Element>(); // active (open) formatting elements"], [87, "            stack.push(root);"], [259, "        // todo - dev, remove validation check"], [260, "        if (stack.peekLast().nodeName().equals(\"td\") && !state.name().equals(\"InCell\"))"], [261, "            Validate.isFalse(true, \"pop td not in cell\");"], [262, "        if (stack.peekLast().nodeName().equals(\"html\"))"], [263, "            Validate.isFalse(true, \"popping html!\");"], [264, "        return stack.pollLast();"], [271, "    DescendableLinkedList<Element> getStack() {"], [279, "    private boolean isElementInQueue(DescendableLinkedList<Element> queue, Element element) {"], [280, "        Iterator<Element> it = queue.descendingIterator();"], [281, "        while (it.hasNext()) {"], [282, "            Element next = it.next();"], [291, "        Iterator<Element> it = stack.descendingIterator();"], [292, "        while (it.hasNext()) {"], [293, "            Element next = it.next();"], [302, "        Iterator<Element> it = stack.descendingIterator();"], [303, "        while (it.hasNext()) {"], [304, "            Element next = it.next();"], [306, "                it.remove();"], [314, "        Iterator<Element> it = stack.descendingIterator();"], [315, "        while (it.hasNext()) {"], [316, "            Element next = it.next();"], [317, "            if (next.nodeName().equals(elName)) {"], [318, "                it.remove();"], [320, "            } else {"], [321, "                it.remove();"], [322, "            }"], [327, "        Iterator<Element> it = stack.descendingIterator();"], [328, "        while (it.hasNext()) {"], [329, "            Element next = it.next();"], [330, "            if (StringUtil.in(next.nodeName(), elNames)) {"], [331, "                it.remove();"], [333, "            } else {"], [334, "                it.remove();"], [335, "            }"], [340, "        Iterator<Element> it = stack.descendingIterator();"], [341, "        while (it.hasNext()) {"], [342, "            Element next = it.next();"], [346, "                it.remove();"], [364, "        Iterator<Element> it = stack.descendingIterator();"], [365, "        while (it.hasNext()) {"], [366, "            Element next = it.next();"], [370, "                it.remove();"], [376, "        Iterator<Element> it = stack.descendingIterator();"], [377, "        while (it.hasNext()) {"], [378, "            Element next = it.next();"], [380, "                return it.next();"], [396, "    private void replaceInQueue(LinkedList<Element> queue, Element out, Element in) {"], [399, "        queue.remove(i);"], [400, "        queue.add(i, in);"], [405, "        Iterator<Element> it = stack.descendingIterator();"], [406, "        while (it.hasNext()) {"], [407, "            Element node = it.next();"], [408, "            if (!it.hasNext()) {"], [459, "        Iterator<Element> it = stack.descendingIterator();"], [460, "        while (it.hasNext()) {"], [461, "            Element el = it.next();"], [501, "        Iterator<Element> it = stack.descendingIterator();"], [502, "        while (it.hasNext()) {"], [503, "            Element el = it.next();"], [579, "        Iterator<Element> iter = formattingElements.descendingIterator();"], [580, "        while (iter.hasNext()) {"], [581, "            Element el =  iter.next();"], [589, "                iter.remove();"], [605, "        int size = formattingElements.size();"], [606, "        if (size == 0 || formattingElements.getLast() == null || onStack(formattingElements.getLast()))"], [609, "        Element entry = formattingElements.getLast();"], [633, "            formattingElements.add(pos, newEl);"], [634, "            formattingElements.remove(pos + 1);"], [644, "            Element el = formattingElements.peekLast();"], [645, "            formattingElements.removeLast();"], [652, "        Iterator<Element> it = formattingElements.descendingIterator();"], [653, "        while (it.hasNext()) {"], [654, "            Element next = it.next();"], [656, "                it.remove();"], [667, "        Iterator<Element> it = formattingElements.descendingIterator();"], [668, "        while (it.hasNext()) {"], [669, "            Element next = it.next();"]]}, "num_lines_added": 65, "num_lines_removed": 82}