{"hash": "daf4666075b44c4405f7dc648467bdd39c236556", "message": "Optimised document normalisation", "file_num_lines": 128, "diff_parsed": {"added": [[49, "        return findFirstElementByTagName(\"head\", this);"], [57, "        return findFirstElementByTagName(\"body\", this);"], [99, "        Element htmlEl = findFirstElementByTagName(\"html\", this);"], [100, "        if (htmlEl == null)"], [101, "            htmlEl = appendElement(\"html\");"], [103, "            htmlEl.prependElement(\"head\");"], [105, "            htmlEl.appendElement(\"body\");"], [110, "        normalise(htmlEl);"], [135, "    // fast method to get first by tag name, used for html, head, body finders"], [136, "    private Element findFirstElementByTagName(String tag, Node node) {"], [137, "        if (node.nodeName().equals(tag))"], [138, "            return (Element) node;"], [139, "        else {"], [140, "            for (Node child: node.childNodes) {"], [141, "                Element found = findFirstElementByTagName(tag, child);"], [142, "                if (found != null)"], [143, "                    return found;"], [144, "            }"], [145, "        }"], [146, "        return null;"], [147, "    }"], [148, ""]], "deleted": [[49, "        return getElementsByTag(\"head\").first();"], [57, "        return getElementsByTag(\"body\").first();"], [99, "        if (select(\"html\").isEmpty())"], [100, "            appendElement(\"html\");"], [102, "            select(\"html\").first().prependElement(\"head\");"], [104, "            select(\"html\").first().appendElement(\"body\");"], [109, "        normalise(select(\"html\").first());"]]}, "num_lines_added": 22, "num_lines_removed": 7}