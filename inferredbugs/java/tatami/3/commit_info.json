{"hash": "bb63de2da6e20a4f6f092dc3012e676204934129", "message": "Corrected shares & replies", "file_num_lines": 316, "diff_parsed": {"added": [[121, "        AbstractStatus abstractStatus = statusRepository.findStatusById(replyTo);"], [122, "        if (abstractStatus != null &&"], [123, "                !abstractStatus.getType().equals(StatusType.STATUS) &&"], [124, "                !abstractStatus.getType().equals(StatusType.SHARE)) {"], [129, "        if (abstractStatus != null &&"], [130, "                abstractStatus.getType().equals(StatusType.SHARE)) {"], [132, "            log.debug(\"Replacing the share by the original status\");"], [133, "            Share share = (Share) abstractStatus;"], [134, "            AbstractStatus abstractRealStatus = statusRepository.findStatusById(share.getOriginalStatusId());"], [135, "            abstractStatus = abstractRealStatus;"], [138, "        Status status = (Status) abstractStatus;"], [140, "        if (status.getGroupId() != null) {"], [141, "            group = groupService.getGroupById(status.getDomain(), status.getGroupId());"], [147, "        if (!status.getReplyTo().equals(\"\")) {"], [148, "            log.debug(\"Replacing the status by the status at the origin of the disucssion\");"], [150, "            AbstractStatus abstractRealOriginalStatus = statusRepository.findStatusById(status.getDiscussionId());"], [163, "                    status.getStatusId(),"], [164, "                    status.getUsername());"], [168, "            log.debug(\"Replying directly to the status at the origin of the disucssion\");"], [172, "                            status.getStatusPrivate(),"], [174, "                            status.getStatusId(),"], [175, "                            status.getStatusId(),"], [176, "                            status.getUsername());"], [178, "            discussionRepository.addReplyToDiscussion(status.getStatusId(), replyStatus.getStatusId());"]], "deleted": [[121, "        AbstractStatus abstractOriginalStatus = statusRepository.findStatusById(replyTo);"], [122, "        if (abstractOriginalStatus != null &&"], [123, "                !abstractOriginalStatus.getType().equals(StatusType.STATUS) &&"], [124, "                !abstractOriginalStatus.getType().equals(StatusType.SHARE)) {"], [129, "        if (abstractOriginalStatus != null &&"], [130, "                abstractOriginalStatus.getType().equals(StatusType.SHARE)) {"], [132, "            Share share = (Share) abstractOriginalStatus;"], [133, "            AbstractStatus abstractRealOriginalStatus = statusRepository.findStatusById(share.getOriginalStatusId());"], [134, "            abstractOriginalStatus = abstractRealOriginalStatus;"], [137, "        Status originalStatus = (Status) abstractOriginalStatus;"], [139, "        if (originalStatus.getGroupId() != null) {"], [140, "            group = groupService.getGroupById(originalStatus.getDomain(), originalStatus.getGroupId());"], [146, "        if (!originalStatus.getReplyTo().equals(\"\")) {"], [148, "            AbstractStatus abstractRealOriginalStatus = statusRepository.findStatusById(originalStatus.getDiscussionId());"], [161, "                    originalStatus.getStatusId(),"], [162, "                    originalStatus.getUsername());"], [169, "                            originalStatus.getStatusPrivate(),"], [171, "                            replyTo,"], [172, "                            replyTo,"], [173, "                            originalStatus.getUsername());"], [175, "            discussionRepository.addReplyToDiscussion(originalStatus.getStatusId(), replyStatus.getStatusId());"]]}, "num_lines_added": 24, "num_lines_removed": 21}