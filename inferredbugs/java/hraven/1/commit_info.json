{"hash": "569725ddf204d627ae225da7ea4ea9f9d6d0119c", "message": "Support pagination of FlowQueueService results", "file_num_lines": 125, "diff_parsed": {"added": [[22, "import com.twitter.hraven.rest.PaginatedResult;"], [32, "import static org.junit.Assert.*;"], [41, "  private static final String TEST_USER2 = \"testuser2\";"], [60, "    Flow flow1 = createFlow(service, TEST_USER, 1);"], [61, "    FlowQueueKey key1 = flow1.getQueueKey();"], [62, "    Flow flow2 = createFlow(service, TEST_USER, 2);"], [63, "    FlowQueueKey key2 = flow2.getQueueKey();"], [98, ""], [99, "    // add flows from a second user"], [100, "    Flow flow3 = createFlow(service, TEST_USER2, 3);"], [101, "    FlowQueueKey key3 = flow3.getQueueKey();"], [102, ""], [103, "    // 3rd should be the only one running"], [104, "    running = service.getFlowsForStatus(TEST_CLUSTER, Flow.Status.RUNNING, 10);"], [105, "    assertNotNull(running);"], [106, "    assertEquals(1, running.size());"], [107, "    assertFlowEquals(key3, flow3, running.get(0));"], [108, ""], [109, "    // move flow3 to succeeded"], [110, "    FlowQueueKey newKey3 = new FlowQueueKey(key3.getCluster(), Flow.Status.SUCCEEDED,"], [111, "        key3.getTimestamp(), key3.getFlowId());"], [112, "    service.moveFlow(key3, newKey3);"], [113, ""], [114, "    succeeded = service.getFlowsForStatus(TEST_CLUSTER, Flow.Status.SUCCEEDED, 10);"], [115, "    assertNotNull(succeeded);"], [116, "    assertEquals(3, succeeded.size());"], [117, "    Flow result3 = succeeded.get(0);"], [118, "    assertFlowEquals(newKey3, flow3, result3);"], [119, ""], [120, "    // test filtering by user name"], [121, "    succeeded = service.getFlowsForStatus(TEST_CLUSTER, Flow.Status.SUCCEEDED, 10,"], [122, "        TEST_USER2, null);"], [123, "    assertNotNull(succeeded);"], [124, "    assertEquals(1, succeeded.size());"], [125, "    assertFlowEquals(newKey3, flow3, succeeded.get(0));"], [126, ""], [127, "    // test pagination"], [128, "    PaginatedResult<Flow> page1 = service.getPaginatedFlowsForStatus("], [129, "        TEST_CLUSTER, Flow.Status.SUCCEEDED, 1, null, null);"], [130, "    List<Flow> pageValues = page1.getValues();"], [131, "    assertNotNull(pageValues);"], [132, "    assertNotNull(page1.getNextStartRow());"], [133, "    assertEquals(1, pageValues.size());"], [134, "    assertFlowEquals(newKey3, flow3, pageValues.get(0));"], [135, "    // page 2"], [136, "    PaginatedResult<Flow> page2 = service.getPaginatedFlowsForStatus("], [137, "        TEST_CLUSTER, Flow.Status.SUCCEEDED, 1, null, page1.getNextStartRow());"], [138, "    pageValues = page2.getValues();"], [139, "    assertNotNull(pageValues);"], [140, "    assertNotNull(page2.getNextStartRow());"], [141, "    assertEquals(1, pageValues.size());"], [142, "    assertFlowEquals(newKey2, flow2, pageValues.get(0));"], [143, "    // page 3"], [144, "    PaginatedResult<Flow> page3 = service.getPaginatedFlowsForStatus("], [145, "        TEST_CLUSTER, Flow.Status.SUCCEEDED, 1, null, page2.getNextStartRow());"], [146, "    pageValues = page3.getValues();"], [147, "    assertNotNull(pageValues);"], [148, "    assertNull(page3.getNextStartRow());"], [149, "    assertEquals(1, pageValues.size());"], [150, "    assertFlowEquals(newKey1, flow1, pageValues.get(0));"], [163, ""], [164, "  protected Flow createFlow(FlowQueueService service, String user, int cnt) throws Exception {"], [165, "    String flowName = \"flow\"+Integer.toString(cnt);"], [166, "    FlowQueueKey key = new FlowQueueKey(TEST_CLUSTER, Flow.Status.RUNNING,"], [167, "        System.currentTimeMillis(), flowName);"], [168, "    Flow flow = new Flow(null);"], [169, "    flow.setQueueKey(key);"], [170, "    flow.setJobGraphJSON(\"{}\");"], [171, "    flow.setFlowName(flowName);"], [172, "    flow.setUserName(user);"], [173, "    flow.setProgress(10 * cnt);"], [174, "    service.updateFlow(key, flow);"], [175, "    return flow;"], [176, "  }"]], "deleted": [[31, "import static org.junit.Assert.assertEquals;"], [32, "import static org.junit.Assert.assertNotNull;"], [33, "import static org.junit.Assert.assertTrue;"], [60, "    FlowQueueKey key1 = new FlowQueueKey(TEST_CLUSTER, Flow.Status.RUNNING,"], [61, "        System.currentTimeMillis(), \"flow1\");"], [62, "    Flow flow1 = new Flow(null);"], [63, "    flow1.setJobGraphJSON(\"{}\");"], [64, "    flow1.setFlowName(\"flow1\");"], [65, "    flow1.setUserName(TEST_USER);"], [66, "    flow1.setProgress(10);"], [67, "    service.updateFlow(key1, flow1);"], [68, ""], [69, "    FlowQueueKey key2 = new FlowQueueKey(TEST_CLUSTER, Flow.Status.RUNNING,"], [70, "        System.currentTimeMillis(), \"flow2\");"], [71, "    Flow flow2 = new Flow(null);"], [72, "    flow2.setJobGraphJSON(\"{}\");"], [73, "    flow2.setFlowName(\"flow2\");"], [74, "    flow2.setUserName(TEST_USER);"], [75, "    flow2.setProgress(20);"], [76, "    service.updateFlow(key2, flow2);"]]}, "num_lines_added": 74, "num_lines_removed": 20}