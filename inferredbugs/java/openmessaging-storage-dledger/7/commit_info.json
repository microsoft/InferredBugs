{"hash": "b99aae64259132476a58a02c4f4970ccc4bc7f63", "message": "Polish heartbeat requests", "file_num_lines": 402, "diff_parsed": {"added": [[18, "import org.apache.rocketmq.dleger.utils.UtilAll;"], [36, "    private long lastSuccHeartBeatTime = -1;"], [37, "    private int heartBeatTimeIntervalMs = 1000;"], [41, "    private int minVoteIntervalMs = 300;"], [66, "        refreshIntervals(dLegerConfig);"], [67, "    }"], [68, ""], [69, ""], [70, "    private void refreshIntervals(DLegerConfig dLegerConfig) {"], [71, "        this.heartBeatTimeIntervalMs = dLegerConfig.getHeartBeatTimeIntervalMs();"], [72, "        this.minVoteIntervalMs = dLegerConfig.getMinVoteIntervalMs();"], [73, "        this.maxVoteIntervalMs = dLegerConfig.getMaxVoteIntervalMs();"], [105, "                    return CompletableFuture.completedFuture((HeartBeatResponse) new HeartBeatResponse().code(DLegerResponseCode.INCONSISTENT_LEADER.getCode()));"], [119, "        synchronized (memberState) {"], [120, "            if (memberState.currTerm() == term) {"], [121, "                memberState.changeToLeader(term);"], [122, "                lastSendHeartBeatTime = -1;"], [123, "                logger.info(\"[{}] [ChangeRoleToLeader] from term: {} and currterm: {}\", memberState.getSelfId(), term, memberState.currTerm());"], [124, "            } else {"], [125, "                logger.warn(\"[{}] skip to be the leader in term: {}, but currTerm is: {}\", memberState.getSelfId(), term, memberState.currTerm());"], [126, "            }"], [127, "        }"], [131, "        synchronized (memberState) {"], [132, "            if (term >= memberState.currTerm()) {"], [133, "                memberState.changeToCandidate(term);"], [134, "                logger.info(\"[{}] [ChangeRoleToCandidate] from term: {} and currterm: {}\", memberState.getSelfId(), term, memberState.currTerm());"], [135, "            } else {"], [136, "                logger.info(\"[{}] skip to be candidate in term: {}, but currterm: {}\", memberState.getSelfId(), term, memberState.currTerm());"], [137, "            }"], [138, "        }"], [142, "    public void testRevote(long term) {"], [204, "    private void sendHeartbeats(long term, String leaderId) throws Exception {"], [205, "        final AtomicInteger allNum = new AtomicInteger(1);"], [206, "        final AtomicInteger succNum = new AtomicInteger(1);"], [207, "        final AtomicLong maxTerm = new AtomicLong(-1);"], [208, "        final AtomicBoolean inconsistLeader = new AtomicBoolean(false);"], [209, "        final CountDownLatch beatLatch = new CountDownLatch(1);"], [214, "            HeartBeatRequest heartBeatRequest = new HeartBeatRequest();"], [215, "            heartBeatRequest.setLocalId(memberState.getSelfId());"], [216, "            heartBeatRequest.setRemoteId(id);"], [217, "            heartBeatRequest.setLeaderId(leaderId);"], [218, "            heartBeatRequest.setTerm(term);"], [219, "            CompletableFuture<HeartBeatResponse> future = dLegerRpcService.heartBeat(heartBeatRequest);"], [220, "            future.whenComplete((HeartBeatResponse x, Throwable ex) -> {"], [221, "               try {"], [222, ""], [223, "                   if (ex != null) {"], [224, "                       throw ex;"], [225, "                   }"], [226, "                   switch (DLegerResponseCode.valueOf(x.getCode())) {"], [227, "                       case SUCCESS:"], [228, "                           succNum.incrementAndGet();"], [229, "                           break;"], [230, "                       case EXPIRED_TERM:"], [231, "                           maxTerm.set(x.getTerm());"], [232, "                           break;"], [233, "                       case INCONSISTENT_LEADER:"], [234, "                           inconsistLeader.compareAndSet(false, true);"], [235, "                           break;"], [236, "                       default:"], [237, "                           break;"], [238, "                   }"], [239, "                   if (memberState.isQuorum(succNum.get())) {"], [240, "                       beatLatch.countDown();"], [241, "                   }"], [242, "               } catch (Throwable t) {"], [243, "                   logger.error(\"Parse heartbeat response failed\", t);"], [244, "               } finally {"], [245, "                   allNum.incrementAndGet();"], [246, "                   if (allNum.get() == memberState.peerSize()) {"], [247, "                       beatLatch.countDown();"], [248, "                   }"], [249, "               }"], [250, "            });"], [251, "        }"], [252, "        beatLatch.await(heartBeatTimeIntervalMs, TimeUnit.MILLISECONDS);"], [253, "        if (memberState.isQuorum(succNum.get())) {"], [254, "            lastSuccHeartBeatTime = System.currentTimeMillis();"], [255, "        } else if (maxTerm.get() > term) {"], [256, "            changeRoleToCandidate(maxTerm.get());"], [257, "        } else if (inconsistLeader.get()) {"], [258, "            changeRoleToCandidate(term);"], [259, "        } else if (UtilAll.elapsed(lastSuccHeartBeatTime) > 3 * heartBeatTimeIntervalMs) {"], [260, "            changeRoleToCandidate(term);"], [265, "        if (UtilAll.elapsed(lastSendHeartBeatTime) >  heartBeatTimeIntervalMs) {"], [277, "            sendHeartbeats(term, leaderId);"], [282, "        if (UtilAll.elapsed(lastLeaderHeartBeatTime) > 2 * heartBeatTimeIntervalMs) {"], [284, "                if (memberState.isFollower() && (UtilAll.elapsed(lastLeaderHeartBeatTime) > 2 * heartBeatTimeIntervalMs)) {"], [421, "            changeRoleToCandidate(knownMaxTermInGroup.get());"], [444, "            logger.info(\"{}_[VOTE_RESULT] has been elected to be the leader in term {}\", memberState.getSelfId(), term);"], [445, "            changeRoleToLeader(term);"], [472, "                    DLegerLeaderElector.this.refreshIntervals(dLegerConfig);"]], "deleted": [[35, "    private int heartBeatTimeIntervalMs = 500;"], [39, "    private int minVoteIntervalMs = 500;"], [95, "                    return CompletableFuture.completedFuture((HeartBeatResponse) new HeartBeatResponse().code(DLegerResponseCode.INTERNAL_ERROR.getCode()));"], [109, "        memberState.changeToLeader(term);"], [110, "        logger.info(\"[{}][ChangeRoleToLeader] from term: {} and currterm: {}\", memberState.getSelfId(), term, memberState.currTerm());"], [111, "        lastSendHeartBeatTime = -1;"], [115, "        logger.info(\"[{}][ChangeRoleToCandidate] from term: {} and currterm: {}\", memberState.getSelfId(), term, memberState.currTerm());"], [116, "        memberState.changeToCandidate(term);"], [120, "    public void revote(long term) {"], [182, "    private void sendHearbeats(long term, String leaderId) throws Exception {"], [183, ""], [188, "            try {"], [189, "                HeartBeatRequest heartBeatRequest = new HeartBeatRequest();"], [190, "                heartBeatRequest.setLeaderId(leaderId);"], [191, "                heartBeatRequest.setRemoteId(id);"], [192, "                heartBeatRequest.setTerm(term);"], [193, "                //maybe oneway is ok"], [194, "                dLegerRpcService.heartBeat(heartBeatRequest);"], [195, "            } catch (Exception e) {"], [196, "                logger.warn(\"{}_[SEND_HEAT_BEAT] failed to {}\", memberState.getSelfId(), id);"], [197, "            }"], [202, "        if ((System.currentTimeMillis() - lastSendHeartBeatTime) >  heartBeatTimeIntervalMs - 100) {"], [214, "            sendHearbeats(term, leaderId);"], [219, "        if ((System.currentTimeMillis() -  lastLeaderHeartBeatTime) > heartBeatTimeIntervalMs + 100) {"], [221, "                if (memberState.isFollower() && ((System.currentTimeMillis() -  lastLeaderHeartBeatTime) > heartBeatTimeIntervalMs + 100)) {"], [358, "            synchronized (memberState) {"], [359, "                if (memberState.currTerm() < knownMaxTermInGroup.get()) {"], [360, "                    changeRoleToCandidate(knownMaxTermInGroup.get());"], [361, "                }"], [362, "            }"], [385, "            //handle the handleVote"], [386, "            synchronized (memberState) {"], [387, "                if (memberState.currTerm() == term) {"], [388, "                    logger.info(\"{}_[VOTE_RESULT] has been elected to be the leader in term {}\", memberState.getSelfId(), term);"], [389, "                    changeRoleToLeader(term);"], [390, "                } else {"], [391, "                    logger.warn(\"{}_[VOTE_RESULT] has been elected to be the leader in term {}, but currTerm is {}\", memberState.getSelfId(), term, memberState.currTerm());"], [392, "                }"], [393, ""], [394, "            }"]]}, "num_lines_added": 92, "num_lines_removed": 40}