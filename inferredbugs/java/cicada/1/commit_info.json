{"hash": "9bb6c1f7a091d26b554639098d049957e3da9c02", "message": ":sparkles: Introducing new features--->Custom configuration.", "file_num_lines": 12, "diff_parsed": {"added": [[3, "import top.crossoverjie.cicada.server.bootstrap.NettyBootStrap;"], [4, "import top.crossoverjie.cicada.server.config.InitSetting;"], [16, "    /**"], [17, "     * Start cicada server by path"], [18, "     * @param clazz"], [19, "     * @param path"], [20, "     * @throws Exception"], [21, "     */"], [23, "        InitSetting.setting(clazz,path) ;"], [24, "        NettyBootStrap.startServer();"], [28, "    /**"], [29, "     * Start the service through the port in the configuration file"], [30, "     * @param clazz"], [31, "     * @throws Exception"], [32, "     */"], [33, "    public static void start(Class<?> clazz) throws Exception {"], [34, "        start(clazz,null);"], [36, ""]], "deleted": [[3, "import io.netty.bootstrap.ServerBootstrap;"], [4, "import io.netty.channel.Channel;"], [5, "import io.netty.channel.ChannelFuture;"], [6, "import io.netty.channel.EventLoopGroup;"], [7, "import io.netty.channel.nio.NioEventLoopGroup;"], [8, "import io.netty.channel.socket.nio.NioServerSocketChannel;"], [9, "import org.slf4j.Logger;"], [10, "import top.crossoverjie.cicada.server.config.AppConfig;"], [11, "import top.crossoverjie.cicada.server.configuration.AbstractCicadaConfiguration;"], [12, "import top.crossoverjie.cicada.server.configuration.ConfigurationHolder;"], [13, "import top.crossoverjie.cicada.server.constant.CicadaConstant;"], [14, "import top.crossoverjie.cicada.server.init.CicadaInitializer;"], [15, "import top.crossoverjie.cicada.server.util.ClassScanner;"], [16, "import top.crossoverjie.cicada.server.util.LoggerBuilder;"], [17, ""], [18, "import java.io.InputStream;"], [19, "import java.util.List;"], [20, "import java.util.Properties;"], [31, "    private final static Logger LOGGER = LoggerBuilder.getLogger(CicadaServer.class) ;"], [32, ""], [33, "    private static final int BOSS_SIZE = Runtime.getRuntime().availableProcessors() * 2;"], [34, ""], [35, "    private static EventLoopGroup boss = new NioEventLoopGroup(BOSS_SIZE);"], [36, "    private static EventLoopGroup work = new NioEventLoopGroup();"], [39, ""], [40, "        long start = System.currentTimeMillis();"], [41, ""], [42, ""], [43, "        //init application"], [44, "        AppConfig.getInstance().setRootPackageName(clazz.getPackage().getName());"], [45, "        AppConfig.getInstance().setRootPath(path);"], [46, ""], [47, "        InputStream resourceAsStream = CicadaServer.class.getClassLoader().getResourceAsStream(\"application.properties\");"], [48, "        Properties prop = new Properties();"], [49, "        prop.load(resourceAsStream);"], [50, "        int port = Integer.parseInt(prop.get(CicadaConstant.CICADA_PORT).toString());"], [51, ""], [52, "        AppConfig.getInstance().setPort(port);"], [53, ""], [54, "        List<Class<?>> configuration = ClassScanner.getConfiguration(AppConfig.getInstance().getRootPackageName());"], [55, "        for (Class<?> aClass : configuration) {"], [56, "            AbstractCicadaConfiguration conf = (AbstractCicadaConfiguration) aClass.newInstance() ;"], [57, "            InputStream stream = CicadaServer.class.getClassLoader().getResourceAsStream(conf.getPropertiesName());"], [58, "            Properties properties = new Properties();"], [59, "            properties.load(stream);"], [60, "            conf.setProperties(properties) ;"], [61, ""], [62, "            ConfigurationHolder.addConfiguration(aClass.getName(),conf) ;"], [63, "        }"], [64, ""], [65, "        try {"], [66, "            ServerBootstrap bootstrap = new ServerBootstrap()"], [67, "                    .group(boss, work)"], [68, "                    .channel(NioServerSocketChannel.class)"], [69, "                    .childHandler(new CicadaInitializer());"], [70, ""], [71, "            ChannelFuture future = bootstrap.bind(port).sync();"], [72, "            if (future.isSuccess()) {"], [73, "                long end = System.currentTimeMillis();"], [74, "                LOGGER.info(\"Cicada started on port: {}.cost {}ms\", port ,end-start);"], [75, "            }"], [76, "            Channel channel = future.channel();"], [77, "            channel.closeFuture().sync();"], [78, ""], [79, "        } finally {"], [80, "            boss.shutdownGracefully();"], [81, "            work.shutdownGracefully();"], [82, "        }"], [86, "    private void initConfig(){"], [87, ""]]}, "num_lines_added": 18, "num_lines_removed": 70}