{"hash": "0a4a5d209dcae9b2dc1b7e62d95517b04da4deaf", "message": "TraceFilter trace method takes span id param\n\nBesides span name the trace method of TraceFilter now also\ntakes span id param. Having span id makes it possible to have\na percentage sampling implementation that does not need a counter\nwith a lock.", "file_num_lines": 212, "diff_parsed": {"added": [[35, "    private static final long TRACE_ID = 32534;"], [53, "        when(mockTraceFilter.trace(TRACE_ID, REQUEST_NAME)).thenReturn(true);"], [54, "        when(mockTraceFilter2.trace(TRACE_ID, REQUEST_NAME)).thenReturn(true);"], [140, "        when(mockRandom.nextLong()).thenReturn(TRACE_ID).thenReturn(2l);"], [144, "        assertEquals(TRACE_ID, newSpanId.getTraceId());"], [145, "        assertEquals(TRACE_ID, newSpanId.getSpanId());"], [149, "        expectedSpan.setTrace_id(TRACE_ID);"], [150, "        expectedSpan.setId(TRACE_ID);"], [154, "        verify(mockTraceFilter).trace(TRACE_ID, REQUEST_NAME);"], [155, "        verify(mockTraceFilter2).trace(TRACE_ID, REQUEST_NAME);"], [224, "        when(mockState.getCurrentServerSpan()).thenReturn(ServerSpan.create(null, null));"], [225, "        when(mockRandom.nextLong()).thenReturn(TRACE_ID);"], [226, "        when(mockTraceFilter.trace(TRACE_ID, REQUEST_NAME)).thenReturn(false);"], [230, "        verify(mockState).getCurrentServerSpan();"], [232, "        verify(mockTraceFilter).trace(TRACE_ID, REQUEST_NAME);"], [235, "        verify(mockRandom).nextLong();"], [243, "        when(mockState.getCurrentServerSpan()).thenReturn(ServerSpan.create(null, null));"], [244, "        when(mockRandom.nextLong()).thenReturn(TRACE_ID);"], [245, "        when(mockTraceFilter2.trace(TRACE_ID, REQUEST_NAME)).thenReturn(false);"], [249, "        verify(mockState).getCurrentServerSpan();"], [251, "        verify(mockTraceFilter).trace(TRACE_ID, REQUEST_NAME);"], [252, "        verify(mockTraceFilter2).trace(TRACE_ID, REQUEST_NAME);"], [255, "        verify(mockRandom).nextLong();"], [256, "        verifyNoMoreInteractions(mockTraceFilter, mockTraceFilter2, mockState, mockRandom, mockCollector);"]], "deleted": [[52, "        when(mockTraceFilter.trace(REQUEST_NAME)).thenReturn(true);"], [53, "        when(mockTraceFilter2.trace(REQUEST_NAME)).thenReturn(true);"], [139, "        when(mockRandom.nextLong()).thenReturn(1l).thenReturn(2l);"], [143, "        assertEquals(1l, newSpanId.getTraceId());"], [144, "        assertEquals(1l, newSpanId.getSpanId());"], [148, "        expectedSpan.setTrace_id(1);"], [149, "        expectedSpan.setId(1);"], [153, "        verify(mockTraceFilter).trace(REQUEST_NAME);"], [154, "        verify(mockTraceFilter2).trace(REQUEST_NAME);"], [223, "        when(mockTraceFilter.trace(REQUEST_NAME)).thenReturn(false);"], [228, "        verify(mockTraceFilter).trace(REQUEST_NAME);"], [238, "        when(mockTraceFilter2.trace(REQUEST_NAME)).thenReturn(false);"], [243, "        verify(mockTraceFilter).trace(REQUEST_NAME);"], [244, "        verify(mockTraceFilter2).trace(REQUEST_NAME);"], [247, "        verifyNoMoreInteractions(mockState, mockTraceFilter, mockTraceFilter2, mockRandom, mockCollector);"]]}, "num_lines_added": 24, "num_lines_removed": 15}