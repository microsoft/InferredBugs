{"hash": "78830ddb47cb1e44d8701b5f722e706f08c5a694", "message": "jillegal impl for version 2.2-SNAPSHOT", "file_num_lines": 251, "diff_parsed": {"added": [[31, "\tprotected long arrayStartAddress;"], [81, "\t\tthis.objectArray = (A) directMemoryService.getObject(arrayStartAddress);"], [181, "\t\ttry {"], [182, "\t\t\tthis.elementType = elementType;"], [183, "\t\t\tthis.length = length;"], [184, "\t\t\tthis.initializeElements = initializeElements;"], [185, "\t\t\tthis.directMemoryService = directMemoryService;"], [186, ""], [187, "\t\t\tobjectSize = directMemoryService.sizeOfClass(elementType);"], [188, "\t\t\tarraySize = JvmUtil.sizeOfArray(elementType, length);"], [189, "\t\t\tif (initializeElements) {"], [190, "\t\t\t\tthis.allocationSize ="], [191, "\t\t\t\t\t\tarraySize + (length * objectSize) +"], [192, "\t\t\t\t\t\t2 * JvmUtil.OBJECT_ADDRESS_SENSIVITY; // Extra memory for possible aligning"], [193, "\t\t\t}"], [194, "\t\t\telse {"], [195, "\t\t\t\tthis.allocationSize ="], [196, "\t\t\t\t\t\tarraySize +"], [197, "\t\t\t\t\t\t2 * JvmUtil.OBJECT_ADDRESS_SENSIVITY; // Extra memory for possible aligning"], [198, "\t\t\t}"], [199, "\t\t\tallocationStartAddress = directMemoryService.allocateMemory(allocationSize);"], [200, "\t\t\tallocationEndAddress = allocationStartAddress + allocationSize;"], [201, "\t\t\tsampleObject = JvmUtil.getSampleInstance(elementType);"], [202, "\t\t\tsampleArray = (A) Array.newInstance(elementType, 0);"], [203, "\t\t\tif (initializeElements) {"], [204, "\t\t\t\tif (sampleObject == null) {"], [205, "\t\t\t\t\tthrow new IllegalStateException(\"Unable to create a sample object for class \" + elementType.getName());"], [206, "\t\t\t\t}"], [207, "\t\t\t\tthis.sampleObjectAddress = directMemoryService.addressOf(sampleObject);"], [209, ""], [210, "\t\t\tlong addressMod;"], [211, ""], [212, "\t\t\tarrayStartAddress = allocationStartAddress;"], [213, "\t\t\taddressMod = arrayStartAddress % JvmUtil.OBJECT_ADDRESS_SENSIVITY;"], [214, "\t\t\tif (addressMod != 0) {"], [215, "\t\t\t\tarrayStartAddress += (JvmUtil.OBJECT_ADDRESS_SENSIVITY - addressMod);"], [216, "\t\t\t}"], [217, ""], [218, "\t\t\tint arrayHeaderSize = JvmUtil.getArrayHeaderSize();"], [219, "\t\t\tarrayIndexScale = JvmUtil.arrayIndexScale(elementType);"], [220, "\t\t\tarrayIndexStartAddress = arrayStartAddress + JvmUtil.arrayBaseOffset(elementType);"], [221, "\t\t\tobjStartAddress = arrayStartAddress + JvmUtil.sizeOfArray(elementType, length);"], [222, ""], [223, "\t\t\t// Allocated objects must start aligned as address size from start address of allocated address"], [224, "\t\t\tlong diffBetweenArrayAndObjectStartAddresses = objStartAddress - arrayStartAddress;"], [225, "\t\t\taddressMod = diffBetweenArrayAndObjectStartAddresses % JvmUtil.OBJECT_ADDRESS_SENSIVITY;"], [226, "\t\t\tif (addressMod != 0) {"], [227, "\t\t\t\tobjStartAddress += (JvmUtil.OBJECT_ADDRESS_SENSIVITY - addressMod);"], [228, "\t\t\t}"], [229, ""], [230, "\t\t\t// Copy sample array header to object pool array header"], [231, "\t\t\tfor (int i = 0; i < arrayHeaderSize; i++) {"], [232, "\t\t\t\tdirectMemoryService.putByte(arrayStartAddress + i, directMemoryService.getByte(sampleArray, i));"], [233, "\t\t\t}"], [234, ""], [235, "\t\t\t// Set length of array object pool array"], [236, "\t\t\tJvmUtil.setArrayLength(arrayStartAddress, elementType, length);"], [237, ""], [238, ""], [239, "\t\t\tswitch (JvmUtil.getAddressSize()) {"], [240, "\t\t        case JvmUtil.SIZE_32_BIT:"], [241, "\t\t        \tjvmAwareArrayElementAddressFinder = new Address32BitJvmAwareArrayElementAddressFinder();"], [242, "\t\t            break;"], [243, "\t\t        case JvmUtil.SIZE_64_BIT:"], [244, "\t\t        \tint referenceSize = JvmUtil.getReferenceSize();"], [245, "\t\t        \tswitch (referenceSize) {"], [246, "\t\t             \tcase JvmUtil.ADDRESSING_4_BYTE:"], [247, "\t\t             \t\tjvmAwareArrayElementAddressFinder = new Address64BitWithCompressedOopsJvmAwareArrayElementAddressFinder();"], [248, "\t\t             \t\tbreak;"], [249, "\t\t             \tcase JvmUtil.ADDRESSING_8_BYTE:"], [250, "\t\t             \t\tjvmAwareArrayElementAddressFinder = new Address64BitWithCompressedOopsJvmAwareArrayElementAddressFinder();"], [251, "\t\t             \t\tbreak;"], [252, "\t\t             \tdefault:"], [253, "\t\t                    throw new AssertionError(\"Unsupported reference size: \" + referenceSize);"], [254, "\t\t        \t}"], [255, "\t\t        \tbreak;"], [256, "\t\t        default:"], [257, "\t\t            throw new AssertionError(\"Unsupported address size: \" + JvmUtil.getAddressSize());"], [258, "\t\t\t}"], [259, ""], [260, "\t\t\tinit();"], [261, ""], [262, "\t\t\tmakeAvaiable();"], [264, "\t\tcatch (IllegalArgumentException e) {"], [265, "\t\t\tthrow e;"], [266, "\t\t}"], [267, "\t\tcatch (Throwable t) {"], [268, "\t\t\tlogger.error(\"Error occured while initializing \\\"ComplexTypeArrayOffHeapPool\\\"\", t);"], [269, "\t\t\tthrow new IllegalStateException(t);"], [270, "\t\t}"]], "deleted": [[57, "\t\tint arrayHeaderSize = JvmUtil.getArrayHeaderSize();"], [58, "\t\tarrayIndexScale = JvmUtil.arrayIndexScale(elementType);"], [59, "\t\tarrayIndexStartAddress = allocationStartAddress + JvmUtil.arrayBaseOffset(elementType);"], [60, "\t\tobjStartAddress = allocationStartAddress + JvmUtil.sizeOfArray(elementType, length);"], [61, ""], [62, "\t\t// Allocated objects must start aligned as address size from start address of allocated address"], [63, "\t\tlong diffBetweenArrayAndObjectStartAddresses = objStartAddress - allocationStartAddress;"], [64, "\t\tlong addressMod = diffBetweenArrayAndObjectStartAddresses % JvmUtil.getAddressSize();"], [65, "\t\tif (addressMod != 0) {"], [66, "\t\t\tobjStartAddress += (JvmUtil.getAddressSize() - addressMod);"], [67, "\t\t}"], [68, ""], [69, "\t\t// Copy sample array header to object pool array header"], [70, "\t\tfor (int i = 0; i < arrayHeaderSize; i++) {"], [71, "\t\t\tdirectMemoryService.putByte(allocationStartAddress + i, directMemoryService.getByte(sampleArray, i));"], [72, "\t\t}"], [73, ""], [74, "\t\t// Set length of array object pool array"], [75, "\t\tJvmUtil.setArrayLength(allocationStartAddress, elementType, length);"], [76, ""], [100, "\t\tthis.objectArray = (A) directMemoryService.getObject(allocationStartAddress);"], [101, ""], [102, "\t\tswitch (JvmUtil.getAddressSize()) {"], [103, "\t        case JvmUtil.SIZE_32_BIT:"], [104, "\t        \tjvmAwareArrayElementAddressFinder = new Address32BitJvmAwareArrayElementAddressFinder();"], [105, "\t            break;"], [106, "\t        case JvmUtil.SIZE_64_BIT:"], [107, "\t        \tint referenceSize = JvmUtil.getReferenceSize();"], [108, "\t        \tswitch (referenceSize) {"], [109, "\t             \tcase JvmUtil.ADDRESSING_4_BYTE:"], [110, "\t             \t\tjvmAwareArrayElementAddressFinder = new Address64BitWithCompressedOopsJvmAwareArrayElementAddressFinder();"], [111, "\t             \t\tbreak;"], [112, "\t             \tcase JvmUtil.ADDRESSING_8_BYTE:"], [113, "\t             \t\tjvmAwareArrayElementAddressFinder = new Address64BitWithCompressedOopsJvmAwareArrayElementAddressFinder();"], [114, "\t             \t\tbreak;"], [115, "\t             \tdefault:"], [116, "\t                    throw new AssertionError(\"Unsupported reference size: \" + referenceSize);"], [117, "\t        \t}"], [118, "\t        \tbreak;"], [119, "\t        default:"], [120, "\t            throw new AssertionError(\"Unsupported address size: \" + JvmUtil.getAddressSize());"], [121, "\t\t}"], [221, "\t\tthis.elementType = elementType;"], [222, "\t\tthis.length = length;"], [223, "\t\tthis.initializeElements = initializeElements;"], [224, "\t\tthis.directMemoryService = directMemoryService;"], [225, "\t\tthis.objectSize = directMemoryService.sizeOfClass(elementType);"], [226, "\t\tthis.arraySize = JvmUtil.sizeOfArray(elementType, length);"], [227, "\t\tif (initializeElements) {"], [228, "\t\t\tthis.allocationSize ="], [229, "\t\t\t\t\tarraySize + (length * objectSize) + JvmUtil.getAddressSize(); // Extra memory for possible aligning"], [230, "\t\t}"], [231, "\t\telse {"], [232, "\t\t\tthis.allocationSize ="], [233, "\t\t\t\t\tarraySize + JvmUtil.getAddressSize(); // Extra memory for possible aligning"], [234, "\t\t}"], [235, "\t\tthis.allocationStartAddress = directMemoryService.allocateMemory(allocationSize);"], [236, "\t\tthis.allocationEndAddress = allocationStartAddress + allocationSize;"], [237, "\t\tthis.sampleObject = JvmUtil.getSampleInstance(elementType);"], [238, "\t\tthis.sampleArray = (A) Array.newInstance(elementType, 0);"], [239, "\t\tif (initializeElements) {"], [240, "\t\t\tif (sampleObject == null) {"], [241, "\t\t\t\tthrow new IllegalStateException(\"Unable to create a sample object for class \" + elementType.getName());"], [243, "\t\t\tthis.sampleObjectAddress = directMemoryService.addressOf(sampleObject);"], [245, "\t\tinit();"], [246, "\t\tmakeAvaiable();"]]}, "num_lines_added": 90, "num_lines_removed": 66}