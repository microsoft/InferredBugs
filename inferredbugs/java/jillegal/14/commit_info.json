{"hash": "78830ddb47cb1e44d8701b5f722e706f08c5a694", "message": "jillegal impl for version 2.2-SNAPSHOT", "file_num_lines": 182, "diff_parsed": {"added": [[29, "\tprotected long arrayStartAddress;"], [55, "\t\tlong arrayIndexStartAddress = arrayStartAddress + JvmUtil.arrayBaseOffset(elementType);"], [57, "\t\t// All index in object pool array header point to allocated objects"], [73, "\t\tthis.objectArray = (T[]) directMemoryService.getObject(arrayStartAddress);"], [172, "\t\ttry {"], [173, "\t\t\tsuper.init(elementType, objectCount, allocateNonPrimitiveFieldsAtOffHeapConfigType, directMemoryService);"], [174, "\t\t\tarraySize = JvmUtil.sizeOfArray(elementType, objectCount);"], [175, "\t\t\tallocationSize ="], [176, "\t\t\t\t\tarraySize + (objectCount * objectSize) +"], [177, "\t\t\t\t\t2 * JvmUtil.OBJECT_ADDRESS_SENSIVITY; // Extra memory for possible aligning;"], [178, "\t\t\tallocationStartAddress = directMemoryService.allocateMemory(allocationSize);"], [179, "\t\t\tallocationEndAddress = allocationStartAddress + (objectCount * objectSize) - objectSize;;"], [180, "\t\t\tsampleArray = (T[]) Array.newInstance(elementType, 0);"], [181, ""], [182, "\t\t\tlong addressMod;"], [183, ""], [184, "\t\t\tarrayStartAddress = allocationStartAddress;"], [185, "\t\t\taddressMod = arrayStartAddress % JvmUtil.OBJECT_ADDRESS_SENSIVITY;"], [186, "\t\t\tif (addressMod != 0) {"], [187, "\t\t\t\tarrayStartAddress += (JvmUtil.OBJECT_ADDRESS_SENSIVITY - addressMod);"], [188, "\t\t\t}"], [189, ""], [190, "\t\t\tobjectsStartAddress = arrayStartAddress + JvmUtil.sizeOfArray(elementType, objectCount);"], [191, "\t\t\t// Allocated objects must start aligned as address size from start address of allocated address"], [192, "\t\t\tlong diffBetweenArrayAndObjectStartAddresses = objectsStartAddress - arrayStartAddress;"], [193, "\t\t\taddressMod = diffBetweenArrayAndObjectStartAddresses % JvmUtil.OBJECT_ADDRESS_SENSIVITY;"], [194, "\t\t\tif (addressMod != 0) {"], [195, "\t\t\t\tobjectsStartAddress += (JvmUtil.OBJECT_ADDRESS_SENSIVITY - addressMod);"], [196, "\t\t\t}"], [197, "\t\t\tobjectsEndAddress = objectsStartAddress + (objectCount * objectSize);"], [198, ""], [199, "\t\t\tint arrayHeaderSize = JvmUtil.getArrayHeaderSize();"], [200, "\t\t\t// Copy sample array header to object pool array header"], [201, "\t\t\tfor (int i = 0; i < arrayHeaderSize; i++) {"], [202, "\t\t\t\tdirectMemoryService.putByte("], [203, "\t\t\t\t\t\tarrayStartAddress + i,"], [204, "\t\t\t\t\t\tdirectMemoryService.getByte(sampleArray, i));"], [205, "\t\t\t}"], [206, ""], [207, "\t\t\t// Set length of array object pool array"], [208, "\t\t\tJvmUtil.setArrayLength(arrayStartAddress, elementType, (int) objectCount);"], [209, ""], [210, "\t\t\tinit();"], [211, ""], [212, "\t\t\tmakeAvaiable();"], [213, "\t\t}"], [214, "\t\tcatch (IllegalArgumentException e) {"], [215, "\t\t\tthrow e;"], [216, "\t\t}"], [217, "\t\tcatch (Throwable t) {"], [218, "\t\t\tlogger.error(\"Error occured while initializing \\\"EagerReferencedObjectOffHeapPool\\\"\", t);"], [219, "\t\t\tthrow new IllegalStateException(t);"], [220, "\t\t}"]], "deleted": [[53, "\t\tint arrayHeaderSize = JvmUtil.getArrayHeaderSize();"], [55, "\t\tlong arrayIndexStartAddress = allocationStartAddress + JvmUtil.arrayBaseOffset(elementType);"], [56, ""], [57, "\t\tobjectsStartAddress = allocationStartAddress + JvmUtil.sizeOfArray(elementType, objectCount);"], [58, "\t\t// Allocated objects must start aligned as address size from start address of allocated address"], [59, "\t\tlong diffBetweenArrayAndObjectStartAddresses = objectsStartAddress - allocationStartAddress;"], [60, "\t\tlong addressMod = diffBetweenArrayAndObjectStartAddresses % JvmUtil.OBJECT_ADDRESS_SENSIVITY;"], [61, "\t\tif (addressMod != 0) {"], [62, "\t\t\tobjectsStartAddress += (JvmUtil.OBJECT_ADDRESS_SENSIVITY - addressMod);"], [63, "\t\t}"], [64, "\t\tobjectsEndAddress = objectsStartAddress + (objectCount * objectSize);"], [65, ""], [66, "\t\t// Copy sample array header to object pool array header"], [67, "\t\tfor (int i = 0; i < arrayHeaderSize; i++) {"], [68, "\t\t\tdirectMemoryService.putByte("], [69, "\t\t\t\t\tallocationStartAddress + i,"], [70, "\t\t\t\t\tdirectMemoryService.getByte(sampleArray, i));"], [71, "\t\t}"], [73, "\t\t// Set length of array object pool array"], [74, "\t\tJvmUtil.setArrayLength(allocationStartAddress, elementType, (int) objectCount);"], [75, ""], [76, "\t\t// All index is object pool array header point to allocated objects"], [92, "\t\tthis.objectArray = (T[]) directMemoryService.getObject(allocationStartAddress);"], [191, "\t\tsuper.init(elementType, objectCount, allocateNonPrimitiveFieldsAtOffHeapConfigType, directMemoryService);"], [192, "\t\tthis.arraySize = JvmUtil.sizeOfArray(elementType, objectCount);"], [193, "\t\tthis.allocationSize ="], [194, "\t\t\t\tarraySize + (objectCount * objectSize) + JvmUtil.OBJECT_ADDRESS_SENSIVITY; // Extra memory for possible aligning;"], [195, "\t\tthis.allocationStartAddress = directMemoryService.allocateMemory(allocationSize);"], [196, "\t\tthis.allocationEndAddress = allocationStartAddress + (objectCount * objectSize) - objectSize;;"], [197, "\t\tthis.sampleArray = (T[]) Array.newInstance(elementType, 0);"], [198, "\t\tinit();"], [199, ""], [200, "\t\tmakeAvaiable();"]]}, "num_lines_added": 53, "num_lines_removed": 33}