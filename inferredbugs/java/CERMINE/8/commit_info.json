{"hash": "9917513ef279d0b3088ef9464fc448d283ee9c6a", "message": "sonar bugs corrected", "file_num_lines": 556, "diff_parsed": {"added": [[26, "import pl.edu.icm.cermine.structure.model.*;"], [571, "        for (BxZone z: bxDoc.asZones()) {"], [572, "            if (!BxZoneLabel.MET_BIB_INFO.equals(z.getLabel()) &&"], [573, "                    !BxZoneLabel.REFERENCES.equals(z.getLabel()) &&"], [574, "                    z.getLines().size() <= 2 &&"], [575, "                    (z.toText().toLowerCase().contains(\"journal \")"], [576, "                    || z.toText().toLowerCase().contains(\"vol.\")"], [577, "                    || z.toText().toLowerCase().contains(\"vol \")"], [578, "                    || z.toText().toLowerCase().contains(\"pp.\")"], [579, "                    || z.toText().toLowerCase().contains(\"volume \")"], [580, "                    || z.toText().toLowerCase().contains(\"pp \")"], [581, "                    || z.toText().toLowerCase().contains(\"issn\")"], [582, "                    || z.toText().toLowerCase().contains(\"doi:\")"], [583, "                    || z.toText().toLowerCase().contains(\"doi \")"], [584, "                    || z.toText().toLowerCase().contains(\"citation:\"))) {"], [585, "                z.setLabel(BxZoneLabel.MET_BIB_INFO);"], [586, "            } else if (!BxZoneLabel.OTH_UNKNOWN.equals(z.getLabel()) &&"], [587, "                    !BxZoneLabel.MET_BIB_INFO.equals(z.getLabel()) &&"], [588, "                    z.getLines().size() <= 2 &&"], [589, "                    (z.toText().toLowerCase().contains(\"page \"))) {"], [590, "                z.setLabel(BxZoneLabel.OTH_UNKNOWN);"], [591, "            }"], [592, "        }"], [593, ""], [646, ""], [647, "                int keys = 0;"], [648, "                Set<BxZoneLabel> set = EnumSet.noneOf(BxZoneLabel.class);"], [649, "                int total = 0;"], [650, "                int known = 0;"], [651, "                for (BxZone z: bxDoc.asZones()) {"], [652, "                    total++;"], [653, "                    if (z.getLabel() != null) {"], [654, "                        known++;"], [655, "                        if (z.getLabel().isOfCategoryOrGeneral(BxZoneLabelCategory.CAT_METADATA)) {"], [656, "                            set.add(z.getLabel());"], [657, "                        }"], [658, "                        if (BxZoneLabel.REFERENCES.equals(z.getLabel())) {"], [659, "                            keys = 1;"], [660, "                        }"], [661, "                    }"], [662, "                }"], [663, ""], [664, "                if (set.contains(BxZoneLabel.MET_AFFILIATION)) {"], [665, "                    keys++;"], [666, "                }"], [667, "                if (set.contains(BxZoneLabel.MET_AUTHOR)) {"], [668, "                    keys++;"], [669, "                }"], [670, "                if (set.contains(BxZoneLabel.MET_BIB_INFO)) {"], [671, "                    keys++;"], [672, "                }"], [673, "                if (set.contains(BxZoneLabel.MET_TITLE)) {"], [674, "                    keys++;"], [675, "                }"], [676, "                int coverage = 0;"], [677, "                if (total > 0) {"], [678, "                    coverage = known*100/total;"], [679, "                }"], [680, "                System.out.print(coverage+\" \"+set.size()+\" \"+keys);"], [682, "                FileWriter fstream = new FileWriter("], [683, "                        StringTools.getTrueVizPath(nxmlPath).replace(\".xml\", \".\"+coverage+\".\"+set.size()+\".\"+keys+\".cerm.xml\"));"], [689, "                System.out.println(\" done\");"]], "deleted": [[26, "import pl.edu.icm.cermine.structure.model.BxDocument;"], [27, "import pl.edu.icm.cermine.structure.model.BxPage;"], [28, "import pl.edu.icm.cermine.structure.model.BxZone;"], [29, "import pl.edu.icm.cermine.structure.model.BxZoneLabel;"], [601, "    private static Double max(List<Double> values) {"], [602, "        Double max = Double.NEGATIVE_INFINITY;"], [603, "        for (Double val : values) {"], [604, "            if (!val.isNaN()) {"], [605, "                max = Math.min(max, val);"], [606, "            } else {"], [607, "                continue;"], [608, "            }"], [609, "        }"], [610, "        return max;"], [611, "    }"], [612, ""], [639, "                FileWriter fstream = new FileWriter(StringTools.getTrueVizPath(nxmlPath));"], [645, "                System.out.println(\"done\");"]]}, "num_lines_added": 62, "num_lines_removed": 18}