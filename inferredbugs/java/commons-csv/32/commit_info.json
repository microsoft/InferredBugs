{"hash": "aee6c50e2830c007a572cc96a57bc105308acc49", "message": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 400, "diff_parsed": {"added": [[61, "            assertTrue(Arrays.equals(re, parser.getRecord().values()));"], [70, "        List<CSVRecord> records = parser.getRecords();"], [71, "        assertEquals(res.length, records.size());"], [72, "        assertTrue(records.size() > 0);"], [74, "            assertTrue(Arrays.equals(res[i], records.get(i).values()));"], [91, "        List<CSVRecord> records = parser.getRecords();"], [92, "        assertEquals(res.length, records.size());"], [93, "        assertTrue(records.size() > 0);"], [95, "            assertTrue(Arrays.equals(res[i], records.get(i).values()));"], [110, "        List<CSVRecord> records = parser.getRecords();"], [111, "        assertEquals(res.length, records.size());"], [112, "        assertTrue(records.size() > 0);"], [114, "            assertTrue(Arrays.equals(res[i], records.get(i).values()));"], [138, "            List<CSVRecord> records = parser.getRecords();"], [139, "            assertEquals(res.length, records.size());"], [140, "            assertTrue(records.size() > 0);"], [142, "                assertTrue(Arrays.equals(res[i], records.get(i).values()));"], [165, "            List<CSVRecord> records = parser.getRecords();"], [166, "            assertEquals(res.length, records.size());"], [167, "            assertTrue(records.size() > 0);"], [169, "                assertTrue(Arrays.equals(res[i], records.get(i).values()));"], [189, "            List<CSVRecord> records = parser.getRecords();"], [190, "            assertEquals(res.length, records.size());"], [191, "            assertTrue(records.size() > 0);"], [193, "                assertTrue(Arrays.equals(res[i], records.get(i).values()));"], [211, "            List<CSVRecord> records = parser.getRecords();"], [212, "            assertEquals(res.length, records.size());"], [213, "            assertTrue(records.size() > 0);"], [215, "                assertTrue(Arrays.equals(res[i], records.get(i).values()));"], [245, "        List<CSVRecord> records = parser.getRecords();"], [246, "        assertEquals(res.length, records.size());"], [247, "        assertTrue(records.size() > 0);"], [249, "            assertTrue(Arrays.equals(res[i], records.get(i).values()));"], [286, "        CSVFormat format = new CSVFormat(',', '\\'', CSVFormat.DISABLED, '/', false, false, true, true, \"\\r\\n\", null);"], [289, "        List<CSVRecord> records = parser.getRecords();"], [290, "        assertTrue(records.size() > 0);"], [292, "            assertTrue(Arrays.equals(res[i], records.get(i).values()));"], [315, "        CSVFormat format = new CSVFormat(',',  CSVFormat.DISABLED,  CSVFormat.DISABLED, '/', false, false, true, true, \"\\r\\n\", null);"], [318, "        List<CSVRecord> records = parser.getRecords();"], [319, "        assertTrue(records.size() > 0);"], [321, "        assertTrue(CSVPrinterTest.equals(res, records));"], [341, "        List<CSVRecord> records = parser.getRecords();"], [342, "        assertTrue(records.size() > 0);"], [344, "        assertTrue(CSVPrinterTest.equals(res, records));"], [354, "        records = parser.getRecords();"], [355, ""], [356, "        assertTrue(CSVPrinterTest.equals(res_comments, records));"], [363, "        final Iterator<CSVRecord> iterator = parser.iterator();"], [364, "        CSVRecord record = iterator.next();"], [365, "        assertEquals(2, record.size());"], [366, "        assertEquals(\"abc\", record.get(0));"], [367, "        assertEquals(\"public\", record.get(1));"], [375, "        final Iterator<CSVRecord> iterator = parser.iterator();"], [376, "        CSVRecord record = iterator.next();"], [377, "        assertEquals(2, record.size());"], [378, "        assertEquals(\"abc\", record.get(0));"], [379, "        assertEquals(\"public\", record.get(1));"], [387, "        List<CSVRecord> records = parser.getRecords();"], [388, "        assertEquals(4, records.size());"], [395, "        List<CSVRecord> records = parser.getRecords();"], [396, "        assertEquals(4, records.size());"], [403, "        List<CSVRecord> records = parser.getRecords();"], [404, "        assertEquals(4, records.size());"], [413, "        List<CSVRecord> records = parser.getRecords();"], [414, "        assertEquals(3, records.size());"], [418, "    public void testForEach() throws Exception {"], [419, "        List<CSVRecord> records = new ArrayList<CSVRecord>();"], [423, "        for (CSVRecord record : CSVFormat.DEFAULT.parse(in)) {"], [428, "        assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, records.get(0).values()));"], [429, "        assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, records.get(1).values()));"], [430, "        assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, records.get(2).values()));"], [434, "    public void testIterator() throws Exception {"], [437, "        Iterator<CSVRecord> iterator = CSVFormat.DEFAULT.parse(in).iterator();"], [445, "        assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, iterator.next().values()));"], [446, "        assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, iterator.next().values()));"], [450, "        assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, iterator.next().values()));"], [460, ""], [461, "    @Test"], [462, "    public void testHeader() throws Exception {"], [463, "        Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");"], [464, ""], [465, "        Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator();"], [466, ""], [467, "        for (int i = 0; i < 2; i++) {"], [468, "            assertTrue(records.hasNext());"], [469, "            CSVRecord record = records.next();"], [470, "            assertEquals(record.get(0), record.get(\"a\"));"], [471, "            assertEquals(record.get(1), record.get(\"b\"));"], [472, "            assertEquals(record.get(2), record.get(\"c\"));"], [473, "        }"], [474, ""], [475, "        assertFalse(records.hasNext());"], [476, "    }"], [477, ""], [478, "    @Test"], [479, "    public void testProvidedHeader() throws Exception {"], [480, "        Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");"], [481, ""], [482, "        Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"A\", \"B\", \"C\").parse(in).iterator();"], [483, ""], [484, "        for (int i = 0; i < 3; i++) {"], [485, "            assertTrue(records.hasNext());"], [486, "            CSVRecord record = records.next();"], [487, "            assertEquals(record.get(0), record.get(\"A\"));"], [488, "            assertEquals(record.get(1), record.get(\"B\"));"], [489, "            assertEquals(record.get(2), record.get(\"C\"));"], [490, "        }"], [491, ""], [492, "        assertFalse(records.hasNext());"], [493, "    }"]], "deleted": [[61, "            assertTrue(Arrays.equals(re, parser.getRecord()));"], [70, "        String[][] tmp = parser.getRecords();"], [71, "        assertEquals(res.length, tmp.length);"], [72, "        assertTrue(tmp.length > 0);"], [74, "            assertTrue(Arrays.equals(res[i], tmp[i]));"], [91, "        String[][] tmp = parser.getRecords();"], [92, "        assertEquals(res.length, tmp.length);"], [93, "        assertTrue(tmp.length > 0);"], [95, "            assertTrue(Arrays.equals(res[i], tmp[i]));"], [110, "        String[][] tmp = parser.getRecords();"], [111, "        assertEquals(res.length, tmp.length);"], [112, "        assertTrue(tmp.length > 0);"], [114, "            assertTrue(Arrays.equals(res[i], tmp[i]));"], [138, "            String[][] tmp = parser.getRecords();"], [139, "            assertEquals(res.length, tmp.length);"], [140, "            assertTrue(tmp.length > 0);"], [142, "                assertTrue(Arrays.equals(res[i], tmp[i]));"], [165, "            String[][] tmp = parser.getRecords();"], [166, "            assertEquals(res.length, tmp.length);"], [167, "            assertTrue(tmp.length > 0);"], [169, "                assertTrue(Arrays.equals(res[i], tmp[i]));"], [189, "            String[][] tmp = parser.getRecords();"], [190, "            assertEquals(res.length, tmp.length);"], [191, "            assertTrue(tmp.length > 0);"], [193, "                assertTrue(Arrays.equals(res[i], tmp[i]));"], [211, "            String[][] tmp = parser.getRecords();"], [212, "            assertEquals(res.length, tmp.length);"], [213, "            assertTrue(tmp.length > 0);"], [215, "                assertTrue(Arrays.equals(res[i], tmp[i]));"], [245, "        String[][] tmp = parser.getRecords();"], [246, "        assertEquals(res.length, tmp.length);"], [247, "        assertTrue(tmp.length > 0);"], [249, "            assertTrue(Arrays.equals(res[i], tmp[i]));"], [286, "        CSVFormat format = new CSVFormat(',', '\\'', CSVFormat.DISABLED, '/', false, false, true, true, \"\\r\\n\");"], [289, "        String[][] tmp = parser.getRecords();"], [290, "        assertTrue(tmp.length > 0);"], [292, "            assertTrue(Arrays.equals(res[i], tmp[i]));"], [315, "        CSVFormat format = new CSVFormat(',',  CSVFormat.DISABLED,  CSVFormat.DISABLED, '/', false, false, true, true, \"\\r\\n\");"], [318, "        String[][] tmp = parser.getRecords();"], [319, "        assertTrue(tmp.length > 0);"], [321, "        if (!CSVPrinterTest.equals(res, tmp)) {"], [322, "            assertTrue(false);"], [323, "        }"], [328, ""], [344, "        String[][] tmp = parser.getRecords();"], [345, "        assertTrue(tmp.length > 0);"], [347, "        if (!CSVPrinterTest.equals(res, tmp)) {"], [348, "            assertTrue(false);"], [349, "        }"], [359, "        tmp = parser.getRecords();"], [360, ""], [361, "        if (!CSVPrinterTest.equals(res_comments, tmp)) {"], [362, "            assertTrue(false);"], [363, "        }"], [370, "        final Iterator<String[]> iterator = parser.iterator();"], [371, "        String[] data = iterator.next();"], [372, "        assertEquals(2, data.length);"], [373, "        assertEquals(\"abc\", data[0]);"], [374, "        assertEquals(\"public\", data[1]);"], [382, "        final Iterator<String[]> iterator = parser.iterator();"], [383, "        String[] data = iterator.next();"], [384, "        assertEquals(2, data.length);"], [385, "        assertEquals(\"abc\", data[0]);"], [386, "        assertEquals(\"public\", data[1]);"], [394, "        String[][] data = parser.getRecords();"], [395, "        assertEquals(4, data.length);"], [402, "        String[][] data = parser.getRecords();"], [403, "        assertEquals(4, data.length);"], [410, "        String[][] data = parser.getRecords();"], [411, "        assertEquals(4, data.length);"], [420, "        String[][] data = parser.getRecords();"], [421, "        assertEquals(3, data.length);"], [425, "    public void testForEach() {"], [426, "        List<String[]> records = new ArrayList<String[]>();"], [430, "        for (String[] record : CSVFormat.DEFAULT.parse(in)) {"], [435, "        assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, records.get(0)));"], [436, "        assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, records.get(1)));"], [437, "        assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, records.get(2)));"], [441, "    public void testIterator() {"], [444, "        Iterator<String[]> iterator = CSVFormat.DEFAULT.parse(in).iterator();"], [452, "        assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, iterator.next()));"], [453, "        assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, iterator.next()));"], [457, "        assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, iterator.next()));"]]}, "num_lines_added": 110, "num_lines_removed": 83}