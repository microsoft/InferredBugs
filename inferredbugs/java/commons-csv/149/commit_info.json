{"hash": "865872e0f1517796f4b203ff7682d922119514fa", "message": "[CSV-225] Parse method should avoid creating a redundant BufferedReader.", "file_num_lines": 287, "diff_parsed": {"added": [[26, "import java.io.InputStreamReader;"], [28, "import java.io.Reader;"], [31, "import java.nio.charset.StandardCharsets;"], [32, "import java.nio.file.Files;"], [33, "import java.nio.file.Paths;"], [64, "    private static int max = 11; // skip first test"], [71, "    private static final File BIG_FILE = new File(\"src/test/resources/perf/worldcitiespop.txt\");"], [75, "            System.out.printf(\"Found test fixture %s: %,d bytes.%n\", BIG_FILE, BIG_FILE.length());"], [77, "            final File compressedFile = new File(BIG_FILE.getParentFile(), BIG_FILE.getName() + \".gz\");"], [78, "            System.out.printf(\"Decompressing test fixture %s...%n\", compressedFile);"], [79, "            long bytesOut = 0L;"], [80, "            try (final InputStream input = new GZIPInputStream(new FileInputStream(compressedFile));"], [82, "                bytesOut = IOUtils.copy(input, output);"], [84, "            System.out.printf(\"Decompressed test fixture %s: %,d bytes to: %s: %,d bytes.%n\", compressedFile, compressedFile.length(), BIG_FILE, bytesOut);"], [88, "            max = Integer.parseInt(args[0]);"], [90, ""], [91, "        String tests[];"], [93, "            tests = new String[argc - 1];"], [95, "                tests[i - 1] = args[i];"], [98, "            tests = new String[] { \"file\", \"split\", \"extb\", \"exts\", \"csv\", \"csv-path\", \"csv-path-db\", \"csv-url\", \"lexreset\", \"lexnew\" };"], [100, "        for (final String p : PROPS) {"], [101, "            System.out.printf(\"%s=%s%n\", p, System.getProperty(p));"], [103, "        System.out.printf(\"Max count: %d%n%n\", max);"], [105, "        for (final String test : tests) {"], [112, "            } else if (\"csv-path\".equals(test)) {"], [113, "                testParsePath();"], [114, "            } else if (\"csv-path-db\".equals(test)) {"], [115, "                testParsePathDoubleBuffering();"], [116, "            } else if (\"csv-url\".equals(test)) {"], [117, "                testParseURL();"], [129, "                System.out.printf(\"Invalid test name: %s%n\", test);"], [134, "    private static Reader createReader() throws IOException {"], [135, "        return new InputStreamReader(new FileInputStream(BIG_FILE), StandardCharsets.ISO_8859_1);"], [143, "            count = c;"], [144, "            fields = f;"], [151, "        System.out.printf(\"%-20s: %5dms %d lines %d fields%n\", msg, elapsed, s.count, s.fields);"], [152, "        elapsedTimes[num] = elapsed;"], [153, "        num++;"], [159, "            long tot = 0;"], [160, "            for (int i = 1; i < num; i++) { // skip first test"], [163, "            System.out.printf(\"%-20s: %5dms%n%n\", \"Average(not first)\", tot / (num - 1));"], [165, "        num = 0; // ready for next set"], [172, "            try (final BufferedReader in = new BufferedReader(createReader())) {"], [181, "    private static Stats readAll(final BufferedReader in, final boolean split) throws IOException {"], [182, "        int count = 0;"], [183, "        int fields = 0;"], [184, "        String record;"], [185, "        while ((record = in.readLine()) != null) {"], [186, "            count++;"], [187, "            fields += split ? record.split(\",\").length : 1;"], [188, "        }"], [189, "        return new Stats(count, fields);"], [190, "    }"], [230, "    private static void testParser(final String msg, final CSVParserFactory fac) throws Exception {"], [234, "            try (final CSVParser parser = fac.createParser()) {"], [235, "                startMillis = System.currentTimeMillis();"], [236, "                stats = iterate(parser);"], [238, "            show(msg, stats, startMillis);"], [243, "    private static interface CSVParserFactory {"], [244, "        public CSVParser createParser() throws IOException;"], [245, "    }"], [246, ""], [247, "    private static void testParseCommonsCSV() throws Exception {"], [248, "        testParser(\"CSV\", new CSVParserFactory() {"], [249, "            public CSVParser createParser() throws IOException {"], [250, "                return new CSVParser(createReader(), format);"], [251, "            }"], [252, "        });"], [253, "    }"], [254, ""], [255, "    private static void testParsePath() throws Exception {"], [256, "        testParser(\"CSV-PATH\", new CSVParserFactory() {"], [257, "            public CSVParser createParser() throws IOException {"], [258, "                return CSVParser.parse(Files.newInputStream(Paths.get(BIG_FILE.toURI())), StandardCharsets.ISO_8859_1, format);"], [259, "            }"], [260, "        });"], [261, "    }"], [263, "    private static void testParsePathDoubleBuffering() throws Exception {"], [264, "        testParser(\"CSV-PATH-DB\", new CSVParserFactory() {"], [265, "            public CSVParser createParser() throws IOException {"], [266, "                return CSVParser.parse(Files.newBufferedReader(Paths.get(BIG_FILE.toURI()), StandardCharsets.ISO_8859_1), format);"], [267, "            }"], [268, "        });"], [269, "    }"], [270, ""], [271, "    private static void testParseURL() throws Exception {"], [272, "        testParser(\"CSV-URL\", new CSVParserFactory() {"], [273, "            public CSVParser createParser() throws IOException {"], [274, "                //NOTE: URL will always return a BufferedInputStream."], [275, "                return CSVParser.parse(BIG_FILE.toURI().toURL(), StandardCharsets.ISO_8859_1, format);"], [276, "            }"], [277, "        });"], [278, "    }"], [279, ""], [280, "    private static Constructor<Lexer> getLexerCtor(final String clazz) throws Exception {"], [281, "        @SuppressWarnings(\"unchecked\")"], [282, "        final Class<Lexer> lexer = (Class<Lexer>) Class.forName(\"org.apache.commons.csv.\" + clazz);"], [283, "        return lexer.getConstructor(new Class<?>[]{CSVFormat.class, ExtendedBufferedReader.class});"], [284, "    }"], [294, "                    final Lexer lexer = createTestCSVLexer(test, input)) {"], [340, "    private static Stats iterate(final Iterable<CSVRecord> it) {"], [341, "        int count = 0;"], [342, "        int fields = 0;"], [343, "        for (final CSVRecord record : it) {"], [344, "            count++;"], [345, "            fields += record.size();"], [346, "        }"], [347, "        return new Stats(count, fields);"], [348, "    }"]], "deleted": [[24, "import java.io.FileReader;"], [58, ""], [61, "    private static int max = 10;"], [68, "    private static final File BIG_FILE = new File(System.getProperty(\"java.io.tmpdir\"), \"worldcitiespop.txt\");"], [72, "            System.out.println(String.format(\"Found test fixture %s: %,d bytes.\", BIG_FILE, BIG_FILE.length()));"], [74, "            System.out.println(\"Decompressing test fixture \" + BIG_FILE + \"...\");"], [75, "            try (final InputStream input = new GZIPInputStream("], [76, "                    new FileInputStream(\"src/test/resources/perf/worldcitiespop.txt.gz\"));"], [78, "                IOUtils.copy(input, output);"], [80, "            System.out.println(String.format(\"Decompressed test fixture %s: %,d bytes.\", BIG_FILE, BIG_FILE.length()));"], [83, "        String tests[];"], [85, "            max=Integer.parseInt(args[0]);"], [88, "            tests = new String[argc-1];"], [90, "                tests[i-1]=args[i];"], [93, "            tests=new String[]{\"file\", \"split\", \"extb\", \"exts\", \"csv\", \"lexreset\", \"lexnew\"};"], [95, "        for(final String p : PROPS) {"], [96, "            System.out.println(p+\"=\"+System.getProperty(p));"], [98, "        System.out.println(\"Max count: \"+max+\"\\n\");"], [100, "        for(final String test : tests) {"], [118, "                System.out.println(\"Invalid test name: \"+test);"], [123, "    private static BufferedReader createReader() throws IOException {"], [124, "        return new BufferedReader(new FileReader(BIG_FILE));"], [132, "            count=c;"], [133, "            fields=f;"], [140, "        System.out.printf(\"%-20s: %5dms \" + s.count + \" lines \"+ s.fields + \" fields%n\",msg,elapsed);"], [141, "        elapsedTimes[num++]=elapsed;"], [146, "        long tot = 0;"], [148, "            for(int i=1; i < num; i++) { // skip first test"], [151, "            System.out.printf(\"%-20s: %5dms%n%n\", \"Average(not first)\", tot/(num-1));"], [153, "        num=0; // ready for next set"], [160, "            try (final BufferedReader in = createReader()) {"], [169, "   private static Stats readAll(final BufferedReader in, final boolean split) throws IOException {"], [170, "       int count = 0;"], [171, "       int fields = 0;"], [172, "       String record;"], [173, "       while ((record=in.readLine()) != null) {"], [174, "           count++;"], [175, "           fields+= split ? record.split(\",\").length : 1;"], [176, "       }"], [177, "       return new Stats(count, fields);"], [178, "   }"], [218, "    private static void testParseCommonsCSV() throws Exception {"], [222, "            try (final BufferedReader reader = createReader()) {"], [223, "                try (final CSVParser parser = new CSVParser(reader, format)) {"], [224, "                    startMillis = System.currentTimeMillis();"], [225, "                    stats = iterate(parser);"], [226, "                }"], [227, "                show(\"CSV\", stats, startMillis);"], [234, "   private static Constructor<Lexer> getLexerCtor(final String clazz) throws Exception {"], [235, "       @SuppressWarnings(\"unchecked\")"], [236, "       final Class<Lexer> lexer = (Class<Lexer>) Class.forName(\"org.apache.commons.csv.\" + clazz);"], [237, "       return lexer.getConstructor(new Class<?>[]{CSVFormat.class, ExtendedBufferedReader.class});"], [238, "   }"], [248, "                    Lexer lexer = createTestCSVLexer(test, input)) {"], [294, "   private static Stats iterate(final Iterable<CSVRecord> it) {"], [295, "       int count = 0;"], [296, "       int fields = 0;"], [297, "       for (final CSVRecord record : it) {"], [298, "           count++;"], [299, "           fields+=record.size();"], [300, "       }"], [301, "       return new Stats(count, fields);"], [302, "   }"]]}, "num_lines_added": 109, "num_lines_removed": 63}