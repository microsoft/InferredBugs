{"hash": "16bfec07ffd785e5abbabdc4145eeac5cccc2c79", "message": "Turned the token types into an Enum\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199872 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 418, "diff_parsed": {"added": [[17, ""], [27, "import static org.apache.commons.csv.CSVParser.Token.Type.*;"], [28, ""], [66, "            return t.type.name() + \";\" + t.content + \";\";"], [78, "        assertEquals(TOKEN + \";abc;\", parser.testNextToken());"], [79, "        assertEquals(TOKEN + \";def;\", parser.testNextToken());"], [80, "        assertEquals(TOKEN + \";hijk;\", parser.testNextToken());"], [81, "        assertEquals(TOKEN + \";lmnop;\", parser.testNextToken());"], [82, "        assertEquals(TOKEN + \";qrst;\", parser.testNextToken());"], [83, "        assertEquals(TOKEN + \";uv;\", parser.testNextToken());"], [84, "        assertEquals(TOKEN + \";wxy;\", parser.testNextToken());"], [85, "        assertEquals(TOKEN + \";z;\", parser.testNextToken());"], [86, "        assertEquals(TOKEN + \";;\", parser.testNextToken());"], [87, "        assertEquals(EOF + \";;\", parser.testNextToken());"], [105, "        assertEquals(TOKEN + \";1;\", parser.testNextToken());"], [106, "        assertEquals(TOKEN + \";2;\", parser.testNextToken());"], [107, "        assertEquals(TOKEN + \";3;\", parser.testNextToken());"], [108, "        assertEquals(EORECORD + \";;\", parser.testNextToken());"], [109, "        assertEquals(TOKEN + \";a;\", parser.testNextToken());"], [110, "        assertEquals(TOKEN + \";b x;\", parser.testNextToken());"], [111, "        assertEquals(EORECORD + \";c;\", parser.testNextToken());"], [112, "        assertEquals(EORECORD + \";;\", parser.testNextToken());"], [113, "        assertEquals(TOKEN + \";d;\", parser.testNextToken());"], [114, "        assertEquals(TOKEN + \";e;\", parser.testNextToken());"], [115, "        assertEquals(EORECORD + \";;\", parser.testNextToken());"], [116, "        assertEquals(EOF + \";;\", parser.testNextToken());"], [117, "        assertEquals(EOF + \";;\", parser.testNextToken());"], [130, "        assertEquals(TOKEN + \";a;\", parser.testNextToken());"], [132, "        assertEquals(TOKEN + \";\\\\;\", parser.testNextToken());"], [133, "        assertEquals(TOKEN + \";;\", parser.testNextToken());"], [134, "        assertEquals(EORECORD + \";b;\", parser.testNextToken());"], [136, "        assertEquals(TOKEN + \";\\\\;\", parser.testNextToken());"], [137, "        assertEquals(TOKEN + \";;\", parser.testNextToken());"], [138, "        assertEquals(EOF + \";;\", parser.testNextToken());"], [151, "        assertEquals(TOKEN + \";a;\", parser.testNextToken());"], [152, "        assertEquals(TOKEN + \";foo;\", parser.testNextToken());"], [153, "        assertEquals(EORECORD + \";b;\", parser.testNextToken());"], [154, "        assertEquals(TOKEN + \";a;\", parser.testNextToken());"], [155, "        assertEquals(TOKEN + \"; foo;\", parser.testNextToken());"], [156, "        assertEquals(EORECORD + \";b;\", parser.testNextToken());"], [157, "        assertEquals(TOKEN + \";a;\", parser.testNextToken());"], [158, "        assertEquals(TOKEN + \";foo ;\", parser.testNextToken());"], [159, "        assertEquals(EORECORD + \";b;\", parser.testNextToken());"], [160, "        assertEquals(TOKEN + \";a;\", parser.testNextToken());"], [161, "        assertEquals(TOKEN + \"; foo ;\", parser.testNextToken());"], [162, "//     assertEquals(EORECORD + \";b;\", parser.testNextToken());"], [163, "        assertEquals(EOF + \";b;\", parser.testNextToken());"], [171, "        assertEquals(TOKEN + \";a;\", parser.testNextToken());"], [172, "        assertEquals(TOKEN + \";foo\\n;\", parser.testNextToken());"], [173, "        assertEquals(EORECORD + \";b;\", parser.testNextToken());"], [174, "        assertEquals(EORECORD + \";foo\\n  baar ,,,;\","], [176, "        assertEquals(EOF + \";\\n\\t \\n;\", parser.testNextToken());"], [189, "        assertEquals(TOKEN + \";a;\", parser.testNextToken());"], [191, "                EORECORD + \";b and ' more\\n;\","], [215, "        for (String[] re : res) {"], [216, "            assertTrue(Arrays.equals(re, parser.getLine()));"], [218, ""], [219, "        assertTrue(parser.getLine() == null);"], [286, ""], [287, "        for (String code : codes) {"], [561, "        assertEquals(TOKEN + \";one;\", parser.testNextToken());"], [562, "        assertEquals(TOKEN + \";two;\", parser.testNextToken());"], [563, "        assertEquals(TOKEN + \";;\", parser.testNextToken());"], [564, "        assertEquals(TOKEN + \";four;\", parser.testNextToken());"], [565, "        assertEquals(TOKEN + \";five;\", parser.testNextToken());"], [566, "        assertEquals(EOF + \";six;\", parser.testNextToken());"]], "deleted": [[63, "            return Integer.toString(t.type) + \";\" + t.content + \";\";"], [75, "        assertEquals(CSVParser.TT_TOKEN + \";abc;\", parser.testNextToken());"], [76, "        assertEquals(CSVParser.TT_TOKEN + \";def;\", parser.testNextToken());"], [77, "        assertEquals(CSVParser.TT_TOKEN + \";hijk;\", parser.testNextToken());"], [78, "        assertEquals(CSVParser.TT_TOKEN + \";lmnop;\", parser.testNextToken());"], [79, "        assertEquals(CSVParser.TT_TOKEN + \";qrst;\", parser.testNextToken());"], [80, "        assertEquals(CSVParser.TT_TOKEN + \";uv;\", parser.testNextToken());"], [81, "        assertEquals(CSVParser.TT_TOKEN + \";wxy;\", parser.testNextToken());"], [82, "        assertEquals(CSVParser.TT_TOKEN + \";z;\", parser.testNextToken());"], [83, "        assertEquals(CSVParser.TT_TOKEN + \";;\", parser.testNextToken());"], [84, "        assertEquals(CSVParser.TT_EOF + \";;\", parser.testNextToken());"], [102, "        assertEquals(CSVParser.TT_TOKEN + \";1;\", parser.testNextToken());"], [103, "        assertEquals(CSVParser.TT_TOKEN + \";2;\", parser.testNextToken());"], [104, "        assertEquals(CSVParser.TT_TOKEN + \";3;\", parser.testNextToken());"], [105, "        assertEquals(CSVParser.TT_EORECORD + \";;\", parser.testNextToken());"], [106, "        assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());"], [107, "        assertEquals(CSVParser.TT_TOKEN + \";b x;\", parser.testNextToken());"], [108, "        assertEquals(CSVParser.TT_EORECORD + \";c;\", parser.testNextToken());"], [109, "        assertEquals(CSVParser.TT_EORECORD + \";;\", parser.testNextToken());"], [110, "        assertEquals(CSVParser.TT_TOKEN + \";d;\", parser.testNextToken());"], [111, "        assertEquals(CSVParser.TT_TOKEN + \";e;\", parser.testNextToken());"], [112, "        assertEquals(CSVParser.TT_EORECORD + \";;\", parser.testNextToken());"], [113, "        assertEquals(CSVParser.TT_EOF + \";;\", parser.testNextToken());"], [114, "        assertEquals(CSVParser.TT_EOF + \";;\", parser.testNextToken());"], [127, "        assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());"], [129, "        assertEquals(CSVParser.TT_TOKEN + \";\\\\;\", parser.testNextToken());"], [130, "        assertEquals(CSVParser.TT_TOKEN + \";;\", parser.testNextToken());"], [131, "        assertEquals(CSVParser.TT_EORECORD + \";b;\", parser.testNextToken());"], [133, "        assertEquals(CSVParser.TT_TOKEN + \";\\\\;\", parser.testNextToken());"], [134, "        assertEquals(CSVParser.TT_TOKEN + \";;\", parser.testNextToken());"], [135, "        assertEquals(CSVParser.TT_EOF + \";;\", parser.testNextToken());"], [148, "        assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());"], [149, "        assertEquals(CSVParser.TT_TOKEN + \";foo;\", parser.testNextToken());"], [150, "        assertEquals(CSVParser.TT_EORECORD + \";b;\", parser.testNextToken());"], [151, "        assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());"], [152, "        assertEquals(CSVParser.TT_TOKEN + \"; foo;\", parser.testNextToken());"], [153, "        assertEquals(CSVParser.TT_EORECORD + \";b;\", parser.testNextToken());"], [154, "        assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());"], [155, "        assertEquals(CSVParser.TT_TOKEN + \";foo ;\", parser.testNextToken());"], [156, "        assertEquals(CSVParser.TT_EORECORD + \";b;\", parser.testNextToken());"], [157, "        assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());"], [158, "        assertEquals(CSVParser.TT_TOKEN + \"; foo ;\", parser.testNextToken());"], [159, "//     assertEquals(CSVParser.TT_EORECORD + \";b;\", parser.testNextToken());"], [160, "        assertEquals(CSVParser.TT_EOF + \";b;\", parser.testNextToken());"], [168, "        assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());"], [169, "        assertEquals(CSVParser.TT_TOKEN + \";foo\\n;\", parser.testNextToken());"], [170, "        assertEquals(CSVParser.TT_EORECORD + \";b;\", parser.testNextToken());"], [171, "        assertEquals(CSVParser.TT_EORECORD + \";foo\\n  baar ,,,;\","], [173, "        assertEquals(CSVParser.TT_EOF + \";\\n\\t \\n;\", parser.testNextToken());"], [186, "        assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());"], [188, "                CSVParser.TT_EORECORD + \";b and ' more\\n;\","], [212, "        String[] tmp = null;"], [213, "        for (int i = 0; i < res.length; i++) {"], [214, "            tmp = parser.getLine();"], [215, "            assertTrue(Arrays.equals(res[i], tmp));"], [217, "        tmp = parser.getLine();"], [218, "        assertTrue(tmp == null);"], [285, "        String code;"], [286, "        for (int codeIndex = 0; codeIndex < codes.length; codeIndex++) {"], [287, "            code = codes[codeIndex];"], [561, "        assertEquals(CSVParser.TT_TOKEN + \";one;\", parser.testNextToken());"], [562, "        assertEquals(CSVParser.TT_TOKEN + \";two;\", parser.testNextToken());"], [563, "        assertEquals(CSVParser.TT_TOKEN + \";;\", parser.testNextToken());"], [564, "        assertEquals(CSVParser.TT_TOKEN + \";four;\", parser.testNextToken());"], [565, "        assertEquals(CSVParser.TT_TOKEN + \";five;\", parser.testNextToken());"], [566, "        assertEquals(CSVParser.TT_EOF + \";six;\", parser.testNextToken());"]]}, "num_lines_added": 66, "num_lines_removed": 66}