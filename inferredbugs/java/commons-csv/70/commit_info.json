{"hash": "61a879bf681402a7986165c32c9e1c4e3fb94b18", "message": "Replace assertTokenEquals with Token matcher\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465692 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 253, "diff_parsed": {"added": [[33, "import static org.apache.commons.csv.TokenMatchers.matches;"], [65, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"abc\"));"], [66, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"def\"));"], [67, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"hijk\"));"], [68, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"lmnop\"));"], [69, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"qrst\"));"], [70, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"uv\"));"], [71, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"wxy\"));"], [72, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"z\"));"], [73, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));"], [74, "        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));"], [102, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"1\"));"], [103, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"2\"));"], [104, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"3\"));"], [105, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 1"], [106, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));"], [107, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"b x\"));"], [108, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"c#no-comment\")); // 2"], [109, "        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"foo\"));              // 3"], [111, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"d\"));"], [112, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"e\"));"], [113, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"#no-comment\"));  // 5"], [114, "        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"penultimate comment\"));              // 6"], [115, "        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"Final comment\"));              // 7"], [116, "        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));"], [117, "        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));"], [145, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"1\"));"], [146, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"2\"));"], [147, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"3\"));"], [148, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 1"], [149, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 1b"], [150, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 1c"], [151, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));"], [152, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"b x\"));"], [153, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"c#no-comment\")); // 2"], [154, "        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"foo\"));           // 3"], [155, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 4"], [156, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 4b"], [157, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"d\"));"], [158, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"e\"));"], [159, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"#no-comment\"));  // 5"], [160, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 5b"], [161, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 5c"], [162, "        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"penultimate comment\"));              // 6"], [163, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 6b"], [164, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 6c"], [165, "        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"Final comment\"));              // 7"], [166, "        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));"], [167, "        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));"], [182, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));"], [184, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\\\\\"));"], [185, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));"], [186, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\\\\\"));"], [188, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\\\\\"));"], [189, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));"], [190, "        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));"], [204, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));"], [205, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \",\"));"], [206, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\\\\\"));"], [207, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \",\"));"], [208, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\\nc\"));"], [209, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"d\\r\"));"], [210, "        assertThat(parser.nextToken(new Token()), matches(EOF, \"e\"));"], [223, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));"], [224, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"foo\"));"], [225, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\"));"], [226, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));"], [227, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \" foo\"));"], [228, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\"));"], [229, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));"], [230, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"foo \"));"], [231, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\"));"], [232, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));"], [233, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \" foo \"));"], [235, "        assertThat(parser.nextToken(new Token()), matches(EOF, \"b\"));"], [243, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));"], [244, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"foo\\n\"));"], [245, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\"));"], [246, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"foo\\n  baar ,,,\"));"], [247, "        assertThat(parser.nextToken(new Token()), matches(EOF, \"\\n\\t \\n\"));"], [262, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));"], [263, "        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b and ' more\\n\"));"], [271, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"one\"));"], [272, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"two\"));"], [273, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));"], [274, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"four\"));"], [275, "        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"five\"));"], [276, "        assertThat(parser.nextToken(new Token()), matches(EOF, \"six\"));"]], "deleted": [[29, "import static org.junit.Assert.assertEquals;"], [60, "    private void assertTokenEquals(final Token.Type expectedType, final String expectedContent, final Token token) {"], [61, "        assertEquals(\"Token type\", expectedType, token.type);"], [62, "        assertEquals(\"Token content\", expectedContent, token.content.toString());"], [63, "    }"], [64, ""], [70, "        assertTokenEquals(TOKEN, \"abc\", parser.nextToken(new Token()));"], [71, "        assertTokenEquals(TOKEN, \"def\", parser.nextToken(new Token()));"], [72, "        assertTokenEquals(TOKEN, \"hijk\", parser.nextToken(new Token()));"], [73, "        assertTokenEquals(TOKEN, \"lmnop\", parser.nextToken(new Token()));"], [74, "        assertTokenEquals(TOKEN, \"qrst\", parser.nextToken(new Token()));"], [75, "        assertTokenEquals(TOKEN, \"uv\", parser.nextToken(new Token()));"], [76, "        assertTokenEquals(TOKEN, \"wxy\", parser.nextToken(new Token()));"], [77, "        assertTokenEquals(TOKEN, \"z\", parser.nextToken(new Token()));"], [78, "        assertTokenEquals(TOKEN, \"\", parser.nextToken(new Token()));"], [79, "        assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));"], [107, "        assertTokenEquals(TOKEN, \"1\", parser.nextToken(new Token()));"], [108, "        assertTokenEquals(TOKEN, \"2\", parser.nextToken(new Token()));"], [109, "        assertTokenEquals(TOKEN, \"3\", parser.nextToken(new Token()));"], [110, "        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 1"], [111, "        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));"], [112, "        assertTokenEquals(TOKEN, \"b x\", parser.nextToken(new Token()));"], [113, "        assertTokenEquals(EORECORD, \"c#no-comment\", parser.nextToken(new Token())); // 2"], [114, "        assertTokenEquals(COMMENT, \"foo\", parser.nextToken(new Token()));              // 3"], [116, "        assertTokenEquals(TOKEN, \"d\", parser.nextToken(new Token()));"], [117, "        assertTokenEquals(TOKEN, \"e\", parser.nextToken(new Token()));"], [118, "        assertTokenEquals(EORECORD, \"#no-comment\", parser.nextToken(new Token()));  // 5"], [119, "        assertTokenEquals(COMMENT, \"penultimate comment\", parser.nextToken(new Token()));              // 6"], [120, "        assertTokenEquals(COMMENT, \"Final comment\", parser.nextToken(new Token()));              // 7"], [121, "        assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));"], [122, "        assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));"], [150, "        assertTokenEquals(TOKEN, \"1\", parser.nextToken(new Token()));"], [151, "        assertTokenEquals(TOKEN, \"2\", parser.nextToken(new Token()));"], [152, "        assertTokenEquals(TOKEN, \"3\", parser.nextToken(new Token()));"], [153, "        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 1"], [154, "        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 1b"], [155, "        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 1c"], [156, "        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));"], [157, "        assertTokenEquals(TOKEN, \"b x\", parser.nextToken(new Token()));"], [158, "        assertTokenEquals(EORECORD, \"c#no-comment\", parser.nextToken(new Token())); // 2"], [159, "        assertTokenEquals(COMMENT, \"foo\", parser.nextToken(new Token()));           // 3"], [160, "        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 4"], [161, "        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 4b"], [162, "        assertTokenEquals(TOKEN, \"d\", parser.nextToken(new Token()));"], [163, "        assertTokenEquals(TOKEN, \"e\", parser.nextToken(new Token()));"], [164, "        assertTokenEquals(EORECORD, \"#no-comment\", parser.nextToken(new Token()));  // 5"], [165, "        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 5b"], [166, "        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 5c"], [167, "        assertTokenEquals(COMMENT, \"penultimate comment\", parser.nextToken(new Token()));              // 6"], [168, "        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 6b"], [169, "        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 6c"], [170, "        assertTokenEquals(COMMENT, \"Final comment\", parser.nextToken(new Token()));              // 7"], [171, "        assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));"], [172, "        assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));"], [187, "        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));"], [189, "        assertTokenEquals(TOKEN, \"\\\\\", parser.nextToken(new Token()));"], [190, "        assertTokenEquals(TOKEN, \"\", parser.nextToken(new Token()));"], [191, "        assertTokenEquals(EORECORD, \"b\\\\\", parser.nextToken(new Token()));"], [193, "        assertTokenEquals(TOKEN, \"\\\\\", parser.nextToken(new Token()));"], [194, "        assertTokenEquals(TOKEN, \"\", parser.nextToken(new Token()));"], [195, "        assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));"], [209, "        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));"], [210, "        assertTokenEquals(TOKEN, \",\", parser.nextToken(new Token()));"], [211, "        assertTokenEquals(EORECORD, \"b\\\\\", parser.nextToken(new Token()));"], [212, "        assertTokenEquals(TOKEN, \",\", parser.nextToken(new Token()));"], [213, "        assertTokenEquals(TOKEN, \"\\nc\", parser.nextToken(new Token()));"], [214, "        assertTokenEquals(EORECORD, \"d\\r\", parser.nextToken(new Token()));"], [215, "        assertTokenEquals(EOF, \"e\", parser.nextToken(new Token()));"], [228, "        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));"], [229, "        assertTokenEquals(TOKEN, \"foo\", parser.nextToken(new Token()));"], [230, "        assertTokenEquals(EORECORD, \"b\", parser.nextToken(new Token()));"], [231, "        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));"], [232, "        assertTokenEquals(TOKEN, \" foo\", parser.nextToken(new Token()));"], [233, "        assertTokenEquals(EORECORD, \"b\", parser.nextToken(new Token()));"], [234, "        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));"], [235, "        assertTokenEquals(TOKEN, \"foo \", parser.nextToken(new Token()));"], [236, "        assertTokenEquals(EORECORD, \"b\", parser.nextToken(new Token()));"], [237, "        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));"], [238, "        assertTokenEquals(TOKEN, \" foo \", parser.nextToken(new Token()));"], [240, "        assertTokenEquals(EOF, \"b\", parser.nextToken(new Token()));"], [248, "        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));"], [249, "        assertTokenEquals(TOKEN, \"foo\\n\", parser.nextToken(new Token()));"], [250, "        assertTokenEquals(EORECORD, \"b\", parser.nextToken(new Token()));"], [251, "        assertTokenEquals(EORECORD, \"foo\\n  baar ,,,\", parser.nextToken(new Token()));"], [252, "        assertTokenEquals(EOF, \"\\n\\t \\n\", parser.nextToken(new Token()));"], [267, "        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));"], [268, "        assertTokenEquals(EORECORD, \"b and ' more\\n\", parser.nextToken(new Token()));"], [276, "        assertTokenEquals(TOKEN, \"one\", parser.nextToken(new Token()));"], [277, "        assertTokenEquals(TOKEN, \"two\", parser.nextToken(new Token()));"], [278, "        assertTokenEquals(TOKEN, \"\", parser.nextToken(new Token()));"], [279, "        assertTokenEquals(TOKEN, \"four\", parser.nextToken(new Token()));"], [280, "        assertTokenEquals(TOKEN, \"five\", parser.nextToken(new Token()));"], [281, "        assertTokenEquals(EOF, \"six\", parser.nextToken(new Token()));"]]}, "num_lines_added": 88, "num_lines_removed": 93}