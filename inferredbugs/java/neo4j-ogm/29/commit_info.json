{"hash": "2ea280b8328b1c8a0b2d0208c61a38634a09a2e3", "message": "Refactor the rest mapper to depend only on NodeModel and RelationshipModel", "file_num_lines": 132, "diff_parsed": {"added": [[33, " *  Map NodeModels and RelationshipModels obtained from cypher queries to domain entities"], [34, " *  @author Luanne Misquitta"], [49, "\t\tRestModel model = response.next();"], [51, "\t\tMap<Long, String> relationshipEntityColumns = new HashMap<>(); //Relationship ID to column name"], [52, ""], [54, ""], [55, "\t\twhile (model.getRow().entrySet().size() > 0) {"], [56, "\t\t\tMap<String,Object> row = model.getRow();"], [58, "\t\t\tfor (Map.Entry<String,Object> entry : row.entrySet()) {"], [59, "\t\t\t\tObject value = entry.getValue();"], [63, "\t\t\t\t\t\tfor (int i=0; i< entityList.size(); i++) {"], [64, "\t\t\t\t\t\t\tObject mapped = mapEntity(entry.getKey(), entityList.get(i), relationshipModels, relationshipEntityColumns);"], [65, "\t\t\t\t\t\t\tif (mapped != null) { //if null, it'll be a relationship, which we're mapping after all nodes"], [66, "\t\t\t\t\t\t\t\tentityList.set(i, mapped);"], [71, "\t\t\t\t\t\tconvertListValueToArray(entityList, entry);"], [72, "\t\t\t\t\t}"], [73, "\t\t\t\t}"], [74, "\t\t\t\telse {"], [75, "\t\t\t\t\tif (isMappable(Arrays.asList(value))) {"], [76, "\t\t\t\t\t\tObject mapped = mapEntity(entry.getKey(), value, relationshipModels, relationshipEntityColumns);"], [77, "\t\t\t\t\t\tif (mapped != null) {"], [78, "\t\t\t\t\t\t\tentry.setValue(mapped);"], [83, "\t\t\t}"], [89, "\t\t\t\tObject rels = row.get(relationshipEntityColumns.get(entry.getKey()));"], [90, "\t\t\t\tif (rels instanceof List) {"], [91, "\t\t\t\t\tList relsList = (List)rels;"], [92, "\t\t\t\t\tfor (int i=0;i<relsList.size(); i++) {"], [93, "\t\t\t\t\t\tif (relsList.get(i) instanceof RelationshipModel) {"], [94, "\t\t\t\t\t\t\tif (((RelationshipModel) relsList.get(i)).getId().equals(entry.getKey())) {"], [95, "\t\t\t\t\t\t\t\trelsList.set(i, entry.getValue());"], [96, "\t\t\t\t\t\t\t}"], [97, "\t\t\t\t\t\t}"], [98, "\t\t\t\t\t}"], [104, ""], [112, "\tprivate void convertListValueToArray(List entityList, Map.Entry<String, Object> entry) {"], [113, "\t\tClass arrayClass = null;"], [114, "\t\tfor (Object element : entityList) {"], [115, "\t\t\tClass clazz = element.getClass();"], [116, "\t\t\tif (arrayClass == null) {"], [117, "\t\t\t\tarrayClass = clazz;"], [118, "\t\t\t}"], [119, "\t\t\telse {"], [120, "\t\t\t\tif (arrayClass != clazz) {"], [121, "\t\t\t\t\tarrayClass = null;"], [122, "\t\t\t\t\tbreak;"], [123, "\t\t\t\t}"], [126, "\t\tif (arrayClass == null) {"], [127, "\t\t\tentry.setValue(entityList.toArray());"], [128, "\t\t}"], [129, "\t\telse {"], [130, "\t\t\tObject array = Array.newInstance(arrayClass, entityList.size());"], [131, "\t\t\tfor (int j = 0; j < entityList.size(); j++) {"], [132, "\t\t\t\tArray.set(array, j, Utils.coerceTypes(arrayClass, entityList.get(j)));"], [133, "\t\t\t}"], [134, "\t\t\tentry.setValue(array);"], [135, "\t\t}"], [138, "\tprivate boolean isMappable(List entityList) {"], [139, "\t\tfor (Object entityObj : entityList) {"], [140, "\t\t\tif (entityObj instanceof NodeModel || entityObj instanceof RelationshipModel) {"], [141, "\t\t\t\tcontinue;"], [142, "\t\t\t}"], [143, "\t\t\treturn false;"], [145, "\t\treturn true;"], [148, "\tprivate Object mapEntity(String column, Object entity, List<RelationshipModel> relationshipModels, Map<Long, String> relationshipEntityColumns) {"], [149, "\t\tif (entity instanceof NodeModel) {"], [150, "\t\t\tNodeModel nodeModel = (NodeModel) entity;"], [151, "\t\t\tDefaultGraphModel graphModel = new DefaultGraphModel();"], [152, "\t\t\tgraphModel.setNodes(new NodeModel[]{nodeModel});"], [153, "\t\t\tList mapped = graphEntityMapper.map(metaData.resolve(nodeModel.getLabels()).getUnderlyingClass(), graphModel);"], [154, "\t\t\treturn mapped.get(0);"], [155, "\t\t} else if (entity instanceof RelationshipModel) {"], [156, "\t\t\tRelationshipModel relationshipModel = (RelationshipModel) entity;"], [157, "\t\t\trelationshipModels.add(relationshipModel);"], [158, "\t\t\tif (relationshipModel.getPropertyList().size() > 0) {"], [159, "\t\t\t\trelationshipEntityColumns.put(relationshipModel.getId(), column);"], [162, "\t\treturn null;"], [164, ""]], "deleted": [[33, " * @author Luanne Misquitta"], [47, "\t\t//TODO refactor to decouple from the REST response format"], [49, "\t\tRestModel model;"], [51, "\t\tString[] columns = response.columns();"], [52, "\t\tMap<Long, String> relationshipEntityColumns = new HashMap<>();"], [53, "\t\tmodel = response.next();"], [55, "\t\twhile (model.getValues() != null) {"], [57, "\t\t\tMap<String, Object> row = new HashMap<>();"], [58, "\t\t\tfor (int i = 0; i < columns.length; i++) {"], [59, "\t\t\t\tString column = columns[i];"], [60, "\t\t\t\tObject value = model.getValues()[i];"], [63, "\t\t\t\t\t//If the entities in this list aren't mappable, then just add the entity directly to the resultset"], [65, "\t\t\t\t\t\tList<Object> rowVals = new ArrayList<>();"], [66, "\t\t\t\t\t\tfor (Object entityObj : entityList) {"], [67, "\t\t\t\t\t\t\tObject mapped = map(relationshipModels, relationshipEntityColumns, column, value, entityObj);"], [68, "\t\t\t\t\t\t\tif (mapped != null) {"], [69, "\t\t\t\t\t\t\t\trowVals.add(mapped);"], [72, "\t\t\t\t\t\trow.put(column, rowVals);"], [75, "\t\t\t\t\t\tClass arrayClass = null;"], [76, "\t\t\t\t\t\tfor (Object element : entityList) {"], [77, "\t\t\t\t\t\t\tClass clazz = element.getClass();"], [78, "\t\t\t\t\t\t\tif (arrayClass == null) {"], [79, "\t\t\t\t\t\t\t\tarrayClass = clazz;"], [80, "\t\t\t\t\t\t\t}"], [81, "\t\t\t\t\t\t\telse {"], [82, "\t\t\t\t\t\t\t\tif (arrayClass != clazz) {"], [83, "\t\t\t\t\t\t\t\t\tarrayClass = null;"], [84, "\t\t\t\t\t\t\t\t\tbreak;"], [85, "\t\t\t\t\t\t\t\t}"], [86, "\t\t\t\t\t\t\t}"], [87, "\t\t\t\t\t\t}"], [88, "\t\t\t\t\t\tif (arrayClass == null) {"], [89, "\t\t\t\t\t\t\trow.put(column,entityList.toArray());"], [90, "\t\t\t\t\t\t}"], [91, "\t\t\t\t\t\telse {"], [92, "\t\t\t\t\t\t\tObject array = Array.newInstance(arrayClass, entityList.size());"], [93, "\t\t\t\t\t\t\tfor (int j = 0; j < entityList.size(); j++) {"], [94, "\t\t\t\t\t\t\t\tArray.set(array, j, Utils.coerceTypes(arrayClass, entityList.get(j)));"], [95, "\t\t\t\t\t\t\t}"], [96, "\t\t\t\t\t\t\trow.put(column, array);"], [98, "\t\t\t\t\t\t//row.put(column, value);"], [100, "\t\t\t\t} else {"], [101, "\t\t\t\t\tObject mapped = map(relationshipModels, relationshipEntityColumns, column, value, value);"], [102, "\t\t\t\t\trow.put(column, mapped);"], [104, "\t\t\t}"], [111, "\t\t\t\tif ((row.get(relationshipEntityColumns.get(entry.getKey())) instanceof List)) {"], [112, "\t\t\t\t\t((List) row.get(relationshipEntityColumns.get(entry.getKey()))).add(entry.getValue());"], [125, "\tprivate boolean isMappable(List entityList) {"], [126, "\t\tfor (Object entityObj : entityList) {"], [127, "\t\t\tif (!(entityObj instanceof Map)) {"], [128, "\t\t\t\treturn false;"], [131, "\t\treturn true;"], [134, "\tprivate Object map(List<RelationshipModel> relationshipModels, Map<Long, String> relationshipEntityColumns, String column, Object value, Object entityObj) {"], [135, "\t\tif (entityObj instanceof Map) {"], [136, "\t\t\tMap entity = (Map) entityObj;"], [137, "\t\t\treturn mapEntity(column, relationshipModels, relationshipEntityColumns, entity);"], [139, "\t\treturn value;"], [142, "\tprivate Object mapEntity(String column, List<RelationshipModel> relationshipModels, Map<Long, String> relationshipEntityColumns, Map entity) {"], [143, "\t\tif (entity.containsKey(\"metadata\") && ((Map) entity.get(\"metadata\")).get(\"id\") != null) {"], [144, "\t\t\tMap entityMetadata = (Map) entity.get(\"metadata\");"], [145, "\t\t\tif (entityMetadata.containsKey(\"labels\")) {"], [146, "\t\t\t\tList<String> labelList = (List<String>) (entityMetadata.get(\"labels\"));"], [147, "\t\t\t\tString[] labels = new String[labelList.size()];"], [148, "\t\t\t\tlabels = labelList.toArray(labels);"], [149, "\t\t\t\tDefaultGraphModel graphModel = new DefaultGraphModel();"], [150, "\t\t\t\tNodeModel nodeModel = new NodeModel();"], [151, "\t\t\t\tnodeModel.setId(((Number) entityMetadata.get(\"id\")).longValue());"], [152, "\t\t\t\tnodeModel.setProperties((Map) entity.get(\"data\"));"], [153, "\t\t\t\tnodeModel.setLabels(labels);"], [154, "\t\t\t\tgraphModel.setNodes(new NodeModel[]{nodeModel});"], [155, "\t\t\t\tList mapped = graphEntityMapper.map(metaData.resolve(labels).getUnderlyingClass(), graphModel);"], [156, "\t\t\t\treturn mapped.get(0);"], [157, "\t\t\t} else if (entityMetadata.containsKey(\"type\")) {"], [158, "\t\t\t\tString relationshipType = (String) entityMetadata.get(\"type\");"], [159, "\t\t\t\tRelationshipModel relationshipModel = new RelationshipModel();"], [160, "\t\t\t\trelationshipModel.setId(((Number) entityMetadata.get(\"id\")).longValue());"], [161, "\t\t\t\trelationshipModel.setProperties((Map) entity.get(\"data\"));"], [162, "\t\t\t\trelationshipModel.setType(relationshipType);"], [163, "\t\t\t\tString startURL = (String) entity.get(\"start\");"], [164, "\t\t\t\tString endURL = (String) entity.get(\"end\");"], [165, "\t\t\t\trelationshipModel.setStartNode(Long.valueOf(startURL.substring(startURL.lastIndexOf(\"/\") + 1)));"], [166, "\t\t\t\trelationshipModel.setEndNode(Long.valueOf(endURL.substring(endURL.lastIndexOf(\"/\") + 1)));"], [167, "\t\t\t\trelationshipModels.add(relationshipModel);"], [168, "\t\t\t\tif (relationshipModel.getPropertyList().size() > 0) {"], [169, "\t\t\t\t\trelationshipEntityColumns.put(relationshipModel.getId(), column);"], [170, "\t\t\t\t}"], [171, "\t\t\t\treturn null;"], [174, "\t\treturn entity;"]]}, "num_lines_added": 77, "num_lines_removed": 88}