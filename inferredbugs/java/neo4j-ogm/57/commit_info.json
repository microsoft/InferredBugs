{"hash": "81dbd8300a6b41a825e5bacaee55deb0bcea2bd4", "message": "Add entity instantiation callback mechanism. Fixes #448\n\nSupport composite attributes, custom converters and start/end nodes in rels.", "file_num_lines": 468, "diff_parsed": {"added": [[21, "import java.util.*;"], [38, "import org.neo4j.ogm.session.EntityInstantiator;"], [68, "    public GraphEntityMapper(MetaData metaData, MappingContext mappingContext, EntityInstantiator entityInstantiator) {"], [70, "        this.entityFactory = new EntityFactory(metadata, entityInstantiator);"], [202, "        } catch (MappingException e) {"], [203, "            throw e;"], [214, "                if (entity == null) {"], [215, "                    ClassInfo clsi = metadata.resolve(node.getLabels());"], [216, "                    if (clsi == null) {"], [217, "                        logger.debug(\"Could not find a class to map for labels \" + Arrays.toString(node.getLabels()));"], [218, "                        continue;"], [220, "                    Map<String, Object> allProps = new HashMap<>(toMap(node.getPropertyList()));"], [221, "                    getCompositeProperties(node.getPropertyList(), clsi).forEach( (k, v) -> {"], [222, "                        allProps.put(k.getName(), v);"], [223, "                    });"], [224, ""], [225, "                    entity = entityFactory.newObject(clsi.getUnderlyingClass(), allProps);"], [226, "                    EntityUtils.setIdentity(entity, node.getId(), metadata);"], [227, "                    setProperties(node.getPropertyList(), entity);"], [228, "                    setLabels(node, entity);"], [229, "                    mappingContext.addNodeEntity(entity, node.getId());"], [231, "                nodeIds.add(node.getId());"], [236, "    /**"], [237, "     * Finds the composite properties of an entity type and build their values using a property list."], [238, "     *"], [239, "     * @param propertyList The properties to convert from."], [240, "     * @param classInfo The class to inspect for composite attributes."], [241, "     * @return a map containing the values of the converted attributes, indexed by field object. Never null."], [242, "     */"], [243, "    private Map<FieldInfo, Object> getCompositeProperties(List<Property<String, Object>> propertyList, ClassInfo classInfo) {"], [244, ""], [245, "        Map<FieldInfo, Object> compositeValues = new HashMap<>();"], [252, "                compositeValues.put(field, converter.toEntityAttribute(propertyMap));"], [256, "        return compositeValues;"], [257, "    }"], [258, ""], [259, "    private void setProperties(List<Property<String, Object>> propertyList, Object instance) {"], [260, "        ClassInfo classInfo = metadata.classInfo(instance);"], [261, ""], [262, "        getCompositeProperties(propertyList, classInfo).forEach( (field, v) -> field.write(instance, v));"], [263, ""], [387, "        ClassInfo relationClassInfo = getRelationshipEntity(edge);"], [388, "        if (relationClassInfo == null) {"], [389, "            throw new MappingException(\"Could not find a class to map for relation \" + edge);"], [390, "        }"], [391, ""], [392, "        Map<String, Object> allProps = new HashMap<>(toMap(edge.getPropertyList()));"], [393, "        getCompositeProperties(edge.getPropertyList(), relationClassInfo).forEach( (k, v) -> {"], [394, "            allProps.put(k.getName(), v);"], [395, "        });"], [396, "        // also add start and end node as valid constructor values"], [397, "        allProps.put(relationClassInfo.getStartNodeReader().getName(), startEntity);"], [398, "        allProps.put(relationClassInfo.getEndNodeReader().getName(), endEntity);"], [399, ""], [401, "        Object relationshipEntity = entityFactory"], [402, "            .newObject(relationClassInfo.getUnderlyingClass(), allProps);"]], "deleted": [[21, "import java.util.ArrayList;"], [22, "import java.util.Collection;"], [23, "import java.util.Collections;"], [24, "import java.util.HashMap;"], [25, "import java.util.HashSet;"], [26, "import java.util.LinkedHashSet;"], [27, "import java.util.List;"], [28, "import java.util.Map;"], [29, "import java.util.Set;"], [33, "import org.neo4j.ogm.exception.core.BaseClassNotFoundException;"], [76, "    public GraphEntityMapper(MetaData metaData, MappingContext mappingContext) {"], [78, "        this.entityFactory = new EntityFactory(metadata);"], [220, "                try {"], [221, "                    if (entity == null) {"], [222, "                        entity = entityFactory.newObject(node);"], [223, "                        EntityUtils.setIdentity(entity, node.getId(), metadata);"], [224, "                        setProperties(node.getPropertyList(), entity);"], [225, "                        setLabels(node, entity);"], [226, "                        mappingContext.addNodeEntity(entity, node.getId());"], [228, "                    nodeIds.add(node.getId());"], [229, "                } catch (BaseClassNotFoundException e) {"], [230, "                    logger.debug(e.getMessage());"], [236, "    private void setProperties(List<Property<String, Object>> propertyList, Object instance) {"], [237, "        ClassInfo classInfo = metadata.classInfo(instance);"], [244, "                Object value = converter.toEntityAttribute(propertyMap);"], [245, "                FieldInfo writer = classInfo.getFieldInfo(field.getName());"], [246, "                writer.write(instance, value);"], [374, "        Object relationshipEntity = entityFactory.newObject(getRelationshipEntity(edge));"]]}, "num_lines_added": 56, "num_lines_removed": 28}