{"hash": "54ef696eef6d64cf9cbecf4a471222345cdde1f3", "message": "Change order in which field writers are looked up, fix #361\n\nFor one-to-one and one-to-many relationships the writer is looked up\n by using findIterableWriter, which will return setter of matching type,\n event if there is a setter for scalar matching by field name.\n\nThis commit changes the writer lookup to getRelationalWriter and handles\nthe iterable/scalar cases.", "file_num_lines": 424, "diff_parsed": {"added": [[290, "                        oneToMany.add(edge);"], [329, "        writer = getRelationalWriter(targetInfo, edge.getType(), INCOMING, relationshipEntity);"], [394, "                FieldInfo incomingWriter = findIterableWriter(parameter, relationshipEntity, edge.getType(), INCOMING);"], [396, "                    entityCollector.recordTypeRelationship(edge.getEndNode(), relationshipEntity, edge.getType(), INCOMING);"], [400, ""], [401, "                // Use getRelationalWriter instead of findIterableWriter"], [402, "                // findIterableWriter will return matching iterable even when there is better matching single field"], [403, "                FieldInfo outgoingWriter = getRelationalWriter(metadata.classInfo(instance), edge.getType(), OUTGOING, parameter);"], [405, "                    if (!outgoingWriter.forScalar()) {"], [406, "                        entityCollector.recordTypeRelationship(edge.getStartNode(), parameter, edge.getType(), OUTGOING);"], [407, "                    } else {"], [408, "                        outgoingWriter.write(instance, parameter);"], [409, "                    }"], [410, "                    MappedRelationship mappedRelationship = new MappedRelationship(edge.getStartNode(), edge.getType(), edge.getEndNode(), edge.getId(), instance.getClass(), ClassUtils.getType(outgoingWriter.typeParameterDescriptor()));"], [411, "                    relationshipsToRegister.add(mappedRelationship);"], [413, "                FieldInfo incomingWriter = getRelationalWriter(metadata.classInfo(parameter), edge.getType(), INCOMING, instance);"], [415, "                    if (!incomingWriter.forScalar()) {"], [416, "                        entityCollector.recordTypeRelationship(edge.getEndNode(), instance, edge.getType(), INCOMING);"], [417, "                    } else {"], [418, "                        incomingWriter.write(parameter, instance);"], [419, "                    }"]], "deleted": [[25, "import org.neo4j.ogm.annotation.Relationship;"], [273, "    private boolean tryMappingAsSingleton(Object source, Object parameter, Edge edge, String relationshipDirection) {"], [274, ""], [275, "        String edgeLabel = edge.getType();"], [276, "        ClassInfo sourceInfo = metadata.classInfo(source);"], [277, ""], [278, "        FieldInfo writer = getRelationalWriter(sourceInfo, edgeLabel, relationshipDirection, parameter);"], [279, "        if (writer != null && writer.forScalar()) {"], [280, "            writer.write(source, parameter);"], [281, "            return true;"], [282, "        }"], [283, ""], [284, "        return false;"], [285, "    }"], [286, ""], [305, "                        mapRelationship(oneToMany, edge, source, target);"], [317, "    private void mapRelationship(List<Edge> oneToMany, Edge edge, Object source, Object target) {"], [318, "        boolean oneToOne;"], [319, "        //Since source=start node, end=end node, the direction from source->target has to be outgoing, try mapping it"], [320, "        oneToOne = tryMappingAsSingleton(source, target, edge, OUTGOING);"], [321, ""], [322, "        //Try mapping the incoming relation on the end node, target"], [323, "        oneToOne &= tryMappingAsSingleton(target, source, edge, Relationship.INCOMING);"], [324, ""], [325, "        // if its not one->one on BOTH sides, we'll try a one->many | many->one | many->many mapping later."], [326, "        if (!oneToOne) {"], [327, "            oneToMany.add(edge);"], [328, "        } else {"], [329, "            FieldInfo writer = getRelationalWriter(metadata.classInfo(source), edge.getType(), OUTGOING, target);"], [330, "            mappingContext.addRelationship(new MappedRelationship(edge.getStartNode(), edge.getType(), edge.getEndNode(), edge.getId(), source.getClass(), ClassUtils.getType(writer.typeParameterDescriptor())));"], [331, "        }"], [332, "    }"], [333, ""], [361, "        writer = getRelationalWriter(targetInfo, edge.getType(), Relationship.INCOMING, relationshipEntity);"], [410, "        Set<Edge> registeredEdges = new HashSet<>();"], [427, "                FieldInfo incomingWriter = findIterableWriter(parameter, relationshipEntity, edge.getType(), Relationship.INCOMING);"], [429, "                    entityCollector.recordTypeRelationship(edge.getEndNode(), relationshipEntity, edge.getType(), Relationship.INCOMING);"], [432, "                if (incomingWriter != null || outgoingWriter != null) {"], [433, "                    registeredEdges.add(edge);"], [434, "                }"], [436, "                FieldInfo outgoingWriter = findIterableWriter(instance, parameter, edge.getType(), OUTGOING);"], [438, "                    entityCollector.recordTypeRelationship(edge.getStartNode(), parameter, edge.getType(), OUTGOING);"], [439, "                    relationshipsToRegister.add(new MappedRelationship(edge.getStartNode(), edge.getType(), edge.getEndNode(), edge.getId(), instance.getClass(), ClassUtils.getType(outgoingWriter.typeParameterDescriptor())));"], [441, "                FieldInfo incomingWriter = findIterableWriter(parameter, instance, edge.getType(), Relationship.INCOMING);"], [443, "                    entityCollector.recordTypeRelationship(edge.getEndNode(), instance, edge.getType(), Relationship.INCOMING);"], [446, "                if (incomingWriter != null || outgoingWriter != null) {"], [447, "                    registeredEdges.add(edge);"], [448, "                }"], [472, "        // finally, register anything left over. These will be singleton relationships that"], [473, "        // were not mapped during one->one mapping, or one->many mapping."], [474, "        for (Edge edge : oneToManyRelationships) {"], [475, "            if (!registeredEdges.contains(edge)) {"], [476, "                Object source = mappingContext.getNodeEntity(edge.getStartNode());"], [477, "                Object target = mappingContext.getNodeEntity(edge.getEndNode());"], [478, "                FieldInfo writer = getRelationalWriter(metadata.classInfo(source), edge.getType(), OUTGOING, target);"], [479, "                if (writer == null) {"], [480, "                    writer = getRelationalWriter(metadata.classInfo(target), edge.getType(), INCOMING, source);"], [481, "                }"], [482, "                // ensures its tracked in the domain"], [483, "                if (writer != null) {"], [484, "                    MappedRelationship mappedRelationship = new MappedRelationship(edge.getStartNode(), edge.getType(), edge.getEndNode(), edge.getId(), source.getClass(), ClassUtils.getType(writer.typeParameterDescriptor()));"], [485, "                    if (!mappingContext.containsRelationship(mappedRelationship)) {"], [486, "                        mappingContext.addRelationship(mappedRelationship);"], [487, "                    }"], [488, "                }"], [489, "            }"], [490, "        }"]]}, "num_lines_added": 21, "num_lines_removed": 67}