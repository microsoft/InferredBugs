    private RelationshipBuilder getRelationshipBuilder(Compiler cypherBuilder, Object entity, DirectedRelationship directedRelationship, boolean mapBothDirections) {

        RelationshipBuilder relationshipBuilder;

        if (isRelationshipEntity(entity)) {
            Long relId = (Long) metaData.classInfo(entity).identityField().readProperty(entity);

            boolean relationshipEndsChanged = haveRelationEndsChanged(entity, relId);

            if (relId == null || relationshipEndsChanged) { //if the RE itself is new, or it exists but has one of it's end nodes changed
                relationshipBuilder = cypherBuilder.newRelationship(directedRelationship.type());
                if (relationshipEndsChanged) {
                    Field identityField = metaData.classInfo(entity).getField(metaData.classInfo(entity).identityField());
                    FieldInfo.write(identityField, entity, null); //reset the ID to null
                }
            } else {
                relationshipBuilder = cypherBuilder.existingRelationship(relId, directedRelationship.type());
            }
        } else {
            relationshipBuilder = cypherBuilder.newRelationship(directedRelationship.type(), mapBothDirections);
        }

        relationshipBuilder.direction(directedRelationship.direction());
        if (isRelationshipEntity(entity)) {
            relationshipBuilder.setSingleton(false);  // indicates that this relationship type can be mapped multiple times between 2 nodes
            relationshipBuilder.setReference(EntityUtils.identity(entity, metaData));
            relationshipBuilder.setRelationshipEntity(true);
        }
        return relationshipBuilder;
    }