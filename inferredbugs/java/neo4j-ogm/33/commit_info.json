{"hash": "812a34048a09307d1997b30f431ec2f3b4583dfa", "message": "Mapping code optimisations when mapping graph->entity", "file_num_lines": 756, "diff_parsed": {"added": [[22, "import java.util.ArrayList;"], [23, "import java.util.Collection;"], [24, "import java.util.HashMap;"], [25, "import java.util.HashSet;"], [26, "import java.util.List;"], [27, "import java.util.Map;"], [28, "import java.util.Set;"], [29, ""], [30, "import org.neo4j.ogm.ClassUtils;"], [31, "import org.neo4j.ogm.annotation.GraphId;"], [32, "import org.neo4j.ogm.annotation.NodeEntity;"], [33, "import org.neo4j.ogm.annotation.Property;"], [34, "import org.neo4j.ogm.annotation.Relationship;"], [35, "import org.neo4j.ogm.annotation.RelationshipEntity;"], [36, "import org.neo4j.ogm.annotation.Transient;"], [37, "import org.neo4j.ogm.classloader.MetaDataClassLoader;"], [38, "import org.neo4j.ogm.exception.MappingException;"], [39, "import org.slf4j.Logger;"], [40, "import org.slf4j.LoggerFactory;"], [69, "    private String neo4jName;"], [91, "    private Map<FieldInfo, Field> fieldInfoFields = new HashMap<>();"], [92, ""], [93, "    private Set<FieldInfo> fieldInfos;"], [94, "    private Map<String, FieldInfo> propertyFields;"], [218, "        if (neo4jName == null) {"], [219, "            AnnotationInfo annotationInfo = annotationsInfo.get(NodeEntity.CLASS);"], [220, "            if (annotationInfo != null) {"], [221, "                neo4jName =  annotationInfo.get(NodeEntity.LABEL, simpleName());"], [222, "                return neo4jName;"], [223, "            }"], [224, "            annotationInfo = annotationsInfo.get(RelationshipEntity.CLASS);"], [225, "            if (annotationInfo != null) {"], [226, "                neo4jName =  annotationInfo.get(RelationshipEntity.TYPE, simpleName().toUpperCase());"], [227, "                return neo4jName;"], [228, "            }"], [229, "            neo4jName = simpleName();"], [231, "        return neo4jName;"], [340, "        if (fieldInfos == null) {"], [341, "            FieldInfo identityField = identityFieldOrNull();"], [342, "            fieldInfos = new HashSet<>();"], [343, "            for (FieldInfo fieldInfo : fieldsInfo().fields()) {"], [344, "                if (fieldInfo != identityField) {"], [345, "                    AnnotationInfo annotationInfo = fieldInfo.getAnnotations().get(Property.CLASS);"], [346, "                    if (annotationInfo == null) {"], [347, "                        if (fieldInfo.isSimple()) {"], [348, "                            fieldInfos.add(fieldInfo);"], [349, "                        }"], [350, "                    } else {"], [366, "        if (propertyFields == null) {"], [367, "            Collection<FieldInfo> fieldInfos = propertyFields();"], [368, "            propertyFields = new HashMap<>(fieldInfos.size());"], [369, "            for (FieldInfo fieldInfo : fieldInfos) {"], [370, "                propertyFields.put(fieldInfo.property(), fieldInfo);"], [373, "        return propertyFields.get(propertyName);"], [760, "        Field field = fieldInfoFields.get(fieldInfo);"], [761, "        if (field != null) {"], [762, "            return field;"], [763, "        }"], [765, "            field =  MetaDataClassLoader.loadClass(name()).getDeclaredField(fieldInfo.getName());"], [766, "            fieldInfoFields.put(fieldInfo, field);"], [767, "            return field;"]], "deleted": [[16, "import org.neo4j.ogm.ClassUtils;"], [17, "import org.neo4j.ogm.annotation.*;"], [18, "import org.neo4j.ogm.classloader.MetaDataClassLoader;"], [19, "import org.neo4j.ogm.exception.MappingException;"], [20, "import org.slf4j.Logger;"], [21, "import org.slf4j.LoggerFactory;"], [22, ""], [29, "import java.util.*;"], [202, "        AnnotationInfo annotationInfo = annotationsInfo.get(NodeEntity.CLASS);"], [203, "        if (annotationInfo != null) {"], [204, "            return annotationInfo.get(NodeEntity.LABEL, simpleName());"], [205, "        }"], [206, "        annotationInfo = annotationsInfo.get(RelationshipEntity.CLASS);"], [207, "        if (annotationInfo != null) {"], [208, "            return annotationInfo.get(RelationshipEntity.TYPE, simpleName().toUpperCase());"], [210, "        return simpleName();"], [319, "        FieldInfo identityField = identityFieldOrNull();"], [320, "        Set<FieldInfo> fieldInfos = new HashSet<>();"], [321, "        for (FieldInfo fieldInfo : fieldsInfo().fields()) {"], [322, "            if (fieldInfo != identityField) {"], [323, "                AnnotationInfo annotationInfo = fieldInfo.getAnnotations().get(Property.CLASS);"], [324, "                if (annotationInfo == null) {"], [325, "                    if (fieldInfo.isSimple()) {"], [328, "                } else {"], [329, "                    fieldInfos.add(fieldInfo);"], [343, "        for (FieldInfo fieldInfo : propertyFields()) {"], [344, "            if (fieldInfo.property().equalsIgnoreCase(propertyName)) {"], [345, "                return fieldInfo;"], [348, "        return null;"], [736, "            //return Class.forName(name()).getDeclaredField(fieldInfo.getName());"], [737, "            return MetaDataClassLoader.loadClass(name()).getDeclaredField(fieldInfo.getName());"], [753, "            //return Class.forName(name()).getMethod(methodInfo.getName(), parameterTypes);"]]}, "num_lines_added": 61, "num_lines_removed": 32}