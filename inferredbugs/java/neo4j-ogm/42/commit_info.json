{"hash": "03eb605c99358ae2bbe2e882100b0598137d2186", "message": "Fix lifecycle problems in driver tests", "file_num_lines": 121, "diff_parsed": {"added": [[16, "import java.io.InputStream;"], [17, "import java.util.Enumeration;"], [18, "import java.util.Properties;"], [19, ""], [59, "     *"], [63, "        // new configuration object, or update of current one?"], [64, "        if (Components.configuration != configuration) {"], [65, "            destroy();"], [66, "            Components.configuration = configuration;"], [67, "        }"], [68, "        else {"], [69, "            // same config - but have we switched drivers?"], [70, "            if (driver != null && !driver.getClass().getCanonicalName().equals(configuration.driverConfiguration().getDriverClassName())) {"], [71, "                driver.close();"], [72, "                driver = null;"], [73, "            }"], [74, "        }"], [79, "     *"], [83, "        try (InputStream is = toInputStream(configurationFileName)) {"], [91, "    /**"], [92, "     * Returns the current OGM {@link Driver}"], [93, "     *"], [94, "     * Normally only one instance of the driver exists for the lifetime of the application"], [95, "     *"], [96, "     * You cannot use this method to find out if a driver is initialised because it will attempt to"], [97, "     * initialise the driver if it is not."], [98, "     *"], [99, "     * @return an instance of the {@link Driver} to be used by the OGM"], [100, "     */"], [108, "    /**"], [109, "     *"], [110, "     * Returns a new instance of the compiler"], [111, "     *"], [112, "     * @return an instance of the {@link Compiler} to be used by the OGM"], [113, "     */"], [115, "        return getCompiler();"], [133, "    /**"], [134, "     * Creates a {@link Configuration} from an InputStream"], [135, "     *"], [136, "     * @param is an InputStream"], [137, "     * @throws Exception"], [138, "     */"], [140, "        destroy();"], [150, "    /**"], [151, "     * Loads the configured Neo4j {@link Driver} and stores it on this class"], [152, "     */"], [160, "    /**"], [161, "     * Obtains the Cypher compiler to be used by the OGM"], [162, "     *"], [163, "     * @return an instance of {@link Compiler}"], [164, "     */"], [165, "    private static Compiler getCompiler() {"], [172, "    /**"], [173, "     * Tries to locate the default configuration file resource and return it as an InputStream"], [174, "     *"], [175, "     * @return An InputStream resource corresponding to the default configuration file, if it exists."], [176, "     */"], [184, "                return toInputStream(\"ogm.properties\");"], [187, ""], [188, "        return toInputStream(configFileName);"], [191, "    /**"], [192, "     * Fetches a configuration file resource as an InputStream"], [193, "     *"], [194, "     * @param name the configuration file resource name"], [195, "     * @return the file resource as an InputStream"], [196, "     */"], [197, "    private static InputStream toInputStream(String name) {"], [202, "    /**"], [203, "     * Sets a new {@link Driver} to be used by the OGM."], [204, "     *"], [205, "     * If a different driver is in use, it will be closed first. In addition, the {@link Configuration} is updated"], [206, "     * to reflect the correct classname for the new driver."], [207, "     *"], [208, "     * @param driver an instance of {@link Driver} to be used by the OGM."], [209, "     */"], [211, ""], [213, ""], [214, "        if (Components.driver != null && Components.driver != driver) {"], [215, "            Components.driver.close();"], [216, "            Components.getConfiguration().driverConfiguration().setDriverClassName(driver.getClass().getCanonicalName());"], [217, "        }"], [218, ""], [222, "    /**"], [223, "     * Gets the neo4j.version from the current configuration"], [224, "     *"], [225, "     * @return the major.minor part of the neo4.version property string, as a double, or 9.9 if not configured"], [226, "     */"], [231, "                String[] versionElements = neo4jVersion.split(\"\\\\.\");"], [232, "                if (versionElements.length < 2) {"], [233, "                    throw new NumberFormatException();"], [234, "                }"], [235, "                return new Double(versionElements[0] + \".\" + versionElements[1]);"], [237, "                logger.warn(\"Configuration property 'neo4j.version' is not in the correct form: expected something like '2.3', but got '{}' instead\", neo4jVersion);"], [243, "    /**"], [244, "     * Releases any current driver resources and clears the current configuration"], [245, "     */"], [252, "        configuration.clear();"], [254, ""], [255, "    /**"], [256, "     * There is a single configuration object, which should never be null, associated with the Components class"], [257, "     * You can update this configuration in-situ, or you can replace the configuration with another."], [258, "     *"], [259, "     * @return the current Configuration object"], [260, "     */"], [261, "    public static Configuration getConfiguration() {"], [262, "        return configuration;"], [263, "    }"], [264, ""]], "deleted": [[23, "import java.io.InputStream;"], [24, "import java.util.Enumeration;"], [25, "import java.util.Properties;"], [26, ""], [62, "        destroy();"], [63, "        Components.configuration = configuration;"], [71, "        try (InputStream is = classPathResource(configurationFileName)) {"], [79, "    // only one instance of the driver exists for the lifetime of the application"], [80, "    // please note you cannot use this method to find out if a driver is initialised"], [81, "    // because it will attempt to initialise the driver if it is not."], [89, "    // new instance of the compiler is returned every time"], [91, "        return loadCompiler();"], [107, ""], [111, "        configuration.clear();"], [112, "        driver = null;"], [129, "    private static Compiler loadCompiler() {"], [143, "                return classPathResource(\"ogm.properties\");"], [146, "        // load the config from the user-specified file"], [147, "        return classPathResource(configFileName);"], [150, "    private static InputStream classPathResource(String name) {"], [164, "                return new Double(neo4jVersion);"], [166, "                logger.warn(\"Configuration property 'neo4j.version' is not in the correct form: expected something like '2.3'\");"], [172, "    // destroys the current Components object, releasing all resources"], [179, "        if (configuration != null) {"], [180, "            configuration.clear();"], [181, "        }"]]}, "num_lines_added": 108, "num_lines_removed": 26}