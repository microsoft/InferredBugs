{"hash": "efce88cf8647ea2cf28b728078b24a98635d1f40", "message": "final fixes for nested zips/jars to any depth", "file_num_lines": 114, "diff_parsed": {"added": [[23, "import java.util.Set;"], [71, ""], [73, "        LOGGER.debug(\"Scanning zipFile \" + zipFile.getName());"], [76, "            if (!entry.isDirectory()) {"], [77, "                InputStream inputStream = zipFile.getInputStream(entry);"], [78, "                if (entry.getName().endsWith(\".class\")) {"], [79, "                    scanClassFileEntry(inputStream, entry);"], [80, "                } else if (entry.getName().endsWith(\".jar\") || entry.getName().endsWith(\".zip\")) {"], [81, "                    scanZippedEntry(inputStream, entry);"], [82, "                }"], [83, "            }"], [87, "    private void scanClassFileEntry(InputStream inputStream, ZipEntry entry) throws IOException {"], [89, "        String name = entry.getName();"], [91, "        LOGGER.debug(\"Scanning class entry: \" + name);"], [92, "        int i = name.lastIndexOf(\"/\");"], [93, "        String path = (i == -1) ? \"\" : name.substring(0, i);"], [97, "                LOGGER.debug(pathToScan + \" admits '\" + path + \"' for entry: \" + name);"], [98, "                processor.process(inputStream);"], [102, "    }"], [104, "    private void scanZippedEntry(InputStream inputStream, ZipEntry entry) throws IOException {"], [105, ""], [106, "        String name = entry.getName();"], [107, ""], [108, "        LOGGER.debug(\"Scanning zipped entry: \" + name);"], [109, "        ZipInputStream zipInputStream = new ZipInputStream(inputStream);"], [110, ""], [111, "        ZipEntry zipEntry = zipInputStream.getNextEntry();"], [112, ""], [113, "        while (zipEntry != null) {"], [114, "            if (!zipEntry.isDirectory()) {"], [115, "                if (zipEntry.getName().endsWith(\".class\")) {"], [116, "                    scanClassFileEntry(zipInputStream, zipEntry);"], [117, "                } else if (zipEntry.getName().endsWith(\".jar\") || zipEntry.getName().endsWith(\".zip\")) {"], [118, "                    scanZippedEntry(zipInputStream, zipEntry);"], [121, "            zipEntry = zipInputStream.getNextEntry();"], [124, "//"], [125, ""], [126, "//    private void scanZipFile(final ZipFile zipFile) throws IOException {"], [127, "//        LOGGER.debug(\"Scanning \" + zipFile.getName());"], [128, "//        for (Enumeration<? extends ZipEntry> entries = zipFile.entries(); entries.hasMoreElements();) {"], [129, "//            final ZipEntry entry = entries.nextElement();"], [130, "//            scanZipEntry(entry, zipFile, null);"], [131, "//        }"], [132, "//    }"], [133, ""], [134, "//  /  private void scanZipEntry(ZipEntry zipEntry, ZipFile zipFile, ZipInputStream zipInputStream) throws IOException {"], [135, ""], [136, "//        if (zipEntry.isDirectory()) {"], [137, "//           return;"], [138, "//        }"], [139, ""], [140, "//        LOGGER.debug(\"Scanning entry \" + zipEntry.getName());"], [141, ""], [142, "//        String zipEntryName = zipEntry.getName();"], [143, ""], [144, "//        int i = zipEntryName.lastIndexOf(\"/\");"], [145, ""], [146, "//        String path = (i == -1) ? \"\" : zipEntryName.substring(0, i);"], [147, ""], [148, "//        if (zipEntryName.endsWith(\".jar\") || zipEntryName.endsWith(\".zip\")) { //The zipFile contains a zip or jar"], [149, "//            InputStream inputStream = zipFile.getInputStream(zipEntry); //Attempt to read the nested zip"], [150, "//            if (inputStream != null) {"], [151, "//                ZipInputStream embeddedZipInputStream = new ZipInputStream(inputStream);"], [152, "//                ZipEntry entry = embeddedZipInputStream.getNextEntry();"], [153, "//                while (entry != null) { //Recursively scan each entry in the nested zip given its ZipInputStream"], [154, "//                    scanZipEntry(entry, zipFile, embeddedZipInputStream);"], [155, "//                    entry = embeddedZipInputStream.getNextEntry();"], [156, "//                }"], [157, "//            }"], [158, "//            else {"], [159, "//                LOGGER.info(\"Unable to scan \" + zipEntry.getName());"], [160, "//            }"], [161, "//            return;"], [162, "//        }"], [163, ""], [164, "//        if (zipEntryName.endsWith(\".jar\") || zipEntryName.endsWith(\".zip\")) { //The zipFile contains a zip or jar"], [165, "//            InputStream inputStream = zipFile.getInputStream(zipEntry); //Attempt to read the nested zip"], [166, "//            if (inputStream != null) {"], [167, "//                zipInputStream = new ZipInputStream(inputStream);"], [168, "//            }"], [169, "//            else {"], [170, "//                LOGGER.info(\"Unable to scan \" + zipEntry.getName());"], [171, "//            }"], [172, "//            ZipEntry entry = zipInputStream.getNextEntry();"], [173, "//            String nestedPath = null;"], [174, "//            while (entry != null) { //Recursively scan each entry in the nested zip given its ZipInputStream"], [175, "//                scanZipEntry(entry, zipFile, zipInputStream);"], [176, "//                entry = zipInputStream.getNextEntry();"], [177, "//            }"], [178, "//        }"], [179, ""], [180, "//        boolean scanFile = false;"], [181, ""], [182, "//        for (String pathToScan : classPaths) {"], [183, "//            if (path.equals(pathToScan) || path.startsWith(pathToScan.concat(\"/\"))) {"], [184, "//                LOGGER.debug(pathToScan + \" admits '\" + path + \"' for entry: \" + zipEntryName);"], [185, "//                scanFile = true;"], [186, "//                break;"], [187, "//            }"], [188, "//        }"], [189, ""], [190, "//        if (scanFile && zipEntryName.endsWith(\".class\")) {"], [191, "//            if (zipInputStream == null) { //ZipEntry directly in the top level ZipFile"], [192, "//                try (InputStream inputStream = zipFile.getInputStream(zipEntry)) {"], [193, "//                    processor.process(inputStream);"], [194, "//                }"], [195, "//            } else { //Nested ZipEntry, read from its ZipInputStream"], [196, "//                processor.process(zipInputStream);"], [197, "//                zipInputStream.closeEntry();"], [198, "//            }"], [199, "//        }"], [200, "//    }"], [207, "        Set<File> classPathElements = getUniqueClasspathElements(classPaths);"], [208, ""], [209, "        LOGGER.debug(\"Classpath elements:\");"], [210, "        for (File classPathElement : classPathElements) {"], [211, "            LOGGER.debug(classPathElement.getPath());"], [212, "        }"], [213, ""], [234, "    protected Set<File> getUniqueClasspathElements(List<String> classPaths) {"]], "deleted": [[71, "        LOGGER.debug(\"Scanning \" + zipFile.getName());"], [74, "            scanZipEntry(entry, zipFile, null);"], [78, "    private void scanZipEntry(ZipEntry zipEntry, ZipFile zipFile, ZipInputStream zipInputStream) throws IOException {"], [79, ""], [80, "        if (zipEntry.isDirectory()) {"], [81, "           return;"], [82, "        }"], [84, "        LOGGER.debug(\"Scanning entry \" + zipEntry.getName());"], [85, ""], [86, "        String zipEntryName = zipEntry.getName();"], [88, "        int i = zipEntryName.lastIndexOf(\"/\");"], [89, ""], [90, "        String path = (i == -1) ? \"\" : zipEntryName.substring(0, i);"], [91, ""], [92, "        if (zipEntryName.endsWith(\".jar\") || zipEntryName.endsWith(\".zip\")) { //The zipFile contains a zip or jar"], [93, "            InputStream inputStream = zipFile.getInputStream(zipEntry); //Attempt to read the nested zip"], [94, "            if (inputStream != null) {"], [95, "                zipInputStream = new ZipInputStream(inputStream);"], [96, "            }"], [97, "            else {"], [98, "                LOGGER.info(\"Unable to scan \" + zipEntry.getName());"], [99, "            }"], [100, "            ZipEntry entry = zipInputStream.getNextEntry();"], [101, "            String nestedPath = null;"], [102, "            while (entry != null) { //Recursively scan each entry in the nested zip given its ZipInputStream"], [103, "                scanZipEntry(entry, zipFile, zipInputStream);"], [104, "                entry = zipInputStream.getNextEntry();"], [105, "            }"], [106, "        }"], [107, ""], [108, "        boolean scanFile = false;"], [112, "                scanFile = true;"], [117, "        if (scanFile && zipEntryName.endsWith(\".class\")) {"], [118, "            if (zipInputStream == null) { //ZipEntry directly in the top level ZipFile"], [119, "                try (InputStream inputStream = zipFile.getInputStream(zipEntry)) {"], [120, "                    processor.process(inputStream);"], [122, "            } else { //Nested ZipEntry, read from its ZipInputStream"], [123, "                processor.process(zipInputStream);"], [124, "                zipInputStream.closeEntry();"], [134, "        List<File> classPathElements = getUniqueClasspathElements(classPaths);"], [155, "    protected List<File> getUniqueClasspathElements(List<String> classPaths) {"]]}, "num_lines_added": 120, "num_lines_removed": 41}