{"hash": "a3012a4d0bdd19c47966fc1fc50d771ae9c8b14b", "message": "Fix concurrent issue when first accessing property fields", "file_num_lines": 656, "diff_parsed": {"added": [[396, "            initPropertyFields();"], [410, "            initPropertyFields();"], [411, "        }"], [412, "        return propertyFields.get(propertyName.toLowerCase());"], [413, "    }"], [415, "    private synchronized void initPropertyFields() {"], [416, "        if (fieldInfos == null) {"], [417, "            Collection<FieldInfo> fields = fieldsInfo().fields();"], [418, ""], [419, "            FieldInfo identityField = identityFieldOrNull();"], [420, "            Set<FieldInfo> fieldInfos = new HashSet<>(fields.size());"], [421, "            Map<String, FieldInfo> propertyFields = new HashMap<>(fields.size());"], [422, ""], [423, "            for (FieldInfo fieldInfo : fields) {"], [424, "                if (fieldInfo != identityField && !fieldInfo.isLabelField()"], [425, "                    && !fieldInfo.hasAnnotation(StartNode.class)"], [426, "                    && !fieldInfo.hasAnnotation(EndNode.class)) {"], [427, "                    AnnotationInfo annotationInfo = fieldInfo.getAnnotations().get(Property.class);"], [428, "                    if (annotationInfo == null) {"], [429, "                        if (fieldInfo.persistableAsProperty()) {"], [430, "                            fieldInfos.add(fieldInfo);"], [431, "                            propertyFields.put(fieldInfo.property().toLowerCase(), fieldInfo);"], [432, "                        }"], [433, "                    } else {"], [434, "                        fieldInfos.add(fieldInfo);"], [435, "                        propertyFields.put(fieldInfo.property().toLowerCase(), fieldInfo);"], [436, "                    }"], [439, "            this.fieldInfos = fieldInfos;"], [440, "            this.propertyFields = propertyFields;"]], "deleted": [[396, "            if (fieldInfos == null) {"], [397, "                FieldInfo identityField = identityFieldOrNull();"], [398, "                fieldInfos = new HashSet<>();"], [399, "                for (FieldInfo fieldInfo : fieldsInfo().fields()) {"], [400, "                    if (fieldInfo != identityField && !fieldInfo.isLabelField()"], [401, "                            && !fieldInfo.hasAnnotation(StartNode.class)"], [402, "                            && !fieldInfo.hasAnnotation(EndNode.class)) {"], [403, "                        AnnotationInfo annotationInfo = fieldInfo.getAnnotations().get(Property.class);"], [404, "                        if (annotationInfo == null) {"], [405, "                            if (fieldInfo.persistableAsProperty()) {"], [406, "                                fieldInfos.add(fieldInfo);"], [407, "                            }"], [408, "                        } else {"], [409, "                            fieldInfos.add(fieldInfo);"], [410, "                        }"], [411, "                    }"], [412, "                }"], [413, "            }"], [428, "            if (propertyFields == null) {"], [429, "                Collection<FieldInfo> fieldInfos = propertyFields();"], [430, "                propertyFields = new HashMap<>(fieldInfos.size());"], [431, "                for (FieldInfo fieldInfo : fieldInfos) {"], [432, ""], [433, "                    propertyFields.put(fieldInfo.property().toLowerCase(), fieldInfo);"], [437, "        return propertyFields.get(propertyName.toLowerCase());"], [440, ""]]}, "num_lines_added": 29, "num_lines_removed": 26}