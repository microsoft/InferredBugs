{"hash": "f0c63b9da05027c8ae784393e6d31b4d61ebff0a", "message": "* use threads to launch subset validations in parallel. ncpu-1. much faster.\n* awaitTermination with long enough timeout; output is back to normal\nah! problem is tokens.seek(i). can't do that in multi-threaded env. make function that gets prev and next tokens from i w/o seek.\nstash to go to school from home.", "file_num_lines": 186, "diff_parsed": {"added": [[20, "import java.util.concurrent.Callable;"], [21, "import java.util.concurrent.ExecutorService;"], [22, "import java.util.concurrent.Executors;"], [23, "import java.util.concurrent.TimeUnit;"], [60, "//\t\t\tQUORUM_DESCR,"], [118, ""], [119, "\t\tint ncpu = Runtime.getRuntime().availableProcessors();"], [120, "\t\tExecutorService pool = Executors.newFixedThreadPool(3); // works with 2 but not 3 threads. hmm..."], [121, "\t\tList<Callable<Void>> jobs = new ArrayList<>();"], [122, ""], [124, "\t\t\tfinal int corpusSubsetSize = i;"], [125, "\t\t\tCallable<Void> job = () -> {"], [126, "\t\t\t\ttry {"], [127, "\t\t\t\t\tList<Float> errorRates = new ArrayList<>();"], [128, "\t\t\t\t\tfor (int trial = 1; trial<=trials; trial++) { // multiple trials per subset size"], [129, "\t\t\t\t\t\tPair<InputDocument, List<InputDocument>> sample = validator.selectSample(documents, corpusSubsetSize);"], [130, "\t\t\t\t\t\tTriple<Formatter, Float, Float> results = validate(language, sample.b, sample.a, true, false);"], [131, "//\t\t\t\t\tSystem.out.println(sample.a.fileName+\" n=\"+corpusSubsetSize+\": error=\"+results.c);"], [133, "\t\t\t\t\t\terrorRates.add(results.c);"], [134, "\t\t\t\t\t}"], [135, "\t\t\t\t\tCollections.sort(errorRates);"], [136, "\t\t\t\t\tint n = errorRates.size();"], [137, "\t\t\t\t\tfloat median = errorRates.get(n/2);"], [138, "\t\t\t\t\tSystem.out.println(\"median \"+language.name+\" error rate for n=\"+corpusSubsetSize+\" is \"+median);"], [139, "\t\t\t\t\tmedians[corpusSubsetSize] = median;"], [140, "\t\t\t\t}"], [141, "\t\t\t\tcatch (Throwable t) {"], [142, "\t\t\t\t\tt.printStackTrace(System.err);"], [143, "\t\t\t\t}"], [144, "\t\t\t\treturn null;"], [145, "\t\t\t};"], [146, "\t\t\tjobs.add(job);"], [148, ""], [149, "\t\tpool.invokeAll(jobs);"], [150, "\t\tpool.shutdown();"], [151, "\t\tboolean terminated = pool.awaitTermination(60, TimeUnit.MINUTES);"], [152, "\t\tSystem.err.println(language.name+\" terminate properly = \"+terminated);"]], "deleted": [[25, "import static org.antlr.codebuff.Tool.QUORUM_DESCR;"], [57, "\t\t\tQUORUM_DESCR,"], [116, "\t\t\tList<Float> errorRates = new ArrayList<>();"], [117, "\t\t\tfor (int trial = 1; trial<=trials; trial++) { // multiple trials per subset size"], [118, "\t\t\t\tPair<InputDocument, List<InputDocument>> sample = validator.selectSample(documents, i);"], [119, "\t\t\t\tTriple<Formatter, Float, Float> results = validate(language, sample.b, sample.a, true, false);"], [120, "\t\t\t\tSystem.out.println(sample.a.fileName+\" n=\"+i+\": error=\"+results.c);"], [122, "\t\t\t\terrorRates.add(results.c);"], [123, "\t\t\t}"], [124, "\t\t\tCollections.sort(errorRates);"], [125, "\t\t\tint n = errorRates.size();"], [126, "\t\t\tfloat min = errorRates.get(0);"], [127, "\t\t\tfloat quart = errorRates.get((int)(0.27*n));"], [128, "\t\t\tfloat median = errorRates.get(n/2);"], [129, "\t\t\tfloat quart3 = errorRates.get((int)(0.75*n));"], [130, "\t\t\tfloat max = errorRates.get(n-1);"], [131, "\t\t\tSystem.out.println(\"median error rate for n=\"+i+\" is \"+median);"], [132, "\t\t\tmedians[i] = median;"]]}, "num_lines_added": 37, "num_lines_removed": 18}