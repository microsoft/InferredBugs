{"hash": "b78c227f09dc4d0c356eebcc34186eca97063540", "message": "v2.0-rc.9", "file_num_lines": 235, "diff_parsed": {"added": [[3, "import com.google.common.collect.Lists;"], [6, "import com.jfinal.aop.Interceptor;"], [8, "import com.jfinal.core.Controller;"], [9, "import com.jfinal.plugin.activerecord.Model;"], [21, "import io.jboot.db.model.JbootModel;"], [22, "import io.jboot.service.JbootServiceBase;"], [27, "import io.jboot.web.controller.JbootController;"], [28, "import io.jboot.web.fixedinterceptor.FixedInterceptor;"], [32, "import java.util.ArrayList;"], [39, ""], [40, "    // \u652f\u6301\u5faa\u73af\u6ce8\u5165"], [41, "    protected ThreadLocal<HashMap<Class<?>, Object>> singletonTl = ThreadLocal.withInitial(() -> new HashMap<>());"], [42, "    protected ThreadLocal<HashMap<Class<?>, Object>> prototypeTl = ThreadLocal.withInitial(() -> new HashMap<>());"], [43, ""], [51, "        return doGet(targetClass);"], [52, "    }"], [54, "    @SuppressWarnings(\"unchecked\")"], [55, "    protected <T> T doGet(Class<T> targetClass) throws ReflectiveOperationException {"], [60, "        if (singleton) {"], [61, "            return doGetSingleton(targetClass);"], [62, "        } else {"], [63, "            return doGetPrototype(targetClass);"], [65, "    }"], [67, "    @SuppressWarnings(\"unchecked\")"], [68, "    protected <T> T doGetSingleton(Class<T> targetClass) throws ReflectiveOperationException {"], [69, "        Object ret = singletonCache.get(targetClass);"], [74, "        ret = singletonTl.get().get(targetClass);"], [75, "        if (ret != null) {        // \u53d1\u73b0\u5faa\u73af\u6ce8\u5165"], [82, "                try {"], [83, "                    ret = createObject(targetClass);"], [84, "                    singletonTl.get().put(targetClass, ret);"], [85, "                    doInject(targetClass, ret);"], [86, "                    singletonCache.put(targetClass, ret);"], [87, "                } finally {"], [88, "                    singletonTl.remove();"], [89, "                }"], [90, "            }"], [91, "        }"], [93, "        return (T) ret;"], [94, "    }"], [97, "    @SuppressWarnings(\"unchecked\")"], [98, "    protected <T> T doGetPrototype(Class<T> targetClass) throws ReflectiveOperationException {"], [99, "        Object ret;"], [101, "        HashMap<Class<?>, Object> map = prototypeTl.get();"], [102, "        if (map.size() > 0) {"], [103, "            ret = map.get(targetClass);"], [104, "            if (ret != null) {        // \u53d1\u73b0\u5faa\u73af\u6ce8\u5165"], [105, "                return (T) ret;"], [109, "        try {"], [110, "            ret = createObject(targetClass);"], [111, "            map.put(targetClass, ret);"], [112, "            doInject(targetClass, ret);"], [113, "        } finally {"], [114, "            map.clear();"], [115, "        }"], [116, ""], [131, "        doInject(targetClass, targetObject);"], [132, "    }"], [134, "    protected void doInject(Class<?> targetClass, Object targetObject) throws ReflectiveOperationException {"], [138, ""], [139, "        List<Field> fields = new ArrayList<>();"], [140, "        doGetFields(targetClass, fields);"], [141, ""], [142, "        if (fields.size() == 0) {"], [163, "                doInjectJFinalOrginal(targetObject, field, inject);"], [182, "    private void doGetFields(Class clazz, List<Field> fields) {"], [183, "        Field[] fs = clazz.getDeclaredFields();"], [184, "        if (fs.length > 0) {"], [185, "            fields.addAll(Lists.newArrayList(fs));"], [186, "        }"], [187, "        Class supperClass = clazz.getSuperclass();"], [188, "        if (supperClass == JbootController.class"], [189, "                || supperClass == Controller.class"], [190, "                || supperClass == JbootServiceBase.class"], [191, "                || supperClass == Interceptor.class"], [192, "                || supperClass == FixedInterceptor.class"], [193, "                || supperClass == JbootModel.class"], [194, "                || supperClass == Model.class"], [195, "                || supperClass == Object.class"], [196, "                || supperClass == null) {"], [197, "            return;"], [198, "        }"], [199, "        doGetFields(supperClass, fields);"], [200, "    }"], [201, ""], [210, "    private void doInjectJFinalOrginal(Object targetObject, Field field, Inject inject) throws ReflectiveOperationException {"], [216, "        Object fieldInjectedObject = doGet(fieldInjectedClass);"]], "deleted": [[30, "    private ThreadLocal<HashMap<Class<?>, Object>> context = ThreadLocal.withInitial(() -> new HashMap<>());"], [33, "//        setInjectDepth(MAX_INJECT_DEPTH);"], [39, "        // Aop.get(obj.getClass()) \u53ef\u4ee5\u7528 Aop.inject(obj)\uff0c\u6240\u4ee5\u6ce8\u6389\u4e0b\u4e00\u884c\u4ee3\u7801"], [40, "        // targetClass = (Class<T>)getUsefulClass(targetClass);"], [43, ""], [47, "        Object ret;"], [48, "        if (!singleton) {"], [49, "            ret = createObject(targetClass);"], [50, "            doInject(targetClass, ret, injectDepth);"], [51, "            return (T) ret;"], [54, "        ret = singletonCache.get(targetClass);"], [59, "        //\u53ea\u6709\u5728\u5faa\u73af\u4f9d\u8d56\u7684\u65f6\u5019\uff0c\u8fd9\u4e2acontext\u624d\u4f1a\u6709\u503c"], [60, "        ret = context.get().get(targetClass);"], [61, "        if (ret != null) {"], [68, "//              ret = createObject(targetClass);"], [69, "//              doInject(targetClass, ret, injectDepth);"], [70, "//              singletonCache.put(targetClass, ret);"], [72, "                ret = createObject(targetClass);"], [74, "                //\u4fdd\u5b58\u5230\u672c\u6b21\u521d\u59cb\u5316\u7684\u4e0a\u4e0b\u6587"], [75, "                context.get().put(targetClass, ret);"], [77, "                //\u5faa\u73af\u6ce8\u5165"], [78, "                doInject(targetClass, ret, injectDepth);"], [80, "                //\u4fdd\u5b58\u5230\u7f13\u5b58\u3001\u5e76\u6e05\u9664\u4e0a\u4e0b\u6587\u6570\u636e"], [81, "                singletonCache.put(targetClass, ret);"], [82, "                context.get().clear();"], [83, "                context.remove();"], [102, "//        \u6ce8\u91ca\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u53d6\u6d88 injectDepth \u5c42\u7ea7\u7684\u9650\u5236\uff0c"], [103, "//        \u4ece\u800c\u4fdd\u8bc1\u7cfb\u7edf\u7a33\u5b9a\u6027\uff08ps\uff1a\u5c3d\u7ba1\u8bbe\u7f6e injectDepth \u4e3a 7 \uff0c\u4f46\u662f\u8fd8\u662f\u6709\u4e9b\u7cfb\u7edf\u51fa\u73b0\u4e86\u65e0\u6cd5\u6ce8\u5165\u7684\u60c5\u51b5\uff09\u3002"], [104, "//        if ((injectDepth--) <= 0) {"], [105, "//            return;"], [106, "//        }"], [110, "        Field[] fields = targetClass.getFields();"], [111, "        if (fields.length == 0) {"], [132, "                doInjectJFinalOrginal(targetObject, field, inject, injectDepth);"], [159, "    private void doInjectJFinalOrginal(Object targetObject, Field field, Inject inject, int injectDepth) throws ReflectiveOperationException {"], [165, "        Object fieldInjectedObject = doGet(fieldInjectedClass, injectDepth);"]]}, "num_lines_added": 87, "num_lines_removed": 36}