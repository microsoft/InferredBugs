{"hash": "663b9b28e417e34bc5d53207cef38f45525caa56", "message": "v2.0-rc.7", "file_num_lines": 169, "diff_parsed": {"added": [[8, "import io.jboot.aop.annotation.ConfigValue;"], [128, "                doInjectJFinalOrginal(targetObject, field, inject, injectDepth);"], [132, "            ConfigValue configValue = field.getAnnotation(ConfigValue.class);"], [133, "            if (configValue != null) {"], [134, "                doInjectConfigValue(targetObject, field, configValue);"], [155, "    private void doInjectJFinalOrginal(Object targetObject, Field field, Inject inject, int injectDepth) throws ReflectiveOperationException {"], [194, "     * @param configValue"], [197, "    private void doInjectConfigValue(Object targetObject, Field field, ConfigValue configValue) throws IllegalAccessException {"], [198, "        String key = AnnotationUtil.get(configValue.value());"]], "deleted": [[9, "import io.jboot.app.config.annotation.InjectConfigModel;"], [10, "import io.jboot.app.config.annotation.InjectConfigValue;"], [129, "                injectByJFinalInject(targetObject, field, inject, injectDepth);"], [133, "            InjectConfigValue injectConfigValue = field.getAnnotation(InjectConfigValue.class);"], [134, "            if (injectConfigValue != null) {"], [135, "                doInjectConfigValue(targetObject, field, injectConfigValue);"], [136, "                continue;"], [137, "            }"], [138, ""], [139, "            InjectConfigModel injectConfigModel = field.getAnnotation(InjectConfigModel.class);"], [140, "            if (injectConfigModel != null) {"], [141, "                doInjectConfigModel(targetObject, field, injectConfigModel);"], [154, "    private void doInjectConfigModel(Object targetObject, Field field, InjectConfigModel injectConfigModel) throws IllegalAccessException {"], [155, "        Class<?> fieldInjectedClass = field.getType();"], [156, "        Object value = JbootConfigManager.me().get(fieldInjectedClass);"], [157, "        field.setAccessible(true);"], [158, "        field.set(targetObject, inject(value));"], [159, "    }"], [160, ""], [169, "    private void injectByJFinalInject(Object targetObject, Field field, Inject inject, int injectDepth) throws ReflectiveOperationException {"], [208, "     * @param injectConfigValue"], [211, "    private void doInjectConfigValue(Object targetObject, Field field, InjectConfigValue injectConfigValue) throws IllegalAccessException {"], [212, "        String key = AnnotationUtil.get(injectConfigValue.value());"]]}, "num_lines_added": 9, "num_lines_removed": 23}