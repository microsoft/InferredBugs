{"hash": "f123e8863e1e1c013cb02e263010d1c5bc5164d6", "message": "v2.1.2", "file_num_lines": 105, "diff_parsed": {"added": [[8, " * http://www.apache.org/licenses/LICENSE-2.0"], [29, "    public static String getSuffix(String fileName) {"], [30, "        if (fileName != null && fileName.contains(\".\")) {"], [31, "            return fileName.substring(fileName.lastIndexOf(\".\"));"], [32, "        }"], [33, "        return null;"], [34, "    }"], [35, ""], [36, ""], [37, "    public static String removePrefix(String src, String prefix) {"], [38, "        if (src != null && src.startsWith(prefix)) {"], [39, "            return src.substring(prefix.length());"], [40, "        }"], [41, "        return src;"], [42, "    }"], [43, ""], [44, ""], [45, "    public static String removeRootPath(String src) {"], [46, "        return removePrefix(src, PathKit.getWebRootPath());"], [47, "    }"], [48, ""], [49, "    public static String readString(File file) {"], [50, "        ByteArrayOutputStream baos = null;"], [51, "        FileInputStream fis = null;"], [52, "        try {"], [53, "            fis = new FileInputStream(file);"], [54, "            baos = new ByteArrayOutputStream();"], [55, "            byte[] buffer = new byte[1024];"], [56, "            for (int len = 0; (len = fis.read(buffer)) > 0; ) {"], [57, "                baos.write(buffer, 0, len);"], [58, "            }"], [59, "            return new String(baos.toByteArray(), JFinal.me().getConstants().getEncoding());"], [60, "        } catch (Exception e) {"], [61, "        } finally {"], [62, "            close(fis, baos);"], [63, "        }"], [64, "        return null;"], [65, "    }"], [66, ""], [67, "    public static void writeString(File file, String string) {"], [68, "        FileOutputStream fos = null;"], [69, "        try {"], [70, "            fos = new FileOutputStream(file, false);"], [71, "            fos.write(string.getBytes(JFinal.me().getConstants().getEncoding()));"], [72, "        } catch (Exception e) {"], [73, "        } finally {"], [74, "            close(null, fos);"], [75, "        }"], [76, "    }"], [77, ""], [78, "    private static void close(InputStream is, OutputStream os) {"], [79, "        if (is != null)"], [80, "            try {"], [81, "                is.close();"], [82, "            } catch (IOException e) {"], [83, "            }"], [84, "        if (os != null)"], [85, "            try {"], [86, "                os.close();"], [87, "            } catch (IOException e) {"], [88, "            }"], [89, "    }"], [90, ""], [91, "    public static void unzip(String zipFilePath) throws IOException {"], [92, "        String targetPath = zipFilePath.substring(0, zipFilePath.lastIndexOf(\".\"));"], [93, "        unzip(zipFilePath, targetPath, true);"], [94, "    }"], [95, ""], [96, "    public static void unzip(String zipFilePath, String targetPath) throws IOException {"], [97, "        unzip(zipFilePath, targetPath, true);"], [98, "    }"], [99, ""], [100, "    public static void unzip(String zipFilePath, String targetPath, boolean safeUnzip) throws IOException {"], [101, "        ZipFile zipFile = new ZipFile(zipFilePath);"], [102, "        try {"], [103, "            Enumeration<?> entryEnum = zipFile.entries();"], [104, "            if (null != entryEnum) {"], [105, "                while (entryEnum.hasMoreElements()) {"], [106, "                    OutputStream os = null;"], [107, "                    InputStream is = null;"], [108, "                    try {"], [109, "                        ZipEntry zipEntry = (ZipEntry) entryEnum.nextElement();"], [110, "                        if (!zipEntry.isDirectory()) {"], [111, "                            if (safeUnzip && zipEntry.getName().contains(\"..\")) {"], [112, "                                continue;"], [113, "                            }"], [114, "                            File targetFile = new File(targetPath + File.separator + zipEntry.getName());"], [115, "                            if (!targetFile.getParentFile().exists()) {"], [116, "                                targetFile.getParentFile().mkdirs();"], [117, "                            }"], [118, "                            os = new BufferedOutputStream(new FileOutputStream(targetFile));"], [119, "                            is = zipFile.getInputStream(zipEntry);"], [120, "                            byte[] buffer = new byte[4096];"], [121, "                            int readLen = 0;"], [122, "                            while ((readLen = is.read(buffer, 0, 4096)) > 0) {"], [123, "                                os.write(buffer, 0, readLen);"], [124, "                            }"], [125, "                        }"], [126, "                    } finally {"], [127, "                        close(is, os);"], [128, "                    }"], [129, "                }"], [130, "            }"], [131, "        } finally {"], [132, "            zipFile.close();"], [133, "        }"], [134, "    }"]], "deleted": [[8, " *  http://www.apache.org/licenses/LICENSE-2.0"], [29, "\tpublic static String getSuffix(String fileName) {"], [30, "\t\tif (fileName != null && fileName.contains(\".\")) {"], [31, "\t\t\treturn fileName.substring(fileName.lastIndexOf(\".\"));"], [32, "\t\t}"], [33, "\t\treturn null;"], [34, "\t}"], [35, ""], [36, ""], [37, "\tpublic static String removePrefix(String src, String prefix) {"], [38, "\t\tif (src != null && src.startsWith(prefix)) {"], [39, "\t\t\treturn src.substring(prefix.length());"], [40, "\t\t}"], [41, "\t\treturn src;"], [42, "\t}"], [43, ""], [44, ""], [45, "\tpublic static String removeRootPath(String src){"], [46, "\t\treturn removePrefix(src, PathKit.getWebRootPath());"], [47, "\t}"], [48, ""], [49, "\tpublic static String readString(File file) {"], [50, "\t\tByteArrayOutputStream baos = null;"], [51, "\t\tFileInputStream fis = null;"], [52, "\t\ttry {"], [53, "\t\t\tfis = new FileInputStream(file);"], [54, "\t\t\tbaos = new ByteArrayOutputStream();"], [55, "\t\t\tbyte[] buffer = new byte[1024];"], [56, "\t\t\tfor (int len = 0; (len = fis.read(buffer)) > 0;) {"], [57, "\t\t\t\tbaos.write(buffer, 0, len);"], [58, "\t\t\t}"], [59, "\t\t\treturn new String(baos.toByteArray(), JFinal.me().getConstants().getEncoding());"], [60, "\t\t} catch (Exception e) {"], [61, "\t\t} finally {"], [62, "\t\t\tclose(fis, baos);"], [63, "\t\t}"], [64, "\t\treturn null;"], [65, "\t}"], [66, ""], [67, "\tpublic static void writeString(File file, String string) {"], [68, "\t\tFileOutputStream fos = null;"], [69, "\t\ttry {"], [70, "\t\t\tfos = new FileOutputStream(file, false);"], [71, "\t\t\tfos.write(string.getBytes(JFinal.me().getConstants().getEncoding()));"], [72, "\t\t} catch (Exception e) {"], [73, "\t\t} finally {"], [74, "\t\t\tclose(null, fos);"], [75, "\t\t}"], [76, "\t}"], [77, ""], [78, "\tprivate static void close(InputStream is, OutputStream os) {"], [79, "\t\tif (is != null)"], [80, "\t\t\ttry {"], [81, "\t\t\t\tis.close();"], [82, "\t\t\t} catch (IOException e) {"], [83, "\t\t\t}"], [84, "\t\tif (os != null)"], [85, "\t\t\ttry {"], [86, "\t\t\t\tos.close();"], [87, "\t\t\t} catch (IOException e) {"], [88, "\t\t\t}"], [89, "\t}"], [90, ""], [91, "\tpublic static void unzip(String zipFilePath) throws IOException {"], [92, "\t\tString targetPath = zipFilePath.substring(0, zipFilePath.lastIndexOf(\".\"));"], [93, "\t\tunzip(zipFilePath, targetPath);"], [94, "\t}"], [95, ""], [96, "\tpublic static void unzip(String zipFilePath, String targetPath) throws IOException {"], [97, "\t\tZipFile zipFile = new ZipFile(zipFilePath);"], [98, "\t\ttry{"], [99, "\t\t\tEnumeration<?> entryEnum = zipFile.entries();"], [100, "\t\t\tif (null != entryEnum) {"], [101, "\t\t\t\twhile (entryEnum.hasMoreElements()) {"], [102, "\t\t\t\t\tOutputStream os = null;"], [103, "\t\t\t\t\tInputStream is = null;"], [104, "\t\t\t\t\ttry {"], [105, "\t\t\t\t\t\tZipEntry zipEntry = (ZipEntry) entryEnum.nextElement();"], [106, "\t\t\t\t\t\tif (!zipEntry.isDirectory()) {"], [107, "\t\t\t\t\t\t\tFile targetFile = new File(targetPath + File.separator + zipEntry.getName());"], [108, "\t\t\t\t\t\t\tif (!targetFile.getParentFile().exists()) {"], [109, "\t\t\t\t\t\t\t\ttargetFile.getParentFile().mkdirs();"], [110, "\t\t\t\t\t\t\t}"], [111, "\t\t\t\t\t\t\tos = new BufferedOutputStream(new FileOutputStream(targetFile));"], [112, "\t\t\t\t\t\t\tis = zipFile.getInputStream(zipEntry);"], [113, "\t\t\t\t\t\t\tbyte[] buffer = new byte[4096];"], [114, "\t\t\t\t\t\t\tint readLen = 0;"], [115, "\t\t\t\t\t\t\twhile ((readLen = is.read(buffer, 0, 4096)) > 0) {"], [116, "\t\t\t\t\t\t\t\tos.write(buffer, 0, readLen);"], [117, "\t\t\t\t\t\t\t}"], [118, "\t\t\t\t\t\t}"], [119, "\t\t\t\t\t} finally {"], [120, "\t\t\t\t\t\tif (is != null)"], [121, "\t\t\t\t\t\t\tis.close();"], [122, "\t\t\t\t\t\tif (os != null)"], [123, "\t\t\t\t\t\t\tos.close();"], [124, "\t\t\t\t\t}"], [125, "\t\t\t\t}"], [126, "\t\t\t}"], [127, "\t\t}finally{"], [128, "\t\t\tzipFile.close();"], [129, "\t\t}"], [130, "\t}"]]}, "num_lines_added": 107, "num_lines_removed": 103}