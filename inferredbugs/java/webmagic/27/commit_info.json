{"hash": "edfc319c454a6812841d1a9c9c01f622ee1c1293", "message": "update httpclient to 4.3.1", "file_num_lines": 124, "diff_parsed": {"added": [[5, "import org.apache.http.client.methods.CloseableHttpResponse;"], [7, "import org.apache.http.impl.client.CloseableHttpClient;"], [8, "import org.apache.http.util.EntityUtils;"], [35, "    private volatile CloseableHttpClient httpClient;"], [61, "    private CloseableHttpClient getHttpClient(Site site) {"], [62, "        if (httpClient == null) {"], [63, "            synchronized (this) {"], [64, "                if (httpClient == null) {"], [65, "                    httpClient = new HttpClientPool(poolSize).getClient(site);"], [66, "                }"], [67, "            }"], [69, "        return httpClient;"], [80, "        Map<String, String> headers = null;"], [90, "        HttpGet httpGet = new HttpGet(request.getUrl());"], [91, "        if (headers != null) {"], [92, "            for (Map.Entry<String, String> headerEntry : headers.entrySet()) {"], [93, "                httpGet.addHeader(headerEntry.getKey(), headerEntry.getValue());"], [95, "        }"], [96, "        CloseableHttpResponse httpResponse = null;"], [97, "        try {"], [98, "            httpResponse = getHttpClient(site).execute(httpGet);"], [109, "                return null;"], [111, "        } catch (IOException e) {"], [113, "            if (site.getCycleRetryTimes() > 0) {"], [114, "                return addToCycleRetry(request, site);"], [115, "            }"], [116, "            return null;"], [117, "        } finally {"], [118, "            try {"], [119, "                if (httpResponse != null) {"], [120, "                    httpResponse.close();"], [121, "                }"], [122, "            } catch (IOException e) {"], [123, "                logger.warn(\"close response fail\", e);"], [124, "            }"], [126, "    }"], [127, ""], [128, "    private Page addToCycleRetry(Request request, Site site) {"], [129, "        Page page = new Page();"], [130, "        Object cycleTriedTimesObject = request.getExtra(Request.CYCLE_TRIED_TIMES);"], [131, "        if (cycleTriedTimesObject == null) {"], [132, "            page.addTargetRequest(request.setPriority(0).putExtra(Request.CYCLE_TRIED_TIMES, 1));"], [133, "        } else {"], [134, "            int cycleTriedTimes = (Integer) cycleTriedTimesObject;"], [135, "            cycleTriedTimes++;"], [136, "            if (cycleTriedTimes >= site.getCycleRetryTimes()) {"], [137, "                return null;"], [138, "            }"], [139, "            page.addTargetRequest(request.setPriority(0).putExtra(Request.CYCLE_TRIED_TIMES, 1));"], [140, "        }"], [141, "        return page;"], [145, "        String content = EntityUtils.toString(httpResponse.getEntity(), charset);"]], "deleted": [[3, "import org.apache.commons.io.IOUtils;"], [4, "import org.apache.http.Header;"], [5, "import org.apache.http.HeaderElement;"], [8, "import org.apache.http.client.HttpClient;"], [9, "import org.apache.http.client.entity.GzipDecompressingEntity;"], [37, "    private HttpClientPool httpClientPool;"], [63, "    private HttpClientPool getHttpClientPool(){"], [64, "        if (httpClientPool==null){"], [65, "            httpClientPool = new HttpClientPool(poolSize);"], [67, "        return httpClientPool;"], [76, "        int retryTimes = 0;"], [79, "        Map<String,String> headers = null;"], [81, "            retryTimes = site.getRetryTimes();"], [90, "        HttpClient httpClient = getHttpClientPool().getClient(site);"], [91, "        try {"], [92, "            HttpGet httpGet = new HttpGet(request.getUrl());"], [93, ""], [94, "            if (headers!=null){"], [95, "                for (Map.Entry<String, String> headerEntry : headers.entrySet()) {"], [96, "                    httpGet.addHeader(headerEntry.getKey(),headerEntry.getValue());"], [97, "                }"], [98, "            }"], [99, "            if (!httpGet.containsHeader(\"Accept-Encoding\")) {"], [100, "                httpGet.addHeader(\"Accept-Encoding\", \"gzip\");"], [102, "            HttpResponse httpResponse = null;"], [103, "            int tried = 0;"], [104, "            boolean retry;"], [105, "            do {"], [106, "                try {"], [107, "                    httpResponse = httpClient.execute(httpGet);"], [108, "                    retry = false;"], [109, "                } catch (IOException e) {"], [110, "                    tried++;"], [111, ""], [112, "                    if (tried > retryTimes) {"], [113, "                        logger.warn(\"download page \" + request.getUrl() + \" error\", e);"], [114, "                        if (site.getCycleRetryTimes() > 0) {"], [115, "                            Page page = new Page();"], [116, "                            Object cycleTriedTimesObject = request.getExtra(Request.CYCLE_TRIED_TIMES);"], [117, "                            if (cycleTriedTimesObject == null) {"], [118, "                                page.addTargetRequest(request.setPriority(0).putExtra(Request.CYCLE_TRIED_TIMES, 1));"], [119, "                            } else {"], [120, "                                int cycleTriedTimes = (Integer) cycleTriedTimesObject;"], [121, "                                cycleTriedTimes++;"], [122, "                                if (cycleTriedTimes >= site.getCycleRetryTimes()) {"], [123, "                                    return null;"], [124, "                                }"], [125, "                                page.addTargetRequest(request.setPriority(0).putExtra(Request.CYCLE_TRIED_TIMES, 1));"], [126, "                            }"], [127, "                            return page;"], [128, "                        }"], [129, "                        return null;"], [130, "                    }"], [131, "                    logger.info(\"download page \" + request.getUrl() + \" error, retry the \" + tried + \" time!\");"], [132, "                    retry = true;"], [133, "                }"], [134, "            } while (retry);"], [137, "                handleGzip(httpResponse);"], [147, "        } catch (Exception e) {"], [150, "        return null;"], [154, "        String content = IOUtils.toString(httpResponse.getEntity().getContent(),"], [155, "                charset);"], [166, "        httpClientPool = new HttpClientPool(thread);"], [167, "    }"], [168, ""], [169, "    private void handleGzip(HttpResponse httpResponse) {"], [170, "        Header ceheader = httpResponse.getEntity().getContentEncoding();"], [171, "        if (ceheader != null) {"], [172, "            HeaderElement[] codecs = ceheader.getElements();"], [173, "            for (HeaderElement codec : codecs) {"], [174, "                if (codec.getName().equalsIgnoreCase(\"gzip\")) {"], [175, "                    //todo bugfix"], [176, "                    httpResponse.setEntity("], [177, "                            new GzipDecompressingEntity(httpResponse.getEntity()));"], [178, "                }"], [179, "            }"], [180, "        }"]]}, "num_lines_added": 52, "num_lines_removed": 77}