{"hash": "ae546a0c614a25c39daf7665955c0946fbf39351", "message": "\u81ea\u52a8\u7f13\u5b58\u529f\u80fd\u4f18\u5316", "file_num_lines": 391, "diff_parsed": {"added": [[12, "import java.util.Set;"], [35, "import com.jeesuite.mybatis.plugin.cache.annotation.CacheEvictCascade;"], [57, "\t//\u9700\u8981\u7f13\u5b58\u7684\u6240\u6709mapper"], [58, "\tprivate static List<String> cacheEnableMappers = new ArrayList<>();"], [59, ""], [60, "\tprivate static Map<String, String> mapperNameRalateEntityNames = new HashMap<>();"], [61, ""], [62, "\t/**"], [63, "\t * \u66f4\u65b0\u65b9\u6cd5\u5173\u8054\u7684\u7f13\u5b58\u7ec4"], [64, "\t */"], [65, "\tprivate static Map<String, List<String>> cacheEvictCascades = new HashMap<>();"], [115, "\t\t\t\tString cacheKeyById = cacheProvider.getStr(cacheKey);"], [138, "\t\tString mapperNameSpace = mt.getId().substring(0, mt.getId().lastIndexOf(SPLIT_PONIT));"], [139, ""], [159, "\t\t\t\t\tlogger.debug(\"method[{}] add key:[{}] to group key:[{}]\",mt.getId(),cacheInfo.cacheGroupKey, cacheKey);"], [160, "\t\t\t\t}else{"], [161, "\t\t\t\t\t//"], [162, "\t\t\t\t\tcacheUniqueSelectRef(result, mt, cacheKey);"], [174, "\t\t\t//\u8fd4\u56de0\uff0c\u672a\u66f4\u65b0\u6210\u529f"], [175, "\t\t\tif(result != null && ((int)result) == 0)return;"], [176, ""], [200, "\t\t\t//\u5220\u9664\u540c\u4e00cachegroup\u5173\u8054\u7f13\u5b58"], [201, "\t\t\tremoveCacheByGroup(mt.getId(), mapperNameSpace);"], [202, "\t\t}"], [203, "\t}"], [204, ""], [205, "\t/**"], [206, "\t * \u5220\u9664\u7f13\u5b58\u7ec4"], [207, "\t * @param mt"], [208, "\t * @param mapperNameSpace"], [209, "\t */"], [210, "\tprivate void removeCacheByGroup(String msId, String mapperNameSpace) {"], [211, "\t\t//\u5220\u9664cachegroup\u5173\u8054\u7f13\u5b58"], [212, "\t\tif(!cacheEnableMappers.contains(mapperNameSpace))return;"], [213, "\t\tString entityName = mapperNameRalateEntityNames.get(mapperNameSpace);"], [214, "\t\tString cacheGroup = entityName + GROUPKEY_SUFFIX;"], [215, "\t\tcacheProvider.clearGroupKeys(cacheGroup);"], [216, "\t\tlogger.debug(\"method[{}] remove cache Group:{}\",msId,cacheGroup);"], [217, "\t\t//\u5173\u8054\u7f13\u5b58"], [218, "\t\tif(cacheEvictCascades.containsKey(msId)){"], [219, "\t\t\tfor (String entity : cacheEvictCascades.get(msId)) {"], [220, "\t\t\t\tcacheGroup = entity + GROUPKEY_SUFFIX;"], [221, "\t\t\t\tcacheProvider.clearExpiredGroupKeys(entity + GROUPKEY_SUFFIX);"], [222, "\t\t\t\tlogger.debug(\"method[{}] remove Cascade cache Group:[{}]\",msId,cacheGroup);"], [223, "\t\t\t}"], [241, "\t\t\t\t\tif(methodCache.fieldNames[i] == null)continue outter;"], [335, "\t\t\t\tString fullMethodName = mapperClass.getName() + SPLIT_PONIT + method.getName();"], [343, "\t\t\t\t}else if(method.isAnnotationPresent(CacheEvictCascade.class)){"], [344, "\t\t\t\t\tCacheEvictCascade cascade = method.getAnnotation(CacheEvictCascade.class);"], [345, "\t\t\t\t\tif(cascade.cascadeEntities().length > 0){"], [346, "\t\t\t\t\t\tList<String> entityNames = new ArrayList<>();"], [347, "\t\t\t\t\t\tfor (Class<?> clazz : cascade.cascadeEntities()) {"], [348, "\t\t\t\t\t\t\tentityNames.add(clazz.getSimpleName());"], [349, "\t\t\t\t\t\t}"], [350, "\t\t\t\t\t\tcacheEvictCascades.put(fullMethodName, entityNames);"], [351, "\t\t\t\t\t\tlogger.info(\"\u89e3\u6790\u67e5\u8be2\u65b9\u6cd5{}\u81ea\u52a8\u5173\u8054\u66f4\u65b0\u7f13\u5b58\u914d\u7f6e ok,cascadeEntities:[{}]\",fullMethodName,entityNames);"], [352, "\t\t\t\t\t}"], [369, "\t\t\t//\u7f13\u5b58\u9700\u8981\u81ea\u52a8\u7f13\u5b58\u7684mapper"], [370, "\t\t\tcacheEnableMappers.add(ei.getMapperClass().getName());"], [371, "\t\t\t//"], [372, "\t\t\tmapperNameRalateEntityNames.put(ei.getMapperClass().getName(), ei.getEntityClass().getSimpleName());"], [380, "\t\t\tgenerateUpdateByPkCacheMethod(mapperClass, ei.getEntityClass(), keyPatternForPK);"], [438, "\tprivate void generateUpdateByPkCacheMethod(Class<?> mapperClass,Class<?> entityClass,String keyPatternForPK){"], [473, "\t\tmethodCache.uniqueResult = method.getReturnType() != List.class && method.getReturnType() != Set.class;"], [475, "\t\tStringBuilder sb = new StringBuilder(entityClass.getSimpleName()).append(SPLIT_PONIT).append(method.getName());"], [479, "\t\tfor (int i = 0; i < annotations.length; i++) {"], [480, "\t\t\tAnnotation[] aa = annotations[i];"], [481, "\t\t\tif(aa.length > 0){"], [482, "\t\t\t\tString fieldName = null;"], [483, "\t\t\t\tinner:for (Annotation annotation : aa) {"], [484, "\t\t\t\t\tif(annotation.toString().contains(Param.class.getName())){"], [485, "\t\t\t\t\t\tfieldName = ((Param)annotation).value();"], [486, "\t\t\t\t\t\tbreak inner;"], [489, "\t\t\t\tmethodCache.fieldNames[i] = fieldName;"], [491, "\t\t\t//"], [492, "\t\t\tsb.append(i == 0 ? \":\" : \"_\").append(\"%s\");"], [508, "\t\tpublic boolean uniqueResult = true;//\u67e5\u8be2\u7ed3\u679c\u662f\u5426\u552f\u4e00\u8bb0\u5f55"]], "deleted": [[55, "\tprivate static List<String> cacheEntityClassNames = new ArrayList<>();"], [105, "\t\t\t\tString cacheKeyById = cacheProvider.get(cacheKey);"], [165, "\t\t\t\t\t//TODO \u6e05\u9664\u5173\u8054\u7f13\u5b58"], [166, ""], [182, "\t\t\t\t//TODO \u5220\u9664\u540c\u4e00cachegroup\u5173\u8054\u7f13\u5b58"], [183, "\t\t\t\tcacheProvider.clearGroupKeys(updateMethodCache.cacheGroupKey);"], [185, ""], [186, ""], [299, "\t\t\t\t\tString fullMethodName = mapperClass.getName() + SPLIT_PONIT + method.getName();"], [303, "\t\t\t\t\tmethodCache.uniqueResult = annotationCache.uniqueResult();"], [322, "\t\t\t//\u7f13\u5b58\u9700\u8981\u81ea\u52a8\u7f13\u5b58\u7684\u5b9e\u4f53\u7c7b\u540d"], [323, "\t\t\tcacheEntityClassNames.add(ei.getEntityClass().getSimpleName());"], [331, "\t\t\tgenerateUpdateCacheMethod(mapperClass, ei.getEntityClass(), keyPatternForPK);"], [389, "\tprivate void generateUpdateCacheMethod(Class<?> mapperClass,Class<?> entityClass,String keyPatternForPK){"], [425, "\t\tStringBuilder sb = new StringBuilder(entityClass.getSimpleName());"], [429, "\t\tif(annotations != null){"], [430, "\t\t\tfor (int i = 0; i < annotations.length; i++) {"], [431, "\t\t\t\tAnnotation[] aa = annotations[i];"], [432, "\t\t\t\tif(aa.length > 0){"], [433, "\t\t\t\t\tString fieldName = null;"], [434, "\t\t\t\t\tinner:for (Annotation annotation : aa) {"], [435, "\t\t\t\t\t\tif(annotation.toString().contains(Param.class.getName())){"], [436, "\t\t\t\t\t\t\tfieldName = ((Param)annotation).value();"], [437, "\t\t\t\t\t\t\tbreak inner;"], [438, "\t\t\t\t\t\t}"], [439, "\t\t\t\t\t}"], [440, "\t\t\t\t\tif(fieldName == null)new RuntimeException(String.format(\"\u65e0cacheField \u5b9a\u4e49 at %s.%s\", entityClass.getName(),fieldName,mapperClass.getName(),method.getName()));"], [441, "\t\t\t\t\tif(!MybatisMapperParser.entityHasProperty(entityClass, fieldName)){"], [442, "\t\t\t\t\t\tthrow new RuntimeException(String.format(\"%s\u65e0%s\u5c5e\u6027 at %s.%s\", entityClass.getName(),fieldName,mapperClass.getName(),method.getName()));"], [444, "\t\t\t\t\tsb.append(SPLIT_PONIT).append(fieldName).append(REGEX_PLACEHOLDER);"], [445, "\t\t\t\t\tmethodCache.fieldNames[i] = fieldName;"], [446, "\t\t\t\t}else{"], [447, "\t\t\t\t\tthrow new RuntimeException(String.format(\"\u63a5\u53e3%s.%s\u53c2\u6570\u7f3a\u5931Param\u6807\u6ce8\", mapperClass.getName(),method.getName()));"], [451, ""], [466, "\t\tpublic boolean uniqueResult = false;//\u67e5\u8be2\u7ed3\u679c\u662f\u5426\u552f\u4e00\u8bb0\u5f55"], [475, "\t\tpublic String cacheGroupKey;//\u7f13\u5b58\u7ec4key"], [480, "\t\t\tthis.cacheGroupKey = entityClass.getSimpleName() + GROUPKEY_SUFFIX;"]]}, "num_lines_added": 77, "num_lines_removed": 37}