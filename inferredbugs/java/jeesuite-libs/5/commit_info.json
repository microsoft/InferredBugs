{"hash": "43fcc912fcd6f4255716d8b0abec07847aecdde6", "message": "\u5b8c\u5584kafka\u6d88\u606foffset\u7ba1\u7406\u903b\u8f91", "file_num_lines": 251, "diff_parsed": {"added": [[28, "import org.apache.kafka.common.PartitionInfo;"], [84, "\t\t//\u91cd\u7f6eoffset"], [85, "\t\tif(offsetAutoCommit && consumerContext.getOffsetLogHanlder() != null){"], [86, "\t\t\tresetCorrectOffsets();"], [87, "\t\t}"], [94, "\t\tconsumer.pause(consumer.assignment());"], [95, "\t\tMap<String, List<PartitionInfo>> topicInfos = consumer.listTopics();"], [96, "\t\tSet<String> topics = topicInfos.keySet();"], [98, "\t\tList<String> expectTopics = new ArrayList<>(topicHandlers.keySet());"], [99, ""], [100, "\t\tList<PartitionInfo> patitions = null;"], [101, "\t\tfor (String topic : topics) {"], [102, "\t\t\tif(!expectTopics.contains(topic))continue;"], [103, ""], [104, "\t\t\tpatitions = topicInfos.get(topic);"], [105, "\t\t\tfor (PartitionInfo partition : patitions) {"], [106, "\t\t\t\ttry {"], [107, "\t\t\t\t\t//\u671f\u671b\u7684\u504f\u79fb"], [108, "\t\t\t\t\tlong expectOffsets = consumerContext.getLatestProcessedOffsets(topic, partition.partition());"], [109, "\t\t\t\t\t//"], [110, "\t\t\t\t\tTopicPartition topicPartition = new TopicPartition(topic, partition.partition());"], [111, "\t\t\t\t\tOffsetAndMetadata metadata = consumer.committed(new TopicPartition(partition.topic(), partition.partition()));"], [112, "\t\t\t\t\tif(expectOffsets >= 0){"], [113, "\t\t\t\t\t\tif(expectOffsets < metadata.offset()){"], [114, "\t\t\t\t\t\t\tconsumer.seek(topicPartition, expectOffsets);"], [115, "\t\t\t\t\t\t\tlogger.info(\"seek Topic[{}] partition[{}] from {} to {}\",topic, partition.partition(),metadata.offset(),expectOffsets);"], [118, "\t\t\t\t} catch (Exception e) {"], [119, "\t\t\t\t\tlogger.warn(\"try seek topic[\"+topic+\"] partition[\"+partition.partition()+\"] offsets error\");"], [123, "\t\tconsumer.resume(consumer.assignment());"], [154, "\t\t\t\t\t//\u671f\u671b\u7684\u504f\u79fb"], [155, "\t\t\t\t\tlong startOffset = 0L;"], [156, "                    if(consumerContext.getOffsetLogHanlder() != null){"], [157, "\t\t\t\t\t\ttry {"], [158, "\t\t\t\t\t\t\tstartOffset = consumerContext.getLatestProcessedOffsets(tp.topic(), tp.partition());"], [159, "\t\t\t\t\t\t\tlogger.info(\"offsetLogHanlder.getLatestProcessedOffsets({},{}) result is {}\",tp.topic(), tp.partition(),startOffset);"], [160, "\t\t\t\t\t\t} catch (Exception e) {"], [161, "\t\t\t\t\t\t\tlogger.warn(\"offsetLogHanlder.getLatestProcessedOffsets error:{}\",e.getMessage());"], [162, "\t\t\t\t\t\t}"], [163, "\t\t\t\t\t}"], [164, "                    if(startOffset == 0){"], [165, "                    \tOffsetAndMetadata offsetAndMetaData = consumer.committed(tp);"], [166, "                    \tstartOffset = offsetAndMetaData != null ? offsetAndMetaData.offset() : -1L;"], [167, "                    }"]], "deleted": [[23, "import org.apache.kafka.clients.consumer.ConsumerConfig;"], [35, "import com.jeesuite.kafka.monitor.KafkaConsumerCommand;"], [36, "import com.jeesuite.kafka.monitor.model.ConsumerGroupInfo;"], [37, "import com.jeesuite.kafka.monitor.model.TopicInfo;"], [38, "import com.jeesuite.kafka.monitor.model.TopicPartitionInfo;"], [82, "\t\t//\u91cd\u7f6eoffset"], [83, "\t\tif(consumerContext.getOffsetLogHanlder() != null){"], [84, "\t\t\tresetCorrectOffsets();"], [85, "\t\t}"], [99, "\t\tKafkaConsumerCommand consumerCommand = new KafkaConsumerCommand(consumerContext.getProperties().getProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG));"], [100, "\t\ttry {"], [101, "\t\t\tList<TopicInfo> topicInfos = consumerCommand.consumerGroup(consumerContext.getGroupId()).getTopics();"], [102, "\t\t\tfor (TopicInfo topic : topicInfos) {"], [103, "\t\t\t\tList<TopicPartitionInfo> partitions = topic.getPartitions();"], [104, "\t\t\t\tfor (TopicPartitionInfo partition : partitions) {"], [105, "\t\t\t\t\ttry {"], [106, "\t\t\t\t\t\t//\u671f\u671b\u7684\u504f\u79fb"], [107, "\t\t\t\t\t\tlong expectOffsets = consumerContext.getLatestProcessedOffsets(topic.getTopicName(), partition.getPartition());"], [108, "\t\t\t\t\t\t//"], [109, "\t\t\t\t\t\tif(expectOffsets < partition.getOffset()){"], [110, "\t\t\t\t\t\t\tconsumer.seek(new TopicPartition(topic.getTopicName(), partition.getPartition()), expectOffsets);"], [111, "\t\t\t\t\t\t\tlogger.info(\"seek Topic[{}] partition[{}] from {} to {}\",topic.getTopicName(), partition.getPartition(),partition.getOffset(),expectOffsets);"], [113, "\t\t\t\t\t} catch (Exception e) {"], [114, "\t\t\t\t\t\tlogger.warn(\"try seek topic[\"+topic.getTopicName()+\"] partition[\"+partition.getPartition()+\"] offsets error\",e);"], [118, ""], [119, "\t\t} catch (Exception e) {"], [120, "\t\t\tlogger.warn(\"KafkaConsumerCommand.consumerGroup(\"+consumerContext.getGroupId()+\") error\",e);"], [122, "\t\tconsumerCommand.close();"], [153, "\t\t\t\t\tOffsetAndMetadata offsetAndMetaData = consumer.committed(tp);"], [154, "\t\t\t\t\tlong startOffset = offsetAndMetaData != null ? offsetAndMetaData.offset() : -1L;"]]}, "num_lines_added": 43, "num_lines_removed": 30}