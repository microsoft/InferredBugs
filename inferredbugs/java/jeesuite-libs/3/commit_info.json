{"hash": "fc91a5dba4e32f554b23d64a612a329f137cc65f", "message": "\u81ea\u52a8\u7f13\u5b58\u589e\u52a0\u652f\u6301\u6309\u6761\u4ef6\u66f4\u65b0\u7f13\u5b58\u81ea\u52a8\u66f4\u65b0", "file_num_lines": 459, "diff_parsed": {"added": [[9, "import java.util.Collections;"], [22, "import org.apache.ibatis.executor.Executor;"], [24, "import org.apache.ibatis.mapping.ResultMap;"], [25, "import org.apache.ibatis.mapping.ResultMapping;"], [27, "import org.apache.ibatis.mapping.SqlSource;"], [29, "import org.apache.ibatis.reflection.MetaObject;"], [30, "import org.apache.ibatis.reflection.SystemMetaObject;"], [31, "import org.apache.ibatis.session.Configuration;"], [32, "import org.apache.ibatis.session.ResultHandler;"], [33, "import org.apache.ibatis.session.RowBounds;"], [40, "import com.jeesuite.mybatis.crud.builder.SqlTemplate;"], [61, "\t/**"], [62, "\t *"], [63, "\t */"], [64, "\tprivate static final String QUERY_IDS_SUFFIX = \"_ralateIds\";"], [119, "\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"_autocache_ method[{}] find result from cacheKey:{}\",mt.getId(),cacheKey);"], [129, "\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"_autocache_ method[{}] find result from cacheKey:{} ,ref by:{}\",mt.getId(),cacheKeyById,cacheKey);"], [163, "\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"_autocache_ method[{}] put result to cache\uff0ccacheKey:{}\",mt.getId(),cacheKey);"], [168, "\t\t\t\t\tlogger.debug(\"_autocache_ method[{}] add key:[{}] to group key:[{}]\",mt.getId(),cacheInfo.cacheGroupKey, cacheKey);"], [179, "\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"_autocache_ method[{}] put result to cache\uff0ccacheKey:{},and add ref cacheKey:{}\",mt.getId(),idCacheKey,cacheKey);"], [183, "\t\t\tif(!cacheEnableMappers.contains(mapperNameSpace))return;"], [192, "\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"_autocache_ method[{}] remove cacheKey:{} from cache\",mt.getId(),cacheByPkKey);"], [200, "\t\t\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"_autocache_ method[{}] update cacheKey:{}\",mt.getId(),cacheByPkKey);"], [209, "\t\t\t\ttry {"], [210, "\t\t\t\t\tExecutor executor = (Executor) invocation.getTarget();"], [211, "\t\t\t\t\tObject parameterObject = args[1];"], [212, "\t\t\t\t\tResultHandler resultHandler = null;"], [213, "\t\t\t\t\tEntityInfo entityInfo = MybatisMapperParser.getEntityInfoByMapper(mapperNameSpace);"], [214, "\t\t\t\t\tMappedStatement statement = getQueryIdsMappedStatementForUpdateCache(mt,entityInfo);"], [215, "\t\t\t\t\tList<?> idsResult = executor.query(statement, parameterObject, RowBounds.DEFAULT, resultHandler);"], [216, "\t\t\t\t\tif(idsResult != null){"], [217, "\t\t\t\t\t\tfor (Object id : idsResult) {"], [218, "\t\t\t\t\t\t\tString cacheKey = entityInfo.getEntityClass().getSimpleName() + \".id:\" + id.toString();"], [219, "\t\t\t\t\t\t\tcacheProvider.remove(cacheKey);"], [220, "\t\t\t\t\t\t}"], [221, "\t\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"_autocache_ update Method[{}] executed,remove ralate cache {}.id:[{}]\",mt.getId(),entityInfo.getEntityClass().getSimpleName(),idsResult);"], [222, "\t\t\t\t\t}"], [223, "\t\t\t\t} catch (Exception e) {"], [224, "\t\t\t\t\tlogger.error(\"_autocache_ update Method[{}] remove ralate cache error\",e);"], [225, "\t\t\t\t}"], [226, ""], [232, ""], [233, "    private MappedStatement getQueryIdsMappedStatementForUpdateCache(MappedStatement mt,EntityInfo entityInfo) {"], [234, "    \tString msId = mt.getId() + QUERY_IDS_SUFFIX;"], [235, ""], [236, "    \tMappedStatement statement = null;"], [237, "    \tConfiguration configuration = mt.getConfiguration();"], [238, "    \ttry {"], [239, "    \t\tstatement = configuration.getMappedStatement(msId);"], [240, "    \t\tif(statement != null)return statement;"], [241, "\t\t} catch (Exception e) {}"], [242, ""], [243, "    \tsynchronized (configuration) {"], [244, "\t\t\tString sql = entityInfo.getMapperSqls().get(mt.getId());"], [245, "    \t\tsql = \"select \"+entityInfo.getIdColumn()+\" from \"+entityInfo.getTableName()+\" WHERE \" + sql.split(\"where|WHERE\")[1];"], [246, "    \t\tsql = String.format(SqlTemplate.SCRIPT_TEMAPLATE, sql);"], [247, "    \t\tSqlSource sqlSource = configuration.getDefaultScriptingLanuageInstance().createSqlSource(configuration, sql, Object.class);"], [248, ""], [249, "    \t\tMappedStatement.Builder statementBuilder = new MappedStatement.Builder(configuration, msId, sqlSource,SqlCommandType.SELECT);"], [250, ""], [251, "    \t\tstatementBuilder.resource(mt.getResource());"], [252, "    \t\tstatementBuilder.fetchSize(mt.getFetchSize());"], [253, "    \t\tstatementBuilder.statementType(mt.getStatementType());"], [254, "    \t\tstatementBuilder.parameterMap(mt.getParameterMap());"], [255, "    \t\tstatement = statementBuilder.build();"], [256, ""], [257, "    \t\t List<ResultMap> resultMaps = new ArrayList<ResultMap>();"], [258, ""], [259, "    \t\t String id = msId + \"-Inline\";"], [260, "    \t\t ResultMap.Builder builder = new ResultMap.Builder(configuration, id, entityInfo.getIdType(), new ArrayList<ResultMapping>(), true);"], [261, "    \t     resultMaps.add(builder.build());"], [262, "    \t     MetaObject metaObject = SystemMetaObject.forObject(statement);"], [263, "    \t     metaObject.setValue(\"resultMaps\", Collections.unmodifiableList(resultMaps));"], [264, ""], [265, "    \t\tconfiguration.addMappedStatement(statement);"], [266, ""], [267, "    \t\treturn statement;"], [268, "\t\t}"], [269, "    }"], [281, "\t\tlogger.debug(\"_autocache_ method[{}] remove cache Group:{}\",msId,cacheGroup);"], [287, "\t\t\t\tlogger.debug(\"_autocache_ method[{}] remove Cascade cache Group:[{}]\",msId,cacheGroup);"], [312, "\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"_autocache_ method[{}] add ref cacheKey:{}\",mt.getId(),fieldCacheKey);"], [459, "\t\t\t\t\t\tlogger.warn(\"_autocache_ clearExpiredGroupKeys for {} error!!\",key);"]], "deleted": [[21, "import org.apache.ibatis.mapping.BoundSql;"], [105, "\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"method[{}] find result from cacheKey:{}\",mt.getId(),cacheKey);"], [115, "\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"method[{}] find result from cacheKey:{} ,ref by:{}\",mt.getId(),cacheKeyById,cacheKey);"], [149, "\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"method[{}] put result to cache\uff0ccacheKey:{}\",mt.getId(),cacheKey);"], [154, "\t\t\t\t\tlogger.debug(\"method[{}] add key:[{}] to group key:[{}]\",mt.getId(),cacheInfo.cacheGroupKey, cacheKey);"], [165, "\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"method[{}] put result to cache\uff0ccacheKey:{},and add ref cacheKey:{}\",mt.getId(),idCacheKey,cacheKey);"], [171, ""], [178, "\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"method[{}] remove cacheKey:{} from cache\",mt.getId(),cacheByPkKey);"], [186, "\t\t\t\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"method[{}] update cacheKey:{}\",mt.getId(),cacheByPkKey);"], [195, "\t\t\t\tSystem.out.println(args);"], [196, "\t\t\t\tSystem.out.println(mt);"], [197, "\t\t\t\tBoundSql boundSql = mt.getBoundSql(args[1]);"], [198, ""], [199, "\t\t\t\tObject parameterObject2 = boundSql.getParameterObject();"], [200, "\t\t\t\tSystem.out.println(parameterObject2);"], [201, "\t\t\t\tSystem.out.println(boundSql.getSql());"], [202, "\t\t\t\tSystem.out.println();"], [216, "\t\tif(!cacheEnableMappers.contains(mapperNameSpace))return;"], [220, "\t\tlogger.debug(\"method[{}] remove cache Group:{}\",msId,cacheGroup);"], [226, "\t\t\t\tlogger.debug(\"method[{}] remove Cascade cache Group:[{}]\",msId,cacheGroup);"], [251, "\t\t\t\tif(logger.isDebugEnabled())logger.debug(\"method[{}] add ref cacheKey:{}\",mt.getId(),fieldCacheKey);"], [398, "\t\t\t\t\t\tlogger.warn(\"clearExpiredGroupKeys for {} error!!\",key);"]]}, "num_lines_added": 83, "num_lines_removed": 22}