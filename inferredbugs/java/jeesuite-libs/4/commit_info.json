{"hash": "bb8435ce77c98fab1f770d7ac63173216da91c5b", "message": "\u589e\u52a0\u4e00\u4e9b\u5de5\u5177\u7c7b\u4ee5\u53camybati\u96c6\u6210\u5206\u9875\u63d2\u4ef6", "file_num_lines": 68, "diff_parsed": {"added": [[7, "import java.io.FileNotFoundException;"], [9, "import java.io.IOException;"], [23, ""], [24, "\tstatic Map<String, String> propertiesMap = new HashMap<>();"], [28, "            if(inited)return;"], [30, "\t\t\tloadPropertiesFromFile(dir);"], [37, ""], [38, "\tprivate static void loadPropertiesFromFile(File parent) throws FileNotFoundException, IOException{"], [39, "\t\tFile[] files = parent.listFiles();"], [40, "\t\tfor (File file : files) {"], [41, "\t\t\tif(file.isDirectory()){"], [42, "\t\t\t\tloadPropertiesFromFile(file);"], [43, "\t\t\t}else{"], [44, "\t\t\t\tString path = file.getPath();"], [45, "\t\t\t\tif(path.endsWith(\"properties\")){"], [46, "\t\t\t\t\tif(path.contains(\"i18n\"))continue;"], [47, "\t\t\t\t\tProperties p = new Properties();"], [48, "\t\t\t\t\tp.load(new FileReader(file));"], [49, "\t\t\t\t\tfor(String key : p.stringPropertyNames()) {"], [50, "\t\t\t\t\t\tString value = p.getProperty(key);"], [51, "\t\t\t\t\t\tif(value != null && !\"\".equals(value.toString().trim())){"], [52, "\t\t\t\t\t\t\tpropertiesMap.put(key, value);"], [53, "\t\t\t\t\t\t}"], [54, "\t\t\t\t\t}"], [55, "\t\t\t\t\tSystem.out.println(\"load properties from file:\" + path);"], [56, "\t\t\t\t}"], [59, "\t}"], [61, "\tpublic static String get(String key, String...defaultValue) {"], [62, "\t\tif(!inited){"], [63, "\t\t\tload();"], [64, "\t\t}"], [65, "\t\tif (propertiesMap.containsKey(key)) {"], [66, "\t\t\treturn propertiesMap.get(key);"], [67, "\t\t}"], [68, "\t\tif (defaultValue != null && defaultValue.length > 0 && defaultValue[0] != null) {"], [69, "\t\t\treturn defaultValue[0];"], [74, ""], [75, "\tpublic static int getInt(String key,int defalutValue){"], [76, "\t\tString v = get(key);"], [77, "\t\tif(v != null)return Integer.parseInt(v);"], [78, "\t\treturn defalutValue;"], [79, "\t}"], [80, ""], [81, "\tpublic static long getLong(String key,long defalutValue){"], [82, "\t\tString v = get(key);"], [83, "\t\tif(v != null)return Long.parseLong(v);"], [84, "\t\treturn defalutValue;"], [85, "\t}"], [86, ""]], "deleted": [[8, "import java.io.FilenameFilter;"], [9, "import java.util.ArrayList;"], [11, "import java.util.List;"], [23, "\tstatic Map<String, String> cache = new HashMap<>();"], [24, ""], [25, "\tstatic List<Properties> properties = new ArrayList<Properties>();"], [26, ""], [31, "            if(!properties.isEmpty())return;"], [33, ""], [34, "\t\t\tFile[] propFiles = dir.listFiles(new FilenameFilter() {"], [35, "\t\t\t\t@Override"], [36, "\t\t\t\tpublic boolean accept(File dir, String name) {"], [37, "\t\t\t\t\treturn name.endsWith(\"properties\");"], [38, "\t\t\t\t}"], [39, "\t\t\t});"], [40, ""], [41, "\t\t\tfor (File file : propFiles) {"], [42, "\t\t\t\tProperties p = new Properties();"], [43, "\t\t\t\tp.load(new FileReader(file));"], [44, "\t\t\t\tproperties.add(p);"], [45, "\t\t\t}"], [52, ""], [53, "\tpublic static String get(String key, String... defaults) {"], [54, "\t\tif(!inited)load();"], [55, "\t\tif (cache.containsKey(key)) {"], [56, "\t\t\treturn cache.get(key);"], [57, "\t\t}"], [58, ""], [59, "\t\tString value = null;"], [60, "\t\tfor (Properties prop : properties) {"], [61, "\t\t\tvalue = prop.getProperty(key);"], [62, "\t\t\tif (value != null) {"], [63, "\t\t\t\tcache.put(key, value);"], [64, "\t\t\t\treturn value;"], [68, "\t\tif (defaults != null && defaults.length > 0) {"], [69, "\t\t\treturn defaults[0];"], [73, ""], [75, ""]]}, "num_lines_added": 49, "num_lines_removed": 38}