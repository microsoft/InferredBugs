{"hash": "9e8e4de8f4ba98923f8931f42715fb2c24914a26", "message": "More session data, xbox auth, fix some crashes", "file_num_lines": 164, "diff_parsed": {"added": [[16, "import com.fasterxml.jackson.databind.JsonNode;"], [17, "import com.fasterxml.jackson.databind.node.JsonNodeType;"], [27, "import com.nukkitx.protocol.bedrock.util.EncryptionUtils;"], [40, "import org.dragonet.proxy.network.session.data.ClientData;"], [44, "import org.dragonet.proxy.util.BedrockLoginUtils;"], [47, "import java.io.IOException;"], [48, "import java.security.interfaces.ECPublicKey;"], [55, " * Most of the LoginPacket code is from the NukkitX project."], [78, "        JsonNode certData;"], [80, "            certData = DragonProxy.JSON_MAPPER.readTree(packet.getChainData().toByteArray());"], [81, "        } catch (IOException ex) {"], [82, "            throw new RuntimeException(\"Certificate JSON could not be read\");"], [83, "        }"], [84, ""], [85, "        JsonNode certChainData = certData.get(\"chain\");"], [86, "        if (certChainData.getNodeType() != JsonNodeType.ARRAY) {"], [87, "            throw new RuntimeException(\"Certificate data is not valid\");"], [88, "        }"], [90, "        boolean validChain;"], [91, "        try {"], [92, "            validChain = BedrockLoginUtils.validateChainData(certChainData);"], [93, ""], [94, "            JWSObject jwt = JWSObject.parse(certChainData.get(certChainData.size() - 1).asText());"], [95, "            JsonNode payload = DragonProxy.JSON_MAPPER.readTree(jwt.getPayload().toBytes());"], [97, "            if (payload.get(\"extraData\").getNodeType() != JsonNodeType.OBJECT) {"], [98, "                throw new RuntimeException(\"AuthData was not found!\");"], [99, "            }"], [101, "            JSONObject extraData = (JSONObject) jwt.getPayload().toJSONObject().get(\"extraData\");"], [102, ""], [103, "            session.setAuthData(DragonProxy.JSON_MAPPER.convertValue(extraData, AuthData.class));"], [104, ""], [105, "            if (payload.get(\"identityPublicKey\").getNodeType() != JsonNodeType.STRING) {"], [106, "                throw new RuntimeException(\"Identity Public Key was not found!\");"], [107, "            }"], [108, ""], [109, "            if(!validChain) {"], [110, "                if(proxy.getConfiguration().isXboxAuth()) {"], [111, "                    session.disconnect(\"You must be authenticated with xbox live\");"], [112, "                    return true;"], [113, "                }"], [114, ""], [115, "                session.getAuthData().setXuid(null); // TODO: ideally the class should be immutable"], [116, "            }"], [117, ""], [118, "            ECPublicKey identityPublicKey = EncryptionUtils.generateKey(payload.get(\"identityPublicKey\").textValue());"], [119, "            JWSObject clientJwt = JWSObject.parse(packet.getSkinData().toString());"], [120, "            EncryptionUtils.verifyJwt(clientJwt, identityPublicKey);"], [121, ""], [122, "            JsonNode clientPayload = DragonProxy.JSON_MAPPER.readTree(clientJwt.getPayload().toBytes());"], [123, "            session.setClientData(DragonProxy.JSON_MAPPER.convertValue(clientPayload, ClientData.class));"], [126, ""], [127, "            if (EncryptionUtils.canUseEncryption()) {"], [128, "                //BedrockLoginUtils.startEncryptionHandshake(session, identityPublicKey);"], [129, "            }"], [130, "        } catch (Exception ex) {"], [131, "            session.disconnect(\"disconnectionScreen.internalError.cantConnect\");"], [132, "            throw new RuntimeException(\"Unable to complete login\", ex);"], [135, "        // Tell the Bedrock client login was successful"], [181, "            return true;"], [183, "        //PacketTranslatorRegistry.BEDROCK_TO_JAVA.translate(session, packet);"]], "deleted": [[71, "            // Get chain data that contains identity info"], [72, "            JSONObject chainData = (JSONObject) JSONValue.parse(packet.getChainData().array());"], [73, "            JSONArray chainArray = (JSONArray) chainData.get(\"chain\");"], [75, "            Object identityObject = chainArray.get(chainArray.size() - 1);"], [77, "            JWSObject identity = JWSObject.parse((String) identityObject);"], [78, "            JSONObject extraData = (JSONObject) identity.getPayload().toJSONObject().get(\"extraData\");"], [80, "            session.setAuthData(new AuthData("], [81, "                extraData.getAsString(\"displayName\"),"], [82, "                extraData.getAsString(\"identity\"),"], [83, "                extraData.getAsString(\"XUID\")"], [84, "            ));"], [87, "        } catch (ParseException | ClassCastException | NullPointerException e) {"], [88, "            // Invalid chain data"], [89, "            session.getBedrockSession().disconnect();"], [90, "            return true;"], [93, "        // Tell the Bedrock client login was successful."]]}, "num_lines_added": 60, "num_lines_removed": 16}