{"hash": "c817f152b1cacaa16650692252578b3669196061", "message": "Implement listener database operations\n\nAdds a general \"untracked\" player to avoid nulls in the database, we\nattibute all untracked emissions/reductions to this player.\n\nImproves the logic in the listeners substantially. Fixes a few bugs\nwhere some collections werent being updated.", "file_num_lines": 98, "diff_parsed": {"added": [[4, "import net.porillo.database.queries.insert.ContributionInsertQuery;"], [5, "import net.porillo.database.queries.insert.FurnaceInsertQuery;"], [6, "import net.porillo.database.queries.insert.ReductionInsertQuery;"], [7, "import net.porillo.database.queries.insert.TreeInsertQuery;"], [8, "import net.porillo.database.queries.update.PlayerUpdateQuery;"], [9, "import net.porillo.database.queries.update.TreeUpdateQuery;"], [10, "import net.porillo.database.queue.AsyncDBQueue;"], [12, "import net.porillo.database.tables.PlayerTable;"], [20, "import org.bukkit.event.inventory.InventoryMoveItemEvent;"], [22, "import org.bukkit.inventory.FurnaceInventory;"], [29, ""], [30, "\tprivate static final UUID untrackedUUID = UUID.fromString(\"1-1-1-1-1\");"], [45, "\t\tGPlayer polluter;"], [48, "\t\t\tFurnace furnace = furnaceTable.getFurnaceMap().get(furnaceTable.getLocationMap().get(location));"], [49, "\t\t\tpolluter = furnace.getOwner(); // whoever placed the furnace is charged."], [51, "\t\t\t/*"], [52, "\t\t\t * This might happen if a player has a redstone hopper setup that feeds untracked furnaces"], [53, "\t\t\t * In this case, just consider it to be untracked emissions."], [54, "\t\t\t */"], [55, "\t\t\tPlayerTable playerTable = GlobalWarming.getInstance().getTableManager().getPlayerTable();"], [56, "\t\t\tpolluter = playerTable.getOrCreatePlayer(untrackedUUID, true);"], [57, ""], [58, "\t\t\t// First create a new furnace object and store it"], [59, "\t\t\tLong uniqueId = GlobalWarming.getInstance().getRandom().nextLong();"], [60, "\t\t\tFurnace furnace = new Furnace(uniqueId, polluter, location, true);"], [61, ""], [62, "\t\t\t// Update all furnace collections"], [63, "\t\t\tfurnaceTable.updateFurnace(furnace);"], [64, ""], [65, "\t\t\t// Create a new furnace insert query and queue it"], [66, "\t\t\tFurnaceInsertQuery insertQuery = new FurnaceInsertQuery(furnace);"], [67, "\t\t\tAsyncDBQueue.getInstance().queueInsertQuery(insertQuery);"], [68, ""], [69, "\t\t\tgw.getLogger().warning(event.getFuel().getType().name() + \" burned as fuel in an untracked furnace!\");"], [70, "\t\t\tgw.getLogger().warning(\"@ \" + location.toString());"], [72, ""], [73, "\t\t// Create a contribution object using this worlds climate engine"], [74, "\t\tContribution contrib = ClimateEngine.getInstance().getClimateEngine(world.getWorldName()).furnaceBurn(polluter, event.getFuel());"], [75, "\t\tint carbonScore = polluter.getCarbonScore();"], [76, "\t\tpolluter.setCarbonScore((int) (carbonScore + contrib.getContributionValue()));"], [77, ""], [78, "\t\t// Queue an update to the player table"], [79, "\t\tPlayerUpdateQuery updateQuery = new PlayerUpdateQuery(polluter);"], [80, "\t\tAsyncDBQueue.getInstance().queueUpdateQuery(updateQuery);"], [81, ""], [82, "\t\t// Queue an insert into the contributions table"], [83, "\t\tContributionInsertQuery insertQuery = new ContributionInsertQuery(contrib);"], [84, "\t\tAsyncDBQueue.getInstance().queueInsertQuery(insertQuery);"], [96, "\t\tGPlayer planter;"], [97, ""], [98, "\t\t// TODO: Add TreeType species to reduction model"], [101, "\t\t\tTree tree = treeTable.getTreeMap().get(treeTable.getLocationMap().get(location));"], [102, "\t\t\tplanter = tree.getOwner();"], [103, ""], [106, "\t\t\tplanter.setCarbonScore((int) (carbonScore - reduction.getReductionValue()));"], [109, "\t\t\ttree.setSize(event.getBlocks().size()); // TODO: Only consider core species blocks as tree size"], [111, "\t\t\t// Queue tree update query"], [112, "\t\t\tTreeUpdateQuery treeUpdateQuery = new TreeUpdateQuery(tree);"], [113, "\t\t\tAsyncDBQueue.getInstance().queueUpdateQuery(treeUpdateQuery);"], [115, "\t\t\tPlayerTable playerTable = GlobalWarming.getInstance().getTableManager().getPlayerTable();"], [116, "\t\t\tplanter = playerTable.getOrCreatePlayer(untrackedUUID, true);"], [117, ""], [118, "\t\t\t// First create a new tree object and store it"], [119, "\t\t\tLong uniqueId = GlobalWarming.getInstance().getRandom().nextLong();"], [120, "\t\t\t// TODO: Only consider core species blocks as tree size"], [121, "\t\t\tTree tree = new Tree(uniqueId, planter, location, false, event.getBlocks().size());"], [122, ""], [123, "\t\t\tTreeInsertQuery insertQuery = new TreeInsertQuery(tree);"], [124, "\t\t\tAsyncDBQueue.getInstance().queueInsertQuery(insertQuery);"], [125, ""], [126, "\t\t\tgw.getLogger().warning(\"Untracked structure grow occured:\");"], [127, "\t\t\tgw.getLogger().warning(\"@ \" + location.toString());"], [128, "\t\t}"], [129, ""], [130, "\t\t// Create a new reduction object using the worlds climate engine"], [131, "\t\tReduction reduction = ClimateEngine.getInstance().getClimateEngine(world.getWorldName()).treeGrow(planter, event.getSpecies(), event.getBlocks());"], [132, "\t\tint carbonScore = planter.getCarbonScore();"], [133, "\t\tplanter.setCarbonScore((int) (carbonScore - reduction.getReductionValue()));"], [134, ""], [135, "\t\t// Queue player update query"], [136, "\t\tPlayerUpdateQuery playerUpdateQuery = new PlayerUpdateQuery(planter);"], [137, "\t\tAsyncDBQueue.getInstance().queueUpdateQuery(playerUpdateQuery);"], [138, ""], [139, "\t\t// Queue reduction insert query"], [140, "\t\tReductionInsertQuery insertQuery = new ReductionInsertQuery(reduction);"], [141, "\t\tAsyncDBQueue.getInstance().queueInsertQuery(insertQuery);"], [142, "\t}"], [143, ""], [144, "\t// TODO: Track furnace smelts which occur in untracked furnaces"], [145, "\t// For now, we will simply use this to attribute contributions to players"], [146, "\t// In the future, we might want to use this to associate untracked furnaces"], [147, "\t// with players. If GW is installed on an existing map, then players might"], [148, "\t// never move their furnaces. So we can maybe define a number of smelts"], [149, "\t// until we consider the"], [150, "\t// @EventHandler"], [151, "\tpublic void onInventoryMoveItemEvent(InventoryMoveItemEvent event) {"], [152, "\t\tif (event.getItem().getType().isFuel()) {"], [153, "\t\t\tif (event.getDestination() instanceof FurnaceInventory) {"], [154, "\t\t\t\tFurnaceInventory furnaceInventory = (FurnaceInventory) event.getDestination();"], [155, "\t\t\t}"]], "deleted": [[8, ""], [36, "\t\t\tLong uuid = furnaceTable.getLocationMap().get(location);"], [37, "\t\t\tFurnace furnace = furnaceTable.getFurnaceMap().get(uuid);"], [38, "\t\t\t// Note: We hold the owner of the furnace responsible for emissions"], [39, "\t\t\t// If the furnace isn't protected, the furnace owner is still charged"], [40, "\t\t\tGPlayer polluter = gw.getTableManager().getPlayerTable().getPlayers().get(furnace.getOwner().getUuid());"], [41, "\t\t\tContribution emissions = ClimateEngine.getInstance().getClimateEngine(world.getWorldName()).furnaceBurn(polluter, event.getFuel());"], [42, "\t\t\tint carbonScore = polluter.getCarbonScore();"], [43, "\t\t\tpolluter.setCarbonScore((int) (carbonScore + emissions.getContributionValue()));"], [44, ""], [45, "\t\t\t// TODO: Queue polluter score DB update"], [46, "\t\t\t// TODO: Queue new contribution DB insert"], [48, "\t\t\tgw.getLogger().severe(event.getFuel().getType().name() + \" burned as fuel in an untracked furnace!\");"], [49, "\t\t\tgw.getLogger().severe(\"@ \" + location.toString());"], [64, "\t\t\tLong uuid = treeTable.getLocationMap().get(location);"], [65, "\t\t\tTree tree = treeTable.getTreeMap().get(uuid);"], [66, "\t\t\tUUID ownerUUID = tree.getOwner().getUuid();"], [67, "\t\t\tGPlayer planter = gw.getTableManager().getPlayerTable().getPlayers().get(ownerUUID);"], [70, "\t\t\tplanter.setCarbonScore((int) (carbonScore - reduction.getReductionValue()));"], [74, "\t\t\t// TODO: Queue tree DB update"], [75, "\t\t\t// TODO: Queue planter score DB update"], [76, "\t\t\t// TODO: Queue new reduction DB insert"], [78, "\t\t\tgw.getLogger().severe(\"Untracked structure grow occured:\");"], [79, "\t\t\tgw.getLogger().severe(\"@ \" + location.toString());"]]}, "num_lines_added": 100, "num_lines_removed": 24}