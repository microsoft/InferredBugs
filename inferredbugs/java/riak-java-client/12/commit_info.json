{"hash": "a0039b65cfecef4fc1ff936799aab165641944f4", "message": "Add a connection pool for the pbc.RiakClient\n\nThe Timer and TimerTask connection management led to a huge object\ncreation explosion under high load, a pool is easier to manage.", "file_num_lines": 105, "diff_parsed": {"added": [[31, "import com.sun.org.apache.xalan.internal.xsltc.compiler.sym;"], [45, "\t private final RiakConnectionPool pool;"], [46, "\t private volatile byte[] clientId;"], [48, "    private long idleStart;"], [49, ""], [50, "\tpublic RiakConnection(InetAddress addr, int port, int bufferSizeKb, final RiakConnectionPool pool) throws IOException {"], [51, "\t    this.pool = pool;"], [128, "\tboolean checkValid() {"], [129, "\t    return isClosed();"], [139, ""], [140, "\tpublic synchronized void beginIdle() {"], [141, "\t    this.idleStart = System.currentTimeMillis();"], [142, "\t}"], [144, "\tpublic synchronized long getIdleStartTimeMillis() {"], [145, "       return this.idleStart;"], [146, "    }"], [148, "    /**"], [149, "     *"], [150, "     */"], [151, "    public void release() {"], [152, "        pool.releaseConnection(this);"], [153, "    }"], [154, ""], [155, "    /**"], [156, "     * @return the clientId"], [157, "     */"], [158, "    public synchronized byte[] getClientId() {"], [159, "        return clientId == null? null : clientId.clone();"], [160, "    }"], [161, ""], [162, "    /**"], [163, "     * @param clientId the clientId to set"], [164, "     */"], [165, "    public synchronized void setClientId(byte[] clientId) {"], [166, "        this.clientId = clientId == null? null : clientId.clone();"], [167, "    }"]], "deleted": [[28, "import java.util.Timer;"], [29, "import java.util.TimerTask;"], [47, "\tpublic RiakConnection(InetAddress addr, int port, int bufferSizeKb) throws IOException {"], [108, "\tstatic Timer TIMER = new Timer(\"riak-client-timeout-thread\", true);"], [109, "\tTimerTask idle_timeout;"], [110, ""], [111, "\tpublic void beginIdle() {"], [112, "\t\tidle_timeout = new TimerTask() {"], [113, ""], [114, "\t\t\t@Override"], [115, "\t\t\tpublic void run() {"], [116, "\t\t\t\tRiakConnection.this.timer_fired(this);"], [117, "\t\t\t}"], [118, "\t\t};"], [119, ""], [120, "\t\tTIMER.schedule(idle_timeout, 1000);"], [121, "\t}"], [122, ""], [123, "\tsynchronized void timer_fired(TimerTask fired_timer) {"], [124, "\t\tif (idle_timeout != fired_timer) {"], [125, "\t\t\t// if it is not our current timer, then ignore"], [126, "\t\t\treturn;"], [127, "\t\t}"], [128, ""], [129, "\t\tclose();"], [130, "\t}"], [147, "\tsynchronized boolean endIdleAndCheckValid() {"], [148, "\t\tTimerTask tt = idle_timeout;"], [149, "\t\tif (tt != null) { tt.cancel(); }"], [150, "\t\tidle_timeout = null;"], [151, ""], [152, "\t\tif (isClosed()) {"], [153, "\t\t\treturn false;"], [154, "\t\t} else {"], [155, "\t\t\treturn true;"], [156, "\t\t}"]]}, "num_lines_added": 36, "num_lines_removed": 36}