{"hash": "51bff206320ac5c597fe6cecb3e89f55ccd63f35", "message": "Adding integration tests for streamable full bucket read.", "file_num_lines": 337, "diff_parsed": {"added": [[148, "        final Map<String, RiakObject> results = performFBReadWithCoverageContext(false, false, false);"], [151, "        verifyResults(results, false);"], [152, "    }"], [154, "    @Test"], [155, "    public void readPlainTextValuesStreamedWithCoverageContext()"], [156, "            throws ExecutionException, InterruptedException, UnknownHostException"], [157, "    {"], [158, "        final Map<String, RiakObject> results = performFBReadWithCoverageContext(false, false, true);"], [159, "        assertEquals(NUMBER_OF_TEST_VALUES, results.size());"], [160, ""], [161, "        verifyResults(results, false);"], [168, "        final Map<String, RiakObject> results = performFBReadWithCoverageContext(true, true, false);"], [171, "        verifyResults(results, true);"], [172, "    }"], [175, "    @Test"], [176, "    public void readPlainTextValuesStreamedWithCoverageContextContinuouslyWithReturnBody()"], [177, "            throws ExecutionException, InterruptedException, UnknownHostException"], [178, "    {"], [179, "        final Map<String, RiakObject> results = performFBReadWithCoverageContext(true, true, true);"], [180, "        assertEquals(NUMBER_OF_TEST_VALUES, results.size());"], [181, ""], [182, "        verifyResults(results, true);"], [222, "    private static void verifyResults(final Map<String, RiakObject> results, boolean withReturnBody )"], [223, "    {"], [224, "        for (int i=0; i<NUMBER_OF_TEST_VALUES; ++i)"], [225, "        {"], [226, "            final String key = \"k\"+i;"], [227, "            assertTrue(results.containsKey(key));"], [228, ""], [229, "            if (!withReturnBody)"], [230, "            {"], [231, "                // since returnBody=false, riakObject mustn't be returned"], [232, "                assertNull(results.get(key));"], [233, "                continue;"], [234, "            }"], [235, ""], [236, "            final RiakObject ro = results.get(key);"], [237, "            assertNotNull(ro);"], [238, ""], [239, "            assertEquals(\"plain/text\", ro.getContentType());"], [240, "            assertFalse(ro.isDeleted());"], [241, "            assertEquals(\"v\"+i, ro.getValue().toStringUtf8());"], [242, "        }"], [243, "    }"], [244, ""], [245, "    private Map<String, RiakObject> performFBReadWithCoverageContext(boolean withContinuation, boolean withReturnBody,"], [246, "                                                                     boolean useStreaming)"], [270, "                            retrieveChunkedKeysForCoverageEntry(rc, ce, withContinuation, withReturnBody, useStreaming);"], [302, "            keys = retrieveChunkedKeysForCoverageEntry(rc, ce, true, true, false);"], [316, "                                                                                boolean withReturnBody,"], [317, "                                                                                boolean useStreaming)"], [320, "        final int pollTimeout = 100;  // <-- in ms in case when useStreaming == true"], [328, "            final FullBucketRead.Response readResponse;"], [329, "            if (!useStreaming)"], [330, "            {"], [331, "                readResponse = rc.execute(cmd2);"], [332, "            }"], [333, "            else"], [334, "            {"], [335, "                readResponse = rc.executeAsyncStreaming(cmd2, pollTimeout).get();"], [336, "            }"], [337, ""], [338, "            assertEquals(useStreaming, readResponse.isStreamable());"], [339, "            final List<Entry> list = new LinkedList<>();"], [340, "            readResponse.forEach( e -> list.add(e));"], [341, ""], [342, "            chunkedKeys.put(ce, list);"], [358, "                final FullBucketRead.Response r;"], [360, "                if (!useStreaming)"], [362, "                    r = rc.execute(cmd2);"], [366, "                    r = rc.executeAsyncStreaming(cmd2, pollTimeout).get();"], [367, "                }"], [368, ""], [369, "                assertEquals(useStreaming, r.isStreamable());"], [370, ""], [371, "                final List<Entry> entries = new LinkedList<>();"], [372, ""], [373, "                if (r.hasEntries())"], [374, "                {"], [375, "                    r.forEach(e-> entries.add(e));"], [376, "                    data.addAll(entries);"]], "deleted": [[148, "        final Map<String, RiakObject> results = performFBReadWithCoverageContext(false, false);"], [151, "        for (int i=0; i<NUMBER_OF_TEST_VALUES; ++i)"], [152, "        {"], [153, "            final String key = \"k\"+i;"], [154, "            assertTrue(results.containsKey(key));"], [156, "            // since returnBody=false, riakObject mustn't be returned"], [157, "            assertNull(results.get(key));"], [158, "        }"], [165, "        final Map<String, RiakObject> results = performFBReadWithCoverageContext(true, true);"], [168, "        for (int i=0; i<NUMBER_OF_TEST_VALUES; ++i)"], [169, "        {"], [170, "            final String key = \"k\"+i;"], [171, "            assertTrue(results.containsKey(key));"], [173, "            final RiakObject ro = results.get(key);"], [174, "            assertNotNull(ro);"], [176, "            assertEquals(\"plain/text\", ro.getContentType());"], [177, "            assertFalse(ro.isDeleted());"], [178, "            assertEquals(\"v\"+i, ro.getValue().toStringUtf8());"], [179, "        }"], [219, "    private Map<String, RiakObject> performFBReadWithCoverageContext(boolean withContinuation,boolean withReturnBody)"], [243, "                            retrieveChunkedKeysForCoverageEntry(rc, ce, withContinuation, withReturnBody);"], [275, "            keys = retrieveChunkedKeysForCoverageEntry(rc, ce, true, true);"], [289, "                                                                                boolean withReturnBody)"], [299, "            final FullBucketRead.Response readResponse = rc.execute(cmd2);"], [300, "            chunkedKeys.put(ce, readResponse.getEntries());"], [316, "                final FullBucketRead.Response r = rc.execute(cmd2);"], [317, "                final List<Entry> entries;"], [319, "                if (r.hasEntries())"], [321, "                    entries = r.getEntries();"], [322, "                    data.addAll(entries);"], [326, "                    entries = Collections.EMPTY_LIST;"]]}, "num_lines_added": 81, "num_lines_removed": 31}