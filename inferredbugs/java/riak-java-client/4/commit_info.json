{"hash": "b4cd6d2ab8599daaf27457766957e38e622378f0", "message": "Fix infinite loop in OneTokenInputStream\nAdd tests for OneTokenInputStream and StreamedMultipart\nStreamedMultipart now correctly reads to end of line for boundary lines (as per RFC2046, section 5.1.1, note to implementors)\nFix bug where part body was consumed if it was skipped over by iterator", "file_num_lines": 101, "diff_parsed": {"added": [[17, "    BranchableInputStream currentPartStream = null;"], [33, "     * @throws IOException"], [34, "     *             There was a communication error reading the input stream while"], [35, "     *             looking for the initial boundary"], [36, "     * @throws EOFException"], [37, "     *             The initial boundary was not found"], [52, "            sb.append((char) c);"], [54, "                (sb.indexOf(boundary, sb.length() - boundary.length()) >= 0)) {"], [55, "                finishReadingLine(stream);"], [57, "            }"], [65, "    private void finishReadingLine(InputStream in) throws IOException {"], [66, "        while (true) {"], [67, "            int c = in.read();"], [68, "            if (c == -1 || c == '\\n')"], [69, "                break;"], [70, "        }"], [71, "    }"], [72, ""], [73, "    /**"], [119, "        return new Part(headers, currentPartStream.branch());"], [132, "        if (currentPartStream != null) {"], [133, "            InputStream is = currentPartStream.branch();"], [135, "                while (is.read() != -1) { /* nop */}    // advance stream to end of next boundary"], [136, "                finishReadingLine(stream);              // and consume the rest of the boundary line including the newline"], [142, "            currentPartStream = new BranchableInputStream(new OneTokenInputStream(stream.branch(), boundary));"]], "deleted": [[17, "    OneTokenInputStream currentPartStream = null;"], [33, "     * @throws IOException"], [48, "            sb.append(c);"], [50, "                    (sb.indexOf(boundary, sb.length() - boundary.length()) >= 0))"], [59, "    /**"], [105, "        return new Part(headers, currentPartStream);"], [118, "        if (currentPartStream != null && !currentPartStream.done()) {"], [119, "            InputStream is = new OneTokenInputStream(stream, boundary);"], [121, "                while (is.read() != -1) { /* nop */}"], [127, "            currentPartStream = new OneTokenInputStream(stream.branch(), boundary);"]]}, "num_lines_added": 25, "num_lines_removed": 10}