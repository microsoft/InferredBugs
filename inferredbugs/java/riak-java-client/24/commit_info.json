{"hash": "1c5883c92420561e38e3ef2a2b216e181db48f2c", "message": "Fix test that stubs a final method", "file_num_lines": 59, "diff_parsed": {"added": [[6, "import org.junit.runner.RunWith;"], [7, "import org.powermock.core.classloader.annotations.PrepareForTest;"], [8, "import org.powermock.modules.junit4.PowerMockRunner;"], [13, "import static org.junit.Assert.*;"], [14, "import static org.powermock.api.mockito.PowerMockito.doThrow;"], [21, "@RunWith(PowerMockRunner.class)"], [22, "@PrepareForTest(PBStreamingFutureOperation.class)"], [34, "        final Throwable[] ex = {null};"], [37, "        Thread testThread = new Thread(() ->"], [41, "                @SuppressWarnings(\"unchecked\")"], [42, "                TransferQueue<FakeResponse> fakeQueue ="], [45, "                when(fakeQueue.poll(timeout, TimeUnit.MILLISECONDS)).thenThrow(new InterruptedException(\"foo\"));"], [46, ""], [47, "                @SuppressWarnings(\"unchecked\")"], [48, "                PBStreamingFutureOperation<FakeResponse, Void, Void> coreFuture ="], [49, "                        (PBStreamingFutureOperation<FakeResponse, Void, Void>) mock(PBStreamingFutureOperation.class);"], [60, "            catch (RuntimeException rex)"], [62, "                ex[0] = rex;"], [68, "                fail(e.getMessage());"], [74, "        testThread.start();"], [75, "        testThread.join();"], [76, ""], [77, "        Throwable caughtException = ex[0];"], [78, "        assertNotNull(caughtException);"], [80, "        Throwable wrappedException = caughtException.getCause();"], [81, "        assertNotNull(caughtException.getMessage(), wrappedException);"], [82, "        assertEquals(\"foo\", wrappedException.getMessage());"], [83, "        assertTrue(wrappedException instanceof InterruptedException);"]], "deleted": [[10, "import static org.junit.Assert.assertEquals;"], [11, "import static org.junit.Assert.assertTrue;"], [29, "        final boolean[] caught = {false};"], [30, "        final InterruptedException[] ie = {null};"], [33, "        Thread t = new Thread(() ->"], [37, "                @SuppressWarnings(\"unchecked\") TransferQueue<FakeResponse> fakeQueue ="], [39, "                when(fakeQueue.poll(timeout,"], [40, "                                    TimeUnit.MILLISECONDS)).thenThrow(new InterruptedException("], [41, "                        \"foo\"));"], [43, "                @SuppressWarnings(\"unchecked\") PBStreamingFutureOperation<FakeResponse, Void, Void>"], [44, "                        coreFuture = (PBStreamingFutureOperation<FakeResponse, Void, Void>) mock("], [45, "                        PBStreamingFutureOperation.class);"], [56, "            catch (RuntimeException ex)"], [58, "                caught[0] = true;"], [59, "                ie[0] = (InterruptedException) ex.getCause();"], [65, "                caught[0] = false;"], [71, "        t.start();"], [72, "        t.join();"], [74, "        assertTrue(caught[0]);"], [75, "        assertEquals(\"foo\", ie[0].getMessage());"]]}, "num_lines_added": 28, "num_lines_removed": 20}