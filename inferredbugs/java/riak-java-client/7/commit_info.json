{"hash": "a0039b65cfecef4fc1ff936799aab165641944f4", "message": "Add a connection pool for the pbc.RiakClient\n\nThe Timer and TimerTask connection management led to a huge object\ncreation explosion under high load, a pool is easier to manage.", "file_num_lines": 396, "diff_parsed": {"added": [[74, "\tprivate volatile byte[] clientId;"], [75, "\tprivate final RiakConnectionPool pool;"], [85, "\tpublic RiakClient(RiakConnectionPool pool) {"], [86, "\t    this.pool = pool;"], [87, "\t}"], [88, ""], [90, "\t\tthis.pool = new RiakConnectionPool(0, -1, addr, port, 1000, BUFFER_SIZE_KB, 1000);"], [91, "\t\tthis.pool.start();"], [95, "\t    this.pool = new RiakConnectionPool(0, -1, InetAddress.getByName(host), port, 1000, bufferSizeKb, 1000);"], [96, "\t    this.pool.start();"], [100, "        RiakConnection c = pool.getConnection(clientId);"], [105, "\t\tpool.releaseConnection(c);"], [175, "\t\tthis.clientId = id.toByteArray();"], [186, "\t\t\tclientId = res.getClientId().toByteArray();"], [187, "\t\t\treturn CharsetUtils.asUTF8String(clientId);"]], "deleted": [[48, "import com.basho.riak.pbc.RPB.RpbSetClientIdReq;"], [51, "//import com.trifork.riak.RPB.RpbListKeysResp;"], [52, "//import com.trifork.riak.RPB.RpbMapRedResp;"], [72, "\tprivate InetAddress addr;"], [73, "\tprivate int port;"], [74, "\tprivate int bufferSizeKb;"], [80, "\tprivate volatile ByteString clientID;"], [91, "\t\tthis.addr = addr;"], [92, "\t\tthis.port = port;"], [93, "\t\tthis.bufferSizeKb = BUFFER_SIZE_KB;"], [97, "\t    this.addr = InetAddress.getByName(host);"], [98, "\t    this.port = port;"], [99, "\t    this.bufferSizeKb = bufferSizeKb;"], [102, "\tprivate ThreadLocal<RiakConnection> connections = new ThreadLocal<RiakConnection>();"], [103, ""], [105, "\t\treturn getConnection(true);"], [106, "\t}"], [107, ""], [108, "\tRiakConnection getConnection(boolean setClientId) throws IOException {"], [109, "        RiakConnection c = connections.get();"], [110, "        if (c == null || !c.endIdleAndCheckValid()) {"], [111, "            c = new RiakConnection(addr, port, bufferSizeKb);"], [112, ""], [113, "            if (this.clientID != null && setClientId) {"], [114, "                connections.set(c);"], [115, "                setClientID(clientID);"], [116, "            }"], [117, "        }"], [118, "        connections.set(null);"], [123, "\t\tRiakConnection cc = connections.get();"], [124, "\t\tif (cc == null) {"], [125, "\t\t\tc.beginIdle();"], [126, "\t\t\tconnections.set(c);"], [127, "\t\t} else {"], [128, "\t\t\tc.close();"], [129, "\t\t}"], [198, "\t\tRpbSetClientIdReq req = RPB.RpbSetClientIdReq.newBuilder().setClientId("], [199, "\t\t\t\tid).build();"], [200, "\t\tRiakConnection c = getConnection(false);"], [201, "\t\ttry {"], [202, "\t\t\tc.send(MSG_SetClientIdReq, req);"], [203, "\t\t\tc.receive_code(MSG_SetClientIdResp);"], [204, "\t\t} finally {"], [205, "\t\t\trelease(c);"], [206, "\t\t}"], [208, "\t\tthis.clientID = id;"], [219, "\t\t\tclientID = res.getClientId();"], [220, "\t\t\treturn clientID.toStringUtf8();"]]}, "num_lines_added": 15, "num_lines_removed": 48}