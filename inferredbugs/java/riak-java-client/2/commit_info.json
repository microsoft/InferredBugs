{"hash": "0c6f05f2201755bc006d8b03072ade138df229fb", "message": "Remove extraneous null checks in clients -- helper never returns null HttpResponse from methods now\nComplete move Raw serialization to HttpMethod to RawObject\nRaw Bucket/Fetch/Walk response creation to separate methods to facility testing\nTests for RawClient\nFix bug in extracting base path for RawObject links\nHelper doesn't return null on (handled) exceptions\nFix NPE bug in RawStoreResponse with null response", "file_num_lines": 136, "diff_parsed": {"added": [[73, "            return getBucketResponse(r);"], [97, "            return getFetchResponse(helper.fetchMeta(bucket, key, meta));"], [109, "        return fetch(bucket, key, meta, false);"], [113, "        return fetch(bucket, key, null, false);"], [143, "        return fetch(bucket, key, meta, true);"], [147, "        return fetch(bucket, key, null, true);"], [150, "    RawFetchResponse fetch(String bucket, String key, RequestMeta meta, boolean streamResponse) {"], [155, "        String accept = meta.getHeader(Constants.HDR_ACCEPT);"], [165, "            return getFetchResponse(r);"], [188, "            return getWalkResponse(r);"], [215, ""], [216, "    // Encapsulate response creation so it can be stubbed for testing"], [217, "    RawBucketResponse getBucketResponse(HttpResponse r) throws JSONException {"], [218, "        return new RawBucketResponse(r);"], [219, "    }"], [220, "    RawFetchResponse getFetchResponse(HttpResponse r) throws RiakResponseException {"], [221, "        return new RawFetchResponse(r);"], [222, "    }"], [223, "    RawWalkResponse getWalkResponse(HttpResponse r) throws RiakResponseException {"], [224, "        return new RawWalkResponse(r);"], [225, "    }"]], "deleted": [[17, "import java.util.Collection;"], [18, "import java.util.Map;"], [26, "import com.basho.riak.client.RiakLink;"], [35, "import com.basho.riak.client.util.ClientUtils;"], [45, "    private String riakBasePath;"], [49, "        riakBasePath = ClientUtils.getPathFromUrl(config.getUrl());"], [54, "        riakBasePath = ClientUtils.getPathFromUrl(url);"], [79, "        if (r == null)"], [80, "            return null;"], [82, "            return new RawBucketResponse(r);"], [96, "        if (meta == null) {"], [97, "            meta = new RequestMeta();"], [98, "        }"], [99, "        Collection<RiakLink> links = object.getLinks();"], [100, "        Map<String, String> usermeta = object.getUsermeta();"], [101, "        StringBuilder linkHeader = new StringBuilder();"], [102, "        String vclock = object.getVclock();"], [103, ""], [104, "        if (links != null) {"], [105, "            for (RiakLink link : links) {"], [106, "                if (linkHeader.length() > 0) {"], [107, "                    linkHeader.append(\", \");"], [108, "                }"], [109, "                linkHeader.append(\"<\");"], [110, "                linkHeader.append(riakBasePath);"], [111, "                linkHeader.append(\"/\");"], [112, "                linkHeader.append(link.getBucket());"], [113, "                linkHeader.append(\"/\");"], [114, "                linkHeader.append(link.getKey());"], [115, "                linkHeader.append(\">; \");"], [116, "                linkHeader.append(Constants.RAW_LINK_TAG);"], [117, "                linkHeader.append(\"=\\\"\");"], [118, "                linkHeader.append(link.getTag());"], [119, "                linkHeader.append(\"\\\"\");"], [120, "            }"], [121, "        }"], [122, "        if (linkHeader.length() > 0) {"], [123, "            meta.setHeader(Constants.HDR_LINK, linkHeader.toString());"], [124, "        }"], [125, "        if (usermeta != null) {"], [126, "            for (String name : usermeta.keySet()) {"], [127, "                meta.setHeader(Constants.HDR_USERMETA_PREFIX + name, usermeta.get(name));"], [128, "            }"], [129, "        }"], [130, "        if (vclock != null) {"], [131, "            meta.setHeader(Constants.HDR_VCLOCK, vclock);"], [132, "        }"], [133, ""], [135, "        if (r == null)"], [136, "            return null;"], [137, ""], [147, "            return new RawFetchResponse(helper.fetchMeta(bucket, key, meta));"], [159, "        return doFetch(bucket, key, meta, false);"], [163, "        return fetch(bucket, key, null);"], [193, "        return doFetch(bucket, key, meta, true);"], [197, "        return doFetch(bucket, key, null, true);"], [200, "    RawFetchResponse doFetch(String bucket, String key, RequestMeta meta, boolean streamResponse) {"], [205, "        String accept = meta.getQueryParam(Constants.HDR_ACCEPT);"], [213, "        if (r == null)"], [214, "            return null;"], [217, "            return new RawFetchResponse(r);"], [238, "        if (r == null)"], [239, "            return null;"], [242, "            return new RawWalkResponse(r);"]]}, "num_lines_added": 21, "num_lines_removed": 64}