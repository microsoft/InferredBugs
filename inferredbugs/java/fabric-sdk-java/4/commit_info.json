{"hash": "18b2e13c36bf76ac05873d370f6e84b73864215e", "message": "FAB-4454 Increase test coverage for sdk.security\n\n. Increased test coverage for CryptoPrimitives\n. Added new methods to TestUtils\n. Minor changes to main code to facilitate unit tests\n. Fixed minor issue with Config ExtraLogLevel\n. Set ExtraLogLevel to 10 in cirun.sh to help ensure logger output is\ncovered\n\nChange-Id: I75e507b41339cbaffe4ba21206153883ccb9f75d\nSigned-off-by: Chris Murphy <chrism@fast.au.fujitsu.com>", "file_num_lines": 498, "diff_parsed": {"added": [[23, "import java.nio.file.Files;"], [24, "import java.nio.file.Path;"], [25, "import java.nio.file.Paths;"], [50, "import org.bouncycastle.util.encoders.Hex;"], [54, "import org.hyperledger.fabric.sdk.testutils.TestUtils;"], [59, "import org.junit.Rule;"], [61, "import org.junit.rules.ExpectedException;"], [62, "import org.junit.rules.TemporaryFolder;"], [75, "    @Rule"], [76, "    public ExpectedException thrown = ExpectedException.none();"], [77, ""], [78, "    // Create a temp folder to hold temp files for various file I/O operations"], [79, "    // These are automatically deleted when each test completes"], [80, "    @Rule"], [81, "    public final TemporaryFolder tempFolder = new TemporaryFolder();"], [82, ""], [83, ""], [149, "    // Tests initializing with an invalid certificate format"], [150, "    @Test"], [151, "    public void testInitInvalidCertFormat() throws Exception {"], [152, ""], [153, "        thrown.expect(CryptoException.class);"], [154, ""], [155, "        String oldVal = null;"], [156, ""], [157, "        try {"], [158, "            // Set the cert format to something invalid"], [159, "            oldVal = TestUtils.setConfigProperty(Config.CERTIFICATE_FORMAT, \"abc123\");"], [160, ""], [161, "            CryptoPrimitives crypto = new CryptoPrimitives();"], [162, "            crypto.init();"], [163, ""], [164, "        } finally {"], [165, ""], [166, "            // Reset the property for subsequent tests"], [167, "            TestUtils.setConfigProperty(Config.CERTIFICATE_FORMAT, oldVal);"], [168, "        }"], [169, "    }"], [170, ""], [171, ""], [268, "    @Test"], [269, "    public void testSetTrustStoreDuplicateCertUsingFile() {"], [270, "        try {"], [271, "            // Read the certificate data"], [272, "            java.net.URL certUrl = this.getClass().getResource(\"/ca.crt\");"], [273, "            String certData = org.apache.commons.io.IOUtils.toString(certUrl, \"UTF-8\");"], [274, ""], [275, "            // Write this to a temp file"], [276, "            File tempFile = tempFolder.newFile(\"temp.txt\");"], [277, "            Path tempPath = Paths.get(tempFile.getAbsolutePath());"], [278, "            Files.write(tempPath, certData.getBytes());"], [279, ""], [280, "            crypto.addCACertificateToTrustStore(tempFile, \"ca\"); //KeyStore overrides existing cert if same alias"], [281, "        } catch (Exception e) {"], [282, "            fail(\"testSetTrustStoreDuplicateCert should not have thrown Exception. Error: \" + e.getMessage());"], [283, "        }"], [284, "    }"], [285, ""], [287, "    public void testAddCACertificateToTrustStoreNullAlias() throws InvalidArgumentException {"], [296, "    public void testAddCACertificateToTrustStoreBlankAlias() throws InvalidArgumentException {"], [297, "        try {"], [298, "            crypto.addCACertificateToTrustStore(new File(\"something\"), \"\");"], [299, "        } catch (CryptoException e) {"], [300, "            fail(\"testAddCACertificateToTrustStoreNoAlias should not throw CryptoException. Error: \" + e.getMessage());"], [301, "        }"], [302, "    }"], [303, ""], [304, "    @Test (expected = InvalidArgumentException.class)"], [313, "    @Test"], [314, "    public void testAddCACertificateToTrustStoreBadStore() throws Exception {"], [315, ""], [316, "        thrown.expect(CryptoException.class);"], [317, "        thrown.expectMessage(\"Unable to add\");"], [318, ""], [319, "        // Create an uninitialized key store"], [320, "        KeyStore tmpKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());"], [321, ""], [322, "        // Ensure that crypto is using that store"], [323, "        KeyStore saveKeyStore = (KeyStore) TestUtils.setField(crypto, \"trustStore\", tmpKeyStore);"], [324, ""], [325, "        try {"], [326, "            crypto.addCACertificateToTrustStore(testCACert, \"alias\");"], [327, "        } finally {"], [328, "            // Ensure we set it back so that subsequent tests will not be affected"], [329, "            TestUtils.setField(crypto, \"trustStore\", saveKeyStore);"], [330, "        }"], [331, "   }"], [332, ""], [360, "    // Tests addCACertificateToTrustStore passing a certificate and null for alias"], [361, "    @Test"], [362, "    public void testAddCACertificateToTrustStoreCertNullAlias() throws Exception {"], [363, ""], [364, "        thrown.expect(InvalidArgumentException.class);"], [365, "        thrown.expectMessage(\"You must assign an alias\");"], [366, ""], [367, "        crypto.addCACertificateToTrustStore(testCACert, null);"], [368, "    }"], [369, ""], [370, "    // Tests addCACertificateToTrustStore passing a certificate and an empty string for alias"], [371, "    @Test"], [372, "    public void testAddCACertificateToTrustStoreCertEmptyAlias() throws Exception {"], [373, ""], [374, "        thrown.expect(InvalidArgumentException.class);"], [375, "        thrown.expectMessage(\"You must assign an alias\");"], [376, ""], [377, "        crypto.addCACertificateToTrustStore(testCACert, \"\");"], [378, "    }"], [379, ""], [381, "    public void testAddCACertificateToTrustStoreNullFile() throws Exception {"], [382, "        crypto.addCACertificateToTrustStore((File) null, \"test\");"], [594, "    // Try to generate a key without initializing crypto"], [595, "    @Test"], [596, "    public void testKeyGenBadCrypto() throws CryptoException {"], [597, ""], [598, "        thrown.expect(CryptoException.class);"], [599, "        thrown.expectMessage(\"Unable to generate\");"], [600, ""], [601, "        CryptoPrimitives tmpCrypto = new CryptoPrimitives();"], [602, "        tmpCrypto.keyGen();"], [603, "    }"], [604, ""], [627, ""], [628, "    @Test"], [629, "    public void testHashSHA2() throws Exception {"], [630, ""], [631, "        byte[] input = \"TheQuickBrownFox\".getBytes(UTF_8);"], [632, "        String expectedHash = \"cd0b1763383f460e94a2e6f0aefc3749bbeec60db11c12d678c682da679207ad\";"], [633, ""], [634, "        crypto.setHashAlgorithm(\"SHA2\");"], [635, "        byte[] hash = crypto.hash(input);"], [636, "        Assert.assertEquals(expectedHash, Hex.toHexString(hash));"], [637, "    }"], [638, ""], [639, "    @Test"], [640, "    public void testHashSHA3() throws Exception {"], [641, ""], [642, "        byte[] input = \"TheQuickBrownFox\".getBytes(UTF_8);"], [643, "        String expectedHash = \"feb69c5c360a15802de6af23a3f5622da9d96aff2be78c8f188cce57a3549db6\";"], [644, ""], [645, "        crypto.setHashAlgorithm(\"sha3\");"], [646, "        byte[] hash = crypto.hash(input);"], [647, "        Assert.assertEquals(expectedHash, Hex.toHexString(hash));"], [648, "    }"], [649, ""], [650, ""]], "deleted": [[229, "    public void testAddCACertificateToTrustStoreNoAlias() throws InvalidArgumentException {"], [274, "    public void testAddCACertsNullInput() throws Exception {"], [275, "        crypto.addCACertificateToTrustStore((File) null, null);"], [373, "        BufferedInputStream pem = new BufferedInputStream(new ByteArrayInputStream(invalidPemCert));"], [374, ""]]}, "num_lines_added": 145, "num_lines_removed": 5}