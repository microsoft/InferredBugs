{"hash": "8dda688dbd0f1fdfdfd0eb6878476c6a3d861586", "message": "Added: FastSMSEMOATest.java and FastSMSEMOATest.java", "file_num_lines": 66, "diff_parsed": {"added": [[23, "import org.junit.Before;"], [24, "import org.junit.Test;"], [28, "import org.uma.jmetal.metaheuristic.multiobjective.smsemoa.SMSEMOA;"], [42, " * User: Antonio J. Nebro"], [47, "  Properties configuration;"], [50, "  public void init() throws IOException {"], [51, "    configuration = new Properties();"], [53, "    configuration.load(isr);"], [60, "    SMSEMOA algorithm = (SMSEMOA) smsemoaSettings.configure() ;"], [62, ""], [63, "    SBXCrossover crossover = (SBXCrossover) algorithm.getCrossoverOperator() ;"], [64, "    double pc = crossover.getCrossoverProbability() ;"], [65, "    double dic = crossover.getDistributionIndex() ;"], [66, "    PolynomialMutation mutation = (PolynomialMutation)algorithm.getMutationOperator() ;"], [67, "    double pm = mutation.getMutationProbability() ;"], [68, "    double dim = mutation.getDistributionIndex() ;"], [69, "    double offset = algorithm.getOffset() ;"], [70, ""], [71, "    assertEquals(100, algorithm.getPopulationSize());"], [72, "    assertEquals(25000, algorithm.getMaxEvaluations());"], [73, ""], [74, "    assertEquals(0.9, pc, epsilon);"], [75, "    assertEquals(20.0, dic, epsilon);"], [76, ""], [77, "    assertEquals(1.0/problem.getNumberOfVariables(), pm, epsilon);"], [78, "    assertEquals(20.0, dim, epsilon);"], [79, ""], [80, "    assertEquals(100.0, offset, epsilon);"], [87, "    SMSEMOA algorithm = (SMSEMOA) smsemoaSettings.configure(configuration) ;"], [89, ""], [90, "    SBXCrossover crossover = (SBXCrossover) algorithm.getCrossoverOperator() ;"], [91, "    double pc = crossover.getCrossoverProbability() ;"], [92, "    double dic = crossover.getDistributionIndex() ;"], [93, "    PolynomialMutation mutation = (PolynomialMutation)algorithm.getMutationOperator() ;"], [94, "    double pm = mutation.getMutationProbability() ;"], [95, "    double dim = mutation.getDistributionIndex() ;"], [96, "    double offset = algorithm.getOffset() ;"], [97, ""], [98, "    assertEquals(100, algorithm.getPopulationSize());"], [99, "    assertEquals(25000, algorithm.getMaxEvaluations());"], [100, ""], [101, "    assertEquals(0.9, pc, epsilon);"], [102, "    assertEquals(20.0, dic, epsilon);"], [103, ""], [104, "    assertEquals(1.0/problem.getNumberOfVariables(), pm, epsilon);"], [105, "    assertEquals(20.0, dim, epsilon);"], [106, ""], [107, "    assertEquals(100.0, offset, epsilon);"]], "deleted": [[23, "import org.uma.jmetal.core.Algorithm;"], [31, "import org.junit.Before;"], [32, "import org.junit.Test;"], [33, ""], [35, "import java.io.FileNotFoundException;"], [44, " * User: antelverde"], [47, " * To change this template use File | Settings | File Templates."], [50, "  Properties configuration_ ;"], [53, "  public void init() throws FileNotFoundException, IOException {"], [54, "    configuration_ = new Properties();"], [56, "    configuration_.load(isr);"], [63, "    Algorithm algorithm = smsemoaSettings.configure() ;"], [65, "    SBXCrossover crossover = (SBXCrossover)algorithm.getOperator(\"crossover\") ;"], [66, "    double pc = (Double)crossover.getParameter(\"probability\") ;"], [67, "    double dic = (Double)crossover.getParameter(\"distributionIndex\") ;"], [68, "    PolynomialMutation mutation = (PolynomialMutation)algorithm.getOperator(\"mutation\") ;"], [69, "    double pm = (Double)mutation.getParameter(\"probability\") ;"], [70, "    double dim = (Double)mutation.getParameter(\"distributionIndex\") ;"], [71, ""], [72, "    assertEquals(\"SMSEMOA_SettingsTest\", 100, ((Integer)algorithm.getInputParameter(\"populationSize\")).intValue());"], [73, "    assertEquals(\"SMSEMOA_SettingsTest\", 25000, ((Integer)algorithm.getInputParameter(\"maxEvaluations\")).intValue());"], [74, ""], [75, "    assertEquals(\"SMSEMOA_SettingsTest\", 0.9, pc, epsilon);"], [76, "    assertEquals(\"SMSEMOA_SettingsTest\", 20.0, dic, epsilon);"], [77, ""], [78, "    assertEquals(\"SMSEMOA_SettingsTest\", 1.0/problem.getNumberOfVariables(), pm, epsilon);"], [79, "    assertEquals(\"SMSEMOA_SettingsTest\", 20.0, dim, epsilon);"], [80, "    assertEquals(\"SMSEMOA_SettingsTest\", 100.0, ((Double)algorithm.getInputParameter(\"offset\")).doubleValue(), epsilon);"], [87, "    Algorithm algorithm = smsemoaSettings.configure(configuration_) ;"], [89, "    SBXCrossover crossover = (SBXCrossover)algorithm.getOperator(\"crossover\") ;"], [90, "    double pc = (Double)crossover.getParameter(\"probability\") ;"], [91, "    double dic = (Double)crossover.getParameter(\"distributionIndex\") ;"], [92, "    PolynomialMutation mutation = (PolynomialMutation)algorithm.getOperator(\"mutation\") ;"], [93, "    double pm = (Double)mutation.getParameter(\"probability\") ;"], [94, "    double dim = (Double)mutation.getParameter(\"distributionIndex\") ;"], [95, ""], [96, "    assertEquals(\"SMSEMOA_SettingsTest\", 100, ((Integer)algorithm.getInputParameter(\"populationSize\")).intValue());"], [97, "    assertEquals(\"SMSEMOA_SettingsTest\", 25000, ((Integer)algorithm.getInputParameter(\"maxEvaluations\")).intValue());"], [98, ""], [99, "    assertEquals(\"SMSEMOA_SettingsTest\", 0.9, pc, epsilon);"], [100, "    assertEquals(\"SMSEMOA_SettingsTest\", 20.0, dic, epsilon);"], [101, ""], [102, "    assertEquals(\"SMSEMOA_SettingsTest\", 1.0/problem.getNumberOfVariables(), pm, epsilon);"], [103, "    assertEquals(\"SMSEMOA_SettingsTest\", 20.0, dim, epsilon);"], [104, "    assertEquals(\"SMSEMOA_SettingsTest\", 100.0, ((Double)algorithm.getInputParameter(\"offset\")).doubleValue(), epsilon);"]]}, "num_lines_added": 48, "num_lines_removed": 45}