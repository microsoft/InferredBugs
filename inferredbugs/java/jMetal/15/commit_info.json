{"hash": "23bad8ec838e02876a5ee40be23a2480855b6d34", "message": "GDE3Test working", "file_num_lines": 47, "diff_parsed": {"added": [[25, "import jmetal.metaheuristics.gde3.GDE3;"], [59, "    GDE3_Settings GDE3Settings = new GDE3_Settings(\"Fonseca\");"], [60, "    GDE3 algorithm = (GDE3) GDE3Settings.configure();"], [62, "    DifferentialEvolutionCrossover crossover ="], [63, "      (DifferentialEvolutionCrossover) algorithm.getCrossoverOperator();"], [65, "    Assert.assertEquals(\"GDE3_SettingsTest\", 100, algorithm.getPopulationSize());"], [66, "    Assert.assertEquals(\"GDE3_SettingsTest\", 250, algorithm.getMaxIterations());"], [68, "    Assert.assertEquals(\"GDE3_SettingsTest\", 0.5, crossover.getCr(), epsilon);"], [69, "    Assert.assertEquals(\"GDE3_SettingsTest\", 0.5, crossover.getF(), epsilon);"], [76, "    GDE3 algorithm = (GDE3) GDE3Settings.configure(configuration_);"], [78, "    DifferentialEvolutionCrossover crossover ="], [79, "      (DifferentialEvolutionCrossover) algorithm.getCrossoverOperator();"], [81, "    Assert.assertEquals(\"GDE3_SettingsTest\", 100, algorithm.getPopulationSize());"], [82, "    Assert.assertEquals(\"GDE3_SettingsTest\", 250, algorithm.getMaxIterations());"], [84, "    Assert.assertEquals(\"GDE3_SettingsTest\", 0.5, crossover.getCr(), epsilon);"], [85, "    Assert.assertEquals(\"GDE3_SettingsTest\", 0.5, crossover.getF(), epsilon);"]], "deleted": [[23, "import jmetal.core.Algorithm;"], [28, ""], [60, "    Settings GDE3Settings = new GDE3_Settings(\"Fonseca\");"], [61, "    Algorithm algorithm = GDE3Settings.configure();"], [62, "    //Problem problem = new Fonseca(\"Real\");"], [64, "    DifferentialEvolutionCrossover crossover = (DifferentialEvolutionCrossover)algorithm.getOperator(\"crossover\") ;"], [65, "    double CR = (Double)crossover.getParameter(\"CR\") ;"], [66, "    double F = (Double)crossover.getParameter(\"F\") ;"], [68, "    Assert.assertEquals(\"GDE3_SettingsTest\", 100, ((Integer)algorithm.getInputParameter(\"populationSize\")).intValue());"], [69, "    Assert.assertEquals(\"GDE3_SettingsTest\", 250, ((Integer)algorithm.getInputParameter(\"maxIterations\")).intValue());"], [71, "    Assert.assertEquals(\"GDE3_SettingsTest\", 0.5, CR, epsilon);"], [72, "    Assert.assertEquals(\"GDE3_SettingsTest\", 0.5, F, epsilon);"], [79, "    Algorithm algorithm = GDE3Settings.configure(configuration_);"], [80, "    //Problem problem = new Fonseca(\"Real\");"], [82, "    DifferentialEvolutionCrossover crossover = (DifferentialEvolutionCrossover)algorithm.getOperator(\"crossover\") ;"], [83, "    double CR = (Double)crossover.getParameter(\"CR\") ;"], [84, "    double F = (Double)crossover.getParameter(\"F\") ;"], [86, "    Assert.assertEquals(\"GDE3_SettingsTest\", 100, ((Integer)algorithm.getInputParameter(\"populationSize\")).intValue());"], [87, "    Assert.assertEquals(\"GDE3_SettingsTest\", 250, ((Integer)algorithm.getInputParameter(\"maxIterations\")).intValue());"], [89, "    Assert.assertEquals(\"GDE3_SettingsTest\", 0.5, CR, epsilon);"], [90, "    Assert.assertEquals(\"GDE3_SettingsTest\", 0.5, F, epsilon);"]]}, "num_lines_added": 16, "num_lines_removed": 21}