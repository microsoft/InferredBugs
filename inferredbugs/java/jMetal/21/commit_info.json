{"hash": "8dda688dbd0f1fdfdfd0eb6878476c6a3d861586", "message": "Added: FastSMSEMOATest.java and FastSMSEMOATest.java", "file_num_lines": 67, "diff_parsed": {"added": [[23, "import org.junit.Before;"], [24, "import org.junit.Test;"], [28, "import org.uma.jmetal.metaheuristic.multiobjective.smsemoa.FastSMSEMOA;"], [39, "import static org.junit.Assert.assertEquals;"], [40, ""], [49, "  Properties configuration;"], [53, "    configuration = new Properties();"], [55, "    configuration.load(isr);"], [61, "    Settings fastSMEEMOASettings = new FastSMSEMOASettings(\"Fonseca\");"], [62, "    FastSMSEMOA algorithm = (FastSMSEMOA) fastSMEEMOASettings.configure() ;"], [64, ""], [65, "    SBXCrossover crossover = (SBXCrossover) algorithm.getCrossoverOperator() ;"], [66, "    double pc = crossover.getCrossoverProbability() ;"], [67, "    double dic = crossover.getDistributionIndex() ;"], [68, "    PolynomialMutation mutation = (PolynomialMutation)algorithm.getMutationOperator() ;"], [69, "    double pm = mutation.getMutationProbability() ;"], [70, "    double dim = mutation.getDistributionIndex() ;"], [71, "    double offset = algorithm.getOffset() ;"], [72, ""], [73, "    assertEquals(100, algorithm.getPopulationSize());"], [74, "    assertEquals(25000, algorithm.getMaxEvaluations());"], [75, ""], [76, "    assertEquals(0.9, pc, epsilon);"], [77, "    assertEquals(20.0, dic, epsilon);"], [78, ""], [79, "    assertEquals(1.0/problem.getNumberOfVariables(), pm, epsilon);"], [80, "    assertEquals(20.0, dim, epsilon);"], [81, ""], [82, "    assertEquals(100.0, offset, epsilon);"], [88, "    Settings fastSMEEMOASettings = new FastSMSEMOASettings(\"Fonseca\");"], [89, "    FastSMSEMOA algorithm = (FastSMSEMOA) fastSMEEMOASettings.configure(configuration) ;"], [91, ""], [92, "    SBXCrossover crossover = (SBXCrossover) algorithm.getCrossoverOperator() ;"], [93, "    double pc = crossover.getCrossoverProbability() ;"], [94, "    double dic = crossover.getDistributionIndex() ;"], [95, "    PolynomialMutation mutation = (PolynomialMutation)algorithm.getMutationOperator() ;"], [96, "    double pm = mutation.getMutationProbability() ;"], [97, "    double dim = mutation.getDistributionIndex() ;"], [98, "    double offset = algorithm.getOffset() ;"], [99, ""], [100, "    assertEquals(100, algorithm.getPopulationSize());"], [101, "    assertEquals(25000, algorithm.getMaxEvaluations());"], [102, ""], [103, "    assertEquals(0.9, pc, epsilon);"], [104, "    assertEquals(20.0, dic, epsilon);"], [105, ""], [106, "    assertEquals(1.0 / problem.getNumberOfVariables(), pm, epsilon);"], [107, "    assertEquals(20.0, dim, epsilon);"], [108, ""], [109, "    assertEquals(100.0, offset, epsilon);"]], "deleted": [[23, "import org.uma.jmetal.core.Algorithm;"], [31, "import org.junit.Assert;"], [32, "import org.junit.Before;"], [33, "import org.junit.Test;"], [34, ""], [49, "  Properties configuration_ ;"], [53, "    configuration_ = new Properties();"], [55, "    configuration_.load(isr);"], [61, "    Settings smsemoaSettings = new FastSMSEMOASettings(\"Fonseca\");"], [62, "    Algorithm algorithm = smsemoaSettings.configure() ;"], [64, "    SBXCrossover crossover = (SBXCrossover)algorithm.getOperator(\"crossover\") ;"], [65, "    double pc = (Double)crossover.getParameter(\"probability\") ;"], [66, "    double dic = (Double)crossover.getParameter(\"distributionIndex\") ;"], [67, "    PolynomialMutation mutation = (PolynomialMutation)algorithm.getOperator(\"mutation\") ;"], [68, "    double pm = (Double)mutation.getParameter(\"probability\") ;"], [69, "    double dim = (Double)mutation.getParameter(\"distributionIndex\") ;"], [70, ""], [71, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 100, ((Integer)algorithm.getInputParameter(\"populationSize\")).intValue());"], [72, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 25000, ((Integer)algorithm.getInputParameter(\"maxEvaluations\")).intValue());"], [73, ""], [74, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 0.9, pc, epsilon);"], [75, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 20.0, dic, epsilon);"], [76, ""], [77, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 1.0/problem.getNumberOfVariables(), pm, epsilon);"], [78, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 20.0, dim, epsilon);"], [79, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 100.0, ((Double)algorithm.getInputParameter(\"offset\")).doubleValue(), epsilon);"], [85, "    Settings smsemoaSettings = new FastSMSEMOASettings(\"Fonseca\");"], [86, "    Algorithm algorithm = smsemoaSettings.configure(configuration_) ;"], [88, "    SBXCrossover crossover = (SBXCrossover)algorithm.getOperator(\"crossover\") ;"], [89, "    double pc = (Double)crossover.getParameter(\"probability\") ;"], [90, "    double dic = (Double)crossover.getParameter(\"distributionIndex\") ;"], [91, "    PolynomialMutation mutation = (PolynomialMutation)algorithm.getOperator(\"mutation\") ;"], [92, "    double pm = (Double)mutation.getParameter(\"probability\") ;"], [93, "    double dim = (Double)mutation.getParameter(\"distributionIndex\") ;"], [94, ""], [95, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 100, ((Integer)algorithm.getInputParameter(\"populationSize\")).intValue());"], [96, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 25000, ((Integer)algorithm.getInputParameter(\"maxEvaluations\")).intValue());"], [97, ""], [98, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 0.9, pc, epsilon);"], [99, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 20.0, dic, epsilon);"], [100, ""], [101, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 1.0/problem.getNumberOfVariables(), pm, epsilon);"], [102, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 20.0, dim, epsilon);"], [103, "    Assert.assertEquals(\"SMSEMOA_SettingsTest\", 100.0, ((Double)algorithm.getInputParameter(\"offset\")).doubleValue(), epsilon);"]]}, "num_lines_added": 50, "num_lines_removed": 44}