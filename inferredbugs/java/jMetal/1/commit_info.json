{"hash": "a03b6e76e53b9f99fe8ac1bfe226915cf141d183", "message": "First version but speed is the one applied in former versions", "file_num_lines": 153, "diff_parsed": {"added": [[39, "  private SolutionSet swarm_;"], [43, "  private int numberOfParticlesToInform_ ; // Referred a K in SPSO documento"], [45, "  private Solution[] neighborhoodBest_;"], [48, ""], [62, "  double W_;"], [63, "  double C_;"], [64, "  double ChVel_;"], [77, "    C_ = 1.193;"], [78, "    W_ = 0.721;"], [79, ""], [80, "    ChVel_ = -0.5;"], [104, "  public Solution getNeighbourWithMinimumFitness(int i) {"], [105, "    int[] neighborIndex = getNeighbourhood(i) ;"], [106, ""], [107, "    SolutionSet neighbors = new SolutionSet() ;"], [108, "    for (int j = 0 ; j < neighborIndex.length; j++) {"], [109, "      neighbors.add(swarm_.get(neighborIndex[j])) ;"], [110, "    }"], [111, ""], [112, "    neighbors.sort(comparator_) ;"], [113, ""], [114, "    return neighbors.get(0) ;"], [115, "  }"], [116, ""], [123, "    numberOfParticlesToInform_ = ((Integer) getInputParameter(\"numberOfParticlesToInform\")).intValue() ;"], [131, "    neighborhoodBest_ = new Solution[swarmSize_];"], [139, "  private void computeSpeed() {"], [144, "      XReal particle = new XReal(swarm_.get(i)) ;"], [145, "      XReal localBest = new XReal(localBest_[i]) ;"], [146, "      XReal neighborhoodBest = new XReal(neighborhoodBest_[i]) ;"], [148, "      r1 = PseudoRandom.randDouble(0, C_);"], [149, "      r2 = PseudoRandom.randDouble(0, C_);"], [151, "      for (int var = 0; var < swarmSize_; var++) {"], [153, "        try {"], [154, "          speed_[i][var] = W_* speed_[i][var] +"], [155, "                  r1 * (localBest.getValue(var) - particle.getValue(var)) +"], [156, "                  r2 * (neighborhoodBest.getValue(var) - particle.getValue(var)) ;"], [157, "        } catch (JMException e) {"], [158, "          e.printStackTrace();"], [159, "        }"], [162, "  }"], [178, "          speed_[i][var] = speed_[i][var] * ChVel_; //"], [182, "          speed_[i][var] = speed_[i][var] * ChVel_; //"], [200, ""], [201, "    // Step 1 Create the initial population and evaluate"], [209, "    //-> Step2. Initialize the speed_ of each particle"], [211, "      XReal particle = new XReal(swarm_.get(i))  ;"], [213, "        speed_[i][j] = PseudoRandom.randDouble(problem_.getLowerLimit(j)- particle.getValue(i),"], [214, "                                               problem_.getUpperLimit(j)- particle.getValue(i)) ;"], [222, "      neighborhoodBest_[i] = getNeighbourWithMinimumFitness(i) ;"], [228, "      computeSpeed() ;"], [248, "      \tif ((swarm_.get(i).getObjective(0) < neighborhoodBest_[i].getObjective(0))) {"], [250, "          neighborhoodBest_[i] = particle;"]], "deleted": [[31, "import java.io.IOException;"], [34, "import java.util.logging.Level;"], [35, "import java.util.logging.Logger;"], [42, "\t/**"], [43, "   * Stores the number of swarm_ used"], [44, "   */"], [46, "  /**"], [47, "   * Stores the maximum number of iteration_"], [48, "   */"], [50, "  /**"], [51, "   * Stores the current number of iteration_"], [52, "   */"], [54, "  /**"], [55, "   * Stores the particles"], [56, "   */"], [57, "  private SolutionSet swarm_;"], [58, "  /**"], [59, "   * Stores the local best solutions found so far for each particles"], [60, "   */"], [62, "  /**"], [63, "   * Stores the global best solution found"], [64, "   */"], [65, "  private Solution globalBest_;"], [66, "  /**"], [67, "   * Stores the speed_ of each particle"], [68, "   */"], [84, "  double C1Max_;"], [85, "  double C1Min_;"], [86, "  double C2Max_;"], [87, "  double C2Min_;"], [88, "  double WMax_;"], [89, "  double WMin_;"], [90, "  double ChVel1_;"], [91, "  double ChVel2_;"], [104, "    C1Max_ = 1.5;"], [105, "    C1Min_ = 1.5;"], [106, "    C2Max_ = 1.5;"], [107, "    C2Min_ = 1.5;"], [108, "    WMax_ = 0.9;"], [109, "    WMin_ = 0.1;"], [110, "    ChVel1_ = 1.0;"], [111, "    ChVel2_ = 1.0;"], [151, ""], [154, "  // Adaptive inertia"], [155, "  private double inertiaWeight(int iter, int miter, double wmax, double wmin) {"], [156, "    //return wmax; // - (((wmax-wmin)*(double)iter)/(double)miter);"], [157, "    return wmax - (((wmax-wmin)*(double)iter)/(double)miter);"], [158, "  } // inertiaWeight"], [159, ""], [160, "  // constriction coefficient (M. Clerc)"], [161, "  private double constrictionCoefficient(double c1, double c2) {"], [162, "    double rho = c1 + c2;"], [163, "    //rho = 1.0 ;"], [164, "    if (rho <= 4) {"], [165, "      return 1.0;"], [166, "    } else {"], [167, "      return 2 / Math.abs((2 - rho - Math.sqrt(Math.pow(rho, 2.0) - 4.0 * rho)));"], [168, "    }"], [169, "  } // constrictionCoefficient"], [170, ""], [172, "  // velocity bounds"], [173, "  private double velocityConstriction(double v, double[] deltaMax,"], [174, "                                      double[] deltaMin, int variableIndex,"], [175, "                                      int particleIndex) throws IOException {"], [177, "  \treturn v;"], [178, "  \t/*"], [179, ""], [180, "    //System.out.println(\"v: \" + v + \"\\tdmax: \" + dmax + \"\\tdmin: \" + dmin) ;"], [181, "    double result;"], [182, ""], [183, "    double dmax = deltaMax[variableIndex];"], [184, "    double dmin = deltaMin[variableIndex];"], [185, ""], [186, "    result = v;"], [187, ""], [188, "    if (v > dmax) {"], [189, "      result = dmax;"], [190, "    }"], [191, ""], [192, "    if (v < dmin) {"], [193, "      result = dmin;"], [194, "    }"], [195, ""], [196, "    return result;"], [197, "    */"], [198, "  } // velocityConstriction"], [199, ""], [200, "  /**"], [201, "   * Update the speed of each particle"], [202, "   * @throws jmetal.util.JMException"], [203, "   */"], [204, "  private void computeSpeed(int iter, int miter) throws JMException, IOException {"], [206, "    //double W ;"], [207, "    double C1, C2;"], [208, "    double wmax, wmin, deltaMax, deltaMin;"], [209, "    XReal bestGlobal;"], [210, ""], [211, "  \tbestGlobal = new XReal(globalBest_) ;"], [214, "    \tXReal particle = new XReal(swarm_.get(i)) ;"], [215, "    \tXReal bestParticle = new XReal(localBest_[i]) ;"], [216, ""], [217, "      //int bestIndividual = (Integer)findBestSolution_.execute(swarm_) ;"], [218, ""], [219, "      C1Max_ = 2.5;"], [220, "      C1Min_ = 1.5;"], [221, "      C2Max_ = 2.5;"], [222, "      C2Min_ = 1.5;"], [223, ""], [224, "      r1 = PseudoRandom.randDouble(r1Min_, r1Max_);"], [225, "      r2 = PseudoRandom.randDouble(r2Min_, r2Max_);"], [226, "      C1 = PseudoRandom.randDouble(C1Min_, C1Max_);"], [227, "      C2 = PseudoRandom.randDouble(C2Min_, C2Max_);"], [228, "      //W =  PseudoRandom.randDouble(WMin_, WMax_);"], [229, "      //"], [231, "      WMax_ = 0.9;"], [232, "      WMin_ = 0.9;"], [233, "      ChVel1_ = 1.0;"], [234, "      ChVel2_ = 1.0;"], [236, "      C1 = 2.5 ;"], [237, "      C2 = 1.5 ;"], [239, "      wmax = WMax_;"], [240, "      wmin = WMin_;"], [241, "/*"], [242, "      for (int var = 0; var < particle.size(); var++) {"], [244, "        speed_[i][var] = velocityConstriction(constrictionCoefficient(C1, C2) *"], [245, "          (inertiaWeight(iter, miter, wmax, wmin) *"], [246, "          speed_[i][var] +"], [247, "          C1 * r1 * (bestParticle.getValue(var) - particle.getValue(var)) +"], [248, "          C2 * r2 * (bestGlobal.getValue(var) -"], [249, "          particle.getValue(var))), deltaMax_,"], [250, "          deltaMin_, //[var],"], [251, "          var,"], [252, "          i);"], [253, "      }"], [254, "*/"], [255, "      C1 = 1.5 ;"], [256, "      C2 = 1.5 ;"], [257, "      double W = 0.9 ;"], [258, "      for (int var = 0; var < particle.size(); var++) {"], [259, "        //Computing the velocity of this particle"], [260, "        speed_[i][var] = inertiaWeight(iter, miter, wmax, wmin) * speed_[i][var] +"], [261, "          C1 * r1 * (bestParticle.getValue(var) - particle.getValue(var)) +"], [262, "          C2 * r2 * (bestGlobal.getValue(var) - particle.getValue(var)) ;"], [265, "  } // computeSpeed"], [281, "          speed_[i][var] = speed_[i][var] * ChVel1_; //"], [285, "          speed_[i][var] = speed_[i][var] * ChVel2_; //"], [303, "    globalBest_ =  null ;"], [304, "    //->Step 1 (and 3) Create the initial population and evaluate"], [310, "      if ((globalBest_ == null) || (particle.getObjective(0) < globalBest_.getObjective(0)))"], [311, "        globalBest_ = new Solution(particle) ;"], [314, "    //-> Step2. Initialize the speed_ of each particle to 0"], [317, "        speed_[i][j] = 0.0;"], [329, "      int bestIndividual = (Integer)findBestSolution_.execute(swarm_) ;"], [330, "      try {"], [332, "        computeSpeed(iteration_, maxIterations_);"], [333, "      } catch (IOException ex) {"], [334, "        Logger.getLogger(StandardPSO2011.class.getName()).log(Level.SEVERE, null, ex);"], [335, "      }"], [340, "      //Mutate the swarm_"], [341, "      //mopsoMutation(iteration_, maxIterations_);"], [342, ""], [358, "      \tif ((swarm_.get(i).getObjective(0) < globalBest_.getObjective(0))) {"], [360, "          globalBest_ = particle;"]]}, "num_lines_added": 53, "num_lines_removed": 163}