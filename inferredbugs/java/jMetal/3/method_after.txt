  public static void main(String [] args) throws
                                  JMException, SecurityException, IOException, 
                                  IllegalArgumentException, IllegalAccessException, 
                                  ClassNotFoundException {
    Algorithm algorithm ;         // The algorithm to use

    QualityIndicator indicators ; // Object to get quality indicators

    Settings settings = null;

    String algorithmName   = "" ;
    String problemName     = "Kursawe" ; // Default problem
    String paretoFrontFile = "" ;

    indicators = null ;

    Properties configuration = new Properties();
    InputStreamReader inputStreamReader = null  ;

    if (args.length == 0) { //
      System.err.println("Sintax error. Usage:") ;
      System.err.println("a) jmetal.experiments.Main configurationFile ") ;
      System.err.println("b) jmetal.experiments.Main configurationFile problemName") ;
      System.err.println("c) jmetal.experiments.Main configurationFile problemName paretoFrontFile") ;
      System.exit(-1) ;
    } // if
    else if (args.length == 1) { // algorithmName
      inputStreamReader = new InputStreamReader(new FileInputStream(args[0]));
      configuration.load(inputStreamReader);

      algorithmName = algorithmName = configuration.getProperty("algorithm") ;
      Object [] settingsParams = {problemName} ;
      settings = (new SettingsFactory()).getSettingsObject(algorithmName, settingsParams) ;
      } // if
    else if (args.length == 2) { // algorithmName problemName
      inputStreamReader = new InputStreamReader(new FileInputStream(args[0]));
      configuration.load(inputStreamReader);

      algorithmName = algorithmName = configuration.getProperty("algorithm") ;
      problemName = args[1] ;
      Object [] settingsParams = {problemName} ;
      settings = (new SettingsFactory()).getSettingsObject(algorithmName, settingsParams) ;
      } // if
    else if (args.length == 3) { // algorithmName problemName paretoFrontFile
      inputStreamReader = new InputStreamReader(new FileInputStream(args[0]));
      configuration.load(inputStreamReader);

      algorithmName = algorithmName = configuration.getProperty("algorithm") ;
      problemName = args[1] ;
      paretoFrontFile = args[2] ;
      Object [] settingsParams = {problemName} ;
      settings = (new SettingsFactory()).getSettingsObject(algorithmName, settingsParams) ;
    } // if

    algorithm = settings.configure(configuration);
    inputStreamReader.close();

    // Logger object and file to store log messages
    logger_      = Configuration.logger_ ;
    fileHandler_ = new FileHandler(algorithmName + ".log");
    logger_.addHandler(fileHandler_) ;


    if (args.length == 3) {
    	Problem p = algorithm.getProblem() ;
      indicators = new QualityIndicator(p, paretoFrontFile);
    }
    
    // Execute the Algorithm
    long initTime = System.currentTimeMillis();
    SolutionSet population = algorithm.execute();
    long estimatedTime = System.currentTimeMillis() - initTime;

    // Result messages
    logger_.info("Total execution time: "+estimatedTime + "ms");
    logger_.info("Objectives values have been writen to file FUN");
    population.printObjectivesToFile("FUN");
    logger_.info("Variables values have been writen to file VAR");
    population.printVariablesToFile("VAR");

    if (indicators != null) {
      logger_.info("Quality indicators") ;
      logger_.info("Hypervolume: " + indicators.getHypervolume(population)) ;
      logger_.info("GD         : " + indicators.getGD(population)) ;
      logger_.info("IGD        : " + indicators.getIGD(population)) ;
      logger_.info("Spread     : " + indicators.getSpread(population)) ;
      logger_.info("Epsilon    : " + indicators.getEpsilon(population)) ;

      if (algorithm.getOutputParameter("evaluations") != null) {
        Integer evals = (Integer)algorithm.getOutputParameter("evaluations") ;
        int evaluations = (Integer)evals.intValue();
        logger_.info("Speed      : " + evaluations + " evaluations") ;
      } // if
    } // if
  }