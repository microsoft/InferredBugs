{"hash": "8ae4e94fef01227aecae27e343df50ca220a8213", "message": "Derive and back-propagate method parameters", "file_num_lines": 753, "diff_parsed": {"added": [[437, "    public void visitReturnInstruction(ReturnInstruction obj) {"], [438, "        List<Integer> parametersLocalValueIndexes = new ArrayList<>();"], [439, ""], [440, "        GenericSignatureParser genericSignatureParser = new GenericSignatureParser(methodDescriptor.getSignature());"], [441, "        int localValueIndex = 0;"], [442, "        //  non-static methods have the class instance as the first index"], [443, "        if (!methodDescriptor.isStatic()) {"], [444, "            localValueIndex++;"], [445, "        }"], [446, "        for (Iterator<String> it = genericSignatureParser.parameterSignatureIterator(); it.hasNext();) {"], [447, "            String parameter = it.next();"], [448, "            switch (parameter.charAt(0)) {"], [449, "                case 'D':"], [450, "                case 'J':"], [451, "                    // double and long occupy two slots"], [452, "                    localValueIndex++;"], [453, "                    break;"], [454, "                case '[':"], [455, "                    // back-propagate array taints"], [456, "                    parametersLocalValueIndexes.add(localValueIndex);"], [457, "                    break;"], [458, "                case 'L':"], [459, "                    // back-propagate mutable class taints"], [460, "                    if (!taintConfig.isClassImmutable(parameter)) {"], [461, "                        parametersLocalValueIndexes.add(localValueIndex);"], [462, "                        break;"], [463, "                    }"], [464, ""], [465, "                    // back-propage immutable taints only when they transfer tags"], [466, "                    Taint taint = getFrame().getValue(localValueIndex);"], [467, "                    if (taint.hasTags() || taint.isRemovingTags()) {"], [468, "                        parametersLocalValueIndexes.add(localValueIndex);"], [469, "                    }"], [470, "                    break;"], [471, "            }"], [472, ""], [473, "            localValueIndex++;"], [474, "        }"], [475, ""], [476, "        int parametersCount = localValueIndex;"], [477, ""], [478, "        for (int parameterLocalValueIndex : parametersLocalValueIndexes) {"], [479, "            Taint parameterTaint = getFrame().getValue(parameterLocalValueIndex);"], [480, "            int stackIndex = (parametersCount - 1) - parameterLocalValueIndex;"], [481, "            analyzedMethodConfig.setParameterOutputTaint(stackIndex, parameterTaint);"], [482, "        }"], [483, ""], [484, "        super.visitReturnInstruction(obj);"], [485, "    }"], [486, ""], [487, "    @Override"], [532, "            taintCopy.setRealInstanceClass(methodConfig != null && methodConfig.getOutputTaint() != null ? methodConfig.getOutputTaint().getRealInstanceClass() : null);"], [684, "        if (methodConfig == null || methodConfig.getOutputTaint() == null) {"], [690, ""], [691, "        return mergeTaintWithStack(taint);"], [692, "    }"], [693, ""], [694, "    private Taint mergeTaintWithStack(Taint taint) {"], [695, "        assert taint != null;"], [724, ""], [725, "        if (methodConfig != null && !methodConfig.getParametersOutputTaints().isEmpty()) {"], [726, "            for (Map.Entry<Integer, Taint> entry : methodConfig.getParametersOutputTaints().entrySet()) {"], [727, "                int stackIndex = entry.getKey();"], [728, "                assert stackIndex >= 0 && stackIndex < getFrame().getStackDepth();"], [729, ""], [730, "                Taint parameterTaint = entry.getValue();"], [731, "                assert parameterTaint != null;"], [732, ""], [733, "                try {"], [734, "                    Taint taint = new Taint(parameterTaint);"], [735, "                    taint = mergeTaintWithStack(taint);"], [736, ""], [737, "                    Taint stackValue = getFrame().getStackValue(stackIndex);"], [738, "                    if (stackValue.hasValidVariableIndex()) {"], [739, "                        // set back the index removed during merging"], [740, "                        taint.setVariableIndex(stackValue.getVariableIndex());"], [741, "                    }"], [742, "                    taint.setRealInstanceClass(stackValue.getRealInstanceClass());"], [743, "                    getFrame().setValue(getFrame().getStackLocation(stackIndex), taint);"], [744, "                    setLocalVariableTaint(taint, stackValue);"], [745, "                }"], [746, "                catch (DataflowAnalysisException ex) {"], [747, "                    throw new InvalidBytecodeException(\"Not enough values on the stack\", ex);"], [748, "                }"], [749, "            }"], [750, ""], [751, "            return;"], [752, "        }"], [753, ""], [862, "        if (outputTaint != null) {"], [863, "            String returnType = getReturnType(methodDescriptor.getSignature());"], [864, "            String realInstanceClassName = outputTaint.getRealInstanceClassName();"], [865, "            if (returnType.equals(\"L\" + realInstanceClassName + \";\")) {"], [866, "                // storing it in method summary is useless"], [867, "                outputTaint.setRealInstanceClass(null);"], [868, "                analyzedMethodConfig.setOuputTaint(outputTaint);"], [869, "            }"]], "deleted": [[468, "            ObjectType realInstanceClass = (methodConfig == null) ?"], [469, "                    null : methodConfig.getOutputTaint().getRealInstanceClass();"], [483, "            taintCopy.setRealInstanceClass(realInstanceClass);"], [635, "        if (methodConfig == null) {"], [777, "        if (outputTaint == null) {"], [778, "            // void methods"], [779, "            return;"], [780, "        }"], [781, "        String returnType = getReturnType(methodDescriptor.getSignature());"], [782, "        if (taintConfig.isClassTaintSafe(returnType) && outputTaint.getState() != Taint.State.NULL) {"], [783, "            // we do not have to store summaries with safe output"], [784, "            return;"], [785, "        }"], [786, "        String realInstanceClassName = outputTaint.getRealInstanceClassName();"], [787, "        if (returnType.equals(\"L\" + realInstanceClassName + \";\")) {"], [788, "            // storing it in method summary is useless"], [789, "            outputTaint.setRealInstanceClass(null);"], [790, "            analyzedMethodConfig.setOuputTaint(outputTaint);"]]}, "num_lines_added": 97, "num_lines_removed": 18}