  @Override
  public void transitionInto(RunState state) {
    switch (state.state()) {
      case SUBMITTING:
        // Perform rate limited submission on a separate thread pool to avoid blocking the caller.
        executor.submit(() -> {
          rateLimiter.acquire();
          try {
            final String executionId = dockerRunnerStart(state);
            // this is racy
            final Event submitted = Event.submitted(state.workflowInstance(), executionId);
            try {
              stateManager.receive(submitted);
            } catch (StateManager.IsClosed isClosed) {
              LOG.warn("Could not send 'created' event", isClosed);
            }
          } catch (ResourceNotFoundException e) {
            LOG.error("Unable to start docker procedure.", e);
            stateManager.receiveIgnoreClosed(Event.halt(state.workflowInstance()));
          } catch (Throwable e) {
            try {
              LOG.error("Failed the docker starting procedure for " + state.workflowInstance().toKey(), e);
              stateManager.receive(Event.runError(state.workflowInstance(), e.getMessage()));
            } catch (StateManager.IsClosed isClosed) {
              LOG.warn("Failed to send 'runError' event", isClosed);
            }
          }
        });
        break;

      case TERMINATED:
      case FAILED:
      case ERROR:
        if (state.data().executionId().isPresent()) {
          final String executionId = state.data().executionId().get();

          boolean debugEnabled = false;
          try {
            debugEnabled = storage.debugEnabled();
          } catch (IOException e) {
            LOG.info("Couldn't fetch debug flag. Will clean up pod anyway.");
          }

          if (!debugEnabled) {
            LOG.info("Cleaning up {} pod: {}", state.workflowInstance().toKey(), executionId);
            dockerRunner.cleanup(executionId);
          } else {
            LOG.info("Keeping {} pod: {}", state.workflowInstance().toKey(), executionId);
          }
        }
        break;

      default:
        // do nothing
    }
  }