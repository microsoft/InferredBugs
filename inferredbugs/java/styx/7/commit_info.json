{"hash": "a990bb0fdcf5d63c85d50ea07c304ac3260fcd28", "message": "list only active backfills by default", "file_num_lines": 514, "diff_parsed": {"added": [[547, "    final Entity entity = datastore.get(datastore.newKeyFactory().kind(KIND_BACKFILL).newKey(id));"], [554, "  private EntityQuery.Builder backfillQueryBuilder(boolean showAll) {"], [555, "    final EntityQuery.Builder queryBuilder = Query.entityQueryBuilder().kind(KIND_BACKFILL);"], [556, ""], [557, "    if (!showAll) {"], [558, "      queryBuilder"], [559, "          .filter(PropertyFilter.eq(PROPERTY_ALL_TRIGGERED, false))"], [560, "          .filter(PropertyFilter.eq(PROPERTY_HALTED, false));"], [561, "    }"], [562, ""], [563, "    return queryBuilder;"], [564, "  }"], [565, ""], [566, "  private List<Backfill> backfillsForQuery(Query<Entity> query) {"], [569, "    results.forEachRemaining(entity -> resources.add(entityToBackfill(entity)));"], [573, "  List<Backfill> getBackfills(boolean showAll) {"], [574, "    return backfillsForQuery(backfillQueryBuilder(showAll).build());"], [575, "  }"], [576, ""], [577, "  List<Backfill> getBackfillsForComponent(boolean showAll, String component) {"], [578, "    final EntityQuery query = backfillQueryBuilder(showAll)"], [579, "        .filter(PropertyFilter.eq(PROPERTY_COMPONENT, component))"], [580, "        .build();"], [581, ""], [582, "    return backfillsForQuery(query);"], [583, "  }"], [584, ""], [585, "  List<Backfill> getBackfillsForWorkflow(boolean showAll, String workflow) {"], [586, "    final EntityQuery query = backfillQueryBuilder(showAll)"], [587, "        .filter(PropertyFilter.eq(PROPERTY_WORKFLOW, workflow))"], [588, "        .build();"], [589, ""], [590, "    return backfillsForQuery(query);"], [591, "  }"], [592, ""], [593, "  List<Backfill> getBackfillsForWorkflowId(boolean showAll, WorkflowId workflowId) {"], [594, "    final EntityQuery query = backfillQueryBuilder(showAll)"], [595, "        .filter(PropertyFilter.eq(PROPERTY_COMPONENT, workflowId.componentId()))"], [596, "        .filter(PropertyFilter.eq(PROPERTY_WORKFLOW, workflowId.endpointId()))"], [597, "        .build();"], [598, ""], [599, "    return backfillsForQuery(query);"], [600, "  }"], [601, ""]], "deleted": [[547, "    Entity entity = datastore.get(datastore.newKeyFactory().kind(KIND_BACKFILL).newKey(id));"], [554, "  List<Backfill> getBackfills() {"], [555, "    final EntityQuery query = Query.entityQueryBuilder().kind(KIND_BACKFILL).build();"], [558, "    while (results.hasNext()) {"], [559, "      resources.add(entityToBackfill(results.next()));"], [560, "    }"]]}, "num_lines_added": 44, "num_lines_removed": 6}