{"hash": "105092aca1aac5d70e89fa7c822a6e41694a1d57", "message": "progress with module system", "file_num_lines": 77, "diff_parsed": {"added": [[14, "    private static int classCounter = 0;"], [17, "    public Node locator;"], [19, "    public Node base;"], [23, "    public Class(@Nullable Node locator, Node base, Node body, int start, int end) {"], [25, ""], [26, "        // set name"], [27, "        if (locator instanceof Attribute) {"], [28, "            this.name = ((Attribute) locator).attr;"], [29, "        } else if (locator instanceof Name) {"], [30, "            this.name = (Name) locator;"], [35, ""], [36, "        this.locator = locator;"], [37, "        this.base = base;"], [39, "        addChildren(this.locator, this.body, this.base);"], [50, "    public Node getLocator() {"], [51, "        return locator;"], [65, "        if (locator != null) {"], [66, "            Type existing = transformExpr(locator, s);"], [67, "            if (existing instanceof ClassType) {"], [68, "                if (body != null) {"], [69, "                    transformExpr(body, existing.table);"], [70, "                }"], [71, "                return Type.CONT;"], [72, "            }"], [73, "        }"], [74, ""], [75, "        ClassType classType = new ClassType(name.id, s);"], [76, ""], [77, "        if (base != null) {"]], "deleted": [[12, "import java.util.ArrayList;"], [13, "import java.util.List;"], [14, ""], [20, "    public List<Node> bases;"], [24, "    public Class(@Nullable Name name, List<Node> bases, Node body, int start, int end) {"], [26, "        if (name != null) {"], [27, "            this.name = name;"], [32, "        this.bases = bases;"], [34, "        addChildren(name, this.body);"], [35, "        addChildren(bases);"], [46, "    public Name getName() {"], [47, "        return name;"], [51, "    private static int classCounter = 0;"], [52, ""], [53, ""], [64, "        ClassType classType = new ClassType(getName().id, s);"], [65, "        List<Type> baseTypes = new ArrayList<>();"], [66, "        for (Node base : bases) {"], [70, "            } else if (baseType.isUnionType()) {"], [71, "                for (Type b : baseType.asUnionType().getTypes()) {"], [72, "                    classType.addSuper(b);"], [73, "                    break;"], [74, "                }"], [78, "            baseTypes.add(baseType);"]]}, "num_lines_added": 29, "num_lines_removed": 24}