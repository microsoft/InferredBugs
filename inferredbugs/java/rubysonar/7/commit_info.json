{"hash": "1f2a7ffaec3586d94d6d804ff418479353890fd7", "message": "fix a few exceptions from last change", "file_num_lines": 128, "diff_parsed": {"added": [[35, "            Op op = ((Op) ops.get(0));"], [36, "            String opname = op.name;"], [37, "            if (op.isNumberComparisonOp()) {"], [38, ""], [39, "                Node left = compare.left;"], [40, "                Node right = compare.comparators.get(0);"], [41, "                if (!left.isName()) {"], [42, "                    Node tmp = right;"], [43, "                    right = left;"], [44, "                    left = tmp;"], [45, "                    opname = Op.invert(opname);"], [46, "                }"], [48, "                if (left.isName()) {"], [49, "                    Name leftName = left.asName();"], [50, "                    Type leftType = left.resolve(s1);"], [51, "                    Type rightType = right.resolve(s1);"], [52, "                    NumType trueType = Analyzer.self.builtins.BaseNum;"], [53, "                    NumType falseType = Analyzer.self.builtins.BaseNum;"], [54, ""], [55, "                    if (opname.equals(\"<\") || opname.equals(\"<=\")) {"], [56, "                        if (leftType.isNumType() && rightType.isNumType()) {"], [57, "                            NumType newUpper = rightType.asNumType();"], [58, "                            trueType = new NumType(leftType.asNumType());"], [59, "                            trueType.setUpper(newUpper.getUpper());"], [60, "                            falseType = new NumType(leftType.asNumType());"], [61, "                            falseType.setLower(newUpper.getUpper());"], [62, "                        } else {"], [63, "                            Analyzer.self.putProblem(test, \"comparing non-numbers: \" + leftType + \" and \" + rightType);"], [64, "                        }"], [65, "                    } else if (opname.equals(\">\") || opname.equals(\">=\")) {"], [66, "                        if (leftType.isNumType() && rightType.isNumType()) {"], [67, "                            NumType newLower = rightType.asNumType();"], [68, "                            trueType = new NumType(leftType.asNumType());"], [69, "                            trueType.setLower(newLower.getLower());"], [70, "                            falseType = new NumType(leftType.asNumType());"], [71, "                            falseType.setUpper(newLower.getLower());"], [72, "                        } else {"], [73, "                            Analyzer.self.putProblem(test, \"comparing non-numbers: \" + leftType + \" and \" + rightType);"], [74, "                        }"], [76, ""], [77, "                    Node loc;"], [78, "                    List<Binding> bs = s1.lookup(leftName.id);"], [79, "                    if (bs != null && bs.size() > 0) {"], [80, "                        loc = bs.get(0).getNode();"], [82, "                        loc = leftName;"], [85, "                    s1.update(leftName.id, new Binding(leftName.id, loc, trueType, Binding.Kind.SCOPE));"], [86, "                    s2.update(leftName.id, new Binding(leftName.id, loc, falseType, Binding.Kind.SCOPE));"], [87, "                }"]], "deleted": [[35, "            String opname = ((Op) ops.get(0)).name;"], [36, "            Node left = compare.left;"], [37, "            Node right = compare.comparators.get(0);"], [38, "            if (!left.isName()) {"], [39, "                Node tmp = right;"], [40, "                right = left;"], [41, "                left = tmp;"], [42, "                opname = Op.invert(opname);"], [43, "            }"], [45, "            if (left.isName()) {"], [46, "                Name leftName = left.asName();"], [47, "                Type leftType = left.resolve(s1);"], [48, "                Type rightType = right.resolve(s1);"], [49, "                NumType trueType = Analyzer.self.builtins.BaseNum;"], [50, "                NumType falseType = Analyzer.self.builtins.BaseNum;"], [51, ""], [52, "                if (opname.equals(\"<\") || opname.equals(\"<=\")) {"], [53, "                    if (leftType.isNumType() && rightType.isNumType()) {"], [54, "                        NumType newUpper = rightType.asNumType();"], [55, "                        trueType = new NumType(leftType.asNumType());"], [56, "                        trueType.setUpper(newUpper.getUpper());"], [57, "                        falseType = new NumType(leftType.asNumType());"], [58, "                        falseType.setLower(newUpper.getUpper());"], [59, "                    } else {"], [60, "                        Analyzer.self.putProblem(test, \"comparing non-numbers: \" + leftType + \" and \" + rightType);"], [62, "                } else if (opname.equals(\">\") || opname.equals(\">=\")) {"], [63, "                    if (leftType.isNumType() && rightType.isNumType()) {"], [64, "                        NumType newLower = rightType.asNumType();"], [65, "                        trueType = new NumType(leftType.asNumType());"], [66, "                        trueType.setLower(newLower.getLower());"], [67, "                        falseType = new NumType(leftType.asNumType());"], [68, "                        falseType.setUpper(newLower.getLower());"], [70, "                        Analyzer.self.putProblem(test, \"comparing non-numbers: \" + leftType + \" and \" + rightType);"], [72, "                } else {"], [73, "                    trueType = leftType.asNumType();"], [74, "                }"], [76, "                Binding b = s1.lookup(leftName.id).get(0);"], [77, "                s1.update(leftName.id, new Binding(leftName.id, b.getNode(), trueType, Binding.Kind.SCOPE));"], [78, "                s2.update(leftName.id, new Binding(leftName.id, b.getNode(), falseType, Binding.Kind.SCOPE));"]]}, "num_lines_added": 48, "num_lines_removed": 39}