{"hash": "ead2f18d3acd54ceeccd155929371f4ce767316c", "message": "lucene\u3001solr\u3001elasticsearch\u3001luke\u7b49\u63d2\u4ef6\u662f\u5426\u542f\u7528\u6807\u6ce8", "file_num_lines": 119, "diff_parsed": {"added": [[55, "    private static final boolean FULL_PINYIN = WordConfTools.getBoolean(\"tagging.pinyin.full\", false);"], [56, "    private static final boolean ACRONYM_PINYIN = WordConfTools.getBoolean(\"tagging.pinyin.acronym\", false);"], [63, "    private final Queue<String> tokens = new LinkedTransferQueue<>();"], [87, "    private String getToken() throws IOException {"], [88, "        String token = tokens.poll();"], [89, "        if(token == null){"], [90, "            Word word = getWord();"], [91, "            if (word != null) {"], [92, "                int positionIncrement = 1;"], [93, "                //\u5ffd\u7565\u505c\u7528\u8bcd"], [94, "                while (StopWord.is(word.getText())) {"], [95, "                    positionIncrement++;"], [96, "                    startOffset += word.getText().length();"], [97, "                    LOGGER.debug(\"\u5ffd\u7565\u505c\u7528\u8bcd\uff1a\" + word.getText());"], [98, "                    word = getWord();"], [99, "                    if (word == null) {"], [100, "                        return null;"], [101, "                    }"], [102, "                }"], [103, "                offsetAttribute.setOffset(startOffset, startOffset + word.getText().length());"], [104, "                positionIncrementAttribute.setPositionIncrement(positionIncrement);"], [106, "                tokens.offer(word.getText());"], [107, "                //\u62fc\u97f3\u6807\u6ce8"], [108, "                if (FULL_PINYIN || ACRONYM_PINYIN) {"], [109, "                    PinyinTagging.process(Arrays.asList(word));"], [110, "                    if(FULL_PINYIN && !\"\".equals(word.getFullPinYin())) {"], [111, "                        tokens.offer(word.getFullPinYin());"], [112, "                    }"], [113, "                    if(ACRONYM_PINYIN  && !\"\".equals(word.getAcronymPinYin())) {"], [114, "                        tokens.offer(word.getAcronymPinYin());"], [115, "                    }"], [117, "                //\u540c\u4e49\u6807\u6ce8"], [118, "                if (SYNONYM) {"], [119, "                    SynonymTagging.process(Arrays.asList(word));"], [120, "                    StringBuilder synonym = new StringBuilder();"], [121, "                    word.getSynonym().forEach(w -> {"], [122, "                        if (!\"\".equals(w.getText())) {"], [123, "                            tokens.offer(w.getText());"], [124, "                        }"], [125, "                        synonym.append(w.getText()).append(\" \");"], [126, "                    });"], [127, "                }"], [128, "                //\u53cd\u4e49\u6807\u6ce8"], [129, "                if (ANTONYM) {"], [130, "                    AntonymTagging.process(Arrays.asList(word));"], [131, "                    StringBuilder antonym = new StringBuilder();"], [132, "                    word.getAntonym().forEach(w -> {"], [133, "                        if (!\"\".equals(w.getText())) {"], [134, "                            tokens.offer(w.getText());"], [135, "                        }"], [136, "                        antonym.append(w.getText()).append(\" \");"], [137, "                    });"], [138, "                }"], [139, "                token = tokens.poll();"], [141, "        }"], [142, "        return token;"], [143, "    }"], [144, "    @Override"], [145, "    public final boolean incrementToken() throws IOException {"], [146, "        String token = getToken();"], [147, "        if (token != null) {"], [148, "            charTermAttribute.setEmpty().append(token);"]], "deleted": [[32, "import org.apdplat.word.lucene.attribute.*;"], [39, "import org.apdplat.word.tagging.PartOfSpeechTagging;"], [56, "    private final PartOfSpeechAttribute partOfSpeechAttribute = addAttribute(PartOfSpeechAttribute.class);"], [57, "    private final AcronymPinyinAttribute acronymPinyinAttribute = addAttribute(AcronymPinyinAttribute.class);"], [58, "    private final FullPinyinAttribute fullPinyinAttribute = addAttribute(FullPinyinAttribute.class);"], [59, "    private final SynonymAttribute synonymAttribute = addAttribute(SynonymAttribute.class);"], [60, "    private final AntonymAttribute antonymAttribute = addAttribute(AntonymAttribute.class);"], [62, "    private static final boolean POS = WordConfTools.getBoolean(\"tagging.part.of.speech\", false);"], [63, "    private static final boolean PINYIN = WordConfTools.getBoolean(\"tagging.pinyin\", false);"], [93, "    @Override"], [94, "    public final boolean incrementToken() throws IOException {"], [95, "        Word word = getWord();"], [96, "        if (word != null) {"], [97, "            int positionIncrement = 1;"], [98, "            //\u5ffd\u7565\u505c\u7528\u8bcd"], [99, "            while(StopWord.is(word.getText())){"], [100, "                positionIncrement++;"], [102, "                LOGGER.debug(\"\u5ffd\u7565\u505c\u7528\u8bcd\uff1a\"+word.getText());"], [103, "                word = getWord();"], [104, "                if(word == null){"], [105, "                    return false;"], [108, "            charTermAttribute.setEmpty().append(word.getText());"], [109, "            offsetAttribute.setOffset(startOffset, startOffset+word.getText().length());"], [110, "            positionIncrementAttribute.setPositionIncrement(positionIncrement);"], [111, "            startOffset += word.getText().length();"], [112, "            //\u8bcd\u6027\u6807\u6ce8"], [113, "            if(POS){"], [114, "                PartOfSpeechTagging.process(Arrays.asList(word));"], [115, "                partOfSpeechAttribute.setEmpty().append(word.getPartOfSpeech().getPos());"], [116, "            }"], [117, "            //\u62fc\u97f3\u6807\u6ce8"], [118, "            if(PINYIN){"], [119, "                PinyinTagging.process(Arrays.asList(word));"], [120, "                acronymPinyinAttribute.setEmpty().append(word.getAcronymPinYin());"], [121, "                fullPinyinAttribute.setEmpty().append(word.getFullPinYin());"], [122, "            }"], [123, "            //\u540c\u4e49\u6807\u6ce8"], [124, "            if(SYNONYM){"], [125, "                SynonymTagging.process(Arrays.asList(word));"], [126, "                StringBuilder synonym = new StringBuilder();"], [127, "                word.getSynonym().forEach(w -> synonym.append(w.getText()).append(\" \"));"], [128, "                synonymAttribute.setEmpty().append(synonym.toString().trim());"], [129, "            }"], [130, "            //\u53cd\u4e49\u6807\u6ce8"], [131, "            if(ANTONYM){"], [132, "                AntonymTagging.process(Arrays.asList(word));"], [133, "                StringBuilder antonym = new StringBuilder();"], [134, "                word.getAntonym().forEach(w -> antonym.append(w.getText()).append(\" \"));"], [135, "                antonymAttribute.setEmpty().append(antonym.toString().trim());"], [136, "            }"]]}, "num_lines_added": 62, "num_lines_removed": 50}