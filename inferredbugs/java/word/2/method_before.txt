    @Override
    public final boolean incrementToken() throws IOException {
        Word word = getWord();
        if (word != null) {
            int positionIncrement = 1;
            //忽略停用词
            while(StopWord.is(word.getText())){
                positionIncrement++;
                startOffset += word.getText().length();
                LOGGER.debug("忽略停用词："+word.getText());
                word = getWord();
                if(word == null){
                    return false;
                }
            }
            charTermAttribute.setEmpty().append(word.getText());
            offsetAttribute.setOffset(startOffset, startOffset+word.getText().length());
            positionIncrementAttribute.setPositionIncrement(positionIncrement);
            startOffset += word.getText().length();
            //词性标注
            if(POS){
                PartOfSpeechTagging.process(Arrays.asList(word));
                partOfSpeechAttribute.setEmpty().append(word.getPartOfSpeech().getPos());
            }
            //拼音标注
            if(PINYIN){
                PinyinTagging.process(Arrays.asList(word));
                acronymPinyinAttribute.setEmpty().append(word.getAcronymPinYin());
                fullPinyinAttribute.setEmpty().append(word.getFullPinYin());
            }
            //同义标注
            if(SYNONYM){
                SynonymTagging.process(Arrays.asList(word));
                StringBuilder synonym = new StringBuilder();
                word.getSynonym().forEach(w -> synonym.append(w.getText()).append(" "));
                synonymAttribute.setEmpty().append(synonym.toString().trim());
            }
            //反义标注
            if(ANTONYM){
                AntonymTagging.process(Arrays.asList(word));
                StringBuilder antonym = new StringBuilder();
                word.getAntonym().forEach(w -> antonym.append(w.getText()).append(" "));
                antonymAttribute.setEmpty().append(antonym.toString().trim());
            }
            return true;
        }
        return false;
    }