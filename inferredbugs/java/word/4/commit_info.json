{"hash": "40b7cd05dcfe1a617ae0d6e6b4ca59ffb7394a9d", "message": "\u5b8c\u5584\u6d4b\u8bd5", "file_num_lines": 80, "diff_parsed": {"added": [[27, "import java.nio.file.Files;"], [28, "import java.nio.file.Paths;"], [29, "import java.util.HashMap;"], [30, "import java.util.List;"], [31, "import java.util.Map;"], [32, ""], [33, "import static org.junit.Assert.assertEquals;"], [34, "import static org.junit.Assert.fail;"], [35, ""], [41, "    private final GenericTrie<Integer> genericTrie = new GenericTrie<>();"], [44, "        genericTrie.put(\"\u6768\u5c1a\u5ddd\", 100);"], [45, "        genericTrie.put(\"\u6768\u5c1a\u559c\", 99);"], [46, "        genericTrie.put(\"\u6768\u5c1a\u4e3d\", 98);"], [47, "        genericTrie.put(\"\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\", 1);"], [51, "        genericTrie.clear();"], [55, "        assertEquals(100, genericTrie.get(\"\u6768\u5c1a\u5ddd\").intValue());"], [56, "        assertEquals(1, genericTrie.get(\"\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\").intValue());"], [57, "        genericTrie.clear();"], [58, "        assertEquals(null, genericTrie.get(\"\u6768\u5c1a\u5ddd\"));"], [59, "        assertEquals(null, genericTrie.get(\"\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\"));"], [63, "        assertEquals(100, genericTrie.get(\"\u6768\u5c1a\u5ddd\").intValue());"], [64, "        assertEquals(99, genericTrie.get(\"\u6768\u5c1a\u559c\").intValue());"], [65, "        assertEquals(98, genericTrie.get(\"\u6768\u5c1a\u4e3d\").intValue());"], [66, "        assertEquals(1, genericTrie.get(\"\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\").intValue());"], [67, "        assertEquals(null, genericTrie.get(\"\u6768\"));"], [68, "        assertEquals(null, genericTrie.get(\"\u6768\u5c1a\"));"], [69, "    }"], [70, "    @Test"], [71, "    public void testBigram(){"], [72, "        try {"], [73, "            GenericTrie<Integer> genericTrie = new GenericTrie<>();"], [74, "            Map<String, Integer> map = new HashMap<>();"], [75, "            List<String> lines = Files.readAllLines(Paths.get(\"src/test/resources/bigram.txt\"));"], [76, "            lines.forEach(line -> {"], [77, "                String[] attrs = line.split(\"\\\\s+\");"], [78, "                if(attrs!=null && attrs.length==2){"], [79, "                    map.put(attrs[0], Integer.parseInt(attrs[1]));"], [80, "                    genericTrie.put(attrs[0], map.get(attrs[0]));"], [81, "                }"], [82, "            });"], [83, "            map.keySet().forEach(key->assertEquals(map.get(key).intValue(), genericTrie.get(key).intValue()));"], [84, "        }catch (Exception e){"], [85, "            e.printStackTrace();"], [86, "            fail();"], [87, "        }"], [88, "    }"], [89, "    @Test"], [90, "    public void testTrigram(){"], [91, "        try {"], [92, "            GenericTrie<Integer> genericTrie = new GenericTrie<>();"], [93, "            Map<String, Integer> map = new HashMap<>();"], [94, "            List<String> lines = Files.readAllLines(Paths.get(\"src/test/resources/trigram.txt\"));"], [95, "            lines.forEach(line -> {"], [96, "                String[] attrs = line.split(\"\\\\s+\");"], [97, "                if(attrs!=null && attrs.length==2){"], [98, "                    map.put(attrs[0], Integer.parseInt(attrs[1]));"], [99, "                    genericTrie.put(attrs[0], map.get(attrs[0]));"], [100, "                }"], [101, "            });"], [102, "            map.keySet().forEach(key->assertEquals(map.get(key).intValue(), genericTrie.get(key).intValue()));"], [103, "        }catch (Exception e){"], [104, "            e.printStackTrace();"], [105, "            fail();"], [106, "        }"]], "deleted": [[24, "import org.junit.Assert;"], [33, "    private final GenericTrie<Integer> trie = new GenericTrie<>();"], [36, "        trie.put(\"\u6768\u5c1a\u5ddd\", 100);"], [37, "        trie.put(\"\u6768\u5c1a\u559c\", 99);"], [38, "        trie.put(\"\u6768\u5c1a\u4e3d\", 98);"], [39, "        trie.put(\"\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\", 1);"], [43, "        trie.clear();"], [47, "        Assert.assertEquals(100, trie.get(\"\u6768\u5c1a\u5ddd\"), 0);"], [48, "        Assert.assertEquals(1, trie.get(\"\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\"), 0);"], [49, "        trie.clear();"], [50, "        Assert.assertEquals(null, trie.get(\"\u6768\u5c1a\u5ddd\"));"], [51, "        Assert.assertEquals(null, trie.get(\"\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\"));"], [55, "        Assert.assertEquals(100, trie.get(\"\u6768\u5c1a\u5ddd\"), 0);"], [56, "        Assert.assertEquals(99, trie.get(\"\u6768\u5c1a\u559c\"), 0);"], [57, "        Assert.assertEquals(98, trie.get(\"\u6768\u5c1a\u4e3d\"), 0);"], [58, "        Assert.assertEquals(1, trie.get(\"\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\"), 0);"], [59, "        Assert.assertEquals(null, trie.get(\"\u6768\"));"], [60, "        Assert.assertEquals(null, trie.get(\"\u6768\u5c1a\"));"]]}, "num_lines_added": 64, "num_lines_removed": 18}