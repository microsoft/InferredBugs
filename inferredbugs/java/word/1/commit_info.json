{"hash": "7019f94ddf1d2cee28348d29201262214a51fa6b", "message": "\u91cd\u65b0\u8bbe\u8ba1\u5206\u8bcd\u7ed3\u679crefine", "file_num_lines": 146, "diff_parsed": {"added": [[102, "            return segSentence(sentences.get(0));"], [104, "        //\u5982\u679c\u662f\u591a\u4e2a\u53e5\u5b50\uff0c\u53ef\u4ee5\u5229\u7528\u591a\u7ebf\u7a0b\u63d0\u5347\u5206\u8bcd\u901f\u5ea6"], [105, "        List<Future<List<Word>>> futures = new ArrayList<>(sentences.size());"], [106, "        for(String sentence : sentences){"], [107, "            futures.add(submit(sentence));"], [109, "        sentences.clear();"], [110, "        List<Word> result = new ArrayList<>();"], [111, "        for(Future<List<Word>> future : futures){"], [112, "            List<Word> words;"], [113, "            try {"], [114, "                words = future.get();"], [115, "                if(words != null){"], [116, "                    result.addAll(words);"], [118, "            } catch (InterruptedException | ExecutionException ex) {"], [119, "                LOGGER.error(\"\u83b7\u53d6\u5206\u8bcd\u7ed3\u679c\u5931\u8d25\", ex);"], [122, "        futures.clear();"], [123, "        return result;"]], "deleted": [[40, "import org.apdplat.word.segmentation.WordRefiner;"], [57, "    private static final boolean refine = \"true\".equals(WordConfTools.get(\"refine\", \"false\").trim());"], [102, "        List<Word> result = new ArrayList<>();"], [105, "            result = segSentence(sentences.get(0));"], [106, "        }else {"], [107, "            //\u5982\u679c\u662f\u591a\u4e2a\u53e5\u5b50\uff0c\u53ef\u4ee5\u5229\u7528\u591a\u7ebf\u7a0b\u63d0\u5347\u5206\u8bcd\u901f\u5ea6"], [108, "            List<Future<List<Word>>> futures = new ArrayList<>(sentences.size());"], [109, "            for (String sentence : sentences) {"], [110, "                futures.add(submit(sentence));"], [111, "            }"], [112, "            sentences.clear();"], [113, "            for (Future<List<Word>> future : futures) {"], [114, "                List<Word> words;"], [115, "                try {"], [116, "                    words = future.get();"], [117, "                    if (words != null) {"], [118, "                        result.addAll(words);"], [119, "                    }"], [120, "                } catch (InterruptedException | ExecutionException ex) {"], [121, "                    LOGGER.error(\"\u83b7\u53d6\u5206\u8bcd\u7ed3\u679c\u5931\u8d25\", ex);"], [122, "                }"], [123, "            }"], [124, "            futures.clear();"], [125, "        }"], [126, "        if(refine) {"], [127, "            LOGGER.debug(\"\u5bf9\u5206\u8bcd\u7ed3\u679c\u8fdb\u884crefine\u4e4b\u524d\uff1a{}\", result);"], [128, "            List<Word> finalResult = refine(result);"], [129, "            LOGGER.debug(\"\u5bf9\u5206\u8bcd\u7ed3\u679c\u8fdb\u884crefine\u4e4b\u540e\uff1a{}\", finalResult);"], [130, "            result.clear();"], [131, "            return finalResult;"], [132, "        }else{"], [133, "            return result;"], [134, "        }"], [135, "    }"], [136, ""], [137, "    /**"], [138, "     * \u5148\u62c6\u8bcd\uff0c\u518d\u7ec4\u8bcd"], [139, "     * @param words"], [140, "     * @return"], [141, "     */"], [142, "    private List<Word> refine(List<Word> words){"], [143, "        List<Word> result = new ArrayList<>(words.size());"], [144, "        //\u4e00\uff1a\u62c6\u8bcd"], [145, "        for(Word word : words){"], [146, "            List<Word> splitWords = WordRefiner.split(word);"], [147, "            if(splitWords==null){"], [148, "                result.add(word);"], [149, "            }else{"], [150, "                LOGGER.debug(\"\u8bcd\uff1a \"+word.getText()+\" \u88ab\u62c6\u5206\u4e3a\uff1a\"+splitWords);"], [151, "                result.addAll(splitWords);"], [152, "            }"], [153, "        }"], [154, "        LOGGER.debug(\"\u5bf9\u5206\u8bcd\u7ed3\u679c\u8fdb\u884crefine\u9636\u6bb5\u7684\u62c6\u8bcd\u4e4b\u540e\uff1a{}\",result);"], [155, "        //\u4e8c\uff1a\u7ec4\u8bcd"], [156, "        if(result.size()<2){"], [157, "            return result;"], [159, "        int combineMaxLength = WordConfTools.getInt(\"word.refine.combine.max.length\", 3);"], [160, "        if(combineMaxLength < 2){"], [161, "            combineMaxLength = 2;"], [163, "        List<Word> finalResult = new ArrayList<>(result.size());"], [164, "        for(int i=0; i<result.size(); i++){"], [165, "            List<Word> toCombineWords = null;"], [166, "            Word combinedWord = null;"], [167, "            for(int j=2; j<=combineMaxLength; j++){"], [168, "                int to = i+j;"], [169, "                if(to > result.size()){"], [170, "                    to = result.size();"], [171, "                }"], [172, "                toCombineWords = result.subList(i, to);"], [173, "                combinedWord = WordRefiner.combine(toCombineWords);"], [174, "                if(combinedWord != null){"], [175, "                    i += j;"], [176, "                    i--;"], [177, "                    break;"], [179, "            }"], [180, "            if(combinedWord == null){"], [181, "                finalResult.add(result.get(i));"], [182, "            }else{"], [183, "                LOGGER.debug(\"\u8bcd\uff1a \"+toCombineWords+\" \u88ab\u5408\u5e76\u4e3a\uff1a\"+combinedWord);"], [184, "                finalResult.add(combinedWord);"], [187, "        return finalResult;"]]}, "num_lines_added": 17, "num_lines_removed": 81}