 @Override
	public Object run() {
		long startTime = System.currentTimeMillis();

		RequestContext context = RequestContext.getCurrentContext();
		HttpServletRequest request = context.getRequest();
		HttpHost httpHost = new HttpHost(
				context.getRouteHost().getHost(),
				context.getRouteHost().getPort(),
				context.getRouteHost().getProtocol());

		Long operationId = (Long) context.get(OPERATION_ID);
		String operationPath = (String) context.get(OPERATION_PATH);

		try {
			Callable<Object> callable = super::run;
			Object obj = circuitBreakerManager.failsafe(callable, operationId, operationPath);
			detail.setStatus(Constants.SUCCESS);
			return obj;
		} catch (Exception e) {
			detail.setStatus(Constants.FAILED);
			log.error("Exception: {} - Message: {} - during routing request to (hostPath + uri): {} - Verb: {} - HostName: {} - Port: {} - SchemeName: {}",
					e.getClass().getName(), 
					e.getMessage(), 
					request.getRequestURI(),
					request.getMethod().toUpperCase(),
					httpHost.getHostName(),
					httpHost.getPort(), 
					httpHost.getSchemeName());
			throw e;
		} finally {
			long endTime = System.currentTimeMillis();

			long duration = (endTime - startTime);

			detail.setName(this.getClass().getSimpleName());
			detail.setTimeInMillisRun(duration);
			TraceContextHolder.getInstance().getActualTrace().addFilter(detail);
		}
	}