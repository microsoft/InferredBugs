{"hash": "44e23eca8bd8cda21cf499d314d54c95af069bc3", "message": "Middleware failsafe (#248)\n\n* Added failsafe to middleware calls\r\nAdjusted failsafe so it logs the last exception before the circuit opens\r\n\r\n* Removed unnecessary exception validation as it is already handled\r\n\r\n* Changed log level to info\r\nAdded circuit breaker message to trace\r\n\r\n* Removed unnecessary methods\r\n\r\n* Resolved conflicts\r\n\r\n* Updated unit tests\r\n\r\n* Updated dependency", "file_num_lines": 68, "diff_parsed": {"added": [[10, " *"], [12, " *"], [20, "package br.com.conductor.heimdall.gateway.filter;"], [22, "import br.com.conductor.heimdall.core.util.Constants;"], [23, "import br.com.conductor.heimdall.gateway.failsafe.CircuitBreakerManager;"], [24, "import br.com.conductor.heimdall.gateway.trace.FilterDetail;"], [25, "import br.com.conductor.heimdall.gateway.trace.TraceContextHolder;"], [26, "import com.netflix.zuul.context.RequestContext;"], [27, "import lombok.extern.slf4j.Slf4j;"], [33, "import javax.servlet.http.HttpServletRequest;"], [34, "import java.util.concurrent.Callable;"], [36, "import static br.com.conductor.heimdall.gateway.util.ConstantsContext.OPERATION_ID;"], [37, "import static br.com.conductor.heimdall.gateway.util.ConstantsContext.OPERATION_PATH;"], [87, "\t\tHttpHost httpHost = new HttpHost("], [88, "\t\t\t\tcontext.getRouteHost().getHost(),"], [89, "\t\t\t\tcontext.getRouteHost().getPort(),"], [90, "\t\t\t\tcontext.getRouteHost().getProtocol());"], [93, "\t\tString operationPath = (String) context.get(OPERATION_PATH);"], [96, "\t\t\tCallable<Object> callable = super::run;"], [97, "\t\t\tObject obj = circuitBreakerManager.failsafe(callable, operationId, operationPath);"], [105, "\t\t\t\t\trequest.getRequestURI(),"], [106, "\t\t\t\t\trequest.getMethod().toUpperCase(),"], [107, "\t\t\t\t\thttpHost.getHostName(),"]], "deleted": [[1, ""], [2, "package br.com.conductor.heimdall.gateway.filter;"], [3, ""], [4, "import static br.com.conductor.heimdall.gateway.util.ConstantsContext.OPERATION_ID;"], [5, ""], [15, " *"], [17, " *"], [26, "import java.net.URL;"], [27, "import java.util.concurrent.Callable;"], [28, ""], [29, "import javax.servlet.http.HttpServletRequest;"], [30, ""], [36, "import com.netflix.zuul.context.RequestContext;"], [38, "import br.com.conductor.heimdall.core.util.Constants;"], [39, "import br.com.conductor.heimdall.gateway.failsafe.CircuitBreakerManager;"], [40, "import br.com.conductor.heimdall.gateway.trace.FilterDetail;"], [41, "import br.com.conductor.heimdall.gateway.trace.TraceContextHolder;"], [42, "import lombok.extern.slf4j.Slf4j;"], [53, "     private ProxyRequestHelper helper;"], [65, "          this.helper = helper;"], [94, "\t\tString verb = getVerb(request);"], [95, "\t\tString uri = this.helper.buildZuulRequestURI(request);"], [96, "\t\tURL host = RequestContext.getCurrentContext().getRouteHost();"], [97, "\t\tHttpHost httpHost = getHttpHost(host);"], [102, "\t\t\tCallable<Object> callable = () -> super.run();"], [103, "\t\t\tObject obj = circuitBreakerManager.failsafe(callable, operationId);"], [111, "\t\t\t\t\trequest.getRequestURI(),"], [112, "\t\t\t\t\tverb, httpHost.getHostName(),"], [126, ""], [127, "     private String getVerb(HttpServletRequest request) {"], [128, "          String sMethod = request.getMethod();"], [129, "          return sMethod.toUpperCase();"], [130, "     }"], [131, ""], [132, "     private HttpHost getHttpHost(URL host) {"], [133, "          HttpHost httpHost = new HttpHost(host.getHost(), host.getPort(), host.getProtocol());"], [134, "          return httpHost;"], [135, "     }"]]}, "num_lines_added": 23, "num_lines_removed": 38}