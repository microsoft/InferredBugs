{"hash": "3580feabc65a46430a23f335b75a53ba122a1649", "message": "Added validation for a pattern that is already registered in the gateway", "file_num_lines": 145, "diff_parsed": {"added": [[31, "import br.com.conductor.heimdall.core.repository.jdbc.OperationJDBCRepository;"], [56, "import static br.com.conductor.heimdall.core.exception.ExceptionMessage.*;"], [57, ""], [78, "     private OperationJDBCRepository operationJDBCRepository;"], [79, ""], [80, "     @Autowired"], [194, "          boolean patternExists = operationJDBCRepository.countPattern(resource.getApi().getBasePath() + \"/\" + operation.getPath());"], [195, "          HeimdallException.checkThrow(patternExists, OPERATION_ROUTE_ALREADY_EXISTS);"], [196, ""], [233, "         boolean patternExists = operationJDBCRepository.countPattern(operation.getResource().getApi().getBasePath() + \"/\" + operation.getPath());"], [234, "         HeimdallException.checkThrow(patternExists, OPERATION_ROUTE_ALREADY_EXISTS);"], [235, ""], [236, "         HeimdallException.checkThrow(validateSingleWildCardOperationPath(operation), OPERATION_CANT_HAVE_SINGLE_WILDCARD);"]], "deleted": [[24, "import static br.com.conductor.heimdall.core.exception.ExceptionMessage.GLOBAL_RESOURCE_NOT_FOUND;"], [25, "import static br.com.conductor.heimdall.core.exception.ExceptionMessage.ONLY_ONE_OPERATION_PER_RESOURCE;"], [26, "import static br.com.conductor.heimdall.core.exception.ExceptionMessage.OPERATION_CANT_HAVE_SINGLE_WILDCARD;"], [27, "import static br.com.conductor.heimdall.core.exception.ExceptionMessage.OPERATION_CANT_HAVE_DOUBLE_WILDCARD_NOT_AT_THE_END;"], [28, ""], [175, ""], [176, "     /**"], [177, "      * Saves a {@link Operation} to the repository."], [178, "      *"], [179, "      * @param  apiId\t\t\t\t\t\tThe {@link br.com.conductor.heimdall.core.entity.Api} Id"], [180, "      * @param \tresourceId\t\t\t\t\tThe {@link Resource} Id"], [181, "      * @param \toperationDTO\t\t\t\tThe {@link OperationDTO}"], [182, "      * @return\t\t\t\t\t\t\t\tThe saved {@link Operation}"], [183, "      */"], [184, "     @Transactional"], [185, "     public Operation save(Long apiId, Long resourceId, OperationDTO operationDTO) {"], [186, ""], [187, "          Resource resource = resourceRepository.findByApiIdAndId(apiId, resourceId);"], [188, "          HeimdallException.checkThrow(resource == null, GLOBAL_RESOURCE_NOT_FOUND);"], [189, ""], [190, "          Operation resData = operationRepository.findByResourceApiIdAndMethodAndPath(apiId, operationDTO.getMethod(), operationDTO.getPath());"], [191, "          HeimdallException.checkThrow(resData != null &&"], [192, "                  Objects.equals(resData.getResource().getId(), resource.getId()), ONLY_ONE_OPERATION_PER_RESOURCE);"], [193, ""], [194, "          Operation operation = GenericConverter.mapper(operationDTO, Operation.class);"], [195, "          operation.setResource(resource);"], [196, "          operation.setPath(StringUtils.removeMultipleSlashes(operation.getPath()));"], [197, ""], [198, "          HeimdallException.checkThrow(validateSingleWildCardOperationPath(operation), OPERATION_CANT_HAVE_SINGLE_WILDCARD);"], [199, "          HeimdallException.checkThrow(validateDoubleWildCardOperationPath(operation), OPERATION_CANT_HAVE_DOUBLE_WILDCARD_NOT_AT_THE_END);"], [200, ""], [201, "          operation = operationRepository.save(operation);"], [202, ""], [203, "          amqpRoute.dispatchRoutes();"], [204, ""], [205, "          return operation;"], [206, "     }"], [261, "          HeimdallException.checkThrow(validateSingleWildCardOperationPath(operation), OPERATION_CANT_HAVE_SINGLE_WILDCARD);"]]}, "num_lines_added": 13, "num_lines_removed": 38}