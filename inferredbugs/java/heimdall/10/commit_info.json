{"hash": "a7476941ace76e3f13d910a6cb634d51f63d9ee2", "message": "Changed the way that the response body is handled by the CacheWriterFilter to match the LogResponseFilter\nThat way the body is not consumed by the filter", "file_num_lines": 62, "diff_parsed": {"added": [[28, "import br.com.conductor.heimdall.gateway.util.ResponseHandler;"], [30, "import com.netflix.zuul.ZuulFilter;"], [31, "import com.netflix.zuul.context.RequestContext;"], [32, "import org.apache.commons.lang.exception.ExceptionUtils;"], [33, "import org.springframework.beans.factory.annotation.Autowired;"], [34, "import org.springframework.stereotype.Component;"], [35, ""], [36, "import java.util.Map;"], [37, ""], [38, "import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.POST_TYPE;"], [49, ""], [98, "        Map<String, String> headers = ResponseHandler.getResponseHeaders(ctx);"], [101, "        String body = ResponseHandler.getResponseBody(ctx, headers, helper);"], [102, "        r.setBody(body);"]], "deleted": [[22, "import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.POST_TYPE;"], [23, ""], [24, "import java.io.ByteArrayInputStream;"], [25, "import java.io.InputStream;"], [26, "import java.nio.charset.StandardCharsets;"], [27, "import java.util.Collection;"], [28, "import java.util.HashMap;"], [29, "import java.util.Map;"], [30, "import java.util.Objects;"], [31, ""], [32, "import javax.servlet.http.HttpServletResponse;"], [33, ""], [34, "import org.apache.commons.lang.exception.ExceptionUtils;"], [35, "import org.springframework.beans.factory.annotation.Autowired;"], [36, "import org.springframework.http.HttpHeaders;"], [37, "import org.springframework.stereotype.Component;"], [38, "import org.springframework.util.StreamUtils;"], [39, ""], [40, "import com.netflix.zuul.ZuulFilter;"], [41, "import com.netflix.zuul.context.RequestContext;"], [42, ""], [44, "import br.com.conductor.heimdall.core.util.ContentTypeUtils;"], [51, "import br.com.twsoftware.alfred.object.Objeto;"], [52, "import lombok.Cleanup;"], [108, ""], [112, "        Map<String, String> headers = getResponseHeaders(ctx);"], [115, "        String content = headers.get(HttpHeaders.CONTENT_TYPE);"], [116, ""], [117, "        // if the content type is not defined by api server then permit to read the body. Prevent NPE"], [118, "        if (Objeto.isBlank(content)) content = \"\";"], [119, ""], [120, "        String[] types = content.split(\";\");"], [121, ""], [122, "        if (!ContentTypeUtils.belongsToBlackList(types)) {"], [123, "        \t@Cleanup"], [124, "            InputStream stream = ctx.getResponseDataStream();"], [125, "            String body;"], [127, "            body = StreamUtils.copyToString(stream, StandardCharsets.UTF_8);"], [128, ""], [129, "            if (body.isEmpty() && helper.call().response().getBody() != null) {"], [130, ""], [131, "            \tbody = helper.call().response().getBody();"], [132, "            }"], [133, ""], [134, "            if (Objects.nonNull(body) && !body.isEmpty()) {"], [135, ""], [136, "            \tr.setBody(body);"], [137, "            }"], [138, "            ctx.setResponseDataStream(new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_8)));"], [139, "        }"], [143, "    private Map<String, String> getResponseHeaders(RequestContext context) {"], [144, "        Map<String, String> headers = new HashMap<>();"], [145, ""], [146, "        final HttpServletResponse response = context.getResponse();"], [147, ""], [148, "        context.getZuulResponseHeaders().stream().forEach(pair -> headers.put(pair.first(), pair.second()));"], [149, ""], [150, "        final Collection<String> headerNames = response.getHeaderNames();"], [151, ""], [152, "        headerNames.forEach(s -> headers.putIfAbsent(s, response.getHeader(s)));"], [153, ""], [154, "        return headers;"], [155, "    }"], [156, ""]]}, "num_lines_added": 14, "num_lines_removed": 64}