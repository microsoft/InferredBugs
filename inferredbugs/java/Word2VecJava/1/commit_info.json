{"hash": "ae79d7eb5ffa9e2faea9ffac9795b13283fbf9b3", "message": "Loads big models in bin file format faster", "file_num_lines": 172, "diff_parsed": {"added": [[9, "import java.nio.FloatBuffer;"], [10, "import java.nio.MappedByteBuffer;"], [11, "import java.nio.channels.FileChannel;"], [12, "import java.nio.file.Files;"], [13, "import java.util.ArrayList;"], [25, "import org.slf4j.Logger;"], [26, "import org.slf4j.LoggerFactory;"], [40, "\tstatic Logger logger = LoggerFactory.getLogger(Word2VecModel.class);"], [41, ""], [104, "\t\t\tfinal FileChannel channel = fis.getChannel();"], [105, "\t\t\tfinal long oneGB = 1024 * 1024 * 1024;"], [106, "\t\t\tMappedByteBuffer buffer ="], [107, "\t\t\t\t\tchannel.map("], [108, "\t\t\t\t\t\t\tFileChannel.MapMode.READ_ONLY,"], [109, "\t\t\t\t\t\t\t0,"], [110, "\t\t\t\t\t\t\tMath.min(channel.size(), Integer.MAX_VALUE));"], [111, "\t\t\tbuffer.order(byteOrder);"], [112, "\t\t\tint bufferCount = 1;"], [113, "\t\t\t\t// Java's NIO only allows memory-mapping up to 2GB. To work around this problem, we re-map"], [114, "\t\t\t  // every gigabyte. To calculate offsets correctly, we have to keep track how many gigabytes"], [115, "\t\t\t  // we've already skipped. That's what this is for."], [118, "      char c = (char)buffer.get();"], [121, "        c = (char)buffer.get();"], [126, "\t\t\t\t\t\"Expected a space in the first line of file '%s': '%s'\","], [127, "\t\t\t\t\tfile.getAbsolutePath(), firstLine);"], [129, "\t\t\tfinal int vocabSize = Integer.parseInt(firstLine.substring(0, index));"], [130, "      final int layerSize = Integer.parseInt(firstLine.substring(index + 1));"], [131, "\t\t\tlogger.info("], [132, "\t\t\t\t\tString.format(\"Loading %d vectors with dimensionality %d\", vocabSize, layerSize));"], [134, "\t\t\tList<String> vocabs = new ArrayList<String>(vocabSize);"], [135, "\t\t\tdouble vectors[] = new double[vocabSize * layerSize];"], [137, "\t\t\tlong lastLogMessage = System.currentTimeMillis();"], [138, "\t\t\tfinal float[] floats = new float[layerSize];"], [140, "\t\t\t\t// read vocab"], [141, "\t\t\t\tsb.setLength(0);"], [142, "        c = (char)buffer.get();"], [149, "          c = (char)buffer.get();"], [153, "\t\t\t\t// read vector"], [154, "\t\t\t\tfinal FloatBuffer floatBuffer = buffer.asFloatBuffer();"], [155, "\t\t\t\tfloatBuffer.get(floats);"], [156, "\t\t\t\tfor(int i = 0; i < floats.length; ++i) {"], [157, "\t\t\t\t\tvectors[lineno * layerSize + i] = floats[i];"], [158, "\t\t\t\t}"], [159, "\t\t\t\tbuffer.position(buffer.position() + 4 * layerSize);"], [160, ""], [161, "\t\t\t\t// print log"], [162, "\t\t\t\tfinal long now = System.currentTimeMillis();"], [163, "\t\t\t\tif(now - lastLogMessage > 1000) {"], [164, "\t\t\t\t\tfinal double percentage = ((double)(lineno + 1) / (double)vocabSize) * 100.0;"], [165, "\t\t\t\t\tlogger.info("], [166, "\t\t\t\t\t\t\tString.format(\"Loaded %d/%d vectors (%f%%)\", lineno + 1, vocabSize, percentage));"], [167, "\t\t\t\t\tlastLogMessage = now;"], [168, "\t\t\t\t}"], [169, ""], [170, "\t\t\t\t// remap file"], [171, "\t\t\t\tif(buffer.position() > oneGB) {"], [172, "\t\t\t\t\tfinal int newPosition = (int)(buffer.position() - oneGB);"], [173, "\t\t\t\t\tfinal long size = Math.min(channel.size() - oneGB * bufferCount, Integer.MAX_VALUE);"], [174, "\t\t\t\t\tlogger.debug("], [175, "\t\t\t\t\t\t\tString.format("], [176, "\t\t\t\t\t\t\t\t\t\"Remapping for GB number %d. Start: %d, size: %d\","], [177, "\t\t\t\t\t\t\t\t\tbufferCount,"], [178, "\t\t\t\t\t\t\t\t\toneGB * bufferCount,"], [179, "\t\t\t\t\t\t\t\t\tsize));"], [180, "\t\t\t\t\tbuffer = channel.map("], [181, "\t\t\t\t\t\t\tFileChannel.MapMode.READ_ONLY,"], [182, "\t\t\t\t\t\t\toneGB * bufferCount,"], [183, "\t\t\t\t\t\t\tsize);"], [184, "\t\t\t\t\tbuffer.order(byteOrder);"], [185, "\t\t\t\t\tbuffer.position(newPosition);"], [186, "\t\t\t\t\tbufferCount += 1;"], [187, "\t\t\t\t}"], [190, "\t\t\treturn new Word2VecModel(vocabs, layerSize,\tvectors);"]], "deleted": [[95, "      DataInput in = (byteOrder == ByteOrder.BIG_ENDIAN) ?"], [96, "          new DataInputStream(fis) : new SwappedDataInputStream(fis);"], [99, "      char c = (char) in.readByte();"], [102, "        c = (char) in.readByte();"], [107, "          \"Expected a space in the first line of file '%s': '%s'\","], [108, "          file.getAbsolutePath(), firstLine);"], [110, "      int vocabSize = Integer.parseInt(firstLine.substring(0, index));"], [111, "      int layerSize = Integer.parseInt(firstLine.substring(index + 1));"], [113, "      List<String> vocabs = Lists.newArrayList();"], [114, "      List<Double> vectors = Lists.newArrayList();"], [117, "        sb = new StringBuilder();"], [118, "        c = (char) in.readByte();"], [125, "          c = (char) in.readByte();"], [129, "        for (int i = 0; i < layerSize; i++) {"], [130, "          vectors.add((double) in.readFloat());"], [131, "        }"], [134, "      return fromThrift(new Word2VecModelThrift()"], [135, "          .setLayerSize(layerSize)"], [136, "          .setVocab(vocabs)"], [137, "          .setVectors(vectors));"]]}, "num_lines_added": 73, "num_lines_removed": 20}