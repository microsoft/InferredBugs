{"hash": "babb8964a2ec3f0110edb21bee13ddbebef10659", "message": "rpc fix nio connector write interrupted close ch.", "file_num_lines": 167, "diff_parsed": {"added": [[10, "import java.util.LinkedList;"], [11, "import java.util.List;"], [20, "import com.linda.framework.rpc.net.AbstractRpcConnector;"], [21, "import com.linda.framework.rpc.net.RpcOutputNofity;"], [24, "public class RpcNioSelection implements Service,RpcOutputNofity{"], [30, "\tprivate List<RpcNioConnector> connectors;"], [36, "\tpublic RpcNioSelection(RpcNioAcceptor acceptor){"], [41, "\t\t\tconnectors = new LinkedList<RpcNioConnector>();"], [63, "\t\tconnectors.add(connector);"], [96, "\t\t\tsynchronized(connector){"], [97, "\t\t\t\tByteBuffer buffer = connector.getReadBuf();"], [98, "\t\t\t\tint read = client.read(buffer);"], [99, "\t\t\t\tif(read>0){"], [100, "\t\t\t\t\tbuffer.flip();"], [101, "\t\t\t\t\tRpcObject rpc = NioUtils.readBuffer(buffer);"], [102, "\t\t\t\t\trpc.setHost(connector.getRemoteHost());"], [103, "\t\t\t\t\trpc.setPort(connector.getRemotePort());"], [104, "\t\t\t\t\trpc.setRpcContext(connector.getRpcContext());"], [105, "\t\t\t\t\tconnector.fireCall(rpc);"], [106, "\t\t\t\t\tresult = true;"], [107, "\t\t\t\t}"], [108, "\t\t\t\tbuffer.clear();"], [110, "\t\t}"], [111, "\t\treturn result;"], [112, "\t}"], [113, ""], [114, "\tpublic boolean doWrite(SelectionKey selectionKey) {"], [115, "\t\tboolean result = false;"], [116, "\t\tSocketChannel channel = (SocketChannel)selectionKey.channel();"], [117, "\t\tRpcNioConnector connector = connectorCache.get(channel);"], [118, "\t\tif(connector.isNeedToSend()){"], [119, "\t\t\tsynchronized (connector) {"], [120, "\t\t\t\twhile(connector.isNeedToSend()){"], [121, "\t\t\t\t\tByteBuffer buffer = connector.getWriteBuf();"], [122, "\t\t\t\t\tRpcObject rpc = connector.getToSend();"], [123, "\t\t\t\t\tNioUtils.writeBuffer(buffer,rpc);"], [124, "\t\t\t\t\tbuffer.flip();"], [125, "\t\t\t\t\ttry {"], [126, "\t\t\t\t\t\tchannel.write(buffer);"], [127, "\t\t\t\t\t} catch (IOException e) {"], [128, "\t\t\t\t\t\te.printStackTrace();"], [129, "\t\t\t\t\t}"], [130, "\t\t\t\t\tbuffer.clear();"], [131, "\t\t\t\t\tresult=true;"], [132, "\t\t\t\t}"], [133, "\t\t\t}"], [134, "\t\t\tselectionKey.interestOps(SelectionKey.OP_READ);"], [148, "\t\t\tif(selectionKey.isWritable()){"], [149, "\t\t\t\tresult = doWrite(selectionKey);"], [150, "\t\t\t}"], [162, "\t\t\t\tcheckSend();"], [175, ""], [176, "\tprivate void checkSend(){"], [177, "\t\tfor(RpcNioConnector connector:connectors){"], [178, "\t\t\tif(connector.isNeedToSend()){"], [179, "\t\t\t\tSelectionKey selectionKey = connector.getChannel().keyFor(selector);"], [180, "\t\t\t\tselectionKey.interestOps(SelectionKey.OP_WRITE|SelectionKey.OP_READ);"], [181, "\t\t\t}"], [182, "\t\t}"], [183, "\t}"], [184, ""], [185, "\t@Override"], [186, "\tpublic void notifySend(AbstractRpcConnector connector) {"], [187, "\t\tselector.wakeup();"], [188, "\t}"]], "deleted": [[20, "public class RpcNioSelection implements Service{"], [27, "\tprivate RpcNioWriter writer;"], [32, "\tpublic RpcNioSelection(RpcNioAcceptor acceptor,RpcNioWriter writer){"], [37, "\t\t\tthis.writer = writer;"], [59, "\t\twriter.registerWrite(connector);"], [65, "\t\t\twriter.startService();"], [74, "\t\twriter.stopService();"], [94, "\t\t\tByteBuffer buffer = connector.getReadBuf();"], [95, "\t\t\tint read = client.read(buffer);"], [96, "\t\t\tif(read>0){"], [97, "\t\t\t\tbuffer.flip();"], [98, "\t\t\t\tRpcObject rpc = NioUtils.readBuffer(buffer);"], [99, "\t\t\t\trpc.setHost(connector.getRemoteHost());"], [100, "\t\t\t\trpc.setPort(connector.getRemotePort());"], [101, "\t\t\t\trpc.setRpcContext(connector.getRpcContext());"], [102, "\t\t\t\tconnector.fireCall(rpc);"], [103, "\t\t\t\tresult = true;"], [105, "\t\t\tbuffer.clear();"], [124, ""], [125, "\tpublic RpcNioWriter getWriter() {"], [126, "\t\treturn writer;"], [127, "\t}"], [128, ""], [129, "\tpublic void setWriter(RpcNioWriter writer) {"], [130, "\t\tthis.writer = writer;"], [131, "\t}"]]}, "num_lines_added": 65, "num_lines_removed": 26}