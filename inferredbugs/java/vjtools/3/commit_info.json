{"hash": "61ca8e5e4669157977c7a51131dfa534a3ce56a2", "message": "\uff0339 \u91cd\u6784\u4ee3\u7801", "file_num_lines": 78, "diff_parsed": {"added": [[22, "\tprivate static Logger logger = LoggerFactory.getLogger(ProactiveGcTask.class);"], [26, ""], [28, "\tprivate long maxOldBytes;"], [33, "\t\tthis.oldMemoryPool = getOldGenMemoryPool();"], [34, "\t\tthis.maxOldBytes = getMemoryPoolMaxOrCommitted(oldMemoryPool);"], [38, "\t\tlogger.info(\"ProactiveGcTask starting, oldGenOccupancyFraction:\" + oldGenOccupancyFraction);"], [40, "\t\t\tlong usedOldBytes = logOldGenStatus();"], [41, ""], [42, "\t\t\tif (needTriggerGc(maxOldBytes, usedOldBytes, oldGenOccupancyFraction)) {"], [48, "\t\t\tlogger.error(e.getMessage(), e);"], [50, "\t\t\tscheduler.reschedule(this);"], [54, "\tpublic long logOldGenStatus() {"], [55, "\t\tlong usedOldBytes = oldMemoryPool.getUsage().getUsed();"], [56, "\t\tlogger.info(String.format(\"max old gen: %s, used old gen: %s, available old gen: %s.\","], [57, "\t\t\t\tUnitConverter.toSizeUnit(maxOldBytes, 2), UnitConverter.toSizeUnit(usedOldBytes, 2),"], [58, "\t\t\t\tUnitConverter.toSizeUnit(maxOldBytes - usedOldBytes, 2)));"], [59, "\t\treturn usedOldBytes;"], [60, "\t}"], [61, ""], [62, "\tprivate MemoryPoolMXBean getOldGenMemoryPool() {"], [63, "\t\tMemoryPoolMXBean oldGenMemoryPool = null;"], [66, "\t\t\tString name = memoryPool.getName().trim().toLowerCase();"], [67, "\t\t\tif (name.contains(OLD) || name.contains(TENURED)) {"], [68, "\t\t\t\toldGenMemoryPool = memoryPool;"], [72, ""], [73, "\t\treturn oldGenMemoryPool;"], [79, "\t\treturn max < 0 ? usage.getCommitted() : max;"], [100, "\t\tlogger.warn(\"old gen is occupied larger than occupancy fraction[{}], trying to trigger gc...\","], [108, "\t\tlong usedOldBytes = oldMemoryPool.getUsage().getUsed();"], [109, "\t\tlogger.info(String.format(\"max old gen: %s, used old gen: %s, available old gen: %s, after gc.\","], [110, "\t\t\t\tUnitConverter.toSizeUnit(maxOldBytes, 2), UnitConverter.toSizeUnit(usedOldBytes, 2),"], [111, "\t\t\t\tUnitConverter.toSizeUnit((maxOldBytes - usedOldBytes), 2))); // NOSONAR"]], "deleted": [[6, "import java.util.Date;"], [8, "import java.util.concurrent.ScheduledExecutorService;"], [9, "import java.util.concurrent.TimeUnit;"], [14, "import com.vip.vjtools.vjkit.number.SizeUnit;"], [26, "\tprivate static Logger log = LoggerFactory.getLogger(ProactiveGcTask.class);"], [38, "\t\tlog.info(\"ProactiveGcTask starting, oldGenOccupancyFraction:\" + oldGenOccupancyFraction + \", datetime: \""], [39, "\t\t\t\t+ new Date());"], [41, "\t\t\toldMemoryPool = getOldMemoryPool();"], [42, "\t\t\tlong maxOldBytes = getMemoryPoolMaxOrCommitted(oldMemoryPool);"], [43, "\t\t\tlong oldUsedBytes = oldMemoryPool.getUsage().getUsed();"], [44, "\t\t\tlog.info(String.format(\"max old gen: %.2f MB, used old gen: %.2f MB, available old gen: %.2f MB.\","], [45, "\t\t\t\t\tSizeUnit.BYTES.toMegaBytes(maxOldBytes), SizeUnit.BYTES.toMegaBytes(oldUsedBytes),"], [46, "\t\t\t\t\tSizeUnit.BYTES.toMegaBytes(maxOldBytes - oldUsedBytes)));"], [47, "\t\t\tif (needTriggerGc(maxOldBytes, oldUsedBytes, oldGenOccupancyFraction)) {"], [53, "\t\t\tlog.error(e.getMessage(), e);"], [55, "\t\t\tif (!scheduler.isShutdown()) { // reschedule this task"], [56, "\t\t\t\ttry {"], [57, "\t\t\t\t\tscheduler.reschedule(this);"], [58, "\t\t\t\t} catch (Exception e) {"], [59, "\t\t\t\t\tlog.error(e.getMessage(), e);"], [60, "\t\t\t\t}"], [61, "\t\t\t}"], [65, "\tprivate MemoryPoolMXBean getOldMemoryPool() {"], [66, "\t\tMemoryPoolMXBean oldMemoryPool = null;"], [69, "\t\t\tString name = memoryPool.getName().trim();"], [70, "\t\t\tString lowerCaseName = name.toLowerCase();"], [71, "\t\t\tif (lowerCaseName.contains(OLD) || lowerCaseName.contains(TENURED)) {"], [72, "\t\t\t\toldMemoryPool = memoryPool;"], [76, "\t\treturn oldMemoryPool;"], [82, "\t\tmax = max < 0 ? usage.getCommitted() : max;"], [83, "\t\treturn max;"], [88, "\t *"], [89, "\t * @param capacityBytes"], [90, "\t *            old gen capacity"], [91, "\t * @param usedBytes"], [92, "\t *            used old gen"], [93, "\t * @param occupancyFraction"], [94, "\t *            old gen used fraction"], [95, "\t * @return"], [112, "\t\tlog.warn(\"old gen is occupied larger than occupancy fraction[{}], trying to trigger gc...\","], [120, "\t\tlong maxOldBytes = getMemoryPoolMaxOrCommitted(oldMemoryPool);"], [121, "\t\tlong oldUsedBytes = oldMemoryPool.getUsage().getUsed();"], [122, "\t\tlog.info(String.format(\"max old gen: %sf, used old gen: %s, available old gen: %.2f MB, after gc.\","], [123, "\t\t\t\tUnitConverter.toSizeUnit(maxOldBytes, 1), UnitConverter.toSizeUnit(oldUsedBytes, 1),"], [124, "\t\t\t\tUnitConverter.toSizeUnit((maxOldBytes - oldUsedBytes), 1))); // NOSONAR"], [125, "\t\toldMemoryPool = null;"]]}, "num_lines_added": 32, "num_lines_removed": 46}