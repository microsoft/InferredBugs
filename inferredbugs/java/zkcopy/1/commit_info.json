{"hash": "13d6a23351f31ac9d988939e9c9030aa1b0a810a", "message": "#3: CLI improvement\n\nUse commons-cli for reading configuration from command line.", "file_num_lines": 182, "diff_parsed": {"added": [[4, "import com.github.ksprojects.zkcopy.reader.Reader;"], [6, "import org.apache.commons.cli.*;"], [9, "public class ZkCopy {"], [10, ""], [11, "    private static final Logger LOGGER = Logger.getLogger(ZkCopy.class);"], [12, "    private static final int DEFAULT_THREADS_NUMBER = 10;"], [13, "    private static final boolean DEFAULT_REMOVE_DEPRECATED_NODES = true;"], [14, "    private static final String HELP = \"help\";"], [15, "    private static final String SOURCE = \"source\";"], [16, "    private static final String TARGET = \"target\";"], [17, "    private static final String WORKERS = \"workers\";"], [18, "    private static final String COPY_ONLY = \"copyOnly\";"], [19, ""], [20, "    public static void main(String[] args) {"], [21, "        Configuration cfg = parseLegacyConfiguration();"], [22, "        if (cfg == null) {"], [23, "            cfg = parseConfiguration(args);"], [24, "        }"], [25, "        if (cfg == null) {"], [26, "            Options options = createOptions();"], [27, "            printHelp(options);"], [30, "        String sourceAddress = cfg.source();"], [31, "        String destinationAddress = cfg.target();"], [32, "        int threads = cfg.workers();"], [33, "        boolean removeDeprecatedNodes = !cfg.copyOnly();"], [34, "        LOGGER.info(\"using \" + threads + \" concurrent workers to copy data\");"], [35, "        Reader reader = new Reader(sourceAddress, threads);"], [36, "        Node root = reader.read();"], [37, "        if (root != null) {"], [38, "            Writer writer = new Writer(destinationAddress, root, removeDeprecatedNodes);"], [39, "            writer.write();"], [40, "        } else {"], [41, "            LOGGER.error(\"FAILED\");"], [42, "        }"], [43, "    }"], [44, ""], [45, "    private static void printHelp(Options options) {"], [46, "        HelpFormatter formatter = new HelpFormatter();"], [47, "        formatter.printHelp(\"zkcopy\", options);"], [48, "    }"], [49, ""], [50, "    private static Configuration parseConfiguration(String[] args) {"], [51, "        Options options = createOptions();"], [52, "        CommandLineParser parser = new DefaultParser();"], [53, "        try {"], [54, "            CommandLine line = parser.parse(options, args);"], [55, "            if (line.hasOption(HELP)) {"], [56, "                printHelp(options);"], [57, "                return null;"], [58, "            }"], [59, "            if (!line.hasOption(SOURCE) || !line.hasOption(TARGET)) {"], [60, "                return null;"], [61, "            }"], [62, "            String sourceValue = getString(line, SOURCE);"], [63, "            String targetValue = getString(line, TARGET);"], [64, "            int workersValue = getInteger(line, WORKERS, DEFAULT_THREADS_NUMBER);"], [65, "            boolean copyOnlyValue = getBoolean(line, TARGET, !DEFAULT_REMOVE_DEPRECATED_NODES);"], [66, "            return ImmutableConfiguration.builder()"], [67, "                    .source(sourceValue)"], [68, "                    .target(targetValue)"], [69, "                    .workers(workersValue)"], [70, "                    .copyOnly(copyOnlyValue)"], [71, "                    .build();"], [72, "        } catch (ParseException exp) {"], [73, "            LOGGER.error(\"Could not parse options.  Reason: \" + exp.getMessage());"], [74, "            return null;"], [75, "        }"], [76, "    }"], [77, ""], [78, "    private static Options createOptions() {"], [79, "        Options options = new Options();"], [80, ""], [81, "        Option help = Option.builder(\"h\")"], [82, "                .longOpt(HELP)"], [83, "                .desc(\"print this message\")"], [84, "                .build();"], [85, "        Option source = Option.builder(\"s\")"], [86, "                .longOpt(SOURCE)"], [87, "                .hasArg()"], [88, "                .argName(\"server:port/path\")"], [89, "                .desc(\"location of a source tree to copy\")"], [90, "                .build();"], [91, "        Option target = Option.builder(\"t\")"], [92, "                .longOpt(TARGET)"], [93, "                .hasArg()"], [94, "                .argName(\"server:port/path\")"], [95, "                .desc(\"target location\")"], [96, "                .build();"], [97, "        Option workers = Option.builder(\"w\")"], [98, "                .longOpt(WORKERS)"], [99, "                .hasArg()"], [100, "                .argName(\"N\")"], [101, "                .desc(\"(optional) number of concurrent workers to copy data\")"], [102, "                .build();"], [103, "        Option copyOnly = Option.builder(\"c\")"], [104, "                .longOpt(COPY_ONLY)"], [105, "                .hasArg()"], [106, "                .argName(\"true|false\")"], [107, "                .desc(\"(optional) set this flag if you do not want to remove nodes that are removed on source\")"], [108, "                .build();"], [109, ""], [110, "        options.addOption(help);"], [111, "        options.addOption(source);"], [112, "        options.addOption(target);"], [113, "        options.addOption(workers);"], [114, "        options.addOption(copyOnly);"], [115, "        return options;"], [116, "    }"], [117, ""], [118, "    private static String getString(CommandLine line, String name) {"], [119, "        return line.getOptionValue(name);"], [120, "    }"], [121, ""], [122, "    private static int getInteger(CommandLine line, String name, int defaultValue) {"], [123, "        try {"], [124, "            String value = line.getOptionValue(name);"], [125, "            if (value == null) {"], [126, "                return defaultValue;"], [127, "            }"], [128, "            return Integer.parseInt(value);"], [129, "        } catch (NumberFormatException e) {"], [130, "            LOGGER.warn(\"Could not parse option \" + name + \": \" + e.getMessage());"], [131, "            return defaultValue;"], [132, "        }"], [133, "    }"], [134, ""], [135, "    private static boolean getBoolean(CommandLine line, String name, boolean defaultValue) {"], [136, "        try {"], [137, "            String value = line.getOptionValue(name);"], [138, "            if (value == null) {"], [139, "                return defaultValue;"], [140, "            }"], [141, "            return Boolean.parseBoolean(value);"], [142, "        } catch (NumberFormatException e) {"], [143, "            LOGGER.warn(\"Could not parse option \" + name + \": \" + e.getMessage());"], [144, "            return defaultValue;"], [145, "        }"], [146, "    }"], [147, ""], [148, "    private static Configuration parseLegacyConfiguration() {"], [149, "        String sourceAddress = getSource();"], [150, "        String destinationAddress = getDestination();"], [151, "        if (sourceAddress == null || destinationAddress == null) {"], [152, "            return null;"], [153, "        }"], [156, "        return ImmutableConfiguration.builder()"], [157, "                .source(sourceAddress)"], [158, "                .target(destinationAddress)"], [159, "                .workers(threads)"], [160, "                .copyOnly(!removeDeprecatedNodes)"], [161, "                .build();"], [163, ""], [164, "    private static String getDestination() {"], [165, "        return System.getProperty(\"destination\");"], [166, "    }"], [167, ""], [168, "    private static String getSource() {"], [169, "        return System.getProperty(\"source\");"], [170, "    }"], [171, ""], [173, "        String threads = System.getProperty(\"threads\");"], [179, "            n = Integer.valueOf(threads);"], [180, "        } catch (NumberFormatException e) {"], [181, "            LOGGER.error(\"Can't parse threads number - \\\"\" + threads + \"\\\"\", e);"], [185, ""], [187, "        String s = System.getProperty(\"removeDeprecatedNodes\");"], [192, "        try {"], [193, "            ans = Boolean.valueOf(s);"], [194, "        } catch (NumberFormatException e) {"], [195, "            LOGGER.error(\"Can't parse 'removeDeprecatedNodes' - \\\"\" + s + \"\\\"\", e);"], [199, ""]], "deleted": [[5, "import org.apache.log4j.BasicConfigurator;"], [7, "import org.apache.log4j.PropertyConfigurator;"], [8, "import com.github.ksprojects.zkcopy.reader.Reader;"], [10, "public class ZkCopy"], [11, "{"], [12, ""], [13, "    private static Logger logger = Logger.getLogger(ZkCopy.class);"], [14, "    private static final int DEFAULT_THREADS_NUMBER = 1;"], [15, "    private static final boolean DEFAULT_REMOVE_DEPRECATED_NODES = false;"], [16, ""], [17, "    public static void main(String[] args)"], [18, "    {"], [19, "        String source = System.getProperty(\"source\");"], [20, "        String destination = System.getProperty(\"destination\");"], [21, ""], [22, "        if (source == null) {"], [23, "            help();"], [28, "        logger.info(\"Threads Number = \" + threads);"], [29, "        Reader reader = new Reader(source, threads);"], [30, "        Node root = reader.read();"], [31, ""], [32, "        Writer writer = new Writer(destination, root, removeDeprecatedNodes);"], [33, "        writer.write();"], [35, ""], [37, "        String threads = System.getProperty(\"threads\");"], [42, ""], [44, "            n = Integer.valueOf(threads).intValue();"], [45, "        }"], [46, "        catch(NumberFormatException e) {"], [47, "            logger.error(\"Can't parse threads number - \\\"\" + threads + \"\\\"\", e);"], [51, ""], [53, "        String s = System.getProperty(\"removeDeprecatedNodes\");"], [57, "        }"], [58, "        try {"], [59, "            ans = Boolean.valueOf(s).booleanValue();"], [61, "        catch(NumberFormatException e) {"], [62, "            logger.error(\"Can't parse 'removeDeprecatedNodes' - \\\"\" + s + \"\\\"\", e);"], [66, ""], [67, "    private static void help() {"], [68, "        System.out.println("], [69, "                        \"ZkCopy version 0.1\\n\" +"], [70, "                        \"Usage:\\n\" +"], [71, "                        \"\\tjava \" +"], [72, "                        \"-jar target/zkcopy-*-jar-with-dependencies.jar \" +"], [73, "                        \"-Dsource=\\\"server:port/path\\\" \" +"], [74, "                        \"-Ddestination=\\\"server:port/path\\\" \" +"], [75, "                        \"-Dthreads=10 \" +"], [76, "                        \"-DremoveDeprecatedNodes=true\""], [77, "                        );"], [78, "    }"], [79, ""]]}, "num_lines_added": 171, "num_lines_removed": 51}