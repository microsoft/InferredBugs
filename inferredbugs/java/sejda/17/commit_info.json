{"hash": "e1dddac7ba89d39e564059eecf77105dc536715e", "message": "Added [TOTAL_FILESNUMBER] placeholder. This needs to done at the end of task, when we know the number of generated files so it doesn't fit well our current names generation logic. To keep it simple I just put it at the end of the process, right before we move the files to the final destination. I also moved the name shortening logic after we replace this placeholder", "file_num_lines": 137, "diff_parsed": {"added": [[26, "import static org.sejda.core.support.io.IOUtils.shortenFilename;"], [116, "            moveFile(entry.getValue(), new File(outputDirectory, finalName(entry.getKey(), files.size())),"], [117, "                    existingOutputPolicy,"], [178, "    private static String finalName(String filename, int totalFilesNumber) {"], [179, "        return shortenFilename(filename.replace(\"[TOTAL_FILESNUMBER]\", Integer.toString(totalFilesNumber)));"], [180, "    }"], [181, ""], [190, "        try (ZipOutputStream zipOut = new ZipOutputStream(out)) {"], [191, "            for (Entry<String, File> entry : files.entrySet()) {"], [192, ""], [193, "                if (isBlank(entry.getKey())) {"], [194, "                    throw new IOException(String.format("], [195, "                            \"Unable to copy %s to the output stream, no output name specified.\", entry.getValue()));"], [196, "                }"], [197, "                try (FileInputStream input = new FileInputStream(entry.getValue())) {"], [198, "                    zipOut.putNextEntry(new ZipEntry(entry.getKey()));"], [199, "                    LOG.debug(\"Copying {} to zip stream {}.\", entry.getValue(), entry.getKey());"], [200, "                    IOUtils.copy(input, zipOut);"], [201, "                } finally {"], [202, "                    delete(entry.getValue());"], [203, "                }"], [216, "        try (InputStream in = new FileInputStream(file)) {"]], "deleted": [[115, "            moveFile(entry.getValue(), new File(outputDirectory, entry.getKey()), existingOutputPolicy,"], [184, "        ZipOutputStream zipOut = new ZipOutputStream(out);"], [185, "        for (Entry<String, File> entry : files.entrySet()) {"], [186, "            FileInputStream input = null;"], [187, "            if (isBlank(entry.getKey())) {"], [188, "                throw new IOException(String.format(\"Unable to copy %s to the output stream, no output name specified.\","], [189, "                        entry.getValue()));"], [190, "            }"], [191, "            try {"], [192, "                input = new FileInputStream(entry.getValue());"], [193, "                zipOut.putNextEntry(new ZipEntry(entry.getKey()));"], [194, "                LOG.debug(\"Copying {} to zip stream {}.\", entry.getValue(), entry.getKey());"], [195, "                IOUtils.copy(input, zipOut);"], [196, "            } finally {"], [197, "                IOUtils.closeQuietly(input);"], [198, "                delete(entry.getValue());"], [201, "        IOUtils.closeQuietly(zipOut);"], [212, "        InputStream in = null;"], [213, "        try {"], [214, "            in = new FileInputStream(file);"], [217, "            IOUtils.closeQuietly(in);"]]}, "num_lines_added": 22, "num_lines_removed": 21}