{"hash": "1b1c5e4d2fdc41511812537c7e36af54a99b7023", "message": "re #184 Task to optimize a PDF - replace duplicated images with a single instance.", "file_num_lines": 68, "diff_parsed": {"added": [[53, "        outputFolder = IOUtils.createTemporaryFolder();"], [72, "        parameters.setOutput(new DirectoryTaskOutput(outputFolder));"], [73, "    }"], [75, "    private void withSource(String input) {"], [76, "        InputStream stream = getClass().getClassLoader().getResourceAsStream(input);"], [81, "    private long sizeOfResult() {"], [82, "        return outputFolder.listFiles()[0].length() / 1000;"], [83, "    }"], [84, ""], [87, "        withSource(\"pdf/unoptimized.pdf\");"], [88, "        victim.execute(parameters);"], [89, "        assertThat(sizeOfResult(), is(lessThan(104L)));"], [90, "    }"], [91, ""], [92, "    @Test"], [93, "    public void testRepeatedImages() throws TaskException, IOException {"], [94, "        withSource(\"pdf/test_optimize_repeated_images.pdf\");"], [96, "        assertThat(sizeOfResult(), is(lessThan(468L)));"]], "deleted": [[56, "        outputFolder = IOUtils.createTemporaryFolder();"], [73, "        InputStream stream = getClass().getClassLoader().getResourceAsStream(\"pdf/unoptimized.pdf\");"], [80, "        parameters.setOutput(new DirectoryTaskOutput(outputFolder));"], [82, "        long sizeInKb = outputFolder.listFiles()[0].length() / 1000;"], [83, "        assertThat(sizeInKb, is(lessThan(104L)));"]]}, "num_lines_added": 18, "num_lines_removed": 5}