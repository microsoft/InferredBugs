{"hash": "0d59b3cf862c569eb0b91cf67237e408138719b5", "message": "Adds more support for detecting and skipping unsupported characters in clients.\nRefactors handling font and text to FontUtils, throws specific exception when unsupported characters are provided.", "file_num_lines": 32, "diff_parsed": {"added": [[22, "import org.sejda.model.exception.UnsupportedTextException;"], [25, "import org.sejda.sambox.pdmodel.PDPage;"], [28, "import java.awt.*;"], [35, "    private void write(String text) throws TaskIOException {"], [36, "        PDDocument doc = new PDDocument();"], [37, "        PDPage page = new PDPage();"], [38, "        doc.addPage(page);"], [39, "        PageTextWriter writer = new PageTextWriter(doc);"], [40, "        writer.write(page, new Point(10, 10), text, helvetica, 10d, Color.BLACK);"], [41, "    }"], [42, ""], [45, "        write(\"123\u03b1456\u03b1789\");"], [50, "        write(\"ab cd\");"], [53, "    @Test(expected = UnsupportedTextException.class)"], [54, "    public void throwsWhenCharacterUnsupported() throws TaskIOException {"], [55, "        write(\"\\uFE0F\");"], [56, "    }"]], "deleted": [[26, "import java.util.List;"], [28, "import static org.hamcrest.CoreMatchers.is;"], [29, "import static org.hamcrest.CoreMatchers.not;"], [30, "import static org.junit.Assert.assertThat;"], [38, "        PageTextWriter writer = new PageTextWriter(new PDDocument());"], [39, "        List<PageTextWriter.TextWithFont> textAndFonts = writer.resolveFonts(\"123\u03b1456\u03b1789\", helvetica);"], [40, ""], [41, "        assertThat(textAndFonts.get(0).getFont().getName(), is(\"Helvetica\"));"], [42, "        assertThat(textAndFonts.get(0).getText(), is(\"123\"));"], [43, ""], [44, "        assertThat(textAndFonts.get(1).getFont().getName(), is(not(\"Helvetica\")));"], [45, "        assertThat(textAndFonts.get(1).getText(), is(\"\u03b1\"));"], [46, ""], [47, "        assertThat(textAndFonts.get(2).getFont().getName(), is(\"Helvetica\"));"], [48, "        assertThat(textAndFonts.get(2).getText(), is(\"456\"));"], [49, ""], [50, "        assertThat(textAndFonts.get(3).getFont().getName(), is(not(\"Helvetica\")));"], [51, "        assertThat(textAndFonts.get(3).getText(), is(\"\u03b1\"));"], [56, "        PageTextWriter writer = new PageTextWriter(new PDDocument());"], [57, "        List<PageTextWriter.TextWithFont> textAndFonts = writer.resolveFonts(\"ab cd\", helvetica);"], [58, ""], [59, "        assertThat(textAndFonts.get(0).getFont().getName(), is(\"Helvetica\"));"], [60, "        assertThat(textAndFonts.get(0).getText(), is(\"ab\"));"], [61, ""], [62, "        assertThat(textAndFonts.get(1).getFont().getName(), is(\"Helvetica\"));"], [63, "        assertThat(textAndFonts.get(1).getText(), is(\" \"));"], [64, ""], [65, "        assertThat(textAndFonts.get(2).getFont().getName(), is(\"Helvetica\"));"], [66, "        assertThat(textAndFonts.get(2).getText(), is(\"cd\"));"], [69, ""]]}, "num_lines_added": 17, "num_lines_removed": 30}