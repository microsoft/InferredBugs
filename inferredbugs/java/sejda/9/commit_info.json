{"hash": "adca15a8872e963c8fe4c93fe89cbf7eef676c97", "message": "re: #281 Can't set form field value with latin and non-latin characters", "file_num_lines": 162, "diff_parsed": {"added": [[24, "import org.sejda.core.support.io.IOUtils;"], [26, "import org.sejda.impl.sambox.component.PDDocumentHandler;"], [27, "import org.sejda.impl.sambox.component.PageTextWriter;"], [28, "import org.sejda.impl.sambox.component.PdfTextExtractorByArea;"], [29, "import org.sejda.io.SeekableSources;"], [30, "import org.sejda.model.exception.TaskException;"], [35, "import org.sejda.sambox.input.PDFParser;"], [37, "import org.sejda.sambox.pdmodel.PDPage;"], [45, "import java.awt.*;"], [46, "import java.io.File;"], [52, "import static org.hamcrest.Matchers.notNullValue;"], [80, "    private PDFont findFontFor(String s) {"], [81, "        return FontUtils.findFontFor(new PDDocument(), s);"], [82, "    }"], [83, ""], [93, "        assertNotNull(findFontFor(\"\u0e17\u0e14\u0e2a\u0e2d\u0e1a\")); // thai"], [94, "        assertNotNull(findFontFor(\"\u03b1\u03c5\u03c4\u03cc \u03b5\u03af\u03bd\u03b1\u03b9 \u03ad\u03bd\u03b1 \u03c4\u03b5\u03c3\u03c4\")); // greek"], [95, "        assertNotNull(findFontFor(\"\u0d35\u0d40\u0d1f\u0d4d\")); // malayalam"], [96, "        assertNotNull(findFontFor(\"\u092e\u093e\u0928\u0915\")); // hindi"], [97, "        assertNotNull(findFontFor(\"\u0c1c\")); // telugu"], [98, "        assertNotNull(findFontFor(\"\u0989\")); // bengali"], [99, "        assertNotNull(findFontFor(\"\u05e2\u05d1\u05e8\u05d9\u05ea\")); // hebrew"], [100, "        assertNotNull(findFontFor(\"\u7b80\u5316\u5b57\")); // simplified chinese"], [101, "        assertNotNull(findFontFor(\"\ud55c\uad6d\uc5b4/\uc870\uc120\ub9d0\")); // korean"], [102, "        assertNotNull(findFontFor(\"\u65e5\u672c\u8a9e\")); // japanese"], [103, "        assertNotNull(findFontFor(\"latin \u0105\u0107\u0119\u0142\u0144\u00f3\u015b\u017a\u017c\")); // latin"], [104, "    }"], [105, ""], [106, "    @Test"], [107, "    public void fontForMultipleLanguagesInOneString() {"], [108, "        assertNotNull(findFontFor(\"latin \u0105\u0107\u0119\u0142\u0144\u00f3\u015b\u017a\u017c \u0e17\u0e14\u0e2a\u0e2d\u0e1a \u0d35\u0d40\u0d1f \u092e\u093e\u0928\u0915 \u0939\u093f\u0928\u094d\u0926\u0940 \u0d4d \u0c1c \u0989 \u05e2\u05d1\u05e8\u05d9\u05ea\")); // all in one"], [109, "    }"], [110, ""], [111, "    @Test"], [112, "    public void roundTripWriteAndRead() throws TaskException, IOException {"], [113, "        String str = \"latin \u0105\u0107\u0119\u0142\u0144\u00f3\u015b\u017a\u017c \u0e17\u0e14\u0e2a\u0e2d\u0e1a \u0d35\u0d40\u0d1f \u092e\u093e\u0928\u0915 \u0939\u093f\u0928\u094d\u0926\u0940 \u0d4d \u0c1c \u0989\";"], [114, "        PDDocument doc = new PDDocument();"], [115, "        PDPage page = new PDPage();"], [116, "        new PageTextWriter(doc).write(page, new Point(10, 10), str, getStandardType1Font(StandardType1Font.HELVETICA), 10.0d, Color.BLACK);"], [117, "        doc.addPage(page);"], [118, "        PDDocumentHandler handler = new PDDocumentHandler(doc);"], [119, "        File tmp = IOUtils.createTemporaryPdfBuffer();"], [120, "        handler.savePDDocument(tmp);"], [121, ""], [122, "        PDDocument doc2 = PDFParser.parse(SeekableSources.seekableSourceFrom(tmp));"], [123, "        String text = new PdfTextExtractorByArea().extractTextFromArea(doc2.getPage(0), new Rectangle(0,0, 1000, 1000));"], [124, "        assertEquals(noWhitespace(str), noWhitespace(text));"], [125, "    }"], [126, ""], [127, "    private String noWhitespace(String in) {"], [128, "        return in.replaceAll(\"\\\\s\",\"\");"], [154, "        assertNotNull(expected);"], [156, "        PDFont actual = FontUtils.findFontFor(doc, \"\u0e17\u0e14\");"], [162, "        assertThat(findFontFor(\"\u0e19\u0e35\u0e48\u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a\"), is(notNullValue()));"], [167, "        assertNotNull(findFontFor(\"\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10d4\u10dc\u10d0\"));"]], "deleted": [[24, "import org.sejda.fonts.UnicodeType0Font;"], [79, "        assertEquals(\"NotoSansThai\", findFontFor(new PDDocument(), \"\u0e17\u0e14\u0e2a\u0e2d\u0e1a\").getName());"], [80, "        assertEquals(\"NotoSans\", findFontFor(new PDDocument(), \"\u03b1\u03c5\u03c4\u03cc \u03b5\u03af\u03bd\u03b1\u03b9 \u03ad\u03bd\u03b1 \u03c4\u03b5\u03c3\u03c4\").getName());"], [81, "        assertNull(findFontFor(new PDDocument(), \"\u0d35\u0d40\u0d1f\u0d4d\"));"], [108, "        PDFont actual = findFontFor(doc, \"\u0e17\u0e14\");"], [114, "        PDFont noto = FontUtils.loadFont(new PDDocument(), UnicodeType0Font.NOTO_SANS_THAI_REGULAR);"], [115, "        assertThat(FontUtils.canDisplay(\"\u0e19\u0e35\u0e48\u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a\", noto), is(true));"], [120, "        PDFont font = FontUtils.findFontFor(new PDDocument(), \"\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10d4\u10dc\u10d0\");"], [121, "        assertNotNull(\"No font available for Georgian\", font);"], [122, "        assertThat(font.getName(), is(\"NotoSansGeorgian\"));"]]}, "num_lines_added": 55, "num_lines_removed": 10}