{"hash": "ae9143d792304f229f7c7fdc64a6589eb06caf99", "message": "add truncate log suffix", "file_num_lines": 181, "diff_parsed": {"added": [[31, "        raftNode.getLock().lock();"], [32, "        Raft.VoteResponse.Builder responseBuilder = Raft.VoteResponse.newBuilder();"], [33, "        responseBuilder.setGranted(false);"], [34, "        responseBuilder.setTerm(raftNode.getCurrentTerm());"], [35, "        if (request.getTerm() < raftNode.getCurrentTerm()) {"], [36, "            raftNode.getLock().unlock();"], [37, "            return responseBuilder.build();"], [38, "        }"], [46, "        boolean logIsOk = request.getLastLogTerm() > raftNode.getRaftLog().getLastLogTerm()"], [47, "                || (request.getLastLogTerm() == raftNode.getRaftLog().getLastLogTerm()"], [48, "                && request.getLastLogIndex() >= raftNode.getRaftLog().getLastLogIndex());"], [49, "        if (raftNode.getVotedFor() == 0 || logIsOk) {"], [50, "            raftNode.stepDown(request.getTerm());"], [51, "            raftNode.setVotedFor(request.getServerId());"], [52, "            raftNode.updateMetaData();"], [53, "            responseBuilder.setGranted(true);"], [54, "            responseBuilder.setTerm(raftNode.getCurrentTerm());"], [56, "        raftNode.getLock().unlock();"], [57, "        return responseBuilder.build();"], [62, "        raftNode.getLock().lock();"], [68, "            raftNode.getLock().unlock();"], [76, "            raftNode.stepDown(request.getTerm());"], [81, ""], [84, "            raftNode.getLock().unlock();"], [91, "            raftNode.getLock().unlock();"], [107, "                // truncate segment log from index"], [108, "                long lastIndexKept = index - 1;"], [109, "                raftNode.getRaftLog().truncateSuffix(lastIndexKept);"], [118, "            // apply state machine"], [119, "            for (index = raftNode.getLastAppliedIndex() + 1; index <= raftNode.getCommitIndex(); index++) {"], [120, "                raftNode.getStateMachine().apply("], [121, "                        raftNode.getRaftLog().getEntry(index).getData().toByteArray());"], [122, "            }"], [125, "        raftNode.getLock().unlock();"]], "deleted": [[38, "        if (request.getTerm() == raftNode.getCurrentTerm()) {"], [39, "            if ((raftNode.getVotedFor() == 0"], [40, "                    || raftNode.getVotedFor() == request.getServerId())"], [41, "                    && (raftNode.getCurrentTerm() == request.getTerm()"], [42, "                    && raftNode.getCommitIndex() == request.getLastLogIndex())) {"], [43, "                raftNode.setVotedFor(request.getServerId());"], [44, "                raftNode.stepDown(raftNode.getCurrentTerm());"], [45, "                raftNode.resetElectionTimer();"], [46, "                raftNode.updateMetaData();"], [47, "                Raft.VoteResponse response = Raft.VoteResponse.newBuilder()"], [48, "                        .setGranted(true)"], [49, "                        .setTerm(raftNode.getCurrentTerm()).build();"], [50, "                return response;"], [51, "            }"], [53, ""], [54, "        Raft.VoteResponse response = Raft.VoteResponse.newBuilder()"], [55, "                .setGranted(false)"], [56, "                .setTerm(raftNode.getCurrentTerm()).build();"], [57, "        return response;"], [66, ""], [75, "            responseBuilder.setTerm(request.getTerm());"], [77, "        raftNode.stepDown(request.getTerm());"], [78, "        raftNode.resetElectionTimer();"], [105, "                // TODO: truncate segment log from index"], [114, "            // TODO: apply state machine"]]}, "num_lines_added": 34, "num_lines_removed": 25}