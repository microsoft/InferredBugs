{"hash": "ecacf67b21684369c1444669d82f3a2f006e59bd", "message": "fix snapshot bug when add new servers to cluster", "file_num_lines": 268, "diff_parsed": {"added": [[6, "import com.github.wenweihu86.raft.storage.Snapshot;"], [51, "            boolean logIsOk = request.getLastLogTerm() > raftNode.getLastLogTerm()"], [52, "                    || (request.getLastLogTerm() == raftNode.getLastLogTerm()"], [209, "                LOG.info(\"begin accept install snapshot request from serverId={}\", request.getServerId());"], [241, "            LOG.info(\"install snapshot request from server {} \" +"], [246, "            LOG.warn(\"when handle installSnapshot request, meet exception:\", ex);"], [252, ""], [253, "        if (request.getIsLast() && responseBuilder.getResCode() == RaftMessage.ResCode.RES_CODE_SUCCESS) {"], [254, "            // apply state machine"], [255, "            // TODO: make this async"], [256, "            String snapshotDataDir = raftNode.getSnapshot().getSnapshotDir() + File.separator + \"data\";"], [257, "            raftNode.getStateMachine().readSnapshot(snapshotDataDir);"], [258, "            long lastSnapshotIndex;"], [259, "            // \u91cd\u65b0\u52a0\u8f7dsnapshot"], [260, "            raftNode.getSnapshot().getLock().lock();"], [261, "            try {"], [262, "                raftNode.getSnapshot().reload();"], [263, "                lastSnapshotIndex = raftNode.getSnapshot().getMetaData().getLastIncludedIndex();"], [264, "            } finally {"], [265, "                raftNode.getSnapshot().getLock().unlock();"], [266, "            }"], [267, ""], [268, "            // discard old log entries"], [269, "            raftNode.getLock().lock();"], [270, "            try {"], [271, "                raftNode.getRaftLog().truncatePrefix(lastSnapshotIndex + 1);"], [272, "            } finally {"], [273, "                raftNode.getLock().unlock();"], [274, "            }"], [275, "            LOG.info(\"end accept install snapshot request from serverId={}\", request.getServerId());"], [276, "        }"], [277, ""], [278, "        return responseBuilder.build();"], [291, "                if (entry != null) {"], [292, "                    if (entry.getType() == RaftMessage.EntryType.ENTRY_TYPE_DATA) {"], [293, "                        raftNode.getStateMachine().apply(entry.getData().toByteArray());"], [294, "                    } else if (entry.getType() == RaftMessage.EntryType.ENTRY_TYPE_CONFIGURATION) {"], [295, "                        raftNode.applyConfiguration(entry);"], [296, "                    }"]], "deleted": [[50, "            boolean logIsOk = request.getLastLogTerm() > raftNode.getRaftLog().getLastLogTerm()"], [51, "                    || (request.getLastLogTerm() == raftNode.getRaftLog().getLastLogTerm()"], [237, "                // apply state machine"], [238, "                // TODO: make this async"], [239, "                String snapshotDataDir = raftNode.getSnapshot().getSnapshotDir() + File.separator + \"data\";"], [240, "                raftNode.getStateMachine().readSnapshot(snapshotDataDir);"], [243, "            LOG.info(\"installSnapshot request from server {} \" +"], [247, "            return responseBuilder.build();"], [249, "            LOG.warn(\"io exception, msg={}\", ex.getMessage());"], [250, "            return responseBuilder.build();"], [268, "                if (entry.getType() == RaftMessage.EntryType.ENTRY_TYPE_DATA) {"], [269, "                    raftNode.getStateMachine().apply(entry.getData().toByteArray());"], [270, "                } else if (entry.getType() == RaftMessage.EntryType.ENTRY_TYPE_CONFIGURATION) {"], [271, "                    raftNode.applyConfiguration(entry);"]]}, "num_lines_added": 39, "num_lines_removed": 14}