{"hash": "708b2bbfb61723664f2c85cd2f1cf752baa85a5e", "message": "update RaftNode init", "file_num_lines": 481, "diff_parsed": {"added": [[31, "    private List<Peer> peers;"], [32, "    private ServerAddress localServer;"], [33, "    private StateMachine stateMachine;"], [34, "    private SegmentedLog raftLog;"], [35, "    private Snapshot snapshot;"], [36, ""], [42, "    private int leaderId; // leader\u8282\u70b9id"], [49, "    // TODO: fix lock"], [58, "    public RaftNode(int localServerId, List<ServerAddress> servers, StateMachine stateMachine) {"], [59, "        peers = new ArrayList<>();"], [68, "        this.stateMachine = stateMachine;"], [69, "        // load log and snapshot"], [70, "        raftLog = new SegmentedLog();"], [71, "        snapshot = new Snapshot();"], [72, "        currentTerm = raftLog.getMetaData().getCurrentTerm();"], [73, "        votedFor = raftLog.getMetaData().getVotedFor();"], [74, "        commitIndex = Math.max(snapshot.getMetaData().getLastIncludedIndex(), commitIndex);"], [75, "        // discard old log entries"], [76, "        if (raftLog.getFirstLogIndex() <= snapshot.getMetaData().getLastIncludedIndex()) {"], [77, "            raftLog.truncatePrefix(snapshot.getMetaData().getLastIncludedIndex() + 1);"], [78, "        }"], [79, "        // apply state machine"], [80, "        stateMachine.readSnapshot(snapshot.getSnapshotDir());"], [81, "        for (long index = snapshot.getMetaData().getLastIncludedIndex() + 1;"], [82, "             index <= commitIndex; index++) {"], [83, "            Raft.LogEntry entry = raftLog.getEntry(index);"], [84, "            stateMachine.apply(entry.getData().toByteArray());"], [85, "        }"], [86, "        lastAppliedIndex = commitIndex;"], [87, ""], [88, "        // init thread pool"], [97, "        // start election"], [98, "        startNewElection();"], [218, "        long firstLogIndex = raftLog.getFirstLogIndex();"], [219, "        if (peer.getNextIndex() < firstLogIndex) {"], [220, "            installSnapshot(peer);"], [226, "        if (prevLogIndex >= firstLogIndex) {"], [230, "        } else if (prevLogIndex == snapshot.getMetaData().getLastIncludedIndex()) {"], [231, "            prevLogTerm = snapshot.getMetaData().getLastIncludedTerm();"], [283, "        matchIndexes[peerNum] = raftLog.getLastLogIndex();"], [321, "        Raft.InstallSnapshotRequest request = this.buildInstallSnapshotRequest("], [322, "                null, 0, 0);"], [323, "        peer.getRpcClient().asyncCall(\"RaftConsensusService.installSnapshot\","], [324, "                request, new InstallSnapshotResponseCallback(peer, request));"], [325, "        isSnapshoting = true;"], [342, "            if (request.getIsLast() == true) {"], [343, "                isSnapshoting = false;"], [344, "            } else {"], [345, "                Raft.InstallSnapshotRequest currentRequest = buildInstallSnapshotRequest("], [346, "                        this.request.getFileName(),"], [347, "                        this.request.getOffset(),"], [348, "                        this.request.getData().toByteArray().length);"], [349, "                peer.getRpcClient().asyncCall(\"RaftConsensusService.installSnapshot\","], [350, "                        currentRequest, new InstallSnapshotResponseCallback(peer, currentRequest));"], [486, "        if (lastAppliedIndex <= snapshot.getMetaData().getLastIncludedIndex()) {"], [490, "        if (lastAppliedIndex >= raftLog.getFirstLogIndex()"], [495, "        if (!isSnapshoting) {"], [496, "            isSnapshoting = true;"], [497, "            // take snapshot"], [498, "            String tmpSnapshotDir = snapshot.getSnapshotDir() + \".tmp\";"], [499, "            snapshot.updateMetaData(tmpSnapshotDir, lastAppliedIndex, lastAppliedTerm);"], [500, "            String tmpSnapshotDataDir = tmpSnapshotDir + File.pathSeparator + \"data\";"], [501, "            stateMachine.writeSnapshot(tmpSnapshotDataDir);"], [502, "            try {"], [503, "                FileUtils.moveDirectory(new File(tmpSnapshotDir), new File(snapshot.getSnapshotDir()));"], [504, "            } catch (IOException ex) {"], [505, "                LOG.warn(\"move direct failed, msg={}\", ex.getMessage());"], [506, "            }"]], "deleted": [[36, "    private List<Raft.LogEntry> entries;"], [39, "    // The index of the last log entry that has been flushed to disk."], [40, "    // Valid for leaders only."], [41, "    private long lastSyncedIndex;"], [44, ""], [45, "    private List<Peer> peers;"], [46, "    private ServerAddress localServer;"], [47, "    private int leaderId; // leader\u8282\u70b9id"], [48, "    private SegmentedLog raftLog;"], [49, "    private StateMachine stateMachine;"], [50, ""], [51, "    private Snapshot snapshot;"], [52, "    private long lastSnapshotIndex;"], [53, "    private long lastSnapshotTerm;"], [55, "    private ReadWriteLock snapshotLock = new ReentrantReadWriteLock();"], [65, "    public RaftNode(int localServerId, List<ServerAddress> servers) {"], [66, "        raftLog = new SegmentedLog();"], [67, "        snapshot = new Snapshot();"], [78, "        // election timer"], [79, "        resetElectionTimer();"], [80, "        this.currentTerm = raftLog.getMetaData().getCurrentTerm();"], [81, "        this.votedFor = raftLog.getMetaData().getVotedFor();"], [82, "        this.commitIndex = Math.max(snapshot.getMetaData().getLastIncludedIndex(), commitIndex);"], [83, "        stepDown(1);"], [209, "        long startLogIndex = raftLog.getStartLogIndex();"], [210, "        if (peer.getNextIndex() < startLogIndex) {"], [211, "            this.installSnapshot(peer);"], [215, "        long lastLogIndex = this.raftLog.getLastLogIndex();"], [218, "        if (prevLogIndex >= startLogIndex) {"], [222, "        } else if (prevLogIndex == lastSnapshotIndex) {"], [223, "            prevLogTerm = lastSnapshotTerm;"], [275, "        matchIndexes[peerNum] = lastSyncedIndex;"], [313, "        try {"], [314, "            snapshotLock.readLock().lock();"], [315, "            Raft.InstallSnapshotRequest request = this.buildInstallSnapshotRequest("], [316, "                    null, 0, 0);"], [317, "            peer.getRpcClient().asyncCall(\"RaftConsensusService.installSnapshot\","], [318, "                    request, new InstallSnapshotResponseCallback(peer, request));"], [319, "            isSnapshoting = true;"], [320, "        } finally {"], [321, "            snapshotLock.readLock().unlock();"], [322, "        }"], [339, "            try {"], [340, "                snapshotLock.readLock().lock();"], [341, "                if (request.getIsLast() == true) {"], [342, "                    isSnapshoting = false;"], [343, "                } else {"], [344, "                    Raft.InstallSnapshotRequest currentRequest = buildInstallSnapshotRequest("], [345, "                            this.request.getFileName(),"], [346, "                            this.request.getOffset(),"], [347, "                            this.request.getData().toByteArray().length);"], [348, "                    peer.getRpcClient().asyncCall(\"RaftConsensusService.installSnapshot\","], [349, "                            currentRequest, new InstallSnapshotResponseCallback(peer, currentRequest));"], [350, "                }"], [351, "            } finally {"], [352, "                snapshotLock.readLock().unlock();"], [359, "            snapshotLock.readLock().lock();"], [361, "            snapshotLock.readLock().unlock();"], [446, "    public void updateMetaData() {"], [447, "        raftLog.updateMetaData(currentTerm, votedFor, null);"], [448, "    }"], [449, ""], [494, "        if (lastAppliedIndex <= lastSnapshotIndex) {"], [498, "        if (lastAppliedIndex >= raftLog.getStartLogIndex()"], [503, "        snapshotLock.writeLock().lock();"], [504, "        // take snapshot"], [505, "        String tmpSnapshotDir = snapshot.getSnapshotDir() + \".tmp\";"], [506, "        snapshot.updateMetaData(tmpSnapshotDir, lastAppliedIndex, lastAppliedTerm);"], [507, "        String tmpSnapshotDataDir = tmpSnapshotDir + File.pathSeparator + \"data\";"], [508, "        stateMachine.writeSnapshot(tmpSnapshotDataDir);"], [509, "        try {"], [510, "            FileUtils.moveDirectory(new File(tmpSnapshotDir), new File(snapshot.getSnapshotDir()));"], [511, "            lastSnapshotIndex = lastAppliedIndex;"], [512, "            lastSnapshotTerm = lastAppliedTerm;"], [513, "        } catch (IOException ex) {"], [514, "            LOG.warn(\"move direct failed, msg={}\", ex.getMessage());"], [516, "        snapshotLock.writeLock().unlock();"], [523, "    public void setLock(Lock lock) {"], [524, "        this.lock = lock;"], [525, "    }"], [526, ""], [527, "    public NodeState getState() {"], [528, "        return state;"], [529, "    }"], [530, ""], [531, "    public void setState(NodeState state) {"], [532, "        this.state = state;"], [533, "    }"], [534, ""], [539, "    public void setCurrentTerm(int currentTerm) {"], [540, "        this.currentTerm = currentTerm;"], [541, "    }"], [542, ""], [551, "    public List<Raft.LogEntry> getEntries() {"], [552, "        return entries;"], [553, "    }"], [554, ""], [555, "    public void setEntries(List<Raft.LogEntry> entries) {"], [556, "        this.entries = entries;"], [557, "    }"], [558, ""], [567, ""], [572, "    public void setLastAppliedIndex(long lastAppliedIndex) {"], [573, "        this.lastAppliedIndex = lastAppliedIndex;"], [574, "    }"], [575, ""], [576, "    public ServerAddress getLocalServer() {"], [577, "        return localServer;"], [578, "    }"], [579, ""], [580, "    public void setLocalServer(ServerAddress localServer) {"], [581, "        this.localServer = localServer;"], [582, "    }"], [583, ""], [600, "    public void setSnapshot(Snapshot snapshot) {"], [601, "        this.snapshot = snapshot;"], [602, "    }"], [603, ""], [604, "    public ExecutorService getExecutorService() {"], [605, "        return executorService;"], [606, "    }"], [607, ""], [608, "    public ScheduledExecutorService getScheduledExecutorService() {"], [609, "        return scheduledExecutorService;"], [610, "    }"], [611, ""], [612, "    public ReadWriteLock getSnapshotLock() {"], [613, "        return snapshotLock;"], [614, "    }"], [615, ""]]}, "num_lines_added": 68, "num_lines_removed": 130}