{"hash": "cbd720a2a87bc3a7037ed71d4e3db5dacf361de9", "message": "update lock", "file_num_lines": 496, "diff_parsed": {"added": [[96, "        }, RaftOptions.snapshotPeriodSeconds, TimeUnit.SECONDS);"], [101, "    // election timer, request vote"], [102, "    // in lock"], [103, "    private void resetElectionTimer() {"], [115, "    private int getElectionTimeoutMs() {"], [116, "        ThreadLocalRandom random = ThreadLocalRandom.current();"], [117, "        int randomElectionTimeout = RaftOptions.electionTimeoutMilliseconds"], [118, "                + random.nextInt(0, RaftOptions.electionTimeoutMilliseconds);"], [119, "        return randomElectionTimeout;"], [120, "    }"], [121, ""], [123, "    private void startNewElection() {"], [124, "        lock.lock();"], [139, "        lock.unlock();"], [142, "    private void requestVote(Peer peer) {"], [143, "        lock.lock();"], [150, "        lock.unlock();"], [165, "            lock.lock();"], [192, "            lock.unlock();"], [204, "    // in lock"], [205, "    private void becomeLeader() {"], [206, "        state = NodeState.STATE_LEADER;"], [207, "        leaderId = localServer.getServerId();"], [208, "        // start heartbeat timer"], [209, "        resetHeartbeatTimer();"], [210, "    }"], [211, ""], [212, "    // heartbeat timer, append entries"], [213, "    private void resetHeartbeatTimer() {"], [214, "        if (heartbeatScheduledFuture != null && !heartbeatScheduledFuture.isDone()) {"], [215, "            heartbeatScheduledFuture.cancel(true);"], [216, "        }"], [217, "        heartbeatScheduledFuture = scheduledExecutorService.schedule(new Runnable() {"], [218, "            @Override"], [219, "            public void run() {"], [220, "                startNewHeartbeat();"], [221, "            }"], [222, "        }, RaftOptions.heartbeatPeriodMilliseconds, TimeUnit.MILLISECONDS);"], [223, "    }"], [224, ""], [225, "    // \u5f00\u59cb\u5fc3\u8df3\uff0c\u5bf9leader\u6709\u6548"], [226, "    private void startNewHeartbeat() {"], [227, "        LOG.info(\"start new heartbeat\");"], [228, "        for (final Peer peer : peers) {"], [229, "            Future heartbeatFuture = executorService.submit(new Runnable() {"], [230, "                @Override"], [231, "                public void run() {"], [232, "                    appendEntries(peer);"], [233, "                }"], [234, "            });"], [235, "        }"], [236, "        resetHeartbeatTimer();"], [237, "    }"], [238, ""], [239, "    private void appendEntries(Peer peer) {"], [240, "        lock.lock();"], [244, "            lock.unlock();"], [249, "        long prevLogTerm;"], [258, "            lock.unlock();"], [276, "            lock.unlock();"], [300, "        lock.unlock();"], [303, "    // in lock"], [304, "    private void advanceCommitIndex() {"], [332, "    // in lock"], [333, "    private long packEntries(long nextIndex, Raft.AppendEntriesRequest.Builder requestBuilder) {"], [335, "                nextIndex + RaftOptions.maxLogEntriesPerRequest - 1);"], [343, "    // in lock"], [344, "    private void installSnapshot(Peer peer) {"], [367, "            lock.lock();"], [380, "            lock.unlock();"], [386, "            lock.lock();"], [388, "            lock.unlock();"], [392, "    // in lock"], [407, "            int currentDataSize = RaftOptions.maxSnapshotBytesPerRequest;"], [410, "                if (lastOffset + lastLength + RaftOptions.maxSnapshotBytesPerRequest > lastFileLength) {"], [423, "                if (currentFileLenght < RaftOptions.maxSnapshotBytesPerRequest) {"], [452, "    // in lock"], [470, "        lock.lock();"], [501, "    private void takeSnapshot() {"], [502, "        lock.lock();"], [503, "        if (raftLog.getTotalSize() < RaftOptions.snapshotMinLogSize) {"], [504, "            lock.unlock();"], [508, "            lock.unlock();"], [530, "        lock.unlock();"]], "deleted": [[96, "        }, RaftOption.snapshotPeriodSeconds, TimeUnit.SECONDS);"], [101, "    public void resetElectionTimer() {"], [114, "    public void startNewElection() {"], [127, "            peer.setElectionFuture(electionFuture);"], [132, "    public void resetHeartbeatTimer() {"], [133, "        if (heartbeatScheduledFuture != null && !heartbeatScheduledFuture.isDone()) {"], [134, "            heartbeatScheduledFuture.cancel(true);"], [135, "        }"], [136, "        heartbeatScheduledFuture = scheduledExecutorService.schedule(new Runnable() {"], [137, "            @Override"], [138, "            public void run() {"], [139, "                startNewHeartbeat();"], [140, "            }"], [141, "        }, RaftOption.heartbeatPeriodMilliseconds, TimeUnit.MILLISECONDS);"], [142, "    }"], [143, ""], [144, "    // \u5f00\u59cb\u5fc3\u8df3\uff0c\u5bf9leader\u6709\u6548"], [145, "    public void startNewHeartbeat() {"], [146, "        LOG.info(\"start new heartbeat\");"], [147, "        for (final Peer peer : peers) {"], [148, "            Future heartbeatFuture = executorService.submit(new Runnable() {"], [149, "                @Override"], [150, "                public void run() {"], [151, "                    appendEntries(peer);"], [152, "                }"], [153, "            });"], [154, "            peer.setHeartbeatFuture(heartbeatFuture);"], [155, "        }"], [156, "        resetHeartbeatTimer();"], [157, "    }"], [158, ""], [159, "    public void requestVote(Peer peer) {"], [217, "    public void appendEntries(Peer peer) {"], [225, "        long prevLogTerm = 0;"], [276, "    public void advanceCommitIndex() {"], [290, "        lock.lock();"], [303, "        lock.unlock();"], [306, "    public long packEntries(long nextIndex, Raft.AppendEntriesRequest.Builder requestBuilder) {"], [308, "                nextIndex + RaftOption.maxLogEntriesPerRequest - 1);"], [316, "    public void installSnapshot(Peer peer) {"], [326, ""], [375, "            int currentDataSize = RaftOption.maxSnapshotBytesPerRequest;"], [378, "                if (lastOffset + lastLength + RaftOption.maxSnapshotBytesPerRequest > lastFileLength) {"], [391, "                if (currentFileLenght < RaftOption.maxSnapshotBytesPerRequest) {"], [420, "    public void becomeLeader() {"], [421, "        state = NodeState.STATE_LEADER;"], [422, "        leaderId = localServer.getServerId();"], [423, "        // start heartbeat timer"], [424, "        resetHeartbeatTimer();"], [425, "    }"], [426, ""], [442, "    public int getElectionTimeoutMs() {"], [443, "        ThreadLocalRandom random = ThreadLocalRandom.current();"], [444, "        int randomElectionTimeout = RaftOption.electionTimeoutMilliseconds"], [445, "                + random.nextInt(0, RaftOption.electionTimeoutMilliseconds);"], [446, "        return randomElectionTimeout;"], [447, "    }"], [448, ""], [468, "        lock.lock();"], [482, "    public void takeSnapshot() {"], [483, "        if (raftLog.getTotalSize() < RaftOption.snapshotMinLogSize) {"]]}, "num_lines_added": 84, "num_lines_removed": 61}