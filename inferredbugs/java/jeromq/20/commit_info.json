{"hash": "dc16c9979cc462c4a05a1d2ac1a1320ff7f8372e", "message": "Limit the ping context to 16 bytes (#547)", "file_num_lines": 388, "diff_parsed": {"added": [[8, "import java.io.ByteArrayOutputStream;"], [73, "        testHeartbeatTimeout(false);"], [74, "    }"], [75, ""], [76, "    @Test"], [77, "    public void testHeartbeatTimeoutWithContext() throws IOException, InterruptedException"], [78, "    {"], [79, "        testHeartbeatTimeout(true);"], [80, "    }"], [81, ""], [82, "    private void testHeartbeatTimeout(boolean mockPing) throws IOException, InterruptedException"], [83, "    {"], [87, "        SocketBase server = prepServerSocket(ctx, !mockPing, false);"], [101, "        if (mockPing) {"], [102, "            mockPing(socket);"], [103, "        }"], [109, "        if (!mockPing) {"], [110, "            // We should have been disconnected"], [111, "            event = ZMQ.Event.read(monitor);"], [112, "            assertThat(event.event, is(ZMQ.ZMQ_EVENT_DISCONNECTED));"], [113, "        }"], [367, ""], [368, "    }"], [369, ""], [370, "    private void mockPing(Socket socket) throws IOException"], [371, "    {"], [372, "        //  test PING context - should be replicated in the PONG"], [373, "        //  to avoid timeouts, do a bulk send"], [374, "        byte[] ping = new byte[12];"], [375, "        int idx = 0;"], [376, "        ping[idx++] = 4;"], [377, "        ping[idx++] = 10;"], [378, "        ping[idx++] = 4;"], [379, "        ping[idx++] = 'P';"], [380, "        ping[idx++] = 'I';"], [381, "        ping[idx++] = 'N';"], [382, "        ping[idx++] = 'G';"], [383, "        ping[idx++] = 0;"], [384, "        ping[idx++] = 0;"], [385, "        ping[idx++] = 'L';"], [386, "        ping[idx++] = 'O';"], [387, "        ping[idx++] = 'L';"], [388, ""], [389, "        OutputStream out = socket.getOutputStream();"], [390, "        out.write(ping);"], [391, "        out.flush();"], [392, ""], [393, "        //  test a larger body that won't fit in a small message"], [394, "        // and should get truncated"], [395, "        ping = new byte[65];"], [396, "        idx = 0;"], [397, "        ping[idx++] = 4;"], [398, "        ping[idx++] = 65;"], [399, "        ping[idx++] = 4;"], [400, "        ping[idx++] = 'P';"], [401, "        ping[idx++] = 'I';"], [402, "        ping[idx++] = 'N';"], [403, "        ping[idx++] = 'G';"], [404, "        ping[idx++] = 0;"], [405, "        ping[idx++] = 0;"], [406, "        ping[idx++] = 'L';"], [407, "        ping[idx++] = 'O';"], [408, "        ping[idx++] = 'O';"], [409, "        ping[idx++] = 'O';"], [410, "        ping[idx++] = 'O';"], [411, "        ping[idx++] = 'O';"], [412, "        ping[idx++] = 'O';"], [413, "        ping[idx++] = 'O';"], [414, "        ping[idx++] = 'O';"], [415, "        ping[idx++] = 'O';"], [416, "        ping[idx++] = 'O';"], [417, "        ping[idx++] = 'O';"], [418, "        ping[idx++] = 'O';"], [419, "        ping[idx++] = 'O';"], [420, "        ping[idx++] = 'O';"], [421, "        ping[idx++] = 'O';"], [422, "        ping[idx++] = 'L';"], [423, ""], [424, "        out.write(ping);"], [425, "        out.flush();"], [426, ""], [427, "        //  small pong"], [428, "        ping = new byte[10];"], [429, "        idx = 0;"], [430, "        ping[idx++] = 4;"], [431, "        ping[idx++] = 8;"], [432, "        ping[idx++] = 4;"], [433, "        ping[idx++] = 'P';"], [434, "        ping[idx++] = 'O';"], [435, "        ping[idx++] = 'N';"], [436, "        ping[idx++] = 'G';"], [437, "        ping[idx++] = 'L';"], [438, "        ping[idx++] = 'O';"], [439, "        ping[idx++] = 'L';"], [440, ""], [441, "        byte[] pong = recvWithRetry(socket, 10);"], [442, "        assertThat(pong, is(ping));"], [443, ""], [444, "        //  large pong"], [445, "        ping = new byte[23];"], [446, "        idx = 0;"], [447, "        ping[idx++] = 4;"], [448, "        ping[idx++] = 21;"], [449, "        ping[idx++] = 4;"], [450, "        ping[idx++] = 'P';"], [451, "        ping[idx++] = 'O';"], [452, "        ping[idx++] = 'N';"], [453, "        ping[idx++] = 'G';"], [454, "        ping[idx++] = 'L';"], [455, "        ping[idx++] = 'O';"], [456, "        ping[idx++] = 'O';"], [457, "        ping[idx++] = 'O';"], [458, "        ping[idx++] = 'O';"], [459, "        ping[idx++] = 'O';"], [460, "        ping[idx++] = 'O';"], [461, "        ping[idx++] = 'O';"], [462, "        ping[idx++] = 'O';"], [463, "        ping[idx++] = 'O';"], [464, "        ping[idx++] = 'O';"], [465, "        ping[idx++] = 'O';"], [466, "        ping[idx++] = 'O';"], [467, "        ping[idx++] = 'O';"], [468, "        ping[idx++] = 'O';"], [469, "        ping[idx++] = 'O';"], [470, ""], [471, "        out.write(ping);"], [472, "        out.flush();"], [473, ""], [474, "        pong = recvWithRetry(socket, 23);"], [475, "        assertThat(pong, is(ping));"], [478, "    private byte[] recvWithRetry(Socket socket, int bytes) throws IOException"], [480, "        ByteArrayOutputStream out = new ByteArrayOutputStream();"], [485, "            int rc = in.read(data, received, bytes - received);"], [489, "            out.write(data, received, rc);"], [496, "        return out.toByteArray();"]], "deleted": [[75, "        SocketBase server = prepServerSocket(ctx, true, false);"], [94, "        // We should have been disconnected"], [95, "        event = ZMQ.Event.read(monitor);"], [96, "        assertThat(event.event, is(ZMQ.ZMQ_EVENT_DISCONNECTED));"], [352, "    private void recvWithRetry(Socket socket, int bytes) throws IOException"], [358, "            int rc = in.read(data, received, data.length);"]]}, "num_lines_added": 135, "num_lines_removed": 6}