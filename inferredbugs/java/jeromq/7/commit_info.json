{"hash": "cd142fdcc375f41be7c32d9a36907961675cbef2", "message": "Improvements when context is closed in ZProxy", "file_num_lines": 402, "diff_parsed": {"added": [[22, "import static org.junit.Assert.assertArrayEquals;"], [23, "import static org.junit.Assert.assertEquals;"], [24, "import static org.junit.Assert.assertNotNull;"], [25, "import static org.junit.Assert.assertNull;"], [26, "import static org.junit.Assert.assertTrue;"], [27, "import static org.junit.Assert.fail;"], [28, ""], [376, "        try {"], [377, "            ZMQ.Event event;"], [379, "            Socket socket = context.socket(ZMQ.REP);"], [380, "            monitor.setReceiveTimeOut(100);"], [382, "            socket.bindToRandomPort(\"tcp://127.0.0.1\");"], [384, "            assertTrue(socket.monitor(\"inproc://monitor.socket\", ZMQ.EVENT_CLOSED));"], [385, "            monitor.connect(\"inproc://monitor.socket\");"], [387, "            socket.close();"], [388, "            event = ZMQ.Event.recv(monitor);"], [389, "            assertNotNull(\"No event was received\", event);"], [390, "            assertEquals(ZMQ.EVENT_CLOSED, event.getEvent());"], [391, ""], [392, "        }"], [393, "        finally {"], [394, "            monitor.close();"], [395, "            context.term();"], [396, "        }"], [499, "        ctx.term();"]], "deleted": [[25, "import static org.junit.Assert.assertArrayEquals;"], [26, "import static org.junit.Assert.assertEquals;"], [32, "import static org.junit.Assert.assertNotNull;"], [33, "import static org.junit.Assert.assertNull;"], [34, "import static org.junit.Assert.assertTrue;"], [35, "import static org.junit.Assert.fail;"], [36, ""], [375, "        ZMQ.Event event;"], [376, ""], [377, "        Socket socket = context.socket(ZMQ.REP);"], [379, "        monitor.setReceiveTimeOut(100);"], [381, "        socket.bindToRandomPort(\"tcp://127.0.0.1\");"], [383, "        assertTrue(socket.monitor(\"inproc://monitor.socket\", ZMQ.EVENT_CLOSED));"], [384, "        monitor.connect(\"inproc://monitor.socket\");"], [386, "        socket.close();"], [387, "        event = ZMQ.Event.recv(monitor);"], [388, "        assertNotNull(\"No event was received\", event);"], [389, "        assertEquals(ZMQ.EVENT_CLOSED, event.getEvent());"], [391, "        monitor.close();"], [392, "        context.term();"]]}, "num_lines_added": 25, "num_lines_removed": 20}