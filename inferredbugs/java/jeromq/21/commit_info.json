{"hash": "298c6e6555246300cfed6ba7c0f42020bd964db1", "message": "Problem: Flakiness of test XPubXSub (#796)", "file_num_lines": 188, "diff_parsed": {"added": [[3, "import org.junit.Test;"], [4, "import org.zeromq.ZMQ.Socket;"], [5, "import org.zeromq.ZProxy.Plug;"], [6, "import zmq.util.Utils;"], [19, "import static org.hamcrest.CoreMatchers.is;"], [20, "import static org.hamcrest.CoreMatchers.nullValue;"], [21, "import static org.hamcrest.MatcherAssert.assertThat;"], [31, "        Future<?> subscriber = service.submit(() -> {"], [32, "            Thread.currentThread().setName(\"Subscriber\");"], [33, "            try (ZContext ctx1 = new ZContext()) {"], [34, "                final Socket requester = ctx1.createSocket(SocketType.SUB);"], [35, "                requester.connect(\"tcp://localhost:\" + back);"], [36, "                requester.subscribe(\"hello\".getBytes(ZMQ.CHARSET));"], [37, ""], [38, "                while (numberReceived.get() < max) {"], [39, "                    ZMsg.recvMsg(requester);"], [40, "                    numberReceived.incrementAndGet();"], [46, "        service.submit(() -> {"], [47, "            Thread.currentThread().setName(\"Publisher\");"], [48, "            try {"], [49, "                Socket pub = ctx.createSocket(SocketType.PUB);"], [50, "                pub.connect(\"tcp://localhost:\" + front);"], [51, "                while (numberReceived.get() < max) {"], [52, "                    ZMsg message = ZMsg.newStringMsg(\"hello\", \"world\");"], [53, "                    boolean rc = message.send(pub);"], [54, "                    assertThat(rc, is(true));"], [55, "                    ZMQ.msleep(5);"], [58, "            catch (Throwable ex) {"], [59, "                error.set(ex);"], [60, "                ex.printStackTrace();"], [61, "            }"], [85, "        final int max = 20;"], [88, "        try (final ZContext ctx = new ZContext()) {"], [89, "            service.submit(() -> {"], [91, "                Socket xpub = ctx.createSocket(SocketType.XPUB);"], [93, "                Socket xsub = ctx.createSocket(SocketType.XSUB);"], [95, "                Socket ctrl = ctx.createSocket(SocketType.PAIR);"], [98, "            });"], [99, "            final AtomicReference<Throwable> error = testIssue476(front, back, max, service, ctx);"], [100, "            ZMQ.Socket ctrl = ctx.createSocket(SocketType.PAIR);"], [101, "            ctrl.connect(\"inproc://ctrl-proxy\");"], [102, "            ctrl.send(ZMQ.PROXY_TERMINATE);"], [103, "            ctrl.close();"], [105, "            service.shutdown();"], [106, "            service.awaitTermination(2, TimeUnit.SECONDS);"], [108, "            assertThat(error.get(), nullValue());"], [109, "        }"], [142, "            public boolean configure(Socket socket, Plug place, Object... args)"], [177, "        try (final ZContext ctx = new ZContext()) {"], [178, "            ZProxy.Proxy actor = new ZProxy.Proxy.SimpleProxy()"], [180, "                @Override"], [181, "                public Socket create(ZContext ctx, Plug place, Object... args)"], [182, "                {"], [183, "                    if (place == Plug.FRONT) {"], [184, "                        return ctx.createSocket(SocketType.XSUB);"], [185, "                    }"], [186, "                    if (place == Plug.BACK) {"], [187, "                        return ctx.createSocket(SocketType.XPUB);"], [188, "                    }"], [189, "                    if (place == Plug.CAPTURE) {"], [190, "                        return ctx.createSocket(SocketType.PUB);"], [191, "                    }"], [192, "                    return null;"], [195, "                @Override"], [196, "                public boolean configure(Socket socket, Plug place, Object... args)"], [197, "                {"], [198, "                    if (place == Plug.FRONT) {"], [199, "                        return socket.bind(\"tcp://*:\" + front);"], [200, "                    }"], [201, "                    if (place == Plug.BACK) {"], [202, "                        return socket.bind(\"tcp://*:\" + back);"], [203, "                    }"], [204, "                    return true;"], [206, "            };"], [207, "            ZProxy proxy = ZProxy.newProxy(ctx, \"XPub-XSub\", actor, UUID.randomUUID().toString());"], [208, "            proxy.start(true);"], [210, "            final AtomicReference<Throwable> error = testIssue476(front, back, max, service, ctx);"], [211, "            proxy.exit(false);"], [213, "            service.shutdown();"], [214, "            service.awaitTermination(2, TimeUnit.SECONDS);"], [216, "            assertThat(error.get(), nullValue());"], [217, "        }"]], "deleted": [[3, "import static org.hamcrest.CoreMatchers.is;"], [4, "import static org.hamcrest.CoreMatchers.nullValue;"], [5, "import static org.junit.Assert.assertThat;"], [15, ""], [19, "import org.junit.Test;"], [20, "import org.zeromq.ZMQ.Socket;"], [21, "import org.zeromq.ZProxy.Plug;"], [22, ""], [23, "import zmq.util.Utils;"], [33, "        Future<?> subscriber = service.submit(new Runnable()"], [34, "        {"], [35, "            @Override"], [36, "            public void run()"], [37, "            {"], [38, "                Thread.currentThread().setName(\"Subscriber\");"], [39, "                final ZContext ctx = new ZContext();"], [40, "                try {"], [41, "                    final ZMQ.Socket requester = ctx.createSocket(SocketType.SUB);"], [42, "                    requester.connect(\"tcp://localhost:\" + back);"], [43, "                    requester.subscribe(\"hello\".getBytes(ZMQ.CHARSET));"], [44, ""], [45, "                    while (numberReceived.get() < max) {"], [46, "                        ZMsg.recvMsg(requester);"], [47, "                        numberReceived.incrementAndGet();"], [48, "                    }"], [49, "                }"], [50, "                finally {"], [51, "                    ctx.close();"], [57, "        service.submit(new Runnable()"], [58, "        {"], [59, "            @Override"], [60, "            public void run()"], [61, "            {"], [62, "                Thread.currentThread().setName(\"Publisher\");"], [63, "                try {"], [64, "                    ZMQ.Socket pub = ctx.createSocket(SocketType.PUB);"], [65, "                    pub.connect(\"tcp://localhost:\" + front);"], [66, "                    while (numberReceived.get() < max) {"], [67, "                        ZMsg message = ZMsg.newStringMsg(\"hello\", \"world\");"], [68, "                        boolean rc = message.send(pub);"], [69, "                        assertThat(rc, is(true));"], [70, "                        ZMQ.msleep(5);"], [71, "                    }"], [72, "                }"], [73, "                catch (Throwable ex) {"], [74, "                    error.set(ex);"], [75, "                    ex.printStackTrace();"], [101, "        final int max = 10;"], [104, "        final ZContext ctx = new ZContext();"], [105, "        service.submit(new Runnable()"], [106, "        {"], [107, "            @Override"], [108, "            public void run()"], [109, "            {"], [111, "                ZMQ.Socket xpub = ctx.createSocket(SocketType.XPUB);"], [113, "                ZMQ.Socket xsub = ctx.createSocket(SocketType.XSUB);"], [115, "                ZMQ.Socket ctrl = ctx.createSocket(SocketType.PAIR);"], [118, "            }"], [119, "        });"], [120, "        final AtomicReference<Throwable> error = testIssue476(front, back, max, service, ctx);"], [121, "        ZMQ.Socket ctrl = ctx.createSocket(SocketType.PAIR);"], [122, "        ctrl.connect(\"inproc://ctrl-proxy\");"], [123, "        ctrl.send(ZMQ.PROXY_TERMINATE);"], [124, "        ctrl.close();"], [125, ""], [126, "        service.shutdown();"], [127, "        service.awaitTermination(2, TimeUnit.SECONDS);"], [129, "        assertThat(error.get(), nullValue());"], [131, "        ctx.close();"], [164, "            public boolean configure(Socket socket, Plug place, Object... args) throws IOException"], [199, "        final ZContext ctx = new ZContext();"], [200, ""], [201, "        ZProxy.Proxy actor = new ZProxy.Proxy.SimpleProxy()"], [202, "        {"], [203, "            @Override"], [204, "            public Socket create(ZContext ctx, Plug place, Object... args)"], [206, "                if (place == Plug.FRONT) {"], [207, "                    return ctx.createSocket(SocketType.XSUB);"], [208, "                }"], [209, "                if (place == Plug.BACK) {"], [210, "                    return ctx.createSocket(SocketType.XPUB);"], [211, "                }"], [212, "                if (place == Plug.CAPTURE) {"], [213, "                    return ctx.createSocket(SocketType.PUB);"], [215, "                return null;"], [216, "            }"], [218, "            @Override"], [219, "            public boolean configure(Socket socket, Plug place, Object... args) throws IOException"], [220, "            {"], [221, "                if (place == Plug.FRONT) {"], [222, "                    return socket.bind(\"tcp://*:\" + front);"], [223, "                }"], [224, "                if (place == Plug.BACK) {"], [225, "                    return socket.bind(\"tcp://*:\" + back);"], [227, "                return true;"], [228, "            }"], [229, "        };"], [230, "        ZProxy proxy = ZProxy.newProxy(ctx, \"XPub-XSub\", actor, UUID.randomUUID().toString());"], [231, "        proxy.start(true);"], [232, ""], [233, "        final AtomicReference<Throwable> error = testIssue476(front, back, max, service, ctx);"], [234, "        proxy.exit(false);"], [236, "        service.shutdown();"], [237, "        service.awaitTermination(2, TimeUnit.SECONDS);"], [239, "        assertThat(error.get(), nullValue());"], [241, "        ctx.close();"]]}, "num_lines_added": 82, "num_lines_removed": 106}