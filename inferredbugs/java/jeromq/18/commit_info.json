{"hash": "2d78bad5c3e8444785f78c4949048c58b77dad87", "message": "Issue #488 - Make ZContext more like zctx", "file_num_lines": 187, "diff_parsed": {"added": [[7, "import java.util.concurrent.locks.Lock;"], [8, "import java.util.concurrent.locks.ReentrantLock;"], [28, "    private Context context;"], [41, "     * Indicates if context object is owned by main thread"], [42, "     * (useful for multi-threaded applications)"], [43, "     */"], [44, "    private final boolean main;"], [45, ""], [46, "    /**"], [52, "     * Send/receive HWM for pipes"], [54, "    private int pipehwm;"], [55, ""], [56, "    /**"], [57, "     * ZMQ_SNDHWM for normal sockets"], [58, "     */"], [59, "    private int sndhwm;"], [60, ""], [61, "    /**"], [62, "     * ZMQ_RCVHWM for normal sockets"], [63, "     */"], [64, "    private int rcvhwm;"], [65, ""], [66, "    /**"], [67, "     * Make ZContext threadsafe"], [68, "     */"], [69, "    private final Lock mutex;"], [86, "        this.sockets = new CopyOnWriteArrayList<>();"], [87, "        this.mutex = new ReentrantLock();"], [91, "        this.linger = 0;"], [92, "        this.pipehwm = 1000;"], [93, "        this.sndhwm = 1000;"], [94, "        this.rcvhwm = 1000;"], [103, "            destroySocket(socket);"], [125, "        socket.setRcvHWM(this.rcvhwm);"], [126, "        socket.setSndHWM(this.sndhwm);"], [127, "        try {"], [128, "            mutex.lock();"], [129, "            sockets.add(socket);"], [130, "        }"], [131, "        finally {"], [132, "            mutex.unlock();"], [133, "        }"], [148, "        s.setLinger(linger);"], [149, "        s.close();"], [150, "        try {"], [151, "            mutex.lock();"], [152, "            this.sockets.remove(s);"], [153, "        }"], [154, "        finally {"], [155, "            mutex.unlock();"], [178, "        ZContext context = new ZContext(ctx.getContext(), false, ctx.ioThreads);"], [179, "        context.linger = ctx.linger;"], [180, "        context.sndhwm = ctx.sndhwm;"], [181, "        context.rcvhwm = ctx.rcvhwm;"], [182, "        context.pipehwm = ctx.pipehwm;"], [183, "        return context;"], [217, "        try {"], [218, "            mutex.lock();"], [219, "            this.linger = linger;"], [220, "        }"], [221, "        finally {"], [222, "            mutex.unlock();"], [223, "        }"], [227, "     * Set initial receive HWM for all new normal sockets created in context."], [228, "     * You can set this per-socket after the socket is created."], [229, "     * The default, no matter the underlying ZeroMQ version, is 1,000."], [230, "     * @param rcvhwm the rcvhwm"], [231, "     */"], [232, "    public void setRcvHWM(int rcvhwm)"], [233, "    {"], [234, "        try {"], [235, "            mutex.lock();"], [236, "            this.rcvhwm = rcvhwm;"], [237, "        }"], [238, "        finally {"], [239, "            mutex.unlock();"], [240, "        }"], [241, "    }"], [242, ""], [243, "    /**"], [244, "     * Set initial receive HWM for all new normal sockets created in context."], [245, "     * You can set this per-socket after the socket is created."], [246, "     * The default, no matter the underlying ZeroMQ version, is 1,000."], [247, "     * @param sndhwm the sndhwm"], [248, "     */"], [249, "    public void setSndHWM(int sndhwm)"], [250, "    {"], [251, "        try {"], [252, "            mutex.lock();"], [253, "            this.sndhwm = sndhwm;"], [254, "        }"], [255, "        finally {"], [256, "            mutex.unlock();"], [257, "        }"], [258, "    }"], [259, "    /**"], [282, "        try {"], [283, "            mutex.lock();"], [284, "            if (this.context == null) {"], [285, "                this.context = ZMQ.context(this.ioThreads);"], [288, "        finally {"], [289, "            mutex.unlock();"], [290, "        }"], [291, "        return this.context;"]], "deleted": [[26, "    private volatile Context context; //  Created lazily, use getContext() to access."], [44, "     * Indicates if context object is owned by main thread"], [45, "     * (useful for multi-threaded applications)"], [47, "    private final boolean main;"], [64, "        sockets = new CopyOnWriteArrayList<>();"], [68, "        linger = 0;"], [77, "            socket.setLinger(linger);"], [78, "            socket.close();"], [81, ""], [85, "        }"], [86, ""], [87, "        synchronized (this) {"], [104, "        sockets.add(socket);"], [119, ""], [120, "        if (sockets.remove(s)) {"], [121, "            s.setLinger(linger);"], [122, "            s.close();"], [145, "        return new ZContext(ctx.getContext(), false, ctx.getIoThreads());"], [179, "        this.linger = linger;"], [205, "        Context result = context;"], [206, "        if (result == null) {"], [207, "            synchronized (this) {"], [208, "                result = context;"], [209, "                if (result == null) {"], [210, "                    result = ZMQ.context(ioThreads);"], [211, "                    context = result;"], [212, "                }"], [215, "        return result;"]]}, "num_lines_added": 104, "num_lines_removed": 28}