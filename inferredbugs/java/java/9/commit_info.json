{"hash": "18f30bc3939c4715b4fa92146076a70efc3da58b", "message": "Refactor: removing duplicate code snippet", "file_num_lines": 247, "diff_parsed": {"added": [[85, "    ClientBuilder clientBuilderEnv = getClientBuilder(persistConfig, kubeConfig);"], [86, "    if (clientBuilderEnv != null) return clientBuilderEnv;"], [87, "    final File config = findConfigInHomeDir();"], [88, "    ClientBuilder clientBuilderHomeDir = getClientBuilder(persistConfig, config);"], [89, "    if (clientBuilderHomeDir != null) return clientBuilderHomeDir;"], [90, "    final File clusterCa = new File(SERVICEACCOUNT_CA_PATH);"], [91, "    if (clusterCa.exists()) {"], [92, "      return cluster();"], [93, "    }"], [94, "    return new ClientBuilder();"], [95, "  }"], [96, ""], [97, "  private static ClientBuilder getClientBuilder(boolean persistConfig, File kubeConfig)"], [98, "      throws IOException {"], [112, "    return null;"]], "deleted": [[98, "    final File config = findConfigInHomeDir();"], [99, "    if (config != null) {"], [100, "      try (BufferedReader configReader ="], [101, "          new BufferedReader("], [102, "              new InputStreamReader(new FileInputStream(config), StandardCharsets.UTF_8.name()))) {"], [103, "        KubeConfig kc = KubeConfig.loadKubeConfig(configReader);"], [104, "        if (persistConfig) {"], [105, "          kc.setPersistConfig(new FilePersister(config));"], [106, "        }"], [107, "        kc.setFile(config);"], [108, "        return kubeconfig(kc);"], [109, "      }"], [110, "    }"], [111, "    final File clusterCa = new File(SERVICEACCOUNT_CA_PATH);"], [112, "    if (clusterCa.exists()) {"], [113, "      return cluster();"], [114, "    }"], [115, "    return new ClientBuilder();"]]}, "num_lines_added": 15, "num_lines_removed": 18}