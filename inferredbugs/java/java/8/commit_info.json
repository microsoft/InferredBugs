{"hash": "a09edc588765aa9376dd58e243c47e89e5e17872", "message": "thread-safety for pager", "file_num_lines": 81, "diff_parsed": {"added": [[25, "/*"], [26, " * Pager encapsulates kubernetes limit/continue-based list pagination into an iterator."], [27, " * Note that pager is thread-safe."], [28, " */"], [29, "public class Pager<ApiType, ApiListType> implements Iterable<ApiType> {"], [55, "   * Iterator iterator."], [57, "   * @return the iterator"], [61, "    return new PagerIterator();"], [65, "  private Call getNextCall(Integer nextLimit, String continueToken) {"], [66, "    PagerParams params = new PagerParams((nextLimit != null) ? nextLimit : limit, continueToken);"], [71, "  private ApiListType executeRequest(Call call) throws IOException, ApiException {"], [72, "    return client.handleResponse(call.execute(), listType);"], [77, "    private String continueToken;"], [78, "    private Integer limit;"], [80, "    private PagerParams(Integer limit, String continueToken) {"], [85, "    /**"], [86, "     * Gets get limit."], [87, "     *"], [88, "     * @return the get limit"], [89, "     */"], [94, "    /**"], [95, "     * Gets get continue token."], [96, "     *"], [97, "     * @return the get continue token"], [98, "     */"], [103, ""], [104, "  private class PagerIterator implements Iterator<ApiType> {"], [105, ""], [106, "    private boolean started;"], [107, "    private String continueToken;"], [108, "    private Call call;"], [109, "    private int offsetCurrentPage;"], [110, "    private int currentPageSize;"], [111, ""], [112, "    /**"], [113, "     * returns false if kubernetes server has exhausted List."], [114, "     *"], [115, "     * @return the boolean"], [116, "     */"], [117, "    @Override"], [118, "    public boolean hasNext() {"], [119, "      if (!started) {"], [120, "        started = true;"], [121, "        return Boolean.TRUE;"], [122, "      }"], [123, "      return !(continueToken == null && offsetCurrentPage >= currentPageSize);"], [124, "    }"], [125, ""], [126, "    /**"], [127, "     * returns next chunk of List. size of list depends on limit set in constructor."], [128, "     *"], [129, "     * @return the next Object"], [130, "     */"], [131, "    @Override"], [132, "    public ApiType next() {"], [133, "      try {"], [134, "        if (offsetCurrentPage >= currentPageSize) {"], [135, ""], [136, "          call = getNextCall(limit, continueToken);"], [137, ""], [138, "          listObjectCurrentPage = executeRequest(call);"], [139, "          continueToken = Reflect.listMetadata(listObjectCurrentPage).getContinue();"], [140, ""], [141, "          offsetCurrentPage = 0;"], [142, "          currentPageSize = Reflect.<ApiType>getItems(listObjectCurrentPage).size();"], [143, "        }"], [144, "        return Reflect.<ApiType>getItems(listObjectCurrentPage).get(offsetCurrentPage++);"], [145, "      } catch (ApiException e) {"], [146, "        throw new RuntimeException(e.getResponseBody());"], [147, "      } catch (ObjectMetaReflectException | IOException e) {"], [148, "        throw new RuntimeException(e);"], [149, "      }"], [150, "    }"], [151, "  }"]], "deleted": [[18, "import io.kubernetes.client.models.V1ListMeta;"], [26, "public class Pager<ApiType, ApiListType> implements Iterable<ApiType>, Iterator<ApiType> {"], [27, "  private String continueToken;"], [30, "  private Call call;"], [35, "  private int offsetCurrentPage;"], [36, "  private int currentPageSize;"], [56, "   * returns false if kubernetes server has exhausted List."], [57, "   *"], [58, "   * @return"], [59, "   */"], [60, "  @Override"], [61, "  public boolean hasNext() {"], [62, "    if (call == null) {"], [63, "      // the first time looping over the pager"], [64, "      return Boolean.TRUE;"], [65, "    }"], [66, "    if (continueToken == null && offsetCurrentPage >= currentPageSize) {"], [67, "      return Boolean.FALSE;"], [68, "    }"], [69, "    return Boolean.TRUE;"], [70, "  }"], [71, ""], [72, "  /**"], [73, "   * returns next chunk of List. size of list depends on limit set in constructor."], [75, "   * @return Object"], [78, "  public ApiType next() {"], [79, "    try {"], [80, "      if (offsetCurrentPage >= currentPageSize) {"], [81, "        call = getNextCall(limit);"], [82, "        listObjectCurrentPage = executeRequest(call);"], [83, ""], [84, "        offsetCurrentPage = 0;"], [85, "        currentPageSize = Reflect.<ApiType>getItems(listObjectCurrentPage).size();"], [86, "      }"], [87, "      return Reflect.<ApiType>getItems(listObjectCurrentPage).get(offsetCurrentPage++);"], [88, "    } catch (ApiException e) {"], [89, "      throw new RuntimeException(e.getResponseBody());"], [90, "    } catch (ObjectMetaReflectException | IOException e) {"], [91, "      throw new RuntimeException(e);"], [92, "    }"], [93, "  }"], [94, ""], [95, "  @Override"], [97, "    this.call = null;"], [98, "    return this;"], [102, "  private Call getNextCall(Integer nextLimit) {"], [103, "    PagerParams params = new PagerParams((nextLimit != null) ? nextLimit : limit);"], [104, "    if (continueToken != null) {"], [105, "      params.continueToken = continueToken;"], [106, "    }"], [111, "  private ApiListType executeRequest(Call call)"], [112, "      throws IOException, ApiException, ObjectMetaReflectException {"], [113, "    ApiListType data = client.handleResponse(call.execute(), listType);"], [114, "    V1ListMeta listMetaData = Reflect.listMetadata(data);"], [115, "    continueToken = listMetaData.getContinue();"], [116, "    return data;"], [120, "    private Integer limit;"], [121, "    private String continueToken;"], [123, "    public PagerParams(Integer limit) {"], [124, "      this.limit = limit;"], [125, "    }"], [127, "    public PagerParams(Integer limit, String continueToken) {"]]}, "num_lines_added": 74, "num_lines_removed": 62}