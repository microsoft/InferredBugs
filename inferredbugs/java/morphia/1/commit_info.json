{"hash": "5de977ee51b7c1729fbffc1837363df907a9b68c", "message": "added @Entity(concern = String) for issue #118", "file_num_lines": 696, "diff_parsed": {"added": [[3, "import java.lang.reflect.Field;"], [4, "import java.lang.reflect.Modifier;"], [16, "import com.google.code.morphia.annotations.Entity;"], [137, "\t\tdelete(clazz, id, getWriteConcern(clazz));"], [146, "\t\tdelete(entity, getWriteConcern(entity));"], [163, "\t\tdelete(query, getWriteConcern(query.getEntityClass()));"], [507, "\t\t//TODO: try not to create two iterators..."], [508, "\t\tObject first = entities.iterator().next();"], [509, "\t\treturn insert(entities, getWriteConcern(first));"], [544, "\t\treturn insert(Arrays.asList(entities), getWriteConcern(entities[0]));"], [548, "\t\treturn insert(entity, getWriteConcern(entity));"], [559, "\t\treturn insert(dbColl, entity, getWriteConcern(entity));"], [601, "\t\tObject first = entities.iterator().next();"], [602, "\t\treturn save(entities, getWriteConcern(first));"], [697, "\t\treturn save(dbColl, entity, getWriteConcern(entity));"], [701, "\t\treturn save(entity, getWriteConcern(entity));"], [721, "\t\treturn update(query, ops, createIfMissing, getWriteConcern(query.getEntityClass()));"], [739, "\t\treturn update(query, ops, createIfMissing, getWriteConcern(query.getEntityClass()));"], [753, "\t\tUpdateResults<T> res = update(query, u, createIfMissing, false, getWriteConcern(entity));"], [777, "\t\treturn update(query, ops, createIfMissing, multi, getWriteConcern(query.getEntityClass()));"], [864, "\t//TODO: Remove this once driver gets it (2.3)"], [865, "    //map of the constants from above for use by fromString"], [866, "    private static Map<String, WriteConcern> _namedConcerns = null;"], [867, ""], [868, "    /** Get the WriteConcern constants by name: NONE, NORMAL, SAFE, FSYNC_SAFE, REPLICA_SAFE. (matching is done case insensitively)*/"], [869, "    private static WriteConcern getConcernByName(String name) {"], [870, "    \tif (_namedConcerns == null) {"], [871, "\t\t\tHashMap<String, WriteConcern> newMap = new HashMap<String, WriteConcern>( 8 , 1 );"], [872, "\t\t\tfor (Field f : WriteConcern.class.getFields())"], [873, "\t\t\t\tif (Modifier.isStatic( f.getModifiers() ) && f.getType().equals( WriteConcern.class )) {"], [874, "\t\t\t\t\ttry {"], [875, "\t\t\t\t\t\tnewMap.put( f.getName().toLowerCase(), (WriteConcern) f.get( null ) );"], [876, "\t\t\t\t\t} catch (Exception e) {"], [877, "\t\t\t\t\t\tthrow new RuntimeException(e);"], [878, "\t\t\t\t\t}"], [879, "\t\t\t\t}"], [880, ""], [881, "\t\t\t//Thought about doing a synchronize but this seems just as safe and I don't care about race conditions."], [882, "\t\t\t_namedConcerns = newMap;"], [883, "\t\t}"], [884, ""], [885, "    \treturn _namedConcerns.get(name.toLowerCase());"], [886, "    }"], [887, ""], [892, "\t/** Gets the write concern for entity or returns the default write concern for this datastore */"], [893, "\tpublic WriteConcern getWriteConcern(Object clazzOrEntity) {"], [894, "\t\tEntity entityAnn = getMapper().getMappedClass(clazzOrEntity).getEntityAnnotation();"], [895, "\t\tif(entityAnn != null && entityAnn.concern() != null && entityAnn.concern() != \"\" )"], [896, "\t\t\treturn getConcernByName(entityAnn.concern());"], [897, ""], [898, "\t\treturn defConcern;"], [899, "\t}"]], "deleted": [[134, "\t\tdelete(clazz, id, defConcern);"], [143, "\t\tdelete(entity, defConcern);"], [160, "\t\tdelete(query, defConcern);"], [504, "\t\treturn insert(entities, defConcern);"], [539, "\t\treturn insert(Arrays.asList(entities), defConcern);"], [543, "\t\treturn insert(entity, defConcern);"], [554, "\t\treturn insert(dbColl, entity, defConcern);"], [562, ""], [563, "\tprotected <T> Key<T> insert(DBCollection dbColl, T entity) {"], [564, "\t\treturn insert(dbColl, entity, defConcern);"], [565, "\t}"], [600, "\t\treturn save(entities, defConcern);"], [695, "\t\treturn save(dbColl, entity, defConcern);"], [699, "\t\treturn save(entity, defConcern);"], [719, "\t\treturn update(query, ops, createIfMissing, defConcern);"], [737, "\t\treturn update(query, ops, createIfMissing, defConcern);"], [751, "\t\tUpdateResults<T> res = update(query, u, createIfMissing, false, defConcern);"], [775, "\t\treturn update(query, ops, createIfMissing, multi, defConcern);"]]}, "num_lines_added": 52, "num_lines_removed": 18}