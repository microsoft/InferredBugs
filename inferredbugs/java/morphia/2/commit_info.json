{"hash": "62dc90442015adeb26e786409cab6a6f711dc9d0", "message": "lots of cleanup; working on issue #90", "file_num_lines": 288, "diff_parsed": {"added": [[18, "import java.util.HashSet;"], [21, "import java.util.Set;"], [70, "\tprivate final Map<String, Set<MappedClass>> mappedClassesByCollection = new HashMap<String, Set<MappedClass>>();"], [71, ""], [119, "\t/** Creates a MappedClass and validates it. */"], [120, "\tpublic MappedClass addMappedClass(Class c) {"], [123, "\t\treturn addMappedClass(mc, true);"], [125, "\t/** Validates MappedClass and adds to internal cache. */"], [126, "\tpublic MappedClass addMappedClass(MappedClass mc) {"], [127, "\t\treturn addMappedClass(mc, true);"], [128, "\t}"], [129, ""], [130, ""], [131, "\t/** Add MappedClass to internal cache, possibly validating first. */"], [132, "\tprivate MappedClass addMappedClass(MappedClass mc, boolean validate) {"], [133, "\t\tif (validate)"], [134, "\t\t\tmc.validate();"], [135, ""], [137, ""], [138, "\t\tSet<MappedClass> mcs = mappedClassesByCollection.get(mc.getCollectionName());"], [139, "\t\tif (mcs == null)"], [140, "\t\t\tmcs = new HashSet();"], [141, "\t\tmcs.add(mc);"], [142, ""], [146, "\t/** Returns map of MappedClasses by class name */"], [170, "\t\t\t// no validation"], [171, "\t\t\taddMappedClass(mc, false);"], [197, "\t\t\t\tMappedField mf = mc.getMappedIdField();"], [199, "\t\t\t\treadMappedField(dbObj, mf, entity, cache);"], [341, "\t\t\t\twriteMappedField(dbObject, mf, entity, involvedObjects);"], [372, "\t\t\t\treadMappedField(dbObject, mf, entity, cache);"], [386, "\tprivate void readMappedField(DBObject dbObject, MappedField mf, Object entity, EntityCache cache) {"], [387, "\t\tif (mf.hasAnnotation(Property.class) || mf.hasAnnotation(Serialized.class)"], [388, "\t\t\t\t|| mf.isTypeMongoCompatible() || converters.hasSimpleValueConverter(mf))"], [389, "\t\t\topts.valueMapper.fromDBObject(dbObject, mf, entity, cache, this);"], [390, "\t\telse if (mf.hasAnnotation(Embedded.class))"], [391, "\t\t\topts.embeddedMapper.fromDBObject(dbObject, mf, entity, cache, this);"], [392, "\t\telse if (mf.hasAnnotation(Reference.class))"], [393, "\t\t\topts.referenceMapper.fromDBObject(dbObject, mf, entity, cache, this);"], [394, "\t\telse {"], [395, "\t\t\topts.defaultMapper.fromDBObject(dbObject, mf, entity, cache, this);"], [396, "\t\t}"], [397, "\t}"], [398, ""], [399, "\tprivate void writeMappedField(BasicDBObject dbObject, MappedField mf, Object entity, Map<Object, DBObject> involvedObjects) {"], [400, "\t\tClass<? extends Annotation> annType = null;"], [401, ""], [402, "\t\t//skip not saved fields."], [403, "\t\tif (mf.hasAnnotation(NotSaved.class))"], [404, "\t\t\t\treturn;"], [405, ""], [406, "\t\t// get the annotation from the field."], [407, "\t\tfor (Class<? extends Annotation> testType : new Class[] {\tProperty.class,"], [408, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEmbedded.class,"], [409, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSerialized.class,"], [410, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReference.class }) {"], [411, "\t\t\tif (mf.hasAnnotation(testType)) {"], [412, "\t\t\t\tannType = testType;"], [413, "\t\t\t\tbreak;"], [416, ""], [417, "\t\tif (Property.class.equals(annType) || Serialized.class.equals(annType)"], [418, "\t\t\t\t|| mf.isTypeMongoCompatible() || (converters.hasSimpleValueConverter(mf)))"], [419, "\t\t\topts.valueMapper.toDBObject(entity, mf, dbObject, involvedObjects, this);"], [420, "\t\telse if (Reference.class.equals(annType))"], [421, "\t\t\topts.referenceMapper.toDBObject(entity, mf, dbObject, involvedObjects, this);"], [422, "\t\telse if (Embedded.class.equals(annType)) {"], [423, "\t\t\topts.embeddedMapper.toDBObject(entity, mf, dbObject, involvedObjects, this);"], [424, "\t\t} else {"], [425, "\t\t\tlogger.debug(\"No annotation was found, using default mapper \" + opts.defaultMapper + \" for \" + mf);"], [426, "\t\t\topts.defaultMapper.toDBObject(entity, mf, dbObject, involvedObjects, this);"], [427, "\t\t}"], [428, ""]], "deleted": [[57, ""], [116, "\tpublic void addMappedClass(final Class c) {"], [119, "\t\tmappedClasses.put(c.getName(), mc);"], [121, ""], [122, "\tpublic MappedClass addMappedClass(final MappedClass mc) {"], [123, "\t\tmc.validate();"], [150, "\t\t\t// no validation"], [152, "\t\t\tmappedClasses.put(mc.getClazz().getName(), mc);"], [178, "\t\t\t\tMappedField mf = mc.getMappedField(ID_KEY);"], [180, "\t\t\t\tsetIdValue(entity, mf, dbObj, cache);"], [322, "\t\t\t\tClass<? extends Annotation> annType = null;"], [323, ""], [324, "\t\t\t\t//skip not saved fields."], [325, "\t\t\t\tif (mf.hasAnnotation(NotSaved.class))"], [326, "\t\t\t\t\t\tcontinue;"], [327, ""], [328, "\t\t\t\t// get the annotation from the field."], [329, "\t\t\t\tfor (Class<? extends Annotation> testType : new Class[] { \tId.class,"], [330, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tProperty.class,"], [331, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEmbedded.class,"], [332, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSerialized.class,"], [333, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReference.class }) {"], [334, "\t\t\t\t\tif (mf.hasAnnotation(testType)) {"], [335, "\t\t\t\t\t\tannType = testType;"], [336, "\t\t\t\t\t\tbreak;"], [337, "\t\t\t\t\t}"], [338, "\t\t\t\t}"], [339, ""], [340, "\t\t\t\tif (Id.class.equals(annType)) {"], [341, "\t\t\t\t\tObject idVal = mf.getFieldValue(entity);"], [342, "\t\t\t\t\tif (idVal != null) {"], [343, "\t\t\t\t\t\tif (!mf.isTypeMongoCompatible() && !converters.hasSimpleValueConverter(mf)) {"], [344, "\t\t\t\t\t\t\topts.embeddedMapper.toDBObject(entity, mf, dbObject, involvedObjects, this);"], [345, "\t\t\t\t\t\t} else {"], [346, "\t\t\t\t\t\t\tObject dbVal = converters.encode(idVal);"], [347, "\t\t\t\t\t\t\tdbObject.put(ID_KEY, dbVal);"], [348, "\t\t\t\t\t\t}"], [349, "\t\t\t\t\t}"], [350, "\t\t\t\t} else if (Property.class.equals(annType) || Serialized.class.equals(annType)"], [351, "\t\t\t\t\t\t|| mf.isTypeMongoCompatible() || (converters.hasSimpleValueConverter(mf)))"], [352, "\t\t\t\t\topts.valueMapper.toDBObject(entity, mf, dbObject, involvedObjects, this);"], [353, "\t\t\t\telse if (Reference.class.equals(annType))"], [354, "\t\t\t\t\topts.referenceMapper.toDBObject(entity, mf, dbObject, involvedObjects, this);"], [355, "\t\t\t\telse if (Embedded.class.equals(annType)) {"], [356, "\t\t\t\t\topts.embeddedMapper.toDBObject(entity, mf, dbObject, involvedObjects, this);"], [357, "\t\t\t\t} else {"], [358, "\t\t\t\t\tlogger.debug(\"No annotation was found, using default mapper \" + opts.defaultMapper + \" for \" + mf);"], [359, "\t\t\t\t\topts.defaultMapper.toDBObject(entity, mf, dbObject, involvedObjects, this);"], [360, "\t\t\t\t}"], [361, ""], [392, "\t\t\t\tif (mf.hasAnnotation(Id.class)) {"], [393, "\t\t\t\t\tsetIdValue(entity, mf, dbObject, cache);"], [394, "\t\t\t\t} else if (mf.hasAnnotation(Property.class) || mf.hasAnnotation(Serialized.class)"], [395, "\t\t\t\t\t\t|| mf.isTypeMongoCompatible() || converters.hasSimpleValueConverter(mf))"], [396, "\t\t\t\t\topts.valueMapper.fromDBObject(dbObject, mf, entity, cache, this);"], [397, "\t\t\t\telse if (mf.hasAnnotation(Embedded.class))"], [398, "\t\t\t\t\topts.embeddedMapper.fromDBObject(dbObject, mf, entity, cache, this);"], [399, "\t\t\t\telse if (mf.hasAnnotation(Reference.class))"], [400, "\t\t\t\t\topts.referenceMapper.fromDBObject(dbObject, mf, entity, cache, this);"], [401, "\t\t\t\telse {"], [402, "\t\t\t\t\topts.defaultMapper.fromDBObject(dbObject, mf, entity, cache, this);"], [403, "\t\t\t\t}"], [417, "\tprivate void setIdValue(Object entity, MappedField mf, DBObject dbObject, EntityCache cache) {"], [418, "\t\tif (dbObject.get(ID_KEY) != null) {"], [419, "\t\t\tObject dbVal = dbObject.get(ID_KEY);"], [420, "\t\t\tObject idVal = null;"], [421, ""], [422, "\t\t\tif (!mf.isTypeMongoCompatible() && !converters.hasSimpleValueConverter(mf)) {"], [423, "\t\t\t\topts.embeddedMapper.fromDBObject(dbObject, mf, entity, cache, this);"], [424, "\t\t\t\tidVal = mf.getFieldValue(entity);"], [425, "\t\t\t} else {"], [426, "\t\t\t\tidVal = converters.decode(mf.getType(), dbObject.get(ID_KEY), mf);"], [427, "\t\t\t\tmf.setFieldValue(entity, idVal);"], [429, ""], [430, "\t\t\tif (idVal == null)"], [431, "\t\t\t\tthrow new MappingException(String.format(\"@Id field (_id='\" + dbVal +\"') was converted to null\"));"]]}, "num_lines_added": 72, "num_lines_removed": 76}