{"hash": "e2257d961c5d3b0b84ffeb8d049f7ede1e2f1398", "message": "Improvements codegen to handle edge cases.", "file_num_lines": 227, "diff_parsed": {"added": [[58, "      for (Object fqcn : jvmClasses(\"api\")) {"], [81, "      if (!sameModule(type, referencedType.getRaw())) {"], [82, "        String simpleName = referencedType.getSimpleName();"], [83, "        if (simpleName.equals(model.getIfaceSimpleName())) {"], [84, "          String aliasName = simpleName + \"Super\";"], [85, "          simpleName = simpleName + \" as \" + aliasName;"], [86, "          aliasMap.put(referencedType.getName(), aliasName);"], [88, "        importType(writer, session, referencedType, simpleName, getNPMScope(referencedType.getRaw().getModule()));"], [89, "        imports = true;"], [93, "      if (sameModule(type, dataObjectType.getRaw())) {"], [94, "        importType(writer, session, dataObjectType, dataObjectType.getSimpleName(), \"./options\");"], [95, "        imports = true;"], [96, "      } else {"], [97, "        importType(writer, session, dataObjectType, dataObjectType.getSimpleName(), getNPMScope(dataObjectType.getRaw().getModule()) + \"/options\");"], [98, "        imports = true;"], [102, "      if (enumType.getRaw().getModuleName() == null) {"], [103, "        System.err.println(\"@@@ Missing module for ENUM: \" + enumType);"], [104, "        continue;"], [105, "      }"], [106, "      if (sameModule(type, enumType.getRaw())) {"], [107, "        importType(writer, session, enumType, enumType.getSimpleName(), \"./enums\");"], [108, "        imports = true;"], [109, "      } else {"], [110, "        importType(writer, session, enumType, enumType.getSimpleName(), getNPMScope(enumType.getRaw().getModule()) + \"/enums\");"], [111, "        imports = true;"], [116, "    // ensure that all super types are also imported"], [117, "    model.getAbstractSuperTypes().forEach(ti -> {"], [118, "      if (!sameModule(type, ti.getRaw())) {"], [119, "        importType(writer, session, ti, ti.getSimpleName(), getNPMScope(ti.getRaw().getModule()));"], [120, "      }"], [121, "      superTypes.add(genType(ti));"], [122, "    });"], [123, ""], [124, "    imports |= superTypes.size() > 0;"], [128, "        TypeInfo ti = model.getHandlerArg();"], [129, "        if (!sameModule(type, ti.getRaw())) {"], [130, "          importType(writer, session, ti, ti.getSimpleName(), getNPMScope(ti.getRaw().getModule()) + (ti.isDataObjectHolder() ? \"/options\" : \"\"));"], [131, "          imports = true;"], [132, "        }"], [133, "        superTypes.add(\"Handler<\" + genType(ti) + \">\");"], [137, "    if (imports) {"], [138, "      writer.print(\"\\n\");"], [139, "    }"], [140, ""]], "deleted": [[58, "      for (Object fqcn : jvmClasses()) {"], [81, "      if (!isImported(referencedType, session)) {"], [82, "        if (!referencedType.getRaw().getModuleName().equals(type.getModuleName())) {"], [83, "          String simpleName = referencedType.getSimpleName();"], [84, "          if (simpleName.equals(model.getIfaceSimpleName())) {"], [85, "            String aliasName = simpleName + \"Super\";"], [86, "            simpleName = simpleName + \" as \" + aliasName;"], [87, "            aliasMap.put(referencedType.getName(), aliasName);"], [88, "          }"], [89, "          // ignore missing imports"], [90, "          if (isOptionalModule(getNPMScope(referencedType.getRaw().getModule()))) {"], [91, "            writer.println(\"// @ts-ignore\");"], [92, "          }"], [93, "          writer.printf(\"import { %s } from '%s';\\n\", simpleName, getNPMScope(referencedType.getRaw().getModule()));"], [94, "          imports = true;"], [99, "      if (!isImported(dataObjectType, session)) {"], [100, "        if (dataObjectType.getRaw().getModuleName().equals(type.getModuleName())) {"], [101, "          writer.printf(\"import { %s } from './options';\\n\", dataObjectType.getSimpleName());"], [102, "          imports = true;"], [103, "        } else {"], [104, "          writer.printf(\"import { %s } from '%s/options';\\n\", dataObjectType.getSimpleName(), getNPMScope(dataObjectType.getRaw().getModule()));"], [105, "          imports = true;"], [106, "        }"], [110, "      if (!isImported(enumType, session)) {"], [111, "        if (enumType.getRaw().getModuleName().equals(type.getModuleName())) {"], [112, "          writer.printf(\"import { %s } from './enums';\\n\", enumType.getSimpleName());"], [113, "          imports = true;"], [114, "        } else {"], [115, "          writer.printf(\"import { %s } from '%s/enums';\\n\", enumType.getSimpleName(), getNPMScope(enumType.getRaw().getModule()));"], [116, "          imports = true;"], [117, "        }"], [119, "    }"], [120, ""], [121, "    if (imports) {"], [122, "      writer.print(\"\\n\");"], [126, "    model.getAbstractSuperTypes().forEach(ti -> superTypes.add(genType(ti)));"], [130, "        superTypes.add(\"Handler<\" + genType(model.getHandlerArg()) + \">\");"]]}, "num_lines_added": 44, "num_lines_removed": 37}