{"hash": "024fabe7afc62e19b1db68eabef5825d7cd2a14e", "message": "StatusMetricsBolt returns a max of 10K results per status, fixes #723", "file_num_lines": 118, "diff_parsed": {"added": [[30, "import org.elasticsearch.action.ActionListener;"], [32, "import org.elasticsearch.client.core.CountRequest;"], [33, "import org.elasticsearch.client.core.CountResponse;"], [59, "    private Map<String, Long> latestStatusCounts = new HashMap<>(6);"], [65, "    private transient StatusActionListener[] listeners;"], [66, ""], [67, "    private class StatusActionListener"], [68, "            implements ActionListener<CountResponse> {"], [69, ""], [70, "        private final String name;"], [71, ""], [72, "        private boolean ready = true;"], [73, ""], [74, "        public boolean isReady() {"], [75, "            return ready;"], [76, "        }"], [77, ""], [78, "        public void busy() {"], [79, "            this.ready = false;"], [80, "        }"], [81, ""], [82, "        StatusActionListener(String statusName) {"], [83, "            name = statusName;"], [84, "        }"], [85, ""], [86, "        @Override"], [87, "        public void onResponse(CountResponse response) {"], [88, "            ready = true;"], [89, "            LOG.debug(\"Got {} counts for status:{}\", response.getCount(), name);"], [90, "            latestStatusCounts.put(name, response.getCount());"], [91, "        }"], [92, ""], [93, "        @Override"], [94, "        public void onFailure(Exception e) {"], [95, "            ready = true;"], [96, "            LOG.error(\"Failure when getting counts for status:{}\", name, e);"], [97, "        }"], [98, ""], [99, "    }"], [100, ""], [118, ""], [119, "        listeners = new StatusActionListener[6];"], [120, ""], [121, "        listeners[0] = new StatusActionListener(\"DISCOVERED\");"], [122, "        listeners[1] = new StatusActionListener(\"FETCHED\");"], [123, "        listeners[2] = new StatusActionListener(\"FETCH_ERROR\");"], [124, "        listeners[3] = new StatusActionListener(\"REDIRECTION\");"], [125, "        listeners[4] = new StatusActionListener(\"ERROR\");"], [126, "        listeners[5] = new StatusActionListener(\"TOTAL\");"], [146, "        for (StatusActionListener listener : listeners) {"], [147, "            // still waiting for results from previous request"], [148, "            if (!listener.isReady()) {"], [149, "                LOG.debug(\"Not ready to get counts for status {}\","], [150, "                        listener.name);"], [153, "            CountRequest request = new CountRequest(indexName);"], [154, "            if (!listener.name.equalsIgnoreCase(\"TOTAL\")) {"], [155, "                SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();"], [156, "                sourceBuilder.query("], [157, "                        QueryBuilders.termQuery(\"status\", listener.name));"], [158, "                request.source(sourceBuilder);"], [159, "            }"], [160, "            listener.busy();"], [161, "            connection.getClient().countAsync(request, RequestOptions.DEFAULT,"], [162, "                    listener);"], [175, ""]], "deleted": [[20, "import java.io.IOException;"], [25, "import org.apache.storm.metric.api.IMetric;"], [32, "import org.elasticsearch.action.search.MultiSearchRequest;"], [33, "import org.elasticsearch.action.search.MultiSearchResponse;"], [34, "import org.elasticsearch.action.search.MultiSearchResponse.Item;"], [35, "import org.elasticsearch.action.search.SearchRequest;"], [36, "import org.elasticsearch.action.search.SearchResponse;"], [44, "import com.digitalpebble.stormcrawler.persistence.Status;"], [64, "    private Map<String, Long> latestStatusCounts = new HashMap<>(5);"], [106, "        Status[] slist = new Status[] { Status.DISCOVERED, Status.ERROR,"], [107, "                Status.FETCH_ERROR, Status.FETCHED, Status.REDIRECTION };"], [108, ""], [109, "        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();"], [110, ""], [111, "        // should be faster than running the aggregations"], [112, "        // sent as a single multisearch"], [113, "        for (Status s : slist) {"], [114, "            SearchRequest request = new SearchRequest(indexName);"], [115, "            SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();"], [116, "            sourceBuilder.query(QueryBuilders.termQuery(\"status\", s.name()));"], [117, "            sourceBuilder.from(0);"], [118, "            sourceBuilder.size(0);"], [119, "            sourceBuilder.explain(false);"], [120, "            sourceBuilder.trackTotalHits(true);"], [121, "            request.source(sourceBuilder);"], [122, "            multiSearchRequest.add(request);"], [123, "        }"], [124, ""], [125, "        long start = System.currentTimeMillis();"], [126, ""], [127, "        MultiSearchResponse response;"], [128, "        try {"], [129, "            response = connection.getClient().msearch(multiSearchRequest,"], [130, "                    RequestOptions.DEFAULT);"], [131, "        } catch (IOException e) {"], [132, "            LOG.error(\"Exception caught when getting multisearch\", e);"], [133, "            return;"], [134, "        }"], [135, ""], [136, "        long end = System.currentTimeMillis();"], [137, ""], [138, "        LOG.info(\"Multiquery returned in {} msec\", end - start);"], [139, ""], [140, "        long total = 0l;"], [141, ""], [142, "        for (int i = 0; i < response.getResponses().length; i++) {"], [143, "            final Item item = response.getResponses()[i];"], [144, "            if (item.isFailure()) {"], [145, "                LOG.warn(\"failure response when querying for status {}\","], [146, "                        slist[i].name());"], [149, "            SearchResponse res = item.getResponse();"], [150, "            long count = res.getHits().getTotalHits().value;"], [151, "            latestStatusCounts.put(slist[i].name(), count);"], [152, "            total += count;"], [154, ""], [155, "        latestStatusCounts.put(\"TOTAL\", total);"]]}, "num_lines_added": 65, "num_lines_removed": 56}