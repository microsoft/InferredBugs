{"hash": "345d100fb66ec6040358cf9b85c716eb718ae52c", "message": "Refactoring into AbstractSpout for ES", "file_num_lines": 187, "diff_parsed": {"added": [[25, "import org.apache.storm.metric.api.IMetric;"], [26, "import org.apache.storm.spout.SpoutOutputCollector;"], [27, "import org.apache.storm.task.TopologyContext;"], [28, "import org.apache.storm.tuple.Values;"], [52, "public class ElasticSearchSpout extends AbstractSpout {"], [107, "        super.open(stormConf, context, collector);"], [255, "            Metadata metadata = fromKeyValues(keyValues);"]], "deleted": [[22, "import java.util.Iterator;"], [23, "import java.util.LinkedList;"], [24, "import java.util.List;"], [26, "import java.util.Map.Entry;"], [27, "import java.util.Queue;"], [30, "import org.elasticsearch.action.admin.cluster.shards.ClusterSearchShardsGroup;"], [31, "import org.elasticsearch.action.admin.cluster.shards.ClusterSearchShardsRequest;"], [32, "import org.elasticsearch.action.admin.cluster.shards.ClusterSearchShardsResponse;"], [36, "import org.elasticsearch.client.Client;"], [49, "import com.digitalpebble.stormcrawler.elasticsearch.ElasticSearchConnection;"], [53, "import org.apache.storm.metric.api.IMetric;"], [54, "import org.apache.storm.metric.api.MultiCountMetric;"], [55, "import org.apache.storm.spout.SpoutOutputCollector;"], [56, "import org.apache.storm.task.TopologyContext;"], [57, "import org.apache.storm.topology.OutputFieldsDeclarer;"], [58, "import org.apache.storm.topology.base.BaseRichSpout;"], [59, "import org.apache.storm.tuple.Fields;"], [60, "import org.apache.storm.tuple.Values;"], [61, ""], [67, "public class ElasticSearchSpout extends BaseRichSpout {"], [72, "    private static final String ESBoltType = \"status\";"], [73, ""], [74, "    private static final String ESStatusIndexNameParamName = \"es.status.index.name\";"], [75, "    private static final String ESStatusDocTypeParamName = \"es.status.doc.type\";"], [82, "    private String indexName;"], [83, "    private String docType;"], [84, ""], [85, "    private SpoutOutputCollector _collector;"], [86, ""], [87, "    private static Client client;"], [88, ""], [91, "    private Queue<Values> buffer = new LinkedList<>();"], [92, ""], [112, "    private MultiCountMetric eventCounter;"], [113, ""], [114, "    private boolean active = true;"], [115, ""], [127, "        indexName = ConfUtils.getString(stormConf, ESStatusIndexNameParamName,"], [128, "                \"status\");"], [129, "        docType = ConfUtils.getString(stormConf, ESStatusDocTypeParamName,"], [130, "                \"status\");"], [143, "        // one ES client per JVM"], [144, "        synchronized (ElasticSearchSpout.class) {"], [145, "            try {"], [146, "                if (client == null) {"], [147, "                    client = ElasticSearchConnection.getClient(stormConf,"], [148, "                            ESBoltType);"], [149, "                }"], [150, "            } catch (Exception e1) {"], [151, "                LOG.error(\"Can't connect to ElasticSearch\", e1);"], [152, "                throw new RuntimeException(e1);"], [153, "            }"], [154, "        }"], [155, ""], [156, "        // if more than one instance is used we expect their number to be the"], [157, "        // same as the number of shards"], [158, "        int totalTasks = context"], [159, "                .getComponentTasks(context.getThisComponentId()).size();"], [160, "        if (totalTasks > 1) {"], [161, "            // determine the number of shards so that we can restrict the"], [162, "            // search"], [163, "            ClusterSearchShardsRequest request = new ClusterSearchShardsRequest("], [164, "                    indexName);"], [165, "            ClusterSearchShardsResponse shardresponse = client.admin()"], [166, "                    .cluster().searchShards(request).actionGet();"], [167, "            ClusterSearchShardsGroup[] shardgroups = shardresponse.getGroups();"], [168, "            if (totalTasks != shardgroups.length) {"], [169, "                throw new RuntimeException("], [170, "                        \"Number of ES spout instances should be the same as number of shards (\""], [171, "                                + shardgroups.length + \") but is \" + totalTasks);"], [172, "            }"], [173, "            shardID = shardgroups[context.getThisTaskIndex()].getShardId();"], [174, "            LOG.info(\"Assigned shard ID {}\", shardID);"], [175, "        }"], [180, "        _collector = collector;"], [181, ""], [182, "        this.eventCounter = context.registerMetric(\"counters\","], [183, "                new MultiCountMetric(), 10);"], [184, ""], [191, ""], [192, "        context.registerMetric(\"buffer_size\", new IMetric() {"], [193, "            @Override"], [194, "            public Object getValueAndReset() {"], [195, "                return buffer.size();"], [196, "            }"], [197, "        }, 10);"], [198, "    }"], [199, ""], [200, "    @Override"], [201, "    public void close() {"], [202, "        if (client != null)"], [203, "            client.close();"], [204, "    }"], [205, ""], [206, "    @Override"], [207, "    public void declareOutputFields(OutputFieldsDeclarer declarer) {"], [208, "        declarer.declare(new Fields(\"url\", \"metadata\"));"], [346, "            Map<String, List<String>> mdAsMap = (Map<String, List<String>>) keyValues"], [347, "                    .get(\"metadata\");"], [348, "            Metadata metadata = new Metadata();"], [349, "            if (mdAsMap != null) {"], [350, "                Iterator<Entry<String, List<String>>> mdIter = mdAsMap"], [351, "                        .entrySet().iterator();"], [352, "                while (mdIter.hasNext()) {"], [353, "                    Entry<String, List<String>> mdEntry = mdIter.next();"], [354, "                    String key = mdEntry.getKey();"], [355, "                    // periods are not allowed in ES2 - replace with %2E"], [356, "                    key = key.replaceAll(\"%2E\", \"\\\\.\");"], [357, "                    Object mdValObj = mdEntry.getValue();"], [358, "                    // single value"], [359, "                    if (mdValObj instanceof String) {"], [360, "                        metadata.addValue(key, (String) mdValObj);"], [361, "                    }"], [362, "                    // multi valued"], [363, "                    else {"], [364, "                        metadata.addValues(key, (List<String>) mdValObj);"], [365, "                    }"], [366, "                }"], [367, "            }"], [398, "    @Override"], [399, "    public void activate() {"], [400, "        active = true;"], [401, "    }"], [402, ""], [403, "    @Override"], [404, "    public void deactivate() {"], [405, "        active = false;"], [406, "    }"], [407, ""]]}, "num_lines_added": 7, "num_lines_removed": 129}