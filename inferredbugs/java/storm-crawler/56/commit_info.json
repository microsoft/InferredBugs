{"hash": "74d4740c41283895b24df089676071385066d065", "message": "spout.reset.fetchdate.after based on time when query was set to NOW,fixes #648", "file_num_lines": 239, "diff_parsed": {"added": [[24, "import java.time.Instant;"], [103, "        if (queryDate == null) {"], [104, "            queryDate = new Date();"], [105, "            lastTimeResetToNOW = Instant.now();"], [109, "                queryDate.getTime());"], [285, "        if (mostRecentDateFound != null && recentDateIncrease >= 0) {"], [293, "                low.setTime(queryDate);"], [296, "                high.setTime(queryDate);"], [300, "                    oldDate = queryDate;"], [303, "                oldDate = queryDate;"], [306, "                queryDate = potentialNewDate.getTime();"], [309, "                        logIdprefix, oldDate, queryDate, mostRecentDateFound);"], [313, "                        logIdprefix, queryDate, mostRecentDateFound);"], [314, "            }"], [315, "        }"], [316, ""], [317, "        // reset the value for next fetch date if the previous one is too old"], [318, "        if (resetFetchDateAfterNSecs != -1) {"], [319, "            Instant changeNeededOn = Instant.ofEpochMilli(lastTimeResetToNOW"], [320, "                    .toEpochMilli() + (resetFetchDateAfterNSecs * 1000));"], [321, "            if (Instant.now().isAfter(changeNeededOn)) {"], [322, "                LOG.info("], [323, "                        \"{} lastDate set to null based on resetFetchDateAfterNSecs {}\","], [324, "                        logIdprefix, resetFetchDateAfterNSecs);"], [325, "                queryDate = null;"], [331, "            queryDate = null;"]], "deleted": [[102, "        if (lastDate == null) {"], [103, "            lastDate = new Date();"], [107, "                lastDate.getTime());"], [280, "        // reset the value for next fetch date if the previous one is too old"], [281, "        if (resetFetchDateAfterNSecs != -1) {"], [282, "            Calendar diffCal = Calendar.getInstance();"], [283, "            diffCal.setTime(lastDate);"], [284, "            diffCal.add(Calendar.SECOND, resetFetchDateAfterNSecs);"], [285, "            // compare to now"], [286, "            if (diffCal.before(Calendar.getInstance())) {"], [287, "                LOG.info("], [288, "                        \"{} lastDate set to null based on resetFetchDateAfterNSecs {}\","], [289, "                        logIdprefix, resetFetchDateAfterNSecs);"], [290, "                lastDate = null;"], [291, "            }"], [292, "        }"], [293, ""], [297, "        else if (mostRecentDateFound != null && recentDateIncrease >= 0) {"], [305, "                low.setTime(lastDate);"], [308, "                high.setTime(lastDate);"], [312, "                    oldDate = lastDate;"], [315, "                oldDate = lastDate;"], [318, "                lastDate = potentialNewDate.getTime();"], [321, "                        logIdprefix, oldDate, lastDate, mostRecentDateFound);"], [325, "                        logIdprefix, lastDate, mostRecentDateFound);"], [331, "            lastDate = null;"]]}, "num_lines_added": 26, "num_lines_removed": 26}