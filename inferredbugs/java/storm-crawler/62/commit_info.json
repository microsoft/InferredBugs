{"hash": "e98b4b39733d5706c5f22a8b8baa705e09b1d584", "message": "Asynchronous spouts (i.e ES) can send queries after max delay since previous one ended #683 (#686)", "file_num_lines": 168, "diff_parsed": {"added": [[22, "import java.util.HashSet;"], [69, "     * Max time to allow between 2 successive queries to the backend. Value in"], [70, "     * msecs, default 20000."], [71, "     **/"], [72, "    protected static final String StatusMaxDelayParamName = \"spout.max.delay.queries\";"], [73, "    protected long maxDelayBetweenQueries = 20000;"], [74, ""], [75, "    /**"], [85, "    private long timeLastQuerySent = 0;"], [86, "    private long timeLastQueryReceived = 0;"], [93, "    protected HashSet<String> in_buffer = new HashSet<>();"], [94, ""], [111, "        maxDelayBetweenQueries = ConfUtils.getLong(stormConf,"], [112, "                StatusMaxDelayParamName, maxDelayBetweenQueries);"], [113, ""], [119, "        context.registerGauge(\"buffer_size\", () -> buffer.size());"], [120, "        context.registerGauge(\"beingProcessed\", () -> beingProcessed.size());"], [121, "        context.registerGauge(\"inPurgatory\", () -> beingProcessed.inCache());"], [132, "    /**"], [133, "     * Method where specific implementations query the storage. Implementations"], [134, "     * should call markQueryReceivedNow when the documents have been received."], [135, "     **/"], [186, ""], [187, "            // force the refresh of the buffer even if the buffer is not empty"], [188, "            if (!isInQuery.get() && triggerQueries()) {"], [189, "                populateBuffer();"], [190, "            }"], [191, ""], [203, "                in_buffer.remove(url);"], [221, "        timeLastQuerySent = System.currentTimeMillis();"], [230, "        if (timeLastQuerySent != 0) {"], [232, "            long difference = System.currentTimeMillis() - timeLastQuerySent;"], [240, "    /**"], [241, "     * Indicates whether enough time has elapsed since receiving the results of"], [242, "     * the previous query so that a new one can be sent even if the buffer is"], [243, "     * not empty. Applies to asynchronous clients only."], [244, "     **/"], [245, "    private boolean triggerQueries() {"], [246, "        if (timeLastQueryReceived != 0 && maxDelayBetweenQueries > 0) {"], [247, "            // check that we allowed some time between queries"], [248, "            long difference = System.currentTimeMillis()"], [249, "                    - timeLastQueryReceived;"], [250, "            if (difference > maxDelayBetweenQueries) {"], [251, "                return true;"], [252, "            }"], [253, "        }"], [254, "        return false;"], [255, "    }"], [256, ""], [257, "    protected long getTimeLastQuerySent() {"], [258, "        return timeLastQuerySent;"], [259, "    }"], [260, ""], [261, "    /**"], [262, "     * sets the marker that we are in a query to false and timeLastQueryReceived"], [263, "     * to now"], [264, "     **/"], [265, "    protected void markQueryReceivedNow() {"], [266, "        isInQuery.set(false);"], [267, "        timeLastQueryReceived = System.currentTimeMillis();"], [268, "    }"], [269, ""]], "deleted": [[21, "import java.util.Date;"], [30, "import org.apache.storm.metric.api.IMetric;"], [79, "    protected long timeLastQuery = 0;"], [107, "        context.registerMetric(\"buffer_size\", new IMetric() {"], [108, "            @Override"], [109, "            public Object getValueAndReset() {"], [110, "                return buffer.size();"], [111, "            }"], [112, "        }, 10);"], [113, ""], [114, "        context.registerMetric(\"beingProcessed\", new IMetric() {"], [115, "            @Override"], [116, "            public Object getValueAndReset() {"], [117, "                return beingProcessed.size();"], [118, "            }"], [119, "        }, 10);"], [120, ""], [121, "        context.registerMetric(\"inPurgatory\", new IMetric() {"], [122, "            @Override"], [123, "            public Object getValueAndReset() {"], [124, "                return beingProcessed.inCache();"], [125, "            }"], [126, "        }, 10);"], [137, "    /** Method where specific implementations query the storage **/"], [216, "        timeLastQuery = System.currentTimeMillis();"], [225, "        Date now = new Date();"], [226, "        if (timeLastQuery != 0) {"], [228, "            long difference = now.getTime() - timeLastQuery;"]]}, "num_lines_added": 62, "num_lines_removed": 28}