{"hash": "345d100fb66ec6040358cf9b85c716eb718ae52c", "message": "Refactoring into AbstractSpout for ES", "file_num_lines": 185, "diff_parsed": {"added": [[30, "import org.apache.storm.metric.api.IMetric;"], [31, "import org.apache.storm.spout.SpoutOutputCollector;"], [32, "import org.apache.storm.task.TopologyContext;"], [33, "import org.apache.storm.tuple.Values;"], [64, "public class AggregationSpout extends AbstractSpout {"], [128, "        super.open(stormConf, context, collector);"], [145, "            _collector.emit(fields, url);"]], "deleted": [[23, "import java.util.Iterator;"], [27, "import java.util.Map.Entry;"], [32, "import org.elasticsearch.action.admin.cluster.shards.ClusterSearchShardsGroup;"], [33, "import org.elasticsearch.action.admin.cluster.shards.ClusterSearchShardsRequest;"], [34, "import org.elasticsearch.action.admin.cluster.shards.ClusterSearchShardsResponse;"], [38, "import org.elasticsearch.client.Client;"], [56, "import com.digitalpebble.stormcrawler.elasticsearch.ElasticSearchConnection;"], [59, "import org.apache.storm.metric.api.IMetric;"], [60, "import org.apache.storm.metric.api.MultiCountMetric;"], [61, "import org.apache.storm.spout.SpoutOutputCollector;"], [62, "import org.apache.storm.task.TopologyContext;"], [63, "import org.apache.storm.topology.OutputFieldsDeclarer;"], [64, "import org.apache.storm.topology.base.BaseRichSpout;"], [65, "import org.apache.storm.tuple.Fields;"], [66, "import org.apache.storm.tuple.Values;"], [67, ""], [76, "public class AggregationSpout extends BaseRichSpout {"], [81, "    private static final String ESBoltType = \"status\";"], [82, ""], [83, "    private static final String ESStatusIndexNameParamName = \"es.status.index.name\";"], [84, "    private static final String ESStatusDocTypeParamName = \"es.status.doc.type\";"], [85, ""], [87, ""], [108, "    protected String indexName;"], [109, "    protected String docType;"], [110, ""], [111, "    private SpoutOutputCollector _collector;"], [112, ""], [113, "    protected static Client client;"], [114, ""], [117, "    protected Queue<Values> buffer = new LinkedList<>();"], [118, ""], [126, "    protected MultiCountMetric eventCounter;"], [127, ""], [128, "    private boolean active = true;"], [129, ""], [132, "    /**"], [133, "     * when using multiple instances - each one is in charge of a specific shard"], [134, "     * useful when sharding based on host or domain to guarantee a good mix of"], [135, "     * URLs"], [136, "     */"], [137, "    protected int shardID = -1;"], [138, ""], [145, "    /** Used to distinguish between instances in the logs **/"], [146, "    protected String logIdprefix = \"\";"], [147, ""], [152, "        indexName = ConfUtils.getString(stormConf, ESStatusIndexNameParamName,"], [153, "                \"status\");"], [154, "        docType = ConfUtils.getString(stormConf, ESStatusDocTypeParamName,"], [155, "                \"status\");"], [156, ""], [174, "        // one ES client per JVM"], [175, "        synchronized (AggregationSpout.class) {"], [176, "            try {"], [177, "                if (client == null) {"], [178, "                    client = ElasticSearchConnection.getClient(stormConf,"], [179, "                            ESBoltType);"], [180, "                }"], [181, "            } catch (Exception e1) {"], [182, "                LOG.error(\"Can't connect to ElasticSearch\", e1);"], [183, "                throw new RuntimeException(e1);"], [184, "            }"], [185, "        }"], [186, ""], [187, "        // if more than one instance is used we expect their number to be the"], [188, "        // same as the number of shards"], [189, "        int totalTasks = context"], [190, "                .getComponentTasks(context.getThisComponentId()).size();"], [191, "        if (totalTasks > 1) {"], [192, "            logIdprefix = \"[\" + context.getThisComponentId() + \" #\""], [193, "                    + context.getThisTaskIndex() + \"] \";"], [194, ""], [195, "            // determine the number of shards so that we can restrict the"], [196, "            // search"], [197, "            ClusterSearchShardsRequest request = new ClusterSearchShardsRequest("], [198, "                    indexName);"], [199, "            ClusterSearchShardsResponse shardresponse = client.admin()"], [200, "                    .cluster().searchShards(request).actionGet();"], [201, "            ClusterSearchShardsGroup[] shardgroups = shardresponse.getGroups();"], [202, "            if (totalTasks != shardgroups.length) {"], [203, "                throw new RuntimeException("], [204, "                        \"Number of ES spout instances should be the same as number of shards (\""], [205, "                                + shardgroups.length + \") but is \" + totalTasks);"], [206, "            }"], [207, "            shardID = shardgroups[context.getThisTaskIndex()].getShardId();"], [208, "            LOG.info(\"{} assigned shard ID {}\", logIdprefix, shardID);"], [209, "        }"], [210, ""], [211, "        _collector = collector;"], [212, ""], [213, "        this.eventCounter = context.registerMetric(\"counters\","], [214, "                new MultiCountMetric(), 10);"], [215, ""], [216, "        context.registerMetric(\"buffer_size\", new IMetric() {"], [217, "            @Override"], [218, "            public Object getValueAndReset() {"], [219, "                return buffer.size();"], [220, "            }"], [221, "        }, 10);"], [222, "    }"], [223, ""], [224, "    @Override"], [225, "    public void close() {"], [226, "        if (client != null)"], [227, "            client.close();"], [228, "    }"], [229, ""], [230, "    @Override"], [231, "    public void declareOutputFields(OutputFieldsDeclarer declarer) {"], [232, "        declarer.declare(new Fields(\"url\", \"metadata\"));"], [249, "            this._collector.emit(fields, url);"], [391, "    protected final Metadata fromKeyValues(Map<String, Object> keyValues) {"], [392, "        Map<String, List<String>> mdAsMap = (Map<String, List<String>>) keyValues"], [393, "                .get(\"metadata\");"], [394, "        Metadata metadata = new Metadata();"], [395, "        if (mdAsMap != null) {"], [396, "            Iterator<Entry<String, List<String>>> mdIter = mdAsMap.entrySet()"], [397, "                    .iterator();"], [398, "            while (mdIter.hasNext()) {"], [399, "                Entry<String, List<String>> mdEntry = mdIter.next();"], [400, "                String key = mdEntry.getKey();"], [401, "                // periods are not allowed in ES2 - replace with %2E"], [402, "                key = key.replaceAll(\"%2E\", \"\\\\.\");"], [403, "                Object mdValObj = mdEntry.getValue();"], [404, "                // single value"], [405, "                if (mdValObj instanceof String) {"], [406, "                    metadata.addValue(key, (String) mdValObj);"], [407, "                }"], [408, "                // multi valued"], [409, "                else {"], [410, "                    metadata.addValues(key, (List<String>) mdValObj);"], [411, "                }"], [412, "            }"], [413, "        }"], [414, "        return metadata;"], [415, "    }"], [416, ""], [431, "    @Override"], [432, "    public void activate() {"], [433, "        active = true;"], [434, "    }"], [435, ""], [436, "    @Override"], [437, "    public void deactivate() {"], [438, "        active = false;"], [439, "    }"], [440, ""]]}, "num_lines_added": 7, "num_lines_removed": 147}