{"hash": "4a2b69eeda5a9d14d4548c8e90a2a0d144817b04", "message": "Added support for Json config instead of filename.", "file_num_lines": 108, "diff_parsed": {"added": [[37, "import com.fasterxml.jackson.databind.node.ArrayNode;"], [53, "        JsonNode node = paramNode.get(\"urlFilters\");"], [54, "        if (node != null && node.isArray()) {"], [55, "            rules = readRules((ArrayNode) node);"], [57, "            JsonNode filenameNode = paramNode.get(\"regexFilterFile\");"], [58, "            String rulesFileName;"], [59, "            if (filenameNode != null) {"], [60, "                rulesFileName = filenameNode.textValue();"], [61, "            } else {"], [62, "                rulesFileName = \"default-regex-filters.txt\";"], [63, "            }"], [64, "            rules = readRules(rulesFileName);"], [65, "        }"], [66, "    }"], [67, ""], [68, "    /** Populates a List of Rules off of JsonNode. */"], [69, "    private List<RegexRule> readRules(ArrayNode rulesList) {"], [70, "        List<RegexRule> rules = new ArrayList<RegexRule>();"], [71, "        for (JsonNode urlFilterNode : rulesList) {"], [72, "            try {"], [73, "                RegexRule rule = createRule(urlFilterNode.asText());"], [74, "                if (rule != null) {"], [75, "                    rules.add(rule);"], [76, "                }"], [77, "            } catch (IOException e) {"], [78, "                LOG.error(\"There was an error reading regex filter {}\", urlFilterNode.asText(), e);"], [79, "            }"], [81, "        return rules;"], [99, "                RegexRule rule = createRule(line);"], [100, "                if (rule != null) {"], [101, "                    rules.add(rule);"], [112, "    private RegexRule createRule(String line) throws IOException {"], [113, "        char first = line.charAt(0);"], [114, "        boolean sign = false;"], [115, "        switch (first) {"], [116, "        case '+':"], [117, "            sign = true;"], [118, "            break;"], [119, "        case '-':"], [120, "            sign = false;"], [121, "            break;"], [122, "        case ' ':"], [123, "        case '\\n':"], [124, "        case '#': // skip blank & comment lines"], [125, "            return null;"], [126, "        default:"], [127, "            throw new IOException(\"Invalid first character: \" + line);"], [128, "        }"], [129, ""], [130, "        String regex = line.substring(1);"], [131, "        LOG.trace(\"Adding rule [{}]\", regex);"], [132, "        RegexRule rule = createRule(sign, regex);"], [133, "        return rule;"], [134, "    }"], [135, ""], [138, "     *"]], "deleted": [[52, ""], [53, "        JsonNode filenameNode = paramNode.get(\"regexFilterFile\");"], [54, "        String rulesFileName;"], [55, "        if (filenameNode != null) {"], [56, "            rulesFileName = filenameNode.textValue();"], [58, "            rulesFileName = \"default-regex-filters.txt\";"], [60, "        this.rules = readRules(rulesFileName);"], [67, ""], [79, "                char first = line.charAt(0);"], [80, "                boolean sign = false;"], [81, "                switch (first) {"], [82, "                case '+':"], [83, "                    sign = true;"], [84, "                    break;"], [85, "                case '-':"], [86, "                    sign = false;"], [87, "                    break;"], [88, "                case ' ':"], [89, "                case '\\n':"], [90, "                case '#': // skip blank & comment lines"], [91, "                    continue;"], [92, "                default:"], [93, "                    throw new IOException(\"Invalid first character: \" + line);"], [96, "                String regex = line.substring(1);"], [97, "                LOG.trace(\"Adding rule [{}]\", regex);"], [98, "                RegexRule rule = createRule(sign, regex);"], [99, "                rules.add(rule);"], [100, ""], [111, "     *"]]}, "num_lines_added": 56, "num_lines_removed": 29}