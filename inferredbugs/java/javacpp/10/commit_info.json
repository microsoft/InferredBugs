{"hash": "26d83ac42f8e2f5c89a36fe6131d0545140e55df", "message": "* Fix a few more small issues with the `Parser` and the `Generator`", "file_num_lines": 2173, "diff_parsed": {"added": [[30, "import java.util.Iterator;"], [32, "import java.util.ListIterator;"], [125, "                while (valueType.cppName.startsWith(containerName)"], [126, "                        && leafInfoMap.get(valueType.cppName, false).size() == 0) {"], [127, "                    // increase dimension, unless the user has provided info for the intermediate type"], [2198, "    void parse(Context context, DeclarationList declList, String[] includePath, String include) throws IOException, ParserException {"], [2200, "        File file = null;"], [2201, "        String filename = include;"], [2202, "        if (filename.startsWith(\"<\") && filename.endsWith(\">\")) {"], [2203, "            filename = filename.substring(1, filename.length() - 1);"], [2204, "        } else {"], [2205, "            File f = new File(filename);"], [2206, "            if (f.exists()) {"], [2207, "                file = f;"], [2208, "            }"], [2209, "        }"], [2210, "        if (file == null && includePath != null) {"], [2211, "            for (String path : includePath) {"], [2212, "                File f = new File(path, filename);"], [2215, "                    break;"], [2218, "        }"], [2219, "        if (file == null) {"], [2220, "            file = new File(filename);"], [2221, "        }"], [2222, "        Info info = infoMap.getFirst(file.getName());"], [2223, "        if (info != null && info.skip) {"], [2224, "            return;"], [2225, "        } else if (!file.exists()) {"], [2226, "            throw new FileNotFoundException(\"Could not parse \\\"\" + file + \"\\\": File does not exist\");"], [2227, "        }"], [2228, "        logger.info(\"Parsing \" + file);"], [2229, "        Token token = new Token();"], [2230, "        token.type = Token.COMMENT;"], [2231, "        token.value = \"\\n// Parsed from \" + include + \"\\n\\n\";"], [2232, "        tokenList.add(token);"], [2233, "        Tokenizer tokenizer = new Tokenizer(file);"], [2234, "        while (!(token = tokenizer.nextToken()).isEmpty()) {"], [2235, "            if (token.type == -1) {"], [2236, "                token.type = Token.COMMENT;"], [2240, "        if (lineSeparator == null) {"], [2241, "            lineSeparator = tokenizer.lineSeparator;"], [2243, "        tokenizer.close();"], [2244, "        token = new Token();"], [2245, "        token.type = Token.COMMENT;"], [2246, "        token.spacing = \"\\n\";"], [2247, "        tokenList.add(token);"], [2248, "        tokens = new TokenIndexer(infoMap, tokenList.toArray(new Token[tokenList.size()]));"], [2305, "        text += \"import java.nio.*;\\n\""], [2306, "             +  \"import org.bytedeco.javacpp.*;\\n\""], [2307, "             +  \"import org.bytedeco.javacpp.annotation.*;\\n\\n\";"], [2317, "             + (clsHelpers.size() > 0 ? clsHelpers.getFirst() : cls.getCanonicalName()) + \" {\\n\""], [2318, "             + \"    static { Loader.load(); }\\n\";"], [2335, "        DeclarationList declList = new DeclarationList();"], [2338, "                parse(context, declList, includePaths, include);"], [2339, "            }"], [2340, "        }"], [2341, "        declList = new DeclarationList(declList);"], [2342, "        containers(context, declList);"], [2343, "        for (String include : clsIncludes) {"], [2344, "            parse(context, declList, includePaths, include);"], [2345, "        }"], [2346, ""], [2347, "        final String newline = lineSeparator != null ? lineSeparator : \"\\n\";"], [2348, "        Writer out = new FileWriter(targetFile) {"], [2349, "            @Override public Writer append(CharSequence text) throws IOException {"], [2350, "                return super.append(((String)text).replace(\"\\n\", newline).replace(\"\\\\u\", \"\\\\u005Cu\"));"], [2351, "            }"], [2352, "        };"], [2353, "        out.append(text);"], [2354, "        for (Info info : infoList) {"], [2355, "            if (info.javaText != null && !info.javaText.startsWith(\"import\")) {"], [2356, "                out.append(info.javaText + \"\\n\");"], [2359, "        for (Declaration d : declList) {"], [2360, "            out.append(d.text);"], [2361, "        }"], [2362, "        out.append(\"\\n}\\n\").close();"], [2363, ""]], "deleted": [[123, "                while (valueType.cppName.startsWith(containerName)) {"], [2194, "    void parse(String outputFilename, Context context, String[] includePath, String ... includes) throws IOException, ParserException {"], [2195, "        parse(new File(outputFilename), context, includePath, includes);"], [2196, "    }"], [2197, "    void parse(File outputFile, Context context, String[] includePath, String ... includes) throws IOException, ParserException {"], [2199, "        for (String include : includes) {"], [2200, "            File file = null;"], [2201, "            String filename = include;"], [2202, "            if (filename.startsWith(\"<\") && filename.endsWith(\">\")) {"], [2203, "                filename = filename.substring(1, filename.length() - 1);"], [2204, "            } else {"], [2205, "                File f = new File(filename);"], [2210, "            if (file == null && includePath != null) {"], [2211, "                for (String path : includePath) {"], [2212, "                    File f = new File(path, filename);"], [2213, "                    if (f.exists()) {"], [2214, "                        file = f;"], [2215, "                        break;"], [2216, "                    }"], [2217, "                }"], [2218, "            }"], [2219, "            if (file == null) {"], [2220, "                file = new File(filename);"], [2221, "            }"], [2222, "            Info info = infoMap.getFirst(file.getName());"], [2223, "            if (info != null && info.skip) {"], [2224, "                continue;"], [2225, "            } else if (!file.exists()) {"], [2226, "                throw new FileNotFoundException(\"Could not parse \\\"\" + file + \"\\\": File does not exist\");"], [2227, "            }"], [2228, "            logger.info(\"Parsing \" + file);"], [2229, "            Token token = new Token();"], [2230, "            token.type = Token.COMMENT;"], [2231, "            token.value = \"\\n// Parsed from \" + include + \"\\n\\n\";"], [2232, "            tokenList.add(token);"], [2233, "            Tokenizer tokenizer = new Tokenizer(file);"], [2234, "            while (!(token = tokenizer.nextToken()).isEmpty()) {"], [2235, "                if (token.type == -1) {"], [2236, "                    token.type = Token.COMMENT;"], [2237, "                }"], [2238, "                tokenList.add(token);"], [2239, "            }"], [2240, "            if (lineSeparator == null) {"], [2241, "                lineSeparator = tokenizer.lineSeparator;"], [2243, "            tokenizer.close();"], [2244, "            token = new Token();"], [2245, "            token.type = Token.COMMENT;"], [2246, "            token.spacing = \"\\n\";"], [2249, "        tokens = new TokenIndexer(infoMap, tokenList.toArray(new Token[tokenList.size()]));"], [2250, ""], [2251, "        final String newline = lineSeparator != null ? lineSeparator : \"\\n\";"], [2252, "        Writer out = outputFile != null ? new FileWriter(outputFile) {"], [2253, "            @Override public Writer append(CharSequence text) throws IOException {"], [2254, "                return super.append(((String)text).replace(\"\\n\", newline).replace(\"\\\\u\", \"\\\\u005Cu\"));"], [2255, "            }} : new Writer() {"], [2256, "            @Override public void write(char[] cbuf, int off, int len) { }"], [2257, "            @Override public void flush() { }"], [2258, "            @Override public void close() { }"], [2259, "        };"], [2260, "        LinkedList<Info> infoList = leafInfoMap.get(null);"], [2261, "        for (Info info : infoList) {"], [2262, "            if (info.javaText != null && !info.javaText.startsWith(\"import\")) {"], [2263, "                out.append(info.javaText + \"\\n\");"], [2264, "            }"], [2266, "        out.append(\"    static { Loader.load(); }\\n\");"], [2267, ""], [2268, "        DeclarationList declList = new DeclarationList();"], [2269, "        containers(context, declList);"], [2271, "        for (Declaration d : declList) {"], [2272, "            out.append(d.text);"], [2273, "        }"], [2274, "        out.append(\"\\n}\\n\").close();"], [2330, "        text += \"import java.nio.*;\\n\" +"], [2331, "                \"import org.bytedeco.javacpp.*;\\n\" +"], [2332, "                \"import org.bytedeco.javacpp.annotation.*;\\n\\n\";"], [2342, "             + (clsHelpers.size() > 0 ? clsHelpers.getFirst() : cls.getCanonicalName()) + \" {\";"], [2343, "        leafInfoMap.putFirst(new Info().javaText(text));"], [2362, "                parse((File)null, context, includePaths, include);"], [2365, "        parse(targetFile, context, includePaths, clsIncludes.toArray(new String[clsIncludes.size()]));"]]}, "num_lines_added": 77, "num_lines_removed": 79}