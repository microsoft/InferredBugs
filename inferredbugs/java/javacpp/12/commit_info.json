{"hash": "da07a988a06b07a03bb0b117606b6a7882dc258d", "message": "* Fix and enhance in various ways the support of `Parser` and `Generator` for function pointers, virtual functions, and abstract classes\n * Improve `Parser` check for `const` references and pointers required to output appropriate `@Const` annotation\n * Add `Info.purify` to force the `Parser` in producing abstract classes", "file_num_lines": 2210, "diff_parsed": {"added": [[93, "            if (info2 != null && info2.pointerTypes != null) {"], [139, "                if (firstType != null && !firstType.pointer && !firstType.value && (firstType.annotations == null || firstType.annotations.length() == 0)) {"], [142, "                if (secondType != null && !secondType.pointer && !secondType.value && (secondType.annotations == null || secondType.annotations.length() == 0)) {"], [145, "                if (valueType != null && !valueType.pointer && !valueType.value && (valueType.annotations == null || valueType.annotations.length() == 0)) {"], [454, "                type.value = true;"], [464, "            if (!type.pointer && !type.reference && !type.value) {"], [466, "            } else if (!type.pointer && type.reference && !type.value) {"], [520, "        String precast = null, cast = type.cppName;"], [732, "                    if (context.virtualize) {"], [733, "                        // force cast in callbacks"], [734, "                        needCast = true;"], [735, "                        precast = cast;"], [736, "                    }"], [792, "            if (!needCast && !type.javaName.contains(\"@Cast\")) {"], [793, "                if (type.constValue && !implicitConst && !type.constPointer) {"], [794, "                    type.annotations = \"@Const \" + type.annotations;"], [795, "                } else if (type.constPointer) {"], [796, "                    type.annotations = \"@Const({\" + type.constValue + \", \" + type.constPointer + \"}) \" + type.annotations;"], [797, "                }"], [812, "            if (precast != null) {"], [813, "                type.annotations = \"@Cast({\\\"\" + cast + \"\\\", \\\"\" + precast + \"\\\"}) \" + type.annotations;"], [814, "            } else if (!valueType && dcl.indirections == 0 && !dcl.reference) {"], [918, "                } else if (s.length() > 3 && (s.startsWith(\"/// \") || s.startsWith(\"//!\"))) {"], [922, "                } else if (s.length() > 3 && !s.startsWith(\"///\")) {"], [954, "                } else if (s.length() > 4 && (s.startsWith(\"///\") || s.startsWith(\"//!\"))) {"], [958, "                } else if (s.length() > 4) {"], [1258, "                modifiers = context.inaccessible ? \"@Virtual protected \" : \"@Virtual public \";"], [1870, "        String modifiers = info.purify && ctx.virtualize ? \"public static abstract \" : \"public static \";"], [1872, "                pointerConstructor = false, abstractClass = info.purify && !ctx.virtualize, havePureConst = false, haveVariables = false;"], [1881, "            abstractClass |= d.abstractMember;"], [1882, "            havePureConst |= d.constMember && d.abstractMember;"], [1885, "        if (abstractClass && ctx.virtualize) {"], [1886, "            modifiers = \"public static abstract \";"], [1887, "        }"], [1888, "        if (havePureConst && ctx.virtualize) {"], [1889, "            modifiers = \"@Const \" + modifiers;"], [1890, "        }"], [1907, "            if (implicitConstructor && (!abstractClass || ctx.virtualize)) {"], [1920, "                if (!defaultConstructor || (abstractClass && !ctx.virtualize)) {"], [1928, "                if (defaultConstructor && (!abstractClass || ctx.virtualize) && !intConstructor) {"]], "deleted": [[93, "            if (info2.pointerTypes != null) {"], [139, "                if (firstType != null && !firstType.pointer && (firstType.annotations == null || firstType.annotations.length() == 0)) {"], [142, "                if (secondType != null && !secondType.pointer && (secondType.annotations == null || secondType.annotations.length() == 0)) {"], [145, "                if (valueType != null && !valueType.pointer && (valueType.annotations == null || valueType.annotations.length() == 0)) {"], [451, "        boolean valueType = false;"], [455, "                valueType = true;"], [465, "            if (!valueType && !type.pointer && !type.reference) {"], [467, "            } else if (!valueType && !type.pointer && type.reference) {"], [521, "        String cast = type.cppName;"], [788, "            if (!needCast && type.constValue && !implicitConst && !type.javaName.contains(\"@Cast\")) {"], [789, "                type.annotations = \"@Const \" + type.annotations;"], [804, "            if (!valueType && dcl.indirections == 0 && !dcl.reference) {"], [908, "                } else if (s.startsWith(\"/// \") || s.startsWith(\"//!\")) {"], [912, "                } else if (!s.startsWith(\"///\")) {"], [944, "                } else if (s.startsWith(\"///\") || s.startsWith(\"//!\")) {"], [948, "                } else {"], [1248, "                modifiers = decl.inaccessible ? \"@Virtual protected \" : \"@Virtual public \";"], [1250, "                decl.inaccessible = false;"], [1861, "        String modifiers = \"public static \";"], [1863, "                pointerConstructor = false, abstractClass = info.virtualize, haveVariables = false;"], [1871, "            } else if (d.abstractMember) {"], [1872, "                implicitConstructor = false;"], [1873, "                abstractClass = true;"], [1874, "                if (ctx.virtualize) {"], [1875, "                    modifiers = \"public static abstract \";"], [1876, "                }"], [1896, "            if (implicitConstructor && !abstractClass) {"], [1909, "                if (!defaultConstructor || abstractClass) {"], [1917, "                if (defaultConstructor && !abstractClass && !intConstructor) {"]]}, "num_lines_added": 40, "num_lines_removed": 29}