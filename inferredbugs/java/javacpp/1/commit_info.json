{"hash": "2ff99db5e5d68b94e1d3620bbc6da0f1e3c3c3ab", "message": "Added an `environmentVariables` configuration option to `BuildMojo`, along with some slight refactoring of `Builder.Main`", "file_num_lines": 588, "diff_parsed": {"added": [[36, "import java.util.Map;"], [48, "        this(properties, null);"], [49, "    }"], [50, "    public Builder(Properties properties, Map<String,String> environmentVariables) {"], [52, "        this.environmentVariables = environmentVariables;"], [89, "    private Map<String,String> environmentVariables;"], [240, "        ProcessBuilder pb = new ProcessBuilder(command);"], [241, "        if (environmentVariables != null) {"], [242, "            pb.environment().putAll(environmentVariables);"], [243, "        }"], [244, "        Process p = pb.start();"], [393, "        Map<String,String> environmentVariables = null;"], [395, "        public Main classPaths(String classPaths) {"], [396, "            classPaths(classPaths == null ? null : classPaths.split(File.pathSeparator));"], [397, "            return this;"], [399, "        public Main classPaths(String ... classPaths) {"], [401, "            return this;"], [403, "        public Main outputDirectory(String outputDirectory) {"], [404, "            outputDirectory(outputDirectory == null ? null : new File(outputDirectory));"], [405, "            return this;"], [407, "        public Main outputDirectory(File outputDirectory) {"], [409, "            return this;"], [411, "        public Main compile(boolean compile) {"], [413, "            return this;"], [415, "        public Main outputName(String outputName) {"], [417, "            return this;"], [419, "        public Main jarPrefix(String jarPrefix) {"], [421, "            return this;"], [423, "        public Main properties(String properties) {"], [424, "            properties(properties == null ? null : Loader.getProperties(properties));"], [425, "            return this;"], [427, "        public Main properties(Properties properties) {"], [431, "            return this;"], [433, "        public Main propertyFile(String propertyFile) throws IOException {"], [434, "            propertyFile(propertyFile == null ? null : new File(propertyFile));"], [435, "            return this;"], [437, "        public Main propertyFile(File propertyFile) throws IOException {"], [439, "                return this;"], [449, "            return this;"], [451, "        public Main property(String keyValue) {"], [456, "            property(keyValue.substring(2, equalIndex),"], [457, "                     keyValue.substring(equalIndex+1));"], [458, "            return this;"], [460, "        public Main property(String key, String value) {"], [464, "            return this;"], [466, "        public Main classesOrPackages(String ... classesOrPackages) throws IOException {"], [470, "            return this;"], [471, "        }"], [472, "        public Main environmentVariables(Map<String,String> environmentVariables) {"], [473, "            this.environmentVariables = environmentVariables;"], [474, "            return this;"], [477, "        public LinkedList<File> generateAndCompile(Class[] classes, String outputName) throws IOException, InterruptedException {"], [479, "            Properties p = (Properties)properties.clone();"], [481, "                Loader.appendProperties(p, c);"], [483, "            String platformName = p.getProperty(\"platform.name\");"], [484, "            String sourceSuffix = p.getProperty(\"source.suffix\", \".cpp\");"], [485, "            File outputDirectory = this.outputDirectory, sourceFile;"], [491, "                        outputDirectory = new File(packageDir, platformName);"], [492, "                        sourceFile      = new File(packageDir, outputName + sourceSuffix);"], [497, "                    outputDirectory = new File(platformName);"], [498, "                    sourceFile      = new File(outputName + sourceSuffix);"], [501, "                sourceFile = new File(outputDirectory, outputName + sourceSuffix);"], [507, "            Generator generator = new Generator(p, sourceFile);"], [512, "                if (compile) {"], [513, "                    Builder builder = new Builder(p, environmentVariables);"], [527, "                System.out.println(\"Source file not generated: \" + sourceFile);"], [572, "        public Collection<File> build() throws IOException, InterruptedException {"], [581, "                    outputFiles.addAll(generateAndCompile(new Class[] { c }, Loader.getLibraryName(c)));"], [584, "                outputFiles = generateAndCompile(classes.toArray(new Class[classes.size()]), outputName);"], [595, "            return outputFiles;"], [634, "                main.classPaths(args[++i]);"], [636, "                main.outputDirectory(args[++i]);"], [638, "                main.outputName(args[++i]);"], [640, "                main.compile(false);"], [642, "                main.jarPrefix(args[++i]);"], [644, "                main.properties(args[++i]);"], [646, "                main.propertyFile(args[++i]);"], [648, "                main.property(args[i]);"], [654, "                main.classesOrPackages(args[i]);"]], "deleted": [[234, "        Process p = new ProcessBuilder(command).start();"], [384, "        public void setClassPaths(String classPaths) {"], [385, "            setClassPaths(classPaths == null ? null : classPaths.split(File.pathSeparator));"], [387, "        public void setClassPaths(String ... classPaths) {"], [390, "        public void setOutputDirectory(String outputDirectory) {"], [391, "            setOutputDirectory(outputDirectory == null ? null : new File(outputDirectory));"], [393, "        public void setOutputDirectory(File outputDirectory) {"], [396, "        public void setCompile(boolean compile) {"], [399, "        public void setOutputName(String outputName) {"], [402, "        public void setJarPrefix(String jarPrefix) {"], [405, "        public void setProperties(String properties) {"], [406, "            setProperties(properties == null ? null : Loader.getProperties(properties));"], [408, "        public void setProperties(Properties properties) {"], [413, "        public void setPropertyFile(String propertyFile) throws IOException {"], [414, "            setPropertyFile(propertyFile == null ? null : new File(propertyFile));"], [416, "        public void setPropertyFile(File propertyFile) throws IOException {"], [418, "                return;"], [429, "        public void setProperty(String keyValue) {"], [434, "            setProperty(keyValue.substring(2, equalIndex),"], [435, "                        keyValue.substring(equalIndex+1));"], [437, "        public void setProperty(String key, String value) {"], [442, "        public void setClassesOrPackages(String ... classesOrPackages) throws IOException {"], [448, "        public static LinkedList<File> generateAndBuild(Class[] classes, Properties properties, File outputDirectory,"], [449, "                String outputName, boolean build) throws IOException, InterruptedException {"], [451, "            properties = (Properties)properties.clone();"], [453, "                Loader.appendProperties(properties, c);"], [455, "            File sourceFile;"], [461, "                        outputDirectory = new File(packageDir, properties.getProperty(\"platform.name\"));"], [462, "                        sourceFile      = new File(packageDir, outputName + properties.getProperty(\"source.suffix\", \".cpp\"));"], [467, "                    outputDirectory = new File(properties.getProperty(\"platform.name\"));"], [468, "                    sourceFile      = new File(outputName + properties.getProperty(\"source.suffix\", \".cpp\"));"], [471, "                sourceFile = new File(outputDirectory, outputName + properties.getProperty(\"source.suffix\", \".cpp\"));"], [477, "            Generator generator = new Generator(properties, sourceFile);"], [482, "                if (build) {"], [483, "                    Builder builder = new Builder(properties);"], [497, "                System.out.println(\"No need to generate source file: \" + sourceFile);"], [542, "        public void build() throws IOException, InterruptedException {"], [551, "                    outputFiles.addAll(generateAndBuild(new Class[] { c }, properties,"], [552, "                            outputDirectory, Loader.getLibraryName(c), compile));"], [555, "                outputFiles = generateAndBuild(classes.toArray(new Class[classes.size()]),"], [556, "                        properties, outputDirectory, outputName, compile);"], [605, "                main.setClassPaths(args[++i]);"], [607, "                main.setOutputDirectory(args[++i]);"], [609, "                main.setOutputName(args[++i]);"], [611, "                main.setCompile(false);"], [613, "                main.setJarPrefix(args[++i]);"], [615, "                main.setProperties(args[++i]);"], [617, "                main.setPropertyFile(args[++i]);"], [619, "                main.setProperty(args[i]);"], [625, "                main.setClassesOrPackages(args[i]);"]]}, "num_lines_added": 79, "num_lines_removed": 50}