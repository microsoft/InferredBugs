{"hash": "121050d063095152fc323da8685f8ae631ae9d2e", "message": "* Upgraded references of the Android NDK to version r9d\n * Continued to clean up the `Parser` and improve the support of, for the most part, functions pointers and anonymous `struct` or `union`", "file_num_lines": 2891, "diff_parsed": {"added": [[105, "            .put(new Info(\" __attribute__\", \"__declspec\").annotations().skip(true))"], [782, "            variable = c.variable;"], [790, "        Declarator variable = null;"], [805, "                        String args = \"<\", separator = \"\";"], [808, "                            separator = \",\";"], [810, "                        names.add(name + args + (args.endsWith(\">\") ? \" >\" : \">\"));"], [940, "                    String indices = \"\", separator = \"\";"], [950, "                String params = \"\", separator = \"\";"], [972, "                    String indent = \"        \", indices = \"\", args = \"\";"], [1135, "                type.cppName += \"<\";"], [1136, "                String separator = \"\";"], [1141, "                    separator = \",\";"], [1257, "        int infoNumber = 0, indices = 0, indirections = 0;"], [1258, "        boolean constPointer = false, reference = false;"], [1291, "                dcl.indirections++;"], [1293, "                dcl.reference = true;"], [1301, "        if (dcl.indirections == 0 && dcl.reference) {"], [1305, "        ArrayList<Attribute> attributes = new ArrayList<Attribute>();"], [1306, "        if (type.attributes != null) {"], [1307, "            attributes.addAll(Arrays.asList(type.attributes));"], [1308, "        }"], [1309, "        int backIndex = tokens.index;"], [1310, "        Attribute attr = attribute();"], [1311, "        while (attr != null && attr.annotation) {"], [1312, "            type.annotations += attr.javaName;"], [1313, "            attributes.add(attr);"], [1314, "            backIndex = tokens.index;"], [1315, "            attr = attribute();"], [1316, "        }"], [1317, "        attr = null;"], [1318, "        tokens.index = backIndex;"], [1319, "        for (Attribute a : attributes) {"], [1320, "            if (a.arguments.length() > 0 && Character.isJavaIdentifierStart(a.arguments.charAt(0))) {"], [1321, "                attr = a;"], [1322, "                for (char c : a.arguments.toCharArray()) {"], [1323, "                    if (!Character.isJavaIdentifierPart(c)) {"], [1324, "                        attr = null;"], [1325, "                        break;"], [1326, "                    }"], [1327, "                }"], [1328, "            }"], [1329, "            if (attr != null) {"], [1330, "                break;"], [1331, "            }"], [1332, "        }"], [1333, ""], [1340, "        if (tokens.get().match('(') || (typedef && tokens.get(1).match('('))) {"], [1368, "                } else if (token.match('(', ')')) {"], [1431, "            dcl.indirections++;"], [1441, "        if (pointerAsArray && dcl.indirections > (type.anonymous ? 0 : 1)) {"], [1444, "            dcl.indirections--;"], [1457, "        String prefix = type.constValue && dcl.indirections < 2 && !dcl.reference ? \"const \" : \"\";"], [1468, "                    dcl.indirections = 1;"], [1469, "                    dcl.reference = false;"], [1481, "            valueType = info.valueTypes != null && ((type.constValue && dcl.reference) ||"], [1482, "                    (dcl.indirections == 0 && !dcl.reference) || info.pointerTypes == null);"], [1494, "            if (dcl.indirections == 0 && !dcl.reference) {"], [1496, "            } else if (dcl.indirections == 0 && dcl.reference) {"], [1498, "            } else if (dcl.indirections == 1 && dcl.reference) {"], [1500, "            } else if (dcl.indirections == 2 && !dcl.reference && infoNumber >= 0) {"], [1503, "            } else if (dcl.indirections >= 2) {"], [1507, "                if (dcl.reference) {"], [1520, "            if (!valueType && dcl.indirections == 0 && !dcl.reference) {"], [1549, "        if (info != null && info.annotations != null) {"], [1550, "            for (String s : info.annotations) {"], [1551, "                type.annotations += s + \" \";"], [1552, "            }"], [1553, "        }"], [1559, "            if (indirections2 == 0 && !typedef) {"], [1668, "                && info.javaNames == null && info.valueTypes == null && info.pointerTypes == null) {"], [1684, "            } else if (info == null || !info.skip) {"], [1827, "        Info info = null;"], [1828, "        if (dcl.parameters != null) {"], [1829, "            String name = dcl.cppName + \"(\", separator = \"\";"], [1830, "            for (Declarator d : dcl.parameters.declarators) {"], [1831, "                if (d != null) {"], [1832, "                    name += separator + d.type.cppName;"], [1833, "                    for (int i = 0; i < d.indirections; i++) {"], [1834, "                        name += \"*\";"], [1835, "                    }"], [1836, "                    if (d.reference) {"], [1837, "                        name += \"&\";"], [1838, "                    }"], [1839, "                    separator = \", \";"], [1840, "                }"], [1841, "            }"], [1842, "            info = infoMap.getFirst(name + \")\");"], [1843, "        }"], [1844, "        if (info == null) {"], [1845, "            info = infoMap.getFirst(dcl.cppName);"], [1846, "        }"], [1984, "        Declarator metadcl = context.variable;"], [1985, "        for (int n = 0; n < Integer.MAX_VALUE; n++) {"], [1986, "            decl = new Declaration();"], [1987, "            tokens.index = backIndex;"], [1988, "            dcl = declarator(context, null, -1, false, n, false, true);"], [1989, "            if (dcl == null) {"], [1990, "                break;"], [1991, "            }"], [1992, "            decl.declarator = dcl;"], [1993, "            javaName = dcl.javaName;"], [1994, "            if (metadcl == null || metadcl.indices == 0 || dcl.indices == 0) {"], [1995, "                // arrays are currently not supported for both metadcl and dcl at the same time"], [1996, "                String indices = \"\";"], [1997, "                for (int i = 0; i < (metadcl == null || metadcl.indices == 0 ? dcl.indices : metadcl.indices); i++) {"], [1998, "                    if (i > 0) {"], [1999, "                        indices += \", \";"], [2001, "                    indices += \"int \" + (char)('i' + i);"], [2003, "                if (context.namespace != null && context.group == null) {"], [2004, "                    decl.text += \"@Namespace(\\\"\" + context.namespace + \"\\\") \";"], [2005, "                }"], [2006, "                if (metadcl != null && metadcl.cppName.length() > 0) {"], [2007, "                    decl.text += metadcl.indices == 0"], [2008, "                            ? \"@Name(\\\"\" + metadcl.cppName + \".\" + dcl.cppName + \"\\\") \""], [2009, "                            : \"@Name({\\\"\" + metadcl.cppName + \"\\\", \\\".\" + dcl.cppName + \"\\\"}) \";"], [2010, "                    javaName = metadcl.javaName + \"_\" + dcl.javaName;"], [2011, "                }"], [2012, "                if (dcl.type.constValue) {"], [2013, "                    decl.text += \"@MemberGetter \";"], [2014, "                }"], [2015, "                decl.text += modifiers + dcl.type.annotations.replace(\"@ByVal \", \"@ByRef \")"], [2016, "                          + dcl.type.javaName + \" \" + javaName + \"(\" + indices + \");\";"], [2017, "                if (!dcl.type.constValue) {"], [2018, "                    if (indices.length() > 0) {"], [2019, "                        indices += \", \";"], [2021, "                    decl.text += \" \" + modifiers + setterType + javaName + \"(\" + indices + dcl.type.javaName + \" \" + javaName + \");\";"], [2022, "                }"], [2023, "                decl.text += \"\\n\";"], [2024, "            }"], [2025, "            if (dcl.indices > 0) {"], [2026, "                // in the case of arrays, also add a pointer accessor"], [2027, "                tokens.index = backIndex;"], [2028, "                dcl = declarator(context, null, -1, false, n, true, false);"], [2029, "                String indices = \"\";"], [2030, "                for (int i = 0; i < (metadcl == null ? 0 : metadcl.indices); i++) {"], [2031, "                    if (i > 0) {"], [2032, "                        indices += \", \";"], [2034, "                    indices += \"int \" + (char)('i' + i);"], [2036, "                if (context.namespace != null && context.group == null) {"], [2037, "                    decl.text += \"@Namespace(\\\"\" + context.namespace + \"\\\") \";"], [2039, "                if (metadcl != null && metadcl.cppName.length() > 0) {"], [2040, "                    decl.text += metadcl.indices == 0"], [2041, "                            ? \"@Name(\\\"\" + metadcl.cppName + \".\" + dcl.cppName + \"\\\") \""], [2042, "                            : \"@Name({\\\"\" + metadcl.cppName + \"\\\", \\\".\" + dcl.cppName + \"\\\"}) \";"], [2043, "                    javaName = metadcl.javaName + \"_\" + dcl.javaName;"], [2045, "                decl.text += \"@MemberGetter \" + modifiers + dcl.type.annotations.replace(\"@ByVal \", \"@ByRef \")"], [2046, "                          + dcl.type.javaName + \" \" + javaName + \"(\" + indices + \");\\n\";"], [2047, "            }"], [2048, "            decl.signature = dcl.signature;"], [2049, "            if (info != null && info.javaText != null) {"], [2050, "                decl.text = info.javaText;"], [2051, "                decl.declarator = null;"], [2052, "            }"], [2053, "            while (!tokens.get().match(Token.EOF, ';')) {"], [2056, "            tokens.next();"], [2057, "            String comment = commentAfter();"], [2058, "            if (first) {"], [2059, "                first = false;"], [2060, "                declList.spacing = spacing;"], [2061, "                decl.text = comment + decl.text;"], [2062, "            }"], [2063, "            decl.variable = true;"], [2064, "            declList.add(decl);"], [2471, ""], [2473, "        if (variables.size() == 0) {"], [2474, "            declarations(ctx, declList2);"], [2475, "        } else for (Declarator var : variables) {"], [2476, "            if (context.variable != null) {"], [2477, "                var.cppName = context.variable.cppName + \".\" + var.cppName;"], [2478, "                var.javaName = context.variable.javaName + \"_\" + var.javaName;"], [2479, "            }"], [2480, "            ctx.variable = var;"], [2481, "            declarations(ctx, declList2);"], [2482, "        }"], [2902, "    LinkedList<File> findHeaderFiles(Loader.ClassProperties properties, LinkedList<String> includes) throws FileNotFoundException {"], [2903, "        LinkedList<String> paths = properties.get(\"platform.includepath\");"], [2904, "        LinkedList<File> files = new LinkedList<File>();"], [2905, "        for (String include : includes) {"], [2906, "            boolean found = false;"], [2907, "            if (include.startsWith(\"<\") && include.endsWith(\">\")) {"], [2908, "                include = include.substring(1, include.length() - 1);"], [2909, "            } else {"], [2910, "                File f = new File(include);"], [2911, "                if (f.exists()) {"], [2912, "                    found = true;"], [2913, "                    files.add(f);"], [2914, "                    continue;"], [2915, "                }"], [2916, "            }"], [2917, "            for (String path : paths) {"], [2918, "                File f = new File(path, include);"], [2919, "                if (f.exists()) {"], [2920, "                    found = true;"], [2921, "                    files.add(f);"], [2922, "                    break;"], [2923, "                }"], [2924, "            }"], [2925, "            if (!found) {"], [2926, "                files.add(new File(include));"], [2927, "            }"], [2928, "        }"], [2929, "        return files;"], [2930, "    }"], [2931, ""], [2943, "            if (!file.exists() && includePath != null) {"], [2953, "            if (!file.exists() || (info != null && info.skip)) {"], [3015, "        LinkedList<String> clsIncludes = new LinkedList<String>();"], [3016, "        clsIncludes.addAll(clsProperties.get(\"platform.include\"));"], [3017, "        clsIncludes.addAll(clsProperties.get(\"platform.cinclude\"));"], [3018, "        LinkedList<String> allIncludes = new LinkedList<String>();"], [3019, "        allIncludes.addAll(allProperties.get(\"platform.include\"));"], [3020, "        allIncludes.addAll(allProperties.get(\"platform.cinclude\"));"], [3021, "        LinkedList<File> allFiles = findHeaderFiles(allProperties, allIncludes);"], [3022, "        LinkedList<File> clsFiles = findHeaderFiles(allProperties, clsIncludes);"]], "deleted": [[781, "            variables = c.variables;"], [789, "        Declarator[] variables = null;"], [804, "                        String args = \"\";"], [805, "                        char separator = '<';"], [808, "                            separator = ',';"], [810, "                        args += args.endsWith(\">\") ? \" >\" : \">\";"], [811, "                        names.add(name + args);"], [941, "                    String indices = \"\";"], [942, "                    String separator = \"\";"], [952, "                String params = \"\";"], [953, "                String separator = \"\";"], [975, "                    String indent = \"        \";"], [976, "                    String indices = \"\";"], [977, "                    String args = \"\";"], [1140, "                char separator = '<';"], [1145, "                    separator = ',';"], [1261, "        int infoNumber = 0, indices = 0;"], [1262, "        boolean constPointer = false;"], [1275, "        Attribute attr = null;"], [1276, "        if (type.attributes != null) {"], [1277, "            for (Attribute a : type.attributes) {"], [1278, "                if (a.arguments.length() > 0 && Character.isJavaIdentifierStart(a.arguments.charAt(0))) {"], [1279, "                    attr = a;"], [1280, "                    for (char c : a.arguments.toCharArray()) {"], [1281, "                        if (!Character.isJavaIdentifierPart(c)) {"], [1282, "                            attr = null;"], [1283, "                            break;"], [1284, "                        }"], [1285, "                    }"], [1286, "                }"], [1287, "                if (attr != null) {"], [1288, "                    break;"], [1289, "                }"], [1290, "            }"], [1291, "        }"], [1310, "        int indirections = 0;"], [1311, "        boolean reference = false;"], [1314, "                indirections++;"], [1316, "                reference = true;"], [1324, "        if (indirections == 0 && reference) {"], [1334, "        if (tokens.get().match('(')) {"], [1362, "                } else if (token.match(')')) {"], [1363, "                    tokens.next();"], [1426, "            indirections++;"], [1436, "        if (pointerAsArray && indirections > (type.anonymous ? 0 : 1)) {"], [1439, "            indirections--;"], [1452, "        String prefix = type.constValue && indirections < 2 && !reference ? \"const \" : \"\";"], [1463, "                    indirections = 1;"], [1464, "                    reference = false;"], [1476, "            valueType = info.valueTypes != null && ((type.constValue && reference) ||"], [1477, "                    (indirections == 0 && !reference) || info.pointerTypes == null);"], [1489, "            if (indirections == 0 && !reference) {"], [1491, "            } else if (indirections == 0 && reference) {"], [1493, "            } else if (indirections == 1 && reference) {"], [1495, "            } else if (indirections == 2 && !reference && infoNumber >= 0) {"], [1498, "            } else if (indirections >= 2) {"], [1502, "                if (reference) {"], [1515, "            if (!valueType && indirections == 0 && !reference) {"], [1549, "            if (indirections2 == 0) {"], [1658, "                && info.valueTypes == null && info.pointerTypes == null) {"], [1674, "            } else {"], [1817, "        Info info = infoMap.getFirst(dcl.cppName);"], [1955, "        for (Declarator metadcl : context.variables != null ? context.variables : new Declarator[] { null }) {"], [1956, "            for (int n = 0; n < Integer.MAX_VALUE; n++) {"], [1957, "                decl = new Declaration();"], [1958, "                tokens.index = backIndex;"], [1959, "                dcl = declarator(context, null, -1, false, n, false, true);"], [1960, "                if (dcl == null) {"], [1961, "                    break;"], [1962, "                }"], [1963, "                decl.declarator = dcl;"], [1964, "                javaName = dcl.javaName;"], [1965, "                if (metadcl == null || metadcl.indices == 0 || dcl.indices == 0) {"], [1966, "                    // arrays are currently not supported for both metadcl and dcl at the same time"], [1967, "                    String indices = \"\";"], [1968, "                    for (int i = 0; i < (metadcl == null || metadcl.indices == 0 ? dcl.indices : metadcl.indices); i++) {"], [1969, "                        if (i > 0) {"], [1970, "                            indices += \", \";"], [1971, "                        }"], [1972, "                        indices += \"int \" + (char)('i' + i);"], [1973, "                    }"], [1974, "                    if (context.namespace != null && context.group == null) {"], [1975, "                        decl.text += \"@Namespace(\\\"\" + context.namespace + \"\\\") \";"], [1976, "                    }"], [1977, "                    if (metadcl != null && metadcl.cppName.length() > 0) {"], [1978, "                        decl.text += metadcl.indices == 0"], [1979, "                                ? \"@Name(\\\"\" + metadcl.cppName + \".\" + dcl.cppName + \"\\\") \""], [1980, "                                : \"@Name({\\\"\" + metadcl.cppName + \"\\\", \\\".\" + dcl.cppName + \"\\\"}) \";"], [1981, "                        javaName = metadcl.javaName + \"_\" + dcl.javaName;"], [1982, "                    }"], [1983, "                    if (dcl.type.constValue) {"], [1984, "                        decl.text += \"@MemberGetter \";"], [1985, "                    }"], [1986, "                    decl.text += modifiers + dcl.type.annotations.replace(\"@ByVal \", \"@ByRef \")"], [1987, "                              + dcl.type.javaName + \" \" + javaName + \"(\" + indices + \");\";"], [1988, "                    if (!dcl.type.constValue) {"], [1989, "                        if (indices.length() > 0) {"], [1990, "                            indices += \", \";"], [1991, "                        }"], [1992, "                        decl.text += \" \" + modifiers + setterType + javaName + \"(\" + indices + dcl.type.javaName + \" \" + javaName + \");\";"], [1994, "                    decl.text += \"\\n\";"], [1996, "                if (dcl.indices > 0) {"], [1997, "                    // in the case of arrays, also add a pointer accessor"], [1998, "                    tokens.index = backIndex;"], [1999, "                    dcl = declarator(context, null, -1, false, n, true, false);"], [2000, "                    String indices = \"\";"], [2001, "                    for (int i = 0; i < (metadcl == null ? 0 : metadcl.indices); i++) {"], [2002, "                        if (i > 0) {"], [2003, "                            indices += \", \";"], [2004, "                        }"], [2005, "                        indices += \"int \" + (char)('i' + i);"], [2006, "                    }"], [2007, "                    if (context.namespace != null && context.group == null) {"], [2008, "                        decl.text += \"@Namespace(\\\"\" + context.namespace + \"\\\") \";"], [2010, "                    if (metadcl != null && metadcl.cppName.length() > 0) {"], [2011, "                        decl.text += metadcl.indices == 0"], [2012, "                                ? \"@Name(\\\"\" + metadcl.cppName + \".\" + dcl.cppName + \"\\\") \""], [2013, "                                : \"@Name({\\\"\" + metadcl.cppName + \"\\\", \\\".\" + dcl.cppName + \"\\\"}) \";"], [2014, "                        javaName = metadcl.javaName + \"_\" + dcl.javaName;"], [2016, "                    decl.text += \"@MemberGetter \" + modifiers + dcl.type.annotations.replace(\"@ByVal \", \"@ByRef \")"], [2017, "                              + dcl.type.javaName + \" \" + javaName + \"(\" + indices + \");\\n\";"], [2019, "                decl.signature = dcl.signature;"], [2020, "                if (info != null && info.javaText != null) {"], [2021, "                    decl.text = info.javaText;"], [2022, "                    decl.declarator = null;"], [2024, "                while (!tokens.get().match(Token.EOF, ';')) {"], [2025, "                    tokens.next();"], [2028, "                String comment = commentAfter();"], [2029, "                if (first) {"], [2030, "                    first = false;"], [2031, "                    declList.spacing = spacing;"], [2032, "                    decl.text = comment + decl.text;"], [2033, "                }"], [2034, "                decl.variable = true;"], [2035, "                declList.add(decl);"], [2443, "        if (variables.size() > 0) {"], [2444, "            ctx.variables = variables.toArray(new Declarator[variables.size()]);"], [2445, "        }"], [2447, "        declarations(ctx, declList2);"], [2878, "            if (!file.exists()) {"], [2888, "            if (info != null && info.skip) {"], [2950, "        LinkedList<File> allFiles = allProperties.getHeaderFiles();"], [2951, "        LinkedList<File> clsFiles = clsProperties.getHeaderFiles();"]]}, "num_lines_added": 214, "num_lines_removed": 143}