{"hash": "3fd6db7d5021e51e4beec97c7c5421229b82ac31", "message": "* JavaCPP now uses the `new (std::nothrow)` operator for allocation, which guarantees that allocation of primitive native arrays won't throw exceptions, making it possible to build C++ exception free JNI libraries", "file_num_lines": 1931, "diff_parsed": {"added": [[64, "import java.util.Arrays;"], [68, "import java.util.List;"], [104, "    public static final String JNI_VERSION = \"JNI_VERSION_1_6\";"], [105, ""], [106, "    private static final Logger logger = Logger.getLogger(Generator.class.getName());"], [107, ""], [108, "    private static final List<Class> baseClasses = Arrays.asList(new Class[] {"], [109, "            Pointer.class,"], [110, "            //FunctionPointer.class,"], [111, "            BytePointer.class,"], [112, "            ShortPointer.class,"], [113, "            IntPointer.class,"], [114, "            LongPointer.class,"], [115, "            FloatPointer.class,"], [116, "            DoublePointer.class,"], [117, "            CharPointer.class,"], [118, "            PointerPointer.class,"], [119, "            BoolPointer.class,"], [120, "            CLongPointer.class,"], [121, "            SizeTPointer.class });"], [122, ""], [123, "    private Properties properties;"], [124, "    private File file;"], [125, "    private PrintWriter writer, out;"], [126, "    private LinkedListRegister<String> functionDefinitions, functionPointers;"], [127, "    private LinkedListRegister<Class> deallocators, arrayDeallocators, jclasses, jclassesInit;"], [128, "    private HashMap<Class,LinkedList<String>> members;"], [129, "    private boolean mayThrowExceptions;"], [130, ""], [145, "        mayThrowExceptions  = false;"], [146, "        if (doClasses(true, classes)) {"], [149, "            doClasses(mayThrowExceptions, classes);"], [161, "    private boolean doClasses(boolean handleExceptions, Class<?> ... classes) {"], [224, "        out.println(\"#include <new>\");"], [231, "        out.println(\"    #define JavaCPP_noinline __declspec(noinline)\");"], [233, "        out.println(\"    #define JavaCPP_noinline __attribute__((noinline))\");"], [235, "        out.println(\"    #define JavaCPP_noinline\");"], [291, "        out.println(\"static JavaCPP_noinline jclass JavaCPP_getClass(JNIEnv* e, int i) {\");"], [308, "        if (handleExceptions) {"], [309, "            out.println(\"static JavaCPP_noinline void JavaCPP_handleException(JNIEnv* e) {\");"], [310, "            out.println(\"    try {\");"], [311, "            out.println(\"        throw;\");"], [312, "            out.println(\"    } catch (std::exception& ex) {\");"], [313, "            out.println(\"        e->ThrowNew(JavaCPP_getClass(e, \" +"], [314, "                    jclasses.register(RuntimeException.class) + \"), ex.what());\");"], [315, "            out.println(\"    } catch (...) {\");"], [316, "            out.println(\"        e->ThrowNew(JavaCPP_getClass(e, \" +"], [317, "                    jclasses.register(RuntimeException.class) + \"), \\\"Unknown exception.\\\");\");"], [318, "            out.println(\"    }\");"], [319, "            out.println(\"}\");"], [320, "            out.println();"], [321, "        }"], [344, "        out.println(\"            pointer = new (std::nothrow) P[vec.size()];\");"], [512, "        for (Class<?> cls : baseClasses) {"], [513, "            doMethods(cls);"], [514, "        }"], [515, ""], [808, "                        returnVariable = \"if (rpointer != NULL) rpointer->pointer = \";"], [812, "                        returnVariable += (getNoException(methodInfo.returnType, methodInfo.method) ?"], [813, "                            \"new (std::nothrow) \" : \"new \") + valueTypeName + typeName[1] + \"(\";"], [822, "                        out.println(\"    rpointer = new (std::nothrow) \" + valueTypeName + \";\");"], [921, "                out.print((getNoException(methodInfo.cls, methodInfo.method) ?"], [922, "                    \"new (std::nothrow) \" : \"new \") + valueTypeName);"], [979, "                out.print(cast + \"(p\" + j + \" == NULL ? NULL : &pointer\" + j + \")\");"], [1163, "            mayThrowExceptions = true;"], [1252, "                            out.println(\"    pointer\" + j + \" = new (std::nothrow) \" + valueTypeName + \";\");"], [1253, "                            out.println(\"    if (pointer\" + j + \" != NULL) {\");"], [1254, "                            out.println(\"        pointer\" + j + \"->pointer = p\" + j + \";\");"], [1255, "                            out.println(\"    }\");"], [1259, "                            out.println(\"    pointer\" + j + (getNoException(callbackParameterTypes[j], callbackMethod) ?"], [1260, "                                \" = new (std::nothrow) \" : \" = new \") + valueTypeName + typeName[1] +"], [1261, "                                \"(*(\" + typeName[0] + typeName[1] + \")&p\" + j + \");\");"], [1434, "        out.println(\"    \" + valueTypeName + \"* rpointer = new (std::nothrow) \" + valueTypeName + \";\");"], [1435, "        out.println(\"    if (rpointer != NULL) {\");"], [1436, "        out.println(\"        rpointer->pointer = &JavaCPP_\" + callbackName + \"_callback;\");"], [1437, "        out.println(\"        jvalue args[3];\");"], [1438, "        out.println(\"        args[0].j = ptr_to_jlong(rpointer);\");"], [1439, "        out.println(\"        args[1].i = 1;\");"], [1440, "        out.println(\"        args[2].j = ptr_to_jlong(&\" + valueTypeName + \"_deallocate);\");"], [1442, "        out.println(\"        e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, \" +"], [1444, "        out.println(\"    }\");"], [1689, "        if (!getNoException(info.cls, method)) {"], [1690, "            if ((getBy(info.annotations) instanceof ByVal && !getNoException(info.returnType, method)) ||"], [1691, "                    !info.deallocator && !info.valueGetter && !info.valueSetter &&"], [1692, "                    !info.memberGetter && !info.memberSetter && !info.bufferGetter) {"], [1693, "                info.mayThrowException = true;"], [1694, "            }"], [1699, "    public static boolean getNoException(Class cls, Method method) {"], [1700, "        boolean noException = baseClasses.contains(cls) ||"], [1701, "                method.isAnnotationPresent(NoException.class);"], [1702, "        while (!noException && cls != null) {"], [1703, "            if (noException = cls.isAnnotationPresent(NoException.class)) {"], [1704, "                break;"], [1705, "            }"], [1706, "            cls = cls.getDeclaringClass();"], [1707, "        }"], [1708, "        return noException;"], [1709, "    }"], [1710, ""]], "deleted": [[91, "    public static final String JNI_VERSION = \"JNI_VERSION_1_6\";"], [92, ""], [93, "    private static final Logger logger = Logger.getLogger(Generator.class.getName());"], [94, ""], [95, "    private Properties properties;"], [96, "    private File file;"], [97, "    private PrintWriter writer, out;"], [98, "    private LinkedListRegister<String> functionDefinitions, functionPointers;"], [99, "    private LinkedListRegister<Class> deallocators, arrayDeallocators, jclasses, jclassesInit;"], [100, "    private HashMap<Class,LinkedList<String>> members;"], [101, ""], [127, "        if (doClasses(classes)) {"], [130, "            doClasses(classes);"], [142, "    private boolean doClasses(Class<?> ... classes) {"], [211, "        out.println(\"    #define noinline __declspec(noinline)\");"], [213, "        out.println(\"    #define noinline __attribute__((noinline))\");"], [215, "        out.println(\"    #define noinline\");"], [271, "        out.println(\"static noinline jclass JavaCPP_getClass(JNIEnv* e, int i) {\");"], [288, "        out.println(\"static noinline void JavaCPP_handleException(JNIEnv* e) {\");"], [289, "        out.println(\"    try {\");"], [290, "        out.println(\"        throw;\");"], [291, "        out.println(\"    } catch (std::exception& ex) {\");"], [292, "        out.println(\"        e->ThrowNew(JavaCPP_getClass(e, \" +"], [293, "                jclasses.register(RuntimeException.class) + \"), ex.what());\");"], [294, "        out.println(\"    } catch (...) {\");"], [295, "        out.println(\"        e->ThrowNew(JavaCPP_getClass(e, \" +"], [296, "                jclasses.register(RuntimeException.class) + \"), \\\"Unknown exception.\\\");\");"], [297, "        out.println(\"    }\");"], [298, "        out.println(\"}\");"], [299, "        out.println();"], [322, "        out.println(\"            pointer = new P[vec.size()];\");"], [490, "        doMethods(Pointer.class);"], [491, "        doMethods(BytePointer.class);"], [492, "        doMethods(ShortPointer.class);"], [493, "        doMethods(IntPointer.class);"], [494, "        doMethods(LongPointer.class);"], [495, "        doMethods(FloatPointer.class);"], [496, "        doMethods(DoublePointer.class);"], [497, "        doMethods(CharPointer.class);"], [498, "        doMethods(PointerPointer.class);"], [499, "        doMethods(BoolPointer.class);"], [500, "        doMethods(CLongPointer.class);"], [501, "        doMethods(SizeTPointer.class);"], [502, "//        doMethods(FunctionPointer.class);"], [795, "                        returnVariable = \"rpointer->pointer = \";"], [799, "                        returnVariable += \"new \" + valueTypeName + typeName[1] + \"(\";"], [808, "                        out.println(\"    rpointer = new \" + valueTypeName + \";\");"], [907, "                out.print(\"new \" + valueTypeName);"], [964, "                out.print(cast + \"&pointer\" + j);"], [1236, "                            out.println(\"    pointer\" + j + \" = new \" + valueTypeName + \";\");"], [1237, "                            out.println(\"    pointer\" + j + \"->pointer = p\" + j + \";\");"], [1241, "                            out.println(\"    pointer\" + j + \" = new \" + valueTypeName + typeName[1] +"], [1242, "                                    \"(*(\" + typeName[0] + typeName[1] + \")&p\" + j + \");\");"], [1415, "        out.println(\"    \" + valueTypeName + \"* rpointer = new \" + valueTypeName + \";\");"], [1416, "        out.println(\"    rpointer->pointer = &JavaCPP_\" + callbackName + \"_callback;\");"], [1417, "        out.println(\"    jvalue args[3];\");"], [1418, "        out.println(\"    args[0].j = ptr_to_jlong(rpointer);\");"], [1419, "        out.println(\"    args[1].i = 1;\");"], [1420, "        out.println(\"    args[2].j = ptr_to_jlong(&\" + valueTypeName + \"_deallocate);\");"], [1422, "        out.println(\"    e->CallNonvirtualVoidMethodA(o, JavaCPP_getClass(e, \" +"], [1668, "        if ((!info.cls.isAnnotationPresent(NoException.class) &&"], [1669, "                !method.isAnnotationPresent(NoException.class) &&"], [1670, "                !info.deallocator && !info.valueGetter && !info.valueSetter &&"], [1671, "                !info.memberGetter && !info.memberSetter && !info.bufferGetter) ||"], [1672, "                getBy(info.annotations) instanceof ByVal) {"], [1673, "            info.mayThrowException = true;"]]}, "num_lines_added": 99, "num_lines_removed": 66}