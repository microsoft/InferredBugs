{"hash": "909e878ed1a45e14c652f2d08bc747ad350f5a1b", "message": "Update version in the `pom.xml` file to 1.3.1-SNAPSHOT\n\n * Fix potential issues with `Parser` repeating the `@ByPtrPtr` or `@ByPtrRef` annotations on parameters\n * To support Scala singleton objects better, consider as `static` methods from objects that are not `Pointer`\n * Allow `Loader.extractResource()` and `cacheResource()` to extract or cache all files from a directory in a JAR file\n * Create version-less symbolic links to libraries in cache on those platforms where it is useful to link easily\n * Use `java.io.tmpdir` as fallback in `Loader.getCacheDir()`, and throw a clear exception on failure", "file_num_lines": 691, "diff_parsed": {"added": [[43, "import java.util.Enumeration;"], [358, "            Path path = file.toPath(), targetPath = Paths.get(target);"], [360, "                if ((!file.exists() || !Files.isSymbolicLink(path) || !Files.readSymbolicLink(path).equals(targetPath))"], [362, "                    if (logger.isDebugEnabled()) {"], [363, "                        logger.debug(\"Creating symbolic link \" + path);"], [364, "                    }"], [368, "            } catch (IOException | UnsupportedOperationException e) {"], [370, "                if (logger.isDebugEnabled()) {"], [371, "                    logger.debug(\"Failed to create symbolic link \" + path + \": \" + e);"], [372, "                }"], [433, "        URLConnection urlConnection = resourceURL != null ? resourceURL.openConnection() : null;"], [434, "        if (urlConnection instanceof JarURLConnection) {"], [435, "            JarFile jarFile = ((JarURLConnection)urlConnection).getJarFile();"], [436, "            JarEntry jarEntry = ((JarURLConnection)urlConnection).getJarEntry();"], [437, "            String jarFileName = jarFile.getName();"], [438, "            String jarEntryName = jarEntry.getName();"], [439, "            if (!jarEntryName.endsWith(\"/\")) {"], [440, "                jarEntryName += \"/\";"], [441, "            }"], [442, "            if (jarEntry.isDirectory() || jarFile.getJarEntry(jarEntryName) != null) {"], [443, "                // Extract all files in directory of JAR file"], [444, "                Enumeration<JarEntry> entries = jarFile.entries();"], [445, "                while (entries.hasMoreElements()) {"], [446, "                    JarEntry entry = entries.nextElement();"], [447, "                    String entryName = entry.getName();"], [448, "                    if (entryName.startsWith(jarEntryName)) {"], [449, "                        File file = new File(directoryOrFile, entryName.substring(jarEntryName.length()));"], [450, "                        if (entry.isDirectory()) {"], [451, "                            file.mkdirs();"], [452, "                        } else {"], [453, "                            String s = resourceURL.toString();"], [454, "                            URL u = new URL(s.substring(0, s.indexOf(\"!/\") + 2) + entryName);"], [455, "                            file = extractResource(u, file, prefix, suffix);"], [456, "                        }"], [457, "                        file.setLastModified(entry.getTime());"], [458, "                    }"], [459, "                }"], [460, "                return directoryOrFile;"], [461, "            }"], [462, "        }"], [463, "        InputStream is = urlConnection != null ? urlConnection.getInputStream() : null;"], [520, "    public static File getCacheDir() throws IOException {"], [522, "            String[] dirNames = {System.getProperty(\"org.bytedeco.javacpp.cachedir\"),"], [523, "                                 System.getProperty(\"user.home\") + \"/.javacpp/cache/\","], [524, "                                 System.getProperty(\"java.io.tmpdir\") + \"/.javacpp-\" + System.getProperty(\"user.name\") + \"/cache/\"};"], [525, "            for (String dirName : dirNames) {"], [526, "                if (dirName != null) {"], [527, "                    File f = new File(dirName);"], [528, "                    if (f.exists() || f.mkdirs()) {"], [529, "                        cacheDir = f;"], [530, "                        break;"], [531, "                    }"], [535, "        if (cacheDir == null) {"], [536, "            throw new IOException(\"Could not create the cache: Set the \\\"org.bytedeco.javacpp.cachedir\\\" system property.\");"], [537, "        }"], [638, "        String cacheDir = null;"], [639, "        try {"], [640, "            cacheDir = getCacheDir().getCanonicalPath();"], [641, "        } catch (IOException e) {"], [642, "            // no cache dir, no worries"], [643, "        }"], [644, ""], [653, "                String filename = loadLibrary(urls, preload);"], [654, "                if (cacheDir != null && filename.startsWith(cacheDir)) {"], [655, "                    createLibraryLink(filename, p, preload);"], [656, "                }"], [665, "            String filename = loadLibrary(urls, library);"], [666, "            if (cacheDir != null && filename.startsWith(cacheDir)) {"], [667, "                createLibraryLink(filename, p, library);"], [668, "            }"], [669, "            return filename;"], [887, "     * Creates a version-less symbolic link to a library file, if needed."], [888, "     *"], [889, "     * @param filename of the probably versioned library"], [890, "     * @param properties of the class associated with the library"], [891, "     * @param libnameversion the library name and version as with {@link #loadLibrary(URL[], String)}"], [892, "     * @return the version-less filename (or null on failure), a symbolic link only if needed"], [893, "     */"], [894, "    public static String createLibraryLink(String filename, ClassProperties properties, String libnameversion) {"], [895, "        File file = new File(filename);"], [896, "        String parent = file.getParent(), name = file.getName(), link = null;"], [897, ""], [898, "        String[] split = libnameversion.split(\"#\");"], [899, "        String[] s = (split.length > 1 ? split[1] : split[0]).split(\"@\");"], [900, "        String libname = s[0];"], [901, "        String version = s.length > 1 ? s[s.length-1] : \"\";"], [902, ""], [903, "        if (version.length() == 0) {"], [904, "            return filename;"], [905, "        }"], [906, "        for (String suffix : properties.get(\"platform.library.suffix\")) {"], [907, "            int n = name.lastIndexOf(suffix);"], [908, "            int n2 = name.lastIndexOf(version);"], [909, "            if (n > 0 && n2 > 0) {"], [910, "                link = name.substring(0, n < n2 ? n : n2) + suffix;"], [911, "                break;"], [912, "            }"], [913, "        }"], [914, "        if (link != null && link.length() > 0 && !link.equals(name)) {"], [915, "            File linkFile = new File(parent, link);"], [916, "            Path linkPath = linkFile.toPath();"], [917, "            Path targetPath = Paths.get(name);"], [918, "            try {"], [919, "                if ((!linkFile.exists() || !Files.isSymbolicLink(linkPath) || !Files.readSymbolicLink(linkPath).equals(targetPath))"], [920, "                        && !targetPath.isAbsolute() && !targetPath.equals(linkPath)) {"], [921, "                    if (logger.isDebugEnabled()) {"], [922, "                        logger.debug(\"Creating symbolic link \" + linkPath);"], [923, "                    }"], [924, "                    linkFile.delete();"], [925, "                    Files.createSymbolicLink(linkPath, targetPath);"], [926, "                }"], [927, "                filename = linkFile.toString();"], [928, "            } catch (IOException | UnsupportedOperationException e) {"], [929, "                // ... (probably an unsupported operation on Windows, but DLLs never need links) ..."], [930, "                if (logger.isDebugEnabled()) {"], [931, "                    logger.debug(\"Failed to create symbolic link \" + linkPath + \": \" + e);"], [932, "                }"], [933, "                return null;"], [934, "            }"], [935, "        }"], [936, "        return filename;"], [937, "    }"], [938, ""], [939, "    /**"]], "deleted": [[358, "                if (logger.isDebugEnabled()) {"], [359, "                    logger.debug(\"Creating symbolic link to \" + target);"], [360, "                }"], [361, "                Path path = file.toPath(), targetPath = Paths.get(target);"], [362, "                if ((!file.exists() || !Files.isSymbolicLink(path))"], [367, "            } catch (IOException e) {"], [429, "        InputStream is = resourceURL != null ? resourceURL.openStream() : null;"], [486, "    public static File getCacheDir() {"], [488, "            String dirName = System.getProperty(\"org.bytedeco.javacpp.cachedir\", System.getProperty(\"user.home\") + \"/.javacpp/cache/\");"], [489, "            if (dirName != null) {"], [490, "                File f = new File(dirName);"], [491, "                if (f.exists() || f.mkdirs()) {"], [492, "                    cacheDir = f;"], [604, "                loadLibrary(urls, preload);"], [613, "            return loadLibrary(urls, library);"]]}, "num_lines_added": 124, "num_lines_removed": 15}