    public static File cacheResource(URL resourceURL, String target) throws IOException {
        // Find appropriate subdirectory in cache for the resource ...
        File urlFile = new File(resourceURL.getPath());
        String name = urlFile.getName();
        long size, timestamp;
        File cacheSubdir = getCacheDir().getCanonicalFile();
        URLConnection urlConnection = resourceURL.openConnection();
        if (urlConnection instanceof JarURLConnection) {
            JarFile jarFile = ((JarURLConnection)urlConnection).getJarFile();
            JarEntry jarEntry = ((JarURLConnection)urlConnection).getJarEntry();
            File jarFileFile = new File(jarFile.getName());
            File jarEntryFile = new File(jarEntry.getName());
            size = jarEntry.getSize();
            timestamp = jarEntry.getTime();
            cacheSubdir = new File(cacheSubdir, jarFileFile.getName() + File.separator + jarEntryFile.getParent());
        } else {
            size = urlFile.length();
            timestamp = urlFile.lastModified();
            cacheSubdir = new File(cacheSubdir, name);
        }
        if (resourceURL.getRef() != null) {
            // ... get the URL fragment to let users rename library files ...
            name = resourceURL.getRef();
        }
        // ... then check if it has not already been extracted, and if not ...
        File file = new File(cacheSubdir, name);
        if (target != null && target.length() > 0) {
            // ... create symbolic link to already extracted library or ...
            try {
                if (logger.isDebugEnabled()) {
                    logger.debug("Creating symbolic link to " + target);
                }
                Path path = file.toPath(), targetPath = Paths.get(target);
                if ((!file.exists() || !Files.isSymbolicLink(path))
                        && targetPath.isAbsolute() && !targetPath.equals(path)) {
                    file.delete();
                    Files.createSymbolicLink(path, targetPath);
                }
            } catch (IOException e) {
                // ... (probably an unsupported operation on Windows, but DLLs never need links) ...
                return null;
            }
        } else if (!file.exists() || file.length() != size || file.lastModified() != timestamp
                    || !cacheSubdir.equals(file.getCanonicalFile().getParentFile())) {
            // ... then extract it from our resources ...
            if (logger.isDebugEnabled()) {
                logger.debug("Extracting " + resourceURL);
            }
            file.delete();
            extractResource(resourceURL, file, null, null);
            file.setLastModified(timestamp);
        } else while (System.currentTimeMillis() - file.lastModified() >= 0
                   && System.currentTimeMillis() - file.lastModified() < 1000) {
            // ... else wait until the file is at least 1 second old ...
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                // ... and reset interrupt to be nice.
                Thread.currentThread().interrupt();
            }
        }
        return file;
    }