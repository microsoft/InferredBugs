{"hash": "6a57e944b4b66923bc1e91f9779bed155473ff17", "message": "* Fixed `Loader.sizeof(Pointer.class)` to return the `sizeof(void*)`\n * In addition to methods and parameters, we may now apply `@Adapter` to annotation types as well, allowing us to shorten expressions like `@Adapter(\"VectorAdapter<int>\") int[]` to `@StdVector int[]`, to support `std::vector<int>`, and similarly for `@StdString` and `std::string`", "file_num_lines": 2048, "diff_parsed": {"added": [[129, "    private boolean mayThrowExceptions, usesAdapters;"], [146, "        usesAdapters        = false;"], [147, "        if (doClasses(true, true, classes)) {"], [150, "            doClasses(mayThrowExceptions, usesAdapters, classes);"], [162, "    private boolean doClasses(boolean handleExceptions, boolean defineAdapters, Class<?> ... classes) {"], [190, "        out.println(\"#include <stddef.h>\");"], [191, "        out.println(\"#ifndef _WIN32\");"], [192, "        out.println(\"    #include <stdint.h>\");"], [193, "        out.println(\"#endif\");"], [194, "        out.println(\"#include <stdio.h>\");"], [195, "        out.println(\"#include <stdlib.h>\");"], [196, "        out.println(\"#include <string.h>\");"], [197, "        out.println(\"#include <exception>\");"], [198, "        out.println(\"#include <new>\");"], [199, "        out.println();"], [200, "        out.println(\"#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))\");"], [201, "        out.println(\"#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))\");"], [202, "        out.println();"], [203, "        out.println(\"#if defined(_MSC_VER)\");"], [204, "        out.println(\"    #define JavaCPP_noinline __declspec(noinline)\");"], [205, "        out.println(\"#elif defined(__GNUC__)\");"], [206, "        out.println(\"    #define JavaCPP_noinline __attribute__((noinline))\");"], [207, "        out.println(\"#else\");"], [208, "        out.println(\"    #define JavaCPP_noinline\");"], [209, "        out.println(\"#endif\");"], [210, "        out.println();"], [331, "        if (defineAdapters) {"], [332, "            out.println(\"#include <vector>\");"], [333, "            out.println(\"template<class P, class T = P> class VectorAdapter {\");"], [334, "            out.println(\"public:\");"], [335, "            out.println(\"    VectorAdapter(const P* pointer, typename std::vector<T>::size_type size) : pointer((P*)pointer), size(size),\");"], [336, "            out.println(\"        vec2(pointer ? std::vector<T>((P*)pointer, (P*)pointer + size) : std::vector<T>()), vec(vec2) { }\");"], [337, "            out.println(\"    VectorAdapter(const std::vector<T>& vec) : pointer(0), size(0), vec((std::vector<T>&)vec) { }\");"], [338, "            out.println(\"    void assign(P* pointer, typename std::vector<T>::size_type size) {\");"], [339, "            out.println(\"        this->pointer = pointer;\");"], [340, "            out.println(\"        this->size = size;\");"], [341, "            out.println(\"        vec.assign(pointer, pointer + size);\");"], [342, "            out.println(\"    }\");"], [343, "            out.println(\"    static void deallocate(P* pointer) { delete[] pointer; }\");"], [344, "            out.println(\"    operator P*() {\");"], [345, "            out.println(\"        if (vec.size() > size) {\");"], [346, "            out.println(\"            pointer = new (std::nothrow) P[vec.size()];\");"], [347, "            out.println(\"        }\");"], [348, "            out.println(\"        if (pointer) {\");"], [349, "            out.println(\"            std::copy(vec.begin(), vec.end(), pointer);\");"], [350, "            out.println(\"        }\");"], [351, "            out.println(\"        size = vec.size();\");"], [352, "            out.println(\"        return pointer;\");"], [353, "            out.println(\"    }\");"], [354, "            out.println(\"    operator const P*()        { return &vec[0]; }\");"], [355, "            out.println(\"    operator std::vector<T>&() { return vec; }\");"], [356, "            out.println(\"    operator std::vector<T>*() { return pointer ? &vec : 0; }\");"], [357, "            out.println(\"    P* pointer;\");"], [358, "            out.println(\"    typename std::vector<T>::size_type size;\");"], [359, "            out.println(\"    std::vector<T> vec2;\");"], [360, "            out.println(\"    std::vector<T>& vec;\");"], [361, "            out.println(\"};\");"], [362, "            out.println();"], [363, "            out.println(\"#include <string>\");"], [364, "            out.println(\"class StringAdapter {\");"], [365, "            out.println(\"public:\");"], [366, "            out.println(\"    StringAdapter(const char* pointer, size_t size) : pointer((char*)pointer), size(size),\");"], [367, "            out.println(\"        str2(pointer ? pointer : \\\"\\\"), str(str2) { }\");"], [368, "            out.println(\"    StringAdapter(const std::string& str) : pointer(0), size(0), str((std::string&)str) { }\");"], [369, "            out.println(\"    void assign(char* pointer, size_t size) {\");"], [370, "            out.println(\"        this->pointer = pointer;\");"], [371, "            out.println(\"        this->size = size;\");"], [372, "            out.println(\"        str.assign(pointer ? pointer : \\\"\\\");\");"], [373, "            out.println(\"    }\");"], [374, "            out.println(\"    static void deallocate(char* pointer) { free(pointer); }\");"], [375, "            out.println(\"    operator char*() {\");"], [376, "            out.println(\"        const char *c_str = str.c_str();\");"], [377, "            out.println(\"        if (pointer == NULL || strcmp(c_str, pointer) != 0) {\");"], [378, "            out.println(\"            this->pointer = strdup(c_str);\");"], [379, "            out.println(\"            this->size = strlen(c_str) + 1;\");"], [380, "            out.println(\"        }\");"], [381, "            out.println(\"        return pointer;\");"], [382, "            out.println(\"    }\");"], [383, "            out.println(\"    operator const char*()  { return str.c_str(); }\");"], [384, "            out.println(\"    operator std::string&() { return str; }\");"], [385, "            out.println(\"    operator std::string*() { return pointer ? &str : 0; }\");"], [386, "            out.println(\"    char* pointer;\");"], [387, "            out.println(\"    size_t size;\");"], [388, "            out.println(\"    std::string str2;\");"], [389, "            out.println(\"    std::string& str;\");"], [390, "            out.println(\"};\");"], [391, "            out.println();"], [392, "        }"], [581, "        if (cls == Pointer.class || (!cls.isAnnotationPresent(Opaque.class) &&"], [582, "                !FunctionPointer.class.isAssignableFrom(cls))) {"], [703, "        AdapterInformation prevAdapterInfo = null;"], [709, "                AdapterInformation adapterInfo = getParameterAdapterInformation(false, methodInfo, j);"], [741, "                    if (adapterInfo != null || prevAdapterInfo != null) {"], [750, "                        if (adapterInfo != null || prevAdapterInfo != null) {"], [756, "                    if (adapterInfo != null || prevAdapterInfo != null) {"], [770, "                    if (adapterInfo != null || prevAdapterInfo != null) {"], [776, "                    if (adapterInfo != null || prevAdapterInfo != null) {"], [786, "                if (adapterInfo != null) {"], [787, "                    usesAdapters = true;"], [788, "                    adapterLine = \"    \" + adapterInfo.name + \" adapter\" + j + \"(\";"], [789, "                    prevAdapterInfo = adapterInfo;"], [791, "                if (prevAdapterInfo != null) {"], [797, "                    if (--prevAdapterInfo.argc > 0) {"], [801, "                if (prevAdapterInfo != null && prevAdapterInfo.argc <= 0) {"], [803, "                    prevAdapterInfo = null;"], [829, "                String valueTypeName = getValueTypeName(typeName);"], [841, "                        valueTypeName = getValueTypeName(typeName);"], [869, "                AdapterInformation adapterInfo = getAdapterInformation(false, valueTypeName, methodInfo.annotations);"], [870, "                if (adapterInfo != null) {"], [871, "                    usesAdapters = true;"], [872, "                    returnVariable = adapterInfo.name + \" radapter(\";"], [903, "                    getParameterAdapterInformation(false, methodInfo, k) == null &&"], [996, "            AdapterInformation adapterInfo = getParameterAdapterInformation(false, methodInfo, j);"], [1003, "            } else if (adapterInfo != null) {"], [1004, "                cast = adapterInfo.cast.trim();"], [1009, "                j += adapterInfo.argc - 1;"], [1037, "        String[] typeName = getCastedCPPTypeName(methodInfo.annotations, methodInfo.returnType);"], [1039, "        String valueTypeName = getValueTypeName(typeName);"], [1040, "        AdapterInformation adapterInfo = getAdapterInformation(false, valueTypeName, methodInfo.annotations);"], [1041, "        if (!methodInfo.returnType.isPrimitive() && adapterInfo != null) {"], [1092, "                if (adapterInfo != null) {"], [1094, "                    if (methodInfo.returnType != String.class) {"], [1095, "                        out.println(indent + \"jint rcapacity = (jint)radapter.size;\");"], [1096, "                        out.println(indent + \"jlong deallocator = ptr_to_jlong(&(\" +"], [1097, "                                adapterInfo.name + \"::deallocate));\");"], [1098, "                    }"], [1164, "            AdapterInformation adapterInfo = getParameterAdapterInformation(true, methodInfo, j);"], [1165, "            if (adapterInfo != null) {"], [1166, "                for (int k = 0; k < adapterInfo.argc; k++) {"], [1173, "                    out.println(indent + \"    args[2].j = ptr_to_jlong(&(\" + adapterInfo.name + \"::deallocate));\");"], [1239, "        String returnValueTypeName = getValueTypeName(returnTypeName);"], [1240, "        AdapterInformation returnAdapterInfo = getAdapterInformation(false, returnValueTypeName, callbackAnnotations);"], [1267, "                    String[] typeName = getCPPTypeName(callbackParameterTypes[j]);"], [1268, "                    String valueTypeName = getValueTypeName(typeName);"], [1269, "                    AdapterInformation adapterInfo = getAdapterInformation(false, valueTypeName, callbackParameterAnnotations[j]);"], [1270, "                    if (adapterInfo == null) {"], [1271, "                        typeName = getCastedCPPTypeName(callbackParameterAnnotations[j], callbackParameterTypes[j]);"], [1272, "                        valueTypeName = getValueTypeName(typeName);"], [1273, "                    }"], [1276, "                    if (adapterInfo != null) {"], [1277, "                        usesAdapters = true;"], [1278, "                        out.println(\"    \" + adapterInfo.name + \" adapter\" + j + \"(p\" + j + \");\");"], [1280, "                        out.println(\"    jlong deallocator\" + j + \" = ptr_to_jlong(&(\" + adapterInfo.name + \"::deallocate));\");"], [1295, "                            valueTypeName = getValueTypeName(typeName);"], [1304, "                        } else if (adapterInfo != null) {"], [1323, "                        adapterInfo = getAdapterInformation(true, valueTypeName, callbackParameterAnnotations[j]);"], [1324, "                        if (adapterInfo != null || passBy instanceof ByPtrPtr || passBy instanceof ByPtrRef) {"], [1352, "                                (adapterInfo != null ? \"adapter\" : \"p\") + j + \");\");"], [1378, "                String valueTypeName = getValueTypeName(typeName);"], [1379, "                AdapterInformation adapterInfo = getAdapterInformation(true, valueTypeName, callbackParameterAnnotations[j]);"], [1381, "                if (adapterInfo != null || passBy instanceof ByPtrPtr || passBy instanceof ByPtrRef) {"], [1384, "                    if (adapterInfo != null) {"], [1390, "                        if (adapterInfo != null) {"], [1394, "                    if (adapterInfo != null) {"], [1414, "                if (returnAdapterInfo != null) {"], [1420, "                    if (returnAdapterInfo != null) {"], [1426, "//                if (returnAdapterInfo != null) {"], [1431, "                if (returnAdapterInfo != null) {"], [1449, "            } else if (returnAdapterInfo != null) {"], [1450, "                usesAdapters = true;"], [1451, "                out.println(\"    return \" + returnAdapterInfo.name + \"(\" + callbackReturnCast + \"rpointer, rsize);\");"], [1763, "    public static class AdapterInformation {"], [1764, "        public String name;"], [1765, "        public int argc;"], [1766, "        public String cast;"], [1767, "    }"], [1768, "    public static AdapterInformation getParameterAdapterInformation(boolean out, MethodInformation methodInfo, int j) {"], [1769, "        if (methodInfo.parameterTypes[j] == String.class && out) {"], [1770, "            return null;"], [1771, "        }"], [1772, "        String typeName = getParameterCast(methodInfo, j);"], [1773, "        if (typeName != null && typeName.startsWith(\"(\") && typeName.endsWith(\")\")) {"], [1774, "            typeName = typeName.substring(1, typeName.length()-1);"], [1775, "        }"], [1776, "        if (typeName == null || typeName.length() == 0) {"], [1777, "            typeName = getCastedCPPTypeName(methodInfo.parameterAnnotations[j], methodInfo.parameterTypes[j])[0];"], [1778, "        }"], [1779, "        String valueTypeName = getValueTypeName(typeName);"], [1780, "        AdapterInformation adapter = getAdapterInformation(out, valueTypeName, methodInfo.parameterAnnotations[j]);"], [1783, "            adapter = getAdapterInformation(out, valueTypeName, methodInfo.pairedMethod.getAnnotations());"], [1787, "    public static AdapterInformation getAdapterInformation(boolean out, String valueTypeName, Annotation ... annotations) {"], [1788, "        AdapterInformation adapterInfo = null;"], [1791, "            Adapter adapter = a instanceof Adapter ? (Adapter)a : a.annotationType().getAnnotation(Adapter.class);"], [1792, "            if (adapter != null) {"], [1793, "                adapterInfo = new AdapterInformation();"], [1794, "                adapterInfo.name = adapter.value();"], [1795, "                adapterInfo.argc = adapter.argc();"], [1796, "                adapterInfo.cast = adapter.cast();"], [1797, "                if (a != adapter) {"], [1798, "                    try {"], [1799, "                        Class c = a.annotationType();"], [1800, "                        if (c.isAnnotationPresent(Const.class)) {"], [1801, "                            constant = true;"], [1802, "                        }"], [1803, "                        try {"], [1804, "                            String value = c.getDeclaredMethod(\"value\").invoke(a).toString();"], [1805, "                            if (value != null && value.length() > 0) {"], [1806, "                                valueTypeName = value;"], [1807, "                            }"], [1808, "                            // else use inferred type"], [1809, "                        } catch (NoSuchMethodException e) {"], [1810, "                            // this adapter does not support a template type"], [1811, "                            valueTypeName = null;"], [1812, "                        }"], [1813, "                    } catch (Exception ex) {"], [1814, "                        logger.log(Level.WARNING, \"Could not invoke the value() method on annotation \\\"\" + a + \"\\\".\", ex);"], [1815, "                    }"], [1816, "                    if (valueTypeName != null && valueTypeName.length() > 0) {"], [1817, "                        adapterInfo.name += \"< \" + valueTypeName + \" >\";"], [1818, "                    }"], [1819, "                }"], [1824, "        return out && constant ? null : adapterInfo;"], [1891, "    public static String getValueTypeName(String ... typeName) {"], [1892, "        String type = typeName[0];"], [1893, "        if (type.startsWith(\"const \")) {"], [1894, "            type = type.substring(6, type.length()-1);"], [1895, "        } else if (type.length() != 0) {"], [1896, "            type = type.substring(0, type.length()-1);"], [1897, "        }"], [1898, "        return type;"], [1946, "            } else if (a instanceof Adapter || a.annotationType().isAnnotationPresent(Adapter.class)) {"]], "deleted": [[129, "    private boolean mayThrowExceptions;"], [146, "        if (doClasses(true, classes)) {"], [149, "            doClasses(mayThrowExceptions, classes);"], [161, "    private boolean doClasses(boolean handleExceptions, Class<?> ... classes) {"], [216, "        out.println(\"#include <stddef.h>\");"], [217, "        out.println(\"#ifndef _WIN32\");"], [218, "        out.println(\"    #include <stdint.h>\");"], [219, "        out.println(\"#endif\");"], [220, "        out.println(\"#include <stdio.h>\");"], [221, "        out.println(\"#include <stdlib.h>\");"], [222, "        out.println(\"#include <string.h>\");"], [223, "        out.println(\"#include <exception>\");"], [224, "        out.println(\"#include <new>\");"], [225, "        out.println(\"#include <vector>\");"], [226, "        out.println();"], [227, "        out.println(\"#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))\");"], [228, "        out.println(\"#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))\");"], [229, "        out.println();"], [230, "        out.println(\"#if defined(_MSC_VER)\");"], [231, "        out.println(\"    #define JavaCPP_noinline __declspec(noinline)\");"], [232, "        out.println(\"#elif defined(__GNUC__)\");"], [233, "        out.println(\"    #define JavaCPP_noinline __attribute__((noinline))\");"], [234, "        out.println(\"#else\");"], [235, "        out.println(\"    #define JavaCPP_noinline\");"], [236, "        out.println(\"#endif\");"], [237, "        out.println();"], [331, "        out.println(\"template<class P, class T = P> class VectorAdapter {\");"], [332, "        out.println(\"public:\");"], [333, "        out.println(\"    VectorAdapter(const P* pointer, typename std::vector<T>::size_type size) : pointer((P*)pointer), size(size),\");"], [334, "        out.println(\"        vec2(pointer ? std::vector<T>((P*)pointer, (P*)pointer + size) : std::vector<T>()), vec(vec2) { }\");"], [335, "        out.println(\"    VectorAdapter(const std::vector<T>& vec) : pointer(0), size(0), vec((std::vector<T>&)vec) { }\");"], [336, "        out.println(\"    void assign(P* pointer, typename std::vector<T>::size_type size) {\");"], [337, "        out.println(\"        this->pointer = pointer;\");"], [338, "        out.println(\"        this->size = size;\");"], [339, "        out.println(\"        vec.assign(pointer, pointer + size);\");"], [340, "        out.println(\"    }\");"], [341, "        out.println(\"    static void deallocate(P* pointer) { delete[] pointer; }\");"], [342, "        out.println(\"    operator P*() {\");"], [343, "        out.println(\"        if (vec.size() > size) {\");"], [344, "        out.println(\"            pointer = new (std::nothrow) P[vec.size()];\");"], [345, "        out.println(\"        }\");"], [346, "        out.println(\"        if (pointer) {\");"], [347, "        out.println(\"            std::copy(vec.begin(), vec.end(), pointer);\");"], [348, "        out.println(\"        }\");"], [349, "        out.println(\"        size = vec.size();\");"], [350, "        out.println(\"        return pointer;\");"], [351, "        out.println(\"    }\");"], [352, "        out.println(\"    operator const P*()        { return &vec[0]; }\");"], [353, "        out.println(\"    operator std::vector<T>&() { return vec; }\");"], [354, "        out.println(\"    operator std::vector<T>*() { return pointer ? &vec : 0; }\");"], [355, "        out.println(\"    P* pointer;\");"], [356, "        out.println(\"    typename std::vector<T>::size_type size;\");"], [357, "        out.println(\"    std::vector<T> vec2;\");"], [358, "        out.println(\"    std::vector<T>& vec;\");"], [359, "        out.println(\"};\");"], [360, "        out.println();"], [549, "        if (!cls.isAnnotationPresent(Opaque.class) &&"], [550, "                !FunctionPointer.class.isAssignableFrom(cls)) {"], [671, "        Adapter prevAdapter = null;"], [672, "        int prevAdapterArgc = 0;"], [678, "                Adapter adapter = getParameterAdapter(false, methodInfo, j);"], [710, "                    if (adapter != null || prevAdapter != null) {"], [719, "                        if (adapter != null || prevAdapter != null) {"], [725, "                    if (adapter != null || prevAdapter != null) {"], [739, "                    if (adapter != null || prevAdapter != null) {"], [745, "                    if (adapter != null || prevAdapter != null) {"], [755, "                if (adapter != null) {"], [756, "                    adapterLine = \"    \" + adapter.value() + \" adapter\" + j + \"(\";"], [757, "                    prevAdapter = adapter;"], [758, "                    prevAdapterArgc = adapter.argc();"], [760, "                if (prevAdapter != null) {"], [766, "                    if (--prevAdapterArgc > 0) {"], [770, "                if (prevAdapter != null && prevAdapterArgc <= 0) {"], [772, "                    prevAdapter = null;"], [773, "                    prevAdapterArgc = 0;"], [799, "                Adapter adapter = getAdapter(false, methodInfo.annotations);"], [813, "                    String valueTypeName = getValueTypeName(typeName);"], [839, "                if (adapter != null) {"], [840, "                    returnVariable = adapter.value() + \" radapter(\";"], [963, "            Adapter adapter = getParameterAdapter(false, methodInfo, j);"], [970, "            } else if (adapter != null) {"], [971, "                cast = adapter.cast().trim();"], [976, "                j += adapter.argc() - 1;"], [1005, "        Adapter adapter = getAdapter(false, methodInfo.annotations);"], [1006, "        if (!methodInfo.returnType.isPrimitive() && adapter != null) {"], [1057, "                if (adapter != null) {"], [1059, "                    out.println(indent + \"jint rcapacity = (jint)radapter.size;\");"], [1060, "                    out.println(indent + \"jlong deallocator = ptr_to_jlong(&(\" +"], [1061, "                            adapter.value() + \"::deallocate));\");"], [1127, "            Adapter adapter = getParameterAdapter(true, methodInfo, j);"], [1128, "            if (adapter != null) {"], [1129, "                for (int k = 0; k < adapter.argc(); k++) {"], [1136, "                    out.println(indent + \"    args[2].j = ptr_to_jlong(&(\" + adapter.value() + \"::deallocate));\");"], [1202, "        Adapter returnAdapter = getAdapter(false, callbackAnnotations);"], [1229, "                    Adapter adapter = getAdapter(false, callbackParameterAnnotations[j]);"], [1230, "                    String[] typeName = adapter != null ? getCPPTypeName(callbackParameterTypes[j]) :"], [1231, "                            getCastedCPPTypeName(callbackParameterAnnotations[j], callbackParameterTypes[j]);"], [1234, "                    if (adapter != null) {"], [1235, "                        out.println(\"    \" + adapter.value() + \" adapter\" + j + \"(p\" + j + \");\");"], [1237, "                        out.println(\"    jlong deallocator\" + j + \" = ptr_to_jlong(&(\" + adapter.value() + \"::deallocate));\");"], [1253, "                        String valueTypeName = getValueTypeName(typeName);"], [1261, "                        } else if (adapter != null) {"], [1280, "                        adapter = getAdapter(true, callbackParameterAnnotations[j]);"], [1281, "                        if (adapter != null || passBy instanceof ByPtrPtr || passBy instanceof ByPtrRef) {"], [1309, "                                (adapter != null ? \"adapter\" : \"p\") + j + \");\");"], [1335, "                Adapter adapter = getAdapter(true, callbackParameterAnnotations[j]);"], [1337, "                if (adapter != null || passBy instanceof ByPtrPtr || passBy instanceof ByPtrRef) {"], [1340, "                    if (adapter != null) {"], [1346, "                        if (adapter != null) {"], [1350, "                    if (adapter != null) {"], [1370, "                if (returnAdapter != null) {"], [1376, "                    if (returnAdapter != null) {"], [1382, "//                if (returnAdapter != null) {"], [1387, "                if (returnAdapter != null) {"], [1405, "            } else if (returnAdapter != null) {"], [1406, "                out.println(\"    return \" + returnAdapter.value() + \"(\" + callbackReturnCast + \"rpointer, rsize);\");"], [1718, "    public static Adapter getParameterAdapter(boolean out, MethodInformation methodInfo, int j) {"], [1719, "        Adapter adapter = getAdapter(out, methodInfo.parameterAnnotations[j]);"], [1722, "            adapter = getAdapter(out, methodInfo.pairedMethod.getAnnotations());"], [1726, ""], [1727, "    public static Adapter getAdapter(boolean out, Annotation ... annotations) {"], [1728, "        Adapter adapter = null;"], [1731, "            if (a instanceof Adapter) {"], [1732, "                adapter = (Adapter)a;"], [1737, "        return out && constant ? null : adapter;"], [1804, "    public static String getValueTypeName(String[] typeName) {"], [1805, "        return typeName[0].length() == 0 ? \"\" : typeName[0].substring(0, typeName[0].length()-1);"], [1853, "            } else if (a instanceof Adapter) {"]]}, "num_lines_added": 221, "num_lines_removed": 128}