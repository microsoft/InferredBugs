{"hash": "ad0ae659b648dbeeb1d08f6df42fc449418a5144", "message": "* Synchronize memory allocation in `Pointer` when low on memory to avoid `OutOfMemoryError`", "file_num_lines": 438, "diff_parsed": {"added": [[33, "import java.util.concurrent.atomic.AtomicInteger;"], [296, "    static final AtomicInteger lowMemoryCount = new AtomicInteger(0);"], [297, ""], [475, "            boolean lowMemory = false;"], [476, "            try {"], [477, "                if (maxBytes > 0 && DeallocatorReference.totalBytes + r.bytes > maxBytes) {"], [478, "                    lowMemory = true;"], [479, "                    lowMemoryCount.incrementAndGet();"], [480, "                }"], [481, "                if (lowMemoryCount.get() > 0) {"], [482, "                    // synchronize allocation across threads when low on memory"], [483, "                    synchronized (lowMemoryCount) {"], [484, "                        int count = 0;"], [485, "                        while (count++ < maxRetries && DeallocatorReference.totalBytes + r.bytes > maxBytes) {"], [486, "                            // try to get some more memory back"], [487, "                            System.gc();"], [488, "                            Thread.sleep(100);"], [489, "                        }"], [490, "                        if (count >= maxRetries && DeallocatorReference.totalBytes + r.bytes > maxBytes) {"], [491, "                            deallocate();"], [492, "                            throw new OutOfMemoryError(\"Cannot allocate \" + DeallocatorReference.totalBytes"], [493, "                                                                          + \" + \" + r.bytes + \" bytes (> Pointer.maxBytes)\");"], [494, "                        }"], [495, "                    }"], [496, "                }"], [497, "            } catch (InterruptedException ex) {"], [498, "                // reset interrupt to be nice"], [499, "                Thread.currentThread().interrupt();"], [500, "            } finally {"], [501, "                if (lowMemory) {"], [502, "                    lowMemoryCount.decrementAndGet();"]], "deleted": [[472, "            int count = 0;"], [473, "            while (count++ < maxRetries && maxBytes > 0 && DeallocatorReference.totalBytes + r.bytes > maxBytes) {"], [474, "                try {"], [475, "                    // try to get some more memory back"], [476, "                    System.gc();"], [477, "                    Thread.sleep(100);"], [478, "                } catch (InterruptedException ex) {"], [479, "                    // reset interrupt to be nice"], [480, "                    Thread.currentThread().interrupt();"], [481, "                    break;"], [483, "            }"], [484, "            if (maxBytes > 0 && DeallocatorReference.totalBytes + r.bytes > maxBytes) {"], [485, "                deallocate();"], [486, "                throw new OutOfMemoryError(\"Cannot allocate \" + DeallocatorReference.totalBytes"], [487, "                                                              + \" + \" + r.bytes + \" bytes (> Pointer.maxBytes)\");"]]}, "num_lines_added": 31, "num_lines_removed": 15}