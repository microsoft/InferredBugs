{"hash": "0f4e6c97b76daa7c04d05ad4caf75f872bebe338", "message": "* Add `includePath`, `linkPath`, and `preloadPath` parameters to `BuildMojo` to let Maven users append paths to the properties easily\n * In consequence, remove too arbitrary \"local\" paths from the default platform properties", "file_num_lines": 125, "diff_parsed": {"added": [[56, "     * Add the path to the \"platform.includepath\" property."], [57, "     * @parameter property=\"includePath\""], [58, "     */"], [59, "    private String includePath = null;"], [60, ""], [61, "    /**"], [62, "     * Add the paths to the \"platform.includepath\" property."], [63, "     * @parameter property=\"includePaths\""], [64, "     */"], [65, "    private String[] includePaths = null;"], [66, ""], [67, "    /**"], [68, "     * Add the path to the \"platform.linkpath\" property."], [69, "     * @parameter property=\"linkPath\""], [70, "     */"], [71, "    private String linkPath = null;"], [72, ""], [73, "    /**"], [74, "     * Add the paths to the \"platform.linkpath\" property."], [75, "     * @parameter property=\"linkPaths\""], [76, "     */"], [77, "    private String[] linkPaths = null;"], [78, ""], [79, "    /**"], [80, "     * Add the path to the \"platform.preloadpath\" property."], [81, "     * @parameter property=\"preloadPath\""], [82, "     */"], [83, "    private String preloadPath = null;"], [84, ""], [85, "    /**"], [86, "     * Add the paths to the \"platform.preloadpath\" property."], [87, "     * @parameter property=\"preloadPaths\""], [88, "     */"], [89, "    private String[] preloadPaths = null;"], [90, ""], [91, "    /**"], [182, "    String[] merge(String[] ss, String s) {"], [183, "        if (ss != null && s != null) {"], [184, "            ss = Arrays.copyOf(ss, ss.length + 1);"], [185, "            ss[ss.length - 1] = s;"], [186, "        } else if (s != null) {"], [187, "            ss = new String[] { s };"], [188, "        }"], [189, "        return ss;"], [190, "    }"], [191, ""], [199, "                log.debug(\"includePath: \" + includePath);"], [200, "                log.debug(\"includePaths: \" + Arrays.deepToString(includePaths));"], [201, "                log.debug(\"linkPath: \" + linkPath);"], [202, "                log.debug(\"linkPaths: \" + Arrays.deepToString(linkPaths));"], [203, "                log.debug(\"preloadPath: \" + preloadPath);"], [204, "                log.debug(\"preloadPaths: \" + Arrays.deepToString(preloadPaths));"], [226, "            classPaths = merge(classPaths, classPath);"], [227, "            classOrPackageNames = merge(classOrPackageNames, classOrPackageName);"], [249, "            Properties properties = builder.properties;"], [250, "            String separator = properties.getProperty(\"platform.path.separator\");"], [251, "            for (String s : merge(includePaths, includePath)) {"], [252, "                String v = properties.getProperty(\"platform.includepath\", \"\");"], [253, "                properties.setProperty(\"platform.includepath\","], [254, "                        v.length() == 0 || v.endsWith(separator) ? v + s : v + separator + s);"], [255, "            }"], [256, "            for (String s : merge(linkPaths, linkPath)) {"], [257, "                String v = properties.getProperty(\"platform.linkpath\", \"\");"], [258, "                properties.setProperty(\"platform.linkpath\","], [259, "                        v.length() == 0 || v.endsWith(separator) ? v + s : v + separator + s);"], [260, "            }"], [261, "            for (String s : merge(preloadPaths, preloadPath)) {"], [262, "                String v = properties.getProperty(\"platform.preloadpath\", \"\");"], [263, "                properties.setProperty(\"platform.preloadpath\","], [264, "                        v.length() == 0 || v.endsWith(separator) ? v + s : v + separator + s);"], [265, "            }"], [266, "            project.getProperties().putAll(properties);"]], "deleted": [[174, "            if (classPaths != null && classPath != null) {"], [175, "                classPaths = Arrays.copyOf(classPaths, classPaths.length + 1);"], [176, "                classPaths[classPaths.length - 1] = classPath;"], [177, "            } else if (classPath != null) {"], [178, "                classPaths = new String[] { classPath };"], [179, "            }"], [180, ""], [181, "            if (classOrPackageNames != null && classOrPackageName != null) {"], [182, "                classOrPackageNames = Arrays.copyOf(classOrPackageNames, classOrPackageNames.length + 1);"], [183, "                classOrPackageNames[classOrPackageNames.length - 1] = classOrPackageName;"], [184, "            } else if (classOrPackageName != null) {"], [185, "                classOrPackageNames = new String[] { classOrPackageName };"], [186, "            }"], [208, "            project.getProperties().putAll(builder.properties);"]]}, "num_lines_added": 72, "num_lines_removed": 14}