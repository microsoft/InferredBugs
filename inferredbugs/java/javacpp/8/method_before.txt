    @Override public void execute() throws MojoExecutionException {
        final Log log = getLog();
        try {
            log.info("Executing JavaCPP Builder");
            if (log.isDebugEnabled()) {
                log.debug("classPath: " + classPath);
                log.debug("classPaths: " + Arrays.deepToString(classPaths));
                log.debug("outputDirectory: " + outputDirectory);
                log.debug("outputName: " + outputName);
                log.debug("compile: " + compile);
                log.debug("header: " + header);
                log.debug("copyLibs: " + copyLibs);
                log.debug("jarPrefix: " + jarPrefix);
                log.debug("properties: " + properties);
                log.debug("propertyFile: " + propertyFile);
                log.debug("propertyKeysAndValues: " + propertyKeysAndValues);
                log.debug("classOrPackageName: " + classOrPackageName);
                log.debug("classOrPackageNames: " + Arrays.deepToString(classOrPackageNames));
                log.debug("environmentVariables: " + environmentVariables);
                log.debug("compilerOptions: " + Arrays.deepToString(compilerOptions));
                log.debug("skip: " + skip);
            }

            if (skip) {
                log.info("Skipped execution of JavaCPP Builder");
                return;
            }

            if (classPaths != null && classPath != null) {
                classPaths = Arrays.copyOf(classPaths, classPaths.length + 1);
                classPaths[classPaths.length - 1] = classPath;
            } else if (classPath != null) {
                classPaths = new String[] { classPath };
            }

            if (classOrPackageNames != null && classOrPackageName != null) {
                classOrPackageNames = Arrays.copyOf(classOrPackageNames, classOrPackageNames.length + 1);
                classOrPackageNames[classOrPackageNames.length - 1] = classOrPackageName;
            } else if (classOrPackageName != null) {
                classOrPackageNames = new String[] { classOrPackageName };
            }

            Logger logger = new Logger() {
                @Override public void debug(CharSequence cs) { log.debug(cs); }
                @Override public void info (CharSequence cs) { log.info(cs);  }
                @Override public void warn (CharSequence cs) { log.warn(cs);  }
                @Override public void error(CharSequence cs) { log.error(cs); }
            };
            Builder builder = new Builder(logger)
                    .classPaths(classPaths)
                    .outputDirectory(outputDirectory)
                    .outputName(outputName)
                    .compile(compile)
                    .header(header)
                    .copyLibs(copyLibs)
                    .jarPrefix(jarPrefix)
                    .properties(properties)
                    .propertyFile(propertyFile)
                    .properties(propertyKeysAndValues)
                    .classesOrPackages(classOrPackageNames)
                    .environmentVariables(environmentVariables)
                    .compilerOptions(compilerOptions);
            project.getProperties().putAll(builder.properties);
            File[] outputFiles = builder.build();
            log.info("Successfully executed JavaCPP Builder");
            if (log.isDebugEnabled()) {
                log.debug("outputFiles: " + Arrays.deepToString(outputFiles));
            }
        } catch (Exception e) {
            log.error("Failed to execute JavaCPP Builder: " + e.getMessage());
            throw new MojoExecutionException("Failed to execute JavaCPP Builder", e);
        }
    }