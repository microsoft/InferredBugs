{"hash": "630823d135f6705cbee059c091361539d314dc3b", "message": "* Included often used directories such as `/usr/local/include/` and `/usr/local/lib/` to `compiler.includepath` and `compiler.linkpath` default properties\n * New `@Properties(inherit={Class})` value lets users specify properties in common on a similarly annotated shared config class of sorts", "file_num_lines": 494, "diff_parsed": {"added": [[190, "            Class[] classes = classProperties.inherit();"], [191, "            if (classes != null) {"], [192, "                for (Class c2 : classes) {"], [193, "                    appendProperties(properties, c2);"], [194, "                }"], [195, "            }"], [197, "            if (platforms == null) {"], [198, "                return cls;"], [199, "            }"], [456, "        String pathSeparator = p.getProperty(\"path.separator\");"], [457, "        String platformRoot  = p.getProperty(\"platform.root\");"], [458, "        if (platformRoot != null && !platformRoot.endsWith(File.separator)) {"], [459, "            platformRoot += File.separator;"], [460, "        }"], [462, "        appendProperty(p, \"loader.preloadpath\", pathSeparator, p.getProperty(\"compiler.linkpath\"));"], [463, "        appendProperty(p, \"loader.preload\",     pathSeparator, p.getProperty(\"compiler.link\"));"], [475, "        String preloadPath = p.getProperty(\"loader.preloadpath\");"], [476, "        String preload     = p.getProperty(\"loader.preload\");"], [477, "        String[] preloadPaths = preloadPath == null ? null : preloadPath.split(pathSeparator);"], [478, "        String[] preloads     = preload     == null ? null : preload    .split(pathSeparator);"], [480, "        for (int i = 0; preloadPaths != null && platformRoot != null && i < preloadPaths.length; i++) {"], [481, "            if (!new File(preloadPaths[i]).isAbsolute()) {"], [482, "                preloadPaths[i] = platformRoot + preloadPaths[i];"], [484, "        }"], [485, "        for (int i = 0; preloads != null && i < preloads.length; i++) {"], [486, "            try {"], [487, "                loadLibrary(cls, preloadPaths, preloads[i]);"], [488, "            } catch (UnsatisfiedLinkError e) {"], [489, "                preloadError = e;"]], "deleted": [[242, "        appendProperty(properties, \"loader.preloadpath\",        s, linkpath);"], [244, "        appendProperty(properties, \"loader.preload\",            s, link);"], [461, "        String pathSeparator = p.getProperty(\"path.separator\");"], [462, "        String platformRoot  = p.getProperty(\"platform.root\");"], [463, "        if (platformRoot != null && !platformRoot.endsWith(File.separator)) {"], [464, "            platformRoot += File.separator;"], [465, "        }"], [466, "        String preloadPath      = p.getProperty(\"loader.preloadpath\");"], [467, "        String preloadLibraries = p.getProperty(\"loader.preload\");"], [469, "        if (preloadLibraries != null) {"], [470, "            String[] preloadPaths = preloadPath == null ? null : preloadPath.split(pathSeparator);"], [471, "            if (preloadPaths != null && platformRoot != null) {"], [472, "                for (int i = 0; i < preloadPaths.length; i++) {"], [473, "                    if (!new File(preloadPaths[i]).isAbsolute()) {"], [474, "                        preloadPaths[i] = platformRoot + preloadPaths[i];"], [475, "                    }"], [476, "                }"], [478, "            String[] libnames = preloadLibraries.split(pathSeparator);"], [479, "            for (int i = 0; i < libnames.length; i++) {"], [480, "                try {"], [481, "                    loadLibrary(cls, preloadPaths, libnames[i]);"], [482, "                } catch (UnsatisfiedLinkError e) {"], [483, "                    preloadError = e;"], [484, "                }"]]}, "num_lines_added": 29, "num_lines_removed": 24}