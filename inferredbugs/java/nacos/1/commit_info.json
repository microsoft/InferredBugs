{"hash": "dc7a4eaa8582cec7aa41139f8fbbba54161bcdbb", "message": "Polish alibaba/nacos#102", "file_num_lines": 19, "diff_parsed": {"added": [[18, "import org.apache.commons.io.IOUtils;"], [38, "            IOUtils.copy(gis, out);"]], "deleted": [[18, "import org.apache.commons.lang3.StringUtils;"], [21, "import java.util.ArrayList;"], [22, "import java.util.List;"], [32, "    static public String toString(InputStream input, String encoding) throws IOException {"], [33, "        return (null == encoding) ? toString(new InputStreamReader(input, \"UTF-8\"))"], [34, "                : toString(new InputStreamReader(input, encoding));"], [35, "    }"], [36, ""], [37, "    static public String toString(Reader reader) throws IOException {"], [38, "        CharArrayWriter sw = new CharArrayWriter();"], [39, "        copy(reader, sw);"], [40, "        return sw.toString();"], [41, "    }"], [42, ""], [43, ""], [44, "    static public long copy(Reader input, Writer output) throws IOException {"], [45, "        char[] buffer = new char[1 << 12];"], [46, "        long count = 0;"], [47, "        for (int n = 0; (n = input.read(buffer)) >= 0; ) {"], [48, "            output.write(buffer, 0, n);"], [49, "            count += n;"], [50, "        }"], [51, "        return count;"], [52, "    }"], [53, ""], [54, "    static public long copy(InputStream input, OutputStream output) throws IOException {"], [55, "        byte[] buffer = new byte[1024];"], [56, "        int bytesRead;"], [57, "        int totalBytes = 0;"], [58, "        while ((bytesRead = input.read(buffer)) != -1) {"], [59, "            output.write(buffer, 0, bytesRead);"], [60, ""], [61, "            totalBytes += bytesRead;"], [62, "        }"], [63, ""], [64, "        return totalBytes;"], [65, "    }"], [66, ""], [67, "    static public List<String> readLines(Reader input) throws IOException {"], [68, "        BufferedReader reader = toBufferedReader(input);"], [69, "        List<String> list = new ArrayList<String>();"], [70, "        String line = null;"], [71, "        for (; ; ) {"], [72, "            line = reader.readLine();"], [73, "            if (null != line) {"], [74, "                if (StringUtils.isNotEmpty(line)) {"], [75, "                    list.add(line.trim());"], [76, "                }"], [77, "            } else {"], [78, "                break;"], [79, "            }"], [80, "        }"], [81, "        return list;"], [82, "    }"], [83, ""], [84, "    static private BufferedReader toBufferedReader(Reader reader) {"], [85, "        return reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader("], [86, "                reader);"], [87, "    }"], [88, ""], [89, ""], [90, "    public static boolean delete(File fileOrDir) throws IOException {"], [91, "        if (fileOrDir == null) {"], [92, "            return false;"], [93, "        }"], [94, ""], [95, "        if (fileOrDir.isDirectory()) {"], [96, "            cleanDirectory(fileOrDir);"], [97, "        }"], [98, ""], [99, "        return fileOrDir.delete();"], [100, "    }"], [101, ""], [102, "    public static void cleanDirectory(File directory) throws IOException {"], [103, "        if (!directory.exists()) {"], [104, "            String message = directory + \" does not exist\";"], [105, "            throw new IllegalArgumentException(message);"], [106, "        }"], [107, ""], [108, "        if (!directory.isDirectory()) {"], [109, "            String message = directory + \" is not a directory\";"], [110, "            throw new IllegalArgumentException(message);"], [111, "        }"], [112, ""], [113, "        File[] files = directory.listFiles();"], [114, "        if (files == null) {"], [115, "            throw new IOException(\"Failed to list contents of \" + directory);"], [116, "        }"], [117, ""], [118, "        IOException exception = null;"], [119, "        for (File file : files) {"], [120, "            try {"], [121, "                delete(file);"], [122, "            } catch (IOException ioe) {"], [123, "                exception = ioe;"], [124, "            }"], [125, "        }"], [126, ""], [127, "        if (null != exception) {"], [128, "            throw exception;"], [129, "        }"], [130, "    }"], [131, ""], [132, "    public static void writeStringToFile(File file, String data, String encoding)"], [133, "            throws IOException {"], [134, "        OutputStream os = null;"], [135, "        try {"], [136, "            os = new FileOutputStream(file);"], [137, "            os.write(data.getBytes(encoding));"], [138, "            os.flush();"], [139, "        } finally {"], [140, "            if (null != os) {"], [141, "                os.close();"], [142, "            }"], [143, "        }"], [144, "    }"], [145, ""], [154, ""], [155, "            IoUtils.copy(gis, out);"]]}, "num_lines_added": 2, "num_lines_removed": 119}