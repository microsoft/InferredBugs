{"hash": "3250533516cb064c703ee3020ef4e30374daa9ce", "message": "#526 Make more effort", "file_num_lines": 1938, "diff_parsed": {"added": [[37, "import com.alibaba.nacos.naming.raft.Datum;"], [38, "import com.alibaba.nacos.naming.raft.RaftCore;"], [39, "import com.alibaba.nacos.naming.raft.RaftPeer;"], [40, "import com.alibaba.nacos.naming.raft.RaftProxy;"], [327, "        JSONObject result = new JSONObject();"], [328, ""], [329, "        result.put(\"clientBeatInterval\", Switch.getClientBeatInterval());"], [330, ""], [332, ""], [333, "            if (!virtualClusterDomain.getEnableClientBeat()) {"], [334, "                return result;"], [335, "            }"], [874, "        domainsManager.easyAddIP4Dom(dom, newIPs, term);"], [891, "        if (Loggers.DEBUG_LOG.isDebugEnabled()) {"], [892, "            Loggers.DEBUG_LOG.debug(\"[ADD-IP] full arguments:\" + proxyParams + \", client:\" + request.getRemoteAddr());"], [893, "        }"], [963, ""], [978, "        long timestamp = RaftCore.getDatum(key).timestamp.get();"], [982, ""], [983, "                RaftCore.OPERATE_LOCK.lock();"], [984, ""], [985, "                proxyParams.put(\"clientIP\", NetUtils.localServer());"], [986, "                proxyParams.put(\"notify\", \"true\");"], [987, "                proxyParams.put(\"term\", String.valueOf(RaftCore.getPeerSet().local().term));"], [988, "                proxyParams.put(\"timestamp\", String.valueOf(timestamp));"], [998, "                RaftCore.OPERATE_LOCK.unlock();"], [1006, "    private void syncOnUpdateIP4Dom(String dom, List<String> ipList, Map<String, String> proxyParams, String clientIP, String action) throws InterruptedException {"], [1011, "        updateIpPublish(dom, ipList, proxyParams, clientIP, countDownLatch, action);"], [1018, "    private void syncOnAddIP4Dom(String dom, List<String> ipList, Map<String, String> proxyParams, String clientIP) throws InterruptedException {"], [1019, "        syncOnUpdateIP4Dom(dom, ipList, proxyParams, clientIP, UtilsAndCommons.UPDATE_INSTANCE_ACTION_ADD);"], [1020, "    }"], [1021, ""], [1023, "        updateIpPublish(dom, ipList, proxyParams, clientIP, null, UtilsAndCommons.UPDATE_INSTANCE_ACTION_ADD);"], [1026, "    private void syncOnRemvIP4Dom(String dom, List<String> ipList, Map<String, String> proxyParams, String clientIP) throws InterruptedException {"], [1027, "        syncOnUpdateIP4Dom(dom, ipList, proxyParams, clientIP, UtilsAndCommons.UPDATE_INSTANCE_ACTION_REMOVE);"], [1028, "    }"], [1029, ""], [1030, "    private void asyncOnRemvIP4Dom(String dom, List<String> ipList, Map<String, String> proxyParams, String clientIP) {"], [1031, "        updateIpPublish(dom, ipList, proxyParams, clientIP, null, UtilsAndCommons.UPDATE_INSTANCE_ACTION_REMOVE);"], [1032, "    }"], [1034, "    private void updateIpPublish(String dom, List<String> ipList, Map<String, String> proxyParams, String clientIP, CountDownLatch countDownLatch, String action) {"], [1048, "                    String api = action.equals(\"remove\") ? \"onRemvIP4Dom\" : \"onAddIP4Dom\";"], [1049, ""], [1051, "                        + RunningConfig.getContextPath() + UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/api/\" + api;"], [1070, "                        Loggers.SRV_LOG.error(action + \"-IP\", \"failed when publish to peer.\" + url, e);"], [1283, "    @RequestMapping(\"/onRemvIP4Dom\")"], [1284, "    public void onRemvIP4Dom(HttpServletRequest request) throws Exception {"], [1285, "        if (Switch.getDisableAddIP()) {"], [1286, "            throw new AccessControlException(\"Deleting IP for dom is forbidden now.\");"], [1287, "        }"], [1288, ""], [1289, "        String clientIP = WebUtils.required(request, \"clientIP\");"], [1290, "        long term = Long.parseLong(WebUtils.required(request, \"term\"));"], [1291, ""], [1292, "        if (!RaftCore.isLeader(clientIP)) {"], [1293, "            Loggers.RAFT.warn(\"peer(\" + JSON.toJSONString(clientIP) + \") tried to publish \" +"], [1294, "                \"data but wasn't leader, leader: \" + JSON.toJSONString(RaftCore.getLeader()));"], [1295, "            throw new IllegalStateException(\"peer(\" + clientIP + \") tried to publish \" +"], [1296, "                \"data but wasn't leader\");"], [1297, "        }"], [1298, ""], [1299, "        if (term < RaftCore.getPeerSet().local().term.get()) {"], [1300, "            Loggers.RAFT.warn(\"out of date publish, pub-term: \""], [1301, "                + JSON.toJSONString(clientIP) + \", cur-term: \" + JSON.toJSONString(RaftCore.getPeerSet().local()));"], [1302, "            throw new IllegalStateException(\"out of date publish, pub-term:\""], [1303, "                + term + \", cur-term: \" + RaftCore.getPeerSet().local().term);"], [1304, "        }"], [1305, ""], [1306, "        RaftCore.getPeerSet().local().resetLeaderDue();"], [1307, ""], [1308, "        final String dom = WebUtils.required(request, \"dom\");"], [1309, "        if (domainsManager.getDomain(dom) == null) {"], [1310, "            throw new IllegalStateException(\"dom doesn't exist: \" + dom);"], [1311, "        }"], [1312, ""], [1313, "        List<IpAddress> removedIPs = getIpAddresses(request);"], [1314, ""], [1315, "        if (CollectionUtils.isEmpty(removedIPs)) {"], [1316, "            throw new IllegalArgumentException(\"Empty ip list\");"], [1317, "        }"], [1318, ""], [1319, "        domainsManager.easyRemvIP4Dom(dom, removedIPs, term);"], [1320, "    }"], [1321, ""], [1328, "        Map<String, String> proxyParams = new HashMap<>(16);"], [1329, "        for (Map.Entry<String, String[]> entry : request.getParameterMap().entrySet()) {"], [1330, "            proxyParams.put(entry.getKey(), entry.getValue()[0]);"], [1331, "        }"], [1333, "        if (Loggers.DEBUG_LOG.isDebugEnabled()) {"], [1334, "            Loggers.DEBUG_LOG.debug(\"[REMOVE-IP] full arguments: params:\" + proxyParams);"], [1337, "        List<String> ipList = new ArrayList<>();"], [1338, ""], [1341, "            ipList = Arrays.asList(ipListString);"], [1342, "            ipObjList = JSON.parseObject(ipListString, new TypeReference<List<IpAddress>>() {"], [1343, "            });"], [1345, "            ipList = Arrays.asList(ipListString.split(\",\"));"], [1351, "        if (!RaftCore.isLeader()) {"], [1352, "            Loggers.RAFT.info(\"I'm not leader, will proxy to leader.\");"], [1353, "            if (RaftCore.getLeader() == null) {"], [1354, "                throw new IllegalArgumentException(\"no leader now.\");"], [1355, "            }"], [1356, ""], [1357, "            RaftPeer leader = RaftCore.getLeader();"], [1358, ""], [1359, "            String server = leader.ip;"], [1360, "            if (!server.contains(UtilsAndCommons.CLUSTER_CONF_IP_SPLITER)) {"], [1361, "                server = server + UtilsAndCommons.CLUSTER_CONF_IP_SPLITER + RunningConfig.getServerPort();"], [1362, "            }"], [1363, ""], [1364, "            String url = \"http://\" + server"], [1365, "                + RunningConfig.getContextPath() + UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/api/remvIP4Dom\";"], [1366, "            HttpClient.HttpResult result1 = HttpClient.httpPost(url, null, proxyParams);"], [1367, ""], [1368, "            if (result1.code != HttpURLConnection.HTTP_OK) {"], [1369, "                Loggers.SRV_LOG.warn(\"failed to remove ip for dom, caused \" + result1.content);"], [1370, "                throw new IllegalArgumentException(\"failed to remove ip for dom, caused \" + result1.content);"], [1371, "            }"], [1372, ""], [1373, "            return \"ok\";"], [1374, "        }"], [1375, ""], [1376, "        VirtualClusterDomain domain = (VirtualClusterDomain) domainsManager.getDomain(dom);"], [1377, ""], [1378, "        if (domain == null) {"], [1379, "            throw new IllegalStateException(\"dom doesn't exist: \" + dom);"], [1380, "        }"], [1381, ""], [1382, "        if (CollectionUtils.isEmpty(ipObjList)) {"], [1383, "            throw new IllegalArgumentException(\"Empty ip list\");"], [1384, "        }"], [1386, "        String key = UtilsAndCommons.getIPListStoreKey(domainsManager.getDomain(dom));"], [1387, ""], [1388, "        long timestamp = 1;"], [1389, "        if (RaftCore.getDatum(key) != null) {"], [1390, "            timestamp = RaftCore.getDatum(key).timestamp.get();"], [1391, "        }"], [1392, ""], [1393, "        if (RaftCore.isLeader()) {"], [1394, ""], [1395, "            try {"], [1396, ""], [1397, "                RaftCore.OPERATE_LOCK.lock();"], [1398, ""], [1399, "                proxyParams.put(\"clientIP\", NetUtils.localServer());"], [1400, "                proxyParams.put(\"notify\", \"true\");"], [1401, "                proxyParams.put(\"term\", String.valueOf(RaftCore.getPeerSet().local().term));"], [1402, "                proxyParams.put(\"timestamp\", String.valueOf(timestamp));"], [1403, ""], [1404, "                onRemvIP4Dom(MockHttpRequest.buildRequest2(proxyParams));"], [1405, ""], [1406, "                if (domain.getEnableHealthCheck() && !domain.getEnableClientBeat()) {"], [1407, "                    syncOnRemvIP4Dom(dom, ipList, proxyParams, WebUtils.optional(request, \"clientIP\", \"unknown\"));"], [1408, "                } else {"], [1409, "                    asyncOnRemvIP4Dom(dom, ipList, proxyParams, WebUtils.optional(request, \"clientIP\", \"unknown\"));"], [1410, "                }"], [1411, "            } finally {"], [1412, "                RaftCore.OPERATE_LOCK.unlock();"], [1413, "            }"], [1414, ""], [1415, "            Loggers.EVT_LOG.info(\"{\" + dom + \"} {POS} {IP-REMV}\" + \" new: \""], [1416, "                + ipListString + \" operatorIP: \""], [1417, "                + WebUtils.optional(request, \"clientIP\", \"unknown\"));"], [1418, "        }"], [2172, "        result.put(\"notifyTask\", RaftCore.notifier.getTaskSize());"], [2519, "    private List<IpAddress> getIpAddresses(HttpServletRequest request) {"], [2520, "        String ipListString = WebUtils.required(request, \"ipList\");"], [2521, "        final List<String> ipList;"], [2522, "        List<IpAddress> newIPs = new ArrayList<>();"], [2523, ""], [2524, "        if (Boolean.parseBoolean(WebUtils.optional(request, SwitchEntry.PARAM_JSON, Boolean.FALSE.toString()))) {"], [2525, "            newIPs = JSON.parseObject(ipListString, new TypeReference<List<IpAddress>>() {"], [2526, "            });"], [2527, "        } else {"], [2528, "            ipList = Arrays.asList(ipListString.split(\",\"));"], [2529, "            for (String ip : ipList) {"], [2530, "                IpAddress ipAddr = IpAddress.fromJSON(ip);"], [2531, "                if (ipAddr == null) {"], [2532, "                    throw new IllegalArgumentException(\"malformed ip ->\" + ip);"], [2533, "                }"], [2534, ""], [2535, "                newIPs.add(ipAddr);"], [2536, "            }"], [2537, "        }"], [2538, ""], [2539, "        return newIPs;"], [2540, "    }"], [2541, ""]], "deleted": [[37, "import com.alibaba.nacos.naming.raft.*;"], [358, "        JSONObject result = new JSONObject();"], [359, ""], [360, "        result.put(\"clientBeatInterval\", Switch.getClientBeatInterval());"], [361, ""], [854, "        long timestamp = Long.parseLong(WebUtils.required(request, \"timestamp\"));"], [855, ""], [869, "        domainsManager.easyAddIP4Dom(dom, newIPs, timestamp, term);"], [886, "        Loggers.DEBUG_LOG.debug(\"[ADD-IP] full arguments:\" + proxyParams + \", client:\" + request.getRemoteAddr());"], [970, "        long timestamp = RaftCore.getDatum(key).timestamp.incrementAndGet();"], [973, "            proxyParams.put(\"clientIP\", NetUtils.localServer());"], [974, "            proxyParams.put(\"notify\", \"true\");"], [975, "            proxyParams.put(\"term\", String.valueOf(RaftCore.getPeerSet().local().term));"], [976, "            proxyParams.put(\"timestamp\", String.valueOf(timestamp));"], [977, ""], [979, "                domainsManager.getDom2LockMap().get(dom).lock();"], [989, "                domainsManager.getDom2LockMap().get(dom).unlock();"], [997, "    private void syncOnAddIP4Dom(String dom, List<String> ipList, Map<String, String> proxyParams, String clientIP) throws InterruptedException {"], [1002, "        addIpPublish(dom, ipList, proxyParams, clientIP, countDownLatch);"], [1010, "        addIpPublish(dom, ipList, proxyParams, clientIP, null);"], [1014, "    private void addIpPublish(String dom, List<String> ipList, Map<String, String> proxyParams, String clientIP, CountDownLatch countDownLatch) {"], [1029, "                        + RunningConfig.getContextPath() + UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/api/onAddIP4Dom\";"], [1048, "                        Loggers.SRV_LOG.error(\"ADD-IP\", \"failed when publish to peer.\" + url, e);"], [1053, ""], [1054, "        Loggers.EVT_LOG.info(\"{\" + dom + \"} {POS} {IP-ADD}\" + \" new: \""], [1055, "            + Arrays.toString(ipList.toArray()) + \" operatorIP: \""], [1056, "            + clientIP);"], [1271, "        Loggers.DEBUG_LOG.debug(\"[REMOVE-IP] full arguments: serviceName:\" + dom + \", iplist:\" + ipListString);"], [1273, "        List<IpAddress> newIPs = new ArrayList<>();"], [1274, "        List<String> ipList = new ArrayList<>();"], [1275, "        if (Boolean.parseBoolean(WebUtils.optional(request, SwitchEntry.PARAM_JSON, Boolean.FALSE.toString()))) {"], [1276, "            newIPs = JSON.parseObject(ipListString, new TypeReference<List<IpAddress>>() {"], [1277, "            });"], [1278, "        } else {"], [1279, "            ipList = Arrays.asList(ipListString.split(\",\"));"], [1284, "            ipObjList = newIPs;"], [1291, "        domainsManager.easyRemvIP4Dom(dom, ipObjList);"], [1293, "        Loggers.EVT_LOG.info(\"{\" + dom + \"} {POS} {IP-REMV}\" + \" dead: \""], [1294, "            + ipList + \" operator: \""], [1295, "            + WebUtils.optional(request, \"clientIP\", \"unknown\"));"]]}, "num_lines_added": 187, "num_lines_removed": 40}