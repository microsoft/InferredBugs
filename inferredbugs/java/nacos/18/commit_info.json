{"hash": "8c23f34806211442e804710db9b062ada3bc0ed3", "message": "#269 fix bug", "file_num_lines": 341, "diff_parsed": {"added": [[244, "        return getAllInstances(serviceName, Constants.DEFAULT_GROUP, clusters, subscribe);"], [245, "    }"], [246, ""], [247, "    @Override"], [248, "    public List<Instance> getAllInstances(String serviceName, String groupName, List<String> clusters, boolean subscribe) throws NacosException {"], [252, "            serviceInfo = hostReactor.getServiceInfo(groupName + Constants.SERVICE_INFO_SPLITER + serviceName, StringUtils.join(clusters, \",\"));"], [254, "            serviceInfo = hostReactor.getServiceInfoDirectlyFromServer(groupName + Constants.SERVICE_INFO_SPLITER + serviceName, StringUtils.join(clusters, \",\"));"], [270, "        return selectInstances(serviceName, groupName, healthy, true);"], [281, "        return selectInstances(serviceName, groupName, new ArrayList<String>(), healthy, subscribe);"], [292, "        return selectInstances(serviceName, groupName, clusters, healthy, true);"], [298, "        return selectInstances(serviceName, Constants.DEFAULT_GROUP, clusters, healthy, subscribe);"], [299, "    }"], [300, ""], [301, "    @Override"], [302, "    public List<Instance> selectInstances(String serviceName, String groupName, List<String> clusters, boolean healthy, boolean subscribe) throws NacosException {"], [303, ""], [306, "            serviceInfo = hostReactor.getServiceInfo(groupName + Constants.SERVICE_INFO_SPLITER + serviceName, StringUtils.join(clusters, \",\"));"], [308, "            serviceInfo = hostReactor.getServiceInfoDirectlyFromServer(groupName + Constants.SERVICE_INFO_SPLITER + serviceName, StringUtils.join(clusters, \",\"));"], [320, "        return selectOneHealthyInstance(serviceName, groupName, true);"], [330, "        return selectOneHealthyInstance(serviceName, groupName, new ArrayList<String>(), subscribe);"], [340, "        return selectOneHealthyInstance(serviceName, groupName, clusters, true);"], [346, "        return selectOneHealthyInstance(serviceName, Constants.DEFAULT_GROUP, clusters, subscribe);"], [347, "    }"], [348, ""], [349, "    @Override"], [350, "    public Instance selectOneHealthyInstance(String serviceName, String groupName, List<String> clusters, boolean subscribe) throws NacosException {"], [354, "                hostReactor.getServiceInfo(groupName + Constants.SERVICE_INFO_SPLITER + serviceName, StringUtils.join(clusters, \",\")));"], [357, "                hostReactor.getServiceInfoDirectlyFromServer(groupName + Constants.SERVICE_INFO_SPLITER + serviceName, StringUtils.join(clusters, \",\")));"], [362, "    public void subscribe(String serviceName, EventListener listener) throws NacosException {"], [363, "        subscribe(serviceName, new ArrayList<String>(), listener);"], [368, "        subscribe(serviceName, groupName, new ArrayList<String>(), listener);"], [372, "    public void subscribe(String serviceName, List<String> clusters, EventListener listener) throws NacosException {"], [373, "        subscribe(serviceName, Constants.DEFAULT_GROUP, clusters, listener);"], [378, "        eventDispatcher.addListener(hostReactor.getServiceInfo(groupName + Constants.SERVICE_INFO_SPLITER + serviceName,"], [379, "            StringUtils.join(clusters, \",\")), StringUtils.join(clusters, \",\"), listener);"], [383, "    public void unsubscribe(String serviceName, EventListener listener) throws NacosException {"], [384, "        unsubscribe(serviceName, new ArrayList<String>(), listener);"], [389, "        unsubscribe(serviceName, groupName, new ArrayList<String>(), listener);"], [393, "    public void unsubscribe(String serviceName, List<String> clusters, EventListener listener) throws NacosException {"], [394, "        unsubscribe(serviceName, Constants.DEFAULT_GROUP, clusters, listener);"], [399, "        eventDispatcher.removeListener(groupName + Constants.SERVICE_INFO_SPLITER + serviceName, StringUtils.join(clusters, \",\"), listener);"], [404, "        return serverProxy.getServiceList(pageNo, pageSize, Constants.DEFAULT_GROUP);"], [405, "    }"], [406, ""], [407, "    @Override"], [408, "    public ListView<String> getServicesOfServer(int pageNo, int pageSize, String groupName) throws NacosException {"], [409, "        return getServicesOfServer(pageNo, pageSize, groupName, null);"], [415, "        return getServicesOfServer(pageNo, pageSize, Constants.DEFAULT_GROUP, selector);"], [416, "    }"], [417, ""], [418, "    @Override"], [419, "    public ListView<String> getServicesOfServer(int pageNo, int pageSize, String groupName, AbstractSelector selector) throws NacosException {"], [420, "        return serverProxy.getServiceList(pageNo, pageSize, groupName, selector);"]], "deleted": [[247, "            serviceInfo = hostReactor.getServiceInfo(serviceName, StringUtils.join(clusters, \",\"));"], [249, "            serviceInfo = hostReactor.getServiceInfoDirectlyFromServer(serviceName, StringUtils.join(clusters, \",\"));"], [259, "    public List<Instance> getAllInstances(String serviceName, String groupName, List<String> clusters, boolean subscribe) throws NacosException {"], [260, "        return null;"], [261, "    }"], [262, ""], [263, "    @Override"], [270, "        return null;"], [281, "        return null;"], [292, "        return null;"], [300, "            serviceInfo = hostReactor.getServiceInfo(serviceName, StringUtils.join(clusters, \",\"));"], [302, "            serviceInfo = hostReactor.getServiceInfoDirectlyFromServer(serviceName, StringUtils.join(clusters, \",\"));"], [308, "    public List<Instance> selectInstances(String serviceName, String groupName, List<String> clusters, boolean healthy, boolean subscribe) throws NacosException {"], [309, "        return null;"], [310, "    }"], [311, ""], [312, "    @Override"], [319, "        return null;"], [329, "        return null;"], [339, "        return null;"], [348, "                hostReactor.getServiceInfo(serviceName, StringUtils.join(clusters, \",\")));"], [351, "                hostReactor.getServiceInfoDirectlyFromServer(serviceName, StringUtils.join(clusters, \",\")));"], [356, "    public Instance selectOneHealthyInstance(String serviceName, String groupName, List<String> clusters, boolean subscribe) throws NacosException {"], [357, "        return null;"], [358, "    }"], [359, ""], [360, "    @Override"], [361, "    public void subscribe(String service, EventListener listener) {"], [362, "        eventDispatcher.addListener(hostReactor.getServiceInfo(service, StringUtils.EMPTY), StringUtils.EMPTY,"], [363, "            listener);"], [368, ""], [372, "    public void subscribe(String service, List<String> clusters, EventListener listener) {"], [373, "        eventDispatcher.addListener(hostReactor.getServiceInfo(service, StringUtils.join(clusters, \",\")),"], [374, "            StringUtils.join(clusters, \",\"), listener);"], [379, ""], [383, "    public void unsubscribe(String service, EventListener listener) {"], [384, "        eventDispatcher.removeListener(service, StringUtils.EMPTY, listener);"], [389, ""], [393, "    public void unsubscribe(String service, List<String> clusters, EventListener listener) {"], [394, "        eventDispatcher.removeListener(service, StringUtils.join(clusters, \",\"), listener);"], [399, ""], [404, "        return serverProxy.getServiceList(pageNo, pageSize);"], [410, "        return serverProxy.getServiceList(pageNo, pageSize, selector);"]]}, "num_lines_added": 53, "num_lines_removed": 43}