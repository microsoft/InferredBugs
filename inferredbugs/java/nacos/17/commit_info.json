{"hash": "194387b583d12617e83994f7f92f4df68839b0f7", "message": "#745 Support multiple server modes", "file_num_lines": 523, "diff_parsed": {"added": [[39, "import java.util.concurrent.ConcurrentHashMap;"], [40, "import java.util.concurrent.LinkedBlockingDeque;"], [41, "import java.util.concurrent.TimeUnit;"], [46, " * Core manager storing all services in Nacos"], [47, " *"], [59, "    private LinkedBlockingDeque<ServiceKey> toBeUpdatedServicesQueue = new LinkedBlockingDeque<>(1024 * 1024);"], [85, "        UtilsAndCommons.DOMAIN_UPDATE_EXECUTOR.submit(new UpdatedServiceProcessor());"], [102, "            toBeUpdatedServicesQueue.offer(new ServiceKey(namespaceId, serviceName, serverIP, checksum), 5, TimeUnit.MILLISECONDS);"], [104, "            toBeUpdatedServicesQueue.poll();"], [105, "            toBeUpdatedServicesQueue.add(new ServiceKey(namespaceId, serviceName, serverIP, checksum));"], [164, "            Loggers.SRV_LOG.info(\"[DEAD-SERVICE] {}\", service.toJSON());"], [168, "    private class UpdatedServiceProcessor implements Runnable {"], [172, "            ServiceKey serviceKey = null;"], [177, "                        serviceKey = toBeUpdatedServicesQueue.take();"], [185, "                    GlobalExecutor.sumbitServiceUpdate(new ServiceUpdater(serviceKey));"], [188, "                Loggers.EVT_LOG.error(\"[UPDATE-DOMAIN] Exception while update service: {}\", serviceKey, e);"], [199, "        public ServiceUpdater(ServiceKey serviceKey) {"], [200, "            this.namespaceId = serviceKey.getNamespaceId();"], [201, "            this.serviceName = serviceKey.getServiceName();"], [202, "            this.serverIP = serviceKey.getServerIP();"], [325, "     * Register an instance to a service in AP mode."], [368, "        // only local memory is updated:"], [370, "            putService(service);"], [386, "        if (service == null) {"], [387, "            throw new NacosException(NacosException.INVALID_PARAM,"], [388, "                \"service not found, namespace: \" + namespaceId + \", service: \" + serviceName);"], [389, "        }"], [390, ""], [673, "        private String checksum;"], [697, ""], [698, "        @Override"], [699, "        public String toString() {"], [700, "            return JSON.toJSONString(this);"], [701, "        }"]], "deleted": [[24, "import com.alibaba.nacos.naming.cluster.transport.Serializer;"], [40, "import java.util.concurrent.*;"], [41, "import java.util.concurrent.locks.Condition;"], [57, "    private LinkedBlockingDeque<ServiceKey> toBeUpdatedDomsQueue = new LinkedBlockingDeque<>(1024 * 1024);"], [61, "    /**"], [62, "     * thread pool core size"], [63, "     */"], [64, "    private final static int DOMAIN_UPDATE_EXECUTOR_NUM = 2;"], [65, ""], [68, "    private Map<String, Condition> service2ConditionMap = new ConcurrentHashMap<>();"], [69, ""], [70, "    private Map<String, Lock> service2LockMap = new ConcurrentHashMap<>();"], [71, ""], [87, "    @Autowired"], [88, "    private Serializer serializer;"], [89, ""], [90, "    /**"], [91, "     * thread pool that processes getting service detail from other server asynchronously"], [92, "     */"], [93, "    private ExecutorService serviceUpdateExecutor"], [94, "        = Executors.newFixedThreadPool(DOMAIN_UPDATE_EXECUTOR_NUM, new ThreadFactory() {"], [95, "        @Override"], [96, "        public Thread newThread(Runnable r) {"], [97, "            Thread t = new Thread(r);"], [98, "            t.setName(\"com.alibaba.nacos.naming.service.update.http.handler\");"], [99, "            t.setDaemon(true);"], [100, "            return t;"], [101, "        }"], [102, "    });"], [103, ""], [109, "        UtilsAndCommons.DOMAIN_UPDATE_EXECUTOR.submit(new UpdatedDomainProcessor());"], [126, "            toBeUpdatedDomsQueue.offer(new ServiceKey(namespaceId, serviceName, serverIP, checksum), 5, TimeUnit.MILLISECONDS);"], [128, "            toBeUpdatedDomsQueue.poll();"], [129, "            toBeUpdatedDomsQueue.add(new ServiceKey(namespaceId, serviceName, serverIP, checksum));"], [165, ""], [166, "                addLockIfAbsent(UtilsAndCommons.assembleFullServiceName(service.getNamespaceId(), service.getName()));"], [173, "            wakeUp(UtilsAndCommons.assembleFullServiceName(service.getNamespaceId(), service.getName()));"], [174, ""], [192, "            Loggers.SRV_LOG.info(\"[DEAD-DOM] {}\", service.toJSON());"], [196, "    private class UpdatedDomainProcessor implements Runnable {"], [200, "            String serviceName = null;"], [201, "            String serverIP = null;"], [205, "                    ServiceKey serviceKey = null;"], [206, ""], [208, "                        serviceKey = toBeUpdatedDomsQueue.take();"], [216, ""], [217, "                    serviceName = serviceKey.getServiceName();"], [218, "                    serverIP = serviceKey.getServerIP();"], [219, ""], [220, "                    serviceUpdateExecutor.execute(new ServiceUpdater(serviceKey.getNamespaceId(), serviceName, serverIP));"], [223, "                Loggers.EVT_LOG.error(\"[UPDATE-DOMAIN] Exception while update service: {} from {}, error: {}\", serviceName, serverIP, e);"], [234, "        public ServiceUpdater(String namespaceId, String serviceName, String serverIP) {"], [235, "            this.namespaceId = namespaceId;"], [236, "            this.serviceName = serviceName;"], [237, "            this.serverIP = serverIP;"], [360, "     * Register an instance to a service."], [404, "            Lock lock = addLockIfAbsent(UtilsAndCommons.assembleFullServiceName(namespaceId, serviceName));"], [405, "            Condition condition = addCondtion(UtilsAndCommons.assembleFullServiceName(namespaceId, serviceName));"], [406, ""], [407, "            final Service finalService = service;"], [408, "            GlobalExecutor.submit(new Runnable() {"], [409, "                @Override"], [410, "                public void run() {"], [411, "                    try {"], [412, "                        addOrReplaceService(finalService);"], [413, "                    } catch (Exception e) {"], [414, "                        Loggers.SRV_LOG.error(\"register or update service failed, service: {}\", finalService, e);"], [415, "                    }"], [416, "                }"], [417, "            });"], [418, ""], [419, "            try {"], [420, "                lock.lock();"], [421, "                condition.await(5000, TimeUnit.MILLISECONDS);"], [422, "            } finally {"], [423, "                lock.unlock();"], [424, "            }"], [567, ""], [719, "    public void wakeUp(String key) {"], [720, ""], [721, "        Lock lock = service2LockMap.get(key);"], [722, "        Condition condition = service2ConditionMap.get(key);"], [723, ""], [724, "        try {"], [725, "            lock.lock();"], [726, "            condition.signalAll();"], [727, "        } catch (Exception ignore) {"], [728, "        } finally {"], [729, "            lock.unlock();"], [730, "        }"], [731, "    }"], [732, ""], [733, "    public Lock addLockIfAbsent(String key) {"], [734, ""], [735, "        if (service2LockMap.containsKey(key)) {"], [736, "            return service2LockMap.get(key);"], [737, "        }"], [738, "        Lock lock = new ReentrantLock();"], [739, "        service2LockMap.put(key, lock);"], [740, "        return lock;"], [741, "    }"], [742, ""], [743, "    public Condition addCondtion(String key) {"], [744, "        Condition condition = service2LockMap.get(key).newCondition();"], [745, "        service2ConditionMap.put(key, condition);"], [746, "        return condition;"], [747, "    }"], [748, ""], [770, "        private String checksum;"], [771, ""]]}, "num_lines_added": 34, "num_lines_removed": 110}