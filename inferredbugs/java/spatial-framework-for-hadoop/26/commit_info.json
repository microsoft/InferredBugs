{"hash": "b45bde9a384a2d27a539f486f6971df7fc7f2d0f", "message": "Tests of Unenclosed JSON: rename so MRv2 is more prominent, MRv1 as legacy\n(consistent with TestUnenclosedGeoJsonRecordReader which is MRv2)", "file_num_lines": 222, "diff_parsed": {"added": [[7, "import org.apache.hadoop.conf.Configuration;"], [11, "import org.apache.hadoop.mapreduce.TaskAttemptContext;"], [12, "import org.apache.hadoop.mapreduce.TaskAttemptID;"], [13, "import org.apache.hadoop.mapreduce.lib.input.FileSplit;"], [18, "public class TestUnenclosedJsonRecordReader {  // MRv2"], [19, ""], [20, "\tprivate TaskAttemptContext createTaskAttemptContext(Configuration conf, TaskAttemptID taid)"], [21, "\t\tthrows Exception  {       //shim"], [22, "\t\ttry {                     // Hadoop-1"], [23, "\t\t\treturn (TaskAttemptContext)TaskAttemptContext.class."], [24, "\t\t\t\tgetConstructor(Configuration.class, TaskAttemptID.class)."], [25, "\t\t\t\tnewInstance(conf, taid);"], [26, "\t\t} catch (Exception e) {   // Hadoop-2"], [27, "\t\t\tClass<?> clazz ="], [28, "\t\t\t\tClass.forName(\"org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\");"], [29, "\t\t\treturn (TaskAttemptContext)clazz.getConstructor(Configuration.class, TaskAttemptID.class)."], [30, "\t\t\t\tnewInstance(conf, taid);"], [31, "\t\t}"], [32, "\t}"], [33, ""], [34, "\tprivate UnenclosedJsonRecordReader getReaderFor(String resource, int start, int end) throws Exception {"], [36, ""], [38, ""], [39, "\t\tUnenclosedJsonRecordReader rr = new UnenclosedJsonRecordReader();"], [40, "        try {"], [41, "\t\t\tTaskAttemptContext tac ="], [42, "                createTaskAttemptContext(new Configuration(), new TaskAttemptID());"], [43, "\t\t\trr.initialize(split, tac);"], [44, "\t\t} catch (InterruptedException ie) {"], [45, "\t\t\tThread.currentThread().interrupt();"], [46, "\t\t}"], [47, ""], [48, "\t\treturn rr;"], [58, "\t\tLongWritable key = null;"], [59, "\t\tText value = null;"], [61, "\t\ttry {"], [62, "\t\t\twhile (reader.nextKeyValue()) {"], [63, "\t\t\t\tkey = reader.getCurrentKey();"], [64, "\t\t\t\tvalue = reader.getCurrentValue();"], [65, "\t\t\t\tint line = flag ? (int)(key.get()) : value.toString().charAt(23) - '0';"], [66, "\t\t\t\tlinesList.add(line);"], [67, "\t\t\t\t//System.out.println(key.get() + \" - \" + value.toString());"], [68, "\t\t\t}"], [69, "\t\t} catch (InterruptedException ie) {"], [70, "\t\t\tThread.currentThread().interrupt();"], [81, "\tpublic void TestArbitrarySplitLocations() throws Exception {"], [86, ""], [102, "\tpublic void TestEachOnce() throws Exception {"], [117, "\tpublic void TestWhitespace() throws Exception {"], [134, "\tpublic void TestComma() throws Exception {"], [151, "\tpublic void TestAttrNamedAttributes() throws Exception {"], [152, "\t\t//int [] recordBreaks = new int[] { 0, 57, 111, ,  };"], [153, "\t\tint[] rslt = getRecordIndexesInReader(getReaderFor(\"unenclosed-json-attrs.json\", 0, 225), true);"], [154, "\t\tAssert.assertEquals(5, rslt.length);"], [155, "\t\tint[] before = null, after = null;"], [156, "\t\tbefore = getRecordIndexesInReader(getReaderFor(\"unenclosed-json-attrs.json\", 0, 59), true);"], [157, "\t\tafter = getRecordIndexesInReader(getReaderFor(\"unenclosed-json-attrs.json\", 59, 225), true);"], [158, "\t\tAssert.assertEquals(5, before.length + after.length);"], [159, "\t\tbefore = getRecordIndexesInReader(getReaderFor(\"unenclosed-json-attrs.json\", 0, 88), true);"], [160, "\t\tafter = getRecordIndexesInReader(getReaderFor(\"unenclosed-json-attrs.json\", 88, 222), true);"], [161, "\t\tAssert.assertEquals(5, before.length + after.length);"], [162, "\t\tbefore = getRecordIndexesInReader(getReaderFor(\"unenclosed-json-attrs.json\", 0, 102), true);"], [163, "\t\tafter = getRecordIndexesInReader(getReaderFor(\"unenclosed-json-attrs.json\", 102, 222), true);"], [164, "\t\tAssert.assertEquals(5, before.length + after.length);"], [165, "\t}"], [166, ""], [167, "\t@Test"], [168, "\tpublic void TestEscape() throws Exception {  // Issue #68"], [189, "\tpublic void TestEscQuoteLast() throws Exception {"], [200, "\tpublic void TestEscAposLast() throws Exception {"], [211, "\tpublic void TestEscSlashLast() throws Exception {"], [222, "\tpublic void TestEscCloseLast() throws Exception {"], [233, "\tpublic void TestEscOpenLast() throws Exception {"], [245, "\tpublic void TestEscPoints() throws Exception {"], [255, "\t@Ignore"], [256, "\tpublic void TestCharacters() throws Exception {"], [267, "\tpublic void TestGeomFirst() throws Exception {"]], "deleted": [[10, "import org.apache.hadoop.mapred.FileSplit;"], [11, "import org.apache.hadoop.mapred.JobConf;"], [16, "public class TestUnenclosedJsonRecordReader {"], [17, "\tprivate UnenclosedJsonRecordReader getReaderFor(String resource, int start, int end) throws IOException {"], [19, ""], [20, "\t\tJobConf conf = new JobConf();"], [21, ""], [23, ""], [24, "\t\treturn new UnenclosedJsonRecordReader(split, conf);"], [34, "\t\tLongWritable key = reader.createKey();"], [35, "\t\tText value = reader.createValue();"], [37, "\t\twhile (reader.next(key, value)) {"], [38, "\t\t\tint line = flag ? (int)(key.get()) : value.toString().charAt(23) - '0';"], [39, "\t\t\tlinesList.add(line);"], [40, "\t\t\tSystem.out.println(key.get() + \" - \" + value.toString());"], [51, "\tpublic void TestArbitrarySplitLocations() throws IOException {"], [56, ""], [57, ""], [73, "\tpublic void TestEachOnce() throws IOException {"], [88, "\tpublic void TestWhitespace() throws IOException {"], [105, "\tpublic void TestComma() throws IOException {"], [122, "\tpublic void TestEscape() throws IOException {  // Issue #68"], [143, "\tpublic void TestEscQuoteLast() throws IOException {"], [154, "\tpublic void TestEscAposLast() throws IOException {"], [165, "\tpublic void TestEscSlashLast() throws IOException {"], [176, "\tpublic void TestEscCloseLast() throws IOException {"], [187, "\tpublic void TestEscOpenLast() throws IOException {"], [199, "\tpublic void TestEscPoints() throws IOException {"], [209, "\t@Test"], [210, "\tpublic void TestCharacters() throws IOException {"], [221, "\tpublic void TestGeomFirst() throws IOException {"]]}, "num_lines_added": 77, "num_lines_removed": 31}