{"hash": "4b7fc1635c1e23e6d7c8df9525437aacb08fde9a", "message": "#103: Added a simple line unit test.", "file_num_lines": 91, "diff_parsed": {"added": [[5, "import static org.junit.Assert.assertTrue;"], [13, "import com.esri.core.geometry.Geometry;"], [16, "import com.esri.core.geometry.Polyline;"], [17, "import com.esri.core.geometry.SpatialReference;"], [18, "import com.esri.core.geometry.ogc.OGCGeometry;"], [21, ""], [25, "\tpublic void testGeomFromPointShapeWithoutSpatialReference() throws UDFArgumentException {"], [26, "\t\tPoint point = createFirstLocation();"], [27, ""], [30, ""], [33, ""], [36, "\t\tassertNotNull(\"The geometry writable must not be null!\", geometryAsWritable);"], [37, ""], [38, "\t\tfinal int wkid = 0;"], [39, "\t\tvalidatePoint(point, wkid, geometryAsWritable);"], [40, "\t}"], [41, ""], [42, "\t@Test"], [43, "\tpublic void testGeomFromPointShape() throws UDFArgumentException {"], [44, "\t\tPoint point = createFirstLocation();"], [45, "\t\tbyte[] esriShape = GeometryEngine.geometryToEsriShape(point);"], [46, "\t\tassertNotNull(\"The point writable must not be null!\", esriShape);"], [47, ""], [48, "\t\tBytesWritable shapeAsWritable = new BytesWritable(esriShape);"], [49, "\t\tassertNotNull(\"The shape writable must not be null!\", shapeAsWritable);"], [50, ""], [51, "\t\tfinal int wkid = 4326;"], [52, "\t\tST_GeomFromShape fromShape = new ST_GeomFromShape();"], [53, "\t\tBytesWritable geometryAsWritable = fromShape.evaluate(shapeAsWritable, wkid);"], [54, "\t\tassertNotNull(\"The geometry writable must not be null!\", geometryAsWritable);"], [55, ""], [56, "\t\tvalidatePoint(point, wkid, geometryAsWritable);"], [57, "\t}"], [58, ""], [59, "\t@Test"], [60, "\tpublic void testGeomFromLineShape() throws UDFArgumentException {"], [61, "\t\tPolyline line = createFirstLine();"], [62, "\t\tbyte[] esriShape = GeometryEngine.geometryToEsriShape(line);"], [63, "\t\tassertNotNull(\"The line writable must not be null!\", esriShape);"], [64, ""], [65, "\t\tBytesWritable shapeAsWritable = new BytesWritable(esriShape);"], [66, "\t\tassertNotNull(\"The shape writable must not be null!\", shapeAsWritable);"], [67, ""], [68, "\t\tfinal int wkid = 4326;"], [69, "\t\tST_GeomFromShape fromShape = new ST_GeomFromShape();"], [70, "\t\tBytesWritable geometryAsWritable = fromShape.evaluate(shapeAsWritable, wkid);"], [71, "\t\tassertNotNull(\"The geometry writable must not be null!\", geometryAsWritable);"], [72, ""], [73, "\t\tOGCGeometry ogcGeometry = GeometryUtils.geometryFromEsriShape(geometryAsWritable);"], [74, "\t\tassertNotNull(\"The OGC geometry must not be null!\", ogcGeometry);"], [76, "\t\tGeometry ogcGeometryAsLine = ogcGeometry.getEsriGeometry();"], [77, "\t\tassertNotNull(\"The Esri geometry must not be null!\", ogcGeometryAsLine);"], [78, "\t\tassertTrue(\"The geometries are different!\", GeometryEngine.equals(line, ogcGeometryAsLine, SpatialReference.create(wkid)));"], [79, "\t}"], [80, ""], [81, "\tprivate static Point createFirstLocation() {"], [82, "\t\tfinal double longitude = 12.224;"], [83, "\t\tfinal double latitude = 51.829;"], [84, "\t\treturn new Point(longitude, latitude);"], [85, "\t}"], [86, ""], [87, "\tprivate static Point createSecondLocation() {"], [88, "\t\tfinal double longitude = 51.34933;"], [89, "\t\tfinal double latitude = 12.39807;"], [90, "\t\treturn new Point(longitude, latitude);"], [91, "\t}"], [92, ""], [93, "\tprivate static Polyline createFirstLine() {"], [94, "\t\tPolyline line = new Polyline();"], [95, "\t\tline.startPath(createFirstLocation());"], [96, "\t\tline.lineTo(createSecondLocation());"], [97, "\t\treturn line;"], [98, "\t}"], [99, ""], [100, "\t/**"], [101, "\t * Validates the geometry writable."], [102, "\t *"], [103, "\t * @param point"], [104, "\t *            the represented point location."], [105, "\t * @param wkid"], [106, "\t *            the represented spatial reference ID."], [107, "\t * @param geometryAsWritable"], [108, "\t *            the geometry represented as {@link BytesWritable}."], [109, "\t */"], [110, "\tprivate static void validatePoint(Point point, int wkid, BytesWritable geometryAsWritable) {"], [114, ""], [118, ""], [119, "\t\tassertEquals(\"Longitude is different!\", point.getX(), xAsWritable.get(), Epsilon);"], [120, "\t\tassertEquals(\"Latitude is different!\", point.getY(), yAsWritable.get(), Epsilon);"], [121, ""], [125, ""], [126, "\t\tassertEquals(\"The wkid is different!\", wkid, wkidAsWritable.get());"]], "deleted": [[16, ""], [20, "\tpublic void testGeomFromPointShape() throws UDFArgumentException {"], [21, "\t\tfinal double longitude = 12.224;"], [22, "\t\tfinal double latitude = 51.829;"], [23, "\t\tPoint point = new Point(longitude, latitude);"], [26, ""], [29, ""], [36, ""], [40, ""], [41, "\t\tassertEquals(\"Longitude is different!\", longitude, xAsWritable.get(), Epsilon);"], [42, "\t\tassertEquals(\"Latitude is different!\", latitude, yAsWritable.get(), Epsilon);"], [43, ""], [47, ""], [48, "\t\tassertEquals(\"The wkid is different!\", 0, wkidAsWritable.get());"]]}, "num_lines_added": 92, "num_lines_removed": 14}