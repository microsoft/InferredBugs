{"hash": "29a04835860d86f22dd60828dec1114ed5e5d9d6", "message": "GeoJSON SerDe serialize  (#80)", "file_num_lines": 219, "diff_parsed": {"added": [[6, "import java.util.ArrayList;"], [14, "import org.codehaus.jackson.JsonNode;"], [15, "import org.codehaus.jackson.map.ObjectMapper;"], [16, ""], [17, "import com.esri.core.geometry.Geometry;"], [18, "import com.esri.core.geometry.MapGeometry;"], [20, "import com.esri.core.geometry.SpatialReference;"], [21, "import com.esri.core.geometry.ogc.OGCGeometry;"], [34, "\tpublic void TestIntWrite() throws Exception {  // Is this valid for GeoJSON?"], [35, "        ArrayList<Object> stuff = new ArrayList<Object>();"], [36, "\t\tProperties proptab = new Properties();"], [37, "\t\tproptab.setProperty(HiveShims.serdeConstants.LIST_COLUMNS, \"num\");"], [38, "\t\tproptab.setProperty(HiveShims.serdeConstants.LIST_COLUMN_TYPES, \"int\");"], [39, "\t\tSerDe jserde = mkSerDe(proptab);"], [40, "        StructObjectInspector rowOI = (StructObjectInspector)jserde.getObjectInspector();"], [41, ""], [42, "        // {\"properties\":{\"num\":7}}"], [43, "        addWritable(stuff, 7);"], [44, "\t\tWritable jsw = jserde.serialize(stuff, rowOI);"], [45, "\t\tJsonNode jn = new ObjectMapper().readTree(((Text)jsw).toString());"], [46, "\t\tjn = jn.findValue(\"properties\");"], [47, "\t\tjn = jn.findValue(\"num\");"], [48, "\t\tAssert.assertEquals(7, jn.getIntValue());"], [49, "\t}"], [50, ""], [51, "\t@Test"], [52, "\tpublic void TestPointWrite() throws Exception {"], [53, "        ArrayList<Object> stuff = new ArrayList<Object>();"], [54, "\t\tProperties proptab = new Properties();"], [55, "\t\tproptab.setProperty(HiveShims.serdeConstants.LIST_COLUMNS, \"shape\");"], [56, "\t\tproptab.setProperty(HiveShims.serdeConstants.LIST_COLUMN_TYPES, \"binary\");"], [57, "\t\tSerDe jserde = mkSerDe(proptab);"], [58, "        StructObjectInspector rowOI = (StructObjectInspector)jserde.getObjectInspector();"], [59, ""], [60, "        // {\"properties\":{},\"geometry\":{\"type\":\"Point\",\"coordinates\":[15.0,5.0]}}"], [61, "        addWritable(stuff, new Point(15.0, 5.0));"], [62, "\t\tWritable jsw = jserde.serialize(stuff, rowOI);"], [63, "        String rslt = ((Text)jsw).toString();"], [64, "\t\tJsonNode jn = new ObjectMapper().readTree(rslt);"], [65, "\t\tjn = jn.findValue(\"geometry\");"], [66, "\t\tAssert.assertNotNull(jn.findValue(\"type\"));"], [67, "\t\tAssert.assertNotNull(jn.findValue(\"coordinates\"));"], [68, "\t}"], [69, ""], [70, "\t@Test"], [71, "\tpublic void TestIntParse() throws Exception {  // Is this valid for GeoJSON?"], [95, "\tpublic void TestPointParse() throws Exception {"], [120, "\tpublic void TestIntOnly() throws Exception {  // Is this valid for GeoJSON?"], [121, "        ArrayList<Object> stuff = new ArrayList<Object>();"], [122, "\t\tProperties proptab = new Properties();"], [123, "\t\tproptab.setProperty(HiveShims.serdeConstants.LIST_COLUMNS, \"num\");"], [124, "\t\tproptab.setProperty(HiveShims.serdeConstants.LIST_COLUMN_TYPES, \"int\");"], [125, "\t\tSerDe jserde = mkSerDe(proptab);"], [126, "        StructObjectInspector rowOI = (StructObjectInspector)jserde.getObjectInspector();"], [128, "        //value.set(\"{\\\"properties\\\":{\\\"num\\\":7}}\");"], [129, "        addWritable(stuff, 7);"], [130, "\t\tObject row = runSerDe(stuff, jserde, rowOI);"], [131, "\t\tObject fieldData = getField(\"num\", row, rowOI);"], [132, "\t\tAssert.assertEquals(7, ((IntWritable)fieldData).get());"], [133, "\t\tstuff.clear();"], [134, "\t\taddWritable(stuff, 9);"], [135, "\t\trow = runSerDe(stuff, jserde, rowOI);"], [136, "\t\tfieldData = getField(\"num\", row, rowOI);"], [137, "\t\tAssert.assertEquals(9, ((IntWritable)fieldData).get());"], [138, "\t}"], [139, ""], [140, "\t@Test"], [141, "\tpublic void TestPointOnly() throws Exception {"], [142, "        ArrayList<Object> stuff = new ArrayList<Object>();"], [143, "\t\tProperties proptab = new Properties();"], [144, "\t\tproptab.setProperty(HiveShims.serdeConstants.LIST_COLUMNS, \"shape\");"], [145, "\t\tproptab.setProperty(HiveShims.serdeConstants.LIST_COLUMN_TYPES, \"binary\");"], [146, "\t\tSerDe jserde = mkSerDe(proptab);"], [147, "        StructObjectInspector rowOI = (StructObjectInspector)jserde.getObjectInspector();"], [148, ""], [149, "        //value.set(\"{\\\"properties\\\":{},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[15.0,5.0]}}\");"], [150, "        addWritable(stuff, new Point(15.0, 5.0));"], [151, "\t\tObject row = runSerDe(stuff, jserde, rowOI);"], [152, "\t\tObject fieldData = getField(\"shape\", row, rowOI);"], [153, "\t\tckPoint(new Point(15.0, 5.0), (BytesWritable)fieldData);"], [154, ""], [155, "        //value.set(\"{\\\"properties\\\":{},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[7.0,4.0]}}\");"], [156, "\t\tstuff.clear();"], [157, "        addWritable(stuff, new Point(7.0, 4.0));"], [158, "\t\trow = runSerDe(stuff, jserde, rowOI);"], [159, "\t\tfieldData = getField(\"shape\", row, rowOI);"], [160, "\t\tckPoint(new Point(7.0, 4.0), (BytesWritable)fieldData);"], [161, "\t}"], [162, ""], [163, "\t@Test"], [164, "\tpublic void TestIntPoint() throws Exception {"], [165, "        ArrayList<Object> stuff = new ArrayList<Object>();"], [169, "\t\tSerDe jserde = mkSerDe(proptab);"], [172, "        // value.set(\"{\\\"properties\\\":{\\\"num\\\":7},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[15.0,5.0]}}\");"], [173, "        addWritable(stuff, 7L);"], [174, "        addWritable(stuff, new Point(15.0, 5.0));"], [175, "\t\tObject row = runSerDe(stuff, jserde, rowOI);"], [176, "\t\tObject fieldData = getField(\"num\", row, rowOI);"], [179, "        //value.set(\"{\\\"properties\\\":{\\\"num\\\":4},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[7.0,2.0]}}\");"], [180, "\t\tstuff.clear();"], [181, "        addWritable(stuff, 4L);"], [182, "        addWritable(stuff, new Point(7.0, 2.0));"], [183, "\t\trow = runSerDe(stuff, jserde, rowOI);"], [184, "\t\tfieldData = getField(\"num\", row, rowOI);"], [186, "\t\tfieldData = getField(\"shape\", row, rowOI);"], [192, "        ArrayList<Object> stuff = new ArrayList<Object>();"], [196, "\t\tSerDe jserde = mkSerDe(proptab);"], [199, "        //value.set(\"{\\\"properties\\\":{\\\"num\\\":7}}\");"], [200, "\t\taddWritable(stuff, 7);"], [201, "\t\tObject row = runSerDe(stuff, jserde, rowOI);"], [202, "\t\tObject fieldData = getField(\"num\", row, rowOI);"], [204, "        //value.set(\"{\\\"properties\\\":{}}\");"], [205, "\t\tstuff.set(0, null);"], [206, "\t\trow = runSerDe(stuff, jserde, rowOI);"], [207, "\t\tfieldData = getField(\"num\", row, rowOI);"], [208, "\t\tAssert.assertNull(fieldData);"], [213, "        ArrayList<Object> stuff = new ArrayList<Object>();"], [217, "\t\tSerDe jserde = mkSerDe(proptab);"], [220, "        //value.set(\"{\\\"properties\\\":{},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[15.0,5.0]}}\");"], [221, "        addWritable(stuff, new Point(15.0, 5.0));"], [222, "\t\tObject row = runSerDe(stuff, jserde, rowOI);"], [223, "\t\tObject fieldData = getField(\"shape\", row, rowOI);"], [226, "        //value.set(\"{\\\"properties\\\":{},\\\"coordinates\\\":null}\");"], [227, "\t\tstuff.set(0, null);"], [228, "\t\trow = runSerDe(stuff, jserde, rowOI);"], [229, "\t\tfieldData = getField(\"shape\", row, rowOI);"], [230, "\t\tAssert.assertNull(fieldData);"], [231, "\t}"], [232, ""], [233, ""], [234, "\tprivate void addWritable(ArrayList<Object> stuff, int item) {"], [235, "\t\tstuff.add(new IntWritable(item));"], [236, "\t}"], [237, ""], [238, "\tprivate void addWritable(ArrayList<Object> stuff, long item) {"], [239, "\t\tstuff.add(new LongWritable(item));"], [240, "\t}"], [241, ""], [242, "\tprivate void addWritable(ArrayList<Object> stuff, Geometry geom) {"], [243, "\t\t//stuff.add(GeometryUtils.geometryToEsriShapeBytesWritable(OGCGeometry.createFromEsriGeometry(geom, null)));"], [244, "\t\taddWritable(stuff, geom, null);"], [245, "\t}"], [246, ""], [247, "\tprivate void addWritable(ArrayList<Object> stuff, MapGeometry geom) {"], [248, "\t\t//stuff.add(GeometryUtils.geometryToEsriShapeBytesWritable("], [249, "        //          OGCGeometry.createFromEsriGeometry(geom.getGeometry(), geom.getSpatialReference())));"], [250, "\t\taddWritable(stuff, geom.getGeometry(), geom.getSpatialReference());"], [251, "\t}"], [252, ""], [253, "\tprivate void addWritable(ArrayList<Object> stuff, Geometry geom, SpatialReference sref) {"], [254, "\t\tstuff.add(GeometryUtils.geometryToEsriShapeBytesWritable(OGCGeometry.createFromEsriGeometry(geom, sref)));"], [261, ""], [262, "\tprivate Object getField(String col, Object row, StructObjectInspector rowOI) {"], [263, "\t\tStructField f0 = rowOI.getStructFieldRef(col);"], [264, "\t\treturn rowOI.getStructFieldData(row, f0);"], [265, "\t}"], [266, ""], [267, "\tprivate SerDe mkSerDe(Properties proptab) throws Exception {"], [268, "\t\tConfiguration config = new Configuration();"], [269, "\t\tSerDe jserde = new GeoJsonSerDe();"], [270, "\t\tjserde.initialize(config, proptab);"], [271, "\t\treturn jserde;"], [272, "\t}"], [273, ""], [274, "\tprivate Object runSerDe(Object stuff, SerDe jserde, StructObjectInspector rowOI) throws Exception {"], [275, "\t\tWritable jsw = jserde.serialize(stuff, rowOI);"], [276, "\t\t//System.err.println(jsw);"], [277, "\t\treturn jserde.deserialize(jsw);"], [278, "\t}"]], "deleted": [[26, "\tpublic void TestIntOnly() throws Exception {  // Is this valid for GeoJSON?"], [50, "\tpublic void TestPointOnly() throws Exception {"], [75, "\tpublic void TestIntPoint() throws Exception {"], [76, "\t\tConfiguration config = new Configuration();"], [77, "\t\tText value = new Text();"], [79, "\t\tSerDe jserde = new GeoJsonSerDe();"], [83, "\t\tjserde.initialize(config, proptab);"], [86, "        value.set(\"{\\\"properties\\\":{\\\"num\\\":7},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[15.0,5.0]}}\");"], [87, "\t\tObject row = jserde.deserialize(value);"], [88, "\t\tStructField fref = rowOI.getStructFieldRef(\"num\");"], [89, "\t\tObject fieldData = rowOI.getStructFieldData(row, fref);"], [92, "        value.set(\"{\\\"properties\\\":{\\\"num\\\":4},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[7.0,2.0]}}\");"], [93, "        row = jserde.deserialize(value);"], [94, "\t\tfref = rowOI.getStructFieldRef(\"num\");"], [95, "\t\tfieldData = rowOI.getStructFieldData(row, fref);"], [97, "\t\tfref = rowOI.getStructFieldRef(\"shape\");"], [98, "\t\tfieldData = rowOI.getStructFieldData(row, fref);"], [104, "\t\tConfiguration config = new Configuration();"], [105, "\t\tText value = new Text();"], [106, ""], [107, "\t\tSerDe jserde = new GeoJsonSerDe();"], [111, "\t\tjserde.initialize(config, proptab);"], [114, "        value.set(\"{\\\"properties\\\":{\\\"num\\\":7}}\");"], [115, "\t\tObject row = jserde.deserialize(value);"], [116, "\t\tStructField f0 = rowOI.getStructFieldRef(\"num\");"], [117, "\t\tObject fieldData = rowOI.getStructFieldData(row, f0);"], [119, "        value.set(\"{\\\"properties\\\":{}}\");"], [120, "        row = jserde.deserialize(value);"], [121, "\t\tf0 = rowOI.getStructFieldRef(\"num\");"], [122, "\t\tfieldData = rowOI.getStructFieldData(row, f0);"], [123, "\t\tAssert.assertEquals(null, fieldData);"], [128, "\t\tConfiguration config = new Configuration();"], [129, "\t\tText value = new Text();"], [130, ""], [131, "\t\tSerDe jserde = new GeoJsonSerDe();"], [135, "\t\tjserde.initialize(config, proptab);"], [138, "        value.set(\"{\\\"properties\\\":{},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[15.0,5.0]}}\");"], [139, "\t\tObject row = jserde.deserialize(value);"], [140, "\t\tStructField f0 = rowOI.getStructFieldRef(\"shape\");"], [141, "\t\tObject fieldData = rowOI.getStructFieldData(row, f0);"], [144, "        value.set(\"{\\\"properties\\\":{},\\\"coordinates\\\":null}\");"], [145, "        row = jserde.deserialize(value);"], [146, "\t\tf0 = rowOI.getStructFieldRef(\"shape\");"], [147, "\t\tfieldData = rowOI.getStructFieldData(row, f0);"], [148, "\t\tAssert.assertEquals(null, fieldData);"]]}, "num_lines_added": 169, "num_lines_removed": 45}