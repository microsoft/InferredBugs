{"hash": "5c5d5ff75efcb6300353ec95beb79e1edd47f030", "message": "Implement the async method in oauth2 creds and JWT creds.", "file_num_lines": 216, "diff_parsed": {"added": [[3, "import static org.junit.Assert.assertNotNull;"], [4, "import static org.junit.Assert.assertNull;"], [5, "import static org.junit.Assert.assertSame;"], [8, "import static org.junit.Assert.fail;"], [93, "  public void getRequestMetadata_blocking_cachesExpiringToken() throws IOException {"], [105, "    assertEquals(0, transport.buildRequestCount);"], [108, "    assertEquals(1, transport.buildRequestCount--);"], [113, "    // Make transport fail when used next time."], [114, "    IOException error = new IOException(\"error\");"], [115, "    transport.setError(error);"], [116, ""], [124, "    assertEquals(0, transport.buildRequestCount);"], [125, ""], [126, "    try {"], [127, "      credentials.getRequestMetadata(CALL_URI);"], [128, "      fail(\"Should throw\");"], [129, "    } catch (IOException e) {"], [130, "      assertSame(error, e);"], [131, "      assertEquals(1, transport.buildRequestCount--);"], [132, "    }"], [133, ""], [134, "    // Reset the error and try again"], [135, "    transport.setError(null);"], [138, "    assertEquals(1, transport.buildRequestCount--);"], [139, "  }"], [140, ""], [141, "  @Test"], [142, "  public void getRequestMetadata_async() throws IOException {"], [143, "    final String accessToken1 = \"1/MkSJoj1xsli0AccessToken_NKPY2\";"], [144, "    final String accessToken2 = \"2/MkSJoj1xsli0AccessToken_NKPY2\";"], [145, "    MockTokenServerTransport transport = new MockTokenServerTransport();"], [146, "    transport.addClient(CLIENT_ID, CLIENT_SECRET);"], [147, "    transport.addRefreshToken(REFRESH_TOKEN, accessToken1);"], [148, "    TestClock clock = new TestClock();"], [149, "    OAuth2Credentials credentials = new UserCredentials("], [150, "        CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN, null, transport, null);"], [151, "    credentials.clock = clock;"], [152, ""], [153, "    MockExecutor executor = new MockExecutor();"], [154, "    MockRequestMetadataCallback callback = new MockRequestMetadataCallback();"], [155, "    // Verify getting the first token, which uses the transport and calls the callback in the"], [156, "    // executor."], [157, "    credentials.getRequestMetadata(CALL_URI, executor, callback);"], [158, "    assertEquals(0, transport.buildRequestCount);"], [159, "    assertNull(callback.metadata);"], [160, ""], [161, "    assertEquals(1, executor.runTasksExhaustively());"], [162, "    assertNotNull(callback.metadata);"], [163, "    TestUtils.assertContainsBearerToken(callback.metadata, accessToken1);"], [164, "    assertEquals(1, transport.buildRequestCount--);"], [165, ""], [166, "    // Change server to a different token"], [167, "    transport.addRefreshToken(REFRESH_TOKEN, accessToken2);"], [168, ""], [169, "    // Make transport fail when used next time."], [170, "    IOException error = new IOException(\"error\");"], [171, "    transport.setError(error);"], [172, ""], [173, "    // Advance 5 minutes and verify original token. Callback is called inline."], [174, "    callback.reset();"], [175, "    clock.addToCurrentTime(5 * 60 * 1000);"], [176, "    assertNull(callback.metadata);"], [177, "    credentials.getRequestMetadata(CALL_URI, executor, callback);"], [178, "    assertNotNull(callback.metadata);"], [179, "    assertEquals(0, executor.numTasks());"], [180, "    TestUtils.assertContainsBearerToken(callback.metadata, accessToken1);"], [181, ""], [182, "    // Advance 60 minutes and verify revised token, which uses the executor."], [183, "    callback.reset();"], [184, "    clock.addToCurrentTime(60 * 60 * 1000);"], [185, "    credentials.getRequestMetadata(CALL_URI, executor, callback);"], [186, "    assertEquals(0, transport.buildRequestCount);"], [187, "    assertNull(callback.exception);"], [188, ""], [189, "    assertEquals(1, executor.runTasksExhaustively());"], [190, "    assertSame(error, callback.exception);"], [191, "    assertEquals(1, transport.buildRequestCount--);"], [192, ""], [193, "    // Reset the error and try again"], [194, "    transport.setError(null);"], [195, "    callback.reset();"], [196, "    credentials.getRequestMetadata(CALL_URI, executor, callback);"], [197, "    assertEquals(0, transport.buildRequestCount);"], [198, "    assertNull(callback.metadata);"], [199, ""], [200, "    assertEquals(1, executor.runTasksExhaustively());"], [201, "    assertNotNull(callback.metadata);"], [202, "    TestUtils.assertContainsBearerToken(callback.metadata, accessToken2);"], [203, "    assertEquals(1, transport.buildRequestCount--);"], [204, "  }"], [205, ""], [206, "  @Test"], [207, "  public void getRequestMetadata_async_refreshRace() throws IOException {"], [208, "    final String accessToken1 = \"1/MkSJoj1xsli0AccessToken_NKPY2\";"], [209, "    MockTokenServerTransport transport = new MockTokenServerTransport();"], [210, "    transport.addClient(CLIENT_ID, CLIENT_SECRET);"], [211, "    transport.addRefreshToken(REFRESH_TOKEN, accessToken1);"], [212, "    TestClock clock = new TestClock();"], [213, "    OAuth2Credentials credentials = new UserCredentials("], [214, "        CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN, null, transport, null);"], [215, "    credentials.clock = clock;"], [216, ""], [217, "    MockExecutor executor = new MockExecutor();"], [218, "    MockRequestMetadataCallback callback = new MockRequestMetadataCallback();"], [219, "    // Getting the first token, which uses the transport and calls the callback in the executor."], [220, "    credentials.getRequestMetadata(CALL_URI, executor, callback);"], [221, "    assertEquals(0, transport.buildRequestCount);"], [222, "    assertNull(callback.metadata);"], [223, ""], [224, "    // Asynchronous task is scheduled, but beaten by another blocking get call."], [225, "    assertEquals(1, executor.numTasks());"], [226, "    Map<String, List<String>> metadata = credentials.getRequestMetadata(CALL_URI);"], [227, "    assertEquals(1, transport.buildRequestCount--);"], [228, "    TestUtils.assertContainsBearerToken(metadata, accessToken1);"], [229, ""], [230, "    // When the task is run, the cached data is used."], [231, "    assertEquals(1, executor.runTasksExhaustively());"], [232, "    assertEquals(0, transport.buildRequestCount);"], [233, "    assertSame(metadata, callback.metadata);"], [260, "    assertEquals(1, transport.buildRequestCount--);"], [267, "    assertEquals(0, transport.buildRequestCount);"], [273, "    assertEquals(1, transport.buildRequestCount--);"]], "deleted": [[89, "  public void getRequestMetadata_cachesExpiringToken() throws IOException {"]]}, "num_lines_added": 122, "num_lines_removed": 1}