{"hash": "0ddda1d6c55282eacf08f97a873e1cc021145e04", "message": "remove deprecated SqlgGraph.v and e", "file_num_lines": 1027, "diff_parsed": {"added": [[312, "            v1 = sqlgGraph.traversal().V(v1.id()).next();"], [469, "        v1 = this.sqlgGraph.traversal().V(v1.id()).next();"], [481, "        v1 = this.sqlgGraph.traversal().V(v1.id()).next();"], [511, "        marko = this.sqlgGraph.traversal().V(marko.id()).next();"], [641, ""], [656, "        person1 = this.sqlgGraph.traversal().V(person1.id()).next();"], [702, "        softwareVersion = this.sqlgGraph.traversal().V(softwareVersion.id()).next();"], [722, "        softwareVersion = this.sqlgGraph.traversal().V(softwareVersion.id()).next();"], [731, "        assertEquals(\"a\", this.sqlgGraph.traversal().V(v1.id()).next().value(\"name\"));"], [732, "        assertEquals(\"b\", this.sqlgGraph.traversal().V(v2.id()).next().value(\"surname\"));"], [740, "        assertEquals(\"aa\", this.sqlgGraph.traversal().V(v1.id()).next().value(\"name\"));"], [741, "        assertEquals(\"bb\", this.sqlgGraph.traversal().V(v2.id()).next().value(\"surname\"));"], [752, "        assertEquals(\"a\", this.sqlgGraph.traversal().V(v1.id()).next().value(\"name\"));"], [753, "        assertEquals(\"b\", this.sqlgGraph.traversal().V(v2.id()).next().value(\"surname\"));"], [774, "        assertEquals(\"aa\", this.sqlgGraph.traversal().V(v1.id()).next().value(\"name\"));"], [775, "        assertEquals(true, this.sqlgGraph.traversal().V(v1.id()).next().value(\"boolean\"));"], [776, "        assertEquals((short) 1, this.sqlgGraph.traversal().V(v1.id()).next().<Short>value(\"short\").shortValue());"], [777, "        assertEquals(1, this.sqlgGraph.traversal().V(v1.id()).next().<Integer>value(\"integer\").intValue());"], [778, "        assertEquals(1L, this.sqlgGraph.traversal().V(v1.id()).next().<Long>value(\"long\").longValue(), 0);"], [779, "        assertEquals(1F, this.sqlgGraph.traversal().V(v1.id()).next().<Float>value(\"float\").floatValue(), 0);"], [780, "        assertEquals(1D, this.sqlgGraph.traversal().V(v1.id()).next().<Double>value(\"double\").doubleValue(), 0);"], [781, ""], [782, "        assertEquals(\"bb\", this.sqlgGraph.traversal().V(v2.id()).next().value(\"surname\"));"], [783, "        assertEquals(false, this.sqlgGraph.traversal().V(v2.id()).next().value(\"boolean\"));"], [784, "        assertEquals((short) 2, this.sqlgGraph.traversal().V(v2.id()).next().<Short>value(\"short\").shortValue());"], [785, "        assertEquals(2, this.sqlgGraph.traversal().V(v2.id()).next().<Integer>value(\"integer\").intValue());"], [786, "        assertEquals(2L, this.sqlgGraph.traversal().V(v2.id()).next().<Long>value(\"long\").longValue(), 0);"], [787, "        assertEquals(2F, this.sqlgGraph.traversal().V(v2.id()).next().<Float>value(\"float\").floatValue(), 0);"], [788, "        assertEquals(2D, this.sqlgGraph.traversal().V(v2.id()).next().<Double>value(\"double\").doubleValue(), 0);"], [1028, "        sqlgVertex1 = this.sqlgGraph.traversal().V(sqlgVertex1.id()).next();"], [1035, "        sqlgVertex1 = this.sqlgGraph.traversal().V(sqlgVertex1.id()).next();"], [1045, "        sqlgVertex1 = this.sqlgGraph.traversal().V(sqlgVertex1.id()).next();"], [1050, "        sqlgVertex2 = this.sqlgGraph.traversal().V(sqlgVertex2.id()).next();"], [1055, "        sqlgVertex3 = this.sqlgGraph.traversal().V(sqlgVertex3.id()).next();"], [1123, "    public void testEmpty() {"], [1124, "        this.sqlgGraph.tx().normalBatchModeOn();"], [1125, "        Vertex person1 = this.sqlgGraph.addVertex(T.label, \"Empty\", \"empty\", \"\");"], [1126, "        this.sqlgGraph.tx().commit();"], [1127, "        assertNotNull(person1.id());"], [1128, "        Object o = this.sqlgGraph.traversal().V().hasLabel(\"Empty\").values(\"empty\").next();"], [1129, "        assertEquals(\"\", o);"]], "deleted": [[312, "            v1 = sqlgGraph.v(v1.id());"], [469, "        v1 = this.sqlgGraph.v(v1.id());"], [481, "        v1 = this.sqlgGraph.v(v1.id());"], [511, "        marko = this.sqlgGraph.v(marko.id());"], [655, "        person1 = this.sqlgGraph.v(person1.id());"], [701, "        softwareVersion = this.sqlgGraph.v(softwareVersion.id());"], [721, "        softwareVersion = this.sqlgGraph.v(softwareVersion.id());"], [730, "        assertEquals(\"a\", this.sqlgGraph.v(v1.id()).value(\"name\"));"], [731, "        assertEquals(\"b\", this.sqlgGraph.v(v2.id()).value(\"surname\"));"], [739, "        assertEquals(\"aa\", this.sqlgGraph.v(v1.id()).value(\"name\"));"], [740, "        assertEquals(\"bb\", this.sqlgGraph.v(v2.id()).value(\"surname\"));"], [751, "        assertEquals(\"a\", this.sqlgGraph.v(v1.id()).value(\"name\"));"], [752, "        assertEquals(\"b\", this.sqlgGraph.v(v2.id()).value(\"surname\"));"], [773, "        assertEquals(\"aa\", this.sqlgGraph.v(v1.id()).value(\"name\"));"], [774, "        assertEquals(true, this.sqlgGraph.v(v1.id()).value(\"boolean\"));"], [775, "        assertEquals((short) 1, this.sqlgGraph.v(v1.id()).<Short>value(\"short\").shortValue());"], [776, "        assertEquals(1, this.sqlgGraph.v(v1.id()).<Integer>value(\"integer\").intValue());"], [777, "        assertEquals(1L, this.sqlgGraph.v(v1.id()).<Long>value(\"long\").longValue(), 0);"], [778, "        assertEquals(1F, this.sqlgGraph.v(v1.id()).<Float>value(\"float\").floatValue(), 0);"], [779, "        assertEquals(1D, this.sqlgGraph.v(v1.id()).<Double>value(\"double\").doubleValue(), 0);"], [780, ""], [781, "        assertEquals(\"bb\", this.sqlgGraph.v(v2.id()).value(\"surname\"));"], [782, "        assertEquals(false, this.sqlgGraph.v(v2.id()).value(\"boolean\"));"], [783, "        assertEquals((short) 2, this.sqlgGraph.v(v2.id()).<Short>value(\"short\").shortValue());"], [784, "        assertEquals(2, this.sqlgGraph.v(v2.id()).<Integer>value(\"integer\").intValue());"], [785, "        assertEquals(2L, this.sqlgGraph.v(v2.id()).<Long>value(\"long\").longValue(), 0);"], [786, "        assertEquals(2F, this.sqlgGraph.v(v2.id()).<Float>value(\"float\").floatValue(), 0);"], [787, "        assertEquals(2D, this.sqlgGraph.v(v2.id()).<Double>value(\"double\").doubleValue(), 0);"], [1027, "        sqlgVertex1 = this.sqlgGraph.v(sqlgVertex1.id());"], [1034, "        sqlgVertex1 = this.sqlgGraph.v(sqlgVertex1.id());"], [1044, "        sqlgVertex1 = this.sqlgGraph.v(sqlgVertex1.id());"], [1049, "        sqlgVertex2 = this.sqlgGraph.v(sqlgVertex2.id());"], [1054, "        sqlgVertex3 = this.sqlgGraph.v(sqlgVertex3.id());"], [1122, "    public void testEmpty(){"], [1123, "    \tthis.sqlgGraph.tx().normalBatchModeOn();"], [1124, "    \tVertex person1 = this.sqlgGraph.addVertex(T.label, \"Empty\",\"empty\",\"\");"], [1125, "    \tthis.sqlgGraph.tx().commit();"], [1126, "    \tassertNotNull(person1.id());"], [1127, "    \tObject o=this.sqlgGraph.traversal().V().hasLabel(\"Empty\").values(\"empty\").next();"], [1128, "    \tassertEquals(\"\",o);"]]}, "num_lines_added": 41, "num_lines_removed": 40}