{"hash": "a3c0ff3c3ea8afe6d29b923ab6a6e223c19fe03c", "message": "fix #147\nCache allEdgeForeignKeys", "file_num_lines": 364, "diff_parsed": {"added": [[8, "import org.junit.Assert;"], [19, "import static org.junit.Assert.assertEquals;"], [44, "            Assert.assertTrue(vv.property(\"createOn\").isPresent());"], [47, "            Assert.assertTrue(propertyTypeMap.containsKey(\"createOn\"));"], [60, "            Assert.assertTrue(vv.property(\"createOn\").isPresent());"], [63, "            Assert.assertTrue(propertyTypeMap.containsKey(\"createOn\"));"], [76, "            Assert.assertTrue(vv.property(\"createOn\").isPresent());"], [79, "            Assert.assertTrue(propertyTypeMap.containsKey(\"createOn\"));"], [95, "            Assert.assertTrue(vv.property(\"doc\").isPresent());"], [98, "            Assert.assertTrue(propertyTypeMap.containsKey(\"doc\"));"], [110, "            Assert.assertFalse(vv.property(\"ID\").isPresent());"], [113, "            Assert.assertFalse(propertyTypeMap.containsKey(\"ID\"));"], [140, "            Assert.assertTrue(iter.hasNext());"], [142, "            Assert.assertArrayEquals(new byte[]{1,2,3,4}, v.<byte[]>property(\"byteArray\").value());"], [154, "            Assert.assertTrue(iter.hasNext());"], [197, "            Assert.assertNotNull(v1);"], [214, "            Assert.assertTrue(edgeIter.hasNext());"], [337, "            Assert.assertTrue(sqlgGraph.traversal().V().hasLabel(\"Report\").hasNext());"], [353, "            Assert.assertTrue(sqlgGraph.traversal().V().hasLabel(\"Report\").hasNext());"], [378, "        Assert.assertTrue(aVertexLabel.isUncommitted());"], [383, "        Assert.assertTrue(bVertexLabel.isUncommitted());"], [388, "        Assert.assertTrue(edgeLabel.isUncommitted());"], [399, "            Assert.assertTrue(globalUniqueIndex.getProperties().containsAll(globalUniqueIndexPropertyColumns));"]], "deleted": [[18, "import static org.junit.Assert.*;"], [43, "            assertTrue(vv.property(\"createOn\").isPresent());"], [46, "            assertTrue(propertyTypeMap.containsKey(\"createOn\"));"], [59, "            assertTrue(vv.property(\"createOn\").isPresent());"], [62, "            assertTrue(propertyTypeMap.containsKey(\"createOn\"));"], [75, "            assertTrue(vv.property(\"createOn\").isPresent());"], [78, "            assertTrue(propertyTypeMap.containsKey(\"createOn\"));"], [94, "            assertTrue(vv.property(\"doc\").isPresent());"], [97, "            assertTrue(propertyTypeMap.containsKey(\"doc\"));"], [109, "            assertFalse(vv.property(\"ID\").isPresent());"], [112, "            assertFalse(propertyTypeMap.containsKey(\"ID\"));"], [139, "            assertTrue(iter.hasNext());"], [141, "            assertArrayEquals(new byte[]{1,2,3,4}, v.<byte[]>property(\"byteArray\").value());"], [153, "            assertTrue(iter.hasNext());"], [196, "            assertNotNull(v1);"], [213, "            assertTrue(edgeIter.hasNext());"], [336, "            assertTrue(sqlgGraph.traversal().V().hasLabel(\"Report\").hasNext());"], [352, "            assertTrue(sqlgGraph.traversal().V().hasLabel(\"Report\").hasNext());"], [377, "        assertTrue(aVertexLabel.isUncommitted());"], [382, "        assertTrue(bVertexLabel.isUncommitted());"], [387, "        assertTrue(edgeLabel.isUncommitted());"], [398, "            assertTrue(globalUniqueIndex.getProperties().containsAll(globalUniqueIndexPropertyColumns));"]]}, "num_lines_added": 23, "num_lines_removed": 22}