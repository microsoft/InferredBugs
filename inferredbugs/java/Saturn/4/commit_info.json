{"hash": "e88480e4451df22a9d45d4ba87ba3ae2859d2cf1", "message": "#2 Support multiple zookeeper clusters", "file_num_lines": 278, "diff_parsed": {"added": [[39, "import org.apache.curator.utils.CloseableUtils;"], [65, "\tpublic static ConcurrentHashMap<String /** nns */, RegistryCenterClient> NNS_CURATOR_CLIENT_MAP = new ConcurrentHashMap<>();"], [72, ""], [73, "\tprivate ConcurrentHashMap<String /** nns **/, NamespaceShardingManager> namespaceShardingListenerManagerMap = new ConcurrentHashMap<String, NamespaceShardingManager>();"], [87, "\t\t\tfor(RegistryCenterConfiguration conf: zkCluster.getRegCenterConfList()) {"], [88, "\t\t\t\tString nns = conf.getNameAndNamespace();"], [89, "\t\t\t\tif(!namespaceShardingListenerManagerMap.containsKey(nns)) {"], [93, "\t\t\t\t\t\tNamespaceShardingManager newObj = new NamespaceShardingManager(client, conf.getNamespace(), generateShardingLeadershipHostValue());"], [94, "\t\t\t\t\t\tif (namespaceShardingListenerManagerMap.putIfAbsent(nns, newObj) == null) {"], [95, "\t\t\t\t\t\t\tlog.info(\"start NamespaceShardingManager {}\", nns);"], [97, "\t\t\t\t\t\t\tlog.info(\"done starting NamespaceShardingManager {}\", nns);"], [109, "\t\t\tString nns = next.getKey();"], [113, "\t\t\t\tfor(RegistryCenterConfiguration conf: zkCluster.getRegCenterConfList()) {"], [114, "\t\t\t\t\tif(conf.getNameAndNamespace().equals(nns)) {"], [119, "\t\t\t\tif(find) {"], [120, "\t\t\t\t\tbreak;"], [121, "\t\t\t\t}"], [126, "\t\t\t\t// clear NNS_CURATOR_CLIENT_MAP"], [127, "\t\t\t\tRegistryCenterClient registryCenterClient = NNS_CURATOR_CLIENT_MAP.remove(nns);"], [128, "\t\t\t\tif (registryCenterClient != null) {"], [129, "\t\t\t\t\tlog.info(\"close zk client in NNS_CURATOR_CLIENT_MAP, nns: {}\");"], [130, "\t\t\t\t\tCloseableUtils.closeQuietly(registryCenterClient.getCuratorClient());"], [131, "\t\t\t\t}"], [135, ""], [140, "\t\tLinkedHashMap<String/** zkAddr **/, ZkCluster> newClusterMap = new LinkedHashMap<>();"], [147, "\t\t\t\tif (conf.getBootstrapKey() == null) {"], [148, "\t\t\t\t\tconf.setBootstrapKey(conf.getZkAddressList());"], [149, "\t\t\t\t}"], [150, "\t\t\t\tZkCluster cluster = newClusterMap.get(conf.getZkAddressList());"], [154, "\t\t\t\t\tnewClusterMap.put(conf.getZkAddressList(), cluster);"], [155, "\t\t\t\t} else if (cluster.getCuratorFramework() == null) {"], [156, "\t\t\t\t\tif (cluster.getCuratorFramework() !=null && !cluster.getCuratorFramework().getZookeeperClient().isConnected()) {"], [157, "\t\t\t\t\t\tcluster.getCuratorFramework().close();"], [158, "\t\t\t\t\t}"], [166, "\t\t\t\tcluster.getRegCenterConfList().add(conf);"], [172, "\t\t\t\tnewClusterMap.put(conf.getZkAddressList(), cluster);"], [175, "\t\tshutdownZkClientInZkClusterMap();"], [176, "\t\tZKADDR_TO_ZKCLUSTER_MAP = newClusterMap;"], [179, "\tprivate static void shutdownZkClientInZkClusterMap() {"], [180, "\t\tCollection<ZkCluster> zkClusters = ZKADDR_TO_ZKCLUSTER_MAP.values();"], [181, "\t\tfor (ZkCluster zkCluster : zkClusters) {"], [182, "\t\t\tif (zkCluster.getCuratorFramework() != null) {"], [183, "\t\t\t\ttry {"], [184, "\t\t\t\t\tlog.info(\"shutdown zkclient in ZK_CLUSTER_MAP: {}\", zkCluster);"], [185, "\t\t\t\t\tzkCluster.getCuratorFramework().close();"], [186, "\t\t\t\t} catch (Exception e) {"], [187, "\t\t\t\t\tlog.error(e.getMessage(), e);"], [188, "\t\t\t\t}"], [189, "\t\t\t}"], [190, "\t\t}"], [191, "\t}"], [195, "\t\t\tInitRegistryCenterService.initTreeJson(zkCluster.getRegCenterConfList(), zkCluster.getZkAddr());"], [240, "\t\tif (NNS_CURATOR_CLIENT_MAP.containsKey(nameAndNameSpace)) {"], [241, "\t\t\tif (NNS_CURATOR_CLIENT_MAP.get(nameAndNameSpace).isConnected()) {"], [242, "\t\t\t\treturn NNS_CURATOR_CLIENT_MAP.get(nameAndNameSpace);"], [244, "\t\t\tNNS_CURATOR_CLIENT_MAP.remove(nameAndNameSpace);"], [253, "\t\tNNS_CURATOR_CLIENT_MAP.putIfAbsent(registryCenterClient.getNameAndNamespace(), registryCenterClient);"], [272, "\t\t\tfor(RegistryCenterConfiguration each: zkCluster.getRegCenterConfList()) {"], [288, "\t\t\tfor(RegistryCenterConfiguration each: zkCluster.getRegCenterConfList()) {"], [325, "\t\treturn NNS_CURATOR_CLIENT_MAP.get(nameAndNamespace);"]], "deleted": [[25, "import java.util.HashMap;"], [65, "\tpublic static ConcurrentHashMap<String, RegistryCenterClient> CURATOR_CLIENT_MAP = new ConcurrentHashMap<>();"], [67, "\tpublic static HashMap<String/** zkAddr **/, ArrayList<RegistryCenterConfiguration>> REGISTRY_CENTER_CONFIGURATION_MAP = new HashMap<>();"], [68, ""], [74, ""], [75, "\tprivate ConcurrentHashMap<String, NamespaceShardingManager> namespaceShardingListenerManagerMap = new ConcurrentHashMap<String, NamespaceShardingManager>();"], [89, "\t\t\tfor(RegistryCenterConfiguration conf: REGISTRY_CENTER_CONFIGURATION_MAP.get(zkCluster.getZkAddr())) {"], [90, "\t\t\t\tString namespace = conf.getNamespace();"], [91, "\t\t\t\tif(!namespaceShardingListenerManagerMap.containsKey(namespace)) {"], [95, "\t\t\t\t\t\tNamespaceShardingManager newObj = new NamespaceShardingManager(client, namespace, generateShardingLeadershipHostValue());"], [96, "\t\t\t\t\t\tif (namespaceShardingListenerManagerMap.putIfAbsent(namespace, newObj) == null) {"], [97, "\t\t\t\t\t\t\tlog.info(\"start NamespaceShardingManager {}\", namespace);"], [99, "\t\t\t\t\t\t\tlog.info(\"done starting NamespaceShardingManager {}\", namespace);"], [111, "\t\t\tString namespace = next.getKey();"], [115, "\t\t\t\tfor(RegistryCenterConfiguration conf: REGISTRY_CENTER_CONFIGURATION_MAP.get(zkCluster.getZkAddr())) {"], [116, "\t\t\t\t\tif(conf.getNamespace().equals(namespace)) {"], [132, "\t\tHashMap<String/** bsKey **/, ArrayList<RegistryCenterConfiguration>> newRegMap = new HashMap<>();"], [139, "\t\t\t\tZkCluster cluster = ZKADDR_TO_ZKCLUSTER_MAP.get(conf.getZkAddressList());"], [143, "\t\t\t\t\tZKADDR_TO_ZKCLUSTER_MAP.put(conf.getZkAddressList(), cluster);"], [144, "\t\t\t\t} else if (cluster.getCuratorFramework() == null || (cluster.getCuratorFramework() !=null && !cluster.getCuratorFramework().getZookeeperClient().isConnected())) {"], [152, "\t\t\t\tArrayList<RegistryCenterConfiguration> confList = newRegMap.get(conf.getZkAddressList());"], [153, "\t\t\t\tif (confList == null) {"], [154, "\t\t\t\t\tconfList = new ArrayList<>();"], [155, "\t\t\t\t}"], [156, "\t\t\t\tconfList.add(conf);"], [157, "\t\t\t\tnewRegMap.put(conf.getZkAddressList(), confList);"], [163, "\t\t\t\tZKADDR_TO_ZKCLUSTER_MAP.put(conf.getZkAddressList(), cluster);"], [164, "\t\t\t\tnewRegMap.put(conf.getZkAddressList(), new ArrayList<RegistryCenterConfiguration>());"], [167, "\t\tREGISTRY_CENTER_CONFIGURATION_MAP = newRegMap;"], [168, "\t\tCURATOR_CLIENT_MAP.clear();"], [174, "\t\t\tInitRegistryCenterService.initTreeJson(REGISTRY_CENTER_CONFIGURATION_MAP.get(zkCluster.getZkAddr()), zkCluster.getZkAddr());"], [219, "\t\tif (CURATOR_CLIENT_MAP.containsKey(nameAndNameSpace)) {"], [220, "\t\t\tif (CURATOR_CLIENT_MAP.get(nameAndNameSpace).isConnected()) {"], [221, "\t\t\t\treturn CURATOR_CLIENT_MAP.get(nameAndNameSpace);"], [223, "\t\t\tCURATOR_CLIENT_MAP.remove(nameAndNameSpace);"], [232, "\t\tCURATOR_CLIENT_MAP.putIfAbsent(registryCenterClient.getNameAndNamespace(), registryCenterClient);"], [251, "\t\t\tfor(RegistryCenterConfiguration each: REGISTRY_CENTER_CONFIGURATION_MAP.get(zkCluster.getZkAddr())) {"], [267, "\t\t\tfor(RegistryCenterConfiguration each: REGISTRY_CENTER_CONFIGURATION_MAP.get(zkCluster.getZkAddr())) {"], [304, "\t\treturn CURATOR_CLIENT_MAP.get(nameAndNamespace);"]]}, "num_lines_added": 60, "num_lines_removed": 39}