{"hash": "56148a3fc3ec17896fd44947f99d057b1f60a974", "message": "added not throwing flush method to the client", "file_num_lines": 157, "diff_parsed": {"added": [[14, "import java.util.concurrent.CopyOnWriteArraySet;"], [35, "\tprivate final CopyOnWriteArraySet<WebSocket> connections;"], [86, "\t\tthis.connections = new CopyOnWriteArraySet<WebSocket>();"], [112, "\t\tfor( WebSocket ws : connections ) {"], [113, "\t\t\tws.close( CloseFrame.NORMAL );"], [123, "\t * @return The currently connected clients in a WebSocket[]."], [126, "\t\treturn Collections.unmodifiableSet( this.connections );"], [211, "\t\t\t\tIterator<WebSocket> it = this.connections.iterator();"], [212, "\t\t\t\twhile ( it.hasNext() ) {"], [213, "\t\t\t\t\t// We have to do this check here, and not in the thread that"], [214, "\t\t\t\t\t// adds the buffered data to the WebSocket, because the"], [215, "\t\t\t\t\t// Selector is not thread-safe, and can only be accessed"], [216, "\t\t\t\t\t// by this thread."], [217, "\t\t\t\t\tconn = it.next();"], [218, "\t\t\t\t\tif( conn.hasBufferedData() ) {"], [219, "\t\t\t\t\t\tconn.flush();"], [220, "\t\t\t\t\t\t// key.channel().register( selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE, conn );"], [263, "\t\tif( this.connections.add( conn ) ) {"], [264, "\t\t\tonOpen( conn, (ClientHandshake) handshake );"], [270, "\t\tif( this.connections.remove( conn ) ) {"], [271, "\t\t\tonClose( conn, code, reason, remote );"]], "deleted": [[12, "import java.util.HashSet;"], [35, "\tprivate final Set<WebSocket> connections = new HashSet<WebSocket>();"], [111, "\t\tsynchronized ( connections ) {"], [112, "\t\t\tfor( WebSocket ws : connections ) {"], [113, "\t\t\t\tws.close( CloseFrame.NORMAL );"], [114, "\t\t\t}"], [123, "\t * Its iterators will be failfast and its not judicious"], [124, "\t * to modify it."], [126, "\t * @return The currently connected clients."], [129, "\t\treturn this.connections;"], [214, "\t\t\t\tsynchronized ( connections ) {"], [215, "\t\t\t\t\tIterator<WebSocket> it = this.connections.iterator();"], [216, "\t\t\t\t\twhile ( it.hasNext() ) {"], [217, "\t\t\t\t\t\t// We have to do this check here, and not in the thread that"], [218, "\t\t\t\t\t\t// adds the buffered data to the WebSocket, because the"], [219, "\t\t\t\t\t\t// Selector is not thread-safe, and can only be accessed"], [220, "\t\t\t\t\t\t// by this thread."], [221, "\t\t\t\t\t\tconn = it.next();"], [222, "\t\t\t\t\t\tif( conn.hasBufferedData() ) {"], [223, "\t\t\t\t\t\t\tconn.flush();"], [224, "\t\t\t\t\t\t\t// key.channel().register( selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE, conn );"], [225, "\t\t\t\t\t\t}"], [235, "\t\t\t} catch ( Throwable e ) {"], [236, "\t\t\t\tSystem.out.println( e );"], [237, "\t\t\t\te.printStackTrace();"], [271, "\t\tsynchronized ( connections ) {"], [272, "\t\t\tif( this.connections.add( conn ) ) {"], [273, "\t\t\t\tonOpen( conn, (ClientHandshake) handshake );"], [274, "\t\t\t}"], [280, "\t\tsynchronized ( connections ) {"], [281, "\t\t\tif( this.connections.remove( conn ) ) {"], [282, "\t\t\t\tonClose( conn, code, reason, remote );"], [283, "\t\t\t}"]]}, "num_lines_added": 21, "num_lines_removed": 33}