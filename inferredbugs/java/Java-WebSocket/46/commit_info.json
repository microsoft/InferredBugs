{"hash": "e9ba668a38bd40d752077899254c3baa1035e0d2", "message": "The ready state of a websocket is now represented as an enum. Also did some cleanup.", "file_num_lines": 547, "diff_parsed": {"added": [[58, "\t/* only used to obtain the socket addresses*/"], [72, "\t * Helper variable meant to store the thread which ( exclusively ) triggers this objects decode method."], [79, "\tprivate READYSTATE readystate = READYSTATE.NOTYETCONNECTED;"], [127, "\t\tif( draft != null )"], [128, "\t\t\tthis.draft = draft.copyInstance();"], [135, "\tpublic void decode( ByteBuffer socketBuffer ) {"], [142, "\t\tif( readystate == READYSTATE.OPEN ) {"], [156, "\tprivate boolean decodeHandshake( ByteBuffer socketBufferNew ) {"], [313, "\t\t\t\t\tif( readystate == READYSTATE.CLOSING ) {"], [361, "\t\tif( readystate != READYSTATE.CLOSING && readystate != READYSTATE.CLOSED ) {"], [362, "\t\t\tif( readystate == READYSTATE.OPEN ) {"], [365, "\t\t\t\t\treadystate = READYSTATE.CLOSING;"], [393, "\t\t\treadystate = READYSTATE.CLOSING;"], [414, "\t\tif( readystate == READYSTATE.CLOSED ) {"], [437, "\t\treadystate = READYSTATE.CLOSED;"], [573, "\t\tassert ( readystate != READYSTATE.CONNECTING ) : \"shall only be called once\";"], [630, "\tprivate void open( Handshakedata d ) {"], [633, "\t\treadystate = READYSTATE.OPEN;"], [643, "\t\tassert ( flushandclosestate ? readystate == READYSTATE.CONNECTING : true );"], [644, "\t\treturn readystate == READYSTATE.CONNECTING; // ifflushandclosestate"], [649, "\t\tassert ( readystate == READYSTATE.OPEN ? !flushandclosestate : true );"], [650, "\t\treturn readystate == READYSTATE.OPEN;"], [655, "\t\treturn readystate == READYSTATE.CLOSING;"], [665, "\t\treturn readystate == READYSTATE.CLOSED;"], [669, "\tpublic READYSTATE getReadyState() {"], [670, "\t\treturn readystate;"]], "deleted": [[58, "\t/* only used to optain the socket addresses*/"], [72, "\t * Helper variable ment to store the thread which ( exclusively ) triggers this objects decode method."], [76, "\t/**"], [77, "\t * Determines whether to receive data as part of the"], [78, "\t * handshake, or as part of text/data frame transmitted over the websocket."], [79, "\t */"], [80, "\tprivate volatile boolean handshakeComplete = false;"], [81, "\t/**"], [82, "\t * Determines whether we sent already a request to Close the connection or not."], [83, "\t */"], [84, "\tprivate volatile boolean closeHandshakeSubmitted = false;"], [85, ""], [89, "\t/** When true the socket has been closed */"], [90, "\tprivate volatile boolean isclosed = false;"], [138, "\t\tthis.draft = draft.copyInstance();"], [143, "\t * Should be called when a Selector has a key that is writable for this"], [144, "\t * WebSocketImpl's SocketChannel connection."], [146, "\t * @throws IOException"], [147, "\t *             When socket related I/O errors occur."], [149, "\tpublic void decode( ByteBuffer socketBuffer ) throws IOException {"], [156, "\t\tif( handshakeComplete ) {"], [170, "\tprivate boolean decodeHandshake( ByteBuffer socketBufferNew ) throws IOException {"], [327, "\t\t\t\t\tif( closeHandshakeSubmitted ) {"], [375, "\t\tif( !closeHandshakeSubmitted ) {"], [376, "\t\t\tif( handshakeComplete ) {"], [380, "\t\t\t\t\tcloseHandshakeSubmitted = true;"], [407, "\t\t\tcloseHandshakeSubmitted = true;"], [428, "\t\tif( isclosed ) {"], [451, "\t\tisclosed = true;"], [586, "\t@Override"], [588, "\t\tif( handshakeComplete )"], [589, "\t\t\tthrow new IllegalStateException( \"Handshake has already been sent.\" );"], [646, "\tprivate void open( Handshakedata d ) throws IOException {"], [649, "\t\thandshakeComplete = true;"], [659, "\t\treturn ( !flushandclosestate && !closeHandshakeSubmitted && !handshakeComplete );"], [664, "\t\treturn ( !flushandclosestate && !isclosed && !closeHandshakeSubmitted && handshakeComplete );"], [669, "\t\treturn ( !isclosed && closeHandshakeSubmitted );"], [679, "\t\treturn isclosed;"], [682, "\t/**"], [683, "\t * Retrieve the WebSocketImpl 'readyState'."], [684, "\t * This represents the state of the connection."], [685, "\t * It returns a numerical value, as per W3C WebSockets specs."], [686, "\t *"], [687, "\t * @return Returns '0 = CONNECTING', '1 = OPEN', '2 = CLOSING' or '3 = CLOSED'"], [688, "\t */"], [690, "\tpublic int getReadyState() {"], [691, "\t\tif( isConnecting() ) {"], [692, "\t\t\treturn READY_STATE_CONNECTING;"], [693, "\t\t} else if( isOpen() ) {"], [694, "\t\t\treturn READY_STATE_OPEN;"], [695, "\t\t} else if( isClosing() ) {"], [696, "\t\t\treturn READY_STATE_CLOSING;"], [697, "\t\t} else if( isFlushAndClose() ) {"], [698, "\t\t\treturn READY_STATE_CLOSED;"], [699, "\t\t}"], [700, "\t\tassert ( false );"], [701, "\t\treturn -1; // < This can't happen, by design!"]]}, "num_lines_added": 26, "num_lines_removed": 57}