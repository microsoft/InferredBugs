{"hash": "ea5320d3032da5a0fa6d9985f2277eed39d05bc0", "message": "* removed IndexLogIterateService, replace it with LogIterateService\n* ensure save index iterate checkpoint after backup index to hbase", "file_num_lines": 172, "diff_parsed": {"added": [[20, "import static qunar.tc.qmq.constants.BrokerConstants.DEFAULT_PORT;"], [21, "import static qunar.tc.qmq.constants.BrokerConstants.META_SERVER_ENDPOINT;"], [22, "import static qunar.tc.qmq.constants.BrokerConstants.PORT_CONFIG;"], [67, "import qunar.tc.qmq.meta.BrokerRegisterService;"], [69, "import qunar.tc.qmq.meta.MetaServerLocator;"], [73, "import qunar.tc.qmq.store.LogIterateService;"], [110, "            int listenPort = localConfig.getInt(PORT_CONFIG, DEFAULT_PORT);"], [111, "            final MetaServerLocator metaServerLocator = new MetaServerLocator(localConfig.getString(META_SERVER_ENDPOINT));"], [112, "            BrokerRegisterService brokerRegisterService = new BrokerRegisterService(listenPort, metaServerLocator);"], [113, "            brokerRegisterService.start();"], [127, "        BrokerRole role = BrokerConfig.getBrokerRole();"], [128, "        if(role != BrokerRole.BACKUP) throw new RuntimeException(\"Only support backup\");"], [129, ""], [136, "        final FixedExecOrderEventBus bus = new FixedExecOrderEventBus();"], [137, "        final BackupKeyGenerator keyGenerator = new BackupKeyGenerator(dicService);"], [138, "        final KvStore.StoreFactory factory = new FactoryStoreImpl().createStoreFactory(config, dicService, keyGenerator);"], [139, "        this.indexStore = factory.createMessageIndexStore();"], [140, "        this.recordStore = factory.createRecordStore();"], [141, "        this.deadMessageStore = factory.createDeadMessageStore();"], [142, "        IndexLog log = new IndexLog(storageConfig, checkpointManager);"], [143, "        final IndexLogSyncDispatcher dispatcher = new IndexLogSyncDispatcher(log);"], [144, ""], [145, "        FixedExecOrderEventBus.Listener<MessageQueryIndex> indexProcessor = getConstructIndexListener(keyGenerator"], [146, "                , messageQueryIndex -> log.commit(messageQueryIndex.getCurrentOffset()));"], [147, "        bus.subscribe(MessageQueryIndex.class, indexProcessor);"], [148, "        masterSlaveSyncManager.registerProcessor(dispatcher.getSyncType(), new BackupMessageLogSyncProcessor(dispatcher));"], [149, ""], [150, "        // action"], [151, "        final RocksDBStore rocksDBStore = new RocksDBStoreImpl(config);"], [152, "        final BatchBackup<ActionRecord> recordBackup = new RecordBatchBackup(this.config, keyGenerator, rocksDBStore, recordStore);"], [153, "        backupManager.registerBatchBackup(recordBackup);"], [154, "        final SyncLogIterator<Action, ByteBuf> actionIterator = new ActionSyncLogIterator();"], [155, "        BackupActionLogSyncProcessor actionLogSyncProcessor = new BackupActionLogSyncProcessor(checkpointManager, config, actionIterator, recordBackup);"], [156, "        masterSlaveSyncManager.registerProcessor(SyncType.action, actionLogSyncProcessor);"], [157, ""], [158, "        scheduleFlushManager.register(actionLogSyncProcessor);"], [159, ""], [160, "        masterSlaveSyncManager.registerProcessor(SyncType.heartbeat, new HeartBeatProcessor(checkpointManager));"], [161, ""], [162, "        LogIterateService<MessageQueryIndex> iterateService = new LogIterateService<>(\"index\", new StorageConfigImpl(config), log, checkpointManager.getIndexIterateCheckpoint(), bus);"], [172, "        addResourcesInOrder(scheduleFlushManager, backupManager, masterSlaveSyncManager);"]], "deleted": [[37, "import qunar.tc.qmq.backup.service.IndexLogIterateService;"], [123, "        final FixedExecOrderEventBus bus = new FixedExecOrderEventBus();"], [124, "        BrokerRole role = BrokerConfig.getBrokerRole();"], [125, "        IndexLog log;"], [126, "        if (role == BrokerRole.BACKUP) {"], [127, "            final BackupKeyGenerator keyGenerator = new BackupKeyGenerator(dicService);"], [128, "            final KvStore.StoreFactory factory = new FactoryStoreImpl().createStoreFactory(config, dicService, keyGenerator);"], [129, "            this.indexStore = factory.createMessageIndexStore();"], [130, "            this.recordStore = factory.createRecordStore();"], [131, "            this.deadMessageStore = factory.createDeadMessageStore();"], [132, "            log = new IndexLog(storageConfig, checkpointManager);"], [133, "            final IndexLogSyncDispatcher dispatcher = new IndexLogSyncDispatcher(log);"], [134, ""], [135, "            bus.subscribe(MessageQueryIndex.class, getConstructIndexListener(keyGenerator"], [136, "                    , messageQueryIndex -> log.setDeleteTo(messageQueryIndex.getCurrentOffset())));"], [137, "            masterSlaveSyncManager.registerProcessor(dispatcher.getSyncType(), new BackupMessageLogSyncProcessor(dispatcher));"], [138, ""], [139, "            // action"], [140, "            final RocksDBStore rocksDBStore = new RocksDBStoreImpl(config);"], [141, "            final BatchBackup<ActionRecord> recordBackup = new RecordBatchBackup(this.config, keyGenerator, rocksDBStore, recordStore);"], [142, "            backupManager.registerBatchBackup(recordBackup);"], [143, "            final SyncLogIterator<Action, ByteBuf> actionIterator = new ActionSyncLogIterator();"], [144, "            BackupActionLogSyncProcessor actionLogSyncProcessor = new BackupActionLogSyncProcessor(checkpointManager, config, actionIterator, recordBackup);"], [145, "            masterSlaveSyncManager.registerProcessor(SyncType.action, actionLogSyncProcessor);"], [146, ""], [147, "            scheduleFlushManager.register(actionLogSyncProcessor);"], [148, ""], [149, "            masterSlaveSyncManager.registerProcessor(SyncType.heartbeat, new HeartBeatProcessor(checkpointManager));"], [150, "        } else if (role == BrokerRole.DELAY_BACKUP) {"], [151, "            throw new RuntimeException(\"check the role is correct, only backup is allowed.\");"], [152, "        } else {"], [153, "            throw new RuntimeException(\"check the role is correct, only backup is allowed.\");"], [154, "        }"], [156, "        IndexLogIterateService iterateService = new IndexLogIterateService(config, log, checkpointManager, bus);"], [166, "        addResourcesInOrder(scheduleFlushManager, backupManager, iterateService, masterSlaveSyncManager);"]]}, "num_lines_added": 41, "num_lines_removed": 35}