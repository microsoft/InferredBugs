{"hash": "ac63b5afbacd567a128487d6a06bff117af22fe3", "message": "\u66f4\u65b0\u540c\u4e00\u4e2a\u6d41\u7a0b\u4e2d\u6839\u636eserviceName\u67e5\u627e\u7b97\u6cd5", "file_num_lines": 295, "diff_parsed": {"added": [[66, "  // private final ConcurrentMap<String, Set<ServiceConfig>> servicesOfFlow = new"], [67, "  // ConcurrentHashMap<>();"], [79, "   * \u6d41\u7a0b\u7684\u5934\u7ed3\u70b9"], [81, "  private ServiceConfig header;"], [105, "    return header;"], [181, "    logger.info(\"start register ServiceConfig : {}\", header);"], [184, "      registry.registerServiceConfig(header);"], [200, "    if (header == null) {"], [201, "      this.header = preConfig;"], [209, "      Set<ServiceConfig> previousServiceConfigs = findPreviousServiceConfig(header, nextConfig, null);"], [210, "      logger.info(\"\u67e5\u627e\u8282\u70b9 {} \u7684\u524d\u7f6e\u8282\u70b9 {}\", nextServiceName, previousServiceConfigs);"], [243, "  private Set<ServiceConfig> findPreviousServiceConfig(ServiceConfig header, ServiceConfig serviceConfig,"], [244, "      Set<ServiceConfig> preServiceConfigs) {"], [245, "    if (preServiceConfigs == null) {"], [246, "      preServiceConfigs = new HashSet<ServiceConfig>();"], [247, "    }"], [248, ""], [249, "    Set<ServiceConfig> nexts = header.getNextServiceConfigs();"], [250, "    if (nexts != null)"], [251, "      for (ServiceConfig item : nexts) {"], [252, "        Set<ServiceConfig> temp = item.getNextServiceConfigs();"], [253, "        if (temp != null && temp.contains(serviceConfig)) {"], [254, "          preServiceConfigs.add(item);"], [255, "        } else {"], [256, "          findPreviousServiceConfig(item, serviceConfig, preServiceConfigs);"], [257, "        }"], [258, "      }"], [259, ""], [260, "    return preServiceConfigs;"], [261, "  }"], [262, ""], [396, "    if (header.getServiceName().equals(serviceName)) {"], [397, "      return header.getNextServiceConfigs();"], [398, "    }"], [399, "    Set<ServiceConfig> temp = header.getNextServiceConfigs();"], [400, "    while (temp != null) {"], [401, "      Set<ServiceConfig> t = new HashSet<ServiceConfig>();"], [402, "      for (ServiceConfig item : temp) {"], [403, "        if (item.getServiceName().equals(serviceName)) {"], [404, "          return item.getNextServiceConfigs();"], [405, "        }"], [406, "        if (item.getNextServiceConfigs() != null) {"], [407, "          t.addAll(item.getNextServiceConfigs());"], [408, "        }"], [409, "        temp = t;"], [410, "      }"], [412, ""], [413, "    return null;"], [416, ""], [467, "    builder.append(\"ServiceFlow [ flowName = \");"], [471, "    ServiceConfig hh = header;"], [472, "    buildString(hh, builder);"], [477, "  private void buildString(ServiceConfig header, StringBuilder builder) {"], [478, "    if (header == null) {"], [479, "      return;"], [480, "    }"], [481, "    Set<ServiceConfig> nexts = header.getNextServiceConfigs();"], [482, "    if (nexts == null || nexts.isEmpty()) {"], [483, "      return;"], [484, "    }"], [485, "    StringBuilder temp = new StringBuilder();"], [486, "    temp.append(header.getSimpleDesc()).append(\" ---> \");"], [487, "    for (ServiceConfig item : nexts) {"], [488, "      temp.append(item.getSimpleDesc()).append(\", \");"], [489, "    }"], [490, "    temp.append(\"\\r\\n\\t\");"], [491, ""], [492, "    if (builder.indexOf(temp.toString()) == -1) {"], [493, "      builder.append(temp);"], [494, "    }"], [495, "    for (ServiceConfig item : nexts) {"], [496, "      if (item.getNextServiceConfigs() != null) {"], [497, "        buildString(item, builder);"], [498, "      }"], [499, "    }"], [501, "  }"]], "deleted": [[23, "import java.util.Map;"], [67, "  private final ConcurrentMap<String, Set<ServiceConfig>> servicesOfFlow = new ConcurrentHashMap<>();"], [79, "   * \u6d41\u7a0b\u7684\u7b2c\u4e00\u4e2a\u670d\u52a1"], [81, "  private ServiceConfig headServiceConfig;"], [82, ""], [83, "  // public ServiceFlow(String flowName) {"], [84, "  // this(flowName, SimpleFlowerFactory.get());"], [85, "  // }"], [109, "    return headServiceConfig;"], [185, "    logger.info(\"start register ServiceConfig : {}\", headServiceConfig);"], [188, "      registry.registerServiceConfig(headServiceConfig);"], [204, "    Set<ServiceConfig> nextServices = getOrCreateNextFlow(preServiceName);"], [205, "    if (headServiceConfig == null) {"], [206, "      this.headServiceConfig = preConfig;"], [214, "      Set<ServiceConfig> previousServiceConfigs = nextConfig.getPreviousServiceConfigs();"], [235, "      boolean ret = nextServices.add(nextConfig);"], [236, "      if (!ret) {"], [237, "        return this;"], [238, "      }"], [242, "      nextConfig.addPreviousServiceConfig(preConfig);"], [385, "    return servicesOfFlow.get(serviceName);"], [386, "  }"], [387, ""], [388, "  protected Set<ServiceConfig> getOrCreateNextFlow(String serviceName) {"], [389, "    Set<ServiceConfig> nextServices = getNextFlow(serviceName);"], [390, "    if (nextServices == null) {"], [391, "      nextServices = new HashSet<>();"], [392, "      servicesOfFlow.put(serviceName, nextServices);"], [394, "    return nextServices;"], [447, "    builder.append(\"ServiceFlow [\\r\\n\\tflowName = \");"], [450, "    Set<ServiceConfig> nextServices = servicesOfFlow.get(getHeadServiceConfig().getServiceName());"], [451, ""], [452, "    builder.append(getHeadServiceConfig().getSimpleDesc());"], [453, "    builder.append(\" --> \");"], [454, "    getHeadServiceConfig().getNextServiceConfigs().forEach(item -> {"], [455, "      builder.append(item.getSimpleDesc()).append(\",\");"], [456, "    });"], [457, ""], [458, "    if (nextServices != null) {"], [459, "      for (Map.Entry<String, Set<ServiceConfig>> entry : servicesOfFlow.entrySet()) {"], [460, "        if (getHeadServiceConfig().getServiceName().equals(entry.getKey())) {"], [461, "          continue;"], [462, "        }"], [463, "        builder.append(\"\\r\\n\\t\");"], [464, "        builder.append(getServiceConfig(entry.getKey()).getSimpleDesc());"], [465, "        builder.append(\" -- > \");"], [466, "        entry.getValue().forEach(item -> {"], [467, "          builder.append(item.getSimpleDesc()).append(\", \");"], [468, "        });"], [469, "      }"], [470, "    }"], [471, ""]]}, "num_lines_added": 76, "num_lines_removed": 52}