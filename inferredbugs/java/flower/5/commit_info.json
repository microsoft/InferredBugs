{"hash": "b3b1a0aa03737c7f4c2948956bf96d2c279e1552", "message": "update cacheMangager", "file_num_lines": 136, "diff_parsed": {"added": [[27, "import java.util.concurrent.atomic.AtomicBoolean;"], [34, "  private static final String defaultCacheManager = \"DEFAULT_CACHE_MANAGER\";"], [35, "  private static final ConcurrentMap<String, CacheManager> cacheManagerMap = new ConcurrentHashMap<>();"], [36, "  private static final AtomicBoolean init = new AtomicBoolean();"], [37, "  private static ScheduledExecutorService executorService = null;"], [38, ""], [54, "  private CacheManager() {}"], [55, ""], [56, "  public static CacheManager get() {"], [57, "    return get(defaultCacheManager);"], [58, "  }"], [59, ""], [60, "  public static CacheManager get(String name) {"], [61, "    CacheManager cacheManager = cacheManagerMap.get(name);"], [62, "    if (cacheManager == null) {"], [63, "      synchronized (cacheManagerMap) {"], [64, "        cacheManager = cacheManagerMap.get(name);"], [65, "        if (cacheManager == null) {"], [66, "          cacheManager = new CacheManager();"], [67, "          cacheManagerMap.putIfAbsent(name, cacheManager);"], [68, "          init();"], [69, "        }"], [70, "      }"], [71, "    }"], [72, "    return cacheManager;"], [73, "  }"], [74, ""], [75, "  private static void init() {"], [77, "      if (!init.compareAndSet(false, true)) {"], [78, "        return;"], [79, "      }"], [80, "      executorService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"CacheScanner\"));"], [86, "            // clearCache();"], [87, "            for (Entry<String, CacheManager> entry : cacheManagerMap.entrySet()) {"], [88, "              entry.getValue().clearCache();"], [89, "            }"], [135, "   * @param key key"], [151, "  @SuppressWarnings(\"unchecked\")"], [152, "  private <T> Cache<T> add(String key, Cache<T> object) {"], [153, "    return (Cache<T>) cacheMap.putIfAbsent(key, object);"], [154, "  }"], [155, ""], [179, "   * @param ttl ms \u6709\u6548\u65f6\u95f4"], [180, "   * @return"], [182, "  public <T> Cache<T> add(String key, T content, long ttl) {"], [183, "    Cache<T> cache = new Cache<>();"], [184, "    cache.setKey(key);"], [185, "    cache.setValue(content);"], [186, "    cache.setTimeToLive(ttl);"], [187, "    cache.setExpired(false);"], [188, "    return (Cache<T>) add(key, cache);"], [189, "  }"], [190, ""], [191, "  public <T> void set(String key, T content, long ttl) {"]], "deleted": [[33, "  private static CacheManager instance;"], [34, "  private ScheduledExecutorService executorService = null;"], [50, "  private CacheManager() {"], [52, "      this.executorService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"CacheScanner\"));"], [58, "            clearCache();"], [70, "  }"], [72, "  public static CacheManager get() {"], [73, "    if (instance == null) {"], [74, "      synchronized (log) {"], [75, "        if (instance == null) {"], [76, "          instance = new CacheManager();"], [77, "        }"], [78, "      }"], [79, "    }"], [80, "    return instance;"], [114, "   * @param key"], [153, "   * @param ttl ms"], [155, "  public <T> void putContent(String key, T content, long ttl) {"]]}, "num_lines_added": 54, "num_lines_removed": 18}