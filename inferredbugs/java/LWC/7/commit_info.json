{"hash": "1f4ffbbbfc4a712cd9e621216b00b337bb0a4815", "message": "Metrics R3", "file_num_lines": 124, "diff_parsed": {"added": [[45, "import java.util.Collections;"], [46, "import java.util.HashMap;"], [47, "import java.util.LinkedHashSet;"], [48, "import java.util.Map;"], [49, "import java.util.Set;"], [58, "     * Interface used to collect custom data for a plugin"], [59, "     */"], [60, "    public static abstract class Plotter {"], [61, ""], [62, "        /**"], [63, "         * Get the column name for the plotted point"], [64, "         *"], [65, "         * @return the plotted point's column name"], [66, "         */"], [67, "        public abstract String getColumnName();"], [68, ""], [69, "        /**"], [70, "         * Get the current value for the plotted point"], [71, "         *"], [72, "         * @return"], [73, "         */"], [74, "        public abstract int getValue();"], [75, ""], [76, "        @Override"], [77, "        public int hashCode() {"], [78, "            return getColumnName().hashCode() + getValue();"], [79, "        }"], [80, ""], [81, "        @Override"], [82, "        public boolean equals(Object object) {"], [83, "            if (!(object instanceof Plotter)) {"], [84, "                return false;"], [85, "            }"], [86, ""], [87, "            Plotter plotter = (Plotter) object;"], [88, "            return plotter.getColumnName().equals(getColumnName()) && plotter.getValue() == getValue();"], [89, "        }"], [90, ""], [91, "    }"], [92, ""], [93, "    /**"], [96, "    private final static int REVISION = 3;"], [119, "     * A map of the custom data plotters for plugins"], [120, "     */"], [121, "    private Map<Plugin, Set<Plotter>> customData = Collections.synchronizedMap(new HashMap<Plugin, Set<Plotter>>());"], [122, ""], [123, "    /**"], [170, "     * Adds a custom data plotter for a given plugin"], [171, "     *"], [172, "     * @param plugin"], [173, "     * @param plotter"], [174, "     */"], [175, "    public void addCustomData(Plugin plugin, Plotter plotter) {"], [176, "        Set<Plotter> plotters = customData.get(plugin);"], [177, ""], [178, "        if (plotters == null) {"], [179, "            plotters = Collections.synchronizedSet(new LinkedHashSet<Plotter>());"], [180, "            customData.put(plugin, plotters);"], [181, "        }"], [182, ""], [183, "        plotters.add(plotter);"], [184, "    }"], [185, ""], [186, "    /**"], [231, "        // Add any custom data (if applicable)"], [232, "        Set<Plotter> plotters = customData.get(plugin);"], [233, ""], [234, "        if (plotters != null) {"], [235, "            for (Plotter plotter : plotters) {"], [236, "                data += \"&\" + encode (\"Custom\" + plotter.getColumnName())"], [237, "                        + \"=\" + encode(Integer.toString(plotter.getValue()));"], [238, "            }"], [239, "        }"], [240, ""]], "deleted": [[55, "    private final static int REVISION = 2;"]]}, "num_lines_added": 74, "num_lines_removed": 1}