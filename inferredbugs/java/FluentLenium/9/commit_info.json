{"hash": "1035f3703ff35723a0b90bc4e5abf544b3ac2624", "message": "#949 - deduplication #5 - moved getSharedWebDriver to SharedWebdriverSingletonImpl", "file_num_lines": 179, "diff_parsed": {"added": [[173, "            sharedWebDriver = getSharedWebDriver(PARAMETERS_THREAD_LOCAL.get(), null);"], [182, "        setTestClassAndMethodValues();"], [198, "    public SharedWebDriver getSharedWebDriver(EffectiveParameters<?> parameters, ExecutorService executorService)"], [200, "        return SharedWebDriverContainer.INSTANCE.getSharedWebDriver("], [201, "                parameters, executorService, this::newWebDriver, getConfiguration());"]], "deleted": [[5, "import static org.fluentlenium.utils.ExecutorServiceUtil.getExecutor;"], [6, "import static org.fluentlenium.utils.ExecutorServiceUtil.shutDownExecutor;"], [14, "import java.util.concurrent.Future;"], [176, "            sharedWebDriver = getSharedWebDriver(PARAMETERS_THREAD_LOCAL.get());"], [200, "    private SharedWebDriver getSharedWebDriver(EffectiveParameters<?> parameters)"], [201, "            throws ExecutionException, InterruptedException {"], [202, "        return getSharedWebDriver(parameters, null);"], [203, "    }"], [204, ""], [205, "    /**"], [206, "     * Returns SharedDriver instance"], [207, "     *"], [208, "     * @param parameters        driver parameters"], [209, "     * @param webDriverExecutor executor service"], [210, "     * @return SharedDriver"], [211, "     * @throws ExecutionException   execution exception"], [212, "     * @throws InterruptedException interrupted exception"], [213, "     */"], [214, "    protected SharedWebDriver getSharedWebDriver(EffectiveParameters<?> parameters,"], [215, "                                                 ExecutorService webDriverExecutor)"], [217, "        SharedWebDriver sharedWebDriver = null;"], [218, "        ExecutorService executorService = getExecutor(webDriverExecutor);"], [219, ""], [220, "        for (int retryCount = 0; retryCount < getBrowserTimeoutRetries(); retryCount++) {"], [221, ""], [222, "            Future<SharedWebDriver> futureWebDriver = createDriver(parameters, executorService);"], [223, "            shutDownExecutor(executorService, getBrowserTimeout());"], [224, ""], [225, "            try {"], [226, "                sharedWebDriver = futureWebDriver.get();"], [227, "            } catch (InterruptedException | ExecutionException e) {"], [228, "                executorService.shutdownNow();"], [229, "                throw e;"], [230, "            }"], [231, ""], [232, "            if (sharedWebDriver != null) {"], [233, "                break;"], [234, "            }"], [235, "        }"], [236, ""], [237, "        setTestClassAndMethodValues();"], [238, "        return sharedWebDriver;"], [239, "    }"], [240, ""], [241, "    private Future<SharedWebDriver> createDriver(EffectiveParameters<?> parameters, ExecutorService executorService) {"], [242, "        return executorService.submit("], [243, "                () -> SharedWebDriverContainer.INSTANCE.getOrCreateDriver(this::newWebDriver, parameters));"]]}, "num_lines_added": 5, "num_lines_removed": 47}