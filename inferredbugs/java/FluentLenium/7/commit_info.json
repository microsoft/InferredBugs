{"hash": "8ff3d46fd5f12decf962ffa6b374c13909eb4703", "message": "#770: Extract invocation handling logic to a separate class from AbstractLocatorHandler", "file_num_lines": 108, "diff_parsed": {"added": [[20, " * <p>"], [21, " * Contains the locator handling related logic."], [23, " * @param <T> type of underlying element or component"], [25, "public abstract class AbstractLocatorHandler<T> implements LocatorHandler<T> {"], [32, "    protected T proxy;"], [33, "    protected T result;"], [44, "    @Override"], [45, "    public boolean addListener(ProxyElementListener listener) {"], [46, "        return listeners.add(listener);"], [49, "    @Override"], [50, "    public boolean removeListener(ProxyElementListener listener) {"], [51, "        return listeners.remove(listener);"], [52, "    }"], [65, "                result = null;"], [69, "                result = getLocatorResultImpl();"], [70, "                fireProxyElementFound(result);"], [72, "            return result;"], [85, "            hooks = hookChainBuilder"], [86, "                    .build(this::getElement, () -> locator, () -> proxy.toString(), hookDefinitions);"], [102, "        return result != null;"], [117, "        result = null;"], [120, "    /**"], [121, "     * Set the proxy using this handler."], [122, "     *"], [123, "     * @param proxy proxy using this handler"], [124, "     */"], [125, "    public void setProxy(T proxy) {"], [126, "        this.proxy = proxy;"], [127, "    }"], [129, "    /**"], [130, "     * Fire proxy element search event."], [131, "     */"], [132, "    protected void fireProxyElementSearch() {"], [133, "        listeners.forEach(listener -> listener.proxyElementSearch(proxy, locator));"], [134, "    }"], [136, "    /**"], [137, "     * Fire proxy element found event."], [138, "     *"], [139, "     * @param result found element"], [140, "     */"], [141, "    protected void fireProxyElementFound(T result) {"], [142, "        listeners.forEach(listener -> listener.proxyElementFound(proxy, locator, resultToList(result)));"], [145, "    /**"], [146, "     * Get the actual result of the locator."], [147, "     *"], [148, "     * @return result of the locator"], [149, "     */"], [150, "    public abstract T getLocatorResultImpl();"], [152, "    /**"], [153, "     * Convert result to a list of selenium element."], [154, "     *"], [155, "     * @param result found result"], [156, "     * @return list of selenium element"], [157, "     */"], [158, "    protected abstract List<WebElement> resultToList(T result);"], [160, "    /**"], [161, "     * Get the stale status of the element."], [162, "     *"], [163, "     * @return true if element is stale, false otherwise"], [164, "     */"], [165, "    protected abstract boolean isStale();"], [166, ""], [167, "    /**"], [168, "     * Get the underlying element."], [169, "     *"], [170, "     * @return underlying element"], [171, "     */"], [172, "    protected abstract WebElement getElement();"]], "deleted": [[4, "import static org.fluentlenium.utils.ReflectionUtils.getMethod;"], [16, "import java.lang.reflect.InvocationHandler;"], [17, "import java.lang.reflect.InvocationTargetException;"], [18, "import java.lang.reflect.Method;"], [21, "import java.util.Objects;"], [26, " * @param <T> type of underlying object."], [28, "@SuppressWarnings(\"PMD.GodClass\")"], [29, "public abstract class AbstractLocatorHandler<T> implements InvocationHandler, LocatorHandler<T> {"], [30, "    private static final Method TO_STRING = getMethod(Object.class, \"toString\");"], [31, "    private static final Method EQUALS = getMethod(Object.class, \"equals\", Object.class);"], [32, "    private static final Method HASH_CODE = getMethod(Object.class, \"hashCode\");"], [34, ""], [35, "    private static final int MAX_RETRY = 5;"], [36, "    private static final int HASH_CODE_SEED = 2048;"], [37, ""], [39, ""], [41, "    protected final ProxyResultHolder<T> proxyResultHolder;"], [42, ""], [46, ""], [47, ""], [48, "    @Override"], [49, "    public boolean addListener(ProxyElementListener listener) {"], [50, "        return listeners.add(listener);"], [51, "    }"], [52, ""], [53, "    @Override"], [54, "    public boolean removeListener(ProxyElementListener listener) {"], [55, "        return listeners.remove(listener);"], [56, "    }"], [57, ""], [58, "    /**"], [59, "     * Fire proxy element search event."], [60, "     */"], [61, "    protected void fireProxyElementSearch() {"], [62, "        listeners.forEach(listener -> listener.proxyElementSearch(proxyResultHolder.getProxy(), locator));"], [63, "    }"], [64, ""], [65, "    /**"], [66, "     * Fire proxy element found event."], [67, "     *"], [68, "     * @param result found element"], [69, "     */"], [70, "    protected void fireProxyElementFound(T result) {"], [71, "        listeners.forEach(listener -> listener.proxyElementFound(proxyResultHolder.getProxy(), locator, resultToList(result)));"], [72, "    }"], [73, ""], [74, "    /**"], [75, "     * Convert result to a list of selenium element."], [76, "     *"], [77, "     * @param result found result"], [78, "     * @return list of selenium element"], [79, "     */"], [80, "    protected abstract List<WebElement> resultToList(T result);"], [89, "        proxyResultHolder = new ProxyResultHolder<>();"], [92, "    /**"], [93, "     * Set the proxy using this handler."], [94, "     *"], [95, "     * @param proxy proxy using this handler"], [96, "     */"], [97, "    public void setProxy(T proxy) {"], [98, "        proxyResultHolder.setProxy(proxy);"], [101, "    /**"], [102, "     * Get the actual result of the locator."], [103, "     *"], [104, "     * @return result of the locator"], [105, "     */"], [106, "    public abstract T getLocatorResultImpl();"], [119, "                proxyResultHolder.setResult(null);"], [123, "                proxyResultHolder.setResult(getLocatorResultImpl());"], [124, "                fireProxyElementFound(proxyResultHolder.getResult());"], [126, "            return proxyResultHolder.getResult();"], [130, "    /**"], [131, "     * Get the stale status of the element."], [132, "     *"], [133, "     * @return true if element is stale, false otherwise"], [134, "     */"], [135, "    protected abstract boolean isStale();"], [136, ""], [137, "    /**"], [138, "     * Get the underlying element."], [139, "     *"], [140, "     * @return underlying element"], [141, "     */"], [142, "    protected abstract WebElement getElement();"], [143, ""], [149, ""], [154, ""], [155, "            hooks = hookChainBuilder.build(this::getElement, () -> locator, () -> proxyResultHolder.getProxy().toString(), hookDefinitions);"], [171, "        return proxyResultHolder.isResultLoaded();"], [186, "        proxyResultHolder.setResult(null);"], [189, "    @Override"], [190, "    @SuppressWarnings({\"PMD.StdCyclomaticComplexity\", \"PMD.CyclomaticComplexity\", \"PMD.ModifiedCyclomaticComplexity\","], [191, "            \"PMD.NPathComplexity\"})"], [192, "    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {"], [193, "        if (TO_STRING.equals(method)) {"], [194, "            return proxyToString(!loaded() ? null : (String) invoke(method, args));"], [195, "        }"], [196, "        if (!loaded()) {"], [197, "            if (EQUALS.equals(method)) {"], [198, "                LocatorHandler otherLocatorHandler = LocatorProxies.getLocatorHandler(args[0]);"], [199, "                if (otherLocatorHandler != null) {"], [200, "                    if (!otherLocatorHandler.loaded() || args[0] == null) {"], [201, "                        return equals(otherLocatorHandler);"], [202, "                    } else {"], [203, "                        return args[0].equals(proxy);"], [204, "                    }"], [205, "                }"], [206, "            }"], [207, ""], [208, "            if (HASH_CODE.equals(method)) {"], [209, "                return HASH_CODE_SEED + locator.hashCode();"], [210, "            }"], [211, "        }"], [212, ""], [213, "        if (EQUALS.equals(method)) {"], [214, "            LocatorHandler otherLocatorHandler = LocatorProxies.getLocatorHandler(args[0]);"], [215, "            if (otherLocatorHandler != null && !otherLocatorHandler.loaded()) {"], [216, "                otherLocatorHandler.now();"], [217, "                return otherLocatorHandler.equals(this);"], [218, "            }"], [219, "        }"], [221, "        getLocatorResult();"], [223, "        return invokeWithRetry(method, args);"], [226, "    //CHECKSTYLE.OFF: IllegalThrows"], [227, "    private Object invokeWithRetry(Method method, Object[] args) throws Throwable {"], [228, "        Throwable lastThrowable = null;"], [229, "        for (int i = 0; i < MAX_RETRY; i++) {"], [230, "            try {"], [231, "                return invoke(method, args);"], [232, "            } catch (StaleElementReferenceException e) {"], [233, "                lastThrowable = e;"], [234, "                reset();"], [235, "                getLocatorResult(); // Reload the stale element"], [236, "            }"], [237, "        }"], [239, "        throw lastThrowable;"], [240, "    }"], [241, "    //CHECKSTYLE.ON: IllegalThrows"], [243, "    private Object invoke(Method method, Object[] args) throws Throwable {"], [244, "        try {"], [245, "            return method.invoke(getInvocationTarget(method), args);"], [246, "        } catch (InvocationTargetException e) {"], [247, "            // Unwrap the underlying exception"], [248, "            throw e.getCause();"], [249, "        }"], [250, "    }"], [274, ""], [275, "    @Override"], [276, "    public boolean equals(Object obj) {"], [277, "        if (this == obj) {"], [278, "            return true;"], [279, "        }"], [280, "        if (obj == null || getClass() != obj.getClass()) {"], [281, "            return false;"], [282, "        }"], [283, "        AbstractLocatorHandler<?> that = (AbstractLocatorHandler<?>) obj;"], [284, "        return Objects.equals(locator, that.locator);"], [285, "    }"], [286, ""], [287, "    @Override"], [288, "    public int hashCode() {"], [289, "        return Objects.hash(locator);"], [290, "    }"], [291, ""], [292, "    @Override"], [293, "    public String toString() {"], [294, "        return proxyToString(null);"], [295, "    }"]]}, "num_lines_added": 68, "num_lines_removed": 168}