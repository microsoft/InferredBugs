{"hash": "cb4c16bda28a915fc889c40664abd2210480b03d", "message": "#949 - Deduplication - last part - Moved common started/finished/failed logic into one class", "file_num_lines": 86, "diff_parsed": {"added": [[16, "import static org.fluentlenium.adapter.TestRunnerCommon.deleteCookies;"], [17, "import static org.fluentlenium.adapter.TestRunnerCommon.doHtmlDump;"], [18, "import static org.fluentlenium.adapter.TestRunnerCommon.doScreenshot;"], [19, "import static org.fluentlenium.adapter.TestRunnerCommon.getTestDriver;"], [20, "import static org.fluentlenium.adapter.TestRunnerCommon.quitMethodAndThreadDrivers;"], [84, "        SharedWebDriver sharedWebDriver = getTestDriver(testClass, testName,"], [85, "                this::newWebDriver, this::failed,"], [86, "                getConfiguration(), PARAMETERS_THREAD_LOCAL.get());"], [99, "        SharedWebDriver sharedWebDriver = SharedWebDriverContainer.INSTANCE"], [100, "                .getDriver(sharedMutator.getEffectiveParameters(testClass, testName, driverLifecycle));"], [102, "        quitMethodAndThreadDrivers(driverLifecycle, sharedWebDriver);"], [103, "        deleteCookies(sharedWebDriver, getConfiguration());"], [117, "            doScreenshot(testClass, testName, this, getConfiguration());"], [118, "            doHtmlDump(testClass, testName, this, getConfiguration());"]], "deleted": [[13, "import org.openqa.selenium.WebDriverException;"], [16, "import java.util.Optional;"], [17, "import java.util.concurrent.ExecutionException;"], [19, "import static org.apache.commons.lang3.StringUtils.isEmpty;"], [20, "import static org.fluentlenium.utils.ExceptionUtil.getCauseMessage;"], [84, "        SharedWebDriver sharedWebDriver;"], [85, ""], [86, "        try {"], [87, "            sharedWebDriver = SharedWebDriverContainer.INSTANCE.getSharedWebDriver("], [88, "                    PARAMETERS_THREAD_LOCAL.get(), null, this::newWebDriver, getConfiguration());"], [89, "        } catch (ExecutionException | InterruptedException e) {"], [90, "            this.failed(null, testClass, testName);"], [91, ""], [92, "            String causeMessage = getCauseMessage(e);"], [93, ""], [94, "            throw new WebDriverException(\"Browser failed to start, test [ \" + testName + \" ] execution interrupted.\""], [95, "                    + (isEmpty(causeMessage) ? \"\" : \"\\nCaused by: [ \" + causeMessage + \"]\"), e);"], [96, "        }"], [97, ""], [110, "        EffectiveParameters<?> parameters = sharedMutator.getEffectiveParameters(testClass, testName,"], [111, "                driverLifecycle);"], [112, "        SharedWebDriver sharedWebDriver = SharedWebDriverContainer.INSTANCE.getDriver(parameters);"], [113, ""], [114, "        if (driverLifecycle == DriverLifecycle.METHOD || driverLifecycle == DriverLifecycle.THREAD) {"], [115, "            Optional.ofNullable(sharedWebDriver).ifPresent(SharedWebDriverContainer.INSTANCE::quit);"], [116, "        }"], [117, ""], [118, "        if (getDeleteCookies()) {"], [119, "            Optional.ofNullable(sharedWebDriver).ifPresent(shared -> shared.getDriver().manage().deleteAllCookies());"], [120, "        }"], [135, "            try {"], [136, "                if (getScreenshotMode() == TriggerMode.AUTOMATIC_ON_FAIL && canTakeScreenShot()) {"], [137, "                    this.takeScreenshot(testClass.getSimpleName() + \"_\" + testName + \".png\");"], [138, "                }"], [139, "            } catch (Exception ignored) {"], [140, "            }"], [141, ""], [142, "            try {"], [143, "                if (getHtmlDumpMode() == TriggerMode.AUTOMATIC_ON_FAIL && getDriver() != null) {"], [144, "                    takeHtmlDump(testClass.getSimpleName() + \"_\" + testName + \".html\");"], [145, "                }"], [146, "            } catch (Exception ignored) {"], [147, "            }"], [148, ""]]}, "num_lines_added": 14, "num_lines_removed": 44}