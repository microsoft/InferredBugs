{"hash": "4e5557a770bc0750a78b01b2a1a78aa145b9fbf5", "message": "\u4f18\u5316\u4ee3\u7801\u7ed3\u6784", "file_num_lines": 117, "diff_parsed": {"added": [[29, "import com.github.pagehelper.util.ExecutorUtil;"], [46, " * Mybatis - \u901a\u7528\u5206\u9875\u62e6\u622a\u5668"], [47, " * <p>"], [48, " * GitHub: https://github.com/pagehelper/Mybatis-PageHelper"], [49, " * <p>"], [50, " * Gitee : https://gitee.com/free/Mybatis_PageHelper"], [57, "        {"], [58, "                @Signature(type = Executor.class, method = \"query\", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class}),"], [59, "                @Signature(type = Executor.class, method = \"query\", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class}),"], [60, "        }"], [65, "    protected Cache<String, MappedStatement> msCountMap = null;"], [66, "    private String default_dialect_class = \"com.github.pagehelper.PageHelper\";"], [80, "            if (args.length == 4) {"], [89, "            checkDialectExists();"], [96, "                    //\u67e5\u8be2\u603b\u6570"], [97, "                    Long count = count(executor, ms, parameter, rowBounds, resultHandler, boundSql);"], [98, "                    //\u5904\u7406\u67e5\u8be2\u603b\u6570\uff0c\u8fd4\u56de true \u65f6\u7ee7\u7eed\u5206\u9875\u67e5\u8be2\uff0cfalse \u65f6\u76f4\u63a5\u8fd4\u56de"], [104, "                resultList = ExecutorUtil.pageQuery(dialect, executor,"], [105, "                        ms, parameter, rowBounds, resultHandler, boundSql, cacheKey);"], [117, "     * Spring bean \u65b9\u5f0f\u914d\u7f6e\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u914d\u7f6e\u5c5e\u6027\u5c31\u4e0d\u4f1a\u6267\u884c\u4e0b\u9762\u7684 setProperties \u65b9\u6cd5\uff0c\u5c31\u4e0d\u4f1a\u521d\u59cb\u5316"], [118, "     * <p>"], [119, "     * \u56e0\u6b64\u8fd9\u91cc\u4f1a\u51fa\u73b0 null \u7684\u60c5\u51b5 fixed #26"], [121, "    private void checkDialectExists() {"], [122, "        if (dialect == null) {"], [123, "            synchronized (default_dialect_class) {"], [124, "                if (dialect == null) {"], [125, "                    setProperties(new Properties());"], [126, "                }"], [127, "            }"], [131, "    private Long count(Executor executor, MappedStatement ms, Object parameter,"], [132, "                       RowBounds rowBounds, ResultHandler resultHandler,"], [133, "                       BoundSql boundSql) throws SQLException {"], [134, "        String countMsId = ms.getId() + countSuffix;"], [135, "        Long count;"], [136, "        //\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u624b\u5199\u7684 count \u67e5\u8be2"], [137, "        MappedStatement countMs = ExecutorUtil.getExistedMappedStatement(ms.getConfiguration(), countMsId);"], [138, "        if (countMs != null) {"], [139, "            count = ExecutorUtil.executeManualCount(executor, countMs, parameter, boundSql, resultHandler);"], [140, "        } else {"], [141, "            countMs = msCountMap.get(countMsId);"], [142, "            //\u81ea\u52a8\u521b\u5efa"], [143, "            if (countMs == null) {"], [144, "                //\u6839\u636e\u5f53\u524d\u7684 ms \u521b\u5efa\u4e00\u4e2a\u8fd4\u56de\u503c\u4e3a Long \u7c7b\u578b\u7684 ms"], [145, "                countMs = MSUtils.newCountMappedStatement(ms, countMsId);"], [146, "                msCountMap.put(countMsId, countMs);"], [147, "            }"], [148, "            count = ExecutorUtil.executeAutoCount(dialect, executor, countMs, parameter, boundSql, rowBounds, resultHandler);"], [150, "        return count;"]], "deleted": [[36, "import org.apache.ibatis.session.Configuration;"], [40, "import java.lang.reflect.Field;"], [44, "import java.util.Map;"], [48, " * Mybatis - \u901a\u7528\u5206\u9875\u62e6\u622a\u5668<br/>"], [49, " * \u9879\u76ee\u5730\u5740 : http://git.oschina.net/free/Mybatis_PageHelper"], [56, "    {"], [57, "        @Signature(type = Executor.class, method = \"query\", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class}),"], [58, "        @Signature(type = Executor.class, method = \"query\", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class}),"], [59, "    }"], [62, "    //\u7f13\u5b58count\u67e5\u8be2\u7684ms"], [63, "    protected Cache<String, MappedStatement> msCountMap = null;"], [65, "    private String default_dialect_class = \"com.github.pagehelper.PageHelper\";"], [66, "    private Field additionalParametersField;"], [81, "            if(args.length == 4){"], [91, "            // Spring bean \u65b9\u5f0f\u914d\u7f6e\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u914d\u7f6e\u5c5e\u6027\u5c31\u4e0d\u4f1a\u6267\u884c\u4e0b\u9762\u7684 setProperties \u65b9\u6cd5\uff0c\u5c31\u4e0d\u4f1a\u521d\u59cb\u5316"], [92, "            // \u56e0\u6b64\u8fd9\u91cc\u4f1a\u51fa\u73b0 null \u7684\u60c5\u51b5 fixed #26"], [93, "            if(dialect == null){"], [94, "                synchronized (default_dialect_class){"], [95, "                    if(dialect == null){"], [96, "                        setProperties(new Properties());"], [97, "                    }"], [98, "                }"], [99, "            }"], [103, "                //\u53cd\u5c04\u83b7\u53d6\u52a8\u6001\u53c2\u6570"], [104, "                String msId = ms.getId();"], [105, "                Configuration configuration = ms.getConfiguration();"], [106, "                Map<String, Object> additionalParameters = (Map<String, Object>) additionalParametersField.get(boundSql);"], [109, "                    String countMsId = msId + countSuffix;"], [110, "                    Long count;"], [111, "                    //\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u624b\u5199\u7684 count \u67e5\u8be2"], [112, "                    MappedStatement countMs = getExistedMappedStatement(configuration, countMsId);"], [113, "                    if(countMs != null){"], [114, "                        count = executeManualCount(executor, countMs, parameter, boundSql, resultHandler);"], [115, "                    } else {"], [116, "                        countMs = msCountMap.get(countMsId);"], [117, "                        //\u81ea\u52a8\u521b\u5efa"], [118, "                        if (countMs == null) {"], [119, "                            //\u6839\u636e\u5f53\u524d\u7684 ms \u521b\u5efa\u4e00\u4e2a\u8fd4\u56de\u503c\u4e3a Long \u7c7b\u578b\u7684 ms"], [120, "                            countMs = MSUtils.newCountMappedStatement(ms, countMsId);"], [121, "                            msCountMap.put(countMsId, countMs);"], [122, "                        }"], [123, "                        count = executeAutoCount(executor, countMs, parameter, boundSql, rowBounds, resultHandler);"], [124, "                    }"], [125, "                    //\u5904\u7406\u67e5\u8be2\u603b\u6570"], [126, "                    //\u8fd4\u56de true \u65f6\u7ee7\u7eed\u5206\u9875\u67e5\u8be2\uff0cfalse \u65f6\u76f4\u63a5\u8fd4\u56de"], [132, "                //\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u5206\u9875\u67e5\u8be2"], [133, "                if (dialect.beforePage(ms, parameter, rowBounds)) {"], [134, "                    //\u751f\u6210\u5206\u9875\u7684\u7f13\u5b58 key"], [135, "                    CacheKey pageKey = cacheKey;"], [136, "                    //\u5904\u7406\u53c2\u6570\u5bf9\u8c61"], [137, "                    parameter = dialect.processParameterObject(ms, parameter, boundSql, pageKey);"], [138, "                    //\u8c03\u7528\u65b9\u8a00\u83b7\u53d6\u5206\u9875 sql"], [139, "                    String pageSql = dialect.getPageSql(ms, boundSql, parameter, rowBounds, pageKey);"], [140, "                    BoundSql pageBoundSql = new BoundSql(configuration, pageSql, boundSql.getParameterMappings(), parameter);"], [141, "                    //\u8bbe\u7f6e\u52a8\u6001\u53c2\u6570"], [142, "                    for (String key : additionalParameters.keySet()) {"], [143, "                        pageBoundSql.setAdditionalParameter(key, additionalParameters.get(key));"], [144, "                    }"], [145, "                    //\u6267\u884c\u5206\u9875\u67e5\u8be2"], [146, "                    resultList = executor.query(ms, parameter, RowBounds.DEFAULT, resultHandler, pageKey, pageBoundSql);"], [147, "                } else {"], [148, "                    //\u4e0d\u6267\u884c\u5206\u9875\u7684\u60c5\u51b5\u4e0b\uff0c\u4e5f\u4e0d\u6267\u884c\u5185\u5b58\u5206\u9875"], [149, "                    resultList = executor.query(ms, parameter, RowBounds.DEFAULT, resultHandler, cacheKey, boundSql);"], [150, "                }"], [162, "     * \u6267\u884c\u624b\u52a8\u8bbe\u7f6e\u7684 count \u67e5\u8be2\uff0c\u8be5\u67e5\u8be2\u652f\u6301\u7684\u53c2\u6570\u5fc5\u987b\u548c\u88ab\u5206\u9875\u7684\u65b9\u6cd5\u76f8\u540c"], [163, "     *"], [164, "     * @param executor"], [165, "     * @param countMs"], [166, "     * @param parameter"], [167, "     * @param boundSql"], [168, "     * @param resultHandler"], [169, "     * @return"], [170, "     * @throws IllegalAccessException"], [171, "     * @throws SQLException"], [173, "    private Long executeManualCount(Executor executor, MappedStatement countMs,"], [174, "                                   Object parameter, BoundSql boundSql,"], [175, "                                   ResultHandler resultHandler) throws IllegalAccessException, SQLException {"], [176, "        CacheKey countKey = executor.createCacheKey(countMs, parameter, RowBounds.DEFAULT, boundSql);"], [177, "        BoundSql countBoundSql = countMs.getBoundSql(parameter);"], [178, "        Object countResultList = executor.query(countMs, parameter, RowBounds.DEFAULT, resultHandler, countKey, countBoundSql);"], [179, "        Long count = ((Number) ((List) countResultList).get(0)).longValue();"], [180, "        return count;"], [181, "    }"], [182, ""], [183, "    /**"], [184, "     * \u6267\u884c\u81ea\u52a8\u751f\u6210\u7684 count \u67e5\u8be2"], [185, "     *"], [186, "     * @param executor"], [187, "     * @param countMs"], [188, "     * @param parameter"], [189, "     * @param boundSql"], [190, "     * @param rowBounds"], [191, "     * @param resultHandler"], [192, "     * @return"], [193, "     * @throws IllegalAccessException"], [194, "     * @throws SQLException"], [195, "     */"], [196, "    private Long executeAutoCount(Executor executor, MappedStatement countMs,"], [197, "                                   Object parameter, BoundSql boundSql,"], [198, "                                   RowBounds rowBounds, ResultHandler resultHandler) throws IllegalAccessException, SQLException {"], [199, "        Map<String, Object> additionalParameters = (Map<String, Object>) additionalParametersField.get(boundSql);"], [200, "        //\u521b\u5efa count \u67e5\u8be2\u7684\u7f13\u5b58 key"], [201, "        CacheKey countKey = executor.createCacheKey(countMs, parameter, RowBounds.DEFAULT, boundSql);"], [202, "        //\u8c03\u7528\u65b9\u8a00\u83b7\u53d6 count sql"], [203, "        String countSql = dialect.getCountSql(countMs, boundSql, parameter, rowBounds, countKey);"], [204, "        //countKey.update(countSql);"], [205, "        BoundSql countBoundSql = new BoundSql(countMs.getConfiguration(), countSql, boundSql.getParameterMappings(), parameter);"], [206, "        //\u5f53\u4f7f\u7528\u52a8\u6001 SQL \u65f6\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e34\u65f6\u7684\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u9700\u8981\u624b\u52a8\u8bbe\u7f6e\u5230\u65b0\u7684 BoundSql \u4e2d"], [207, "        for (String key : additionalParameters.keySet()) {"], [208, "            countBoundSql.setAdditionalParameter(key, additionalParameters.get(key));"], [210, "        //\u6267\u884c count \u67e5\u8be2"], [211, "        Object countResultList = executor.query(countMs, parameter, RowBounds.DEFAULT, resultHandler, countKey, countBoundSql);"], [212, "        Long count = (Long) ((List) countResultList).get(0);"], [213, "        return count;"], [216, "    /**"], [217, "     * \u5c1d\u8bd5\u83b7\u53d6\u5df2\u7ecf\u5b58\u5728\u7684\u5728 MS\uff0c\u63d0\u4f9b\u5bf9\u624b\u5199count\u548cpage\u7684\u652f\u6301"], [218, "     *"], [219, "     * @param configuration"], [220, "     * @param msId"], [221, "     * @return"], [222, "     */"], [223, "    private MappedStatement getExistedMappedStatement(Configuration configuration, String msId){"], [224, "        MappedStatement mappedStatement = null;"], [225, "        try {"], [226, "            mappedStatement = configuration.getMappedStatement(msId, false);"], [227, "        } catch (Throwable t){"], [228, "            //ignore"], [230, "        return mappedStatement;"], [258, ""], [259, "        try {"], [260, "            //\u53cd\u5c04\u83b7\u53d6 BoundSql \u4e2d\u7684 additionalParameters \u5c5e\u6027"], [261, "            additionalParametersField = BoundSql.class.getDeclaredField(\"additionalParameters\");"], [262, "            additionalParametersField.setAccessible(true);"], [263, "        } catch (NoSuchFieldException e) {"], [264, "            throw new PageException(e);"], [265, "        }"]]}, "num_lines_added": 48, "num_lines_removed": 136}