{"hash": "ff80555537ef103f73258115fc766bbe89c430a0", "message": "PHOENIX-4229 - Parent-Child linking rows in System.Catalog break tenant view replication", "file_num_lines": 166, "diff_parsed": {"added": [[35, "import org.apache.phoenix.util.SchemaUtil;"], [126, "    Get tenantViewGet = getTenantViewGet(catalogTable, TENANT_BYTES, TENANT_VIEW_NAME);"], [127, "    Get nonTenantViewGet = getTenantViewGet(catalogTable,"], [128, "        DEFAULT_TENANT_BYTES, NONTENANT_VIEW_NAME);"], [130, "    Get tenantLinkGet = getParentChildLinkGet(catalogTable, TENANT_BYTES, TENANT_VIEW_NAME);"], [131, "    Get nonTenantLinkGet = getParentChildLinkGet(catalogTable,"], [132, "        DEFAULT_TENANT_BYTES, NONTENANT_VIEW_NAME);"], [133, ""], [134, "    WAL.Entry nonTenantViewEntry = getEntry(systemCatalogTableName, nonTenantViewGet);"], [135, "    WAL.Entry tenantViewEntry = getEntry(systemCatalogTableName, tenantViewGet);"], [136, ""], [137, "    WAL.Entry nonTenantLinkEntry = getEntry(systemCatalogTableName, nonTenantLinkGet);"], [138, "    WAL.Entry tenantLinkEntry = getEntry(systemCatalogTableName, tenantLinkGet);"], [142, "    Assert.assertNull(filter.filter(nonTenantViewEntry));"], [143, "    WAL.Entry filteredTenantEntry = filter.filter(tenantViewEntry);"], [145, "    Assert.assertEquals(tenantViewEntry.getEdit().size(),"], [146, "        filter.filter(tenantViewEntry).getEdit().size());"], [151, "    comboEdit.getCells().addAll(nonTenantViewEntry.getEdit().getCells());"], [152, "    comboEdit.getCells().addAll(tenantViewEntry.getEdit().getCells());"], [155, "    Assert.assertEquals(tenantViewEntry.getEdit().size() + nonTenantViewEntry.getEdit().size()"], [157, "    Assert.assertEquals(tenantViewEntry.getEdit().size(),"], [159, ""], [160, "    //now check that the parent-child links (which have the tenant_id of the view's parent,"], [161, "    // but are a part of the view's metadata) are migrated in the tenant case"], [162, "    // but not the non-tenant. The view's tenant_id is in th System.Catalog.COLUMN_NAME field"], [163, ""], [164, "    Assert.assertNull(\"Non-tenant parent-child link was not filtered \" +"], [165, "        \"when it should be!\", filter.filter(nonTenantLinkEntry));"], [166, "    Assert.assertNotNull(\"Tenant parent-child link was filtered when it should not be!\","], [167, "        filter.filter(tenantLinkEntry));"], [168, "    Assert.assertEquals(tenantLinkEntry.getEdit().size(),"], [169, "        filter.filter(tenantLinkEntry).getEdit().size());"], [170, "    //add the parent-child link to the tenant view WAL entry,"], [171, "    //since they'll usually be together and they both need to"], [172, "    //be replicated"], [173, ""], [174, "    tenantViewEntry.getEdit().getCells().addAll(tenantLinkEntry.getEdit().getCells());"], [175, "    Assert.assertEquals(tenantViewEntry.getEdit().size(), tenantViewEntry.getEdit().size());"], [176, ""], [177, ""], [180, "  public Get getTenantViewGet(PTable catalogTable, byte[] tenantBytes, String viewName) {"], [182, "    tenantKeyParts[0] = tenantBytes;"], [194, "  public Get getParentChildLinkGet(PTable catalogTable, byte[] tenantBytes, String viewName) {"], [195, "    /* For parent-child link, the system.catalog key becomes"], [196, "      1. Parent tenant id"], [197, "      2. Parent Schema"], [198, "      3. Parent Table name"], [199, "      4. View tenant_id"], [200, "      5. Combined view SCHEMA.TABLENAME"], [201, "     */"], [202, "    byte[][] tenantKeyParts = new byte[5][];"], [203, "    tenantKeyParts[0] = null; //null tenant_id"], [204, "    tenantKeyParts[1] = null; //null parent schema"], [205, "    tenantKeyParts[2] = Bytes.toBytes(TestUtil.ENTITY_HISTORY_TABLE_NAME);"], [206, "    tenantKeyParts[3] = tenantBytes;"], [207, "    tenantKeyParts[4] = Bytes.toBytes(SchemaUtil.getTableName(SCHEMA_NAME.toUpperCase(), viewName.toUpperCase()));"], [208, "    ImmutableBytesWritable key = new ImmutableBytesWritable();"], [209, "    catalogTable.newKey(key, tenantKeyParts);"], [210, "    //the backing byte array of key might have extra space at the end."], [211, "    // need to just slice \"the good parts\" which we do by calling copyBytes"], [212, "    return new Get(key.copyBytes());"], [213, ""], [214, "  }"], [215, ""], [229, "      Assert.assertTrue(\"Didn't retrieve any cells from SYSTEM.CATALOG\","], [230, "          edit.getCells().size() > 0);"]], "deleted": [[125, "    Get tenantGet = getGet(catalogTable, TENANT_BYTES, TENANT_VIEW_NAME);"], [126, "    Get nonTenantGet = getGet(catalogTable, DEFAULT_TENANT_BYTES, NONTENANT_VIEW_NAME);"], [128, "    WAL.Entry nonTenantEntry = getEntry(systemCatalogTableName, nonTenantGet);"], [129, "    WAL.Entry tenantEntry = getEntry(systemCatalogTableName, tenantGet);"], [133, "    Assert.assertNull(filter.filter(nonTenantEntry));"], [134, "    WAL.Entry filteredTenantEntry = filter.filter(tenantEntry);"], [136, "    Assert.assertEquals(tenantEntry.getEdit().size(),"], [137, "        filter.filter(tenantEntry).getEdit().size());"], [142, "    comboEdit.getCells().addAll(nonTenantEntry.getEdit().getCells());"], [143, "    comboEdit.getCells().addAll(tenantEntry.getEdit().getCells());"], [146, "    Assert.assertEquals(tenantEntry.getEdit().size() + nonTenantEntry.getEdit().size()"], [148, "    Assert.assertEquals(tenantEntry.getEdit().size(),"], [152, "  public Get getGet(PTable catalogTable, byte[] tenantId, String viewName) {"], [154, "    tenantKeyParts[0] = tenantId;"], [179, "      Assert.assertTrue(\"Didn't retrieve any cells from SYSTEM.CATALOG\", edit.getCells().size() > 0);"]]}, "num_lines_added": 66, "num_lines_removed": 15}