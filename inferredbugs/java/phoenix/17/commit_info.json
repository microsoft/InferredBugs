{"hash": "caa0dbb46a47945eaa384b31f7a2ba8e9c7a6c08", "message": "PHOENIX-2337 - Pherf - Prefix values override rule values for writes", "file_num_lines": 256, "diff_parsed": {"added": [[22, "import org.apache.commons.lang.StringUtils;"], [119, "        String prefix = \"\";"], [124, "        // Return an empty value if we fall within the configured probability of null"], [129, "        if (column.getPrefix() != null) {"], [130, "            prefix = column.getPrefix();"], [131, "        }"], [132, ""], [133, "        if (prefix.length() >= length) {"], [134, "            logger.warn(\"You are attempting to generate data with a prefix (\" + prefix + \") \""], [135, "                    + \"That is longer than expected overall field length (\" + length + \"). \""], [136, "                    + \"This will certainly lead to unexpected data values.\");"], [137, "        }"], [138, ""], [143, "                    data = pickDataValueFromList(dataValues);"], [149, "                        data = getRandomDataValue(column);"], [155, "                    data = pickDataValueFromList(dataValues);"], [161, "                        data = getRandomDataValue(column);"], [167, "                    data = pickDataValueFromList(dataValues);"], [187, "                    data = pickDataValueFromList(dataValues);"], [198, "                    data = pickDataValueFromList(dataValues);"], [211, "        Preconditions.checkArgument(data != null,"], [212, "                \"Data value could not be generated for some reason. Please check configs\");"], [253, "    private DataValue pickDataValueFromList(List<DataValue> values) throws Exception{"], [272, "            generatedDataValue = pickDataValueFromList(valueRule);"], [285, "    private DataValue pickDataValueFromList(final DataValue valueRule) throws Exception{"], [346, "    public Column getRule(Column phxMetaColumn) {"], [347, "        // Assume the first rule map"], [348, "        Map<DataTypeMapping, List> ruleMap = modelList.get(0);"], [349, ""], [350, "        List<Column> ruleList = ruleMap.get(phxMetaColumn.getType());"], [351, "        return getColumnForRule(ruleList, phxMetaColumn);"], [352, "    }"], [353, ""], [386, "        varchar = (column.getPrefix() != null) ? column.getPrefix() + strInc + varchar :"], [387, "                strInc + varchar;"], [388, ""], [389, "        // Truncate string back down if it exceeds length"], [390, "        varchar = StringUtils.left(varchar,column.getLength());"], [391, "        data = new DataValue(column.getType(), varchar);"], [394, ""], [395, "    private DataValue getRandomDataValue(Column column) {"], [396, "        String varchar = RandomStringUtils.randomAlphanumeric(column.getLength());"], [397, "        varchar = (column.getPrefix() != null) ? column.getPrefix() + varchar : varchar;"], [398, ""], [399, "        // Truncate string back down if it exceeds length"], [400, "        varchar = StringUtils.left(varchar, column.getLength());"], [401, "        return new DataValue(column.getType(), varchar);"], [402, "    }"]], "deleted": [[100, "                synchronized (value) {"], [101, "                    // Add the prefix to the value if it exists."], [102, "                    if (columnRule.getPrefix() != null) {"], [103, "                        value.setValue(columnRule.getPrefix() + value.getValue());"], [104, "                    }"], [105, "                }"], [106, ""], [129, "        // Return an empty value if we we fall within the configured probability"], [138, "                    data = generateDataValue(dataValues);"], [144, "                        String varchar = RandomStringUtils.randomAlphanumeric(length);"], [145, "                        data = new DataValue(column.getType(), varchar);"], [151, "                    data = generateDataValue(dataValues);"], [157, "                        String varchar = RandomStringUtils.randomAlphanumeric(length);"], [158, "                        data = new DataValue(column.getType(), varchar);"], [164, "                    data = generateDataValue(dataValues);"], [184, "                    data = generateDataValue(dataValues);"], [195, "                    data = generateDataValue(dataValues);"], [208, "        Preconditions.checkArgument(data != null, \"Data value could not be generated for some reason. Please check configs\");"], [249, "    private DataValue generateDataValue(List<DataValue> values) throws Exception{"], [268, "            generatedDataValue = generateDataValue(valueRule);"], [281, "    private DataValue generateDataValue(final DataValue valueRule) throws Exception{"], [374, "        data = new DataValue(column.getType(), strInc + varchar);"]]}, "num_lines_added": 48, "num_lines_removed": 22}