{"hash": "218a71c07259a6ac4660335bf3636325e1ee138d", "message": "PHOENIX-6026: Fix BackwardCompatibilityIT so it can run locally", "file_num_lines": 312, "diff_parsed": {"added": [[24, "import static org.junit.Assert.assertNotNull;"], [30, "import java.io.FileNotFoundException;"], [33, "import java.io.InputStream;"], [35, "import java.net.URL;"], [86, "    private static final String SQL_DIR = \"sql_files/\";"], [87, "    private static final String RESULT_DIR = \"gold_files/\";"], [89, "            \"compatible_client_versions.json\";"], [90, "    private static final String BASH = \"/bin/bash\";"], [91, "    private static final String EXECUTE_QUERY_SH = \"scripts/execute_query.sh\";"], [101, "    private static final String MVN_HOME = \"maven.home\";"], [102, "    private static final String JAVA_TMP_DIR = \"java.io.tmpdir\";"], [129, "        checkForPreConditions();"], [152, "        try (InputStream inputStream = BackwardCompatibilityIT.class"], [153, "                .getClassLoader().getResourceAsStream(COMPATIBLE_CLIENTS_JSON)) {"], [154, "            assertNotNull(inputStream);"], [155, "            JsonNode jsonNode = mapper.readTree(inputStream);"], [156, "            JsonNode HBaseProfile = jsonNode.get(hbaseProfile);"], [157, "            for (final JsonNode clientVersion : HBaseProfile) {"], [158, "                clientVersions.add(clientVersion.textValue() + \"-HBase-\" + hbaseProfile);"], [159, "            }"], [170, "     * @throws Exception thrown if any errors encountered during query execution or file IO"], [177, "        assertExpectedOutput(CREATE_ADD, QUERY);"], [186, "     * @throws Exception thrown if any errors encountered during query execution or file IO"], [193, "        assertExpectedOutput(CREATE_ADD, QUERY);"], [204, "     * @throws Exception thrown if any errors encountered during query execution or file IO"], [211, "        assertExpectedOutput(CREATE_ADD, QUERY);"], [216, "        assertExpectedOutput(ADD_DATA, QUERY_MORE);"], [227, "     * @throws Exception thrown if any errors encountered during query execution or file IO"], [234, "        assertExpectedOutput(CREATE_ADD, QUERY);"], [239, "        assertExpectedOutput(ADD_DATA, QUERY_MORE);"], [249, "     * @throws Exception thrown if any errors encountered during query execution or file IO"], [256, "        assertExpectedOutput(CREATE_ADD, QUERY);"], [261, "        assertExpectedOutput(ADD_DELETE, QUERY_ADD_DELETE);"], [271, "     * @throws Exception thrown if any errors encountered during query execution or file IO"], [278, "        assertExpectedOutput(CREATE_ADD, QUERY);"], [283, "        assertExpectedOutput(ADD_DELETE, QUERY_ADD_DELETE);"], [293, "                ConnectionFactory.createConnection(conf);"], [294, "                Admin admin = conn.getAdmin()) {"], [295, "            assertFalse(admin.tableExists(TableName.valueOf(QueryConstants.SYSTEM_SCHEMA_NAME,"], [297, "        }"], [305, "        // Note that auto-commit is true for queries executed via SQLline"], [306, "        URL fileUrl = BackwardCompatibilityIT.class.getClassLoader().getResource(EXECUTE_QUERY_SH);"], [307, "        assertNotNull(fileUrl);"], [308, "        cmdParams.add(new File(fileUrl.getFile()).getAbsolutePath());"], [312, "        fileUrl = BackwardCompatibilityIT.class.getClassLoader()"], [313, "                .getResource(SQL_DIR + operation + SQL_EXTENSION);"], [314, "        assertNotNull(fileUrl);"], [315, "        cmdParams.add(new File(fileUrl.getFile()).getAbsolutePath());"], [316, "        fileUrl = BackwardCompatibilityIT.class.getClassLoader().getResource(RESULT_DIR);"], [317, "        assertNotNull(fileUrl);"], [318, "        cmdParams.add(new File(fileUrl.getFile()).getAbsolutePath() + \"/\" +"], [319, "                RESULT_PREFIX + operation + TEXT_EXTENSION);"], [320, "        cmdParams.add(System.getProperty(JAVA_TMP_DIR));"], [321, ""], [322, "        if (System.getProperty(MVN_HOME) != null) {"], [323, "            cmdParams.add(System.getProperty(MVN_HOME));"], [333, "                try (BufferedReader reader = new BufferedReader("], [334, "                            new InputStreamReader(p.getErrorStream()))) {"], [335, "                    String line;"], [340, "                    sb.append(e.getMessage());"], [345, "        p.waitFor();"], [346, "        assertEquals(sb.toString(), 0, p.exitValue());"], [350, "    private void executeQueriesWithCurrentVersion(String operation) throws Exception {"], [354, "            try (BufferedReader reader ="], [355, "                    getBufferedReaderForResource(SQL_DIR + operation + SQL_EXTENSION)) {"], [356, "                String sqlCommand;"], [357, "                while ((sqlCommand = reader.readLine()) != null) {"], [358, "                    sqlCommand = sqlCommand.trim();"], [359, "                    if (sqlCommand.length() == 0 || sqlCommand.startsWith(\"/\")"], [360, "                            || sqlCommand.startsWith(\"*\")) {"], [361, "                        continue;"], [362, "                    }"], [363, "                    sb.append(sqlCommand);"], [364, "                }"], [366, "            ResultSet rs;"], [368, ""], [369, "            URL fileUrl = BackwardCompatibilityIT.class.getClassLoader().getResource(RESULT_DIR);"], [370, "            assertNotNull(fileUrl);"], [371, "            final String resultFile = new File(fileUrl.getFile()).getAbsolutePath() + \"/\" +"], [372, "                    RESULT_PREFIX + operation + TEXT_EXTENSION;"], [373, "            try (BufferedWriter br = new BufferedWriter(new FileWriter(resultFile))) {"], [374, "                for (String command : sqlCommands) {"], [375, "                    try (PreparedStatement stmt = conn.prepareStatement(command)) {"], [376, "                        stmt.execute();"], [377, "                        rs = stmt.getResultSet();"], [378, "                        if (rs != null) {"], [379, "                            saveResultSet(rs, br);"], [380, "                        }"], [385, "        }"], [392, "        StringBuilder row = new StringBuilder(formatStringWithQuotes(rsm.getColumnName(1)));"], [394, "            row.append(\",\").append(formatStringWithQuotes(rsm.getColumnName(i)));"], [396, "        br.write(row.toString());"], [399, "            row = new StringBuilder(formatStringWithQuotes(rs.getString(1)));"], [401, "                row.append(\",\").append(formatStringWithQuotes(rs.getString(i)));"], [403, "            br.write(row.toString());"], [412, "    private BufferedReader getBufferedReaderForResource(String relativePath)"], [413, "            throws FileNotFoundException {"], [414, "        URL fileUrl = getClass().getClassLoader().getResource(relativePath);"], [415, "        assertNotNull(fileUrl);"], [416, "        return new BufferedReader(new FileReader(new File(fileUrl.getFile())));"], [417, "    }"], [418, ""], [421, "    private void assertExpectedOutput(String gold, String result) throws Exception {"], [424, "        String line;"], [425, "        try (BufferedReader resultFileReader = getBufferedReaderForResource("], [426, "                RESULT_DIR + RESULT_PREFIX + result + TEXT_EXTENSION)) {"], [427, "            while ((line = resultFileReader.readLine()) != null) {"], [428, "                resultFile.add(line.trim());"], [429, "            }"], [431, "        try (BufferedReader goldFileReader = getBufferedReaderForResource("], [432, "                RESULT_DIR + \"gold_query_\" + gold + TEXT_EXTENSION)) {"], [433, "            while ((line = goldFileReader.readLine()) != null) {"], [434, "                line = line.trim();"], [435, "                if ( !(line.isEmpty() || line.startsWith(\"*\") || line.startsWith(\"/\"))) {"], [436, "                    goldFile.add(line);"], [437, "                }"], [438, "            }"], [445, "        assertEquals(resultFile, goldFile);"]], "deleted": [[24, "import static org.junit.Assert.assertTrue;"], [83, "    private static final String SQL_DIR = \"src/it/resources/sql_files/\";"], [84, "    private static final String RESULT_DIR = \"src/it/resources/gold_files/\";"], [86, "            \"src/it/resources/compatible_client_versions.json\";"], [144, "        JsonNode jsonNode = mapper.readTree(new FileReader(COMPATIBLE_CLIENTS_JSON));"], [145, "        JsonNode HBaseProfile = jsonNode.get(hbaseProfile);"], [146, "        for (final JsonNode clientVersion : HBaseProfile) {"], [147, "            clientVersions.add(clientVersion.textValue() + \"-HBase-\" + hbaseProfile);"], [158, "     * @throws Exception"], [162, "        checkForPreConditions();"], [166, "        assertTrue(compareOutput(CREATE_ADD, QUERY));"], [175, "     * @throws Exception"], [179, "        checkForPreConditions();"], [183, "        assertTrue(compareOutput(CREATE_ADD, QUERY));"], [194, "     * @throws Exception"], [198, "        checkForPreConditions();"], [202, "        assertTrue(compareOutput(CREATE_ADD, QUERY));"], [207, "        assertTrue(compareOutput(ADD_DATA, QUERY_MORE));"], [218, "     * @throws Exception"], [222, "        checkForPreConditions();"], [226, "        assertTrue(compareOutput(CREATE_ADD, QUERY));"], [231, "        assertTrue(compareOutput(ADD_DATA, QUERY_MORE));"], [241, "     * @throws Exception"], [245, "        checkForPreConditions();"], [249, "        assertTrue(compareOutput(CREATE_ADD, QUERY));"], [254, "        assertTrue(compareOutput(ADD_DELETE, QUERY_ADD_DELETE));"], [264, "     * @throws Exception"], [268, "        checkForPreConditions();"], [272, "        assertTrue(compareOutput(CREATE_ADD, QUERY));"], [277, "        assertTrue(compareOutput(ADD_DELETE, QUERY_ADD_DELETE));"], [287, "                ConnectionFactory.createConnection(conf)) {"], [288, "            Admin admin = conn.getAdmin();"], [289, "            assertFalse(admin.tableExists(TableName.valueOf(QueryConstants.SYSTEM_SCHEMA_NAME,"], [291, "        }"], [297, "        String BASH = \"/bin/bash\";"], [298, "        String EXECUTE_QUERY_SH = \"src/it/scripts/execute_query.sh\";"], [299, ""], [302, "        cmdParams.add(EXECUTE_QUERY_SH);"], [306, "        cmdParams.add(new File(SQL_DIR + operation + SQL_EXTENSION).getAbsolutePath());"], [307, "        cmdParams.add("], [308, "            new File(RESULT_DIR + RESULT_PREFIX + operation + TEXT_EXTENSION).getAbsolutePath());"], [309, "        cmdParams.add(System.getProperty(\"java.io.tmpdir\"));"], [310, ""], [311, "        if (System.getProperty(\"maven.home\") != null) {"], [312, "            cmdParams.add(System.getProperty(\"maven.home\"));"], [322, "                try {"], [323, "                    BufferedReader reader = new BufferedReader("], [324, "                            new InputStreamReader(p.getErrorStream()));"], [325, "                    String line = null;"], [329, "                    reader.close();"], [331, "                    e.printStackTrace();"], [336, "        assertEquals(sb.toString(), 0, p.waitFor());"], [340, "    private ResultSet executeQueriesWithCurrentVersion(String operation) throws Exception {"], [344, "            BufferedReader reader ="], [345, "                    new BufferedReader(new FileReader(SQL_DIR + operation + SQL_EXTENSION));"], [346, "            String sqlCommand;"], [347, "            ResultSet rs = null;"], [348, "            while ((sqlCommand = reader.readLine()) != null) {"], [349, "                sqlCommand = sqlCommand.trim();"], [350, "                if (sqlCommand.length() == 0 || sqlCommand.startsWith(\"/\") || sqlCommand.startsWith(\"*\")) continue;"], [351, "                sb.append(sqlCommand);"], [353, "            reader.close();"], [354, ""], [356, "            try (BufferedWriter br = new BufferedWriter("], [357, "                new FileWriter(RESULT_DIR + RESULT_PREFIX + operation + TEXT_EXTENSION))) {"], [358, "                for (int i = 0; i < sqlCommands.length; i++) {"], [359, "                    PreparedStatement stmt = conn.prepareStatement(sqlCommands[i]);"], [360, "                    stmt.execute();"], [361, "                    rs = stmt.getResultSet();"], [362, "                    if (rs != null) {"], [363, "                        saveResultSet(rs, br);"], [367, "                return rs;"], [369, "        }"], [376, "        String row = formatStringWithQuotes(rsm.getColumnName(1));"], [378, "            row = row + \",\" + formatStringWithQuotes(rsm.getColumnName(i));"], [380, "        br.write(row);"], [383, "            row = formatStringWithQuotes(rs.getString(1));"], [385, "                row = row + \",\" + formatStringWithQuotes(rs.getString(i));"], [387, "            br.write(row);"], [398, "    private boolean compareOutput(String gold, String result) throws Exception {"], [399, "        BufferedReader goldFileReader = new BufferedReader(new FileReader("], [400, "                        new File(RESULT_DIR + \"gold_query_\" + gold + TEXT_EXTENSION)));"], [401, "        BufferedReader resultFileReader = new BufferedReader(new FileReader("], [402, "                        new File(RESULT_DIR + RESULT_PREFIX + result + TEXT_EXTENSION)));"], [403, ""], [406, ""], [407, "        String line = null;"], [408, "        while ((line = resultFileReader.readLine()) != null) {"], [409, "            resultFile.add(line.trim());"], [411, "        resultFileReader.close();"], [412, ""], [413, "        while ((line = goldFileReader.readLine()) != null) {"], [414, "            line = line.trim();"], [415, "            if ( !(line.isEmpty() || line.startsWith(\"*\") || line.startsWith(\"/\"))) {"], [416, "                goldFile.add(line);"], [417, "            }"], [419, "        goldFileReader.close();"], [425, "        return resultFile.equals(goldFile);"]]}, "num_lines_added": 118, "num_lines_removed": 98}