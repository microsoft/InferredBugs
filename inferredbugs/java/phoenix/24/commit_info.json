{"hash": "39460bc470d77f173d40b17f87a82c259bff5027", "message": "PHOENIX-3271 Distribute UPSERT SELECT across cluster", "file_num_lines": 944, "diff_parsed": {"added": [[56, "import org.apache.hadoop.hbase.client.HTable;"], [92, "import org.apache.phoenix.schema.ColumnRef;"], [99, "import org.apache.phoenix.schema.TableRef;"], [214, ""], [215, "    private void commitBatchWithHTable(HTable table, Region region, List<Mutation> mutations, byte[] indexUUID,"], [216, "            long blockingMemstoreSize, byte[] indexMaintainersPtr, byte[] txState) throws IOException {"], [217, ""], [218, "        if (indexUUID != null) {"], [219, "            // Need to add indexMaintainers for each mutation as table.batch can be distributed across servers"], [220, "            for (Mutation m : mutations) {"], [221, "                if (indexMaintainersPtr != null) {"], [222, "                    m.setAttribute(PhoenixIndexCodec.INDEX_MD, indexMaintainersPtr);"], [223, "                }"], [224, "                if (txState != null) {"], [225, "                    m.setAttribute(BaseScannerRegionObserver.TX_STATE, txState);"], [226, "                }"], [227, "                m.setAttribute(PhoenixIndexCodec.INDEX_UUID, indexUUID);"], [228, "            }"], [229, "        }"], [230, "        // When memstore size reaches blockingMemstoreSize we are waiting 3 seconds for the"], [231, "        // flush happen which decrease the memstore size and then writes allowed on the region."], [232, "        for (int i = 0; region.getMemstoreSize() > blockingMemstoreSize && i < 30; i++) {"], [233, "            try {"], [234, "                checkForRegionClosing();"], [235, "                Thread.sleep(100);"], [236, "            } catch (InterruptedException e) {"], [237, "                Thread.currentThread().interrupt();"], [238, "                throw new IOException(e);"], [239, "            }"], [240, "        }"], [241, "        logger.debug(\"Committing batch of \" + mutations.size() + \" mutations for \" + table);"], [242, "        try {"], [243, "            table.batch(mutations);"], [244, "        } catch (InterruptedException e) {"], [245, "            throw new RuntimeException(e);"], [246, "        }"], [247, "    }"], [346, "        HTable targetHTable = null;"], [347, "        boolean areMutationInSameRegion = true;"], [352, "            targetHTable = new HTable(env.getConfiguration(), projectedTable.getPhysicalName().getBytes());"], [355, "            areMutationInSameRegion = Bytes.compareTo(targetHTable.getTableName(),"], [356, "                    region.getTableDesc().getTableName().getName()) == 0"], [357, "                    && !isPkPositionChanging(new TableRef(projectedTable), selectExpressions);"], [566, "                            int bucketNumOffset = 0;"], [567, "                            if (projectedTable.getBucketNum() != null) {"], [568, "                                values[0] = new byte[] { 0 };"], [569, "                                bucketNumOffset = 1;"], [570, "                            }"], [571, "                            int i = bucketNumOffset;"], [574, "                                Expression expression = selectExpressions.get(i - bucketNumOffset);"], [584, "                                }else{"], [585, "                                    values[i] = ByteUtil.EMPTY_BYTE_ARRAY;"], [591, "                                Expression expression = selectExpressions.get(i - bucketNumOffset);"], [656, "                                commit(region, batchMutations, indexUUID, blockingMemStoreSize, indexMaintainersPtr,"], [657, "                                        txState, areMutationInSameRegion, targetHTable);"], [675, "                    commit(region, mutations, indexUUID, blockingMemStoreSize, indexMaintainersPtr, txState,"], [676, "                            areMutationInSameRegion, targetHTable);"], [677, "                    mutations.clear();"], [691, "            if (targetHTable != null) {"], [692, "                targetHTable.close();"], [693, "            }"], [734, ""], [735, "    }"], [736, ""], [737, "    private void commit(Region region, List<Mutation> mutations, byte[] indexUUID, long blockingMemstoreSize,"], [738, "            byte[] indexMaintainersPtr, byte[] txState, boolean areMutationsForSameRegion, HTable hTable)"], [739, "            throws IOException {"], [740, "        if (!areMutationsForSameRegion) {"], [741, "            assert hTable != null;// table cannot be null"], [742, "            commitBatchWithHTable(hTable, region, mutations, indexUUID, blockingMemstoreSize, indexMaintainersPtr,"], [743, "                    txState);"], [744, "        } else {"], [745, "            commitBatch(region, mutations, indexUUID, blockingMemstoreSize, indexMaintainersPtr, txState);"], [746, "        }"], [747, "    }"], [748, ""], [749, "    private boolean isPkPositionChanging(TableRef tableRef, List<Expression> projectedExpressions) throws SQLException {"], [750, "        // If the row ends up living in a different region, we'll get an error otherwise."], [751, "        for (int i = 0; i < tableRef.getTable().getPKColumns().size(); i++) {"], [752, "            PColumn column = tableRef.getTable().getPKColumns().get(i);"], [753, "            Expression source = projectedExpressions.get(i);"], [754, "            if (source == null || !source"], [755, "                    .equals(new ColumnRef(tableRef, column.getPosition()).newColumnExpression())) { return true; }"], [756, "        }"], [757, "        return false;"], [760, "    private boolean readyToCommit(List<Mutation> mutations,int batchSize){"], [761, "        return !mutations.isEmpty() && batchSize > 0 &&"], [762, "        mutations.size() > batchSize;"], [763, "    }"]], "deleted": [[135, "    public static final String UPSERT_SELECT_TABLE = \"UpsertSelectTable\";"], [136, "    public static final String UPSERT_SELECT_EXPRS = \"UpsertSelectExprs\";"], [525, "                            int i = 0;"], [528, "                                Expression expression = selectExpressions.get(i);"], [543, "                                Expression expression = selectExpressions.get(i);"], [608, "                                commitBatch(region, batchMutations, indexUUID, blockingMemStoreSize, indexMaintainersPtr,"], [609, "                                    txState);"], [627, "                    commitBatch(region, mutations, indexUUID, blockingMemStoreSize, indexMaintainersPtr, txState);"]]}, "num_lines_added": 89, "num_lines_removed": 8}