    private DeleteType getDeleteTypeOrNull(Collection<? extends Cell> pendingUpdates, int nCFs) {
        int nDeleteCF = 0;
        int nDeleteVersionCF = 0;
        for (Cell kv : pendingUpdates) {
        	if (kv.getTypeByte() == KeyValue.Type.DeleteFamilyVersion.getCode()) {
                nDeleteVersionCF++;
            }
        	else if (kv.getTypeByte() == KeyValue.Type.DeleteFamily.getCode()
        			// Since we don't include the index rows in the change set for txn tables, we need to detect row deletes that have transformed by TransactionProcessor
        			|| (CellUtil.matchingQualifier(kv, TransactionFactory.getTransactionProvider().getTransactionContext().getFamilyDeleteMarker()) && CellUtil.matchingValue(kv, HConstants.EMPTY_BYTE_ARRAY))) {
        	    nDeleteCF++;
        	}
        }
        // This is what a delete looks like on the server side for mutable indexing...
        // Should all be one or the other for DeleteFamily versus DeleteFamilyVersion, but just in case not
        DeleteType deleteType = null; 
        if (nDeleteVersionCF > 0 && nDeleteVersionCF >= nCFs) {
        	deleteType = DeleteType.SINGLE_VERSION;
        } else {
			int nDelete = nDeleteCF + nDeleteVersionCF;
			if (nDelete>0 && nDelete >= nCFs) {
				deleteType = DeleteType.ALL_VERSIONS;
			}
		}
        return deleteType;
    }