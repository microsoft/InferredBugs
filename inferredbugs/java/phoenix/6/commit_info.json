{"hash": "845888bcb58a6fe5975de4cfabbe9266407de9dc", "message": "PHOENIX-1139 Failed to disable local index when index update fails(Rajeshbabu)", "file_num_lines": 306, "diff_parsed": {"added": [[55, "import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;"], [56, "import org.apache.hadoop.hbase.master.LoadBalancer;"], [59, "import org.apache.phoenix.hbase.index.balancer.IndexLoadBalancer;"], [60, "import org.apache.phoenix.hbase.index.master.IndexMasterObserver;"], [106, "        conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY, IndexMasterObserver.class.getName());"], [107, "        conf.setClass(HConstants.HBASE_MASTER_LOADBALANCER_CLASS, IndexLoadBalancer.class,"], [108, "            LoadBalancer.class);"], [131, "    public void testWriteFailureDisablesLocalIndex() throws Exception {"], [132, "        testWriteFailureDisablesIndex(true);"], [133, "    }"], [134, ""], [135, "    @Test(timeout=300000)"], [137, "        testWriteFailureDisablesIndex(false);"], [138, "    }"], [139, ""], [140, "    public void testWriteFailureDisablesIndex(boolean localIndex) throws Exception {"], [153, "        if(localIndex) {"], [154, "            conn.createStatement().execute("], [155, "                \"CREATE LOCAL INDEX \" + INDEX_TABLE_NAME + \" ON \" + DATA_TABLE_FULL_NAME + \" (v1) INCLUDE (v2)\");"], [156, "            conn.createStatement().execute("], [157, "                \"CREATE LOCAL INDEX \" + INDEX_TABLE_NAME+ \"_2\" + \" ON \" + DATA_TABLE_FULL_NAME + \" (v2) INCLUDE (v1)\");"], [158, "        } else {"], [159, "            conn.createStatement().execute("], [161, "        }"], [162, ""], [182, "        TableName indexTable ="], [183, "                TableName.valueOf(localIndex ? MetaDataUtil"], [184, "                        .getLocalIndexTableName(DATA_TABLE_FULL_NAME) : INDEX_TABLE_FULL_NAME);"], [208, "        if(localIndex) {"], [209, "            rs = conn.getMetaData().getTables(null, StringUtil.escapeLike(SCHEMA_NAME), INDEX_TABLE_NAME+\"_2\","], [210, "                new String[] { PTableType.INDEX.toString() });"], [211, "            assertTrue(rs.next());"], [212, "            assertEquals(INDEX_TABLE_NAME+\"_2\", rs.getString(3));"], [213, "            assertEquals(PIndexState.DISABLE.toString(), rs.getString(\"INDEX_STATE\"));"], [214, "            assertFalse(rs.next());"], [215, "        }"], [216, ""], [241, "          if(localIndex) {"], [242, "              rs = conn.getMetaData().getTables(null, StringUtil.escapeLike(SCHEMA_NAME), INDEX_TABLE_NAME+\"_2\","], [243, "                  new String[] { PTableType.INDEX.toString() });"], [244, "              assertTrue(rs.next());"], [245, "              if(PIndexState.ACTIVE.toString().equals(rs.getString(\"INDEX_STATE\"))){"], [246, "                  break;"], [247, "              }"], [248, "          }"]], "deleted": [[30, "import java.io.IOException;"], [32, "import java.sql.DriverManager;"], [36, "import java.util.ArrayList;"], [47, "import org.apache.hadoop.hbase.Cell;"], [54, "import org.apache.hadoop.hbase.MiniHBaseCluster;"], [60, "import org.apache.hadoop.hbase.client.Result;"], [61, "import org.apache.hadoop.hbase.client.Scan;"], [62, "import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;"], [63, "import org.apache.hadoop.hbase.filter.CompareFilter;"], [64, "import org.apache.hadoop.hbase.filter.SingleColumnValueFilter;"], [65, "import org.apache.hadoop.hbase.regionserver.HRegionServer;"], [66, "import org.apache.hadoop.hbase.regionserver.RegionScanner;"], [69, "import org.apache.phoenix.index.PhoenixIndexFailurePolicy;"], [70, "import org.apache.phoenix.jdbc.PhoenixConnection;"], [71, "import org.apache.phoenix.jdbc.PhoenixDatabaseMetaData;"], [75, "import org.apache.phoenix.query.QueryServicesOptions;"], [76, "import org.apache.phoenix.schema.MetaDataClient;"], [77, "import org.apache.phoenix.schema.PDataType;"], [79, "import org.apache.phoenix.schema.PTable;"], [81, "import org.apache.phoenix.schema.TableRef;"], [83, "import org.apache.phoenix.util.PhoenixRuntime;"], [90, "import org.junit.AfterClass;"], [92, "import org.junit.BeforeClass;"], [160, "        conn.createStatement().execute("], [181, "        TableName indexTable = TableName.valueOf(INDEX_TABLE_FULL_NAME);"], [205, ""]]}, "num_lines_added": 45, "num_lines_removed": 26}