{"hash": "27c4027fd72cec790975c810724f3a778388e426", "message": "PHOENIX-3111 Possible Deadlock/delay while building index, upsert select, delete rows at server-addendum(Rajeshbabu)", "file_num_lines": 779, "diff_parsed": {"added": [[190, ""], [192, "      // When memstore size reaches blockingMemstoreSize we are waiting 3 seconds for the"], [193, "      // flush happen which decrease the memstore size and then writes allowed on the region."], [194, "      for (int i = 0; region.getMemstoreSize() > blockingMemstoreSize && i < 30; i++) {"], [195, "          try {"], [196, "              checkForRegionClosing();"], [197, "              Thread.sleep(100);"], [198, "          } catch (InterruptedException e) {"], [199, "              Thread.currentThread().interrupt();"], [200, "              throw new IOException(e);"], [201, "          }"], [202, "      }"], [205, "      region.batchMutate(mutations.toArray(mutationArray), HConstants.NO_NONCE, HConstants.NO_NONCE);"], [351, "         * Slow down the writes if the memstore size more than"], [352, "         * (hbase.hregion.memstore.block.multiplier - 1) times hbase.hregion.memstore.flush.size"], [353, "         * bytes. This avoids flush storm to hdfs for cases like index building where reads and"], [354, "         * write happen to all the table regions in the server."]], "deleted": [[193, "      try {"], [194, "          region.batchMutate(mutations.toArray(mutationArray), HConstants.NO_NONCE, HConstants.NO_NONCE);"], [195, "      } catch (RegionTooBusyException rtbe) {"], [196, "            // When memstore size reaches blockingMemstoreSize we are waiting 3 seconds for the"], [197, "            // flush happen which decrease the memstore size and then writes allowed on the region."], [198, "            for (int i = 0; region.getMemstoreSize() > blockingMemstoreSize && i < 30; i++) {"], [199, "                try {"], [200, "                    checkForRegionClosing();"], [201, "                    Thread.sleep(100);"], [202, "                } catch (InterruptedException e) {"], [203, "                    Thread.currentThread().interrupt();"], [204, "                    throw new IOException(e);"], [205, "                }"], [206, "            }"], [207, "            if (region.getMemstoreSize() > blockingMemstoreSize) {"], [208, "                throw rtbe;"], [209, "            }"], [210, "            region.batchMutate(mutationArray, HConstants.NO_NONCE, HConstants.NO_NONCE);"], [211, "      }"], [357, "         * Upper bound of memstore size allowed for region. Updates will be blocked until the flush"], [358, "         * happen if the memstore reaches this threshold."]]}, "num_lines_added": 17, "num_lines_removed": 21}