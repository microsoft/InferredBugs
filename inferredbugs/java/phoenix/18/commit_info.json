{"hash": "18da4a0460967ce28fcdeaad4a1b90440ff36f00", "message": "PHOENIX-2925 CsvBulkloadTool not working properly if there are multiple local indexes to the same table(After PHOENIX-1973)", "file_num_lines": 142, "diff_parsed": {"added": [[24, "import java.util.HashMap;"], [28, "import java.util.TreeMap;"], [35, "import org.apache.hadoop.hbase.util.Bytes;"], [67, "    private Map<Integer, Pair<byte[], byte[]>> columnIndexes;"], [68, "    private Map<String, ImmutableBytesPtr> emptyFamilyName;"], [94, "        Map <byte[], Integer> indexMap = new TreeMap(Bytes.BYTES_COMPARATOR);"], [95, "        emptyFamilyName = new HashMap<>();"], [96, "        columnIndexes = new HashMap<>();"], [97, "        int columnIndex = 0;"], [98, "        for(int index = 0; index < logicalNames.size(); index++) {"], [99, "            PTable table = PhoenixRuntime.getTable(conn, logicalNames.get(index));"], [100, "            emptyFamilyName.put(tableNames.get(index), SchemaUtil.getEmptyColumnFamilyPtr(table));"], [104, "                byte[] family = new byte[0];"], [105, "                if (c.getFamilyName() != null) {"], [106, "                    family = c.getFamilyName().getBytes();"], [109, "                byte[] cfn = Bytes.add(family,\":\".getBytes(), name);"], [110, "                Pair<byte[], byte[]> pair = new Pair(family, name);"], [111, "                if (!indexMap.containsKey(cfn)) {"], [112, "                    indexMap.put(cfn, new Integer(columnIndex));"], [113, "                    columnIndexes.put(new Integer(columnIndex), pair);"], [114, "                    columnIndex++;"], [115, "                }"], [125, "        ImmutableBytesWritable rowKey = key.getRowkey();"], [130, "                int index = WritableUtils.readVInt(input);"], [131, "                ImmutableBytesWritable family;"], [132, "                ImmutableBytesWritable name;"], [133, "                ImmutableBytesWritable value = QueryConstants.EMPTY_COLUMN_VALUE_BYTES_PTR;"], [134, "                if (index == -1) {"], [135, "                    family = emptyFamilyName.get(key.getTableName());"], [136, "                    name = QueryConstants.EMPTY_COLUMN_BYTES_PTR;"], [137, "                } else {"], [138, "                    Pair<byte[], byte[]> pair = columnIndexes.get(index);"], [139, "                    if(pair.getFirst() != null) {"], [140, "                        family = new ImmutableBytesWritable(pair.getFirst());"], [141, "                    } else {"], [142, "                        family = emptyFamilyName.get(key.getTableName());"], [143, "                    }"], [144, "                    name = new ImmutableBytesWritable(pair.getSecond());"], [145, "                }"], [156, "                        kv = builder.buildPut(key.getRowkey(), family, name, value);"], [159, "                        kv = builder.buildDeleteColumns(key.getRowkey(), family, name);"]], "deleted": [[24, "import java.util.ArrayList;"], [45, "import org.apache.phoenix.util.ByteUtil;"], [66, "    List<List<Pair<byte[], byte[]>>> columnIndexes;"], [67, "    List<ImmutableBytesPtr> emptyFamilyName;"], [79, ""], [87, ""], [88, "            columnIndexes = new ArrayList<>(tableNames.size());"], [89, "            emptyFamilyName = new ArrayList<>();"], [97, "        for (String tableName : logicalNames) {"], [98, "            PTable table = PhoenixRuntime.getTable(conn, tableName);"], [99, "            emptyFamilyName.add(SchemaUtil.getEmptyColumnFamilyPtr(table));"], [101, "            List<Pair<byte[], byte[]>> list = new ArrayList(cls.size());"], [104, "                if (c.getFamilyName() == null) {"], [105, "                    list.add(null); // Skip PK column"], [106, "                    continue;"], [108, "                byte[] family = c.getFamilyName().getBytes();"], [110, "                list.add(new Pair(family, name));"], [112, "            columnIndexes.add(list);"], [114, ""], [122, "        int tableIndex = tableNames.indexOf(key.getTableName());"], [123, "        List<Pair<byte[], byte[]>> columns = columnIndexes.get(tableIndex);"], [127, "                int index = WritableUtils.readVInt(input);"], [128, "                Pair<byte[], byte[]> pair = columns.get(index);"], [130, "                ImmutableBytesWritable value = null;"], [141, "                        kv = builder.buildPut(key.getRowkey(),"], [142, "                                new ImmutableBytesWritable(pair.getFirst()),"], [143, "                                new ImmutableBytesWritable(pair.getSecond()), value);"], [146, "                        kv = builder.buildDeleteColumns(key.getRowkey(),"], [147, "                                new ImmutableBytesWritable(pair.getFirst()),"], [148, "                                new ImmutableBytesWritable(pair.getSecond()));"], [155, "            KeyValue empty = builder.buildPut(key.getRowkey(),"], [156, "                    emptyFamilyName.get(tableIndex),"], [157, "                    QueryConstants.EMPTY_COLUMN_BYTES_PTR, ByteUtil.EMPTY_BYTE_ARRAY_PTR);"], [158, "            map.add(empty);"]]}, "num_lines_added": 41, "num_lines_removed": 34}