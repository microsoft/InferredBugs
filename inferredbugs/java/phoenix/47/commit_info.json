{"hash": "4f8b3c2207a56c4afaf2502c0af26a1f4b63f2bb", "message": "PHOENIX-5348: Fix flaky test: testIndexRebuildTask\n\nSigned-off-by: Chinmay Kulkarni <chinmayskulkarni@apache.org>", "file_num_lines": 145, "diff_parsed": {"added": [[50, "import static org.apache.phoenix.util.TestUtil.waitForIndexRebuild;"], [54, "public class IndexRebuildTaskIT extends BaseUniqueNamesOwnClusterIT {"], [83, "        String viewName = generateUniqueName();"], [85, "        Connection tenantConn = null;"], [92, "            tenantConn =DriverManager.getConnection(getUrl(), props);"], [101, "            tenantConn.createStatement().execute(viewDDL);"], [107, "            tenantConn.createStatement().execute(idxSDDL);"], [112, "                tenantConn.createStatement().execute("], [116, "            tenantConn.commit();"], [118, "            waitForIndexRebuild(conn, indexName, PIndexState.ACTIVE);"], [122, "            Table indexHTable = queryServices.getTable(Bytes.toBytes(viewIndexTableName));"], [123, "            int count = getUtility().countRows(indexHTable);"], [124, "            assertEquals(numOfValues, count);"], [125, ""], [126, "            // Alter to Unusable makes the index status inactive."], [127, "            // If I Alter to DISABLE, it fails to in Index tool while setting state to active due to Invalid transition."], [128, "            tenantConn.createStatement().execute("], [129, "                    String.format(\"ALTER INDEX %s ON %s UNUSABLE\", indexName, viewName));"], [130, "            tenantConn.commit();"], [138, "            count = getUtility().countRows(indexHTable);"], [139, "            assertEquals(0, count);"], [140, ""], [141, "            String data = \"{IndexName:\" + indexName + \", DisableBefore: true}\";"], [142, ""], [143, "            // Run IndexRebuildTask"], [144, "            TaskRegionObserver.SelfHealingTask task ="], [145, "                    new TaskRegionObserver.SelfHealingTask("], [146, "                            TaskRegionEnvironment, QueryServicesOptions.DEFAULT_TASK_HANDLING_MAX_INTERVAL_MS);"], [148, "            Timestamp startTs = new Timestamp(EnvironmentEdgeManager.currentTimeMillis());"], [155, "            waitForTaskState(conn, PTable.TaskType.INDEX_REBUILD, viewName, PTable.TaskStatus.COMPLETED);"], [158, "            count = getUtility().countRows(indexHTable);"], [162, "                conn.createStatement().execute(\"DELETE \" + \" FROM \" + PhoenixDatabaseMetaData.SYSTEM_TASK_NAME"], [163, "                        + \" WHERE TABLE_NAME ='\" + viewName  + \"'\");"], [164, "                conn.commit();"], [167, "            if (tenantConn != null) {"], [168, "                tenantConn.close();"], [173, "    public static void waitForTaskState(Connection conn, PTable.TaskType taskType, String expectedTableName,"], [174, "            PTable.TaskStatus expectedTaskStatus) throws InterruptedException,"], [181, "                    \" WHERE \" + PhoenixDatabaseMetaData.TABLE_NAME + \"='\" + expectedTableName + \"' AND \" +"], [182, "                    PhoenixDatabaseMetaData.TASK_TYPE + \" = \" +"], [187, "            while (rs.next()) {"]], "deleted": [[38, "import org.apache.phoenix.util.SchemaUtil;"], [39, "import org.apache.phoenix.util.TestUtil;"], [53, "import static org.junit.Assert.assertTrue;"], [56, "// disabled -- see PHOENIX-5348"], [57, "public abstract class IndexRebuildTaskIT extends BaseUniqueNamesOwnClusterIT {"], [87, "        Connection viewConn = null;"], [94, "            viewConn =DriverManager.getConnection(getUrl(), props);"], [102, "            String viewName = generateUniqueName();"], [104, "            viewConn.createStatement().execute(viewDDL);"], [110, "            viewConn.createStatement().execute(idxSDDL);"], [115, "                viewConn.createStatement().execute("], [119, "            viewConn.commit();"], [120, ""], [121, "            String data = \"{IndexName:\" + indexName + \"}\";"], [122, "            // Run IndexRebuildTask"], [123, "            TaskRegionObserver.SelfHealingTask task ="], [124, "                    new TaskRegionObserver.SelfHealingTask("], [125, "                            TaskRegionEnvironment, QueryServicesOptions.DEFAULT_TASK_HANDLING_MAX_INTERVAL_MS);"], [126, ""], [127, "            Timestamp startTs = new Timestamp(EnvironmentEdgeManager.currentTimeMillis());"], [128, "            // Add a task to System.Task to build indexes"], [129, "            Task.addTask(conn.unwrap(PhoenixConnection.class), PTable.TaskType.INDEX_REBUILD,"], [130, "                    TENANT1, null, viewName,"], [131, "                    PTable.TaskStatus.CREATED.toString(), data, null, startTs, null, true);"], [132, ""], [133, ""], [134, "            task.run();"], [138, "            int count = getUtility().countRows(queryServices.getTable(Bytes.toBytes(viewIndexTableName)));"], [139, "            assertTrue(count == numOfValues);"], [148, "            data = \"{IndexName:\" + indexName + \", DisableBefore:true}\";"], [150, "            // Add a new task (update status to created) to System.Task to rebuild indexes"], [156, "            Table systemHTable= queryServices.getTable(Bytes.toBytes(\"SYSTEM.\"+PhoenixDatabaseMetaData.SYSTEM_TASK_TABLE));"], [157, "            count = getUtility().countRows(systemHTable);"], [158, "            assertEquals(1, count);"], [159, ""], [161, "            waitForTaskState(conn, PTable.TaskType.INDEX_REBUILD, PTable.TaskStatus.COMPLETED);"], [164, "            Table htable= queryServices.getTable(Bytes.toBytes(viewIndexTableName));"], [165, "            count = getUtility().countRows(htable);"], [168, "            conn.createStatement().execute(\"DELETE \" + \" FROM \" + PhoenixDatabaseMetaData.SYSTEM_TASK_NAME);"], [169, "            conn.commit();"], [173, "            if (viewConn != null) {"], [174, "                viewConn.close();"], [179, "    public static void waitForTaskState(Connection conn, PTable.TaskType taskType, PTable.TaskStatus expectedTaskStatus) throws InterruptedException,"], [186, "                    \" WHERE \" + PhoenixDatabaseMetaData.TASK_TYPE + \" = \" +"], [191, "            if (rs.next()) {"]]}, "num_lines_added": 41, "num_lines_removed": 45}