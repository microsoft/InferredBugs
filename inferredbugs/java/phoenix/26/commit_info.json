{"hash": "d2575288d1542c5b6e8dbe65448a22cf59aca8ff", "message": "PHOENIX-3855 Separate MutableIndexIT into multiple test classes", "file_num_lines": 682, "diff_parsed": {"added": [[644, "        createBaseTable(conn1, tableName, \"('e')\");"], [645, "        conn1.createStatement().execute(\"CREATE \"+(localIndex?\"LOCAL\":\"\")+\" INDEX \" + indexName + \" ON \" + tableName + \"(v1)\" + (localIndex?\"\":\" SPLIT ON ('e')\"));"], [646, "        conn1.createStatement().execute(\"UPSERT INTO \"+tableName+\" values('b',1,2,4,'z')\");"], [647, "        conn1.createStatement().execute(\"UPSERT INTO \"+tableName+\" values('f',1,2,3,'z')\");"], [648, "        conn1.createStatement().execute(\"UPSERT INTO \"+tableName+\" values('j',2,4,2,'a')\");"], [649, "        conn1.createStatement().execute(\"UPSERT INTO \"+tableName+\" values('q',3,1,1,'c')\");"], [650, "        conn1.commit();"], [651, ""], [653, "        String query = \"SELECT count(*) FROM \" + tableName +\" where v1<='z'\";"], [654, "        ResultSet rs = conn1.createStatement().executeQuery(query);"], [655, "        assertTrue(rs.next());"], [656, "        assertEquals(4, rs.getInt(1));"], [658, "        TableName indexTable = TableName.valueOf(localIndex?tableName: indexName);"], [659, "        admin.flush(indexTable);"], [660, "        boolean merged = false;"], [661, "        HTableInterface table = connectionQueryServices.getTable(indexTable.getName());"], [662, "        // merge regions until 1 left"], [663, "        long numRegions = 0;"], [664, "        while (true) {"], [665, "          rs = conn1.createStatement().executeQuery(query);"], [666, "          assertTrue(rs.next());"], [667, "          assertEquals(4, rs.getInt(1)); //TODO this returns 5 sometimes instead of 4, duplicate results?"], [668, "          try {"], [669, "            List<HRegionInfo> indexRegions = admin.getTableRegions(indexTable);"], [670, "            numRegions = indexRegions.size();"], [671, "            if (numRegions==1) {"], [672, "              break;"], [673, "            }"], [674, "            if(!merged) {"], [675, "                      List<HRegionInfo> regions ="], [676, "                              admin.getTableRegions(indexTable);"], [677, "                Log.info(\"Merging: \" + regions.size());"], [678, "                admin.mergeRegions(regions.get(0).getEncodedNameAsBytes(),"], [679, "                    regions.get(1).getEncodedNameAsBytes(), false);"], [680, "                merged = true;"], [681, "                Threads.sleep(10000);"], [683, "          } catch (Exception ex) {"], [684, "            Log.info(ex);"], [685, "          }"], [686, "          long waitStartTime = System.currentTimeMillis();"], [687, "          // wait until merge happened"], [688, "          while (System.currentTimeMillis() - waitStartTime < 10000) {"], [689, "            List<HRegionInfo> regions = admin.getTableRegions(indexTable);"], [690, "            Log.info(\"Waiting:\" + regions.size());"], [691, "            if (regions.size() < numRegions) {"], [692, "              break;"], [693, "            }"], [694, "            Threads.sleep(1000);"], [695, "          }"], [696, "          SnapshotTestingUtils.waitForTableToBeOnline(BaseTest.getUtility(), indexTable);"], [697, "          assertTrue(\"Index table should be online \", admin.isTableAvailable(indexTable));"]], "deleted": [[45, "import org.apache.hadoop.hbase.client.Result;"], [46, "import org.apache.hadoop.hbase.client.ResultScanner;"], [47, "import org.apache.hadoop.hbase.client.Scan;"], [63, "import org.junit.Ignore;"], [629, "    @Test"], [630, "    public void testSplitDuringIndexScan() throws Exception {"], [631, "        testSplitDuringIndexScan(false);"], [632, "    }"], [633, ""], [634, "    @Test"], [635, "    public void testSplitDuringIndexReverseScan() throws Exception {"], [636, "        testSplitDuringIndexScan(true);"], [637, "    }"], [638, ""], [639, "    private void testSplitDuringIndexScan(boolean isReverse) throws Exception {"], [640, "        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);"], [641, "        props.setProperty(QueryServices.SCAN_CACHE_SIZE_ATTRIB, Integer.toString(2));"], [642, "        props.setProperty(QueryServices.FORCE_ROW_KEY_ORDER_ATTRIB, Boolean.toString(false));"], [643, "        Connection conn1 = getConnection(props);"], [644, "\t\tString tableName = \"TBL_\" + generateUniqueName();"], [645, "        String indexName = \"IDX_\" + generateUniqueName();"], [646, "\t\tHBaseAdmin admin = driver.getConnectionQueryServices(getUrl(), TestUtil.TEST_PROPERTIES).getAdmin();"], [647, "        dropTable(admin, conn1);"], [648, "        try{"], [649, "            String[] strings = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};"], [650, "            createTableAndLoadData(conn1, tableName, indexName, strings, isReverse);"], [651, ""], [652, "            ResultSet rs = conn1.createStatement().executeQuery(\"SELECT * FROM \" + tableName);"], [653, "            assertTrue(rs.next());"], [654, "            splitDuringScan(conn1, tableName, indexName, strings, admin, isReverse);"], [655, "            dropTable(admin, conn1);"], [656, ""], [657, "       } finally {"], [658, "           dropTable(admin, conn1);"], [659, "           if(conn1 != null) conn1.close();"], [660, "           if(admin != null) admin.close();"], [661, "       }"], [662, "    }"], [663, ""], [664, "    private void dropTable(HBaseAdmin admin, Connection conn) throws SQLException, IOException {"], [665, ""], [666, "\t\tString tableName = \"TBL_\" + generateUniqueName();"], [667, "\t\tString indexName = \"IDX_\" + generateUniqueName();"], [668, "        conn.createStatement().execute(\"DROP TABLE IF EXISTS \"+ tableName);"], [669, "        if(admin.tableExists(tableName)) {"], [670, "            admin.disableTable(TableName.valueOf(tableName));"], [671, "            admin.deleteTable(TableName.valueOf(tableName));"], [672, "        }"], [673, "        if(!localIndex && admin.tableExists(indexName)) {"], [674, "            admin.disableTable(indexName);"], [675, "            admin.deleteTable(indexName);"], [676, ""], [677, "        }"], [678, "    }"], [679, ""], [699, "        try {"], [700, "            dropTable(admin, conn1);"], [701, "            createBaseTable(conn1, tableName, \"('e')\");"], [702, "            conn1.createStatement().execute(\"CREATE \"+(localIndex?\"LOCAL\":\"\")+\" INDEX \" + indexName + \" ON \" + tableName + \"(v1)\" + (localIndex?\"\":\" SPLIT ON ('e')\"));"], [703, "            conn1.createStatement().execute(\"UPSERT INTO \"+tableName+\" values('b',1,2,4,'z')\");"], [704, "            conn1.createStatement().execute(\"UPSERT INTO \"+tableName+\" values('f',1,2,3,'z')\");"], [705, "            conn1.createStatement().execute(\"UPSERT INTO \"+tableName+\" values('j',2,4,2,'a')\");"], [706, "            conn1.createStatement().execute(\"UPSERT INTO \"+tableName+\" values('q',3,1,1,'c')\");"], [707, "            conn1.commit();"], [708, ""], [710, "            String query = \"SELECT count(*) FROM \" + tableName +\" where v1<='z'\";"], [711, "            ResultSet rs = conn1.createStatement().executeQuery(query);"], [712, "            assertTrue(rs.next());"], [713, "            assertEquals(4, rs.getInt(1));"], [715, "            TableName indexTable = TableName.valueOf(localIndex?tableName: indexName);"], [716, "            admin.flush(indexTable);"], [717, "            boolean merged = false;"], [718, "            HTableInterface table = connectionQueryServices.getTable(indexTable.getName());"], [719, "            // merge regions until 1 left"], [720, "            long numRegions = 0;"], [721, "            while (true) {"], [722, "              rs = conn1.createStatement().executeQuery(query);"], [723, "              assertTrue(rs.next());"], [724, "              assertEquals(4, rs.getInt(1)); //TODO this returns 5 sometimes instead of 4, duplicate results?"], [725, "              try {"], [726, "                List<HRegionInfo> indexRegions = admin.getTableRegions(indexTable);"], [727, "                numRegions = indexRegions.size();"], [728, "                if (numRegions==1) {"], [729, "                  break;"], [730, "                }"], [731, "                if(!merged) {"], [732, "                          List<HRegionInfo> regions ="], [733, "                                  admin.getTableRegions(indexTable);"], [734, "                    Log.info(\"Merging: \" + regions.size());"], [735, "                    admin.mergeRegions(regions.get(0).getEncodedNameAsBytes(),"], [736, "                        regions.get(1).getEncodedNameAsBytes(), false);"], [737, "                    merged = true;"], [738, "                    Threads.sleep(10000);"], [739, "                }"], [740, "              } catch (Exception ex) {"], [741, "                Log.info(ex);"], [742, "              }"], [743, "              long waitStartTime = System.currentTimeMillis();"], [744, "              // wait until merge happened"], [745, "              while (System.currentTimeMillis() - waitStartTime < 10000) {"], [746, "                List<HRegionInfo> regions = admin.getTableRegions(indexTable);"], [747, "                Log.info(\"Waiting:\" + regions.size());"], [748, "                if (regions.size() < numRegions) {"], [749, "                  break;"], [750, "                }"], [751, "                Threads.sleep(1000);"], [752, "              }"], [753, "              SnapshotTestingUtils.waitForTableToBeOnline(BaseTest.getUtility(), indexTable);"], [754, "              assertTrue(\"Index table should be online \", admin.isTableAvailable(indexTable));"], [756, "        } finally {"], [757, "            dropTable(admin, conn1);"]]}, "num_lines_added": 51, "num_lines_removed": 111}