{"hash": "3fd64258a75701203f8848b294eb778e958796e4", "message": "PHOENIX-1001 Using NEXT VALUE FOR 'sequence' as an input to a function cause a NPE (Thomas D'Silva)", "file_num_lines": 990, "diff_parsed": {"added": [[102, "import org.apache.phoenix.util.ExpressionUtil;"], [276, ""], [286, "        if (ExpressionUtil.isConstant(expression)) {"], [287, "            return ExpressionUtil.getConstantExpression(expression, ptr);"], [296, "                if (ExpressionUtil.isNull(child, ptr)) {"], [297, "                    return ExpressionUtil.getNullExpression(expression);"], [408, "        if (ExpressionUtil.isConstant(caseExpression)) {"], [470, "        if (ExpressionUtil.isConstant(expression)) {"], [655, "        if (ExpressionUtil.isConstant(expression)) {"], [656, "            return ExpressionUtil.getConstantExpression(expression, ptr);"], [657, "        }"], [658, "        else if (isNull) {"], [1060, "        if (ExpressionUtil.isConstant(expression)) {"], [1061, "            return ExpressionUtil.getConstantExpression(expression, ptr);"], [1139, ""], [1140, "        ArrayConstructorExpression arrayExpression = new ArrayConstructorExpression(children, arrayElemDataType);"], [1141, "        if (ExpressionUtil.isConstant(arrayExpression)) {"], [1150, "                    PDataType.fromTypeId(arrayElemDataType.getSqlType() + PDataType.ARRAY_TYPE_BASE), true);"]], "deleted": [[275, ""], [285, "        if (node.isStateless()) {"], [286, "            Object value = null;"], [287, "            PDataType type = expression.getDataType();"], [288, "            if (expression.evaluate(null, ptr)) {"], [289, "                value = type.toObject(ptr);"], [290, "            }"], [291, "            return LiteralExpression.newConstant(value, type, expression.isDeterministic());"], [293, "        boolean isDeterministic = true;"], [301, "                isDeterministic &= child.isDeterministic();"], [302, "                if (child.isStateless() && (!child.evaluate(null, ptr) || ptr.getLength() == 0)) {"], [303, "                    return LiteralExpression.newConstant(null, expression.getDataType(), isDeterministic);"], [414, "        if (node.isStateless()) {"], [476, "        if (node.isStateless()) {"], [661, "        if (expression.isStateless()) {"], [662, "            if (!expression.evaluate(null,ptr) || ptr.getLength() == 0) {"], [663, "                return LiteralExpression.newConstant(null, expression.getDataType(), expression.isDeterministic());"], [664, "            }"], [665, "            return LiteralExpression.newConstant(expression.getDataType().toObject(ptr), expression.getDataType(), expression.isDeterministic());"], [666, "        } else if (isNull) {"], [1068, "        if (expression.isStateless()) {"], [1069, "            if (!expression.evaluate(null,ptr) || ptr.getLength() == 0) {"], [1070, "                return LiteralExpression.newConstant(null, expression.getDataType(), expression.isDeterministic());"], [1071, "            }"], [1072, "            return LiteralExpression.newConstant(expression.getDataType().toObject(ptr), expression.getDataType(), expression.isDeterministic());"], [1150, "        if (node.isStateless()) {"], [1151, "            boolean isDeterministic = true;"], [1154, "                isDeterministic &= child.isDeterministic();"], [1161, "                    PDataType.fromTypeId(arrayElemDataType.getSqlType() + PDataType.ARRAY_TYPE_BASE), isDeterministic);"], [1164, "        ArrayConstructorExpression arrayExpression = new ArrayConstructorExpression(children, arrayElemDataType);"]]}, "num_lines_added": 18, "num_lines_removed": 30}