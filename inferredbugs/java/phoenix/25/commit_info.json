{"hash": "37d0a4a038c1f843db2a1d68cfc3b3cfa8c8d537", "message": "PHOENIX-3818 Add client setting to disable server UPSERT SELECT work\n\nAdds phoenix.client.enable.server.upsert.select property that is true\n(enabled) by default. This acts as a feature toggle for PHOENIX-3271.\n\nSigned-off-by: Andrew Purtell <apurtell@apache.org>", "file_num_lines": 185, "diff_parsed": {"added": [[48, "import org.apache.phoenix.query.QueryServices;"], [53, "import org.junit.After;"], [71, "    \tMap<String, String> clientProps = Collections.singletonMap(RpcControllerFactory.CUSTOM_CONTROLLER_CONF_KEY,"], [72, "    \t\t\tRpcControllerFactory.class.getName());"], [77, "    @After"], [78, "    public void cleanUpAfterTest() throws Exception {"], [95, "            // create the table"], [96, "            createTable(conn, dataTableFullName);"], [98, "            // create the index"], [99, "            createIndex(conn, indexName);"], [103, "            upsertRow(conn, dataTableFullName);"], [107, "            PreparedStatement stmt = conn.prepareStatement(selectSql);"], [124, "            // create a data table with the same name as the index table"], [125, "            createTable(conn, indexTableFullName);"], [128, "            upsertRow(conn, indexTableFullName);"], [146, "            createIndex(conn, indexName + \"_1\");"], [155, "    @Test"], [156, "    public void testUpsertSelectServerDisabled() throws Exception {"], [157, "        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);"], [158, "        // disable server side upsert select"], [159, "        props.setProperty(QueryServices.ENABLE_SERVER_UPSERT_SELECT, \"false\");"], [160, "        try (Connection conn = driver.connect(getUrl(), props)) {"], [161, "            // create two tables with identical schemas"], [162, "            createTable(conn, dataTableFullName);"], [163, "            upsertRow(conn, dataTableFullName);"], [164, "            String tableName2 = dataTableFullName + \"_2\";"], [165, "            createTable(conn, tableName2);"], [166, "            ensureTablesOnDifferentRegionServers(dataTableFullName, tableName2);"], [167, "            // copy the row from the first table using upsert select"], [168, "            upsertSelectRows(conn, dataTableFullName, tableName2);"], [169, "            Mockito.verify(TestPhoenixIndexRpcSchedulerFactory.getIndexRpcExecutor(),"], [170, "                    Mockito.never()).dispatch(Mockito.any(CallRunner.class));"], [171, ""], [172, "        }"], [173, "    }"], [174, ""], [175, "    private void createTable(Connection conn, String tableName) throws SQLException {"], [176, "        conn.createStatement().execute("], [177, "                \"CREATE TABLE \" + tableName + \" (k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\");"], [178, "    }"], [179, ""], [180, "    private void createIndex(Connection conn, String indexName) throws SQLException {"], [181, "        conn.createStatement().execute("], [182, "                \"CREATE INDEX \" + indexName + \" ON \" + dataTableFullName + \" (v1) INCLUDE (v2)\");"], [183, "    }"], [184, ""], [185, "    private void upsertRow(Connection conn, String tableName) throws SQLException {"], [186, "        PreparedStatement stmt = conn.prepareStatement(\"UPSERT INTO \" + tableName + \" VALUES(?,?,?)\");"], [187, "        stmt.setString(1, \"k1\");"], [188, "        stmt.setString(2, \"v1\");"], [189, "        stmt.setString(3, \"v2\");"], [190, "        stmt.execute();"], [191, "        conn.commit();"], [192, "    }"], [193, ""], [194, "    private void upsertSelectRows(Connection conn, String tableName1, String tableName2) throws SQLException {"], [195, "        PreparedStatement stmt ="], [196, "                conn.prepareStatement("], [197, "                        \"UPSERT INTO \" + tableName2 + \" (k, v1, v2) SELECT k, v1, v2 FROM \""], [198, "                                + tableName1);"], [199, "        stmt.execute();"], [200, "        conn.commit();"], [201, "    }"], [202, ""]], "deleted": [[52, "import org.junit.AfterClass;"], [70, "    \tMap<String, String> clientProps = Collections.singletonMap(RpcControllerFactory.CUSTOM_CONTROLLER_CONF_KEY,"], [71, "    \t\t\tRpcControllerFactory.class.getName());"], [76, "    @AfterClass"], [77, "    public static void cleanUpAfterTestSuite() throws Exception {"], [94, "            // create the table"], [95, "            conn.createStatement().execute("], [96, "                    \"CREATE TABLE \" + dataTableFullName + \" (k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\");"], [98, "            // create the index"], [99, "            conn.createStatement().execute("], [100, "                    \"CREATE INDEX \" + indexName + \" ON \" + dataTableFullName + \" (v1) INCLUDE (v2)\");"], [104, "            PreparedStatement stmt = conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");"], [105, "            stmt.setString(1, \"k1\");"], [106, "            stmt.setString(2, \"v1\");"], [107, "            stmt.setString(3, \"v2\");"], [108, "            stmt.execute();"], [109, "            conn.commit();"], [113, "            stmt = conn.prepareStatement(selectSql);"], [130, "            // create a data table with the same name as the index table"], [131, "            conn.createStatement().execute("], [132, "                    \"CREATE TABLE \" + indexTableFullName + \" (k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\");"], [135, "            stmt = conn.prepareStatement(\"UPSERT INTO \" + indexTableFullName + \" VALUES(?,?,?)\");"], [136, "            stmt.setString(1, \"k1\");"], [137, "            stmt.setString(2, \"v1\");"], [138, "            stmt.setString(3, \"v2\");"], [139, "            stmt.execute();"], [140, "            conn.commit();"], [158, "            conn.createStatement().execute("], [159, "                    \"CREATE INDEX \" + indexName + \"_1 ON \" + dataTableFullName + \" (v1) INCLUDE (v2)\");"]]}, "num_lines_added": 64, "num_lines_removed": 29}