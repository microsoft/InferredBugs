    @Test
    public void testIndexQos() throws Exception { 
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = driver.connect(getUrl(), props);
        try {
            // create the table 
            conn.createStatement().execute(
                    "CREATE TABLE " + dataTableFullName + " (k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)");
    
            // create the index 
            conn.createStatement().execute(
                    "CREATE INDEX " + indexName + " ON " + dataTableFullName + " (v1) INCLUDE (v2)");

            ensureTablesOnDifferentRegionServers(dataTableFullName, indexTableFullName);
    
            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + dataTableFullName + " VALUES(?,?,?)");
            stmt.setString(1, "k1");
            stmt.setString(2, "v1");
            stmt.setString(3, "v2");
            stmt.execute();
            conn.commit();
    
            // run select query that should use the index
            String selectSql = "SELECT k, v2 from " + dataTableFullName + " WHERE v1=?";
            stmt = conn.prepareStatement(selectSql);
            stmt.setString(1, "v1");
    
            // verify that the query does a range scan on the index table
            ResultSet rs = stmt.executeQuery("EXPLAIN " + selectSql);
            assertEquals("CLIENT PARALLEL 1-WAY RANGE SCAN OVER " + indexTableFullName + " ['v1']", QueryUtil.getExplainPlan(rs));
    
            // verify that the correct results are returned
            rs = stmt.executeQuery();
            assertTrue(rs.next());
            assertEquals("k1", rs.getString(1));
            assertEquals("v2", rs.getString(2));
            assertFalse(rs.next());
            
            // drop index table 
            conn.createStatement().execute(
                    "DROP INDEX " + indexName + " ON " + dataTableFullName );
            // create a data table with the same name as the index table 
            conn.createStatement().execute(
                    "CREATE TABLE " + indexTableFullName + " (k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)");
            
            // upsert one row to the table (which has the same table name as the previous index table)
            stmt = conn.prepareStatement("UPSERT INTO " + indexTableFullName + " VALUES(?,?,?)");
            stmt.setString(1, "k1");
            stmt.setString(2, "v1");
            stmt.setString(3, "v2");
            stmt.execute();
            conn.commit();
            
            // run select query on the new table
            selectSql = "SELECT k, v2 from " + indexTableFullName + " WHERE v1=?";
            stmt = conn.prepareStatement(selectSql);
            stmt.setString(1, "v1");
    
            // verify that the correct results are returned
            rs = stmt.executeQuery();
            assertTrue(rs.next());
            assertEquals("k1", rs.getString(1));
            assertEquals("v2", rs.getString(2));
            assertFalse(rs.next());
            
            // verify that that index queue is used only once (for the first upsert)
            Mockito.verify(TestPhoenixIndexRpcSchedulerFactory.getIndexRpcExecutor()).dispatch(Mockito.any(CallRunner.class));
            
            TestPhoenixIndexRpcSchedulerFactory.reset();
            conn.createStatement().execute(
                    "CREATE INDEX " + indexName + "_1 ON " + dataTableFullName + " (v1) INCLUDE (v2)");
            // verify that that index queue is used and only once (during Upsert Select on server to build the index)
            Mockito.verify(TestPhoenixIndexRpcSchedulerFactory.getIndexRpcExecutor()).dispatch(Mockito.any(CallRunner.class));
        }
        finally {
            conn.close();
        }
    }