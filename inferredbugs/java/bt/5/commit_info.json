{"hash": "56039fc74337d4dfee45fd29b5f4f7f4ad146a3a", "message": "updates to bencoding parser -- treat strings as binary, better exceptions, etc.", "file_num_lines": 94, "diff_parsed": {"added": [[6, "import java.nio.charset.Charset;"], [7, "import java.util.List;"], [12, "import static org.junit.Assert.assertNotNull;"], [13, "import static org.junit.Assert.assertTrue;"], [17, "    private Charset charset = Charset.forName(\"UTF-8\");"], [18, ""], [21, "        BEParser parser = new BEParser(\"1:s\".getBytes());"], [23, "        assertEquals(\"s\", parser.readString(charset));"], [28, "        BEParser parser = new BEParser(\"11:!@#$%^&*()_\".getBytes());"], [30, "        assertEquals(\"!@#$%^&*()_\", parser.readString(charset));"], [35, "        new BEParser(\"\".getBytes());"], [40, "        new BEParser(\"0:\".getBytes()).readString(charset);"], [45, "        new BEParser(\"7:abcdef\".getBytes()).readString(charset);"], [50, "        BEParser parser = new BEParser(\"i1e\".getBytes());"], [57, "        BEParser parser = new BEParser(\"i-1e\".getBytes());"], [64, "        BEParser parser = new BEParser(\"ie\".getBytes());"], [73, "        BEParser parser = new BEParser(\"i-0e\".getBytes());"], [80, "        BEParser parser = new BEParser(\"i1\".getBytes());"], [87, "        BEParser parser = new BEParser(\"i-1-e\".getBytes());"], [94, "        BEParser parser = new BEParser(\"l4:spam4:eggsi1ee\".getBytes());"], [97, "                new Object[] {\"spam\".getBytes(charset), \"eggs\".getBytes(charset), BigInteger.ONE},"], [104, "        BEParser parser = new BEParser(\"d4:spaml1:a1:bee\".getBytes());"], [107, "        byte[][] expected = new byte[][] {\"a\".getBytes(charset), \"b\".getBytes(charset)};"], [108, ""], [109, "        Map<String, Object> map = parser.readMap();"], [110, ""], [111, "        Object o = map.get(\"spam\");"], [112, "        assertNotNull(o);"], [113, "        assertTrue(o instanceof List);"], [115, "        List<?> actual = (List<?>) o;"], [116, "        assertArrayEquals(expected, actual.toArray());"]], "deleted": [[6, "import java.util.Arrays;"], [7, "import java.util.HashMap;"], [17, "        BEParser parser = new BEParser(\"1:s\");"], [19, "        assertEquals(\"s\", parser.readString());"], [24, "        BEParser parser = new BEParser(\"11:!@#$%^&*()_\");"], [26, "        assertEquals(\"!@#$%^&*()_\", parser.readString());"], [31, "        new BEParser(\"\");"], [36, "        new BEParser(\"0:\").readString();"], [41, "        new BEParser(\"7:abcdef\").readString();"], [46, "        BEParser parser = new BEParser(\"i1e\");"], [53, "        BEParser parser = new BEParser(\"i-1e\");"], [60, "        BEParser parser = new BEParser(\"ie\");"], [69, "        BEParser parser = new BEParser(\"i-0e\");"], [76, "        BEParser parser = new BEParser(\"i1\");"], [83, "        BEParser parser = new BEParser(\"i-1-e\");"], [90, "        BEParser parser = new BEParser(\"l4:spam4:eggsi1ee\");"], [91, "        assertEquals(BEType.LIST, parser.readType());"], [92, "        assertArrayEquals("], [93, "                new Object[] {\"spam\", \"eggs\", BigInteger.ONE},"], [94, "                parser.readList().toArray()"], [95, "        );"], [96, "    }"], [97, ""], [98, "    @Test"], [99, "    public void testParse_List_ListOfLists() {"], [100, "        BEParser parser = new BEParser(\"l4:spaml4:spam4:eggsi1eei1ee\");"], [103, "                new Object[] {\"spam\", Arrays.asList(\"spam\", \"eggs\", BigInteger.ONE), BigInteger.ONE},"], [110, "        BEParser parser = new BEParser(\"d4:spaml1:a1:bee\");"], [113, "        Map<String, Object> expected = new HashMap<>();"], [114, "        expected.put(\"spam\", Arrays.asList(\"a\", \"b\"));"], [116, "        assertEquals(expected, parser.readMap());"]]}, "num_lines_added": 31, "num_lines_removed": 31}