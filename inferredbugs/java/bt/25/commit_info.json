{"hash": "e36ed2ae98d0effc24c4a3b2ec0dc812e8f2edb9", "message": "Filesystem-based backend implementation -- tests on read", "file_num_lines": 252, "diff_parsed": {"added": [[14, "import static bt.data.ChunkDescriptorTestUtil.assertFileHasContents;"], [18, "import static bt.data.ChunkDescriptorTestUtil.writeBytesToFile;"], [50, "    private IDataDescriptor createDataDescriptor_SingleFile(String fileName) {"], [65, "        assertEquals(4, descriptor.getChunkDescriptors().size());"], [67, "        return descriptor;"], [68, "    }"], [69, ""], [70, "    @Test"], [71, "    public void testDescriptors_WriteSingleFile() {"], [72, ""], [73, "        String fileName = \"1-single.bin\";"], [74, "        IDataDescriptor descriptor = createDataDescriptor_SingleFile(fileName);"], [75, "        List<IChunkDescriptor> chunks = descriptor.getChunkDescriptors();"], [100, "        assertFileHasContents(new File(rootDirectory, fileName), SINGLE_FILE);"], [101, "    }"], [102, ""], [103, "    @Test"], [104, "    public void testDescriptors_ReadSingleFile() {"], [105, ""], [106, "        String fileName = \"1-single-read.bin\";"], [107, "        writeBytesToFile(new File(rootDirectory, fileName), SINGLE_FILE);"], [108, ""], [109, "        IDataDescriptor descriptor = createDataDescriptor_SingleFile(fileName);"], [110, "        List<IChunkDescriptor> chunks = descriptor.getChunkDescriptors();"], [111, ""], [112, "        byte[] block;"], [113, ""], [114, "        // beginning"], [115, "        block = chunks.get(0).readBlock(0, 8);"], [116, "        assertArrayEquals(Arrays.copyOfRange(SINGLE_FILE, 0, 8), block);"], [117, ""], [118, "        // end"], [119, "        block = chunks.get(0).readBlock(8, 8);"], [120, "        assertArrayEquals(Arrays.copyOfRange(SINGLE_FILE, 8, 16), block);"], [121, ""], [122, "        // whole chunk"], [123, "        block = chunks.get(0).readBlock(0, 16);"], [124, "        assertArrayEquals(Arrays.copyOfRange(SINGLE_FILE, 0, 16), block);"], [125, ""], [126, "        // piece"], [127, "        block = chunks.get(0).readBlock(1, 14);"], [128, "        assertArrayEquals(Arrays.copyOfRange(SINGLE_FILE, 1, 15), block);"], [154, "    private IDataDescriptor createDataDescriptor_MultiFile(String fileName1, String fileName2, String fileName3,"], [155, "                                                           String fileName4, String fileName5, String fileName6,"], [156, "                                                           File parentDirectory) {"], [158, "        String torrentName = parentDirectory.getName();"], [205, "        assertEquals(6, descriptor.getChunkDescriptors().size());"], [206, ""], [207, "        return descriptor;"], [208, "    }"], [210, "    @Test"], [211, "    public void testDescriptors_WriteMultiFile() {"], [212, ""], [213, "        String torrentName = \"xyz-torrent\";"], [214, "        File torrentDirectory = new File(rootDirectory, torrentName);"], [215, "        String extension = \"-multi.bin\";"], [216, ""], [217, "        String fileName1 = 1 + extension,"], [218, "               fileName2 = 2 + extension,"], [219, "               fileName3 = 3 + extension,"], [220, "               fileName4 = 4 + extension,"], [221, "               fileName5 = 5 + extension,"], [222, "               fileName6 = 6 + extension;"], [223, ""], [224, "        IDataDescriptor descriptor = createDataDescriptor_MultiFile(fileName1, fileName2, fileName3, fileName4,"], [225, "                fileName5, fileName6, torrentDirectory);"], [226, "        List<IChunkDescriptor> chunks = descriptor.getChunkDescriptors();"], [265, "        assertFileHasContents(new File(torrentDirectory, fileName1), MULTI_FILE_1);"], [266, "        assertFileHasContents(new File(torrentDirectory, fileName2), MULTI_FILE_2);"], [267, "        assertFileHasContents(new File(torrentDirectory, fileName3), MULTI_FILE_3);"], [268, "        assertFileHasContents(new File(torrentDirectory, fileName4), MULTI_FILE_4);"], [269, "        assertFileHasContents(new File(torrentDirectory, fileName5), MULTI_FILE_5);"], [270, "        assertFileHasContents(new File(torrentDirectory, fileName6), MULTI_FILE_6);"], [271, "    }"], [273, "    @Test"], [274, "    public void testDescriptors_ReadMultiFile() {"], [276, "        String torrentName = \"xyz-torrent-read\";"], [277, "        File torrentDirectory = new File(rootDirectory, torrentName);"], [278, "        String extension = \"-multi.bin\";"], [279, ""], [280, "        String fileName1 = 1 + extension,"], [281, "               fileName2 = 2 + extension,"], [282, "               fileName3 = 3 + extension,"], [283, "               fileName4 = 4 + extension,"], [284, "               fileName5 = 5 + extension,"], [285, "               fileName6 = 6 + extension;"], [286, ""], [287, "        writeBytesToFile(new File(torrentDirectory, fileName1), MULTI_FILE_1);"], [288, "        writeBytesToFile(new File(torrentDirectory, fileName2), MULTI_FILE_2);"], [289, "        writeBytesToFile(new File(torrentDirectory, fileName3), MULTI_FILE_3);"], [290, "        writeBytesToFile(new File(torrentDirectory, fileName4), MULTI_FILE_4);"], [291, "        writeBytesToFile(new File(torrentDirectory, fileName5), MULTI_FILE_5);"], [292, "        writeBytesToFile(new File(torrentDirectory, fileName6), MULTI_FILE_6);"], [294, "        IDataDescriptor descriptor = createDataDescriptor_MultiFile(fileName1, fileName2, fileName3, fileName4,"], [295, "                fileName5, fileName6, torrentDirectory);"], [296, "        List<IChunkDescriptor> chunks = descriptor.getChunkDescriptors();"], [297, ""], [298, "        byte[] block;"], [299, ""], [300, "        // beginning"], [301, "        block = chunks.get(0).readBlock(0, 8);"], [302, "        assertArrayEquals(Arrays.copyOfRange(MULTI_FILE_1, 0, 8), block);"], [303, ""], [304, "        // end"], [305, "        block = chunks.get(0).readBlock(8, 8);"], [306, "        assertArrayEquals(Arrays.copyOfRange(MULTI_FILE_1, 8, 16), block);"], [307, ""], [308, "        // whole chunk"], [309, "        block = chunks.get(0).readBlock(0, 16);"], [310, "        assertArrayEquals(Arrays.copyOfRange(MULTI_FILE_1, 0, 16), block);"], [312, "        // piece"], [313, "        block = chunks.get(0).readBlock(1, 14);"], [314, "        assertArrayEquals(Arrays.copyOfRange(MULTI_FILE_1, 1, 15), block);"], [316, "        // end of a file"], [317, "        block = chunks.get(1).readBlock(0, 9);"], [318, "        assertArrayEquals(Arrays.copyOfRange(MULTI_FILE_1, 16, 25), block);"], [319, ""], [320, "        // beginning of a file"], [321, "        block = chunks.get(1).readBlock(9, 7);"], [322, "        assertArrayEquals(Arrays.copyOfRange(MULTI_FILE_2, 0, 7), block);"], [323, ""], [324, "        // whole chunk that consists of 2 files"], [325, "        block = chunks.get(1).readBlock(0, 16);"], [326, "        byte[] chunk1 = new byte[16];"], [327, "        System.arraycopy(MULTI_FILE_1, 16, chunk1, 0, 9);"], [328, "        System.arraycopy(MULTI_FILE_2, 0, chunk1, 9, 7);"], [329, "        assertArrayEquals(chunk1, block);"], [330, ""], [331, "        // piece of a chunk that consists of 2 files"], [332, "        block = chunks.get(1).readBlock(8, 2);"], [333, "        byte[] chunk1piece = new byte[2];"], [334, "        System.arraycopy(MULTI_FILE_1, 24, chunk1piece, 0, 1);"], [335, "        System.arraycopy(MULTI_FILE_2, 0, chunk1piece, 1, 1);"], [336, "        assertArrayEquals(chunk1piece, block);"], [337, ""], [338, "        // 1-byte block"], [339, "        block = chunks.get(5).readBlock(15, 1);"], [340, "        assertArrayEquals(Arrays.copyOfRange(MULTI_FILE_6, 0, 1), block);"]], "deleted": [[16, "import static bt.data.ChunkDescriptorTestUtil.readBytesFromFile;"], [49, "    @Test"], [50, "    public void testDescriptors_WriteSingleFile() {"], [51, ""], [52, "        String fileName = \"1-single.bin\";"], [67, "        List<IChunkDescriptor> chunks = descriptor.getChunkDescriptors();"], [69, "        assertEquals(4, chunks.size());"], [94, "        byte[] file = readBytesFromFile(new File(rootDirectory, fileName), (int) fileSize);"], [95, "        assertArrayEquals(SINGLE_FILE, file);"], [121, "    @Test"], [122, "    public void testDescriptors_WriteMultiFile() {"], [123, ""], [124, "        String torrentName = \"xyz-torrent\";"], [125, "        File torrentDirectory = new File(rootDirectory, torrentName);"], [126, "        String extension = \"-multi.bin\";"], [128, "        String fileName1 = 1 + extension,"], [129, "               fileName2 = 2 + extension,"], [130, "               fileName3 = 3 + extension,"], [131, "               fileName4 = 4 + extension,"], [132, "               fileName5 = 5 + extension,"], [133, "               fileName6 = 6 + extension;"], [180, "        List<IChunkDescriptor> chunks = descriptor.getChunkDescriptors();"], [182, "        assertEquals(6, chunks.size());"], [221, "        byte[] file1 = readBytesFromFile(new File(torrentDirectory, fileName1), (int) fileSize1);"], [222, "        assertArrayEquals(MULTI_FILE_1, file1);"], [224, "        byte[] file2 = readBytesFromFile(new File(torrentDirectory, fileName2), (int) fileSize2);"], [225, "        assertArrayEquals(MULTI_FILE_2, file2);"], [227, "        byte[] file3 = readBytesFromFile(new File(torrentDirectory, fileName3), (int) fileSize3);"], [228, "        assertArrayEquals(MULTI_FILE_3, file3);"], [230, "        byte[] file4 = readBytesFromFile(new File(torrentDirectory, fileName4), (int) fileSize4);"], [231, "        assertArrayEquals(MULTI_FILE_4, file4);"], [233, "        byte[] file5 = readBytesFromFile(new File(torrentDirectory, fileName5), (int) fileSize5);"], [234, "        assertArrayEquals(MULTI_FILE_5, file5);"], [236, "        byte[] file6 = readBytesFromFile(new File(torrentDirectory, fileName6), (int) fileSize6);"], [237, "        assertArrayEquals(MULTI_FILE_6, file6);"]]}, "num_lines_added": 138, "num_lines_removed": 35}