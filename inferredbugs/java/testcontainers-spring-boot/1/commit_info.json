{"hash": "4f49abf2c314be5f7dee5cd5bf2b7a9b6e0078fb", "message": "Consider using KafkaContainer from Testcontainers #81 (#387)", "file_num_lines": 143, "diff_parsed": {"added": [[43, "import org.testcontainers.containers.KafkaContainer;"], [56, "import static org.testcontainers.containers.KafkaContainer.KAFKA_PORT;"], [87, "        String dockerImageVersion = kafkaProperties.getDockerImageVersion();"], [88, "        log.info(\"Starting kafka broker. Docker image version: {}\", dockerImageVersion);"], [89, ""], [90, "        KafkaContainer kafka = new KafkaContainer(dockerImageVersion)"], [91, "        {"], [92, "            @Override"], [93, "            public String getBootstrapServers() {"], [94, "                super.getBootstrapServers();"], [95, "                return \"EXTERNAL_PLAINTEXT://\" + getHost() + \":\" + getMappedPort(kafkaExternalPort) + \",\" +"], [96, "                        \"EXTERNAL_SASL_PLAINTEXT://\" + getHost() + \":\" + getMappedPort(saslPlaintextKafkaExternalPort) + \",\" +"], [97, "                        \"INTERNAL_PLAINTEXT://\" + KAFKA_HOST_NAME + \":\" + kafkaInternalPort;"], [98, "            }"], [99, "        }"], [103, "                .withExternalZookeeper(containerZookeeperConnect)"], [111, "                        \"INTERNAL_PLAINTEXT:PLAINTEXT,\" +"], [112, "                        \"BROKER:PLAINTEXT\""], [117, "                        \"INTERNAL_PLAINTEXT://0.0.0.0:\" + kafkaInternalPort + \",\" +"], [118, "                        \"BROKER://0.0.0.0:9092\""], [133, "                .withExposedPorts(kafkaInternalPort, kafkaExternalPort, saslPlaintextKafkaExternalPort, KAFKA_PORT)"], [161, "        Integer mappedBrokerPort = kafka.getMappedPort(kafkaProperties.getBrokerPort());"], [162, "        String kafkaBrokerList = format(\"%s:%d\", host, mappedBrokerPort);"], [165, "        Integer mappedSaslBrokerPort = kafka.getMappedPort(kafkaProperties.getSaslPlaintextBrokerPort());"], [166, "        String saslPlaintextKafkaBrokerList = format(\"%s:%d\", host, mappedSaslBrokerPort);"], [171, "        Integer containerPort = kafkaProperties.getContainerBrokerPort();"], [172, "        String kafkaBrokerListForContainers = format(\"%s:%d\", KAFKA_HOST_NAME, containerPort);"]], "deleted": [[42, "import org.testcontainers.containers.FixedHostPortGenericContainer;"], [47, "import java.net.URI;"], [67, "    private static final String DOCKER_HOST = \"DOCKER_HOST\";"], [68, ""], [89, "        log.info(\"Starting kafka broker. Docker image: {}\", kafkaProperties.getDockerImage());"], [90, ""], [91, "        GenericContainer kafka = new FixedHostPortGenericContainer<>(kafkaProperties.getDockerImage())"], [95, "                .withEnv(\"KAFKA_ZOOKEEPER_CONNECT\", containerZookeeperConnect)"], [103, "                        \"INTERNAL_PLAINTEXT:PLAINTEXT\""], [104, "                )"], [105, "                .withEnv(\"KAFKA_ADVERTISED_LISTENERS\","], [106, "                        \"EXTERNAL_PLAINTEXT://\" + kafkaHost() + \":\" + kafkaExternalPort + \",\" +"], [107, "                        \"EXTERNAL_SASL_PLAINTEXT://\" + kafkaHost() + \":\" + saslPlaintextKafkaExternalPort + \",\" +"], [108, "                        \"INTERNAL_PLAINTEXT://\" + KAFKA_HOST_NAME + \":\" + kafkaInternalPort"], [113, "                        \"INTERNAL_PLAINTEXT://0.0.0.0:\" + kafkaInternalPort"], [128, "                .withExposedPorts(kafkaInternalPort, kafkaExternalPort, saslPlaintextKafkaExternalPort)"], [129, "                .withFixedExposedPort(kafkaInternalPort, kafkaInternalPort)"], [130, "                .withFixedExposedPort(kafkaExternalPort, kafkaExternalPort)"], [131, "                .withFixedExposedPort(saslPlaintextKafkaExternalPort, saslPlaintextKafkaExternalPort)"], [153, "    private String kafkaHost() {"], [154, "        final String dockerHost = System.getenv(DOCKER_HOST);"], [155, ""], [156, "        if (dockerHost != null) {"], [157, "            try {"], [158, "                final String dockerHostHost = new URI(dockerHost).getHost();"], [159, ""], [160, "                log.info(\"From {}={} parsed Kafka host: {}\", DOCKER_HOST, dockerHost, dockerHostHost);"], [161, ""], [162, "                return dockerHostHost;"], [163, ""], [164, "            } catch (Exception e) {"], [165, "                log.info(\"Failed to parse {}={}, use localhost instead: {}\", DOCKER_HOST, dockerHost, e.getMessage());"], [166, "            }"], [167, "        }"], [168, ""], [169, "        log.info(\"Use localhost as Kafka host\");"], [170, ""], [171, "        return \"localhost\";"], [172, "    }"], [173, ""], [180, "        String kafkaBrokerList = format(\"%s:%d\", host, kafkaProperties.getBrokerPort());"], [183, "        String saslPlaintextKafkaBrokerList = format(\"%s:%d\", host, kafkaProperties.getSaslPlaintextBrokerPort());"], [188, "        Integer mappedPort = kafka.getMappedPort(kafkaProperties.getContainerBrokerPort());"], [189, "        String kafkaBrokerListForContainers = format(\"%s:%d\", KAFKA_HOST_NAME, mappedPort);"]]}, "num_lines_added": 27, "num_lines_removed": 44}