{"hash": "d97b29d613a08f5dcf1c8f2b639a48d422b84962", "message": "ParallelCollectors.parallelToListOrdered (#194)", "file_num_lines": 48, "diff_parsed": {"added": [[14, "import java.util.function.Function;"], [16, "import java.util.function.UnaryOperator;"], [44, "        Map.Entry<List<Long>, Long> result = timed(collectWith(f -> parallelToList(f, executor, parallelism), unitsOfWork));"], [56, "    private static <R extends Collection<Long>> Supplier<R> collectWith(Function<UnaryOperator<Long>,  Collector<Long, ?, CompletableFuture<R>>> collector, int unitsOfWork) {"], [57, "        return () -> Stream.generate(() -> 42L)"], [58, "            .limit(unitsOfWork)"], [59, "            .collect(collector.apply(f -> returnWithDelay(42L, Duration.ofMillis(BLOCKING_MILLIS))))"], [60, "            .join();"]], "deleted": [[42, "        Map.Entry<List<Long>, Long> result = timed(collectWith(parallelToList(executor, parallelism), unitsOfWork));"], [54, "    private static <T, R extends Collection<T>> Supplier<R> collectWith(Collector<Supplier<Long>, ?, CompletableFuture<R>> collector, int unitsOfWork) {"], [55, "        return () -> Stream.generate(() -> supplier(() -> returnWithDelay(42L, Duration.ofMillis(BLOCKING_MILLIS))))"], [56, "          .limit(unitsOfWork)"], [57, "          .collect(collector)"], [58, "          .join();"]]}, "num_lines_added": 8, "num_lines_removed": 6}