{"hash": "d97b29d613a08f5dcf1c8f2b639a48d422b84962", "message": "ParallelCollectors.parallelToListOrdered (#194)", "file_num_lines": 57, "diff_parsed": {"added": [[15, "import java.util.function.Function;"], [17, "import java.util.function.UnaryOperator;"], [43, "        Map.Entry<Set<Long>, Long> result = timed(collectWith(f-> parallelToSet(f, executor, parallelism), unitsOfWork));"], [65, "    private static <R extends Collection<Long>> Supplier<R> collectWith(Function<UnaryOperator<Long>,  Collector<Long, ?, CompletableFuture<R>>> collector, int unitsOfWork) {"], [66, "        return () -> Stream.generate(() -> 42L)"], [67, "            .limit(unitsOfWork)"], [68, "            .collect(collector.apply(f -> returnWithDelay(42L, Duration.ofMillis(BLOCKING_MILLIS))))"], [69, "            .join();"]], "deleted": [[41, "        Map.Entry<Set<Long>, Long> result = timed(collectWith(parallelToSet(executor, parallelism), unitsOfWork));"], [63, "    private static <T, R extends Collection<T>> Supplier<R> collectWith(Collector<Supplier<Long>, ?, CompletableFuture<R>> collector, int unitsOfWork) {"], [64, "        return () -> Stream.generate(() -> supplier(() -> returnWithDelay(42L, Duration.ofMillis(BLOCKING_MILLIS))))"], [65, "          .limit(unitsOfWork)"], [66, "          .collect(collector)"], [67, "          .join();"]]}, "num_lines_added": 8, "num_lines_removed": 6}