{"hash": "f8317a57f0117e1c3a402e7de8b19de9d70e7bff", "message": "Fixed ManagerReader Interrupt (AJ-27)", "file_num_lines": 732, "diff_parsed": {"added": [[612, "        callbackHandler = new DefaultResponseHandler(result);"], [614, "        synchronized (result)"], [616, "            sendAction(action, callbackHandler);"], [619, "                result.wait(timeout);"], [623, "                //TODO fix logging"], [624, "                System.err.println(\"Interrupted!\");"], [626, "        }"], [627, ""], [628, "        // still no response?"], [629, "        if (result.getResponse() == null)"], [630, "        {"], [631, "            throw new TimeoutException(\"Timeout waiting for response to \""], [632, "                    + action.getAction());"], [712, "                .getActionCompleteEventClass());"], [729, "        synchronized (responseEvents)"], [731, "            writer.sendAction(action, internalActionId);"], [734, "                responseEvents.wait(timeout);"], [738, "                //TODO fix logging"], [739, "                System.err.println(\"Interrupted\");"], [741, "        }"], [743, "        // still no response or not all events received and timed out?"], [744, "        if ((responseEvents.getResponse() == null || !responseEvents"], [745, "                .isComplete()))"], [746, "        {"], [747, "            // clean up"], [748, "            synchronized (this.responseEventHandlers)"], [750, "                this.responseEventHandlers.remove(internalActionId);"], [752, ""], [753, "            throw new EventTimeoutException("], [754, "                    \"Timeout waiting for response or response events to \""], [755, "                            + action.getAction(), responseEvents);"], [1149, "        public DefaultResponseHandler(ResponseHandlerResult result)"], [1156, "            synchronized (result)"], [1157, "            {"], [1158, "                result.setResponse(response);"], [1159, "                result.notify();"], [1160, "            }"], [1192, "                Class actionCompleteEventClass)"], [1200, "            synchronized (events)"], [1202, "                // should always be a ResponseEvent, anyway..."], [1203, "                if (event instanceof ResponseEvent)"], [1204, "                {"], [1205, "                    ResponseEvent responseEvent;"], [1206, ""], [1207, "                    responseEvent = (ResponseEvent) event;"], [1208, "                    events.addEvent(responseEvent);"], [1209, "                }"], [1210, ""], [1211, "                // finished?"], [1212, "                if (actionCompleteEventClass.isAssignableFrom(event.getClass()))"], [1215, "                    // notify if action complete event and response have been received"], [1218, "                        events.notify();"], [1235, "                // notify if action complete event and response have been received"], [1238, "                    events.notify();"]], "deleted": [[608, "        long start;"], [609, "        long timeSpent;"], [614, "        callbackHandler = new DefaultResponseHandler(result, Thread"], [615, "                .currentThread());"], [616, ""], [617, "        sendAction(action, callbackHandler);"], [619, "        start = System.currentTimeMillis();"], [620, "        timeSpent = 0;"], [621, "        while (result.getResponse() == null)"], [625, "                Thread.sleep(timeout - timeSpent);"], [630, ""], [631, "            // still no response and timed out?"], [632, "            timeSpent = System.currentTimeMillis() - start;"], [633, "            if (result.getResponse() == null && timeSpent > timeout)"], [634, "            {"], [635, "                throw new TimeoutException(\"Timeout waiting for response to \""], [636, "                        + action.getAction());"], [637, "            }"], [691, "        long start;"], [692, "        long timeSpent;"], [719, "                .getActionCompleteEventClass(), Thread.currentThread());"], [736, "        writer.sendAction(action, internalActionId);"], [737, ""], [738, "        // let's wait to see what we get"], [739, "        start = System.currentTimeMillis();"], [740, "        timeSpent = 0;"], [741, "        while (responseEvents.getResponse() == null"], [742, "                || !responseEvents.isComplete())"], [746, "                Thread.sleep(timeout - timeSpent);"], [752, "            // still no response or not all events received and timed out?"], [753, "            timeSpent = System.currentTimeMillis() - start;"], [754, "            if ((responseEvents.getResponse() == null || !responseEvents"], [755, "                    .isComplete())"], [756, "                    && timeSpent > timeout)"], [758, "                // clean up"], [759, "                synchronized (this.responseEventHandlers)"], [760, "                {"], [761, "                    this.responseEventHandlers.remove(internalActionId);"], [762, "                }"], [763, ""], [764, "                throw new EventTimeoutException("], [765, "                        \"Timeout waiting for response or response events to \""], [766, "                                + action.getAction(), responseEvents);"], [1155, "        private final Thread thread;"], [1161, "         * @param thread the thread to interrupt when the response has been"], [1162, "         *            received"], [1164, "        public DefaultResponseHandler(ResponseHandlerResult result,"], [1165, "                Thread thread)"], [1168, "            this.thread = thread;"], [1173, "            result.setResponse(response);"], [1174, "            thread.interrupt();"], [1195, "        private final Thread thread;"], [1207, "                Class actionCompleteEventClass, Thread thread)"], [1211, "            this.thread = thread;"], [1216, "            // should always be a ResponseEvent, anyway..."], [1217, "            if (event instanceof ResponseEvent)"], [1218, "            {"], [1219, "                ResponseEvent responseEvent;"], [1220, ""], [1221, "                responseEvent = (ResponseEvent) event;"], [1222, "                events.addEvent(responseEvent);"], [1223, "            }"], [1224, ""], [1225, "            // finished?"], [1226, "            if (actionCompleteEventClass.isAssignableFrom(event.getClass()))"], [1228, "                synchronized (events)"], [1233, "                        thread.interrupt();"], [1252, "                    thread.interrupt();"]]}, "num_lines_added": 54, "num_lines_removed": 68}