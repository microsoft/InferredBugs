{"hash": "97e98892224607a5e1000d319f9d4e9a7782e879", "message": "add checks for badly behaved event handlers and recover.", "file_num_lines": 257, "diff_parsed": {"added": [[42, "    private volatile boolean _stop = false;"], [44, "    private static final int QUEUE_SIZE = 1000;"], [45, "    private final BlockingQueue<EventLifeMonitor<org.asteriskjava.manager.event.ManagerEvent>> _eventQueue = new LinkedBlockingQueue<>("], [46, "            QUEUE_SIZE);"], [48, "    long suppressQueueSizeErrorUntil = 0;"], [57, "        Thread _th = new Thread(this);"], [58, "        _th.setName(\"EventQueue: \" + name);//$NON-NLS-1$"], [59, "        _th.setDaemon(true);"], [60, "        _th.start();"], [92, "            if (_eventQueue.remainingCapacity() < QUEUE_SIZE / 10"], [93, "                    && suppressQueueSizeErrorUntil < System.currentTimeMillis())"], [95, "                suppressQueueSizeErrorUntil = System.currentTimeMillis() + 1000;"], [96, "                logger.error(\"EventQueue more than 90% full\");"], [105, "        try"], [107, "            while (!this._stop)"], [109, "                try"], [111, "                    final EventLifeMonitor<org.asteriskjava.manager.event.ManagerEvent> elm = this._eventQueue.poll(2,"], [112, "                            TimeUnit.SECONDS);"], [113, "                    if (elm != null)"], [115, "                        // A poison queue event means its time to shutdown."], [116, "                        if (elm.getEvent().getClass() == PoisonQueueEvent.class)"], [117, "                        {"], [118, "                            logger.warn(\"Got Poison event\");"], [119, "                            break;"], [120, "                        }"], [121, ""], [122, "                        final ManagerEvent iEvent = CoherentEventFactory.build(elm.getEvent());"], [123, "                        if (iEvent != null)"], [124, "                        {"], [125, "                            dispatchEvent(iEvent);"], [126, "                            elm.assessAge();"], [127, "                        }"], [130, "                catch (final Exception e)"], [132, "                    /**"], [133, "                     * If an exception is thrown whilst we are shutting down"], [134, "                     * then we don't care. If it is thrown when we aren't"], [135, "                     * shutting down then we have a problem and we need to log"], [136, "                     * it."], [137, "                     */"], [138, "                    if (!this._stop)"], [139, "                    {"], [140, "                        CoherentManagerEventQueue.logger.error(e, e);"], [141, "                    }"], [144, "            }"], [145, "        }"], [146, "        finally"], [147, "        {"], [148, "            logger.warn(\"Shutting down!\");"], [178, "    //"], [179, "    private final ExecutorService executors = Executors.newCachedThreadPool();"], [223, "            if (!latch.await(2, TimeUnit.SECONDS))"], [224, "            {"], [225, "                logger.error(\"Timeout waiting for event to be processed \" + event);"], [226, "            }"], [228, "            if (totalTime.timeTaken() > 100)"]], "deleted": [[42, "    private boolean _stop = false;"], [43, "    private final Thread _th;"], [44, "    private final BlockingQueue<EventLifeMonitor<org.asteriskjava.manager.event.ManagerEvent>> _eventQueue = new LinkedBlockingQueue<>();"], [46, "    private int _queueMaxSize;"], [48, "    private long _queueSum;"], [49, ""], [50, "    private long _queueCount;"], [59, "        this._th = new Thread(this);"], [60, "        this._th.setName(\"EventQueue: \" + name);//$NON-NLS-1$"], [61, "        this._th.setDaemon(true);"], [62, "        this._th.start();"], [92, ""], [95, "            final int queueSize = this._eventQueue.size();"], [96, "            if (this._queueMaxSize < queueSize)"], [98, "                this._queueMaxSize = queueSize;"], [100, "            this._queueSum += queueSize;"], [101, "            this._queueCount++;"], [103, "            if (CoherentManagerEventQueue.logger.isDebugEnabled())"], [104, "            {"], [105, "                if (this._eventQueue.size() > ((this._queueMaxSize + (this._queueSum / this._queueCount)) / 2))"], [106, "                {"], [107, "                    CoherentManagerEventQueue.logger.debug(\"queue gtr max avg: size=\" + queueSize + \" max:\" //$NON-NLS-1$ //$NON-NLS-2$"], [108, "                            + this._queueMaxSize + \" avg:\" + (this._queueSum / this._queueCount)); //$NON-NLS-1$"], [109, "                }"], [110, "            }"], [117, ""], [118, "        while (!this._stop)"], [120, "            try"], [122, "                final EventLifeMonitor<org.asteriskjava.manager.event.ManagerEvent> elm = this._eventQueue.poll(2,"], [123, "                        TimeUnit.SECONDS);"], [124, "                if (elm != null)"], [126, "                    // A poison queue event means its time to shutdown."], [127, "                    if (elm.getEvent().getClass() == PoisonQueueEvent.class)"], [128, "                        break;"], [129, ""], [130, "                    final ManagerEvent iEvent = CoherentEventFactory.build(elm.getEvent());"], [131, "                    if (iEvent != null)"], [133, "                        dispatchEvent(iEvent);"], [134, "                        elm.assessAge();"], [137, "            }"], [138, "            catch (final Exception e)"], [139, "            {"], [140, "                /**"], [141, "                 * If an exception is thrown whilst we are shutting down then we"], [142, "                 * don't care. If it is thrown when we aren't shutting down then"], [143, "                 * we have a problem and we need to log it."], [144, "                 */"], [145, "                if (!this._stop)"], [147, "                    CoherentManagerEventQueue.logger.error(e, e);"], [149, "            }"], [180, "    // TODO: make this multi threaded"], [181, "    private final ExecutorService executors = Executors.newFixedThreadPool(1);"], [225, "            latch.await();"], [227, "            if (totalTime.timeTaken() > 500)"]]}, "num_lines_added": 55, "num_lines_removed": 54}