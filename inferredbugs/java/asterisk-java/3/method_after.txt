    public void dispatchEvent(ManagerEvent event)
    {
        // shouldn't happen
        if (event == null)
        {
            logger.error("Unable to dispatch null event");
            return;
        }

        logger.debug("Dispatching event:\n" + event.toString());

        // dispatch ResponseEvents to the appropriate responseEventHandler
        if (event instanceof ResponseEvent)
        {
            ResponseEvent responseEvent;
            String internalActionId;

            responseEvent = (ResponseEvent) event;
            internalActionId = responseEvent.getInternalActionId();
            if (internalActionId != null)
            {
                synchronized (responseEventListeners)
                {
                    ManagerEventListener listener;

                    listener = responseEventListeners.get(internalActionId);
                    if (listener != null)
                    {
                        try
                        {
                            listener.onManagerEvent(event);
                        }
                        catch (RuntimeException e)
                        {
                            logger.warn("Unexpected exception in event listener "
                                    + listener.getClass().getName(), e);
                        }
                    }
                }
            }
            else
            {
                // ResponseEvent without internalActionId:
                // this happens if the same event class is used as response event
                // and as an event that is not triggered by a Manager command
                // example: QueueMemberStatusEvent.
                //logger.debug("ResponseEvent without "
                //        + "internalActionId:\n" + responseEvent);
            }
        }
        if (event instanceof DisconnectEvent)
        {
            if (state == CONNECTED)
            {
                state = RECONNECTING;
                cleanup();
                reconnectThread = new Thread(new Runnable()
                {
                    public void run()
                    {
                        reconnect();
                    }
                });
                reconnectThread.setName("ReconnectThread-" + reconnectThreadNum.getAndIncrement());
                reconnectThread.setDaemon(true);
                reconnectThread.start();
            }
        }
        if (event instanceof ProtocolIdentifierReceivedEvent)
        {
            ProtocolIdentifierReceivedEvent protocolIdentifierReceivedEvent;
            String protocolIdentifier;

            protocolIdentifierReceivedEvent = (ProtocolIdentifierReceivedEvent) event;
            protocolIdentifier = protocolIdentifierReceivedEvent.getProtocolIdentifier();
            setProtocolIdentifier(protocolIdentifier);
        }

        // dispatch to listeners registered by users
        synchronized (eventListeners)
        {
            for (ManagerEventListener listener : eventListeners)
            {
                try
                {
                    listener.onManagerEvent(event);
                }
                catch (RuntimeException e)
                {
                    logger.warn("Unexpected exception in eventHandler "
                            + listener.getClass().getName(), e);
                }
            }
        }
    }