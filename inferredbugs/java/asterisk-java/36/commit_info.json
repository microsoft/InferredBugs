{"hash": "6a7d2e626cc98d417b3eaaad708103d94e19d28d", "message": "fix for possible unnecessary timeout", "file_num_lines": 1094, "diff_parsed": {"added": [[39, "import java.util.concurrent.CountDownLatch;"], [40, "import java.util.concurrent.TimeUnit;"], [100, "    private static final Pattern VERSION_PATTERN_CERTIFIED_11 = Pattern"], [101, "            .compile(\"^\\\\s*Asterisk certified/((SVN-branch|GIT)-)?11[-. ].*\");"], [104, "    private static final Pattern VERSION_PATTERN_CERTIFIED_13 = Pattern"], [105, "            .compile(\"^\\\\s*Asterisk certified/((SVN-branch|GIT)-)?13[-. ].*\");"], [538, "        if (protocolIdentifier.getValue() == null)"], [540, "            try"], [542, "                protocolIdentifier.await(timeout);"], [544, "            catch (InterruptedException e) // NOPMD"], [545, "            {"], [546, "                Thread.currentThread().interrupt();"], [547, "            }"], [548, "        }"], [550, "        if (protocolIdentifier.getValue() == null)"], [551, "        {"], [552, "            disconnect();"], [553, "            if (reader != null && reader.getTerminationException() != null)"], [555, "                throw reader.getTerminationException();"], [557, "            throw new TimeoutException(\"Timeout waiting for protocol identifier\");"], [661, "                if (showVersionFilesResponse.getOutput() != null)"], [662, "                {"], [663, "                    Asterisk14outputPresent = true;"], [664, "                }"], [665, "                else"], [666, "                {"], [667, "                    break;"], [668, "                }"], [670, "            if (Asterisk14outputPresent)"], [671, "            {"], [672, "                List<String> outputList = Arrays"], [673, "                        .asList(showVersionFilesResponse.getOutput().split(SocketConnectionFacadeImpl.NL_PATTERN.pattern()));"], [674, "                showVersionFilesResult = outputList;"], [675, "            }"], [676, "            else"], [677, "            {"], [678, "                showVersionFilesResult = ((CommandResponse) showVersionFilesResponse).getResult();"], [725, "                            else if (VERSION_PATTERN_CERTIFIED_11.matcher(coreLine).matches())"], [737, "                            else if (VERSION_PATTERN_CERTIFIED_13.matcher(coreLine).matches())"], [885, "        protocolIdentifier.reset();"], [894, "    /**"], [896, "     *"], [897, "     * @param timeout - in milliseconds"], [902, "        ResponseHandlerResult result = new ResponseHandlerResult();"], [903, "        SendActionCallback callbackHandler = new DefaultSendActionCallback(result);"], [905, "        sendAction(action, callbackHandler);"], [907, "        // definitely return null for the response of user events"], [908, "        if (action instanceof UserEventAction)"], [910, "            return null;"], [911, "        }"], [913, "        // only wait if we did not yet receive the response."], [914, "        // Responses may be returned really fast."], [915, "        if (result.getResponse() == null)"], [916, "        {"], [917, "            try"], [919, "                result.await(timeout);"], [921, "            catch (InterruptedException ex)"], [923, "                logger.warn(\"Interrupted while waiting for result\");"], [924, "                Thread.currentThread().interrupt();"], [1069, "            writer.sendAction(action, internalActionId);"], [1070, "            // only wait if response has not yet arrived."], [1071, "            if (responseEvents.getResponse() == null || !responseEvents.isComplete())"], [1073, "                try"], [1075, "                    responseEvents.await(timeout);"], [1076, "                }"], [1077, "                catch (InterruptedException e)"], [1078, "                {"], [1079, "                    logger.warn(\"Interrupted while waiting for response events.\");"], [1080, "                    Thread.currentThread().interrupt();"], [1161, "        return protocolIdentifier.getValue();"], [1418, "                && !\"Asterisk Call Manager/2.8.0\".equals(identifier) // Asterisk"], [1419, "                                                                     // > 13.5"], [1420, ""], [1421, "                && !\"Asterisk Call Manager/2.9.0\".equals(identifier) // Asterisk"], [1422, "                                                                     // > 13.13"], [1424, "                && !\"Asterisk Call Manager/3.1.0\".equals(identifier) // Asterisk"], [1425, "                                                                     // =14.3.0"], [1433, "        protocolIdentifier.setValue(identifier);"], [1434, "        protocolIdentifier.countDown();"], [1435, ""], [1556, "        private final CountDownLatch latch = new CountDownLatch(1);"], [1571, ""], [1572, "        private void countDown()"], [1573, "        {"], [1574, "            latch.countDown();"], [1575, "        }"], [1576, ""], [1577, "        /**"], [1578, "         * @param millis - milliseconds to wait"], [1579, "         * @throws InterruptedException"], [1580, "         */"], [1581, "        private void await(long millis) throws InterruptedException"], [1582, "        {"], [1583, "            latch.await(millis, TimeUnit.MILLISECONDS);"], [1584, "        }"], [1585, ""], [1612, "            result.setResponse(response);"], [1613, "            result.countDown();"], [1641, "            // should always be a ResponseEvent, anyway..."], [1642, "            if (event instanceof ResponseEvent)"], [1644, "                ResponseEvent responseEvent;"], [1646, "                responseEvent = (ResponseEvent) event;"], [1647, "                events.addEvent(responseEvent);"], [1648, "            }"], [1650, "            // finished?"], [1651, "            if (actionCompleteEventClass.isAssignableFrom(event.getClass()))"], [1652, "            {"], [1653, "                events.setComplete(true);"], [1654, "                // notify if action complete event and response have been"], [1655, "                // received"], [1656, "                if (events.getResponse() != null)"], [1658, "                    events.countDown();"], [1665, "            events.setRepsonse(response);"], [1666, "            if (response instanceof ManagerError)"], [1668, "                events.setComplete(true);"], [1669, "            }"], [1671, "            // finished?"], [1672, "            // notify if action complete event and response have been"], [1673, "            // received"], [1674, "            if (events.isComplete())"], [1675, "            {"], [1676, "                events.countDown();"]], "deleted": [[98, "    private static final Pattern VERSION_PATTERN_CERTIFIED_11 = Pattern.compile(\"^\\\\s*Asterisk certified/((SVN-branch|GIT)-)?11[-. ].*\");"], [101, "    private static final Pattern VERSION_PATTERN_CERTIFIED_13 = Pattern.compile(\"^\\\\s*Asterisk certified/((SVN-branch|GIT)-)?13[-. ].*\");"], [534, "        synchronized (protocolIdentifier)"], [536, "            if (protocolIdentifier.value == null)"], [538, "                try"], [539, "                {"], [540, "                    protocolIdentifier.wait(timeout);"], [541, "                }"], [542, "                catch (InterruptedException e) // NOPMD"], [543, "                {"], [544, "                    Thread.currentThread().interrupt();"], [545, "                }"], [548, "            if (protocolIdentifier.value == null)"], [550, "                disconnect();"], [551, "                if (reader != null && reader.getTerminationException() != null)"], [552, "                {"], [553, "                    throw reader.getTerminationException();"], [554, "                }"], [555, "                throw new TimeoutException(\"Timeout waiting for protocol identifier\");"], [660, "            \tif(showVersionFilesResponse.getOutput() != null){"], [661, "            \t\tAsterisk14outputPresent = true;"], [662, "            \t}else{"], [663, "            \t\tbreak;"], [664, "            \t}"], [666, "            if(Asterisk14outputPresent){"], [667, "            \tList<String> outputList = Arrays.asList(showVersionFilesResponse.getOutput().split(SocketConnectionFacadeImpl.NL_PATTERN.pattern()));"], [668, "            \tshowVersionFilesResult = outputList;"], [669, "            }else{"], [670, "            \tshowVersionFilesResult = ((CommandResponse) showVersionFilesResponse).getResult();"], [717, "\t\t\t    else if (VERSION_PATTERN_CERTIFIED_11.matcher(coreLine).matches())"], [729, "\t\t\t    else if (VERSION_PATTERN_CERTIFIED_13.matcher(coreLine).matches())"], [877, "        protocolIdentifier.value = null;"], [886, "    /*"], [892, "        ResponseHandlerResult result;"], [893, "        SendActionCallback callbackHandler;"], [895, "        result = new ResponseHandlerResult();"], [896, "        callbackHandler = new DefaultSendActionCallback(result);"], [898, "        synchronized (result)"], [900, "            sendAction(action, callbackHandler);"], [902, "            // definitely return null for the response of user events"], [903, "            if (action instanceof UserEventAction)"], [905, "                return null;"], [907, ""], [908, "            // only wait if we did not yet receive the response."], [909, "            // Responses may be returned really fast."], [910, "            if (result.getResponse() == null)"], [912, "                try"], [913, "                {"], [914, "                    result.wait(timeout);"], [915, "                }"], [916, "                catch (InterruptedException ex)"], [917, "                {"], [918, "                    logger.warn(\"Interrupted while waiting for result\");"], [919, "                    Thread.currentThread().interrupt();"], [920, "                }"], [1065, "            synchronized (responseEvents)"], [1067, "                writer.sendAction(action, internalActionId);"], [1068, "                // only wait if response has not yet arrived."], [1069, "                if (responseEvents.getResponse() == null || !responseEvents.isComplete())"], [1071, "                    try"], [1072, "                    {"], [1073, "                        responseEvents.wait(timeout);"], [1074, "                    }"], [1075, "                    catch (InterruptedException e)"], [1076, "                    {"], [1077, "                        logger.warn(\"Interrupted while waiting for response events.\");"], [1078, "                        Thread.currentThread().interrupt();"], [1079, "                    }"], [1160, "        return protocolIdentifier.value;"], [1417, "                && !\"Asterisk Call Manager/2.8.0\".equals(identifier) // Asterisk > 13.5"], [1419, "\t\t\t    && !\"Asterisk Call Manager/2.9.0\".equals(identifier) // Asterisk > 13.13"], [1420, ""], [1421, "\t\t\t    && !\"Asterisk Call Manager/3.1.0\".equals(identifier) //Asterisk =14.3.0"], [1429, "        synchronized (protocolIdentifier)"], [1430, "        {"], [1431, "            protocolIdentifier.value = identifier;"], [1432, "            protocolIdentifier.notifyAll();"], [1433, "        }"], [1594, "            synchronized (result)"], [1595, "            {"], [1596, "                result.setResponse(response);"], [1597, "                result.notifyAll();"], [1598, "            }"], [1626, "            synchronized (events)"], [1628, "                // should always be a ResponseEvent, anyway..."], [1629, "                if (event instanceof ResponseEvent)"], [1630, "                {"], [1631, "                    ResponseEvent responseEvent;"], [1633, "                    responseEvent = (ResponseEvent) event;"], [1634, "                    events.addEvent(responseEvent);"], [1635, "                }"], [1637, "                // finished?"], [1638, "                if (actionCompleteEventClass.isAssignableFrom(event.getClass()))"], [1640, "                    events.setComplete(true);"], [1641, "                    // notify if action complete event and response have been"], [1642, "                    // received"], [1643, "                    if (events.getResponse() != null)"], [1644, "                    {"], [1645, "                        events.notifyAll();"], [1646, "                    }"], [1653, "            synchronized (events)"], [1655, "                events.setRepsonse(response);"], [1656, "                if (response instanceof ManagerError)"], [1657, "                {"], [1658, "                    events.setComplete(true);"], [1659, "                }"], [1661, "                // finished?"], [1662, "                // notify if action complete event and response have been"], [1663, "                // received"], [1664, "                if (events.isComplete())"], [1665, "                {"], [1666, "                    events.notifyAll();"], [1667, "                }"], [1672, "    private static class ProtocolIdentifierWrapper"], [1673, "    {"], [1674, "        String value;"], [1675, "    }"], [1676, ""]]}, "num_lines_added": 122, "num_lines_removed": 118}