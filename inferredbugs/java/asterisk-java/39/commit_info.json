{"hash": "a3ed70bfdc2d2cf5ead44c393e99f89c400516a1", "message": "Refactor version detection support.\nAdds proper support for Asterisk 15 up to 15.2.\n\nRemoves support for < 1.6 versions, using the 'show file version' method.", "file_num_lines": 1060, "diff_parsed": {"added": [[53, "import org.asteriskjava.manager.action.*;"], [61, "import org.asteriskjava.manager.response.*;"], [83, "    private static final String CMD_SHOW_VERSION = \"core show version\";"], [100, "    // current debian stable version, as of 03/07/2018"], [101, "    private static final AsteriskVersion DEFAULT_ASTERISK_VERSION = AsteriskVersion.ASTERISK_13;"], [102, ""], [635, "        logger.info(\"Got asterisk protocol identifier version \" + protocolIdentifier.getValue());"], [639, "            try {"], [640, "                AsteriskVersion version = determineVersionByCoreSettings();"], [641, "                if (version != null) return version;"], [642, "            } catch (Exception e) {"], [644, ""], [645, "            try {"], [646, "                AsteriskVersion version = determineVersionByCoreShowVersion();"], [647, "                if (version != null) return version;"], [648, "            } catch (Exception e) {"], [650, ""], [651, "            try"], [653, "                Thread.sleep(RECONNECTION_VERSION_INTERVAL);"], [655, "            catch (Exception ex)"], [657, "                // ignore"], [658, "            } // NOPMD"], [659, "        }"], [661, "        logger.error(\"Unable to determine asterisk version, assuming \" + DEFAULT_ASTERISK_VERSION + \"... you should expect problems to follow.\");"], [662, "        return DEFAULT_ASTERISK_VERSION;"], [663, "    }"], [665, "    /**"], [666, "     * Get asterisk version by 'core settings' actions."], [667, "     * This is supported from Asterisk 1.6 onwards."], [668, "     *"], [669, "     * @return"], [670, "     * @throws Exception"], [671, "     */"], [672, "    protected AsteriskVersion determineVersionByCoreSettings() throws Exception {"], [674, "        ManagerResponse response = sendAction(new CoreSettingsAction());"], [675, "        if (!(response instanceof CoreSettingsResponse)) {"], [676, "            // NOTE: you need system or reporting permissions"], [677, "            logger.info(\"Could not get core settings, do we have the necessary permissions?\");"], [678, "            return null;"], [679, "        }"], [681, "        String ver = ((CoreSettingsResponse)response).getAsteriskVersion();"], [682, "        return parseVersionString(\"Asterisk \" + ver);"], [683, "    }"], [685, "    /**"], [686, "     * Determine version by the 'core show version' command."], [687, "     * This needs 'command' permissions."], [688, "     *"], [689, "     * @return"], [690, "     * @throws Exception"], [691, "     */"], [692, "    protected AsteriskVersion determineVersionByCoreShowVersion() throws Exception {"], [693, "        final ManagerResponse coreShowVersionResponse = sendAction(new CommandAction(CMD_SHOW_VERSION));"], [695, "        if (coreShowVersionResponse == null || !(coreShowVersionResponse instanceof CommandResponse)) {"], [696, "            // this needs 'command' permissions"], [697, "            logger.info(\"Could not get response for 'core show version'\");"], [698, "            return null;"], [701, "        final List<String> coreShowVersionResult = ((CommandResponse) coreShowVersionResponse).getResult();"], [702, "        if (coreShowVersionResult == null || coreShowVersionResult.isEmpty()) {"], [703, "            logger.warn(\"Got empty response for 'core show version'\");"], [704, "            return null;"], [705, "        }"], [707, "        final String coreLine = coreShowVersionResult.get(0);"], [708, "        return parseVersionString(coreLine);"], [711, "    /**"], [712, "     * Parse a version identifier coming from ast_get_version."], [713, "     * @param versionString"], [714, "     * @return"], [715, "     */"], [716, "    protected AsteriskVersion parseVersionString(String versionString) {"], [718, "        if (VERSION_PATTERN_1_6.matcher(versionString).matches())"], [720, "            return AsteriskVersion.ASTERISK_1_6;"], [722, "        else if (VERSION_PATTERN_1_8.matcher(versionString).matches())"], [724, "            return AsteriskVersion.ASTERISK_1_8;"], [726, "        else if (VERSION_PATTERN_10.matcher(versionString).matches())"], [728, "            return AsteriskVersion.ASTERISK_10;"], [729, "        }"], [730, "        else if (VERSION_PATTERN_11.matcher(versionString).matches())"], [731, "        {"], [732, "            return AsteriskVersion.ASTERISK_11;"], [733, "        }"], [734, "        else if (VERSION_PATTERN_CERTIFIED_11.matcher(versionString).matches())"], [735, "        {"], [736, "            return AsteriskVersion.ASTERISK_11;"], [737, "        }"], [738, "        else if (VERSION_PATTERN_12.matcher(versionString).matches())"], [739, "        {"], [740, "            return AsteriskVersion.ASTERISK_12;"], [741, "        }"], [742, "        else if (VERSION_PATTERN_13.matcher(versionString).matches())"], [743, "        {"], [744, "            return AsteriskVersion.ASTERISK_13;"], [745, "        }"], [746, "        else if (VERSION_PATTERN_CERTIFIED_13.matcher(versionString).matches())"], [747, "        {"], [748, "            return AsteriskVersion.ASTERISK_13;"], [749, "        }"], [750, "        else if (VERSION_PATTERN_14.matcher(versionString).matches())"], [751, "        {"], [752, "            return AsteriskVersion.ASTERISK_14;"], [753, "        }"], [754, "        else if (VERSION_PATTERN_15.matcher(versionString).matches())"], [755, "        {"], [756, "            return AsteriskVersion.ASTERISK_15;"], [953, "        if (action instanceof CoreSettingsAction)"], [954, "            return true;"], [955, ""], [956, "        if (action instanceof CommandAction) {"], [957, "            String cmd = ((CommandAction) action).getCommand();"], [958, "            return CMD_SHOW_VERSION.equals(cmd);"], [960, ""], [961, "        return false;"], [1392, "                && !\"Asterisk Call Manager/3.2.0\".equals(identifier) // since Asterisk 14.4.0"], [1393, ""], [1394, "                && !\"Asterisk Call Manager/4.0.0\".equals(identifier) // since Asterisk 15"], [1395, "                && !\"Asterisk Call Manager/4.0.1\".equals(identifier) // since Asterisk 15.1"], [1396, "                && !\"Asterisk Call Manager/4.0.2\".equals(identifier) // since Asterisk 15.2"], [1397, ""]], "deleted": [[35, "import java.util.Arrays;"], [42, "import java.util.regex.Matcher;"], [55, "import org.asteriskjava.manager.action.ChallengeAction;"], [56, "import org.asteriskjava.manager.action.CommandAction;"], [57, "import org.asteriskjava.manager.action.EventGeneratingAction;"], [58, "import org.asteriskjava.manager.action.LoginAction;"], [59, "import org.asteriskjava.manager.action.LogoffAction;"], [60, "import org.asteriskjava.manager.action.ManagerAction;"], [61, "import org.asteriskjava.manager.action.UserEventAction;"], [69, "import org.asteriskjava.manager.response.ChallengeResponse;"], [70, "import org.asteriskjava.manager.response.CommandResponse;"], [71, "import org.asteriskjava.manager.response.ManagerError;"], [72, "import org.asteriskjava.manager.response.ManagerResponse;"], [94, "    private static final Pattern SHOW_VERSION_PATTERN = Pattern.compile(\"^(core )?show version.*\");"], [643, "        // if (\"Asterisk Call Manager/1.1\".equals(protocolIdentifier.value))"], [644, "        // {"], [645, "        // return AsteriskVersion.ASTERISK_1_6;"], [646, "        // }"], [650, "            final ManagerResponse showVersionFilesResponse;"], [651, "            final List<String> showVersionFilesResult;"], [652, "            boolean Asterisk14outputPresent = false;"], [653, "            // increase timeout as output is quite large"], [654, "            showVersionFilesResponse = sendAction(new CommandAction(\"show version files pbx.c\"), defaultResponseTimeout * 2);"], [655, "            if (!(showVersionFilesResponse instanceof CommandResponse))"], [656, "            {"], [657, "                // return early in case of permission problems"], [658, "                // org.asteriskjava.manager.response.ManagerError:"], [659, "                // actionId='null'; message='Permission denied';"], [660, "                // response='Error';"], [661, "                // uniqueId='null'; systemHashcode=15231583"], [662, "                if (showVersionFilesResponse.getOutput() != null)"], [663, "                {"], [664, "                    Asterisk14outputPresent = true;"], [665, "                }"], [666, "                else"], [667, "                {"], [668, "                    break;"], [669, "                }"], [671, "            if (Asterisk14outputPresent)"], [672, "            {"], [673, "                List<String> outputList = Arrays"], [674, "                        .asList(showVersionFilesResponse.getOutput().split(SocketConnectionFacadeImpl.NL_PATTERN.pattern()));"], [675, "                showVersionFilesResult = outputList;"], [677, "            else"], [679, "                showVersionFilesResult = ((CommandResponse) showVersionFilesResponse).getResult();"], [681, "            if (showVersionFilesResult != null && !showVersionFilesResult.isEmpty())"], [683, "                final String line1 = showVersionFilesResult.get(0);"], [685, "                if (line1 != null && line1.startsWith(\"File\"))"], [686, "                {"], [687, "                    final String rawVersion;"], [689, "                    rawVersion = getRawVersion();"], [690, "                    if (rawVersion != null && rawVersion.startsWith(\"Asterisk 1.4\"))"], [691, "                    {"], [692, "                        return AsteriskVersion.ASTERISK_1_4;"], [693, "                    }"], [694, "                    return AsteriskVersion.ASTERISK_1_2;"], [695, "                }"], [696, "                else if (line1 != null && line1.contains(\"No such command\"))"], [697, "                {"], [699, "                    final ManagerResponse coreShowVersionResponse = sendAction(new CommandAction(\"core show version\"),"], [700, "                            defaultResponseTimeout * 2);"], [702, "                    if (coreShowVersionResponse != null && coreShowVersionResponse instanceof CommandResponse)"], [703, "                    {"], [704, "                        final List<String> coreShowVersionResult = ((CommandResponse) coreShowVersionResponse).getResult();"], [706, "                        if (coreShowVersionResult != null && !coreShowVersionResult.isEmpty())"], [707, "                        {"], [708, "                            final String coreLine = coreShowVersionResult.get(0);"], [709, ""], [710, "                            if (VERSION_PATTERN_1_6.matcher(coreLine).matches())"], [711, "                            {"], [712, "                                return AsteriskVersion.ASTERISK_1_6;"], [713, "                            }"], [714, "                            else if (VERSION_PATTERN_1_8.matcher(coreLine).matches())"], [715, "                            {"], [716, "                                return AsteriskVersion.ASTERISK_1_8;"], [717, "                            }"], [718, "                            else if (VERSION_PATTERN_10.matcher(coreLine).matches())"], [719, "                            {"], [720, "                                return AsteriskVersion.ASTERISK_10;"], [721, "                            }"], [722, "                            else if (VERSION_PATTERN_11.matcher(coreLine).matches())"], [723, "                            {"], [724, "                                return AsteriskVersion.ASTERISK_11;"], [725, "                            }"], [726, "                            else if (VERSION_PATTERN_CERTIFIED_11.matcher(coreLine).matches())"], [727, "                            {"], [728, "                                return AsteriskVersion.ASTERISK_11;"], [729, "                            }"], [730, "                            else if (VERSION_PATTERN_12.matcher(coreLine).matches())"], [731, "                            {"], [732, "                                return AsteriskVersion.ASTERISK_12;"], [733, "                            }"], [734, "                            else if (VERSION_PATTERN_13.matcher(coreLine).matches())"], [735, "                            {"], [736, "                                return AsteriskVersion.ASTERISK_13;"], [737, "                            }"], [738, "                            else if (VERSION_PATTERN_CERTIFIED_13.matcher(coreLine).matches())"], [739, "                            {"], [740, "                                return AsteriskVersion.ASTERISK_13;"], [741, "                            }"], [742, "                            else if (VERSION_PATTERN_14.matcher(coreLine).matches())"], [743, "                            {"], [744, "                                return AsteriskVersion.ASTERISK_14;"], [745, "                            }"], [746, "                            else if (VERSION_PATTERN_15.matcher(coreLine).matches())"], [747, "                            {"], [748, "                                return AsteriskVersion.ASTERISK_15;"], [749, "                            }"], [750, "                        }"], [751, "                    }"], [753, "                    try"], [754, "                    {"], [755, "                        Thread.sleep(RECONNECTION_VERSION_INTERVAL);"], [756, "                    }"], [757, "                    catch (Exception ex)"], [758, "                    {"], [759, "                        // ingnore"], [760, "                    } // NOPMD"], [761, "                }"], [762, "                else"], [763, "                {"], [764, "                    // if it isn't the \"no such command\", break and return the"], [765, "                    // lowest version immediately"], [766, "                    break;"], [767, "                }"], [768, "            }"], [771, "        // TODO: add retry logic; in a reconnect scenario the version fails to"], [772, "        // be identified leading to errors"], [774, "        // as a fallback assume 1.6"], [775, "        logger.error(\"Unable to determine asterisk version, assuming 1.6... you should expect problems to follow.\");"], [776, "        return AsteriskVersion.ASTERISK_1_6;"], [779, "    protected String getRawVersion()"], [780, "    {"], [781, "        final ManagerResponse showVersionResponse;"], [783, "        try"], [785, "            showVersionResponse = sendAction(new CommandAction(\"show version\"), defaultResponseTimeout * 2);"], [787, "        catch (Exception e)"], [789, "            return null;"], [791, ""], [792, "        if (showVersionResponse instanceof CommandResponse)"], [794, "            final List<String> showVersionResult;"], [795, ""], [796, "            showVersionResult = ((CommandResponse) showVersionResponse).getResult();"], [797, "            if (showVersionResult != null && !showVersionResult.isEmpty())"], [798, "            {"], [799, "                return showVersionResult.get(0);"], [800, "            }"], [802, ""], [998, "        if (!(action instanceof CommandAction))"], [999, "        {"], [1000, "            return false;"], [1002, "        final Matcher showVersionMatcher = SHOW_VERSION_PATTERN.matcher(((CommandAction) action).getCommand());"], [1003, "        return showVersionMatcher.matches();"]]}, "num_lines_added": 117, "num_lines_removed": 153}