{"hash": "670085acc62855524352f9e7c416b6e71738a5d8", "message": "Refactor api dao and tests", "file_num_lines": 147, "diff_parsed": {"added": [[14, "import com.searchcode.app.config.Values;"], [41, "        List<ApiResult> apiResults = new ArrayList<>();"], [43, "        Connection connection = null;"], [44, "        PreparedStatement preparedStatement = null;"], [45, "        ResultSet resultSet = null;"], [48, "            connection = this.dbConfig.getConnection();"], [49, "            preparedStatement = connection.prepareStatement(\"select rowid,publickey,privatekey,lastused,data from api;\");"], [50, "            resultSet = preparedStatement.executeQuery();"], [52, "            while (resultSet.next()) {"], [53, "                int rowId = resultSet.getInt(\"rowid\");"], [54, "                String d_publicKey = resultSet.getString(\"publickey\");"], [55, "                String privateKey = resultSet.getString(\"privatekey\");"], [56, "                String lastUsed = resultSet.getString(\"lastused\");"], [57, "                String data = resultSet.getString(\"data\");"], [63, "            Singleton.getLogger().severe(\" caught a \" + ex.getClass() + \"\\n with message: \" + ex.getMessage());"], [66, "            Helpers.closeQuietly(resultSet);"], [67, "            Helpers.closeQuietly(preparedStatement);"], [68, "            Helpers.closeQuietly(connection);"], [75, "        ApiResult result = null;"], [77, "        Connection connection = null;"], [78, "        PreparedStatement preparedStatement = null;"], [79, "        ResultSet resultSet = null;"], [82, "            connection = this.dbConfig.getConnection();"], [83, "            preparedStatement = connection.prepareStatement(\"select rowid,publickey,privatekey,lastused,data from api where publickey=?;\");"], [85, "            preparedStatement.setString(1, publicKey);"], [87, "            resultSet = preparedStatement.executeQuery();"], [89, "            while (resultSet.next()) {"], [90, "                int rowId = resultSet.getInt(\"rowid\");"], [91, "                String d_publicKey = resultSet.getString(\"publickey\");"], [92, "                String privateKey = resultSet.getString(\"privatekey\");"], [93, "                String lastUsed = resultSet.getString(\"lastused\");"], [94, "                String data = resultSet.getString(\"data\");"], [100, "            Singleton.getLogger().severe(\" caught a \" + ex.getClass() + \"\\n with message: \" + ex.getMessage());"], [103, "            Helpers.closeQuietly(resultSet);"], [104, "            Helpers.closeQuietly(preparedStatement);"], [105, "            Helpers.closeQuietly(connection);"], [114, "        Connection connection = null;"], [115, "        PreparedStatement preparedStatement = null;"], [116, "        ResultSet resultSet = null;"], [119, "            connection = this.dbConfig.getConnection();"], [120, "            preparedStatement = connection.prepareStatement(\"INSERT INTO \\\"api\\\" (\\\"publickey\\\",\\\"privatekey\\\",\\\"lastused\\\",\\\"data\\\") VALUES (?,?,?,?)\");"], [122, "            preparedStatement.setString(1, apiResult.getPublicKey());"], [123, "            preparedStatement.setString(2, apiResult.getPrivateKey());"], [124, "            preparedStatement.setString(3, apiResult.getLastUsed());"], [125, "            preparedStatement.setString(4, apiResult.getData());"], [127, "            preparedStatement.execute();"], [132, "            Singleton.getLogger().severe(\" caught a \" + ex.getClass() + \"\\n with message: \" + ex.getMessage());"], [135, "            Helpers.closeQuietly(resultSet);"], [136, "            Helpers.closeQuietly(preparedStatement);"], [137, "            Helpers.closeQuietly(connection);"], [144, "        Connection connection = null;"], [145, "        PreparedStatement preparedStatement = null;"], [146, "        ResultSet resultSet = null;"], [149, "            connection = this.dbConfig.getConnection();"], [150, "            preparedStatement = connection.prepareStatement(\"delete from api where publickey=?;\");"], [152, "            preparedStatement.setString(1, publicKey);"], [154, "            preparedStatement.execute();"], [157, "            Singleton.getLogger().severe(\" caught a \" + ex.getClass() + \"\\n with message: \" + ex.getMessage());"], [160, "            Helpers.closeQuietly(resultSet);"], [161, "            Helpers.closeQuietly(preparedStatement);"], [162, "            Helpers.closeQuietly(connection);"], [168, "        Connection connection = null;"], [169, "        PreparedStatement preparedStatement = null;"], [170, "        ResultSet resultSet = null;"], [173, "            connection = this.dbConfig.getConnection();"], [174, "            preparedStatement = connection.prepareStatement(\"SELECT name FROM sqlite_master WHERE type='table' AND name='api';\");"], [176, "            resultSet = preparedStatement.executeQuery();"], [177, "            String value = Values.EMPTYSTRING;"], [178, "            while (resultSet.next()) {"], [179, "                value = resultSet.getString(\"name\");"], [182, "            if (Helpers.isNullEmptyOrWhitespace(value)) {"], [183, "                preparedStatement = connection.prepareStatement(\"CREATE  TABLE \\\"main\\\".\\\"api\\\" (\\\"publickey\\\" VARCHAR PRIMARY KEY  NOT NULL , \\\"privatekey\\\" VARCHAR NOT NULL , \\\"lastused\\\" VARCHAR, \\\"data\\\" VARCHAR);\");"], [184, "                preparedStatement.execute();"], [188, "            Singleton.getLogger().severe(\" caught a \" + ex.getClass() + \"\\n with message: \" + ex.getMessage());"], [191, "            Helpers.closeQuietly(resultSet);"], [192, "            Helpers.closeQuietly(preparedStatement);"], [193, "            Helpers.closeQuietly(connection);"]], "deleted": [[33, "    private static final LoggerWrapper LOGGER = Singleton.getLogger();"], [34, ""], [37, "    private AbstractMap<String, ApiResult> cache = Singleton.getApiCache();"], [38, "    private AbstractMap<String, Object> genericCache = Singleton.getGenericCache();"], [39, "    private String apiAllApiCacheKey = \"api-all-api-cache\";"], [40, ""], [46, "        List<ApiResult> apiResults = (ArrayList<ApiResult>)this.genericCache.get(this.apiAllApiCacheKey);"], [47, ""], [48, "        if (apiResults != null) {"], [49, "            return apiResults;"], [50, "        }"], [51, ""], [52, "        apiResults = new ArrayList<>();"], [54, "        Connection conn = null;"], [55, "        PreparedStatement stmt = null;"], [56, "        ResultSet rs = null;"], [59, "            conn = this.dbConfig.getConnection();"], [60, "            stmt = conn.prepareStatement(\"select rowid,publickey,privatekey,lastused,data from api;\");"], [61, "            rs = stmt.executeQuery();"], [63, "            while (rs.next()) {"], [64, "                int rowId = rs.getInt(\"rowid\");"], [65, "                String d_publicKey = rs.getString(\"publickey\");"], [66, "                String privateKey = rs.getString(\"privatekey\");"], [67, "                String lastUsed = rs.getString(\"lastused\");"], [68, "                String data = rs.getString(\"data\");"], [74, "            LOGGER.severe(\" caught a \" + ex.getClass() + \"\\n with message: \" + ex.getMessage());"], [77, "            Helpers.closeQuietly(rs);"], [78, "            Helpers.closeQuietly(stmt);"], [79, "            Helpers.closeQuietly(conn);"], [82, "        this.genericCache.put(this.apiAllApiCacheKey, apiResults);"], [87, "        ApiResult result = this.cache.get(publicKey);"], [88, "        if (result != null) {"], [89, "            return result;"], [90, "        }"], [92, "        Connection conn = null;"], [93, "        PreparedStatement stmt = null;"], [94, "        ResultSet rs = null;"], [97, "            conn = this.dbConfig.getConnection();"], [98, "            stmt = conn.prepareStatement(\"select rowid,publickey,privatekey,lastused,data from api where publickey=?;\");"], [100, "            stmt.setString(1, publicKey);"], [102, "            rs = stmt.executeQuery();"], [104, "            while (rs.next()) {"], [105, "                int rowId = rs.getInt(\"rowid\");"], [106, "                String d_publicKey = rs.getString(\"publickey\");"], [107, "                String privateKey = rs.getString(\"privatekey\");"], [108, "                String lastUsed = rs.getString(\"lastused\");"], [109, "                String data = rs.getString(\"data\");"], [115, "            LOGGER.severe(\" caught a \" + ex.getClass() + \"\\n with message: \" + ex.getMessage());"], [118, "            Helpers.closeQuietly(rs);"], [119, "            Helpers.closeQuietly(stmt);"], [120, "            Helpers.closeQuietly(conn);"], [121, "        }"], [122, ""], [123, "        if (result != null) {"], [124, "            this.cache.put(publicKey, result);"], [133, "        Connection conn = null;"], [134, "        PreparedStatement stmt = null;"], [135, "        ResultSet rs = null;"], [138, "            conn = this.dbConfig.getConnection();"], [139, "            stmt = conn.prepareStatement(\"INSERT INTO \\\"api\\\" (\\\"publickey\\\",\\\"privatekey\\\",\\\"lastused\\\",\\\"data\\\") VALUES (?,?,?,?)\");"], [141, "            stmt.setString(1, apiResult.getPublicKey());"], [142, "            stmt.setString(2, apiResult.getPrivateKey());"], [143, "            stmt.setString(3, apiResult.getLastUsed());"], [144, "            stmt.setString(4, apiResult.getData());"], [146, "            stmt.execute();"], [149, ""], [150, "            this.cache.remove(apiResult.getPublicKey());"], [151, "            this.genericCache.remove(apiAllApiCacheKey);"], [154, "            successful = false;"], [155, "            LOGGER.severe(\" caught a \" + ex.getClass() + \"\\n with message: \" + ex.getMessage());"], [158, "            Helpers.closeQuietly(rs);"], [159, "            Helpers.closeQuietly(stmt);"], [160, "            Helpers.closeQuietly(conn);"], [163, ""], [168, "        Connection conn = null;"], [169, "        PreparedStatement stmt = null;"], [170, "        ResultSet rs = null;"], [173, "            conn = this.dbConfig.getConnection();"], [174, "            stmt = conn.prepareStatement(\"delete from api where publickey=?;\");"], [175, ""], [176, "            stmt.setString(1, publicKey);"], [177, ""], [178, "            stmt.execute();"], [180, "            this.cache.remove(publicKey);"], [181, "            this.genericCache.remove(apiAllApiCacheKey);"], [185, "            LOGGER.severe(\" caught a \" + ex.getClass() + \"\\n with message: \" + ex.getMessage());"], [188, "            Helpers.closeQuietly(rs);"], [189, "            Helpers.closeQuietly(stmt);"], [190, "            Helpers.closeQuietly(conn);"], [196, "        Connection conn = null;"], [197, "        PreparedStatement stmt = null;"], [198, "        ResultSet rs = null;"], [201, "            conn = this.dbConfig.getConnection();"], [202, "            stmt = conn.prepareStatement(\"SELECT name FROM sqlite_master WHERE type='table' AND name='api';\");"], [204, "            rs = stmt.executeQuery();"], [205, "            String value = \"\";"], [206, "            while (rs.next()) {"], [207, "                value = rs.getString(\"name\");"], [210, "            if (value.equals(\"\")) {"], [211, "                stmt = conn.prepareStatement(\"CREATE  TABLE \\\"main\\\".\\\"api\\\" (\\\"publickey\\\" VARCHAR PRIMARY KEY  NOT NULL , \\\"privatekey\\\" VARCHAR NOT NULL , \\\"lastused\\\" VARCHAR, \\\"data\\\" VARCHAR);\");"], [212, "                stmt.execute();"], [216, "            LOGGER.severe(\" caught a \" + ex.getClass() + \"\\n with message: \" + ex.getMessage());"], [219, "            Helpers.closeQuietly(rs);"], [220, "            Helpers.closeQuietly(stmt);"], [221, "            Helpers.closeQuietly(conn);"]]}, "num_lines_added": 77, "num_lines_removed": 105}