{"hash": "9f17d78826332fc8584e5ee91cef6024767ffab1", "message": "Fix code counter to be 100% correct", "file_num_lines": 215, "diff_parsed": {"added": [[17, "import java.util.ArrayList;"], [150, "        ArrayList<String> endComments = new ArrayList<>();"], [159, "            if (!isWhitespace(contents.charAt(index))) {"], [160, "                switch (currentState) {"], [161, "                    case S_CODE:"], [162, "                        if (fileClassifierResult.nestedmultiline || endComments.size() == 0) {"], [163, "                            endString = this.checkForMatchMultiOpen(contents.charAt(index), index, endPoint, fileClassifierResult.multi_line, contents);"], [164, "                            if (endString != null) {"], [165, "                                endComments.add(endString);"], [166, "                                currentState = State.S_MULTICOMMENT_CODE;"], [167, "                                break;"], [168, "                            }"], [169, "                        }"], [171, "                        if (this.checkForMatch(contents.charAt(index), index, endPoint, fileClassifierResult.line_comment, contents)) {"], [172, "                            currentState = State.S_COMMENT_CODE;"], [173, "                            break;"], [174, "                        }"], [176, "                        endString = this.checkForMatchMultiOpen(contents.charAt(index), index, endPoint, fileClassifierResult.quotes, contents);"], [177, "                        if (endString != null) {"], [178, "                            currentState = State.S_STRING;"], [179, "                            break;"], [180, "                        } else if (this.checkForMatch(contents.charAt(index), index, endPoint, fileClassifierResult.complexitychecks, contents)) {"], [184, "                    case S_MULTICOMMENT_BLANK:"], [185, "                        if (this.checkForMatch(contents.charAt(index), index, endPoint, fileClassifierResult.line_comment, contents)) {"], [186, "                            currentState = State.S_COMMENT;"], [187, "                            break;"], [188, "                        }"], [189, ""], [190, "                        endString = this.checkForMatchMultiOpen(contents.charAt(index), index, endPoint, fileClassifierResult.multi_line, contents);"], [191, "                        if (endString != null) {"], [192, "                            currentState = State.S_MULTICOMMENT;"], [193, "                            break;"], [194, "                        }"], [195, ""], [196, "                        endString = this.checkForMatchMultiOpen(contents.charAt(index), index, endPoint, fileClassifierResult.quotes, contents);"], [197, "                        if (endString != null) {"], [198, "                            currentState = State.S_STRING;"], [199, "                            break;"], [200, "                        }"], [201, ""], [202, "                        if (!this.isWhitespace(contents.charAt(index))) {"], [203, "                            currentState = State.S_CODE;"], [205, "                            if (this.checkForMatch(contents.charAt(index), index, endPoint, fileClassifierResult.complexitychecks, contents)) {"], [206, "                                complexity++;"], [207, "                            }"], [208, "                        }"], [210, "                    case S_STRING:"], [211, "                        if (contents.charAt(index - 1) != '\\\\' && this.checkForMatchSingle(contents.charAt(index), index, endPoint, endString, contents)) {"], [213, "                        }"], [214, "                        break;"], [215, "                    case S_MULTICOMMENT:"], [216, "                    case S_MULTICOMMENT_CODE:"], [217, "                        if (this.checkForMatchMultiClose(contents.charAt(index), index, endPoint, fileClassifierResult.multi_line, contents)) {"], [218, "                            if (currentState == State.S_MULTICOMMENT_CODE) {"], [219, "                                currentState = State.S_CODE;"], [221, "                                // TODO check if out of bounds"], [222, "                                if (index + 1 <= endPoint && this.isWhitespace(contents.charAt(index + 1))) {"], [223, "                                    currentState = State.S_MULTICOMMENT_BLANK;"], [224, "                                } else {"], [225, "                                    currentState = State.S_MULTICOMMENT_CODE;"], [226, "                                }"], [229, "                        break;"], [230, "                }"]], "deleted": [[156, "            switch (currentState) {"], [157, "                case S_BLANK:"], [158, "                case S_MULTICOMMENT_BLANK:"], [159, "                    if (this.checkForMatch(contents.charAt(index), index, endPoint, fileClassifierResult.line_comment, contents)) {"], [160, "                        currentState = State.S_COMMENT;"], [161, "                        break;"], [162, "                    }"], [163, ""], [164, "                    endString = this.checkForMatchMultiOpen(contents.charAt(index), index, endPoint, fileClassifierResult.multi_line, contents);"], [165, "                    if (endString != null) {"], [166, "                        currentState = State.S_MULTICOMMENT;"], [167, "                        break;"], [168, "                    }"], [170, "                    endString = this.checkForMatchMultiOpen(contents.charAt(index), index, endPoint, fileClassifierResult.quotes, contents);"], [171, "                    if (endString != null) {"], [172, "                        currentState = State.S_STRING;"], [173, "                        break;"], [174, "                    }"], [176, "                    if (!this.isWhitespace(contents.charAt(index))) {"], [177, "                        currentState = State.S_CODE;"], [179, "                        if (this.checkForMatch(contents.charAt(index), index, endPoint, fileClassifierResult.complexitychecks, contents)) {"], [182, "                    }"], [183, "                    break;"], [184, "                case S_CODE:"], [185, "                    endString = this.checkForMatchMultiOpen(contents.charAt(index), index, endPoint, fileClassifierResult.multi_line, contents);"], [186, "                    if (endString != null) {"], [187, "                        currentState = State.S_MULTICOMMENT_CODE;"], [189, "                    }"], [191, "                    endString = this.checkForMatchMultiOpen(contents.charAt(index), index, endPoint, fileClassifierResult.quotes, contents);"], [192, "                    if (endString != null) {"], [193, "                        currentState = State.S_STRING;"], [195, "                    } else if (this.checkForMatch(contents.charAt(index), index, endPoint, fileClassifierResult.complexitychecks, contents)) {"], [196, "                        complexity++;"], [197, "                    }"], [198, "                    break;"], [199, "                case S_STRING:"], [200, "                    if (contents.charAt(index-1) != '\\\\' && this.checkForMatchSingle(contents.charAt(index), index, endPoint, endString, contents)) {"], [201, "                        currentState = State.S_CODE;"], [202, "                    }"], [203, "                    break;"], [204, "                case S_MULTICOMMENT:"], [205, "                case S_MULTICOMMENT_CODE:"], [206, "                    if (this.checkForMatchMultiClose(contents.charAt(index), index, endPoint, fileClassifierResult.multi_line, contents)) {"], [207, "                        if (currentState == State.S_MULTICOMMENT_CODE) {"], [209, "                        } else {"], [210, "                            // TODO check if out of bounds"], [211, "                            if (index + 1 <= endPoint && this.isWhitespace(contents.charAt(index+1))) {"], [212, "                                currentState = State.S_MULTICOMMENT_BLANK;"], [214, "                                currentState = State.S_MULTICOMMENT_CODE;"], [217, "                    }"], [218, "                    break;"]]}, "num_lines_added": 63, "num_lines_removed": 51}