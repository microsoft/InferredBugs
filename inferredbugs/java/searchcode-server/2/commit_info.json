{"hash": "aa36057a54dea1ac19ebcc763a6d40f61fcb294e", "message": "Add progress to getting revisions and blob history for changes", "file_num_lines": 104, "diff_parsed": {"added": [[10, "import com.google.common.collect.Lists;"], [19, "import org.eclipse.jgit.api.ResetCommand;"], [22, "import org.eclipse.jgit.errors.IncorrectObjectTypeException;"], [23, "import org.eclipse.jgit.errors.MissingObjectException;"], [30, "import org.eclipse.jgit.revwalk.RevTree;"], [31, "import org.eclipse.jgit.revwalk.RevWalk;"], [34, "import org.eclipse.jgit.treewalk.TreeWalk;"], [67, "        Repository localRepository = new FileRepository(new File(\"./repo/server/.git\"));"], [72, "        List<String> revisions = new ArrayList<>();"], [74, "            System.out.println(rev.getCommitTime() + \" \" + rev.getName());"], [75, "            revisions.add(rev.getName());"], [77, "        revisions = Lists.reverse(revisions);"], [79, "        for (int i = 1; i < revisions.size(); i++) {"], [80, "            System.out.println(\"///////////////////////////////////////////////\");"], [81, "            this.getRevisionChanges(revisions.get(i - 1), revisions.get(i));"], [82, "        }"], [84, "    }"], [86, "    public void getRevisionChanges(String oldRevison, String newRevision) throws IOException, GitAPIException {"], [87, "        Repository localRepository = new FileRepository(new File(\"./repo/server/.git\"));"], [88, "        Git git = new Git(localRepository);"], [90, "        ObjectId oldHead = localRepository.resolve(oldRevison + \"^{tree}\");"], [91, "        ObjectId newHead = localRepository.resolve(newRevision + \"^{tree}\");"], [93, "        ObjectReader reader = localRepository.newObjectReader();"], [95, "        CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();"], [96, "        oldTreeIter.reset(reader, oldHead);"], [98, "        CanonicalTreeParser newTreeIter = new CanonicalTreeParser();"], [99, "        newTreeIter.reset(reader, newHead);"], [102, "        List<DiffEntry> entries = git.diff()"], [103, "                .setNewTree(newTreeIter)"], [104, "                .setOldTree(oldTreeIter)"], [105, "                .call();"], [108, "        for( DiffEntry entry : entries ) {"], [109, "            if (\"DELETE\".equals(entry.getChangeType().name())) {"], [110, "                System.out.println(\"DEL \" + entry.getOldPath());"], [111, "            }"], [112, "            else {"], [113, "                System.out.println(\"ADD \" + entry.getNewPath());"], [114, "                System.out.println(fetchBlob(newRevision, entry.getNewPath()).length());"], [115, "            }"], [116, "        }"], [117, "    }"], [119, "    private String fetchBlob(String revSpec, String path) throws MissingObjectException, IncorrectObjectTypeException, IOException {"], [121, "        Repository localRepository = new FileRepository(new File(\"./repo/server/.git\"));"], [123, "        // Resolve the revision specification"], [124, "        final ObjectId id = localRepository.resolve(revSpec);"], [126, "        // Makes it simpler to release the allocated resources in one go"], [127, "        ObjectReader reader = localRepository.newObjectReader();"], [129, "        try {"], [130, "            // Get the commit object for that revision"], [131, "            RevWalk walk = new RevWalk(reader);"], [132, "            RevCommit commit = walk.parseCommit(id);"], [133, ""], [134, "            // Get the revision's file tree"], [135, "            RevTree tree = commit.getTree();"], [136, "            // .. and narrow it down to the single file's path"], [137, "            TreeWalk treewalk = TreeWalk.forPath(reader, path, tree);"], [138, ""], [139, "            if (treewalk != null) {"], [140, "                // use the blob id to read the file's data"], [141, "                byte[] data = reader.open(treewalk.getObjectId(0)).getBytes();"], [142, "                return new String(data, \"utf-8\");"], [143, "            } else {"], [144, "                return \"\";"], [146, "        } finally {"], [147, "            reader.close();"]], "deleted": [[57, ""], [58, "        // Clone the repository then"], [59, "    }"], [60, ""], [61, ""], [62, "    public RepositoryChanged cloneGitRepository(String repoName, String repoRemoteLocation, String repoUserName, String repoPassword, String repoLocations, String branch, boolean useCredentials) {"], [63, "        boolean successful = false;"], [64, "        Singleton.getLogger().info(\"Attempting to clone \" + repoRemoteLocation);"], [65, ""], [66, "        try {"], [67, "            CloneCommand cloneCommand = Git.cloneRepository();"], [68, "            cloneCommand.setURI(repoRemoteLocation);"], [69, "            cloneCommand.setDirectory(new File(repoLocations + \"/\" + repoName + \"/\"));"], [70, "            cloneCommand.setCloneAllBranches(true);"], [71, "            cloneCommand.setBranch(branch);"], [72, ""], [73, "            if(useCredentials) {"], [74, "                cloneCommand.setCredentialsProvider(new UsernamePasswordCredentialsProvider(repoUserName, repoPassword));"], [75, "            }"], [76, ""], [77, "            cloneCommand.call();"], [78, ""], [79, "            successful = true;"], [80, ""], [81, "        } catch (GitAPIException | InvalidPathException ex) {"], [82, "            successful = false;"], [83, "            Singleton.getLogger().warning(\"ERROR - caught a \" + ex.getClass() + \" in \" + this.getClass() +  \"\\n with message: \" + ex.getMessage());"], [84, "        }"], [85, ""], [86, "        RepositoryChanged repositoryChanged = new RepositoryChanged(successful);"], [87, "        repositoryChanged.setClone(true);"], [88, ""], [89, "        return repositoryChanged;"], [92, ""], [94, "        Repository localRepository = new FileRepository(new File(\"./repo/.timelord/test/.git\"));"], [100, "            System.out.println(rev.getName());"], [101, "            git.checkout().setName(rev.getName()).call();"], [103, "    }"], [105, "    /**"], [106, "     * Update a git repository and return if it has changed and the differences"], [107, "     */"], [108, "    public RepositoryChanged updateGitRepository(String repoName, String repoRemoteLocation, String repoUserName, String repoPassword, String repoLocations, String branch, boolean useCredentials) {"], [109, "        boolean changed = false;"], [110, "        List<String> changedFiles = new ArrayList<>();"], [111, "        List<String> deletedFiles = new ArrayList<>();"], [112, "        Singleton.getLogger().info(\"Attempting to pull latest from \" + repoRemoteLocation + \" for \" + repoName);"], [114, "        try {"], [115, "            Repository localRepository = new FileRepository(new File(repoLocations + \"/\" + repoName + \"/.git\"));"], [117, "            Ref head = localRepository.getRef(\"HEAD\");"], [119, "            Git git = new Git(localRepository);"], [120, "            git.reset();"], [121, "            git.clean();"], [123, "            PullCommand pullCmd = git.pull();"], [125, "            if(useCredentials) {"], [126, "                pullCmd.setCredentialsProvider(new UsernamePasswordCredentialsProvider(repoUserName, repoPassword));"], [127, "            }"], [129, "            pullCmd.call();"], [130, "            Ref newHEAD = localRepository.getRef(\"HEAD\");"], [132, "            if(!head.toString().equals(newHEAD.toString())) {"], [133, "                changed = true;"], [135, "                // Get the differences between the the heads which we updated at"], [136, "                // and use these to just update the differences between them"], [137, "                ObjectId oldHead = localRepository.resolve(head.getObjectId().getName() + \"^{tree}\");"], [138, "                ObjectId newHead = localRepository.resolve(newHEAD.getObjectId().getName() + \"^{tree}\");"], [140, "                ObjectReader reader = localRepository.newObjectReader();"], [142, "                CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();"], [143, "                oldTreeIter.reset(reader, oldHead);"], [145, "                CanonicalTreeParser newTreeIter = new CanonicalTreeParser();"], [146, "                newTreeIter.reset(reader, newHead);"], [149, "                List<DiffEntry> entries = git.diff()"], [150, "                        .setNewTree(newTreeIter)"], [151, "                        .setOldTree(oldTreeIter)"], [152, "                        .call();"], [155, "                for( DiffEntry entry : entries ) {"], [156, "                    if (\"DELETE\".equals(entry.getChangeType().name())) {"], [157, "                        deletedFiles.add(FilenameUtils.separatorsToUnix(entry.getOldPath()));"], [158, "                    }"], [159, "                    else {"], [160, "                        changedFiles.add(FilenameUtils.separatorsToUnix(entry.getNewPath()));"], [161, "                    }"], [162, "                }"], [164, ""], [165, "        } catch (IOException | GitAPIException | InvalidPathException ex) {"], [166, "            changed = false;"], [167, "            Singleton.getLogger().warning(\"ERROR - caught a \" + ex.getClass() + \" in \" + this.getClass() +  \"\\n with message: \" + ex.getMessage());"], [169, ""], [170, "        return new RepositoryChanged(changed, changedFiles, deletedFiles);"]]}, "num_lines_added": 65, "num_lines_removed": 87}