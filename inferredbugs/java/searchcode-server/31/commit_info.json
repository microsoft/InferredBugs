{"hash": "97f47e59dba401b822cc88240c925d3041db2020", "message": "Add in support required for proper code counting", "file_num_lines": 81, "diff_parsed": {"added": [[10, "import jdk.nashorn.internal.runtime.options.Option;"], [16, "import java.util.Optional;"], [45, "        if (fileName.lastIndexOf('.') == 0) {"], [49, "        String[] split = fileName.split(\"\\\\.\");"], [50, ""], [51, "        switch (split.length) {"], [52, "            case 0:"], [53, "            case 1:"], [54, "                return fileName;"], [55, "            case 2:"], [56, "                return split[split.length-1];"], [57, "        }"], [58, ""], [59, "        return split[split.length-2] + \".\" + split[split.length-1];"], [67, "        String extension;"], [68, ""], [69, "        Optional<String> lang = this.checkIfExtentionExists(fileName);"], [70, ""], [71, "        if (!lang.isPresent()) {"], [72, "            extension = this.getExtension(fileName);"], [73, "            lang = this.checkIfExtentionExists(extension);"], [74, "        }"], [75, ""], [76, "        if (!lang.isPresent()) {"], [77, "            extension = this.getExtension(fileName);"], [78, "            lang = this.checkIfExtentionExists(extension);"], [79, "        }"], [80, ""], [81, "        return lang.orElse(Values.UNKNOWN_LANGUAGE);"], [82, "    }"], [84, "    private Optional<String> checkIfExtentionExists(String extension) {"], [90, "                    return Optional.of(key);"], [95, "        return Optional.empty();"]], "deleted": [[43, "        int loc = fileName.lastIndexOf(\".\");"], [44, ""], [45, "        if (loc == 0 || loc == -1) {"], [49, "        return fileName.substring(loc + 1);"], [56, ""], [58, "        String extension = this.getExtension(fileName);"], [65, "                    return key;"], [70, "        return Values.UNKNOWN_LANGUAGE;"]]}, "num_lines_added": 33, "num_lines_removed": 8}