{"hash": "1699ee94ebb6dce61840e18a5e04f7de7555710f", "message": "Handle abstract, interface, List and Array", "file_num_lines": 511, "diff_parsed": {"added": [[4, "import com.fasterxml.jackson.annotation.JsonTypeInfo.As;"], [9, "import java.lang.reflect.ParameterizedType;"], [412, "                Map<String, Model> models = ModelConverters.getInstance().read(responseClassType);"], [588, "    private void handleJsonTypeInfo(Type responseClassType, Map<String, Model> modelMap) {"], [589, "        if (responseClassType instanceof ParameterizedType) {"], [590, "            Type[] actualTypes = ((ParameterizedType) responseClassType).getActualTypeArguments();"], [591, "            for (Type type : actualTypes) {"], [592, "                handleJsonTypeInfo(type, modelMap);"], [593, "            }"], [594, "        } else if (responseClassType instanceof Class<?>){"], [595, "            Class<?> responseClass = ((Class<?>) responseClassType);"], [596, "            if (responseClass.isArray()) {"], [597, "                responseClass = responseClass.getComponentType();"], [598, "            }"], [600, "            JsonTypeInfo typeInfo = responseClass.getAnnotation(JsonTypeInfo.class);"], [601, "            if (typeInfo == null || StringUtils.isEmpty(typeInfo.property()) || typeInfo.include().equals(As.EXISTING_PROPERTY)) {"], [602, "                return;"], [603, "            }"], [605, "            Map<String, Property> properties = modelMap.get(responseClass.getSimpleName()).getProperties();"], [606, "            if (properties != null && !properties.containsKey(typeInfo.property())) {"], [607, "                properties.put(typeInfo.property(), new StringProperty());"]], "deleted": [[410, "                Map<String, Model> models = readModels(responseClassType);"], [586, "    private Map<String, Model> readModels(Type responseClassType) {"], [587, "        Map<String, Model> modelMap = ModelConverters.getInstance().read(responseClassType);"], [588, "        if (modelMap != null) {"], [589, "            handleJsonTypeInfo(responseClassType, modelMap);"], [590, "        }"], [592, "        return modelMap;"], [593, "    }"], [595, "    private void handleJsonTypeInfo(Type responseClassType, Map<String, Model> modelMap) {"], [596, "        if (responseClassType instanceof Class){"], [597, "            JsonTypeInfo typeInfo = ((Class<?>)responseClassType).getAnnotation(JsonTypeInfo.class);"], [598, "            if (typeInfo != null && !StringUtils.isEmpty(typeInfo.property())) {"], [599, "                for (Model model : modelMap.values()) {"], [600, "                    Map<String, Property> properties = model.getProperties();"], [601, "                    if (properties != null) {"], [602, "                        properties.put(typeInfo.property(), new StringProperty());"], [603, "                    }"], [604, "                }"]]}, "num_lines_added": 21, "num_lines_removed": 18}