{"hash": "02f826346bab64192fbac930ebfc3124f6a3a8f6", "message": "code refactor and fix consume & produce issue", "file_num_lines": 514, "diff_parsed": {"added": [[65, "        Map<String, SpringResource> resourceMap = generateResourceMap(classes);"], [68, "            read(resource);"], [79, "        String description;"], [87, "        RequestMapping controllerRM = controller.getAnnotation(RequestMapping.class);"], [90, "        String[] controllerProduces = new String[0];"], [91, "        String[] controllerConsumes = new String[0];"], [92, "        if (controllerRM != null) {"], [93, "            controllerConsumes = controllerRM.consumes();"], [94, "            controllerProduces = controllerRM.produces();"], [95, "        }"], [96, ""], [100, "                return swagger;"], [104, "            description = api.description();"], [110, "        Map<String, List<Method>> apiMethodMap = collectApisByRequestMapping(methods);"], [112, "        for (String path : apiMethodMap.keySet()) {"], [113, "            for (Method method : apiMethodMap.get(path)) {"], [116, "                if (requestMapping == null) {"], [117, "                    continue;"], [118, "                }"], [120, "                if (apiOperation == null) {"], [121, "                    continue;"], [122, "                }"], [126, "                Map<String, String> regexMap = new HashMap<String, String>();"], [127, "                String operationPath = parseOperationPath(path, regexMap);"], [129, "                //http method"], [130, "                if (requestMapping.method() != null && requestMapping.method().length != 0) {"], [131, "                    httpMethod = requestMapping.method()[0].toString().toLowerCase();"], [132, "                    if (httpMethod == null) {"], [133, "                        continue;"], [135, "                }"], [137, "                Operation operation = parseMethod(method);"], [139, "                updateOperationParameters(new ArrayList<Parameter>(), regexMap, operation);"], [141, "                updateOperationProtocols(apiOperation, operation);"], [143, "                String[] apiProduces = requestMapping.produces();"], [144, "                String[] apiConsumes = requestMapping.consumes();"], [146, "                apiProduces = (apiProduces == null || apiProduces.length == 0 ) ? controllerProduces : apiProduces;"], [147, "                apiConsumes = (apiConsumes == null || apiProduces.length == 0 ) ? controllerConsumes : apiConsumes;"], [149, "                apiConsumes = updateOperationConsumes(new String[0], apiConsumes, operation);"], [150, "                apiProduces = updateOperationProduces(new String[0], apiProduces, operation);"], [152, "                ApiOperation op = method.getAnnotation(ApiOperation.class);"], [153, "                updateTagsForOperation(operation, op);"], [154, "                updateOperation(apiConsumes, apiProduces, tags, resourceSecurities, operation);"], [155, "                updatePath(operationPath, httpMethod, operation);"], [176, ""], [226, "            // pick out response from method declaration"], [227, "            LOG.info(\"picking up response class from method \" + method);"], [349, "    private Map<String, List<Method>> collectApisByRequestMapping(List<Method> methods) {"], [350, "        Map<String, List<Method>> apiMethodMap = new HashMap<String, List<Method>>();"], [369, ""], [370, "        return apiMethodMap;"]], "deleted": [[18, "import com.wordnik.swagger.models.Path;"], [66, "        Map<String, SpringResource> resourceMap =  generateResourceMap(classes);"], [69, "            swagger = read(resource);"], [87, "        RequestMapping apiPath = controller.getAnnotation(RequestMapping.class);"], [93, "                return null;"], [96, ""], [98, ""], [99, "//            description = api.description();"], [100, "//            position = api.position();"], [105, "        Map<String, List<Method>> apiMethodMap = new HashMap<String, List<Method>>();"], [106, ""], [108, "        collectApisByRequestMapping(methods, apiMethodMap);"], [109, ""], [110, "        for (String p : apiMethodMap.keySet()) {"], [111, "            List<Operation> operations = new ArrayList<Operation>();"], [113, "            for (Method method : apiMethodMap.get(p)) {"], [117, ""], [118, "                String operationPath = p;"], [119, "                //getPath(apiPath, requestMapping, \"\");"], [120, "                String operationId;"], [123, "                if (operationPath != null && apiOperation != null) {"], [126, "                    Map<String, String> regexMap = new HashMap<String, String>();"], [127, "                    operationPath = parseOperationPath(operationPath, regexMap);"], [128, ""], [129, "                    //http method"], [130, "                    if (requestMapping.method() != null && requestMapping.method().length != 0) {"], [131, "                        httpMethod = requestMapping.method()[0].toString().toLowerCase();"], [134, "                    Operation operation = parseMethod(method);"], [136, "                    updateOperationParameters(new ArrayList<Parameter>(), regexMap, operation);"], [138, "                    updateOperationProtocols(apiOperation, operation);"], [140, "                    String[] apiConsumes = new String[0];"], [141, "                    String[] apiProduces = new String[0];"], [142, "                    RequestMapping rm = controller.getAnnotation(RequestMapping.class);"], [144, "                    String[] pps = new String[0];"], [145, "                    String[] pcs = new String[0];"], [146, "                    if (rm != null) {"], [147, "                        pcs = rm.consumes();"], [148, "                        pps = rm.produces();"], [149, "                    }"], [151, "                    apiConsumes = updateOperationConsumes(method, pcs, apiConsumes, operation);"], [152, "                    apiProduces = updateOperationProduces(method, pps, apiProduces, operation);"], [154, "                    // can't continue without a valid http method"], [155, "//                    httpMethod = httpMethod == null ? parentMethod : httpMethod;"], [156, "                    ApiOperation op = method.getAnnotation(ApiOperation.class);"], [157, "                    updateTagsForOperation(operation, op);"], [158, "                    updateOperation(apiConsumes, apiProduces, tags, resourceSecurities, operation);"], [159, "                    updatePath(operationPath, httpMethod, operation);"], [160, "                }"], [178, "    private String[] updateOperationProduces(Method cls, String[] parentProduces, String[] apiProduces, Operation operation) {"], [179, "        RequestMapping requestMapping = cls.getAnnotation(RequestMapping.class);"], [180, "        if (requestMapping != null)"], [181, "            apiProduces = requestMapping.produces();"], [182, ""], [183, "        if (parentProduces != null) {"], [184, "            Set<String> both = new HashSet<String>(Arrays.asList(apiProduces));"], [185, "            both.addAll(new HashSet<String>(Arrays.asList(parentProduces)));"], [186, "            if (operation.getProduces() != null)"], [187, "                both.addAll(new HashSet<String>(operation.getProduces()));"], [188, "            apiProduces = both.toArray(new String[both.size()]);"], [189, "        }"], [190, "        return apiProduces;"], [191, "    }"], [192, ""], [193, "    private String[] updateOperationConsumes(Method cls, String[] parentConsumes, String[] apiConsumes, Operation operation) {"], [194, ""], [195, "        RequestMapping requestMapping = cls.getAnnotation(RequestMapping.class);"], [196, "        if (requestMapping != null)"], [197, "            apiConsumes = requestMapping.consumes();"], [198, ""], [199, "        if (parentConsumes != null) {"], [200, "            Set<String> both = new HashSet<String>(Arrays.asList(apiConsumes));"], [201, "            both.addAll(new HashSet<String>(Arrays.asList(parentConsumes)));"], [202, "            if (operation.getConsumes() != null)"], [203, "                both.addAll(new HashSet<String>(operation.getConsumes()));"], [204, "            apiConsumes = both.toArray(new String[both.size()]);"], [205, "        }"], [206, "        return apiConsumes;"], [207, "    }"], [208, ""], [382, "    private void collectApisByRequestMapping(List<Method> methods, Map<String, List<Method>> apiMethodMap) {"]]}, "num_lines_added": 50, "num_lines_removed": 80}