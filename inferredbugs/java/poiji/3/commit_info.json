{"hash": "f56f9eb45ac13816fea4e96b63853b5feee52ba4", "message": "New way of finding hidden and visible sheets to avoid gc overhead limit exceeded exception.\nJust proof of concept, still needs to be tidied up", "file_num_lines": 121, "diff_parsed": {"added": [[26, "import javax.xml.parsers.SAXParser;"], [27, "import javax.xml.parsers.SAXParserFactory;"], [30, "import org.xml.sax.Attributes;"], [31, "import org.xml.sax.Locator;"], [32, "////"], [33, "//import java.io.InputStream;"], [34, "//"], [35, "//import org.apache.commons.logging.Log;"], [36, "//import org.apache.commons.logging.LogFactory;"], [37, "//import org.apache.poi.openxml4j.opc.OPCPackage;"], [38, "//import org.apache.poi.xssf.eventusermodel.XSSFReader;"], [39, "//import org.apache.poi.xssf.model.SharedStringsTable;"], [40, "//import org.apache.xerces.parsers.SAXParser;"], [41, "//import org.xml.sax.InputSource;"], [42, "//import org.xml.sax.XMLReader;"], [43, "//"], [44, "//import poi.example.eventmodel.SheetHandler;"], [45, "//import poi.example.eventmodel.WorkbookHandler;"], [46, "//import poi.example.eventmodel.mapping.annotation.Sheet;"], [61, "        WorkBookContentHandler wbch = null;"], [62, "        try {"], [63, "            XSSFReader workbookReader = new XSSFReader(open);"], [64, "            SAXParserFactory spf = SAXParserFactory.newInstance();"], [65, "            SAXParser parser = spf.newSAXParser();"], [66, "            XMLReader reader = parser.getXMLReader();"], [67, "            reader.setContentHandler(new WorkBookContentHandler());"], [68, "            InputSource is = new InputSource(workbookReader.getWorkbookData());"], [69, "            reader.parse(is);"], [70, "            wbch = (WorkBookContentHandler) reader.getContentHandler();"], [71, "        } catch (ParserConfigurationException | SAXException | IOException e) {"], [72, "            throw new PoijiException(\"Problem occurred while reading workbook data\", e);"], [73, "        }"], [74, ""], [75, "//        System.out.println(\"wbch\" + wbch);"], [76, "        int processIndex = 0;"], [77, "        if (wbch != null) {"], [78, ""], [79, "//            System.out.println(\"wbch.sheets\" + wbch.sheets);"], [80, "            int findIndex;"], [81, "            //if given sheet index to use, use that"], [82, "            if (options.sheetIndex() != null && options.sheetIndex() > -1) {"], [83, "                findIndex = options.sheetIndex();"], [84, "            } else {"], [85, "                //else default"], [86, "                findIndex = 0;"], [87, "            }"], [88, ""], [89, "//            System.out.println(\"findIndex \" + findIndex);"], [90, "            int sheetIndex;"], [91, "            //if set to hignore hidden find the visiable sheet that matches the index requested"], [92, "            if (options.ignoreHiddenSheets()) {"], [93, "//                System.out.println(\"ignoreHiddenSheets  true \");"], [94, "                Integer visiableIndex = null;"], [95, ""], [96, "                int sheetCount = 0;"], [97, "                for (WorkBookSheet s : wbch.sheets) {"], [98, ""], [99, "//                    System.out.println(\"WorkBookSheet  s \" + s);"], [100, "                    if (s.state == null) {"], [101, "//                        System.out.println(\"WorkBookSheet NULL\");"], [102, "                        //cannot use sheet is, cos that is its id not its index, they seem to be diffent things"], [103, "                        visiableIndex = sheetCount;"], [104, "                    }"], [105, ""], [106, "                    sheetCount++;"], [107, ""], [108, "                }"], [109, ""], [110, "//                System.out.println(\"visiableIndex\" + visiableIndex);"], [111, "                if (visiableIndex != null) {"], [112, "                    sheetIndex = visiableIndex;"], [113, "                } else {"], [114, "                    //if no sheet found, default back"], [115, "                    sheetIndex = findIndex;"], [116, "                }"], [117, ""], [118, "//                System.out.println(\"sheetIndex\" + sheetIndex);"], [119, "            } else {"], [120, ""], [121, "                //if dont want to ignore hidden sheets, use index given or default"], [122, "                sheetIndex = findIndex;"], [123, "//                System.out.println(\"ELSE sheetIndex\" + sheetIndex);"], [124, "            }"], [125, "            processIndex = sheetIndex;"], [126, "        }"], [128, "//        System.out.println(\"processIndex\" + processIndex);"], [129, "//        XSSFWorkbook wb = new XSSFWorkbook(open);"], [130, "//        Workbook workbook = new SXSSFWorkbook(wb);"], [131, "//        //work out which sheet must process"], [132, "//        int processIndex = PoijiOptions.getSheetIndexToProcess(workbook, options);"]], "deleted": [[26, "import org.apache.poi.ss.usermodel.Workbook;"], [29, "import org.apache.poi.xssf.streaming.SXSSFWorkbook;"], [30, "import org.apache.poi.xssf.usermodel.XSSFWorkbook;"], [45, "        //ISSUE #55"], [46, "        XSSFWorkbook wb = new XSSFWorkbook(open);"], [47, "        Workbook workbook = new SXSSFWorkbook(wb);"], [48, "        //work out which sheet must process"], [49, "        int processIndex = PoijiOptions.getSheetIndexToProcess(workbook, options);"], [60, "                //if (index == options.sheetIndex()) {"]]}, "num_lines_added": 90, "num_lines_removed": 9}