{"hash": "4ef804a7928989ba8963efdee9c8b276696d1c80", "message": "JLANG-47 Ensure the binary format can be converted into the text format.", "file_num_lines": 636, "diff_parsed": {"added": [[44, "                    wire.writeValue().uint8(code);"], [52, "                    wire.writeValue().float64(d);"], [57, "                    wire.writeValue().int64(l);"], [61, "                    copySpecial(wire, code);"], [66, "                    bytes.skip(-1);"], [68, "                    wire.write(fsb, null);"], [73, "                    bytes.skip(-1);"], [75, "                    wire.writeValue().text(sb);"], [82, "    private void copySpecial(Wire wire, int code) {"], [87, "            {"], [88, "                StringBuilder sb = Wires.acquireStringBuilder();"], [89, "                bytes.readUTF\u0394(sb);"], [90, "                wire.writeValue().comment(sb);"], [91, "                break;"], [92, "            }"], [94, "            {"], [95, "                StringBuilder sb = Wires.acquireStringBuilder();"], [96, "                bytes.readUTF\u0394(sb);"], [97, "                wire.writeValue().hint(sb);"], [99, "            }"], [105, "            {"], [106, "                StringBuilder sb = Wires.acquireStringBuilder();"], [107, "                bytes.readUTF\u0394(sb);"], [108, "                wire.writeValue().type(sb);"], [110, "            }"], [112, "                bytes.skip(-1);"], [114, "                wire.write(fsb, null);"], [117, "                bytes.skip(-1);"], [119, "                wire.writeValue().text(sb);"], [123, "                wire.writeValue().flag(null);"], [126, "                wire.writeValue().flag(false);"], [129, "                wire.writeValue().flag(true);"], [132, "                throw new UnsupportedOperationException(WireType.stringForCode(code));"], [137, "        switch (code) {"], [138, "            case 0xA0: // FIELD_NUMBER(0xA0),"], [139, "                throw new UnsupportedOperationException();"], [140, "            case 0xA1: // UTF8(0xA1),"], [141, "                throw new UnsupportedOperationException();"], [142, "            case 0xA2: //INT8(0xA2),"], [143, "                return bytes.readByte();"], [144, "            case 0xA3: //INT16(0xA3),"], [145, "                return bytes.readShort();"], [146, "            case 0xA4: //INT32(0xA4),"], [147, "                return bytes.readInt();"], [148, "            case 0xA5: //INT64(0xA5),"], [149, "                return bytes.readLong();"], [150, "            case 0xA6: //UINT8(0xA6),"], [151, "                return bytes.readUnsignedByte();"], [152, "            case 0xA7: //UINT16(0xA7),"], [153, "                return bytes.readUnsignedShort();"], [154, "            case 0xA8: //UINT32(0xA8),"], [155, "                return bytes.readUnsignedInt();"], [156, "            case 0xA9: //FIXED_6(0xA9),"], [157, "                return bytes.readStopBit() * 1000000L;"], [158, "            case 0xAA: //FIXED_5(0xAA),"], [159, "                return bytes.readStopBit() * 100000L;"], [160, "            case 0xAB: //FIXED_4(0xAB),"], [161, "                return bytes.readStopBit() * 10000L;"], [162, "            case 0xAC: //FIXED_3(0xAC),"], [163, "                return bytes.readStopBit() * 1000L;"], [164, "            case 0xAD: //FIXED_2(0xAD),"], [165, "                return bytes.readStopBit() * 100L;"], [166, "            case 0xAE: //FIXED_1(0xAE),"], [167, "                return bytes.readStopBit() * 10L;"], [168, "            case 0xAF: //FIXED(0xAF),"], [169, "                return bytes.readStopBit();"], [170, ""], [171, "        }"], [172, "        throw new UnsupportedOperationException(WireType.stringForCode(code));"], [176, "        switch (code) {"], [177, "            case 0x90: // FLOAT32(0x90),"], [178, "                return bytes.readFloat();"], [179, "            case 0x91: // FLOAT64(0x91),"], [180, "                return bytes.readDouble();"], [181, "            case 0x92: // FIXED1(0x92),"], [182, "                return bytes.readStopBit() / 1e1;"], [183, "            case 0x93: // FIXED2(0x93),"], [184, "                return bytes.readStopBit() / 1e2;"], [185, "            case 0x94: // FIXED3(0x94),"], [186, "                return bytes.readStopBit() / 1e3;"], [187, "            case 0x95: // FIXED4(0x95),"], [188, "                return bytes.readStopBit() / 1e4;"], [189, "            case 0x96: // FIXED5(0x96),"], [190, "                return bytes.readStopBit() / 1e5;"], [191, "            case 0x97: // FIXED6(0x97),"], [192, "                return bytes.readStopBit() / 1e6;"], [193, "        }"], [194, "        throw new UnsupportedOperationException(WireType.stringForCode(code));"], [511, "        public Wire hint(CharSequence s) {"], [512, "            bytes.writeUnsignedByte(HINT.code);"], [513, "            bytes.writeUTF\u0394(s);"], [514, "            return BinaryWire.this;"], [515, "        }"], [516, ""], [517, "        @Override"]], "deleted": [[44, "                    writeValue.uint8(code);"], [52, "                    writeValue.float64(d);"], [57, "                    writeValue.int64(l);"], [61, "                    copySpecial(code);"], [67, "                    writeField(fsb);"], [73, "                    writeValue.text(sb);"], [80, "    private void copySpecial(int code) {"], [86, "                bytes.readUTF\u0394(Wires.acquireStringBuilder());"], [93, "                bytes.readUTF\u0394(Wires.acquireStringBuilder());"], [94, "                writeValue.type(Wires.MyStringBuilder.get());"], [98, "                writeField(fsb);"], [102, "                writeValue.text(sb);"], [106, "                writeValue.flag(null);"], [109, "                writeValue.flag(false);"], [112, "                writeValue.flag(true);"], [115, "                throw new UnsupportedOperationException();"], [120, "        return 0;"], [124, "        return 0;"]]}, "num_lines_added": 95, "num_lines_removed": 18}