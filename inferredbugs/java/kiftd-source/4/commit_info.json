{"hash": "2d6ad45ad25e14eeeac4eaf46600f5fa070fa403", "message": "update to v1.0.8 \u65b0\u589e\u4e86\u4e0b\u8f7d\u94fe\u63a5\u663e\u793a", "file_num_lines": 103, "diff_parsed": {"added": [[3, "import java.io.BufferedOutputStream;"], [5, "import java.io.IOException;"], [12, "/**"], [13, " *"], [14, " * <h2>\u65ad\u70b9\u5f0f\u6587\u4ef6\u8f93\u51fa\u6d41\u5199\u51fa\u5de5\u5177</h2>"], [15, " * <p>"], [16, " * \u8be5\u5de5\u5177\u8d1f\u8d23\u5904\u7406\u65ad\u70b9\u4e0b\u8f7d\u8bf7\u6c42\u5e76\u4ee5\u76f8\u5e94\u89c4\u5219\u5199\u51fa\u6587\u4ef6\u6d41\u3002\u9700\u8981\u63d0\u4f9b\u65ad\u70b9\u7eed\u4f20\u670d\u52a1\uff0c\u8bf7\u7ee7\u627f\u8be5\u7c7b\u5e76\u8c03\u7528writeRangeFileStream\u65b9\u6cd5\u3002"], [17, " * </p>"], [18, " *"], [19, " * @author \u9752\u9633\u9f99\u91ce(kohgylw)"], [20, " * @version 1.0"], [21, " */"], [24, "\t/**"], [25, "\t *"], [26, "\t * <h2>\u4f7f\u7528\u65ad\u70b9\u7eed\u4f20\u6280\u672f\u63d0\u4f9b\u8f93\u51fa\u6d41</h2>"], [27, "\t * <p>"], [28, "\t * \u5904\u7406\u5e26\u6709\u65ad\u70b9\u7eed\u4f20\u53c2\u6570\u7684\u4e0b\u8f7d\u8bf7\u6c42\uff0c\u5e76\u63d0\u4f9b\u8f93\u51fa\u6d41\u5199\u51fa\u3002\u8bf7\u4f20\u5165\u76f8\u5e94\u7684\u53c2\u6570\u5e76\u6267\u884c\u8be5\u65b9\u6cd5\u4ee5\u5f00\u59cb\u65ad\u70b9\u4f20\u8f93\u3002"], [29, "\t * </p>"], [30, "\t *"], [31, "\t * @author \u9752\u9633\u9f99\u91ce(kohgylw)"], [32, "\t * @param request"], [33, "\t *            javax.servlet.http.HttpServletRequest \u8bf7\u6c42\u5bf9\u8c61"], [34, "\t * @param response"], [35, "\t *            javax.servlet.http.HttpServletResponse \u54cd\u5e94\u5bf9\u8c61"], [36, "\t * @param fo"], [37, "\t *            java.io.File \u9700\u8981\u5199\u51fa\u7684\u6587\u4ef6"], [38, "\t * @param fname"], [39, "\t *            java.lang.String \u6587\u4ef6\u540d"], [40, "\t * @param contentType"], [41, "\t *            java.lang.String HTTP Content-Type\u7c7b\u578b\uff08\u7528\u4e8e\u63a7\u5236\u5ba2\u6237\u7aef\u884c\u4e3a\uff09"], [42, "\t * @return void"], [43, "\t */"], [46, "\t\tlong fileLength = fo.length(); // \u8bb0\u5f55\u6587\u4ef6\u5927\u5c0f"], [47, "\t\tlong pastLength = 0; // \u8bb0\u5f55\u5df2\u4e0b\u8f7d\u6587\u4ef6\u5927\u5c0f"], [48, "\t\tint rangeSwitch = 0; // 0\uff1a\u4ece\u5934\u5f00\u59cb\u7684\u5168\u6587\u4e0b\u8f7d\uff1b1\uff1a\u4ece\u67d0\u5b57\u8282\u5f00\u59cb\u7684\u4e0b\u8f7d\uff08bytes=27000-\uff09\uff1b2\uff1a\u4ece\u67d0\u5b57\u8282\u5f00\u59cb\u5230\u67d0\u5b57\u8282\u7ed3\u675f\u7684\u4e0b\u8f7d\uff08bytes=27000-39000\uff09"], [49, "\t\tlong toLength = 0; // \u8bb0\u5f55\u5ba2\u6237\u7aef\u9700\u8981\u4e0b\u8f7d\u7684\u5b57\u8282\u6bb5\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u504f\u79fb\u91cf\uff08\u6bd4\u5982bytes=27000-39000\uff0c\u5219\u8fd9\u4e2a\u503c\u662f\u4e3a39000\uff09"], [50, "\t\tlong contentLength = 0; // \u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u5b57\u8282\u603b\u91cf"], [51, "\t\tString rangeBytes = \"\"; // \u8bb0\u5f55\u5ba2\u6237\u7aef\u4f20\u6765\u7684\u5f62\u5982\u201cbytes=27000-\u201d\u6216\u8005\u201cbytes=27000-39000\u201d\u7684\u5185\u5bb9"], [52, "\t\tOutputStream os = null; // \u5199\u51fa\u6570\u636e"], [53, "\t\tOutputStream out = null; // \u7f13\u51b2"], [54, "\t\tbyte b[] = new byte[ConfigureReader.instance().getBuffSize()]; // \u6682\u5b58\u5bb9\u5668"], [55, "\t\tif (request.getHeader(\"Range\") != null) { // \u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u4e0b\u8f7d\u7684\u6587\u4ef6\u5757\u7684\u5f00\u59cb\u5b57\u8282"], [56, "\t\t\tresponse.setStatus(javax.servlet.http.HttpServletResponse.SC_PARTIAL_CONTENT);"], [57, "\t\t\trangeBytes = request.getHeader(\"Range\").replaceAll(\"bytes=\", \"\");"], [58, "\t\t\tif (rangeBytes.indexOf('-') == rangeBytes.length() - 1) {// bytes=969998336-"], [59, "\t\t\t\trangeSwitch = 1;"], [60, "\t\t\t\trangeBytes = rangeBytes.substring(0, rangeBytes.indexOf('-'));"], [61, "\t\t\t\tpastLength = Long.parseLong(rangeBytes.trim());"], [62, "\t\t\t\tcontentLength = fileLength - pastLength; // \u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u662f 969998336 \u4e4b\u540e\u7684\u5b57\u8282"], [63, "\t\t\t} else { // bytes=1275856879-1275877358"], [64, "\t\t\t\trangeSwitch = 2;"], [65, "\t\t\t\tString temp0 = rangeBytes.substring(0, rangeBytes.indexOf('-'));"], [66, "\t\t\t\tString temp2 = rangeBytes.substring(rangeBytes.indexOf('-') + 1, rangeBytes.length());"], [67, "\t\t\t\tpastLength = Long.parseLong(temp0.trim()); // bytes=1275856879-1275877358\uff0c\u4ece\u7b2c 1275856879 \u4e2a\u5b57\u8282\u5f00\u59cb\u4e0b\u8f7d"], [68, "\t\t\t\ttoLength = Long.parseLong(temp2); // bytes=1275856879-1275877358\uff0c\u5230\u7b2c 1275877358 \u4e2a\u5b57\u8282\u7ed3\u675f"], [69, "\t\t\t\tcontentLength = toLength - pastLength; // \u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u662f 1275856879-1275877358 \u4e4b\u95f4\u7684\u5b57\u8282"], [71, "\t\t} else { // \u4ece\u5f00\u59cb\u8fdb\u884c\u4e0b\u8f7d"], [72, "\t\t\tcontentLength = fileLength; // \u5ba2\u6237\u7aef\u8981\u6c42\u5168\u6587\u4e0b\u8f7d"], [73, "\t\t}"], [74, ""], [75, "\t\t/**"], [76, "\t\t * \u5982\u679c\u8bbe\u8bbe\u7f6e\u4e86Content -Length\uff0c\u5219\u5ba2\u6237\u7aef\u4f1a\u81ea\u52a8\u8fdb\u884c\u591a\u7ebf\u7a0b\u4e0b\u8f7d\u3002\u5982\u679c\u4e0d\u5e0c\u671b\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u5219\u4e0d\u8981\u8bbe\u7f6e\u8fd9\u4e2a\u53c2\u6570\u3002 \u54cd\u5e94\u7684\u683c\u5f0f\u662f: Content -"], [77, "\t\t * Length: [\u6587\u4ef6\u7684\u603b\u5927\u5c0f] - [\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u4e0b\u8f7d\u7684\u6587\u4ef6\u5757\u7684\u5f00\u59cb\u5b57\u8282]"], [78, "\t\t * ServletActionContext.getResponse().setHeader(\"Content- Length\", new"], [79, "\t\t * Long(file.length() - p).toString());"], [80, "\t\t */"], [81, "\t\tresponse.setHeader(\"Accept-Ranges\", \"bytes\");// \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u4e0b,\u8fd8\u6ca1\u6709\u65ad\u70b9\u7eed\u4f20,\u72b6\u6001\u662f\u9ed8\u8ba4\u7684 200,\u65e0\u9700\u663e\u5f0f\u8bbe\u7f6e;\u54cd\u5e94\u7684\u683c\u5f0f\u662f:HTTP/1.1 200 OK"], [82, "\t\tif (pastLength != 0) {"], [83, "\t\t\t// \u4e0d\u662f\u4ece\u6700\u5f00\u59cb\u4e0b\u8f7d,"], [84, "\t\t\t// \u54cd\u5e94\u7684\u683c\u5f0f\u662f:"], [85, "\t\t\t// Content-Range: bytes [\u6587\u4ef6\u5757\u7684\u5f00\u59cb\u5b57\u8282]-[\u6587\u4ef6\u7684\u603b\u5927\u5c0f - 1]/[\u6587\u4ef6\u7684\u603b\u5927\u5c0f]"], [86, "\t\t\tswitch (rangeSwitch) {"], [87, "\t\t\t\tcase 1: { // \u9488\u5bf9 bytes=27000- \u7684\u8bf7\u6c42"], [88, "\t\t\t\t\tString contentRange = new StringBuffer(\"bytes \").append(new Long(pastLength).toString()).append(\"-\")"], [89, "\t\t\t\t\t\t\t.append(new Long(fileLength - 1).toString()).append(\"/\").append(new Long(fileLength).toString())"], [91, "\t\t\t\t\tresponse.setHeader(\"Content-Range\", contentRange);"], [92, "\t\t\t\t\tbreak;"], [93, "\t\t\t\t}"], [94, "\t\t\t\tcase 2: { // \u9488\u5bf9 bytes=27000-39000 \u7684\u8bf7\u6c42"], [95, "\t\t\t\t\tString contentRange = new StringBuffer(\"bytes \").append(rangeBytes).append(\"/\").append(new Long(fileLength).toString()).toString();"], [96, "\t\t\t\t\tresponse.setHeader(\"Content-Range\", contentRange);"], [97, "\t\t\t\t\tbreak;"], [98, "\t\t\t\t}"], [99, "\t\t\t\tdefault: {"], [100, "\t\t\t\t\tbreak;"], [103, "\t\t} else {"], [104, "\t\t\t// \u662f\u4ece\u5f00\u59cb\u4e0b\u8f7d"], [105, "\t\t}"], [106, "\t\tresponse.addHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + fname + \"\\\"\");"], [107, "\t\tresponse.setContentType(contentType); // set the MIME type."], [108, "\t\tresponse.addHeader(\"Content-Length\", String.valueOf(contentLength));"], [109, "\t\ttry (RandomAccessFile raf = new RandomAccessFile(fo, \"r\")) {"], [110, "\t\t\tos = response.getOutputStream();"], [111, "\t\t\tout = new BufferedOutputStream(os);"], [112, "\t\t\tSystem.out.println(\"--Range Download--\");"], [113, "\t\t\tSystem.out.println(\"Content-Type:\"+response.getContentType());"], [114, "\t\t\tSystem.out.println(\"Content-Length:\"+response.getHeader(\"Content-Length\"));"], [115, "\t\t\tSystem.out.println(\"Content-Range:\"+response.getHeader(\"Content-Range\"));"], [116, "\t\t\tSystem.out.println(\"--Range Download--\");"], [117, "\t\t\tswitch (rangeSwitch) {"], [118, "\t\t\t\tcase 0: { // \u666e\u901a\u4e0b\u8f7d\uff0c\u6216\u8005\u4ece\u5934\u5f00\u59cb\u7684\u4e0b\u8f7d"], [119, "\t\t\t\t\t// \u540c1"], [121, "\t\t\t\tcase 1: { // \u9488\u5bf9 bytes=27000- \u7684\u8bf7\u6c42"], [122, "\t\t\t\t\traf.seek(pastLength); // \u5f62\u5982 bytes=969998336- \u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u8df3\u8fc7 969998336 \u4e2a\u5b57\u8282"], [123, "\t\t\t\t\tint n = 0;"], [124, "\t\t\t\t\twhile ((n = raf.read(b)) != -1) {"], [125, "\t\t\t\t\t\tout.write(b, 0, n);"], [126, "\t\t\t\t\t}"], [127, "\t\t\t\t\tbreak;"], [128, "\t\t\t\t}"], [129, "\t\t\t\tcase 2: { // \u9488\u5bf9 bytes=27000-39000 \u7684\u8bf7\u6c42"], [130, "\t\t\t\t\traf.seek(pastLength); // \u5f62\u5982 bytes=1275856879-1275877358 \u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u627e\u5230\u7b2c 1275856879 \u4e2a\u5b57\u8282"], [131, "\t\t\t\t\tint n = 0;"], [132, "\t\t\t\t\tlong readLength = 0; // \u8bb0\u5f55\u5df2\u8bfb\u5b57\u8282\u6570"], [133, "\t\t\t\t\twhile (readLength <= contentLength) {// \u5927\u90e8\u5206\u5b57\u8282\u5728\u8fd9\u91cc\u8bfb\u53d6"], [134, "\t\t\t\t\t\tn = raf.read(b);"], [135, "\t\t\t\t\t\treadLength += n;"], [136, "\t\t\t\t\t\tout.write(b, 0, n);"], [137, "\t\t\t\t\t}"], [138, "\t\t\t\t\tbreak;"], [139, "\t\t\t\t}"], [140, "\t\t\t\tdefault: {"], [141, "\t\t\t\t\tbreak;"], [144, "\t\t\tout.flush();"], [145, ""], [146, "\t\t} catch (IOException ex) {"], [147, ""], [148, "\t\t} finally {"], [149, ""]], "deleted": [[6, "import java.net.URLEncoder;"], [13, "\t// \u4f7f\u7528\u65ad\u70b9\u7eed\u4f20\u6280\u672f\u63d0\u4f9b\u6587\u4ef6\u4e0b\u8f7d\u670d\u52a1"], [16, "\t\tlong skipLength = 0;// \u4e0b\u8f7d\u65f6\u8df3\u8fc7\u7684\u5b57\u8282\u6570"], [17, "\t\tlong downLength = 0;// \u9700\u8981\u7ee7\u7eed\u4e0b\u8f7d\u7684\u5b57\u8282\u6570"], [18, "\t\tboolean hasEnd = false;// \u662f\u5426\u5177\u5907\u7ed3\u675f\u5b57\u8282\u58f0\u660e"], [19, "\t\ttry {"], [20, "\t\t\tresponse.setHeader(\"Accept-Ranges\", \"bytes\");// \u652f\u6301\u65ad\u70b9\u7eed\u4f20\u58f0\u660e"], [21, "\t\t\t// \u83b7\u53d6\u5df2\u4e0b\u8f7d\u5b57\u8282\u6570\u548c\u9700\u4e0b\u8f7d\u5b57\u8282\u6570"], [22, "\t\t\tString rangeLabel = request.getHeader(\"Range\");// \u83b7\u53d6\u4e0b\u8f7d\u957f\u5ea6\u58f0\u660e"], [23, "\t\t\tif (null != rangeLabel) {"], [24, "\t\t\t\t// \u5f53\u8fdb\u884c\u65ad\u70b9\u7eed\u4f20\u65f6\uff0c\u8fd4\u56de\u54cd\u5e94\u7801206"], [25, "\t\t\t\tresponse.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);"], [26, "\t\t\t\t// \u89e3\u6790\u4e0b\u8f7d\u8df3\u8fc7\u957f\u5ea6\u548c\u7ee7\u7eed\u957f\u5ea6"], [27, "\t\t\t\trangeLabel = request.getHeader(\"Range\").replaceAll(\"bytes=\", \"\");"], [28, "\t\t\t\tif (rangeLabel.indexOf('-') == rangeLabel.length() - 1) {"], [29, "\t\t\t\t\thasEnd = false;"], [30, "\t\t\t\t\trangeLabel = rangeLabel.substring(0, rangeLabel.indexOf('-'));"], [31, "\t\t\t\t\tskipLength = Long.parseLong(rangeLabel.trim());"], [32, "\t\t\t\t} else {"], [33, "\t\t\t\t\thasEnd = true;"], [34, "\t\t\t\t\tString startBytes = rangeLabel.substring(0, rangeLabel.indexOf('-'));"], [35, "\t\t\t\t\tString endBytes = rangeLabel.substring(rangeLabel.indexOf('-') + 1, rangeLabel.length());"], [36, "\t\t\t\t\tskipLength = Long.parseLong(startBytes.trim());"], [37, "\t\t\t\t\tdownLength = Long.parseLong(endBytes);"], [38, "\t\t\t\t}"], [40, "\t\t\t// \u8bbe\u7f6e\u54cd\u5e94\u4e2d\u6587\u4ef6\u5757\u58f0\u660e"], [41, "\t\t\tlong fileLength = fo.length();// \u6587\u4ef6\u957f\u5ea6"], [42, "\t\t\tif (0 != skipLength) {"], [43, "\t\t\t\tString contentRange = \"\";"], [44, "\t\t\t\tif (hasEnd) {"], [45, "\t\t\t\t\tcontentRange = new StringBuffer(rangeLabel).append(\"/\").append(new Long(fileLength).toString())"], [47, "\t\t\t\t} else {"], [48, "\t\t\t\t\tcontentRange = new StringBuffer(\"bytes\").append(new Long(skipLength).toString()).append(\"-\")"], [49, "\t\t\t\t\t\t\t.append(new Long(fileLength - 1).toString()).append(\"/\")"], [50, "\t\t\t\t\t\t\t.append(new Long(fileLength).toString()).toString();"], [52, "\t\t\t\tresponse.setHeader(\"Content-Range\", contentRange);"], [54, "\t\t\t// \u5f00\u59cb\u6267\u884c\u4e0b\u8f7d"], [55, "\t\t\tresponse.setContentType(contentType);"], [56, "\t\t\tresponse.setHeader(\"Content-Length\", \"\" + fileLength);"], [57, "\t\t\tresponse.addHeader(\"Content-Disposition\", \"attachment;fileName=\" + URLEncoder.encode(fname, \"UTF-8\"));"], [58, "\t\t\tfinal int buffersize = ConfigureReader.instance().getBuffSize();"], [59, "\t\t\tfinal byte[] buffer = new byte[buffersize];"], [60, "\t\t\tfinal RandomAccessFile raf = new RandomAccessFile(fo, \"r\");"], [61, "\t\t\tfinal OutputStream os = (OutputStream) response.getOutputStream();"], [62, "\t\t\traf.seek(skipLength);// \u8df3\u8fc7\u5df2\u7ecf\u4e0b\u8f7d\u7684\u5b57\u8282\u6570"], [63, "\t\t\tif (hasEnd) {"], [64, "\t\t\t\twhile (raf.getFilePointer() < downLength) {"], [65, "\t\t\t\t\tos.write(raf.read());"], [67, "\t\t\t} else {"], [68, "\t\t\t\tint index = 0;"], [69, "\t\t\t\twhile ((index = raf.read(buffer)) != -1) {"], [70, "\t\t\t\t\tos.write(buffer, 0, index);"], [73, "\t\t\traf.close();"], [74, "\t\t\tos.close();"], [75, "\t\t} catch (Exception ex) {"], [76, "\t\t\tex.printStackTrace();"], [79, ""]]}, "num_lines_added": 129, "num_lines_removed": 57}