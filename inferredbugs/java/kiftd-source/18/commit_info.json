{"hash": "2c1345a27a4753c02a88a6195274ec733764246c", "message": "update to v1.0.20 \u5df2\u5b8c\u6210\u6587\u4ef6\u5939\u4e0a\u4f20\u529f\u80fd\uff0c\u5f00\u59cb\u8fdb\u884c\u7248\u672c\u6d4b\u8bd5", "file_num_lines": 816, "diff_parsed": {"added": [[5, "import org.mybatis.spring.MyBatisSystemException;"], [760, "\t\t\tfolders.stream().parallel()"], [761, "\t\t\t.filter((n) -> n.getFolderName().equals("], [762, "\t\t\t\t\tnew String(folderName.getBytes(Charset.forName(\"UTF-8\")), Charset.forName(\"UTF-8\"))))"], [763, "\t\t\t.findAny().get();"], [764, "\t\t\tcifr.setResult(\"repeatFolder\");"], [775, "\t\tfinal String account = (String) request.getSession().getAttribute(\"ACCOUNT\");"], [779, "\t\tString folderConstraint = request.getParameter(\"folderConstraint\");"], [798, "\t\t// \u68c0\u67e5\u662f\u5426\u5177\u5907\u521b\u5efa\u6587\u4ef6\u5939\u6743\u9650\uff0c\u82e5\u6709\u5219\u4f7f\u7528\u8bf7\u6c42\u4e2d\u63d0\u4f9b\u7684\u6587\u4ef6\u5939\u8bbf\u95ee\u7ea7\u522b\uff0c\u5426\u5219\u4f7f\u7528\u9ed8\u8ba4\u8bbf\u95ee\u7ea7\u522b"], [799, "\t\tint pc = folder.getFolderConstraint();"], [800, "\t\tif (ConfigureReader.instance().authorized(account, AccountAuth.CREATE_NEW_FOLDER)) {"], [801, "\t\t\ttry {"], [802, "\t\t\t\tint ifc = Integer.parseInt(folderConstraint);"], [803, "\t\t\t\tif (ifc > 0 && account == null) {"], [804, "\t\t\t\t\treturn UPLOADERROR;"], [805, "\t\t\t\t}"], [806, "\t\t\t\tif (ifc < pc) {"], [807, "\t\t\t\t\treturn UPLOADERROR;"], [808, "\t\t\t\t}"], [809, "\t\t\t} catch (Exception e) {"], [812, "\t\t} else {"], [813, "\t\t\tfolderConstraint = pc + \"\";"], [815, "\t\t// \u8ba1\u7b97\u76f8\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u5939ID\uff08\u5373\u771f\u6b63\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u5939\u76ee\u6807\uff09"], [816, "\t\tString[] paths = getParentPath(originalFileName);"], [817, "\t\t// \u5c06\u5f53\u524d\u64cd\u4f5c\u7684\u6587\u4ef6\u5939\u8def\u5f84\u52a0\u5165\u5230\u5b89\u5168\u9501\u4e2d\uff0c\u786e\u4fdd\u540c\u4e00\u65f6\u95f4\u5185\u65e0\u6cd5\u5bf9\u8be5\u6587\u4ef6\u5939\u8fdb\u884c\u91cd\u590d\u5bfc\u5165\uff0c\u907f\u514d\u53d1\u751f\u6587\u4ef6\u51b2\u7a81\u7684\u95ee\u9898\u3002"], [878, ""], [879, "\tprivate String protectImportFolder(String[] paths, String folderId, String account, String folderConstraint,"], [880, "\t\t\tString originalFileName, MultipartFile file) {"], [882, "\t\t\tFolder newFolder = fu.createNewFolder(folderId, account, pName, folderConstraint);"], [883, "\t\t\tif (newFolder == null) {"], [884, "\t\t\t\tMap<String, String> key = new HashMap<String, String>();"], [885, "\t\t\t\tkey.put(\"parentId\", folderId);"], [886, "\t\t\t\tkey.put(\"folderName\", pName);"], [887, "\t\t\t\ttry {"], [888, "\t\t\t\t\tFolder target = flm.queryByParentIdAndFolderName(key);"], [889, "\t\t\t\t\tif (target != null) {"], [890, "\t\t\t\t\t\tfolderId = target.getFolderId();// \u5411\u4e0b\u8fed\u4ee3\u76f4\u81f3\u5c06\u7236\u8def\u5f84\u5168\u90e8\u8fed\u4ee3\u5b8c\u6bd5\u5e76\u627e\u5230\u6700\u7ec8\u8def\u5f84"], [891, "\t\t\t\t\t} else {"], [892, "\t\t\t\t\t\treturn UPLOADERROR;"], [893, "\t\t\t\t\t}"], [894, "\t\t\t\t} catch (MyBatisSystemException e) {"], [895, "\t\t\t\t\tcleanRepeatFolder(folderId, pName);"], [898, "\t\t\t} else {"], [899, "\t\t\t\tif (cleanRepeatFolder(folderId, pName)) {"], [902, "\t\t\t\tfolderId = newFolder.getFolderId();"], [949, "\t// \u5f53\u6587\u4ef6\u5939\u51fa\u73b0\u540c\u540d\u95ee\u9898\u65f6\uff0c\u5220\u9664\u540c\u540d\u6587\u4ef6\u5939\u5e76\u8fd4\u56de\u662f\u5426\u8fdb\u884c\u4e86\u8be5\u64cd\u4f5c\uff08\u65e8\u5728\u786e\u4fdd\u4e0a\u4f20\u6587\u4ef6\u5939\u64cd\u4f5c\u4e0d\u88ab\u91cd\u590d\u4e0a\u4f20\u5e72\u6270\uff09"], [950, "\tprivate boolean cleanRepeatFolder(String folderId, String pName) {"], [951, "\t\tFolder[] repeats = flm.queryByParentId(folderId).parallelStream().filter((f) -> f.getFolderName().equals(pName))"], [952, "\t\t\t\t.toArray(Folder[]::new);"], [953, "\t\tif (repeats.length > 1) {"], [954, "\t\t\tfor (Folder r : repeats) {"], [955, "\t\t\t\tflm.deleteById(r.getFolderId());"], [956, "\t\t\t}"], [957, "\t\t\treturn true;"], [958, "\t\t} else {"], [959, "\t\t\treturn false;"], [960, "\t\t}"], [961, "\t}"]], "deleted": [[42, ""], [43, "\tprivate static Set<String> pathsKeys;//\u6587\u4ef6\u5939\u4e0a\u4f20\u5b89\u5168\u9501\uff0c\u907f\u514d\u540c\u65f6\u5bf9\u540c\u6587\u4ef6\u5939\u91cd\u590d\u5bfc\u5165"], [59, ""], [60, "\t{"], [61, "\t\tpathsKeys = new HashSet<>();"], [62, "\t}"], [765, "\t\t\tFolder testfolder = folders.stream().parallel()"], [766, "\t\t\t\t\t.filter((n) -> n.getFolderName().equals("], [767, "\t\t\t\t\t\t\tnew String(folderName.getBytes(Charset.forName(\"UTF-8\")), Charset.forName(\"UTF-8\"))))"], [768, "\t\t\t\t\t.findAny().get();"], [769, "\t\t\t// \u82e5\u6709\u91cd\u540d\uff0c\u5219\u5224\u5b9a\u8be5\u7528\u6237\u662f\u5426\u5177\u5907\u5220\u9664\u6743\u9650\uff0c\u8fd9\u662f\u80fd\u591f\u8986\u76d6\u7684\u7b2c\u4e00\u6b65"], [770, "\t\t\tif (ConfigureReader.instance().authorized(account, AccountAuth.DELETE_FILE_OR_FOLDER)) {"], [771, "\t\t\t\t// \u63a5\u4e0b\u6765\u5224\u65ad\u5176\u662f\u5426\u5177\u5907\u51b2\u7a81\u6587\u4ef6\u5939\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u8fd9\u662f\u80fd\u591f\u8986\u76d6\u7684\u7b2c\u4e8c\u6b65"], [772, "\t\t\t\tif (ConfigureReader.instance().accessFolder(testfolder, account)) {"], [773, "\t\t\t\t\tcifr.setResult(\"coverOrBoth\");"], [774, "\t\t\t\t\treturn gson.toJson(cifr);"], [775, "\t\t\t\t}"], [776, "\t\t\t}"], [777, "\t\t\t// \u5982\u679c\u4e0a\u8ff0\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u5219\u53ea\u80fd\u5141\u8bb8\u4fdd\u7559\u4e24\u8005"], [778, "\t\t\tcifr.setResult(\"onlyBoth\");"], [789, "\t\tString account = (String) request.getSession().getAttribute(\"ACCOUNT\");"], [793, "\t\tfinal String folderConstraint = request.getParameter(\"folderConstraint\");"], [812, "\t\t// \u8ba1\u7b97\u76f8\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u5939ID\uff08\u5373\u771f\u6b63\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u5939\u76ee\u6807\uff09"], [813, "\t\tString[] paths = getParentPath(originalFileName);"], [814, "\t\t//\u5c06\u5f53\u524d\u64cd\u4f5c\u7684\u6587\u4ef6\u5939\u8def\u5f84\u52a0\u5165\u5230\u5b89\u5168\u9501\u4e2d\uff0c\u786e\u4fdd\u540c\u4e00\u65f6\u95f4\u5185\u65e0\u6cd5\u5bf9\u8be5\u6587\u4ef6\u5939\u8fdb\u884c\u91cd\u590d\u5bfc\u5165\uff0c\u907f\u514d\u53d1\u751f\u6587\u4ef6\u51b2\u7a81\u7684\u95ee\u9898\u3002"], [815, "\t\tString pathskey = Arrays.toString(paths);"], [816, "\t\tsynchronized (pathsKeys) {"], [817, "\t\t\tif(pathsKeys.contains(pathskey)) {"], [819, "\t\t\t}else {"], [820, "\t\t\t\tpathsKeys.add(pathskey);"], [824, "\t\tsynchronized (pathsKeys) {"], [825, "\t\t\tpathsKeys.remove(pathskey);"], [826, "\t\t}"], [886, ""], [887, "\tprivate String protectImportFolder(String[] paths,String folderId,String account,String folderConstraint,String originalFileName,MultipartFile file) {"], [889, "\t\t\ttry {"], [890, "\t\t\t\tFolder target = flm.queryByParentId(folderId).parallelStream()"], [891, "\t\t\t\t\t\t.filter((e) -> e.getFolderName().equals(pName)).findAny().get();"], [892, "\t\t\t\tif (ConfigureReader.instance().accessFolder(target, account)) {"], [893, "\t\t\t\t\tfolderId = target.getFolderId();// \u5411\u4e0b\u8fed\u4ee3\u76f4\u81f3\u5c06\u7236\u8def\u5f84\u5168\u90e8\u8fed\u4ee3\u5b8c\u6bd5\u5e76\u627e\u5230\u6700\u7ec8\u8def\u5f84"], [894, "\t\t\t\t} else {"], [897, "\t\t\t} catch (NoSuchElementException e) {"], [898, "\t\t\t\tFolder newFolder = fu.createNewFolder(flm.queryById(folderId), account, pName, folderConstraint);"], [899, "\t\t\t\tif (newFolder != null) {"], [900, "\t\t\t\t\tfolderId = newFolder.getFolderId();"], [901, "\t\t\t\t} else {"]]}, "num_lines_added": 58, "num_lines_removed": 46}