{"hash": "ce5a6b8b153ae9db0c761d5872930c70c2daba68", "message": "update to v1.0.20 \u4f18\u5316\u4e86\u6587\u4ef6\u5939\u4e0a\u4f20\u903b\u8f91\uff08\u8be5\u529f\u80fd\u5c1a\u672a\u5b8c\u5168\u5b8c\u6210\uff0c\u8bf7\u52ff\u76f4\u63a5\u4f7f\u7528\uff09", "file_num_lines": 801, "diff_parsed": {"added": [[823, "\t\tString result = protectImportFolder(paths, folderId, account, folderConstraint, originalFileName, file);"], [827, "\t\treturn result;"], [886, ""], [887, "\tprivate String protectImportFolder(String[] paths,String folderId,String account,String folderConstraint,String originalFileName,MultipartFile file) {"], [888, "\t\tfor (String pName : paths) {"], [889, "\t\t\ttry {"], [890, "\t\t\t\tFolder target = flm.queryByParentId(folderId).parallelStream()"], [891, "\t\t\t\t\t\t.filter((e) -> e.getFolderName().equals(pName)).findAny().get();"], [892, "\t\t\t\tif (ConfigureReader.instance().accessFolder(target, account)) {"], [893, "\t\t\t\t\tfolderId = target.getFolderId();// \u5411\u4e0b\u8fed\u4ee3\u76f4\u81f3\u5c06\u7236\u8def\u5f84\u5168\u90e8\u8fed\u4ee3\u5b8c\u6bd5\u5e76\u627e\u5230\u6700\u7ec8\u8def\u5f84"], [894, "\t\t\t\t} else {"], [895, "\t\t\t\t\treturn UPLOADERROR;"], [896, "\t\t\t\t}"], [897, "\t\t\t} catch (NoSuchElementException e) {"], [898, "\t\t\t\tFolder newFolder = fu.createNewFolder(flm.queryById(folderId), account, pName, folderConstraint);"], [899, "\t\t\t\tif (newFolder != null) {"], [900, "\t\t\t\t\tfolderId = newFolder.getFolderId();"], [901, "\t\t\t\t} else {"], [902, "\t\t\t\t\treturn UPLOADERROR;"], [903, "\t\t\t\t}"], [904, "\t\t\t}"], [905, "\t\t}"], [906, "\t\tString fileName = getFileNameFormPath(originalFileName);"], [907, "\t\t// \u68c0\u67e5\u662f\u5426\u5b58\u5728\u540c\u540d\u6587\u4ef6\u3002\u5b58\u5728\u5219\u76f4\u63a5\u5931\u8d25\uff08\u786e\u4fdd\u4e0a\u4f20\u7684\u6587\u4ef6\u5939\u5185\u5bb9\u7684\u539f\u59cb\u6027\uff09"], [908, "\t\tfinal List<Node> files = this.fm.queryByParentFolderId(folderId);"], [909, "\t\tif (files.parallelStream().anyMatch((e) -> e.getFileName().equals(fileName))) {"], [910, "\t\t\treturn UPLOADERROR;"], [911, "\t\t}"], [912, "\t\t// \u5c06\u6587\u4ef6\u5b58\u5165\u8282\u70b9\u5e76\u83b7\u53d6\u5176\u5b58\u5165\u751f\u6210\u8def\u5f84\uff0c\u578b\u5982\u201cUUID.block\u201d\u5f62\u5f0f\u3002"], [913, "\t\tfinal String path = this.fbu.saveToFileBlocks(file);"], [914, "\t\tif (path.equals(\"ERROR\")) {"], [915, "\t\t\treturn UPLOADERROR;"], [916, "\t\t}"], [917, "\t\tfinal String fsize = this.fbu.getFileSize(file);"], [918, "\t\tfinal Node f2 = new Node();"], [919, "\t\tf2.setFileId(UUID.randomUUID().toString());"], [920, "\t\tif (account != null) {"], [921, "\t\t\tf2.setFileCreator(account);"], [922, "\t\t} else {"], [923, "\t\t\tf2.setFileCreator(\"\\u533f\\u540d\\u7528\\u6237\");"], [924, "\t\t}"], [925, "\t\tf2.setFileCreationDate(ServerTimeUtil.accurateToDay());"], [926, "\t\tf2.setFileName(fileName);"], [927, "\t\tf2.setFileParentFolder(folderId);"], [928, "\t\tf2.setFilePath(path);"], [929, "\t\tf2.setFileSize(fsize);"], [930, "\t\tint i = 0;"], [931, "\t\t// \u5c3d\u53ef\u80fd\u907f\u514dUUID\u91cd\u590d\u7684\u60c5\u51b5\u53d1\u751f\uff0c\u91cd\u8bd510\u6b21"], [932, "\t\twhile (true) {"], [933, "\t\t\ttry {"], [934, "\t\t\t\tif (this.fm.insert(f2) > 0) {"], [935, "\t\t\t\t\tthis.lu.writeUploadFileEvent(f2, account);"], [936, "\t\t\t\t\treturn UPLOADSUCCESS;"], [937, "\t\t\t\t}"], [938, "\t\t\t\tbreak;"], [939, "\t\t\t} catch (Exception e) {"], [940, "\t\t\t\tf2.setFileId(UUID.randomUUID().toString());"], [941, "\t\t\t\ti++;"], [942, "\t\t\t}"], [943, "\t\t\tif (i >= 10) {"], [944, "\t\t\t\tbreak;"], [945, "\t\t\t}"], [946, "\t\t}"], [947, "\t\treturn UPLOADERROR;"], [948, "\t}"]], "deleted": [[823, "\t\tfor (String pName : paths) {"], [824, "\t\t\ttry {"], [825, "\t\t\t\tFolder target = flm.queryByParentId(folderId).parallelStream()"], [826, "\t\t\t\t\t\t.filter((e) -> e.getFolderName().equals(pName)).findAny().get();"], [827, "\t\t\t\tif (ConfigureReader.instance().accessFolder(target, account)) {"], [828, "\t\t\t\t\tfolderId = target.getFolderId();// \u5411\u4e0b\u8fed\u4ee3\u76f4\u81f3\u5c06\u7236\u8def\u5f84\u5168\u90e8\u8fed\u4ee3\u5b8c\u6bd5\u5e76\u627e\u5230\u6700\u7ec8\u8def\u5f84"], [829, "\t\t\t\t} else {"], [830, "\t\t\t\t\tsynchronized (pathsKeys) {"], [831, "\t\t\t\t\t\tpathsKeys.remove(pathskey);//\u89e3\u9664\u5b89\u5168\u9501\uff0c\u4fbf\u4e8e\u4e0b\u4e00\u6b21\u4e0a\u4f20"], [832, "\t\t\t\t\t}"], [833, "\t\t\t\t\treturn UPLOADERROR;"], [834, "\t\t\t\t}"], [835, "\t\t\t} catch (NoSuchElementException e) {"], [836, "\t\t\t\tFolder newFolder = fu.createNewFolder(flm.queryById(folderId), account, pName, folderConstraint);"], [837, "\t\t\t\tif (newFolder != null) {"], [838, "\t\t\t\t\tfolderId = newFolder.getFolderId();"], [839, "\t\t\t\t} else {"], [840, "\t\t\t\t\tsynchronized (pathsKeys) {"], [841, "\t\t\t\t\t\tpathsKeys.remove(pathskey);//\u89e3\u9664\u5b89\u5168\u9501\uff0c\u4fbf\u4e8e\u4e0b\u4e00\u6b21\u4e0a\u4f20"], [842, "\t\t\t\t\t}"], [843, "\t\t\t\t\treturn UPLOADERROR;"], [844, "\t\t\t\t}"], [845, "\t\t\t}"], [846, "\t\t}"], [847, "\t\tString fileName = getFileNameFormPath(originalFileName);"], [848, "\t\t// \u68c0\u67e5\u662f\u5426\u5b58\u5728\u540c\u540d\u6587\u4ef6\u3002\u5b58\u5728\u5219\u76f4\u63a5\u5931\u8d25\uff08\u786e\u4fdd\u4e0a\u4f20\u7684\u6587\u4ef6\u5939\u5185\u5bb9\u7684\u539f\u59cb\u6027\uff09"], [849, "\t\tfinal List<Node> files = this.fm.queryByParentFolderId(folderId);"], [850, "\t\tif (files.parallelStream().anyMatch((e) -> e.getFileName().equals(fileName))) {"], [851, "\t\t\tsynchronized (pathsKeys) {"], [852, "\t\t\t\tpathsKeys.remove(pathskey);//\u89e3\u9664\u5b89\u5168\u9501\uff0c\u4fbf\u4e8e\u4e0b\u4e00\u6b21\u4e0a\u4f20"], [853, "\t\t\t}"], [854, "\t\t\treturn UPLOADERROR;"], [855, "\t\t}"], [856, "\t\t// \u5c06\u6587\u4ef6\u5b58\u5165\u8282\u70b9\u5e76\u83b7\u53d6\u5176\u5b58\u5165\u751f\u6210\u8def\u5f84\uff0c\u578b\u5982\u201cUUID.block\u201d\u5f62\u5f0f\u3002"], [857, "\t\tfinal String path = this.fbu.saveToFileBlocks(file);"], [858, "\t\tif (path.equals(\"ERROR\")) {"], [859, "\t\t\tsynchronized (pathsKeys) {"], [860, "\t\t\t\tpathsKeys.remove(pathskey);//\u89e3\u9664\u5b89\u5168\u9501\uff0c\u4fbf\u4e8e\u4e0b\u4e00\u6b21\u4e0a\u4f20"], [861, "\t\t\t}"], [862, "\t\t\treturn UPLOADERROR;"], [863, "\t\t}"], [864, "\t\tfinal String fsize = this.fbu.getFileSize(file);"], [865, "\t\tfinal Node f2 = new Node();"], [866, "\t\tf2.setFileId(UUID.randomUUID().toString());"], [867, "\t\tif (account != null) {"], [868, "\t\t\tf2.setFileCreator(account);"], [869, "\t\t} else {"], [870, "\t\t\tf2.setFileCreator(\"\\u533f\\u540d\\u7528\\u6237\");"], [871, "\t\t}"], [872, "\t\tf2.setFileCreationDate(ServerTimeUtil.accurateToDay());"], [873, "\t\tf2.setFileName(fileName);"], [874, "\t\tf2.setFileParentFolder(folderId);"], [875, "\t\tf2.setFilePath(path);"], [876, "\t\tf2.setFileSize(fsize);"], [877, "\t\tint i = 0;"], [878, "\t\t// \u5c3d\u53ef\u80fd\u907f\u514dUUID\u91cd\u590d\u7684\u60c5\u51b5\u53d1\u751f\uff0c\u91cd\u8bd510\u6b21"], [879, "\t\twhile (true) {"], [880, "\t\t\ttry {"], [881, "\t\t\t\tif (this.fm.insert(f2) > 0) {"], [882, "\t\t\t\t\tthis.lu.writeUploadFileEvent(f2, account);"], [883, "\t\t\t\t\tsynchronized (pathsKeys) {"], [884, "\t\t\t\t\t\tpathsKeys.remove(pathskey);//\u89e3\u9664\u5b89\u5168\u9501\uff0c\u4fbf\u4e8e\u4e0b\u4e00\u6b21\u4e0a\u4f20"], [885, "\t\t\t\t\t}"], [886, "\t\t\t\t\treturn UPLOADSUCCESS;"], [887, "\t\t\t\t}"], [888, "\t\t\t\tbreak;"], [889, "\t\t\t} catch (Exception e) {"], [890, "\t\t\t\tf2.setFileId(UUID.randomUUID().toString());"], [891, "\t\t\t\ti++;"], [892, "\t\t\t}"], [893, "\t\t\tif (i >= 10) {"], [894, "\t\t\t\tbreak;"], [895, "\t\t\t}"], [896, "\t\t}"], [900, "\t\treturn UPLOADERROR;"]]}, "num_lines_added": 65, "num_lines_removed": 75}