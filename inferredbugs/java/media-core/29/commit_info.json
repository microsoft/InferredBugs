{"hash": "f17ca12e6235e7b7638ec30a20290716ee4a40d0", "message": "#462 Added basic support for session renegotiation. Works well with jitsi hold-unhold feature.", "file_num_lines": 357, "diff_parsed": {"added": [[185, "                    throw new MgcpConnectionException(\"Cannot open connection \" + this.getHexIdentifier() + \" because state is \" + this.state.name());"], [191, "    @Override"], [192, "    public String renegotiate(String sdp) throws MgcpConnectionException {"], [193, "        synchronized (this.stateLock) {"], [194, "            switch (this.state) {"], [195, "                case OPEN:"], [196, "                    // Parse remote SDP"], [197, "                    try {"], [198, "                        this.remoteSdp = SessionDescriptionParser.parse(sdp);"], [199, "                    } catch (SdpException e) {"], [200, "                        throw new MgcpConnectionException(e.getMessage(), e);"], [201, "                    }"], [202, ""], [203, "                    // Re-negotiate open session"], [204, "                    updateConnection();"], [205, ""], [206, "                    if(log.isDebugEnabled()) {"], [207, "                        log.debug(\"Connection \" + getHexIdentifier() + \" state is \" + this.state.name());"], [208, "                    }"], [209, ""], [210, "                    // Submit timer"], [211, "                    if (this.timeout > 0) {"], [212, "                        expireIn(this.timeout);"], [213, "                    }"], [214, "                    break;"], [215, ""], [216, "                default:"], [217, "                    throw new MgcpConnectionException(\"Cannot renegotiate connection \" + this.getHexIdentifier() + \" because state is \" + this.state.name());"], [218, "            }"], [219, "        }"], [220, "        return this.localSdp.toString();"], [221, "    }"], [222, ""], [223, "    private void updateConnection() throws MgcpConnectionException {"], [224, "        // Connect audio channel to remote peer"], [225, "        try {"], [226, "            MediaDescriptionField remoteAudio = this.remoteSdp.getMediaDescription(\"audio\");"], [227, "            updateAudioChannel(remoteAudio);"], [228, "        } catch (IOException e) {"], [229, "            throw new MgcpConnectionException(e.getMessage(), e);"], [230, "        }"], [231, ""], [232, "        // Generate SDP answer"], [233, "        this.localSdp = SdpFactory.buildSdp(false, this.localAddress, this.externalAddress, this.audioChannel);"], [234, ""], [235, "        // Reject video stream (not supported)"], [236, "        MediaDescriptionField remoteVideo = this.remoteSdp.getMediaDescription(\"video\");"], [237, "        if (remoteVideo != null) {"], [238, "            SdpFactory.rejectMediaField(this.localSdp, remoteVideo);"], [239, "        }"], [240, ""], [241, "        // Reject data stream (not supported)"], [242, "        MediaDescriptionField remoteApplication = this.remoteSdp.getMediaDescription(\"application\");"], [243, "        if (remoteApplication != null) {"], [244, "            SdpFactory.rejectMediaField(this.localSdp, remoteApplication);"], [245, "        }"], [246, "    }"], [247, ""], [248, "    private void updateAudioChannel(MediaDescriptionField remoteAudio) throws IOException {"], [249, "        // Negotiate audio codecs"], [250, "        this.audioChannel.negotiateFormats(remoteAudio);"], [251, "        if (!this.audioChannel.containsNegotiatedFormats()) {"], [252, "            throw new IOException(\"Audio codecs were not supported\");"], [253, "        }"], [254, ""], [255, "        boolean enableIce = remoteAudio.containsIce();"], [256, "        if (enableIce) {"], [257, "            // Enable ICE. Wait for ICE handshake to finish before connecting RTP/RTCP channels"], [258, "            this.audioChannel.enableICE(this.externalAddress, remoteAudio.isRtcpMux());"], [259, "        } else {"], [260, "            String remoteAddr = remoteAudio.getConnection().getAddress();"], [261, "            this.audioChannel.connectRtp(remoteAddr, remoteAudio.getPort());"], [262, "            this.audioChannel.connectRtcp(remoteAddr, remoteAudio.getRtcpPort());"], [263, "        }"], [264, "    }"], [265, ""], [278, ""]], "deleted": [[185, "                    throw new MgcpConnectionException("], [186, "                            \"Cannot open connection \" + this.getHexIdentifier() + \" because state is \" + this.state.name());"], [204, ""]]}, "num_lines_added": 77, "num_lines_removed": 3}