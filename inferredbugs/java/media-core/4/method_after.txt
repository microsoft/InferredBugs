 public void harvest(IceMediaStream mediaStream, PortManager portManager, Selector selector) throws HarvestException, NoCandidatesGatheredException {
		// Ask each harvester to gather candidates for the media stream
		// HOST candidates take precedence and are mandatory
		CandidateHarvester hostHarvester = harvesters.get(CandidateType.HOST);
		if (hostHarvester != null) {
			hostHarvester.harvest(portManager, mediaStream, selector);
		} else {
			throw new HarvestException("No HOST harvester registered!");
		}
		// Then comes the SRFLX, which depends on HOST candidates
		CandidateHarvester srflxHarvester = harvesters.get(CandidateType.SRFLX);
		if (srflxHarvester != null) {
			srflxHarvester.harvest(portManager, mediaStream, selector);
		}
		// RELAY candidates come last
		CandidateHarvester relayHarvester = harvesters.get(CandidateType.RELAY);
		if (relayHarvester != null) {
			relayHarvester.harvest(portManager, mediaStream, selector);
		}

		// Verify at least one candidate was gathered
		if (!mediaStream.hasLocalRtpCandidates()) {
			throw new NoCandidatesGatheredException("No RTP candidates were gathered for " + mediaStream.getName() + " stream");
		}

		// After harvesting all possible candidates, ask the media stream to
		// select its default local candidates
		mediaStream.getRtpComponent().selectDefaultLocalCandidate();
		if (mediaStream.supportsRtcp() && !mediaStream.isRtcpMux()) {
			mediaStream.getRtcpComponent().selectDefaultLocalCandidate();
		}
	}