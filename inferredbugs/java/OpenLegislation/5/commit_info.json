{"hash": "4a4589ab75912669a1253e4ae5ef7df609ea8428", "message": "minor changes to views, parsers and serializations, adjustments to searchservlet", "file_num_lines": 554, "diff_parsed": {"added": [[65, ""], [73, "\t\t\t\tir.writeBills(new ArrayList<Bill>(Arrays.asList((Bill)ir.loadObject(p1, Bill.class))), false);"], [165, "\t\tif (file.isDirectory())\t{"], [213, ""], [321, "//\t\t\tif this returns true bill is not active"], [357, "\t\t\tsearchEngine.indexSenateObjects("], [358, "\t\t\t\t\tnew ArrayList<ILuceneObject>("], [359, "\t\t\t\t\t\tArrays.asList(obj)),"], [360, "\t\t\t\t\t\tnew LuceneSerializer[]{"], [361, "\t\t\t\t\t\t\tnew XmlSerializer(),"], [362, "\t\t\t\t\t\t\tnew JsonSerializer()});"], [584, "\t\t\t\t\tgenerateXml(files[i].getAbsolutePath());"]], "deleted": [[34, "import java.util.StringTokenizer;"], [66, ""], [74, "\t\t\t\tir.indexSenateObject((Bill)ir.loadObject(p1, Bill.class));"], [166, "\t\tif (file.isDirectory())\t{"], [167, ""], [168, ""], [323, "\t\t\t//if this returns true bill is not active"], [359, "\t\t\t/*"], [360, "\t\t\t * fullText for bills must be saved and reapplied after processing.. on long processes"], [361, "\t\t\t * where many SOBIs are processed bills stay in memory, so if fulltext is reprocessed"], [362, "\t\t\t * the next update will see the new text and not be able to parse"], [363, "\t\t\t * it properly (due to line numbers)"], [364, "\t\t\t */"], [365, "\t\t\tif(obj instanceof Bill"], [366, "\t\t\t\t\t&& ((Bill)obj).getFulltext() != null"], [367, "\t\t\t\t\t&& !((Bill)obj).getFulltext().equals(\"\")) {"], [368, ""], [369, "\t\t\t\tStringBuffer fullText = new StringBuffer(((Bill)obj).getFulltext());"], [370, "\t\t\t\t((Bill)obj).setFulltext(formatBillText(((Bill)obj).getFulltext()));"], [371, ""], [372, "\t\t\t\tsearchEngine.indexSenateObjects("], [373, "\t\t\t\t\t\tnew ArrayList<ILuceneObject>("], [374, "\t\t\t\t\t\t\tArrays.asList(obj)),"], [375, "\t\t\t\t\t\t\tnew LuceneSerializer[]{"], [376, "\t\t\t\t\t\t\t\tnew XmlSerializer(),"], [377, "\t\t\t\t\t\t\t\tnew JsonSerializer()});"], [378, ""], [379, "\t\t\t\t((Bill)obj).setFulltext(fullText.toString());"], [380, "\t\t\t\tfullText = null;"], [381, "\t\t\t}"], [382, "\t\t\telse {"], [383, "\t\t\t\tsearchEngine.indexSenateObjects("], [384, "\t\t\t\t\t\tnew ArrayList<ILuceneObject>("], [385, "\t\t\t\t\t\t\tArrays.asList(obj)),"], [386, "\t\t\t\t\t\t\tnew LuceneSerializer[]{"], [387, "\t\t\t\t\t\t\t\tnew XmlSerializer(),"], [388, "\t\t\t\t\t\t\t\tnew JsonSerializer()});"], [389, "\t\t\t}"], [452, "\tpublic String formatBillText(String text) {"], [453, "\t\tStringBuffer ret = new StringBuffer(\"\");"], [454, "\t\tStringTokenizer st = new StringTokenizer (text,\"\\n\");"], [455, ""], [456, "\t\tString line = null;"], [457, ""], [458, "\t\twhile(st.hasMoreTokens()) {"], [459, "\t\t\tline = st.nextToken();"], [460, "\t\t\tif(line.matches(\"^ ?T\\\\d{5}\\\\:(\\\\s{3,4}\\\\d{1,2})?.+?\")) {"], [461, "\t\t\t\tret.append(line.substring(13) + \"\\n\");"], [462, "\t\t\t}"], [463, "\t\t\telse if(line.matches(\"^ ?T\\\\d{5}\\\\:\")) {"], [464, "\t\t\t\tret.append(line.substring(7) + \"\\n\");"], [465, "\t\t\t}"], [466, "\t\t\telse if(line.matches(\"^ ?R\\\\d{5}\\\\:.*?\")) {"], [467, "\t\t\t\tret.append(line.substring(7) + \"\\n\");"], [468, "\t\t\t}"], [469, "\t\t\telse {"], [470, "\t\t\t\tret.append(line + \"\\n\");"], [471, "\t\t\t}"], [472, "\t\t}"], [473, "\t\treturn ret.toString();"], [474, "\t}"], [475, ""], [635, "\t\t\t\t\thandlePath(files[i].getAbsolutePath());"]]}, "num_lines_added": 12, "num_lines_removed": 63}