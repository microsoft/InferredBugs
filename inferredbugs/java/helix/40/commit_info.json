{"hash": "8ba068e7b78aedf4743f2da57670384534d1d4f8", "message": "Allow user to enable persisting preference list and best possible state map into IdealState in full-auto mode.", "file_num_lines": 109, "diff_parsed": {"added": [[22, "import java.util.HashSet;"], [25, "import java.util.Set;"], [49, "    if (!clusterConfig.isPersistBestPossibleAssignment()) {"], [50, "      return;"], [51, "    }"], [53, "    BestPossibleStateOutput bestPossibleAssignment ="], [54, "        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());"], [55, ""], [56, "    HelixManager helixManager = event.getAttribute(\"helixmanager\");"], [57, "    HelixDataAccessor accessor = helixManager.getHelixDataAccessor();"], [58, "    PropertyKey.Builder keyBuilder = accessor.keyBuilder();"], [59, "    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());"], [60, ""], [61, "    for (String resourceId : bestPossibleAssignment.resourceSet()) {"], [62, "      Resource resource = resourceMap.get(resourceId);"], [63, "      if (resource != null) {"], [64, "        final IdealState idealState = cache.getIdealState(resourceId);"], [65, "        if (idealState == null) {"], [66, "          LOG.warn(\"IdealState not found for resource \" + resourceId);"], [67, "          continue;"], [68, "        }"], [69, "        IdealState.RebalanceMode mode = idealState.getRebalanceMode();"], [70, "        if (!mode.equals(IdealState.RebalanceMode.SEMI_AUTO) && !mode"], [71, "            .equals(IdealState.RebalanceMode.FULL_AUTO)) {"], [72, "          // do not persist assignment for resource in neither semi or full auto."], [73, "          continue;"], [74, "        }"], [75, ""], [76, "        boolean needPersist = false;"], [77, "        if (mode.equals(IdealState.RebalanceMode.FULL_AUTO)) {"], [78, "          // persist preference list in ful-auto mode."], [79, "          Map<String, List<String>> newLists ="], [80, "              bestPossibleAssignment.getPreferenceLists(resourceId);"], [81, "          if (newLists != null && hasPreferenceListChanged(newLists, idealState)) {"], [82, "            idealState.setPreferenceLists(newLists);"], [83, "            needPersist = true;"], [85, "        }"], [86, ""], [87, "        Map<Partition, Map<String, String>> bestPossibleAssignements ="], [88, "            bestPossibleAssignment.getResourceMap(resourceId);"], [89, ""], [90, "        if (bestPossibleAssignements != null && hasInstanceMapChanged(bestPossibleAssignements,"], [91, "            idealState)) {"], [92, "          for (Partition partition : bestPossibleAssignements.keySet()) {"], [93, "            Map<String, String> instanceMap = bestPossibleAssignements.get(partition);"], [94, "            idealState.setInstanceStateMap(partition.getPartitionName(), instanceMap);"], [96, "          needPersist = true;"], [97, "        }"], [98, ""], [99, "        if (needPersist) {"], [100, "          accessor.setProperty(keyBuilder.idealStates(resourceId), idealState);"], [110, "   * has the preference list changed from the one persisted in current IdealState"], [112, "  private boolean hasPreferenceListChanged(Map<String, List<String>> newLists,"], [113, "      IdealState idealState) {"], [114, "    Map<String, List<String>> existLists = idealState.getPreferenceLists();"], [115, ""], [116, "    Set<String> partitions = new HashSet<String>(newLists.keySet());"], [117, "    partitions.addAll(existLists.keySet());"], [118, ""], [119, "    for (String partition : partitions) {"], [120, "      List<String> assignedInstances = newLists.get(partition);"], [121, "      List<String> existingInstances = existLists.get(partition);"], [122, "      if (assignedInstances == null && existingInstances == null) {"], [123, "        continue;"], [124, "      }"], [125, "      if (assignedInstances == null || existingInstances == null || !assignedInstances"], [126, "          .equals(existingInstances)) {"], [127, "        return true;"], [128, "      }"], [131, "    return false;"], [132, "  }"], [134, "  private boolean hasInstanceMapChanged(Map<Partition, Map<String, String>> newAssiments,"], [135, "      IdealState idealState) {"], [136, "    Set<Partition> partitions = new HashSet<Partition>(newAssiments.keySet());"], [137, "    for (String p : idealState.getPartitionSet()) {"], [138, "      partitions.add(new Partition(p));"], [139, "    }"], [141, "    for (Partition partition : partitions) {"], [142, "      Map<String, String> instanceMap = newAssiments.get(partition);"], [143, "      Map<String, String> existInstanceMap ="], [144, "          idealState.getInstanceStateMap(partition.getPartitionName());"], [145, "      if (instanceMap == null && existInstanceMap == null) {"], [146, "        continue;"], [148, "      if (instanceMap == null || existInstanceMap == null || !instanceMap"], [149, "          .equals(existInstanceMap)) {"], [150, "        return true;"], [154, "    return false;"]], "deleted": [[22, "import java.util.Collections;"], [23, "import java.util.HashMap;"], [26, ""], [31, "import org.apache.helix.model.BuiltInStateModelDefinitions;"], [34, "import org.apache.helix.model.MasterSlaveSMD;"], [52, "    if (clusterConfig.isPersistBestPossibleAssignment()) {"], [53, "      HelixManager helixManager = event.getAttribute(\"helixmanager\");"], [54, "      HelixDataAccessor accessor = helixManager.getHelixDataAccessor();"], [55, "      PropertyKey.Builder keyBuilder = accessor.keyBuilder();"], [56, "      BestPossibleStateOutput bestPossibleAssignments ="], [57, "          event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.toString());"], [58, "      Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.toString());"], [59, ""], [60, "      for (String resourceId : bestPossibleAssignments.resourceSet()) {"], [61, "        Resource resource = resourceMap.get(resourceId);"], [62, "        if (resource != null) {"], [63, "          boolean changed = false;"], [64, "          Map<Partition, Map<String, String>> bestPossibleAssignment ="], [65, "              bestPossibleAssignments.getResourceMap(resourceId);"], [66, "          IdealState idealState = cache.getIdealState(resourceId);"], [67, "          if (idealState == null) {"], [68, "            LOG.warn(\"IdealState not found for resource \" + resourceId);"], [69, "            continue;"], [70, "          }"], [71, "          IdealState.RebalanceMode mode = idealState.getRebalanceMode();"], [72, "          if (!mode.equals(IdealState.RebalanceMode.SEMI_AUTO) && !mode"], [73, "              .equals(IdealState.RebalanceMode.FULL_AUTO)) {"], [74, "            // do not persist assignment for resource in neither semi or full auto."], [75, "            continue;"], [76, "          }"], [78, "          //TODO: temporary solution for Espresso/Dbus backcompatible, should remove this."], [79, "          Map<Partition, Map<String, String>> assignmentToPersist ="], [80, "              convertAssignmentPersisted(resource, idealState, bestPossibleAssignment);"], [81, ""], [82, "          for (Partition partition : resource.getPartitions()) {"], [83, "            Map<String, String> instanceMap = assignmentToPersist.get(partition);"], [84, "            Map<String, String> existInstanceMap ="], [85, "                idealState.getInstanceStateMap(partition.getPartitionName());"], [86, "            if (instanceMap == null && existInstanceMap == null) {"], [87, "              continue;"], [88, "            }"], [89, "            if (instanceMap == null || existInstanceMap == null || !instanceMap"], [90, "                .equals(existInstanceMap)) {"], [91, "              changed = true;"], [92, "              break;"], [93, "            }"], [95, "          if (changed) {"], [96, "            for (Partition partition : assignmentToPersist.keySet()) {"], [97, "              Map<String, String> instanceMap = assignmentToPersist.get(partition);"], [98, "              idealState.setInstanceStateMap(partition.getPartitionName(), instanceMap);"], [99, "            }"], [100, "            accessor.setProperty(keyBuilder.idealStates(resourceId), idealState);"], [111, "   * TODO: This is a temporary hacky for back-compatible support of Espresso and Databus,"], [112, "   * we should get rid of this conversion as soon as possible."], [113, "   * --- Lei, 2016/9/9."], [115, "  private Map<Partition, Map<String, String>> convertAssignmentPersisted(Resource resource,"], [116, "      IdealState idealState, Map<Partition, Map<String, String>> bestPossibleAssignment) {"], [117, "    String stateModelDef = idealState.getStateModelDefRef();"], [118, "    /** Only convert for MasterSlave resources */"], [119, "    if (!stateModelDef.equals(BuiltInStateModelDefinitions.MasterSlave.name())) {"], [120, "      return bestPossibleAssignment;"], [123, "    Map<Partition, Map<String, String>> assignmentToPersist ="], [124, "        new HashMap<Partition, Map<String, String>>();"], [125, ""], [126, "    for (Partition partition : resource.getPartitions()) {"], [127, "      Map<String, String> instanceMap = new HashMap<String, String>();"], [128, "      instanceMap.putAll(bestPossibleAssignment.get(partition));"], [130, "      List<String> preferenceList = idealState.getPreferenceList(partition.getPartitionName());"], [131, "      boolean hasMaster = false;"], [132, "      for (String ins : preferenceList) {"], [133, "        String state = instanceMap.get(ins);"], [134, "        if (state == null || (!state.equals(MasterSlaveSMD.States.SLAVE.name()) && !state"], [135, "            .equals(MasterSlaveSMD.States.MASTER.name()))) {"], [136, "          instanceMap.put(ins, MasterSlaveSMD.States.SLAVE.name());"], [137, "        }"], [139, "        if (state != null && state.equals(MasterSlaveSMD.States.MASTER.name())) {"], [140, "          hasMaster = true;"], [141, "        }"], [143, ""], [144, "      // if no master, just pick the first node in the preference list as the master."], [145, "      if (!hasMaster && preferenceList.size() > 0) {"], [146, "        instanceMap.put(preferenceList.get(0), MasterSlaveSMD.States.MASTER.name());"], [148, ""], [149, "      assignmentToPersist.put(partition, instanceMap);"], [152, "    return assignmentToPersist;"]]}, "num_lines_added": 87, "num_lines_removed": 85}