{"hash": "3deeeabaa988bf40c0ba953209dd6b26df984552", "message": "Fix the issue that resource MBean may not be cleaned up when the resource is dropped.\n\nIf a resource is not successfully created on any participant, and it is removed in this situation, the corresponding MBean maybe left over by the controller.\nThis fix will ensure all resource MBeans that are no longer related to any living resource to be removed.", "file_num_lines": 245, "diff_parsed": {"added": [[22, "import org.apache.helix.HelixDataAccessor;"], [23, "import org.apache.helix.HelixDefinedState;"], [24, "import org.apache.helix.HelixManager;"], [25, "import org.apache.helix.PropertyKey;"], [27, "import org.apache.helix.ZNRecord;"], [28, "import org.apache.helix.ZNRecordDelta;"], [35, "import org.apache.helix.model.ExternalView;"], [36, "import org.apache.helix.model.IdealState;"], [37, "import org.apache.helix.model.Message;"], [39, "import org.apache.helix.model.Partition;"], [40, "import org.apache.helix.model.Resource;"], [41, "import org.apache.helix.model.ResourceConfig;"], [42, "import org.apache.helix.model.StateModelDefinition;"], [43, "import org.apache.helix.model.StatusUpdate;"], [48, "import java.util.ArrayList;"], [49, "import java.util.HashMap;"], [50, "import java.util.HashSet;"], [51, "import java.util.Iterator;"], [52, "import java.util.LinkedList;"], [53, "import java.util.List;"], [54, "import java.util.Map;"], [55, "import java.util.Set;"], [56, "import java.util.TreeMap;"], [83, "    ClusterStatusMonitor clusterStatusMonitor ="], [84, "        event.getAttribute(AttributeName.clusterStatusMonitor.name());"], [87, "    Set<String> monitoringResources = new HashSet<>();"], [127, "          if (idealState != null // has ideal state"], [128, "              && (resourceConfig == null || !resourceConfig.isMonitoringDisabled()) // monitoring not disabled"], [129, "              && !idealState.getStateModelDefRef() // and not a job resource"], [130, "              .equalsIgnoreCase(DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {"], [131, "            StateModelDefinition stateModelDef ="], [132, "                cache.getStateModelDef(idealState.getStateModelDefRef());"], [133, "            clusterStatusMonitor"], [134, "                .setResourceStatus(view, cache.getIdealState(view.getResourceName()),"], [135, "                    stateModelDef);"], [136, "            clusterStatusMonitor"], [137, "                .updatePendingMessages(resource.getResourceName(), totalPendingMessageCount);"], [138, "            monitoringResources.add(resourceName);"], [166, "    // Keep MBeans for existing resources and unregister MBeans for dropped resources"], [167, "    if (clusterStatusMonitor != null) {"], [168, "      clusterStatusMonitor.retainResourceMonitor(monitoringResources);"], [169, "    }"], [170, ""], [171, "    List<String> externalViewsToRemove = new ArrayList<>();"], [189, "          externalViewsToRemove.add(resourceName);"], [207, "        externalViewsToRemove.add(resourceName);"], [210, "    cache.removeExternalViews(externalViewsToRemove);"]], "deleted": [[22, "import org.apache.helix.*;"], [30, "import org.apache.helix.model.*;"], [36, "import java.util.*;"], [103, "        ClusterStatusMonitor clusterStatusMonitor ="], [104, "            event.getAttribute(AttributeName.clusterStatusMonitor.name());"], [106, "          if (idealState != null && (resourceConfig == null || !resourceConfig"], [107, "              .isMonitoringDisabled())) {"], [108, "            if (!idealState.getStateModelDefRef()"], [109, "                .equalsIgnoreCase(DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {"], [110, "              StateModelDefinition stateModelDef ="], [111, "                  cache.getStateModelDef(idealState.getStateModelDefRef());"], [112, "              clusterStatusMonitor"], [113, "                  .setResourceStatus(view, cache.getIdealState(view.getResourceName()),"], [114, "                      stateModelDef);"], [115, "              clusterStatusMonitor"], [116, "                  .updatePendingMessages(resource.getResourceName(), totalPendingMessageCount);"], [117, "            }"], [118, "          } else {"], [119, "            // Drop the metrics if the resource is dropped, or the MonitorDisabled is changed to true."], [120, "            clusterStatusMonitor.unregisterResource(view.getResourceName());"], [148, "    List<String> externalviewsToRemove = new ArrayList<>();"], [166, "          externalviewsToRemove.add(resourceName);"], [184, "        externalviewsToRemove.add(resourceName);"], [187, "    cache.removeExternalViews(externalviewsToRemove);"]]}, "num_lines_added": 47, "num_lines_removed": 24}