{"hash": "2f39f381b0981503d7c204aabbeaa09153292e15", "message": "Emitting per resource rebalance status for possible calculation failure.\n\nThe status in MBean will be string for debug purposes only.\nThe resource rebalance state attribute will be in one of the following state:\n1. NORMAL\n2. BEST_POSSIBLE_STATE_CAL_FAILED: calculation failed or no possible allocation found.\n3. INTERMEDIATE_STATE_CAL_FAILED: Intermediate state calculation failed. (not include throttled case)\n4. UNKNOWN: the resource is not rebalanced or newly created.\n\nAdditional related changes:\n1. Fix a cluster level metric related bug to generate the right metrics data.\n2. Fix a resource monitoring bug that DISABLE_MONITORING is not working.", "file_num_lines": 293, "diff_parsed": {"added": [[46, "import org.apache.helix.monitoring.mbeans.ResourceMonitor;"], [111, "    ClusterStatusMonitor clusterStatusMonitor ="], [112, "        event.getAttribute(AttributeName.clusterStatusMonitor.name());"], [113, ""], [114, "    // Check whether the offline/disabled instance count in the cluster reaches the set limit,"], [115, "    // if yes, pause the rebalancer."], [116, "    boolean isValid = validateOfflineInstancesLimit(cache,"], [117, "        (HelixManager) event.getAttribute(AttributeName.helixmanager.name()));"], [131, ""], [141, "    updateRebalanceStatus(!isValid || !failureResources.isEmpty(), failureResources, helixManager,"], [142, "        cache, clusterStatusMonitor,"], [148, "  private void updateRebalanceStatus(final boolean hasFailure, final List<String> failedResources,"], [149, "      final HelixManager helixManager, final ClusterDataCache cache,"], [150, "      final ClusterStatusMonitor clusterStatusMonitor, final String errorMessage) {"], [155, "          if (hasFailure) {"], [156, "            /* TODO Enable this update when we resolve ZK server load issue. This will cause extra write to ZK."], [157, "            if (_statusUpdateUtil != null) {"], [158, "              _statusUpdateUtil"], [159, "                  .logError(StatusUpdateUtil.ErrorType.RebalanceResourceFailure, this.getClass(),"], [160, "                      errorMessage, helixManager);"], [161, "            }"], [162, "            */"], [163, "            LogUtil.logWarn(logger, _eventId, errorMessage);"], [167, "            clusterStatusMonitor.setResourceRebalanceStates(failedResources,"], [168, "                ResourceMonitor.RebalanceStatus.BEST_POSSIBLE_STATE_CAL_FAILED);"], [180, "  private boolean validateOfflineInstancesLimit(final ClusterDataCache cache,"], [181, "      final HelixManager manager) {"], [200, "        return false;"], [203, "    return true;"]], "deleted": [[78, "    // Check whether the offline/disabled instance count in the cluster reaches the set limit,"], [79, "    // if yes, pause the rebalancer."], [80, "    validateOfflineInstancesLimit(cache,"], [81, "        (HelixManager) event.getAttribute(AttributeName.helixmanager.name()), clusterStatusMonitor);"], [82, ""], [137, "    ClusterStatusMonitor clusterStatusMonitor ="], [138, "        event.getAttribute(AttributeName.clusterStatusMonitor.name());"], [139, "    updateRebalanceStatus(!failureResources.isEmpty(), helixManager, cache, clusterStatusMonitor,"], [145, "  private void updateRebalanceStatus(final boolean hasFailure, final HelixManager helixManager,"], [146, "      final ClusterDataCache cache, final ClusterStatusMonitor clusterStatusMonitor,"], [147, "      final String errorMessage) {"], [152, "          // TODO re-enable logging error after ticket HELIX-631 is resolved"], [153, "          /*"], [154, "          if (hasFailure && _statusUpdateUtil != null) {"], [155, "            _statusUpdateUtil"], [156, "                .logError(StatusUpdateUtil.ErrorType.RebalanceResourceFailure, this.getClass(),"], [157, "                    errorMessage, helixManager);"], [159, "          */"], [173, "  private void validateOfflineInstancesLimit(final ClusterDataCache cache,"], [174, "      final HelixManager manager, final ClusterStatusMonitor clusterStatusMonitor) {"], [193, "        if (!cache.isTaskCache()) {"], [194, "          updateRebalanceStatus(true, manager, cache, clusterStatusMonitor, errMsg);"], [195, "        }"]]}, "num_lines_added": 29, "num_lines_removed": 23}