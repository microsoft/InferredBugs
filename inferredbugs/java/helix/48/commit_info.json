{"hash": "bcda7fc0d3eaa216feaeaec3da01b89dca6c834f", "message": "Hot fix to periodical rebalance.", "file_num_lines": 498, "diff_parsed": {"added": [[149, "      //TODO: this is the temporary workaround"], [151, "      _cache.refresh(_manager.getHelixDataAccessor());"], [152, "      if (_cache.getLiveInstances() != null) {"], [153, "        NotificationContext changeContext = new NotificationContext(_manager);"], [154, "        changeContext.setType(NotificationContext.Type.CALLBACK);"], [155, "        checkLiveInstancesObservation(new ArrayList<>(_cache.getLiveInstances().values()),"], [156, "                changeContext);"], [157, "      }"], [158, ""], [185, "      _rebalanceTimer"], [186, "          .scheduleAtFixedRate(new RebalanceTask(manager), _timerPeriod, _timerPeriod);"], [299, "        // TODO: should be in the initization of controller."], [300, "        if (_cache != null) {"], [301, "          checkRebalancingTimer(manager, Collections.EMPTY_LIST, _cache.getClusterConfig());"], [302, "        }"], [422, "      if (period > 0 && minPeriod > period) {"], [555, "    Map<String, LiveInstance> curSessions = new HashMap<>();"], [561, "    // TODO: remove the synchronization here once we move this update into dataCache."], [562, "    synchronized (_lastSeenInstances) {"], [563, "      Map<String, LiveInstance> lastInstances = _lastSeenInstances.get();"], [564, "      Map<String, LiveInstance> lastSessions = _lastSeenSessions.get();"], [565, ""], [566, "      HelixManager manager = changeContext.getManager();"], [567, "      Builder keyBuilder = new Builder(manager.getClusterName());"], [568, "      if (lastSessions != null) {"], [569, "        for (String session : lastSessions.keySet()) {"], [570, "          if (!curSessions.containsKey(session)) {"], [571, "            // remove current-state listener for expired session"], [572, "            String instanceName = lastSessions.get(session).getInstanceName();"], [573, "            manager.removeListener(keyBuilder.currentStates(instanceName, session), this);"], [574, "          }"], [578, "      if (lastInstances != null) {"], [579, "        for (String instance : lastInstances.keySet()) {"], [580, "          if (!curInstances.containsKey(instance)) {"], [581, "            // remove message listener for disconnected instances"], [582, "            manager.removeListener(keyBuilder.messages(instance), this);"], [583, "          }"], [587, "      for (String session : curSessions.keySet()) {"], [588, "        if (lastSessions == null || !lastSessions.containsKey(session)) {"], [589, "          String instanceName = curSessions.get(session).getInstanceName();"], [590, "          try {"], [591, "            // add current-state listeners for new sessions"], [592, "            manager.addCurrentStateChangeListener(this, instanceName, session);"], [593, "            logger.info(manager.getInstanceName() + \" added current-state listener for instance: \""], [594, "                + instanceName + \", session: \" + session + \", listener: \" + this);"], [595, "          } catch (Exception e) {"], [596, "            logger.error(\"Fail to add current state listener for instance: \" + instanceName"], [597, "                + \" with session: \" + session, e);"], [598, "          }"], [602, "      for (String instance : curInstances.keySet()) {"], [603, "        if (lastInstances == null || !lastInstances.containsKey(instance)) {"], [604, "          try {"], [605, "            // add message listeners for new instances"], [606, "            manager.addMessageListener(this, instance);"], [607, "            logger.info(manager.getInstanceName() + \" added message listener for \" + instance"], [608, "                + \", listener: \" + this);"], [609, "          } catch (Exception e) {"], [610, "            logger.error(\"Fail to add message listener for instance: \" + instance, e);"], [611, "          }"], [615, "      // update last-seen"], [616, "      _lastSeenInstances.set(curInstances);"], [617, "      _lastSeenSessions.set(curSessions);"], [618, "    }"]], "deleted": [[93, "  volatile boolean init = false;"], [177, "      _rebalanceTimer.scheduleAtFixedRate(new RebalanceTask(manager), _timerPeriod, _timerPeriod);"], [409, "      if (period > 0 && minPeriod < period) {"], [528, "    List<IdealState> idealStates = Collections.emptyList();"], [529, "    if (_cache.getIdealStates() != null) {"], [530, "      idealStates = new ArrayList<>(_cache.getIdealStates().values());"], [531, "    }"], [532, "    checkRebalancingTimer(changeContext.getManager(), idealStates, _cache.getClusterConfig());"], [547, "    Map<String, LiveInstance> curSessions = new HashMap<String, LiveInstance>();"], [553, "    Map<String, LiveInstance> lastInstances = _lastSeenInstances.get();"], [554, "    Map<String, LiveInstance> lastSessions = _lastSeenSessions.get();"], [555, ""], [556, "    HelixManager manager = changeContext.getManager();"], [557, "    Builder keyBuilder = new Builder(manager.getClusterName());"], [558, "    if (lastSessions != null) {"], [559, "      for (String session : lastSessions.keySet()) {"], [560, "        if (!curSessions.containsKey(session)) {"], [561, "          // remove current-state listener for expired session"], [562, "          String instanceName = lastSessions.get(session).getInstanceName();"], [563, "          manager.removeListener(keyBuilder.currentStates(instanceName, session), this);"], [566, "    }"], [568, "    if (lastInstances != null) {"], [569, "      for (String instance : lastInstances.keySet()) {"], [570, "        if (!curInstances.containsKey(instance)) {"], [571, "          // remove message listener for disconnected instances"], [572, "          manager.removeListener(keyBuilder.messages(instance), this);"], [575, "    }"], [577, "    for (String session : curSessions.keySet()) {"], [578, "      if (lastSessions == null || !lastSessions.containsKey(session)) {"], [579, "        String instanceName = curSessions.get(session).getInstanceName();"], [580, "        try {"], [581, "          // add current-state listeners for new sessions"], [582, "          manager.addCurrentStateChangeListener(this, instanceName, session);"], [583, "          logger.info(manager.getInstanceName() + \" added current-state listener for instance: \""], [584, "              + instanceName + \", session: \" + session + \", listener: \" + this);"], [585, "        } catch (Exception e) {"], [586, "          logger.error(\"Fail to add current state listener for instance: \" + instanceName"], [587, "              + \" with session: \" + session, e);"], [590, "    }"], [592, "    for (String instance : curInstances.keySet()) {"], [593, "      if (lastInstances == null || !lastInstances.containsKey(instance)) {"], [594, "        try {"], [595, "          // add message listeners for new instances"], [596, "          manager.addMessageListener(this, instance);"], [597, "          logger.info(manager.getInstanceName() + \" added message listener for \" + instance"], [598, "              + \", listener: \" + this);"], [599, "        } catch (Exception e) {"], [600, "          logger.error(\"Fail to add message listener for instance: \" + instance, e);"], [603, "    }"], [604, ""], [605, "    // update last-seen"], [606, "    _lastSeenInstances.set(curInstances);"], [607, "    _lastSeenSessions.set(curSessions);"]]}, "num_lines_added": 63, "num_lines_removed": 53}