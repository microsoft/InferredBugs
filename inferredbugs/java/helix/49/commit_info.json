{"hash": "8017fa88c48708f08db0ed070f3acc7b3bcc2f87", "message": "Support cluster level state transition timeout configuration\n\nCurrently, Helix already supports state transition timeout feature. But it sets timeout by resource level. It is better to have a cluster level configuration that avoid redundant work for setting resource config one by one.", "file_num_lines": 190, "diff_parsed": {"added": [[29, "import org.apache.helix.ConfigAccessor;"], [44, "import org.apache.helix.model.ClusterConfig;"], [58, "import org.testng.annotations.AfterSuite;"], [64, "  private Map<String, SleepStateModelFactory> _factories;"], [65, "  private ConfigAccessor _configAccessor;"], [89, "    _configAccessor = new ConfigAccessor(_gZkClient);"], [91, "    String controllerName = CONTROLLER_PREFIX + \"_0\";"], [92, "    _controller ="], [93, "        new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);"], [94, "    _controller.syncStart();"], [95, ""], [96, "    boolean result ="], [97, "        ClusterStateVerifier"], [98, "            .verifyByZkCallback(new MasterNbInExtViewVerifier(ZK_ADDR, CLUSTER_NAME));"], [99, "    Assert.assertTrue(result);"], [157, "    _setupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);"], [158, "    _setupTool.getClusterManagementTool().enableResource(CLUSTER_NAME, TEST_DB, false);"], [159, "    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, 3);"], [160, ""], [161, "    // Set the timeout values"], [162, "    StateTransitionTimeoutConfig stateTransitionTimeoutConfig ="], [163, "        new StateTransitionTimeoutConfig(new ZNRecord(TEST_DB));"], [164, "    stateTransitionTimeoutConfig.setStateTransitionTimeout(\"SLAVE\", \"MASTER\", 300);"], [165, "    ResourceConfig resourceConfig = new ResourceConfig.Builder(TEST_DB)"], [166, "        .setStateTransitionTimeoutConfig(stateTransitionTimeoutConfig)"], [167, "        .setRebalanceConfig(new RebalanceConfig(new ZNRecord(TEST_DB)))"], [168, "        .setNumPartitions(_PARTITIONS).setHelixEnabled(false).build();"], [169, "    _configAccessor.setResourceConfig(CLUSTER_NAME, TEST_DB, resourceConfig);"], [170, "    setParticipants(TEST_DB);"], [173, "    _setupTool.getClusterManagementTool().enableResource(CLUSTER_NAME, TEST_DB, true);"], [179, "    verify(TEST_DB);"], [180, "  }"], [181, ""], [182, "  @Test"], [183, "  public void testStateTransitionTimeoutByClusterLevel() throws InterruptedException {"], [184, "    _setupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB + 1, _PARTITIONS, STATE_MODEL);"], [185, "    _setupTool.getClusterManagementTool().enableResource(CLUSTER_NAME, TEST_DB + 1, false);"], [186, "    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB  + 1, 3);"], [187, ""], [188, "    StateTransitionTimeoutConfig stateTransitionTimeoutConfig ="], [189, "        new StateTransitionTimeoutConfig(new ZNRecord(TEST_DB + 1));"], [190, "    stateTransitionTimeoutConfig.setStateTransitionTimeout(\"SLAVE\", \"MASTER\", 300);"], [191, "    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);"], [192, "    clusterConfig.setStateTransitionTimeoutConfig(stateTransitionTimeoutConfig);"], [193, "    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);"], [194, ""], [195, "    setParticipants(TEST_DB + 1);"], [196, ""], [197, "    _setupTool.getClusterManagementTool().enableResource(CLUSTER_NAME, TEST_DB + 1, true);"], [198, "    boolean result ="], [199, "        ClusterStateVerifier"], [200, "            .verifyByZkCallback(new MasterNbInExtViewVerifier(ZK_ADDR, CLUSTER_NAME));"], [201, "    Assert.assertTrue(result);"], [202, "    verify(TEST_DB + 1);"], [203, "  }"], [204, ""], [205, "  private void verify(String dbName) {"], [206, "    IdealState idealState ="], [207, "        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, dbName);"], [208, "    HelixDataAccessor accessor = _manager.getHelixDataAccessor();"], [209, "    ExternalView ev = accessor.getProperty(accessor.keyBuilder().externalView(dbName));"], [214, "      TimeOutStateModel model = _factories.get(idealMaster).getStateModel(dbName, p);"], [219, ""], [220, "  private void setParticipants(String dbName) throws InterruptedException {"], [221, "    _factories = new HashMap<>();"], [222, "    IdealState idealState ="], [223, "        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, dbName);"], [224, "    for (int i = 0; i < NODE_NR; i++) {"], [225, "      if (_participants[i] != null) {"], [226, "        _participants[i].syncStop();"], [227, "      }"], [228, "      Thread.sleep(1000);"], [229, "      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);"], [230, "      SleepStateModelFactory factory = new SleepStateModelFactory(1000);"], [231, "      _factories.put(instanceName, factory);"], [232, "      for (String p : idealState.getPartitionSet()) {"], [233, "        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {"], [234, "          factory.addPartition(p);"], [235, "        }"], [236, "      }"], [237, ""], [238, "      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);"], [239, "      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);"], [240, "      _participants[i].syncStart();"], [241, "    }"], [242, "  }"]], "deleted": [[33, "import org.apache.helix.PropertyKey;"], [34, "import org.apache.helix.PropertyKey.Builder;"], [77, "    _setupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);"], [83, "    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, 3);"], [84, ""], [85, "    // Set the timeout values"], [86, "    StateTransitionTimeoutConfig stateTransitionTimeoutConfig ="], [87, "        new StateTransitionTimeoutConfig(new ZNRecord(TEST_DB));"], [88, "    stateTransitionTimeoutConfig.setStateTransitionTimeout(\"SLAVE\", \"MASTER\", 300);"], [89, "    ResourceConfig resourceConfig = new ResourceConfig.Builder(TEST_DB)"], [90, "        .setStateTransitionTimeoutConfig(stateTransitionTimeoutConfig)"], [91, "        .setRebalanceConfig(new RebalanceConfig(new ZNRecord(TEST_DB)))"], [92, "        .setNumPartitions(_PARTITIONS).build();"], [97, "    PropertyKey.Builder keyBuilder = _manager.getHelixDataAccessor().keyBuilder();"], [98, "    _manager.getHelixDataAccessor().setProperty(keyBuilder.resourceConfig(TEST_DB), resourceConfig);"], [157, "    Map<String, SleepStateModelFactory> factories = new HashMap<String, SleepStateModelFactory>();"], [158, "    IdealState idealState ="], [159, "        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);"], [160, "    for (int i = 0; i < NODE_NR; i++) {"], [161, "      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);"], [162, "      SleepStateModelFactory factory = new SleepStateModelFactory(1000);"], [163, "      factories.put(instanceName, factory);"], [164, "      for (String p : idealState.getPartitionSet()) {"], [165, "        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {"], [166, "          factory.addPartition(p);"], [167, "        }"], [168, "      }"], [170, "      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);"], [171, "      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);"], [172, "      _participants[i].syncStart();"], [173, "    }"], [174, "    String controllerName = CONTROLLER_PREFIX + \"_0\";"], [175, "    _controller ="], [176, "        new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);"], [177, "    _controller.syncStart();"], [183, "    HelixDataAccessor accessor = _participants[0].getHelixDataAccessor();"], [185, "    Builder kb = accessor.keyBuilder();"], [186, "    ExternalView ev = accessor.getProperty(kb.externalView(TEST_DB));"], [191, "      TimeOutStateModel model = factories.get(idealMaster).getStateModel(TEST_DB, p);"]]}, "num_lines_added": 86, "num_lines_removed": 39}