{"hash": "32f5ed50b178d7ddbffb1d5eb8eeb370f5512dfc", "message": "Add cluster level config to enable periodical data sync and rebalance.", "file_num_lines": 491, "diff_parsed": {"added": [[32, "import org.apache.helix.ConfigAccessor;"], [64, "import org.apache.helix.model.ClusterConfig;"], [118, "  long _timerPeriod = Long.MAX_VALUE;"], [160, "      logger.info(\"Controller periodicalRebalance event triggered!\");"], [169, "  void startRebalancingTimer(long period, HelixManager manager) {"], [170, "    if (period != _timerPeriod) {"], [171, "      logger.info(\"Controller starting timer at period \" + period);"], [184, "   * Stops the rebalancing timer"], [242, "    _lastSeenInstances = new AtomicReference<>();"], [243, "    _lastSeenSessions = new AtomicReference<>();"], [244, "    _cache = new ClusterDataCache(_clusterName);"], [277, "      context = event.getAttribute(\"changeContext\");"], [394, "    logger.info("], [395, "        \"END: Generic GenericClusterController.onLiveInstanceChange() for cluster \" + _clusterName);"], [398, "  private void checkRebalancingTimer(HelixManager manager, List<IdealState> idealStates,"], [399, "      ClusterConfig clusterConfig) {"], [406, "    long minPeriod = Long.MAX_VALUE;"], [407, "    if (clusterConfig != null) {"], [408, "      long period = clusterConfig.getRebalanceTimePeriod();"], [409, "      if (period > 0 && minPeriod < period) {"], [410, "        minPeriod = period;"], [411, "      }"], [412, "    }"], [413, ""], [414, "    // TODO: resource level rebalance does not make sense, to remove it!"], [416, "      long period = idealState.getRebalanceTimerPeriod();"], [417, "      if (period > 0 && minPeriod > period) {"], [418, "        minPeriod = period;"], [421, ""], [422, "    if (minPeriod != Long.MAX_VALUE) {"], [423, "      startRebalancingTimer(minPeriod, manager);"], [424, "    }"], [429, "    logger.info("], [430, "        \"START: Generic GenericClusterController.onIdealStateChange() for cluster \" + _clusterName);"], [446, "      checkRebalancingTimer(changeContext.getManager(), idealStates, _cache.getClusterConfig());"], [475, "    logger.info("], [476, "        \"START: GenericClusterController.onInstanceConfigChange() for cluster \" + _clusterName);"], [528, "    List<IdealState> idealStates = Collections.emptyList();"], [529, "    if (_cache.getIdealStates() != null) {"], [530, "      idealStates = new ArrayList<>(_cache.getIdealStates().values());"], [531, "    }"], [532, "    checkRebalancingTimer(changeContext.getManager(), idealStates, _cache.getClusterConfig());"]], "deleted": [[116, "  int _timerPeriod = Integer.MAX_VALUE;"], [139, ""], [167, "  void startRebalancingTimer(int period, HelixManager manager) {"], [168, "    logger.info(\"Controller starting timer at period \" + period);"], [169, "    if (period < _timerPeriod) {"], [182, "   * Starts the rebalancing timer"], [240, "    _lastSeenInstances = new AtomicReference<Map<String, LiveInstance>>();"], [241, "    _lastSeenSessions = new AtomicReference<Map<String, LiveInstance>>();"], [246, "    _cache = new ClusterDataCache(_clusterName);"], [275, "      context = (NotificationContext) (event.getAttribute(\"changeContext\"));"], [392, "    logger.info(\"END: Generic GenericClusterController.onLiveInstanceChange() for cluster \" + _clusterName);"], [395, "  void checkRebalancingTimer(HelixManager manager, List<IdealState> idealStates) {"], [403, "      int period = idealState.getRebalanceTimerPeriod();"], [404, "      if (period > 0) {"], [405, "        startRebalancingTimer(period, manager);"], [412, "    logger.info(\"START: Generic GenericClusterController.onIdealStateChange() for cluster \" + _clusterName);"], [428, "      checkRebalancingTimer(changeContext.getManager(), idealStates);"], [457, "    logger.info(\"START: GenericClusterController.onInstanceConfigChange() for cluster \" + _clusterName);"]]}, "num_lines_added": 42, "num_lines_removed": 18}