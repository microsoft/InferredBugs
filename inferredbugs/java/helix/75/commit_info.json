{"hash": "8e12001f02a5488c5df1e8c6b691033df954a7ad", "message": "Apply quota constraint for saving computation time\n\nExisting task framework does not have the constraint of quota limitation. For example, if quota is full, Helix should not go through rest of workflows to assign as running of quota.", "file_num_lines": 245, "diff_parsed": {"added": [[29, "import org.apache.helix.task.AssignableInstanceManager;"], [86, "    // Original resource map contains workflows + jobs + other invalid resources"], [87, "    // After removing workflows + jobs, only leftover ones will go over old rebalance pipeline."], [228, "      String workflowType = getQuotaType(workflowConfig);"], [244, "    AssignableInstanceManager assignableInstanceManager = cache.getAssignableInstanceManager();"], [259, "            String quotaType = getQuotaType(cache.getWorkflowConfig(workflowId));"], [261, "            if (assignableInstanceManager.hasGlobalCapacity(quotaType)) {"], [262, "              _workflowDispatcher"], [263, "                  .assignWorkflow(workflowId, cache.getWorkflowConfig(workflowId), context,"], [264, "                      currentStateOutput, bestPossibleOutput, resourceMap);"], [265, "            } else {"], [266, "              LogUtil.logInfo(logger, _eventId, String.format("], [267, "                  \"Fail to schedule new jobs assignment for Workflow %s due to quota %s is full\","], [268, "                  workflowId, quotaType));"], [269, "            }"], [290, ""], [291, "  private String getQuotaType(WorkflowConfig workflowConfig) {"], [292, "    String workflowType = workflowConfig.getWorkflowType();"], [293, "    if (workflowType == null || !_quotaBasedWorkflowPQs.containsKey(workflowType)) {"], [294, "      workflowType = AssignableInstance.DEFAULT_QUOTA_TYPE;"], [295, "    }"], [296, "    return workflowType;"], [297, "  }"]], "deleted": [[225, "      String workflowType = workflowConfig.getWorkflowType();"], [226, "      if (workflowType == null || !_quotaBasedWorkflowPQs.containsKey(workflowType)) {"], [227, "        workflowType = AssignableInstance.DEFAULT_QUOTA_TYPE;"], [228, "      }"], [258, "            _workflowDispatcher"], [259, "                .assignWorkflow(workflowId, cache.getWorkflowConfig(workflowId), context,"], [260, "                    currentStateOutput, bestPossibleOutput, resourceMap);"]]}, "num_lines_added": 23, "num_lines_removed": 7}