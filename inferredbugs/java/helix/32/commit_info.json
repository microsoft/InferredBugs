{"hash": "b5cff39e578e6a8853d9221c95b22c01f582aabc", "message": "HELIX-129: ZKDumper should use byte[] instead of String to read/write file/zk", "file_num_lines": 173, "diff_parsed": {"added": [[22, "import java.io.BufferedInputStream;"], [24, "import java.io.FileInputStream;"], [25, "import java.io.FileOutputStream;"], [27, "import java.io.InputStream;"], [28, "import java.io.OutputStream;"], [40, "import org.apache.helix.manager.zk.ByteArraySerializer;"], [49, "public class ZKDumper {"], [54, "  // enable by default"], [55, "  private boolean removeSuffix = false;"], [57, "  public String getSuffix() {"], [61, "  public void setSuffix(String suffix) {"], [65, "  public boolean isRemoveSuffix() {"], [69, "  public void setRemoveSuffix(boolean removeSuffix) {"], [73, "  static {"], [76, ""], [84, ""], [85, "    Option u = OptionBuilder.withLongOpt(\"upload\").withDescription(\"Upload from File System to ZK\")"], [86, "        .create();"], [92, ""], [93, "    Option del = OptionBuilder.withLongOpt(\"delete\").withDescription(\"Delete given path from ZK\")"], [94, "        .create();"], [110, "  public ZKDumper(String zkAddress) {"], [113, "    ZkSerializer zkSerializer = new ByteArraySerializer();"], [115, "    filter = new FilenameFilter() {"], [118, "      public boolean accept(File dir, String name) {"], [124, "  public static void main(String[] args) throws Exception {"], [125, "    if (args == null || args.length == 0) {"], [141, "    if (download) {"], [142, "      if (cmd.hasOption(\"addSuffix\")) {"], [147, "    if (upload) {"], [148, "      if (cmd.hasOption(\"removeSuffix\")) {"], [153, "    if (del) {"], [158, "  private void delete(String zkPath) {"], [163, "  public void upload(String zkPath, String fsPath) throws Exception {"], [165, "    System.out.println(\"Uploading \" + file.getCanonicalPath() + \" to \" + zkPath);"], [168, "    if (removeSuffix && (index = file.getName().indexOf(\".\")) > -1) {"], [171, "    if (file.isDirectory()) {"], [174, "      if (children != null && children.length > 0) {"], [176, "        for (File child : children) {"], [179, "      } else {"], [182, "    } else {"], [183, "      byte[] result = new byte[(int) file.length()];"], [184, "      InputStream input = null;"], [185, "      try {"], [186, "        int totalBytesRead = 0;"], [187, "        input = new BufferedInputStream(new FileInputStream(file));"], [188, "        while (totalBytesRead < result.length) {"], [189, "          int bytesRemaining = result.length - totalBytesRead;"], [190, "          // input.read() returns -1, 0, or more :"], [191, "          int bytesRead = input.read(result, totalBytesRead, bytesRemaining);"], [192, "          if (bytesRead > 0) {"], [193, "            totalBytesRead = totalBytesRead + bytesRead;"], [196, "        /*"], [197, "         * the above style is a bit tricky: it places bytes into the 'result'"], [198, "         * array; 'result' is an output parameter; the while loop usually has a"], [199, "         * single iteration only."], [200, "         */"], [201, ""], [202, "        client.createPersistent(zkPath, result);"], [203, "      } finally {"], [204, "        input.close();"], [206, ""], [210, "  public void download(String zkPath, String fsPath) throws Exception {"], [211, ""], [213, "    if (children != null && children.size() > 0) {"], [215, "      for (String child : children) {"], [216, "        String childPath = zkPath.equals(\"/\") ? \"/\" + child : zkPath + \"/\" + child;"], [219, "    } else {"], [220, "      System.out"], [221, "          .println(\"Saving \" + zkPath + \" to \" + new File(fsPath + suffix).getCanonicalPath());"], [222, "      OutputStream out = new FileOutputStream(fsPath + suffix);"], [224, "      if (readData != null) {"], [225, "        out.write((byte[]) readData);"], [227, "      out.close();"]], "deleted": [[22, "import java.io.BufferedReader;"], [24, "import java.io.FileReader;"], [25, "import java.io.FileWriter;"], [27, "import java.io.IOException;"], [30, "import org.I0Itec.zkclient.exception.ZkMarshallingError;"], [42, ""], [49, "public class ZKDumper"], [50, "{"], [55, "  //enable by default"], [56, "  private boolean removeSuffix=false;"], [58, "  public String getSuffix()"], [59, "  {"], [63, "  public void setSuffix(String suffix)"], [64, "  {"], [68, "  public boolean isRemoveSuffix()"], [69, "  {"], [73, "  public void setRemoveSuffix(boolean removeSuffix)"], [74, "  {"], [78, "  static"], [79, "  {"], [82, ""], [90, ""], [91, "    Option u = OptionBuilder.withLongOpt(\"upload\")"], [92, "        .withDescription(\"Upload from File System to ZK\").create();"], [98, ""], [99, "    Option del = OptionBuilder.withLongOpt(\"delete\")"], [100, "        .withDescription(\"Delete given path from ZK\").create();"], [116, "  public ZKDumper(String zkAddress)"], [117, "  {"], [119, "    ZkSerializer zkSerializer = new ZkSerializer()"], [120, "    {"], [121, ""], [122, "      @Override"], [123, "      public byte[] serialize(Object arg0) throws ZkMarshallingError"], [124, "      {"], [125, "        return arg0.toString().getBytes();"], [126, "      }"], [128, "      @Override"], [129, "      public Object deserialize(byte[] arg0) throws ZkMarshallingError"], [130, "      {"], [131, "        return new String(arg0);"], [132, "      }"], [133, "    };"], [135, "    filter = new FilenameFilter()"], [136, "    {"], [139, "      public boolean accept(File dir, String name)"], [140, "      {"], [146, "  public static void main(String[] args) throws Exception"], [147, "  {"], [148, "    if (args == null || args.length == 0)"], [149, "    {"], [165, "    if (download)"], [166, "    {"], [167, "      if (cmd.hasOption(\"addSuffix\"))"], [168, "      {"], [173, "    if (upload)"], [174, "    {"], [175, "      if (cmd.hasOption(\"removeSuffix\"))"], [176, "      {"], [181, "    if (del)"], [182, "    {"], [187, "  private void delete(String zkPath)"], [188, "  {"], [193, "  public void upload(String zkPath, String fsPath) throws Exception"], [194, "  {"], [196, "    System.out"], [197, "        .println(\"Uploading \" + file.getCanonicalPath() + \" to \" + zkPath);"], [200, "    if (removeSuffix && (index = file.getName().indexOf(\".\")) > -1)"], [201, "    {"], [204, "    if (file.isDirectory())"], [205, "    {"], [208, "      if (children != null && children.length > 0)"], [209, "      {"], [211, "        for (File child : children)"], [212, "        {"], [215, "      } else"], [216, "      {"], [219, "    } else"], [220, "    {"], [221, "      BufferedReader bfr = null;"], [222, "      try"], [223, "      {"], [224, "        bfr = new BufferedReader(new FileReader(file));"], [225, "        StringBuilder sb = new StringBuilder();"], [226, "        String line;"], [227, "        String recordDelimiter = \"\";"], [228, "        while ((line = bfr.readLine()) != null)"], [229, "        {"], [230, "          sb.append(recordDelimiter).append(line);"], [231, "          recordDelimiter = \"\\n\";"], [232, "        }"], [233, "        client.createPersistent(zkPath, sb.toString());"], [234, "      } catch (Exception e)"], [235, "      {"], [236, "        throw e;"], [237, "      } finally"], [238, "      {"], [239, "        if (bfr != null)"], [240, "        {"], [241, "          try"], [242, "          {"], [243, "            bfr.close();"], [244, "          } catch (IOException e)"], [245, "          {"], [252, "  public void download(String zkPath, String fsPath) throws Exception"], [253, "  {"], [254, ""], [256, "    if (children != null && children.size() > 0)"], [257, "    {"], [259, "      for (String child : children)"], [260, "      {"], [261, "        String childPath = zkPath.equals(\"/\")? \"/\" + child : zkPath + \"/\" + child;"], [264, "    } else"], [265, "    {"], [266, "      System.out.println(\"Saving \" + zkPath + \" to \""], [267, "          + new File(fsPath + suffix).getCanonicalPath());"], [268, "      FileWriter fileWriter = new FileWriter(fsPath + suffix);"], [270, "      if (readData != null)"], [271, "      {"], [272, "        fileWriter.write((String) readData);"], [274, "      fileWriter.close();"]]}, "num_lines_added": 74, "num_lines_removed": 121}