{"hash": "1ad490ec72a4732417aa84925f39afc6ce43092e", "message": "Async purge job for task framework\n\nThere are some bottlenecks identified from previous profiling: https://iwww.corp.linkedin.com/wiki/cf/display/ENGS/Task+Framework+Performance+Profiling\nThis is the reason we need to rearchitect the task framework for Helix. For task framework performance improvement, we need to make purge job functionality asynchronized from the existing pipeline, which originally generates a heavy delay for pipeline execution.\n\nThis rb contains the change for moving purge jobs to be async executed. At same time, it brings the impact that job purge time may get a little bit delay because the asyc task submission.", "file_num_lines": 534, "diff_parsed": {"added": [[27, "import java.util.List;"], [39, "import org.apache.helix.controller.rebalancer.util.RebalanceScheduler;"], [653, "        if (jobConfig == null) {"], [654, "          LOG.error(String.format(\"Job %s exists in JobDAG but JobConfig is missing!\", job));"], [655, "          continue;"], [656, "        }"], [876, ""], [877, ""], [878, "  /**"], [879, "   * Clean up all jobs that are COMPLETED and passes its expiry time."], [880, "   * @param workflowConfig"], [881, "   * @param workflowContext"], [882, "   */"], [883, ""], [884, "  public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConfig,"], [885, "      WorkflowContext workflowContext, HelixManager manager,"], [886, "      RebalanceScheduler rebalanceScheduler) {"], [887, "    if (workflowContext == null) {"], [888, "      LOG.warn(String.format(\"Workflow %s context does not exist!\", workflow));"], [889, "      return;"], [890, "    }"], [891, "    long purgeInterval = workflowConfig.getJobPurgeInterval();"], [892, "    long currentTime = System.currentTimeMillis();"], [893, "    final Set<String> expiredJobs = Sets.newHashSet();"], [894, "    if (purgeInterval > 0 && workflowContext.getLastJobPurgeTime() + purgeInterval <= currentTime) {"], [895, "      expiredJobs.addAll(TaskUtil"], [896, "          .getExpiredJobs(manager.getHelixDataAccessor(), manager.getHelixPropertyStore(),"], [897, "              workflowConfig, workflowContext));"], [898, "      if (expiredJobs.isEmpty()) {"], [899, "        LOG.info(\"No job to purge for the queue \" + workflow);"], [900, "      } else {"], [901, "        LOG.info(\"Purge jobs \" + expiredJobs + \" from queue \" + workflow);"], [902, "        Set<String> failedJobRemovals = new HashSet<>();"], [903, "        for (String job : expiredJobs) {"], [904, "          if (!TaskUtil"], [905, "              .removeJob(manager.getHelixDataAccessor(), manager.getHelixPropertyStore(), job)) {"], [906, "            failedJobRemovals.add(job);"], [907, "            LOG.warn(\"Failed to clean up expired and completed jobs from workflow \" + workflow);"], [908, "          }"], [909, "          rebalanceScheduler.removeScheduledRebalance(job);"], [910, "        }"], [911, ""], [912, "        // If the job removal failed, make sure we do NOT prematurely delete it from DAG so that the"], [913, "        // removal will be tried again at next purge"], [914, "        expiredJobs.removeAll(failedJobRemovals);"], [915, ""], [916, "        if (!TaskUtil"], [917, "            .removeJobsFromDag(manager.getHelixDataAccessor(), workflow, expiredJobs, true)) {"], [918, "          LOG.warn("], [919, "              \"Error occurred while trying to remove jobs + \" + expiredJobs + \" from the workflow \""], [920, "                  + workflow);"], [921, "        }"], [922, ""], [923, "        if (expiredJobs.size() > 0) {"], [924, "          // Update workflow context will be in main pipeline not here. Otherwise, it will cause"], [925, "          // concurrent write issue. It is possible that jobs got purged but there is no event to"], [926, "          // trigger the pipeline to clean context."], [927, "          HelixDataAccessor accessor = manager.getHelixDataAccessor();"], [928, "          List<String> resourceConfigs ="], [929, "              accessor.getChildNames(accessor.keyBuilder().resourceConfigs());"], [930, "          if (resourceConfigs.size() > 0) {"], [931, "            RebalanceScheduler.invokeRebalanceForResourceConfig(manager.getHelixDataAccessor(),"], [932, "                resourceConfigs.get(0));"], [933, "          } else {"], [934, "            LOG.warn("], [935, "                \"No resource config to trigger rebalance for clean up contexts for\" + expiredJobs);"], [936, "          }"], [937, "        }"], [938, "      }"], [939, "    }"], [940, "    setNextJobPurgeTime(workflow, currentTime, purgeInterval, rebalanceScheduler, manager);"], [941, "  }"], [942, ""], [943, "  private static void setNextJobPurgeTime(String workflow, long currentTime, long purgeInterval,"], [944, "      RebalanceScheduler rebalanceScheduler, HelixManager manager) {"], [945, "    long nextPurgeTime = currentTime + purgeInterval;"], [946, "    long currentScheduledTime = rebalanceScheduler.getRebalanceTime(workflow);"], [947, "    if (currentScheduledTime == -1 || currentScheduledTime > nextPurgeTime) {"], [948, "      rebalanceScheduler.scheduleRebalance(manager, workflow, nextPurgeTime);"], [949, "    }"], [950, "  }"], [951, "}"]], "deleted": [[870, "}"]]}, "num_lines_added": 82, "num_lines_removed": 1}