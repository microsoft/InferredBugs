{"hash": "11cd868fc3a98faee4eaba429ce0a47e2fd29ddb", "message": "Move ST message to state validation from executing phase to scheduling phase. (#1362)\n\nMove ST message to state validation to scheduling phase.because of the following reasons:\r\nIt is a no-op operation, thus we should not create a thread to execute it.\r\nThe lag between scheduling and executing could add additional latency for controller and eventually application latency.", "file_num_lines": 374, "diff_parsed": {"added": [[49, "import org.apache.helix.zookeeper.datamodel.ZNRecord;"], [50, "import org.apache.helix.zookeeper.datamodel.ZNRecordBucketizer;"], [51, "import org.apache.helix.zookeeper.datamodel.ZNRecordDelta;"], [52, "import org.apache.helix.zookeeper.datamodel.ZNRecordDelta.MergeOperation;"], [72, "  public static class StaleMessageValidateResult {"], [73, "    public boolean isValid;"], [74, "    public Exception exception;"], [75, ""], [76, "    StaleMessageValidateResult(Exception exp) {"], [77, "      exception = exp;"], [78, "      isValid = exception == null;"], [79, "    }"], [80, "  }"], [81, ""], [125, "    StaleMessageValidateResult err = staleMessageValidator();"], [126, "    if (!err.isValid) {"], [127, "      _statusUpdateUtil"], [128, "          .logError(_message, HelixStateTransitionHandler.class, err.exception.getMessage(),"], [129, "              _manager);"], [130, "      logger.error(err.exception.getMessage());"], [131, "      throw err.exception;"], [452, "  }"], [453, ""], [454, "  // Verify the fromState and current state of the stateModel."], [455, "  public StaleMessageValidateResult staleMessageValidator() {"], [456, "    String fromState = _message.getFromState();"], [457, "    String toState = _message.getToState();"], [458, "    String partitionName = _message.getPartitionName();"], [460, "    // state in _currentStateDelta uses current state from state model. It has the"], [461, "    // most up-to-date. current state. In case currentState in stateModel is null,"], [462, "    // partition is in initial state and we using it as current state."], [463, "    // Defined in HelixStateMachineEngine."], [464, "    String state = _currentStateDelta.getState(partitionName);"], [465, ""], [466, "    Exception err = null;"], [467, "    if (toState.equalsIgnoreCase(state)) {"], [468, "      // To state equals current state, we can just ignore the message"], [469, "      err = new HelixDuplicatedStateTransitionException(String"], [470, "          .format(\"Partition %s current state is same as toState (%s->%s) from message.\","], [471, "              partitionName, fromState, toState));"], [472, "    } else if (fromState != null && !fromState.equals(\"*\") && !fromState.equalsIgnoreCase(state)) {"], [473, "      // If current state is neither toState nor fromState in message, there is a problem"], [474, "      err = new HelixStateMismatchException(String.format("], [475, "          \"Current state of stateModel does not match the fromState in Message, CurrentState: %s, Message: %s->%s, Partition: %s, from: %s, to: %s\","], [476, "          state, fromState, toState, partitionName, _message.getMsgSrc(), _message.getTgtName()));"], [477, "    }"], [478, "    return new StaleMessageValidateResult(err);"]], "deleted": [[41, "import org.apache.helix.zookeeper.datamodel.ZNRecord;"], [42, "import org.apache.helix.zookeeper.datamodel.ZNRecordBucketizer;"], [43, "import org.apache.helix.zookeeper.datamodel.ZNRecordDelta;"], [44, "import org.apache.helix.zookeeper.datamodel.ZNRecordDelta.MergeOperation;"], [110, ""], [112, "    String fromState = _message.getFromState();"], [113, "    String toState = _message.getToState();"], [114, ""], [115, "    // Verify the fromState and current state of the stateModel"], [116, "    // getting current state from state model will provide most up-to-date"], [117, "    // current state. In case current state is null, partition is in initial"], [118, "    // state and we are setting it in current state"], [119, "    String state = _stateModel.getCurrentState() != null ? _stateModel.getCurrentState()"], [120, "        : _currentStateDelta.getState(partitionName);"], [125, "    Exception err = null;"], [126, "    if (toState.equalsIgnoreCase(state)) {"], [127, "      // To state equals current state, we can just ignore the message"], [128, "      err = new HelixDuplicatedStateTransitionException("], [129, "          String.format(\"Partition %s current state is same as toState (%s->%s) from message.\","], [130, "              partitionName, fromState, toState));"], [131, "    } else if (fromState != null && !fromState.equals(\"*\") && !fromState.equalsIgnoreCase(state)) {"], [132, "      // If current state is neither toState nor fromState in message, there is a problem"], [133, "      err = new HelixStateMismatchException(String.format("], [134, "          \"Current state of stateModel does not match the fromState in Message, CurrentState: %s, Message: %s->%s, Partition: %s, from: %s, to: %s\","], [135, "          state, fromState, toState, partitionName, _message.getMsgSrc(), _message.getTgtName()));"], [136, "    }"], [137, ""], [138, "    if (err != null) {"], [139, "      _statusUpdateUtil.logError(_message, HelixStateTransitionHandler.class, err.getMessage(),"], [140, "          _manager);"], [141, "      logger.error(err.getMessage());"], [142, "      throw err;"]]}, "num_lines_added": 47, "num_lines_removed": 32}