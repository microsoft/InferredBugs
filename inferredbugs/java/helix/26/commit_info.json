{"hash": "88cd2143251e9970446ed631325f5e593be3b46c", "message": "HELIX-41: fix intermittent test failures", "file_num_lines": 244, "diff_parsed": {"added": [[267, "    Socket sock = null;"], [268, "    int retry = 5;"], [269, ""], [270, "    while (retry > 0) {"], [271, "      try {"], [272, "        sock = new Socket(splits[0], Integer.parseInt(splits[1]));"], [273, "        PrintWriter out = new PrintWriter(sock.getOutputStream(), true);"], [274, "        BufferedReader in = new BufferedReader(new InputStreamReader(sock.getInputStream()));"], [275, ""], [276, "        out.println(\"wchp\");"], [277, ""], [278, "        listenerMap.clear();"], [279, "        String lastPath = null;"], [280, "        String line = in.readLine();"], [281, "        while (line != null)"], [282, "        {"], [283, "        \tline = line.trim();"], [284, ""], [285, "        \tif (line.startsWith(\"/\")) {"], [286, "        \t\tlastPath = line;"], [287, "        \t\tif (!listenerMap.containsKey(lastPath)) {"], [288, "        \t\t\tlistenerMap.put(lastPath, new TreeSet<String>());"], [289, "        \t\t}"], [290, "        \t} else if (line.startsWith(\"0x\")) {"], [291, "        \t\tif (lastPath != null && listenerMap.containsKey(lastPath) ) {"], [292, "        \t\t\tlistenerMap.get(lastPath).add(line);"], [293, "        \t\t} else"], [294, "        \t\t{"], [295, "        \t\t\tLOG.error(\"Not path associated with listener sessionId: \" + line + \", lastPath: \" + lastPath);"], [296, "        \t\t}"], [297, "        \t} else"], [298, "        \t{"], [299, "    //    \t\tLOG.error(\"unrecognized line: \" + line);"], [300, "        \t}"], [301, "          line = in.readLine();"], [302, "        }"], [303, "        break;"], [304, "      } catch (Exception e) {"], [305, "    \t  // sometimes in test, we see connection-reset exceptions when in.readLine()"], [306, "    \t  // so add this retry logic"], [307, "    \t  retry--;"], [308, "      } finally"], [309, "      {"], [310, "    \tif (sock != null)"], [311, "    \t\tsock.close();"], [312, "      }"]], "deleted": [[265, "    int count = 0;"], [267, "    Socket sock = new Socket(splits[0], Integer.parseInt(splits[1]));"], [268, "    PrintWriter out = new PrintWriter(sock.getOutputStream(), true);"], [269, "    BufferedReader in = new BufferedReader(new InputStreamReader(sock.getInputStream()));"], [270, ""], [271, "    out.println(\"wchp\");"], [272, ""], [274, "    String lastPath = null;"], [275, "    String line = in.readLine();"], [276, "    while (line != null)"], [277, "    {"], [278, "    \tline = line.trim();"], [279, ""], [280, "    \tif (line.startsWith(\"/\")) {"], [281, "    \t\tlastPath = line;"], [282, "    \t\tif (!listenerMap.containsKey(lastPath)) {"], [283, "    \t\t\tlistenerMap.put(lastPath, new TreeSet<String>());"], [284, "    \t\t}"], [285, "    \t} else if (line.startsWith(\"0x\")) {"], [286, "    \t\tif (lastPath != null && listenerMap.containsKey(lastPath) ) {"], [287, "    \t\t\tlistenerMap.get(lastPath).add(line);"], [288, "    \t\t} else"], [289, "    \t\t{"], [290, "    \t\t\tLOG.error(\"Not path associated with listener sessionId: \" + line + \", lastPath: \" + lastPath);"], [291, "    \t\t}"], [292, "    \t} else"], [293, "    \t{"], [294, "//    \t\tLOG.error(\"unrecognized line: \" + line);"], [295, "    \t}"], [296, "      line = in.readLine();"], [298, "    sock.close();"]]}, "num_lines_added": 46, "num_lines_removed": 31}