{"hash": "acaf13fbfa37a3bd5a80d32cd15d90057ae342b6", "message": "Make byte array data accessor use RealmAwareZkClient (#1480)\n\nThis change was left out of the ZooScalability migration of helix-rest, making ZooKeeperAccessor endpoints fail in a multi-zk setting. This change fixes this.", "file_num_lines": 280, "diff_parsed": {"added": [[45, "import org.apache.helix.zookeeper.datamodel.serializer.ByteArraySerializer;"], [55, "import org.apache.helix.zookeeper.zkclient.serialize.ZkSerializer;"], [68, "  private volatile RealmAwareZkClient _byteArrayZkClient;"], [86, "  private RealmAwareZkClient _zkClientForRoutingDataListener;"], [114, "  /**"], [115, "   * Lazy initialization of RealmAwareZkClient used throughout the REST server."], [116, "   * @return"], [117, "   */"], [122, "          _zkClient = createRealmAwareZkClient(_zkClient, true, new ZNRecordSerializer());"], [129, "  /**"], [130, "   * Returns a RealmAWareZkClient with ByteArraySerializer with double-checked locking."], [131, "   * NOTE: this is different from getRealmAwareZkClient in that it does not reset listeners for"], [132, "   * _zkClientForListener because this RealmAwareZkClient is independent from routing data changes."], [133, "   * @return"], [134, "   */"], [135, "  public RealmAwareZkClient getByteArrayRealmAwareZkClient() {"], [136, "    if (_byteArrayZkClient == null) {"], [137, "      synchronized (this) {"], [138, "        if (_byteArrayZkClient == null) {"], [139, "          _byteArrayZkClient ="], [140, "              createRealmAwareZkClient(_byteArrayZkClient, false, new ByteArraySerializer());"], [141, "        }"], [142, "      }"], [143, "    }"], [144, "    return _byteArrayZkClient;"], [145, "  }"], [146, ""], [147, "  /**"], [148, "   * Main creation logic for RealmAwareZkClient."], [149, "   * @param realmAwareZkClient"], [150, "   * @param shouldSubscribeToRoutingDataChange if true, it will initialize zk client to listen on"], [151, "   *                                           routing data change and refresh change subscription"], [152, "   * @param zkSerializer the type of ZkSerializer to use"], [153, "   * @return"], [154, "   */"], [155, "  private RealmAwareZkClient createRealmAwareZkClient(RealmAwareZkClient realmAwareZkClient,"], [156, "      boolean shouldSubscribeToRoutingDataChange, ZkSerializer zkSerializer) {"], [157, "    // If the multi ZK config is enabled, use FederatedZkClient on multi-realm mode"], [158, "    if (_isMultiZkEnabled || Boolean"], [159, "        .parseBoolean(System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED))) {"], [160, "      try {"], [161, "        if (shouldSubscribeToRoutingDataChange) {"], [162, "          initializeZkClientForRoutingData();"], [163, "        }"], [164, "        RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder connectionConfigBuilder ="], [165, "            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder();"], [166, "        // If MSDS endpoint is set for this namespace, use that instead."], [167, "        if (_msdsEndpoint != null && !_msdsEndpoint.isEmpty()) {"], [168, "          connectionConfigBuilder.setRoutingDataSourceEndpoint(_msdsEndpoint)"], [169, "              .setRoutingDataSourceType(RoutingDataReaderType.HTTP.name());"], [170, "        }"], [171, "        realmAwareZkClient = new FederatedZkClient(connectionConfigBuilder.build(),"], [172, "            new RealmAwareZkClient.RealmAwareZkClientConfig().setZkSerializer(zkSerializer));"], [173, "        LOG.info(\"ServerContext: FederatedZkClient created successfully!\");"], [174, "      } catch (InvalidRoutingDataException | IllegalStateException e) {"], [175, "        throw new HelixException(\"Failed to create FederatedZkClient!\", e);"], [176, "      }"], [177, "    } else {"], [178, "      // If multi ZK config is not set, just connect to the ZK address given"], [179, "      HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();"], [180, "      clientConfig.setZkSerializer(zkSerializer);"], [181, "      realmAwareZkClient = SharedZkClientFactory.getInstance()"], [182, "          .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkAddr), clientConfig);"], [183, "    }"], [184, "    return realmAwareZkClient;"], [185, "  }"], [186, ""], [187, "  /**"], [188, "   * Initialization logic for ZkClient for routing data listener."], [189, "   * NOTE: The initialization lifecycle of zkClientForRoutingDataListener is tied to the private"], [190, "   * volatile zkClient."], [191, "   */"], [192, "  private void initializeZkClientForRoutingData() {"], [193, "    // Make sure the ServerContext is subscribed to routing data change so that it knows"], [194, "    // when to reset ZkClient and Helix APIs"], [195, "    if (_zkClientForRoutingDataListener == null) {"], [196, "      // Routing data is always in the ZNRecord format"], [197, "      _zkClientForRoutingDataListener = DedicatedZkClientFactory.getInstance()"], [198, "          .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkAddr),"], [199, "              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));"], [200, "    }"], [201, "    // Refresh data subscription"], [202, "    _zkClientForRoutingDataListener.unsubscribeAll();"], [203, "    _zkClientForRoutingDataListener.subscribeRoutingDataChanges(this, this);"], [204, "    LOG.info(\"ServerContext: subscribed to routing data in routing ZK at {}!\", _zkAddr);"], [205, "  }"], [206, ""], [282, "          _byteArrayZkBaseDataAccessor = new ZkBaseDataAccessor<>(getByteArrayRealmAwareZkClient());"], [296, "    if (_zkClientForRoutingDataListener != null) {"], [297, "      _zkClientForRoutingDataListener.close();"], [303, "    if (_zkClientForRoutingDataListener == null || _zkClientForRoutingDataListener.isClosed()) {"], [307, "    _zkClientForRoutingDataListener.unsubscribeAll();"], [308, "    _zkClientForRoutingDataListener.subscribeRoutingDataChanges(this, this);"], [314, "    if (_zkClientForRoutingDataListener == null || _zkClientForRoutingDataListener.isClosed()) {"], [322, "    if (_zkClientForRoutingDataListener == null || _zkClientForRoutingDataListener.isClosed()) {"], [326, "    _zkClientForRoutingDataListener.unsubscribeAll();"], [327, "    _zkClientForRoutingDataListener.subscribeRoutingDataChanges(this, this);"], [333, "    if (_zkClientForRoutingDataListener == null || _zkClientForRoutingDataListener.isClosed()) {"], [337, "    _zkClientForRoutingDataListener.unsubscribeAll();"], [338, "    _zkClientForRoutingDataListener.subscribeRoutingDataChanges(this, this);"], [344, "    if (_zkClientForRoutingDataListener == null || _zkClientForRoutingDataListener.isClosed()) {"], [348, "    _zkClientForRoutingDataListener.unsubscribeAll();"], [349, "    _zkClientForRoutingDataListener.subscribeRoutingDataChanges(this, this);"], [355, "    if (_zkClientForRoutingDataListener == null || _zkClientForRoutingDataListener.isClosed()) {"], [359, "    _zkClientForRoutingDataListener.unsubscribeAll();"], [360, "    _zkClientForRoutingDataListener.subscribeRoutingDataChanges(this, this);"]], "deleted": [[34, "import org.apache.helix.manager.zk.ByteArraySerializer;"], [84, "  private RealmAwareZkClient _zkClientForListener;"], [116, "          // If the multi ZK config is enabled, use FederatedZkClient on multi-realm mode"], [117, "          if (_isMultiZkEnabled || Boolean"], [118, "              .parseBoolean(System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED))) {"], [119, "            try {"], [120, "              // Make sure the ServerContext is subscribed to routing data change so that it knows"], [121, "              // when to reset ZkClient and Helix APIs"], [122, "              if (_zkClientForListener == null) {"], [123, "                _zkClientForListener = DedicatedZkClientFactory.getInstance()"], [124, "                    .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkAddr),"], [125, "                        new HelixZkClient.ZkClientConfig()"], [126, "                            .setZkSerializer(new ZNRecordSerializer()));"], [127, "              }"], [128, "              // Refresh data subscription"], [129, "              _zkClientForListener.unsubscribeAll();"], [130, "              _zkClientForListener.subscribeRoutingDataChanges(this, this);"], [131, "              LOG.info(\"ServerContext: subscribed to routing data in routing ZK at {}!\", _zkAddr);"], [132, ""], [133, "              RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder connectionConfigBuilder ="], [134, "                  new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder();"], [135, "              // If MSDS endpoint is set for this namespace, use that instead."], [136, "              if (_msdsEndpoint != null && !_msdsEndpoint.isEmpty()) {"], [137, "                connectionConfigBuilder.setRoutingDataSourceEndpoint(_msdsEndpoint)"], [138, "                    .setRoutingDataSourceType(RoutingDataReaderType.HTTP.name());"], [139, "              }"], [140, "              _zkClient = new FederatedZkClient(connectionConfigBuilder.build(),"], [141, "                  new RealmAwareZkClient.RealmAwareZkClientConfig()"], [142, "                      .setZkSerializer(new ZNRecordSerializer()));"], [143, "              LOG.info(\"ServerContext: FederatedZkClient created successfully!\");"], [144, "            } catch (InvalidRoutingDataException | IllegalStateException e) {"], [145, "              throw new HelixException(\"Failed to create FederatedZkClient!\", e);"], [146, "            }"], [147, "          } else {"], [148, "            // If multi ZK config is not set, just connect to the ZK address given"], [149, "            HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();"], [150, "            clientConfig.setZkSerializer(new ZNRecordSerializer());"], [151, "            _zkClient = SharedZkClientFactory.getInstance()"], [152, "                .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkAddr), clientConfig);"], [153, "          }"], [235, "          _byteArrayZkBaseDataAccessor ="], [236, "              new ZkBaseDataAccessor<>(_zkAddr, new ByteArraySerializer());"], [250, "    if (_zkClientForListener != null) {"], [251, "      _zkClientForListener.close();"], [257, "    if (_zkClientForListener == null || _zkClientForListener.isClosed()) {"], [261, "    _zkClientForListener.unsubscribeAll();"], [262, "    _zkClientForListener.subscribeRoutingDataChanges(this, this);"], [268, "    if (_zkClientForListener == null || _zkClientForListener.isClosed()) {"], [276, "    if (_zkClientForListener == null || _zkClientForListener.isClosed()) {"], [280, "    _zkClientForListener.unsubscribeAll();"], [281, "    _zkClientForListener.subscribeRoutingDataChanges(this, this);"], [287, "    if (_zkClientForListener == null || _zkClientForListener.isClosed()) {"], [291, "    _zkClientForListener.unsubscribeAll();"], [292, "    _zkClientForListener.subscribeRoutingDataChanges(this, this);"], [298, "    if (_zkClientForListener == null || _zkClientForListener.isClosed()) {"], [302, "    _zkClientForListener.unsubscribeAll();"], [303, "    _zkClientForListener.subscribeRoutingDataChanges(this, this);"], [309, "    if (_zkClientForListener == null || _zkClientForListener.isClosed()) {"], [313, "    _zkClientForListener.unsubscribeAll();"], [314, "    _zkClientForListener.subscribeRoutingDataChanges(this, this);"]]}, "num_lines_added": 106, "num_lines_removed": 60}