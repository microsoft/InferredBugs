{"hash": "8b7632ecec3e447bef5201bc1218e1dea2d45938", "message": "Generic Helix Controller Pipeline separation\n\nSingle pipeline will still be the bottleneck of improving mastership handoff. We need a POC to prove that parallel pipeline is a workable solution that we can use to improve the mastership handoff.", "file_num_lines": 595, "diff_parsed": {"added": [[34, "import org.apache.helix.HelixDataAccessor;"], [35, "import org.apache.helix.HelixManager;"], [36, "import org.apache.helix.NotificationContext;"], [37, "import org.apache.helix.NotificationContext.Type;"], [38, "import org.apache.helix.PropertyKey.Builder;"], [39, "import org.apache.helix.ZNRecord;"], [102, "  private final PipelineRegistry _taskRegistry;"], [115, "  private final ClusterEventBlockingQueue _taskEventQueue;"], [116, "  private final ClusterEventProcessor _taskEventThread;"], [117, ""], [135, "  private ClusterDataCache _taskCache;"], [146, "    this(createDefaultRegistry(), createDefaultRegistry());"], [150, "    this(createDefaultRegistry(), createDefaultRegistry(), clusterName);"], [164, "      _taskCache.requireFullRefresh();"], [166, "      _taskCache.refresh(_manager.getHelixDataAccessor());"], [185, "      _taskEventQueue.put(event.clone());"], [266, "  public GenericHelixController(PipelineRegistry registry, PipelineRegistry taskRegistry) {"], [267, "    this(registry, taskRegistry, null);"], [270, "  private GenericHelixController(PipelineRegistry registry, PipelineRegistry taskRegistry,"], [271, "      String clusterName) {"], [274, "    _taskRegistry = taskRegistry;"], [279, ""], [281, "    _taskEventQueue = new ClusterEventBlockingQueue();"], [282, "    _cache = new ClusterDataCache(clusterName);"], [283, "    _taskCache = new ClusterDataCache(clusterName);"], [284, ""], [285, "    _eventThread = new ClusterEventProcessor(_cache, _eventQueue);"], [286, "    _taskEventThread = new ClusterEventProcessor(_taskCache, _taskEventQueue);"], [287, ""], [288, "    initPipelines(_eventThread, _cache, false);"], [289, "    initPipelines(_taskEventThread, _taskCache, true);"], [297, "  protected void handleEvent(ClusterEvent event, ClusterDataCache cache) {"], [335, ""], [336, "        if (cache.isTaskCache()) {"], [337, "          TaskDriver driver = new TaskDriver(manager);"], [338, "          _clusterStatusMonitor.refreshWorkflowsStatus(driver);"], [339, "          _clusterStatusMonitor.refreshJobsStatus(driver);"], [340, "        }"], [346, "    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);"], [348, "    List<Pipeline> pipelines = cache.isTaskCache()"], [349, "        ? _registry.getPipelinesForEvent(event.getEventType())"], [350, "        : _taskRegistry.getPipelinesForEvent(event.getEventType());"], [369, "    logger.info("], [370, "        \"END: Invoking controller pipeline for event: \" + event.getEventType() + \" for cluster \""], [371, "            + manager.getClusterName() + \", took \" + (endTime - startTime) + \" ms\");"], [372, ""], [373, "    if (!cache.isTaskCache()) {"], [374, "      // report event process durations"], [375, "      if (_clusterStatusMonitor != null) {"], [376, "        NotificationContext notificationContext ="], [377, "            event.getAttribute(AttributeName.changeContext.name());"], [378, "        long enqueueTime = event.getCreationTime();"], [379, "        long zkCallbackTime;"], [380, "        StringBuilder sb = new StringBuilder();"], [381, "        if (notificationContext != null) {"], [382, "          zkCallbackTime = notificationContext.getCreationTime();"], [383, "          _clusterStatusMonitor"], [384, "              .updateClusterEventDuration(ClusterEventMonitor.PhaseName.Callback.name(),"], [385, "                  enqueueTime - zkCallbackTime);"], [386, "          sb.append(String.format("], [387, "              \"Callback time for event: \" + event.getEventType() + \" took: \" + (enqueueTime"], [388, "                  - zkCallbackTime) + \" ms\\n\"));"], [390, "        }"], [391, "        _clusterStatusMonitor"], [392, "            .updateClusterEventDuration(ClusterEventMonitor.PhaseName.InQueue.name(),"], [393, "                startTime - enqueueTime);"], [395, "            .updateClusterEventDuration(ClusterEventMonitor.PhaseName.TotalProcessed.name(),"], [396, "                endTime - startTime);"], [398, "            \"InQueue time for event: \" + event.getEventType() + \" took: \" + (startTime"], [399, "                - enqueueTime) + \" ms\\n\"));"], [400, "        sb.append(String.format("], [401, "            \"TotalProcessed time for event: \" + event.getEventType() + \" took: \" + (endTime"], [402, "                - startTime) + \" ms\"));"], [403, "        logger.info(sb.toString());"], [416, "      _taskCache.requireFullRefresh();"], [419, "      _taskCache.updateDataChange(ChangeType.CURRENT_STATE);"], [427, "    _taskEventQueue.put(event.clone());"], [438, "      _taskCache.requireFullRefresh();"], [441, "      _taskCache.updateDataChange(ChangeType.MESSAGE);"], [450, "    _taskEventQueue.put(event.clone());"], [465, "      _taskCache.requireFullRefresh();"], [472, "    _taskCache.setLiveInstances(liveInstances);"], [492, "    _taskEventQueue.put(event.clone());"], [533, "      _taskCache.requireFullRefresh();"], [536, "      _taskCache.updateDataChange(ChangeType.IDEAL_STATE);"], [544, "    _taskEventQueue.put(event.clone());"], [559, "      _taskCache.requireFullRefresh();"], [562, "      _taskCache.updateDataChange(ChangeType.INSTANCE_CONFIG);"], [569, "    _taskEventQueue.put(event.clone());"], [588, "    _taskCache.requireFullRefresh();"], [627, "        _taskEventQueue.put(event.clone());"], [723, ""], [724, "    terminateEventThread(_eventThread);"], [725, "    terminateEventThread(_taskEventThread);"], [726, ""], [730, "  private void terminateEventThread(Thread thread) throws InterruptedException {"], [731, "    while (thread.isAlive()) {"], [732, "      thread.interrupt();"], [733, "      thread.join(EVENT_THREAD_JOIN_TIMEOUT);"], [734, "    }"], [735, "  }"], [736, ""], [738, "    private final ClusterDataCache _cache;"], [739, "    private final ClusterEventBlockingQueue _eventBlockingQueue;"], [740, ""], [741, "    public ClusterEventProcessor(ClusterDataCache cache,"], [742, "        ClusterEventBlockingQueue eventBlockingQueue) {"], [743, "      _cache = cache;"], [744, "      _eventBlockingQueue = eventBlockingQueue;"], [745, "    }"], [746, ""], [747, "    @Override public void run() {"], [751, "          ClusterEvent event = _eventBlockingQueue.take();"], [752, "          handleEvent(event, _cache);"], [768, ""], [769, "  private void initPipelines(Thread eventThread, ClusterDataCache cache, boolean isTask) {"], [770, "    cache.setTaskCache(isTask);"], [771, "    cache.setAsyncTasksThreadPool(_asyncTasksThreadPool);"], [772, ""], [773, "    eventThread.setDaemon(true);"], [774, "    eventThread.start();"], [775, "  }"]], "deleted": [[42, "import org.apache.helix.HelixDataAccessor;"], [43, "import org.apache.helix.HelixManager;"], [44, "import org.apache.helix.NotificationContext;"], [45, "import org.apache.helix.NotificationContext.Type;"], [46, "import org.apache.helix.PropertyKey.Builder;"], [47, "import org.apache.helix.ZNRecord;"], [141, "    this(createDefaultRegistry());"], [145, "    this(createDefaultRegistry(), clusterName);"], [258, "  public GenericHelixController(PipelineRegistry registry) {"], [259, "    this(registry, null);"], [262, "  private GenericHelixController(PipelineRegistry registry, String clusterName) {"], [269, "    _cache = new ClusterDataCache(clusterName);"], [270, "    _cache.setAsyncTasksThreadPool(_asyncTasksThreadPool);"], [272, "    _eventThread = new ClusterEventProcessor();"], [273, "    _eventThread.setDaemon(true);"], [274, "    _eventThread.start();"], [282, "  protected synchronized void handleEvent(ClusterEvent event) {"], [320, "        TaskDriver driver = new TaskDriver(manager);"], [321, "        _clusterStatusMonitor.refreshWorkflowsStatus(driver);"], [322, "        _clusterStatusMonitor.refreshJobsStatus(driver);"], [328, "    event.addAttribute(AttributeName.ClusterDataCache.name(), _cache);"], [330, "    List<Pipeline> pipelines = _registry.getPipelinesForEvent(event.getEventType());"], [349, "    logger.info(\"END: Invoking controller pipeline for event: \" + event.getEventType() + \" for cluster \""], [350, "        + manager.getClusterName() + \", took \" + (endTime - startTime) + \" ms\");"], [352, "    // report event process durations"], [353, "    if (_clusterStatusMonitor != null) {"], [354, "      NotificationContext notificationContext = event.getAttribute(AttributeName.changeContext.name());"], [355, "      long enqueueTime = event.getCreationTime();"], [356, "      long zkCallbackTime;"], [357, "      StringBuilder sb = new StringBuilder();"], [358, "      if (notificationContext != null) {"], [359, "        zkCallbackTime = notificationContext.getCreationTime();"], [361, "            .updateClusterEventDuration(ClusterEventMonitor.PhaseName.Callback.name(),"], [362, "                enqueueTime - zkCallbackTime);"], [364, "            \"Callback time for event: \" + event.getEventType() + \" took: \" + (enqueueTime"], [365, "                - zkCallbackTime) + \" ms\\n\"));"], [366, ""], [368, "      _clusterStatusMonitor.updateClusterEventDuration(ClusterEventMonitor.PhaseName.InQueue.name(),"], [369, "          startTime - enqueueTime);"], [370, "      _clusterStatusMonitor"], [371, "          .updateClusterEventDuration(ClusterEventMonitor.PhaseName.TotalProcessed.name(),"], [372, "              endTime - startTime);"], [373, "      sb.append(String.format("], [374, "          \"InQueue time for event: \" + event.getEventType() + \" took: \" + (startTime - enqueueTime)"], [375, "              + \" ms\\n\"));"], [376, "      sb.append(String.format("], [377, "          \"TotalProcessed time for event: \" + event.getEventType() + \" took: \" + (endTime - startTime)"], [378, "              + \" ms\"));"], [379, "      logger.info(sb.toString());"], [529, ""], [682, "    while (_eventThread.isAlive()) {"], [683, "      _eventThread.interrupt();"], [684, "      _eventThread.join(EVENT_THREAD_JOIN_TIMEOUT);"], [685, "    }"], [690, "    @Override"], [691, "    public void run() {"], [695, "          ClusterEvent event = _eventQueue.take();"], [696, "          handleEvent(event);"]]}, "num_lines_added": 122, "num_lines_removed": 58}