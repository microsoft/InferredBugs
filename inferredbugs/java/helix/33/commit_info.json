{"hash": "7e48570a2cfc35a4a8c3680731967a79a183a7b6", "message": "[HELIX-378] Add instance gauges to ClusterStatusMonitor", "file_num_lines": 266, "diff_parsed": {"added": [[23, "import java.util.Arrays;"], [24, "import java.util.Collection;"], [25, "import java.util.Collections;"], [27, "import java.util.Set;"], [39, "import com.google.common.collect.Sets;"], [40, ""], [47, "  static final String PARTICIPANT_STATUS_KEY = \"ParticipantStatus\";"], [52, "  static final String DEFAULT_TAG = \"DEFAULT\";"], [53, ""], [57, "  private Set<String> _liveInstances = Collections.emptySet();"], [58, "  private Set<String> _instances = Collections.emptySet();"], [59, "  private Set<String> _disabledInstances = Collections.emptySet();"], [60, "  private Map<String, Set<String>> _disabledPartitions = Collections.emptyMap();"], [68, "  private final ConcurrentHashMap<String, InstanceMonitor> _instanceMbeanMap ="], [69, "      new ConcurrentHashMap<String, InstanceMonitor>();"], [70, ""], [92, "    return _instances.size() - _liveInstances.size();"], [97, "    return _instances.size();"], [102, "    return _disabledInstances.size();"], [107, "    int numDisabled = 0;"], [108, "    for (String instance : _disabledPartitions.keySet()) {"], [109, "      numDisabled += _disabledPartitions.get(instance).size();"], [110, "    }"], [111, "    return numDisabled;"], [165, "  /**"], [166, "   * Update the gauges for all instances in the cluster"], [167, "   * @param liveInstanceSet the current set of live instances"], [168, "   * @param instanceSet the current set of configured instances (live or other"], [169, "   * @param disabledInstanceSet the current set of configured instances that are disabled"], [170, "   * @param disabledPartitions a map of instance name to the set of partitions disabled on it"], [171, "   * @param tags a map of instance name to the set of tags on it"], [172, "   */"], [173, "  public void setClusterInstanceStatus(Set<String> liveInstanceSet, Set<String> instanceSet,"], [174, "      Set<String> disabledInstanceSet, Map<String, Set<String>> disabledPartitions,"], [175, "      Map<String, Set<String>> tags) {"], [176, "    // Unregister beans for instances that are no longer configured"], [177, "    Set<String> toUnregister = Sets.newHashSet(_instanceMbeanMap.keySet());"], [178, "    toUnregister.removeAll(instanceSet);"], [179, "    try {"], [180, "      unregisterInstances(toUnregister);"], [181, "    } catch (MalformedObjectNameException e) {"], [182, "      LOG.error(\"Could not unregister instances from MBean server: \" + toUnregister, e);"], [183, "    }"], [184, ""], [185, "    // Register beans for instances that are newly configured"], [186, "    Set<String> toRegister = Sets.newHashSet(instanceSet);"], [187, "    toRegister.removeAll(_instanceMbeanMap.keySet());"], [188, "    Set<InstanceMonitor> monitorsToRegister = Sets.newHashSet();"], [189, "    for (String instanceName : toRegister) {"], [190, "      InstanceMonitor bean = new InstanceMonitor(_clusterName, instanceName);"], [191, "      bean.updateInstance(tags.get(instanceName), disabledPartitions.get(instanceName),"], [192, "          liveInstanceSet.contains(instanceName), !disabledInstanceSet.contains(instanceName));"], [193, "      monitorsToRegister.add(bean);"], [194, "    }"], [195, "    try {"], [196, "      registerInstances(monitorsToRegister);"], [197, "    } catch (MalformedObjectNameException e) {"], [198, "      LOG.error(\"Could not register instances with MBean server: \" + toRegister, e);"], [199, "    }"], [200, ""], [201, "    // Update all the sets"], [202, "    _instances = instanceSet;"], [203, "    _liveInstances = liveInstanceSet;"], [204, "    _disabledInstances = disabledInstanceSet;"], [205, "    _disabledPartitions = disabledPartitions;"], [206, ""], [207, "    // Update the instance MBeans"], [208, "    for (String instanceName : instanceSet) {"], [209, "      if (_instanceMbeanMap.containsKey(instanceName)) {"], [210, "        // Update the bean"], [211, "        InstanceMonitor bean = _instanceMbeanMap.get(instanceName);"], [212, "        String oldSensorName = bean.getSensorName();"], [213, "        bean.updateInstance(tags.get(instanceName), disabledPartitions.get(instanceName),"], [214, "            liveInstanceSet.contains(instanceName), !disabledInstanceSet.contains(instanceName));"], [215, ""], [216, "        // If the sensor name changed, re-register the bean so that listeners won't miss it"], [217, "        String newSensorName = bean.getSensorName();"], [218, "        if (!oldSensorName.equals(newSensorName)) {"], [219, "          try {"], [220, "            unregisterInstances(Arrays.asList(instanceName));"], [221, "            registerInstances(Arrays.asList(bean));"], [222, "          } catch (MalformedObjectNameException e) {"], [223, "            LOG.error(\"Could not refresh registration with MBean server: \" + instanceName, e);"], [224, "          }"], [225, "        }"], [226, "      }"], [227, "    }"], [237, "            bean.updateExternalView(externalView, idealState);"], [238, "            registerResources(Arrays.asList(bean));"], [242, "      ResourceMonitor bean = _resourceMbeanMap.get(resourceName);"], [243, "      String oldSensorName = bean.getSensorName();"], [244, "      bean.updateExternalView(externalView, idealState);"], [245, "      String newSensorName = bean.getSensorName();"], [246, "      if (!oldSensorName.equals(newSensorName)) {"], [247, "        unregisterResources(Arrays.asList(resourceName));"], [248, "        registerResources(Arrays.asList(bean));"], [249, "      }"], [286, "      unregisterInstances(_instanceMbeanMap.keySet());"], [287, "      _instanceMbeanMap.clear();"], [288, ""], [295, "  private synchronized void registerInstances(Collection<InstanceMonitor> instances)"], [296, "      throws MalformedObjectNameException {"], [297, "    for (InstanceMonitor monitor : instances) {"], [298, "      String instanceName = monitor.getInstanceName();"], [299, "      String beanName = getInstanceBeanName(instanceName);"], [300, "      register(monitor, getObjectName(beanName));"], [301, "      _instanceMbeanMap.put(instanceName, monitor);"], [302, "    }"], [303, "  }"], [304, ""], [305, "  private synchronized void unregisterInstances(Collection<String> instances)"], [306, "      throws MalformedObjectNameException {"], [307, "    for (String instanceName : instances) {"], [308, "      String beanName = getInstanceBeanName(instanceName);"], [309, "      unregister(getObjectName(beanName));"], [310, "    }"], [311, "    _instanceMbeanMap.keySet().removeAll(instances);"], [312, "  }"], [313, ""], [314, "  private synchronized void registerResources(Collection<ResourceMonitor> resources)"], [315, "      throws MalformedObjectNameException {"], [316, "    for (ResourceMonitor monitor : resources) {"], [317, "      String resourceName = monitor.getResourceName();"], [318, "      String beanName = getResourceBeanName(resourceName);"], [319, "      register(monitor, getObjectName(beanName));"], [320, "      _resourceMbeanMap.put(resourceName, monitor);"], [321, "    }"], [322, "  }"], [323, ""], [324, "  private synchronized void unregisterResources(Collection<String> resources)"], [325, "      throws MalformedObjectNameException {"], [326, "    for (String resourceName : resources) {"], [327, "      String beanName = getResourceBeanName(resourceName);"], [328, "      unregister(getObjectName(beanName));"], [329, "    }"], [330, "    _resourceMbeanMap.keySet().removeAll(resources);"], [331, "  }"], [332, ""], [333, "  private String getInstanceBeanName(String instanceName) {"], [334, "    return CLUSTER_DN_KEY + \"=\" + _clusterName + \",\" + INSTANCE_DN_KEY + \"=\" + instanceName;"], [335, "  }"], [336, ""], [337, "  private String getResourceBeanName(String resourceName) {"], [338, "    return CLUSTER_DN_KEY + \"=\" + _clusterName + \",\" + RESOURCE_DN_KEY + \"=\" + resourceName;"], [339, "  }"], [340, ""], [343, "    return CLUSTER_STATUS_KEY + \".\" + _clusterName;"]], "deleted": [[48, "  private int _numOfLiveInstances = 0;"], [49, "  private int _numOfInstances = 0;"], [50, "  private int _numOfDisabledInstances = 0;"], [51, "  private int _numOfDisabledPartitions = 0;"], [80, "    return _numOfInstances - _numOfLiveInstances;"], [85, "    return _numOfInstances;"], [90, "    return _numOfDisabledInstances;"], [95, "    return _numOfDisabledPartitions;"], [149, "  public void setClusterStatusCounters(int numberLiveInstances, int numberOfInstances,"], [150, "      int disabledInstances, int disabledPartitions) {"], [151, "    _numOfInstances = numberOfInstances;"], [152, "    _numOfLiveInstances = numberLiveInstances;"], [153, "    _numOfDisabledInstances = disabledInstances;"], [154, "    _numOfDisabledPartitions = disabledPartitions;"], [164, "            String beanName ="], [165, "                CLUSTER_DN_KEY + \"=\" + _clusterName + \",\" + RESOURCE_DN_KEY + \"=\" + resourceName;"], [166, "            register(bean, getObjectName(beanName));"], [167, "            _resourceMbeanMap.put(resourceName, bean);"], [171, "      _resourceMbeanMap.get(resourceName).updateExternalView(externalView, idealState);"], [216, "    return CLUSTER_STATUS_KEY + \"_\" + _clusterName;"]]}, "num_lines_added": 147, "num_lines_removed": 20}