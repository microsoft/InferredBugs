{"hash": "50c9aa3a2eaf82e75743c693b7e40ad741e51198", "message": "Replace BestPossibleStage with TaskSchedulingStage\n\nFor new task framework, we dont have to loop through all the idealstates. For the first step, we can have a simple version of BestPossibleStage.", "file_num_lines": 262, "diff_parsed": {"added": [[109, "    Iterator<Resource> itr = resourceMap.values().iterator();"], [111, "      Resource resource = itr.next();"], [114, "        LogUtil.logWarn(logger, _eventId,"], [115, "            \"Failed to calculate best possible states for \" + resource.getResourceName());"], [120, "    ClusterStatusMonitor clusterStatusMonitor ="], [121, "        event.getAttribute(AttributeName.clusterStatusMonitor.name());"], [122, "    updateRebalanceStatus(!failureResources.isEmpty(), helixManager, cache, clusterStatusMonitor,"], [123, "        \"Failed to calculate best possible states for \" + failureResources.size() + \" resources.\");"], [124, ""]], "deleted": [[106, "    PriorityQueue<ResourcePriority> resourcePriorityQueue = new PriorityQueue<>();"], [107, "    TaskDriver taskDriver = null;"], [109, "    if (helixManager != null) {"], [110, "      taskDriver = new TaskDriver(helixManager);"], [111, "    }"], [112, "    for (Resource resource : resourceMap.values()) {"], [113, "      resourcePriorityQueue.add(new ResourcePriority(resource, cache.getIdealState(resource.getResourceName()),"], [114, "          taskDriver));"], [115, "    }"], [118, "    Iterator<ResourcePriority> itr = resourcePriorityQueue.iterator();"], [120, "      Resource resource = itr.next().getResource();"], [123, "        LogUtil.logWarn(logger, _eventId, \"Failed to calculate best possible states for \" + resource.getResourceName());"], [128, "    if (!cache.isTaskCache()) {"], [129, "      ClusterStatusMonitor clusterStatusMonitor ="], [130, "          event.getAttribute(AttributeName.clusterStatusMonitor.name());"], [131, "      updateRebalanceStatus(!failureResources.isEmpty(), helixManager, cache, clusterStatusMonitor,"], [132, "          \"Failed to calculate best possible states for \" + failureResources.size()"], [133, "              + \" resources.\");"], [134, "    }"], [359, ""], [360, "  class ResourcePriority implements Comparable<ResourcePriority> {"], [361, "    final Resource _resource;"], [362, "    // By default, non-job resources and new jobs are assigned lowest priority"], [363, "    Long _priority = Long.MAX_VALUE;"], [364, ""], [365, "    Resource getResource() {"], [366, "      return _resource;"], [367, "    }"], [368, ""], [369, "    public ResourcePriority(Resource resource, IdealState idealState, TaskDriver taskDriver) {"], [370, "      _resource = resource;"], [371, ""], [372, "      if (taskDriver != null && idealState != null"], [373, "          && idealState.getRebalancerClassName() != null"], [374, "          && idealState.getRebalancerClassName().equals(JobRebalancer.class.getName())) {"], [375, "        // Update priority for job resources, note that older jobs will be processed earlier"], [376, "        JobContext jobContext = taskDriver.getJobContext(resource.getResourceName());"], [377, "        if (jobContext != null && jobContext.getStartTime() != WorkflowContext.UNSTARTED) {"], [378, "          _priority = jobContext.getStartTime();"], [379, "        }"], [380, "      }"], [381, "    }"], [382, ""], [383, "    @Override"], [384, "    public int compareTo(ResourcePriority otherJob) {"], [385, "      return _priority.compareTo(otherJob._priority);"], [386, "    }"], [387, "  }"]]}, "num_lines_added": 9, "num_lines_removed": 48}