{"hash": "1cf6bcc19119fed9db5687e458a9fe435e22aef2", "message": "Simplified the tests checking the content of the generated packages", "file_num_lines": 89, "diff_parsed": {"added": [[25, "import java.util.concurrent.atomic.AtomicBoolean;"], [28, "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;"], [78, "        final AtomicBoolean controlFound = new AtomicBoolean(false);"], [80, "        ArchiveWalker.walkControlFiles(deb, new ArchiveVisitor<TarArchiveEntry>() {"], [81, "            public void visit(TarArchiveEntry entry, byte[] content) throws IOException {"], [82, "                controlFound.set(true);"], [83, ""], [84, "                assertFalse(\"directory found in the control archive\", entry.isDirectory());"], [85, "                assertTrue(\"prefix\", entry.getName().startsWith(\"./\"));"], [86, ""], [87, "                InformationInputStream infoStream = new InformationInputStream(new ByteArrayInputStream(content));"], [88, "                IOUtils.copy(infoStream, NullOutputStream.NULL_OUTPUT_STREAM);"], [89, ""], [90, "                if (infoStream.isShell()) {"], [91, "                    assertTrue(\"Permissions on \" + entry.getName() + \" should be 755\", entry.getMode() == 0755);"], [93, "                    assertTrue(\"Permissions on \" + entry.getName() + \" should be 644\", entry.getMode() == 0644);"], [95, ""], [96, "                assertTrue(entry.getName() + \" doesn't have Unix line endings\", infoStream.hasUnixLineEndings());"], [97, ""], [98, "                assertEquals(\"user\", \"root\", entry.getUserName());"], [99, "                assertEquals(\"group\", \"root\", entry.getGroupName());"], [101, "        });"], [103, "        assertTrue(\"Control files not found in the package\", controlFound.get());"], [125, ""], [126, "        final AtomicBoolean controlFound = new AtomicBoolean(false);"], [128, "        ArchiveWalker.walkControlFiles(deb, new ArchiveVisitor<TarArchiveEntry>() {"], [129, "            public void visit(TarArchiveEntry entry, byte[] content) throws IOException {"], [130, "                controlFound.set(true);"], [131, ""], [132, "                if (entry.getName().contains(\"postinst\") || entry.getName().contains(\"prerm\")) {"], [133, "                    String body = new String(content, \"ISO-8859-1\");"], [134, "                    assertFalse(\"Variables not replaced in the control file \" + entry.getName(), body.contains(\"[[name]] [[version]]\"));"], [135, "                    assertTrue(\"Expected variables not found in the control file \" + entry.getName(), body.contains(\"jdeb 1.0\"));"], [138, "        });"], [140, "        assertTrue(\"Control files not found in the package\", controlFound.get());"]], "deleted": [[20, "import java.io.ByteArrayOutputStream;"], [22, "import java.io.FileInputStream;"], [27, "import java.util.zip.GZIPInputStream;"], [30, "import org.apache.commons.compress.archivers.ar.ArArchiveEntry;"], [31, "import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;"], [36, "import org.apache.tools.tar.TarEntry;"], [37, "import org.apache.tools.tar.TarInputStream;"], [38, "import org.vafer.jdeb.ar.NonClosingInputStream;"], [84, "        boolean controlFound = false;"], [86, "        ArArchiveInputStream in = new ArArchiveInputStream(new FileInputStream(deb));"], [87, "        try {"], [88, "            ArArchiveEntry entry;"], [89, "            while ((entry = in.getNextArEntry()) != null) {"], [90, "                if (entry.getName().equals(\"control.tar.gz\")) {"], [91, "                    TarInputStream tar = new TarInputStream(new GZIPInputStream(new NonClosingInputStream(in)));"], [92, "                    TarEntry tarentry;"], [93, "                    while ((tarentry = tar.getNextEntry()) != null) {"], [94, "                        controlFound = true;"], [95, ""], [96, "                        assertFalse(\"directory found in the control archive\", tarentry.isDirectory());"], [97, "                        assertTrue(\"prefix\", tarentry.getName().startsWith(\"./\"));"], [98, ""], [99, "                        ByteArrayOutputStream bout = new ByteArrayOutputStream();"], [100, "                        tar.copyEntryContents(bout);"], [101, ""], [102, "                        InformationInputStream infoStream = new InformationInputStream(new ByteArrayInputStream(bout.toByteArray()));"], [103, "                        IOUtils.copy(infoStream, NullOutputStream.NULL_OUTPUT_STREAM);"], [104, ""], [105, "                        if (infoStream.isShell()) {"], [106, "                            assertTrue(\"Permissions on \" + tarentry.getName() + \" should be 755\", tarentry.getMode() == 0755);"], [107, "                        } else {"], [108, "                            assertTrue(\"Permissions on \" + tarentry.getName() + \" should be 644\", tarentry.getMode() == 0644);"], [109, "                        }"], [110, ""], [111, "                        assertTrue(tarentry.getName() + \" doesn't have Unix line endings\", infoStream.hasUnixLineEndings());"], [112, ""], [113, "                        assertEquals(\"user\", \"root\", tarentry.getUserName());"], [114, "                        assertEquals(\"group\", \"root\", tarentry.getGroupName());"], [115, "                    }"], [116, "                    tar.close();"], [118, "                    // skip to the next entry"], [119, "                    long skip = entry.getLength();"], [120, "                    while (skip > 0) {"], [121, "                        long skipped = in.skip(skip);"], [122, "                        if (skipped == -1) {"], [123, "                            throw new IOException(\"Failed to skip\");"], [124, "                        }"], [125, "                        skip -= skipped;"], [126, "                    }"], [129, "        } finally {"], [130, "            in.close();"], [131, "        }"], [133, "        assertTrue(\"Control files not found in the package\", controlFound);"], [156, "        boolean controlFound = false;"], [157, ""], [158, "        ArArchiveInputStream in = new ArArchiveInputStream(new FileInputStream(deb));"], [159, "        try {"], [160, "            ArArchiveEntry entry;"], [161, "            while ((entry = in.getNextArEntry()) != null) {"], [162, "                if (entry.getName().equals(\"control.tar.gz\")) {"], [163, "                    TarInputStream tar = new TarInputStream(new GZIPInputStream(new NonClosingInputStream(in)));"], [164, "                    TarEntry tarentry;"], [165, "                    while ((tarentry = tar.getNextEntry()) != null) {"], [166, "                        controlFound = true;"], [167, ""], [168, "                        if (tarentry.getName().contains(\"postinst\") || tarentry.getName().contains(\"prerm\")) {"], [169, "                            ByteArrayOutputStream bout = new ByteArrayOutputStream();"], [170, "                            tar.copyEntryContents(bout);"], [171, ""], [172, "                            String content = bout.toString(\"ISO-8859-1\");"], [173, ""], [174, "                            assertFalse(\"Variables not replaced in the control file \" + tarentry.getName(), content.contains(\"[[name]] [[version]]\"));"], [175, "                            assertTrue(\"Expected variables not found in the control file \" + tarentry.getName(), content.contains(\"jdeb 1.0\"));"], [176, "                        }"], [177, "                    }"], [178, "                    tar.close();"], [179, "                } else {"], [180, "                    // skip to the next entry"], [181, "                    long skip = entry.getLength();"], [182, "                    while (skip > 0) {"], [183, "                        long skipped = in.skip(skip);"], [184, "                        if (skipped == -1) {"], [185, "                            throw new IOException(\"Failed to skip\");"], [186, "                        }"], [187, "                        skip -= skipped;"], [188, "                    }"], [191, "        } finally {"], [192, "            in.close();"], [193, "        }"], [195, "        assertTrue(\"Control files not found in the package\", controlFound);"]]}, "num_lines_added": 35, "num_lines_removed": 90}