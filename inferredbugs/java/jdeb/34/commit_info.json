{"hash": "1cf6bcc19119fed9db5687e458a9fe435e22aef2", "message": "Simplified the tests checking the content of the generated packages", "file_num_lines": 180, "diff_parsed": {"added": [[16, ""], [19, "import java.io.ByteArrayInputStream;"], [26, "import java.util.concurrent.atomic.AtomicBoolean;"], [31, "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;"], [32, "import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;"], [38, "import org.vafer.jdeb.ArchiveVisitor;"], [39, "import org.vafer.jdeb.ArchiveWalker;"], [40, "import org.vafer.jdeb.Compression;"], [191, "        ArchiveWalker.walkData(deb, new ArchiveVisitor<TarArchiveEntry>() {"], [192, "            public void visit(TarArchiveEntry entry, byte[] content) throws IOException {"], [193, "                assertTrue(\"prefix\", entry.getName().startsWith(\"./foo/\"));"], [194, "                if (entry.isDirectory()) {"], [195, "                    assertEquals(\"directory mode (\" + entry.getName() + \")\", 040700, entry.getMode());"], [196, "                } else {"], [197, "                    assertEquals(\"file mode (\" + entry.getName() + \")\", 0100600, entry.getMode());"], [199, "                assertEquals(\"user\", \"ebourg\", entry.getUserName());"], [200, "                assertEquals(\"group\", \"ebourg\", entry.getGroupName());"], [202, "        }, Compression.GZIP);"], [220, "        final AtomicBoolean found = new AtomicBoolean(false);"], [221, ""], [223, "        ArchiveWalker.walk(in, new ArchiveVisitor<ArArchiveEntry>() {"], [224, "            public void visit(ArArchiveEntry entry, byte[] content) throws IOException {"], [225, "                if (entry.getName().equals(\"data.tar.bz2\")) {"], [226, "                    found.set(true);"], [228, "                    assertEquals(\"header 0\", (byte) 'B', content[0]);"], [229, "                    assertEquals(\"header 1\", (byte) 'Z', content[1]);"], [231, "                    TarInputStream tar = new TarInputStream(new BZip2CompressorInputStream(new ByteArrayInputStream(content)));"], [232, "                    while ((tar.getNextEntry()) != null) ;"], [233, "                    tar.close();"], [236, "        });"], [237, ""], [238, "        assertTrue(\"bz2 file not found\", found.get());"], [247, "        final AtomicBoolean found = new AtomicBoolean(false);"], [248, ""], [249, "        ArchiveWalker.walkData(deb, new ArchiveVisitor<TarArchiveEntry>() {"], [250, "            public void visit(TarArchiveEntry entry, byte[] content) throws IOException {"], [251, "                found.set(true);"], [253, "        }, Compression.NONE);"], [255, "        assertTrue(\"tar file not found\", found.get());"]], "deleted": [[24, "import java.util.zip.GZIPInputStream;"], [33, "import org.apache.tools.bzip2.CBZip2InputStream;"], [34, "import org.apache.tools.tar.TarEntry;"], [36, "import org.vafer.jdeb.ar.NonClosingInputStream;"], [187, "        ArArchiveInputStream in = new ArArchiveInputStream(new FileInputStream(deb));"], [188, "        ArArchiveEntry entry;"], [189, "        while ((entry = in.getNextArEntry()) != null) {"], [190, "            if (entry.getName().equals(\"data.tar.gz\")) {"], [191, "                TarInputStream tar = new TarInputStream(new GZIPInputStream(new NonClosingInputStream(in)));"], [192, "                TarEntry tarentry;"], [193, "                while ((tarentry = tar.getNextEntry()) != null) {"], [194, "                    assertTrue(\"prefix\", tarentry.getName().startsWith(\"./foo/\"));"], [195, "                    if (tarentry.isDirectory()) {"], [196, "                        assertEquals(\"directory mode (\" + tarentry.getName() + \")\", 040700, tarentry.getMode());"], [197, "                    } else {"], [198, "                        assertEquals(\"file mode (\" + tarentry.getName() + \")\", 0100600, tarentry.getMode());"], [199, "                    }"], [200, "                    assertEquals(\"user\", \"ebourg\", tarentry.getUserName());"], [201, "                    assertEquals(\"group\", \"ebourg\", tarentry.getGroupName());"], [202, "                }"], [203, "                tar.close();"], [204, "            } else {"], [205, "                // skip to the next entry"], [206, "                long skip = entry.getLength();"], [207, "                while (skip > 0) {"], [208, "                    long skipped = in.skip(skip);"], [209, "                    if (skipped == -1) {"], [210, "                        throw new IOException(\"Failed to skip\");"], [211, "                    }"], [212, "                    skip -= skipped;"], [215, "        }"], [216, "        in.close();"], [234, "        boolean found = false;"], [235, ""], [237, "        ArArchiveEntry entry;"], [238, "        while ((entry = in.getNextArEntry()) != null) {"], [239, "            if (entry.getName().equals(\"data.tar.bz2\")) {"], [240, "                found = true;"], [242, "                assertEquals(\"header 0\", (byte) 'B', in.read());"], [243, "                assertEquals(\"header 1\", (byte) 'Z', in.read());"], [245, "                TarInputStream tar = new TarInputStream(new CBZip2InputStream(in));"], [246, "                while ((tar.getNextEntry()) != null) {"], [247, "                    ;"], [248, "                }"], [249, "                tar.close();"], [250, "                break;"], [251, "            } else {"], [252, "                // skip to the next entry"], [253, "                long skip = entry.getLength();"], [254, "                while (skip > 0) {"], [255, "                    long skipped = in.skip(skip);"], [256, "                    if (skipped == -1) {"], [257, "                        throw new IOException(\"Failed to skip\");"], [258, "                    }"], [259, "                    skip -= skipped;"], [262, "        }"], [263, "        in.close();"], [264, ""], [265, "        assertTrue(\"bz2 file not found\", found);"], [274, "        boolean found = false;"], [275, ""], [276, "        ArArchiveInputStream in = new ArArchiveInputStream(new FileInputStream(deb));"], [277, "        ArArchiveEntry entry;"], [278, "        while ((entry = in.getNextArEntry()) != null) {"], [279, "            if (entry.getName().equals(\"data.tar\")) {"], [280, "                found = true;"], [281, ""], [282, "                TarInputStream tar = new TarInputStream(new NonClosingInputStream(in));"], [283, "                while ((tar.getNextEntry()) != null) {"], [284, "                    ;"], [285, "                }"], [286, "                tar.close();"], [287, "            } else {"], [288, "                // skip to the next entry"], [289, "                long skip = entry.getLength();"], [290, "                while (skip > 0) {"], [291, "                    long skipped = in.skip(skip);"], [292, "                    if (skipped == -1) {"], [293, "                        throw new IOException(\"Failed to skip\");"], [294, "                    }"], [295, "                    skip -= skipped;"], [296, "                }"], [298, "        }"], [299, "        in.close();"], [301, "        assertTrue(\"tar file not found\", found);"]]}, "num_lines_added": 39, "num_lines_removed": 85}