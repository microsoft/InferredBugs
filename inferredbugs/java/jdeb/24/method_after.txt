    public void makeDeb() throws PackagingException {

        if (control == null || !control.isDirectory()) {
            throw new PackagingException(
                "\"" + control + "\" is not a valid 'control' directory)");
        }

        if (changesIn != null) {

            if (!changesIn.isFile() || !changesIn.canRead()) {
                throw new PackagingException(
                        "The 'changesIn' setting needs to point to a readable file. "
                                + changesIn + " was not found/readable.");
            }

            if (changesOut == null) {
                throw new PackagingException(
                        "A 'changesIn' without a 'changesOut' does not make much sense.");
            }

            if (!isPossibleOutput(changesOut)) {
                throw new PackagingException(
                        "Cannot write the output for 'changesOut' to "
                                + changesOut);
            }

            if (changesSave != null && !isPossibleOutput(changesSave)) {
                throw new PackagingException(
                        "Cannot write the output for 'changesSave' to "
                                + changesSave);
            }

        } else {
            if (changesOut != null || changesSave != null) {
                throw new PackagingException(
                        "The 'changesOut' or 'changesSave' settings may only be used when there is a 'changesIn' specified.");
            }
        }

        if (!"gzip".equals(compression) && !"bzip2".equals(compression)
                && !"none".equals(compression)) {
            throw new PackagingException("The compression method '"
                    + compression + "' is not supported");
        }

        if (dataProducers.size() == 0) {
            throw new PackagingException(
                    "You need to provide at least one reference to a tgz or directory with data.");
        }

        if (deb == null) {
            throw new PackagingException(
                    "You need to specify where the deb file is supposed to be created.");
        }

        final File[] controlFiles = control.listFiles();

        final DataProducer[] data = new DataProducer[dataProducers.size()];
        dataProducers.toArray(data);

        final Processor processor = new Processor(console, variableResolver);

        final PackageDescriptor packageDescriptor;
        try {

            console.println("Creating debian package: " + deb);

            packageDescriptor = processor.createDeb(controlFiles, data, deb, compression);

        } catch (Exception e) {
            throw new PackagingException("Failed to create debian package " + deb, e);
        }

        final TextfileChangesProvider changesProvider;

        try {
            if (changesOut == null) {
                return;
            }

            console.println("Creating changes file: " + changesOut);

            // for now only support reading the changes form a textfile provider
            changesProvider = new TextfileChangesProvider(new FileInputStream(changesIn), packageDescriptor);

            processor.createChanges(packageDescriptor, changesProvider,
                    (keyring != null) ? new FileInputStream(keyring) : null,
                    key, passphrase, new FileOutputStream(changesOut));

        } catch (Exception e) {
            throw new PackagingException(
                    "Failed to create debian changes file " + changesOut, e);
        }

        try {
            if (changesSave == null) {
                return;
            }

            console.println("Saving changes to file: " + changesSave);

            changesProvider.save(new FileOutputStream(changesSave));

        } catch (Exception e) {
            throw new PackagingException("Failed to save debian changes file " + changesSave, e);
        }

    }