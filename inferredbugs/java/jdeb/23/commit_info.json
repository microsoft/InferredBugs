{"hash": "6659e1cce0f82ee1e0d7e762cc952041334d5055", "message": "major cleanup of the mojo,\nsupport patterns in all parameters,\nfor use commmon compress for decompression (support for gz and bzip2),\nfor now compression type only derived from extension (commons compress 1.1 will fix that)", "file_num_lines": 91, "diff_parsed": {"added": [[18, "import java.io.BufferedInputStream;"], [24, "import org.apache.commons.compress.archivers.ArchiveEntry;"], [25, "import org.apache.commons.compress.archivers.ArchiveException;"], [26, "import org.apache.commons.compress.archivers.ArchiveInputStream;"], [27, "import org.apache.commons.compress.archivers.ArchiveStreamFactory;"], [28, "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;"], [29, "import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;"], [30, "import org.apache.commons.compress.compressors.CompressorException;"], [31, "import org.apache.commons.compress.compressors.CompressorInputStream;"], [32, "import org.apache.commons.compress.compressors.CompressorStreamFactory;"], [54, "    \tInputStream is = new BufferedInputStream(new FileInputStream(archive));"], [55, ""], [56, "    \tCompressorInputStream compressorInputStream = null;"], [57, ""], [58, "    \ttry {"], [59, "    \t\t// FIXME remove once commons 1.1 is out"], [60, ""], [61, "    \t\tfinal String fn = archive.getName();"], [62, "    \t\tif (fn.endsWith(\"gz\")) {"], [63, "    \t\t\tcompressorInputStream = new CompressorStreamFactory().createCompressorInputStream(\"gz\", is);"], [64, "    \t\t} else if (fn.endsWith(\"bz2\")){"], [65, "    \t\t\tcompressorInputStream = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is);"], [66, "    \t\t}"], [67, ""], [68, "    \t\t// compressorInputStream = new CompressorStreamFactory().createCompressorInputStream(is);"], [69, ""], [70, "    \t} catch(CompressorException e) {"], [71, "    \t}"], [72, ""], [73, "    \tif (compressorInputStream != null) {"], [74, "    \t\tis = new BufferedInputStream(compressorInputStream);"], [75, "    \t}"], [76, ""], [77, "    \tArchiveInputStream archiveInputStream = null;"], [78, ""], [79, "    \ttry {"], [80, "    \t\tarchiveInputStream = new ArchiveStreamFactory().createArchiveInputStream(is);"], [81, "    \t} catch(ArchiveException e) {"], [82, "            throw new IOException(\"Unsupported archive format : \" + archive, e);"], [83, "    \t}"], [84, ""], [85, "    \tEntryConverter converter = null;"], [86, ""], [87, "    \tif (archiveInputStream instanceof TarArchiveInputStream) {"], [88, ""], [89, "    \t\tconverter = new EntryConverter() {"], [90, "    \t        public TarEntry convert(ArchiveEntry entry) {"], [91, "    \t        \tTarArchiveEntry src = (TarArchiveEntry)entry;"], [92, "\t        \t\tTarEntry dst = new TarEntry(entry.getName());"], [93, ""], [94, "\t        \t\tdst.setSize(src.getSize());"], [95, "\t        \t\tdst.setGroupName(src.getGroupName());"], [96, "\t        \t\tdst.setGroupId(src.getGroupId());"], [97, "\t        \t\tdst.setUserId(src.getUserId());"], [98, "\t        \t\tdst.setMode(src.getMode());"], [99, "\t        \t\tdst.setModTime(src.getModTime());"], [101, "\t        \t\treturn dst;"], [102, "    \t        }"], [103, "            };"], [104, ""], [105, "    \t} else {"], [106, "            throw new IOException(\"Unsupported archive format : \" + archive);"], [107, "    \t}"], [108, ""], [109, ""], [110, "        try {"], [113, "            \tArchiveEntry archiveEntry = archiveInputStream.getNextEntry();"], [115, "                if (archiveEntry == null) {"], [119, "                if (!isIncluded(archiveEntry.getName())) {"], [123, "                TarEntry entry = converter.convert(archiveEntry);"], [124, ""], [141, "    private interface EntryConverter {"], [142, "        public TarEntry convert(ArchiveEntry entry);"], [143, "    }"]], "deleted": [[22, "import java.io.PushbackInputStream;"], [23, "import java.util.zip.GZIPInputStream;"], [25, "import org.apache.tools.bzip2.CBZip2InputStream;"], [27, "import org.apache.tools.tar.TarInputStream;"], [48, "        TarInputStream archiveInputStream = null;"], [49, "        try {"], [50, "            archiveInputStream = new TarInputStream(getCompressedInputStream(new FileInputStream(archive)));"], [54, "                TarEntry entry = archiveInputStream.getNextEntry();"], [56, "                if (entry == null) {"], [60, "                if (!isIncluded(entry.getName())) {"], [79, ""], [80, ""], [81, "    /**"], [82, "     * TODO: replace by commons compress"], [83, "     *"], [84, "     * Guess the compression used by looking at the first bytes of the stream."], [85, "     */"], [86, "    private InputStream getCompressedInputStream(InputStream in) throws IOException {"], [87, ""], [88, "        PushbackInputStream pin = new PushbackInputStream(in, 2);"], [89, "        byte[] header = new byte[2];"], [90, "        if (pin.read(header) != header.length) {"], [91, "            throw new IOException(\"Could not read header\");"], [92, "        }"], [93, ""], [94, "        if (header[0] == (byte) 0x1f && header[1] == (byte) 0x8b) {"], [95, "            pin.unread(header);"], [96, "            return new GZIPInputStream(pin);"], [97, "        } else if (header[0] == 'B' && header[1] == 'Z') {"], [98, "            return new CBZip2InputStream(pin);"], [99, "        } else {"], [100, "            throw new IOException(\"Unsupported archive format : \" + archive);"], [101, "        }"], [102, "    }"]]}, "num_lines_added": 74, "num_lines_removed": 34}