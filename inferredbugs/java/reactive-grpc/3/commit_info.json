{"hash": "fe2a93fcf6bf0bfa2e55586a4a44f5eeb55333de", "message": "Change the way to detect back-pressure occurence in rxgrpc test", "file_num_lines": 148, "diff_parsed": {"added": [[19, "import io.reactivex.observers.TestObserver;"], [20, "import io.reactivex.subscribers.TestSubscriber;"], [28, "import java.util.concurrent.atomic.AtomicLong;"], [29, "import java.util.stream.IntStream;"], [35, "    private static final int NUMBER_OF_STREAM_ELEMENTS = 200;"], [36, ""], [37, "    private static AtomicLong clientLastValueTime;"], [38, "    private static AtomicLong serverLastValueTime;"], [39, "    private static AtomicLong clientNbOfWaits;"], [40, "    private static AtomicLong serverNumberOfWaits;"], [41, ""], [52, "                        .doOnNext(i -> System.out.println(\"    --> \" + i))"], [53, "                        .doOnNext(i -> waitIfValuesAreEqual(i, 3))"], [61, "                        .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)"], [63, "                        .doOnNext(i -> updateNumberOfWaits(serverLastValueTime, serverNumberOfWaits))"], [71, "                        .doOnNext(n -> System.out.println(\"   --> \" + n))"], [72, "                        .doOnNext(n -> waitIfValuesAreEqual(n, 3))"], [73, "                        .subscribe();"], [75, "                        .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)"], [77, "                        .doOnNext(i -> updateNumberOfWaits(serverLastValueTime, serverNumberOfWaits))"], [88, "        clientLastValueTime = new AtomicLong(0);"], [89, "        clientNbOfWaits = new AtomicLong(0);"], [90, "        serverLastValueTime = new AtomicLong(0);"], [91, "        serverNumberOfWaits = new AtomicLong(0);"], [109, "                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)"], [110, "                .doOnNext(i -> System.out.println(i + \" --> \"))"], [111, "                .doOnNext(i -> updateNumberOfWaits(clientLastValueTime, clientNbOfWaits))"], [114, "        TestObserver<NumberProto.Number> rxResponse = stub.requestPressure(rxRequest).test();"], [116, "        rxResponse.awaitTerminalEvent(5, TimeUnit.SECONDS);"], [117, "        rxResponse.assertComplete()"], [118, "                .assertValue(v -> v.getNumber(0) == NUMBER_OF_STREAM_ELEMENTS - 1);"], [120, "        assertThat(clientNbOfWaits.get()).isEqualTo(1);"], [129, "        TestSubscriber<NumberProto.Number> rxResponse = stub.responsePressure(rxRequest)"], [130, "                .doOnNext(n -> System.out.println(n.getNumber(0) + \"  <--\"))"], [131, "                .doOnNext(n -> waitIfValuesAreEqual(n.getNumber(0), 3))"], [132, "                .test();"], [133, ""], [134, "        rxResponse.awaitTerminalEvent(5, TimeUnit.SECONDS);"], [135, "        rxResponse.assertComplete()"], [136, "                .assertValueCount(NUMBER_OF_STREAM_ELEMENTS);"], [138, "        assertThat(serverNumberOfWaits.get()).isEqualTo(1);"], [146, "                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)"], [147, "                .doOnNext(i -> System.out.println(i + \" --> \"))"], [148, "                .doOnNext(i -> updateNumberOfWaits(clientLastValueTime, clientNbOfWaits))"], [151, "        TestSubscriber<NumberProto.Number> rxResponse = stub.twoWayPressure(rxRequest)"], [152, "                .doOnNext(n -> System.out.println(n.getNumber(0) + \"  <--\"))"], [153, "                .doOnNext(n -> waitIfValuesAreEqual(n.getNumber(0), 3))"], [154, "                .test();"], [155, ""], [156, "        rxResponse.awaitTerminalEvent(5, TimeUnit.SECONDS);"], [157, "        rxResponse.assertComplete().assertValueCount(NUMBER_OF_STREAM_ELEMENTS);"], [158, ""], [159, "        assertThat(clientNbOfWaits.get()).isEqualTo(1);"], [160, "        assertThat(serverNumberOfWaits.get()).isEqualTo(1);"], [161, "    }"], [162, ""], [163, "    private static void updateNumberOfWaits(AtomicLong start, AtomicLong maxTime) {"], [164, "        Long now = System.currentTimeMillis();"], [165, "        Long startValue = start.get();"], [166, "        if (startValue != 0 && now - startValue > 1000) {"], [167, "            maxTime.incrementAndGet();"], [169, "        start.set(now);"], [170, "    }"], [172, "    private static void waitIfValuesAreEqual(int value, int other) {"], [173, "        if (value == other) {"], [174, "            try {"], [175, "                Thread.sleep(2000);"], [176, "            } catch (InterruptedException e) {"], [177, "            }"], [178, "        }"]], "deleted": [[11, "import com.salesforce.reactivegrpccommon.testing.BackpressureDetector;"], [12, "import com.salesforce.reactivegrpccommon.testing.Sequence;"], [36, "    private static final int madMultipleCutoff = 100;"], [37, "    private static BackpressureDetector serverRecBPDetector = new BackpressureDetector(madMultipleCutoff);"], [38, "    private static BackpressureDetector serverRespBPDetector = new BackpressureDetector(madMultipleCutoff);"], [39, ""], [47, "                        .doOnNext(i -> {"], [48, "                            serverRecBPDetector.tick();"], [49, "                            System.out.println(\"    --> \" + i);"], [50, "                            try { Thread.sleep(50); } catch (InterruptedException e) {}"], [51, "                        })"], [59, "                        .fromIterable(new Sequence(200, serverRespBPDetector))"], [68, "                    .subscribe("], [69, "                        n -> {"], [70, "                            serverRecBPDetector.tick();"], [71, "                            System.out.println(\"   --> \" + n);"], [72, "                            try { Thread.sleep(50); } catch (InterruptedException e) {}"], [73, "                        },"], [74, "                        Throwable::printStackTrace,"], [75, "                        () -> System.out.println(\"Server done.\")"], [76, "                    );"], [77, ""], [79, "                        .fromIterable(new Sequence(200, serverRespBPDetector))"], [91, "        serverRecBPDetector.reset();"], [92, "        serverRespBPDetector.reset();"], [107, "        Object lock = new Object();"], [108, ""], [110, "        BackpressureDetector clientBackpressureDetector = new BackpressureDetector(madMultipleCutoff);"], [111, "        Sequence seq = new Sequence(200, clientBackpressureDetector);"], [114, "                .fromIterable(seq)"], [115, "                .doOnNext(i -> System.out.println(i + \" -->\"))"], [119, "        Single<NumberProto.Number> rxResponse = stub.requestPressure(rxRequest);"], [120, ""], [121, "        rxResponse.subscribe("], [122, "                n -> {"], [123, "                    System.out.println(\"Client done. \" + n.getNumber(0));"], [124, "                    synchronized (lock) {"], [125, "                        lock.notify();"], [126, "                    }"], [127, "                },"], [128, "                t -> {"], [129, "                    t.printStackTrace();"], [130, "                    synchronized (lock) {"], [131, "                        lock.notify();"], [132, "                    }"], [133, "                });"], [134, ""], [135, "        synchronized (lock) {"], [136, "            lock.wait(TimeUnit.SECONDS.toMillis(20));"], [137, "        }"], [139, "        assertThat(clientBackpressureDetector.backpressureDelayOcurred()).isTrue();"], [144, "        Object lock = new Object();"], [145, "        BackpressureDetector clientBackpressureDetector = new BackpressureDetector(madMultipleCutoff);"], [146, ""], [151, "        Flowable<NumberProto.Number> rxResponse = stub.responsePressure(rxRequest);"], [152, "        rxResponse.subscribe("], [153, "                n -> {"], [154, "                    clientBackpressureDetector.tick();"], [155, "                    System.out.println(n.getNumber(0) + \"  <--\");"], [156, "                    try { Thread.sleep(50); } catch (InterruptedException e) {}"], [157, "                },"], [158, "                t -> {"], [159, "                    t.printStackTrace();"], [160, "                    synchronized (lock) {"], [161, "                        lock.notify();"], [162, "                    }"], [163, "                },"], [164, "                () -> {"], [165, "                    System.out.println(\"Client done.\");"], [166, "                    synchronized (lock) {"], [167, "                        lock.notify();"], [168, "                    }"], [169, "                });"], [170, ""], [171, "        synchronized (lock) {"], [172, "            lock.wait(TimeUnit.SECONDS.toMillis(20));"], [173, "        }"], [175, "        assertThat(serverRespBPDetector.backpressureDelayOcurred()).isTrue();"], [180, "        Object lock = new Object();"], [181, "        BackpressureDetector clientReqBPDetector = new BackpressureDetector(madMultipleCutoff);"], [182, "        BackpressureDetector clientRespBPDetector = new BackpressureDetector(madMultipleCutoff);"], [183, ""], [187, "                .fromIterable(new Sequence(180, clientReqBPDetector))"], [188, "                .doOnNext(i -> System.out.println(i + \" -->\"))"], [191, "        Flowable<NumberProto.Number> rxResponse = stub.twoWayPressure(rxRequest);"], [192, ""], [193, "        rxResponse.subscribe("], [194, "                n -> {"], [195, "                    clientRespBPDetector.tick();"], [196, "                    System.out.println(\"               \" + n.getNumber(0) + \"  <--\");"], [197, "                    try { Thread.sleep(50); } catch (InterruptedException e) {}"], [198, "                },"], [199, "                t -> {"], [200, "                    t.printStackTrace();"], [201, "                    synchronized (lock) {"], [202, "                        lock.notify();"], [203, "                    }"], [204, "                },"], [205, "                () -> {"], [206, "                    System.out.println(\"Client done.\");"], [207, "                    synchronized (lock) {"], [208, "                        lock.notify();"], [209, "                    }"], [210, "                });"], [211, ""], [212, "        synchronized (lock) {"], [213, "            lock.wait(TimeUnit.SECONDS.toMillis(20));"], [216, "        assertThat(clientReqBPDetector.backpressureDelayOcurred()).isTrue();"], [217, "        assertThat(serverRespBPDetector.backpressureDelayOcurred()).isTrue();"]]}, "num_lines_added": 70, "num_lines_removed": 109}