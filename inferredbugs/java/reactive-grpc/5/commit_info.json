{"hash": "ff46969e8523abed9e430ec71a41539677948c7b", "message": "Improve Reactor back-pressure test stability", "file_num_lines": 150, "diff_parsed": {"added": [[23, "import reactor.test.StepVerifier;"], [25, "import java.time.Duration;"], [27, "import java.util.concurrent.atomic.AtomicLong;"], [28, "import java.util.stream.IntStream;"], [34, "    private static final int NUMBER_OF_STREAM_ELEMENTS = 270;"], [35, ""], [36, "    private static AtomicLong lastValueTime;"], [37, "    private static AtomicLong numberOfWaits;"], [38, ""], [49, "                        .doOnNext(i -> System.out.println(\"    --> \" + i))"], [50, "                        .doOnNext(i -> waitIfValuesAreEqual(i, 3))"], [58, "                        .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)"], [60, "                        .doOnNext(i -> updateNumberOfWaits(lastValueTime, numberOfWaits))"], [65, "            public Flux<NumberProto.Number> twoWayRequestPressure(Flux<NumberProto.Number> request) {"], [66, "                return requestPressure(request).flux();"], [67, "            }"], [69, "            @Override"], [70, "            public Flux<NumberProto.Number> twoWayResponsePressure(Flux<NumberProto.Number> request) {"], [71, "                request.subscribe();"], [72, "                return responsePressure(null);"], [82, "        lastValueTime = new AtomicLong(0);"], [83, "        numberOfWaits = new AtomicLong(0);"], [101, "                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)"], [102, "                .doOnNext(i -> System.out.println(i + \" --> \"))"], [103, "                .doOnNext(i -> updateNumberOfWaits(lastValueTime, numberOfWaits))"], [108, "        StepVerifier.create(reactorResponse)"], [109, "                .expectNextMatches(v -> v.getNumber(0) == NUMBER_OF_STREAM_ELEMENTS - 1)"], [110, "                .expectComplete()"], [111, "                .verify(Duration.ofSeconds(5));"], [113, "        assertThat(numberOfWaits.get()).isEqualTo(1);"], [122, "        Flux<NumberProto.Number> reactorResponse = stub.responsePressure(reactorRequest)"], [123, "                .doOnNext(n -> System.out.println(n.getNumber(0) + \"  <--\"))"], [124, "                .doOnNext(n -> waitIfValuesAreEqual(n.getNumber(0), 3));"], [125, ""], [126, "        StepVerifier.create(reactorResponse)"], [127, "                .expectNextCount(NUMBER_OF_STREAM_ELEMENTS)"], [128, "                .expectComplete()"], [129, "                .verify(Duration.ofSeconds(5));"], [131, "        assertThat(numberOfWaits.get()).isEqualTo(1);"], [135, "    public void bidiResponseBackpressure() throws InterruptedException {"], [136, "        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(channel);"], [138, "        Flux<NumberProto.Number> reactorResponse = stub.twoWayResponsePressure(Flux.empty())"], [139, "                .doOnNext(n -> System.out.println(n.getNumber(0) + \"  <--\"))"], [140, "                .doOnNext(n -> waitIfValuesAreEqual(n.getNumber(0), 3));"], [141, ""], [142, "        StepVerifier.create(reactorResponse)"], [143, "                .expectNextCount(NUMBER_OF_STREAM_ELEMENTS)"], [144, "                .expectComplete()"], [145, "                .verify(Duration.ofSeconds(5));"], [146, ""], [147, "        assertThat(numberOfWaits.get()).isEqualTo(1);"], [148, "    }"], [149, ""], [150, "    @Test"], [151, "    public void bidiRequestBackpressure() throws InterruptedException {"], [155, "                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)"], [156, "                .doOnNext(i -> System.out.println(i + \" --> \"))"], [157, "                .doOnNext(i -> updateNumberOfWaits(lastValueTime, numberOfWaits))"], [160, "        Flux<NumberProto.Number> reactorResponse = stub.twoWayRequestPressure(reactorRequest);"], [161, ""], [162, "        StepVerifier.create(reactorResponse)"], [163, "                .expectNextMatches(v -> v.getNumber(0) == NUMBER_OF_STREAM_ELEMENTS - 1)"], [164, "                .expectComplete()"], [165, "                .verify(Duration.ofSeconds(5));"], [166, ""], [167, "        assertThat(numberOfWaits.get()).isEqualTo(1);"], [168, "    }"], [169, ""], [170, ""], [171, "    private static void updateNumberOfWaits(AtomicLong start, AtomicLong maxTime) {"], [172, "        Long now = System.currentTimeMillis();"], [173, "        Long startValue = start.get();"], [174, "        if (startValue != 0 && now - startValue > 1000) {"], [175, "            maxTime.incrementAndGet();"], [177, "        start.set(now);"], [178, "    }"], [180, "    private static void waitIfValuesAreEqual(int value, int other) {"], [181, "        if (value == other) {"], [182, "            try {"], [183, "                Thread.sleep(3000);"], [184, "            } catch (InterruptedException e) {"], [185, "            }"], [186, "        }"]], "deleted": [[11, "import com.salesforce.reactivegrpccommon.testing.BackpressureDetector;"], [12, "import com.salesforce.reactivegrpccommon.testing.Sequence;"], [27, "import java.util.concurrent.TimeUnit;"], [36, "    private static final int madMultipleCutoff = 100;"], [37, "    private static BackpressureDetector serverRecBPDetector = new BackpressureDetector(madMultipleCutoff);"], [38, "    private static BackpressureDetector serverRespBPDetector = new BackpressureDetector(madMultipleCutoff);"], [39, ""], [47, "                        .doOnNext(i -> {"], [48, "                            serverRecBPDetector.tick();"], [49, "                            System.out.println(\"    --> \" + i);"], [50, "                            try { Thread.sleep(50); } catch (InterruptedException e) {}"], [51, "                        })"], [59, "                        .fromIterable(new Sequence(200, serverRespBPDetector))"], [65, "            public Flux<NumberProto.Number> twoWayPressure(Flux<NumberProto.Number> request) {"], [66, "                request"], [67, "                    .map(proto -> proto.getNumber(0))"], [68, "                    .subscribe("], [69, "                        n -> {"], [70, "                            serverRecBPDetector.tick();"], [71, "                            System.out.println(\"   --> \" + n);"], [72, "                            try { Thread.sleep(50); } catch (InterruptedException e) {}"], [73, "                        },"], [74, "                        Throwable::printStackTrace,"], [75, "                        () -> System.out.println(\"Server done.\")"], [76, "                    );"], [78, "                return Flux"], [79, "                        .fromIterable(new Sequence(200, serverRespBPDetector))"], [80, "                        .doOnNext(i -> System.out.println(\"                  <-- \" + i))"], [81, "                        .map(BackpressureIntegrationTest::protoNum);"], [91, "        serverRecBPDetector.reset();"], [92, "        serverRespBPDetector.reset();"], [107, "        Object lock = new Object();"], [108, ""], [110, "        BackpressureDetector clientBackpressureDetector = new BackpressureDetector(madMultipleCutoff);"], [111, "        Sequence seq = new Sequence(200, clientBackpressureDetector);"], [114, "                .fromIterable(seq)"], [115, "                .doOnNext(i -> System.out.println(i + \" -->\"))"], [118, ""], [121, "        reactorResponse.subscribe("], [122, "                n -> {"], [123, "                    System.out.println(\"Client done. \" + n.getNumber(0));"], [124, "                    synchronized (lock) {"], [125, "                        lock.notify();"], [126, "                    }"], [127, "                },"], [128, "                t -> {"], [129, "                    t.printStackTrace();"], [130, "                    synchronized (lock) {"], [131, "                        lock.notify();"], [132, "                    }"], [133, "                });"], [134, ""], [135, "        synchronized (lock) {"], [136, "            lock.wait(TimeUnit.SECONDS.toMillis(20));"], [137, "        }"], [139, "        assertThat(clientBackpressureDetector.backpressureDelayOcurred()).isTrue();"], [144, "        Object lock = new Object();"], [145, "        BackpressureDetector clientBackpressureDetector = new BackpressureDetector(madMultipleCutoff);"], [146, ""], [151, "        Flux<NumberProto.Number> reactorResponse = stub.responsePressure(reactorRequest);"], [152, "        reactorResponse.subscribe("], [153, "                n -> {"], [154, "                    clientBackpressureDetector.tick();"], [155, "                    System.out.println(n.getNumber(0) + \"  <--\");"], [156, "                    try { Thread.sleep(50); } catch (InterruptedException e) {}"], [157, "                },"], [158, "                t -> {"], [159, "                    t.printStackTrace();"], [160, "                    synchronized (lock) {"], [161, "                        lock.notify();"], [162, "                    }"], [163, "                },"], [164, "                () -> {"], [165, "                    System.out.println(\"Client done.\");"], [166, "                    synchronized (lock) {"], [167, "                        lock.notify();"], [168, "                    }"], [169, "                });"], [170, ""], [171, "        synchronized (lock) {"], [172, "            lock.wait(TimeUnit.SECONDS.toMillis(20));"], [173, "        }"], [175, "        assertThat(serverRespBPDetector.backpressureDelayOcurred()).isTrue();"], [179, "    public void bidiBackpressure() throws InterruptedException {"], [180, "        Object lock = new Object();"], [181, "        BackpressureDetector clientReqBPDetector = new BackpressureDetector(madMultipleCutoff);"], [182, "        BackpressureDetector clientRespBPDetector = new BackpressureDetector(madMultipleCutoff);"], [187, "                .fromIterable(new Sequence(180, clientReqBPDetector))"], [188, "                .doOnNext(i -> System.out.println(i + \" -->\"))"], [191, "        Flux<NumberProto.Number> reactorResponse = stub.twoWayPressure(reactorRequest);"], [192, ""], [193, "        reactorResponse.subscribe("], [194, "                n -> {"], [195, "                    clientRespBPDetector.tick();"], [196, "                    System.out.println(\"               \" + n.getNumber(0) + \"  <--\");"], [197, "                    try { Thread.sleep(50); } catch (InterruptedException e) {}"], [198, "                },"], [199, "                t -> {"], [200, "                    t.printStackTrace();"], [201, "                    synchronized (lock) {"], [202, "                        lock.notify();"], [203, "                    }"], [204, "                },"], [205, "                () -> {"], [206, "                    System.out.println(\"Client done.\");"], [207, "                    synchronized (lock) {"], [208, "                        lock.notify();"], [209, "                    }"], [210, "                });"], [211, ""], [212, "        synchronized (lock) {"], [213, "            lock.wait(TimeUnit.SECONDS.toMillis(20));"], [216, "        assertThat(clientReqBPDetector.backpressureDelayOcurred()).isTrue();"], [217, "        assertThat(serverRespBPDetector.backpressureDelayOcurred()).isTrue();"]]}, "num_lines_added": 83, "num_lines_removed": 114}