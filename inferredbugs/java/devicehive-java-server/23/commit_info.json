{"hash": "8d5b650d44b073d4f3a1638b96874d52de4f03bf", "message": "kafka server client rpc communication unit tests", "file_num_lines": 133, "diff_parsed": {"added": [[11, "import com.devicehive.shim.kafka.rule.RequestHandlerWrapper;"], [16, "import org.junit.AfterClass;"], [17, "import org.junit.BeforeClass;"], [26, "import static org.junit.Assert.*;"], [36, "    private static RpcServer server;"], [37, "    private static RpcClient client;"], [39, "    private static RequestHandlerWrapper handlerWrapper = new RequestHandlerWrapper();"], [41, "    @BeforeClass"], [42, "    public static void setUp() throws Exception {"], [43, "        Properties serverConsumerProps = kafkaRule.getConsumerProperties();"], [45, "        Properties serverProducerProps = kafkaRule.getProducerProperties();"], [48, "        Properties clientProducerProps = kafkaRule.getProducerProperties();"], [50, "        Properties clientConsumerProps = kafkaRule.getConsumerProperties();"], [53, "        server = new ServerBuilder()"], [58, "                .withRequestHandler(handlerWrapper)"], [61, "        server.start();"], [63, "        client = new ClientBuilder()"], [70, "        client.start();"], [71, "        TimeUnit.SECONDS.sleep(10);"], [72, "    }"], [73, ""], [74, "    @AfterClass"], [75, "    public static void tearDown() throws Exception {"], [76, "        if (client != null) {"], [77, "            client.shutdown();"], [78, "        }"], [79, "        if (server != null) {"], [80, "            server.shutdown();"], [81, "        }"], [87, "        RequestHandler handler = request -> {"], [95, "        handlerWrapper.setDelegate(handler);"], [97, "        Request request = Request.newBuilder()"], [98, "                .withCorrelationId(UUID.randomUUID().toString())"], [99, "                .withSingleReply(true)"], [100, "                .withBody(\"RequestResponseTest\".getBytes())"], [101, "                .build();"], [103, "        client.push(request);"], [104, ""], [105, "        Request receivedRequest = future.get(10, TimeUnit.SECONDS);"], [106, "        assertEquals(request, receivedRequest);"], [107, "    }"], [108, ""], [109, "    @Test"], [110, "    public void shouldSuccessfullyReplyToRequest() throws Exception {"], [111, "        RequestHandler handler = request -> Response.newBuilder()"], [112, "                .withCorrelationId(request.getCorrelationId())"], [113, "                .withBody(\"ResponseFromServer\".getBytes())"], [114, "                .withLast(true)"], [115, "                .buildSuccess();"], [116, "        handlerWrapper.setDelegate(handler);"], [124, "        CompletableFuture<Response> future = new CompletableFuture<>();"], [125, "        client.call(request, future::complete);"], [127, "        Response response = future.get(10, TimeUnit.SECONDS);"], [128, "        assertNotNull(response);"], [129, "        assertEquals(request.getCorrelationId(), response.getCorrelationId());"], [130, "        assertEquals(\"ResponseFromServer\", new String(response.getBody()));"], [131, "        assertTrue(response.isLast());"], [132, "        assertFalse(response.isFailed());"], [133, "    }"], [135, "    @Test"], [136, "    public void shouldSendErrorToClient() throws Exception {"], [137, "        RequestHandler handler = request -> {"], [138, "            throw new RuntimeException(\"Something went wrong\");"], [139, "        };"], [140, "        handlerWrapper.setDelegate(handler);"], [141, ""], [142, "        Request request = Request.newBuilder()"], [143, "                .withCorrelationId(UUID.randomUUID().toString())"], [144, "                .withSingleReply(true)"], [145, "                .withBody(\"RequestResponseTest\".getBytes())"], [146, "                .build();"], [147, ""], [148, "        CompletableFuture<Response> future = new CompletableFuture<>();"], [149, "        client.call(request, future::complete);"], [150, ""], [151, "        Response response = future.get(10, TimeUnit.SECONDS);"], [152, "        assertNotNull(response);"], [153, "        assertEquals(request.getCorrelationId(), response.getCorrelationId());"], [154, "        assertTrue(response.isLast());"], [155, "        assertTrue(response.isFailed());"], [156, "        assertTrue(new String(response.getBody()).contains(RuntimeException.class.getName() + \": Something went wrong\"));"]], "deleted": [[15, "import org.junit.Before;"], [24, "import static org.junit.Assert.assertEquals;"], [34, "    private Properties serverConsumerProps;"], [35, "    private Properties serverProducerProps;"], [37, "    private Properties clientProducerProps;"], [38, "    private Properties clientConsumerProps;"], [40, "    @Before"], [41, "    public void setUp() throws Exception {"], [42, "        serverConsumerProps = kafkaRule.getConsumerProperties();"], [44, "        serverProducerProps = kafkaRule.getProducerProperties();"], [47, "        clientProducerProps = kafkaRule.getProducerProperties();"], [49, "        clientConsumerProps = kafkaRule.getConsumerProperties();"], [51, "    }"], [53, "    private RpcServer buildServer(RequestHandler requestHandler) {"], [54, "        return new ServerBuilder()"], [59, "                .withRequestHandler(requestHandler)"], [62, "    }"], [64, "    private RpcClient buildClient() {"], [65, "        return new ClientBuilder()"], [77, "        RequestHandler mockedHandler = request -> {"], [86, "        RpcServer server = buildServer(mockedHandler);"], [87, "        server.start();"], [89, "        RpcClient client = buildClient();"], [90, "        client.start();"], [98, "        TimeUnit.SECONDS.sleep(10);"], [100, "        client.push(request);"], [102, "        Request receivedRequest = future.get(20, TimeUnit.SECONDS);"], [103, "        assertEquals(request, receivedRequest);"]]}, "num_lines_added": 81, "num_lines_removed": 28}