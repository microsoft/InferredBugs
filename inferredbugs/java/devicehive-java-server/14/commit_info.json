{"hash": "0afbf2404c67eb54fd2bee0e52d46a1dd6fad9b7", "message": "Fixed getList method in UserDaoImpl for riak", "file_num_lines": 277, "diff_parsed": {"added": [[21, "import com.devicehive.model.enums.UserRole;"], [47, "    private final Map<String, String> sortMap = new HashMap<>();"], [48, ""], [49, "    public UserDaoImpl() {"], [50, "        sortMap.put(\"login\", \"function(a,b){ return a.login %s b.login; }\");"], [51, "        sortMap.put(\"role\", \"function(a,b){ return a.role %s b.role; }\");"], [52, "        sortMap.put(\"status\", \"function(a,b){ return a.status %s b.status; }\");"], [53, "        sortMap.put(\"lastLogin\", \"function(a,b){ return a.lastLogin %s b.lastLogin; }\");"], [54, "        sortMap.put(\"googleLogin\", \"function(a,b){ return a.googleLogin %s b.googleLogin; }\");"], [55, "        sortMap.put(\"facebookLogin\", \"function(a,b){ return a.facebookLogin %s b.facebookLogin; }\");"], [56, "        sortMap.put(\"githubLogin\", \"function(a,b){ return a.githubLogin %s b.githubLogin; }\");"], [57, "        sortMap.put(\"entityVersion\", \"function(a,b){ return a.entityVersion %s b.entityVersion; }\");"], [58, "    }"], [59, ""], [82, "        if (name == null) {"], [83, "            return null;"], [84, "        }"], [165, "        if (networkIds == null) {"], [166, "            return user;"], [167, "        }"], [231, ""], [232, ""], [241, "                String sortFunction = sortMap.get(sortField);"], [242, "                if (sortFunction == null) {"], [243, "                    sortFunction = sortMap.get(\"login\");"], [244, "                }"], [245, "                if (sortOrderAsc == null) {"], [246, "                    sortOrderAsc = true;"], [247, "                }"], [248, "                BucketMapReduce.Builder builder = new BucketMapReduce.Builder()"], [249, "                        .withNamespace(USER_NS)"], [250, "                        .withMapPhase(Function.newNamedJsFunction(\"Riak.mapValuesJson\"));"], [251, ""], [252, "                if (loginPattern != null) {"], [253, "                    loginPattern = loginPattern.replace(\"%\", \"\");"], [254, "                    String functionString = String.format("], [255, "                        \"function(values, arg) {\" +"], [256, "                            \"return values.filter(function(v) {\" +"], [257, "                                \"var login = v.login;\" +"], [258, "                                \"var match = login.indexOf('%s');\" +"], [259, "                                \"return match > -1;\" +"], [260, "                            \"})\" +"], [261, "                        \"}\", loginPattern);"], [262, "                    Function reduceFunction = Function.newAnonymousJsFunction(functionString);"], [263, "                    builder.withReducePhase(reduceFunction);"], [264, "                }"], [265, ""], [266, "                if (role != null) {"], [267, "                    String roleString = UserRole.getValueForIndex(role).name();"], [268, "                    String functionString = String.format("], [269, "                            \"function(values, arg) {\" +"], [270, "                                \"return values.filter(function(v) {\" +"], [271, "                                    \"var role = v.role;\" +"], [272, "                                    \"return role == '%s';\" +"], [273, "                                \"})\" +"], [274, "                            \"}\", roleString);"], [275, "                    Function reduceFunction = Function.newAnonymousJsFunction(functionString);"], [276, "                    builder.withReducePhase(reduceFunction);"], [277, "                }"], [278, ""], [279, "                if (status != null) {"], [280, "                    String statusString = UserStatus.getValueForIndex(status).name();"], [281, "                    String functionString = String.format("], [282, "                            \"function(values, arg) {\" +"], [283, "                                \"return values.filter(function(v) {\" +"], [284, "                                    \"var status = v.status;\" +"], [285, "                                    \"return status == '%s';\" +"], [286, "                                \"})\" +"], [287, "                            \"}\", statusString);"], [288, "                    Function reduceFunction = Function.newAnonymousJsFunction(functionString);"], [289, "                    builder.withReducePhase(reduceFunction);"], [290, "                }"], [291, ""], [292, "                builder.withReducePhase(Function.newNamedJsFunction(\"Riak.reduceSort\"),"], [293, "                        String.format(sortFunction, sortOrderAsc ? \">\" : \"<\"),"], [294, "                        take == null);"], [295, ""], [296, "                if (take != null) {"], [297, "                    int[] args = new int[2];"], [298, "                    args[0] = skip != null ? skip : 0;"], [299, "                    args[1] = args[0] + take;"], [300, "                    builder.withReducePhase(Function.newNamedJsFunction(\"Riak.reduceSlice\"), args, true);"], [301, "                }"], [302, "                BucketMapReduce bmr = builder.build();"]], "deleted": [[217, "        } else if (loginPattern != null) {"], [218, "            try {"], [219, "                BucketMapReduce bmr ="], [220, "                        new BucketMapReduce.Builder()"], [221, "                                .withNamespace(USER_NS)"], [222, "                                .withMapPhase(Function.newNamedJsFunction(\"Riak.mapValuesJson\"))"], [223, "                                .withReducePhase(Function.newErlangFunction(\"riak_kv_mapreduce\", \"reduce_sort\"), true)"], [224, "                                .withKeyFilter(new MatchFilter(loginPattern))"], [225, "                                .build();"], [226, ""], [227, "                RiakFuture<MapReduce.Response, BinaryValue> future = client.executeAsync(bmr);"], [228, "                future.await();"], [229, "                MapReduce.Response response = future.get();"], [230, "                result.addAll(response.getResultsFromAllPhases(User.class));"], [231, "            } catch (InterruptedException | ExecutionException e) {"], [232, "                throw new RuntimeException(e);"], [233, "            }"], [234, "        } else if (role != null) {"], [235, "            try {"], [236, "                BucketMapReduce bmr ="], [237, "                        new BucketMapReduce.Builder()"], [238, "                                .withNamespace(USER_NS)"], [239, "                                .withMapPhase(Function.newNamedJsFunction(\"Riak.mapValuesJson\"))"], [240, "                                .withReducePhase(Function.newErlangFunction(\"riak_kv_mapreduce\", \"reduce_sort\"), true)"], [241, "                                .build();"], [242, ""], [243, "                RiakFuture<MapReduce.Response, BinaryValue> future = client.executeAsync(bmr);"], [244, "                future.await();"], [245, "                MapReduce.Response response = future.get();"], [246, "                List<User> users = response.getResultsFromAllPhases(User.class)"], [247, "                        .stream()"], [248, "                        .filter(u -> u.getRole().equals(role))"], [249, "                        .collect(Collectors.toList());"], [250, ""], [251, "                result.addAll(users);"], [252, "            } catch (InterruptedException | ExecutionException e) {"], [253, "                throw new RuntimeException(e);"], [254, "            }"], [255, "        } else if (status != null) {"], [256, "            try {"], [257, "                BucketMapReduce bmr ="], [258, "                        new BucketMapReduce.Builder()"], [259, "                                .withNamespace(USER_NS)"], [260, "                                .withMapPhase(Function.newNamedJsFunction(\"Riak.mapValuesJson\"))"], [261, "                                .withReducePhase(Function.newErlangFunction(\"riak_kv_mapreduce\", \"reduce_sort\"), true)"], [262, "                                .build();"], [263, ""], [264, "                RiakFuture<MapReduce.Response, BinaryValue> future = client.executeAsync(bmr);"], [265, "                future.await();"], [266, "                MapReduce.Response response = future.get();"], [267, "                List<User> users = response.getResultsFromAllPhases(User.class)"], [268, "                        .stream()"], [269, "                        .filter(u -> u.getStatus().getValue() == status)"], [270, "                        .collect(Collectors.toList());"], [271, ""], [272, "                result.addAll(users);"], [273, "            } catch (InterruptedException | ExecutionException e) {"], [274, "                throw new RuntimeException(e);"], [275, "            }"], [278, "                BucketMapReduce bmr ="], [279, "                        new BucketMapReduce.Builder()"], [280, "                                .withNamespace(USER_NS)"], [281, "                                .withMapPhase(Function.newNamedJsFunction(\"Riak.mapValuesJson\"))"], [282, "                                .withReducePhase(Function.newErlangFunction(\"riak_kv_mapreduce\", \"reduce_sort\"), true)"], [283, "                                .build();"]]}, "num_lines_added": 84, "num_lines_removed": 65}