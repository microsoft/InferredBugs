{"hash": "f675be17767695c9f6f34f1c46b01cc9e451931c", "message": "Fixed DeviceService test", "file_num_lines": 325, "diff_parsed": {"added": [[176, "        for (String guid : guids) {"], [177, "            Device device = findByUUID(guid);"], [178, "            if (device != null) {"], [179, "                deviceList.add(device);"], [182, "        if (principal != null && principal.getUser() != null && !principal.getRole().equals(HiveRoles.ADMIN)) {"], [183, "            Set<Long> networks = userNetworkDao.findNetworksForUser(principal.getUser().getId());"], [184, "            deviceList = deviceList"], [185, "                    .stream()"], [186, "                    .filter(d -> networks.contains(d.getNetwork().getId()))"], [187, "                    .collect(Collectors.toList());"], [188, "        } else if (principal != null && principal.getKey() != null && principal.getKey().getUser() != null) {"], [189, "            Set<Long> networks = userNetworkDao.findNetworksForUser(principal.getKey().getUser().getId());"], [190, "            deviceList = deviceList"], [191, "                    .stream()"], [192, "                    .filter(d -> networks.contains(d.getNetwork().getId()))"], [193, "                    .collect(Collectors.toList());"], [194, "        }"]], "deleted": [[176, ""], [177, "        if (principal == null || principal.getRole().equals(HiveRoles.ADMIN)) {"], [178, "            for (String guid : guids) {"], [179, "                Device device = findByUUID(guid);"], [180, "                if (device != null) {"], [181, "                    deviceList.add(device);"], [182, "                }"], [183, "            }"], [184, "        } else {"], [185, "            try {"], [186, "                BucketMapReduce.Builder builder = new BucketMapReduce.Builder()"], [187, "                        .withNamespace(DEVICE_NS)"], [188, "                        .withMapPhase(Function.newNamedJsFunction(\"Riak.mapValuesJson\"));"], [189, ""], [190, "                String functionString ="], [191, "                        \"function(values, arg) {\" +"], [192, "                                \"return values.filter(function(v) {\" +"], [193, "                                \"var guid = v.guid;\" +"], [194, "                                \"return arg.indexOf(guid) > -1;\" +"], [195, "                                \"})\" +"], [196, "                                \"}\";"], [197, "                Function reduceFunction = Function.newAnonymousJsFunction(functionString);"], [198, "                builder.withReducePhase(reduceFunction, guids.toArray());"], [199, ""], [200, "                BucketMapReduce bmr = builder.build();"], [201, "                RiakFuture<MapReduce.Response, BinaryValue> future = client.executeAsync(bmr);"], [202, "                future.await();"], [203, "                MapReduce.Response response = future.get();"], [204, "                deviceList.addAll(response.getResultsFromAllPhases(Device.class));"], [205, ""], [206, "                if (principal.getUser() != null) {"], [207, "                    Set<Long> networks = userNetworkDao.findNetworksForUser(principal.getUser().getId());"], [208, "                    deviceList = deviceList"], [209, "                            .stream()"], [210, "                            .filter(d -> networks.contains(d.getNetwork().getId()))"], [211, "                            .collect(Collectors.toList());"], [212, "                }"], [213, "            } catch (InterruptedException | ExecutionException e) {"], [214, "                logger.error(\"Exception accessing Riak Storage.\", e);"], [215, "                throw new HivePersistenceLayerException(\"Cannot get list of devices for list of UUIDs and principal.\", e);"]]}, "num_lines_added": 17, "num_lines_removed": 40}