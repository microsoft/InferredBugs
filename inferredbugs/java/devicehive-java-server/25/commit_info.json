{"hash": "ef9c0dd337ecaed75c461da8ebd47fa7f9884d31", "message": "kafka rpc server implementation changed to use lmax exchange instead of completablefuture", "file_num_lines": 31, "diff_parsed": {"added": [[5, "import com.lmax.disruptor.RingBuffer;"], [6, "import com.lmax.disruptor.dsl.Disruptor;"], [10, "    private Disruptor<ServerEvent> disruptor;"], [11, "    private RequestConsumer requestConsumer;"], [12, "    private ServerEventHandler eventHandler;"], [14, "    public KafkaRpcServer(Disruptor<ServerEvent> disruptor, RequestConsumer requestConsumer, ServerEventHandler eventHandler) {"], [15, "        this.disruptor = disruptor;"], [16, "        this.requestConsumer = requestConsumer;"], [17, "        this.eventHandler = eventHandler;"], [22, "        disruptor.handleEventsWith(eventHandler);"], [23, "        disruptor.start();"], [25, "        RingBuffer<ServerEvent> ringBuffer = disruptor.getRingBuffer();"], [26, "        requestConsumer.startConsumers(ringBuffer);"], [31, "        requestConsumer.shutdownConsumers();"], [32, "        disruptor.shutdown();"], [37, "        return eventHandler;"]], "deleted": [[3, "import com.devicehive.shim.api.Request;"], [6, "import org.apache.kafka.clients.consumer.KafkaConsumer;"], [7, "import org.slf4j.Logger;"], [8, "import org.slf4j.LoggerFactory;"], [9, ""], [10, "import java.util.ArrayList;"], [11, "import java.util.List;"], [12, "import java.util.Properties;"], [13, "import java.util.concurrent.CountDownLatch;"], [14, "import java.util.concurrent.ExecutorService;"], [15, "import java.util.concurrent.TimeUnit;"], [18, "    private static final Logger logger = LoggerFactory.getLogger(KafkaRpcServer.class);"], [19, ""], [20, "    private String topic;"], [21, "    private int consumerThreads;"], [22, "    private Properties consumerProps;"], [23, "    private ExecutorService consumerExecutor;"], [24, "    private KafkaMessageDispatcher messageDispatcher;"], [26, "    private List<RequestConsumerWorker> consumerWorkers;"], [28, "    public KafkaRpcServer(String topic, int consumerThreads, Properties consumerProps,"], [29, "                          ExecutorService consumerExecutor, KafkaMessageDispatcher messageDispatcher) {"], [30, "        this.topic = topic;"], [31, "        this.consumerThreads = consumerThreads;"], [32, "        this.consumerProps = consumerProps;"], [33, "        this.consumerExecutor = consumerExecutor;"], [34, "        this.messageDispatcher = messageDispatcher;"], [39, "        consumerWorkers = new ArrayList<>(consumerThreads);"], [40, "        CountDownLatch startupLatch = new CountDownLatch(consumerThreads);"], [41, "        for (int i = 0; i < consumerThreads; i++) {"], [42, "            KafkaConsumer<String, Request> consumer = new KafkaConsumer<>(consumerProps);"], [43, "            RequestConsumerWorker worker = new RequestConsumerWorker(topic, consumer, messageDispatcher, startupLatch);"], [44, "            consumerExecutor.submit(worker);"], [45, "        }"], [47, "        try {"], [48, "            startupLatch.await(5000, TimeUnit.MILLISECONDS);"], [49, "        } catch (InterruptedException e) {"], [50, "            logger.error(\"Error while waiting for server consumers to subscribe\", e);"], [51, "        }"], [56, "        messageDispatcher.shutdown();"], [57, "        consumerWorkers.forEach(RequestConsumerWorker::shutdown);"], [62, "        return messageDispatcher;"]]}, "num_lines_added": 16, "num_lines_removed": 41}