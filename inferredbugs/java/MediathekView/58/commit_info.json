{"hash": "0c4788a74e68f8246686e92f5f38686594f789f8", "message": "Splashscreen", "file_num_lines": 158, "diff_parsed": {"added": [[22, "import java.io.*;"], [23, "import java.nio.file.Files;"], [24, "import java.nio.file.Path;"], [41, "    public ErledigteAbos() {"], [58, "    public synchronized void alleLoeschen() {"], [60, "        try {"], [61, "            Path downloadAboFilePath = Daten.getDownloadAboFilePath();"], [62, "            if (Files.exists(downloadAboFilePath))"], [63, "                Files.delete(downloadAboFilePath);"], [64, "        } catch (IOException ignored) {"], [66, ""], [75, "        LinkedList<String> liste = new LinkedList<>();"], [76, ""], [77, "        //Use Automatic Resource Management"], [78, "        try (LineNumberReader in = new LineNumberReader(new InputStreamReader(Files.newInputStream(Daten.getDownloadAboFilePath())))){"], [82, "                } else"], [88, ""], [91, "                try (OutputStreamWriter writer = new OutputStreamWriter(Files.newOutputStream(Daten.getDownloadAboFilePath()))) {"], [92, "                    for (String entry : liste)"], [93, "                        writer.write(entry + \"\\n\");"], [100, ""], [109, ""], [110, "        //Automatic Resource Management"], [111, "        try (OutputStreamWriter writer = new OutputStreamWriter(Files.newOutputStream(Daten.getDownloadAboFilePath()))) {"], [112, "            thema = GuiFunktionen.textLaenge(25, putzen(thema), false /* mitte */, false /*addVorne*/);"], [113, "            titel = GuiFunktionen.textLaenge(30, putzen(titel), false /* mitte */, false /*addVorne*/);"], [114, "            text = DatumZeit.getHeute_dd_MM_yyyy() + PAUSE + thema + PAUSE + titel + TRENNER + url + \"\\n\";"], [115, "            writer.write(text);"], [116, ""], [117, "            ret = true;"], [118, "        } catch (Exception ex) {"], [119, "            Log.fehlerMeldung(945258023, Log.FEHLER_ART_PROG, \"LogDownload.zeileSchreiben-1\", ex);"], [121, ""], [131, ""], [132, "        try (OutputStreamWriter writer = new OutputStreamWriter(Files.newOutputStream(Daten.getDownloadAboFilePath()))) {"], [148, ""], [175, "        Path downloadAboFilePath = Daten.getDownloadAboFilePath();"], [176, "        //use Automatic Resource Management"], [177, "        try (LineNumberReader in = new LineNumberReader(new InputStreamReader(Files.newInputStream(downloadAboFilePath))))"], [178, "        {"], [179, "            String zeile;"], [180, "            while ((zeile = in.readLine()) != null)"], [181, "                listeErledigteAbos.add(getUrlAusZeile(zeile));"], [183, "            //FIXME assign new error code!"], [197, "        int a1;"], [198, ""]], "deleted": [[22, "import java.io.File;"], [23, "import java.io.FileInputStream;"], [24, "import java.io.FileOutputStream;"], [25, "import java.io.InputStreamReader;"], [26, "import java.io.LineNumberReader;"], [27, "import java.io.OutputStreamWriter;"], [32, "import mediathek.daten.DDaten;"], [36, "import mediathek.tool.Konstanten;"], [41, ""], [42, "    private DDaten ddaten;"], [48, "    public ErledigteAbos(DDaten d) {"], [49, "        ddaten = d;"], [66, "    public synchronized boolean alleLoeschen() {"], [67, "        boolean ret = false;"], [69, "        File f = new File(Daten.getBasisVerzeichnis(true) + Konstanten.LOG_DATEI_DOWNLOAD_ABOS);"], [70, "        if (f != null) {"], [71, "            if (f.exists()) {"], [72, "                ret = f.delete();"], [73, "            } else {"], [74, "                ret = true;"], [75, "            }"], [78, "        return ret;"], [86, "        LinkedList<String> liste = new LinkedList<String>();"], [87, "        LineNumberReader in = null;"], [88, "        try {"], [89, "            File file = new File(Daten.getBasisVerzeichnis(false) + Konstanten.LOG_DATEI_DOWNLOAD_ABOS);"], [90, "            if (!file.exists()) {"], [91, "                // beim Programmstart ist die Datei noch nicht da"], [92, "                gefunden = false;"], [93, "                return false;"], [94, "            }"], [95, "            in = new LineNumberReader(new InputStreamReader(new FileInputStream(file)));"], [99, "                } else {"], [101, "                }"], [103, "            in.close();"], [106, "        } finally {"], [107, "            try {"], [108, "                if (in != null) {"], [109, "                    in.close();"], [110, "                }"], [111, "            } catch (Exception ex) {"], [112, "            }"], [116, "            File f = new File(Daten.getBasisVerzeichnis(true) + Konstanten.LOG_DATEI_DOWNLOAD_ABOS);"], [117, "            if (f != null) {"], [118, "                OutputStreamWriter writer = null;"], [119, "                try {"], [120, "                    writer = new OutputStreamWriter(new FileOutputStream(f, false));"], [121, "                    Iterator<String> it = liste.iterator();"], [122, "                    while (it.hasNext()) {"], [123, "                        writer.write(it.next() + \"\\n\");"], [124, "                    }"], [125, "                    writer.close();"], [128, "                } finally {"], [129, "                    try {"], [130, "                        writer.close();"], [131, "                    } catch (Exception ex) {"], [132, "                        Log.fehlerMeldung(256648801, Log.FEHLER_ART_PROG, \"LogDownload.urlAusLogfileLoeschen-4\", ex);"], [133, "                    }"], [138, "        }"], [147, "        File f = new File(Daten.getBasisVerzeichnis(true) + Konstanten.LOG_DATEI_DOWNLOAD_ABOS);"], [148, "        if (f != null) {"], [149, "            OutputStreamWriter writer = null;"], [150, "            try {"], [151, "                writer = new OutputStreamWriter(new FileOutputStream(f, true));"], [152, "                thema = GuiFunktionen.textLaenge(25, putzen(thema), false /* mitte */, false /*addVorne*/);"], [153, "                titel = GuiFunktionen.textLaenge(30, putzen(titel), false /* mitte */, false /*addVorne*/);"], [154, "                text = DatumZeit.getHeute_dd_MM_yyyy() + PAUSE + thema + PAUSE + titel + TRENNER + url + \"\\n\";"], [155, "                writer.write(text);"], [156, "                writer.close();"], [157, "                ret = true;"], [158, "            } catch (Exception ex) {"], [159, "                Log.fehlerMeldung(945258023, Log.FEHLER_ART_PROG, \"LogDownload.zeileSchreiben-1\", ex);"], [160, "            } finally {"], [161, "                try {"], [162, "                    writer.close();"], [163, "                } catch (Exception ex) {"], [164, "                }"], [165, "            }"], [176, "        OutputStreamWriter writer = null;"], [177, "        File f = new File(Daten.getBasisVerzeichnis(true) + Konstanten.LOG_DATEI_DOWNLOAD_ABOS);"], [178, "        try {"], [179, "            writer = new OutputStreamWriter(new FileOutputStream(f, true));"], [191, "//            writer.close();"], [195, "        } finally {"], [196, "            try {"], [197, "                writer.close();"], [198, "            } catch (Exception ex) {"], [199, "            }"], [227, "        LineNumberReader in = null;"], [228, "        File datei = null;"], [229, "        try {"], [230, "            datei = new File(Daten.getBasisVerzeichnis(false) + Konstanten.LOG_DATEI_DOWNLOAD_ABOS);"], [231, "            if (datei.exists()) {"], [232, "                in = new LineNumberReader(new InputStreamReader(new FileInputStream(datei)));"], [233, "                String zeile;"], [234, "                while ((zeile = in.readLine()) != null) {"], [235, "                    listeErledigteAbos.add(getUrlAusZeile(zeile));"], [236, "                }"], [237, "            }"], [240, "        } finally {"], [241, "            try {"], [242, "                if (datei.exists()) {"], [243, "                    in.close();"], [244, "                }"], [245, "            } catch (Exception ex) {"], [246, "                Log.fehlerMeldung(898743697, Log.FEHLER_ART_PROG, ErledigteAbos.class.getName(), ex);"], [247, "            }"], [260, "        int a1 = 0;"]]}, "num_lines_added": 46, "num_lines_removed": 108}