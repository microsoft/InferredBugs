{"hash": "6128f3a41c437fbc1cc434aa56f5def8da65ce79", "message": "And operator", "file_num_lines": 387, "diff_parsed": {"added": [[11, "import com.facebook.presto.operator.AndOperator;"], [39, "import javax.annotation.Nullable;"], [143, "        TupleStream orders = createTupleStream(ordersData, Column.ORDER_ORDERKEY, FIXED_INT_64);"], [154, "        TupleStream price = createTupleStream(ordersData, Column.ORDER_TOTALPRICE, DOUBLE);"], [165, "        TupleStream orderStatus = createTupleStream(ordersData, Column.ORDER_ORDERSTATUS, VARIABLE_BINARY);"], [187, "        TupleStream groupBySource = createTupleStream(ordersData, Column.ORDER_ORDERSTATUS, VARIABLE_BINARY);"], [188, "        TupleStream aggregateSource = createTupleStream(ordersData, Column.ORDER_ORDERSTATUS, VARIABLE_BINARY);"], [203, "        TupleStream groupBySource = createTupleStream(ordersData, Column.ORDER_ORDERSTATUS, VARIABLE_BINARY);"], [204, "        TupleStream aggregateSource = createTupleStream(ordersData, Column.ORDER_TOTALPRICE, DOUBLE);"], [217, "        TupleStream discount = createTupleStream(lineitemData, Column.LINEITEM_DISCOUNT, DOUBLE);"], [218, "        TupleStream tax = createTupleStream(lineitemData, Column.LINEITEM_TAX, DOUBLE);"], [231, "        RowSourceBuilder orderKey = createTupleStream(lineitemData, Column.LINEITEM_ORDERKEY, FIXED_INT_64);"], [232, "        TupleStream discount = createTupleStream(lineitemData, Column.LINEITEM_DISCOUNT, DOUBLE);"], [233, "        TupleStream tax = createTupleStream(lineitemData, Column.LINEITEM_TAX, DOUBLE);"], [241, "    @Test"], [242, "    public void testCountWithAndPredicate()"], [243, "    {"], [244, "        List<Tuple> expected = computeExpected(\"SELECT COUNT(*) FROM lineitem WHERE tax < discount AND tax > 0.01 AND discount < 10.0\", FIXED_INT_64);"], [245, ""], [246, "        TupleStream discount = createTupleStream(lineitemData, Column.LINEITEM_DISCOUNT, DOUBLE);"], [247, "        TupleStream filteredDiscount = new ApplyPredicateOperator(discount, new Predicate<Cursor>()"], [248, "        {"], [249, "            @Override"], [250, "            public boolean apply(Cursor input)"], [251, "            {"], [252, "                return input.getDouble(0) < 10.0;"], [253, "            }"], [254, "        });"], [255, ""], [256, "        TupleStream tax = createTupleStream(lineitemData, Column.LINEITEM_TAX, DOUBLE);"], [257, "        TupleStream filteredTax = new ApplyPredicateOperator(tax, new Predicate<Cursor>()"], [258, "        {"], [259, "            @Override"], [260, "            public boolean apply(Cursor input)"], [261, "            {"], [262, "                return input.getDouble(0) > 0.01;"], [263, "            }"], [264, "        });"], [265, ""], [266, "        // TODO: use tax and discount directly once RowSourceBuilder is fixed to allow multiple cursors"], [267, "        TupleStream tax2 = createTupleStream(lineitemData, Column.LINEITEM_TAX, DOUBLE);"], [268, "        TupleStream discount2 = createTupleStream(lineitemData, Column.LINEITEM_DISCOUNT, DOUBLE);"], [269, ""], [270, "        ComparisonOperator comparison = new ComparisonOperator(tax2, discount2, new DoubleLessThanComparison());"], [271, "        AndOperator and = new AndOperator(filteredDiscount, filteredTax, comparison);"], [272, "        AggregationOperator count = new AggregationOperator(and, CountAggregation.PROVIDER);"], [273, ""], [274, "        assertEqualsIgnoreOrder(tuples(count), expected);"], [275, "    }"], [276, ""], [277, ""], [309, "    private static RowSourceBuilder createTupleStream(List<List<String>> data, final Column column, final TupleInfo.Type type)"]], "deleted": [[141, "        TupleStream orders = createBlockStream(ordersData, Column.ORDER_ORDERKEY, FIXED_INT_64);"], [152, "        TupleStream price = createBlockStream(ordersData, Column.ORDER_TOTALPRICE, DOUBLE);"], [163, "        TupleStream orderStatus = createBlockStream(ordersData, Column.ORDER_ORDERSTATUS, VARIABLE_BINARY);"], [185, "        TupleStream groupBySource = createBlockStream(ordersData, Column.ORDER_ORDERSTATUS, VARIABLE_BINARY);"], [186, "        TupleStream aggregateSource = createBlockStream(ordersData, Column.ORDER_ORDERSTATUS, VARIABLE_BINARY);"], [201, "        TupleStream groupBySource = createBlockStream(ordersData, Column.ORDER_ORDERSTATUS, VARIABLE_BINARY);"], [202, "        TupleStream aggregateSource = createBlockStream(ordersData, Column.ORDER_TOTALPRICE, DOUBLE);"], [215, "        TupleStream discount = createBlockStream(lineitemData, Column.LINEITEM_DISCOUNT, DOUBLE);"], [216, "        TupleStream tax = createBlockStream(lineitemData, Column.LINEITEM_TAX, DOUBLE);"], [229, "        RowSourceBuilder orderKey = createBlockStream(lineitemData, Column.LINEITEM_ORDERKEY, FIXED_INT_64);"], [230, "        TupleStream discount = createBlockStream(lineitemData, Column.LINEITEM_DISCOUNT, DOUBLE);"], [231, "        TupleStream tax = createBlockStream(lineitemData, Column.LINEITEM_TAX, DOUBLE);"], [270, "    private static RowSourceBuilder createBlockStream(List<List<String>> data, final Column column, final TupleInfo.Type type)"]]}, "num_lines_added": 52, "num_lines_removed": 13}