{"hash": "3b538c5ff5eb7db9d31cbd97fe27d7458bf6c488", "message": "Use try-with-resources in ZipStepTest to avoid resource leaks", "file_num_lines": 162, "diff_parsed": {"added": [[128, "        try (ZipInputStream zip = new ZipInputStream(file.open())) {"], [129, "            ZipEntry entry = zip.getNextEntry();"], [130, "            while (entry != null && !entry.getName().equals(\"output.zip\")) {"], [131, "                System.out.println(\"zip entry name is: \" + entry.getName());"], [132, "                entry = zip.getNextEntry();"], [133, "            }"], [134, "            assertNotNull(\"output.zip should be included in the zip\", entry);"], [135, "            // we should have the the zip - but double check"], [136, "            assertEquals(\"output.zip\", entry.getName());"], [137, "            Scanner scanner = new Scanner(zip);"], [138, "            assertTrue(scanner.hasNextLine());"], [139, "            // the file that was not a zip should be included."], [140, "            assertEquals(\"not really a zip\", scanner.nextLine());"], [193, "        try (ZipInputStream zip = new ZipInputStream(file.open())) {"], [194, "            ZipEntry entry = zip.getNextEntry();"], [195, "            while (entry.isDirectory()) {"], [196, "                entry = zip.getNextEntry();"], [197, "            }"], [198, "            assertNotNull(entry);"], [199, "            assertEquals(basePath + \"hello.txt\", entry.getName());"], [200, "            try (Scanner scanner = new Scanner(zip)) {"], [201, "                assertTrue(scanner.hasNextLine());"], [202, "                assertEquals(\"Hello World!\", scanner.nextLine());"], [203, "                assertNull(\"There should be no more entries\", zip.getNextEntry());"], [204, "            }"], [212, "        try (ZipInputStream zip = new ZipInputStream(file.open())) {"], [213, "            for (ZipEntry entry = zip.getNextEntry(); entry != null; entry = zip.getNextEntry()) {"], [214, "                assertNotEquals(\"The zip output file shouldn't contain itself\", entry.getName(), artifact.getFileName());"], [215, "            }"]], "deleted": [[128, "        ZipInputStream zip = new ZipInputStream(file.open());"], [129, "        ZipEntry entry = zip.getNextEntry();"], [130, "        while (entry != null && !entry.getName().equals(\"output.zip\")) {"], [131, "            System.out.println(\"zip entry name is: \" + entry.getName());"], [132, "            entry = zip.getNextEntry();"], [134, "        assertNotNull(\"output.zip should be included in the zip\", entry);"], [135, "        // we should have the the zip - but double check"], [136, "        assertEquals(\"output.zip\", entry.getName());"], [137, "        Scanner scanner = new Scanner(zip);"], [138, "        assertTrue(scanner.hasNextLine());"], [139, "        // the file that was not a zip should be included."], [140, "        assertEquals(\"not really a zip\", scanner.nextLine());"], [141, "        zip.close();"], [193, "        ZipInputStream zip = new ZipInputStream(file.open());"], [194, "        ZipEntry entry = zip.getNextEntry();"], [195, "        while (entry.isDirectory()) {"], [196, "            entry = zip.getNextEntry();"], [198, "        assertNotNull(entry);"], [199, "        assertEquals(basePath + \"hello.txt\", entry.getName());"], [200, "        try(Scanner scanner = new Scanner(zip)){"], [201, "\t        assertTrue(scanner.hasNextLine());"], [202, "\t        assertEquals(\"Hello World!\", scanner.nextLine());"], [203, "\t        assertNull(\"There should be no more entries\", zip.getNextEntry());"], [204, "\t        zip.close();"], [205, "        }"], [206, ""], [213, "        ZipInputStream zip = new ZipInputStream(file.open());"], [214, "        for(ZipEntry entry = zip.getNextEntry(); entry != null; entry = zip.getNextEntry()) {"], [215, "            assertNotEquals(\"The zip output file shouldn't contain itself\", entry.getName(), artifact.getFileName());"]]}, "num_lines_added": 29, "num_lines_removed": 29}