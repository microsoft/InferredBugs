{"hash": "a601f083929273e22dff738f007e7579f6b49165", "message": "Fix getting correct ip of containers", "file_num_lines": 538, "diff_parsed": {"added": [[172, "                    .findFirst().map(Container::id).orElse(containerName);"], [175, "                    .findFirst().map(Container::id).orElse(containerName);"], [177, "            return containerName;"], [200, "                        // TODO: This should STOP the container and not remove the service."], [201, "                        //       After this command there is nothing left from the container"], [202, "                        //       but it still is registered inside the zalenium logik"], [204, ""], [205, ""], [206, "                        // TODO: Replicas reduzieren?!?"], [207, "                        // Service service = dockerClient.inspectService(serviceId);"], [208, "                        // ServiceSpec serviceSpec = service.spec();"], [209, "                        // dockerClient.updateService(serviceId, 1L, );"], [400, "        int attemptsLimit = 100;"], [589, "            List<Task> tasks = dockerClient.listTasks();"], [590, "            String swarmOverlayNetwork = ZaleniumConfiguration.getSwarmOverlayNetwork();"], [591, "            for (Task task : tasks) {"], [592, "                ContainerStatus containerStatus = task.status().containerStatus();"], [593, "                if (containerStatus != null) {"], [594, "                    if (containerStatus.containerId().equals(containerId)) {"], [595, "                        for (NetworkAttachment networkAttachment : task.networkAttachments()) {"], [596, "                            if (networkAttachment.network().spec().name().equals(swarmOverlayNetwork)) {"], [597, "                                String cidrSuffix = \"/\\\\d+$\";"], [598, "                                return networkAttachment.addresses().get(0).replaceAll(cidrSuffix, \"\");"], [599, "                            }"], [600, "                        }"], [601, "                    }"], [602, "                }"]], "deleted": [[172, "                    .findFirst().map(Container::id).orElse(null);"], [175, "                    .findFirst().map(Container::id).orElse(null);"], [177, "            return null;"], [391, "        int attemptsLimit = 1000;"], [400, "//        logger.debug(String.format(\"[VBN] ServiceID: %s, Tries: %s/%s, Task: %s\","], [401, "//                serviceId,"], [402, "//                attempts,"], [403, "//                attemptsLimit,"], [404, "//                taskId));"], [413, "//            } else {"], [414, "//                logger.debug(String.format(\"[VBN] Retrieved container id %s after %s ms.\","], [415, "//                        containerStatus.containerId(),"], [416, "//                        attempts * 100));"], [536, "    private List<String> generateMountedFolderBinds() {"], [537, "        List<String> result = new ArrayList<>();"], [538, ""], [539, "        this.mntFolders.stream().filter(mount -> mount.destination().startsWith(NODE_MOUNT_POINT)).forEach("], [540, "                containerMount -> {"], [541, "                    String destination = containerMount.destination().substring(NODE_MOUNT_POINT.length());"], [542, ""], [543, "                    if (Arrays.stream(PROTECTED_NODE_MOUNT_POINTS).anyMatch(item -> item.equalsIgnoreCase(destination))) {"], [544, "                        throw new IllegalArgumentException(\"The following points may not be mounted via node mounting: \""], [545, "                                + String.join(\",\", PROTECTED_NODE_MOUNT_POINTS));"], [546, "                    }"], [547, "                    String mountedBind = String.format(\"%s:%s\", containerMount.source(), destination);"], [548, "                    result.add(mountedBind);"], [549, "                }"], [550, "        );"], [551, ""], [552, "        return result;"], [553, "    }"], [554, ""], [555, "    private synchronized List<String> getContainerExtraHosts(String zaleniumContainerName) {"], [556, "        if (zaleniumExtraHosts != null) {"], [557, "            return zaleniumExtraHosts;"], [558, "        }"], [559, "        String containerId = getContainerId(zaleniumContainerName);"], [560, "        ContainerInfo containerInfo;"], [561, "        try {"], [562, "            containerInfo = dockerClient.inspectContainer(containerId);"], [563, "            zaleniumExtraHosts = containerInfo.hostConfig().extraHosts();"], [564, "        } catch (DockerException | InterruptedException | NullPointerException e) {"], [565, "            logger.debug(nodeId + \" Error while getting Zalenium extra hosts.\", e);"], [566, "            ga.trackException(e);"], [567, "        }"], [568, "        return Optional.ofNullable(zaleniumExtraHosts).orElse(new ArrayList<>());"], [569, "    }"], [570, ""], [624, "            ContainerInfo containerInfo = dockerClient.inspectContainer(containerId);"], [625, "            if (containerInfo.networkSettings().ipAddress().trim().isEmpty()) {"], [626, "                ImmutableMap<String, AttachedNetwork> networks = containerInfo.networkSettings().networks();"], [627, "                return networks.entrySet().stream().findFirst().get().getValue().ipAddress();"], [629, "            return containerInfo.networkSettings().ipAddress();"], [640, "        if (ZALENIUM_RUNNING_LOCALLY) {"], [641, "            containerIp = \"localhost\";"], [642, "        }"]]}, "num_lines_added": 27, "num_lines_removed": 56}