{"hash": "c749d4cecefb8593d7f0d1a47e51be24aa240ea9", "message": "Clean up swarm container client class", "file_num_lines": 422, "diff_parsed": {"added": [[4, "import com.google.common.base.Strings;"], [104, "    private String getContainerId(URL remoteUrl) {"], [151, "        // TODO: Implement behaviour"], [222, "        // TODO: verify this is handled by docker"], [228, "        // TODO: is it meaningful to add labels to identify services/containers in the swarm?"], [284, "        Resources.Builder resourceBuilder = Resources.builder();"], [285, "        String cpuLimit = getSeleniumContainerCpuLimit();"], [286, "        String memLimit = getSeleniumContainerMemoryLimit();"], [287, ""], [288, "        if (!Strings.isNullOrEmpty(cpuLimit)) {"], [289, "            resourceBuilder.nanoCpus(Long.valueOf(cpuLimit));"], [290, "        }"], [291, ""], [292, "        if (!Strings.isNullOrEmpty( memLimit)) {"], [293, "            resourceBuilder.memoryBytes(Long.valueOf(memLimit));"], [294, "        }"], [295, ""], [296, "        ResourceRequirements resourceRequirements = ResourceRequirements.builder()"], [297, "                .limits(resourceBuilder.build())"], [298, "                .build();"], [299, ""], [301, "                .resources(resourceRequirements)"], [408, "            // Delete any leftover services from a previous time"], [409, "            deleteSwarmServices();"], [411, "            Runtime.getRuntime().addShutdownHook(new Thread(this::deleteSwarmServices, \"SwarmContainerClient shutdown hook\"));"], [415, "    private void deleteSwarmServices() {"], [416, "        // TODO: Implement functionality"], [425, "        String containerId = this.getContainerId(remoteHost);"]], "deleted": [[4, "import com.google.common.collect.ImmutableMap;"], [34, "import static de.zalando.ep.zalenium.util.ZaleniumConfiguration.ZALENIUM_RUNNING_LOCALLY;"], [39, "    private static final String DEFAULT_DOCKER_NETWORK_MODE = \"default\";"], [40, "    private static final String DEFAULT_DOCKER_NETWORK_NAME = \"bridge\";"], [41, "    private static final String DOCKER_NETWORK_HOST_MODE_NAME = \"host\";"], [42, "    private static final String NODE_MOUNT_POINT = \"/tmp/node\";"], [43, "    private static final String[] PROTECTED_NODE_MOUNT_POINTS = {"], [44, "            \"/var/run/docker.sock\","], [45, "            \"/home/seluser/videos\","], [46, "            \"/dev/shm\""], [47, "    };"], [55, "    private static final int NAME_COLLISION_RETRIES = 10;"], [70, "    private String zaleniumNetwork;"], [71, "    private List<String> zaleniumExtraHosts;"], [72, "    private List<ContainerMount> mntFolders = new ArrayList<>();"], [74, "    private boolean pullSeleniumImage = false;"], [75, "    private boolean isZaleniumPrivileged = true;"], [76, "    private ImmutableMap<String, String> storageOpt;"], [77, "    private AtomicBoolean pullSeleniumImageChecked = new AtomicBoolean(false);"], [78, "    private AtomicBoolean isZaleniumPrivilegedChecked = new AtomicBoolean(false);"], [79, "    private AtomicBoolean storageOptsLoaded = new AtomicBoolean(false);"], [80, "    private AtomicBoolean mntFoldersAndHttpEnvVarsChecked = new AtomicBoolean(false);"], [121, "    private static boolean isNameCollision(Exception e, String containerName) {"], [122, "        return e.getMessage().contains(\"The container name \\\"\" + containerName + \"/\\\" is already in use by container \");"], [123, "    }"], [124, ""], [125, "    private static boolean hasRemainingAttempts(int collisionAttempts) {"], [126, "        return collisionAttempts > 0;"], [127, "    }"], [128, ""], [129, "    @VisibleForTesting"], [130, "    public void setContainerClient(final DockerClient client) {"], [131, "        dockerClient = client;"], [132, "    }"], [133, ""], [138, "    private String getContainerId(String zaleniumContainerName, URL remoteUrl) {"], [185, "        try {"], [186, "            return dockerClient.archiveContainer(containerId, folderName);"], [187, "        } catch (DockerException | InterruptedException e) {"], [188, "            logger.warn(nodeId + \" Something happened while copying the folder \" + folderName + \", \" +"], [189, "                    \"most of the time it is an issue while closing the input/output stream, which is usually OK.\", e);"], [190, "        }"], [261, "        List<Image> images;"], [262, "        try {"], [263, "            images = dockerClient.listImages(DockerClient.ListImagesParam.byName(imageName));"], [264, "            if (images.isEmpty()) {"], [265, "                logger.error(nodeId + \" A downloaded docker-selenium image was not found!\");"], [266, "                return imageName;"], [267, "            }"], [268, "            for (int i = images.size() - 1; i >= 0; i--) {"], [269, "                if (images.get(i).repoTags() == null) {"], [270, "                    images.remove(i);"], [271, "                }"], [272, "            }"], [273, "            images.sort((o1, o2) -> o2.created().compareTo(o1.created()));"], [274, "            return images.get(0).repoTags().get(0);"], [275, "        } catch (DockerException | InterruptedException e) {"], [276, "            logger.warn(nodeId + \" Error while executing the command\", e);"], [277, "            ga.trackException(e);"], [278, "        }"], [284, "        loadMountedFolders(zaleniumContainerName);"], [286, "        loadPullSeleniumImageFlag();"], [287, "        loadIsZaleniumPrivileged(zaleniumContainerName);"], [288, "        loadStorageOpts(zaleniumContainerName);"], [311, "        try {"], [312, "            if (pullSeleniumImage) {"], [313, "                List<Image> images = dockerClient.listImages(DockerClient.ListImagesParam.byName(image));"], [314, "                if (images.size() == 0) {"], [315, "                    // If the image has no tag, we add latest, otherwise we end up pulling all the images with that name."], [316, "                    String imageToPull = image.lastIndexOf(':') > 0 ? image : image.concat(\":latest\");"], [317, "                    dockerClient.pull(imageToPull, new AnsiProgressHandler());"], [318, "                }"], [319, "            }"], [320, "        } catch (DockerException | InterruptedException e) {"], [321, "            logger.warn(nodeId + \" Error while checking (and pulling) if the image is present\", e);"], [322, "            ga.trackException(e);"], [323, "        }"], [324, ""], [399, "        TaskStatus taskStatus = null;"], [462, "    private void loadPullSeleniumImageFlag() {"], [463, "        if (!this.pullSeleniumImageChecked.getAndSet(true)) {"], [464, "            pullSeleniumImage = env.getBooleanEnvVariable(\"PULL_SELENIUM_IMAGE\", false);"], [465, "        }"], [466, "    }"], [467, ""], [468, "    private void loadIsZaleniumPrivileged(String zaleniumContainerName) {"], [469, "        if (!this.isZaleniumPrivilegedChecked.getAndSet(true)) {"], [470, "            String containerId = getContainerId(zaleniumContainerName);"], [471, "            if (containerId == null) {"], [472, "                return;"], [473, "            }"], [474, ""], [475, "            ContainerInfo containerInfo;"], [476, ""], [477, "            try {"], [478, "                containerInfo = dockerClient.inspectContainer(containerId);"], [479, "                isZaleniumPrivileged = containerInfo.hostConfig().privileged();"], [480, "            } catch (DockerException | InterruptedException e) {"], [481, "                logger.warn(nodeId + \" Error while getting value to check if Zalenium is running in privileged mode.\", e);"], [482, "                ga.trackException(e);"], [483, "            }"], [484, "        }"], [485, "    }"], [486, ""], [487, "    private void loadStorageOpts(String zaleniumContainerName) {"], [488, "        if (!this.storageOptsLoaded.getAndSet(true)) {"], [489, "            String containerId = getContainerId(zaleniumContainerName);"], [490, "            if (containerId == null) {"], [491, "                return;"], [492, "            }"], [493, ""], [494, "            ContainerInfo containerInfo;"], [495, ""], [496, "            try {"], [497, "                containerInfo = dockerClient.inspectContainer(containerId);"], [498, "                storageOpt = containerInfo.hostConfig().storageOpt();"], [499, "            } catch (DockerException | InterruptedException e) {"], [500, "                logger.warn(nodeId + \" Error while getting value to use passed storageOpts.\", e);"], [501, "                ga.trackException(e);"], [502, "            }"], [503, "        }"], [504, "    }"], [505, ""], [506, "    private void loadMountedFolders(String zaleniumContainerName) {"], [507, "        if (!this.mntFoldersAndHttpEnvVarsChecked.get()) {"], [508, "            String containerId = getContainerId(zaleniumContainerName);"], [509, "            if (containerId == null) {"], [510, "                return;"], [511, "            }"], [512, ""], [513, "            ContainerInfo containerInfo = null;"], [514, ""], [515, "            try {"], [516, "                containerInfo = dockerClient.inspectContainer(containerId);"], [517, "            } catch (DockerException | InterruptedException e) {"], [518, "                logger.warn(nodeId + \" Error while getting mounted folders and env vars.\", e);"], [519, "                ga.trackException(e);"], [520, "            }"], [521, ""], [522, "            loadMountedFolders(containerInfo);"], [523, "        }"], [524, "    }"], [525, ""], [526, "    private synchronized void loadMountedFolders(ContainerInfo containerInfo) {"], [527, "        if (!this.mntFoldersAndHttpEnvVarsChecked.getAndSet(true)) {"], [528, ""], [529, "            for (ContainerMount containerMount : containerInfo.mounts()) {"], [530, "                if (containerMount.destination().startsWith(NODE_MOUNT_POINT)) {"], [531, "                    this.mntFolders.add(containerMount);"], [532, "                }"], [533, "            }"], [534, "        }"], [535, "    }"], [536, ""], [540, "            // Delete any leftover containers from a previous time"], [541, "            deleteSeleniumContainers();"], [543, "            Runtime.getRuntime().addShutdownHook(new Thread(this::deleteSeleniumContainers, \"DockerContainerClient shutdown hook\"));"], [547, "    private void deleteSeleniumContainers() {"], [548, "        logger.info(\"About to clean up any left over DockerSelenium containers created by Zalenium\");"], [549, "        String image = DockeredSeleniumStarter.getDockerSeleniumImageName();"], [550, "        String zaleniumContainerName = DockeredSeleniumStarter.getContainerName();"], [551, "        try {"], [552, "            List<Container> containerList = dockerClient.listContainers(withStatusRunning(), withStatusCreated())"], [553, "                    .stream().filter(container -> container.image().contains(image)"], [554, "                            && container.names().stream().anyMatch(name -> name.contains(zaleniumContainerName)))"], [555, "                    .collect(Collectors.toList());"], [556, "            containerList.stream()"], [557, "                    .parallel()"], [558, "                    .forEach(container -> stopContainer(container.id()));"], [559, "        } catch (Exception e) {"], [560, "            logger.warn(nodeId + \" Error while deleting existing DockerSelenium containers\", e);"], [561, "            ga.trackException(e);"], [562, "        }"], [571, "        String containerId = this.getContainerId(zaleniumContainerName, remoteHost);"]]}, "num_lines_added": 28, "num_lines_removed": 174}