{"hash": "ae75e82a567a6dcc6f5ada1f6abfad5adea56f01", "message": "Refactor ssh logic to execute commands on node", "file_num_lines": 576, "diff_parsed": {"added": [[198, "                ContainerStatus containerStatus = task.status().containerStatus();"], [199, "                if (containerStatus != null && containerStatus.containerId().equals(containerId)) {"], [201, "                    List<Service> services = dockerClient.listServices();"], [202, "                    if (services.stream().anyMatch(service -> service.id().equals(serviceId))) {"], [203, "                        dockerClient.removeService(serviceId);"], [204, "                    }"], [218, "                ContainerStatus containerStatus = task.status().containerStatus();"], [219, "                if (containerStatus != null && containerStatus.containerId().equals(containerId)) {"], [224, "                            execCommandOnRemote(swarmNodeIp, containerId, command);"], [237, "        Session session = null;"], [239, "            ssh.addHostKeyVerifier(new PromiscuousVerifier());"], [241, "            // todo implement passing username as variable"], [242, "            ssh.authPublickey(\"tester\", \"/home/seluser/.ssh/id_rsa\");"], [243, "            session = ssh.startSession();"], [244, "            String cmd = String.format(\"docker exec -d %s %s\", containerId, command[2]);"], [245, "            logger.debug(\"------------- Executing Command -------------: \" + cmd);"], [246, "            session.exec(cmd);"], [251, "        } finally {"], [252, "            try {"], [253, "                if (session != null) {"], [254, "                    session.close();"], [255, "                }"], [256, ""], [257, "                ssh.disconnect();"], [258, "            } catch (IOException e) {"], [259, "                e.printStackTrace();"], [260, "            }"], [355, "        final List<String> placementList = new ArrayList<>();"], [356, ""], [357, "        placementList.add(\"node.role==worker\");"], [358, ""], [359, "        final Placement placement = Placement.create(placementList);"], [360, ""], [363, "                .placement(placement)"], [397, "        logger.debug(\"--------------Waiting for Task to be ready--------------------------------\");"], [426, "                if (containerStatus != null) {"], [427, "                    String containerId = containerStatus.containerId();"], [428, "                    String containerName =  containerStatus.containerId();"], [429, "                    return new ContainerCreationStatus(true, containerName, containerId, nodePort);"], [430, "                }"], [667, "                if (termStates.contains(state)) {"], [668, "                    return taskStatus.containerStatus().containerId().equals(containerId);"]], "deleted": [[198, "                if (task.status().containerStatus().containerId().equals(containerId)) {"], [200, "                    dockerClient.removeService(serviceId);"], [209, "    // TODO: Work In Progress => Must be implemented correctly"], [215, "                if (task.status().containerStatus().containerId().equals(containerId)) {"], [228, ""], [229, "        if (swarmNodeIp != null) {"], [230, "            execCommandOnRemote(swarmNodeIp, containerId, command);"], [231, "        }"], [234, "    // TODO: Work In Progress => Must be implemented correctly"], [239, "            ssh.authPublickey(\"id_rsa\");"], [240, "            Session session = ssh.startSession();"], [241, "            Session.Command cmd = session.exec(\"docker exec -ti \" + containerId + \" sh -c notify 'Zalenium', 'TEST COMPLETED', --icon=/home/seluser/images/completed.png\");"], [242, "            System.out.println(cmd.toString());"], [404, "                String containerId = containerStatus.containerId();"], [405, "                String containerName =  containerStatus.containerId();"], [406, "                return new ContainerCreationStatus(true, containerName, containerId, nodePort);"], [642, "                boolean isContainer = taskStatus.containerStatus().containerId().equals(containerId);"], [644, "                if (isContainer && termStates.contains(state)) {"], [645, "                    return true;"]]}, "num_lines_added": 42, "num_lines_removed": 19}