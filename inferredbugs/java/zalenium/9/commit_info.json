{"hash": "ff086dafdbdb5810919aea3cdb2f3c7c247b4541", "message": "Mark container as terminated if it doesn't exist", "file_num_lines": 553, "diff_parsed": {"added": [[141, "            logger.debug(\"---------------Size of tasks list : {} ---------------\", tasks.size());"], [143, "                logger.debug(\"--------------- Task : {} ---------------\", task);"], [200, "                    Service.Criteria criteria = Service.Criteria.builder()"], [201, "                            .serviceId(serviceId)"], [202, "                            .build();"], [203, "                    List<Service> services = dockerClient.listServices(criteria);"], [204, "                    if (services.size() > 0 ) {"], [303, "            if (taskStatus != null) {"], [347, "                .condition(\"on-failure\")"], [411, ""], [412, "            logger.debug(\"container {} is ready\", containerStatus.containerId());"], [413, ""], [418, "    private ContainerCreationStatus getContainerCreationStatus(String serviceId, String nodePort) throws DockerException, InterruptedException {"], [425, "                    String containerName = containerStatus.containerId();"], [628, "            List<String> termStates = Arrays.asList(\"complete\", \"failed\", \"shutdown\", \"rejected\", \"orphaned\", \"removed\");"], [629, "            String containerId = container.getContainerId();"], [631, "            boolean containerExists = tasks.stream().anyMatch(task -> {"], [632, "                ContainerStatus containerStatus = task.status().containerStatus();"], [633, "                return containerStatus != null && containerStatus.containerId().equals(containerId);"], [634, "            });"], [635, ""], [636, "            if (!containerExists) {"], [637, "                logger.info(\"Container {} has no task - terminal.\", container);"], [638, "                return true;"], [639, "            } else {"], [640, "                return tasks.stream().anyMatch(task -> {"], [641, "                    ContainerStatus containerStatus = task.status().containerStatus();"], [642, "                    boolean hasTerminalState = termStates.contains(task.status().state());"], [643, "                    boolean isContainer = containerStatus != null && containerStatus.containerId().equals(containerId);"], [644, "                    boolean isTerminated = isContainer && hasTerminalState;"], [645, ""], [646, "                    if (isTerminated) {"], [647, "                        logger.info(\"Container {} is {} - terminal.\", container, task.status().state());"], [648, "                    }"], [649, ""], [650, "                    return isTerminated;"], [651, "                });"]], "deleted": [[198, "                    List<Service> services = dockerClient.listServices();"], [199, "                    if (services.stream().anyMatch(service -> service.id().equals(serviceId))) {"], [200, "                        // TODO: This should STOP the container and not remove the service."], [201, "                        //       After this command there is nothing left from the container"], [202, "                        //       but it still is registered inside the zalenium logik"], [204, ""], [205, ""], [206, "                        // TODO: Replicas reduzieren?!?"], [207, "                        // Service service = dockerClient.inspectService(serviceId);"], [208, "                        // ServiceSpec serviceSpec = service.spec();"], [209, "                        // dockerClient.updateService(serviceId, 1L, );"], [307, "            if(taskStatus != null) {"], [351, "                .condition(\"none\")"], [408, "        String taskId = task == null ? null : task.id();"], [409, ""], [410, ""], [422, "    private ContainerCreationStatus getContainerCreationStatus (String serviceId, String nodePort) throws DockerException, InterruptedException {"], [429, "                    String containerName =  containerStatus.containerId();"], [631, "        List<String> termStates = Arrays.asList(\"complete\", \"failed\", \"shutdown\", \"rejected\", \"orphaned\", \"removed\");"], [632, "        String containerId = container.getContainerId();"], [633, ""], [636, "            for (Task task : tasks) {"], [637, "                TaskStatus taskStatus = task.status();"], [638, "                ContainerStatus containerStatus = taskStatus.containerStatus();"], [639, "                if (containerStatus != null && containerStatus.containerId().equals(containerId)) {"], [640, "                    String state = taskStatus.state();"], [641, "                    return termStates.contains(state);"], [642, "                }"], [644, "            return false;"]]}, "num_lines_added": 37, "num_lines_removed": 29}