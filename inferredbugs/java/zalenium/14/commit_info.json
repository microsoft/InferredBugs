{"hash": "aedb1220541011e354a96f3f5bd29956f2024a6e", "message": "Fix error with simultaneous docker operations by synchronizing those operations\n\nsee also:\n- https://github.com/eclipse-ee4j/jersey/issues/3772\n- https://github.com/zalando/zalenium/issues/808", "file_num_lines": 380, "diff_parsed": {"added": [[91, "            ContainerStatus containerStatus = SwarmUtilities.getContainerByRemoteUrl(remoteUrl);"], [92, "            if (containerStatus != null) {"], [93, "                return containerStatus.containerId();"], [108, "            containerList = SwarmUtilities.getRunningAndCreatedContainers();"], [133, "            SwarmUtilities.stopServiceByContainerId(containerId);"], [142, "            Task task = SwarmUtilities.getTaskByContainerId(containerId);"], [143, "            if (task != null) {"], [144, "                pullSwarmExecImage();"], [145, "                startSwarmExecContainer(task, command, containerId);"], [146, "            } else {"], [147, "                logger.warn(\"Couldn't execute command on container {}\", containerId);"], [157, "            SwarmUtilities.pullImageIfNotPresent(SWARM_EXEC_IMAGE);"], [189, "        SwarmUtilities.startContainer(containerConfig);"], [212, "            ServiceCreateResponse service = SwarmUtilities.createService(serviceSpec);"], [317, "        Task task = SwarmUtilities.getTaskByServiceId(serviceId);"], [334, "        Task task = SwarmUtilities.getTaskByServiceId(serviceId);"], [335, ""], [336, "        if (task != null) {"], [337, "            ContainerStatus containerStatus = task.status().containerStatus();"], [338, "            if (containerStatus != null) {"], [339, "                String containerId = containerStatus.containerId();"], [340, "                String containerName = containerStatus.containerId();"], [341, "                return new ContainerCreationStatus(true, containerName, containerId, nodePort);"], [414, "            Task task = SwarmUtilities.getTaskByContainerId(containerId);"], [415, "            if (task != null) {"], [416, "                for (NetworkAttachment networkAttachment : CollectionUtils.emptyIfNull(task.networkAttachments())) {"], [417, "                    if (networkAttachment.network().spec().name().equals(swarmOverlayNetwork)) {"], [418, "                        String cidrSuffix = \"/\\\\d+$\";"], [419, "                        return networkAttachment.addresses().get(0).replaceAll(cidrSuffix, \"\");"], [455, "            Task task = SwarmUtilities.getTaskByContainerId(containerId);"], [457, "            if (task == null) {"], [461, "                boolean isTerminated = termStates.contains(task.status().state());"], [462, ""], [463, "                if (isTerminated) {"], [464, "                    logger.info(\"State of Container {} is {} - flagging it as terminated\","], [465, "                            container.getContainerId(),"], [466, "                            task.status().state());"], [467, "                }"], [469, "                return isTerminated;"]], "deleted": [[5, "import com.spotify.docker.client.AnsiProgressHandler;"], [6, "import com.spotify.docker.client.DefaultDockerClient;"], [7, "import com.spotify.docker.client.DockerClient;"], [33, "import static com.spotify.docker.client.DockerClient.ListContainersParam.withStatusCreated;"], [34, "import static com.spotify.docker.client.DockerClient.ListContainersParam.withStatusRunning;"], [35, ""], [49, "    private static String dockerHost;"], [58, "    private DockerClient dockerClient = new DefaultDockerClient(dockerHost);"], [70, ""], [71, "        String dockerHost = env.getStringEnvVariable(\"DOCKER_HOST\", \"unix:///var/run/docker.sock\");"], [72, "        setDockerHost(dockerHost);"], [80, "    private static void setDockerHost(String dockerHost) {"], [81, "        // https://github.com/spotify/docker-client/issues/946"], [82, "        SwarmContainerClient.dockerHost = dockerHost.replace(\"tcp\", \"http\");"], [83, "    }"], [84, ""], [107, "            List<Task> tasks = dockerClient.listTasks();"], [108, "            for (Task task : tasks) {"], [109, "                for (NetworkAttachment networkAttachment : CollectionUtils.emptyIfNull(task.networkAttachments())) {"], [110, "                    for (String address : networkAttachment.addresses()) {"], [111, "                        if (address.startsWith(remoteUrl.getHost())) {"], [112, "                            return task.status().containerStatus().containerId();"], [113, "                        }"], [114, "                    }"], [115, "                }"], [130, "            containerList = dockerClient.listContainers(withStatusRunning(), withStatusCreated());"], [155, "            List<Task> tasks = dockerClient.listTasks();"], [156, "            for (Task task : tasks) {"], [157, "                ContainerStatus containerStatus = task.status().containerStatus();"], [158, "                if (containerStatus != null && containerStatus.containerId().equals(containerId)) {"], [159, "                    String serviceId = task.serviceId();"], [160, "                    Service.Criteria criteria = Service.Criteria.builder()"], [161, "                            .serviceId(serviceId)"], [162, "                            .build();"], [163, "                    List<Service> services = dockerClient.listServices(criteria);"], [164, "                    if (!CollectionUtils.isEmpty(services)) {"], [165, "                        dockerClient.removeService(serviceId);"], [166, "                    }"], [167, "                }"], [168, "            }"], [177, "            List<Task> tasks = dockerClient.listTasks();"], [178, ""], [179, "            pullSwarmExecImage();"], [180, ""], [181, "            for (Task task : CollectionUtils.emptyIfNull(tasks)) {"], [182, "                ContainerStatus containerStatus = task.status().containerStatus();"], [183, ""], [184, "                if (containerStatus != null && containerStatus.containerId().equals(containerId)) {"], [185, "                    startSwarmExecContainer(task, command, containerId);"], [186, "                    return;"], [187, "                }"], [193, ""], [194, "        logger.warn(\"Couldn't execute command on container {}\", containerId);"], [199, "            List<Image> images = dockerClient.listImages(DockerClient.ListImagesParam.byName(SWARM_EXEC_IMAGE));"], [200, "            if (CollectionUtils.isEmpty(images)) {"], [201, "                dockerClient.pull(SWARM_EXEC_IMAGE, new AnsiProgressHandler());"], [202, "            }"], [234, "        ContainerCreation containerCreation = dockerClient.createContainer(containerConfig);"], [235, ""], [236, "        dockerClient.startContainer(containerCreation.id());"], [259, "            ServiceCreateResponse service = dockerClient.createService(serviceSpec);"], [364, "        String serviceName = dockerClient.inspectService(serviceId).spec().name();"], [365, "        Task.Criteria criteria = Task.Criteria.builder().serviceName(serviceName).build();"], [366, "        List<Task> tasks = dockerClient.listTasks(criteria);"], [367, "        Task task = null;"], [368, ""], [369, "        if (!CollectionUtils.isEmpty(tasks)) {"], [370, "            task = tasks.get(0);"], [371, "        }"], [388, "        Service service = dockerClient.inspectService(serviceId);"], [389, "        Task.Criteria criteria = Task.Criteria.builder()"], [390, "                .serviceName(service.spec().name())"], [391, "                .build();"], [392, "        List<Task> tasks = dockerClient.listTasks(criteria);"], [393, "        for (Task task : tasks) {"], [394, "            if (task.serviceId().equals(serviceId)) {"], [395, "                ContainerStatus containerStatus = task.status().containerStatus();"], [396, "                if (containerStatus != null) {"], [397, "                    String containerId = containerStatus.containerId();"], [398, "                    String containerName = containerStatus.containerId();"], [399, "                    return new ContainerCreationStatus(true, containerName, containerId, nodePort);"], [400, "                }"], [472, "            List<Task> tasks = dockerClient.listTasks();"], [474, "            for (Task task : tasks) {"], [475, "                ContainerStatus containerStatus = task.status().containerStatus();"], [476, "                if (containerStatus != null) {"], [477, "                    if (containerStatus.containerId().equals(containerId)) {"], [478, "                        for (NetworkAttachment networkAttachment : CollectionUtils.emptyIfNull(task.networkAttachments())) {"], [479, "                            if (networkAttachment.network().spec().name().equals(swarmOverlayNetwork)) {"], [480, "                                String cidrSuffix = \"/\\\\d+$\";"], [481, "                                return networkAttachment.addresses().get(0).replaceAll(cidrSuffix, \"\");"], [482, "                            }"], [483, "                        }"], [519, "            List<Task> tasks = dockerClient.listTasks();"], [520, "            boolean containerExists = tasks.stream().anyMatch(task -> {"], [521, "                ContainerStatus containerStatus = task.status().containerStatus();"], [522, "                return containerStatus != null && containerStatus.containerId().equals(containerId);"], [523, "            });"], [525, "            if (!containerExists) {"], [529, "                return tasks.stream().anyMatch(task -> {"], [530, "                    ContainerStatus containerStatus = task.status().containerStatus();"], [531, "                    boolean hasTerminalState = termStates.contains(task.status().state());"], [532, "                    boolean isContainer = containerStatus != null && containerStatus.containerId().equals(containerId);"], [533, "                    boolean isTerminated = isContainer && hasTerminalState;"], [534, ""], [535, "                    if (isTerminated) {"], [536, "                        logger.info(\"State of Container {} is {} - flagging it as terminated\","], [537, "                                container.getContainerId(),"], [538, "                                task.status().state());"], [539, "                    }"], [541, "                    return isTerminated;"], [542, "                });"]]}, "num_lines_added": 39, "num_lines_removed": 112}