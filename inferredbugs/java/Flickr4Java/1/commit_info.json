{"hash": "b10f7c3c3c54ccab9aae9653ad6a7dd88b553259", "message": "Upgrade to latest version of Scribe", "file_num_lines": 291, "diff_parsed": {"added": [[11, "import com.github.scribejava.apis.FlickrApi;"], [12, "import com.github.scribejava.core.builder.ServiceBuilder;"], [13, "import com.github.scribejava.core.model.OAuth1AccessToken;"], [14, "import com.github.scribejava.core.model.OAuthRequest;"], [15, "import com.github.scribejava.core.model.Verb;"], [16, "import com.github.scribejava.core.oauth.OAuth10aService;"], [34, "import java.util.UUID;"], [35, "import java.util.concurrent.ExecutionException;"], [159, "        OAuth1AccessToken requestToken = new OAuth1AccessToken(auth.getToken(), auth.getTokenSecret());"], [160, "        OAuth10aService service = createOAuthService(apiKey, sharedSecret);"], [177, "            com.github.scribejava.core.model.Response scribeResponse = service.execute(request);"], [179, "            com.flickr4java.flickr.Response f4jResponse;"], [189, "                f4jResponse = (com.flickr4java.flickr.Response) responseClass.newInstance();"], [190, "                f4jResponse.parse(document);"], [192, "            return f4jResponse;"], [193, "        } catch (IllegalAccessException | InstantiationException | SAXException | IOException | InterruptedException | ExecutionException e) {"], [210, "    public Response getNonOAuth(String path, Map<String, String> parameters) {"], [238, "        } catch (IllegalAccessException | SAXException | IOException | InstantiationException e) {"], [267, "        OAuth1AccessToken requestToken = new OAuth1AccessToken(auth.getToken(), auth.getTokenSecret());"], [268, "        OAuth10aService service = createOAuthService(apiKey, sharedSecret);"], [276, "            // TODO Try addMultipartPayload instead, might be simpler"], [277, "            request.setPayload(buildMultipartBody(parameters, getMultipartBoundary()));"], [288, "//        org.scribe.model.Response scribeResponse = request.send();"], [291, "            com.github.scribejava.core.model.Response scribeResponse = service.execute(request);"], [292, "            com.flickr4java.flickr.Response response;"], [306, "        } catch (IllegalAccessException | InterruptedException | ExecutionException | InstantiationException | IOException | SAXException e) {"], [316, "    private OAuth10aService createOAuthService(String apiKey, String sharedSecret) {"], [317, "        ServiceBuilder serviceBuilder = new ServiceBuilder(apiKey).apiKey(apiKey).apiSecret(sharedSecret);"], [318, ""], [323, "        return serviceBuilder.build(FlickrApi.instance());"], [357, "        return \"---------------------------\" + UUID.randomUUID();"], [436, "        // TODO Can't figure out how to do this in new Scribe"], [437, "//        if (connectTimeoutMs != null) {"], [438, "//            request.setConnectTimeout(connectTimeoutMs, TimeUnit.MILLISECONDS);"], [439, "//        }"], [440, "//        if (readTimeoutMs != null) {"], [441, "//            request.setReadTimeout(readTimeoutMs, TimeUnit.MILLISECONDS);"], [442, "//        }"]], "deleted": [[11, "import org.scribe.builder.ServiceBuilder;"], [12, "import org.scribe.builder.api.FlickrApi;"], [13, "import org.scribe.model.OAuthRequest;"], [14, "import org.scribe.model.Token;"], [15, "import org.scribe.model.Verb;"], [16, "import org.scribe.oauth.OAuthService;"], [34, "import java.util.concurrent.TimeUnit;"], [159, "            Token requestToken = new Token(auth.getToken(), auth.getTokenSecret());"], [160, "            OAuthService service = createOAuthService(parameters, apiKey, sharedSecret);"], [174, "        org.scribe.model.Response scribeResponse = request.send();"], [178, "            com.flickr4java.flickr.Response response = null;"], [188, "                response = (com.flickr4java.flickr.Response) responseClass.newInstance();"], [189, "                response.parse(document);"], [191, "            return response;"], [192, "        } catch (IllegalAccessException e) {"], [193, "            throw new FlickrRuntimeException(e);"], [194, "        } catch (InstantiationException e) {"], [195, "            throw new FlickrRuntimeException(e);"], [196, "        } catch (SAXException e) {"], [197, "            throw new FlickrRuntimeException(e);"], [198, "        } catch (IOException e) {"], [215, "    public Response getNonOAuth(String path, Map<String, String> parameters) throws FlickrException {"], [243, "        } catch (IllegalAccessException e) {"], [244, "            throw new FlickrRuntimeException(e);"], [245, "        } catch (InstantiationException e) {"], [246, "            throw new FlickrRuntimeException(e);"], [247, "        } catch (IOException e) {"], [248, "            throw new FlickrRuntimeException(e);"], [249, "        } catch (SAXException e) {"], [279, "            Token requestToken = new Token(auth.getToken(), auth.getTokenSecret());"], [280, "            OAuthService service = createOAuthService(parameters, apiKey, sharedSecret);"], [287, "            request.addPayload(buildMultipartBody(parameters, getMultipartBoundary()));"], [298, "        org.scribe.model.Response scribeResponse = request.send();"], [301, "            com.flickr4java.flickr.Response response = null;"], [315, "        } catch (IllegalAccessException e) {"], [316, "            throw new FlickrRuntimeException(e);"], [317, "        } catch (InstantiationException e) {"], [318, "            throw new FlickrRuntimeException(e);"], [319, "        } catch (SAXException e) {"], [320, "            throw new FlickrRuntimeException(e);"], [321, "        } catch (IOException e) {"], [328, "     * @param parameters"], [332, "    private OAuthService createOAuthService(Map<String, Object> parameters, String apiKey, String sharedSecret) {"], [333, "        ServiceBuilder serviceBuilder = new ServiceBuilder().provider(FlickrApi.class).apiKey(apiKey).apiSecret(sharedSecret);"], [338, "        return serviceBuilder.build();"], [372, "        return \"---------------------------7d273f7a0d3\";"], [451, "        if (connectTimeoutMs != null) {"], [452, "            request.setConnectTimeout(connectTimeoutMs, TimeUnit.MILLISECONDS);"], [453, "        }"], [454, "        if (readTimeoutMs != null) {"], [455, "            request.setReadTimeout(readTimeoutMs, TimeUnit.MILLISECONDS);"], [456, "        }"]]}, "num_lines_added": 38, "num_lines_removed": 52}