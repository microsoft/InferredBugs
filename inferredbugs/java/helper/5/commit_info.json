{"hash": "2a823641ee8d60be2a8744644dffcd45e5bdbec3", "message": "Load services when not using the standalone plugin", "file_num_lines": 22, "diff_parsed": {"added": [[49, "        if (getConfig().getBoolean(\"info-command\", true)) {"], [50, "            Commands.create()"], [51, "                    .handler(c -> LoaderUtils.getHelperImplementationPlugins().stream()"], [53, "                            .forEach(pl -> Players.msg(c.sender(), \"&7[&6helper&7] &7Running &6\" + pl.getName() + \" v\" + pl.getDescription().getVersion() + \"&7.\")))"], [54, "                    .register(\"helper\");"]], "deleted": [[29, "import me.lucko.helper.bossbar.BossBarFactory;"], [30, "import me.lucko.helper.bossbar.BukkitBossBarFactory;"], [31, "import me.lucko.helper.bossbar.ViaBossBarFactory;"], [32, "import me.lucko.helper.hologram.BukkitHologramFactory;"], [33, "import me.lucko.helper.hologram.HologramFactory;"], [34, "import me.lucko.helper.hologram.individual.IndividualHologramFactory;"], [35, "import me.lucko.helper.hologram.individual.PacketIndividualHologramFactory;"], [36, "import me.lucko.helper.messaging.bungee.BungeeCord;"], [37, "import me.lucko.helper.messaging.bungee.BungeeCordImpl;"], [38, "import me.lucko.helper.npc.CitizensNpcFactory;"], [39, "import me.lucko.helper.npc.NpcFactory;"], [41, "import me.lucko.helper.scheduler.HelperExecutors;"], [42, "import me.lucko.helper.scoreboard.PacketScoreboardProvider;"], [43, "import me.lucko.helper.scoreboard.ScoreboardProvider;"], [44, "import me.lucko.helper.signprompt.PacketSignPromptFactory;"], [45, "import me.lucko.helper.signprompt.SignPromptFactory;"], [49, "import org.bukkit.plugin.ServicePriority;"], [66, "        Commands.create()"], [67, "                .handler(c -> {"], [68, "                    LoaderUtils.getHelperImplementationPlugins().stream()"], [70, "                            .forEach(pl -> Players.msg(c.sender(), \"&7[&6helper&7] &7Running &6\" + pl.getName() + \" v\" + pl.getDescription().getVersion() + \"&7.\"));"], [71, "                })"], [72, "                .register(\"helper\");"], [73, ""], [74, "        // provide default service implementations"], [75, "        provideService(HologramFactory.class, new BukkitHologramFactory());"], [76, "        provideService(BungeeCord.class, new BungeeCordImpl(this));"], [77, "        if (isPluginPresent(\"ProtocolLib\")) {"], [78, "            PacketScoreboardProvider scoreboardProvider = new PacketScoreboardProvider(this);"], [79, "            provideService(ScoreboardProvider.class, scoreboardProvider);"], [80, "            provideService(PacketScoreboardProvider.class, scoreboardProvider);"], [81, ""], [82, "            SignPromptFactory signPromptFactory = new PacketSignPromptFactory();"], [83, "            provideService(SignPromptFactory.class, signPromptFactory);"], [84, ""], [85, "            try {"], [86, "                IndividualHologramFactory hologramFactory = new PacketIndividualHologramFactory();"], [87, "                provideService(IndividualHologramFactory.class, hologramFactory);"], [88, "            } catch (Throwable t) {"], [89, "                // ignore??"], [90, "            }"], [91, "        }"], [92, "        if (isPluginPresent(\"Citizens\")) {"], [93, "            CitizensNpcFactory npcManager = bind(new CitizensNpcFactory());"], [94, "            provideService(NpcFactory.class, npcManager);"], [95, "            provideService(CitizensNpcFactory.class, npcManager);"], [96, "        }"], [97, "        if (isPluginPresent(\"ViaVersion\")) {"], [98, "            BossBarFactory bossBarFactory = new ViaBossBarFactory();"], [99, "            provideService(BossBarFactory.class, bossBarFactory, ServicePriority.High);"], [100, "        } else if (classExists(\"org.bukkit.boss.BossBar\")) {"], [101, "            BossBarFactory bossBarFactory = new BukkitBossBarFactory(getServer());"], [102, "            provideService(BossBarFactory.class, bossBarFactory);"], [103, "        }"], [104, "    }"], [105, ""], [106, "    @Override"], [107, "    protected void disable() {"], [108, "        // shutdown the scheduler"], [109, "        HelperExecutors.shutdown();"], [110, "    }"], [111, ""], [112, "    private static boolean classExists(String clazz) {"], [113, "        try {"], [114, "            Class.forName(clazz);"], [115, "            return true;"], [116, "        } catch (ClassNotFoundException e) {"], [117, "            return false;"]]}, "num_lines_added": 5, "num_lines_removed": 68}