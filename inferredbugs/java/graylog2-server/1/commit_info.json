{"hash": "138051f16e57c18c8622f86b34582129c9807e8d", "message": "More unit tests", "file_num_lines": 19, "diff_parsed": {"added": [[42, "        DatagramPacket gelfMessage = GELFTestHelper.buildZLIBCompressedDatagramPacket(this.originalMessage);"], [56, "        DatagramPacket gelfMessage = GELFTestHelper.buildGZIPCompressedDatagramPacket(this.originalMessage);"]], "deleted": [[23, "import java.io.ByteArrayInputStream;"], [24, "import java.io.ByteArrayOutputStream;"], [26, "import java.util.zip.Deflater;"], [27, "import java.util.zip.GZIPOutputStream;"], [45, "        // ZLIB compress message."], [46, "        byte[] compressMe = this.originalMessage.getBytes();"], [47, "        byte[] compressedMessage = new byte[compressMe.length];"], [48, "        Deflater compressor = new Deflater();"], [49, "        compressor.setInput(compressMe);"], [50, "        compressor.finish();"], [51, "        compressor.deflate(compressedMessage);"], [52, ""], [54, "        DatagramPacket gelfMessage = new DatagramPacket(compressedMessage, compressedMessage.length);"], [67, "        // GZIP compress message."], [68, "        ByteArrayInputStream compressMe = new ByteArrayInputStream(this.originalMessage.getBytes());"], [69, "        ByteArrayOutputStream compressedMessage = new ByteArrayOutputStream();"], [70, "        GZIPOutputStream out = new GZIPOutputStream(compressedMessage);"], [71, "        for (int c = compressMe.read(); c != -1; c = compressMe.read()) {"], [72, "            out.write(c);"], [73, "        }"], [74, "        out.close();"], [75, ""], [77, "        DatagramPacket gelfMessage = new DatagramPacket(compressedMessage.toByteArray(), compressedMessage.size());"]]}, "num_lines_added": 2, "num_lines_removed": 23}