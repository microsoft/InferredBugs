{"hash": "3c35c961b5da674c4a56f73f303439e48348db54", "message": "clean up\n\ngit-svn-id: http://hazelcast.googlecode.com/svn/trunk@566 3f8e66b6-ca9d-11dd-a2b5-e5f827957e07", "file_num_lines": 253, "diff_parsed": {"added": [[44, ""], [46, ""], [48, ""], [50, ""], [52, ""], [54, ""], [56, ""], [58, ""], [60, ""], [62, ""], [64, ""], [66, ""], [68, ""], [71, "\tprivate byte indexCount = 0;"], [72, ""], [73, "    private long[] indexes = new long[6];"], [74, ""], [75, "    private byte[] indexTypes = new byte[6];"], [76, ""], [78, "\tpublic void writeTo(DataOutputStream outputStream) throws IOException {"], [79, "\t\theaderInBytes = getHeader();"], [80, "\t\theaderSize = headerInBytes.length;"], [81, "\t\toutputStream.writeInt(headerSize);"], [82, "\t\toutputStream.writeInt(keySize);"], [83, "\t\toutputStream.writeInt(valueSize);"], [84, "\t\toutputStream.write(headerInBytes);"], [85, "\t\tif(key!=null)"], [86, "\t\t\toutputStream.write(key);"], [87, ""], [88, "\t\tif(value!=null)"], [89, "\t\t\toutputStream.write(value);"], [90, ""], [91, "\t}"], [92, "\tpublic void readFrom(DataInputStream dis) throws IOException {"], [93, "\t\theaderSize = dis.readInt();"], [94, "\t\tkeySize = dis.readInt();"], [95, "\t\tvalueSize = dis.readInt();"], [96, "\t\theaderInBytes = new byte[headerSize];"], [97, "\t\tdis.read(headerInBytes);"], [98, ""], [99, ""], [100, "\t\tByteArrayInputStream bis = new ByteArrayInputStream(headerInBytes);"], [101, "\t\tDataInputStream dis2 = new DataInputStream(bis);"], [102, "\t\tthis.operation = ClusterOperation.create(dis2.readInt());"], [103, "\t\tthis.blockId = dis2.readInt();"], [104, "\t\tthis.threadId = dis2.readInt();"], [105, "\t\tthis.lockCount = dis2.readInt();"], [106, "\t\tthis.timeout = dis2.readLong();"], [107, "\t\tthis.txnId = dis2.readLong();"], [108, "\t\tthis.longValue = dis2.readLong();"], [109, "\t\tthis.recordId = dis2.readLong();"], [110, "\t\tthis.version = dis2.readLong();"], [111, "\t\tthis.callId = (int) dis2.readLong();"], [112, "\t\tthis.client = dis2.readByte()==1;"], [113, "\t\tthis.responseType = dis2.readByte();"], [114, "\t\tint nameLength = dis2.readInt();"], [115, "\t\tbyte[] b = new byte[nameLength];"], [116, "\t\tdis2.read(b);"], [117, "\t\tthis.name = new String(b);"], [118, "\t\tthis.lockAddressIsNull = dis2.readBoolean();"], [119, "\t    indexCount = dis2.readByte();"], [120, "        for (int i=0; i<indexCount ; i++) {"], [121, "            indexes[i] = dis2.readLong();"], [122, "            indexTypes[i] = dis2.readByte();"], [123, "        }"], [124, ""], [125, ""], [126, "\t\tkey = new byte[keySize];"], [127, "\t\tdis.read(key);"], [128, "\t\tvalue = new byte[valueSize];"], [129, "\t\tdis.read(value);"], [130, "\t}"], [131, ""], [132, "\tprivate byte[] getHeader() throws IOException {"], [133, "\t\tByteArrayOutputStream bos = new ByteArrayOutputStream();"], [134, "\t\tDataOutputStream dos = new DataOutputStream(bos);"], [135, "\t\tdos.writeInt(operation.getValue());"], [136, "\t\tdos.writeInt(blockId);"], [137, "\t\tdos.writeInt(threadId);"], [138, "\t\tdos.writeInt(lockCount);"], [139, "\t\tdos.writeLong(timeout);"], [140, "\t\tdos.writeLong(txnId);"], [141, "\t\tdos.writeLong(longValue);"], [142, "\t\tdos.writeLong(recordId);"], [143, "\t\tdos.writeLong(version);"], [144, "\t\tdos.writeLong(callId);"], [145, "\t\tdos.writeByte(client?1:0);"], [146, "\t\tdos.writeByte(responseType);"], [147, "\t\tbyte[] nameInBytes = name.getBytes();"], [148, "\t\tdos.writeInt(nameInBytes.length);"], [149, "\t\tdos.write(nameInBytes);"], [150, "\t\tdos.writeBoolean(lockAddressIsNull);"], [151, "\t\tdos.writeByte(indexCount);"], [152, "        for (int i=0; i < indexCount; i++){"], [153, "        \tdos.writeLong(indexes[i]);"], [154, "        \tdos.writeByte(indexTypes[i]);"], [155, "        }"], [156, "\t\treturn bos.toByteArray();"], [157, "\t}"], [158, "\tpublic void set(String name, ClusterOperation operation,"], [159, "\t\t\tbyte[] key, byte[] value) {"], [160, "\t\tthis.name = name;"], [161, "\t\tthis.operation  = operation;"], [162, "\t\tthis.setKey(key);"], [163, "\t\tthis.setValue(value);"], [164, ""], [165, "\t}"], [166, ""], [167, ""], [285, "\t}"], [286, "\tpublic void setClient(boolean client) {"], [287, "\t\tthis.client = client;"], [289, "\tpublic boolean isClient() {"], [290, "\t\treturn client;"], [292, "    public byte getIndexCount() {"], [293, "\t\treturn indexCount;"], [295, "\tpublic void setIndexCount(byte indexCount) {"], [296, "\t\tthis.indexCount = indexCount;"], [298, "\tpublic long[] getIndexes() {"], [299, "\t\treturn indexes;"], [301, "\tpublic void setIndexes(long[] indexes) {"], [302, "\t\tthis.indexes = indexes;"], [304, "\tpublic byte[] getIndexTypes() {"], [305, "\t\treturn indexTypes;"], [306, "\t}"], [307, "\tpublic void setIndexTypes(byte[] indexTypes) {"], [308, "\t\tthis.indexTypes = indexTypes;"]], "deleted": [[177, ""], [178, "\tpublic void writeTo(DataOutputStream outputStream) throws IOException {"], [179, "\t\theaderInBytes = getHeader();"], [180, "\t\theaderSize = headerInBytes.length;"], [181, "\t\toutputStream.writeInt(headerSize);"], [182, "\t\toutputStream.writeInt(keySize);"], [183, "\t\toutputStream.writeInt(valueSize);"], [184, "\t\toutputStream.write(headerInBytes);"], [185, "\t\tif(key!=null)"], [186, "\t\t\toutputStream.write(key);"], [187, ""], [188, "\t\tif(value!=null)"], [189, "\t\t\toutputStream.write(value);"], [190, ""], [192, "\tpublic void readFrom(DataInputStream dis) throws IOException {"], [193, "\t\tSystem.out.println(\"Available:\" + dis.available());"], [194, "\t\theaderSize = dis.readInt();"], [195, "\t\tkeySize = dis.readInt();"], [196, "\t\tvalueSize = dis.readInt();"], [197, "\t\theaderInBytes = new byte[headerSize];"], [198, "\t\tdis.read(headerInBytes);"], [199, ""], [200, ""], [201, "\t\tByteArrayInputStream bis = new ByteArrayInputStream(headerInBytes);"], [202, "\t\tDataInputStream dis2 = new DataInputStream(bis);"], [203, "\t\tthis.operation = ClusterOperation.create(dis2.readInt());"], [204, "\t\tthis.blockId = dis2.readInt();"], [205, "\t\tthis.threadId = dis2.readInt();"], [206, "\t\tthis.lockCount = dis2.readInt();"], [207, "\t\tthis.timeout = dis2.readLong();"], [208, "\t\tthis.txnId = dis2.readLong();"], [209, "\t\tthis.longValue = dis2.readLong();"], [210, "\t\tthis.recordId = dis2.readLong();"], [211, "\t\tthis.version = dis2.readLong();"], [212, "\t\tthis.callId = (int) dis2.readLong();"], [213, "\t\tthis.client = dis2.readByte()==1;"], [214, "\t\tthis.responseType = dis2.readByte();"], [215, "\t\tint nameLength = dis2.readInt();"], [216, "\t\tbyte[] b = new byte[nameLength];"], [217, "\t\tdis2.read(b);"], [218, "\t\tthis.name = new String(b);"], [219, "\t\tthis.lockAddressIsNull = dis2.readBoolean();"], [220, "\t\tkey = new byte[keySize];"], [221, "\t\tdis.read(key);"], [222, "\t\tvalue = new byte[valueSize];"], [223, "\t\tdis.read(value);"], [225, ""], [226, "\tprivate byte[] getHeader() throws IOException {"], [227, "\t\tByteArrayOutputStream bos = new ByteArrayOutputStream();"], [228, "\t\tDataOutputStream dos = new DataOutputStream(bos);"], [229, "\t\tdos.writeInt(operation.getValue());"], [230, "\t\tdos.writeInt(blockId);"], [231, "\t\tdos.writeInt(threadId);"], [232, "\t\tdos.writeInt(lockCount);"], [233, "\t\tdos.writeLong(timeout);"], [234, "\t\tdos.writeLong(txnId);"], [235, "\t\tdos.writeLong(longValue);"], [236, "\t\tdos.writeLong(recordId);"], [237, "\t\tdos.writeLong(version);"], [238, "\t\tdos.writeLong(callId);"], [239, "\t\tdos.writeByte(client?1:0);"], [240, "\t\tdos.writeByte(responseType);"], [241, "\t\tbyte[] nameInBytes = name.getBytes();"], [242, "\t\tdos.writeInt(nameInBytes.length);"], [243, "\t\tdos.write(nameInBytes);"], [244, "\t\tdos.writeBoolean(lockAddressIsNull);"], [245, "\t\treturn bos.toByteArray();"], [247, "\tpublic void set(String name, ClusterOperation operation,"], [248, "\t\t\tbyte[] key, byte[] value) {"], [249, "\t\tthis.name = name;"], [250, "\t\tthis.operation  = operation;"], [251, "\t\tthis.setKey(key);"], [252, "\t\tthis.setValue(value);"], [253, ""], [255, "\tpublic void setClient(boolean client) {"], [256, "\t\tthis.client = client;"], [258, "\tpublic boolean isClient() {"], [259, "\t\treturn client;"], [261, ""]]}, "num_lines_added": 127, "num_lines_removed": 79}