{"hash": "86ba198825f8c39dc46200901baed7fec58dae0c", "message": "Code cleaning\n\ngit-svn-id: http://hazelcast.googlecode.com/svn/trunk@240 3f8e66b6-ca9d-11dd-a2b5-e5f827957e07", "file_num_lines": 1599, "diff_parsed": {"added": [[461, "        boolean valid = q.rightPutTarget(packet.blockId);"], [462, "        if (!valid) {"], [465, "        return valid;"], [470, "        boolean valid = q.rightTakeTarget(packet.blockId);"], [471, "        if (!valid) {"], [474, "        return (valid);"], [923, "            doOffer(request);"], [924, "            if (!request.scheduled) {"], [1192, "                valid = rightTakeTarget(request.blockId);"], [1225, "                valid = q.rightPutTarget(request.blockId);"], [1464, "            return doHardCopy(value);"], [1543, "        boolean rightPutTarget(int blockId) {"], [1544, "            setCurrentPut();"], [1545, "            return (blCurrentPut != null)"], [1546, "                    && (blCurrentPut.blockId == blockId)"], [1547, "                    && (thisAddress.equals(blCurrentPut.address))"], [1548, "                    && (!blCurrentPut.isFull());"], [1549, ""], [1550, "        }"], [1551, ""], [1552, "        boolean rightTakeTarget(int blockId) {"], [1553, "            setCurrentTake();"], [1554, "            return (blCurrentTake != null)"], [1555, "                    && (blCurrentTake.blockId == blockId)"], [1556, "                    && (thisAddress.equals(blCurrentTake.address))"], [1557, "                    && (blCurrentTake.size() > 0 || !blCurrentTake.isFull());"], [1558, "        }"], [1559, ""], [1561, "            if (blCurrentPut == null || blCurrentPut.isFull()) {"], [1562, "                int size = lsBlocks.size();"], [1563, "                for (int i = 0; i < size; i++) {"], [1564, "                    Block block = lsBlocks.get(i);"], [1565, "                    if (!block.isFull()) {"], [1566, "                        blCurrentPut = block;"], [1567, "                        return;"], [1568, "                    }"], [1569, "                }"], [1570, "            }"], [1571, "        }"], [1572, ""], [1573, "        Block getCurrentPutBlock() {"], [1574, "            setCurrentPut();"], [1575, "            return blCurrentPut;"], [1576, "        }"], [1577, ""], [1578, "        Block getCurrentTakeBlock() {"], [1579, "            setCurrentTake();"], [1580, "            return blCurrentTake;"], [1581, "        }"], [1582, ""], [1583, "        public void setCurrentTake() {"], [1584, "            if (blCurrentTake == null || blCurrentTake.size() == 0) {"], [1585, "                if (lsBlocks.size() > 0) {"], [1586, "                    blCurrentTake = lsBlocks.get(0);"], [1591, "        @Override"], [1592, "        public String toString() {"], [1593, "            return \"Q{name='\" + name + \"'}\";"], [1594, "        }"], [1595, ""], [1596, "        @Override"], [1597, "        public boolean equals(Object o) {"], [1598, "            if (this == o) return true;"], [1599, "            if (o == null || getClass() != o.getClass()) return false;"], [1600, ""], [1601, "            Q q = (Q) o;"], [1602, ""], [1603, "            if (name != null ? !name.equals(q.name) : q.name != null) return false;"], [1604, ""], [1605, "            return true;"], [1606, "        }"], [1607, ""], [1608, "        @Override"], [1609, "        public int hashCode() {"], [1610, "            return name != null ? name.hashCode() : 0;"], [1611, "        }"], [1612, ""], [1751, "        public boolean equals(Object o) {"], [1752, "            if (this == o) return true;"], [1753, "            if (o == null || getClass() != o.getClass()) return false;"], [1754, ""], [1755, "            Block block = (Block) o;"], [1756, ""], [1757, "            if (blockId != block.blockId) return false;"], [1758, "            if (name != null ? !name.equals(block.name) : block.name != null) return false;"], [1759, ""], [1760, "            return true;"], [1761, "        }"], [1762, ""], [1763, "        @Override"], [1764, "        public int hashCode() {"], [1765, "            int result = blockId;"], [1766, "            result = 31 * result + (name != null ? name.hashCode() : 0);"], [1767, "            return result;"], [1768, "        }"], [1769, ""], [1770, "        @Override"]], "deleted": [[24, "import com.hazelcast.impl.ClusterManager.AbstractRemotelyProcessable;"], [76, "        ClusterService.get().registerPacketProcessor(OP_B_PUBLISH, new PacketProcessor() {"], [77, "            public void process(PacketQueue.Packet packet) {"], [78, "                handlePublish(packet);"], [79, "            }"], [80, "        });"], [81, "        ClusterService.get().registerPacketProcessor(OP_B_ADD_TOPIC_LISTENER, new PacketProcessor() {"], [82, "            public void process(PacketQueue.Packet packet) {"], [83, "                handleAddTopicListener(packet);"], [84, "            }"], [85, "        });"], [470, "    final void handlePublish(Packet packet) {"], [471, "        if (rightRemoteOfferTarget(packet)) {"], [472, "            remoteReq.setFromPacket(packet);"], [473, "            doPublish(remoteReq);"], [474, "            packet.longValue = remoteReq.longValue;"], [475, "            if (!remoteReq.scheduled) {"], [476, "                if (remoteReq.response == Boolean.TRUE) {"], [477, "                    sendResponse(packet);"], [478, "                } else {"], [479, "                    sendResponseFailure(packet);"], [480, "                }"], [481, "            } else {"], [482, "                packet.returnToContainer();"], [483, "            }"], [484, "            remoteReq.reset();"], [485, "        }"], [486, "    }"], [487, ""], [488, "    final void handleAddTopicListener(PacketQueue.Packet packet) {"], [489, "        if (rightRemoteOfferTarget(packet)) {"], [490, "            remoteReq.setFromPacket(packet);"], [491, "            doAddTopicListener(remoteReq);"], [492, "            packet.longValue = remoteReq.longValue;"], [493, "            sendResponse(packet);"], [494, "            remoteReq.reset();"], [495, "        }"], [496, "    }"], [497, ""], [500, "        if (q.blCurrentPut == null) {"], [501, "            q.setCurrentPut();"], [502, "        }"], [503, "        boolean invalid = false;"], [504, "        if (packet.blockId != q.blCurrentPut.blockId) {"], [505, "            if (packet.blockId > q.blCurrentPut.blockId) {"], [506, "                int size = q.lsBlocks.size();"], [507, "                for (int i = 0; i < size; i++) {"], [508, "                    Block block = q.lsBlocks.get(i);"], [509, "                    if (block.blockId == packet.blockId) {"], [510, "                        if (thisAddress.equals(block.address)) {"], [511, "                            q.blCurrentPut = block;"], [512, "                        }"], [513, "                    }"], [514, "                }"], [515, "            } else {"], [516, "                invalid = true;"], [517, "            }"], [518, "        }"], [519, "        if (q.blCurrentPut.isFull() || !thisAddress.equals(q.blCurrentPut.address)) {"], [520, "            invalid = true;"], [521, "        }"], [522, "        if (invalid) {"], [525, "        return (!invalid);"], [530, "        if (q.blCurrentTake == null) {"], [531, "            q.setCurrentTake();"], [532, "        }"], [533, "        boolean invalid = false;"], [534, "        if (packet.blockId != q.blCurrentTake.blockId) {"], [535, "            if (packet.blockId > q.blCurrentTake.blockId) {"], [536, "                int size = q.lsBlocks.size();"], [537, "                for (int i = 0; i < size; i++) {"], [538, "                    Block block = q.lsBlocks.get(i);"], [539, "                    if (block.blockId == packet.blockId) {"], [540, "                        if (thisAddress.equals(block.address)) {"], [541, "                            q.blCurrentTake = block;"], [542, "                        }"], [543, "                    }"], [544, "                }"], [545, "            } else {"], [546, "                invalid = true;"], [547, "            }"], [548, "        }"], [549, "        if ((q.blCurrentTake.size() == 0 && q.blCurrentTake.isFull())"], [550, "                || !thisAddress.equals(q.blCurrentTake.address)) {"], [551, "            invalid = true;"], [552, "        }"], [553, "        if (invalid) {"], [556, "        return (!invalid);"], [961, "    class AddTopicListener extends LongOp {"], [962, "        public Long add(String name, Object value, long timeout, long txnId) {"], [963, "            return (Long) objectCall(OP_B_ADD_TOPIC_LISTENER, name, null, value, timeout, txnId, -1);"], [964, "        }"], [965, ""], [966, "        @Override"], [967, "        void setTarget() {"], [968, "            target = getTargetForOffer(request);"], [969, "        }"], [970, ""], [971, "        @Override"], [972, "        void doLocalOp() {"], [973, "            doAddTopicListener(request);"], [974, "            setResult(Long.valueOf(request.recordId));"], [975, "        }"], [976, "    }"], [977, ""], [982, "        public boolean publish(String name, Object value, long timeout, long txnId) {"], [983, "            return booleanCall(OP_B_PUBLISH, name, null, value, timeout, txnId, -1);"], [984, "        }"], [985, ""], [1015, ""], [1027, "            if (request.operation == OP_B_OFFER) {"], [1028, "                doOffer(request);"], [1029, "                if (!request.scheduled) {"], [1030, "                    setResult(request.response);"], [1031, "                }"], [1032, "            } else {"], [1033, "                doPublish(request);"], [1102, "    void doAddTopicListener(Request req) {"], [1103, "        for (MemberImpl member : lsMembers) {"], [1104, "            if (member.localMember()) {"], [1105, "                handleListenerRegisterations(true, req.name, req.key, req.caller, true);"], [1106, "            } else if (!member.getAddress().equals(req.caller)) {"], [1107, "                sendProcessableTo(new TopicListenerRegistration(req.name, true, req.caller), member"], [1108, "                        .getAddress());"], [1109, "            }"], [1110, "        }"], [1111, "        Q q = getQ(req.name);"], [1112, "        if (q.blCurrentPut == null) {"], [1113, "            q.setCurrentPut();"], [1114, "        }"], [1115, "        req.recordId = q.getRecordId(q.blCurrentPut.blockId, q.blCurrentPut.addIndex);"], [1116, "    }"], [1117, ""], [1118, "    public static class TopicListenerRegistration extends AbstractRemotelyProcessable {"], [1119, "        String name = null;"], [1120, "        boolean add = true;"], [1121, "        Address listenerAddress = null;"], [1122, ""], [1123, "        public TopicListenerRegistration() {"], [1124, "        }"], [1125, ""], [1126, "        public TopicListenerRegistration(String name, boolean add, Address listenerAddress) {"], [1127, "            super();"], [1128, "            this.name = name;"], [1129, "            this.add = add;"], [1130, "            this.listenerAddress = listenerAddress;"], [1131, "        }"], [1132, ""], [1133, "        @Override"], [1134, "        public void readData(DataInput in) throws IOException {"], [1135, "            add = in.readBoolean();"], [1136, "            listenerAddress = new Address();"], [1137, "            listenerAddress.readData(in);"], [1138, "            name = in.readUTF();"], [1139, "        }"], [1140, ""], [1141, "        @Override"], [1142, "        public void writeData(DataOutput out) throws IOException {"], [1143, "            out.writeBoolean(add);"], [1144, "            listenerAddress.writeData(out);"], [1145, "            out.writeUTF(name);"], [1146, "        }"], [1147, ""], [1148, "        public void process() {"], [1149, "            ListenerManager.get().handleListenerRegisterations(true, name, null, listenerAddress,"], [1150, "                    true);"], [1151, "        }"], [1152, ""], [1153, "    }"], [1154, ""], [1167, "    void doPublish(Request req) {"], [1168, "        Q q = getQ(req.name);"], [1169, "        if (q.blCurrentPut == null) {"], [1170, "            q.setCurrentPut();"], [1171, "        }"], [1172, "        int index = q.publish(req);"], [1173, "        req.longValue = index;"], [1174, "        req.response = Boolean.TRUE;"], [1175, "    }"], [1176, ""], [1364, "                Block currentTakeBlock = q.getCurrentTakeBlock();"], [1365, "                valid = (currentTakeBlock.blockId == request.blockId)"], [1366, "                        && thisAddress.equals(currentTakeBlock.address)"], [1367, "                        && currentTakeBlock.size() > 0;"], [1400, "                Block currentPutBlock = q.getCurrentPutBlock();"], [1401, "                valid = (currentPutBlock.blockId == request.blockId)"], [1402, "                        && thisAddress.equals(currentPutBlock.address)"], [1403, "                        && !currentPutBlock.isFull();"], [1491, "        public Block getCurrentPutBlock() {"], [1492, "            if (blCurrentPut == null) {"], [1493, "                setCurrentPut();"], [1494, "            }"], [1495, "            return blCurrentPut;"], [1496, "        }"], [1497, ""], [1498, "        Block getCurrentTakeBlock() {"], [1499, "            if (blCurrentTake == null) {"], [1500, "                if (lsBlocks.size() == 0) {"], [1501, "                    return null;"], [1502, "                }"], [1503, "                blCurrentTake = lsBlocks.get(0);"], [1504, "            }"], [1505, "            return blCurrentTake;"], [1506, "        }"], [1507, ""], [1508, "        public void setCurrentTake() {"], [1509, "            if (blCurrentTake == null) {"], [1510, "                blCurrentTake = lsBlocks.get(0);"], [1511, "                // System.out.println(\"CurrentTake : \" + blCurrentTake);"], [1512, "            }"], [1513, "        }"], [1514, ""], [1584, "        int publish(Request req) {"], [1585, "            int addIndex = blCurrentPut.add(req.value);"], [1586, "            long recordId = getRecordId(blCurrentPut.blockId, addIndex);"], [1587, "            doFireEntryEvent(true, req.value, recordId);"], [1588, "            if (blCurrentPut.isFull()) {"], [1589, "                fireBlockFullEvent(blCurrentPut);"], [1590, "                blCurrentPut = null;"], [1591, "                setCurrentPut();"], [1592, "            }"], [1593, "            return addIndex;"], [1594, "        }"], [1595, ""], [1678, "            return ThreadContext.get().hardCopy(value);"], [1758, "            int size = lsBlocks.size();"], [1759, "            for (int i = 0; i < size; i++) {"], [1760, "                Block block = lsBlocks.get(i);"], [1761, "                // System.out.println(\"setCurrentPut check \" + block);"], [1762, "                if (!block.isFull()) {"], [1763, "                    blCurrentPut = block;"], [1764, "                    // System.out.println(\"Setting..currentPut \" +"], [1765, "                    // blCurrentPut);"], [1766, "                    return;"]]}, "num_lines_added": 96, "num_lines_removed": 234}