{"hash": "9b9fa6e9ce7b191e6dfd3a6f9339e37bc2967889", "message": "Much simpler migration logic. \n1. blocks are sent to all members every 10 seconds and/or when one block is selected to migrate. This will enable us to detect if any member has different block ownership info and correct it if necessery. Enable us detect and fix partial migrations also.. imagine that migration target address is dying in the middle of migration..or imagine that migrating member dying before informing that the migration is completed.\n2. logic is centralized. local and remote blocks/blockinfo calls are handled the same way.\n3. we can detect migration start and end event on all members. this will help us implement the migration events as part of the Partition API. \n\n\ngit-svn-id: http://hazelcast.googlecode.com/svn/trunk@934 3f8e66b6-ca9d-11dd-a2b5-e5f827957e07", "file_num_lines": 470, "diff_parsed": {"added": [[144, "//            sendBlocks();"], [145, "//            final MasterMigratorTask task = new MasterMigratorTask();"], [146, "//            qMasterMigratorTasks.offer(task);"], [147, "//            node.executorManager.executeMigrationTask(task);"], [148, "            initiateMigration();"], [172, "        boolean hasMigrating = false;"], [179, "            if (!hasMigrating && block.isMigrating()) {"], [180, "                hasMigrating = true;"], [181, "            }"], [189, "        if (!hasMigrating && lsBlocksToMigrate.size() > 0) {"], [191, "            sendBlocks(block);"], [224, "            sendBlocks(null);"], [246, "    void sendBlocks(Block blockInfo) {"], [247, "        for (int i = 0; i < BLOCK_COUNT; i++) {"], [248, "            Block block = blocks[i];"], [249, "            if (block == null) {"], [250, "                block = concurrentMapManager.getOrCreateBlock(i);"], [251, "            }"], [252, "            if (block.getOwner() == null) {"], [253, "                block.setOwner(thisAddress);"], [254, "            }"], [255, "        }"], [256, "        ConcurrentMapManager.BlockOwners allBlockOwners = new ConcurrentMapManager.BlockOwners();"], [257, "        for (Block block : blocks) {"], [258, "            if (blockInfo != null && block.getBlockId() == blockInfo.getBlockId()) {"], [259, "                allBlockOwners.addBlock(blockInfo);"], [260, "            } else {"], [261, "                allBlockOwners.addBlock(block);"], [262, "            }"], [263, "        }"], [264, "        allBlockOwners.setNode(node);"], [265, "        Data dataAllBlocks = ThreadContext.get().toData(allBlockOwners);"], [266, "        for (MemberImpl member : concurrentMapManager.getMembers()) {"], [267, "            if (!member.localMember()) {"], [268, "                concurrentMapManager.send(\"blocks\", CONCURRENT_MAP_BLOCKS, dataAllBlocks, member.getAddress());"], [269, "            } else {"], [270, "                allBlockOwners.process();"], [271, "            }"], [272, "        }"], [273, "    }"], [274, ""], [481, "        if (blockReal.isMigrationStarted()) {"], [484, "        blockReal.setMigrationStarted(true);"], [534, "                            blockInfo.setOwner(blockInfo.getMigrationAddress());"], [535, "                            blockInfo.setMigrationAddress(null);"], [536, "                            concurrentMapManager.doBlockInfo(blockInfo);"], [539, "                                    concurrentMapManager.sendBlockInfo(new Block(blockInfo), member.getAddress());"]], "deleted": [[144, "            final MasterMigratorTask task = new MasterMigratorTask();"], [145, "            qMasterMigratorTasks.offer(task);"], [146, "            node.executorManager.executeMigrationTask(task);"], [183, "        if (lsBlocksToMigrate.size() > 0) {"], [185, "            if (concurrentMapManager.isBlockInfoValid(block)) {"], [186, "                if (thisAddress.equals(block.getOwner())) {"], [187, "                    concurrentMapManager.doBlockInfo(block);"], [188, "                } else {"], [189, "                    concurrentMapManager.sendBlockInfo(block, block.getOwner());"], [190, "                }"], [191, "            }"], [224, "            Data dataAllBlocks = null;"], [225, "            for (MemberImpl member : concurrentMapManager.getMembers()) {"], [226, "                if (!member.localMember()) {"], [227, "                    if (dataAllBlocks == null) {"], [228, "                        ConcurrentMapManager.BlockOwners allBlockOwners = new ConcurrentMapManager.BlockOwners();"], [229, "                        for (Block block : blocks) {"], [230, "                            allBlockOwners.addBlock(block);"], [231, "                        }"], [232, "                        dataAllBlocks = ThreadContext.get().toData(allBlockOwners);"], [233, "                    }"], [234, "                    concurrentMapManager.send(\"blocks\", CONCURRENT_MAP_BLOCKS, dataAllBlocks, member.getAddress());"], [235, "                }"], [236, "            }"], [454, "        if (!concurrentMapManager.isBlockInfoValid(blockInfo)) {"], [455, "            return;"], [456, "        }"], [467, "        if (blockReal.isMigrating()) {"], [468, "            if (!blockInfo.getMigrationAddress().equals(blockReal.getMigrationAddress())) {"], [469, "                logger.log(Level.WARNING, blockReal + \". Already migrating blockInfo is migrating again to \" + blockInfo);"], [470, "            } else {"], [471, "                logger.log(Level.WARNING, blockInfo + \" migration unknown \" + blockReal);"], [472, "            }"], [524, "                            Block blockReal = blocks[blockInfo.getBlockId()];"], [525, "                            logger.log(Level.FINEST, \"migrate completing [\" + blockInfo + \"] realBlock \" + blockReal);"], [526, "                            blockReal.setOwner(blockReal.getMigrationAddress());"], [527, "                            blockReal.setMigrationAddress(null);"], [528, "                            logger.log(Level.FINEST, \"migrate complete [\" + blockInfo.getMigrationAddress() + \"] now realBlock \" + blockReal);"], [531, "                                    concurrentMapManager.sendBlockInfo(new Block(blockReal), member.getAddress());"]]}, "num_lines_added": 47, "num_lines_removed": 39}