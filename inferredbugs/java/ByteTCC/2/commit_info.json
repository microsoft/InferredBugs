{"hash": "90cbb6edbe315e42e8533d3ebe8aa8cbfea3ee94", "message": "\u4fee\u590dparticipant\u5728\u8d85\u65f6\u573a\u666f\u4e0bTry\u9636\u6bb5\u8d44\u6e90enlist\u64cd\u4f5c\u5f02\u5e38\u7684\u95ee\u9898", "file_num_lines": 1108, "diff_parsed": {"added": [[848, "\t\tXAResourceDescriptor descriptor = null;"], [849, "\t\tif (XAResourceArchive.class.isInstance(xares)) {"], [850, "\t\t\tdescriptor = ((XAResourceArchive) xares).getDescriptor();"], [851, "\t\t} else if (XAResourceDescriptor.class.isInstance(xares)) {"], [852, "\t\t\tdescriptor = (XAResourceDescriptor) xares;"], [856, "\t\t\tthis.onCompletionPhaseEnlistResource(xid, descriptor);"], [858, "\t\t\tthis.onInvocationPhaseEnlistResource(xid, descriptor);"], [859, "\t\t}"], [860, "\t}"], [862, "\tprivate void onInvocationPhaseEnlistResource(Xid xid, XAResourceDescriptor descriptor) {"], [863, "\t\tCompensableLogger compensableLogger = this.beanFactory.getCompensableLogger();"], [865, "\t\tString resourceKey = descriptor == null ? null : descriptor.getIdentifier();"], [866, "\t\tfor (int i = 0; i < this.currentArchiveList.size(); i++) {"], [867, "\t\t\tCompensableArchive compensableArchive = this.currentArchiveList.get(i);"], [868, "\t\t\tcompensableArchive.setTransactionXid(xid);"], [869, "\t\t\tcompensableArchive.setTransactionResourceKey(resourceKey);"], [870, ""], [871, "\t\t\tXidFactory transactionXidFactory = this.beanFactory.getTransactionXidFactory();"], [872, "\t\t\tTransactionXid globalXid = transactionXidFactory.createGlobalXid(xid.getGlobalTransactionId());"], [873, "\t\t\tTransactionXid branchXid = transactionXidFactory.createBranchXid(globalXid);"], [874, "\t\t\tcompensableArchive.setCompensableXid(branchXid); // preset the compensable-xid."], [875, ""], [876, "\t\t\tcompensableLogger.createCompensable(compensableArchive);"], [878, "\t}"], [879, ""], [880, "\tprivate void onCompletionPhaseEnlistResource(Xid actualXid, XAResourceDescriptor descriptor) {"], [881, "\t\tXid expectXid = this.archive == null ? null : this.archive.getCompensableXid();"], [882, "\t\tif (CommonUtils.equals(expectXid, actualXid) == false) {"], [883, "\t\t\t// enlist by the try operation, and current tx is rollingback/committing."], [884, "\t\t\tthrow new IllegalStateException(\"Illegal state: maybe the try phase operation has timed out.!\");"], [885, "\t\t} // end-if (CommonUtils.equals(expectXid, actualXid) == false)"], [887, "\t\tString resourceKey = descriptor == null ? null : descriptor.getIdentifier();"], [888, "\t\t// this.archive.setCompensableXid(xid); // preset the compensable-xid."], [889, "\t\tthis.archive.setCompensableResourceKey(resourceKey);"], [890, "\t\tthis.beanFactory.getCompensableLogger().updateCompensable(this.archive);"]], "deleted": [[848, "\t\tString resourceKey = null;"], [849, "\t\tif (XAResourceDescriptor.class.isInstance(xares)) {"], [850, "\t\t\tXAResourceDescriptor descriptor = (XAResourceDescriptor) xares;"], [851, "\t\t\tresourceKey = descriptor.getIdentifier();"], [852, "\t\t} else if (XAResourceArchive.class.isInstance(xares)) {"], [853, "\t\t\tXAResourceArchive resourceArchive = (XAResourceArchive) xares;"], [854, "\t\t\tXAResourceDescriptor descriptor = resourceArchive.getDescriptor();"], [855, "\t\t\tresourceKey = descriptor == null ? null : descriptor.getIdentifier();"], [858, "\t\tCompensableLogger compensableLogger = this.beanFactory.getCompensableLogger();"], [860, "\t\t\t// this.archive.setCompensableXid(xid); // preset the compensable-xid."], [861, "\t\t\tthis.archive.setCompensableResourceKey(resourceKey);"], [862, "\t\t\tcompensableLogger.updateCompensable(this.archive);"], [864, "\t\t\tfor (int i = 0; i < this.currentArchiveList.size(); i++) {"], [865, "\t\t\t\tCompensableArchive compensableArchive = this.currentArchiveList.get(i);"], [866, "\t\t\t\tcompensableArchive.setTransactionXid(xid);"], [867, "\t\t\t\tcompensableArchive.setTransactionResourceKey(resourceKey);"], [869, "\t\t\t\tXidFactory transactionXidFactory = this.beanFactory.getTransactionXidFactory();"], [870, "\t\t\t\tTransactionXid globalXid = transactionXidFactory.createGlobalXid(xid.getGlobalTransactionId());"], [871, "\t\t\t\tTransactionXid branchXid = transactionXidFactory.createBranchXid(globalXid);"], [872, "\t\t\t\tcompensableArchive.setCompensableXid(branchXid); // preset the compensable-xid."], [874, "\t\t\t\tcompensableLogger.createCompensable(compensableArchive);"], [875, "\t\t\t}"]]}, "num_lines_added": 35, "num_lines_removed": 22}