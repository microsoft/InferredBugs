{"hash": "3f4527028615f9ae71d28c4eb4eb9146d6fe095a", "message": "Make FileSinkImages abstract. UI modules will provide their implementation through their Display class. FileSinkImages#createDefault() will use the default UI module specified in the properties.", "file_num_lines": 781, "diff_parsed": {"added": [[64, "import org.graphstream.ui.view.camera.Camera;"], [65, "import org.graphstream.util.Display;"], [93, "public abstract class FileSinkImages implements FileSink {"], [94, "\t/**"], [95, "\t * Create a FileSinkImages object according to the UI module specified in \"org.graphstream.ui\" property."], [96, "\t * If no such module has been set, or if something wrong occurred, null will be returned."], [97, "\t *"], [98, "\t * @return an implementation of FileSinkImages using the current UI module"], [99, "\t */"], [100, "\tpublic static FileSinkImages createDefault() {"], [101, "\t\tString displayClassName = System.getProperty(\"org.graphstream.ui\");"], [102, ""], [103, "\t\tif (displayClassName == null) {"], [104, "\t\t\tLOGGER.severe(\"No UI package detected! Please use System.setProperty(\\\"org.graphstream.ui\\\") \""], [105, "\t\t\t\t\t+ \"for the selected package.\");"], [106, "\t\t} else {"], [107, "\t\t\ttry {"], [108, "\t\t\t\tClass<?> c = Class.forName(displayClassName);"], [109, "\t\t\t\tObject object = c.newInstance();"], [110, ""], [111, "\t\t\t\tif (object instanceof Display) {"], [112, "\t\t\t\t\tDisplay display = (Display) object;"], [113, ""], [114, "\t\t\t\t\tif (display instanceof FileSinkImagesFactory) {"], [115, "\t\t\t\t\t\treturn ((FileSinkImagesFactory) display).createFileSinkImages();"], [116, "\t\t\t\t\t} else {"], [117, "\t\t\t\t\t\tLOGGER.warning(\"This UI module does not provide a FileSinkImages implementation\");"], [118, "\t\t\t\t\t}"], [119, "\t\t\t\t} else {"], [120, "\t\t\t\t\tLOGGER.severe(\"Invalid Display object! Please verify the name in \""], [121, "\t\t\t\t\t\t\t+ \"System.setProperty(\\\"org.graphstream.ui\\\")\");"], [122, "\t\t\t\t}"], [123, "\t\t\t} catch (Exception e) {"], [124, "\t\t\t\tLOGGER.log(Level.SEVERE, \"Failed to create Display\", e);"], [125, "\t\t\t}"], [126, "\t\t}"], [127, ""], [128, "\t\treturn null;"], [129, "\t}"], [170, "\t * Defines the quality of the rendering."], [171, "\t * It uses \"ui.quality\" and \"ui.antialias\" graph attributes. If quality is set to low,"], [172, "\t * both attributes will be disabled. On medium quality, only \"ui.quality\" is enable,"], [173, "\t * and on high quality, both attributes are enabled."], [202, "\tprotected boolean hasBegun = false;"], [206, "\tprotected FileSinkImages() {"], [210, "\tprotected FileSinkImages(OutputType type, Resolution resolution) {"], [211, "\t\tthis(type, resolution, OutputPolicy.NONE);"], [214, "\tprotected FileSinkImages(OutputType type, Resolution resolution, OutputPolicy outputPolicy) {"], [217, "\t\tthis.filePrefix = \"frame_\";"], [219, "\t\tthis.gg = new GraphicGraph(String.format(\"images-%x\", System.currentTimeMillis()));"], [231, "\t * Get the camera that controls view position and boundaries."], [232, "\t *"], [233, "\t * @return a camera object, associated with the {@link org.graphstream.ui.view.GraphRenderer} use for rendering."], [234, "\t */"], [235, "\tprotected abstract Camera getCamera();"], [236, ""], [237, "\t/**"], [238, "\t * Render the graph."], [239, "\t */"], [240, "\tprotected abstract void render();"], [241, ""], [242, "\t/**"], [243, "\t * Get the image in which graph has been rendered."], [244, "\t *"], [245, "\t * @return an image of the graph"], [246, "\t */"], [247, "\tprotected abstract BufferedImage getRenderedImage();"], [248, ""], [249, "\t/**"], [250, "\t * Initialize the image data. This method is called at sink creation and each time there is a change"], [251, "\t * in image specifications (resolution, type)."], [252, "\t */"], [253, "\tprotected abstract void initImage();"], [254, ""], [255, "\t/**"], [256, "\t * Clear the image. This will fill the image with the specified color."], [257, "\t *"], [258, "\t * @param color color to fill the image with"], [259, "\t */"], [260, "\tprotected abstract void clearImage(int color);"], [261, ""], [262, "\t/**"], [326, "\t * Set the output policy."], [328, "\t * @param policy policy defining when images are produced"], [330, "\tpublic void setOutputPolicy(OutputPolicy policy) {"], [331, "\t\tthis.outputPolicy = policy;"], [335, "\t * Set the output type."], [337, "\t * @param outputType type of outputted images"], [339, "\tpublic void setOutputType(OutputType outputType) {"], [340, "\t\tif (outputType != this.outputType) {"], [341, "\t\t\tthis.outputType = outputType;"], [488, "\t\treturn getCamera().getViewCenter();"], [492, "\t\tgetCamera().setViewCenter(x, y, 0);"], [496, "\t\treturn getCamera().getViewPercent();"], [500, "\t\tgetCamera().setViewPercent(zoom);"], [504, "\t\tgetCamera().setGraphViewport(minx, miny, maxx, maxy);"], [549, "\t\t\tclearImage(0x00000000);"], [559, "\t\t\t\tgetCamera().setBounds(lo.x, lo.y, lo.z, hi.x, hi.y, hi.z);"], [562, "\t\t\trender();"], [565, "\t\tBufferedImage image = getRenderedImage();"], [617, "\t\tinitImage();"], [618, ""], [620, "\t\tthis.hasBegun = true;"], [639, "\t\tthis.hasBegun = false;"], [680, "\t\tinitImage();"], [697, "\t\t\tif (hasBegun)"], [717, "\t\t\tif (hasBegun)"], [736, "\t\t\tif (hasBegun)"], [755, "\t\t\tif (hasBegun)"], [775, "\t\t\tif (hasBegun)"], [794, "\t\t\tif (hasBegun)"], [813, "\t\t\tif (hasBegun)"], [833, "\t\t\tif (hasBegun)"], [852, "\t\t\tif (hasBegun)"], [872, "\t\t\tif (hasBegun)"], [891, "\t\t\tif (hasBegun)"], [911, "\t\t\tif (hasBegun)"], [930, "\t\t\tif (hasBegun)"], [949, "\t\t\tif (hasBegun)"], [966, "\t\t\tif (hasBegun)"], [977, "\t// if (hasBegun)"], [992, "\t// if (hasBegun)"], [1007, "\t// if (hasBegun)"], [1082, "\t\t\t\tif (hasBegun)"], [1244, "\t\tFileSinkImages fsi = FileSinkImages.createDefault();"], [1245, ""], [1246, "\t\tfsi.setOutputPolicy(outputPolicy);"], [1247, "\t\tfsi.setResolution(resolution);"], [1248, "\t\tfsi.setOutputType(outputType);"]], "deleted": [[91, "public class FileSinkImages implements FileSink {"], [132, "\t * Enumeration of known image renderers."], [133, "\t * Be sure to include the corresponding module into your classpath."], [135, "\tpublic static enum RendererType {"], [136, "\t\tSWING(\"org.graphstream.stream.file.images.SwingImageRenderer\"), FX("], [137, "\t\t\t\t\"org.graphstream.stream.file.images.FxImageRenderer\");"], [138, ""], [139, "\t\tfinal String classname;"], [140, ""], [141, "\t\tRendererType(String classname) {"], [142, "\t\t\tthis.classname = classname;"], [143, "\t\t}"], [144, "\t}"], [145, ""], [155, "\tprotected ImageRenderer imageRenderer = null;"], [174, "\tprotected boolean hasBegan = false;"], [178, "\tpublic FileSinkImages() {"], [182, "\tpublic FileSinkImages(OutputType type, Resolution resolution) {"], [183, "\t\tthis(\"frame_\", type, resolution, OutputPolicy.NONE);"], [186, "\tpublic FileSinkImages(String prefix, OutputType type, Resolution resolution, OutputPolicy outputPolicy) {"], [189, "\t\tthis.filePrefix = prefix;"], [191, "\t\tthis.gg = new GraphicGraph(prefix);"], [266, "\t * Set the image renderer from its known type."], [268, "\t * @param rendererType a known renderer type."], [270, "\tpublic void setRenderer(RendererType rendererType) {"], [271, "\t\tsetRenderer(rendererType.classname);"], [275, "\t * Set the image renderer from its classname."], [276, "\t * Exception will be thrown if renderer cannot be found or if the object is not a renderer."], [278, "\t * @param rendererClass class of the image renderer that should be used."], [280, "\t@SuppressWarnings(\"unchecked\") public void setRenderer(String rendererType) {"], [281, "\t\ttry {"], [282, "\t\t\tClass<? extends ImageRenderer> clazz = (Class<? extends ImageRenderer>) Class.forName(rendererType);"], [283, ""], [284, "\t\t\tImageRenderer obj = clazz.newInstance();"], [285, ""], [286, "\t\t\tif (this.imageRenderer != null)"], [287, "\t\t\t\tthis.imageRenderer.getGraphRenderer().close();"], [288, ""], [289, "\t\t\tthis.imageRenderer = obj;"], [290, "\t\t\tthis.imageRenderer.getGraphRenderer().open(gg, null);"], [291, ""], [293, "\t\t} catch (ClassNotFoundException e) {"], [294, "\t\t\tLOGGER.warning(String.format("], [295, "\t\t\t\t\t\"Cannot find \\\"%s\\\" image renderer. Did you include the correct \\\"gs-ui-*\\\" module in your classpath?\","], [296, "\t\t\t\t\trendererType));"], [297, "\t\t} catch (ClassCastException e) {"], [298, "\t\t\tLOGGER.warning(String.format(\"Class \\\"%s\\\" is not an image renderer.%n\", rendererType));"], [299, "\t\t} catch (Exception e) {"], [300, "\t\t\tLOGGER.log(Level.WARNING, \"Cannot create image renderer\", e);"], [305, "\t * Set the output policy."], [306, "\t *"], [307, "\t * @param policy policy defining when images are produced"], [308, "\t */"], [309, "\tpublic void setOutputPolicy(OutputPolicy policy) {"], [310, "\t\tthis.outputPolicy = policy;"], [311, "\t}"], [312, ""], [313, "\t/**"], [455, "\t\treturn imageRenderer.getGraphRenderer().getCamera().getViewCenter();"], [459, "\t\timageRenderer.getGraphRenderer().getCamera().setViewCenter(x, y, 0);"], [463, "\t\treturn imageRenderer.getGraphRenderer().getCamera().getViewPercent();"], [467, "\t\timageRenderer.getGraphRenderer().getCamera().setViewPercent(zoom);"], [471, "\t\timageRenderer.getGraphRenderer().getCamera().setGraphViewport(minx, miny, maxx, maxy);"], [482, "\tprotected void initImage() {"], [483, "\t\timageRenderer.init(resolution, outputType);"], [484, "\t}"], [485, ""], [504, "\t\tif (imageRenderer == null) {"], [505, "\t\t\tLOGGER.severe(\"No image renderer has been set. \""], [506, "\t\t\t\t\t+ \"Use setRenderer() method in order to be able to output images.\");"], [507, ""], [508, "\t\t\tthrow new NoRendererException();"], [509, "\t\t}"], [510, ""], [527, "\t\t\timageRenderer.clear(0x00000000);"], [537, "\t\t\t\timageRenderer.getGraphRenderer().getCamera().setBounds(lo.x, lo.y, lo.z, hi.x, hi.y, hi.z);"], [540, "\t\t\timageRenderer.render(0, 0, resolution.getWidth(), resolution.getHeight());"], [543, "\t\tBufferedImage image = imageRenderer.getRenderedImage();"], [596, "\t\tthis.hasBegan = true;"], [615, "\t\tthis.hasBegan = false;"], [672, "\t\t\tif (hasBegan)"], [692, "\t\t\tif (hasBegan)"], [711, "\t\t\tif (hasBegan)"], [730, "\t\t\tif (hasBegan)"], [750, "\t\t\tif (hasBegan)"], [769, "\t\t\tif (hasBegan)"], [788, "\t\t\tif (hasBegan)"], [808, "\t\t\tif (hasBegan)"], [827, "\t\t\tif (hasBegan)"], [847, "\t\t\tif (hasBegan)"], [866, "\t\t\tif (hasBegan)"], [886, "\t\t\tif (hasBegan)"], [905, "\t\t\tif (hasBegan)"], [924, "\t\t\tif (hasBegan)"], [941, "\t\t\tif (hasBegan)"], [952, "\t// if (hasBegan)"], [967, "\t// if (hasBegan)"], [982, "\t// if (hasBegan)"], [1057, "\t\t\t\tif (hasBegan)"], [1219, "\t\tFileSinkImages fsi = new FileSinkImages(imagePrefix, outputType, resolution, outputPolicy);"]]}, "num_lines_added": 129, "num_lines_removed": 100}