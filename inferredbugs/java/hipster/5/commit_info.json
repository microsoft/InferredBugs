{"hash": "70caf604c3732cd0491fbe16b6d8b9768ec115ee", "message": "Improved the efficiency of HashBasedHipsterGraph (lazy flat iterator of edges)", "file_num_lines": 93, "diff_parsed": {"added": [[19, "import java.util.*;"], [25, " * @author Pablo Rodr\u00edguez Mier  <<a href=\"mailto:pablo.rodriguez.mier@usc.es\">pablo.rodriguez.mier@usc.es</a>>"], [37, "     * @param v vertex to be added"], [46, "    /**"], [47, "     * Remove a vertex from the graph."], [48, "     *"], [49, "     * @param v vertex to be removed"], [50, "     */"], [68, "    /**"], [69, "     * Connect to vertices in the graph. If the vertices are not in the graph, they are automatically"], [70, "     * added to the graph before connecting them."], [71, "     *"], [72, "     * @param v1 source vertex"], [73, "     * @param v2 destination vertex"], [74, "     * @param value edge value"], [75, "     * @return"], [76, "     */"], [78, "        // Check non-null arguments"], [80, "        // Ensure that the vertices are in the graph"], [81, "        add(v1);"], [82, "        add(v2);"], [84, "        GraphEdge<V,E> reversedEdge = new GraphEdge<V, E>(v2, v1, value);"], [85, "        // Add edges to the graph"], [87, "        connected.get(v2).add(reversedEdge);"], [91, "    /**"], [92, "     * Returns a list of the edges in the graph."], [93, "     * @return edges of the graph."], [94, "     */"], [97, "        final Collection<List<GraphEdge<V, E>>> edges = connected.values();"], [98, "        // TODO: Change this ugly lazy iterator with Java 8 streams and flatmaps"], [99, "        return new Iterable<GraphEdge<V, E>>() {"], [100, "            @Override"], [101, "            public Iterator<GraphEdge<V, E>> iterator() {"], [102, "                return new Iterator<GraphEdge<V, E>>() {"], [103, "                    private Iterator<List<GraphEdge<V,E>>> it = edges.iterator();"], [104, "                    private Iterator<GraphEdge<V,E>> currentList = it.next().iterator();"], [105, "                    private GraphEdge<V,E> nextElement = null;"], [106, ""], [107, "                    private GraphEdge<V,E> loadNext(){"], [108, "                        // Preload the next element"], [109, "                        GraphEdge<V,E> next = null;"], [110, "                        if (currentList.hasNext()) {"], [111, "                            next = currentList.next();"], [112, "                        } else if (it.hasNext()){"], [113, "                            currentList = it.next().iterator();"], [114, "                            if (currentList.hasNext()) {"], [115, "                                next = currentList.next();"], [116, "                            }"], [117, "                        }"], [118, "                        return next;"], [119, "                    }"], [120, ""], [121, "                    @Override"], [122, "                    public boolean hasNext() {"], [123, "                        // There can be empty lists, so we need to pre-compute the next element in advance"], [124, "                        // to check whether there exist a next element or not."], [125, "                        if (nextElement == null) {"], [126, "                            nextElement = loadNext();"], [127, "                        }"], [128, "                        return nextElement != null;"], [129, "                    }"], [130, ""], [131, "                    @Override"], [132, "                    public GraphEdge<V, E> next() {"], [133, "                        // Load the next element"], [134, "                        if (nextElement != null) {"], [135, "                            GraphEdge<V,E> next = nextElement;"], [136, "                            nextElement = null;"], [137, "                            return next;"], [138, "                        } else {"], [139, "                            return loadNext();"], [140, "                        }"], [141, "                    }"], [142, "                };"], [143, "            }"], [144, "        };"], [147, "    /**"], [148, "     * Returns the vertices of the graph. Any changes in the"], [149, "     * returned iterator affect the underlying graph structure."], [150, "     * @return iterator with the vertices of the graph"], [151, "     */"], [159, "        List<GraphEdge<V, E>> list = connected.get(vertex);"], [160, "        if (list == null) list = Collections.emptyList();"], [161, "        return list;"]], "deleted": [[19, "import java.util.ArrayList;"], [20, "import java.util.HashMap;"], [21, "import java.util.List;"], [38, "     * @param v"], [65, "        //check input"], [68, "        GraphEdge<V,E> edgeReverse = new GraphEdge<V, E>(v2, v1, value);"], [69, "        //add edges to the graph (if not present before)"], [71, "        connected.get(v2).add(edgeReverse);"], [77, "        ArrayList<GraphEdge<V, E>> edges = new ArrayList<GraphEdge<V, E>>();"], [78, "        //store all edges in an array"], [79, "        for(List<GraphEdge<V, E>> current : connected.values()){"], [80, "            edges.addAll(current);"], [81, "        }"], [82, "        return edges;"], [92, "        return connected.get(vertex);"]]}, "num_lines_added": 84, "num_lines_removed": 15}