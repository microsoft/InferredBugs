    public Node<S> next() {
        // Take the next node from the stack.
        Node<S> current = popUnvisited();
        // Take the associated state
        S currentState = current.transition().to();
        // Explore the adjacent neighbors
        for(Transition<S> successor : this.successors.from(currentState)){
            // If the neighbor is still unexplored
            if (!this.visited.containsKey(successor.to())){
                // Create the associated neighbor
                Node<S> successorNode = factory.node(current, successor);
                this.stack.push(successorNode);
            }
        }
        this.visited.put(currentState, current);
        return current;
    }