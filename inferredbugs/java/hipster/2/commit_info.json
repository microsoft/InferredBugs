{"hash": "d6341a4280351c29efb0bf38b0efe52dda40576b", "message": "Improved benchmark test. Added empty method to Maze2D to generate empty\nmazes.", "file_num_lines": 103, "diff_parsed": {"added": [[19, "import static org.junit.Assert.assertEquals;"], [20, ""], [21, "import java.awt.Point;"], [22, "import java.util.Formatter;"], [23, "import java.util.HashMap;"], [24, "import java.util.Map;"], [25, "import java.util.TreeMap;"], [26, "import java.util.concurrent.TimeUnit;"], [27, ""], [28, "import org.junit.Test;"], [29, ""], [31, ""], [37, "import es.usc.citius.lab.hipster.testutils.MazeSearch.Result;"], [41, " * This class executes a benchmark to compare the performance of"], [42, " * different path search algorithms."], [53, ""], [54, "    interface Algorithm {"], [55, "    \tvoid initialize(Maze2D maze);"], [56, "    \tMazeSearch.Result evaluate();"], [57, "    }"], [58, ""], [59, "    class Benchmark {"], [60, "    \tMap<String, Algorithm> algorithms = new TreeMap<String, BenchmarkTest.Algorithm>();"], [61, "    \tint times = 5;"], [62, ""], [63, "    \tBenchmark(){}"], [64, ""], [65, "    \tBenchmark(int times){"], [66, "    \t\tthis.times = times;"], [67, "    \t}"], [68, ""], [69, "    \tvoid add(String name, Algorithm alg){"], [70, "    \t\tthis.algorithms.put(name, alg);"], [71, "    \t}"], [72, ""], [73, "    \tclass Score {"], [74, "    \t\tResult result;"], [75, "    \t\tlong time;"], [76, ""], [77, "    \t\tScore(Result result, long time){"], [78, "    \t\t\tthis.result = result;"], [79, "    \t\t\tthis.time = time;"], [80, "    \t\t}"], [81, "    \t}"], [82, ""], [83, "    \tMap<String, Score> run(Maze2D maze){"], [84, "    \t\tMap<String, Score> results = new HashMap<String, Score>();"], [85, ""], [86, "    \t\tfor(String algName : algorithms.keySet()){"], [87, "    \t\t\tAlgorithm alg = algorithms.get(algName);"], [88, "    \t\t\tResult result = null;"], [89, "    \t\t\tlong bestTime = Long.MAX_VALUE;"], [90, "    \t\t\tfor(int i=0; i < times; i++){"], [91, "\t    \t\t\talg.initialize(maze);"], [92, "\t    \t\t\tStopwatch w = new Stopwatch().start();"], [93, "\t    \t\t\tresult = alg.evaluate();"], [94, "\t    \t\t\tlong time = w.stop().elapsed(TimeUnit.MILLISECONDS);"], [95, "\t    \t\t\tif (time < bestTime){"], [96, "\t    \t\t\t\tbestTime = time;"], [97, "\t    \t\t\t}"], [98, "    \t\t\t}"], [99, "    \t\t\t// Record"], [100, "    \t\t\tresults.put(algName, new Score(result, bestTime));"], [101, "    \t\t}"], [102, "    \t\treturn results;"], [103, "    \t}"], [104, "    }"], [108, "        Benchmark bench = new Benchmark();"], [109, ""], [110, "        // Hipster-Dijkstra"], [111, "        bench.add(\"Hipster-Dijkstra\", new Algorithm() {"], [112, "\t\t\tAStar<Point> it; Maze2D maze;"], [113, "        \tpublic void initialize(Maze2D maze) {"], [114, "\t\t\t\tit= AlgorithmIteratorFromMazeCreator.astar(maze, false);"], [115, "\t\t\t\tthis.maze = maze;"], [116, "\t\t\t}"], [117, "\t\t\tpublic Result evaluate() {"], [118, "\t\t\t\treturn MazeSearch.executeIteratorSearch(it, maze);"], [119, "\t\t\t}"], [120, "\t\t});"], [121, ""], [122, "        // JUNG-Dijkstra"], [123, "        bench.add(\"JUNG-Dijkstra\", new Algorithm() {"], [124, "\t\t\tMaze2D maze;DirectedGraph<Point, JungEdge<Point>> graph;"], [125, "\t\t\tpublic void initialize(Maze2D maze) {"], [126, "\t\t\t\tthis.maze = maze;"], [127, "\t\t\t\tthis.graph = JungDirectedGraphFromMazeCreator.create(maze);"], [128, "\t\t\t}"], [129, "\t\t\tpublic Result evaluate() {"], [130, "\t\t\t\treturn MazeSearch.executeJungSearch(graph, maze);"], [131, "\t\t\t}"], [132, "\t\t});"], [133, ""], [134, "        int index = 0;"], [135, "        for(String algName : bench.algorithms.keySet()){"], [136, "        \tSystem.out.println((++index) + \" = \" + algName);"], [137, "        }"], [138, ""], [140, "        \tMaze2D maze = Maze2D.empty(i);"], [141, "            // Test over an empty maze"], [142, "            Map<String, Benchmark.Score> results = bench.run(maze);"], [143, "            // Check results and print scores. We take JUNG as baseline"], [144, "            Benchmark.Score jungScore = results.get(\"JUNG-Dijkstra\");"], [145, "            String scores = \"\";"], [146, "            for(String algName : bench.algorithms.keySet()){"], [147, "            \tBenchmark.Score score = results.get(algName);"], [148, "            \tassertEquals(jungScore.result.getCost(),score.result.getCost(), 0.0001);"], [149, "            \tscores += score.time + \" ms\\t\";"], [151, "            System.out.println(scores);"]], "deleted": [[26, "import java.awt.Point;"], [27, "import java.util.concurrent.TimeUnit;"], [28, "import org.junit.Test;"], [29, "import static org.junit.Assert.*;"], [32, " * This class executes a benchmark to compare {@link AstarIterator} performance"], [33, " * with other implementations of A*."], [47, "        System.out.println(\"Maze | Hipster-Dijkstra (ms) | JUNG-Dijkstra (ms)\");"], [48, "        System.out.println(\"-------------------------------------------------\");"], [49, "        final int times = 5;"], [51, "            Maze2D maze = Maze2D.random(i, 0.9);"], [52, "            // Repeat 5 times"], [53, "            //Double mean1 = 0d, mean2 = 0d;"], [54, "            double min2 = Double.MAX_VALUE, min1 = Double.MAX_VALUE;"], [55, "            DirectedGraph<Point, JungEdge<Point>> graph = JungDirectedGraphFromMazeCreator.create(maze);"], [56, "            for (int j = 0; j < times; j++) {"], [57, "                //AStar<Point> it = AStarIteratorFromMazeCreator.create(maze, false);"], [58, "                AStar<Point> it = AlgorithmIteratorFromMazeCreator.astar(maze, false);"], [59, "                Stopwatch w1 = new Stopwatch().start();"], [60, "                MazeSearch.Result resultJung = MazeSearch.executeJungSearch(graph, maze);"], [61, "                //In case there is no possible result in the random maze"], [62, "                if(resultJung.equals(MazeSearch.Result.NO_RESULT)){"], [63, "                    maze = Maze2D.random(i, 0.9);"], [64, "                    graph = JungDirectedGraphFromMazeCreator.create(maze);"], [65, "                    j--;"], [66, "                    continue;"], [67, "                }"], [68, "                long result1 = w1.stop().elapsed(TimeUnit.MILLISECONDS);"], [69, "                if (result1 < min1) {"], [70, "                    min1 = result1;"], [71, "                }"], [72, "                Stopwatch w2 = new Stopwatch().start();"], [73, "                MazeSearch.Result resultIterator = MazeSearch.executeIteratorSearch(it, maze);"], [74, "                long result2 = w2.stop().elapsed(TimeUnit.MILLISECONDS);"], [75, "                if (result2 < min2) {"], [76, "                    min2 = result2;"], [77, "                }"], [78, "                assertEquals(resultIterator.getCost(), resultJung.getCost(), 0.001);"], [80, "            System.out.println(String.format(\"%d \\t\\t %.5g \\t\\t %.5g\", i, min2, min1));"]]}, "num_lines_added": 109, "num_lines_removed": 38}