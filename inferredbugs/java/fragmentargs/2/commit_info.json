{"hash": "8b618fbcb359421aee68dda429811a7b12e99bd1", "message": "add androidx support (#103)", "file_num_lines": 773, "diff_parsed": {"added": [[15, "import java.util.Arrays;"], [102, "    private TypeElement TYPE_ANDROIDX_FRAGMENT;"], [135, "        TYPE_ANDROIDX_FRAGMENT ="], [136, "                elementUtils.getTypeElement(\"androidx.fragment.app.Fragment\");"], [139, "    private String getOperation(ArgumentAnnotatedField arg) {"], [242, "    private void writePackage(JavaWriter jw, TypeElement type) throws IOException {"], [354, "                        e.getSimpleName().toString().equals(fieldName)) {"], [487, "        String nonNullAnnotationImport = \"\";"], [488, "        String nullableAnnotationImport = \"\";"], [489, ""], [490, "        if(supportAnnotations) {"], [491, "            if (isClassAvailable(\"android.support.annotation.NonNull\")) {"], [492, "                nonNullAnnotationImport = \"android.support.annotation.NonNull\";"], [493, "                nullableAnnotationImport = \"android.support.annotation.Nullable\";"], [494, ""], [495, "            } else if (isClassAvailable(\"androidx.annotation.NonNull\")) {"], [496, "                nonNullAnnotationImport = \"androidx.annotation.NonNull\";"], [497, "                nullableAnnotationImport = \"androidx.annotation.Nullable\";"], [498, ""], [499, "            } else {"], [500, "                supportAnnotations = false;"], [501, "                warn(null,"], [502, "                        \"Support annotations have been disabled because neither \" +"], [503, "                                \"'android.support.annotation.NonNull' nor \" +"], [504, "                                \"'androidx.annotation.NonNull' could be found during processing\""], [505, "                );"], [506, "            }"], [507, "        }"], [508, ""], [525, "                if (!isFragmentClass(enclosingElement)) {"], [597, "                    jw.emitImports(nonNullAnnotationImport);"], [599, "                        jw.emitImports(nullableAnnotationImport);"], [721, "     * @param env             The round environment"], [739, "        if (!isFragmentClass(element)) {"], [754, "    private boolean isFragmentClass(Element classElement) {"], [755, "        List<TypeElement> fragmentTypeElements = Arrays.asList(TYPE_FRAGMENT, TYPE_SUPPORT_FRAGMENT, TYPE_ANDROIDX_FRAGMENT);"], [756, ""], [757, "        for (TypeElement fragmentTypeElement : fragmentTypeElements) {"], [758, "            if(fragmentTypeElement != null && typeUtils.isSubtype(classElement.asType(),"], [759, "                    fragmentTypeElement.asType())) {"], [760, "                return true;"], [761, "            }"], [762, "        }"], [764, "        return false;"], [765, "    }"], [766, ""], [767, "    private boolean isClassAvailable(String className) {"], [768, "        try  {"], [769, "            Class.forName(className);"], [770, "            return true;"], [771, "        }  catch (ClassNotFoundException e) {"], [772, "            return false;"], [773, "        }"]], "deleted": [[31, "import javax.lang.model.element.Name;"], [136, "    protected String getOperation(ArgumentAnnotatedField arg) {"], [239, "    protected void writePackage(JavaWriter jw, TypeElement type) throws IOException {"], [351, "                        e.getSimpleName().toString() != null && e.getSimpleName()"], [352, "                        .toString()"], [353, "                        .equals(fieldName)) {"], [438, "        Map<String, ExecutableElement> setterMethodsMap = new HashMap<String, ExecutableElement>();"], [503, "                if (!isFragmentClass(enclosingElement, TYPE_FRAGMENT, TYPE_SUPPORT_FRAGMENT)) {"], [575, "                    jw.emitImports(\"android.support.annotation.NonNull\");"], [577, "                        jw.emitImports(\"android.support.annotation.Nullable\");"], [699, "     * @param env             The round enviroment"], [717, "        if (!isFragmentClass(element, TYPE_FRAGMENT, TYPE_SUPPORT_FRAGMENT)) {"], [732, "    private boolean isFragmentClass(Element classElement, TypeElement fragmentType,"], [733, "                                    TypeElement supportFragmentType) {"], [735, "        return (fragmentType != null && typeUtils.isSubtype(classElement.asType(),"], [736, "                fragmentType.asType())) || (supportFragmentType != null && typeUtils.isSubtype("], [737, "                classElement.asType(), supportFragmentType.asType()));"]]}, "num_lines_added": 53, "num_lines_removed": 17}