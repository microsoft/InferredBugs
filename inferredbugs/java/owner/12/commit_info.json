{"hash": "27e580b431384568324f3622369adcd7c57293a6", "message": "trying to fix things", "file_num_lines": 133, "diff_parsed": {"added": [[12, "import org.xml.sax.InputSource;"], [14, "import org.xml.sax.SAXParseException;"], [15, "import org.xml.sax.ext.DefaultHandler2;"], [17, "import javax.xml.parsers.ParserConfigurationException;"], [22, "import java.io.FileInputStream;"], [26, "import java.io.StringReader;"], [36, "    static class XmlToPropsHandler extends DefaultHandler2 {"], [37, "        // The required DTD URI for exported properties"], [38, "        private static final String PROPS_DTD_URI ="], [39, "                \"http://java.sun.com/dtd/properties.dtd\";"], [40, ""], [41, "        private static final String PROPS_DTD ="], [42, "                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" +"], [43, "                \"<!-- DTD for properties -->\" +"], [44, "                \"<!ELEMENT properties ( comment?, entry* ) >\" +"], [45, "                \"<!ATTLIST properties version CDATA #FIXED \\\"1.0\\\">\" +"], [46, "                \"<!ELEMENT comment (#PCDATA) >\" +"], [47, "                \"<!ELEMENT entry (#PCDATA) >\" +"], [48, "                \"<!ATTLIST entry key CDATA #REQUIRED>\";"], [49, ""], [50, "        private boolean isJavaPropertiesFormat = false;"], [51, "        private final PrintWriter writer;"], [52, "        private final Stack<String> paths = new Stack<String>();"], [53, ""], [54, ""], [55, "        @Override"], [56, "        public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws SAXException, IOException {"], [57, "            if (systemId.equals(PROPS_DTD_URI)) {"], [58, "                isJavaPropertiesFormat = true;"], [59, "                InputSource is;"], [60, "                is = new InputSource(new StringReader(PROPS_DTD));"], [61, "                is.setSystemId(PROPS_DTD_URI);"], [62, "                return is;"], [63, "            } else {"], [64, "                return super.resolveEntity(name, publicId, baseURI, systemId);"], [65, "            }"], [69, "        public void warning(SAXParseException e) throws SAXException {"], [70, "            System.err.println(\"!!!!!!!!!!!!!!!!!!!!!\" + e);"], [71, "        }"], [72, ""], [73, "        @Override"], [74, "        public void error(SAXParseException e) throws SAXException {"], [75, "            System.err.println(\"!!!!!!!!!!!!!!!!!!!!!\" + e);"], [83, "        public void skippedEntity(String name) throws SAXException {"], [84, "            System.err.println(\"skipped entity: \" + name);"], [85, "        }"], [86, ""], [87, "        @Override"], [88, "        public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException {"], [89, "            System.err.println(\"skipped entity: \" + name);"], [90, "        }"], [91, ""], [92, "        @Override"], [93, "        public void notationDecl(String name, String publicId, String systemId) throws SAXException {"], [94, "            System.err.println(\"skipped entity: \" + name);"], [95, "        }"], [96, ""], [97, "        @Override"], [100, "            if (isJavaPropertiesFormat) {"], [101, "                if (\"entry\".equals(qName))"], [102, "                    paths.push(attributes.getValue(\"key\"));"], [103, "                else"], [104, "                    paths.push(qName);"], [105, "            } else {"], [106, "                String path = (paths.size() == 0) ? qName : paths.peek() + \".\" + qName;"], [107, "                paths.push(path);"], [108, "                for (int i = 0; i < attributes.getLength(); i++) {"], [109, "                    String attrName = attributes.getQName(i);"], [110, "                    String attrValue = attributes.getValue(i);"], [111, "                    writer.println(path + \".\" + attrName + \"=\" + attrValue);"], [112, "                }"], [133, "    public static Properties load(InputStream inputStream) throws ParserConfigurationException, SAXException,"], [134, "            IOException {"], [136, "        factory.setFeature(\"http://xml.org/sax/features/validation\", true);"], [142, "        parser.parse(inputStream, h);"], [147, "        Properties props = new Properties();"], [148, "        props.load(new StringReader(output.toString()));"], [149, "        return props;"], [150, "    }"], [153, "    public static void main(String[] args) throws Exception {"], [154, ""], [155, "        InputStream in = XmlSpike.class.getResourceAsStream(\"Config.xml\");"], [156, ""], [157, "        Properties props = load(in);"], [158, ""], [159, "        File file = new File(\"target/test-resources/props.xml\");"], [160, "        file.getParentFile().mkdirs();"], [166, ""], [169, "        Properties props2 = new Properties();"], [170, "        props2.loadFromXML(new FileInputStream(file));"], [171, ""], [172, ""], [173, "        Properties props3 = load(new FileInputStream(file));"], [174, ""], [175, "        props.store(System.out, \"props\");"], [176, "        props2.store(System.out, \"props2\");"], [177, "        props3.store(System.out, \"props3\");"]], "deleted": [[13, "import org.xml.sax.helpers.DefaultHandler;"], [24, "import java.util.Scanner;"], [31, "    public static class StringInputStream extends InputStream {"], [32, "        private String string;"], [33, "        private int i;"], [35, "        public StringInputStream(String string) {"], [36, "            this.string = string;"], [40, "        public int read() throws IOException {"], [41, "            if (i < string.length())"], [42, "                return string.charAt(i++);"], [43, "            else"], [44, "                return -1;"], [46, "    }"], [47, "    static class XmlToPropsHandler extends DefaultHandler {"], [48, "        private final PrintWriter writer;"], [49, "        private final Stack<String> paths = new Stack<String>();"], [58, "            String path = (paths.size() == 0) ? qName : paths.peek() + \".\" + qName;"], [59, "            paths.push(path);"], [60, "            for (int i = 0; i < attributes.getLength(); i++) {"], [61, "                String attrName = attributes.getQName(i);"], [62, "                String attrValue = fixNewLines(attributes.getValue(i));"], [63, "                writer.println(path + \".\" + attrName + \"=\" + attrValue);"], [84, "    public static String convertStreamToString(java.io.InputStream is) {"], [85, "        java.util.Scanner s = new Scanner(is).useDelimiter(\"\\\\A\");"], [86, "        return s.hasNext() ? s.next() : \"\";"], [87, "    }"], [88, ""], [89, ""], [90, "    public static void main(String[] args) throws Exception {"], [94, "        InputStream in = XmlSpike.class.getResourceAsStream(\"Config.xml\");"], [95, ""], [96, "        String input = convertStreamToString(in);"], [97, ""], [98, "        System.out.println(\"input:\\n\" + input);"], [99, ""], [103, "        parser.parse(new StringInputStream(input), h);"], [108, "        File file = new File(\"target/test-resources/props.xml\");"], [109, "        file.getParentFile().mkdirs();"], [112, "        Properties props = new Properties();"], [113, "        props.load(new StringInputStream(output.toString()));"], [119, ""], [122, "        boolean isJavaProp = propsXmlString.contains(\"http://java.sun.com/dtd/properties.dtd\");"], [123, ""], [124, "        System.out.println(\"isJavaProp: \" + isJavaProp);"]]}, "num_lines_added": 97, "num_lines_removed": 44}