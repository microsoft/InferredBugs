{"hash": "3eca7d89545634cfbd88887d850f151c4f7331e1", "message": "Fixed bugs in #transfer methods of LengthDelimitedDecoder and IdentityDecoder\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/httpcomponents/httpcore/trunk@594100 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 298, "diff_parsed": {"added": [[36, "import java.io.RandomAccessFile;"], [87, "    private static String readFromFile(final File file) throws Exception {"], [91, "            StringBuffer buffer = new StringBuffer();"], [92, "            char[] tmp = new char[2048];"], [93, "            int l;"], [94, "            while ((l = reader.read(tmp)) != -1) {"], [277, "                new String[] {\"stuff; \", \"more stuff; \", \"a lot more stuff!!!\"}, \"US-ASCII\");"], [283, "                channel, inbuf, metrics, 36);"], [285, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [286, ""], [287, "        RandomAccessFile testfile = new RandomAccessFile(fileHandle, \"rw\");"], [288, "        FileChannel fchannel = testfile.getChannel();"], [289, ""], [290, "        long pos = 0;"], [291, "        while (!decoder.isCompleted()) {"], [292, "            long bytesRead = decoder.transfer(fchannel, pos, 10);"], [293, "            if (bytesRead > 0) {"], [294, "                pos += bytesRead;"], [295, "            }"], [296, "        }"], [298, "        fchannel.close();"], [300, "        assertEquals(\"stuff; more stuff; a lot more stuff!\", readFromFile(fileHandle));"], [302, "        fileHandle.delete();"], [303, "    }"], [304, ""], [305, "    public void testDecodingFileWithBufferedSessionData() throws Exception {"], [306, "        ReadableByteChannel channel = new ReadableByteChannelMockup("], [307, "                new String[] {\"stuff; \", \"more stuff; \", \"a lot more stuff!!!\"}, \"US-ASCII\");"], [308, "        HttpParams params = new BasicHttpParams();"], [309, ""], [310, "        SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, params);"], [311, "        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();"], [312, "        LengthDelimitedDecoder decoder = new LengthDelimitedDecoder("], [313, "                channel, inbuf, metrics, 36);"], [314, ""], [315, "        int i = inbuf.fill(channel);"], [316, "        assertEquals(7, i);"], [318, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [319, ""], [320, "        RandomAccessFile testfile = new RandomAccessFile(fileHandle, \"rw\");"], [321, "        FileChannel fchannel = testfile.getChannel();"], [322, ""], [323, "        long pos = 0;"], [324, "        while (!decoder.isCompleted()) {"], [325, "            long bytesRead = decoder.transfer(fchannel, pos, 10);"], [326, "            if (bytesRead > 0) {"], [327, "                pos += bytesRead;"], [328, "            }"], [329, "        }"], [330, ""], [331, "        fchannel.close();"], [332, ""], [333, "        assertEquals(\"stuff; more stuff; a lot more stuff!\", readFromFile(fileHandle));"], [334, ""], [335, "        fileHandle.delete();"], [350, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [351, "        RandomAccessFile testfile  = new RandomAccessFile(fileHandle, \"rw\");"], [352, "        FileChannel fchannel = testfile.getChannel();"], [363, "        assertEquals(-1, bytesRead);"], [366, "        fileHandle.delete();"]], "deleted": [[35, "import java.io.FileOutputStream;"], [87, "    private static String readFromFile(final File file, int numChars) throws Exception {"], [91, "            StringBuffer buffer = new StringBuffer(numChars);"], [92, "            char[] tmp = new char[Math.min(2048, numChars)];"], [93, "            int remaining = numChars;"], [94, "            while (remaining > 0) {"], [95, "                int l = reader.read(tmp);"], [96, "                if (l == -1) {"], [97, "                    break;"], [98, "                }"], [100, "                remaining =- l;"], [280, "    // ----------------------------------------------------- Test read"], [283, "                new String[] {\"stuff;\", \"more stuff\"}, \"US-ASCII\");"], [289, "                channel, inbuf, metrics, 16);"], [291, "        File tmpFile = File.createTempFile(\"testFile\", \".txt\");"], [292, "        FileChannel fchannel = new FileOutputStream(tmpFile).getChannel();"], [294, "        long bytesRead = decoder.transfer(fchannel, 0, 6);"], [295, "        assertEquals(6, bytesRead);"], [296, "        assertEquals(\"stuff;\", readFromFile(tmpFile, 6));"], [297, "        assertFalse(decoder.isCompleted());"], [299, "        bytesRead = decoder.transfer(fchannel,0 , 10);"], [300, "        assertEquals(10, bytesRead);"], [301, "        assertEquals(\"more stuff\", readFromFile(tmpFile, 10));"], [302, "        assertTrue(decoder.isCompleted());"], [304, "        bytesRead = decoder.transfer(fchannel, 0, 1);"], [305, "        assertEquals(0, bytesRead);"], [306, "        assertTrue(decoder.isCompleted());"], [308, "        tmpFile.delete();"], [323, "        File tmpFile = File.createTempFile(\"testFile\", \".txt\");"], [324, "        FileChannel fchannel = new FileOutputStream(tmpFile).getChannel();"], [328, "        assertEquals(\"stuff;\", readFromFile(tmpFile, 6));"], [333, "        assertEquals(\"more stuff\", readFromFile(tmpFile, 10));"], [337, "        assertEquals(0, bytesRead);"], [340, "        tmpFile.delete();"]]}, "num_lines_added": 60, "num_lines_removed": 34}