{"hash": "3eca7d89545634cfbd88887d850f151c4f7331e1", "message": "Fixed bugs in #transfer methods of LengthDelimitedDecoder and IdentityDecoder\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/httpcomponents/httpcore/trunk@594100 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 187, "diff_parsed": {"added": [[36, "import java.io.RandomAccessFile;"], [87, "    private static String readFromFile(final File file) throws Exception {"], [91, "            StringBuffer buffer = new StringBuffer();"], [92, "            char[] tmp = new char[2048];"], [93, "            int l;"], [94, "            while ((l = reader.read(tmp)) != -1) {"], [176, "                new String[] {\"stuff; \", \"more stuff; \", \"a lot more stuff!\"}, \"US-ASCII\");"], [181, "        IdentityDecoder decoder = new IdentityDecoder("], [182, "                channel, inbuf, metrics);"], [184, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [185, ""], [186, "        RandomAccessFile testfile = new RandomAccessFile(fileHandle, \"rw\");"], [187, "        FileChannel fchannel = testfile.getChannel();"], [189, "        long pos = 0;"], [190, "        while (!decoder.isCompleted()) {"], [191, "            long bytesRead = decoder.transfer(fchannel, pos, 10);"], [192, "            if (bytesRead > 0) {"], [193, "                pos += bytesRead;"], [194, "            }"], [195, "        }"], [197, "        fchannel.close();"], [199, "        assertEquals(\"stuff; more stuff; a lot more stuff!\", readFromFile(fileHandle));"], [201, "        fileHandle.delete();"], [204, "    public void testDecodingFileWithBufferedSessionData() throws Exception {"], [206, "                new String[] {\"stuff; \", \"more stuff; \", \"a lot more stuff!\"}, \"US-ASCII\");"], [209, "        SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, params);"], [211, "        IdentityDecoder decoder = new IdentityDecoder("], [212, "                channel, inbuf, metrics);"], [214, "        int i = inbuf.fill(channel);"], [215, "        assertEquals(7, i);"], [217, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [218, ""], [219, "        RandomAccessFile testfile = new RandomAccessFile(fileHandle, \"rw\");"], [220, "        FileChannel fchannel = testfile.getChannel();"], [222, "        long pos = 0;"], [223, "        while (!decoder.isCompleted()) {"], [224, "            long bytesRead = decoder.transfer(fchannel, pos, 10);"], [225, "            if (bytesRead > 0) {"], [226, "                pos += bytesRead;"], [227, "            }"], [228, "        }"], [230, "        fchannel.close();"], [232, "        assertEquals(\"stuff; more stuff; a lot more stuff!\", readFromFile(fileHandle));"], [234, "        fileHandle.delete();"]], "deleted": [[35, "import java.io.FileOutputStream;"], [87, "    private static String readFromFile(final File file, int numChars) throws Exception {"], [91, "            StringBuffer buffer = new StringBuffer(numChars);"], [92, "            char[] tmp = new char[Math.min(2048, numChars)];"], [93, "            int remaining = numChars;"], [94, "            while (remaining > 0) {"], [95, "                int l = reader.read(tmp);"], [96, "                if (l == -1) {"], [97, "                    break;"], [98, "                }"], [100, "                remaining =- l;"], [181, "                new String[] {\"stuff;\", \"more stuff\"}, \"US-ASCII\");"], [186, "        IdentityDecoder decoder = new IdentityDecoder(channel, inbuf, metrics);"], [188, "        File tmpFile = File.createTempFile(\"testFile\", \".txt\");"], [189, "        FileChannel fchannel = new FileOutputStream(tmpFile).getChannel();"], [191, "        long bytesRead = decoder.transfer(fchannel, 0, 6);"], [192, "        assertEquals(6, bytesRead);"], [193, "        assertEquals(\"stuff;\", readFromFile(tmpFile, 6));"], [194, "        assertFalse(decoder.isCompleted());"], [195, ""], [196, "        bytesRead = decoder.transfer(fchannel,0 , 10);"], [197, "        assertEquals(10, bytesRead);"], [198, "        assertEquals(\"more stuff\", readFromFile(tmpFile, 10));"], [199, "        assertFalse(decoder.isCompleted());"], [201, "        bytesRead = decoder.transfer(fchannel, 0, 1);"], [202, "        assertEquals(0, bytesRead);"], [203, "        assertTrue(decoder.isCompleted());"], [205, "        bytesRead = decoder.transfer(fchannel, 0, 1);"], [206, "        assertEquals(0, bytesRead);"], [207, "        assertTrue(decoder.isCompleted());"], [209, "        tmpFile.delete();"], [212, "    public void testDecodingFromSessionBufferFile() throws Exception {"], [214, "                new String[] {\"stuff;\", \"more stuff\"}, \"US-ASCII\");"], [217, "        SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, params);"], [219, ""], [220, "        inbuf.fill(channel);"], [221, ""], [222, "        assertEquals(6, inbuf.length());"], [224, "        IdentityDecoder decoder = new IdentityDecoder(channel, inbuf, metrics);"], [226, "        File tmpFile = File.createTempFile(\"testFile\", \".txt\");"], [227, "        FileChannel fchannel = new FileOutputStream(tmpFile).getChannel();"], [229, "        long bytesRead = decoder.transfer(fchannel, 0, 6);"], [230, "        assertEquals(6, bytesRead);"], [231, "        assertEquals(\"stuff;\", readFromFile(tmpFile, 6));"], [232, "        assertFalse(decoder.isCompleted());"], [233, ""], [234, "        bytesRead = decoder.transfer(fchannel,0 , 10);"], [235, "        assertEquals(10, bytesRead);"], [236, "        assertEquals(\"more stuff\", readFromFile(tmpFile, 10));"], [237, "        assertFalse(decoder.isCompleted());"], [239, "        bytesRead = decoder.transfer(fchannel, 0, 1);"], [240, "        assertEquals(0, bytesRead);"], [241, "        assertTrue(decoder.isCompleted());"], [243, "        bytesRead = decoder.transfer(fchannel, 0, 1);"], [244, "        assertEquals(0, bytesRead);"], [245, "        assertTrue(decoder.isCompleted());"], [247, "        tmpFile.delete();"]]}, "num_lines_added": 44, "num_lines_removed": 57}