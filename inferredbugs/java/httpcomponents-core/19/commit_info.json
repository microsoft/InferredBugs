{"hash": "3f2b76140743472e21268868ed5808cd57b1dae2", "message": "fix two bugs w/ FileContentDecoder.transfer.\n a) if data was buffered in SessionInputBuffer, arbitrary parts of the file got overwritten\n b) attempts to write beyond the length of the file silently failed, leading to easy spinning.\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@665886 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 370, "diff_parsed": {"added": [[35, "import java.io.IOException;"], [120, "        assertEquals(6, metrics.getBytesTransferred());"], [127, "        assertEquals(16, metrics.getBytesTransferred());"], [133, "        assertEquals(16, metrics.getBytesTransferred());"], [154, "        assertEquals(6, metrics.getBytesTransferred());"], [161, "        assertEquals(16, metrics.getBytesTransferred());"], [167, "        assertEquals(16, metrics.getBytesTransferred());"], [186, "        assertEquals(4, metrics.getBytesTransferred());"], [193, "        assertEquals(6, metrics.getBytesTransferred());"], [200, "        assertEquals(10, metrics.getBytesTransferred());"], [207, "        assertEquals(14, metrics.getBytesTransferred());"], [214, "        assertEquals(16, metrics.getBytesTransferred());"], [220, "        assertEquals(16, metrics.getBytesTransferred());"], [244, "        assertEquals(0, metrics.getBytesTransferred());"], [251, "        assertEquals(10, metrics.getBytesTransferred());"], [257, "        assertEquals(10, metrics.getBytesTransferred());"], [284, "        assertEquals(0, metrics.getBytesTransferred());"], [290, "        assertEquals(0, metrics.getBytesTransferred());"], [315, "        assertEquals(testfile.length(), metrics.getBytesTransferred());"], [349, "        assertEquals(testfile.length() - 7, metrics.getBytesTransferred());"], [357, "    public void testDecodingFileWithOffsetAndBufferedSessionData() throws Exception {"], [358, "        ReadableByteChannel channel = new ReadableByteChannelMockup("], [359, "                new String[] {\"stuff; \", \"more stuff; \", \"a lot more stuff!\"}, \"US-ASCII\");"], [360, "        HttpParams params = new BasicHttpParams();"], [361, ""], [362, "        SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, params);"], [363, "        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();"], [364, "        LengthDelimitedDecoder decoder = new LengthDelimitedDecoder("], [365, "                channel, inbuf, metrics, 36);"], [366, ""], [367, "        int i = inbuf.fill(channel);"], [368, "        assertEquals(7, i);"], [369, ""], [370, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [371, ""], [372, "        RandomAccessFile testfile = new RandomAccessFile(fileHandle, \"rw\");"], [373, "        byte[] beginning = \"beginning; \".getBytes(\"US-ASCII\");"], [374, "        testfile.write(beginning);"], [375, "        testfile.close();"], [376, ""], [377, "        testfile = new RandomAccessFile(fileHandle, \"rw\");"], [378, "        FileChannel fchannel = testfile.getChannel();"], [379, ""], [380, "        long pos = beginning.length;"], [381, "        while (!decoder.isCompleted()) {"], [382, "            if(testfile.length() < pos)"], [383, "                testfile.setLength(pos);"], [384, "            long bytesRead = decoder.transfer(fchannel, pos, 10);"], [385, "            if (bytesRead > 0) {"], [386, "                pos += bytesRead;"], [387, "            }"], [388, "        }"], [389, ""], [390, "        // count everything except the initial 7 bytes that went to the session buffer"], [391, "        assertEquals(testfile.length() - 7 - beginning.length, metrics.getBytesTransferred());"], [392, "        fchannel.close();"], [393, ""], [394, "        assertEquals(\"beginning; stuff; more stuff; a lot more stuff!\", readFromFile(fileHandle));"], [395, ""], [396, "        fileHandle.delete();"], [397, "    }"], [398, ""], [399, "    public void testWriteBeyondFileSize() throws Exception {"], [400, "        ReadableByteChannel channel = new ReadableByteChannelMockup("], [401, "                new String[] {\"a\"}, \"US-ASCII\");"], [402, "        HttpParams params = new BasicHttpParams();"], [403, ""], [404, "        SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, params);"], [405, "        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();"], [406, "        LengthDelimitedDecoder decoder = new LengthDelimitedDecoder("], [407, "                channel, inbuf, metrics, 1);"], [408, ""], [409, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [410, ""], [411, "        RandomAccessFile testfile = new RandomAccessFile(fileHandle, \"rw\");"], [412, "        FileChannel fchannel = testfile.getChannel();"], [413, "        assertEquals(0, testfile.length());"], [414, ""], [415, "        try {"], [416, "            decoder.transfer(fchannel, 5, 10);"], [417, "            fail(\"expected IOException\");"], [418, "        } catch(IOException iox) {}"], [419, ""], [420, "        fileHandle.delete();"], [421, "    }"], [422, ""], [442, "        assertEquals(6, metrics.getBytesTransferred());"], [447, "        assertEquals(16, metrics.getBytesTransferred());"], [452, "        assertEquals(16, metrics.getBytesTransferred());"]], "deleted": [[297, ""]]}, "num_lines_added": 89, "num_lines_removed": 1}