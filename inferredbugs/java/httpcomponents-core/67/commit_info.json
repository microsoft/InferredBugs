{"hash": "62a54f3bbf7ca7d1d8e109886045dd259b27bace", "message": "In case of an unexpected end of stream condition (the peer closed connection prematurely) truncated Content-Length delimited message bodies to cause an I/O exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1102241 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 449, "diff_parsed": {"added": [[39, "import org.apache.http.ConnectionClosedException;"], [46, "import org.junit.After;"], [55, "    private File tmpfile;"], [56, ""], [57, "    protected File createTempFile() throws IOException {"], [58, "        this.tmpfile = File.createTempFile(\"testFile\", \".txt\");"], [59, "        return this.tmpfile;"], [60, "    }"], [61, ""], [62, "    @After"], [63, "    public void deleteTempFile() {"], [64, "        if (this.tmpfile != null && this.tmpfile.exists()) {"], [65, "            this.tmpfile.delete();"], [66, "        }"], [67, "    }"], [68, ""], [299, "        createTempFile();"], [300, "        RandomAccessFile testfile = new RandomAccessFile(this.tmpfile, \"rw\");"], [301, "        try {"], [302, "            FileChannel fchannel = testfile.getChannel();"], [303, "            long pos = 0;"], [304, "            while (!decoder.isCompleted()) {"], [305, "                long bytesRead = decoder.transfer(fchannel, pos, 10);"], [306, "                if (bytesRead > 0) {"], [307, "                    pos += bytesRead;"], [308, "                }"], [310, "        } finally {"], [311, "            testfile.close();"], [313, "        Assert.assertEquals(this.tmpfile.length(), metrics.getBytesTransferred());"], [314, "        Assert.assertEquals(\"stuff; more stuff; a lot more stuff!\", readFromFile(this.tmpfile));"], [331, "        createTempFile();"], [332, "        RandomAccessFile testfile = new RandomAccessFile(this.tmpfile, \"rw\");"], [333, "        try {"], [334, "            FileChannel fchannel = testfile.getChannel();"], [335, "            long pos = 0;"], [336, "            while (!decoder.isCompleted()) {"], [337, "                long bytesRead = decoder.transfer(fchannel, pos, 10);"], [338, "                if (bytesRead > 0) {"], [339, "                    pos += bytesRead;"], [340, "                }"], [342, "        } finally {"], [343, "            testfile.close();"], [345, "        Assert.assertEquals(this.tmpfile.length() - 7, metrics.getBytesTransferred());"], [346, "        Assert.assertEquals(\"stuff; more stuff; a lot more stuff!\", readFromFile(this.tmpfile));"], [364, ""], [365, "        createTempFile();"], [366, "        RandomAccessFile testfile = new RandomAccessFile(this.tmpfile, \"rw\");"], [367, "        try {"], [368, "            testfile.write(beginning);"], [369, "        } finally {"], [370, "            testfile.close();"], [371, "        }"], [372, ""], [373, "        testfile = new RandomAccessFile(this.tmpfile, \"rw\");"], [374, "        try {"], [375, "            FileChannel fchannel = testfile.getChannel();"], [376, ""], [377, "            long pos = beginning.length;"], [378, "            while (!decoder.isCompleted()) {"], [379, "                if(testfile.length() < pos)"], [380, "                    testfile.setLength(pos);"], [381, "                long bytesRead = decoder.transfer(fchannel, pos, 10);"], [382, "                if (bytesRead > 0) {"], [383, "                    pos += bytesRead;"], [384, "                }"], [386, "        } finally {"], [387, "            testfile.close();"], [391, "        Assert.assertEquals(this.tmpfile.length() - 7 - beginning.length, metrics.getBytesTransferred());"], [392, "        Assert.assertEquals(\"beginning; stuff; more stuff; a lot more stuff!\", readFromFile(this.tmpfile));"], [406, "        createTempFile();"], [407, "        RandomAccessFile testfile = new RandomAccessFile(this.tmpfile, \"rw\");"], [409, "            FileChannel fchannel = testfile.getChannel();"], [410, "            Assert.assertEquals(0, testfile.length());"], [411, "            try {"], [412, "                decoder.transfer(fchannel, 5, 10);"], [413, "                Assert.fail(\"IOException should have been thrown\");"], [414, "            } catch(IOException expected) {"], [415, "            }"], [416, "        } finally {"], [417, "            testfile.close();"], [418, "        }"], [434, "        createTempFile();"], [435, "        RandomAccessFile testfile  = new RandomAccessFile(this.tmpfile, \"rw\");"], [436, "        try {"], [437, "            FileChannel fchannel = testfile.getChannel();"], [438, ""], [439, "            long bytesRead = decoder.transfer(fchannel, 0, 6);"], [440, "            Assert.assertEquals(6, bytesRead);"], [441, "            Assert.assertFalse(decoder.isCompleted());"], [442, "            Assert.assertEquals(6, metrics.getBytesTransferred());"], [443, ""], [444, "            bytesRead = decoder.transfer(fchannel,0 , 10);"], [445, "            Assert.assertEquals(10, bytesRead);"], [446, "            Assert.assertTrue(decoder.isCompleted());"], [447, "            Assert.assertEquals(16, metrics.getBytesTransferred());"], [448, ""], [449, "            bytesRead = decoder.transfer(fchannel, 0, 1);"], [450, "            Assert.assertEquals(-1, bytesRead);"], [451, "            Assert.assertTrue(decoder.isCompleted());"], [452, "            Assert.assertEquals(16, metrics.getBytesTransferred());"], [453, "        } finally {"], [454, "            testfile.close();"], [455, "        }"], [531, "    @Test(expected=ConnectionClosedException.class)"], [532, "    public void testTruncatedContent() throws Exception {"], [533, "        ReadableByteChannel channel = new ReadableByteChannelMock("], [534, "                new String[] {\"1234567890\"}, \"US-ASCII\");"], [535, "        HttpParams params = new BasicHttpParams();"], [536, ""], [537, "        SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, params);"], [538, "        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();"], [539, "        LengthDelimitedDecoder decoder = new LengthDelimitedDecoder("], [540, "                channel, inbuf, metrics, 20);"], [541, ""], [542, "        ByteBuffer dst = ByteBuffer.allocate(1024);"], [543, ""], [544, "        int bytesRead = decoder.read(dst);"], [545, "        Assert.assertEquals(10, bytesRead);"], [546, "        decoder.read(dst);"], [547, "    }"], [548, ""], [549, "    @Test(expected=ConnectionClosedException.class)"], [550, "    public void testTruncatedContentWithFile() throws Exception {"], [551, "        ReadableByteChannel channel = new ReadableByteChannelMock("], [552, "                new String[] {\"1234567890\"}, \"US-ASCII\");"], [553, "        HttpParams params = new BasicHttpParams();"], [554, ""], [555, "        SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, params);"], [556, "        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();"], [557, "        LengthDelimitedDecoder decoder = new LengthDelimitedDecoder("], [558, "                channel, inbuf, metrics, 20);"], [559, ""], [560, "        createTempFile();"], [561, "        RandomAccessFile testfile  = new RandomAccessFile(this.tmpfile, \"rw\");"], [562, "        try {"], [563, "            FileChannel fchannel = testfile.getChannel();"], [564, "            long bytesRead = decoder.transfer(fchannel, 0, Integer.MAX_VALUE);"], [565, "            Assert.assertEquals(10, bytesRead);"], [566, "            decoder.transfer(fchannel, 0, Integer.MAX_VALUE);"], [567, "        } finally {"], [568, "            testfile.close();"], [569, "        }"], [570, "    }"], [571, ""]], "deleted": [[283, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [284, ""], [285, "        RandomAccessFile testfile = new RandomAccessFile(fileHandle, \"rw\");"], [286, "        FileChannel fchannel = testfile.getChannel();"], [287, ""], [288, "        long pos = 0;"], [289, "        while (!decoder.isCompleted()) {"], [290, "            long bytesRead = decoder.transfer(fchannel, pos, 10);"], [291, "            if (bytesRead > 0) {"], [292, "                pos += bytesRead;"], [295, "        Assert.assertEquals(testfile.length(), metrics.getBytesTransferred());"], [296, "        fchannel.close();"], [297, ""], [298, "        Assert.assertEquals(\"stuff; more stuff; a lot more stuff!\", readFromFile(fileHandle));"], [299, ""], [300, "        deleteWithCheck(fileHandle);"], [301, "    }"], [302, ""], [303, "    private void deleteWithCheck(File handle){"], [304, "        if (!handle.delete() && handle.exists()){"], [305, "            System.err.println(\"Failed to delete: \"+handle.getPath());"], [306, "        }"], [323, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [324, ""], [325, "        RandomAccessFile testfile = new RandomAccessFile(fileHandle, \"rw\");"], [326, "        FileChannel fchannel = testfile.getChannel();"], [327, ""], [328, "        long pos = 0;"], [329, "        while (!decoder.isCompleted()) {"], [330, "            long bytesRead = decoder.transfer(fchannel, pos, 10);"], [331, "            if (bytesRead > 0) {"], [332, "                pos += bytesRead;"], [335, ""], [336, "        Assert.assertEquals(testfile.length() - 7, metrics.getBytesTransferred());"], [337, "        fchannel.close();"], [338, ""], [339, "        Assert.assertEquals(\"stuff; more stuff; a lot more stuff!\", readFromFile(fileHandle));"], [340, ""], [341, "        deleteWithCheck(fileHandle);"], [358, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [359, ""], [360, "        RandomAccessFile testfile = new RandomAccessFile(fileHandle, \"rw\");"], [362, "        testfile.write(beginning);"], [363, "        testfile.close();"], [364, ""], [365, "        testfile = new RandomAccessFile(fileHandle, \"rw\");"], [366, "        FileChannel fchannel = testfile.getChannel();"], [367, ""], [368, "        long pos = beginning.length;"], [369, "        while (!decoder.isCompleted()) {"], [370, "            if(testfile.length() < pos)"], [371, "                testfile.setLength(pos);"], [372, "            long bytesRead = decoder.transfer(fchannel, pos, 10);"], [373, "            if (bytesRead > 0) {"], [374, "                pos += bytesRead;"], [379, "        Assert.assertEquals(testfile.length() - 7 - beginning.length, metrics.getBytesTransferred());"], [380, "        fchannel.close();"], [381, ""], [382, "        Assert.assertEquals(\"beginning; stuff; more stuff; a lot more stuff!\", readFromFile(fileHandle));"], [383, ""], [384, "        deleteWithCheck(fileHandle);"], [398, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [399, ""], [400, "        RandomAccessFile testfile = new RandomAccessFile(fileHandle, \"rw\");"], [401, "        FileChannel fchannel = testfile.getChannel();"], [402, "        Assert.assertEquals(0, testfile.length());"], [403, ""], [405, "            decoder.transfer(fchannel, 5, 10);"], [406, "            Assert.fail(\"expected IOException\");"], [407, "        } catch(IOException iox) {}"], [408, ""], [409, "        testfile.close();"], [410, "        deleteWithCheck(fileHandle);"], [426, "        File fileHandle = File.createTempFile(\"testFile\", \".txt\");"], [427, "        RandomAccessFile testfile  = new RandomAccessFile(fileHandle, \"rw\");"], [428, "        FileChannel fchannel = testfile.getChannel();"], [429, ""], [430, "        long bytesRead = decoder.transfer(fchannel, 0, 6);"], [431, "        Assert.assertEquals(6, bytesRead);"], [432, "        Assert.assertFalse(decoder.isCompleted());"], [433, "        Assert.assertEquals(6, metrics.getBytesTransferred());"], [434, ""], [435, "        bytesRead = decoder.transfer(fchannel,0 , 10);"], [436, "        Assert.assertEquals(10, bytesRead);"], [437, "        Assert.assertTrue(decoder.isCompleted());"], [438, "        Assert.assertEquals(16, metrics.getBytesTransferred());"], [439, ""], [440, "        bytesRead = decoder.transfer(fchannel, 0, 1);"], [441, "        Assert.assertEquals(-1, bytesRead);"], [442, "        Assert.assertTrue(decoder.isCompleted());"], [443, "        Assert.assertEquals(16, metrics.getBytesTransferred());"], [444, ""], [445, "        testfile.close();"], [446, "        deleteWithCheck(fileHandle);"]]}, "num_lines_added": 144, "num_lines_removed": 94}