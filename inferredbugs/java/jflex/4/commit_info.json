{"hash": "a82a6ab2222e1f2a80959ac6abb7a55f634a79a4", "message": "Close LineNumber Reader\n\nClose LineNumber Reader to avoid an unimportant resource leak.\n\nAlso reindent with 2 spaces.", "file_num_lines": 153, "diff_parsed": {"added": [[25, " *"], [30, "  private static final Pattern PACKAGE_PATTERN = Pattern.compile(\"package\\\\s+(\\\\S+)\\\\s*;\");"], [31, "  private static final Pattern CLASS_PATTERN = Pattern.compile(\"%class\\\\s+(\\\\S+)\");"], [33, "  private File inputFile;"], [34, ""], [35, "  // found out by looking into .flex file"], [36, "  private String className = null;"], [37, "  private String packageName = null;"], [41, ""], [42, "  /** the actual output directory (outputDir = destinationDir + package)) */"], [43, "  private File outputDir = null;"], [53, "    try {"], [54, "      if (inputFile == null)"], [57, "      if (!inputFile.canRead())"], [58, "        throw new BuildException(\"Cannot read input file \" + inputFile);"], [60, "      try {"], [61, "        findPackageAndClass();"], [64, ""], [65, "        if (inputFile.lastModified() > destFile.lastModified()) {"], [66, "          Main.generate(inputFile);"], [78, "  /**"], [79, "   * Peek into .flex file to get package and class name"], [80, "   *"], [81, "   * @throws IOException"], [82, "   *           if there is a problem reading the .flex file"], [83, "   */"], [84, "  public void findPackageAndClass() throws IOException {"], [85, "    // find name of the package and class in jflex source file"], [86, "    packageName = null;"], [87, "    className = null;"], [88, ""], [89, "    LineNumberReader reader = new LineNumberReader(new FileReader(inputFile));"], [90, "    try {"], [91, "      while (className == null || packageName == null) {"], [92, "        String line = reader.readLine();"], [93, "        if (line == null)"], [94, "          break;"], [95, ""], [96, "        if (packageName == null) {"], [97, "          Matcher matcher = PACKAGE_PATTERN.matcher(line);"], [98, "          if (matcher.find()) {"], [99, "            packageName = matcher.group(1);"], [100, "          }"], [101, "        }"], [102, ""], [103, "        if (className == null) {"], [104, "          Matcher matcher = CLASS_PATTERN.matcher(line);"], [105, "          if (matcher.find()) {"], [106, "            className = matcher.group(1);"], [107, "          }"], [108, "        }"], [109, "      }"], [110, ""], [111, "      // package name may be null, but class name not"], [112, "      if (className == null) {"], [113, "        className = \"Yylex\";"], [114, "      }"], [115, "    } finally {"], [116, "      reader.close();"], [117, "    }"], [118, "  }"], [119, ""], [120, "  /**"], [121, "   * Sets the actual output directory if not already set."], [122, "   *"], [123, "   * Uses javac logic to determine output dir = dest dir + package name If not"], [124, "   * destdir has been set, output dir = parent of input file"], [125, "   *"], [126, "   * Assumes that package name is already set."], [127, "   */"], [129, "    if (outputDir != null)"], [130, "      return;"], [131, ""], [132, "    // find out what the destination directory is. Append packageName to dest"], [133, "    // dir."], [135, ""], [136, "    // this is not the default the jflex logic, but javac-like"], [139, "        destDir = destinationDir;"], [140, "      } else {"], [142, "        destDir = new File(destinationDir, path);"], [144, "    } else { // save parser to the same dir as .flex"], [147, ""], [151, "  /**"], [152, "   * @return package name of input file"], [153, "   *"], [154, "   * @see #findPackageAndClass()"], [155, "   */"], [156, "  public String getPackage() {"], [157, "    return packageName;"], [158, "  }"], [159, ""], [160, "  /**"], [161, "   * @return class name of input file"], [162, "   *"], [163, "   * @see #findPackageAndClass()"], [164, "   */"], [165, "  public String getClassName() {"], [166, "    return className;"], [167, "  }"], [173, "  public void setOutdir(File outDir) {"], [174, "    this.outputDir = outDir;"], [176, "  }"], [189, ""], [198, ""], [206, ""], [214, ""], [216, "    Options.no_minimize = b;"], [234, ""], [235, "  public void setJLex(boolean b) {"], [242, ""], [245, "    Options.emitInputStreamCtor = b;"]], "deleted": [[25, " *"], [30, "    private static final Pattern PACKAGE_PATTERN = Pattern.compile(\"package\\\\s+(\\\\S+)\\\\s*;\");"], [31, "    private static final Pattern CLASS_PATTERN = Pattern.compile(\"%class\\\\s+(\\\\S+)\");"], [32, ""], [33, "    private File inputFile;"], [35, "\t// found out by looking into .flex file"], [36, "\tprivate String className = null;"], [37, "\tprivate String packageName = null;"], [41, ""], [42, "\t/** the actual output directory (outputDir = destinationDir + package)) */"], [43, "\tprivate File outputDir = null;"], [53, "   \ttry {"], [54, "      if (inputFile == null)"], [57, "\t\t\tif (!inputFile.canRead())"], [58, "\t\t\t\tthrow new BuildException(\"Cannot read input file \"+inputFile);"], [60, "\t\t\ttry {"], [61, "      \tfindPackageAndClass();"], [64, ""], [65, "        if (inputFile.lastModified() > destFile.lastModified()) {"], [66, "          Main.generate(inputFile);"], [78, "\t/**"], [79, "\t * Peek into .flex file to get package and class name"], [80, "\t *"], [81, "\t * @throws IOException  if there is a problem reading the .flex file"], [82, "\t */"], [83, "\tpublic void findPackageAndClass() throws IOException {"], [84, "\t\t// find name of the package and class in jflex source file"], [85, "\t\tpackageName = null;"], [86, "\t\tclassName = null;"], [87, ""], [88, "\t\tLineNumberReader reader = new LineNumberReader(new FileReader(inputFile));"], [89, ""], [90, "\t\twhile (className == null || packageName == null) {"], [91, "\t\t\tString line = reader.readLine();"], [92, "\t\t\tif (line == null)\tbreak;"], [93, ""], [94, "\t\t\tif (packageName == null) {"], [95, "                Matcher matcher = PACKAGE_PATTERN.matcher(line);"], [96, "                if (matcher.find()) {"], [97, "                    packageName = matcher.group(1);"], [98, "\t\t\t\t}"], [99, "\t\t\t}"], [100, ""], [101, "\t\t\tif (className == null) {"], [102, "                Matcher matcher = CLASS_PATTERN.matcher(line);"], [103, "                if (matcher.find()) {"], [104, "                    className = matcher.group(1);"], [105, "                }"], [106, "\t\t\t}"], [107, "\t\t}"], [108, ""], [109, "\t\t// package name may be null, but class name not"], [110, "\t\tif (className == null) className = \"Yylex\";"], [111, "\t}"], [112, ""], [113, "\t/**"], [114, "\t * Sets the actual output directory if not already set."], [115, "\t *"], [116, "\t * Uses javac logic to determine output dir = dest dir + package name"], [117, "\t * If not destdir has been set, output dir = parent of input file"], [118, "\t *"], [119, "\t * Assumes that package name is already set."], [120, "\t */"], [122, "  \tif (outputDir != null) return;"], [123, ""], [124, "    // find out what the destination directory is. Append packageName to dest dir."], [126, ""], [127, "    // this is not the default the jflex logic, but javac-like"], [130, "    \t\tdestDir = destinationDir;"], [131, "      }"], [132, "      else {"], [134, "        destDir = new File(destinationDir,path);"], [136, "    } else { //save parser to the same dir as .flex"], [139, ""], [143, "\t/**"], [144, "\t * @return package name of input file"], [145, "\t *"], [146, "\t * @see #findPackageAndClass()"], [147, "\t */"], [148, "\tpublic String getPackage() {"], [149, "\t\treturn packageName;"], [150, "\t}"], [151, ""], [152, "\t/**"], [153, "\t * @return class name of input file"], [154, "\t *"], [155, "\t * @see #findPackageAndClass()"], [156, "\t */"], [157, "\tpublic String getClassName() {"], [158, "\t\treturn className;"], [159, "\t}"], [165, "\tpublic void setOutdir(File outDir) {"], [166, "\t\tthis.outputDir = outDir;"], [168, "\t}"], [181, ""], [190, ""], [198, ""], [206, ""], [208, "  \tOptions.no_minimize = b;"], [226, ""], [227, "  public void setJLex(boolean b) {"], [234, ""], [237, "    Options.emitInputStreamCtor = b;"]]}, "num_lines_added": 111, "num_lines_removed": 103}