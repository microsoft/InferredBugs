 public void process(Channel ctx) {
		if (ctx.isInitial()) {
			return;
		}

		Buf buf = ctx.input();
		RapidoidHelper helper = ctx.helper();

		Range[] ranges = helper.ranges1.ranges;
		Ranges hdrs = helper.ranges2;

		BoolWrap isGet = helper.booleans[0];
		BoolWrap isKeepAlive = helper.booleans[1];

		Range verb = ranges[ranges.length - 1];
		Range uri = ranges[ranges.length - 2];
		Range path = ranges[ranges.length - 3];
		Range query = ranges[ranges.length - 4];
		Range protocol = ranges[ranges.length - 5];
		Range body = ranges[ranges.length - 6];

		HTTP_PARSER.parse(buf, isGet, isKeepAlive, body, verb, uri, path, query, protocol, hdrs, helper);

		// the listener may override all the request dispatching and handler execution
		if (!listener.request(this, ctx, isGet, isKeepAlive, body, verb, uri, path, query, protocol, hdrs)) {
			return;
		}

		HttpStatus status = HttpStatus.NOT_FOUND;

		FastHttpHandler handler = findFandler(ctx, buf, isGet, verb, path);

		if (handler != null) {
			Map<String, Object> params = null;

			if (handler.needsParams()) {
				params = U.map();

				KeyValueRanges paramsKV = helper.pairs1.reset();
				KeyValueRanges headersKV = helper.pairs2.reset();

				HTTP_PARSER.parseParams(buf, paramsKV, query);

				// parse URL parameters as data
				Map<String, Object> data = U.cast(paramsKV.toMap(buf, true, true));

				if (!isGet.value) {
					KeyValueRanges postedKV = helper.pairs3.reset();
					KeyValueRanges filesKV = helper.pairs4.reset();

					// parse posted body as data
					HTTP_PARSER.parsePosted(buf, headersKV, body, postedKV, filesKV, helper, data);
				}

				// filter special data values
				Map<String, Object> special = findSpecialData(data);

				if (special != null) {
					data.keySet().removeAll(special.keySet());
				} else {
					special = U.cast(Collections.EMPTY_MAP);
				}

				// put all data directly as parameters
				params.putAll(data);

				params.put(DATA, data);
				params.put(SPECIAL, special);

				// finally, the HTTP info
				params.put(VERB, verb.str(buf));
				params.put(URI, uri.str(buf));
				params.put(PATH, path.str(buf));

				params.put(CLIENT_ADDRESS, ctx.address());

				if (handler.needsHeadersAndCookies()) {
					KeyValueRanges cookiesKV = helper.pairs5.reset();
					HTTP_PARSER.parseHeadersIntoKV(buf, hdrs, headersKV, cookiesKV, helper);

					Map<String, Object> headers = U.cast(headersKV.toMap(buf, true, true));
					Map<String, Object> cookies = U.cast(cookiesKV.toMap(buf, true, true));

					params.put(HEADERS, headers);
					params.put(COOKIES, cookies);

					params.put(HOST, U.get(headers, "Host", null));
					params.put(FORWARDED_FOR, U.get(headers, "X-Forwarded-For", null));
				}
			}

			status = handler.handle(ctx, isKeepAlive.value, params);
		}

		if (status == HttpStatus.NOT_FOUND) {
			ctx.write(HTTP_404_NOT_FOUND);
			listener.notFound(this, ctx, isGet, isKeepAlive, body, verb, uri, path, query, protocol, hdrs);
		}

		if (status != HttpStatus.ASYNC) {
			ctx.closeIf(!isKeepAlive.value);
		}
	}