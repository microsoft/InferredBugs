{"hash": "41611aab7bc999ad8fc2a632ef6a68921b2e8826", "message": "More graceful handling of low-level errors in the HTTP server.", "file_num_lines": 231, "diff_parsed": {"added": [[13, "import org.rapidoid.http.customize.Customization;"], [209, "\t\t\t\ttry {"], [210, "\t\t\t\t\tHttpIO.errorAndDone(req, e);"], [211, "\t\t\t\t} catch (Exception e1) {"], [212, "\t\t\t\t\tLog.error(\"HTTP error handler error!\", e1);"], [213, "\t\t\t\t\tinternalServerError(channel, isKeepAlive, req, contentType);"], [214, "\t\t\t\t}"], [220, "\t\t\tinternalServerError(channel, isKeepAlive, req, contentType);"], [226, "\tprotected void internalServerError(Channel channel, boolean isKeepAlive, ReqImpl req, MediaType contentType) {"], [227, "\t\tHttpIO.startResponse(channel, 500, isKeepAlive, contentType);"], [228, "\t\tbyte[] bytes = HttpUtils.responseToBytes(req, \"Internal Server Error!\", contentType, custom().jsonResponseRenderer());"], [229, "\t\tHttpIO.writeContentLengthAndBody(channel, bytes);"], [230, "\t\tHttpIO.done(channel, isKeepAlive);"], [231, "\t}"], [232, ""], [233, "\tprivate Customization custom() {"], [234, "\t\treturn routes()[0].custom();"], [235, "\t}"], [236, ""]], "deleted": [[208, "\t\t\t\tHttpIO.errorAndDone(req, e);"], [214, "\t\t\tHttpIO.startResponse(channel, 500, isKeepAlive, contentType);"], [215, "\t\t\tbyte[] bytes = HttpUtils.responseToBytes(req, \"Internal Server Error!\", contentType, routes()[0].custom().jsonResponseRenderer());"], [216, "\t\t\tHttpIO.writeContentLengthAndBody(channel, bytes);"], [217, "\t\t\tHttpIO.done(channel, isKeepAlive);"]]}, "num_lines_added": 19, "num_lines_removed": 5}