{"hash": "e8816e784cf0b13331d13cfddc39a5dfde6a93bd", "message": "Added support for the missing HTTP verbs (issue #30).", "file_num_lines": 216, "diff_parsed": {"added": [[34, "import org.apache.http.client.methods.HttpDelete;"], [35, "import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;"], [37, "import org.apache.http.client.methods.HttpHead;"], [38, "import org.apache.http.client.methods.HttpOptions;"], [39, "import org.apache.http.client.methods.HttpPatch;"], [41, "import org.apache.http.client.methods.HttpPut;"], [43, "import org.apache.http.client.methods.HttpTrace;"], [82, "\tprivate Future<byte[]> request(String verb, String uri, Map<String, String> headers, Map<String, String> data,"], [83, "\t\t\tMap<String, String> files, byte[] body, String contentType, Callback<byte[]> callback) {"], [86, "\t\tdata = U.safe(data);"], [87, "\t\tfiles = U.safe(files);"], [89, "\t\tHttpRequestBase req;"], [90, "\t\tboolean canHaveBody = false;"], [91, ""], [92, "\t\tif (\"GET\".equalsIgnoreCase(verb)) {"], [93, "\t\t\treq = new HttpGet(uri);"], [94, "\t\t} else if (\"DELETE\".equalsIgnoreCase(verb)) {"], [95, "\t\t\treq = new HttpDelete(uri);"], [96, "\t\t} else if (\"OPTIONS\".equalsIgnoreCase(verb)) {"], [97, "\t\t\treq = new HttpOptions(uri);"], [98, "\t\t} else if (\"HEAD\".equalsIgnoreCase(verb)) {"], [99, "\t\t\treq = new HttpHead(uri);"], [100, "\t\t} else if (\"TRACE\".equalsIgnoreCase(verb)) {"], [101, "\t\t\treq = new HttpTrace(uri);"], [102, "\t\t} else if (\"POST\".equalsIgnoreCase(verb)) {"], [103, "\t\t\treq = new HttpPost(uri);"], [104, "\t\t\tcanHaveBody = true;"], [105, "\t\t} else if (\"PUT\".equalsIgnoreCase(verb)) {"], [106, "\t\t\treq = new HttpPut(uri);"], [107, "\t\t\tcanHaveBody = true;"], [108, "\t\t} else if (\"PATCH\".equalsIgnoreCase(verb)) {"], [109, "\t\t\treq = new HttpPatch(uri);"], [110, "\t\t\tcanHaveBody = true;"], [111, "\t\t} else {"], [112, "\t\t\tthrow U.illegalArg(\"Illegal HTTP verb: \" + verb);"], [119, "\t\tif (canHaveBody) {"], [120, "\t\t\tHttpEntityEnclosingRequestBase entityEnclosingReq = (HttpEntityEnclosingRequestBase) req;"], [122, "\t\t\tif (body != null) {"], [124, "\t\t\t\tNByteArrayEntity entity = new NByteArrayEntity(body);"], [126, "\t\t\t\tif (contentType != null) {"], [127, "\t\t\t\t\tentity.setContentType(contentType);"], [128, "\t\t\t\t}"], [130, "\t\t\t\tentityEnclosingReq.setEntity(entity);"], [131, "\t\t\t} else {"], [133, "\t\t\t\tMultipartEntityBuilder builder = MultipartEntityBuilder.create();"], [135, "\t\t\t\tfor (Entry<String, String> entry : files.entrySet()) {"], [136, "\t\t\t\t\tString filename = entry.getValue();"], [137, "\t\t\t\t\tFile file = IO.file(filename);"], [138, "\t\t\t\t\tbuilder = builder.addBinaryBody(entry.getKey(), file, ContentType.DEFAULT_BINARY, filename);"], [139, "\t\t\t\t}"], [141, "\t\t\t\tfor (Entry<String, String> entry : data.entrySet()) {"], [142, "\t\t\t\t\tbuilder = builder.addTextBody(entry.getKey(), entry.getValue(), ContentType.DEFAULT_TEXT);"], [143, "\t\t\t\t}"], [145, "\t\t\t\tByteArrayOutputStream stream = new ByteArrayOutputStream();"], [146, "\t\t\t\ttry {"], [147, "\t\t\t\t\tbuilder.build().writeTo(stream);"], [148, "\t\t\t\t} catch (IOException e) {"], [149, "\t\t\t\t\tthrow U.rte(e);"], [150, "\t\t\t\t}"], [152, "\t\t\t\tbyte[] bytes = stream.toByteArray();"], [153, "\t\t\t\tNByteArrayEntity entity = new NByteArrayEntity(bytes, ContentType.MULTIPART_FORM_DATA);"], [155, "\t\t\t\tentityEnclosingReq.setEntity(entity);"], [156, "\t\t\t}"], [159, "\t\tLog.debug(\"Starting HTTP request\", \"request\", req.getRequestLine());"], [192, ""], [193, "\t\t\t\tif (response.getEntity() != null) {"], [194, "\t\t\t\t\ttry {"], [195, "\t\t\t\t\t\tInputStream resp = response.getEntity().getContent();"], [196, "\t\t\t\t\t\tbytes = IOUtils.toByteArray(resp);"], [197, "\t\t\t\t\t} catch (Exception e) {"], [198, "\t\t\t\t\t\tCallbacks.error(callback, e);"], [199, "\t\t\t\t\t\tCallbacks.error(promise, e);"], [200, "\t\t\t\t\t\treturn;"], [201, "\t\t\t\t\t}"], [202, "\t\t\t\t} else {"], [203, "\t\t\t\t\tbytes = new byte[0];"], [238, "\t/********************************** GET **********************************/"], [239, ""], [240, "\tpublic Future<byte[]> get(String uri, Callback<byte[]> callback) {"], [241, "\t\treturn request(\"GET\", uri, null, null, null, null, null, callback);"], [242, "\t}"], [243, ""], [244, "\t/********************************** DELETE **********************************/"], [245, ""], [246, "\tpublic Future<byte[]> delete(String uri, Callback<byte[]> callback) {"], [247, "\t\treturn request(\"DELETE\", uri, null, null, null, null, null, callback);"], [248, "\t}"], [249, ""], [250, "\t/********************************** OPTIONS **********************************/"], [251, ""], [252, "\tpublic Future<byte[]> options(String uri, Callback<byte[]> callback) {"], [253, "\t\treturn request(\"OPTIONS\", uri, null, null, null, null, null, callback);"], [254, "\t}"], [255, ""], [256, "\t/********************************** HEAD **********************************/"], [257, ""], [258, "\tpublic Future<byte[]> head(String uri, Callback<byte[]> callback) {"], [259, "\t\treturn request(\"HEAD\", uri, null, null, null, null, null, callback);"], [260, "\t}"], [261, ""], [262, "\t/********************************** TRACE **********************************/"], [263, ""], [264, "\tpublic Future<byte[]> trace(String uri, Callback<byte[]> callback) {"], [265, "\t\treturn request(\"TRACE\", uri, null, null, null, null, null, callback);"], [266, "\t}"], [267, ""], [268, "\t/********************************** POST **********************************/"], [269, ""], [270, "\tpublic Future<byte[]> post(String uri, Map<String, String> headers, Map<String, String> data,"], [271, "\t\t\tMap<String, String> files, Callback<byte[]> callback) {"], [272, "\t\treturn request(\"POST\", uri, headers, data, files, null, null, callback);"], [273, "\t}"], [274, ""], [275, "\tpublic Future<byte[]> post(String uri, Map<String, String> headers, byte[] body, String contentType,"], [276, "\t\t\tCallback<byte[]> callback) {"], [277, "\t\treturn request(\"POST\", uri, headers, null, null, body, contentType, callback);"], [278, "\t}"], [279, ""], [280, "\t/********************************** PUT **********************************/"], [281, ""], [282, "\tpublic Future<byte[]> put(String uri, Map<String, String> headers, Map<String, String> data,"], [283, "\t\t\tMap<String, String> files, Callback<byte[]> callback) {"], [284, "\t\treturn request(\"PUT\", uri, headers, data, files, null, null, callback);"], [285, "\t}"], [286, ""], [287, "\tpublic Future<byte[]> put(String uri, Map<String, String> headers, byte[] body, String contentType,"], [288, "\t\t\tCallback<byte[]> callback) {"], [289, "\t\treturn request(\"PUT\", uri, headers, null, null, body, contentType, callback);"], [290, "\t}"], [291, ""], [292, "\t/********************************** PATCH **********************************/"], [293, ""], [294, "\tpublic Future<byte[]> patch(String uri, Map<String, String> headers, Map<String, String> data,"], [295, "\t\t\tMap<String, String> files, Callback<byte[]> callback) {"], [296, "\t\treturn request(\"PATCH\", uri, headers, data, files, null, null, callback);"], [297, "\t}"], [298, ""], [299, "\tpublic Future<byte[]> patch(String uri, Map<String, String> headers, byte[] body, String contentType,"], [300, "\t\t\tCallback<byte[]> callback) {"], [301, "\t\treturn request(\"PATCH\", uri, headers, null, null, body, contentType, callback);"], [302, "\t}"], [303, ""]], "deleted": [[75, "\tpublic Future<byte[]> post(String uri, Map<String, String> headers, byte[] postData, String contentType,"], [76, "\t\t\tCallback<byte[]> callback) {"], [80, "\t\tHttpPost req = new HttpPost(uri);"], [81, ""], [82, "\t\tNByteArrayEntity entity = new NByteArrayEntity(postData);"], [83, ""], [84, "\t\tif (contentType != null) {"], [85, "\t\t\tentity.setContentType(contentType);"], [92, "\t\treq.setEntity(entity);"], [94, "\t\tLog.debug(\"Starting HTTP POST request\", \"request\", req.getRequestLine());"], [96, "\t\treturn execute(client, req, callback);"], [97, "\t}"], [98, ""], [99, "\tpublic Future<byte[]> post(String uri, Map<String, String> headers, Map<String, String> data,"], [100, "\t\t\tMap<String, String> files, Callback<byte[]> callback) {"], [102, "\t\theaders = U.safe(headers);"], [103, "\t\tdata = U.safe(data);"], [104, "\t\tfiles = U.safe(files);"], [106, "\t\tHttpPost req = new HttpPost(uri);"], [108, "\t\tMultipartEntityBuilder builder = MultipartEntityBuilder.create();"], [110, "\t\tfor (Entry<String, String> entry : files.entrySet()) {"], [111, "\t\t\tString filename = entry.getValue();"], [112, "\t\t\tFile file = IO.file(filename);"], [113, "\t\t\tbuilder = builder.addBinaryBody(entry.getKey(), file, ContentType.DEFAULT_BINARY, filename);"], [114, "\t\t}"], [116, "\t\tfor (Entry<String, String> entry : data.entrySet()) {"], [117, "\t\t\tbuilder = builder.addTextBody(entry.getKey(), entry.getValue(), ContentType.DEFAULT_TEXT);"], [118, "\t\t}"], [120, "\t\tByteArrayOutputStream stream = new ByteArrayOutputStream();"], [121, "\t\ttry {"], [122, "\t\t\tbuilder.build().writeTo(stream);"], [123, "\t\t} catch (IOException e) {"], [124, "\t\t\tthrow U.rte(e);"], [125, "\t\t}"], [127, "\t\tbyte[] bytes = stream.toByteArray();"], [128, "\t\tNByteArrayEntity entity = new NByteArrayEntity(bytes, ContentType.MULTIPART_FORM_DATA);"], [130, "\t\tfor (Entry<String, String> e : headers.entrySet()) {"], [131, "\t\t\treq.addHeader(e.getKey(), e.getValue());"], [134, "\t\treq.setEntity(entity);"], [135, ""], [136, "\t\tLog.debug(\"Starting HTTP POST request\", \"request\", req.getRequestLine());"], [137, ""], [138, "\t\treturn execute(client, req, callback);"], [139, "\t}"], [140, ""], [141, "\tpublic Future<byte[]> get(String uri, Callback<byte[]> callback) {"], [142, "\t\tHttpGet req = new HttpGet(uri);"], [143, ""], [144, "\t\tLog.debug(\"Starting HTTP GET request\", \"request\", req.getRequestLine());"], [177, "\t\t\t\ttry {"], [178, "\t\t\t\t\tInputStream resp = response.getEntity().getContent();"], [179, "\t\t\t\t\tbytes = IOUtils.toByteArray(resp);"], [180, "\t\t\t\t} catch (Exception e) {"], [181, "\t\t\t\t\tCallbacks.error(callback, e);"], [182, "\t\t\t\t\tCallbacks.error(promise, e);"], [183, "\t\t\t\t\treturn;"]]}, "num_lines_added": 142, "num_lines_removed": 56}