{"hash": "8f2dd3cdb688cf49911a1f5cdb45b1acb8c552c0", "message": "Redesigned the manageables.", "file_num_lines": 78, "diff_parsed": {"added": [[10, "import org.rapidoid.http.Current;"], [11, "import org.rapidoid.http.Req;"], [16, "import java.util.Collection;"], [44, "\tprivate volatile Collection<? extends GroupOf<?>> groups;"], [45, ""], [46, "\tprivate volatile String baseUri;"], [47, ""], [50, ""], [52, "\t\tCollection<? extends GroupOf<?>> targetGroups = groups != null ? groups : Groups.all();"], [54, "\t\tfor (GroupOf<?> group : targetGroups) {"], [57, "\t\t\tList<String> nav = U.list(group.kind());"], [59, "\t\t\tinfo.add(h2(group.kind()));"], [60, ""], [61, "\t\t\taddInfo(baseUri, info, nav, items);"], [68, "\tpublic static void addInfo(String baseUri, List<Object> info, List<String> nav, List<? extends Manageable> items) {"], [69, "\t\tif (U.notEmpty(items)) {"], [70, "\t\t\tList<String> columns = U.list(U.first(items).getManageableProperties());"], [71, ""], [72, "\t\t\tif (U.notEmpty(columns)) {"], [73, "\t\t\t\taddInfo(baseUri, info, nav, items, columns);"], [74, "\t\t\t}"], [75, "\t\t}"], [76, "\t}"], [77, ""], [78, "\tprotected static void addInfo(final String baseUri, List<Object> info, final List<String> nav, List<? extends Manageable> items, List<String> columns) {"], [81, "\t\tfor (Manageable item : items) {"], [82, "\t\t\titem.reloadManageable();"], [83, "\t\t}"], [90, "\t\t\t\tpublic String map(Manageable item) throws Exception {"], [91, ""], [92, "\t\t\t\t\tReq req = Current.request();"], [93, ""], [94, "\t\t\t\t\tfinal List<String> uri = U.list(nav);"], [95, "\t\t\t\t\turi.add(0, baseUri);"], [96, "\t\t\t\t\turi.add(item.id());"], [97, ""], [98, "\t\t\t\t\treturn Msc.uri(U.arrayOf(uri));"], [101, "\t\t\t.pageSize(100);"], [106, "\tpublic Collection<? extends GroupOf<?>> groups() {"], [107, "\t\treturn groups;"], [108, "\t}"], [109, ""], [110, "\tpublic ManageablesOverviewPage groups(Collection<? extends GroupOf<?>> groups) {"], [111, "\t\tthis.groups = groups;"], [112, "\t\treturn this;"], [113, "\t}"], [114, ""], [115, "\tpublic String baseUri() {"], [116, "\t\treturn baseUri;"], [117, "\t}"], [118, ""], [119, "\tpublic ManageablesOverviewPage baseUri(String baseUri) {"], [120, "\t\tthis.baseUri = baseUri;"], [121, "\t\treturn this;"], [122, "\t}"]], "deleted": [[45, "\t\tfor (GroupOf<?> group : Groups.all()) {"], [48, "\t\t\tif (U.notEmpty(items)) {"], [49, "\t\t\t\tList<String> columns = U.first(items).getManageableProperties();"], [51, "\t\t\t\tif (U.notEmpty(columns)) {"], [52, "\t\t\t\t\taddInfo(info, group, items, columns);"], [53, "\t\t\t\t}"], [54, "\t\t\t}"], [61, "\tprivate void addInfo(List<Object> info, final GroupOf<?> group, List<? extends Manageable> items, List<String> columns) {"], [63, "\t\tfinal String groupName = group.name();"], [65, "\t\tfinal String kind = group.kind();"], [66, "\t\tinfo.add(breadcrumb(kind, groupName));"], [73, "\t\t\t\tpublic String map(Manageable handle) throws Exception {"], [74, "\t\t\t\t\treturn Msc.specialUri(\"manageables\", kind, Msc.urlEncode(handle.id()));"], [77, "\t\t\t.pageSize(20);"]]}, "num_lines_added": 55, "num_lines_removed": 14}