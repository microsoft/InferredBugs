{"hash": "d69a892c0e06f2d856a46b54faeeab9dd374afad", "message": "queue dump will begin with directory listing when used on a directory", "file_num_lines": 63, "diff_parsed": {"added": [[8, "import java.io.ByteArrayOutputStream;"], [16, "import static org.hamcrest.CoreMatchers.containsString;"], [29, "        try (final SingleChronicleQueue queue = SingleChronicleQueueBuilder."], [31, "                build()) {"], [33, "            final ExcerptAppender excerptAppender = queue.acquireAppender();"], [34, "            excerptAppender.writeText(\"first\");"], [35, "            excerptAppender.writeText(\"last\");"], [37, "            final Path queueFile = Files.list(dataDir.toPath())."], [38, "                    filter(p -> p.toString().endsWith(SingleChronicleQueue.SUFFIX))."], [39, "                    findFirst().orElseThrow(() ->"], [40, "                    new AssertionError(\"Could not find queue file in directory \" + dataDir));"], [41, "            assertThat(queueFile.toFile().setWritable(false), is(true));"], [43, "            final CountingOutputStream countingOutputStream = new CountingOutputStream();"], [44, "            DumpQueueMain.dump(queueFile.toFile(), new PrintStream(countingOutputStream), Long.MAX_VALUE);"], [46, "            assertThat(countingOutputStream.bytes, is(not(0L)));"], [47, "        }"], [48, "    }"], [49, ""], [50, "    @Test"], [51, "    public void shouldDumpDirectoryListing() throws Exception {"], [52, "        final File dataDir = DirectoryUtils.tempDir(DumpQueueMainTest.class.getSimpleName());"], [53, "        try (final SingleChronicleQueue queue = SingleChronicleQueueBuilder."], [54, "                binary(dataDir)."], [55, "                build()) {"], [56, ""], [57, "            final ExcerptAppender excerptAppender = queue.acquireAppender();"], [58, "            excerptAppender.writeText(\"first\");"], [59, "            excerptAppender.writeText(\"last\");"], [60, ""], [61, "            final ByteArrayOutputStream capture = new ByteArrayOutputStream();"], [62, "            DumpQueueMain.dump(dataDir, new PrintStream(capture), Long.MAX_VALUE);"], [63, ""], [64, "            final String capturedOutput = new String(capture.toByteArray());"], [65, ""], [66, "            assertThat(capturedOutput, containsString(\"listing.highestCycle\"));"], [67, "            assertThat(capturedOutput, containsString(\"listing.lowestCycle\"));"], [68, "            assertThat(capturedOutput, containsString(\"listing.exclusiveLock\"));"], [69, "        }"]], "deleted": [[27, "        final SingleChronicleQueue queue = SingleChronicleQueueBuilder."], [29, "                build();"], [31, "        final ExcerptAppender excerptAppender = queue.acquireAppender();"], [32, "        excerptAppender.writeText(\"first\");"], [33, "        excerptAppender.writeText(\"last\");"], [35, "        final Path queueFile = Files.list(dataDir.toPath())."], [36, "                filter(p -> p.toString().endsWith(SingleChronicleQueue.SUFFIX))."], [37, "                findFirst().orElseThrow(() ->"], [38, "                new AssertionError(\"Could not find queue file in directory \" + dataDir));"], [39, "        assertThat(queueFile.toFile().setWritable(false), is(true));"], [41, "        final CountingOutputStream countingOutputStream = new CountingOutputStream();"], [42, "        DumpQueueMain.dump(queueFile.toFile(), new PrintStream(countingOutputStream), Long.MAX_VALUE);"], [44, "        assertThat(countingOutputStream.bytes, is(not(0L)));"]]}, "num_lines_added": 38, "num_lines_removed": 13}