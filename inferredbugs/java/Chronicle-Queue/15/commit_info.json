{"hash": "1c0f0eccd43d04ecc388aabdedcdc25fa0b8ab1c", "message": "CHRON-56 Refactor TCP layer", "file_num_lines": 302, "diff_parsed": {"added": [[55, "        final Chronicle source = ChronicleQueueBuilder.indexed(basePathSource)"], [56, "            .source()"], [57, "                .bindAddress(BASE_PORT + 1)"], [58, "            .build();"], [59, "        final Chronicle sink = ChronicleQueueBuilder.indexed(basePathSink)"], [60, "            .sink()"], [61, "                .connectAddress(\"localhost\", BASE_PORT + 1)"], [62, "            .build();"], [120, "        final Chronicle source = ChronicleQueueBuilder.indexed(basePathSource)"], [121, "            .source()"], [122, "                .bindAddress(BASE_PORT + 2)"], [123, "            .build();"], [124, "        final Chronicle sink = ChronicleQueueBuilder.indexed(basePathSink)"], [125, "            .sink()"], [126, "                .connectAddress(\"localhost\", BASE_PORT + 2)"], [127, "            .build();"], [168, "        final Chronicle source = ChronicleQueueBuilder.indexed(basePathSource)"], [169, "            .source()"], [170, "            .bindAddress(BASE_PORT + 3)"], [171, "            .build();"], [172, "        final Chronicle sink = ChronicleQueueBuilder.indexed(basePathSink)"], [173, "            .sink()"], [174, "            .connectAddress(\"localhost\", BASE_PORT + 3)"], [175, "            .build();"], [219, "        final Chronicle source = ChronicleQueueBuilder.indexed(basePathSource)"], [220, "            .source()"], [221, "            .bindAddress(BASE_PORT + 4)"], [222, "            .build();"], [223, "        final Chronicle sink = ChronicleQueueBuilder.indexed(basePathSink)"], [224, "            .sink()"], [225, "            .connectAddress(\"localhost\", BASE_PORT + 4)"], [226, "            .build();"]], "deleted": [[46, "    public static final int PORT = 12345;"], [47, ""], [57, "        final Chronicle source = new ChronicleSource(ChronicleQueueBuilder.indexed(basePathSource).build(), PORT + 1);"], [58, "        final Chronicle sink = new ChronicleSink(ChronicleQueueBuilder.indexed(basePathSink).build(), \"localhost\", PORT + 1);"], [116, "        final Chronicle source = new ChronicleSource(ChronicleQueueBuilder.indexed(basePathSource).build(), PORT + 2);"], [117, "        final Chronicle sink = new ChronicleSink(ChronicleQueueBuilder.indexed(basePathSink).build(), \"localhost\", PORT + 2);"], [158, "        final Chronicle source = new ChronicleSource(ChronicleQueueBuilder.indexed(basePathSource).build(), PORT + 3);"], [159, "        final Chronicle sink = new ChronicleSink(ChronicleQueueBuilder.indexed(basePathSink).build(), \"localhost\", PORT + 3);"], [203, "        final Chronicle source = new ChronicleSource(ChronicleQueueBuilder.indexed(basePathSource).build(), PORT + 4);"], [204, "        final Chronicle sink = new ChronicleSink(ChronicleQueueBuilder.indexed(basePathSink).build(), \"localhost\", PORT + 4);"], [331, "/*"], [332, ""], [333, "    @Test"], [334, "    @Ignore"], [335, "    public void testOverTCPRolling() throws IOException, InterruptedException {"], [336, "        String baseDir = System.getProperty(\"java.io.tmpdir\");"], [337, "        String srcBasePath = baseDir + \"/IPCTR.testOverTCP.source\";"], [338, "        ChronicleTools.deleteDirOnExit(srcBasePath);"], [339, "        // NOTE: the sink and source must have different chronicle files."], [340, "        // TODO, make more robust."], [341, "        final int messages = 2 * 1000 * 1000;"], [342, "        ChronicleConfig config = ChronicleConfig.TEST.clone();"], [343, "        config.indexFileExcerpts(512);"], [344, "//        config.dataBlockSize(4096);"], [345, "//        config.indexBlockSize(4096);"], [346, "        final Chronicle source = new ChronicleSource(new RollingChronicle(srcBasePath, config), PORT + 1);"], [347, "        Thread t = new Thread(new Runnable() {"], [348, "            @Override"], [349, "            public void run() {"], [350, "                try {"], [351, "//                    PosixJNAAffinity.INSTANCE.setAffinity(1 << 1);"], [352, "                    ExcerptAppender excerpt = source.createAppender();"], [353, "                    for (int i = 1; i <= messages; i++) {"], [354, "                        // use a size which will cause mis-alignment."], [355, "                        excerpt.startExcerpt();"], [356, "                        excerpt.writeLong(i);"], [357, "                        excerpt.append(' ');"], [358, "                        excerpt.append(i);"], [359, "                        excerpt.append('\\n');"], [360, "                        excerpt.finish();"], [361, "                    }"], [362, "                    System.out.println(System.currentTimeMillis() + \": Finished writing messages\");"], [363, "                } catch (Exception e) {"], [364, "                    throw new AssertionError(e);"], [365, "                }"], [366, "            }"], [367, "        });"], [368, ""], [369, "//        PosixJNAAffinity.INSTANCE.setAffinity(1 << 2);"], [370, "        String snkBasePath = baseDir + \"/IPCTR.testOverTCP.sink\";"], [371, "        ChronicleTools.deleteDirOnExit(snkBasePath);"], [372, "        Chronicle sink = new InProcessChronicleSink(new RollingChronicle(snkBasePath, config), \"localhost\", PORT + 1);"], [373, ""], [374, "        long start = System.nanoTime();"], [375, "        t.start();"], [376, "        ExcerptTailer excerpt = sink.createTailer();"], [377, "        int count = 0;"], [378, "        for (int i = 1; i <= messages; i++) {"], [379, "            while (!excerpt.nextIndex())"], [380, "                count++;"], [381, "            long n = excerpt.readLong();"], [382, "            String text = excerpt.parseUTF(StopCharTesters.CONTROL_STOP);"], [383, "            if (i != n)"], [384, "                assertEquals('\\'' + text + '\\'', i, n);"], [385, "            excerpt.finish();"], [386, "            System.out.println(i);"], [387, "        }"], [388, "        sink.close();"], [389, "        System.out.println(\"There were \" + count + \" isSync messages\");"], [390, "        t.join();"], [391, "        source.close();"], [392, "        long time = System.nanoTime() - start;"], [393, "        System.out.printf(\"Messages per second %,d%n\", (int) (messages * 1e9 / time));"], [394, "    }"], [395, "*/"], [396, ""]]}, "num_lines_added": 32, "num_lines_removed": 76}