{"hash": "44468b9420ce2a688a4136121e082e5726da4fe2", "message": "CHRON-13 Check that resources are cleanup on windows", "file_num_lines": 244, "diff_parsed": {"added": [[29, "    public void testReplication1() throws Exception {"], [35, "        final ChronicleSource source = new ChronicleSource("], [36, "            new VanillaChronicle(sourceBasePath), 0);"], [37, "        final ChronicleSink sink = new ChronicleSink("], [38, "            new VanillaChronicle(sinkBasePath), \"localhost\", source.getLocalPort());"], [40, "        try {"], [42, "            final Thread at = new Thread(\"th-appender\") {"], [43, "                public void run() {"], [44, "                    try {"], [45, "                        final ExcerptAppender appender = source.createAppender();"], [46, "                        for (int i = 0; i < RUNS; i++) {"], [47, "                            appender.startExcerpt();"], [48, "                            long value = 1000000000 + i;"], [49, "                            appender.append(value).append(' ');"], [50, "                            appender.finish();"], [51, "                        }"], [53, "                        appender.close();"], [54, "                    } catch(Exception e) {"], [55, "                    }"], [56, "                }"], [57, "            };"], [59, "            final Thread tt = new Thread(\"th-tailer\") {"], [60, "                public void run() {"], [61, "                    try {"], [62, "                        final ExcerptTailer tailer = sink.createTailer();"], [63, "                        for (int i = 0; i < RUNS; i++) {"], [64, "                            long value = 1000000000 + i;"], [65, "                            assertTrue(tailer.nextIndex());"], [66, "                            long val = tailer.parseLong();"], [68, "                            assertEquals(\"i: \" + i, value, val);"], [69, "                            assertEquals(\"i: \" + i, 0, tailer.remaining());"], [70, "                            tailer.finish();"], [71, "                        }"], [73, "                        tailer.close();"], [74, "                    } catch(Exception e) {"], [75, "                    }"], [76, "                }"], [77, "            };"], [79, "            at.start();"], [80, "            tt.start();"], [82, "            at.join();"], [83, "            tt.join();"], [109, "        final ChronicleSource source = new ChronicleSource("], [110, "            new VanillaChronicle(sourceBasePath, config), 0);"], [111, "        final ChronicleSink sink = new ChronicleSink("], [112, "            new VanillaChronicle(sinkBasePath, config), \"localhost\", source.getLocalPort());"]], "deleted": [[22, "import java.io.IOException;"], [30, "    public void testReplication1() throws IOException {"], [35, "        final ChronicleSource source = new ChronicleSource(new VanillaChronicle(sourceBasePath), 0);"], [36, "        final ChronicleSink sink = new ChronicleSink(new VanillaChronicle(sinkBasePath), \"localhost\", source.getLocalPort());"], [38, "        try {"], [39, "            final ExcerptAppender appender = source.createAppender();"], [40, "            final ExcerptTailer tailer = sink.createTailer();"], [41, ""], [42, "            for (int i = 0; i < RUNS; i++) {"], [43, "                appender.startExcerpt();"], [44, "                long value = 1000000000 + i;"], [45, "                appender.append(value).append(' ');"], [46, "                appender.finish();"], [47, ""], [48, "                while(!tailer.nextIndex());"], [49, ""], [50, "                long val = tailer.parseLong();"], [51, "                //System.out.println(\"\" + val);"], [52, "                assertEquals(\"i: \" + i, value, val);"], [53, "                assertEquals(\"i: \" + i, 0, tailer.remaining());"], [54, "                tailer.finish();"], [55, "            }"], [56, ""], [57, "            appender.close();"], [58, "            tailer.close();"], [59, "        } finally {"], [60, "            sink.close();"], [61, "            sink.checkCounts(1, 1);"], [62, "            sink.clear();"], [63, ""], [64, "            source.close();"], [65, "            source.checkCounts(1, 1);"], [66, "            source.clear();"], [68, "            assertFalse(new File(sourceBasePath).exists());"], [69, "            assertFalse(new File(sinkBasePath).exists());"], [70, "        }"], [71, "    }"], [73, "    @Test"], [74, "    public void testReplication2() throws IOException {"], [75, "        final int RUNS = 100;"], [77, "        final String sourceBasePath = getVanillaTestPath(\"-source\");"], [78, "        final String sinkBasePath = getVanillaTestPath(\"-sink\");"], [79, "        assertNotNull(sourceBasePath);"], [80, "        assertNotNull(sinkBasePath);"], [82, "        final ChronicleSource source = new ChronicleSource(new VanillaChronicle(sourceBasePath), 0);"], [83, "        final ChronicleSink sink = new ChronicleSink(new VanillaChronicle(sinkBasePath), \"localhost\", source.getLocalPort());"], [85, "        try {"], [86, "            final ExcerptAppender appender = source.createAppender();"], [88, "            for (int i = 0; i < RUNS; i++) {"], [89, "                appender.startExcerpt();"], [90, "                long value = 1000000000 + i;"], [91, "                appender.append(value).append(' ');"], [92, "                appender.finish();"], [93, "            }"], [95, "            final ExcerptTailer tailer = sink.createTailer();"], [96, "            for (int i = 0; i < RUNS; i++) {"], [97, "                long value = 1000000000 + i;"], [98, "                assertTrue(tailer.nextIndex());"], [99, "                long val = tailer.parseLong();"], [100, "                //System.out.println(val);"], [101, "                assertEquals(\"i: \" + i, value, val);"], [102, "                assertEquals(\"i: \" + i, 0, tailer.remaining());"], [103, "                tailer.finish();"], [104, "            }"], [106, "            appender.close();"], [107, "            tailer.close();"], [110, "            sink.checkCounts(1, 1);"], [114, "            source.checkCounts(1, 1);"], [135, "        final ChronicleSource source = new ChronicleSource(new VanillaChronicle(sourceBasePath, config), 0);"], [136, "        final ChronicleSink sink = new ChronicleSink(new VanillaChronicle(sinkBasePath, config), \"localhost\", source.getLocalPort());"], [211, ""]]}, "num_lines_added": 46, "num_lines_removed": 71}