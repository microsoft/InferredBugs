{"hash": "e70ed82620b5bce4b03df9b535ca83d294bc1114", "message": "Move file locking logic to table store to make use of it for all clients", "file_num_lines": 151, "diff_parsed": {"added": [[47, "        tableStore.doWithExclusiveLock(ts -> {"], [48, "            maxCycleValue = ts.acquireValueFor(HIGHEST_CREATED_CYCLE);"], [49, "            minCycleValue = ts.acquireValueFor(LOWEST_CREATED_CYCLE);"], [50, "            lock = ts.acquireValueFor(LOCK);"], [51, "            modCount = ts.acquireValueFor(MOD_COUNT);"], [52, "            if (lock.getVolatileValue() == Long.MIN_VALUE) {"], [53, "                lock.compareAndSwapValue(Long.MIN_VALUE, 0);"], [55, "            if (modCount.getVolatileValue() == Long.MIN_VALUE) {"], [56, "                modCount.compareAndSwapValue(Long.MIN_VALUE, 0);"], [57, "            }"], [58, "            return this;"], [59, "        });"]], "deleted": [[3, "import net.openhft.chronicle.core.Jvm;"], [10, "import java.io.IOException;"], [11, "import java.nio.channels.FileChannel;"], [12, "import java.nio.channels.FileLock;"], [14, "import java.nio.file.StandardOpenOption;"], [52, "        final long timeoutAt = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(20L);"], [53, "        boolean warnedOnFailure = false;"], [54, "        while (System.currentTimeMillis() < timeoutAt) {"], [55, "            try (final FileChannel channel = FileChannel.open(tableStore.file().toPath(),"], [56, "                    StandardOpenOption.WRITE);"], [57, "                 final FileLock fileLock = channel.tryLock()) {"], [58, "                maxCycleValue = tableStore.acquireValueFor(HIGHEST_CREATED_CYCLE);"], [59, "                minCycleValue = tableStore.acquireValueFor(LOWEST_CREATED_CYCLE);"], [60, "                lock = tableStore.acquireValueFor(LOCK);"], [61, "                modCount = tableStore.acquireValueFor(MOD_COUNT);"], [62, "                if (lock.getVolatileValue() == Long.MIN_VALUE) {"], [63, "                    lock.compareAndSwapValue(Long.MIN_VALUE, 0);"], [64, "                }"], [65, "                if (modCount.getVolatileValue() == Long.MIN_VALUE) {"], [66, "                    modCount.compareAndSwapValue(Long.MIN_VALUE, 0);"], [67, "                }"], [68, "                return;"], [69, "            } catch (IOException | RuntimeException e) {"], [70, "                // failed to acquire the lock, wait until other operation completes"], [71, "                if (!warnedOnFailure) {"], [72, "                    LOGGER.warn(\"Failed to acquire a lock on the directory-listing file: {}:{}. Retrying.\","], [73, "                            e.getClass().getSimpleName(), e.getMessage());"], [74, "                    warnedOnFailure = true;"], [75, "                }"], [76, "                Jvm.pause(50L);"], [78, "        }"], [79, ""], [80, "        throw new IllegalStateException(\"Unable to claim exclusive lock on file \" + tableStore.file());"]]}, "num_lines_added": 12, "num_lines_removed": 33}