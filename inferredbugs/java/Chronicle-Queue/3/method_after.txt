    @Test
    public void testOverTCP() throws IOException, InterruptedException {
        String baseDir = System.getProperty("java.io.tmpdir");
        String srcBasePath = baseDir + "/IPCT.testOverTCP.source";
        ChronicleTools.deleteOnExit(srcBasePath);
        // NOTE: the sink and source must have different chronicle files.
        // TODO, make more robust.
        final int messages = 5 * 1000 * 1000;
        ChronicleConfig config = ChronicleConfig.DEFAULT.clone();
//        config.dataBlockSize(4096);
//        config.indexBlockSize(4096);
        final IndexedChronicle underlying = new IndexedChronicle(srcBasePath/*, config*/);
        final Chronicle source = new InProcessChronicleSource(underlying, PORT + 1);
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
//                    PosixJNAAffinity.INSTANCE.setAffinity(1 << 1);
                    ExcerptAppender excerpt = source.createAppender();
                    for (int i = 1; i <= messages; i++) {
                        // use a size which will cause mis-alignment.
                        excerpt.startExcerpt();
                        excerpt.writeLong(i);
                        excerpt.append(' ');
                        excerpt.append(i);
                        excerpt.append('\n');
                        excerpt.finish();
                    }
                    System.out.println(System.currentTimeMillis() + ": Finished writing messages");
                } catch (Exception e) {
                    throw new AssertionError(e);
                }
            }
        });

//        PosixJNAAffinity.INSTANCE.setAffinity(1 << 2);
        String snkBasePath = baseDir + "/IPCT.testOverTCP.sink";
        ChronicleTools.deleteOnExit(snkBasePath);
        final IndexedChronicle underlying2 = new IndexedChronicle(snkBasePath/*, config*/);
        Chronicle sink = new InProcessChronicleSink(underlying2, "localhost", PORT + 1);

        long start = System.nanoTime();
        t.start();
        ExcerptTailer excerpt = sink.createTailer();
        int count = 0;
        for (int i = 1; i <= messages; i++) {
            while (!excerpt.nextIndex())
                count++;
            long n = excerpt.readLong();
            String text = excerpt.parseUTF(StopCharTesters.CONTROL_STOP);
            if (i != n)
                assertEquals('\'' + text + '\'', i, n);
            excerpt.finish();
        }
        sink.close();
        System.out.println("There were " + count + " isSync messages");
        t.join();
        source.close();
        long time = System.nanoTime() - start;
        System.out.printf("Messages per second %,d%n", (int) (messages * 1e9 / time));
    }