{"hash": "40a7c5a49cb7da0d63f71bdfbcab2cd2dfc4039f", "message": "QUEUE-13 - Add a compressed format based on GZIP", "file_num_lines": 186, "diff_parsed": {"added": [[4, "import net.openhft.chronicle.queue.impl.ringbuffer.BytesRingBuffer;"], [33, "        final Bytes out =   ByteBufferBytes.wrap(ByteBuffer.allocate(22));"], [41, "        try (DirectStore allocate = DirectStore.allocate(150)) {"], [43, "            final BytesRingBuffer bytesRingBuffer = new BytesRingBuffer(allocate.bytes());"], [46, "            Bytes actual = bytesRingBuffer.take(maxSize -> input.clear());"], [47, "            assertEquals(EXPECTED, actual.readUTF());"], [55, "            final BytesRingBuffer bytesRingBuffer = new BytesRingBuffer(allocate.bytes());"], [57, "            Bytes actual = bytesRingBuffer.poll(maxSize -> input.clear());"], [58, "            assertEquals(null, actual);"], [66, "            final BytesRingBuffer bytesRingBuffer = new BytesRingBuffer(allocate.bytes());"], [68, "            Bytes actual = bytesRingBuffer.take(maxSize -> input.clear());"], [69, "            assertEquals(EXPECTED, actual.readUTF());"], [80, "                final BytesRingBuffer bytesRingBuffer = new BytesRingBuffer(allocate.bytes());"], [84, "                    assertEquals(EXPECTED, bytesRingBuffer.take(maxSize -> input.clear()).readUTF());"], [94, "            final BytesRingBuffer bytesRingBuffer = new BytesRingBuffer(allocate.bytes());"], [99, "                assertEquals(EXPECTED, bytesRingBuffer.take(maxSize -> input.clear()).readUTF());"], [100, "                assertEquals(EXPECTED, bytesRingBuffer.take(maxSize -> input.clear()).readUTF());"], [101, "                assertEquals(EXPECTED, bytesRingBuffer.take(maxSize -> input.clear()).readUTF());"], [114, "            final BytesRingBuffer bytesRingBuffer = new BytesRingBuffer(allocate.bytes());"], [137, "                        } catch (InterruptedException | AssertionError e) {"], [159, "                                    result = bytesRingBuffer.poll(maxSize -> bytes);"], [187, "            final BytesRingBuffer bytesRingBuffer = new BytesRingBuffer(allocate.bytes());"], [234, "                                    result = bytesRingBuffer.poll(maxsize -> bytes);"]], "deleted": [[4, "import net.openhft.chronicle.queue.impl.ringbuffer.BytesQueue;"], [33, "        final Bytes out = new ByteBufferBytes(ByteBuffer.allocate(22));"], [41, "        try (DirectStore  allocate = DirectStore.allocate(150)) {"], [43, "            final BytesQueue bytesRingBuffer = new BytesQueue(allocate.bytes());"], [46, "            Bytes poll = bytesRingBuffer.poll(input.clear());"], [47, "            assertEquals(EXPECTED, poll.readUTF());"], [55, "            final BytesQueue bytesRingBuffer = new BytesQueue(allocate.bytes());"], [57, "            Bytes poll = bytesRingBuffer.poll(input.clear());"], [58, "            assertEquals(null, poll);"], [66, "            final BytesQueue bytesRingBuffer = new BytesQueue(allocate.bytes());"], [68, "            Bytes poll = bytesRingBuffer.poll(input.clear());"], [69, "            assertEquals(EXPECTED, poll.readUTF());"], [80, "                final BytesQueue bytesRingBuffer = new BytesQueue(allocate.bytes());"], [84, "                    assertEquals(EXPECTED, bytesRingBuffer.poll(input.clear()).readUTF());"], [94, "            final BytesQueue bytesRingBuffer = new BytesQueue(allocate.bytes());"], [99, "                assertEquals(EXPECTED, bytesRingBuffer.poll(input.clear()).readUTF());"], [100, "                assertEquals(EXPECTED, bytesRingBuffer.poll(input.clear()).readUTF());"], [101, "                assertEquals(EXPECTED, bytesRingBuffer.poll(input.clear()).readUTF());"], [114, "            final BytesQueue bytesRingBuffer = new BytesQueue(allocate.bytes());"], [137, "                        } catch (InterruptedException e) {"], [138, "                            e.printStackTrace();"], [139, "                        } catch (AssertionError e) {"], [161, "                                    result = bytesRingBuffer.poll(bytes);"], [189, "            final BytesQueue bytesRingBuffer = new BytesQueue(allocate.bytes());"], [236, "                                    result = bytesRingBuffer.poll(bytes);"]]}, "num_lines_added": 23, "num_lines_removed": 25}