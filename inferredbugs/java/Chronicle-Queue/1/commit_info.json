{"hash": "bec5b48792b00d6b6e53d6d2d73c236a3b651eda", "message": "Previous put method was always appending entries, method is modified to handle already existing entries (i.e update). New test added for random update", "file_num_lines": 175, "diff_parsed": {"added": [[38, "\tprivate static final String TMP = System.getProperty(\"java.io.tmpdir\");"], [39, "\tprivate static int[] keyArray;"], [40, "\t@NotNull"], [41, "\tprivate final Chronicle chronicle;"], [42, "\t@NotNull"], [43, "\tprivate final Excerpt randomAccessor;"], [44, "\t@NotNull"], [45, "\tprivate final ExcerptAppender appender;"], [46, "\tprivate final TIntIntMap keyIndex = new TIntIntHashMap() {"], [47, "\t\t@Override"], [48, "\t\tpublic int getNoEntryValue() {"], [49, "\t\t\treturn -1;"], [50, "\t\t}"], [51, "\t};"], [52, "\tprivate final int _maxObjSize;"], [53, ""], [54, "\tpublic CachePerfMain(String basePath, int maxObjSize) throws IOException {"], [55, "\t\tchronicle = new IndexedChronicle(basePath);"], [56, ""], [57, "\t\tappender = chronicle.createAppender();"], [58, "\t\trandomAccessor = chronicle.createExcerpt();"], [59, "\t\t_maxObjSize = maxObjSize;"], [60, "\t}"], [61, ""], [62, "\tstatic final int keys = Integer.getInteger(\"keys\", 50000000);"], [63, ""], [64, "\tpublic static void main(String... ignored) throws IOException {"], [65, "\t\tString basePath = TMP + \"/ExampleCacheMain\";"], [66, "\t\tChronicleTools.deleteOnExit(basePath);"], [67, "\t\tCachePerfMain map = new CachePerfMain(basePath, 64);"], [68, "\t\tbuildkeylist(keys);"], [69, ""], [70, "\t\tlong duration;"], [71, ""], [72, "\t\tfor (int i = 0; i < 2; i++) {"], [73, "\t\t\tduration = putTest(keys, \"base\", map);"], [74, "\t\t\tSystem.out.printf(i"], [75, "\t\t\t\t\t+ \"th iter: Took %.3f secs to put seq %,d entries%n\","], [76, "\t\t\t\t\tduration / 1e9, keys);"], [77, "\t\t}"], [78, ""], [79, "\t\tfor (int i = 0; i < 2; i++) {"], [80, "\t\t\tduration = getTest(keys, map);"], [81, "\t\t\tSystem.out.printf(i"], [82, "\t\t\t\t\t+ \"th iter: Took %.3f secs to get seq %,d entries%n\","], [83, "\t\t\t\t\tduration / 1e9, keys);"], [84, "\t\t}"], [85, ""], [86, "\t\tshufflelist();"], [87, ""], [88, "\t\tfor (int i = 0; i < 2; i++) {"], [89, "\t\t\tSystem.gc();"], [90, "\t\t\tduration = getTest(keys, map);"], [91, "\t\t\tSystem.out.printf(i"], [92, "\t\t\t\t\t+ \"th iter: Took %.3f secs to get random %,d entries%n\","], [93, "\t\t\t\t\tduration / 1e9, keys);"], [94, "\t\t}"], [95, ""], [96, "\t\tfor (int i = 0; i < 2; i++) {"], [97, "\t\t\tduration = putTest(keys, \"modif\", map);"], [98, "\t\t\tSystem.out"], [99, "\t\t\t\t\t.printf(i"], [100, "\t\t\t\t\t\t\t+ \"th iter: Took %.3f secs to update random %,d entries%n\","], [101, "\t\t\t\t\t\t\tduration / 1e9, keys);"], [102, "\t\t}"], [103, ""], [104, "\t}"], [105, ""], [106, "\tstatic void shufflelist() {"], [107, "\t\tRandom rnd = new Random();"], [108, "\t\tint size = keyArray.length;"], [109, "\t\tfor (int i = size; i > 1; i--)"], [110, "\t\t\tswap(keyArray, i - 1, rnd.nextInt(i));"], [111, "\t}"], [112, ""], [113, "\tprivate static void swap(int[] ints, int x, int y) {"], [114, "\t\tint t = ints[x];"], [115, "\t\tints[x] = ints[y];"], [116, "\t\tints[y] = t;"], [117, "\t}"], [118, ""], [119, "\tstatic void buildkeylist(int keycount) {"], [120, "\t\tkeyArray = new int[keycount];"], [121, "\t\tfor (int i = 0; i < keycount; i++) {"], [122, "\t\t\tkeyArray[i] = i;"], [123, "\t\t}"], [124, "\t}"], [125, ""], [126, "\tstatic long putTest(int keycount, String prefix, CachePerfMain map) {"], [127, "\t\tlong start = System.nanoTime();"], [128, ""], [129, "\t\tStringBuilder name = new StringBuilder();"], [130, "\t\tStringBuilder surname = new StringBuilder();"], [131, "\t\tPerson person = new Person(name, surname, 0);"], [132, "\t\tfor (int i = 0; i < keys; i++) {"], [133, "\t\t\tname.setLength(0);"], [134, "\t\t\tname.append(prefix);"], [135, "\t\t\tname.append(\"name\");"], [136, "\t\t\tname.append(i);"], [137, ""], [138, "\t\t\tsurname.setLength(0);"], [139, "\t\t\tsurname.append(prefix);"], [140, "\t\t\tsurname.append(\"surname\");"], [141, "\t\t\tsurname.append(i);"], [142, ""], [143, "\t\t\tperson.set_age(i % 100);"], [144, ""], [145, "\t\t\tmap.put(i, person);"], [146, "\t\t}"], [147, "\t\treturn System.nanoTime() - start;"], [148, ""], [149, "\t}"], [150, ""], [151, "\tstatic long getTest(int keycount, CachePerfMain map) {"], [152, "\t\tlong start = System.nanoTime();"], [153, "\t\tPerson person = new Person();"], [154, "\t\tfor (int i = 0; i < keycount; i++) {"], [155, "\t\t\tmap.get(keyArray[i], person);"], [156, "\t\t}"], [157, "\t\treturn System.nanoTime() - start;"], [158, "\t}"], [159, ""], [160, "\tpublic void get(int key, Person person) {"], [161, ""], [162, "\t\t// Change reader position"], [163, "\t\trandomAccessor.index(keyIndex.get(key));"], [164, "\t\t// Read contents into byte buffer"], [165, "\t\tperson.readMarshallable(randomAccessor);"], [166, ""], [167, "\t\t// validate reading was correct"], [168, "\t\trandomAccessor.finish();"], [169, ""], [170, "\t}"], [171, ""], [172, "\tpublic void put(int key, Person person) {"], [173, ""], [174, "\t\tif (keyIndex.containsKey(key)) {"], [175, "\t\t\t// update existing record"], [176, "\t\t\t// Change accessor index to record."], [177, "\t\t\trandomAccessor.index(keyIndex.get(key));"], [178, "\t\t\t// Override existing"], [179, "\t\t\tperson.writeMarshallable(randomAccessor);"], [180, ""], [181, "\t\t} else {"], [182, "\t\t\t// append new record"], [183, ""], [184, "\t\t\t// Start an excerpt with given chunksize"], [185, "\t\t\tappender.startExcerpt(_maxObjSize);"], [186, ""], [187, "\t\t\t// Write the object bytes"], [188, "\t\t\tperson.writeMarshallable(appender);"], [189, ""], [190, "\t\t\t// pad it for later."], [191, "\t\t\tappender.position(_maxObjSize);"], [192, ""], [193, "\t\t\t// Get the position of the excerpt for further access."], [194, "\t\t\tlong index = appender.index();"], [195, ""], [196, "\t\t\t// finish works as \"commit\" consider transactional"], [197, "\t\t\t// consistency between putting key to map and putting object to"], [198, "\t\t\t// chronicle"], [199, "\t\t\tappender.finish();"], [200, ""], [201, "\t\t\t// Put the position of the excerpt with its key to a map."], [202, "\t\t\tkeyIndex.put(key, (int) index);"], [203, "\t\t}"], [204, "\t}"], [205, ""], [206, "\tpublic void close() {"], [207, "\t\tIOTools.close(chronicle);"], [208, "\t}"], [209, ""], [210, "\t// Took 5.239 secs to add 10,000,000 entries"], [211, "\tstatic class Person implements BytesMarshallable {"], [212, "\t\tprivate StringBuilder _name;"], [213, "\t\tprivate StringBuilder _surname;"], [214, "\t\tprivate int _age;"], [215, ""], [216, "\t\tpublic Person() {"], [217, "\t\t\tthis(new StringBuilder(), new StringBuilder(), 0);"], [218, "\t\t}"], [219, ""], [220, "\t\tpublic Person(StringBuilder name, StringBuilder surname, int age) {"], [221, "\t\t\t_name = name;"], [222, "\t\t\t_surname = surname;"], [223, "\t\t\t_age = age;"], [224, "\t\t}"], [225, ""], [226, "\t\tpublic StringBuilder get_name() {"], [227, "\t\t\treturn _name;"], [228, "\t\t}"], [229, ""], [230, "\t\tpublic StringBuilder get_surname() {"], [231, "\t\t\treturn _surname;"], [232, "\t\t}"], [233, ""], [234, "\t\tpublic int get_age() {"], [235, "\t\t\treturn _age;"], [236, "\t\t}"], [237, ""], [238, "\t\tpublic void set_age(int age) {"], [239, "\t\t\t_age = age;"], [240, "\t\t}"], [241, ""], [242, "\t\t@Override"], [243, "\t\tpublic void writeMarshallable(@NotNull Bytes out) {"], [244, "\t\t\tout.writeUTF\u0394(_name);"], [245, "\t\t\tout.writeUTF\u0394(_surname);"], [246, "\t\t\tout.writeStopBit(_age);"], [247, "\t\t}"], [248, ""], [249, "\t\t@Override"], [250, "\t\tpublic void readMarshallable(@NotNull Bytes in)"], [251, "\t\t\t\tthrows IllegalStateException {"], [252, "\t\t\tin.readUTF\u0394(_name);"], [253, "\t\t\tin.readUTF\u0394(_surname);"], [254, "\t\t\t_age = (int) in.readStopBit();"], [255, "\t\t}"], [256, ""], [257, "\t}"]], "deleted": [[38, "    private static final String TMP = System.getProperty(\"java.io.tmpdir\");"], [39, "    private static int[] keyArray;"], [40, "    @NotNull"], [41, "    private final Chronicle chronicle;"], [42, "    @NotNull"], [43, "    private final Excerpt reader;"], [44, "    @NotNull"], [45, "    private final ExcerptAppender appender;"], [46, "    private final TIntIntMap keyIndex = new TIntIntHashMap() {"], [47, "        @Override"], [48, "        public int getNoEntryValue() {"], [49, "            return -1;"], [50, "        }"], [51, "    };"], [52, "    private final int _maxObjSize;"], [53, ""], [54, "    public CachePerfMain(String basePath, int maxObjSize)"], [55, "            throws IOException {"], [56, "        chronicle = new IndexedChronicle(basePath);"], [57, ""], [58, "        appender = chronicle.createAppender();"], [59, "        reader = chronicle.createExcerpt();"], [60, "        _maxObjSize = maxObjSize;"], [61, "    }"], [62, ""], [63, "    static final int keys = Integer.getInteger(\"keys\", 1000000);"], [64, ""], [65, "    public static void main(String... ignored) throws IOException {"], [66, "        String basePath = TMP + \"/ExampleCacheMain\";"], [67, "        ChronicleTools.deleteOnExit(basePath);"], [68, "        CachePerfMain map = new CachePerfMain(basePath, 32);"], [69, "        long start = System.nanoTime();"], [70, "        buildkeylist(keys);"], [71, ""], [72, "        StringBuilder name = new StringBuilder();"], [73, "        StringBuilder surname = new StringBuilder();"], [74, "        Person person = new Person(name, surname, 0);"], [75, "        for (int i = 0; i < keys; i++) {"], [76, "            name.setLength(0);"], [77, "            name.append(\"name\");"], [78, "            name.append(i);"], [79, ""], [80, "            surname.setLength(0);"], [81, "            surname.append(\"surname\");"], [82, "            surname.append(i);"], [83, ""], [84, "            person.set_age(i % 100);"], [85, ""], [86, "            map.put(i, person);"], [87, "        }"], [88, ""], [89, "        long end = System.nanoTime();"], [90, ""], [91, "        System.out.printf(\"Took %.3f secs to add %,d entries%n\","], [92, "                (end - start) / 1e9, keys);"], [93, ""], [94, "        long duration;"], [95, "        for (int i = 0; i < 2; i++) {"], [96, "            duration = randomGet(keys, map);"], [97, "            System.out.printf(i"], [98, "                    + \"th iter: Took %.3f secs to get seq %,d entries%n\","], [99, "                    duration / 1e9, keys);"], [100, "        }"], [101, ""], [102, "        System.out.println(\"before shuffle\");"], [103, "        shufflelist();"], [104, "        System.out.println(\"after shuffle\");"], [105, ""], [106, "        for (int i = 0; i < 2; i++) {"], [107, "            System.gc();"], [108, "            duration = randomGet(keys, map);"], [109, "            System.out.printf(i"], [110, "                    + \"th iter: Took %.3f secs to get random %,d entries%n\","], [111, "                    duration / 1e9, keys);"], [112, "        }"], [113, ""], [114, ""], [115, "    }"], [116, ""], [117, "    static void shufflelist() {"], [118, "        Random rnd = new Random();"], [119, "        int size = keyArray.length;"], [120, "        for (int i = size; i > 1; i--)"], [121, "            swap(keyArray, i - 1, rnd.nextInt(i));"], [122, "    }"], [123, ""], [124, "    private static void swap(int[] ints, int x, int y) {"], [125, "        int t = ints[x];"], [126, "        ints[x] = ints[y];"], [127, "        ints[y] = t;"], [128, "    }"], [129, ""], [130, "    static void buildkeylist(int keycount) {"], [131, "        keyArray = new int[keycount];"], [132, "        for (int i = 0; i < keycount; i++) {"], [133, "            keyArray[i] = i;"], [134, "        }"], [135, "    }"], [136, ""], [137, "    static long randomGet(int keycount, CachePerfMain map) {"], [138, "        long start = System.nanoTime();"], [139, "        Person person = new Person();"], [140, "        for (int i = 0; i < keycount; i++) {"], [141, "            map.get(keyArray[i], person);"], [142, "        }"], [143, "        return System.nanoTime() - start;"], [144, "    }"], [145, ""], [146, "    public void get(int key, Person person) {"], [147, "        // Get the excerpt position for the given key from keyIndex map"], [148, "// long position = keyIndex.get(key);"], [149, ""], [150, "        // Change reader position"], [151, "        reader.index(keyIndex.get(key));"], [152, "        // Read contents into byte buffer"], [153, "        person.readMarshallable(reader);"], [154, ""], [155, "        // validate reading was correct"], [156, "        reader.finish();"], [157, ""], [158, "    }"], [159, ""], [160, "    public void put(int key, Person person) {"], [161, "        // Start an excerpt with given chunksize"], [162, "        appender.startExcerpt(_maxObjSize);"], [163, ""], [164, "        // Write the object bytes"], [165, "        person.writeMarshallable(appender);"], [166, ""], [167, "        // pad it for later."], [168, "        appender.position(_maxObjSize);"], [169, ""], [170, "        // Get the position of the excerpt for further access."], [171, "        long index = appender.index();"], [172, ""], [173, "        // finish works as \"commit\" consider transactional"], [174, "        // consistency between putting key to map and putting object to chronicle"], [175, "        appender.finish();"], [176, ""], [177, "        // Put the position of the excerpt with its key to a map."], [178, "        keyIndex.put(key, (int) index);"], [179, "    }"], [180, ""], [181, "    public void close() {"], [182, "        IOTools.close(chronicle);"], [183, "    }"], [184, ""], [185, "    // Took 5.239 secs to add 10,000,000 entries"], [186, "    static class Person implements BytesMarshallable {"], [187, "        private StringBuilder _name;"], [188, "        private StringBuilder _surname;"], [189, "        private int _age;"], [190, ""], [191, "        public Person() {"], [192, "            this(new StringBuilder(), new StringBuilder(), 0);"], [193, "        }"], [194, ""], [195, "        public Person(StringBuilder name, StringBuilder surname, int age) {"], [196, "            _name = name;"], [197, "            _surname = surname;"], [198, "            _age = age;"], [199, "        }"], [200, ""], [201, "        public StringBuilder get_name() {"], [202, "            return _name;"], [203, "        }"], [204, ""], [205, "        public StringBuilder get_surname() {"], [206, "            return _surname;"], [207, "        }"], [208, ""], [209, "        public int get_age() {"], [210, "            return _age;"], [211, "        }"], [212, ""], [213, "        public void set_age(int age) {"], [214, "            _age = age;"], [215, "        }"], [216, ""], [217, "        @Override"], [218, "        public void writeMarshallable(@NotNull Bytes out) {"], [219, "            out.writeUTF\u0394(_name);"], [220, "            out.writeUTF\u0394(_surname);"], [221, "            out.writeStopBit(_age);"], [222, "        }"], [223, ""], [224, "        @Override"], [225, "        public void readMarshallable(@NotNull Bytes in)"], [226, "                throws IllegalStateException {"], [227, "            in.readUTF\u0394(_name);"], [228, "            in.readUTF\u0394(_surname);"], [229, "            _age = (int) in.readStopBit();"], [230, "        }"], [231, "    }"]]}, "num_lines_added": 220, "num_lines_removed": 194}