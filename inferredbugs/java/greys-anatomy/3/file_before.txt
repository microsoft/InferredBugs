package com.googlecode.greysanatomy.console;

import static org.apache.commons.lang.StringUtils.EMPTY;
import static org.apache.commons.lang.StringUtils.isBlank;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.Writer;

import jline.console.ConsoleReader;
import jline.console.KeyMap;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.googlecode.greysanatomy.Configer;
import com.googlecode.greysanatomy.console.command.Command;
import com.googlecode.greysanatomy.console.command.Commands;
import com.googlecode.greysanatomy.console.rmi.RespResult;
import com.googlecode.greysanatomy.console.rmi.req.ReqCmd;
import com.googlecode.greysanatomy.console.rmi.req.ReqGetResult;
import com.googlecode.greysanatomy.console.rmi.req.ReqKillJob;
import com.googlecode.greysanatomy.console.server.ConsoleServerService;
import com.googlecode.greysanatomy.util.GaStringUtils;

/**
 * ̨
 * @author vlinux
 *
 */
public class GreysAnatomyConsole {

	private static final Logger logger = LoggerFactory.getLogger("greysanatomy");
	
	private final Configer configer;
	private final ConsoleReader console;
	
	private volatile boolean isF = true;
	
	private final long sessionId;
	private String jobId;
	private String path;
	
	/**
	 * GĄ
	 * @param configer
	 * @throws IOException
	 */
	public GreysAnatomyConsole(Configer configer, long sessionId) throws IOException {
		this.console = new ConsoleReader(System.in, System.out);
		this.configer = configer;
		this.sessionId = sessionId;
		write(GaStringUtils.getLogo());
		Commands.getInstance().registCompleter(console);
	}
	
	/**
	 * ̨
	 * @author vlinux
	 *
	 */
	private class GaConsoleInputer implements Runnable {

		private final ConsoleServerService consolServer;
		private GaConsoleInputer(ConsoleServerService consolServer) {
			this.consolServer = consolServer;
		}
		
		@Override
		public void run() {
			while(true) {
				try {
					//̨
					doRead();
				}catch(Exception e) {
					// ǿ̨ô
					logger.warn("console read failed.",e);
				}
			}
		}
		
		private void doRead() throws Exception {
			final String prompt = isF ? configer.getConsolePrompt() : EMPTY;
			final ReqCmd reqCmd = new ReqCmd(console.readLine(prompt), sessionId);
			
			/*
			 * ǿհַߵǰ̨ûΪ
			 * ȡ
			 */
			if( isBlank(reqCmd.getCommand()) || !isF ) {
				return;
			}
			
			final Command command = Commands.getInstance().newCommand(reqCmd.getCommand());
			
			if( command != null ) {
				path = command.getRedirectPath();
				if(!StringUtils.isEmpty(path)){
					//֮ǰȰضļãûȨ޻⣬Ͳ
					try{
						new RandomAccessFile(path, "rw").setLength(0);
					}catch(Exception e){
						write(path + ":" + e.getMessage());
						return;
					}
				}
			}else{
				//ڣͻ˲쳣˴Ҫpath
				path = EMPTY;
			}
			
			// ״̬Ϊδ
			isF = false;
			
			// 
			RespResult result =	consolServer.postCmd(reqCmd);
			jobId = result.getJobId();
		}
		
	}
	
	/**
	 * ̨
	 * @author chengtongda
	 *
	 */
	private class GaConsoleOutputer implements Runnable {

		private final ConsoleServerService consolServer;
		private String currentJob;
		private int pos = 0;
		private GaConsoleOutputer(ConsoleServerService consolServer) {
			this.consolServer = consolServer;
		}
		
		@Override
		public void run() {
			while(true) {
				try {
					//̨д
					doWrite();
					//ÿ500msһν
					Thread.sleep(500);
				}catch(Exception e) {
					logger.warn("console write failed.",e);
				}
			}
		}
		
		private void doWrite() throws Exception {
			//ûעjob  򲻶
			if(isF || sessionId == 0 || StringUtils.isEmpty(jobId)){
				return;
			}
			
			//ǰȡjobִеjob0ʼ
			if(!StringUtils.equals(currentJob, jobId)){
				pos = 0;
				currentJob = jobId;
			}
			
			RespResult resp = consolServer.getCmdExecuteResult(new ReqGetResult(jobId, sessionId, pos));
			pos = resp.getPos();
			
			//дض
			try{
				writeToFile(resp.getMessage(), path);
			}catch(IOException e){
				//ضдļ쳣ʱҪkilljob ִ
				consolServer.killJob(new ReqKillJob(sessionId, jobId));
				isF = true;
				write(path + ":" + e.getMessage());
				return;
			}
			
			write(resp);
		}
		
	}
	
	/**
	 * console
	 * @param channel
	 */
	public synchronized void start(final ConsoleServerService consoleServer) {
		this.console.getKeys().bind(""+KeyMap.CTRL_D, new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				if( !isF ) {
					write("abort it.");
					isF = true;
					try {
						consoleServer.killJob(new ReqKillJob(sessionId, jobId));
					} catch (Exception e1) {
						// ǿ̨ô
						logger.warn("killJob failed.",e);
					}
				}
			}
			
		});
		new Thread(new GaConsoleInputer(consoleServer)).start();
		new Thread(new GaConsoleOutputer(consoleServer)).start();
	}
	
	
	/**
	 * ̨Ϣ
	 * @param resp
	 */
	public void write(RespResult resp) {
		if( !isF) {
			if( resp.isFinish() ) {
				isF = true;
				resp.setMessage(resp.getMessage()
						+ "------------------------------end------------------------------\n");
			}
			if(!StringUtils.isEmpty(resp.getMessage())){
				write(resp.getMessage());
			}
		}
	}
	
	/**
	 * Ϣ
	 * @param message
	 */
	private void write(String message) {
		final Writer writer = console.getOutput();
		try {
			writer.write(message);
			writer.flush();
		}catch(IOException e) {
			// ̨дʧܣô
			logger.warn("console write failed.", e);
		}
		
	}
	
	/**
	 * Ϣļ
	 * @param message
	 * @param path
	 * @throws IOException 
	 */
	private void writeToFile(String message, String path) throws IOException{
		if(StringUtils.isEmpty(message) || StringUtils.isEmpty(path)){
			return ;
		}
		
		RandomAccessFile rf = new RandomAccessFile(path, "rw");
		rf.seek(rf.length());
		rf.write(message.getBytes());
		rf.close();
	}
}
