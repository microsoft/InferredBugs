{"hash": "09ee2daf034aaf0e761aee85786da5307b84baf1", "message": "[#139] #164 Exclusive/Inclusive slave mode. Multiple labels\n\nProvisioning deal with template, no need in splitting args.", "file_num_lines": 382, "diff_parsed": {"added": [[73, " * Docker Cloud configuration. Contains connection configuration,"], [74, " * {@link DockerTemplate} contains configuration for running docker image."], [232, "            final List<DockerTemplate> templates = getTemplates(label);"], [234, "            while (excessWorkload > 0 && !templates.isEmpty()) {"], [235, "                final DockerTemplate t = templates.get(0); // get first"], [237, "                LOGGER.log(Level.INFO, \"Will provision \\\"{0}\\\" for: {1}\", new Object[]{t.image,label});"], [239, "                try {"], [240, "                    if (!addProvisionedSlave(t)) {"], [241, "                        templates.remove(t);"], [242, "                        continue;"], [243, "                    }"], [244, "                } catch (Exception e) {"], [245, "                    LOGGER.log(Level.WARNING, \"Bad template {0}: {1}. Trying next template...\","], [246, "                            new Object[]{t.image, e.getMessage()});"], [247, "                    templates.remove(t);"], [248, "                    continue;"], [314, "     * Gets first {@link DockerTemplate} that has the matching {@link Label}."], [318, "        List<DockerTemplate> templates = getTemplates(label);"], [319, "        if (!templates.isEmpty()) {"], [320, "            return templates.get(0);"], [322, ""], [331, "        templates.add(t);"], [332, "    }"], [333, ""], [334, "    /**"], [335, "     * Multiple amis can have the same label."], [336, "     * @return Templates matched to requested label assuming slave Mode"], [337, "     */"], [338, "    public List<DockerTemplate> getTemplates(Label label) {"], [339, "        ArrayList<DockerTemplate> dockerTemplates = new ArrayList<DockerTemplate>();"], [340, ""], [341, "        for (DockerTemplate t : templates) {"], [342, "            if (label == null && t.getMode() == Node.Mode.NORMAL) {"], [343, "                dockerTemplates.add(t);"], [344, "            }"], [345, ""], [346, "            if (label != null && label.matches(t.getLabelSet())) {"], [347, "                dockerTemplates.add(t);"], [348, "            }"], [349, "        }"], [350, ""], [351, "        return dockerTemplates;"], [359, "        templates.remove(t);"], [417, "    private synchronized boolean addProvisionedSlave(DockerTemplate t) throws Exception {"], [418, "        String ami = t.image;"], [419, "        int amiCap = t.instanceCap;"], [420, ""]], "deleted": [[226, ""], [231, "            final DockerTemplate t = getTemplate(label);"], [233, "            LOGGER.log(Level.INFO, \"Will provision \\\"{0}\\\" for: {1}\", new Object[]{t.image,label});"], [235, "            while (excessWorkload>0) {"], [237, "                if (!addProvisionedSlave(t.image, t.instanceCap)) {"], [238, "                    break;"], [304, "     * Gets {@link DockerTemplate} that has the matching {@link Label}."], [308, "        for (DockerTemplate t : templates) {"], [309, "            if(label == null || label.matches(t.getLabelSet())) {"], [310, "                return t;"], [311, "            }"], [320, "        this.templates.add(t);"], [329, "        this.templates.remove(t);"], [387, "    private synchronized boolean addProvisionedSlave(String ami, int amiCap) throws Exception {"]]}, "num_lines_added": 47, "num_lines_removed": 14}