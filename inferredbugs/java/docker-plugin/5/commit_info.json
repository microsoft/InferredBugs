{"hash": "516eab68676bb729166d2ac03611d2ab60f0446b", "message": "Fix unit-test broken by previous commit.", "file_num_lines": 71, "diff_parsed": {"added": [[3, "import static org.mockito.Mockito.mock;"], [4, "import static org.mockito.Mockito.times;"], [5, "import static org.mockito.Mockito.verify;"], [6, "import static org.mockito.Mockito.when;"], [7, ""], [11, ""], [20, "import java.util.Map;"], [21, "import java.util.TreeMap;"], [55, "        // Given"], [56, "        final String env1 = \"ENV1=val1\";"], [57, "        final String vmargs = \"-Dhttp.proxyPort=8080\";"], [58, "        final DockerComputerJNLPConnector connector = new DockerComputerJNLPConnector(new JNLPLauncher(null, vmargs));"], [59, ""], [60, "        final CreateContainerCmd createCmd = mock(CreateContainerCmd.class);"], [61, "        final Map<String, String> containerLabels = new TreeMap<>();"], [62, "        when(createCmd.getLabels()).thenReturn(containerLabels);"], [63, "        DockerTemplate.setNodeNameInContainerConfig(createCmd, \"nodeName\");"], [64, "        when(createCmd.getEnv()).thenReturn(new String[]{ env1 });"], [65, ""], [66, "        // When"], [69, "        // Then"], [70, "        verify(createCmd, times(1)).withEnv(new String[]{"], [71, "                env1,"], [72, "                \"JAVA_OPT=\" + vmargs"], [73, "        });"], [78, "        // Given"], [79, "        final String vmargs = \"-Dhttp.proxyPort=8080\";"], [80, "        final DockerComputerJNLPConnector connector = new DockerComputerJNLPConnector(new JNLPLauncher(null, vmargs));"], [82, "        final CreateContainerCmd createCmd = mock(CreateContainerCmd.class);"], [83, "        final Map<String, String> containerLabels = new TreeMap<>();"], [84, "        when(createCmd.getLabels()).thenReturn(containerLabels);"], [85, "        DockerTemplate.setNodeNameInContainerConfig(createCmd, \"nodeName\");"], [87, "        // When"], [90, "        // Then"], [91, "        verify(createCmd, times(1)).withEnv(new String[]{"], [92, "                \"JAVA_OPT=\" + vmargs"], [93, "        });"]], "deleted": [[4, "import com.github.dockerjava.core.command.CreateContainerCmdImpl;"], [15, "import java.util.Arrays;"], [18, "import static org.junit.Assert.assertEquals;"], [19, "import static org.junit.Assert.assertNotNull;"], [20, "import static org.junit.Assert.assertTrue;"], [21, ""], [53, ""], [54, "        String env1 = \"ENV1=val1\";"], [55, "        DockerComputerJNLPConnector connector = new DockerComputerJNLPConnector(new JNLPLauncher(null, \"-Dhttp.proxyPort=8080\"));"], [56, ""], [57, "        CreateContainerCmd createCmd = new CreateContainerCmdImpl(createContainerCmd -> null, \"hello-world\");"], [58, "        createCmd.withName(\"container-name\").withEnv(env1);"], [61, "        String[] env = createCmd.getEnv();"], [62, "        assertNotNull(\"Environment variables are expected\", env);"], [63, "        assertEquals(\"Environment variables are expected\", 2, env.length);"], [64, ""], [65, "        assertTrue(\"Original environment variable is not found\", Arrays.asList(env).contains(env1));"], [66, ""], [72, "        String vmargs = \"-Dhttp.proxyPort=8080\";"], [73, "        DockerComputerJNLPConnector connector = new DockerComputerJNLPConnector(new JNLPLauncher(null, vmargs));"], [75, "        CreateContainerCmd createCmd = new CreateContainerCmdImpl(createContainerCmd -> null, \"hello-world\");"], [76, "        createCmd.withName(\"container-name\");"], [79, "        String[] env = createCmd.getEnv();"], [80, "        assertNotNull(\"Environment variable is expected\", env);"], [81, "        assertEquals(\"Environment variable is expected\", 1, env.length);"], [82, ""], [83, "        assertTrue(\"Original environment variable is not found\", env[0].endsWith(vmargs));"], [84, ""]]}, "num_lines_added": 37, "num_lines_removed": 28}