{"hash": "83d03ec5c8b7c49896841a9386bec0f75d2697a5", "message": "Change on 2010/06/24 by johnlenz\n\n        Add support to ant task for manage dependencies.\n        Fixes issue 188.\n\n        R=nicksantos\n        DELTA=7  (7 added, 0 deleted, 0 changed)\n\nChange on 2010/06/24 by johnlenz\n\n        Add character set encoding support to the ant task.\n        Fixes issue 186.\n\n        R=nicksantos\n        DELTA=27  (24 added, 0 deleted, 3 changed)\n\nChange on 2010/06/24 by elnatan\n\n        Refactored: rewrote while loop as for-each loop\n\n        R=nicksantos\n        DELTA=7  (0 added, 5 deleted, 2 changed)\n\nChange on 2010/06/24 by nicksantos\n\n        Add IE's imeMode to the externs file, so that we can enable/disable\n        IMEs.\n\n        R=shanbhag\n        DELTA=6  (6 added, 0 deleted, 0 changed)\n\nChange on 2010/06/24 by nicksantos\n\n        the answer to your question about\n        inferring param types and return types is yes. :)\n\n        R=rjfioravanti\n        DELTA=21  (21 added, 0 deleted, 0 changed)\n\nChange on 2010/06/24 by cindylau\n\n        Add experimental.cookies API to Chrome Extensions externs file.\n\n        R=acleung\n        DELTA=70  (70 added, 0 deleted, 0 changed)\n\nChange on 2010/06/24 by nicksantos\n\n        don't fold numbers when they get really big.\n        SanityCheck is upset because large numbers cause non-determinism\n        in compile jobs, due to fixed-point rounding errors.\n\n        R=acleung\n        DELTA=12  (11 added, 0 deleted, 1 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=37004\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@253 b0f006be-c8cd-11de-a2e8-8d36a3108c74", "file_num_lines": 190, "diff_parsed": {"added": [[21, "import com.google.javascript.jscomp.CommandLineRunner;"], [36, "import java.io.FileOutputStream;"], [39, "import java.io.OutputStreamWriter;"], [40, "import java.nio.charset.Charset;"], [59, "  private String encoding = \"UTF-8\";"], [60, "  private String outputEncoding = \"UTF-8\";"], [63, "  private boolean manageDependencies;"], [73, "    this.manageDependencies = false;"], [121, "  public void setManageDependencies(boolean value) {"], [122, "    this.manageDependencies = value;"], [123, "  }"], [124, ""], [139, "  /**"], [140, "   * Set input file encoding"], [141, "   */"], [142, "  public void setEncoding(String encoding) {"], [143, "    this.encoding = encoding;"], [144, "  }"], [145, ""], [146, "  /**"], [147, "   * Set output file encoding"], [148, "   */"], [149, "  public void setOutputEncoding(String outputEncoding) {"], [150, "    this.outputEncoding = outputEncoding;"], [151, "  }"], [152, ""], [199, "    options.setManageClosureDependencies(manageDependencies);"], [244, "      files.add(JSSourceFile.fromFile(new File(baseDir, included),"], [245, "          Charset.forName(encoding)));"], [283, "      OutputStreamWriter out = new OutputStreamWriter("], [284, "          new FileOutputStream(this.outputFile), outputEncoding);"], [286, "      out.flush();"], [296, ""]], "deleted": [[35, "import java.io.FileWriter;"], [218, "      files.add(JSSourceFile.fromFile(new File(baseDir, included)));"], [256, "      FileWriter out = new FileWriter(this.outputFile);"]]}, "num_lines_added": 33, "num_lines_removed": 3}