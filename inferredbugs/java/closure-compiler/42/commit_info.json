{"hash": "b74589e7da356174186105eb897c010875c1579e", "message": "Finish off StatementFusion experiment.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=45181949", "file_num_lines": 155, "diff_parsed": {"added": [[53, "    // TODO(user): It is much cleaner to have two algorithms depending"], [54, "    // on favorsCommaOverSemiColon. If we decided the less aggressive one is"], [55, "    // no longer useful, delete it."], [56, "    if (favorsCommaOverSemiColon) {"], [57, "      return tryFuseStatementsAggressively(n);"], [58, "    } else {"], [59, "      return tryFuseStatements(n);"], [60, "    }"], [61, "  }"], [63, "  Node tryFuseStatements(Node n) {"], [64, "    if (!n.getParent().isFunction() && canFuseIntoOneStatement(n)) {"], [66, "      Node end = n.getLastChild();"], [74, "  Node tryFuseStatementsAggressively(Node n) {"], [75, "    if (!NodeUtil.isStatementBlock(n)) {"], [76, "      return n;"], [77, "    }"], [78, ""], [79, "    Node cur = n.getFirstChild();"], [80, "    while (cur != null) {"], [81, "      if (!cur.isExprResult()) {"], [82, "        cur = cur.getNext();"], [83, "        continue;"], [84, "      }"], [85, "      Node next = cur.getNext();"], [86, "      while (next != null && next.isExprResult()) {"], [87, "        next = next.getNext();"], [88, "      }"], [89, "      if (cur.getNext() != next) {"], [90, "        cur = fuseIntoOneStatement(n, cur, next);"], [91, "        reportCodeChange();"], [92, "      }"], [93, "      if (cur.isExprResult() &&"], [94, "          next != null && isFusableControlStatement(next)) {"], [95, "        fuseExpressionIntoControlFlowStatement(cur, next);"], [96, "        reportCodeChange();"], [97, "        next = next.getNext();"], [98, "      }"], [99, "      cur = next;"], [100, "    }"], [101, ""], [102, "    return n;"], [103, "  }"], [104, ""], [124, "    return isFusableControlStatement(last);"], [125, "  }"], [126, ""], [127, "  private boolean isFusableControlStatement(Node n) {"], [130, "    switch(n.getType()) {"], [138, "        return n.hasChildren();"], [140, "        return NodeUtil.isForIn(n) &&"], [142, "            !mayHaveSideEffects(n.getFirstChild());"], [152, "   * @param last The last statement to fuse (exclusive)"], [157, "    if (first.getNext() == last) {"], [165, "    for (Node cur = first.getNext(); cur != last; cur = next) {"]], "deleted": [[53, "    // TODO(user): canFuseIntoOnestatement needs to be rewritten to"], [54, "    // allow more aggressive use of comma's."], [56, "    if ((favorsCommaOverSemiColon || !n.getParent().isFunction())"], [57, "        && canFuseIntoOneStatement(n)) {"], [59, "      Node end = n.getChildBefore(n.getLastChild());"], [88, "    switch(last.getType()) {"], [96, "        return last.hasChildren();"], [98, "        return NodeUtil.isForIn(last) &&"], [100, "            !mayHaveSideEffects(last.getFirstChild());"], [102, ""], [111, "   * @param last The last statement to fuse (inclusive)"], [116, "    if (first == last) {"], [122, "    Node onePastLast = last.getNext();"], [125, "    for (Node cur = first.getNext(); cur != onePastLast; cur = next) {"]]}, "num_lines_added": 54, "num_lines_removed": 14}