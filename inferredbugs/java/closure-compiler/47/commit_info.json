{"hash": "86d2f870de4f3cad137fc3c0e31e1eae10dd47cc", "message": "[NEW TYPE INFERENCE]\n\nHandle property names containing '.'\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=63845904", "file_num_lines": 2205, "diff_parsed": {"added": [[36, "import com.google.javascript.jscomp.newtypes.QualifiedName;"], [288, "        summaryType = summaryType.withProperty("], [289, "            new QualifiedName(\"prototype\"), JSType.TOP_OBJECT);"], [321, "        summaryType = summaryType.withProperty("], [322, "            new QualifiedName(\"prototype\"), JSType.TOP_OBJECT);"], [701, "    String typeName ="], [702, "        NodeUtil.getRootOfQualifiedName(fn.getParent().getFirstChild())"], [703, "        .getString();"], [795, "          QualifiedName pname = new QualifiedName(NodeUtil.getObjectLitKeyName(key));"], [1270, "          QualifiedName pname = new QualifiedName(lhs.getString());"], [1273, "                JSType.TOP_OBJECT.withPropertyRequired(pname.getLeftmostName()));"], [1555, "    QualifiedName propQname = new QualifiedName(pname);"], [1558, "    JSType objWithProp = JSType.TOP_OBJECT.withProperty(propQname, requiredType);"], [1584, "    JSType resultType = recvType.getProp(propQname);"], [1587, "      if (!recvType.mayHaveProp(propQname)) {"], [1592, "      } else if (!recvType.hasProp(propQname)) {"], [1596, "      } else if (recvType.hasInferredProp(propQname) &&"], [1618, "      TypeEnv env, Node lvalue, QualifiedName qname, JSType type) {"], [1624, "      String objName = qname.getLeftmostName();"], [1625, "      QualifiedName props = qname.getAllButLeftmost();"], [1732, "          QualifiedName pname ="], [1733, "              new QualifiedName(NodeUtil.getObjectLitKeyName(key));"], [2077, "    QualifiedName qname = new QualifiedName(pname);"], [2079, "        JSType.TOP_OBJECT.withProperty(qname, requiredType));"], [2081, "    JSType propAccessType = receiverType.mayHaveProp(qname) ?"], [2082, "        receiverType.getProp(qname) : requiredType;"], [2135, "  private static JSType envGetType(TypeEnv env, String pname) {"], [2136, "    Preconditions.checkArgument(!pname.contains(\".\"));"], [2137, "    return env.getType(pname);"], [2141, "    Preconditions.checkArgument(!varName.contains(\".\"));"], [2154, "    QualifiedName ptr;"], [2156, "    LValueResultFwd(TypeEnv env, JSType type, JSType declType, QualifiedName ptr) {"], [2176, "              currentScope.getDeclaredTypeOf(\"this\"),"], [2177, "              new QualifiedName(\"this\"));"], [2184, "        String varName = expr.getString();"], [2188, "            varType.hasNonScalar() ? new QualifiedName(varName) : null);"], [2192, "        QualifiedName pname = new QualifiedName(expr.getLastChild().getString());"], [2198, "          QualifiedName pname = new QualifiedName(expr.getLastChild().getString());"], [2215, "  private LValueResultFwd analyzePropLValFwd(Node obj, QualifiedName pname,"], [2217, "    Preconditions.checkArgument(pname.isIdentifier());"], [2222, "            pname.getLeftmostName(), lvalue.type.toString()));"], [2232, "            pname.getLeftmostName(), lvalue.type.toString()));"], [2239, "        lvalue.ptr == null ? null : QualifiedName.join(lvalue.ptr, pname));"], [2245, "    QualifiedName ptr;"], [2247, "    LValueResultBwd(TypeEnv env, JSType type, QualifiedName ptr) {"], [2274, "            pair.type.hasNonScalar() ? new QualifiedName(name) : null);"], [2278, "        QualifiedName pname ="], [2279, "            new QualifiedName(expr.getLastChild().getString());"], [2285, "          QualifiedName pname ="], [2286, "              new QualifiedName(expr.getLastChild().getString());"], [2302, "  private LValueResultBwd analyzePropLValBwd(Node obj, QualifiedName pname,"], [2304, "    Preconditions.checkArgument(pname.isIdentifier());"], [2308, "      lvalue.ptr = QualifiedName.join(lvalue.ptr, pname);"], [2310, "        String objName = lvalue.ptr.getLeftmostName();"], [2311, "        QualifiedName props = lvalue.ptr.getAllButLeftmost();"], [2469, "      Preconditions.checkArgument(!n.contains(\".\"));"], [2474, "      Preconditions.checkArgument(!n.contains(\".\"));"]], "deleted": [[36, "import com.google.javascript.jscomp.newtypes.TypeUtils;"], [288, "        summaryType = summaryType.withProperty(\"prototype\", JSType.TOP_OBJECT);"], [320, "        summaryType = summaryType.withProperty(\"prototype\", JSType.TOP_OBJECT);"], [699, "    String typeName = TypeUtils.getLeftmostName("], [700, "        fn.getParent().getFirstChild().getQualifiedName());"], [792, "          String pname = NodeUtil.getObjectLitKeyName(key);"], [1267, "          String pname = lhs.getString();"], [1270, "                JSType.TOP_OBJECT.withPropertyRequired(pname));"], [1554, "    JSType objWithProp = JSType.TOP_OBJECT.withProperty(pname, requiredType);"], [1580, "    JSType resultType = recvType.getProp(pname);"], [1583, "      if (!recvType.mayHaveProp(pname)) {"], [1588, "      } else if (!recvType.hasProp(pname)) {"], [1592, "      } else if (recvType.hasInferredProp(pname) &&"], [1614, "      TypeEnv env, Node lvalue, String qname, JSType type) {"], [1620, "      String objName = TypeUtils.getLeftmostName(qname);"], [1621, "      String props = TypeUtils.getAllButLeftmost(qname);"], [1728, "          String pname = NodeUtil.getObjectLitKeyName(key);"], [2073, "        JSType.TOP_OBJECT.withProperty(pname, requiredType));"], [2075, "    JSType propAccessType = receiverType.mayHaveProp(pname) ?"], [2076, "        receiverType.getProp(pname) : requiredType;"], [2129, "  private static JSType envGetType(TypeEnv env, String qName) {"], [2130, "    if (TypeUtils.isIdentifier(qName)) {"], [2131, "      return env.getType(qName);"], [2132, "    }"], [2133, "    String objName = TypeUtils.getLeftmostName(qName);"], [2134, "    String props = TypeUtils.getAllButLeftmost(qName);"], [2135, "    return env.getType(objName).getProp(props);"], [2139, "    Preconditions.checkArgument(TypeUtils.isIdentifier(varName));"], [2152, "    String ptr;"], [2154, "    LValueResultFwd(TypeEnv env, JSType type, JSType declType, String ptr) {"], [2174, "              currentScope.getDeclaredTypeOf(\"this\"), \"this\");"], [2181, "        String varName = expr.getQualifiedName();"], [2185, "            varType.hasNonScalar() ? varName : null);"], [2189, "        String pname = expr.getLastChild().getString();"], [2195, "          String pname = expr.getLastChild().getString();"], [2212, "  private LValueResultFwd analyzePropLValFwd(Node obj, String pname,"], [2218, "            pname, lvalue.type.toString()));"], [2228, "            pname, lvalue.type.toString()));"], [2235, "        lvalue.ptr == null ? null : lvalue.ptr + \".\" + pname);"], [2241, "    String ptr;"], [2243, "    LValueResultBwd(TypeEnv env, JSType type, String ptr) {"], [2270, "            pair.type.hasNonScalar() ? name : null);"], [2274, "        String pname = expr.getLastChild().getString();"], [2280, "          String pname = expr.getLastChild().getString();"], [2296, "  private LValueResultBwd analyzePropLValBwd(Node obj, String pname,"], [2301, "      lvalue.ptr += \".\" + pname;"], [2303, "        String objName = TypeUtils.getLeftmostName(lvalue.ptr);"], [2304, "        String props = TypeUtils.getAllButLeftmost(lvalue.ptr);"], [2462, "      Preconditions.checkArgument(TypeUtils.isIdentifier(n));"], [2467, "      Preconditions.checkArgument(TypeUtils.isIdentifier(n));"]]}, "num_lines_added": 57, "num_lines_removed": 50}