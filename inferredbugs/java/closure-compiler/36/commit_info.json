{"hash": "37672b931498dab108693e7c19c59824faf8c3c9", "message": "Adds a method to export module dependencies as JSON.\n\nEnables output of individual module compilation units for modules\nderived from CommonJS based input files if the flag --module=auto\nis given to the binary.\n\nIntroduces a virtual root-module for all common JS derived modules\nwhich every module depends on, to make the module graph happy.\nFixes issue 764\n\nR=nicksantos,johnlenz\nDELTA=239  (229 added, 1 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=5635\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2256 b0f006be-c8cd-11de-a2e8-8d36a3108c74", "file_num_lines": 1345, "diff_parsed": {"added": [[56, "import java.util.Set;"], [214, "      boolean processCommonJSModules,"], [228, "    } else if (processCommonJSModules) {"], [229, "      return new DependencyOptions()"], [230, "        .setDependencyPruning(false)"], [231, "        .setDependencySorting(true)"], [232, "        .setMoocherDropping(false)"], [233, "        .setEntryPoints(closureEntryPoints);"], [234, "    }"], [235, "    else if (manageClosureDependencies ||"], [276, "        config.processCommonJSModules,"], [754, ""], [755, "    boolean createCommonJsModules = false;"], [756, "    if (options.processCommonJSModules) {"], [757, "      if (moduleSpecs.size() == 1 && \"auto\".equals(moduleSpecs.get(0))) {"], [758, "        createCommonJsModules = true;"], [759, "        moduleSpecs.remove(0);"], [760, "      }"], [761, "    }"], [777, "    if (createCommonJsModules) {"], [778, "      // For CommonJS modules construct modules from actual inputs."], [779, "      modules = Lists.newArrayList(compiler.getDegenerateModuleGraph()"], [780, "          .getAllModules());"], [781, "    }"], [842, "      outputModuleGraphJson();"], [845, "      outputModuleGraphJson();"], [1458, "   * Creates a file containing the current module graph in JSON serialization."], [1459, "   */"], [1460, "  private void outputModuleGraphJson() throws IOException {"], [1461, "    if (config.outputModuleDependencies != null &&"], [1462, "        config.outputModuleDependencies != \"\") {"], [1463, "      Writer out = fileNameToOutputWriter2(config.outputModuleDependencies);"], [1464, "      printModuleGraphJsonTo(compiler.getDegenerateModuleGraph(), out);"], [1465, "      out.close();"], [1466, "    }"], [1467, "  }"], [1468, ""], [1469, "  /**"], [1470, "   * Prints the current module graph as JSON."], [1471, "   */"], [1472, "  @VisibleForTesting"], [1473, "  void printModuleGraphJsonTo(JSModuleGraph graph,"], [1474, "      Appendable out) throws IOException {"], [1475, "    out.append(compiler.getDegenerateModuleGraph().toJson().toString());"], [1476, "  }"], [1477, ""], [1478, "  /**"], [2003, "    private String outputModuleDependencies = null;"], [2004, ""], [2005, "    /**"], [2006, "     * Sets whether a JSON file representing the dependencies between modules"], [2007, "     * should be created."], [2008, "     */"], [2009, "    CommandLineConfig setOutputModuleDependencies(String"], [2010, "        outputModuleDependencies) {"], [2011, "      this.outputModuleDependencies = outputModuleDependencies;"], [2012, "      return this;"], [2013, "    }"], [2014, ""]], "deleted": [[55, "import java.util.Set;"], [227, "    } else if (manageClosureDependencies ||"]]}, "num_lines_added": 59, "num_lines_removed": 2}