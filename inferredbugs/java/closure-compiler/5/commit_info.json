{"hash": "d5b11f8918aaac365ce173dd9e6edadc687fb4b5", "message": "Fix removal of useful switch cases.\n\nR=acleung\nDELTA=100  (81 added, 7 deleted, 12 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=161003\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@364 b0f006be-c8cd-11de-a2e8-8d36a3108c74", "file_num_lines": 466, "diff_parsed": {"added": [[25, "import javax.annotation.Nullable;"], [26, ""], [79, "    Node defaultCase = tryOptimizeDefaultCase(n);"], [84, "      Node prev = null;"], [88, "        if (!mayHaveSideEffects(c.getFirstChild()) && isUselessCase(c, prev)) {"], [89, "          removeCase(n, c);"], [90, "        } else {"], [91, "          prev = c;"], [96, "    // Remove the switch if there are no remaining cases."], [111, "   * @return the default case node or null if there is no default case or"], [112, "   *     if the default case is removed."], [114, "  private Node tryOptimizeDefaultCase(Node n) {"], [115, "    Preconditions.checkState(n.getType() == Token.SWITCH);"], [116, ""], [117, "    Node lastNonRemovable = n.getFirstChild();  // The switch condition"], [118, ""], [119, "    // The first child is the switch conditions skip it when looking for cases."], [120, "    for (Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {"], [122, "        // Remove cases that fall-through to the default case"], [123, "        Node caseToRemove = lastNonRemovable.getNext();"], [124, "        for (Node next; caseToRemove != c; caseToRemove = next) {"], [125, "          next = caseToRemove.getNext();"], [126, "          removeCase(n, caseToRemove);"], [127, "        }"], [128, ""], [129, "        // Don't use the switch condition as the previous case."], [130, "        Node prevCase = (lastNonRemovable == n.getFirstChild())"], [131, "            ? null : lastNonRemovable;"], [132, ""], [133, "        // Remove the default case if we can"], [134, "        if (isUselessCase(c, prevCase)) {"], [135, "          removeCase(n, c);"], [136, "          return null;"], [137, "        }"], [139, "      } else {"], [140, "        Preconditions.checkState(c.getType() == Token.CASE);"], [141, "        if (c.getLastChild().hasChildren()"], [142, "            || mayHaveSideEffects(c.getFirstChild())) {"], [143, "          lastNonRemovable = c;"], [144, "        }"], [151, "   * Remove the case from the switch redeclaring any variables declared in it."], [152, "   * @param caseNode The case to remove."], [153, "   */"], [154, "  private void removeCase(Node switchNode, Node caseNode) {"], [155, "    NodeUtil.redeclareVarsInsideBranch(caseNode);"], [156, "    switchNode.removeChild(caseNode);"], [157, "    reportCodeChange();"], [158, "  }"], [159, ""], [160, "  /**"], [161, "   * The function assumes that when checking a CASE node there is no"], [162, "   * DEFAULT node in the SWITCH."], [165, "  private boolean isUselessCase(Node caseNode, @Nullable Node previousCase) {"], [166, "    Preconditions.checkState("], [167, "        previousCase == null || previousCase.getNext() == caseNode);"], [168, "    // A case isn't useless can't be useless if a previous case falls"], [169, "    // through to it unless it happens to be the last case in the switch."], [170, "    Node switchNode = caseNode.getParent();"], [171, "    if (switchNode.getLastChild() != caseNode"], [172, "        && previousCase != null) {"], [173, "      Node previousBlock = previousCase.getLastChild();"], [174, "      if (!previousBlock.hasChildren()"], [175, "          || !isExit(previousBlock.getLastChild())) {"], [176, "        return false;"], [177, "      }"], [178, "    }"], [179, ""], [218, "  /**"], [219, "   * @return Whether the node is an obvious control flow exit."], [220, "   */"], [221, "  private boolean isExit(Node n) {"], [222, "    switch (n.getType()) {"], [223, "      case Token.BREAK:"], [224, "      case Token.CONTINUE:"], [225, "      case Token.RETURN:"], [226, "      case Token.THROW:"], [227, "        return true;"], [228, "      default:"], [229, "        return false;"], [230, "    }"], [231, "  }"], [232, ""]], "deleted": [[77, "    Node defaultCase = findDefaultCase(n);"], [78, "    if (defaultCase != null && isUselessCase(defaultCase)) {"], [79, "      NodeUtil.redeclareVarsInsideBranch(defaultCase);"], [80, "      n.removeChild(defaultCase);"], [81, "      reportCodeChange();"], [82, "      defaultCase = null;"], [83, "    }"], [86, "    // TODO(johnlenz): Allow this if the same code is executed."], [92, "        if (!mayHaveSideEffects(c.getFirstChild()) && isUselessCase(c)) {"], [93, "          NodeUtil.redeclareVarsInsideBranch(c);"], [94, "          n.removeChild(c);"], [95, "          reportCodeChange();"], [114, "   * @return the default case node or null."], [116, "  private Node findDefaultCase(Node n) {"], [117, "    for (Node c : n.children()) {"], [128, "  private boolean isUselessCase(Node caseNode) {"]]}, "num_lines_added": 82, "num_lines_removed": 16}