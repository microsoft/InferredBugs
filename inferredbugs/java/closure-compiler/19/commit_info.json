{"hash": "48cccf202b6cd853409e169d98918462f91301a8", "message": "Allow multiple output_manifest flags, for backwards compatibility\n\nR=zhuyi\nDELTA=54  (21 added, 13 deleted, 20 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=2278\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1177 b0f006be-c8cd-11de-a2e8-8d36a3108c74", "file_num_lines": 1020, "diff_parsed": {"added": [[906, "  private String expandManifest(JSModule forModule, String manifestName) {"], [907, "    return expandCommandLinePath(manifestName, forModule);"], [1142, "  private boolean shouldGenerateManifestPerModule(String outputManifest) {"], [1144, "        && outputManifest != null"], [1145, "        && outputManifest.contains(\"%outname%\");"], [1153, "    List<String> outputManifests = config.outputManifests;"], [1154, "    if (outputManifests.isEmpty()) {"], [1158, "    for (String outputManifest : outputManifests) {"], [1159, "      if (outputManifest.isEmpty()) {"], [1160, "        continue;"], [1162, ""], [1163, "      JSModuleGraph graph = compiler.getModuleGraph();"], [1164, "      if (shouldGenerateManifestPerModule(outputManifest)) {"], [1165, "        // Generate per-module manifests."], [1166, "        Iterable<JSModule> modules = graph.getAllModules();"], [1167, "        for (JSModule module : modules) {"], [1168, "          Writer out = fileNameToOutputWriter("], [1169, "              expandManifest(module, outputManifest));"], [1170, "          printManifestTo(module.getInputs(), out);"], [1171, "          out.close();"], [1172, "        }"], [1174, "        // Generate a single file manifest."], [1175, "        Writer out = fileNameToOutputWriter("], [1176, "            expandManifest(null, outputManifest));"], [1177, "        if (graph == null) {"], [1178, "          printManifestTo(compiler.getInputsInOrder(), out);"], [1179, "        } else {"], [1180, "          printModuleGraphManifestTo(graph, out);"], [1181, "        }"], [1182, "        out.close();"], [1625, "    private List<String> outputManifests = ImmutableList.of();"], [1630, "    CommandLineConfig setOutputManifest(List<String> outputManifests) {"], [1631, "      this.outputManifests = outputManifests;"]], "deleted": [[906, "  @VisibleForTesting"], [907, "  String expandManifest(JSModule forModule) {"], [908, "    if (Strings.isEmpty(config.outputManifest)) {"], [909, "      return null;"], [910, "    }"], [911, "    return expandCommandLinePath(config.outputManifest, forModule);"], [1146, "  private boolean shouldGenerateManifestPerModule() {"], [1148, "        && config.outputManifest != null"], [1149, "        && config.outputManifest.contains(\"%outname%\");"], [1157, "    String outputManifest = config.outputManifest;"], [1158, "    if (Strings.isEmpty(outputManifest)) {"], [1162, "    JSModuleGraph graph = compiler.getModuleGraph();"], [1163, "    if (shouldGenerateManifestPerModule()) {"], [1164, "      // Generate per-module manifests."], [1165, "      Iterable<JSModule> modules = graph.getAllModules();"], [1166, "      for (JSModule module : modules) {"], [1167, "        Writer out = fileNameToOutputWriter(expandManifest(module));"], [1168, "        printManifestTo(module.getInputs(), out);"], [1169, "        out.close();"], [1171, "    } else {"], [1172, "      // Generate a single file manifest."], [1173, "      Writer out = fileNameToOutputWriter(expandManifest(null));"], [1174, "      if (graph == null) {"], [1175, "        printManifestTo(compiler.getInputsInOrder(), out);"], [1177, "        printModuleGraphManifestTo(graph, out);"], [1179, "      out.close();"], [1621, "    private String outputManifest = \"\";"], [1626, "    CommandLineConfig setOutputManifest(String outputManifest) {"], [1627, "      this.outputManifest = outputManifest;"]]}, "num_lines_added": 33, "num_lines_removed": 29}