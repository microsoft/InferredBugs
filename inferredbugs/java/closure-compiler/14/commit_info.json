{"hash": "af3e9dbffe3f76e20389ce7d159a73cf8d91ea41", "message": "Prescreen variable for live range check. Makes CoalesceVariableNames 10times faster.\n\nR=nicksantos\nDELTA=85  (83 added, 1 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=1998\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1127 b0f006be-c8cd-11de-a2e8-8d36a3108c74", "file_num_lines": 334, "diff_parsed": {"added": [[203, ""], [204, "    // For all variables V not in unsafeCrossRange,"], [205, "    // LiveRangeChecker(V, X) and LiveRangeChecker(Y, V) will never add a edge"], [206, "    // to the interferenceGraph. In other words, we don't need to use"], [207, "    // LiveRangeChecker on variable pair (A, B) if both A and B are not"], [208, "    // in the unsafeCrossRangeSet. See PrescreenCrossLiveRange for details."], [209, "    Set<Var> unsafeCrossRangeSet = Sets.newHashSet();"], [212, "    for (DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes()) {"], [213, "      if (cfg.isImplicitReturn(cfgNode)) {"], [214, "        continue;"], [215, "      }"], [216, ""], [217, "      for (Iterator<Var> i = scope.getVars(); i.hasNext();) {"], [218, "        final Var v = i.next();"], [219, ""], [220, "        if (!unsafeCrossRangeSet.contains(v)) {"], [221, "          FlowState<LiveVariableLattice> state = cfgNode.getAnnotation();"], [222, "          PrescreenCrossLiveRange check ="], [223, "              new PrescreenCrossLiveRange(v, state.getOut());"], [224, ""], [225, "          NodeTraversal.traverse(compiler, cfgNode.getValue(), check);"], [226, ""], [227, "          if (!check.isSafe()) {"], [228, "            unsafeCrossRangeSet.add(v);"], [229, "          }"], [230, "        }"], [231, "      }"], [232, "    }"], [233, ""], [298, "        if (!unsafeCrossRangeSet.contains(v1) &&"], [299, "            !unsafeCrossRangeSet.contains(v2)) {"], [300, "          continue NEXT_VAR_PAIR;"], [301, "        }"], [302, ""], [465, ""], [466, "  /**"], [467, "   * The crossed live range check is pretty traversal happy and it needs to"], [468, "   * live range crossing between all coalescing candidate x and y at each"], [469, "   * CFG node. Since this type of live range crossing within a CFG node happens"], [470, "   * rarely, we can pre-screen the variables' usages and eliminate the"], [471, "   * cross live range check if it can never cross another variable's live range"], [472, "   * within a CFG node."], [473, "   */"], [474, "  private static class PrescreenCrossLiveRange"], [475, "      extends AbstractCfgNodeTraversalCallback {"], [476, "    private int count;"], [477, "    private final LiveVariableLattice lattice;"], [478, "    private final Var var;"], [479, ""], [480, "    // Dead assignments has a strange effect on variable name coalescing."], [481, "    // Consider y = 3; x = 2; print(y)"], [482, "    // Since x is never live, it would appear x and y's live range never"], [483, "    // intersects. However, merging x and y means the = 2 assignment suddenly"], [484, "    // becomes live so we need to do the live range check when that happens."], [485, "    private boolean hasDeadAssignment = false;"], [486, ""], [487, "    public PrescreenCrossLiveRange(Var var, LiveVariableLattice lattice) {"], [488, "      this.lattice = lattice;"], [489, "      this.var = var;"], [490, "    }"], [491, ""], [492, "    @Override"], [493, "    public void visit(NodeTraversal t, Node n, Node parent) {"], [494, "      if (!NodeUtil.isName(n) || !var.name.equals(n.getString())) {"], [495, "        return;"], [496, "      }"], [497, "      count++;"], [498, "      if (// is a=b or var a=b"], [499, "          ((NodeUtil.isAssign(parent) && parent.getFirstChild() == n) ||"], [500, "          (NodeUtil.isVar(parent) && n.hasChildren()))"], [501, ""], [502, "          && !lattice.isLive(var)) {"], [503, "        hasDeadAssignment = true;"], [504, "      }"], [505, "    }"], [506, ""], [507, "    private boolean isSafe() {"], [508, "      return count < 2 && !hasDeadAssignment;"], [509, "    }"], [510, "  }"]], "deleted": [[274, ""]]}, "num_lines_added": 80, "num_lines_removed": 1}