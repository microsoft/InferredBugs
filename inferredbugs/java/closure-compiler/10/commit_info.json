{"hash": "6a30daa5450a77c66a704bc11a78d12b5e7eee31", "message": "Make RemoveUnusedVars know about goog.inherits (Attempt #2)\n\nR=nicksantos\nDELTA=153  (150 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=476\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@767 b0f006be-c8cd-11de-a2e8-8d36a3108c74", "file_num_lines": 543, "diff_parsed": {"added": [[25, "import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;"], [73, "  private final CodingConvention codingConvention;"], [74, ""], [106, "   * Subclass name -> inherits call EXPR node."], [107, "   */"], [108, "  private final Multimap<Var, Node> inheritsCalls ="], [109, "      ArrayListMultimap.create();"], [110, ""], [111, "  /**"], [128, "    this.codingConvention = compiler.getCodingConvention();"], [139, "    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());"], [141, ""], [227, "      case Token.CALL:"], [228, "        // Look for calls to inheritance-defining calls (such as goog.inherits)."], [229, "        SubclassRelationship subclassRelationship ="], [230, "            codingConvention.getClassesDefinedByCall(n);"], [231, "        if (subclassRelationship != null) {"], [232, "          Var subclassVar = scope.getVar(subclassRelationship.subclassName);"], [233, "          // Don't try to track the inheritance calls for non-globals. It would"], [234, "          // be more correct to only not track when the subclass does not"], [235, "          // reference a constructor, but checking that it is a global is"], [236, "          // easier and mostly the same."], [237, "          if (subclassVar != null && subclassVar.isGlobal()"], [238, "              && !referenced.contains(subclassVar)) {"], [239, "            // Save a reference to the EXPR node."], [240, "            inheritsCalls.put(subclassVar, parent);"], [241, "            continuations.put(subclassVar, new Continuation(n, scope));"], [242, "            return;"], [243, "          }"], [244, "        }"], [245, "        break;"], [246, ""], [295, "    if (codingConvention.isExported(var.getName())) {"], [746, "   * assignments to those variables as well."], [749, "    CodingConvention convention = codingConvention;"], [754, "      // Remove calls to inheritance-defining functions where the unreferenced"], [755, "      // class is the subclass."], [756, "      for (Node exprCallNode : inheritsCalls.get(var)) {"], [757, "        NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode);"], [758, "        compiler.reportCodeChange();"], [759, "      }"], [760, ""]], "deleted": [[263, "    if (compiler.getCodingConvention().isExported(var.getName())) {"], [714, "   * assigments to those variables as well."], [717, "    CodingConvention convention = compiler.getCodingConvention();"]]}, "num_lines_added": 42, "num_lines_removed": 3}