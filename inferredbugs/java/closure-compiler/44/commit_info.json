{"hash": "bfc4015cf38b8682924d65cf8e119865510543c7", "message": "[NEW TYPE INFERENCE]\n\nBetter handling of OR, THROW, and INC/DEC.\nEnough changes to analyze richards v8 benchmark\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=57382481", "file_num_lines": 1723, "diff_parsed": {"added": [[157, "    Preconditions.checkState(cfg.getOutEdges(n).size() > 0);"], [358, "      if (n.isThrow()) { // Throw statements have no out edges."], [359, "        // TODO(blickly): Support analyzing the body of the THROW"], [360, "        continue;"], [361, "      }"], [399, "        case Token.BLOCK:"], [400, "        case Token.EMPTY:"], [403, "        case Token.FOR: // TODO(blickly): Analyze these statements"], [404, "        case Token.WHILE:"], [405, "        case Token.DO:"], [406, "        case Token.IF:"], [407, "          inEnv = outEnv;"], [408, "          break;"], [409, "        default:"], [410, "          if (NodeUtil.isStatement(n)) {"], [411, "            throw new RuntimeException(\"Unhandled statement type: \""], [412, "                + Token.name(n.getType()));"], [413, "          } else {"], [414, "            inEnv = analyzeExprBwd(n, outEnv).env;"], [415, "            break;"], [416, "          }"], [499, "        case Token.CATCH: // TODO(blickly): Analyze these statements"], [978, "        Preconditions.checkState(!NodeUtil.isAssignmentOp(expr.getParent()));"], [1156, "    Preconditions.checkState(lvalue.isGetProp() || lvalue.isGetElem());"], [1356, "        lhsPair.type = JSType.plus(lhsPair.type, rhsPair.type);"], [1357, "        return lhsPair;"], [1358, "      }"], [1359, "      case Token.OR:"], [1360, "      case Token.AND: {"], [1361, "        Node lhs = expr.getFirstChild();"], [1362, "        Node rhs = expr.getLastChild();"], [1363, "        EnvTypePair rhsPair = analyzeExprBwd(rhs, outEnv);"], [1364, "        EnvTypePair lhsPair = analyzeExprBwd(lhs, rhsPair.env);"], [1365, "        lhsPair.type = JSType.join(rhsPair.type, lhsPair.type);"], [1366, "        return lhsPair;"], [1425, "        Preconditions.checkState(!NodeUtil.isAssignmentOp(expr.getParent()));"], [1632, "        return analyzePropLValFwd(obj, pname, inEnv, type, isRecursiveCall);"], [1633, "      }"], [1634, "      case Token.GETELEM: {"], [1635, "        if (expr.getLastChild().isString()) {"], [1636, "          Node obj = expr.getFirstChild();"], [1637, "          String pname = expr.getLastChild().getString();"], [1638, "          return analyzePropLValFwd(obj, pname, inEnv, type, isRecursiveCall);"], [1640, "        return new LValueResult(inEnv, type, null, null);"], [1651, "  private LValueResult analyzePropLValFwd(Node obj, String pname,"], [1652, "      TypeEnv inEnv, JSType type, boolean isRecursiveCall) {"], [1653, "    LValueResult lvalue = analyzeLValueFwd(obj, inEnv,"], [1654, "        JSType.TOP_OBJECT.withProperty(pname, type), true);"], [1655, "    if (!lvalue.type.isSubtypeOf(JSType.TOP_OBJECT)) {"], [1656, "      warnings.add(JSError.make(obj, PROPERTY_ACCESS_ON_NONOBJECT,"], [1657, "            pname, lvalue.type.toString()));"], [1658, "      return new LValueResult(lvalue.env, type, null, null);"], [1659, "    }"], [1660, "    if (isRecursiveCall && !lvalue.type.isUnknown() &&"], [1661, "        lvalue.type.isSubtypeOf(JSType.TOP_OBJECT) &&"], [1662, "        !lvalue.type.mayHaveProp(pname)) {"], [1663, "      warnings.add(JSError.make(obj, TypeCheck.INEXISTENT_PROPERTY,"], [1664, "            pname, lvalue.type.toString()));"], [1665, "      return new LValueResult(lvalue.env, type, null, null);"], [1666, "    }"], [1667, "    return new LValueResult(lvalue.env, lvalue.type.getProp(pname),"], [1668, "        lvalue.type.getDeclaredProp(pname),"], [1669, "        lvalue.ptr == null ? null : lvalue.ptr + \".\" + pname);"], [1670, "  }"], [1671, ""], [1695, "        return analyzePropLValBwd(obj, pname, outEnv, type, doSlicing);"], [1696, "      }"], [1697, "      case Token.GETELEM: {"], [1698, "        if (expr.getLastChild().isString()) {"], [1699, "          Node obj = expr.getFirstChild();"], [1700, "          String pname = expr.getLastChild().getString();"], [1701, "          return analyzePropLValBwd(obj, pname, outEnv, type, doSlicing);"], [1703, "        return new LValueResult(outEnv, type, null, null);"], [1714, "  private LValueResult analyzePropLValBwd(Node obj, String pname,"], [1715, "      TypeEnv outEnv, JSType type, boolean doSlicing) {"], [1716, "    LValueResult lvalue = analyzeLValueBwd(obj, outEnv,"], [1717, "        JSType.TOP_OBJECT.withProperty(pname, type), false);"], [1718, "    if (lvalue.ptr != null) {"], [1719, "      lvalue.ptr += \".\" + pname;"], [1720, "      if (doSlicing) {"], [1721, "        String objName = TypeUtils.getQnameRoot(lvalue.ptr);"], [1722, "        String props = TypeUtils.getPropPath(lvalue.ptr);"], [1723, "        JSType objType = envGetType(lvalue.env, objName);"], [1724, "        JSType propDeclType = lvalue.type.getDeclaredProp(pname);"], [1725, "        JSType slicedObjType = propDeclType == null ?"], [1726, "            objType.withoutProperty(props) :"], [1727, "            objType.withProperty(props, propDeclType);"], [1728, "        lvalue.env = envPutType(lvalue.env, objName, slicedObjType);"], [1729, "      }"], [1730, "    }"], [1731, "    if (lvalue.type.mayHaveProp(pname)) {"], [1732, "      lvalue.type = lvalue.type.getProp(pname);"], [1733, "    }"], [1734, "    return lvalue;"], [1735, "  }"], [1736, ""]], "deleted": [[157, "    if (cfg.getOutEdges(n).size() == 0) { // true for Token.THROW"], [158, "      return new TypeEnv();"], [159, "    }"], [397, "        default:"], [482, "        case Token.CATCH:"], [961, "        Preconditions.checkState(!NodeUtil.isLValue(expr));"], [1139, "    Preconditions.checkState(lvalue.isGetProp());"], [1339, "        return new EnvTypePair("], [1340, "            lhsPair.env, JSType.plus(lhsPair.type, rhsPair.type));"], [1399, "        Preconditions.checkState(!NodeUtil.isLValue(expr));"], [1606, "        LValueResult lvalue = analyzeLValueFwd(obj, inEnv,"], [1607, "            JSType.TOP_OBJECT.withProperty(pname, type), true);"], [1608, "        if (!lvalue.type.isSubtypeOf(JSType.TOP_OBJECT)) {"], [1609, "          warnings.add(JSError.make(obj, PROPERTY_ACCESS_ON_NONOBJECT,"], [1610, "                pname, lvalue.type.toString()));"], [1611, "          return new LValueResult(lvalue.env, type, null, null);"], [1612, "        }"], [1613, "        if (isRecursiveCall && !lvalue.type.isUnknown() &&"], [1614, "            lvalue.type.isSubtypeOf(JSType.TOP_OBJECT) &&"], [1615, "            !lvalue.type.mayHaveProp(pname)) {"], [1616, "          warnings.add(JSError.make(obj, TypeCheck.INEXISTENT_PROPERTY,"], [1617, "                pname, lvalue.type.toString()));"], [1618, "          return new LValueResult(lvalue.env, type, null, null);"], [1620, "        return new LValueResult(lvalue.env, lvalue.type.getProp(pname),"], [1621, "            lvalue.type.getDeclaredProp(pname),"], [1622, "            lvalue.ptr == null ? null : lvalue.ptr + \".\" + pname);"], [1656, "        LValueResult lvalue = analyzeLValueBwd(obj, outEnv,"], [1657, "                JSType.TOP_OBJECT.withProperty(pname, type), false);"], [1658, "        if (lvalue.ptr != null) {"], [1659, "          lvalue.ptr += \".\" + pname;"], [1660, "          if (doSlicing) {"], [1661, "            String objName = TypeUtils.getQnameRoot(lvalue.ptr);"], [1662, "            String props = TypeUtils.getPropPath(lvalue.ptr);"], [1663, "            JSType objType = envGetType(lvalue.env, objName);"], [1664, "            JSType propDeclType = lvalue.type.getDeclaredProp(pname);"], [1665, "            JSType slicedObjType = propDeclType == null ?"], [1666, "                objType.withoutProperty(props) :"], [1667, "                objType.withProperty(props, propDeclType);"], [1668, "            lvalue.env = envPutType(lvalue.env, objName, slicedObjType);"], [1669, "          }"], [1670, "        }"], [1671, "        if (lvalue.type.mayHaveProp(pname)) {"], [1672, "          lvalue.type = lvalue.type.getProp(pname);"], [1674, "        return lvalue;"]]}, "num_lines_added": 96, "num_lines_removed": 44}