{"hash": "01fbd3a7d7c6fa2d8ba288cdc2820a169d58ed2d", "message": "Remove support for legacy casts.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=43450961", "file_num_lines": 1403, "diff_parsed": {"added": [[484, "        JSType castType = getJSType(n);"], [485, ""], [486, "        // TODO(johnlenz): determine if we can limit object literals in some"], [487, "        // way."], [488, "        if (!expr.isObjectLit()) {"], [489, "          validator.expectCanCast(t, n, castType, exprType);"], [490, "        }"], [491, "        ensureTyped(t, n, castType);"], [492, ""], [493, "        if (castType.isSubtype(exprType) || expr.isObjectLit()) {"], [1995, "    // TODO(johnlenz): this seems like a strange place to check \"@implicitCast\""]], "deleted": [[483, "        ensureTyped(t, n, getJSType(expr));"], [484, ""], [485, "        // If the cast, tightens the type apply it, so it is available post"], [486, "        // normalization."], [487, "        JSType castType = getJSType(n);"], [489, "        if (castType.isSubtype(exprType)) {"], [1993, "      if (info.hasType()) {"], [1994, "        // TODO(johnlenz): Change this so that we only look for casts on CAST"], [1995, "        // nodes one the misplaced type annotation warning is on by default and"], [1996, "        // people have been given a chance to fix them.  As is, this is here"], [1997, "        // simply for legacy casts."], [1998, "        JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);"], [1999, "        validator.expectCanCast(t, n, infoType, type);"], [2000, "        type = infoType;"], [2001, "      }"], [2002, ""]]}, "num_lines_added": 11, "num_lines_removed": 16}