{"hash": "8f03c0b2baaccac815fa37cf6aa0020d08d76d28", "message": "thread unsafe ??? why", "file_num_lines": 223, "diff_parsed": {"added": [[157, "\t\tsynchronized (messageInfo) {"], [158, "\t\t\tif (messageIsRequest) {"], [159, "\t\t\t\tString firstRequest = new String(messageInfo.getRequest());"], [160, "\t\t\t\tint code = messageInfo.hashCode();"], [161, "\t\t\t\t//debug"], [162, "\t\t\t\tint bodyOffset = helpers.analyzeRequest(messageInfo).getBodyOffset();"], [163, "\t\t\t\tint requestLength = messageInfo.getRequest().length;"], [164, ""], [165, "\t\t\t\tboolean isRequestChanged = false;"], [166, "\t\t\t\tMessageEditor editer = new MessageEditor(messageIsRequest, messageInfo, helpers);"], [167, ""], [168, "\t\t\t\tURL url = editer.getURL();"], [169, "\t\t\t\tString host = editer.getHost();"], [170, "\t\t\t\tbyte[] body = editer.getBody();"], [171, "\t\t\t\tLinkedHashMap<String, String> headers = editer.getHeaderMap();//this will lost the first line"], [172, ""], [173, ""], [174, "\t\t\t\t//remove header"], [175, "\t\t\t\tList<ConfigEntry> configEntries = tableModel.getConfigByType(ConfigEntry.Action_Remove_From_Headers);"], [176, "\t\t\t\tfor (ConfigEntry entry : configEntries) {"], [177, "\t\t\t\t\tString key = entry.getKey();"], [178, "\t\t\t\t\tif (headers.remove(key) != null) {"], [179, "\t\t\t\t\t\tisRequestChanged = true;"], [180, "\t\t\t\t\t}"], [181, "\t\t\t\t\t;"], [182, "\t\t\t\t}"], [183, ""], [184, "\t\t\t\tif (config.getTmpMap().containsKey(host)) {//\u81ea\u52a8\u66f4\u65b0cookie"], [185, "\t\t\t\t\tString cookieValue = config.getTmpMap().get(host);"], [186, "\t\t\t\t\tString[] values = cookieValue.split(\"::::\");"], [187, "\t\t\t\t\tString trueCookie = values[1];"], [188, "\t\t\t\t\theaders.put(\"Cookie\", trueCookie);"], [189, "\t\t\t\t\tisRequestChanged = true;"], [190, "\t\t\t\t}"], [191, ""], [192, "\t\t\t\t//add/update/append header"], [193, "\t\t\t\tif (toolFlag == (toolFlag & checkEnabledFor())) {"], [194, "\t\t\t\t\tif ((config.isOnlyForScope() && callbacks.isInScope(url))"], [195, "\t\t\t\t\t\t\t|| !config.isOnlyForScope()) {"], [196, "\t\t\t\t\t\ttry {"], [197, "\t\t\t\t\t\t\tList<ConfigEntry> updateOrAddEntries = tableModel.getConfigEntries();"], [198, "\t\t\t\t\t\t\tfor (ConfigEntry entry : updateOrAddEntries) {"], [199, "\t\t\t\t\t\t\t\tString key = entry.getKey();"], [200, "\t\t\t\t\t\t\t\tString value = entry.getValue();"], [201, ""], [202, "\t\t\t\t\t\t\t\tif (value.contains(\"%host\")) {"], [203, "\t\t\t\t\t\t\t\t\tvalue = value.replaceAll(\"%host\", host);"], [204, "\t\t\t\t\t\t\t\t\t//stdout.println(\"3333\"+value);"], [205, "\t\t\t\t\t\t\t\t}"], [206, ""], [207, "\t\t\t\t\t\t\t\tif (value.toLowerCase().contains(\"%dnslogserver\")) {"], [208, "\t\t\t\t\t\t\t\t\tString dnslog = tableModel.getConfigByKey(\"DNSlogServer\");"], [209, "\t\t\t\t\t\t\t\t\tPattern p = Pattern.compile(\"(?u)%dnslogserver\");"], [210, "\t\t\t\t\t\t\t\t\tMatcher m = p.matcher(value);"], [211, ""], [212, "\t\t\t\t\t\t\t\t\twhile (m.find()) {"], [213, "\t\t\t\t\t\t\t\t\t\tString found = m.group(0);"], [214, "\t\t\t\t\t\t\t\t\t\tvalue = value.replaceAll(found, dnslog);"], [215, "\t\t\t\t\t\t\t\t\t}"], [216, "\t\t\t\t\t\t\t\t}"], [217, ""], [218, "\t\t\t\t\t\t\t\tif (entry.getType().equals(ConfigEntry.Action_Add_Or_Replace_Header) && entry.isEnable()) {"], [219, "\t\t\t\t\t\t\t\t\theaders.put(key, value);"], [220, "\t\t\t\t\t\t\t\t\tisRequestChanged = true;"], [221, ""], [222, "\t\t\t\t\t\t\t\t} else if (entry.getType().equals(ConfigEntry.Action_Append_To_header_value) && entry.isEnable()) {"], [223, "\t\t\t\t\t\t\t\t\tvalue = headers.get(key) + value;"], [224, "\t\t\t\t\t\t\t\t\theaders.put(key, value);"], [225, "\t\t\t\t\t\t\t\t\tisRequestChanged = true;"], [226, "\t\t\t\t\t\t\t\t\t//stdout.println(\"2222\"+value);"], [227, "\t\t\t\t\t\t\t\t} else if (entry.getKey().equalsIgnoreCase(\"Chunked-AutoEnable\") && entry.isEnable()) {"], [228, "\t\t\t\t\t\t\t\t\theaders.put(\"Transfer-Encoding\", \"chunked\");"], [229, "\t\t\t\t\t\t\t\t\tisRequestChanged = true;"], [230, ""], [231, "\t\t\t\t\t\t\t\t\ttry {"], [232, "\t\t\t\t\t\t\t\t\t\tboolean useComment = false;"], [233, "\t\t\t\t\t\t\t\t\t\tif (this.tableModel.getConfigByKey(\"Chunked-UseComment\") != null) {"], [234, "\t\t\t\t\t\t\t\t\t\t\tuseComment = true;"], [235, "\t\t\t\t\t\t\t\t\t\t}"], [236, "\t\t\t\t\t\t\t\t\t\tString lenStr = this.tableModel.getConfigByKey(\"Chunked-Length\");"], [237, "\t\t\t\t\t\t\t\t\t\tint len = 10;"], [238, "\t\t\t\t\t\t\t\t\t\tif (lenStr != null) {"], [239, "\t\t\t\t\t\t\t\t\t\t\tlen = Integer.parseInt(lenStr);"], [240, "\t\t\t\t\t\t\t\t\t\t}"], [241, "\t\t\t\t\t\t\t\t\t\tbody = Methods.encoding(body, len, useComment);"], [242, "\t\t\t\t\t\t\t\t\t} catch (UnsupportedEncodingException e) {"], [243, "\t\t\t\t\t\t\t\t\t\te.printStackTrace(stderr);"], [244, "\t\t\t\t\t\t\t\t\t}"], [245, "\t\t\t\t\t\t\t\t}"], [247, ""], [248, ""], [249, "\t\t\t\t\t\t\t///proxy function should be here"], [250, ""], [251, "\t\t\t\t\t\t\tString proxy = this.tableModel.getConfigByKey(\"Proxy-ServerList\");"], [252, "\t\t\t\t\t\t\tString mode = this.tableModel.getConfigByKey(\"Proxy-UseRandomMode\");"], [253, ""], [254, "\t\t\t\t\t\t\tif (proxy != null) {//if enable is false, will return null."], [255, "\t\t\t\t\t\t\t\tList<String> proxyList = Arrays.asList(proxy.split(\";\"));//\u5982\u679c\u5b57\u7b26\u4e32\u662f\u4ee5;\u7ed3\u5c3e\uff0c\u4f1a\u88ab\u81ea\u52a8\u4e22\u5f03"], [256, ""], [257, "\t\t\t\t\t\t\t\tif (mode != null) {//random mode"], [258, "\t\t\t\t\t\t\t\t\tproxyServerIndex = (int) (Math.random() * proxyList.size());"], [259, "\t\t\t\t\t\t\t\t\t//proxyServerIndex = new Random().nextInt(proxyList.size());"], [260, "\t\t\t\t\t\t\t\t} else {"], [261, "\t\t\t\t\t\t\t\t\tproxyServerIndex = (proxyServerIndex + 1) % proxyList.size();"], [262, "\t\t\t\t\t\t\t\t}"], [263, "\t\t\t\t\t\t\t\tString proxyhost = proxyList.get(proxyServerIndex).split(\":\")[0].trim();"], [264, "\t\t\t\t\t\t\t\tint port = Integer.parseInt(proxyList.get(proxyServerIndex).split(\":\")[1].trim());"], [265, "\t\t\t\t\t\t\t\tmessageInfo.setHttpService("], [266, "\t\t\t\t\t\t\t\t\t\thelpers.buildHttpService(proxyhost, port, messageInfo.getHttpService().getProtocol()));"], [267, "\t\t\t\t\t\t\t\tisRequestChanged = true;"], [268, "\t\t\t\t\t\t\t\t//success or failed,need to check?"], [269, "\t\t\t\t\t\t\t}"], [270, "\t\t\t\t\t\t} catch (Exception e) {"], [271, "\t\t\t\t\t\t\te.printStackTrace(stderr);"], [275, "\t\t\t\t//set final request"], [276, "\t\t\t\tediter.setHeaderMap(headers);"], [277, "\t\t\t\tmessageInfo = editer.getMessageInfo();"], [279, "\t\t\t\tString firstRequest1 = new String(messageInfo.getRequest());"], [280, "\t\t\t\tint code1 = messageInfo.hashCode();"], [282, "\t\t\t\tint bodyOffset1 = helpers.analyzeRequest(messageInfo).getBodyOffset();"], [283, "\t\t\t\tint requestLength1 = messageInfo.getRequest().length;"], [284, ""], [285, "//\t\t\t\tstderr.println (firstRequest);"], [286, "//\t\t\t\tstderr.println (\"first: bodyOffset \"+bodyOffset+\" requestLength \"+requestLength+\" hashcode \"+code);"], [287, "//\t\t\t\tstderr.println (\"second: bodyOffset \"+bodyOffset1+\" requestLength \"+requestLength1+\" hashcode \"+code1);"], [288, "//\t\t\t\tstderr.println (firstRequest1);"], [289, "//\t\t\t\tstderr.println (\"////////////////////////////////\");"], [290, "\t\t\t\tif (isRequestChanged) {"], [291, "\t\t\t\t\t//debug"], [292, "\t\t\t\t\tList<String> finalheaders = new MessageEditor(messageIsRequest, messageInfo, helpers).getHeaderList();"], [293, "\t\t\t\t\tstdout.println(System.lineSeparator() + \"//////////edited request by knife//////////////\" + System.lineSeparator());"], [294, "\t\t\t\t\tfor (String entry : finalheaders) {"], [295, "\t\t\t\t\t\tstdout.println(entry);"], [296, "\t\t\t\t\t}"], [297, "\t\t\t\t}"], [299, "\t\t}//sync"]], "deleted": [[41, "\tpublic MessageEditor editer;"], [158, "\t\tif (messageIsRequest){"], [159, "\t\t    boolean isRequestChanged = false;"], [160, "            MessageEditor editer = new MessageEditor(messageIsRequest,messageInfo,helpers);"], [161, "            String md5 = editer.getMd5();//to judge message is changed or not"], [162, "\t\t\tURL url =editer.getURL();"], [163, "\t\t\tString host = editer.getHost();"], [164, "\t\t\tbyte[] body = editer.getBody();"], [165, "            LinkedHashMap<String, String> headers = editer.getHeaderMap();//this will lost the first line"], [166, ""], [167, ""], [168, "\t\t\t//remove header"], [169, "\t\t\tList<ConfigEntry> configEntries = tableModel.getConfigByType(ConfigEntry.Action_Remove_From_Headers);"], [170, "            for (ConfigEntry entry : configEntries) {"], [171, "                String key = entry.getKey();"], [172, "                if (headers.remove(key) != null){"], [173, "                    isRequestChanged = true;"], [174, "                };"], [175, "            }"], [176, ""], [177, "            if (config.getTmpMap().containsKey(host)) {//\u81ea\u52a8\u66f4\u65b0cookie"], [178, "                String cookieValue = config.getTmpMap().get(host);"], [179, "                String[] values = cookieValue.split(\"::::\");"], [180, "                String trueCookie = values[1];"], [181, "                headers.put(\"Cookie\", trueCookie);"], [182, "                isRequestChanged = true;"], [183, "            }"], [184, ""], [185, "\t\t\t//add/update/append header"], [186, "\t\t\tif (toolFlag == (toolFlag&checkEnabledFor())){"], [187, "\t\t\t\tif((config.isOnlyForScope()&& callbacks.isInScope(url))"], [188, "\t\t\t\t\t\t|| !config.isOnlyForScope()) {"], [189, "\t\t\t\t\ttry{"], [190, "\t\t\t\t\t\tList<ConfigEntry> updateOrAddEntries = tableModel.getConfigEntries();"], [191, "                        for (ConfigEntry entry : updateOrAddEntries) {"], [192, "                            String key = entry.getKey();"], [193, "                            String value = entry.getValue();"], [194, ""], [195, "                            if (value.contains(\"%host\")) {"], [196, "                                value = value.replaceAll(\"%host\", host);"], [197, "                                //stdout.println(\"3333\"+value);"], [198, "                            }"], [199, ""], [200, "                            if (value.toLowerCase().contains(\"%dnslogserver\")) {"], [201, "                                String dnslog = tableModel.getConfigByKey(\"DNSlogServer\");"], [202, "                                Pattern p = Pattern.compile(\"(?u)%dnslogserver\");"], [203, "                                Matcher m = p.matcher(value);"], [204, ""], [205, "                                while (m.find()) {"], [206, "                                    String found = m.group(0);"], [207, "                                    value = value.replaceAll(found, dnslog);"], [208, "                                }"], [209, "                            }"], [210, ""], [211, "                            if (entry.getType().equals(ConfigEntry.Action_Add_Or_Replace_Header) && entry.isEnable()) {"], [212, "                                headers.put(key, value);"], [213, "                                isRequestChanged = true;"], [214, ""], [215, "                            } else if (entry.getType().equals(ConfigEntry.Action_Append_To_header_value) && entry.isEnable()) {"], [216, "                                value = headers.get(key) + value;"], [217, "                                headers.put(key, value);"], [218, "                                isRequestChanged = true;"], [219, "                                //stdout.println(\"2222\"+value);"], [220, "                            } else if (entry.getKey().equalsIgnoreCase(\"Chunked-AutoEnable\") && entry.isEnable()) {"], [221, "                                headers.put(\"Transfer-Encoding\", \"chunked\");"], [222, "                                isRequestChanged = true;"], [223, ""], [224, "                                try {"], [225, "                                    boolean useComment = false;"], [226, "                                    if (this.tableModel.getConfigByKey(\"Chunked-UseComment\") != null) {"], [227, "                                        useComment = true;"], [228, "                                    }"], [229, "                                    String lenStr = this.tableModel.getConfigByKey(\"Chunked-Length\");"], [230, "                                    int len = 10;"], [231, "                                    if (lenStr != null) {"], [232, "                                        len = Integer.parseInt(lenStr);"], [233, "                                    }"], [234, "                                    body = Methods.encoding(body, len, useComment);"], [235, "                                } catch (UnsupportedEncodingException e) {"], [236, "                                    e.printStackTrace(stderr);"], [237, "                                }"], [238, "                            }"], [239, "                        }"], [240, ""], [241, ""], [242, "\t\t\t\t\t\t///proxy function should be here"], [243, ""], [244, "\t\t\t\t\t\tString proxy = this.tableModel.getConfigByKey(\"Proxy-ServerList\");"], [245, "\t\t\t\t\t\tString mode = this.tableModel.getConfigByKey(\"Proxy-UseRandomMode\");"], [246, ""], [247, "\t\t\t\t\t\tif (proxy != null) {//if enable is false, will return null."], [248, "\t\t\t\t\t\t\tList<String> proxyList = Arrays.asList(proxy.split(\";\"));//\u5982\u679c\u5b57\u7b26\u4e32\u662f\u4ee5;\u7ed3\u5c3e\uff0c\u4f1a\u88ab\u81ea\u52a8\u4e22\u5f03"], [249, ""], [250, "\t\t\t\t\t\t\tif (mode != null) {//random mode"], [251, "\t\t\t\t\t\t\t\tproxyServerIndex = (int)(Math.random() * proxyList.size());"], [252, "\t\t\t\t\t\t\t\t//proxyServerIndex = new Random().nextInt(proxyList.size());"], [253, "\t\t\t\t\t\t\t}else {"], [254, "\t\t\t\t\t\t\t\tproxyServerIndex = (proxyServerIndex + 1) % proxyList.size();"], [256, "\t\t\t\t\t\t\tString proxyhost = proxyList.get(proxyServerIndex).split(\":\")[0].trim();"], [257, "\t\t\t\t\t\t\tint port  = Integer.parseInt(proxyList.get(proxyServerIndex).split(\":\")[1].trim());"], [258, "\t\t\t\t\t\t\tmessageInfo.setHttpService("], [259, "\t\t\t\t\t\t\t\t\thelpers.buildHttpService(proxyhost,port,messageInfo.getHttpService().getProtocol()));"], [260, "                            isRequestChanged = true;"], [261, "\t\t\t\t\t\t\t//success or failed,need to check?"], [264, "\t\t\t\t\tcatch(Exception e){"], [265, "\t\t\t\t\t\te.printStackTrace(stderr);"], [266, "\t\t\t\t\t}"], [268, "\t\t\t}"], [269, "\t\t\t//set final request"], [270, "            editer.setHeaderMap(headers);"], [271, "            messageInfo = editer.getMessageInfo();"], [273, "\t\t\tif (isRequestChanged) {"], [275, "                List<String> finalheaders = new MessageEditor(messageIsRequest,messageInfo,helpers).getHeaderList();"], [276, "\t\t\t\tstdout.println(System.lineSeparator()+\"//////////edited request by knife//////////////\"+System.lineSeparator());"], [277, "                for (String entry : finalheaders) {"], [278, "                    stdout.println(entry);"], [279, "                }"], [281, "\t\t}"]]}, "num_lines_added": 136, "num_lines_removed": 118}