{"hash": "7e3cdeea15d5f41fac195330c6c75f313dc47602", "message": "\u8fd8\u662f\u7528getter\u65b9\u6cd5\u89e3\u51b3\u4e86\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898\u3002", "file_num_lines": 317, "diff_parsed": {"added": [[51, "\t\tcallbacks.setExtensionName(this.ExtensionName);"], [52, "\t\tcallbacks.registerContextMenuFactory(this);// for menus"], [53, "\t\tcallbacks.registerMessageEditorTabFactory(this);// for U2C"], [54, "\t\tcallbacks.addSuiteTab(BurpExtender.this);"], [55, "\t\tcallbacks.registerHttpListener(this);"], [162, "\t\tif (messageIsRequest) {"], [163, "\t\t\tGetter getter = new Getter(helpers);"], [164, ""], [165, "\t\t\tURL url = getter.getURL(messageInfo);"], [166, "\t\t\tString host = getter.getHost(messageInfo);"], [167, "\t\t\tString path = url.getPath();"], [168, "\t\t\tString firstLineOfHeader = getter.getHeaderFirstLine(messageIsRequest,messageInfo);"], [169, "\t\t\tLinkedHashMap headers = getter.getHeaderHashMap(messageIsRequest,messageInfo);"], [170, "\t\t\tIHttpService service = messageInfo.getHttpService();"], [171, "\t\t\tbyte[] body = getter.getBody(messageIsRequest,messageInfo);"], [172, ""], [173, "\t\t\tboolean isRequestChanged = false;"], [174, ""], [175, "\t\t\t//remove header"], [176, "\t\t\tList<ConfigEntry> configEntries = tableModel.getConfigByType(ConfigEntry.Action_Remove_From_Headers);"], [177, "\t\t\tfor (ConfigEntry entry : configEntries) {"], [178, "\t\t\t\tString key = entry.getKey();"], [179, "\t\t\t\tif (headers.remove(key) != null) {"], [180, "\t\t\t\t\tisRequestChanged = true;"], [181, "\t\t\t\t}"], [182, "\t\t\t}"], [183, ""], [184, "\t\t\t//add/update/append header"], [185, "\t\t\tif (toolFlag == (toolFlag & checkEnabledFor())) {"], [186, "\t\t\t\t//if ((config.isOnlyForScope() && callbacks.isInScope(url))|| !config.isOnlyForScope()) {"], [187, "\t\t\t\tif (!config.isOnlyForScope()||callbacks.isInScope(url)){"], [188, "\t\t\t\t\ttry {"], [189, "\t\t\t\t\t\tList<ConfigEntry> updateOrAddEntries = tableModel.getConfigEntries();"], [190, "\t\t\t\t\t\tfor (ConfigEntry entry : updateOrAddEntries) {"], [191, "\t\t\t\t\t\t\tString key = entry.getKey();"], [192, "\t\t\t\t\t\t\tString value = entry.getValue();"], [193, ""], [194, "\t\t\t\t\t\t\tif (value.contains(\"%host\")) {"], [195, "\t\t\t\t\t\t\t\tvalue = value.replaceAll(\"%host\", host);"], [196, "\t\t\t\t\t\t\t\t//stdout.println(\"3333\"+value);"], [197, "\t\t\t\t\t\t\t}"], [198, ""], [199, "\t\t\t\t\t\t\tif (value.toLowerCase().contains(\"%dnslogserver\")) {"], [200, "\t\t\t\t\t\t\t\tString dnslog = tableModel.getConfigByKey(\"DNSlogServer\");"], [201, "\t\t\t\t\t\t\t\tPattern p = Pattern.compile(\"(?u)%dnslogserver\");"], [202, "\t\t\t\t\t\t\t\tMatcher m = p.matcher(value);"], [203, ""], [204, "\t\t\t\t\t\t\t\twhile (m.find()) {"], [205, "\t\t\t\t\t\t\t\t\tString found = m.group(0);"], [206, "\t\t\t\t\t\t\t\t\tvalue = value.replaceAll(found, dnslog);"], [207, "\t\t\t\t\t\t\t\t}"], [208, "\t\t\t\t\t\t\t}"], [209, ""], [210, "\t\t\t\t\t\t\tif (entry.getType().equals(ConfigEntry.Action_Add_Or_Replace_Header) && entry.isEnable()) {"], [211, "\t\t\t\t\t\t\t\theaders.put(key, value);"], [212, "\t\t\t\t\t\t\t\tisRequestChanged = true;"], [213, ""], [214, "\t\t\t\t\t\t\t} else if (entry.getType().equals(ConfigEntry.Action_Append_To_header_value) && entry.isEnable()) {"], [215, "\t\t\t\t\t\t\t\tvalue = headers.get(key) + value;"], [216, "\t\t\t\t\t\t\t\theaders.put(key, value);"], [217, "\t\t\t\t\t\t\t\tisRequestChanged = true;"], [218, "\t\t\t\t\t\t\t\t//stdout.println(\"2222\"+value);"], [219, "\t\t\t\t\t\t\t} else if (entry.getKey().equalsIgnoreCase(\"Chunked-AutoEnable\") && entry.isEnable()) {"], [220, "\t\t\t\t\t\t\t\theaders.put(\"Transfer-Encoding\", \"chunked\");"], [221, "\t\t\t\t\t\t\t\tisRequestChanged = true;"], [222, ""], [223, "\t\t\t\t\t\t\t\ttry {"], [224, "\t\t\t\t\t\t\t\t\tboolean useComment = false;"], [225, "\t\t\t\t\t\t\t\t\tif (this.tableModel.getConfigByKey(\"Chunked-UseComment\") != null) {"], [226, "\t\t\t\t\t\t\t\t\t\tuseComment = true;"], [227, "\t\t\t\t\t\t\t\t\t}"], [228, "\t\t\t\t\t\t\t\t\tString lenStr = this.tableModel.getConfigByKey(\"Chunked-Length\");"], [229, "\t\t\t\t\t\t\t\t\tint len = 10;"], [230, "\t\t\t\t\t\t\t\t\tif (lenStr != null) {"], [231, "\t\t\t\t\t\t\t\t\t\tlen = Integer.parseInt(lenStr);"], [232, "\t\t\t\t\t\t\t\t\t}"], [233, "\t\t\t\t\t\t\t\t\tbody = Methods.encoding(body, len, useComment);"], [234, "\t\t\t\t\t\t\t\t} catch (UnsupportedEncodingException e) {"], [235, "\t\t\t\t\t\t\t\t\te.printStackTrace(stderr);"], [236, "\t\t\t\t\t\t\t\t}"], [237, "\t\t\t\t\t\t\t}"], [238, "\t\t\t\t\t\t}"], [239, ""], [240, ""], [241, "\t\t\t\t\t\t///proxy function should be here"], [242, "\t\t\t\t\t\t//reference https://support.portswigger.net/customer/portal/questions/17350102-burp-upstream-proxy-settings-and-sethttpservice"], [243, "\t\t\t\t\t\tString proxy = this.tableModel.getConfigByKey(\"Proxy-ServerList\");"], [244, "\t\t\t\t\t\tString mode = this.tableModel.getConfigByKey(\"Proxy-UseRandomMode\");"], [245, ""], [246, "\t\t\t\t\t\tif (proxy != null) {//if enable is false, will return null."], [247, "\t\t\t\t\t\t\tList<String> proxyList = Arrays.asList(proxy.split(\";\"));//\u5982\u679c\u5b57\u7b26\u4e32\u662f\u4ee5;\u7ed3\u5c3e\uff0c\u4f1a\u88ab\u81ea\u52a8\u4e22\u5f03"], [248, ""], [249, "\t\t\t\t\t\t\tif (mode != null) {//random mode"], [250, "\t\t\t\t\t\t\t\tproxyServerIndex = (int) (Math.random() * proxyList.size());"], [251, "\t\t\t\t\t\t\t\t//proxyServerIndex = new Random().nextInt(proxyList.size());"], [252, "\t\t\t\t\t\t\t} else {"], [253, "\t\t\t\t\t\t\t\tproxyServerIndex = (proxyServerIndex + 1) % proxyList.size();"], [254, "\t\t\t\t\t\t\t}"], [255, "\t\t\t\t\t\t\tString proxyhost = proxyList.get(proxyServerIndex).split(\":\")[0].trim();"], [256, "\t\t\t\t\t\t\tint port = Integer.parseInt(proxyList.get(proxyServerIndex).split(\":\")[1].trim());"], [257, ""], [258, "\t\t\t\t\t\t\tmessageInfo.setHttpService(helpers.buildHttpService(proxyhost, port, messageInfo.getHttpService().getProtocol()));"], [259, ""], [260, "\t\t\t\t\t\t\tfirstLineOfHeader = firstLineOfHeader.replaceFirst(path, url.toString().split(\"\\\\?\",0)[0]);"], [261, "\t\t\t\t\t\t\tisRequestChanged = true;"], [262, "\t\t\t\t\t\t\t//success or failed,need to check?"], [263, "\t\t\t\t\t\t}"], [264, "\t\t\t\t\t} catch (Exception e) {"], [265, "\t\t\t\t\t\te.printStackTrace(stderr);"], [266, "\t\t\t\t\t}"], [267, "\t\t\t\t}"], [268, "\t\t\t}"], [269, ""], [270, "\t\t\t//set final request"], [271, "\t\t\tList<String> headerList = getter.HeaderMapToList(firstLineOfHeader,headers);"], [272, "\t\t\tmessageInfo.setRequest(helpers.buildHttpMessage(headerList,body));"], [273, ""], [274, "\t\t\tif (isRequestChanged) {"], [275, "\t\t\t\t//debug"], [276, "\t\t\t\tList<String> finalheaders = helpers.analyzeRequest(messageInfo).getHeaders();"], [277, "\t\t\t\t//List<String> finalheaders = editer.getHeaderList();//error here:bodyOffset getted twice are different"], [278, "\t\t\t\tstdout.println(System.lineSeparator() + \"//////////edited request by knife//////////////\" + System.lineSeparator());"], [279, "\t\t\t\tfor (String entry : finalheaders) {"], [280, "\t\t\t\t\tstdout.println(entry);"], [281, "\t\t\t\t}"], [282, "\t\t\t}"], [283, "\t\t}else {//response"], [284, ""], [285, "\t\t}"], [286, "\t}"], [287, ""], [288, "\t@Deprecated"], [289, "\tpublic void processHttpMessageWithEditor(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo) {"], [290, "\t\t//messageeditor"]], "deleted": [[51, "\t\tthis.callbacks.setExtensionName(this.ExtensionName);"], [52, "\t\tthis.callbacks.registerContextMenuFactory(this);// for menus"], [53, "\t\tthis.callbacks.registerMessageEditorTabFactory(this);// for U2C"], [54, "\t\tthis.callbacks.addSuiteTab(BurpExtender.this);"], [55, "\t\tthis.callbacks.registerHttpListener(this);"]]}, "num_lines_added": 134, "num_lines_removed": 5}