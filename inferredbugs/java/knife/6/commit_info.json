{"hash": "7e3cdeea15d5f41fac195330c6c75f313dc47602", "message": "\u8fd8\u662f\u7528getter\u65b9\u6cd5\u89e3\u51b3\u4e86\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898\u3002", "file_num_lines": 123, "diff_parsed": {"added": [[4, "import java.util.ArrayList;"], [5, "import java.util.Arrays;"], [6, "import java.util.LinkedHashMap;"], [7, "import java.util.List;"], [11, "\tprivate static IExtensionHelpers helpers;"], [12, "\tprivate static String Header_Spliter = \": \";"], [13, ""], [14, "\tpublic Getter(IExtensionHelpers helpers) {"], [15, "\t\tGetter.helpers = helpers;"], [16, "\t}"], [17, ""], [18, "\t/*"], [19, "\t * \u83b7\u53d6header\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u662f\u6784\u9020burp\u4e2d\u8bf7\u6c42\u9700\u8981\u7684\u683c\u5f0f\u3002"], [20, "\t */"], [24, "\t\t\treturn analyzeRequest.getHeaders();"], [27, "\t\t\treturn analyzeResponse.getHeaders();"], [30, ""], [38, "\t\tList<String> headers =getHeaderList(messageIsRequest,messageInfo);"], [45, ""], [52, "\t\tList<String> headers = getHeaderList(messageIsRequest,messageInfo);"], [54, "\t\theaders.remove(0);"], [55, "\t\tfor (String header : headers) {"], [56, "\t\t\ttry {"], [57, "\t\t\t\tString headerName = header.split(Header_Spliter, 0)[0];"], [58, "\t\t\t\tString headerValue = header.split(Header_Spliter, 0)[1];"], [59, "\t\t\t\tresult.put(headerName, headerValue);"], [60, "\t\t\t} catch (Exception e) {"], [61, "\t\t\t\tString headerName = header.split(\":\", 0)[0];"], [62, "\t\t\t\tString headerValue = header.split(\":\", 0)[1];"], [63, "\t\t\t\tresult.put(headerName, headerValue);"], [64, "\t\t\t}"], [65, "\t\t}"], [66, "\t\treturn result;"], [67, "\t}"], [68, ""], [69, "\tpublic String getHeaderFirstLine(boolean messageIsRequest,IHttpRequestResponse messageInfo){"], [71, "\t\t\treturn helpers.analyzeRequest(messageInfo).getHeaders().get(0);"], [73, "\t\t\treturn helpers.analyzeResponse(messageInfo.getResponse()).getHeaders().get(0);"], [76, ""], [77, "\tpublic List<String> HeaderMapToList(String firstline,LinkedHashMap<String,String> Headers){"], [82, "\t\t}"], [83, "\t\tresult.add(0,firstline);"], [86, ""], [91, "\t\tLinkedHashMap<String,String> headers = getHeaderHashMap(messageIsRequest,messageInfo);"], [92, "\t\treturn headers.get(headerName);"], [93, "\t}"], [94, ""], [95, ""], [107, ""], [118, ""], [123, ""], [127, ""], [131, ""], [134, ""], [138, ""], [143, ""], [148, ""], [149, ""], [150, "\tpublic String getHTTPBasicCredentials(IHttpRequestResponse messageInfo) throws Exception{"], [151, "\t\tString authHeader  = getHeaderValueOf(true, messageInfo, \"Authorization\").trim();"], [152, "\t\tString[] parts = authHeader.split(\"\\\\s\");"], [153, ""], [154, "\t\tif (parts.length != 2)"], [155, "\t\t\tthrow new Exception(\"Wrong number of HTTP Authorization header parts\");"], [156, ""], [157, "\t\tif (!parts[0].equalsIgnoreCase(\"Basic\"))"], [158, "\t\t\tthrow new Exception(\"HTTP authentication must be Basic\");"], [159, ""], [160, "\t\treturn parts[1];"], [161, "\t}"], [162, ""], [163, "\tpublic static void main(String args[]) {"], [164, "\t\tString a= \"xxxxx%s%bxxxxxxx\";"], [165, "\t\tSystem.out.println(String.format(a, \"111\"));"], [166, "\t}"]], "deleted": [[4, "import java.util.*;"], [8, "    private static IExtensionHelpers helpers;"], [9, "    public Getter(IExtensionHelpers helpers) {"], [10, "    \tthis.helpers = helpers;"], [11, "    }"], [12, ""], [13, "    /*"], [14, "     * \u83b7\u53d6header\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u662f\u6784\u9020burp\u4e2d\u8bf7\u6c42\u9700\u8981\u7684\u683c\u5f0f\u3002"], [15, "     */"], [19, "\t\t\tList<String> headers = analyzeRequest.getHeaders();"], [20, "\t\t\treturn headers;"], [23, "\t\t\tList<String> headers = analyzeResponse.getHeaders();"], [24, "\t\t\treturn headers;"], [27, ""], [35, "\t\tList<String> headers =null;"], [37, "\t\tif(messageIsRequest) {"], [38, "\t\t\tIRequestInfo analyzeRequest = helpers.analyzeRequest(messageInfo);"], [39, "\t\t\theaders = analyzeRequest.getHeaders();"], [40, "\t\t}else {"], [41, "\t\t\tIResponseInfo analyzeResponse = helpers.analyzeResponse(messageInfo.getResponse());"], [42, "\t\t\theaders = analyzeResponse.getHeaders();"], [43, "\t\t}"], [44, ""], [48, ""], [51, ""], [58, "\t\tList<String> headers=null;"], [61, "\t\t\tIRequestInfo analyzeRequest = helpers.analyzeRequest(messageInfo);"], [62, "\t\t\theaders = analyzeRequest.getHeaders();"], [64, "\t\t\tIResponseInfo analyzeResponse = helpers.analyzeResponse(messageInfo.getResponse());"], [65, "\t\t\theaders = analyzeResponse.getHeaders();"], [67, ""], [68, "        for (String header : headers) {"], [69, "        \tif(header.contains(\": \")) {//to void trigger the Exception"], [70, "            \ttry {"], [71, "    \t\t\t\tString headerName = header.split(\": \", 0)[0];"], [72, "    \t\t\t\tString headerValue = header.split(\": \", 0)[1];"], [73, "    \t\t\t\t//POST /login.pub HTTP/1.1  the first line of header will tirgger error here"], [74, "    \t\t\t\tresult.put(headerName, headerValue);"], [75, "    \t\t\t} catch (Exception e) {"], [76, "    \t\t\t\t//e.printStackTrace();"], [77, "    \t\t\t}"], [78, "        \t}"], [79, "        }"], [80, "        return result;"], [82, ""], [83, "\tpublic List<String> MapToList(LinkedHashMap<String,String> Headers){"], [88, "\t\t}"], [91, ""], [96, "\t\tList<String> headers=null;"], [97, "\t\tif(messageIsRequest) {"], [98, "\t\t\tIRequestInfo analyzeRequest = helpers.analyzeRequest(messageInfo);"], [99, "\t\t\theaders = analyzeRequest.getHeaders();"], [100, "\t\t}else {"], [101, "\t\t\tIResponseInfo analyzeResponse = helpers.analyzeResponse(messageInfo.getResponse());"], [102, "\t\t\theaders = analyzeResponse.getHeaders();"], [103, "\t\t}"], [104, ""], [105, ""], [106, "        headerName = headerName.toLowerCase().replace(\": \", \"\");"], [107, "        for (String header : headers) {"], [108, "            if (header.toLowerCase().startsWith(headerName)) {"], [109, "                return header.split(\": \", 0)[1];"], [110, "            }"], [111, "        }"], [112, "        return null;"], [113, "    }"], [114, ""], [115, ""], [127, ""], [138, ""], [143, ""], [147, ""], [151, ""], [154, ""], [158, ""], [167, ""], [168, ""], [169, "    public String getHTTPBasicCredentials(IHttpRequestResponse messageInfo) throws Exception{"], [170, "        String authHeader  = getHeaderValueOf(true, messageInfo, \"Authorization\").trim();"], [171, "        String[] parts = authHeader.split(\"\\\\s\");"], [172, ""], [173, "        if (parts.length != 2)"], [174, "            throw new Exception(\"Wrong number of HTTP Authorization header parts\");"], [175, ""], [176, "        if (!parts[0].equalsIgnoreCase(\"Basic\"))"], [177, "            throw new Exception(\"HTTP authentication must be Basic\");"], [178, ""], [179, "        return parts[1];"], [180, "    }"], [181, ""], [182, "    public static void main(String args[]) {"], [183, "    \tString a= \"xxxxx%s%bxxxxxxx\";"], [184, "    \tSystem.out.println(String.format(a, \"111\"));"], [185, "    }"]]}, "num_lines_added": 75, "num_lines_removed": 94}