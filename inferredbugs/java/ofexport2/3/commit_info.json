{"hash": "a755ebdda819f781d497685e1c33722243ca2465", "message": "Intermediate commit", "file_num_lines": 177, "diff_parsed": {"added": [[34, "import org.psidnell.omnifocus.ConfigParams;"], [38, "import org.springframework.beans.BeansException;"], [39, "import org.springframework.beans.factory.BeanFactory;"], [40, "import org.springframework.beans.factory.BeanFactoryAware;"], [57, "public class DataCache implements BeanFactoryAware {"], [67, "    private BeanFactory beanFactory;"], [68, ""], [70, "        // Jackson constructor"], [75, "    public DataCache(BeanFactory beanFactory) {"], [76, "        // Testing constructor"], [77, "        this.folders = new HashMap<>();"], [78, "        this.projInfos = new HashMap<>();"], [79, "        this.beanFactory = beanFactory;"], [80, "    }"], [82, "    public DataCache(Collection<Folder> folders, Collection<ProjectInfo> projInfos, Collection<Task> tasks, Collection<Context> contexts, BeanFactory beanFactory) {"], [83, "        this. beanFactory = beanFactory;"], [93, "        Project inbox = beanFactory.getBean(\"project\", Project.class);"], [97, "        Context noContext = beanFactory.getBean(\"context\", Context.class);"], [101, "        ConfigParams configParams = beanFactory.getBean(\"configparams\", ConfigParams.class);"], [102, ""], [154, "            project.setConfigParams(configParams);"], [226, "    public static DataCache importData(File file, BeanFactory beanFactory) throws FileNotFoundException, IOException {"], [230, "            DataCache result = mapper.readValue(in, DataCache.class);"], [231, "            // Nodes didn't come from spring, must wire them manually"], [232, "            ConfigParams config = beanFactory.getBean(\"configparams\", ConfigParams.class);"], [233, "            result.contexts.values().forEach((n)->n.setConfigParams(config));"], [234, "            result.folders.values().forEach((n)->n.setConfigParams(config));"], [235, "            result.projects.values().forEach((n)->n.setConfigParams(config));"], [236, "            result.tasks.values().forEach((n)->n.setConfigParams(config));"], [237, "            result.projInfos.values().forEach((n)->n.setConfigParams(config));"], [238, "            result.setBeanFactory (beanFactory);"], [239, "            return result;"], [258, "    public static void exportData(File file, Predicate<Node> filterFn, SQLiteDAO sqliteDAO, BeanFactory beanFactory) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException,"], [275, "            DataCache dataCache = new DataCache(folders, projInfos, tasks, contexts, beanFactory);"], [281, ""], [282, "    @Override"], [283, "    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {"], [284, "        this.beanFactory = beanFactory;"], [285, "    }"]], "deleted": [[53, "public class DataCache {"], [68, "    public DataCache(Collection<Folder> folders, Collection<ProjectInfo> projInfos, Collection<Task> tasks, Collection<Context> contexts) {"], [79, "        Project inbox = new Project();"], [83, "        Context noContext = new Context();"], [209, "    public static DataCache importData(File file) throws FileNotFoundException, IOException {"], [213, "            return mapper.readValue(in, DataCache.class);"], [232, "    public static void exportData(File file, Predicate<Node> filterFn, SQLiteDAO sqliteDAO) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException,"], [249, "            DataCache dataCache = new DataCache(folders, projInfos, tasks, contexts);"]]}, "num_lines_added": 39, "num_lines_removed": 8}