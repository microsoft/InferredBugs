{"hash": "f6bf46ca9a8397a897da32bf318ed90fc283e5bb", "message": "tested and redesigned StateManager and UpdateLoads", "file_num_lines": 276, "diff_parsed": {"added": [[11, "import jsprit.core.problem.cost.VehicleRoutingTransportCosts;"], [28, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [34, "\t\tCapacity loadAtBeginning = stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class);"], [35, "\t\tassertEquals(0.,loadAtBeginning.get(0),0.1);"], [36, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(0),0.1);"], [41, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [52, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(0),0.1);"], [53, "\t\tassertEquals(1.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(0),0.1);"], [58, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [69, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(0),0.1);"], [70, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(1),0.1);"], [71, "\t\tassertEquals(1.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(0),0.1);"], [72, "\t\tassertEquals(2.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(1),0.1);"], [77, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [78, "\t\tUpdateLoads updateLoads = new UpdateLoads(stateManager);"], [79, ""], [80, "\t\tService service = mock(Service.class);"], [81, "\t\twhen(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).build());"], [82, ""], [83, "\t\tService service2 = mock(Service.class);"], [84, "\t\twhen(service2.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 10).build());"], [85, ""], [86, "\t\tVehicleRoute route = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class))"], [87, "\t\t\t\t.addService(service).addService(service2).build();"], [88, ""], [89, "\t\tupdateLoads.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());"], [90, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(0),0.1);"], [91, "\t\tassertEquals(11.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(0),0.1);"], [92, "\t}"], [93, ""], [94, "\t@Test"], [95, "\tpublic void whenVehcicleRouteHasTwoActivitiesWithMultipleCapDims_loadsAtBeginningAndEndShouldBeCalculatedCorrectly(){"], [96, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [100, "\t\twhen(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 3).build());"], [103, "\t\twhen(service2.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 10).addDimension(1, 14).build());"], [109, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(0),0.1);"], [110, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(1),0.1);"], [111, "\t\tassertEquals(11.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(0),0.1);"], [112, "\t\tassertEquals(17.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(1),0.1);"], [116, "\tpublic void whenVehicleRouteHasTwoActivities_loadsAtActivitiesShouldBeCalculatedCorrectly(){"], [117, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [124, "\t\twhen(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).build());"], [127, "\t\twhen(service2.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 10).build());"], [134, "\t\tassertEquals(1.,stateManager.getActivityState(route.getActivities().get(0), StateFactory.LOAD, Capacity.class).get(0),0.1);"], [135, "\t\tassertEquals(11.,stateManager.getActivityState(route.getActivities().get(1), StateFactory.LOAD, Capacity.class).get(0),0.1);"], [138, "\t@Test"], [139, "\tpublic void whenVehicleRouteHasTwoActivitiesWithMultipleCapDims_loadsAtActivitiesShouldBeCalculatedCorrectly(){"], [140, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [141, "\t\tUpdateLoads updateLoads = new UpdateLoads(stateManager);"], [142, ""], [143, "\t\tRouteActivityVisitor routeActivityVisitor = new RouteActivityVisitor();"], [144, "\t\trouteActivityVisitor.addActivityVisitor(updateLoads);"], [145, ""], [146, "\t\tService service = mock(Service.class);"], [147, "\t\twhen(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 3).build());"], [148, ""], [149, "\t\tService service2 = mock(Service.class);"], [150, "\t\twhen(service2.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 10).addDimension(1, 13).build());"], [151, ""], [152, "\t\tVehicleRoute route = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class))"], [153, "\t\t\t\t.addService(service).addService(service2).build();"], [154, ""], [155, "\t\trouteActivityVisitor.visit(route);"], [156, ""], [157, "\t\tassertEquals(1.,stateManager.getActivityState(route.getActivities().get(0), StateFactory.LOAD, Capacity.class).get(0),0.1);"], [158, "\t\tassertEquals(3.,stateManager.getActivityState(route.getActivities().get(0), StateFactory.LOAD, Capacity.class).get(1),0.1);"], [159, "\t\tassertEquals(11.,stateManager.getActivityState(route.getActivities().get(1), StateFactory.LOAD, Capacity.class).get(0),0.1);"], [160, "\t\tassertEquals(16.,stateManager.getActivityState(route.getActivities().get(1), StateFactory.LOAD, Capacity.class).get(1),0.1);"], [161, "\t}"], [162, ""], [165, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [169, "\t\twhen(pickup.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).build());"], [172, "\t\twhen(delivery.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 10).build());"], [173, ""], [174, "\t\tVehicleRoute route = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class))"], [175, "\t\t\t\t.addService(pickup).addService(delivery).build();"], [176, ""], [177, "\t\tupdateLoads.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());"], [178, "\t\tassertEquals(10.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(0),0.1);"], [179, "\t\tassertEquals(1.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(0),0.1);"], [180, "\t}"], [181, ""], [182, "\t@Test"], [183, "\tpublic void whenVehcicleRouteHasPickupAndDeliveryWithMultipleCapDims_loadsAtBeginningAndEndShouldBeCalculatedCorrectly(){"], [184, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [185, "\t\tUpdateLoads updateLoads = new UpdateLoads(stateManager);"], [186, ""], [187, "\t\tPickup pickup = mock(Pickup.class);"], [188, "\t\twhen(pickup.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 4).build());"], [189, ""], [190, "\t\tDelivery delivery = mock(Delivery.class);"], [191, "\t\twhen(delivery.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 10).addDimension(1, 13).build());"], [197, "\t\tassertEquals(10.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(0),0.1);"], [198, "\t\tassertEquals(13.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(1),0.1);"], [199, "\t\tassertEquals(1.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(0),0.1);"], [200, "\t\tassertEquals(4.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(1),0.1);"], [205, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [212, "\t\twhen(pickup.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).build());"], [224, "\t\tassertEquals(11.,stateManager.getActivityState(route.getActivities().get(0), StateFactory.LOAD, Capacity.class).get(0),0.1);"], [225, "\t\tassertEquals(1.,stateManager.getActivityState(route.getActivities().get(1), StateFactory.LOAD, Capacity.class).get(0),0.1);"], [226, "\t}"], [227, ""], [228, "\t@Test"], [229, "\tpublic void whenVehcicleRouteHasPickupAndDeliveryWithMultipleCapDims_loadsAtActivitiesShouldBeCalculatedCorrectly(){"], [230, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [231, "\t\tUpdateLoads updateLoads = new UpdateLoads(stateManager);"], [232, ""], [233, "\t\tRouteActivityVisitor routeActivityVisitor = new RouteActivityVisitor();"], [234, "\t\trouteActivityVisitor.addActivityVisitor(updateLoads);"], [235, ""], [236, "\t\tPickup pickup = mock(Pickup.class);"], [237, "\t\twhen(pickup.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 4).build());"], [238, ""], [239, "\t\tDelivery delivery = mock(Delivery.class);"], [240, "\t\tCapacity capacity2 = Capacity.Builder.newInstance().addDimension(0, 10).addDimension(1, 14).build();"], [241, "\t\twhen(delivery.getSize()).thenReturn(capacity2);"], [242, ""], [243, "\t\tVehicleRoute route = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class))"], [244, "\t\t\t\t.addService(pickup).addService(delivery).build();"], [245, ""], [246, "\t\tupdateLoads.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());"], [247, "\t\trouteActivityVisitor.visit(route);"], [248, ""], [249, "\t\tassertEquals(11.,stateManager.getActivityState(route.getActivities().get(0), StateFactory.LOAD, Capacity.class).get(0),0.1);"], [250, "\t\tassertEquals(18.,stateManager.getActivityState(route.getActivities().get(0), StateFactory.LOAD, Capacity.class).get(1),0.1);"], [251, "\t\tassertEquals(1.,stateManager.getActivityState(route.getActivities().get(1), StateFactory.LOAD, Capacity.class).get(0),0.1);"], [252, "\t\tassertEquals(4.,stateManager.getActivityState(route.getActivities().get(1), StateFactory.LOAD, Capacity.class).get(1),0.1);"], [257, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [264, "\t\twhen(pickup.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).build());"], [271, "\t\twhen(pickup2insert.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).build());"], [279, "\t\tassertEquals(10.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(0),0.1);"], [280, "\t\tassertEquals(3.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(0),0.1);"], [282, ""], [283, "\t@Test"], [284, "\tpublic void whenPickupIsInsertedIntoVehcicleRouteWithPickupAndDeliveryWithMultipleCapDims_loadsAtBeginningAndEndShouldBeCalculatedCorrectly(){"], [285, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [286, "\t\tUpdateLoads updateLoads = new UpdateLoads(stateManager);"], [287, ""], [288, "\t\tRouteActivityVisitor routeActivityVisitor = new RouteActivityVisitor();"], [289, "\t\trouteActivityVisitor.addActivityVisitor(updateLoads);"], [290, ""], [291, "\t\tPickup pickup = mock(Pickup.class);"], [292, "\t\twhen(pickup.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 3).build());"], [293, ""], [294, "\t\tDelivery delivery = mock(Delivery.class);"], [295, "\t\tCapacity capacity2 = Capacity.Builder.newInstance().addDimension(0, 10).addDimension(1, 15).build();"], [296, "\t\twhen(delivery.getSize()).thenReturn(capacity2);"], [297, ""], [298, "\t\tPickup pickup2insert = mock(Pickup.class);"], [299, "\t\twhen(pickup2insert.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build());"], [300, ""], [301, "\t\tVehicleRoute route = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class))"], [302, "\t\t\t\t.addService(pickup).addService(delivery).build();"], [303, ""], [304, "\t\tupdateLoads.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());"], [305, "\t\tupdateLoads.informJobInserted(pickup2insert, route, 0., 0.);"], [306, ""], [307, "\t\tassertEquals(10.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(0),0.1);"], [308, "\t\tassertEquals(15.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class).get(1),0.1);"], [309, "\t\tassertEquals(3.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(0),0.1);"], [310, "\t\tassertEquals(7.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END, Capacity.class).get(1),0.1);"], [311, "\t}"], [312, ""], [315, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [322, "\t\twhen(pickup.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).build());"], [338, "\t\tassertEquals(30.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING,Capacity.class).get(0),0.1);"], [339, "\t\tassertEquals(1.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END,Capacity.class).get(0),0.1);"], [341, ""], [342, "\t@Test"], [343, "\tpublic void whenDeliveryIsInsertedIntoVehcicleRouteWithPickupAndDeliveryWithMultipleCapDims_loadsAtBeginningAndEndShouldBeCalculatedCorrectly(){"], [344, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingTransportCosts.class));"], [345, "\t\tUpdateLoads updateLoads = new UpdateLoads(stateManager);"], [346, ""], [347, "\t\tRouteActivityVisitor routeActivityVisitor = new RouteActivityVisitor();"], [348, "\t\trouteActivityVisitor.addActivityVisitor(updateLoads);"], [349, ""], [350, "\t\tPickup pickup = mock(Pickup.class);"], [351, "\t\twhen(pickup.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 3).build());"], [352, ""], [353, "\t\tDelivery delivery = mock(Delivery.class);"], [354, "\t\tCapacity size = Capacity.Builder.newInstance().addDimension(0, 10).addDimension(1, 14).build();"], [355, "\t\twhen(delivery.getSize()).thenReturn(size);"], [356, ""], [357, "\t\tDelivery delivery2insert = mock(Delivery.class);"], [358, "\t\tCapacity size2 = Capacity.Builder.newInstance().addDimension(0, 20).addDimension(1, 25).build();"], [359, "\t\twhen(delivery2insert.getSize()).thenReturn(size2);"], [360, ""], [361, "\t\tVehicleRoute route = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class))"], [362, "\t\t\t\t.addService(pickup).addService(delivery).build();"], [363, ""], [364, "\t\tupdateLoads.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());"], [365, "\t\tupdateLoads.informJobInserted(delivery2insert, route, 0., 0.);"], [366, ""], [367, "\t\tassertEquals(30.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING,Capacity.class).get(0),0.1);"], [368, "\t\tassertEquals(39.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING,Capacity.class).get(1),0.1);"], [369, "\t\tassertEquals(1.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END,Capacity.class).get(0),0.1);"], [370, "\t\tassertEquals(3.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END,Capacity.class).get(1),0.1);"], [371, "\t}"], [372, ""]], "deleted": [[11, "import jsprit.core.problem.VehicleRoutingProblem;"], [28, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingProblem.class));"], [34, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING).toDouble(),0.1);"], [35, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END).toDouble(),0.1);"], [38, "\t@SuppressWarnings(\"deprecation\")"], [41, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingProblem.class));"], [45, ""], [46, "\t\twhen(service.getCapacityDemand()).thenReturn(1);"], [54, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING).toDouble(),0.1);"], [55, "\t\tassertEquals(1.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END).toDouble(),0.1);"], [60, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingProblem.class));"], [71, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING).toDouble(),0.1);"], [72, "\t\tassertEquals(1.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END).toDouble(),0.1);"], [75, "\t@SuppressWarnings(\"deprecation\")"], [78, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingProblem.class));"], [82, "\t\twhen(service.getCapacityDemand()).thenReturn(1);"], [85, "\t\twhen(service2.getCapacityDemand()).thenReturn(10);"], [91, "\t\tassertEquals(0.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING).toDouble(),0.1);"], [92, "\t\tassertEquals(11.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END).toDouble(),0.1);"], [95, "\t@SuppressWarnings(\"deprecation\")"], [97, "\tpublic void whenVehcicleRouteHasTwoActivities_loadsAtActivitiesShouldBeCalculatedCorrectly(){"], [98, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingProblem.class));"], [105, "\t\twhen(service.getCapacityDemand()).thenReturn(1);"], [108, "\t\twhen(service2.getCapacityDemand()).thenReturn(10);"], [115, "\t\tassertEquals(1.,stateManager.getActivityState(route.getActivities().get(0), StateFactory.LOAD).toDouble(),0.1);"], [116, "\t\tassertEquals(11.,stateManager.getActivityState(route.getActivities().get(1), StateFactory.LOAD).toDouble(),0.1);"], [119, "\t@SuppressWarnings(\"deprecation\")"], [122, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingProblem.class));"], [126, "\t\twhen(pickup.getCapacityDemand()).thenReturn(1);"], [129, "\t\twhen(delivery.getCapacityDemand()).thenReturn(10);"], [130, "\t\tCapacity capacity2 = Capacity.Builder.newInstance().addDimension(0, 10).build();"], [131, "\t\twhen(delivery.getSize()).thenReturn(capacity2);"], [137, "\t\tassertEquals(10.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING).toDouble(),0.1);"], [138, "\t\tassertEquals(1.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END).toDouble(),0.1);"], [141, "\t@SuppressWarnings(\"deprecation\")"], [144, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingProblem.class));"], [151, "\t\twhen(pickup.getCapacityDemand()).thenReturn(1);"], [154, "\t\twhen(delivery.getCapacityDemand()).thenReturn(10);"], [164, "\t\tassertEquals(11.,stateManager.getActivityState(route.getActivities().get(0), StateFactory.LOAD).toDouble(),0.1);"], [165, "\t\tassertEquals(1.,stateManager.getActivityState(route.getActivities().get(1), StateFactory.LOAD).toDouble(),0.1);"], [168, "\t@SuppressWarnings(\"deprecation\")"], [171, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingProblem.class));"], [178, "\t\twhen(pickup.getCapacityDemand()).thenReturn(1);"], [181, "\t\twhen(delivery.getCapacityDemand()).thenReturn(10);"], [186, "\t\twhen(pickup2insert.getCapacityDemand()).thenReturn(2);"], [194, "\t\tassertEquals(10.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING).toDouble(),0.1);"], [195, "\t\tassertEquals(3.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END).toDouble(),0.1);"], [197, ""], [198, "\t@SuppressWarnings(\"deprecation\")"], [201, "\t\tStateManager stateManager = new StateManager(mock(VehicleRoutingProblem.class));"], [208, "\t\twhen(pickup.getCapacityDemand()).thenReturn(1);"], [211, "\t\twhen(delivery.getCapacityDemand()).thenReturn(10);"], [216, "\t\twhen(delivery2insert.getCapacityDemand()).thenReturn(20);"], [226, "\t\tassertEquals(30.,stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING).toDouble(),0.1);"], [227, "\t\tassertEquals(1.,stateManager.getRouteState(route, StateFactory.LOAD_AT_END).toDouble(),0.1);"], [229, ""]]}, "num_lines_added": 199, "num_lines_removed": 56}