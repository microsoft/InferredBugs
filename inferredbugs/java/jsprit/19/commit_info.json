{"hash": "55ffe3970f39ab66fc4b653398c7397f16f84e4f", "message": "add javadoc to acceptors", "file_num_lines": 123, "diff_parsed": {"added": [[2, " * Copyright (C) 2014  Stefan Schroeder"], [3, " *"], [6, " * License as published by the Free Software Foundation; either"], [8, " *"], [13, " *"], [104, "\t * @deprecated use <code>new SchrimpfAcceptance(solutionMemory,alpha)</code> instead. if you want to determine ini-threshold with a"], [129, "            if(worst == null){"], [130, "                solutions.add(newSolution);"], [131, "                solutionAccepted = true;"], [132, "            }"], [133, "\t\t\telse if(newSolution.getCost() < worst.getCost() + threshold){"], [144, "\t\treturn \"[name=SchrimpfAcceptance][alpha=\"+alpha+\"][warmup=\" + nOfRandomWalks + \"]\";"], [149, "\t\treturn initialThreshold * Math.exp(-1. * Math.log(2) * scheduleVariable / alpha);"], [153, "\t@SuppressWarnings(\"UnusedDeclaration\")"], [154, "    public double getInitialThreshold(){"], [180, "\t\tthis.nOfTotalIterations = algorithm.getMaxIterations();"], [181, ""], [186, ""], [191, "\t\tvra.setMaxIterations(nOfRandomWalks);"], [193, ""], [200, ""], [203, ""], [207, ""], [212, ""]], "deleted": [[2, " * Copyright (C) 2013  Stefan Schroeder"], [3, " *"], [6, " * License as published by the Free Software Foundation; either"], [8, " *"], [13, " *"], [104, "\t *"], [105, "\t * @param solutionMemory"], [106, "\t * @param alpha"], [107, "\t * @param nOfWarmupIterations"], [108, "\t * @Deprecated use <code>new SchrimpfAcceptance(solutionMemory,alpha)</code> instead. if you want to determine ini-threshold with a"], [133, "\t\t\tif(newSolution.getCost() < worst.getCost() + threshold){"], [144, "\t\treturn \"[name=schrimpfAcceptanceFunction][alpha=\"+alpha+\"][warmup=\" + nOfRandomWalks + \"]\";"], [149, "\t\tdouble currentThreshold = initialThreshold * Math.exp(-1. * Math.log(2) * scheduleVariable / alpha);"], [150, "\t\treturn currentThreshold;"], [154, "\tpublic double getInitialThreshold(){"], [180, "\t\tthis.nOfTotalIterations = algorithm.getNuOfIterations();"], [181, ""], [186, ""], [191, "\t\tvra.setNuOfIterations(nOfRandomWalks);"], [193, ""], [200, ""], [203, ""], [207, ""], [212, ""]]}, "num_lines_added": 24, "num_lines_removed": 24}