{"hash": "f6bf46ca9a8397a897da32bf318ed90fc283e5bb", "message": "tested and redesigned StateManager and UpdateLoads", "file_num_lines": 67, "diff_parsed": {"added": [[7, "import jsprit.core.problem.Capacity;"], [19, " * Updates load at start and end of route as well as at each activity. And update is triggered when either"], [20, " * activityVisitor has been started, the insertion process has been started or a job has been inserted."], [22, " * <p>Note that this only works properly if you register this class as ActivityVisitor AND InsertionStartsListener AND JobInsertedListener."], [23, " * The reason behind is that activity states are dependent on route-level states and vice versa. If this is properly registered,"], [24, " * this dependency is solved automatically."], [30, ""], [32, ""], [33, "\t/*"], [34, "\t * default has one dimension with a value of zero"], [36, "\tprivate Capacity currentLoad = Capacity.Builder.newInstance().build();"], [37, ""], [38, "\tprivate VehicleRoute route;"], [39, ""], [47, "\t\tcurrentLoad = stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class);"], [53, "\t\tcurrentLoad = Capacity.addup(currentLoad, act.getCapacity());"], [54, "\t\tstateManager.putInternalActivityState_(act, StateFactory.LOAD, Capacity.class, currentLoad);"], [55, "\t\tassert currentLoad.isLessOrEqual(route.getVehicle().getType().getCapacityDimensions()) : \"currentLoad at activity must not be > vehicleCapacity\";"], [56, "\t\tassert currentLoad.isGreaterOrEqual(Capacity.Builder.newInstance().build()) : \"currentLoad at act must not be < 0 in one of the applied dimensions\";"], [61, "\t\tcurrentLoad = Capacity.Builder.newInstance().build();"], [65, "\t\tCapacity loadAtDepot = Capacity.Builder.newInstance().build();"], [66, "\t\tCapacity loadAtEnd = Capacity.Builder.newInstance().build();"], [69, "\t\t\t\tloadAtDepot = Capacity.addup(loadAtDepot, j.getSize());"], [72, "\t\t\t\tloadAtEnd = Capacity.addup(loadAtEnd, j.getSize());"], [75, "\t\tstateManager.putInternalRouteState_(route, StateFactory.LOAD_AT_BEGINNING, Capacity.class, loadAtDepot);"], [76, "\t\tstateManager.putInternalRouteState_(route, StateFactory.LOAD_AT_END, Capacity.class, loadAtEnd);"], [87, "\t\t\tCapacity loadAtDepot = stateManager.getRouteState(inRoute, StateFactory.LOAD_AT_BEGINNING, Capacity.class);"], [88, "\t\t\tstateManager.putInternalRouteState_(inRoute, StateFactory.LOAD_AT_BEGINNING, Capacity.class, Capacity.addup(loadAtDepot, job2insert.getSize()));"], [91, "\t\t\tCapacity loadAtEnd = stateManager.getRouteState(inRoute, StateFactory.LOAD_AT_END, Capacity.class);"], [92, "\t\t\tstateManager.putInternalRouteState_(inRoute, StateFactory.LOAD_AT_END, Capacity.class, Capacity.addup(loadAtEnd, job2insert.getSize()));"]], "deleted": [[18, " * Updates load at activity level."], [20, " * <p>Note that this assumes that StateTypes.LOAD_AT_DEPOT is already updated, i.e. it starts by setting loadAtDepot to StateTypes.LOAD_AT_DEPOT."], [21, " * If StateTypes.LOAD_AT_DEPOT is not set, it starts with 0 load at depot."], [22, " *"], [23, " * <p>Thus it DEPENDS on StateTypes.LOAD_AT_DEPOT"], [30, "\tprivate int currentLoad = 0;"], [31, "\tprivate VehicleRoute route;"], [32, "\t/**"], [33, "\t * Updates load at activity level."], [34, "\t *"], [35, "\t * <p>Note that this assumes that StateTypes.LOAD_AT_DEPOT is already updated, i.e. it starts by setting loadAtDepot to StateTypes.LOAD_AT_DEPOT."], [36, "\t * If StateTypes.LOAD_AT_DEPOT is not set, it starts with 0 load at depot."], [37, "\t *"], [38, "\t * <p>Thus it DEPENDS on StateTypes.LOAD_AT_DEPOT"], [39, "\t *"], [40, "\t * <p>The loads can be retrieved by <br>"], [41, "\t * <code>stateManager.getActivityState(activity,StateTypes.LOAD);</code>"], [42, "\t *"], [43, "\t * @author stefan"], [44, "\t *"], [53, "\t\tcurrentLoad = (int) stateManager.getRouteState(route, StateFactory.LOAD_AT_BEGINNING).toDouble();"], [59, "\t\tcurrentLoad += act.getCapacityDemand();"], [60, "\t\tstateManager.putInternalActivityState(act, StateFactory.LOAD, StateFactory.createState(currentLoad));"], [61, "\t\tassert currentLoad <= route.getVehicle().getCapacity() : \"currentLoad at activity must not be > vehicleCapacity\";"], [62, "\t\tassert currentLoad >= 0 : \"currentLoad at act must not be < 0\";"], [67, "\t\tcurrentLoad = 0;"], [71, "\t\tint loadAtDepot = 0;"], [72, "\t\tint loadAtEnd = 0;"], [75, "\t\t\t\tloadAtDepot += j.getCapacityDemand();"], [78, "\t\t\t\tloadAtEnd += j.getCapacityDemand();"], [81, "\t\tstateManager.putInternalRouteState(route, StateFactory.LOAD_AT_BEGINNING, StateFactory.createState(loadAtDepot));"], [82, "\t\tstateManager.putInternalRouteState(route, StateFactory.LOAD_AT_END, StateFactory.createState(loadAtEnd));"], [93, "\t\t\tint loadAtDepot = (int) stateManager.getRouteState(inRoute, StateFactory.LOAD_AT_BEGINNING).toDouble();"], [94, "\t\t\tstateManager.putInternalRouteState(inRoute, StateFactory.LOAD_AT_BEGINNING, StateFactory.createState(loadAtDepot + job2insert.getCapacityDemand()));"], [97, "\t\t\tint loadAtEnd = (int) stateManager.getRouteState(inRoute, StateFactory.LOAD_AT_END).toDouble();"], [98, "\t\t\tstateManager.putInternalRouteState(inRoute, StateFactory.LOAD_AT_END, StateFactory.createState(loadAtEnd + job2insert.getCapacityDemand()));"]]}, "num_lines_added": 30, "num_lines_removed": 36}