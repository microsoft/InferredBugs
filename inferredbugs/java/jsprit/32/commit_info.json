{"hash": "2b871558792773a2d6584a5fe8da86b31c4e3eb3", "message": "test and modify ruin strategies to deal with initial routes", "file_num_lines": 281, "diff_parsed": {"added": [[22, "import jsprit.core.algorithm.box.Jsprit;"], [213, "        SolutionPrinter.print(vrp,solution, SolutionPrinter.Print.VERBOSE);"], [214, ""], [215, "        Job job = getInitialJob(\"1\",vrp);"], [216, "        assertTrue(hasActivityIn(solution,\"veh1\", job));"], [217, "    }"], [218, ""], [219, "    private Job getInitialJob(String jobId, VehicleRoutingProblem vrp) {"], [220, "        for(VehicleRoute r : vrp.getInitialVehicleRoutes()){"], [221, "            for(Job j : r.getTourActivities().getJobs()){"], [222, "               if(j.getId().equals(jobId)) return j;"], [223, "            }"], [224, "        }"], [225, "        return null;"], [229, "    public void whenSolvingWithJsprit_deliverService1_shouldBeInRoute(){"], [230, ""], [231, "        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();"], [232, "        new VrpXMLReader(vrpBuilder).read(\"src/test/resources/simpleProblem_iniRoutes_3.xml\");"], [233, "        VehicleRoutingProblem vrp = vrpBuilder.build();"], [234, ""], [235, "        VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);"], [236, "        Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();"], [237, "        VehicleRoutingProblemSolution solution = Solutions.bestOf(solutions);"], [238, ""], [239, "        SolutionPrinter.print(vrp,solution, SolutionPrinter.Print.VERBOSE);"], [240, ""], [241, "        Job job = getInitialJob(\"1\",vrp);"], [242, "        assertTrue(hasActivityIn(solution,\"veh1\", job));"], [243, "    }"], [244, ""], [245, "    @Test"], [246, "    public void whenSolvingProblem2With_deliverServices_and_allShipmentActs_shouldBeInRoute(){"], [260, ""], [261, "        assertTrue(hasActivityIn(solution,\"veh1\", getInitialJob(\"1\",vrp)));"], [262, "        assertTrue(hasActivityIn(solution,\"veh2\", getInitialJob(\"3\",vrp)));"], [263, "    }"], [264, ""], [265, "    @Test"], [266, "    public void whenSolvingProblem2WithJsprit_deliverServices_and_allShipmentActs_shouldBeInRoute(){"], [267, ""], [268, "        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();"], [269, "        new VrpXMLReader(vrpBuilder).read(\"src/test/resources/simpleProblem_inclShipments_iniRoutes.xml\");"], [270, "        VehicleRoutingProblem vrp = vrpBuilder.build();"], [271, ""], [272, "        VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);"], [273, "        Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();"], [274, "        VehicleRoutingProblemSolution solution = Solutions.bestOf(solutions);"], [275, ""], [276, "        assertTrue(hasActivityIn(solution.getRoutes(),\"1\"));"], [277, "        assertTrue(hasActivityIn(solution.getRoutes(),\"2\"));"], [278, "        assertTrue(hasActivityIn(solution.getRoutes(),\"3\"));"], [279, "        assertTrue(hasActivityIn(solution.getRoutes(),\"4\"));"], [280, ""], [281, "        assertTrue(hasActivityIn(solution,\"veh1\", getInitialJob(\"1\",vrp)));"], [282, "        assertTrue(hasActivityIn(solution,\"veh2\", getInitialJob(\"3\",vrp)));"], [297, "    private boolean hasActivityIn(VehicleRoutingProblemSolution solution, String vehicleId, Job job) {"], [298, "        for(VehicleRoute route : solution.getRoutes()){"], [299, "            String vehicleId_ = route.getVehicle().getId();"], [300, "            if(vehicleId_.equals(vehicleId)){"], [301, "                if(route.getTourActivities().servesJob(job)){"], [302, "                    return true;"], [303, "                }"], [304, "            }"], [305, "        }"], [306, "        return false;"], [307, "    }"], [308, ""], [309, ""]], "deleted": [[212, "        assertTrue(hasActivityIn(solution.getRoutes().iterator().next(),\"1\"));"], [216, "    public void whenSolvingProblem2_deliverServices_and_allShipmentActs_shouldBeInRoute(){"]]}, "num_lines_added": 68, "num_lines_removed": 2}