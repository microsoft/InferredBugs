{"hash": "c31e61a797f6164342f6e52b458e066198d4bc52", "message": "test tour and implement shipment-insertion", "file_num_lines": 132, "diff_parsed": {"added": [[19, "import java.util.List;"], [20, ""], [90, ""], [103, ""], [104, "//\t\tint insertionIndex = 0;"], [110, "\t\tTourActivity prevAct = start;"], [111, "\t\tdouble prevActEndTime = newVehicleDepartureTime;"], [112, "\t\t//pickupShipmentLoop"], [113, "\t\tList<TourActivity> activities = currentRoute.getTourActivities().getActivities();"], [114, "\t\tfor(int i=0;i<activities.size();i++){"], [115, "\t\t\tActivityInsertionCosts pickupAIC = calculate(insertionContext,prevAct,pickupShipment,activities.get(i),prevActEndTime);"], [116, "\t\t\tif(pickupAIC == null){"], [117, "\t\t\t\tdouble nextActArrTime = prevActEndTime + transportCosts.getTransportTime(prevAct.getLocationId(), activities.get(i).getLocationId(), prevActEndTime, newDriver, newVehicle);"], [118, "\t\t\t\tprevActEndTime = CalcUtils.getActivityEndTime(nextActArrTime, activities.get(i));"], [119, "\t\t\t\tcontinue;"], [120, "\t\t\t}"], [121, "\t\t\tTourActivity prevAct_deliveryLoop = pickupShipment;"], [122, "\t\t\tdouble shipmentPickupArrTime = prevActEndTime + transportCosts.getTransportTime(prevAct.getLocationId(), pickupShipment.getLocationId(), prevActEndTime, newDriver, newVehicle);"], [123, "\t\t\tdouble shipmentPickupEndTime = CalcUtils.getActivityEndTime(shipmentPickupArrTime, pickupShipment);"], [124, "\t\t\tdouble prevActEndTime_deliveryLoop = shipmentPickupEndTime;"], [125, "\t\t\t//deliverShipmentLoop"], [126, "\t\t\tfor(int j=i;j<activities.size();j++){"], [127, "\t\t\t\tActivityInsertionCosts deliveryAIC = calculate(insertionContext,prevAct_deliveryLoop,deliveryShipment,activities.get(j),prevActEndTime_deliveryLoop);"], [128, "\t\t\t\tif(deliveryAIC != null){"], [129, "\t\t\t\t\tdouble totalActivityInsertionCosts = pickupAIC.getAdditionalCosts() + deliveryAIC.getAdditionalCosts();"], [130, "\t\t\t\t\tif(totalActivityInsertionCosts < bestCost){"], [131, "\t\t\t\t\t\tbestCost = totalActivityInsertionCosts;"], [132, "\t\t\t\t\t\tpickupInsertionIndex = i;"], [133, "\t\t\t\t\t\tdeliveryInsertionIndex = j;"], [134, "\t\t\t\t\t}"], [135, "\t\t\t\t}"], [136, "\t\t\t\t//update prevAct and endTime"], [137, "\t\t\t\tdouble nextActArrTime = prevActEndTime_deliveryLoop + transportCosts.getTransportTime(prevAct_deliveryLoop.getLocationId(), activities.get(j).getLocationId(), prevActEndTime_deliveryLoop, newDriver, newVehicle);"], [138, "\t\t\t\tprevActEndTime_deliveryLoop = CalcUtils.getActivityEndTime(nextActArrTime, activities.get(j));"], [139, "\t\t\t\tprevAct_deliveryLoop = activities.get(j);"], [140, "\t\t\t}"], [141, "\t\t\t//endInsertion"], [142, "\t\t\tActivityInsertionCosts deliveryAIC = calculate(insertionContext,prevAct_deliveryLoop,deliveryShipment,end,prevActEndTime_deliveryLoop);"], [143, "\t\t\tif(deliveryAIC != null){"], [144, "\t\t\t\tdouble totalActivityInsertionCosts = pickupAIC.getAdditionalCosts() + deliveryAIC.getAdditionalCosts();"], [145, "\t\t\t\tif(totalActivityInsertionCosts < bestCost){"], [146, "\t\t\t\t\tbestCost = totalActivityInsertionCosts;"], [147, "\t\t\t\t\tpickupInsertionIndex = i;"], [148, "\t\t\t\t\tdeliveryInsertionIndex = activities.size() - 1;"], [149, "\t\t\t\t}"], [150, "\t\t\t}"], [151, "\t\t\t//update prevAct and endTime"], [152, "\t\t\tdouble nextActArrTime = prevActEndTime + transportCosts.getTransportTime(prevAct.getLocationId(), activities.get(i).getLocationId(), prevActEndTime, newDriver, newVehicle);"], [153, "\t\t\tprevActEndTime = CalcUtils.getActivityEndTime(nextActArrTime, activities.get(i));"], [154, "\t\t\tprevAct = activities.get(i);"], [155, "\t\t}"], [156, "\t\t//endInsertion"], [157, "\t\tActivityInsertionCosts pickupAIC = calculate(insertionContext,prevAct,pickupShipment,end,prevActEndTime);"], [158, "\t\tif(pickupAIC != null){ //evaluate delivery"], [159, "\t\t\tTourActivity prevAct_deliveryLoop = pickupShipment;"], [160, "\t\t\tdouble shipmentPickupArrTime = prevActEndTime + transportCosts.getTransportTime(prevAct.getLocationId(), pickupShipment.getLocationId(), prevActEndTime, newDriver, newVehicle);"], [161, "\t\t\tdouble shipmentPickupEndTime = CalcUtils.getActivityEndTime(shipmentPickupArrTime, pickupShipment);"], [162, "\t\t\tdouble prevActEndTime_deliveryLoop = shipmentPickupEndTime;"], [163, ""], [164, "\t\t\tActivityInsertionCosts deliveryAIC = calculate(insertionContext,prevAct_deliveryLoop,deliveryShipment,end,prevActEndTime_deliveryLoop);"], [165, "\t\t\tif(deliveryAIC != null){"], [166, "\t\t\t\tdouble totalActivityInsertionCosts = pickupAIC.getAdditionalCosts() + deliveryAIC.getAdditionalCosts();"], [167, "\t\t\t\tif(totalActivityInsertionCosts < bestCost){"], [168, "\t\t\t\t\tbestCost = totalActivityInsertionCosts;"], [169, "\t\t\t\t\tpickupInsertionIndex = activities.size() - 1;"], [170, "\t\t\t\t\tdeliveryInsertionIndex = activities.size() - 1;"], [171, "\t\t\t\t}"], [172, "\t\t\t}"], [173, "\t\t}"], [174, ""], [175, "//\t\tfor(TourActivity nextAct : activities){"], [177, "//\t\t\t\tActivityInsertionCosts mc = calculate(insertionContext, prevAct, nextAct, deliveryAct2Insert, prevActEndTime);"], [186, "//\t\t\tdouble nextActArrTime = prevActEndTime + transportCosts.getTransportTime(prevAct.getLocationId(), nextAct.getLocationId(), prevActEndTime, newDriver, newVehicle);"], [189, "//\t\t\tprevActEndTime = nextActEndTime;"], [196, "//\t\t\tActivityInsertionCosts mc = calculate(insertionContext, prevAct, nextAct, deliveryAct2Insert, prevActEndTime);"], [205, ""], [206, "\t\tif(pickupInsertionIndex == InsertionData.NO_INDEX) {"], [207, "\t\t\treturn InsertionData.noInsertionFound();"], [208, "\t\t}"], [209, "\t\tInsertionData insertionData = new InsertionData(bestCost, pickupInsertionIndex, deliveryInsertionIndex, newVehicle, newDriver);"], [214, "\tpublic ActivityInsertionCosts calculate(InsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double departureTimeAtPrevAct) {"]], "deleted": [[30, "import basics.route.PickupShipment;"], [95, "\t\tActivityInsertionCosts bestMarginals = null;"], [102, "\t\tint insertionIndex = 0;"], [108, "//\t\tTourActivity prevAct = start;"], [109, "//\t\tdouble prevActStartTime = newVehicleDepartureTime;"], [110, "//\t\tint actIndex = 0;"], [111, "////\t\tcurrentRoute.getTourActivities().getActivities()."], [112, "//\t\tfor(int i=0)"], [113, "//\t\tfor(TourActivity nextAct : currentRoute.getTourActivities().getActivities()){"], [115, "//\t\t\t\tActivityInsertionCosts mc = calculate(insertionContext, prevAct, nextAct, deliveryAct2Insert, prevActStartTime);"], [124, "//\t\t\tdouble nextActArrTime = prevActStartTime + transportCosts.getTransportTime(prevAct.getLocationId(), nextAct.getLocationId(), prevActStartTime, newDriver, newVehicle);"], [127, "//\t\t\tprevActStartTime = nextActEndTime;"], [134, "//\t\t\tActivityInsertionCosts mc = calculate(insertionContext, prevAct, nextAct, deliveryAct2Insert, prevActStartTime);"], [143, "//"], [144, "//\t\tif(insertionIndex == InsertionData.NO_INDEX) {"], [145, "//\t\t\treturn InsertionData.noInsertionFound();"], [146, "//\t\t}"], [147, "\t\tInsertionData insertionData = new InsertionData(bestCost, InsertionData.NO_INDEX, insertionIndex, newVehicle, newDriver);"], [149, "\t\tinsertionData.setAdditionalTime(bestMarginals.getAdditionalTime());"], [153, "\tpublic ActivityInsertionCosts calculate(InsertionContext iFacts, TourActivity prevAct, TourActivity nextAct, TourActivity newAct, double departureTimeAtPrevAct) {"]]}, "num_lines_added": 81, "num_lines_removed": 20}