  private void verifyNode(Node node) {
    if (node == null)
      return;

    // Pre-order traversal.
    verifyNodes(node.children());

    if (node instanceof Call) {
      Call call = (Call) node;

      // Skip resolving property derefs.
      if (call.isJavaStatic() || call.isPostfix())
        return;

      verifyNode(call.args());

      FunctionDecl targetFunction = resolveCall(call.name);
      if (targetFunction == null)
        addError("Cannot resolve function: " + call.name, call.sourceLine, call.sourceColumn);
      else {
        // Check that the args are correct.
        int targetArgs = targetFunction.arguments().children().size();
        int calledArgs = call.args().children().size();
        if (calledArgs != targetArgs)
          addError("Incorrect number of arguments to: " + targetFunction.name()
              + " (expected " + targetArgs + ", found "
              + calledArgs + ")",
              call.sourceLine, call.sourceColumn);
      }

    } else if (node instanceof PatternRule) {
      PatternRule patternRule = (PatternRule) node;
      verifyNode(patternRule.rhs);

      // Some sanity checking of pattern rules.
      FunctionDecl function = functionStack.peek().function;
      int argsSize = function.arguments().children().size();
      int patternsSize = patternRule.patterns.size();
      if (patternsSize != argsSize)
        addError("Incorrect number of patterns in: '" + function.name() + "' (expected " + argsSize
            + " found " + patternsSize + ")", patternRule.sourceLine, patternRule.sourceColumn);

    } else if (node instanceof Guard) {
      Guard guard = (Guard) node;
      verifyNode(guard.expression);
      verifyNode(guard.line);
    } else if (node instanceof Variable) {
      Variable var = (Variable) node;
      if (!resolveVar(var.name))
        addError("Cannot resolve symbol: " + var.name, var.sourceLine, var.sourceColumn);
    } else if (node instanceof ConstructorCall) {
      ConstructorCall call = (ConstructorCall) node;
      if (!resolveType(call))
        addError("Cannot resolve type (either as loop or Java): "
            + (call.modulePart == null ? "" : call.modulePart) + call.name,
            call.sourceLine, call.sourceColumn);
    } else if (node instanceof Assignment) {
      // Make sure that you cannot reassign function arguments.
      Assignment assignment = (Assignment) node;
      if (assignment.lhs() instanceof Variable) {
        Variable lhs = (Variable) assignment.lhs();

        FunctionContext functionContext = functionStack.peek();
        for (Node argument : functionContext.function.arguments().children()) {
          ArgDeclList.Argument arg = (ArgDeclList.Argument) argument;
          if (arg.name().equals(lhs.name))
            addError("Illegal argument reassignment (declare a local variable instead)",
                lhs.sourceLine, lhs.sourceColumn);
        }

//        verifyNode(assignment.rhs());
      }
    }
  }