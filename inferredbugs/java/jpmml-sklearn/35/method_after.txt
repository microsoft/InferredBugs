 @Override
	public List<Feature> encodeFeatures(List<Feature> features, SkLearnEncoder encoder){
		Object func = getFunc();

		if(func == null){
			return features;
		}

		UFunc ufunc;

		try {
			ufunc = (UFunc)func;
		} catch(ClassCastException cce){
			throw new IllegalArgumentException("The function object (" + ClassDictUtil.formatClass(func) + ") is not a Numpy universal function", cce);
		}

		List<Feature> result = new ArrayList<>();

		for(int i = 0; i < features.size(); i++){
			ContinuousFeature continuousFeature = (features.get(i)).toContinuousFeature();

			FieldName name = FeatureUtil.createName(ufunc.getName(), continuousFeature);

			DerivedField derivedField = encoder.getDerivedField(name);
			if(derivedField == null){
				Expression expression = encodeUFunc(ufunc, continuousFeature.ref());

				derivedField = encoder.createDerivedField(name, expression);
			}

			result.add(new ContinuousFeature(encoder, derivedField));
		}

		return result;
	}