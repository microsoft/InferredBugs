 static
	Expression encodeUFunc(UFunc ufunc, FieldRef fieldRef){
		String name = ufunc.getName();

		switch(name){
			case "absolute":
				return PMMLUtil.createApply("abs", fieldRef);
			case "ceil":
			case "exp":
			case "floor":
				return PMMLUtil.createApply(name, fieldRef);
			case "log":
				return PMMLUtil.createApply("ln", fieldRef);
			case "log10":
				return PMMLUtil.createApply(name, fieldRef);
			case "negative":
				return PMMLUtil.createApply("*", PMMLUtil.createConstant(-1), fieldRef);
			case "reciprocal":
				return PMMLUtil.createApply("/", PMMLUtil.createConstant(1), fieldRef);
			case "rint":
				return PMMLUtil.createApply("round", fieldRef);
			case "sign":
				return PMMLUtil.createApply("if", PMMLUtil.createApply("lessThan", fieldRef, PMMLUtil.createConstant(0)),
					PMMLUtil.createConstant(-1), // x < 0
					PMMLUtil.createApply("if", PMMLUtil.createApply("greaterThan", fieldRef, PMMLUtil.createConstant(0)),
						PMMLUtil.createConstant(+1), // x > 0
						PMMLUtil.createConstant(0) // x == 0
					)
				);
			case "sqrt":
				return PMMLUtil.createApply(name, fieldRef);
			case "square":
				return PMMLUtil.createApply("*", fieldRef, fieldRef);
			default:
				throw new IllegalArgumentException(name);
		}
	}