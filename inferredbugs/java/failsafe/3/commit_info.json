{"hash": "e950a361b0b7c21770a9bf49d6254f828a68355e", "message": "Invocation -> execution doc and variable renaming.", "file_num_lines": 159, "diff_parsed": {"added": [[22, "  AsyncExecution exec;"], [37, "    exec = new AsyncExecution(callable, new RetryPolicy(), scheduler, future, null);"], [40, "    exec.complete();"], [43, "    assertEquals(exec.getExecutions(), 1);"], [44, "    assertTrue(exec.isComplete());"], [45, "    assertNull(exec.getLastResult());"], [46, "    assertNull(exec.getLastFailure());"], [52, "    exec = new AsyncExecution(callable, new RetryPolicy().retryWhen(null), scheduler, future, null);"], [55, "    assertFalse(exec.complete(null));"], [56, "    assertTrue(exec.complete(true));"], [59, "    assertEquals(exec.getExecutions(), 1);"], [60, "    assertTrue(exec.isComplete());"], [61, "    assertEquals(exec.getLastResult(), Boolean.TRUE);"], [62, "    assertNull(exec.getLastFailure());"], [67, "    exec = new AsyncExecution(callable, new RetryPolicy(), scheduler, future, null);"], [68, "    exec.retryOn(e);"], [69, "    exec.prepare();"], [70, "    exec.retryOn(e);"], [71, "    assertEquals(exec.getExecutions(), 2);"], [76, "    exec = new AsyncExecution(callable, new RetryPolicy().retryWhen(null), scheduler, future, null);"], [79, "    assertFalse(exec.complete(null));"], [80, "    assertTrue(exec.retryFor(null));"], [81, "    exec.prepare();"], [82, "    assertFalse(exec.retryFor(1));"], [85, "    assertEquals(exec.getExecutions(), 2);"], [86, "    assertTrue(exec.isComplete());"], [87, "    assertEquals(exec.getLastResult(), Integer.valueOf(1));"], [88, "    assertNull(exec.getLastFailure());"], [93, "    exec = new AsyncExecution(callable, new RetryPolicy().retryWhen(null).withMaxRetries(1), scheduler, future, null);"], [97, "    assertFalse(exec.complete(null));"], [98, "    exec.prepare();"], [99, "    assertTrue(exec.retryFor(null));"], [100, "    exec.prepare();"], [101, "    assertFalse(exec.retryFor(null));"], [104, "    assertEquals(exec.getExecutions(), 2);"], [105, "    assertTrue(exec.isComplete());"], [106, "    assertNull(exec.getLastResult());"], [107, "    assertNull(exec.getLastFailure());"], [114, "    exec = new AsyncExecution(callable, new RetryPolicy().retryWhen(null), scheduler, future, null);"], [117, "    assertFalse(exec.complete(null));"], [118, "    assertTrue(exec.retryFor(null, null));"], [119, "    exec.prepare();"], [120, "    assertTrue(exec.retryFor(1, new IllegalArgumentException()));"], [121, "    exec.prepare();"], [122, "    assertFalse(exec.retryFor(1, null));"], [125, "    assertEquals(exec.getExecutions(), 3);"], [126, "    assertTrue(exec.isComplete());"], [127, "    assertEquals(exec.getLastResult(), Integer.valueOf(1));"], [128, "    assertNull(exec.getLastFailure());"], [133, "    exec = new AsyncExecution(callable, new RetryPolicy().retryWhen(null).withMaxRetries(1), scheduler, future, null);"], [137, "    assertFalse(exec.complete(null));"], [138, "    assertTrue(exec.retryFor(null, e));"], [139, "    exec.prepare();"], [140, "    assertFalse(exec.retryFor(null, e));"], [143, "    assertEquals(exec.getExecutions(), 2);"], [144, "    assertTrue(exec.isComplete());"], [145, "    assertNull(exec.getLastResult());"], [146, "    assertEquals(exec.getLastFailure(), e);"], [154, "    exec = new AsyncExecution(callable, new RetryPolicy().retryOn(IllegalArgumentException.class), scheduler, future,"], [158, "    assertTrue(exec.retryOn(new IllegalArgumentException()));"], [159, "    exec.prepare();"], [160, "    assertFalse(exec.retryOn(e));"], [163, "    assertEquals(exec.getExecutions(), 2);"], [164, "    assertTrue(exec.isComplete());"], [165, "    assertNull(exec.getLastResult());"], [166, "    assertEquals(exec.getLastFailure(), e);"], [171, "    exec = new AsyncExecution(callable, new RetryPolicy().withMaxRetries(1), scheduler, future, null);"], [175, "    assertTrue(exec.retryOn(e));"], [176, "    exec.prepare();"], [177, "    assertFalse(exec.retryOn(e));"], [180, "    assertEquals(exec.getExecutions(), 2);"], [181, "    assertTrue(exec.isComplete());"], [182, "    assertNull(exec.getLastResult());"], [183, "    assertEquals(exec.getLastFailure(), e);"], [190, "    exec = new AsyncExecution(callable, new RetryPolicy(), scheduler, future, null);"], [191, "    exec.complete();"], [192, "    exec.retryOn(e);"], [197, "    exec = new AsyncExecution(callable, new RetryPolicy(), scheduler, future, null);"], [200, "    exec.completeOrRetry(null, e);"], [201, "    assertFalse(exec.isComplete());"], [202, "    exec.completeOrRetry(null, null);"], [205, "    assertEquals(exec.getExecutions(), 2);"], [206, "    assertTrue(exec.isComplete());"], [207, "    assertNull(exec.getLastResult());"], [208, "    assertNull(exec.getLastFailure());"]], "deleted": [[22, "  AsyncExecution inv;"], [37, "    inv = new AsyncExecution(callable, new RetryPolicy(), scheduler, future, null);"], [40, "    inv.complete();"], [43, "    assertEquals(inv.getExecutions(), 1);"], [44, "    assertTrue(inv.isComplete());"], [45, "    assertNull(inv.getLastResult());"], [46, "    assertNull(inv.getLastFailure());"], [52, "    inv = new AsyncExecution(callable, new RetryPolicy().retryWhen(null), scheduler, future, null);"], [55, "    assertFalse(inv.complete(null));"], [56, "    assertTrue(inv.complete(true));"], [59, "    assertEquals(inv.getExecutions(), 1);"], [60, "    assertTrue(inv.isComplete());"], [61, "    assertEquals(inv.getLastResult(), Boolean.TRUE);"], [62, "    assertNull(inv.getLastFailure());"], [67, "    inv = new AsyncExecution(callable, new RetryPolicy(), scheduler, future, null);"], [68, "    inv.retryOn(e);"], [69, "    inv.prepare();"], [70, "    inv.retryOn(e);"], [71, "    assertEquals(inv.getExecutions(), 2);"], [76, "    inv = new AsyncExecution(callable, new RetryPolicy().retryWhen(null), scheduler, future, null);"], [79, "    assertFalse(inv.complete(null));"], [80, "    assertTrue(inv.retryFor(null));"], [81, "    inv.prepare();"], [82, "    assertFalse(inv.retryFor(1));"], [85, "    assertEquals(inv.getExecutions(), 2);"], [86, "    assertTrue(inv.isComplete());"], [87, "    assertEquals(inv.getLastResult(), Integer.valueOf(1));"], [88, "    assertNull(inv.getLastFailure());"], [93, "    inv = new AsyncExecution(callable, new RetryPolicy().retryWhen(null).withMaxRetries(1), scheduler, future, null);"], [97, "    assertFalse(inv.complete(null));"], [98, "    inv.prepare();"], [99, "    assertTrue(inv.retryFor(null));"], [100, "    inv.prepare();"], [101, "    assertFalse(inv.retryFor(null));"], [104, "    assertEquals(inv.getExecutions(), 2);"], [105, "    assertTrue(inv.isComplete());"], [106, "    assertNull(inv.getLastResult());"], [107, "    assertNull(inv.getLastFailure());"], [114, "    inv = new AsyncExecution(callable, new RetryPolicy().retryWhen(null), scheduler, future, null);"], [117, "    assertFalse(inv.complete(null));"], [118, "    assertTrue(inv.retryFor(null, null));"], [119, "    inv.prepare();"], [120, "    assertTrue(inv.retryFor(1, new IllegalArgumentException()));"], [121, "    inv.prepare();"], [122, "    assertFalse(inv.retryFor(1, null));"], [125, "    assertEquals(inv.getExecutions(), 3);"], [126, "    assertTrue(inv.isComplete());"], [127, "    assertEquals(inv.getLastResult(), Integer.valueOf(1));"], [128, "    assertNull(inv.getLastFailure());"], [133, "    inv = new AsyncExecution(callable, new RetryPolicy().retryWhen(null).withMaxRetries(1), scheduler, future, null);"], [137, "    assertFalse(inv.complete(null));"], [138, "    assertTrue(inv.retryFor(null, e));"], [139, "    inv.prepare();"], [140, "    assertFalse(inv.retryFor(null, e));"], [143, "    assertEquals(inv.getExecutions(), 2);"], [144, "    assertTrue(inv.isComplete());"], [145, "    assertNull(inv.getLastResult());"], [146, "    assertEquals(inv.getLastFailure(), e);"], [154, "    inv = new AsyncExecution(callable, new RetryPolicy().retryOn(IllegalArgumentException.class), scheduler, future,"], [158, "    assertTrue(inv.retryOn(new IllegalArgumentException()));"], [159, "    inv.prepare();"], [160, "    assertFalse(inv.retryOn(e));"], [163, "    assertEquals(inv.getExecutions(), 2);"], [164, "    assertTrue(inv.isComplete());"], [165, "    assertNull(inv.getLastResult());"], [166, "    assertEquals(inv.getLastFailure(), e);"], [171, "    inv = new AsyncExecution(callable, new RetryPolicy().withMaxRetries(1), scheduler, future, null);"], [175, "    assertTrue(inv.retryOn(e));"], [176, "    inv.prepare();"], [177, "    assertFalse(inv.retryOn(e));"], [180, "    assertEquals(inv.getExecutions(), 2);"], [181, "    assertTrue(inv.isComplete());"], [182, "    assertNull(inv.getLastResult());"], [183, "    assertEquals(inv.getLastFailure(), e);"], [190, "    inv = new AsyncExecution(callable, new RetryPolicy(), scheduler, future, null);"], [191, "    inv.complete();"], [192, "    inv.retryOn(e);"], [197, "    inv = new AsyncExecution(callable, new RetryPolicy(), scheduler, future, null);"], [200, "    inv.completeOrRetry(null, e);"], [201, "    assertFalse(inv.isComplete());"], [202, "    inv.completeOrRetry(null, null);"], [205, "    assertEquals(inv.getExecutions(), 2);"], [206, "    assertTrue(inv.isComplete());"], [207, "    assertNull(inv.getLastResult());"], [208, "    assertNull(inv.getLastFailure());"]]}, "num_lines_added": 85, "num_lines_removed": 85}