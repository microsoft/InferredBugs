{"hash": "85872eec1909282da3275f2d3b71c8850761cb7c", "message": "Changed SubscriptionsStore overall tree (ones based on clientID) operations to copy all the tree", "file_num_lines": 282, "diff_parsed": {"added": [[67, "        @Override"], [86, ""], [87, "        @Override"], [95, "        private List<Subscription> m_allSubscriptions = new ArrayList<>();"], [97, "        @Override"], [101, ""], [102, "        @Override"], [143, "        LOG.debug(\"root ref {}, original root was {}\", couple.root, oldRoot);"], [187, "        TreeNode oldRoot;"], [188, "        NodeCouple couple;"], [189, "        do {"], [190, "            oldRoot = subscriptions.get();"], [191, "            couple = recreatePath(topic, oldRoot);"], [192, ""], [193, "            //do the job"], [194, "            //search for the subscription to remove"], [195, "            Subscription toBeRemoved = null;"], [196, "            for (Subscription sub : couple.createdNode.subscriptions()) {"], [197, "                if (sub.topicFilter.equals(topic) && sub.getClientId().equals(clientID)) {"], [198, "                    toBeRemoved = sub;"], [199, "                    break;"], [200, "                }"], [202, ""], [203, "            if (toBeRemoved != null) {"], [204, "                couple.createdNode.subscriptions().remove(toBeRemoved);"], [205, "            }"], [206, "            //spin lock repeating till we can, swap root, if can't swap just re-do the operation"], [207, "        } while(!subscriptions.compareAndSet(oldRoot, couple.root));"], [224, "     * Visit the topics tree to remove matching subscriptions with clientID."], [225, "     * It's a mutating structure operation so create a new subscription tree (partial or total)."], [228, "        TreeNode oldRoot;"], [229, "        TreeNode newRoot;"], [230, "        do {"], [231, "            oldRoot = subscriptions.get();"], [232, "            newRoot = oldRoot.removeClientSubscriptions(clientID);"], [233, "            //spin lock repeating till we can, swap root, if can't swap just re-do the operation"], [234, "        } while(!subscriptions.compareAndSet(oldRoot, newRoot));"], [239, "    /**"], [240, "     * Visit the topics tree to deactivate matching subscriptions with clientID."], [241, "     * It's a mutating structure operation so create a new subscription tree (partial or total)."], [242, "     */"], [244, "        LOG.debug(\"Disactivating subscriptions for clientID <{}>\", clientID);"], [245, "        TreeNode oldRoot;"], [246, "        TreeNode newRoot;"], [247, "        do {"], [248, "            oldRoot = subscriptions.get();"], [249, "            newRoot = oldRoot.deactivate(clientID);"], [250, "            //spin lock repeating till we can, swap root, if can't swap just re-do the operation"], [251, "        } while(!subscriptions.compareAndSet(oldRoot, newRoot));"], [252, ""], [254, "        Set<Subscription> subs = newRoot.findAllByClientID(clientID);"], [258, "    /**"], [259, "     * Visit the topics tree to activate matching subscriptions with clientID."], [260, "     * It's a mutating structure operation so create a new subscription tree (partial or total)."], [261, "     */"], [264, "        TreeNode oldRoot;"], [265, "        TreeNode newRoot;"], [266, "        do {"], [267, "            oldRoot = subscriptions.get();"], [268, "            newRoot = oldRoot.activate(clientID);"], [269, "            //spin lock repeating till we can, swap root, if can't swap just re-do the operation"], [270, "        } while(!subscriptions.compareAndSet(oldRoot, newRoot));"], [271, ""], [273, "        Set<Subscription> subs = newRoot.findAllByClientID(clientID);"]], "deleted": [[85, ""], [93, "        private List<Subscription> m_allSubscriptions = new ArrayList<Subscription>();"], [98, ""], [141, "    private TreeNode findMatchingNode(String topic) {"], [142, "        List<Token> tokens = new ArrayList<>();"], [143, "        try {"], [144, "            tokens = parseTopic(topic);"], [145, "        } catch (ParseException ex) {"], [146, "            //TODO handle the parse exception"], [147, "            LOG.error(null, ex);"], [148, "//            return;"], [149, "        }"], [150, ""], [151, "        TreeNode current = subscriptions.get();"], [152, "        for (Token token : tokens) {"], [153, "            TreeNode matchingChildren;"], [154, ""], [155, "            //check if a children with the same token already exists"], [156, "            if ((matchingChildren = current.childWithToken(token)) != null) {"], [157, "                current = matchingChildren;"], [158, "            } else {"], [159, "                //can't find any match"], [160, "                return null;"], [161, "            }"], [162, "        }"], [163, "        return current;"], [164, "    }"], [206, "        TreeNode matchNode = findMatchingNode(topic);"], [207, ""], [208, "        //search for the subscription to remove"], [209, "        Subscription toBeRemoved = null;"], [210, "        for (Subscription sub : matchNode.subscriptions()) {"], [211, "            if (sub.topicFilter.equals(topic) && sub.getClientId().equals(clientID)) {"], [212, "                toBeRemoved = sub;"], [213, "                break;"], [215, "        }"], [216, ""], [217, "        if (toBeRemoved != null) {"], [218, "            matchNode.subscriptions().remove(toBeRemoved);"], [219, "        }"], [231, "            //TODO modify the data structure"], [237, "     * Visit the topics tree to remove matching subscriptions with clientID"], [239, "    //TODO modify the data structure"], [241, "        subscriptions.get().removeClientSubscriptions(clientID);"], [246, "    //TODO modify the data structure"], [248, "        subscriptions.get().deactivate(clientID);"], [250, "        Set<Subscription> subs = subscriptions.get().findAllByClientID(clientID);"], [254, "    //TODO modify the data structure"], [257, "        subscriptions.get().activate(clientID);"], [259, "        Set<Subscription> subs = subscriptions.get().findAllByClientID(clientID);"]]}, "num_lines_added": 64, "num_lines_removed": 50}