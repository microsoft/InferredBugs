{"hash": "f4ec180d8572b8650ce64ce6e57e53899599799f", "message": "added config  options for authorizator_class and authenticator_class", "file_num_lines": 199, "diff_parsed": {"added": [[46, "import java.util.logging.Level;"], [47, "import org.eclipse.moquette.commons.Constants;"], [200, "        IAuthenticator authenticator = null;"], [201, ""], [202, "        String configPath = System.getProperty(\"moquette.path\", null);"], [203, "        String authenticatorClassName = props.getProperty(Constants.AUTHENTICATOR_CLASS_NAME, \"\");"], [204, ""], [205, "        if(!authenticatorClassName.isEmpty()) {"], [208, ""], [209, "                authenticator = this.getClass().getClassLoader()"], [210, "                        .loadClass(authenticatorClassName)"], [211, "                        .asSubclass(IAuthenticator.class)"], [212, "                        .newInstance();"], [213, ""], [214, "                LOG.info(\"Loaded custom authenticator {}\", authenticatorClassName);"], [215, ""], [216, "            } catch (InstantiationException | IllegalAccessException | ClassNotFoundException ex) {"], [217, "                LOG.error(\"Cannot load custom authenticator class \" + authenticatorClassName, ex);"], [218, "            }"], [219, ""], [220, "        }"], [221, ""], [222, "        if(authenticator == null) {"], [223, "            String passwdPath = props.getProperty(PASSWORD_FILE_PROPERTY_NAME, \"\");"], [224, "            if (passwdPath.isEmpty()) {"], [225, "                authenticator = new AcceptAllAuthenticator();"], [226, "            } else {"], [227, "                authenticator = new FileAuthenticator(configPath, passwdPath);"], [230, ""], [231, ""], [232, "        IAuthorizator authorizator = null;"], [234, "        String authorizatorClassName = props.getProperty(Constants.AUTHORIZATOR_CLASS_NAME, \"\");"], [235, "        if(!authorizatorClassName.isEmpty()) {"], [236, "            try {"], [237, ""], [238, "                authorizator = this.getClass().getClassLoader()"], [239, "                        .loadClass(authorizatorClassName)"], [240, "                        .asSubclass(IAuthorizator.class)"], [241, "                        .newInstance();"], [242, ""], [243, "                LOG.info(\"Loaded custom authorizator {}\", authorizatorClassName);"], [244, ""], [245, "            } catch (InstantiationException | IllegalAccessException | ClassNotFoundException ex) {"], [246, "                LOG.error(\"Cannot load custom authorizator class \" + authenticatorClassName, ex);"], [247, "            }"], [248, "        }"], [249, ""], [250, "        if(authorizator == null) {"], [251, ""], [252, "            String aclFilePath = props.getProperty(ACL_FILE_PROPERTY_NAME, \"\");"], [253, "            if (aclFilePath != null && !aclFilePath.isEmpty()) {"], [254, "                authorizator = new DenyAllAuthorizator();"], [255, "                File aclFile = new File(configPath, aclFilePath);"], [256, "                try {"], [257, "                    authorizator = ACLFileParser.parse(aclFile);"], [258, "                } catch (ParseException pex) {"], [259, "                    LOG.error(String.format(\"Format error in parsing acl file %s\", aclFile), pex);"], [260, "                }"], [261, "                LOG.info(\"Using acl file defined at path {}\", aclFilePath);"], [262, "            } else {"], [263, "                authorizator = new PermitAllAuthorizator();"], [264, "                LOG.info(\"Starting without ACL definition\");"], [265, "            }"], [266, ""], [267, "        }"], [268, ""]], "deleted": [[198, "        String passwdPath = props.getProperty(PASSWORD_FILE_PROPERTY_NAME, \"\");"], [199, "        String configPath = System.getProperty(\"moquette.path\", null);"], [200, "        IAuthenticator authenticator;"], [201, "        if (passwdPath.isEmpty()) {"], [202, "            authenticator = new AcceptAllAuthenticator();"], [203, "        } else {"], [204, "            authenticator = new FileAuthenticator(configPath, passwdPath);"], [205, "        }"], [207, "        String aclFilePath = props.getProperty(ACL_FILE_PROPERTY_NAME, \"\");"], [208, "        IAuthorizator authorizator;"], [209, "        if (aclFilePath != null && !aclFilePath.isEmpty()) {"], [210, "            authorizator = new DenyAllAuthorizator();"], [211, "            File aclFile = new File(configPath, aclFilePath);"], [213, "                authorizator = ACLFileParser.parse(aclFile);"], [214, "            } catch (ParseException pex) {"], [215, "                LOG.error(String.format(\"Format error in parsing acl file %s\", aclFile), pex);"], [217, "            LOG.info(\"Using acl file defined at path {}\", aclFilePath);"], [218, "        } else {"], [219, "            authorizator = new PermitAllAuthorizator();"], [220, "            LOG.info(\"Starting without ACL definition\");"]]}, "num_lines_added": 66, "num_lines_removed": 20}