    private void processInit(Properties props) {
        benchmarkEnabled = Boolean.parseBoolean(System.getProperty("moquette.processor.benchmark", "false"));

        //TODO use a property to select the storage path
        MapDBPersistentStore mapStorage = new MapDBPersistentStore(props.getProperty(PERSISTENT_STORE_PROPERTY_NAME, ""));
        m_storageService = mapStorage;
        m_sessionsStore = mapStorage;

        m_storageService.initStore();
        
        //List<Subscription> storedSubscriptions = m_sessionsStore.listAllSubscriptions();
        //subscriptions.init(storedSubscriptions);
        subscriptions.init(m_sessionsStore);

        String passwdPath = props.getProperty(PASSWORD_FILE_PROPERTY_NAME, "");
        String configPath = System.getProperty("moquette.path", null);
        IAuthenticator authenticator;
        if (passwdPath.isEmpty()) {
            authenticator = new AcceptAllAuthenticator();
        } else {
            authenticator = new FileAuthenticator(configPath, passwdPath);
        }

        String aclFilePath = props.getProperty(ACL_FILE_PROPERTY_NAME, "");
        IAuthorizator authorizator;
        if (aclFilePath != null && !aclFilePath.isEmpty()) {
            authorizator = new DenyAllAuthorizator();
            File aclFile = new File(configPath, aclFilePath);
            try {
                authorizator = ACLFileParser.parse(aclFile);
            } catch (ParseException pex) {
                LOG.error(String.format("Format error in parsing acl file %s", aclFile), pex);
            }
            LOG.info("Using acl file defined at path {}", aclFilePath);
        } else {
            authorizator = new PermitAllAuthorizator();
            LOG.info("Starting without ACL definition");
        }

        boolean allowAnonymous = Boolean.parseBoolean(props.getProperty(ALLOW_ANONYMOUS_PROPERTY_NAME, "true"));
        m_processor.init(subscriptions, m_storageService, m_sessionsStore, authenticator, allowAnonymous, authorizator);
    }