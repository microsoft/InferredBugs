{"hash": "96396394203ca1410aab015b406ba3d9b3c9d96b", "message": "Minor change, introduced a latch to fix threading problem in test unit", "file_num_lines": 291, "diff_parsed": {"added": [[23, "        public MqttMessage getMessage(boolean checkElapsed) {"], [25, "                boolean elapsed = !m_latch.await(1, TimeUnit.SECONDS);"], [26, "                if (elapsed && checkElapsed) {"], [27, "                    throw new IllegalStateException(\"Elapsed the timeout to get the result\");"], [28, "                }"], [89, "        File dbFile = new File(Server.STORAGE_FILE_PATH);"], [90, "        assertFalse(dbFile.exists());"], [91, ""], [110, "        assertFalse(dbFile.exists());"], [182, "        assertNull(m_callback.getMessage(false));"], [235, "        assertNull(m_callback.getMessage(false));"], [256, "        assertNull(m_callback.getMessage(false));"], [268, "        MqttMessage message = m_callback.getMessage(true);"], [269, "        assertEquals(\"Hello MQTT\", message.toString());"], [270, "        assertEquals(1, message.getQos());"], [287, "        assertEquals(\"Hello MQTT\", m_callback.getMessage(true).toString());"], [306, "        MqttMessage message = m_callback.getMessage(true);"], [307, "        assertNotNull(message);"], [308, "        assertEquals(\"Hello MQTT\", message.toString());"], [333, "        MqttMessage message = m_callback.getMessage(true);"], [334, "        assertEquals(\"Hello MQTT\", message.toString());"], [335, "        assertEquals(2, message.getQos());"], [353, "        MqttMessage message = m_callback.getMessage(true);"], [354, "        assertNotNull(message);"], [355, "        assertEquals(\"Hello MQTT\", message.toString());"], [372, "        MqttMessage message = m_callback.getMessage(true);"], [373, "        assertNotNull(message);"], [374, "        assertEquals(\"Hello MQTT 1\", message.toString());"], [384, "        message = m_callback.getMessage(true);"], [385, "        assertNotNull(message);"], [386, "        assertEquals(\"Hello MQTT 2\", message.toString());"]], "deleted": [[23, "        public MqttMessage getMessage() {"], [25, "                m_latch.await(1, TimeUnit.SECONDS);"], [175, "        assertNull(m_callback.getMessage());"], [228, "        assertNull(m_callback.getMessage());"], [249, "        assertNull(m_callback.getMessage());"], [261, "        assertEquals(\"Hello MQTT\", m_callback.getMessage().toString());"], [262, "        assertEquals(1, m_callback.getMessage().getQos());"], [279, "        assertEquals(\"Hello MQTT\", m_callback.getMessage().toString());"], [298, "        assertNotNull(m_callback.getMessage());"], [299, "        assertEquals(\"Hello MQTT\", m_callback.getMessage().toString());"], [324, "        assertEquals(\"Hello MQTT\", m_callback.getMessage().toString());"], [325, "        assertEquals(2, m_callback.getMessage().getQos());"], [343, "        assertNotNull(m_callback.getMessage());"], [344, "        assertEquals(\"Hello MQTT\", m_callback.getMessage().toString());"], [361, "        assertNotNull(m_callback.getMessage());"], [362, "        assertEquals(\"Hello MQTT 1\", m_callback.getMessage().toString());"], [372, "        assertNotNull(m_callback.getMessage());"], [373, "        assertEquals(\"Hello MQTT 2\", m_callback.getMessage().toString());"]]}, "num_lines_added": 31, "num_lines_removed": 18}