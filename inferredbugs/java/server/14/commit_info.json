{"hash": "dbe9c7bcaa179a4c4b5ca0633862b12e09f1a6eb", "message": "Added integration test to check firing of will message (issue #171)", "file_num_lines": 136, "diff_parsed": {"added": [[25, "import org.eclipse.paho.client.mqttv3.*;"], [51, "    AbstractMessage receivedMsg;"], [103, "        connect(willTestamentTopic, willTestamentMsg);"], [147, ""], [148, "    @Test"], [149, "    public void testWillMessageIsPublishedOnClientBadDisconnection() throws InterruptedException, MqttException {"], [150, "        LOG.info(\"*** testWillMessageIsPublishedOnClientBadDisconnection ***\");"], [151, "        String willTestamentTopic = \"/will/test\";"], [152, "        String willTestamentMsg = \"Bye bye\";"], [153, "        m_willSubscriber.connect();"], [154, "        m_willSubscriber.subscribe(willTestamentTopic, 0);"], [155, "        connect(willTestamentTopic, willTestamentMsg);"], [156, ""], [157, "        //kill will publisher"], [158, "        m_client.close();"], [159, ""], [160, "        //Verify will testament is published"], [161, "        MqttMessage receivedTestament = m_messageCollector.getMessage(1000);"], [162, "        assertEquals(willTestamentMsg, new String(receivedTestament.getPayload()));"], [163, "        m_willSubscriber.disconnect();"], [164, "    }"], [165, ""], [166, "    private void connect(String willTestamentTopic, String willTestamentMsg) throws InterruptedException {"], [167, "        final CountDownLatch latch = new CountDownLatch(1);"], [168, "        m_client.setCallback(new Client.ICallback() {"], [169, ""], [170, "            public void call(AbstractMessage msg) {"], [171, "                receivedMsg = msg;"], [172, "                latch.countDown();"], [173, "            }"], [174, "        });"], [175, ""], [176, "        int keepAlive = 2; //secs"], [177, "        ConnectMessage connectMessage = new ConnectMessage();"], [178, "        connectMessage.setProtocolVersion((byte) 3);"], [179, "        connectMessage.setClientID(\"FAKECLNT\");"], [180, "        connectMessage.setKeepAlive(keepAlive);"], [181, "        connectMessage.setWillFlag(true);"], [182, "        connectMessage.setWillMessage(willTestamentMsg.getBytes());"], [183, "        connectMessage.setWillTopic(willTestamentTopic);"], [184, "        connectMessage.setWillQos(QOSType.MOST_ONE.byteValue());"], [185, ""], [186, "        m_client.sendMessage(connectMessage);"], [187, ""], [188, "        latch.await(200, TimeUnit.MILLISECONDS);"], [189, ""], [190, "        assertTrue(\"conn-ack message is received\", this.receivedMsg instanceof ConnAckMessage);"], [191, "    }"], [192, ""]], "deleted": [[25, "import org.eclipse.paho.client.mqttv3.IMqttClient;"], [26, "import org.eclipse.paho.client.mqttv3.MqttClient;"], [27, "import org.eclipse.paho.client.mqttv3.MqttClientPersistence;"], [28, "import org.eclipse.paho.client.mqttv3.MqttMessage;"], [105, "        int keepAlive = 2; //secs"], [106, "        ConnectMessage connectMessage = new ConnectMessage();"], [107, "        connectMessage.setProtocolVersion((byte) 3);"], [108, "        connectMessage.setClientID(\"FAKECLNT\");"], [109, "        connectMessage.setKeepAlive(keepAlive);"], [110, "        connectMessage.setWillFlag(true);"], [111, "        connectMessage.setWillMessage(willTestamentMsg.getBytes());"], [112, "        connectMessage.setWillTopic(willTestamentTopic);"], [113, "        connectMessage.setWillQos(QOSType.MOST_ONE.byteValue());"], [114, ""], [115, "        //Execute"], [116, "        m_client.sendMessage(connectMessage);"], [123, "        if (msg == null) {"], [124, "            LOG.warn(\"testament message is null\");"], [125, "        }"], [134, "    AbstractMessage receivedMsg;"], [135, ""], [165, ""]]}, "num_lines_added": 49, "num_lines_removed": 22}