{"hash": "217e754de261044492f04298cfc7c170d1e085ad", "message": "Moved IoSessions management into the event loop", "file_num_lines": 106, "diff_parsed": {"added": [[25, "public class MQTTHandler extends IoHandlerAdapter/* implements INotifier*/ {"], [32, "//    Map<String, ConnectionDescriptor> m_clientIDs = new HashMap<String, ConnectionDescriptor>();"], [34, "//    private IAuthenticator m_authenticator;"], [69, "        m_messaging.connect(session, msg);"], [147, "//    public void setAuthenticator(IAuthenticator authenticator) {"], [148, "//        m_authenticator = authenticator;"], [149, "//    }"], [153, "//    public void notify(NotifyEvent evt) {"], [154, "//        LOG.debug(\"notify invoked with event \" + evt);"], [155, "//        String clientId = evt.getClientId();"], [156, "//        PublishMessage pubMessage = new PublishMessage();"], [157, "//        pubMessage.setRetainFlag(evt.isRetained());"], [158, "//        pubMessage.setTopicName(evt.getTopic());"], [159, "//        pubMessage.setQos(evt.getQos());"], [160, "//        pubMessage.setPayload(evt.getMessage());"], [161, "//        if (pubMessage.getQos() != QOSType.MOST_ONE) {"], [162, "//            pubMessage.setMessageID(evt.getMessageID());"], [163, "//        }"], [164, "//"], [165, "//        LOG.debug(\"notify invoked\");"], [166, "//        m_clientIDsLock.lock();"], [167, "//        try {"], [168, "//            assert m_clientIDs != null;"], [169, "//            LOG.debug(\"clientIDs are \" + m_clientIDs);"], [170, "//            assert m_clientIDs.get(clientId) != null;"], [171, "//            LOG.debug(\"Session for clientId \" + clientId + \" is \" + m_clientIDs.get(clientId).getSession());"], [172, "//            m_clientIDs.get(clientId).getSession().write(pubMessage);"], [173, "//        }catch(Throwable t) {"], [174, "//            LOG.error(null, t);"], [175, "//        } finally {"], [176, "//            m_clientIDsLock.unlock();"], [177, "//        }"], [178, "//    }"], [179, "//"], [180, "//    public void disconnect(IoSession session) {"], [181, "//        String clientID = (String) session.getAttribute(Constants.ATTR_CLIENTID);"], [182, "//        m_clientIDsLock.lock();"], [183, "//        try {"], [184, "//            m_clientIDs.remove(clientID);"], [185, "//        } finally {"], [186, "//            m_clientIDsLock.unlock();"], [187, "//        }"], [188, "//        session.close(true);"], [189, "//    }"], [190, "//"], [191, "//    public void sendPubAck(PubAckEvent evt) {"], [192, "//        LOG.debug(\"sendPubAck invoked\");"], [193, "//"], [194, "//        String clientId = evt.getClientID();"], [195, "//"], [196, "//        PubAckMessage pubAckMessage = new PubAckMessage();"], [197, "//        pubAckMessage.setMessageID(evt.getMessageId());"], [198, "//"], [199, "//        m_clientIDsLock.lock();"], [200, "//        try {"], [201, "//            assert m_clientIDs != null;"], [202, "//            LOG.debug(\"clientIDs are \" + m_clientIDs);"], [203, "//            assert m_clientIDs.get(clientId) != null;"], [204, "//            LOG.debug(\"Session for clientId \" + clientId + \" is \" + m_clientIDs.get(clientId).getSession());"], [205, "//            m_clientIDs.get(clientId).getSession().write(pubAckMessage);"], [206, "//        }catch(Throwable t) {"], [207, "//            LOG.error(null, t);"], [208, "//        } finally {"], [209, "//            m_clientIDsLock.unlock();"], [210, "//        }"], [211, "//    }"]], "deleted": [[25, "public class MQTTHandler extends IoHandlerAdapter implements INotifier {"], [32, "    Map<String, ConnectionDescriptor> m_clientIDs = new HashMap<String, ConnectionDescriptor>();"], [34, "    private IAuthenticator m_authenticator;"], [68, "        if (msg.getProcotolVersion() != 0x03) {"], [69, "            ConnAckMessage badProto = new ConnAckMessage();"], [70, "            badProto.setReturnCode(ConnAckMessage.UNNACEPTABLE_PROTOCOL_VERSION);"], [71, "            session.write(badProto);"], [72, "            session.close(false);"], [73, "            return;"], [74, "        }"], [75, ""], [76, "        if (msg.getClientID() == null || msg.getClientID().length() > 23) {"], [77, "            ConnAckMessage okResp = new ConnAckMessage();"], [78, "            okResp.setReturnCode(ConnAckMessage.IDENTIFIER_REJECTED);"], [79, "            session.write(okResp);"], [80, "            return;"], [81, "        }"], [82, ""], [83, "        m_clientIDsLock.lock();"], [84, "        try {"], [85, "            //if an old client with the same ID already exists close its session."], [86, "            if (m_clientIDs.containsKey(msg.getClientID())) {"], [87, "                //clean the subscriptions if the old used a cleanSession = true"], [88, "                IoSession oldSession = m_clientIDs.get(msg.getClientID()).getSession();"], [89, "                boolean cleanSession = (Boolean) oldSession.getAttribute(Constants.CLEAN_SESSION);"], [90, "                if (cleanSession) {"], [91, "                    //cleanup topic subscriptions"], [92, "                    m_messaging.removeSubscriptions(msg.getClientID());"], [93, "                }"], [94, ""], [95, "                m_clientIDs.get(msg.getClientID()).getSession().close(false);"], [96, "            }"], [97, ""], [98, "            ConnectionDescriptor connDescr = new ConnectionDescriptor(msg.getClientID(), session, msg.isCleanSession());"], [99, "            m_clientIDs.put(msg.getClientID(), connDescr);"], [100, "        } finally {"], [101, "            m_clientIDsLock.unlock();"], [102, "        }"], [103, ""], [104, "        int keepAlive = msg.getKeepAlive();"], [105, "        session.setAttribute(\"keepAlive\", keepAlive);"], [106, "        session.setAttribute(Constants.CLEAN_SESSION, msg.isCleanSession());"], [107, "        //used to track the client in the subscription and publishing phases."], [108, "        session.setAttribute(Constants.ATTR_CLIENTID, msg.getClientID());"], [109, ""], [110, "        session.getConfig().setIdleTime(IdleStatus.READER_IDLE, Math.round(keepAlive * 1.5f));"], [111, ""], [112, "        //Handle will flag"], [113, "        if (msg.isWillFlag()) {"], [114, "            QOSType willQos = QOSType.values()[msg.getWillQos()];"], [115, "            m_messaging.publish(msg.getWillTopic(), msg.getWillMessage().getBytes(),"], [116, "                    willQos, msg.isWillRetain(), msg.getClientID(), session);"], [117, "        }"], [118, ""], [119, "        //handle user authentication"], [120, "        if (msg.isUserFlag()) {"], [121, "            String pwd = null;"], [122, "            if (msg.isPasswordFlag()) {"], [123, "                pwd = msg.getPassword();"], [124, "            }"], [125, "            if (!m_authenticator.checkValid(msg.getUsername(), pwd)) {"], [126, "                ConnAckMessage okResp = new ConnAckMessage();"], [127, "                okResp.setReturnCode(ConnAckMessage.BAD_USERNAME_OR_PASSWORD);"], [128, "                session.write(okResp);"], [129, "                return;"], [130, "            }"], [131, "        }"], [133, "        //handle clean session flag"], [134, "        if (msg.isCleanSession()) {"], [135, "            //remove all prev subscriptions"], [136, "            //cleanup topic subscriptions"], [137, "            m_messaging.removeSubscriptions(msg.getClientID());"], [138, "        }  else {"], [139, "            //force the republish of stored QoS1 and QoS2"], [140, "            m_messaging.republishStored(msg.getClientID());"], [141, "        }"], [142, ""], [143, "        ConnAckMessage okResp = new ConnAckMessage();"], [144, "        okResp.setReturnCode(ConnAckMessage.CONNECTION_ACCEPTED);"], [145, "        session.write(okResp);"], [223, "    public void setAuthenticator(IAuthenticator authenticator) {"], [224, "        m_authenticator = authenticator;"], [225, "    }"], [226, ""], [229, "    public void notify(NotifyEvent evt) {"], [230, "        LOG.debug(\"notify invoked with event \" + evt);"], [231, "        String clientId = evt.getClientId();"], [232, "        PublishMessage pubMessage = new PublishMessage();"], [233, "        pubMessage.setRetainFlag(evt.isRetained());"], [234, "        pubMessage.setTopicName(evt.getTopic());"], [235, "        pubMessage.setQos(evt.getQos());"], [236, "        pubMessage.setPayload(evt.getMessage());"], [237, "        if (pubMessage.getQos() != QOSType.MOST_ONE) {"], [238, "            pubMessage.setMessageID(evt.getMessageID());"], [239, "        }"], [240, ""], [241, "        LOG.debug(\"notify invoked\");"], [242, "        m_clientIDsLock.lock();"], [243, "        try {"], [244, "            assert m_clientIDs != null;"], [245, "            LOG.debug(\"clientIDs are \" + m_clientIDs);"], [246, "            assert m_clientIDs.get(clientId) != null;"], [247, "            LOG.debug(\"Session for clientId \" + clientId + \" is \" + m_clientIDs.get(clientId).getSession());"], [248, "            m_clientIDs.get(clientId).getSession().write(pubMessage);"], [249, "        }catch(Throwable t) {"], [250, "            LOG.error(null, t);"], [251, "        } finally {"], [252, "            m_clientIDsLock.unlock();"], [253, "        }"], [254, "    }"], [256, "    public void disconnect(IoSession session) {"], [257, "        String clientID = (String) session.getAttribute(Constants.ATTR_CLIENTID);"], [258, "        m_clientIDsLock.lock();"], [259, "        try {"], [260, "            m_clientIDs.remove(clientID);"], [261, "        } finally {"], [262, "            m_clientIDsLock.unlock();"], [263, "        }"], [264, "        session.close(true);"], [265, "    }"], [266, ""], [267, "    public void sendPubAck(PubAckEvent evt) {"], [268, "        LOG.debug(\"sendPubAck invoked\");"], [269, ""], [270, "        String clientId = evt.getClientID();"], [271, ""], [272, "        PubAckMessage pubAckMessage = new PubAckMessage();"], [273, "        pubAckMessage.setMessageID(evt.getMessageId());"], [274, ""], [275, "        m_clientIDsLock.lock();"], [276, "        try {"], [277, "            assert m_clientIDs != null;"], [278, "            LOG.debug(\"clientIDs are \" + m_clientIDs);"], [279, "            assert m_clientIDs.get(clientId) != null;"], [280, "            LOG.debug(\"Session for clientId \" + clientId + \" is \" + m_clientIDs.get(clientId).getSession());"], [281, "            m_clientIDs.get(clientId).getSession().write(pubAckMessage);"], [282, "        }catch(Throwable t) {"], [283, "            LOG.error(null, t);"], [284, "        } finally {"], [285, "            m_clientIDsLock.unlock();"], [286, "        }"], [287, "    }"]]}, "num_lines_added": 66, "num_lines_removed": 142}