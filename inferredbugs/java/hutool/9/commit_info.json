{"hash": "d5506b7d9e9e19c343af7f101a6a5e0acb700d9c", "message": "fix code", "file_num_lines": 115, "diff_parsed": {"added": [[3, "import cn.hutool.core.io.IORuntimeException;"], [4, "import cn.hutool.core.io.IoUtil;"], [5, "import cn.hutool.core.util.StrUtil;"], [6, "import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;"], [7, "import org.bouncycastle.jce.ECNamedCurveTable;"], [8, "import org.bouncycastle.jce.ECPointUtil;"], [9, "import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;"], [10, "import org.bouncycastle.jce.spec.ECNamedCurveSpec;"], [11, "import org.bouncycastle.math.ec.ECCurve;"], [12, "import org.bouncycastle.util.io.pem.PemObject;"], [13, "import org.bouncycastle.util.io.pem.PemObjectGenerator;"], [14, "import org.bouncycastle.util.io.pem.PemReader;"], [15, "import org.bouncycastle.util.io.pem.PemWriter;"], [16, ""], [19, "import java.io.OutputStream;"], [20, "import java.io.Reader;"], [102, "\t\treturn (PrivateKey) readPemKey(pemStream);"], [113, "\t\treturn (PublicKey) readPemKey(pemStream);"], [120, "\t * @param pemKeyStream pem\u6d41"], [123, "\t * @deprecated \u8bf7\u4f7f\u7528{@link #readPemKey(InputStream)}"], [124, "\t */"], [125, "\t@Deprecated"], [126, "\tpublic static Key readKey(InputStream pemKeyStream) {"], [127, "\t\treturn readPemKey(pemKeyStream);"], [128, "\t}"], [129, ""], [130, "\t/**"], [131, "\t * \u4ecepem\u6587\u4ef6\u4e2d\u8bfb\u53d6\u516c\u94a5\u6216\u79c1\u94a5<br>"], [132, "\t * \u6839\u636e\u7c7b\u578b\u8fd4\u56de{@link PublicKey} \u6216\u8005 {@link PrivateKey}"], [133, "\t *"], [134, "\t * @param keyStream pem\u6d41"], [135, "\t * @return {@link Key}\uff0cnull\u8868\u793a\u65e0\u6cd5\u8bc6\u522b\u7684\u5bc6\u94a5\u7c7b\u578b"], [136, "\t * @since 5.1.6"], [138, "\tpublic static Key readPemKey(InputStream keyStream) {"], [141, "\t\tif (StrUtil.isNotBlank(type)) {"], [142, "\t\t\tif (type.endsWith(\"PRIVATE KEY\")) {"], [143, "\t\t\t\treturn KeyUtil.generateRSAPrivateKey(object.getContent());"], [144, "\t\t\t} else if (type.endsWith(\"PUBLIC KEY\")) {"], [145, "\t\t\t\treturn KeyUtil.generateRSAPublicKey(object.getContent());"], [146, "\t\t\t} else if (type.endsWith(\"CERTIFICATE\")) {"], [147, "\t\t\t\treturn KeyUtil.readPublicKeyFromCert(IoUtil.toStream(object.getContent()));"], [148, "\t\t\t}"], [150, ""], [151, "\t\t//\u8868\u793a\u65e0\u6cd5\u8bc6\u522b\u7684\u5bc6\u94a5\u7c7b\u578b"], [152, "\t\treturn null;"], [161, "\t * @deprecated \u4f7f\u7528{@link #readPem(InputStream)}"], [163, "\t@Deprecated"], [165, "\t\treturn readPem(keyStream);"], [166, "\t}"], [167, ""], [168, "\t/**"], [169, "\t * \u4ecepem\u6d41\u4e2d\u8bfb\u53d6\u516c\u94a5\u6216\u79c1\u94a5"], [170, "\t *"], [171, "\t * @param keyStream pem\u6d41"], [172, "\t * @return \u5bc6\u94a5bytes"], [173, "\t * @since 5.1.6"], [174, "\t */"], [175, "\tpublic static byte[] readPem(InputStream keyStream) {"], [191, "\t\treturn readPemObject(IoUtil.getUtf8Reader(keyStream));"], [192, "\t}"], [193, ""], [194, "\t/**"], [195, "\t * \u8bfb\u53d6pem\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f\uff0c\u5305\u62ec\u7c7b\u578b\u3001\u5934\u4fe1\u606f\u548c\u5bc6\u94a5\u5185\u5bb9"], [196, "\t *"], [197, "\t * @param reader pem Reader"], [198, "\t * @return {@link PemObject}"], [199, "\t * @since 5.1.6"], [200, "\t */"], [201, "\tpublic static PemObject readPemObject(Reader reader) {"], [204, "\t\t\tpemReader = new PemReader(reader);"], [212, ""], [213, "\t/**"], [214, "\t * \u5199\u51fapem\u5bc6\u94a5\uff08\u79c1\u94a5\u3001\u516c\u94a5\u3001\u8bc1\u4e66\uff09"], [215, "\t *"], [216, "\t * @param type      \u5bc6\u94a5\u7c7b\u578b\uff08\u79c1\u94a5\u3001\u516c\u94a5\u3001\u8bc1\u4e66\uff09"], [217, "\t * @param content   \u5bc6\u94a5\u5185\u5bb9"], [218, "\t * @param keyStream pem\u6d41"], [219, "\t * @since 5.1.6"], [220, "\t */"], [221, "\tpublic static void writePemObject(String type, byte[] content, OutputStream keyStream) {"], [222, "\t\twritePemObject(new PemObject(type, content), keyStream);"], [223, "\t}"], [224, ""], [225, "\t/**"], [226, "\t * \u5199\u51fapem\u5bc6\u94a5\uff08\u79c1\u94a5\u3001\u516c\u94a5\u3001\u8bc1\u4e66\uff09"], [227, "\t *"], [228, "\t * @param pemObject pem\u5bf9\u8c61\uff0c\u5305\u62ec\u5bc6\u94a5\u548c\u5bc6\u94a5\u7c7b\u578b\u7b49\u4fe1\u606f"], [229, "\t * @param keyStream pem\u6d41"], [230, "\t * @since 5.1.6"], [231, "\t */"], [232, "\tpublic static void writePemObject(PemObjectGenerator pemObject, OutputStream keyStream) {"], [233, "\t\tPemWriter writer = null;"], [234, "\t\ttry {"], [235, "\t\t\twriter = new PemWriter(IoUtil.getUtf8Writer(keyStream));"], [236, "\t\t\twriter.writeObject(pemObject);"], [237, "\t\t} catch (IOException e) {"], [238, "\t\t\tthrow new IORuntimeException(e);"], [239, "\t\t} finally {"], [240, "\t\t\tIoUtil.close(writer);"], [241, "\t\t}"], [242, "\t}"]], "deleted": [[10, "import java.security.cert.Certificate;"], [17, "import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;"], [18, "import org.bouncycastle.jce.ECNamedCurveTable;"], [19, "import org.bouncycastle.jce.ECPointUtil;"], [20, "import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;"], [21, "import org.bouncycastle.jce.spec.ECNamedCurveSpec;"], [22, "import org.bouncycastle.math.ec.ECCurve;"], [23, "import org.bouncycastle.util.io.pem.PemObject;"], [24, "import org.bouncycastle.util.io.pem.PemReader;"], [25, ""], [26, "import cn.hutool.core.io.IORuntimeException;"], [27, "import cn.hutool.core.io.IoUtil;"], [28, "import cn.hutool.core.util.CharsetUtil;"], [29, "import cn.hutool.core.util.StrUtil;"], [30, ""], [101, "\t\treturn KeyUtil.generateRSAPrivateKey(readKeyBytes(pemStream));"], [112, "\t\tfinal Certificate certificate = KeyUtil.readX509Certificate(pemStream);"], [113, "\t\tif (null == certificate) {"], [114, "\t\t\treturn null;"], [115, "\t\t}"], [116, "\t\treturn certificate.getPublicKey();"], [123, "\t * @param keyStream pem\u6d41"], [127, "\tpublic static Key readKey(InputStream keyStream) {"], [130, "\t\tif (StrUtil.isNotBlank(type) && type.endsWith(\"PRIVATE KEY\")) {"], [131, "\t\t\treturn KeyUtil.generateRSAPrivateKey(object.getContent());"], [132, "\t\t} else {"], [133, "\t\t\treturn KeyUtil.readX509Certificate(keyStream).getPublicKey();"], [162, "\t\t\tpemReader = new PemReader(IoUtil.getReader(keyStream, CharsetUtil.CHARSET_UTF_8));"]]}, "num_lines_added": 101, "num_lines_removed": 28}