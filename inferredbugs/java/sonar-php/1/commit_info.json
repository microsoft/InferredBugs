{"hash": "bb2959cc0dbdd96275b6500b27e172ac92f664d3", "message": "SONARPLUGINS-1422 Improve error reporting when executing external tools\n\n- Replaced the current implementation by the Sonar CommandExecutor component, which automatically displays the process output in the log\n- Added a timeout parameter for each tool (default value: 30 minutes)\n- Added a verification of the exit codes of the PHP tool to make the Sonar analysis fail when it must fail", "file_num_lines": 74, "diff_parsed": {"added": [[26, "import java.util.Collection;"], [35, "import org.sonar.api.utils.SonarException;"], [36, "import org.sonar.api.utils.command.Command;"], [37, "import org.sonar.api.utils.command.CommandExecutor;"], [38, ""], [39, "import com.google.common.collect.Lists;"], [48, "  private static final Logger LOG = LoggerFactory.getLogger(AbstractPhpExecutor.class);"], [49, "  private static final long MINUTES_TO_MILLISECONDS = 60000;"], [50, "  private static final String RULESET_PREFIX = \"ruleset\";"], [51, "  private static final String XML_SUFFIX = \".xml\";"], [53, "  private AbstractPhpConfiguration configuration;"], [54, "  private Collection<Integer> acceptedExitCodes;"], [56, "  protected AbstractPhpExecutor(AbstractPhpConfiguration configuration) {"], [57, "    this(configuration, Lists.newArrayList(0));"], [60, "  protected AbstractPhpExecutor(AbstractPhpConfiguration configuration, Collection<Integer> acceptedExitCodes) {"], [61, "    this.configuration = configuration;"], [62, "    this.acceptedExitCodes = acceptedExitCodes;"], [63, "  }"], [69, "    List<String> commandLine = getCommandLine();"], [70, "    LOG.info(\"Executing \" + getExecutedTool() + \" with command '{}'\", prettyPrint(commandLine));"], [72, "    Iterator<String> commandLineIterator = commandLine.iterator();"], [73, "    Command command = Command.create(commandLineIterator.next());"], [74, "    while (commandLineIterator.hasNext()) {"], [75, "      command.addArgument(commandLineIterator.next());"], [76, "    }"], [77, "    int exitCode = CommandExecutor.create().execute(command, configuration.getTimeout() * MINUTES_TO_MILLISECONDS);"], [78, "    if ( !acceptedExitCodes.contains(exitCode)) {"], [79, "      throw new SonarException(getExecutedTool() + \" execution failed with returned code '\" + exitCode"], [80, "          + \"'. Please check the documentation of \" + getExecutedTool() + \" to know more about this failure.\");"], [81, "    } else {"], [82, "      LOG.info(getExecutedTool() + \" succeeded with returned code '{}'.\", exitCode);"]], "deleted": [[22, "import java.io.BufferedReader;"], [23, "import java.io.BufferedWriter;"], [24, "import java.io.ByteArrayOutputStream;"], [28, "import java.io.InputStream;"], [29, "import java.io.InputStreamReader;"], [30, "import java.io.OutputStreamWriter;"], [48, "  /**"], [49, "   * The Class AsyncPipe."], [50, "   */"], [51, "  private static class AsyncPipe extends Thread {"], [52, ""], [53, "    /** The logger. */"], [54, "    private static final Logger LOG = LoggerFactory.getLogger(AsyncPipe.class);"], [55, "    /** The input stream. */"], [56, "    private BufferedReader reader;"], [57, ""], [58, "    /** The output stream. */"], [59, "    private BufferedWriter writer;"], [61, "    /**"], [62, "     * Instantiates a new async pipe."], [63, "     *"], [64, "     * @param input"], [65, "     *          an InputStream"], [66, "     * @param output"], [67, "     *          an OutputStream"], [68, "     */"], [69, "    public AsyncPipe(InputStream input, ByteArrayOutputStream output) {"], [70, "      this.reader = new BufferedReader(new InputStreamReader(input));"], [71, "      this.writer = new BufferedWriter(new OutputStreamWriter(output));"], [72, "    }"], [74, "    /**"], [75, "     * @see java.lang.Thread#run()"], [76, "     */"], [77, "    @Override"], [78, "    public void run() {"], [79, "      try {"], [80, "        // Reads the process input stream and writes it to the output stream"], [81, "        String line = reader.readLine();"], [82, "        while (line != null) {"], [83, "          synchronized (writer) {"], [84, "            writer.write(line);"], [85, "            LOG.debug(line);"], [86, "          }"], [87, "          line = reader.readLine();"], [88, "        }"], [89, "      } catch (IOException e) {"], [90, "        LOG.error(\"Can't execute the Async Pipe\", e);"], [91, "      }"], [92, "    }"], [95, "  /** The logger */"], [96, "  private static final Logger LOG = LoggerFactory.getLogger(AbstractPhpExecutor.class);"], [97, "  private static final int DEFAUT_BUFFER_INITIAL_SIZE = 1024;"], [98, "  private static final String RULESET_PREFIX = \"ruleset\";"], [99, "  private static final String XML_SUFFIX = \".xml\";"], [105, "    try {"], [106, "      // Gets the tool command line"], [107, "      List<String> commandLine = getCommandLine();"], [108, "      ProcessBuilder builder = new ProcessBuilder(commandLine);"], [109, "      LOG.info(\"Executing \" + getExecutedTool() + \" with command '{}'\", prettyPrint(commandLine));"], [110, "      // Starts the process"], [111, "      Process p = builder.start();"], [112, "      // And handles it's normal and error stream in separated threads."], [113, ""], [114, "      ByteArrayOutputStream output = new ByteArrayOutputStream(DEFAUT_BUFFER_INITIAL_SIZE);"], [115, "      AsyncPipe outputStreamThread = new AsyncPipe(p.getInputStream(), output);"], [116, "      outputStreamThread.start();"], [117, ""], [118, "      ByteArrayOutputStream error = new ByteArrayOutputStream(DEFAUT_BUFFER_INITIAL_SIZE);"], [119, "      AsyncPipe errorStreamThread = new AsyncPipe(p.getErrorStream(), error);"], [120, "      errorStreamThread.start();"], [122, "      LOG.info(getExecutedTool() + \" ended with returned code '{}'.\", p.waitFor());"], [123, "    } catch (IOException e) {"], [124, "      LOG.error(\"Can't execute the external tool\", e);"], [125, "      throw new PhpPluginExecutionException(e);"], [126, "    } catch (InterruptedException e) {"], [127, "      LOG.error(\"Async pipe interrupted: \", e);"], [128, "      throw new PhpPluginExecutionException(e);"]]}, "num_lines_added": 31, "num_lines_removed": 77}