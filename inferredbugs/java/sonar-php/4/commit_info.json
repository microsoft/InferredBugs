{"hash": "1135b79dbf167ed9224c1927dfb0f5e5d0952c17", "message": "SONARPHP-617 Improve UnusedPrivateMethodCheck: cover anonymous classes (#139)\n\n* SONARPHP-617 Create scope for anonymous classes\r\n\r\n* SONARPHP-617 Improve UnusedPrivateMethodCheck: cover anonymous classes\r\n\r\n* SONARPHP-617 Enrich unit test", "file_num_lines": 69, "diff_parsed": {"added": [[30, "import org.sonar.plugins.php.api.tree.declaration.ClassTree;"], [32, "import org.sonar.plugins.php.api.tree.expression.AnonymousClassTree;"], [51, "      checkClass(tree);"], [52, "    }"], [53, "  }"], [55, "  private void checkClass(ClassTree tree) {"], [56, "    Scope classScope = context().symbolTable().getScopeFor(tree);"], [57, "    for (Symbol methodSymbol : classScope.getSymbols(Kind.FUNCTION)) {"], [59, "      boolean ruleConditions = methodSymbol.hasModifier(\"private\") && methodSymbol.usages().isEmpty();"], [60, ""], [61, "      if (ruleConditions"], [62, "        && !isConstructor(methodSymbol.declaration(), tree)"], [63, "        && !isMagicMethod(methodSymbol.name())"], [64, "        && !isUsedInStringLiteral(methodSymbol)) {"], [65, "        context().newIssue(this, methodSymbol.declaration(), String.format(MESSAGE, methodSymbol.name()));"], [71, "  public void visitAnonymousClass(AnonymousClassTree tree) {"], [72, "    stringLiterals.clear();"], [73, "    super.visitAnonymousClass(tree);"], [74, ""], [75, "    checkClass(tree);"], [76, "  }"], [77, ""], [78, "  @Override"], [96, "  private static boolean isConstructor(IdentifierTree methodName, ClassTree classDec) {"]], "deleted": [[49, "      Scope classScope = context().symbolTable().getScopeFor(tree);"], [50, "      for (Symbol methodSymbol : classScope.getSymbols(Kind.FUNCTION)) {"], [52, "        boolean ruleConditions = methodSymbol.hasModifier(\"private\") && methodSymbol.usages().isEmpty();"], [54, "        if (ruleConditions"], [55, "          && !isConstructor(methodSymbol.declaration(), tree)"], [56, "          && !isMagicMethod(methodSymbol.name())"], [57, "          && !isUsedInStringLiteral(methodSymbol)) {"], [58, "          context().newIssue(this, methodSymbol.declaration(), String.format(MESSAGE, methodSymbol.name()));"], [59, "        }"], [82, "  private static boolean isConstructor(IdentifierTree methodName, ClassDeclarationTree classDec) {"]]}, "num_lines_added": 24, "num_lines_removed": 10}