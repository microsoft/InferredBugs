{"hash": "32fa8e9927e0bc15832c275049aed3232a9f2162", "message": "SONARPHP-1036: Parser should handle named arguments (#679)\n\n* introduce FunctionCallArgumentTree\r\n\r\n* introduce FunctionCallArgumentTree\r\n\r\n* Adapt existing rules.\r\n\r\n* Improve tests and add FunctionCallTree.argument() method.\r\n\r\n* Add license header.\r\n\r\n* Fix argument function and add test.\r\n\r\n* Adapt S2255 to named arguments.\r\n\r\n* Deprecate functionCallTree#arguments().\r\n\r\n* Adapt readme.\r\n\r\n* Use arguments directly.\r\n\r\n* CallTree instead of FunctionCallTree.\r\n\r\n* Adapt readme.\r\n\r\n* Move argument helper method to CheckUtils\r\n\r\n* Remove unnecessary condition.\r\n\r\n* Anonymous classes support named arguments.\r\n\r\n* Make sure parent of CallArgument is FunctionCall in checks.", "file_num_lines": 58, "diff_parsed": {"added": [[75, "    if (!tree.getParent().is(Tree.Kind.CALL_ARGUMENT) || !tree.getParent().getParent().is(Tree.Kind.FUNCTION_CALL)) {"], [76, "      return false;"], [77, "    }"], [78, ""], [79, "    FunctionCallTree functionCall = (FunctionCallTree) tree.getParent().getParent();"], [80, "    ExpressionTree callee = functionCall.callee();"], [81, "    if (callee.is(Tree.Kind.NAMESPACE_NAME)) {"], [82, "      String qualifiedName = ((NamespaceNameTree) callee).qualifiedName();"], [83, "      return SAFE_FUNCTIONS.stream().anyMatch(qualifiedName::equalsIgnoreCase);"], [85, ""]], "deleted": [[75, "    Tree parent = tree.getParent();"], [76, "    if (parent.is(Tree.Kind.FUNCTION_CALL)) {"], [77, "      FunctionCallTree functionCall = (FunctionCallTree) parent;"], [78, "      ExpressionTree callee = functionCall.callee();"], [79, "      if (callee.is(Tree.Kind.NAMESPACE_NAME)) {"], [80, "        String qualifiedName = ((NamespaceNameTree) callee).qualifiedName();"], [81, "        return SAFE_FUNCTIONS.stream().anyMatch(qualifiedName::equalsIgnoreCase);"], [82, "      }"]]}, "num_lines_added": 10, "num_lines_removed": 8}