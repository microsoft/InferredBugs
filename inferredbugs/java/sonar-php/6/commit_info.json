{"hash": "fcf65dc9f8188f0d0a59dca19cc1cf15fe450257", "message": "SONARPHP-722 add parameter to S2068 to specify targeted credentials", "file_num_lines": 81, "diff_parsed": {"added": [[22, "import java.util.List;"], [24, "import java.util.stream.Collectors;"], [25, "import java.util.stream.Stream;"], [28, "import org.sonar.check.RuleProperty;"], [42, "  private static final String MESSAGE = \"'%s' detected in this variable name, review this potentially hardcoded credential.\";"], [43, "  private static final String DEFAULT_CREDENTIAL_WORDS = \"password,passwd,pwd\";"], [45, "  @RuleProperty("], [46, "    key = \"credentialWords\","], [47, "    description = \"Comma separated list of words identifying potential credentials\","], [48, "    defaultValue = DEFAULT_CREDENTIAL_WORDS)"], [49, "  public String credentialWords = DEFAULT_CREDENTIAL_WORDS;"], [51, "  private List<Pattern> variablePatterns = null;"], [52, "  private List<Pattern> literalPatterns = null;"], [53, ""], [54, "  private Stream<Pattern> variablePatterns() {"], [55, "    if (variablePatterns == null) {"], [56, "      variablePatterns = toPatterns(\"\");"], [57, "    }"], [58, "    return variablePatterns.stream();"], [59, "  }"], [60, ""], [61, "  private Stream<Pattern> literalPatterns() {"], [62, "    if (literalPatterns == null) {"], [63, "      literalPatterns = toPatterns(\"=..\");"], [64, "    }"], [65, "    return literalPatterns.stream();"], [66, "  }"], [67, ""], [68, "  private List<Pattern> toPatterns(String suffix) {"], [69, "    return Stream.of(credentialWords.split(\",\"))"], [70, "      .map(String::trim)"], [71, "      .map(word -> Pattern.compile(word + suffix, Pattern.CASE_INSENSITIVE))"], [72, "      .collect(Collectors.toList());"], [73, "  }"], [77, "    if (literal.is(Kind.REGULAR_STRING_LITERAL)) {"], [78, "      checkCredential(literal, literal.token().text(), literalPatterns());"], [85, "    checkVariable((declaration.identifier()).token(), declaration.initValue());"], [91, "    checkVariable(((PHPTree) assignment.variable()).getLastToken(), assignment.value());"], [95, "  private void checkVariable(SyntaxToken reportTree, @Nullable Tree assignedValue) {"], [96, "    if (assignedValue != null && assignedValue.is(Kind.REGULAR_STRING_LITERAL)) {"], [97, "      checkCredential(reportTree, reportTree.text(), variablePatterns());"], [101, "  private void checkCredential(Tree reportTree, String target, Stream<Pattern> patterns) {"], [102, "    patterns.filter(pattern -> pattern.matcher(target).find()).findAny().ifPresent(pattern -> addIssue(pattern, reportTree));"], [103, ""], [104, "  }"], [105, ""], [106, "  private void addIssue(Pattern pattern, Tree tree) {"], [107, "    context().newIssue(this, tree, String.format(MESSAGE, cleanedPattern(pattern.pattern())));"], [108, "  }"], [109, ""], [110, "  private static String cleanedPattern(String pattern) {"], [111, "    if (pattern.endsWith(\"=..\")) {"], [112, "      return pattern.substring(0, pattern.length() - 3);"], [113, "    }"], [114, "    return pattern;"]], "deleted": [[39, "  private static final String MESSAGE = \"Remove this hard-coded password.\";"], [41, "  private static final Pattern PASSWORD_LITERAL_PATTERN = Pattern.compile(\"password=..\", Pattern.CASE_INSENSITIVE);"], [42, "  private static final Pattern PASSWORD_VARIABLE_PATTERN = Pattern.compile(\"password\", Pattern.CASE_INSENSITIVE);"], [46, "    if (literal.is(Kind.REGULAR_STRING_LITERAL) && PASSWORD_LITERAL_PATTERN.matcher(literal.token().text()).find()) {"], [47, "      addIssue(literal);"], [54, "    String identifier = declaration.identifier().text();"], [55, "    checkVariable(declaration.identifier(), identifier, declaration.initValue());"], [61, "    SyntaxToken lastToken = ((PHPTree) assignment.variable()).getLastToken();"], [62, "    String variableName = lastToken.text();"], [63, "    checkVariable(lastToken, variableName, assignment.value());"], [67, "  private void checkVariable(Tree tree, String identifier, @Nullable Tree value) {"], [68, "    if (value != null && value.is(Kind.REGULAR_STRING_LITERAL) && PASSWORD_VARIABLE_PATTERN.matcher(identifier).find()) {"], [69, "      addIssue(tree);"], [73, "  private void addIssue(Tree tree) {"], [74, "    context().newIssue(this, tree, MESSAGE);"]]}, "num_lines_added": 55, "num_lines_removed": 15}