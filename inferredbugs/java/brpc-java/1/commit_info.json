{"hash": "8645ae22fd78ab079cb008d51efd808d11f22049", "message": "1.optimize: future return user interface response instead of RpcResponse.\n2. execute interceptor again when client retry.", "file_num_lines": 121, "diff_parsed": {"added": [[32, "import org.junit.Assert;"], [90, "        assertThat(rpcFuture.get(), is(response.getResult()));"], [102, "        try {"], [103, "            rpcFuture.get();"], [104, "        } catch (RpcException ex2) {"], [105, "            Assert.assertTrue(ex2.getCause() == ex);"], [106, "        }"], [121, "        RpcFuture<String> rpcFuture = new RpcFuture<String>(timeout, methodInfo, null, channelInfo, rpcClient);"], [125, "        String resp = rpcFuture.get(1, TimeUnit.SECONDS);"], [126, "        assertThat(resp, is(\"hello world\"));"], [131, "        RpcFuture<String> rpcFuture = new RpcFuture<String>(timeout, methodInfo, null, channelInfo, rpcClient);"], [136, "        try {"], [137, "            rpcFuture.get(1, TimeUnit.SECONDS);"], [138, "        } catch (RpcException ex2) {"], [139, "            Assert.assertTrue(ex2.getCause() == ex);"], [140, "        }"], [145, "        RpcFuture<String> rpcFuture = new RpcFuture<String>(timeout, methodInfo, null, channelInfo, rpcClient);"], [146, "        try {"], [147, "            rpcFuture.get(100, TimeUnit.MILLISECONDS);"], [148, "        } catch (RpcException ex2) {"], [149, "            Assert.assertTrue(ex2.getCode() == RpcException.TIMEOUT_EXCEPTION);"], [150, "        }"]], "deleted": [[43, "import com.baidu.brpc.protocol.Options;"], [44, "import com.baidu.brpc.protocol.ProtocolManager;"], [76, "        when(rpcClient.getProtocol()).thenReturn("], [77, "                ProtocolManager.instance().init(\"utf-8\").getProtocol(Options.ProtocolType.PROTOCOL_BAIDU_STD_VALUE));"], [93, "        assertThat(rpcFuture.get(), is(response));"], [105, "        assertThat(rpcFuture.get(), is(response));"], [120, "        RpcFuture rpcFuture = new RpcFuture<String>(timeout, methodInfo, null, channelInfo, rpcClient);"], [124, "        Response resp = rpcFuture.get(1, TimeUnit.SECONDS);"], [125, "        assertThat((String) resp.getResult(), is(\"hello world\"));"], [130, "        RpcFuture rpcFuture = new RpcFuture<String>(timeout, methodInfo, null, channelInfo, rpcClient);"], [135, "        Response resp = rpcFuture.get(1, TimeUnit.SECONDS);"], [136, "        assertThat((RuntimeException) resp.getException(), is(ex));"], [141, "        RpcFuture rpcFuture = new RpcFuture<String>(timeout, methodInfo, null, channelInfo, rpcClient);"], [142, "        Response resp = rpcFuture.get(100, TimeUnit.MILLISECONDS);"], [143, "        assertThat(resp.getException(), instanceOf(RpcException.class));"], [144, "        assertThat(((RpcException) resp.getException()).getCode(), is(RpcException.TIMEOUT_EXCEPTION));"]]}, "num_lines_added": 22, "num_lines_removed": 16}