{"hash": "49c11ccdde80d87ec2a300dec6f42abfc05d0f4b", "message": "add ChannelStoreManager Interface", "file_num_lines": 69, "diff_parsed": {"added": [[19, "    private static ChannelStoreManager storeManager;"], [20, ""], [23, "    private ChannelStoreManager innerStoreManager;"], [24, ""], [25, "    public static void setStoreManager(ChannelStoreManager manager) {"], [26, "        storeManager = manager;"], [27, "    }"], [31, "            synchronized (ChannelManager.class) {"], [33, "                    if (storeManager != null) {"], [34, "                        instance = new ChannelManager(storeManager);"], [35, "                    } else {"], [36, "                        instance = new ChannelManager(new DefaultChannelStoreManager());"], [37, "                    }"], [44, "    private ChannelManager(ChannelStoreManager storeManager) {"], [45, "        this.innerStoreManager = storeManager;"], [50, "        innerStoreManager.putChannel(clientName, channel);"], [56, "            for (Map.Entry<String, List<Channel>> entry : innerStoreManager.getChannelMap().entrySet()) {"], [64, "            return innerStoreManager.getChannel(clientName);"], [76, "            innerStoreManager.removeChannel(channel);"], [82, "        return innerStoreManager.getChannelMap();"]], "deleted": [[3, "import java.util.ArrayList;"], [4, "import java.util.HashMap;"], [5, "import java.util.HashSet;"], [8, "import java.util.Set;"], [9, "import java.util.concurrent.atomic.AtomicInteger;"], [26, "    private Map<String, List<Channel>> channelMap = new HashMap<String, List<Channel>>();"], [27, "    private Set<Channel> channelSet = new HashSet<Channel>();"], [28, "    private AtomicInteger index = new AtomicInteger(0);"], [32, "            synchronized(ChannelManager.class) {"], [34, "                    instance = new ChannelManager();"], [41, "    private ChannelManager() {"], [46, "        if (!channelSet.contains(channel)) {"], [47, "            List<Channel> channelList = channelMap.get(clientName);"], [48, "            if (channelList == null) {"], [49, "                channelList = new ArrayList<Channel>();"], [50, "                channelMap.put(clientName, channelList);"], [51, "            }"], [52, "            channelMap.get(clientName).add(channel);"], [53, "        }"], [59, "            for (Map.Entry<String, List<Channel>> entry : channelMap.entrySet()) {"], [67, "            List<Channel> channelList = channelMap.get(clientName);"], [68, "            if (channelList == null || channelList.size() == 0) {"], [69, "                log.info(\"no available connection for clientName={}\", clientName);"], [70, "                return null;"], [71, "            }"], [72, "            int id = index.getAndIncrement() % channelList.size();"], [73, "            Channel channel = channelList.get(id);"], [74, "            return channel;"], [82, "        //        Set<Map.Entry<String, List<Channel>>> entries = channelMap.entrySet();"], [83, "        //        for(Map.Entry<String, List<Channel>> entry : entries){"], [84, "        //            List<Channel> list = entry.getValue();"], [85, "        //            if(CollectionUtils.isNotEmpty(list)){"], [86, "        //                list.remove(channel);"], [87, "        //            }"], [88, "        //        }"], [89, ""], [94, "            List<Channel> channelList = channelMap.get(participantName);"], [95, "            channelList.remove(channel);"], [96, "            channelSet.remove(channel);"], [102, "        return channelMap;"], [105, "    public void setChannelMap(Map<String, List<Channel>> channelMap) {"], [106, "        this.channelMap = channelMap;"], [107, "    }"]]}, "num_lines_added": 20, "num_lines_removed": 43}