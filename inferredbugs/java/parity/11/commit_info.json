{"hash": "6f47cf43c82ad042b44ad77fca2fd70f9b3cde90", "message": "Fix rendering bug in stock ticker\n\nHandle the situation in which the maximum number of digits in the\nfractional part of a price or a size is zero correctly.", "file_num_lines": 105, "diff_parsed": {"added": [[11, "    private static final Instruments FRACTIONS = fromString(\"\" +"], [25, "    private static final Instruments INTEGERS = fromString(\"\" +"], [26, "            \"instruments = {\\n\" +"], [27, "            \"  price-integer-digits = 4\\n\" +"], [28, "            \"  size-integer-digits  = 8\\n\" +"], [29, "            \"  FOO {\\n\" +"], [30, "            \"    price-fraction-digits = 2\\n\" +"], [31, "            \"    size-fraction-digits  = 0\\n\" +"], [32, "            \"  }\\n\" +"], [33, "            \"}\");"], [34, ""], [37, "        assertEquals(6, FRACTIONS.getMaxPriceFractionDigits());"], [42, "        assertEquals(8, FRACTIONS.getMaxSizeFractionDigits());"], [47, "        assertEquals(\"    -      \", FRACTIONS.getPricePlaceholder());"], [52, "        assertEquals(\"        -        \", FRACTIONS.getSizePlaceholder());"], [57, "        assertEquals(11, FRACTIONS.getPriceWidth());"], [62, "        assertEquals(17, FRACTIONS.getSizeWidth());"], [67, "        assertEquals(2, FRACTIONS.get(\"FOO\").getPriceFractionDigits());"], [71, "    public void sizeFractionDigitsWithIntegers() {"], [72, "        assertEquals(0, FRACTIONS.get(\"FOO\").getSizeFractionDigits());"], [73, "    }"], [74, ""], [75, "    @Test"], [76, "    public void sizeFractionDigitsWithFractions() {"], [77, "        assertEquals(8, FRACTIONS.get(\"BAR\").getSizeFractionDigits());"], [82, "        assertEquals(\"%7.2f    \", FRACTIONS.get(\"FOO\").getPriceFormat());"], [86, "    public void sizeFormatWithIntegers() {"], [87, "        assertEquals(\"%8.0f         \", FRACTIONS.get(\"FOO\").getSizeFormat());"], [88, "    }"], [89, ""], [90, "    @Test"], [91, "    public void sizeFormatWithFractions() {"], [92, "        assertEquals(\"%17.8f\", FRACTIONS.get(\"BAR\").getSizeFormat());"], [97, "        assertEquals(100.0, FRACTIONS.get(\"FOO\").getPriceFactor(), 0.0);"], [98, "    }"], [99, ""], [100, "    @Test"], [101, "    public void sizeFactorWithIntegers() {"], [102, "        assertEquals(1.0, FRACTIONS.get(\"FOO\").getSizeFactor(), 0.0);"], [103, "    }"], [104, ""], [105, "    @Test"], [106, "    public void sizeFactorWithFractions() {"], [107, "        assertEquals(100000000.0, FRACTIONS.get(\"BAR\").getSizeFactor(), 0.0);"], [108, "    }"], [109, ""], [110, "    @Test"], [111, "    public void sizeWidthWithIntegersOnly() {"], [112, "        assertEquals(8, INTEGERS.getSizeWidth());"], [113, "    }"], [114, ""], [115, "    @Test"], [116, "    public void sizePlaceholderWithIntegersOnly() {"], [117, "        assertEquals(\"       -\", INTEGERS.getSizePlaceholder());"], [121, "    public void sizeFormatWithIntegersOnly() {"], [122, "        assertEquals(\"%8.0f\", INTEGERS.get(\"FOO\").getSizeFormat());"]], "deleted": [[11, "    private static final Instruments INSTRUMENTS = fromString(\"\" +"], [27, "        assertEquals(6, INSTRUMENTS.getMaxPriceFractionDigits());"], [32, "        assertEquals(8, INSTRUMENTS.getMaxSizeFractionDigits());"], [37, "        assertEquals(\"    -      \", INSTRUMENTS.getPricePlaceholder());"], [42, "        assertEquals(\"        -        \", INSTRUMENTS.getSizePlaceholder());"], [47, "        assertEquals(11, INSTRUMENTS.getPriceWidth());"], [52, "        assertEquals(17, INSTRUMENTS.getSizeWidth());"], [57, "        assertEquals(2, INSTRUMENTS.get(\"FOO\").getPriceFractionDigits());"], [61, "    public void sizeFractionDigits() {"], [62, "        assertEquals(0, INSTRUMENTS.get(\"FOO\").getSizeFractionDigits());"], [67, "        assertEquals(\"%7.2f    \", INSTRUMENTS.get(\"FOO\").getPriceFormat());"], [71, "    public void sizeFormat() {"], [72, "        assertEquals(\"%8.0f         \", INSTRUMENTS.get(\"FOO\").getSizeFormat());"], [77, "        assertEquals(100.0, INSTRUMENTS.get(\"FOO\").getPriceFactor(), 0.0);"], [81, "    public void sizeFactor() {"], [82, "        assertEquals(1.0, INSTRUMENTS.get(\"FOO\").getSizeFactor(), 0.0);"]]}, "num_lines_added": 56, "num_lines_removed": 16}