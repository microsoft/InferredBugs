{"hash": "2da54e186d8519b7940a1e2feb9cfdb2acc50c76", "message": "Clean up order book reconstruction\n\nRemove the time priority tracking of orders per price level. This is\nnot needed as the order book reconstruction exposes only an aggregate\nview of the best price level.\n\nThis has the following benefits:\n\n  - Memory allocations per order and price level are reduced as a price\n    level no longer maintains a list of orders.\n\n  - Memory allocations per price level are reduced as a price level is\n    represented by its size, an integer.\n\n  - Indirection is reduced as an order maintains a direct reference to\n    its order book.", "file_num_lines": 99, "diff_parsed": {"added": [[75, "        Order order = new Order(book, side, price, size);"], [76, ""], [77, "        book.add(side, price, size);"], [78, ""], [102, "        OrderBook book = order.getOrderBook();"], [103, ""], [104, "        long newSize = Math.max(0, size);"], [105, ""], [108, "        book.update(order.getSide(), order.getPrice(), newSize - order.getRemainingQuantity());"], [109, ""], [110, "        if (newSize == 0)"], [112, "        else"], [113, "            order.setRemainingQuantity(newSize);"], [116, "            book.bbo(listener);"], [161, "        Side side = order.getSide();"], [162, ""], [163, "        long remainingQuantity = order.getRemainingQuantity();"], [164, ""], [165, "        long executedQuantity = Math.min(quantity, remainingQuantity);"], [166, ""], [167, "        listener.trade(book.getInstrument(), side, price, executedQuantity);"], [168, ""], [169, "        book.update(side, order.getPrice(), -executedQuantity);"], [171, "        if (executedQuantity == remainingQuantity)"], [173, "        else"], [174, "            order.reduce(executedQuantity);"], [195, "        OrderBook book = order.getOrderBook();"], [196, ""], [197, "        long remainingQuantity = order.getRemainingQuantity();"], [198, ""], [199, "        long canceledQuantity = Math.min(quantity, remainingQuantity);"], [200, ""], [203, "        book.update(order.getSide(), order.getPrice(), -canceledQuantity);"], [204, ""], [205, "        if (canceledQuantity == remainingQuantity)"], [207, "        else"], [208, "            order.reduce(canceledQuantity);"], [211, "            book.bbo(listener);"], [228, "        OrderBook book = order.getOrderBook();"], [229, ""], [232, "        book.update(order.getSide(), order.getPrice(), -order.getRemainingQuantity());"], [233, ""], [237, "            book.bbo(listener);"]], "deleted": [[75, "        Order order = book.add(side, price, size);"], [101, "        if (size > 0) {"], [102, "            order.setRemainingQuantity(size);"], [103, "        } else {"], [105, "            order.delete();"], [106, "        }"], [109, "            order.getOrderBook().bbo(listener);"], [154, "        listener.trade(book.getInstrument(), order.getSide(), price, quantity);"], [156, "        if (quantity < order.getRemainingQuantity()) {"], [157, "            order.reduce(quantity);"], [158, "        } else {"], [160, "            order.delete();"], [161, "        }"], [184, "        if (quantity < order.getRemainingQuantity()) {"], [185, "            order.reduce(quantity);"], [186, "        } else {"], [188, "            order.delete();"], [189, "        }"], [192, "            order.getOrderBook().bbo(listener);"], [212, "        order.delete();"], [215, "            order.getOrderBook().bbo(listener);"]]}, "num_lines_added": 43, "num_lines_removed": 21}