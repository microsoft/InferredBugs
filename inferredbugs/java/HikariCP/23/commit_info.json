{"hash": "00b77f9cd3853848a0854560847f0f5c9953e700", "message": "Tweak the leak task handling and resetConnection() handling for small performance gains in the *nominal* case.  Possibly slower in edge-cases (but who cares).", "file_num_lines": 402, "diff_parsed": {"added": [[50, "import com.zaxxer.hikari.proxy.LeakTask;"], [67, "   private static final Logger LOGGER;"], [68, "   private static final LeakTask NO_LEAK;"], [73, "   public int transactionIsolation;"], [99, "   // static initializer"], [100, "   static {"], [101, "      LOGGER = LoggerFactory.getLogger(HikariPool.class);"], [102, "      NO_LEAK = new LeakTask() {"], [103, "         public void cancel() {};"], [104, "      };"], [105, "   }"], [106, ""], [191, "            LeakTask leakTask = (leakDetectionThreshold == 0) ? NO_LEAK : new LeakTask(leakDetectionThreshold, houseKeepingExecutorService);"], [192, ""], [193, "            final IHikariConnectionProxy proxyConnection = ProxyFactory.getProxyConnection(this, bagEntry, leakTask);"]], "deleted": [[66, "   private static final Logger LOGGER = LoggerFactory.getLogger(HikariPool.class);"], [68, "   public int transactionIsolation;"], [181, "            final IHikariConnectionProxy proxyConnection = ProxyFactory.getProxyConnection(this, bagEntry);"], [182, ""], [183, "            if (leakDetectionThreshold != 0) {"], [184, "               proxyConnection.captureStack(leakDetectionThreshold, houseKeepingExecutorService);"], [185, "            }"]]}, "num_lines_added": 15, "num_lines_removed": 7}