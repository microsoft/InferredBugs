{"hash": "7121f22ff0b7342fba3c6b7e079b1fe940f3e344", "message": "#1 Adding support for implicit mapping of enums", "file_num_lines": 376, "diff_parsed": {"added": [[55, "import org.mapstruct.ap.util.TypeUtil;"], [70, "\tprivate final TypeUtil typeUtil;"], [76, "\t\tthis.typeUtil = new TypeUtil( elementUtils, typeUtils );"], [107, "\t\tConversions conversions = new Conversions( elementUtils, typeUtils, typeUtil );"], [108, ""], [138, "\t\t\t\tConversion conversion = conversions.getConversion( property.getSourceType(), property.getTargetType() );"], [158, "\t\t\t\t\t\t\t\t\t\t),"], [159, "\t\t\t\t\t\t\t\t\t\tproperty.getTargetType()"], [164, "\t\t\t\t\t\t\t\t\t\t),"], [165, "\t\t\t\t\t\t\t\t\t\tproperty.getSourceType()"], [295, "\t\t\tString sourcePropertyName = getPropertyName( getterMethod );"], [300, "\t\t\t\tString targetPropertyName = getPropertyName( setterMethod );"], [319, "\tprivate String getPropertyName(ExecutableElement getterOrSetterMethod) {"], [320, "\t\t//TODO consider is/has"], [321, "\t\treturn Introspector.decapitalize("], [322, "\t\t\t\tgetterOrSetterMethod.getSimpleName().toString().substring( 3 )"], [323, "\t\t);"], [324, "\t}"], [325, ""], [351, "\t\t\tconverterType = typeUtil.getType( (DeclaredType) converterTypeMirror );"], [369, "\t\t\t\ttypeUtil.retrieveType( parameter.asType() )"], [374, "\t\treturn typeUtil.retrieveType( method.getReturnType() );"]], "deleted": [[119, "//\t            MappingMethod reverseElementMappingMethod = rawReverseElementMappingMethod == null ? null : new MappingMethod(rawReverseElementMappingMethod.getName(), rawReverseElementMappingMethod.getParameterName() );"], [128, ""], [135, "\t\t\t\tConversion conversion = Conversions.getConversion( property.getSourceType(), property.getTargetType() );"], [155, "\t\t\t\t\t\t\t\t\t\t)"], [160, "\t\t\t\t\t\t\t\t\t\t)"], [290, "\t\t\tString sourcePropertyName = Introspector.decapitalize("], [291, "\t\t\t\t\tgetterMethod.getSimpleName()"], [292, "\t\t\t\t\t\t\t.toString()"], [293, "\t\t\t\t\t\t\t.substring( 3 )"], [294, "\t\t\t);"], [299, "\t\t\t\tString targetPropertyName = Introspector.decapitalize("], [300, "\t\t\t\t\t\tsetterMethod.getSimpleName()"], [301, "\t\t\t\t\t\t\t\t.toString()"], [302, "\t\t\t\t\t\t\t\t.substring( 3 )"], [303, "\t\t\t\t);"], [347, "\t\t\tconverterType = getType( (DeclaredType) converterTypeMirror );"], [353, "\tprivate Type getType(DeclaredType type) {"], [354, "\t\tType elementType = null;"], [355, "\t\tif ( !type.getTypeArguments().isEmpty() ) {"], [356, "\t\t\telementType = retrieveType( type.getTypeArguments().iterator().next() );"], [357, "\t\t}"], [358, ""], [359, "\t\treturn new Type("], [360, "\t\t\t\telementUtils.getPackageOf( type.asElement() ).toString(),"], [361, "\t\t\t\ttype.asElement().getSimpleName().toString(),"], [362, "\t\t\t\telementType"], [363, "\t\t);"], [364, "\t}"], [365, ""], [378, "\t\t\t\tretrieveType( parameter.asType() )"], [383, ""], [384, "\t\treturn retrieveType( method.getReturnType() );"], [385, "\t}"], [386, ""], [387, "\tprivate Type retrieveType(TypeMirror mirror) {"], [388, "\t\tif ( mirror.getKind() == TypeKind.DECLARED ) {"], [389, "\t\t\treturn getType( ( (DeclaredType) mirror ) );"], [390, "\t\t}"], [391, "\t\telse {"], [392, "\t\t\treturn new Type( null, mirror.toString() );"], [393, "\t\t}"], [397, ""], [410, ""], [423, ""], [467, ""]]}, "num_lines_added": 22, "num_lines_removed": 45}