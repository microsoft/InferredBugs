{"hash": "c59ef3ab7ab1fc7bb3bea2110d4fafa894930d44", "message": "#693 Renaming test entities in generics test for the sake of easier understanding", "file_num_lines": 56, "diff_parsed": {"added": [[36, "    AbstractAnimal.class,"], [37, "    AbstractHuman.class,"], [39, "    Key.class,"], [40, "    KeyOfAllBeings.class,"], [41, "    AnimalKey.class,"], [42, "    Identifiable.class,"], [43, "    GenericIdentifiable.class,"], [44, "    IAnimal.class,"], [50, "    public void determinesAnimalKeyGetter() {"], [51, "        AbstractAnimal source = new Elephant();"], [53, "        source.setKey( new AnimalKey() );"], [55, "        source.getKey().setTypeParameterIsResolvedToAnimalKey( false );"], [59, "        assertThat( target.getAnimalKey().typeParameterIsResolvedToAnimalKey() ).isTrue();"], [60, "        assertThat( target.getAnimalKey().typeParameterIsResolvedToKeyOfAllBeings() ).isFalse();"], [64, "    public void determinesKeyOfAllBeingsGetter() {"], [65, "        AbstractHuman source = new Child();"], [67, "        source.setKey( new KeyOfAllBeings() );"], [69, "        source.getKey().setTypeParameterIsResolvedToKeyOfAllBeings( false );"], [73, "        assertThat( target.getKeyOfAllBeings().typeParameterIsResolvedToKeyOfAllBeings() ).isTrue();"], [80, "        target.setAnimalKey( new AnimalKey() );"], [82, "        Elephant source = new Elephant();"], [83, "        GenericsHierarchyMapper.INSTANCE.updateSourceWithAnimalKey( target, source );"], [85, "        assertThat( source.getKey().typeParameterIsResolvedToAnimalKey() ).isTrue();"], [92, "        target.setKeyOfAllBeings( new KeyOfAllBeings() );"], [94, "        Child source = new Child();"], [95, "        GenericsHierarchyMapper.INSTANCE.updateSourceWithKeyOfAllBeings( target, source );"], [97, "        assertThat( source.getKey().typeParameterIsResolvedToKeyOfAllBeings() ).isTrue();"]], "deleted": [[36, "    AbstractClassExposingItemC.class,"], [37, "    AbstractClassExposingItemB.class,"], [39, "    ItemA.class,"], [40, "    ItemB.class,"], [41, "    ItemC.class,"], [42, "    ItemProviderSomeItemA.class,"], [43, "    ItemProviderAny.class,"], [44, "    ItemProviderSomeItemB.class,"], [50, "    public void determinesItemCSourceGetter() {"], [51, "        AbstractClassExposingItemC source = new SourceWithItemC();"], [53, "        source.setItem( new ItemC() );"], [55, "        source.getItem().setTypeParameterIsResolvedToItemC( false );"], [59, "        assertThat( target.getItemC().typeParameterIsResolvedToItemC() ).isTrue();"], [60, "        assertThat( target.getItemC().typeParameterIsResolvedToItemB() ).isFalse();"], [64, "    public void determinesItemBSourceGetter() {"], [65, "        AbstractClassExposingItemB source = new SourceWithItemB();"], [67, "        source.setItem( new ItemB() );"], [69, "        source.getItem().setTypeParameterIsResolvedToItemB( false );"], [73, "        assertThat( target.getItemB().typeParameterIsResolvedToItemB() ).isTrue();"], [80, "        target.setItemC( new ItemC() );"], [82, "        SourceWithItemC source = new SourceWithItemC();"], [83, "        GenericsHierarchyMapper.INSTANCE.intoSourceWithItemC( target, source );"], [85, "        assertThat( source.getItem().typeParameterIsResolvedToItemC() ).isTrue();"], [92, "        target.setItemB( new ItemB() );"], [94, "        SourceWithItemB source = new SourceWithItemB();"], [95, "        GenericsHierarchyMapper.INSTANCE.intoSourceWithItemB( target, source );"], [97, "        assertThat( source.getItem().typeParameterIsResolvedToItemB() ).isTrue();"]]}, "num_lines_added": 27, "num_lines_removed": 27}