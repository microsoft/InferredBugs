{"hash": "458718e346512e68a8ca62eebeeafc3cd6878704", "message": "#12 Allowing delegation to other mapper classes", "file_num_lines": 324, "diff_parsed": {"added": [[32, "import javax.lang.model.type.DeclaredType;"], [34, "import javax.lang.model.type.TypeMirror;"], [96, "\t\tList<Method> methods = retrieveMethods( null, element );"], [97, "\t\tList<BeanMapping> mappings = getMappings( methods );"], [98, "\t\tList<Type> usedMapperTypes = getUsedMapperTypes( element );"], [99, ""], [100, "\t\tMapper mapper = new Mapper("], [101, "\t\t\t\telementUtils.getPackageOf( element ).getQualifiedName().toString(),"], [102, "\t\t\t\telement.getSimpleName().toString(),"], [103, "\t\t\t\telement.getSimpleName() + IMPLEMENTATION_SUFFIX,"], [104, "\t\t\t\tmappings,"], [105, "\t\t\t\tusedMapperTypes"], [106, "\t\t);"], [108, "\t\treturn mapper;"], [109, "\t}"], [110, ""], [111, "\tprivate List<BeanMapping> getMappings(List<Method> methods) {"], [114, "\t\tList<BeanMapping> mappings = new ArrayList<BeanMapping>();"], [115, "\t\tSet<Method> processedMethods = new HashSet<Method>();"], [116, ""], [123, "\t\t\t\t\tmethod.getDeclaringMapper(),"], [135, "\t\t\t\t\t\trawReverseMappingMethod.getDeclaringMapper(),"], [157, "\t\t\t\t\t\t\t\t\t\tpropertyMappingMethod.getDeclaringMapper(),"], [162, "\t\t\t\t\t\t\t\t\t\treversePropertyMappingMethod.getDeclaringMapper(),"], [191, "\t\treturn mappings;"], [192, "\t}"], [194, "\tprivate List<Type> getUsedMapperTypes(TypeElement element) {"], [195, "\t\tList<Type> usedMapperTypes = new LinkedList<Type>();"], [196, "\t\tMapperPrism mapperPrism = MapperPrism.getInstanceOn( element );"], [197, "\t\tfor ( TypeMirror usedMapper : mapperPrism.uses() ) {"], [198, "\t\t\tusedMapperTypes.add( typeUtil.retrieveType( usedMapper ) );"], [199, "\t\t}"], [200, "\t\treturn usedMapperTypes;"], [220, "\t\t\t\telementMappingMethod.getDeclaringMapper(),"], [256, "\tprivate List<Method> retrieveMethods(Type declaringMapper, Element element) {"], [266, "\t\t\t\t\t\t\tdeclaringMapper,"], [276, "\t\tList<Type> usedMapperTypes = new LinkedList<Type>();"], [277, "\t\tMapperPrism mapperPrism = MapperPrism.getInstanceOn( element );"], [278, ""], [279, "\t\tif ( mapperPrism != null ) {"], [280, "\t\t\tfor ( TypeMirror usedMapper : mapperPrism.uses() ) {"], [281, "\t\t\t\tmethods.addAll("], [282, "\t\t\t\t\t\tretrieveMethods("], [283, "\t\t\t\t\t\t\t\ttypeUtil.retrieveType( usedMapper ),"], [284, "\t\t\t\t\t\t\t\t( (DeclaredType) usedMapper ).asElement()"], [285, "\t\t\t\t\t\t)"], [286, "\t\t\t\t);"], [287, "\t\t\t}"], [288, "\t\t}"], [289, ""], [290, ""], [332, "\t\t\t\t\t\t\t\t\tretrieveParameter( setterMethod ).getType()"], [360, "\t\treturn new Mapping( mapping.source(), mapping.target() );"]], "deleted": [[94, "\t\tList<Method> methods = retrieveMethods( element );"], [95, "\t\tSet<Method> processedMethods = new HashSet<Method>();"], [96, "\t\tList<BeanMapping> mappings = new ArrayList<BeanMapping>();"], [137, "\t\t\t\t\t\t\t\tproperty.getConverterType(),"], [172, "\t\tMapper mapper = new Mapper("], [173, "\t\t\t\telementUtils.getPackageOf( element ).getQualifiedName().toString(),"], [174, "\t\t\t\telement.getSimpleName().toString(),"], [175, "\t\t\t\telement.getSimpleName() + IMPLEMENTATION_SUFFIX,"], [176, "\t\t\t\tmappings"], [177, "\t\t);"], [178, ""], [179, "\t\treturn mapper;"], [234, "\tprivate List<Method> retrieveMethods(TypeElement element) {"], [294, "\t\t\t\t\t\t\t\t\tretrieveParameter( setterMethod ).getType(),"], [295, "\t\t\t\t\t\t\t\t\tmapping != null ? mapping.getConverterType() : null"], [323, "\t\tType converterType = typeUtil.retrieveType( mapping.converter() );"], [324, "\t\treturn new Mapping("], [325, "\t\t\t\tmapping.source(),"], [326, "\t\t\t\tmapping.target(),"], [327, "\t\t\t\tconverterType.getName().equals( \"NoOpConverter\" ) ? null : converterType"], [328, "\t\t);"]]}, "num_lines_added": 53, "num_lines_removed": 21}