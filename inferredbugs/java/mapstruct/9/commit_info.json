{"hash": "522c9e851a16f397574790d6e3f5970b17d4f5c1", "message": "#35 Adding processor option for setting default target mapping policy", "file_num_lines": 554, "diff_parsed": {"added": [[144, "            getEffectiveUnmappedTargetPolicy( element )"], [160, "    /**"], [161, "     * Returns the effective policy for reporting unmapped target properties. If"], [162, "     * explicitly set via {@code Mapper}, this value will be returned. Otherwise"], [163, "     * the value from the corresponding processor option will be returned. If"], [164, "     * that is not set either, the default value from"], [165, "     * {@code Mapper#unmappedTargetPolicy()} will be returned."], [166, "     *"], [167, "     * @param element The type declaring the generated mapper type"], [168, "     *"], [169, "     * @return The effective policy for reporting unmapped target properties."], [170, "     */"], [171, "    private ReportingPolicy getEffectiveUnmappedTargetPolicy(TypeElement element) {"], [172, "        MapperPrism mapperPrism = MapperPrism.getInstanceOn( element );"], [173, "        boolean setViaAnnotation = mapperPrism.values.unmappedTargetPolicy() != null;"], [174, "        ReportingPolicy annotationValue = ReportingPolicy.valueOf( mapperPrism.unmappedTargetPolicy() );"], [175, ""], [176, "        if ( setViaAnnotation ||"], [177, "            options.getUnmappedTargetPolicy() == null ) {"], [178, "            return annotationValue;"], [179, "        }"], [180, "        else {"], [181, "            return options.getUnmappedTargetPolicy();"], [182, "        }"], [183, "    }"], [184, ""]], "deleted": [[144, "            ReportingPolicy.valueOf( MapperPrism.getInstanceOn( element ).unmappedTargetPolicy() )"]]}, "num_lines_added": 26, "num_lines_removed": 1}