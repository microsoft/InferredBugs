{"hash": "17f106c6eadff21b70f4928c474fca13471afbb1", "message": "#32 Some clean-up", "file_num_lines": 142, "diff_parsed": {"added": [[92, "        for ( ExecutableElement executable : methodsIn( element.getEnclosedElements() ) ) {"], [93, "            Method method = getMethod( element, executable, implementationRequired );"], [94, "            if ( method != null ) {"], [95, "                methods.add( method );"], [114, "    private Method getMethod(TypeElement element, ExecutableElement method, boolean implementationRequired) {"], [115, "        Parameter parameter = executables.retrieveParameter( method );"], [116, "        Type returnType = executables.retrieveReturnType( method );"], [117, ""], [118, "        //add method with property mappings if an implementation needs to be generated"], [119, "        if ( implementationRequired ) {"], [120, "            boolean isValid = checkParameterAndReturnType( method, parameter.getType(), returnType );"], [121, ""], [122, "            if ( isValid ) {"], [123, "                return"], [124, "                    Method.forMethodRequiringImplementation("], [125, "                        method,"], [126, "                        parameter.getName(),"], [127, "                        parameter.getType(),"], [128, "                        returnType,"], [129, "                        getMappings( method )"], [130, "                    );"], [131, "            }"], [132, "            else {"], [133, "                return null;"], [134, "            }"], [135, "        }"], [136, "        //otherwise add reference to existing mapper method"], [137, "        else {"], [138, "            return"], [139, "                Method.forReferencedMethod("], [140, "                    typeUtil.getType( typeUtils.getDeclaredType( element ) ),"], [141, "                    method,"], [142, "                    parameter.getName(),"], [143, "                    parameter.getType(),"], [144, "                    returnType"], [145, "                );"], [146, "        }"], [147, "    }"], [148, ""], [149, "    private boolean checkParameterAndReturnType(ExecutableElement method, Type parameterType, Type returnType) {"], [150, "        if ( parameterType.isIterableType() && !returnType.isIterableType() ) {"], [151, "            printMessage("], [152, "                ReportingPolicy.ERROR,"], [153, "                \"Can't generate mapping method from iterable type to non-iterable type.\","], [154, "                method"], [155, "            );"], [156, "            return false;"], [157, "        }"], [158, ""], [159, "        if ( !parameterType.isIterableType() && returnType.isIterableType() ) {"], [160, "            printMessage("], [161, "                ReportingPolicy.ERROR,"], [162, "                \"Can't generate mapping method from non-iterable type to iterable type.\","], [163, "                method"], [164, "            );"], [165, "            return false;"], [166, "        }"], [167, ""], [168, "        if ( parameterType.isPrimitive() ) {"], [169, "            printMessage("], [170, "                ReportingPolicy.ERROR,"], [171, "                \"Can't generate mapping method with primitive parameter type.\","], [172, "                method"], [173, "            );"], [174, "            return false;"], [175, "        }"], [176, ""], [177, "        if ( returnType.isPrimitive() ) {"], [178, "            printMessage("], [179, "                ReportingPolicy.ERROR,"], [180, "                \"Can't generate mapping method with primitive return type.\","], [181, "                method"], [182, "            );"], [183, "            return false;"], [184, "        }"], [185, ""], [186, "        return true;"], [187, "    }"], [188, ""]], "deleted": [[92, "        //TODO Extract to separate method"], [93, "        for ( ExecutableElement method : methodsIn( element.getEnclosedElements() ) ) {"], [94, "            Parameter parameter = executables.retrieveParameter( method );"], [95, "            Type returnType = executables.retrieveReturnType( method );"], [96, ""], [97, "            boolean mappingErroneous = false;"], [98, ""], [99, "            if ( implementationRequired ) {"], [100, "                if ( parameter.getType().isIterableType() && !returnType.isIterableType() ) {"], [101, "                    printMessage("], [102, "                        ReportingPolicy.ERROR,"], [103, "                        \"Can't generate mapping method from iterable type to non-iterable type.\","], [104, "                        method"], [105, "                    );"], [106, "                    mappingErroneous = true;"], [107, "                }"], [108, "                if ( !parameter.getType().isIterableType() && returnType.isIterableType() ) {"], [109, "                    printMessage("], [110, "                        ReportingPolicy.ERROR,"], [111, "                        \"Can't generate mapping method from non-iterable type to iterable type.\","], [112, "                        method"], [113, "                    );"], [114, "                    mappingErroneous = true;"], [115, "                }"], [116, "                if ( parameter.getType().isPrimitive() ) {"], [117, "                    printMessage("], [118, "                        ReportingPolicy.ERROR,"], [119, "                        \"Can't generate mapping method with primitive parameter type.\","], [120, "                        method"], [121, "                    );"], [122, "                    mappingErroneous = true;"], [123, "                }"], [124, "                if ( returnType.isPrimitive() ) {"], [125, "                    printMessage("], [126, "                        ReportingPolicy.ERROR,"], [127, "                        \"Can't generate mapping method with primitive return type.\","], [128, "                        method"], [129, "                    );"], [130, "                    mappingErroneous = true;"], [131, "                }"], [132, ""], [133, "                if ( mappingErroneous ) {"], [134, "                    continue;"], [135, "                }"], [136, "            }"], [137, ""], [138, "            //add method with property mappings if an implementation needs to be generated"], [139, "            if ( implementationRequired ) {"], [140, "                methods.add("], [141, "                    Method.forMethodRequiringImplementation("], [142, "                        method,"], [143, "                        parameter.getName(),"], [144, "                        parameter.getType(),"], [145, "                        returnType,"], [146, "                        getMappings( method )"], [147, "                    )"], [148, "                );"], [149, "            }"], [150, "            //otherwise add reference to existing mapper method"], [151, "            else {"], [152, "                methods.add("], [153, "                    Method.forReferencedMethod("], [154, "                        typeUtil.getType( typeUtils.getDeclaredType( element ) ),"], [155, "                        method,"], [156, "                        parameter.getName(),"], [157, "                        parameter.getType(),"], [158, "                        returnType"], [159, "                    )"], [160, "                );"]]}, "num_lines_added": 79, "num_lines_removed": 69}