{"hash": "476f147078bd4bee35e993a51a6a31013884554d", "message": "#19 Simplifying creation of MappingMethod objects", "file_num_lines": 135, "diff_parsed": {"added": [[21, "import java.beans.Introspector;"], [28, "import org.mapstruct.ap.util.Strings;"], [31, " * Represents a mapping method with source and target type and the mappings between the properties of source and target"], [32, " * type."], [42, ""], [47, "    private final Parameter singleSourceParameter;"], [48, "    private final Parameter targetParameter;"], [49, ""], [51, "                                                          Type returnType, Map<String, Mapping> mappings,"], [58, "            returnType,"], [65, "    public static Method forReferencedMethod(Type declaringMapper, ExecutableElement executable,"], [66, "                                             List<Parameter> parameters, Type returnType) {"], [71, "            parameters,"], [72, "            returnType,"], [79, "    private Method(Type declaringMapper, ExecutableElement executable, List<Parameter> parameters, Type returnType,"], [80, "                   Map<String, Mapping> mappings, IterableMapping iterableMapping, MapMapping mapMapping) {"], [85, ""], [89, ""], [90, "        this.singleSourceParameter = determineSingleSourceParameter();"], [91, "        this.targetParameter = determineTargetParameter( parameters );"], [92, "    }"], [93, ""], [94, "    private Parameter determineTargetParameter(Iterable<Parameter> parameters) {"], [95, "        for ( Parameter parameter : parameters ) {"], [96, "            if ( parameter.isMappingTarget() ) {"], [97, "                return parameter;"], [98, "            }"], [99, "        }"], [100, ""], [101, "        return null;"], [102, "    }"], [103, ""], [104, "    private Parameter determineSingleSourceParameter() {"], [105, "        for ( Parameter parameter : parameters ) {"], [106, "            if ( !parameter.isMappingTarget() ) {"], [107, "                return parameter;"], [108, "            }"], [109, "        }"], [110, ""], [111, "        throw new IllegalStateException( \"Method \" + this + \" has no source parameter.\" );"], [138, "        return targetParameter != null ? targetParameter.getName() : Introspector.decapitalize( returnType.getName() );"], [142, "        return targetParameter != null ? targetParameter.getType() : returnType;"], [175, "            equals( getSingleSourceParameter().getType(), method.getResultType() )"], [176, "                && equals( getResultType(), method.getSingleSourceParameter().getType() );"], [177, "    }"], [178, ""], [179, "    public Parameter getSingleSourceParameter() {"], [180, "        return singleSourceParameter;"], [183, "    public Parameter getTargetParameter() {"], [184, "        return targetParameter;"], [188, "        return getSingleSourceParameter().getType().isIterableType() && getResultType().isIterableType();"], [192, "        return getSingleSourceParameter().getType().isMapType() && getResultType().isMapType();"], [201, "        return returnType + \" \" + getName() + \"(\" + Strings.join( parameters, \", \" ) + \")\";"]], "deleted": [[21, "import java.util.Arrays;"], [23, "import java.util.Iterator;"], [31, " * Represents a mapping method with source and target type and the mappings"], [32, " * between the properties of source and target type."], [41, "    private final List<Parameter> sourceParameters;"], [42, "    private final String resultName;"], [43, "    private final Type resultType;"], [50, "                                                          List<Parameter> sourceParameters, Type resultType,"], [51, "                                                          String resultName, Type targetType,"], [52, "                                                          Map<String, Mapping> mappings,"], [59, "            sourceParameters,"], [60, "            resultType,"], [61, "            resultName,"], [62, "            targetType,"], [69, "    public static Method forReferencedMethod(Type declaringMapper, ExecutableElement executable, String parameterName,"], [70, "                                             Type sourceType, Type targetType) {"], [75, "            Arrays.asList( new Parameter( parameterName, sourceType ) ),"], [76, "            Arrays.asList( new Parameter( parameterName, sourceType ) ),"], [77, "            targetType,"], [78, "            null,"], [79, "            targetType,"], [86, "    private Method(Type declaringMapper, ExecutableElement executable, List<Parameter> parameters,"], [87, "                   List<Parameter> sourceParameters, Type resultType, String resultName,"], [88, "                   Type returnType,"], [89, "                   Map<String, Mapping> mappings, IterableMapping iterableMapping,"], [90, "                   MapMapping mapMapping) {"], [94, "        this.sourceParameters = sourceParameters;"], [95, "        this.resultType = resultType;"], [96, "        this.resultName = resultName;"], [127, "        return resultName;"], [128, "    }"], [129, ""], [130, "    public List<Parameter> getSourceParameters() {"], [131, "        return sourceParameters;"], [135, "        return resultType;"], [168, "            equals( getSingleSourceType(), method.getReturnType() )"], [169, "                && equals( returnType, method.getSingleSourceType() );"], [172, "    public Type getSingleSourceType() {"], [173, "        return sourceParameters.size() == 1 ? sourceParameters.get( 0 ).getType() : null;"], [177, "        return getSingleSourceType().isIterableType() && resultType.isIterableType();"], [181, "        return getSingleSourceType().isMapType() && resultType.isMapType();"], [190, "        return returnType + \" \" + getName() + \"(\" + getParamsList() + \")\";"], [191, "    }"], [192, ""], [193, "    private String getParamsList() {"], [194, "        StringBuilder sb = new StringBuilder();"], [195, "        for ( Iterator<Parameter> it = parameters.iterator(); it.hasNext(); ) {"], [196, "            Parameter param = it.next();"], [197, "            sb.append( param.getType() ).append( \" \" ).append( param.getName() );"], [198, "            if ( it.hasNext() ) {"], [199, "                sb.append( \", \" );"], [200, "            }"], [201, "        }"], [202, ""], [203, "        return sb.toString();"]]}, "num_lines_added": 53, "num_lines_removed": 55}