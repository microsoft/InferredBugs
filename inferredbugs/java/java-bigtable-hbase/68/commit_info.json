{"hash": "fdcf829e5200f73b8207a005f28bcc995e03d247", "message": "chore: part 2 of replacing BigtableOptions to BigtableHBaseSettings (#2431)\n\n* chore: part 2 of replacing BigtableOptions to BigtableHBaseSettings\r\n\r\nThis change updated `BigtableBufferedMutator`, `BigtableBufferedMutatorHelper`, `HBaseRequestAdapter` constructor to accept `BigtableHBaseSetting` instead of `BigtableOptions`.\r\n\r\n* chore: address feedback comments\r\n\r\n- included `BatchExecutor.java` due to dep over settings.\r\n- fixed unit test settings initialization\r\n- updated config properties to retriesWithoutTimestamp getter", "file_num_lines": 284, "diff_parsed": {"added": [[18, "import static com.google.cloud.bigtable.hbase.BigtableOptionsFactory.INSTANCE_ID_KEY;"], [19, "import static com.google.cloud.bigtable.hbase.BigtableOptionsFactory.PROJECT_ID_KEY;"], [44, "import com.google.cloud.bigtable.hbase.wrappers.BigtableHBaseSettings;"], [48, "import java.io.IOException;"], [129, "  private BigtableHBaseSettings settings;"], [132, "  public void setup() throws IOException {"], [133, "    Configuration configuration = new Configuration(false);"], [134, "    configuration.set(PROJECT_ID_KEY, \"projectId\");"], [135, "    configuration.set(INSTANCE_ID_KEY, \"instanceId\");"], [136, "    settings = BigtableHBaseSettings.create(configuration);"], [138, "    requestAdapter = new HBaseRequestAdapter(settings, TableName.valueOf(\"table\"));"], [244, "      createExecutor().batch(gets, results);"], [260, "    createExecutor().batchCallback(gets, new Object[1], callback);"], [309, "    Result[] results = createExecutor().batch(gets);"], [336, "  private BatchExecutor createExecutor() {"], [337, "    return new BatchExecutor(mockBigtableSession, settings, requestAdapter);"], [342, "    return createExecutor().batch(actions);"]], "deleted": [[29, "import com.google.cloud.bigtable.config.BigtableOptions;"], [126, "  private BigtableOptions options;"], [129, "  public void setup() {"], [130, "    options ="], [131, "        BigtableOptions.builder().setProjectId(\"projectId\").setInstanceId(\"instanceId\").build();"], [132, "    requestAdapter ="], [133, "        new HBaseRequestAdapter(options, TableName.valueOf(\"table\"), new Configuration(false));"], [240, "      createExecutor(options).batch(gets, results);"], [256, "    createExecutor(options).batchCallback(gets, new Object[1], callback);"], [305, "    BatchExecutor underTest = createExecutor(options);"], [306, "    Result[] results = underTest.batch(gets);"], [333, "  private BatchExecutor createExecutor(BigtableOptions options) {"], [334, "    when(mockBigtableSession.getOptions()).thenReturn(options);"], [335, "    return new BatchExecutor(mockBigtableSession, requestAdapter);"], [340, "    return createExecutor(options).batch(actions);"]]}, "num_lines_added": 17, "num_lines_removed": 15}