{"hash": "4b143eb4c896e4fc5f56a18e823a39061780dc02", "message": "Moving `AbstractRetryingOperation.call` to a `CallController` (#2026)\n\n* Moving `AbstractRetryingOperation.call` to a `CallWrapper`\r\nMoving `RetryingReadRowsOperation.CallToStreamObserverAdapter` to a new class called `CallWrapper` for better control of the call variable.  Moved `AbstractRetryingOperation.call` to `CallWrapper` as well.\r\n\r\nNext steps: protect `call` with the appropriate locking to prevent issues like #2020.\r\n\r\n* Adding Apache header to CallWrapper\r\n\r\n* addressed comments", "file_num_lines": 279, "diff_parsed": {"added": [[118, ""], [119, "  protected final CallController<RequestT, ResponseT> callWrapper;"], [120, ""], [156, "    this.callWrapper = new CallController<>();"], [163, "      callWrapper.resetCall();"], [363, "      callWrapper.setCallAndStart(rpc, getRpcCallOptions(), getRetryRequest(), this, metadata);"], [452, "    callWrapper.cancel(message, null);"]], "deleted": [[66, "  @SuppressWarnings(\"rawtypes\")"], [67, "  private static final ClientCall NULL_CALL = new ClientCall() {"], [68, ""], [69, "    @Override"], [70, "    public void start(Listener responseListener, Metadata headers) {"], [71, "    }"], [72, ""], [73, "    @Override"], [74, "    public void request(int numMessages) {"], [75, "    }"], [76, ""], [77, "    @Override"], [78, "    public void cancel(String message, Throwable cause) {"], [79, "    }"], [80, ""], [81, "    @Override"], [82, "    public void halfClose() {"], [83, "    }"], [84, ""], [85, "    @Override"], [86, "    public void sendMessage(Object message) {"], [87, "    }"], [88, "  };"], [89, ""], [142, "  private Object callLock = new String(\"\");"], [143, "  private ClientCall<RequestT, ResponseT> call = NULL_CALL;"], [185, "      synchronized (callLock) {"], [186, "        call = NULL_CALL;"], [187, "      }"], [387, "      synchronized (callLock) {"], [388, "        // There's a subtle race condition in RetryingStreamOperation which requires a separate"], [389, "        // newCall/start split. The call variable needs to be set before onMessage() happens; that"], [390, "        // usually will occur, but some unit tests broke with a merged newCall and start."], [391, "        call = rpc.newCall(getRpcCallOptions());"], [392, "        rpc.start(getRetryRequest(), this, metadata, call);"], [393, "      }"], [399, "  protected ClientCall<RequestT, ResponseT> getCall() {"], [400, "    return call;"], [401, "  }"], [402, ""], [486, "    call.cancel(message, null);"]]}, "num_lines_added": 7, "num_lines_removed": 41}