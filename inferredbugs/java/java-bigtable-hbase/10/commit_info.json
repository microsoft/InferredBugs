{"hash": "d74bc930efd58ffbe3818428782a1292008446f3", "message": "Refactoring the retry logic in preparation for future changes.", "file_num_lines": 170, "diff_parsed": {"added": [[23, "import static org.mockito.Mockito.doAnswer;"], [28, "import java.util.concurrent.ExecutionException;"], [29, "import java.util.concurrent.Executor;"], [40, "import org.mockito.invocation.InvocationOnMock;"], [41, "import org.mockito.stubbing.Answer;"], [61, "import com.google.common.util.concurrent.ListenableFuture;"], [63, "import com.google.protobuf.Empty;"], [86, "  @Mock"], [87, "  ListenableFuture mockFuture;"], [98, ""], [105, "    when(channelPool.newCall(any(MethodDescriptor.class), any(CallOptions.class))).thenReturn("], [106, "      clientCall);"], [107, "    when(clientCallService.listenableAsyncCall(any(ClientCall.class), any())).thenReturn(mockFuture);"], [108, "    doAnswer(new Answer<Void>() {"], [109, "      @Override"], [110, "      public Void answer(InvocationOnMock invocation) throws Throwable {"], [111, "        invocation.getArgumentAt(0, Runnable.class).run();"], [112, "        return null;"], [113, "      }"], [114, "    }).when(mockFuture).addListener(any(Runnable.class), any(Executor.class));"], [115, ""], [125, "  public void testRetyableMutateRow() throws Exception {"], [127, "    when(mockFuture.get()).thenReturn(Empty.getDefaultInstance());"], [128, "    underTest.mutateRow(request);"], [133, "  public void testRetyableMutateRowAsync() throws InterruptedException, ExecutionException {"], [135, "    when(mockFuture.get()).thenReturn(MutateRowsResponse.getDefaultInstance());"], [141, "  public void testRetyableCheckAndMutateRow() throws Exception {"], [143, "    when(mockFuture.get()).thenReturn(CheckAndMutateRowResponse.getDefaultInstance());"], [144, "    underTest.checkAndMutateRow(request);"]], "deleted": [[27, "import java.util.concurrent.Callable;"], [30, "import java.util.concurrent.atomic.AtomicBoolean;"], [58, "import com.google.common.util.concurrent.SettableFuture;"], [62, "import io.grpc.Channel;"], [75, "  @Mock"], [76, "  Channel channel;"], [77, ""], [86, "  SettableFuture future;"], [97, ""], [102, "    future = SettableFuture.create();"], [111, "    when(channelPool.newCall(any(MethodDescriptor.class), any(CallOptions.class))).thenReturn("], [112, "      clientCall);"], [113, "    when(channel.newCall(any(MethodDescriptor.class), any(CallOptions.class))).thenReturn("], [114, "      clientCall);"], [115, "    when(clientCallService.listenableAsyncCall(any(ClientCall.class), any())).thenReturn(future);"], [119, "  public void testRetyableMutateRow() throws InterruptedException {"], [121, "    final AtomicBoolean done = new AtomicBoolean(false);"], [122, "    executor.submit(new Callable<Void>(){"], [123, "      @Override"], [124, "      public Void call() throws Exception {"], [125, "        underTest.mutateRow(request);"], [126, "        done.set(true);"], [127, "        synchronized (done) {"], [128, "          done.notify();"], [129, "        }"], [130, "        return null;"], [131, "      }"], [132, "    });"], [133, "    Thread.sleep(100);"], [134, "    future.set(MutateRowsResponse.getDefaultInstance());"], [135, "    synchronized (done) {"], [136, "      done.wait(1000);"], [137, "    }"], [138, "    assertTrue(done.get());"], [143, "  public void testRetyableMutateRowAsync() {"], [145, "    future.set(MutateRowsResponse.getDefaultInstance());"], [151, "  public void testRetyableCheckAndMutateRow() throws InterruptedException {"], [153, "    final AtomicBoolean done = new AtomicBoolean(false);"], [154, "    executor.submit(new Callable<Void>(){"], [155, "      @Override"], [156, "      public Void call() throws Exception {"], [157, "        underTest.checkAndMutateRow(request);"], [158, "        done.set(true);"], [159, "        synchronized (done) {"], [160, "          done.notify();"], [161, "        }"], [162, "        return null;"], [163, "      }"], [164, "    });"], [165, "    Thread.sleep(100);"], [166, "    future.set(CheckAndMutateRowResponse.getDefaultInstance());"], [167, "    synchronized (done) {"], [168, "      done.wait(1000);"], [169, "    }"], [170, "    assertTrue(done.get());"]]}, "num_lines_added": 29, "num_lines_removed": 55}