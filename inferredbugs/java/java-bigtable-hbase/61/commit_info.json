{"hash": "70f84d63842e1269b66724895e8a72e57582989c", "message": "Fix JWT auth with the batch endpoint. (#2187)\n\n* Fix JWT auth with the batch endpoint.\r\n\r\ngRPC sets the endpoint as the JWT audience, but the service expects the service name.\r\nUntil this is resolved on the serverside, wrap the JWT token in a shim that will fake the URI.\r\n\r\n* reformat", "file_num_lines": 193, "diff_parsed": {"added": [[20, "import com.google.auth.RequestMetadataCallback;"], [33, "import java.net.URI;"], [34, "import java.net.URISyntaxException;"], [38, "import java.util.Map;"], [39, "import java.util.concurrent.Executor;"], [103, ""], [104, "    return patchCredentials(getCredentialsInner(options));"], [105, "  }"], [106, ""], [107, "  private static Credentials getCredentialsInner(CredentialOptions options)"], [108, "      throws IOException, GeneralSecurityException {"], [158, "    return patchCredentials("], [159, "        ServiceAccountJwtAccessCredentials.newBuilder()"], [160, "            .setClientEmail(serviceAccountEmail)"], [161, "            .setPrivateKey(privateKey)"], [162, "            .build());"], [190, "    return patchCredentials("], [191, "        ServiceAccountCredentials.newBuilder()"], [192, "            .setClientEmail(serviceAccountEmail)"], [193, "            .setPrivateKey(privateKey)"], [194, "            .setScopes(scopes)"], [195, "            .setHttpTransportFactory(getHttpTransportFactory())"], [196, "            .build());"], [239, "    return patchCredentials("], [240, "        ServiceAccountJwtAccessCredentials.newBuilder()"], [241, "            .setClientEmail(serviceAccount.getClientEmail())"], [242, "            .setClientId(serviceAccount.getClientId())"], [243, "            .setPrivateKey(serviceAccount.getPrivateKey())"], [244, "            .setPrivateKeyId(serviceAccount.getPrivateKeyId())"], [245, "            .build());"], [246, "  }"], [247, ""], [248, "  // TODO(igorbernstein): Remove this ugly hack, once the serverside is fixed."], [249, "  /**"], [250, "   * Workaround for broken JWT tokens in batch-bigtable.googleapis.com."], [251, "   *"], [252, "   * <p>Currently we only accept JWT tokens destined for the audience bigtable.googleapis.com and"], [253, "   * bigtableadmin.googleapis.com. However, gRPC will set the audience based on the endpoint. This"], [254, "   * workaround will rewrite the audience to be compliant."], [255, "   */"], [256, "  private static Credentials patchCredentials(Credentials credentials) {"], [257, "    // Wrap JWT credentials to rewrite the audience."], [258, "    if (credentials instanceof ServiceAccountJwtAccessCredentials) {"], [259, "      credentials ="], [260, "          new JwtAudienceWorkaroundCredentials((ServiceAccountJwtAccessCredentials) credentials);"], [261, "    }"], [262, ""], [263, "    // When dealing with ServiceAccountCredentials, make sure to set the scopes. Otherwise"], [264, "    // MoreCallCredentials will try to replace it with ServiceAccountJwtAccessCredentials."], [265, "    if (credentials instanceof ServiceAccountCredentials) {"], [266, "      ServiceAccountCredentials svcCreds = (ServiceAccountCredentials) credentials;"], [267, "      if (svcCreds.getScopes().isEmpty()) {"], [268, "        credentials = svcCreds.createScoped(CLOUD_BIGTABLE_ALL_SCOPES);"], [269, "      }"], [270, "    }"], [271, ""], [272, "    return credentials;"], [273, "  }"], [274, ""], [275, "  private static class JwtAudienceWorkaroundCredentials extends Credentials {"], [276, "    private final ServiceAccountJwtAccessCredentials inner;"], [277, ""], [278, "    public JwtAudienceWorkaroundCredentials(ServiceAccountJwtAccessCredentials inner) {"], [279, "      this.inner = inner;"], [280, "    }"], [281, ""], [282, "    @Override"], [283, "    public String getAuthenticationType() {"], [284, "      return inner.getAuthenticationType();"], [285, "    }"], [286, ""], [287, "    // Extracted from ServiceAccountJwtAccessCredentials to maintain the performance tweak."], [288, "    @Override"], [289, "    public void getRequestMetadata("], [290, "        final URI uri, Executor executor, final RequestMetadataCallback callback) {"], [291, "      // It doesn't use network. Only some CPU work on par with TLS handshake. So it's preferrable"], [292, "      // to do it in the current thread, which is likely to be the network thread."], [293, "      blockingGetToCallback(uri, callback);"], [294, "    }"], [295, ""], [296, "    @Override"], [297, "    public Map<String, List<String>> getRequestMetadata(URI uri) throws IOException {"], [298, "      if (BigtableOptions.BIGTABLE_BATCH_DATA_HOST_DEFAULT.equals(uri.getHost())) {"], [299, "        try {"], [300, "          uri ="], [301, "              new URI("], [302, "                  uri.getScheme(),"], [303, "                  BigtableOptions.BIGTABLE_DATA_HOST_DEFAULT,"], [304, "                  uri.getPath(),"], [305, "                  uri.getFragment());"], [306, "        } catch (URISyntaxException e) {"], [307, "          // Should never happen"], [308, "          throw new IllegalStateException(\"Failed to adapt batch endpoint creds uri\");"], [309, "        }"], [310, "      }"], [311, ""], [312, "      return inner.getRequestMetadata(uri);"], [313, "    }"], [314, ""], [315, "    @Override"], [316, "    public boolean hasRequestMetadata() {"], [317, "      return inner.hasRequestMetadata();"], [318, "    }"], [319, ""], [320, "    @Override"], [321, "    public boolean hasRequestMetadataOnly() {"], [322, "      return inner.hasRequestMetadataOnly();"], [323, "    }"], [324, ""], [325, "    @Override"], [326, "    public void refresh() {"], [327, "      inner.refresh();"], [328, "    }"]], "deleted": [[147, "    return ServiceAccountJwtAccessCredentials.newBuilder()"], [148, "        .setClientEmail(serviceAccountEmail)"], [149, "        .setPrivateKey(privateKey)"], [150, "        .build();"], [178, "    return ServiceAccountCredentials.newBuilder()"], [179, "        .setClientEmail(serviceAccountEmail)"], [180, "        .setPrivateKey(privateKey)"], [181, "        .setScopes(scopes)"], [182, "        .setHttpTransportFactory(getHttpTransportFactory())"], [183, "        .build();"], [226, "    return ServiceAccountJwtAccessCredentials.newBuilder()"], [227, "        .setClientEmail(serviceAccount.getClientEmail())"], [228, "        .setClientId(serviceAccount.getClientId())"], [229, "        .setPrivateKey(serviceAccount.getPrivateKey())"], [230, "        .setPrivateKeyId(serviceAccount.getPrivateKeyId())"], [231, "        .build();"]]}, "num_lines_added": 113, "num_lines_removed": 16}