{"hash": "b6001c1e7ec7d806b29b12c2a66fe57c5d97fa1d", "message": "Reducing visibility of RefreshingOAuth interceptor's variables (#1656)\n\n- adding isRefreshing() instead of using a boolean.  This allowed lock and futureToken to be private\r\n- removed isRefreshing member variable and using futureToken == null\r\ninstead\r\n- adding a check for future.isDone() before setting the member variable\r\n- removing test's use of rateLimiter, since it rateLimiter longer applies to general uses, and only applies to the UNAUTHENTICATED responses on RPCs.", "file_num_lines": 183, "diff_parsed": {"added": [[22, "import com.google.common.util.concurrent.MoreExecutors;"], [89, "    Assert.assertFalse(underTest.isRefreshing());"], [90, "  }"], [91, ""], [92, "  @Test"], [93, "  public void testRefresh() throws IOException {"], [94, "    Mockito.when(credentials.refreshAccessToken()).thenReturn("], [95, "        new AccessToken(\"\", new Date(HeaderCacheElement.TOKEN_STALENESS_MS + 1)));"], [96, "    underTest = new RefreshingOAuth2CredentialsInterceptor(MoreExecutors.newDirectExecutorService(),"], [97, "        credentials);"], [98, "    underTest.syncRefresh();"], [99, "    Assert.assertEquals(CacheState.Good, underTest.headerCache.getCacheState());"], [100, "    Assert.assertFalse(underTest.isRefreshing());"], [181, "    underTest.syncRefresh();"], [248, "    Assert.assertFalse(underTest.isRefreshing());"], [258, "    Assert.assertFalse(underTest.isRefreshing());"], [275, "    Assert.assertTrue(underTest.isRefreshing());"]], "deleted": [[22, "import com.google.common.util.concurrent.Futures;"], [119, "    underTest.rateLimiter.setRate(100000);"], [145, "    underTest.rateLimiter.setRate(100000);"], [171, "    final Future<?> waiter;"], [172, "    synchronized (underTest.lock) {"], [173, "      waiter = underTest.isRefreshing ? underTest.futureToken : Futures.immediateFuture(null);"], [174, "    }"], [175, "    waiter.get();"], [231, "    underTest.rateLimiter.setRate(100000);"], [243, "    synchronized (underTest.lock) {"], [244, "      Assert.assertFalse(underTest.isRefreshing);"], [245, "    }"], [255, "    Assert.assertFalse(underTest.isRefreshing);"], [272, "    synchronized (underTest.lock) {"], [273, "      Assert.assertTrue(underTest.isRefreshing);"], [274, "    }"]]}, "num_lines_added": 17, "num_lines_removed": 16}