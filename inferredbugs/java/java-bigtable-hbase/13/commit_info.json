{"hash": "5d3c4950a309696b6b26bc683bc5a787f38fdf28", "message": "Allowing a user to retry even if the client does not set the timestamp. (#800)\n\nThe concern about setting the client timestamp in hbase is safe from the standpoint of most situations.  A Column Family with a single version and gets/scans where version=1 will not have a problem with retries that put in two cells into a qualifier.  Allow a user to set an option that will ensure that a server-side timestamp is set.", "file_num_lines": 188, "diff_parsed": {"added": [[28, "import java.util.HashMap;"], [29, "import java.util.Map;"], [94, "  Map<String, Predicate> predicates;"], [102, "    predicates = new HashMap<>();"], [104, "        .thenAnswer(new Answer<BigtableAsyncRpc>() {"], [105, "          @Override"], [106, "          public BigtableAsyncRpc answer(InvocationOnMock invocation) throws Throwable {"], [107, "            String fullMethodName = invocation.getArgumentAt(0, MethodDescriptor.class).getFullMethodName();"], [108, "            predicates.put(fullMethodName, invocation.getArgumentAt(1, Predicate.class));"], [109, "            return mockBigtableRpc;"], [110, "          }"], [111, "        });"], [112, "  }"], [114, "  protected BigtableDataGrpcClient createClient(boolean allowRetriesWithoutTimestamp) {"], [115, "    RetryOptions retryOptions ="], [116, "        RetryOptionsUtil.createTestRetryOptions(nanoClock, allowRetriesWithoutTimestamp);"], [117, "    BigtableOptions options = new BigtableOptions.Builder().setRetryOptions(retryOptions).build();"], [118, "    return new BigtableDataGrpcClient(mockChannelPool, executorService, options,"], [119, "        mockAsyncUtilities);"], [126, "    createClient(false).mutateRow(request);"], [134, "    createClient(false).mutateRowAsync(request);"], [142, "    createClient(false).checkAndMutateRow(request);"], [149, "    createClient(false).checkAndMutateRowAsync(request);"], [155, "    Predicate<MutateRowRequest> defaultPredicate = BigtableDataGrpcClient.IS_RETRYABLE_MUTATION;"], [156, "    createClient(true);"], [157, "    Predicate<MutateRowRequest> allowNoTimestampsPredicate ="], [158, "        predicates.get(BigtableServiceGrpc.METHOD_MUTATE_ROW.getFullMethodName());"], [159, ""], [160, "    assertFalse(defaultPredicate.apply(null));"], [161, "    assertTrue(allowNoTimestampsPredicate.apply(null));"], [162, ""], [163, "    MutateRowRequest noDataRequest = MutateRowRequest.getDefaultInstance();"], [164, "    assertTrue(defaultPredicate.apply(noDataRequest));"], [165, "    assertTrue(allowNoTimestampsPredicate.apply(noDataRequest));"], [166, ""], [167, "    MutateRowRequest requestWithCells = MutateRowRequest.newBuilder()"], [168, "        .addMutations(Mutation.newBuilder().setSetCell(SetCell.newBuilder().setTimestampMicros(-1)))"], [169, "        .build();"], [170, "    assertFalse(defaultPredicate.apply(requestWithCells));"], [171, "    assertTrue(allowNoTimestampsPredicate.apply(requestWithCells));"], [210, "    createClient(false).readRows(request);"], [219, "    createClient(false).readRows(request);"], [228, "        invocation.getArgumentAt(1, ClientCall.Listener.class).onMessage(response);"]], "deleted": [[92, "  private BigtableDataGrpcClient underTest;"], [97, "    RetryOptions retryOptions = RetryOptionsUtil.createTestRetryOptions(nanoClock);"], [98, "    BigtableOptions options = new BigtableOptions.Builder().setRetryOptions(retryOptions).build();"], [103, "        .thenReturn(mockBigtableRpc);"], [105, "    underTest ="], [106, "        new BigtableDataGrpcClient(mockChannelPool, executorService, options, mockAsyncUtilities);"], [112, ""], [114, ""], [115, "    underTest.mutateRow(request);"], [123, "    underTest.mutateRowAsync(request);"], [131, "    underTest.checkAndMutateRow(request);"], [138, "    underTest.checkAndMutateRowAsync(request);"], [144, "    Predicate<MutateRowRequest> predicate = BigtableDataGrpcClient.IS_RETRYABLE_MUTATION;"], [145, "    assertFalse(predicate.apply(null));"], [146, ""], [147, "    MutateRowRequest.Builder request = MutateRowRequest.newBuilder();"], [148, "    assertTrue(predicate.apply(request.build()));"], [149, ""], [150, "    request.addMutations("], [151, "        Mutation.newBuilder().setSetCell(SetCell.newBuilder().setTimestampMicros(-1)));"], [152, "    assertFalse(predicate.apply(request.build()));"], [191, "    underTest.readRows(request);"], [200, "    underTest.readRows(request);"], [209, "        invocation.getArgumentAt(2, ClientCall.Listener.class).onMessage(response);"]]}, "num_lines_added": 43, "num_lines_removed": 24}