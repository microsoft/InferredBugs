{"hash": "81887ab570444d863106a18f36cfc9c2edd26ede", "message": "Moving Channel closing responsibilities to ChannelPool\nAlso making sure that ChannelPool has the responsibility of closing the underlying channels.\nMaking BigtableSession a Closable instead of an AutoClosable.", "file_num_lines": 124, "diff_parsed": {"added": [[19, "import static org.mockito.Matchers.anyLong;"], [20, "import static org.mockito.Matchers.eq;"], [31, "import java.util.concurrent.TimeUnit;"], [32, "import java.util.concurrent.atomic.AtomicBoolean;"], [39, "import org.mockito.invocation.InvocationOnMock;"], [40, "import org.mockito.stubbing.Answer;"], [44, "import io.grpc.ManagedChannel;"], [53, "    List<ManagedChannel> channels = new ArrayList<>();"], [56, "    public ManagedChannel create() throws IOException {"], [57, "      final ManagedChannel channel = mock(ManagedChannel.class);"], [58, "      final AtomicBoolean isShutdown = new AtomicBoolean();"], [62, "      when(channel.authority()).thenReturn(\"\");"], [63, "      when(channel.shutdown()).thenAnswer(new Answer<ManagedChannel>() {"], [64, "        @Override"], [65, "        public ManagedChannel answer(InvocationOnMock invocation) throws Throwable {"], [66, "          isShutdown.set(true);"], [67, "          return channel;"], [68, "        }"], [69, "      });"], [70, "      when(channel.isShutdown()).then(isShutdownAnswer(isShutdown));"], [71, "      when(channel.isTerminated()).then(isShutdownAnswer(isShutdown));"], [75, ""], [76, "    protected Answer<Boolean> isShutdownAnswer(final AtomicBoolean isShutdown) {"], [77, "      return new Answer<Boolean>() {"], [78, "        @Override"], [79, "        public Boolean answer(InvocationOnMock invocation) throws Throwable {"], [80, "          return isShutdown.get();"], [81, "        }"], [82, "      };"], [83, "    }"], [111, "}"], [121, ""], [122, "  @Test"], [123, "  public void testShutdown() throws IOException {"], [124, "    MockChannelFactory factory = new MockChannelFactory();"], [125, "    new ChannelPool(null, factory).shutdown();"], [126, "    for (ManagedChannel managedChannel : factory.channels) {"], [127, "      verify(managedChannel, times(1)).shutdown();"], [128, "    }"], [129, "  }"], [130, ""], [131, "  @Test"], [132, "  public void testShutdownNow() throws IOException {"], [133, "    MockChannelFactory factory = new MockChannelFactory();"], [134, "    new ChannelPool(null, factory).shutdownNow();"], [135, "    for (ManagedChannel managedChannel : factory.channels) {"], [136, "      verify(managedChannel, times(1)).shutdownNow();"], [137, "    }"], [138, "  }"], [139, ""], [140, "  @Test"], [141, "  public void testAwaitTermination() throws IOException, InterruptedException {"], [142, "    MockChannelFactory factory = new MockChannelFactory();"], [143, "    ChannelPool pool = new ChannelPool(null, factory);"], [144, "    pool.ensureChannelCount(5);"], [145, "    for (ManagedChannel managedChannel : factory.channels) {"], [146, "      when(managedChannel.isTerminated()).thenReturn(true);"], [147, "    }"], [148, "    pool.awaitTermination(500, TimeUnit.MILLISECONDS);"], [149, "    for (ManagedChannel managedChannel : factory.channels) {"], [150, "      verify(managedChannel, times(1)).awaitTermination(anyLong(), eq(TimeUnit.NANOSECONDS));"], [151, "    }"], [152, "  }"]], "deleted": [[37, "import io.grpc.Channel;"], [47, "    List<Channel> channels = new ArrayList<>();"], [50, "    public Channel create() throws IOException {"], [51, "      Channel channel = mock(Channel.class);"], [85, "  }"]]}, "num_lines_added": 63, "num_lines_removed": 5}