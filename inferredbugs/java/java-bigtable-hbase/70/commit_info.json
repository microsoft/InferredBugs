{"hash": "9ae80f599645b755370e71e6801a1dd000df6e90", "message": "chore: replacing bulk read with bulk read wrapper (Part-5) (#2460)\n\n* chore: replacing bulk read with bulk read wrapper (Part-5)\r\n\r\nThis PR contains following changes:\r\n  - transition of data client in BigtableBufferedMutator, BufferedMutatorHelper.\r\n  - Also BulkMutation to new wrapper.\r\n  - updated BatchExecutor constructor to remove BigtableSession dependency.\r\n  - remove unneeded FlatRow checks and revisited unit test for BatchExecutor.\r\n\r\n* chore: removed references of BulkRead from JavaDoc\r\n\r\n* addressed feedback comments\r\n\r\nupdated constructor of  BatchExecutor, BigtableBufferedMutator, BigtableBufferedMutatorHelper to accept settings directly instead of fetching from BigtableApi.\r\n\r\n* removed unnecessary try/catch block from `BatchExecutor`", "file_num_lines": 304, "diff_parsed": {"added": [[20, "import static org.junit.Assert.assertTrue;"], [41, "import com.google.cloud.bigtable.hbase.wrappers.BulkMutationWrapper;"], [56, "import org.apache.hadoop.hbase.Cell;"], [65, "import org.apache.hadoop.hbase.client.Row;"], [120, "  @Mock private BulkMutationWrapper mockBulkMutation;"], [128, "  private BigtableHBaseSettings settings;"], [136, "    settings = BigtableHBaseSettings.create(configuration);"], [141, "    when(mockDataClientWrapper.createBulkMutation(any(String.class))).thenReturn(mockBulkMutation);"], [144, "    when(mockDataClientWrapper.readModifyWriteRowAsync(any(ReadModifyWriteRow.class)))"], [163, "    Result response ="], [164, "        Result.create("], [165, "            ImmutableList.<Cell>of("], [166, "                new RowCell("], [167, "                    key,"], [168, "                    Bytes.toBytes(\"family\"),"], [169, "                    Bytes.toBytes(\"\"),"], [170, "                    1000L,"], [171, "                    Bytes.toBytes(\"value\"))));"], [172, "    setFuture(response);"], [173, "    Result[] results = batch(ImmutableList.<Row>of(new Get(key)));"], [174, "    assertTrue(matchesRow(response).matches(results[0]));"], [232, "    Result expected ="], [237, "                    Bytes.toBytes(\"cf\"),"], [238, "                    Bytes.toBytes(\"\"),"], [240, "                    Bytes.toBytes(\"hi!\"),"], [244, "        .thenReturn(ApiFutures.immediateFuture(expected))"], [254, "    assertTrue(\"first result is a result\", results[0] instanceof Result);"], [255, "    assertTrue(matchesRow(expected).matches(results[0]));"], [263, "    Result response ="], [264, "        Result.create("], [265, "            ImmutableList.<Cell>of("], [266, "                new RowCell("], [267, "                    key,"], [268, "                    Bytes.toBytes(\"family\"),"], [269, "                    Bytes.toBytes(\"\"),"], [270, "                    1000L,"], [271, "                    Bytes.toBytes(\"value\"))));"], [272, "    setFuture(response);"], [274, "    createExecutor().batchCallback(ImmutableList.<Row>of(new Get(key)), new Object[1], callback);"], [277, "        .update(same(BatchExecutor.NO_REGION), same(key), argThat(matchesRow(response)));"], [283, "    final List<ApiFuture<Result>> expected = new ArrayList<>(10);"], [286, "    expected.add(ApiFutures.<Result>immediateFuture(null));"], [294, "              Result.create("], [295, "                  ImmutableList.<Cell>of("], [296, "                      new RowCell("], [297, "                          key.toByteArray(),"], [298, "                          Bytes.toBytes(\"family\"),"], [299, "                          Bytes.toBytes(\"\"),"], [300, "                          System.nanoTime() / 1000,"], [301, "                          cellValue.toByteArray())))));"], [307, "            new Answer<ApiFuture<Result>>() {"], [311, "              public ApiFuture<Result> answer(InvocationOnMock invocation) throws Throwable {"], [317, "    Result row ="], [318, "        Result.create("], [319, "            ImmutableList.<Cell>of("], [320, "                new RowCell("], [321, "                    key.toByteArray(),"], [322, "                    Bytes.toBytes(\"family\"),"], [323, "                    Bytes.toBytes(\"\"),"], [324, "                    1000L,"], [325, "                    cellValue.toByteArray())));"], [331, "    assertTrue(matchesRow(Result.EMPTY_RESULT).matches(results[0]));"], [333, "      assertTrue("], [347, "    assertTrue(matchesRow(Result.EMPTY_RESULT).matches(results[0]));"], [356, "    return new BatchExecutor(mockBigtableApi, settings, requestAdapter);"]], "deleted": [[32, "import com.google.cloud.bigtable.core.IBigtableDataClient;"], [33, "import com.google.cloud.bigtable.core.IBulkMutation;"], [37, "import com.google.cloud.bigtable.grpc.BigtableSession;"], [38, "import com.google.cloud.bigtable.grpc.BigtableTableName;"], [39, "import com.google.cloud.bigtable.grpc.scanner.FlatRow;"], [40, "import com.google.cloud.bigtable.hbase.adapters.Adapters;"], [120, "  @Mock private BigtableSession mockBigtableSession;"], [121, ""], [124, "  @Mock private IBulkMutation mockBulkMutation;"], [125, ""], [126, "  @Mock private IBigtableDataClient mockDataClient;"], [141, "    BigtableHBaseSettings settings = BigtableHBaseSettings.create(configuration);"], [144, "    when(mockBigtableApi.getBigtableHBaseSettings()).thenReturn(settings);"], [147, "    when(mockBigtableSession.getDataClientWrapper()).thenReturn(mockDataClient);"], [148, "    when(mockBigtableSession.createBulkMutationWrapper(any(BigtableTableName.class)))"], [149, "        .thenReturn(mockBulkMutation);"], [152, "    when(mockDataClient.readModifyWriteRowAsync(any(ReadModifyWriteRow.class)))"], [171, "    FlatRow response = FlatRow.newBuilder().withRowKey(ByteString.copyFrom(key)).build();"], [172, "    setFuture(ImmutableList.of(response));"], [173, "    Result[] results = batch(Arrays.asList(new Get(key)));"], [174, "    Assert.assertTrue("], [175, "        matchesRow(Adapters.FLAT_ROW_ADAPTER.adaptResponse(response)).matches(results[0]));"], [233, "    Result result ="], [238, "                    \"cf\".getBytes(),"], [239, "                    \"\".getBytes(),"], [241, "                    \"hi!\".getBytes(),"], [245, "        .thenReturn(ApiFutures.immediateFuture(result))"], [255, "    Assert.assertTrue(\"first result is a result\", results[0] instanceof Result);"], [256, "    Assert.assertArrayEquals(key1, ((Result) results[0]).getRow());"], [264, "    FlatRow response = FlatRow.newBuilder().withRowKey(ByteString.copyFrom(key)).build();"], [265, "    setFuture(ImmutableList.of(response));"], [267, "    List<Get> gets = Arrays.asList(new Get(key));"], [268, "    createExecutor().batchCallback(gets, new Object[1], callback);"], [271, "        .update("], [272, "            same(BatchExecutor.NO_REGION),"], [273, "            same(key),"], [274, "            argThat(matchesRow(Adapters.FLAT_ROW_ADAPTER.adaptResponse(response))));"], [280, "    final List<ApiFuture<FlatRow>> expected = new ArrayList<>(10);"], [283, "    expected.add(ApiFutures.<FlatRow>immediateFuture(null));"], [291, "              FlatRow.newBuilder()"], [292, "                  .withRowKey(key)"], [293, "                  .addCell(\"family\", ByteString.EMPTY, System.nanoTime() / 1000, cellValue)"], [294, "                  .build()));"], [300, "            new Answer<ApiFuture<FlatRow>>() {"], [304, "              public ApiFuture<FlatRow> answer(InvocationOnMock invocation) throws Throwable {"], [310, "    FlatRow row ="], [311, "        FlatRow.newBuilder()"], [312, "            .withRowKey(key)"], [313, "            .addCell(\"family\", ByteString.EMPTY, System.nanoTime() / 1000, cellValue)"], [314, "            .build();"], [320, "    Assert.assertTrue(matchesRow(Result.EMPTY_RESULT).matches(results[0]));"], [322, "      Assert.assertTrue("], [336, "    Assert.assertTrue(matchesRow(Result.EMPTY_RESULT).matches(results[0]));"], [345, "    return new BatchExecutor(mockBigtableSession, mockBigtableApi, requestAdapter);"]]}, "num_lines_added": 65, "num_lines_removed": 54}