{"hash": "d9e71ba259571eca02299976b3749695b4e831be", "message": "Adding tests for RefreshingOAuth2CredentialsInterceptor (#1722)\n\n- Making more methods private and using other methods in RefreshingOAuth2CredentialsInterceptorTest.\r\n- Moving variables to be more consistent.", "file_num_lines": 310, "diff_parsed": {"added": [[69, "  private static final HeaderCacheElement EMPTY_HEADER = new HeaderCacheElement(null, 0);"], [70, ""], [71, "  @VisibleForTesting"], [72, "  static final Metadata.Key<String> AUTHORIZATION_HEADER_KEY = Metadata.Key.of("], [73, "      \"Authorization\", Metadata.ASCII_STRING_MARSHALLER);"], [74, ""], [75, "  @VisibleForTesting"], [76, "  static Clock clock = Clock.SYSTEM;"], [124, "    private HeaderCacheElement(AccessToken token) {"], [134, "    private HeaderCacheElement(String header, long actualExpirationTimeMs) {"], [140, "    private HeaderCacheElement(Status errorStatus) {"], [161, "    private boolean isValid() {"], [166, "  private static class UnAuthResponseListener<RespT> extends SimpleForwardingClientCallListener<RespT> {"], [167, ""], [168, "    private final HeaderCacheElement origToken;"], [169, "    private final RefreshingOAuth2CredentialsInterceptor interceptor;"], [170, ""], [171, "    private UnAuthResponseListener(RefreshingOAuth2CredentialsInterceptor interceptor, Listener<RespT> delegate,"], [172, "                                   HeaderCacheElement origToken) {"], [173, "      super(delegate);"], [174, "      this.origToken = origToken;"], [175, "      this.interceptor = interceptor;"], [176, "    }"], [177, ""], [178, "    @Override"], [179, "    public void onClose(Status status, Metadata trailers) {"], [180, "      if (status == Status.UNAUTHENTICATED) {"], [181, "        interceptor.revokeUnauthToken(origToken);"], [182, "      }"], [183, "      super.onClose(status, trailers);"], [184, "    }"], [185, "  }"], [197, "  private volatile HeaderCacheElement headerCache = EMPTY_HEADER;"], [240, "        delegate().start(new UnAuthResponseListener<>(RefreshingOAuth2CredentialsInterceptor.this,"], [241, "            responseListener, headerCache), headers);"], [275, "  CacheState getCacheState() {"], [276, "    return headerCache.getCacheState();"], [277, "  }"], [278, ""], [279, "  @VisibleForTesting"], [296, "  private HeaderCacheElement getHeader() {"], [325, "  private HeaderCacheElement syncRefresh() {"]], "deleted": [[96, "  private static final Metadata.Key<String> AUTHORIZATION_HEADER_KEY = Metadata.Key.of("], [97, "      \"Authorization\", Metadata.ASCII_STRING_MARSHALLER);"], [98, ""], [99, "  @VisibleForTesting"], [100, "  static Clock clock = Clock.SYSTEM;"], [101, ""], [122, "    HeaderCacheElement(AccessToken token) {"], [132, "    HeaderCacheElement(String header, long actualExpirationTimeMs) {"], [138, "    HeaderCacheElement(Status errorStatus) {"], [159, "    boolean isValid() {"], [164, "  private static final HeaderCacheElement EMPTY_HEADER = new HeaderCacheElement(null, 0);"], [175, "  @VisibleForTesting"], [177, "  volatile HeaderCacheElement headerCache = EMPTY_HEADER;"], [178, ""], [221, "        delegate().start(new UnAuthResponseListener<>(responseListener, headerCache), headers);"], [271, "  @VisibleForTesting"], [272, "  HeaderCacheElement getHeader() {"], [273, ""], [302, "  HeaderCacheElement syncRefresh() {"], [402, ""], [419, "  class UnAuthResponseListener<RespT> extends SimpleForwardingClientCallListener<RespT> {"], [420, ""], [421, "    private final HeaderCacheElement origToken;"], [422, ""], [423, "    UnAuthResponseListener(Listener<RespT> delegate, HeaderCacheElement origToken) {"], [424, "      super(delegate);"], [425, "      this.origToken = origToken;"], [426, "    }"], [427, ""], [428, "    @Override"], [429, "    public void onClose(Status status, Metadata trailers) {"], [430, "      if (status == Status.UNAUTHENTICATED) {"], [431, "        revokeUnauthToken(origToken);"], [432, "      }"], [433, "      super.onClose(status, trailers);"], [434, "    }"], [435, "  }"], [436, ""]]}, "num_lines_added": 42, "num_lines_removed": 38}