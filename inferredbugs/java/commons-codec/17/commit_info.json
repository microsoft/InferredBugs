{"hash": "ab27defc0f3a3ac9b797c23bdc32f35052492b1d", "message": "Don't use assertTrue for comparing equals\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1304137 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 951, "diff_parsed": {"added": [[84, "        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);"], [89, "        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);"], [94, "        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);"], [99, "        assertEquals(\"decode hello world\", \"Hello World\", decodeString);"], [266, "        assertEquals(0, Base64.decodeBase64(\"====\".getBytes(\"UTF-8\")).length);"], [269, "        assertEquals(0, Base64.decodeBase64(\"===\".getBytes(\"UTF-8\")).length);"], [270, "        assertEquals(0, Base64.decodeBase64(\"==\".getBytes(\"UTF-8\")).length);"], [271, "        assertEquals(0, Base64.decodeBase64(\"=\".getBytes(\"UTF-8\")).length);"], [272, "        assertEquals(0, Base64.decodeBase64(\"\".getBytes(\"UTF-8\")).length);"], [277, "        assertEquals(0, Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\")).length);"], [280, "        assertEquals(0, Base64.decodeBase64(\"===\\n\".getBytes(\"UTF-8\")).length);"], [281, "        assertEquals(0, Base64.decodeBase64(\"==\\n\".getBytes(\"UTF-8\")).length);"], [282, "        assertEquals(0, Base64.decodeBase64(\"=\\n\".getBytes(\"UTF-8\")).length);"], [283, "        assertEquals(0, Base64.decodeBase64(\"\\n\".getBytes(\"UTF-8\")).length);"], [304, "        assertEquals(\"Dest string doesn't equal the original\", orig, dest);"], [457, "            assertEquals(\"The result should be empty as the test encoded content did \" + \"not contain any valid base 64 characters\","], [458, "                    0, result.length);"], [491, "        assertEquals(\"dest string does not equal original\", original, dest);"], [516, "        assertEquals(\"dest string does not equal original\", original, dest);"], [1235, "        assertEquals(\"testDEFAULT_BUFFER_SIZE\", strOriginal, strDecoded);"]], "deleted": [[84, "        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));"], [89, "        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));"], [94, "        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));"], [99, "        assertTrue(\"decode hello world\", decodeString.equals(\"Hello World\"));"], [266, "        assertTrue(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\")).length == 0);"], [269, "        assertTrue(Base64.decodeBase64(\"===\".getBytes(\"UTF-8\")).length == 0);"], [270, "        assertTrue(Base64.decodeBase64(\"==\".getBytes(\"UTF-8\")).length == 0);"], [271, "        assertTrue(Base64.decodeBase64(\"=\".getBytes(\"UTF-8\")).length == 0);"], [272, "        assertTrue(Base64.decodeBase64(\"\".getBytes(\"UTF-8\")).length == 0);"], [277, "        assertTrue(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\")).length == 0);"], [280, "        assertTrue(Base64.decodeBase64(\"===\\n\".getBytes(\"UTF-8\")).length == 0);"], [281, "        assertTrue(Base64.decodeBase64(\"==\\n\".getBytes(\"UTF-8\")).length == 0);"], [282, "        assertTrue(Base64.decodeBase64(\"=\\n\".getBytes(\"UTF-8\")).length == 0);"], [283, "        assertTrue(Base64.decodeBase64(\"\\n\".getBytes(\"UTF-8\")).length == 0);"], [304, "        assertTrue(\"Dest string doesn't equal the original\", dest.equals(orig));"], [457, "            assertTrue(\"The result should be empty as the test encoded content did \" + \"not contain any valid base 64 characters\","], [458, "                    result.length == 0);"], [491, "        assertTrue(\"dest string does not equal original\", dest.equals(original));"], [516, "        assertTrue(\"dest string does not equal original\", dest.equals(original));"], [1235, "        assertTrue(\"testDEFAULT_BUFFER_SIZE\", strOriginal.equals(strDecoded));"]]}, "num_lines_added": 20, "num_lines_removed": 20}