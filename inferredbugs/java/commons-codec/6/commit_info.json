{"hash": "5193321d27aec9d3f26c407dac6d4df9546f9036", "message": "getBytes() relies on the current encoding; use UTF-8 for portability\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@928757 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 876, "diff_parsed": {"added": [[20, "import java.io.UnsupportedEncodingException;"], [104, "    public void testCodeInteger1() throws UnsupportedEncodingException {"], [109, "        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(\"UTF-8\")));"], [112, "    public void testCodeInteger2() throws UnsupportedEncodingException {"], [117, "        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(\"UTF-8\")));"], [120, "    public void testCodeInteger3() throws UnsupportedEncodingException {"], [127, "        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(\"UTF-8\")));"], [130, "    public void testCodeInteger4() throws UnsupportedEncodingException {"], [143, "        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(\"UTF-8\")));"], [220, "    public void testDecodePadMarkerIndex2() throws UnsupportedEncodingException {"], [221, "        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(\"UTF-8\"))));"], [227, "    public void testDecodePadMarkerIndex3() throws UnsupportedEncodingException {"], [228, "        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(\"UTF-8\"))));"], [229, "        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(\"UTF-8\"))));"], [232, "    public void testDecodePadOnly() throws UnsupportedEncodingException {"], [233, "        assertTrue(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\")).length == 0);"], [234, "        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\"))));"], [236, "        assertTrue(Base64.decodeBase64(\"===\".getBytes(\"UTF-8\")).length == 0);"], [237, "        assertTrue(Base64.decodeBase64(\"==\".getBytes(\"UTF-8\")).length == 0);"], [238, "        assertTrue(Base64.decodeBase64(\"=\".getBytes(\"UTF-8\")).length == 0);"], [239, "        assertTrue(Base64.decodeBase64(\"\".getBytes(\"UTF-8\")).length == 0);"], [242, "    public void testDecodePadOnlyChunked() throws UnsupportedEncodingException {"], [243, "        assertTrue(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\")).length == 0);"], [244, "        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\"))));"], [246, "        assertTrue(Base64.decodeBase64(\"===\\n\".getBytes(\"UTF-8\")).length == 0);"], [247, "        assertTrue(Base64.decodeBase64(\"==\\n\".getBytes(\"UTF-8\")).length == 0);"], [248, "        assertTrue(Base64.decodeBase64(\"=\\n\".getBytes(\"UTF-8\")).length == 0);"], [249, "        assertTrue(Base64.decodeBase64(\"\\n\".getBytes(\"UTF-8\")).length == 0);"], [256, "        byte[] encodedArray = Base64.encodeBase64(orig.getBytes(\"UTF-8\"));"], [264, "        byte[] encodedWithWS = intermediate.toString().getBytes(\"UTF-8\");"], [276, "        byte[] encodedArray = Base64.encodeBase64(orig.getBytes(\"UTF-8\"));"], [284, "        byte[] encodedWithWS = intermediate.toString().getBytes(\"UTF-8\");"], [353, "                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(\"UTF-8\"))));"], [384, "    public void testKnownDecodings() throws UnsupportedEncodingException {"], [386, "                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(\"UTF-8\"))));"], [388, "                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes(\"UTF-8\"))));"], [390, "                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes(\"UTF-8\"))));"], [392, "                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes(\"UTF-8\"))));"], [394, "                .getBytes(\"UTF-8\"))));"], [395, "        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(\"UTF-8\"))));"], [398, "    public void testKnownEncodings() throws UnsupportedEncodingException {"], [400, "                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(\"UTF-8\"))));"], [406, "                                        .getBytes(\"UTF-8\"))));"], [408, "                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes(\"UTF-8\"))));"], [410, "                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes(\"UTF-8\"))));"], [412, "                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(\"UTF-8\"))));"], [414, "                .getBytes(\"UTF-8\"))));"], [415, "        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(\"UTF-8\"))));"], [454, "        Object o = Base64.encodeBase64(original.getBytes(\"UTF-8\"));"], [477, "        Object origObj = original.getBytes(\"UTF-8\");"]], "deleted": [[103, "    public void testCodeInteger1() {"], [108, "        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes()));"], [111, "    public void testCodeInteger2() {"], [116, "        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes()));"], [119, "    public void testCodeInteger3() {"], [126, "        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes()));"], [129, "    public void testCodeInteger4() {"], [142, "        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes()));"], [219, "    public void testDecodePadMarkerIndex2() {"], [220, "        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes())));"], [226, "    public void testDecodePadMarkerIndex3() {"], [227, "        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes())));"], [228, "        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes())));"], [231, "    public void testDecodePadOnly() {"], [232, "        assertTrue(Base64.decodeBase64(\"====\".getBytes()).length == 0);"], [233, "        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes())));"], [235, "        assertTrue(Base64.decodeBase64(\"===\".getBytes()).length == 0);"], [236, "        assertTrue(Base64.decodeBase64(\"==\".getBytes()).length == 0);"], [237, "        assertTrue(Base64.decodeBase64(\"=\".getBytes()).length == 0);"], [238, "        assertTrue(Base64.decodeBase64(\"\".getBytes()).length == 0);"], [241, "    public void testDecodePadOnlyChunked() {"], [242, "        assertTrue(Base64.decodeBase64(\"====\\n\".getBytes()).length == 0);"], [243, "        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes())));"], [245, "        assertTrue(Base64.decodeBase64(\"===\\n\".getBytes()).length == 0);"], [246, "        assertTrue(Base64.decodeBase64(\"==\\n\".getBytes()).length == 0);"], [247, "        assertTrue(Base64.decodeBase64(\"=\\n\".getBytes()).length == 0);"], [248, "        assertTrue(Base64.decodeBase64(\"\\n\".getBytes()).length == 0);"], [255, "        byte[] encodedArray = Base64.encodeBase64(orig.getBytes());"], [263, "        byte[] encodedWithWS = intermediate.toString().getBytes();"], [275, "        byte[] encodedArray = Base64.encodeBase64(orig.getBytes());"], [283, "        byte[] encodedWithWS = intermediate.toString().getBytes();"], [352, "                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));"], [383, "    public void testKnownDecodings() {"], [385, "                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));"], [387, "                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes())));"], [389, "                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes())));"], [391, "                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes())));"], [393, "                .getBytes())));"], [394, "        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes())));"], [397, "    public void testKnownEncodings() {"], [399, "                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes())));"], [405, "                                        .getBytes())));"], [407, "                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes())));"], [409, "                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes())));"], [411, "                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes())));"], [413, "                .getBytes())));"], [414, "        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes())));"], [453, "        Object o = Base64.encodeBase64(original.getBytes());"], [476, "        Object origObj = original.getBytes();"]]}, "num_lines_added": 50, "num_lines_removed": 49}