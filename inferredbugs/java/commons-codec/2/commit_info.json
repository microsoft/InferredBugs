{"hash": "e17d5c54eebc1dace8466d08907995041c30e04e", "message": "[CODEC-59] Add methods to Base64 which work with String instead of byte[]. Patch applied with one added test code line to keep line code coverage at 100%. Branch coverage up to 92% from 91%.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@799800 13f79535-47bb-0310-9956-ffa450edef68", "file_num_lines": 813, "diff_parsed": {"added": [[63, "        byte[] encodedBytes = Base64.encodeBase64(StringUtils.getBytesUtf8(content));"], [64, "        encodedContent = StringUtils.newStringUtf8(encodedBytes);"], [292, "        assertEquals(\"empty base64 encode\", null, Base64.decodeBase64((byte[]) null));"], [427, "            b64.decode(new Integer(5));"], [428, "            fail(\"decode(Object) didn't throw an exception when passed an Integer object\");"], [960, "    public void testByteToStringVariations() throws DecoderException {"], [961, "        Base64 base64 = new Base64(0);"], [962, "        byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");"], [963, "        byte[] b2 = new byte[0];"], [964, "        byte[] b3 = null;"], [965, "        byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\".toCharArray());  // for url-safe tests"], [966, ""], [967, "        assertEquals(\"byteToString Hello World\", \"SGVsbG8gV29ybGQ=\", base64.encodeToString(b1));"], [968, "        assertEquals(\"byteToString static Hello World\", \"SGVsbG8gV29ybGQ=\\r\\n\", Base64.encodeBase64String(b1));"], [969, "        assertEquals(\"byteToString \\\"\\\"\", \"\", base64.encodeToString(b2));"], [970, "        assertEquals(\"byteToString static \\\"\\\"\", \"\", Base64.encodeBase64String(b2));"], [971, "        assertEquals(\"byteToString null\", null, base64.encodeToString(b3));"], [972, "        assertEquals(\"byteToString static null\", null, Base64.encodeBase64String(b3));"], [973, "        assertEquals(\"byteToString UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\", base64.encodeToString(b4));"], [974, "        assertEquals(\"byteToString static UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\\r\\n\", Base64.encodeBase64String(b4));"], [975, "        assertEquals(\"byteToString static-url-safe UUID\", \"K_fMJwH-Q5e0nr7tWsxwkA\", Base64.encodeBase64URLSafeString(b4));"], [976, "    }"], [977, ""], [978, "    public void testStringToByteVariations() throws DecoderException {"], [979, "        Base64 base64 = new Base64();"], [980, "        String s1 = \"SGVsbG8gV29ybGQ=\\r\\n\";"], [981, "        String s2 = \"\";"], [982, "        String s3 = null;"], [983, "        String s4a = \"K/fMJwH+Q5e0nr7tWsxwkA==\\r\\n\";"], [984, "        String s4b = \"K_fMJwH-Q5e0nr7tWsxwkA\";"], [985, "        byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\".toCharArray());  // for url-safe tests"], [986, ""], [987, "        assertEquals(\"StringToByte Hello World\", \"Hello World\", StringUtils.newStringUtf8(base64.decode(s1)));"], [988, "        assertEquals(\"StringToByte Hello World\", \"Hello World\", StringUtils.newStringUtf8((byte[])base64.decode((Object)s1)));"], [989, "        assertEquals(\"StringToByte static Hello World\", \"Hello World\", StringUtils.newStringUtf8(Base64.decodeBase64(s1)));"], [990, "        assertEquals(\"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(base64.decode(s2)));"], [991, "        assertEquals(\"StringToByte static \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base64.decodeBase64(s2)));"], [992, "        assertEquals(\"StringToByte null\", null, StringUtils.newStringUtf8(base64.decode(s3)));"], [993, "        assertEquals(\"StringToByte static null\", null, StringUtils.newStringUtf8(Base64.decodeBase64(s3)));"], [994, "        assertTrue(\"StringToByte UUID\", Arrays.equals(b4, base64.decode(s4b)));"], [995, "        assertTrue(\"StringToByte static UUID\", Arrays.equals(b4, Base64.decodeBase64(s4a)));"], [996, "        assertTrue(\"StringToByte static-url-safe UUID\", Arrays.equals(b4, Base64.decodeBase64(s4b)));"], [997, "    }"], [998, ""]], "deleted": [[63, "        encodedContent = new String(Base64.encodeBase64(content.getBytes()));"], [291, "        assertEquals(\"empty base64 encode\", null, Base64.decodeBase64(null));"], [426, "            b64.decode(\"Yadayadayada\");"], [427, "            fail(\"decode(Object) didn't throw an exception when passed a String object\");"]]}, "num_lines_added": 44, "num_lines_removed": 4}