 @Override
	protected void doHealthCheck(Health.Builder builder) throws Exception {
		AdminClient adminClient = null;

		try {
			final Status status = healthStatusThreadLocal.get();
			//If one of the kafka streams binders (kstream, ktable, globalktable) was down before on the same request,
			//retrieve that from the theadlocal storage where it was saved before. This is done in order to avoid
			//the duration of the total health check since in the case of Kafka Streams each binder tries to do
			//its own health check and since we already know that this is DOWN, simply pass that information along.
			if (status == Status.DOWN) {
				builder.withDetail("No topic information available", "Kafka broker is not reachable");
				builder.status(Status.DOWN);
			}
			else {
				adminClient = AdminClient.create(this.adminClientProperties);
				final ListTopicsResult listTopicsResult = adminClient.listTopics();
				listTopicsResult.listings().get(this.configurationProperties.getHealthTimeout(), TimeUnit.SECONDS);

				if (this.kafkaStreamsBindingInformationCatalogue.getStreamsBuilderFactoryBeans().isEmpty()) {
					builder.withDetail("No Kafka Streams bindings have been established", "Kafka Streams binder did not detect any processors");
					builder.status(Status.UNKNOWN);
				}
				else {
					boolean up = true;
					for (KafkaStreams kStream : kafkaStreamsRegistry.getKafkaStreams()) {
						up &= kStream.state().isRunning();
						builder.withDetails(buildDetails(kStream));
					}
					builder.status(up ? Status.UP : Status.DOWN);
				}
			}
		}
		catch (Exception e) {
			builder.withDetail("No topic information available", "Kafka broker is not reachable");
			builder.status(Status.DOWN);
			builder.withException(e);
			//Store binder down status into a thread local storage.
			healthStatusThreadLocal.set(Status.DOWN);
		}
		finally {
			// Close admin client immediately.
			if (adminClient != null) {
				adminClient.close(Duration.ofSeconds(0));
			}
		}
	}