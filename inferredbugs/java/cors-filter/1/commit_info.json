{"hash": "a11e703c9a3f823b62638cc9aca34904b497d874", "message": "Updated tests.", "file_num_lines": 429, "diff_parsed": {"added": [[295, "        MockHttpServletRequest request = new MockHttpServletRequest();"], [296, "        request.setHeader(CORSFilter.REQUEST_HEADER_ORIGIN,"], [298, "        request.setMethod(\"POST\");"], [299, "        MockHttpServletResponse response = new MockHttpServletResponse();"], [317, "        MockHttpServletResponse response = new MockHttpServletResponse();"], [326, "        MockHttpServletRequest request = new MockHttpServletRequest();"], [335, "        MockHttpServletRequest request = new MockHttpServletRequest();"], [336, "        request.setHeader(CORSFilter.REQUEST_HEADER_ORIGIN,"], [338, "        request.setMethod(\"GET\");"], [339, "        MockHttpServletResponse response = new MockHttpServletResponse();"], [344, ""], [345, "        Assert.assertTrue(response.getHeader("], [346, "                CORSFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("], [347, "                \"*\"));"], [348, "        Assert.assertTrue((Boolean) request"], [349, "                .getAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST));"], [350, "        Assert.assertTrue(request.getAttribute("], [351, "                CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals("], [352, "                TestConfigs.HTTPS_WWW_APACHE_ORG));"], [353, "        Assert.assertTrue(request.getAttribute("], [354, "                CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals("], [355, "                CORSRequestType.SIMPLE.getType()));"], [375, "        MockHttpServletRequest request = new MockHttpServletRequest();"], [376, "        request.setHeader(CORSFilter.REQUEST_HEADER_ORIGIN,"], [377, "                TestConfigs.HTTPS_WWW_APACHE_ORG);"], [378, "        request.setHeader("], [379, "                CORSFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, \"PUT\");"], [380, "        request.setHeader("], [381, "                CORSFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,"], [382, "                \"Content-Type\");"], [383, "        request.setMethod(\"OPTIONS\");"], [384, "        MockHttpServletResponse response = new MockHttpServletResponse();"], [387, "        corsFilter.init(TestConfigs"], [388, "                .getDefaultFilterConfig());"], [400, "        MockHttpServletRequest request = new MockHttpServletRequest();"], [401, "        request.setHeader(CORSFilter.REQUEST_HEADER_ORIGIN,"], [402, "                TestConfigs.HTTPS_WWW_APACHE_ORG);"], [403, "        request.setMethod(\"GET\");"], [404, "        MockHttpServletResponse response = new MockHttpServletResponse();"], [423, "        MockHttpServletRequest request = new MockHttpServletRequest();"], [429, "        MockHttpServletRequest request = new MockHttpServletRequest();"], [431, "        Assert.assertFalse((Boolean) request"], [432, "                .getAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST));"], [437, "        MockHttpServletRequest request = new MockHttpServletRequest();"], [438, "        CORSFilter.decorateCORSProperties(request, CORSRequestType.INVALID_CORS);"], [439, "        Assert.assertNull(request"], [440, "                .getAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST));"]], "deleted": [[9, "import javax.servlet.http.HttpServletRequest;"], [10, "import javax.servlet.http.HttpServletResponse;"], [12, "import org.easymock.EasyMock;"], [298, "        HttpServletRequest request ="], [299, "                EasyMock.createMock(HttpServletRequest.class);"], [300, ""], [301, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [302, "                .andReturn(\"www.google.com\").anyTimes();"], [303, "        EasyMock.expect(request.getMethod()).andReturn(\"OPTIONS\").anyTimes();"], [304, "        EasyMock.expect("], [305, "                request.getHeader(CORSFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD))"], [306, "                .andReturn(\"OPTIONS\").anyTimes();"], [307, ""], [308, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [309, "                true);"], [310, "        EasyMock.expectLastCall();"], [311, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [313, "        EasyMock.expectLastCall();"], [314, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [315, "                CORSRequestType.INVALID_CORS.getType());"], [316, "        EasyMock.expectLastCall();"], [317, ""], [318, "        EasyMock.replay(request);"], [319, ""], [320, "        HttpServletResponse response ="], [321, "                EasyMock.createNiceMock(HttpServletResponse.class);"], [322, "        EasyMock.replay(response);"], [323, ""], [324, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [329, ""], [330, "        EasyMock.verify(request, response);"], [331, "        // If we don't get an exception at this point, then all mocked objects"], [332, "        // worked as expected."], [338, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [339, ""], [348, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [349, "        HttpServletResponse response ="], [350, "                EasyMock.createMock(HttpServletResponse.class);"], [359, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [360, "        HttpServletRequest request ="], [361, "                EasyMock.createMock(HttpServletRequest.class);"], [368, "    public void testDoFilterSimpleCustomHandlers() throws IOException,"], [369, "            ServletException {"], [370, "        HttpServletRequest request ="], [371, "                EasyMock.createMock(HttpServletRequest.class);"], [372, ""], [373, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [374, "                .andReturn(TestConfigs.HTTPS_WWW_APACHE_ORG).anyTimes();"], [375, "        EasyMock.expect(request.getMethod()).andReturn(\"POST\").anyTimes();"], [376, ""], [377, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [378, "                true);"], [379, "        EasyMock.expectLastCall();"], [380, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [381, "                TestConfigs.HTTPS_WWW_APACHE_ORG);"], [382, "        EasyMock.expectLastCall();"], [383, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [384, "                CORSRequestType.SIMPLE.getType());"], [385, "        EasyMock.expectLastCall();"], [386, ""], [387, "        EasyMock.replay(request);"], [388, ""], [389, "        HttpServletResponse response ="], [390, "                EasyMock.createNiceMock(HttpServletResponse.class);"], [391, "        EasyMock.replay(response);"], [392, ""], [393, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [394, ""], [395, "        CORSFilter corsFilter = new CORSFilter();"], [396, "        corsFilter.init(TestConfigs.getDefaultFilterConfig());"], [397, ""], [398, "        corsFilter.doFilter(request, response, filterChain);"], [399, "        corsFilter.destroy();"], [400, "        // If we don't get an exception at this point, then all mocked objects"], [401, "        // worked as expected."], [402, "    }"], [403, ""], [404, "    /**"], [405, "     * Should load the default config and configure default handlers. And, not"], [406, "     * throw IOException."], [407, "     *"], [408, "     * @throws IOException"], [409, "     */"], [410, "    public void testDefaultConstructor() throws IOException {"], [411, "        new CORSFilter();"], [412, "    }"], [413, ""], [414, "    @Test"], [415, "    public void testInit() throws IOException, ServletException {"], [416, "        HttpServletRequest request ="], [417, "                EasyMock.createMock(HttpServletRequest.class);"], [418, ""], [419, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [420, "                .andReturn(TestConfigs.HTTPS_WWW_APACHE_ORG).anyTimes();"], [421, "        EasyMock.expect(request.getMethod()).andReturn(\"POST\").anyTimes();"], [422, ""], [423, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [424, "                true);"], [425, "        EasyMock.expectLastCall();"], [426, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [427, "                TestConfigs.HTTPS_WWW_APACHE_ORG);"], [428, "        EasyMock.expectLastCall();"], [429, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [430, "                CORSRequestType.SIMPLE.getType());"], [431, "        EasyMock.expectLastCall();"], [432, ""], [433, "        EasyMock.replay(request);"], [434, ""], [435, "        HttpServletResponse response ="], [436, "                EasyMock.createNiceMock(HttpServletResponse.class);"], [437, "        EasyMock.replay(response);"], [438, ""], [439, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [440, ""], [441, "        CORSFilter corsFilter = new CORSFilter();"], [442, "        corsFilter.init(TestConfigs.getSpecificOriginFilterConfig());"], [443, "        corsFilter.doFilter(request, response, filterChain);"], [444, "        corsFilter.destroy();"], [445, "        // If we don't get an exception at this point, then all mocked objects"], [446, "        // worked as expected."], [447, "    }"], [448, ""], [449, "    @Test"], [452, "        HttpServletRequest request ="], [453, "                EasyMock.createMock(HttpServletRequest.class);"], [454, ""], [455, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [456, "                .andReturn(TestConfigs.HTTPS_WWW_APACHE_ORG).anyTimes();"], [457, "        EasyMock.expect(request.getMethod()).andReturn(\"POST\").anyTimes();"], [458, ""], [459, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [460, "                true);"], [461, "        EasyMock.expectLastCall();"], [462, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [464, "        EasyMock.expectLastCall();"], [465, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [466, "                CORSRequestType.SIMPLE.getType());"], [467, "        EasyMock.expectLastCall();"], [468, ""], [469, "        EasyMock.replay(request);"], [470, ""], [471, "        HttpServletResponse response ="], [472, "                EasyMock.createNiceMock(HttpServletResponse.class);"], [473, "        EasyMock.replay(response);"], [474, ""], [475, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [480, "        corsFilter.destroy();"], [481, "        // If we don't get an exception at this point, then all mocked objects"], [482, "        // worked as expected."], [494, "    @Test"], [495, "    public void testSimpleCORSRequest() throws IOException, ServletException {"], [496, "        HttpServletRequest request ="], [497, "                EasyMock.createMock(HttpServletRequest.class);"], [498, ""], [499, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [500, "                .andReturn(TestConfigs.HTTP_TOMCAT_APACHE_ORG).anyTimes();"], [501, "        EasyMock.expect(request.getMethod()).andReturn(\"POST\").anyTimes();"], [502, ""], [503, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [504, "                true);"], [505, "        EasyMock.expectLastCall();"], [506, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [507, "                TestConfigs.HTTP_TOMCAT_APACHE_ORG);"], [508, "        EasyMock.expectLastCall();"], [509, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [510, "                CORSRequestType.SIMPLE.getType());"], [511, "        EasyMock.expectLastCall();"], [512, ""], [513, "        EasyMock.replay(request);"], [514, ""], [515, "        HttpServletResponse response ="], [516, "                EasyMock.createNiceMock(HttpServletResponse.class);"], [517, "        EasyMock.replay(response);"], [518, ""], [519, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [520, "        filterChain.doFilter(request, response);"], [521, "        EasyMock.replay(filterChain);"], [522, ""], [523, "        CORSFilter corsFilter = new CORSFilter();"], [524, "        corsFilter.init(TestConfigs.getDefaultFilterConfig());"], [525, "        corsFilter.doFilter(request, response, filterChain);"], [526, "    }"], [527, ""], [536, "        HttpServletRequest request ="], [537, "                EasyMock.createMock(HttpServletRequest.class);"], [538, ""], [539, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [540, "                .andReturn(TestConfigs.HTTP_TOMCAT_APACHE_ORG).anyTimes();"], [541, "        EasyMock.expect(request.getMethod()).andReturn(\"OPTIONS\").anyTimes();"], [542, "        EasyMock.expect("], [543, "                request.getHeader(CORSFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD))"], [544, "                .andReturn(\"OPTIONS\").anyTimes();"], [545, "        EasyMock.expect("], [546, "                request.getHeader(CORSFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS))"], [547, "                .andReturn(\"Content-Type\").anyTimes();"], [548, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [549, "                true);"], [550, "        EasyMock.expectLastCall();"], [551, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [552, "                TestConfigs.HTTP_TOMCAT_APACHE_ORG);"], [553, "        EasyMock.expectLastCall();"], [554, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [555, "                CORSRequestType.PRE_FLIGHT.getType());"], [556, "        EasyMock.expectLastCall();"], [557, ""], [558, "        EasyMock.replay(request);"], [559, ""], [560, "        HttpServletResponse response ="], [561, "                EasyMock.createNiceMock(HttpServletResponse.class);"], [562, "        EasyMock.replay(response);"], [563, ""], [564, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [565, "        EasyMock.replay(filterChain);"], [568, "        corsFilter.init(TestConfigs.getDefaultFilterConfig());"], [580, "        HttpServletRequest request ="], [581, "                EasyMock.createMock(HttpServletRequest.class);"], [582, ""], [583, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [584, "                .andReturn(TestConfigs.HTTP_TOMCAT_APACHE_ORG).anyTimes();"], [585, "        EasyMock.expect(request.getMethod()).andReturn(\"POST\").anyTimes();"], [586, ""], [587, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [588, "                true);"], [589, "        EasyMock.expectLastCall();"], [590, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [591, "                TestConfigs.HTTP_TOMCAT_APACHE_ORG);"], [592, "        EasyMock.expectLastCall();"], [593, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [594, "                CORSRequestType.SIMPLE.getType());"], [595, "        EasyMock.expectLastCall();"], [596, ""], [597, "        EasyMock.replay(request);"], [598, ""], [599, "        HttpServletResponse response ="], [600, "                EasyMock.createNiceMock(HttpServletResponse.class);"], [601, "        EasyMock.replay(response);"], [602, ""], [603, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [604, "        EasyMock.replay(filterChain);"], [605, ""], [606, "        CORSFilter corsFilter = new CORSFilter();"], [607, "        corsFilter.init(TestConfigs.getDefaultFilterConfig());"], [608, "        corsFilter.handlePreflightCORS(request, response, filterChain);"], [609, "    }"], [610, ""], [611, "    @Test"], [612, "    public void testPreFlightHandler() throws IOException, ServletException {"], [613, "        HttpServletRequest request ="], [614, "                EasyMock.createMock(HttpServletRequest.class);"], [615, ""], [616, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [617, "                .andReturn(TestConfigs.HTTP_TOMCAT_APACHE_ORG).anyTimes();"], [618, "        EasyMock.expect(request.getMethod()).andReturn(\"OPTIONS\").anyTimes();"], [619, "        EasyMock.expect("], [620, "                request.getHeader(CORSFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD))"], [621, "                .andReturn(\"OPTIONS\").anyTimes();"], [622, "        EasyMock.expect("], [623, "                request.getHeader(CORSFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS))"], [624, "                .andReturn(\"Content-Type\").anyTimes();"], [625, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [626, "                true);"], [627, "        EasyMock.expectLastCall();"], [628, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [629, "                TestConfigs.HTTP_TOMCAT_APACHE_ORG);"], [630, "        EasyMock.expectLastCall();"], [631, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [632, "                CORSRequestType.PRE_FLIGHT.getType());"], [633, "        EasyMock.expectLastCall();"], [634, ""], [635, "        EasyMock.replay(request);"], [636, ""], [637, "        HttpServletResponse response ="], [638, "                EasyMock.createNiceMock(HttpServletResponse.class);"], [639, "        EasyMock.replay(response);"], [640, ""], [641, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [642, "        EasyMock.replay(filterChain);"], [649, "    @Test"], [650, "    public void testHandleNonCORSHandler() throws IOException, ServletException {"], [651, "        HttpServletRequest request ="], [652, "                EasyMock.createMock(HttpServletRequest.class);"], [653, "        HttpServletResponse response ="], [654, "                EasyMock.createNiceMock(HttpServletResponse.class);"], [655, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [656, "        filterChain.doFilter(request, response);"], [657, "        EasyMock.expectLastCall();"], [658, "        EasyMock.replay(request);"], [659, "        EasyMock.replay(response);"], [660, "        EasyMock.replay(filterChain);"], [661, ""], [662, "        CORSFilter corsFilter = new CORSFilter();"], [663, "        corsFilter.handleNonCORS(request, response, filterChain);"], [664, "    }"], [665, ""], [666, "    @Test(expected = ServletException.class)"], [667, "    public void testHandleInvalidCORS() throws IOException, ServletException {"], [668, "        HttpServletRequest request ="], [669, "                EasyMock.createMock(HttpServletRequest.class);"], [670, "        HttpServletResponse response ="], [671, "                EasyMock.createNiceMock(HttpServletResponse.class);"], [672, "        FilterChain filterChain = EasyMock.createNiceMock(FilterChain.class);"], [673, ""], [674, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [675, "                .andReturn(\"www.google.com\").anyTimes();"], [676, "        EasyMock.expect(request.getMethod()).andReturn(\"OPTIONS\").anyTimes();"], [677, ""], [678, "        EasyMock.replay(request);"], [679, "        EasyMock.replay(response);"], [680, "        EasyMock.replay(filterChain);"], [681, ""], [682, "        CORSFilter corsFilter = new CORSFilter();"], [683, ""], [684, "        corsFilter.handleInvalidCORS(request, response, filterChain);"], [685, "    }"], [686, ""], [699, "        HttpServletRequest request ="], [700, "                EasyMock.createMock(HttpServletRequest.class);"], [701, "        EasyMock.replay(request);"], [706, "    public void testDecorateCORSPropertiesCORSRequestTypeSimple() {"], [707, "        HttpServletRequest request ="], [708, "                EasyMock.createMock(HttpServletRequest.class);"], [709, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [710, "                .andReturn(TestConfigs.HTTP_TOMCAT_APACHE_ORG).anyTimes();"], [711, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [712, "                true);"], [713, "        EasyMock.expectLastCall();"], [714, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [715, "                TestConfigs.HTTP_TOMCAT_APACHE_ORG);"], [716, "        EasyMock.expectLastCall();"], [717, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [718, "                CORSRequestType.SIMPLE.getType());"], [719, "        EasyMock.expectLastCall();"], [720, "        EasyMock.replay(request);"], [721, "        CORSFilter.decorateCORSProperties(request, CORSRequestType.SIMPLE);"], [722, "    }"], [723, ""], [724, "    @Test"], [725, "    public void testDecorateCORSPropertiesCORSRequestTypePreFlight() {"], [726, "        HttpServletRequest request ="], [727, "                EasyMock.createMock(HttpServletRequest.class);"], [728, "        EasyMock.expect("], [729, "                request.getHeader(CORSFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS))"], [730, "                .andReturn(\"Content-Type\").anyTimes();"], [731, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [732, "                .andReturn(TestConfigs.HTTP_TOMCAT_APACHE_ORG).anyTimes();"], [733, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [734, "                true);"], [735, "        EasyMock.expectLastCall();"], [736, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [737, "                TestConfigs.HTTP_TOMCAT_APACHE_ORG);"], [738, "        EasyMock.expectLastCall();"], [739, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [740, "                CORSRequestType.PRE_FLIGHT.getType());"], [741, "        EasyMock.expectLastCall();"], [742, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS,"], [743, "                \"Content-Type\");"], [744, "        EasyMock.expectLastCall();"], [745, "        EasyMock.replay(request);"], [746, "        CORSFilter.decorateCORSProperties(request, CORSRequestType.PRE_FLIGHT);"], [747, "    }"], [748, ""], [749, "    @Test"], [750, "    public void"], [751, "            testDecorateCORSPropertiesCORSRequestTypePreFlightNoACRHHeadersPassed() {"], [752, "        HttpServletRequest request ="], [753, "                EasyMock.createMock(HttpServletRequest.class);"], [754, "        EasyMock.expect(request.getHeader(CORSFilter.REQUEST_HEADER_ORIGIN))"], [755, "                .andReturn(TestConfigs.HTTP_TOMCAT_APACHE_ORG).anyTimes();"], [756, "        EasyMock.expect("], [757, "                request.getHeader(CORSFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS))"], [758, "                .andReturn(null).anyTimes();"], [759, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [760, "                true);"], [761, "        EasyMock.expectLastCall();"], [762, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN,"], [763, "                TestConfigs.HTTP_TOMCAT_APACHE_ORG);"], [764, "        EasyMock.expectLastCall();"], [765, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,"], [766, "                CORSRequestType.PRE_FLIGHT.getType());"], [767, "        EasyMock.expectLastCall();"], [768, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS,"], [769, "                \"\");"], [770, "        EasyMock.expectLastCall();"], [771, "        EasyMock.replay(request);"], [772, "        CORSFilter.decorateCORSProperties(request, CORSRequestType.PRE_FLIGHT);"], [773, "    }"], [774, ""], [775, "    @Test"], [777, "        HttpServletRequest request ="], [778, "                EasyMock.createMock(HttpServletRequest.class);"], [779, "        request.setAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST,"], [780, "                false);"], [781, "        EasyMock.expectLastCall();"], [782, "        EasyMock.replay(request);"], [788, "        HttpServletRequest request ="], [789, "                EasyMock.createMock(HttpServletRequest.class);"], [790, "        EasyMock.replay(request);"], [791, "        CORSFilter"], [792, "                .decorateCORSProperties(request, CORSRequestType.INVALID_CORS);"]]}, "num_lines_added": 47, "num_lines_removed": 399}