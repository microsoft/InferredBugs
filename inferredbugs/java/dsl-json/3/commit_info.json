{"hash": "a8e9333ee7265757e2b343f280d400f0770da488", "message": "List and array optimization. Container fixes\n\nCall directly into the reader/writer methods instead of going through runtime analysis.\nThis should cut down on some pointer chasing.\n\nGuard against known container when doing analysis.\nThis avoids the problem of generic/unknown container within the container", "file_num_lines": 403, "diff_parsed": {"added": [[141, "\t\tjacksonCreatorElement = processingEnv.getElementUtils().getTypeElement(\"com.fasterxml.jackson.annotation.JsonCreator\");"], [142, "\t\tjacksonCreatorType = jacksonCreatorElement != null ? processingEnv.getTypeUtils().getDeclaredType(jacksonCreatorElement) : null;"], [143, "\t\tjsonbCreatorElement = processingEnv.getElementUtils().getTypeElement(\"javax.json.bind.annotation.JsonbCreator\");"], [144, "\t\tjsonbCreatorType = jsonbCreatorElement != null ? processingEnv.getTypeUtils().getDeclaredType(jsonbCreatorElement) : null;"], [145, "\t}"], [146, ""], [147, "\t@Override"], [148, "\tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {"], [149, "\t\tif (roundEnv.processingOver()) {"], [150, "\t\t\treturn false;"], [151, "\t\t}"], [161, "\t\tfinal Analysis analysis = new Analysis("], [206, "\t\t\t\tbuildCode(writer, structs, allowInline, allTypes);"], [233, "\tprivate static void buildCode(final Writer code, final Map<String, StructInfo> structs, final boolean allowInline, final Set<String> knownTypes) throws IOException {"], [234, "\t\tfinal Context context = new Context(code, allowInline, InlinedConverters, Defaults, structs, knownTypes);"]], "deleted": [[11, "import javax.lang.model.element.VariableElement;"], [109, "\tprivate Analysis analysis;"], [152, "\t\tanalysis = new Analysis("], [176, "\t\tjacksonCreatorElement = processingEnv.getElementUtils().getTypeElement(\"com.fasterxml.jackson.annotation.JsonCreator\");"], [177, "\t\tjacksonCreatorType = jacksonCreatorElement != null ? processingEnv.getTypeUtils().getDeclaredType(jacksonCreatorElement) : null;"], [178, "\t\tjsonbCreatorElement = processingEnv.getElementUtils().getTypeElement(\"javax.json.bind.annotation.JsonbCreator\");"], [179, "\t\tjsonbCreatorType = jsonbCreatorElement != null ? processingEnv.getTypeUtils().getDeclaredType(jsonbCreatorElement) : null;"], [180, "\t}"], [181, ""], [182, "\t@Override"], [183, "\tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {"], [184, "\t\tif (roundEnv.processingOver()) {"], [185, "\t\t\treturn false;"], [186, "\t\t}"], [208, "\t\t\t\tbuildCode(writer, structs, allowInline);"], [235, "\tprivate static void buildCode(final Writer code, final Map<String, StructInfo> structs, final boolean allowInline) throws IOException {"], [236, "\t\tfinal Context context = new Context(code, allowInline, InlinedConverters, Defaults, structs);"]]}, "num_lines_added": 15, "num_lines_removed": 17}