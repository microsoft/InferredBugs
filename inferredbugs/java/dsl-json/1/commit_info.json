{"hash": "116ddfe78ab92ed9190cccd932e81a96c82cf358", "message": "Annotation processor improvements.\n\nBean casing fix.\nOne char properties should be lowercased.\nConcurrent modification fix ;( Loop over struct map snapshot.\nDetect Joda Time and Java Time and give appropriate error message.\nDetect Java AWT and Android graphics and give appropriate erorr message.\nAdded more types.\nNon public class error. Class must be public and it must have public zero arguments constructor.", "file_num_lines": 444, "diff_parsed": {"added": [[19, "@SupportedOptions({\"dsljson.namespace\"})"], [24, "\tprivate static final Set<String> JsonIgnore;"], [25, "\tprivate static final Set<String> NonNullable;"], [26, "\tprivate static final Set<String> PropertyAlias;"], [27, "\tprivate static final List<IncompatibleTypes> CheckTypes;"], [28, ""], [29, "\tprivate static class IncompatibleTypes {"], [30, "\t\tpublic final String first;"], [31, "\t\tpublic final String second;"], [32, "\t\tpublic final String description;"], [33, ""], [34, "\t\tpublic IncompatibleTypes(String first, String second, String description) {"], [35, "\t\t\tthis.first = first;"], [36, "\t\t\tthis.second = second;"], [37, "\t\t\tthis.description = description;"], [38, "\t\t}"], [39, "\t}"], [63, "\t\tSupportedTypes.put(\"java.net.URI\", \"url?\");"], [66, "\t\tSupportedTypes.put(\"java.awt.geom.Point2D\", \"location?\");"], [67, "\t\tSupportedTypes.put(\"java.awt.Point\", \"point?\");"], [69, "\t\tSupportedTypes.put(\"android.graphics.Rect\", \"rectangle?\");"], [70, "\t\tSupportedTypes.put(\"android.graphics.PointF\", \"location?\");"], [71, "\t\tSupportedTypes.put(\"android.graphics.Point\", \"point?\");"], [72, "\t\tSupportedTypes.put(\"android.graphics.Bitmap\", \"image?\");"], [73, "\t\tSupportedTypes.put(\"org.w3c.dom.Element\", \"xml?\");"], [95, "\t\tCheckTypes = new ArrayList<IncompatibleTypes>();"], [96, "\t\tCheckTypes.add("], [97, "\t\t\t\tnew IncompatibleTypes("], [98, "\t\t\t\t\t\t\"java.time\","], [99, "\t\t\t\t\t\t\"org.joda.time\","], [100, "\t\t\t\t\t\t\"Both Joda Time and Java Time detected as property types. Only one supported at once.\"));"], [101, "\t\tCheckTypes.add("], [102, "\t\t\t\tnew IncompatibleTypes("], [103, "\t\t\t\t\t\t\"java.awt\","], [104, "\t\t\t\t\t\t\"android.graphics\","], [105, "\t\t\t\t\t\t\"Both Java AWT and Android graphics detected as property types. Only one supported at once.\"));"], [124, "\tprivate static class StructInfo {"], [136, "\tprivate static class DslOptions {"], [137, "\t\tpublic boolean useJodaTime;"], [138, "\t\tpublic boolean useAndroid;"], [139, "\t\tpublic String namespace;"], [140, "\t}"], [141, ""], [156, "\t\t\tDslOptions options = new DslOptions();"], [157, "\t\t\toptions.namespace = namespace;"], [158, "\t\t\tbuildDsl(structs, dsl, options);"], [170, "\t\t\t\tfileContent = AnnotationCompiler.buildExternalJson(fullDsl, options.namespace, options.useJodaTime);"], [182, "\t\t\t\tbw.write(options.namespace + \".json.ExternalSerialization\");"], [191, "\tprivate static class TypeCheck {"], [192, "\t\tpublic boolean hasFirst;"], [193, "\t\tpublic boolean hasSecond;"], [194, "\t}"], [195, ""], [196, "\tprivate void buildDsl(Map<String, StructInfo> structs, StringBuilder dsl, DslOptions options) {"], [197, "\t\tTypeCheck[] checks = new TypeCheck[CheckTypes.size()];"], [198, "\t\tfor (int i = 0; i < checks.length; i++) {"], [199, "\t\t\tchecks[i] = new TypeCheck();"], [200, "\t\t}"], [224, "\t\t\t\t\tString returnType = p.getValue().getReturnType().toString();"], [225, "\t\t\t\t\tfor (int i = 0; i < CheckTypes.size(); i++) {"], [226, "\t\t\t\t\t\tIncompatibleTypes it = CheckTypes.get(i);"], [227, "\t\t\t\t\t\tif (returnType.startsWith(it.first) || returnType.startsWith(it.second)) {"], [228, "\t\t\t\t\t\t\tTypeCheck tc = checks[i];"], [229, "\t\t\t\t\t\t\tboolean hasFirst = tc.hasFirst || returnType.startsWith(it.first);"], [230, "\t\t\t\t\t\t\tboolean hasSecond = tc.hasSecond || returnType.startsWith(it.second);"], [231, "\t\t\t\t\t\t\tif (hasFirst && hasSecond && !tc.hasFirst && !tc.hasSecond) {"], [232, "\t\t\t\t\t\t\t\tprocessingEnv.getMessager().printMessage("], [233, "\t\t\t\t\t\t\t\t\t\tDiagnostic.Kind.ERROR,"], [234, "\t\t\t\t\t\t\t\t\t\t\"Both Joda Time and Java Time detected as property types. Only one supported at once.\","], [235, "\t\t\t\t\t\t\t\t\t\tp.getValue(),"], [236, "\t\t\t\t\t\t\t\t\t\tgetAnnotation(info.element, jsonDeclaredType));"], [237, "\t\t\t\t\t\t\t}"], [238, "\t\t\t\t\t\t\ttc.hasFirst = hasFirst;"], [239, "\t\t\t\t\t\t\ttc.hasSecond = hasSecond;"], [240, "\t\t\t\t\t\t}"], [241, "\t\t\t\t\t}"], [243, "\t\t\t\t\t\toptions.useJodaTime = options.useJodaTime || returnType.startsWith(\"org.joda.time\");"], [244, "\t\t\t\t\t\toptions.useAndroid = options.useAndroid || returnType.startsWith(\"android.graphics\");"], [270, "\t\t\tList<StructInfo> items = new ArrayList<StructInfo>(structs.values());"], [271, "\t\t\tfor (StructInfo info : items) {"], [282, "\t\t\t\t\t\tfindStructs(structs, el, el + \" is referenced as property from POJO with CompiledJson annotation.\");"], [289, "\t\t\t\t\t\t\tfindStructs(structs, el, el + \" is referenced as array property from POJO with CompiledJson annotation.\");"], [300, "\t\t\t\t\t\t\tfindStructs(structs, el, el + \" is referenced as collection property from POJO with CompiledJson annotation.\");"], [341, "\t\t\t\t\terrorMessge + \", therefore it requires public no argument constructor\","], [342, "\t\t\t\t\telement,"], [343, "\t\t\t\t\tentityAnnotation);"], [344, "\t\t} else if (!element.getModifiers().contains(Modifier.PUBLIC)) {"], [345, "\t\t\tAnnotationMirror entityAnnotation = getAnnotation(element, jsonDeclaredType);"], [346, "\t\t\tprocessingEnv.getMessager().printMessage("], [347, "\t\t\t\t\tDiagnostic.Kind.ERROR,"], [348, "\t\t\t\t\terrorMessge + \", therefore class must be public\","], [391, "\t\t\tString property = name.substring(3).toUpperCase().equals(name.substring(3)) && name.length() > 4"]], "deleted": [[19, "@SupportedOptions({\"dsljson.namespace\", \"dsljson.timeApi\"})"], [24, "\tprivate static final HashSet<String> JsonIgnore;"], [25, "\tprivate static final HashSet<String> NonNullable;"], [26, "\tprivate static final HashSet<String> PropertyAlias;"], [79, "\tprivate boolean useJodaTime = false;"], [91, "\t\tString timeApi = options.get(\"dsljson.timeApi\");"], [92, "\t\tif (\"joda-time\".equals(timeApi)) {"], [93, "\t\t\tuseJodaTime = true;"], [94, "\t\t}"], [97, "\tstatic class StructInfo {"], [123, "\t\t\tbuildDsl(structs, dsl);"], [135, "\t\t\t\tfileContent = AnnotationCompiler.buildExternalJson(fullDsl, namespace, useJodaTime);"], [147, "\t\t\t\tbw.write(namespace + \".json.ExternalSerialization\");"], [156, "\tprivate void buildDsl(Map<String, StructInfo> structs, StringBuilder dsl) {"], [206, "\t\t\tfor (StructInfo info : structs.values()) {"], [217, "\t\t\t\t\t\tfindStructs(structs, el, el + \" is referenced as property from POJO with CompiledJson annotation.\\n\" +"], [218, "\t\t\t\t\t\t\t\t\"Therefore it requires public no argument constructor\");"], [225, "\t\t\t\t\t\t\tfindStructs(structs, el, el + \" is referenced as array property from POJO with CompiledJson annotation.\\n\" +"], [226, "\t\t\t\t\t\t\t\t\t\"Therefore it requires public no argument constructor\");"], [237, "\t\t\t\t\t\t\tfindStructs(structs, el, el + \" is referenced as collection property from POJO with CompiledJson annotation.\\n\" +"], [238, "\t\t\t\t\t\t\t\t\t\"Therefore it requires public no argument constructor\");"], [279, "\t\t\t\t\terrorMessge,"], [322, "\t\t\tString property = name.substring(3).toUpperCase().equals(name.substring(3))"]]}, "num_lines_added": 92, "num_lines_removed": 23}