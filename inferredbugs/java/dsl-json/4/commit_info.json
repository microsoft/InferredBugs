{"hash": "22abb761a84a2f2728a2c5b90c10c00d655a4a52", "message": "Remove the non-inlined generated code\n\nIt's noticeably slower than inlined implementation and it's not automatically tested.", "file_num_lines": 441, "diff_parsed": {"added": [[246, "\t\t\t\t\t\tbuildCode(writer, entry.getKey(), structInfo, structs, allTypes);"], [322, "\t\tfinal Context context = new Context(code, InlinedConverters, Defaults, structs, knownTypes);"], [323, "\t\tfinal ConverterTemplate converterTemplate = new ConverterTemplate(context);"], [337, "\t\tif (si.type == ObjectType.CLASS && si.constructor != null && !si.attributes.isEmpty()) {"], [338, "\t\t\tString objectFormatConverterName = \"converter\";"], [339, "\t\t\tif (si.formats.contains(CompiledJson.Format.OBJECT)) {"], [340, "\t\t\t\tcode.append(\"\\t\\tObjectFormatConverter objectConverter = new ObjectFormatConverter(json);\\n\");"], [343, "\t\t\tif (si.formats.contains(CompiledJson.Format.ARRAY)) {"], [344, "\t\t\t\tcode.append(\"\\t\\tArrayFormatConverter arrayConverter = new ArrayFormatConverter(json);\\n\");"], [347, "\t\t\tif (si.formats.contains(CompiledJson.Format.OBJECT) && si.formats.contains(CompiledJson.Format.ARRAY)) {"], [348, "\t\t\t\tcode.append(\"\\t\\tcom.dslplatform.json.runtime.FormatDescription description = new com.dslplatform.json.runtime.FormatDescription(\\n\");"], [349, "\t\t\t\tcode.append(\"\\t\\t\\t\").append(className).append(\".class,\\n\");"], [350, "\t\t\t\tcode.append(\"\\t\\t\\tobjectConverter,\\n\");"], [351, "\t\t\t\tcode.append(\"\\t\\t\\tarrayConverter,\\n\");"], [352, "\t\t\t\tif (si.isObjectFormatFirst) code.append(\"\\t\\t\\ttrue,\\n\");"], [353, "\t\t\t\telse code.append(\"\\t\\t\\tfalse,\\n\");"], [354, "\t\t\t\tString typeAlias = si.deserializeName.isEmpty() ? className : si.deserializeName;"], [355, "\t\t\t\tcode.append(\"\\t\\t\\t\\\"\").append(typeAlias).append(\"\\\",\\n\");"], [356, "\t\t\t\tcode.append(\"\\t\\t\\tjson);\\n\");"], [357, "\t\t\t\tif (si.hasEmptyCtor()) {"], [358, "\t\t\t\t\tcode.append(\"\\t\\tjson.registerBinder(\").append(className).append(\".class, description);\\n\");"], [360, "\t\t\t\tcode.append(\"\\t\\tjson.registerReader(\").append(className).append(\".class, description);\\n\");"], [361, "\t\t\t\tcode.append(\"\\t\\tjson.registerWriter(\").append(className).append(\".class, description);\\n\");"], [362, "\t\t\t} else {"], [363, "\t\t\t\tif (si.hasEmptyCtor()) {"], [364, "\t\t\t\t\tcode.append(\"\\t\\tjson.registerBinder(\").append(className).append(\".class, \").append(objectFormatConverterName).append(\");\\n\");"], [366, "\t\t\t\tcode.append(\"\\t\\tjson.registerReader(\").append(className).append(\".class, \").append(objectFormatConverterName).append(\");\\n\");"], [367, "\t\t\t\tcode.append(\"\\t\\tjson.registerWriter(\").append(className).append(\".class, \").append(objectFormatConverterName).append(\");\\n\");"], [368, "\t\t\t}"], [369, "\t\t} else if (si.type == ObjectType.CONVERTER) {"], [370, "\t\t\tString type = typeOrClass(nonGenericObject(className), className);"], [371, "\t\t\tcode.append(\"\\t\\tjson.registerWriter(\").append(type).append(\", \").append(si.converter).append(\".\").append(si.converterWriter).append(\");\\n\");"], [372, "\t\t\tcode.append(\"\\t\\tjson.registerReader(\").append(type).append(\", \").append(si.converter).append(\".\").append(si.converterReader).append(\");\\n\");"], [373, "\t\t} else if (si.type == ObjectType.ENUM) {"], [374, "\t\t\tcode.append(\"\\t\\tEnumConverter enumConverter = new EnumConverter();\\n\");"], [375, "\t\t\tcode.append(\"\\t\\tjson.registerWriter(\").append(className).append(\".class, enumConverter);\\n\");"], [376, "\t\t\tcode.append(\"\\t\\tjson.registerReader(\").append(className).append(\".class, enumConverter);\\n\");"], [377, "\t\t}"], [378, ""], [379, "\t\tif (si.type == ObjectType.MIXIN && !si.implementations.isEmpty()) {"], [380, "\t\t\tmixin(code, si.deserializeAs != null, si, className);"], [381, "\t\t}"], [382, "\t\tif (si.type == ObjectType.MIXIN && si.deserializeAs != null) {"], [383, "\t\t\tString typeMixin = typeOrClass(nonGenericObject(className), className);"], [384, "\t\t\tStructInfo target = si.deserializeTarget();"], [385, "\t\t\tcode.append(\"\\t\\tjson.registerReader(\").append(typeMixin).append(\", \");"], [386, "\t\t\tif (!target.formats.contains(CompiledJson.Format.OBJECT)) {"], [387, "\t\t\t\tcode.append(\"new \").append(findConverterName(target)).append(\".ArrayFormatConverter(json));\\n\");"], [388, "\t\t\t} else if (!target.formats.contains(CompiledJson.Format.ARRAY)) {"], [389, "\t\t\t\tcode.append(\"new \").append(findConverterName(target)).append(\".ObjectFormatConverter(json));\\n\");"], [390, "\t\t\t}"], [391, "\t\t}"], [395, "\t\tif (si.type == ObjectType.CLASS && !si.attributes.isEmpty()) {"], [396, "\t\t\tif (si.hasEmptyCtor()) {"], [397, "\t\t\t\tif (si.formats.contains(CompiledJson.Format.OBJECT)) {"], [398, "\t\t\t\t\tconverterTemplate.emptyCtorObject(si, className);"], [399, "\t\t\t\t}"], [400, "\t\t\t\tif (si.formats.contains(CompiledJson.Format.ARRAY)) {"], [401, "\t\t\t\t\tconverterTemplate.emptyCtorArray(si, className);"], [402, "\t\t\t\t}"], [403, "\t\t\t} else if (si.constructor != null) {"], [404, "\t\t\t\tif (si.formats.contains(CompiledJson.Format.OBJECT)) {"], [405, "\t\t\t\t\tconverterTemplate.fromCtorObject(si, className);"], [406, "\t\t\t\t}"], [407, "\t\t\t\tif (si.formats.contains(CompiledJson.Format.ARRAY)) {"], [408, "\t\t\t\t\tconverterTemplate.fromCtorArray(si, className);"], [409, "\t\t\t\t}"], [410, "\t\t\t}"], [411, "\t\t} else if (si.type == ObjectType.ENUM) {"], [412, "\t\t\tenumTemplate.create(si, className);"], [413, "\t\t}"], [418, "\tprivate static void mixin(final Writer code, final boolean writeOnly, final StructInfo si, final String className) throws IOException {"], [433, "\t\t\t\t\tcode.append(\"new \").append(findConverterName(im)).append(\".ObjectFormatConverter(json), \");"], [438, "\t\t\t\t\tcode.append(\"new \").append(findConverterName(im)).append(\".ArrayFormatConverter(json), \");"]], "deleted": [[45, "\t\tINLINE(\"dsljson.inline\"),"], [125, "\tprivate boolean allowInline = true;"], [151, "\t\tString inl = options.get(Options.INLINE.value);"], [152, "\t\tif (inl != null && inl.length() > 0) {"], [153, "\t\t\tallowInline = Boolean.parseBoolean(inl);"], [154, "\t\t}"], [252, "\t\t\t\t\t\tbuildCode(writer, entry.getKey(), structInfo, structs, allowInline, allTypes);"], [327, "\t\t\t\t\t\t\t\t  final boolean allowInline,"], [329, "\t\tfinal Context context = new Context(code, allowInline, InlinedConverters, Defaults, structs, knownTypes);"], [330, "\t\tfinal DescriptionTemplate descriptionTemplate = new DescriptionTemplate(context);"], [331, "\t\tfinal InlinedTemplate inlinedTemplate = new InlinedTemplate(context);"], [345, "        if (si.type == ObjectType.CLASS && si.constructor != null && !si.attributes.isEmpty()) {"], [346, "            String objectFormatConverterName = \"converter\";"], [347, "            if (si.formats.contains(CompiledJson.Format.OBJECT)) {"], [348, "                if (allowInline) {"], [349, "                    code.append(\"\\t\\tObjectFormatConverter objectConverter = new ObjectFormatConverter(json);\\n\");"], [350, "                } else {"], [351, "                    code.append(\"\\t\\tcom.dslplatform.json.runtime.ObjectFormatDescription objectConverter = createObjectFormatConverter(json);\\n\");"], [352, "                }"], [355, "            if (si.formats.contains(CompiledJson.Format.ARRAY)) {"], [356, "                if (allowInline) {"], [357, "                    code.append(\"\\t\\tArrayFormatConverter arrayConverter = new ArrayFormatConverter(json);\\n\");"], [358, "                } else {"], [359, "                    code.append(\"\\t\\tcom.dslplatform.json.runtime.ArrayFormatDescription arrayConverter = createArrayFormatConverter(json);\\n\");"], [360, "                }"], [363, "            if (si.formats.contains(CompiledJson.Format.OBJECT) && si.formats.contains(CompiledJson.Format.ARRAY)) {"], [364, "                code.append(\"\\t\\tcom.dslplatform.json.runtime.FormatDescription description = new com.dslplatform.json.runtime.FormatDescription(\\n\");"], [365, "                code.append(\"\\t\\t\\t\").append(className).append(\".class,\\n\");"], [366, "                code.append(\"\\t\\t\\tobjectConverter,\\n\");"], [367, "                code.append(\"\\t\\t\\tarrayConverter,\\n\");"], [368, "                if (si.isObjectFormatFirst) code.append(\"\\t\\t\\ttrue,\\n\");"], [369, "                else code.append(\"\\t\\t\\tfalse,\\n\");"], [370, "                String typeAlias = si.deserializeName.isEmpty() ? className : si.deserializeName;"], [371, "                code.append(\"\\t\\t\\t\\\"\").append(typeAlias).append(\"\\\",\\n\");"], [372, "                code.append(\"\\t\\t\\tjson);\\n\");"], [373, "                if (si.hasEmptyCtor()) {"], [374, "                    code.append(\"\\t\\tjson.registerBinder(\").append(className).append(\".class, description);\\n\");"], [375, "                }"], [376, "                code.append(\"\\t\\tjson.registerReader(\").append(className).append(\".class, description);\\n\");"], [377, "                code.append(\"\\t\\tjson.registerWriter(\").append(className).append(\".class, description);\\n\");"], [378, "            } else {"], [379, "                if (si.hasEmptyCtor()) {"], [380, "                    code.append(\"\\t\\tjson.registerBinder(\").append(className).append(\".class, \").append(objectFormatConverterName).append(\");\\n\");"], [381, "                }"], [382, "                code.append(\"\\t\\tjson.registerReader(\").append(className).append(\".class, \").append(objectFormatConverterName).append(\");\\n\");"], [383, "                code.append(\"\\t\\tjson.registerWriter(\").append(className).append(\".class, \").append(objectFormatConverterName).append(\");\\n\");"], [384, "            }"], [385, "        } else if (si.type == ObjectType.CONVERTER) {"], [386, "            String type = typeOrClass(nonGenericObject(className), className);"], [387, "            code.append(\"\\t\\tjson.registerWriter(\").append(type).append(\", \").append(si.converter).append(\".\").append(si.converterWriter).append(\");\\n\");"], [388, "            code.append(\"\\t\\tjson.registerReader(\").append(type).append(\", \").append(si.converter).append(\".\").append(si.converterReader).append(\");\\n\");"], [389, "        } else if (si.type == ObjectType.ENUM) {"], [390, "            code.append(\"\\t\\tEnumConverter enumConverter = new EnumConverter();\\n\");"], [391, "            code.append(\"\\t\\tjson.registerWriter(\").append(className).append(\".class, enumConverter);\\n\");"], [392, "            code.append(\"\\t\\tjson.registerReader(\").append(className).append(\".class, enumConverter);\\n\");"], [393, "        }"], [394, ""], [395, "        if (si.type == ObjectType.MIXIN && !si.implementations.isEmpty()) {"], [396, "            mixin(code, si.deserializeAs != null, si, className, allowInline);"], [397, "        }"], [398, "        if (si.type == ObjectType.MIXIN && si.deserializeAs != null) {"], [399, "            String typeMixin = typeOrClass(nonGenericObject(className), className);"], [400, "            StructInfo target = si.deserializeTarget();"], [401, "            code.append(\"\\t\\tjson.registerReader(\").append(typeMixin).append(\", \");"], [402, "            if (!target.formats.contains(CompiledJson.Format.OBJECT)) {"], [403, "            \tif (allowInline) {"], [404, "\t\t\t\t\tcode.append(\"new \").append(findConverterName(target)).append(\".ArrayFormatConverter(json));\\n\");"], [405, "\t\t\t\t} else {"], [406, "\t\t\t\t\tcode.append(findConverterName(target)).append(\".createArrayFormatConverter(json));\\n\");"], [408, "            } else if (!target.formats.contains(CompiledJson.Format.ARRAY)) {"], [409, "            \tif (allowInline) {"], [410, "\t\t\t\t\tcode.append(\"new \").append(findConverterName(target)).append(\".ObjectFormatConverter(json));\\n\");"], [411, "\t\t\t\t} else {"], [412, "\t\t\t\t\tcode.append(findConverterName(target)).append(\".createObjectFormatConverter(json));\\n\");"], [414, "            }"], [415, "        }"], [419, "        if (si.type == ObjectType.CLASS && !si.attributes.isEmpty()) {"], [420, "            if (si.hasEmptyCtor()) {"], [421, "                if (si.formats.contains(CompiledJson.Format.OBJECT)) {"], [422, "                    if (allowInline) inlinedTemplate.emptyCtorObject(si, className);"], [423, "                    else descriptionTemplate.emptyCtorObject(si, className);"], [424, "                }"], [425, "                if (si.formats.contains(CompiledJson.Format.ARRAY)) {"], [426, "                    if (allowInline) inlinedTemplate.emptyCtorArray(si, className);"], [427, "                    else descriptionTemplate.emptyCtorArray(si, className);"], [428, "                }"], [429, "            } else if (si.constructor != null) {"], [430, "                if (!allowInline) {"], [431, "                    descriptionTemplate.createBuilder(si, className);"], [432, "                }"], [433, "                if (si.formats.contains(CompiledJson.Format.OBJECT)) {"], [434, "                    if (allowInline) inlinedTemplate.fromCtorObject(si, className);"], [435, "                    else descriptionTemplate.fromCtorObject(si, className);"], [436, "                }"], [437, "                if (si.formats.contains(CompiledJson.Format.ARRAY)) {"], [438, "                    if (allowInline) inlinedTemplate.fromCtorArray(si, className);"], [439, "                    else descriptionTemplate.fromCtorArray(si, className);"], [440, "                }"], [441, "            }"], [442, "        } else if (si.type == ObjectType.ENUM) {"], [443, "            enumTemplate.create(si, className);"], [444, "        }"], [449, "\tprivate static void mixin(final Writer code, final boolean writeOnly, final StructInfo si, final String className, final boolean allowInline) throws IOException {"], [464, "\t\t\t\t\tif (allowInline) {"], [465, "\t\t\t\t\t\tcode.append(\"new \").append(findConverterName(im)).append(\".ObjectFormatConverter(json), \");"], [466, "\t\t\t\t\t} else {"], [467, "\t\t\t\t\t\tcode.append(findConverterName(im)).append(\".createObjectFormatConverter(json), \");"], [468, "\t\t\t\t\t}"], [473, "\t\t\t\t\tif (allowInline) {"], [474, "\t\t\t\t\t\tcode.append(\"new \").append(findConverterName(im)).append(\".ArrayFormatConverter(json), \");"], [475, "\t\t\t\t\t} else {"], [476, "\t\t\t\t\t\tcode.append(findConverterName(im)).append(\".createArrayFormatConverter(json), \");"], [477, "\t\t\t\t\t}"]]}, "num_lines_added": 74, "num_lines_removed": 113}