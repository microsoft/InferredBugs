{"hash": "73b4672e942a27281be8718dc4ce92115c6083c5", "message": "Scrub node names and id's by default (#409)\n\nModify default scrubs to head off diagnostic mangling.", "file_num_lines": 136, "diff_parsed": {"added": [[6, "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;"], [7, "import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;"], [8, "import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;"], [9, "import org.apache.commons.compress.archivers.zip.ZipFile;"], [13, "import org.apache.commons.io.*;"], [18, "import java.util.Enumeration;"], [36, "      if(! createZipArchive(dir, archiveFileName)){"], [37, "         logger.info(\"Couldn't create zip archive. Trying tar.gz\");"], [38, "         if(! createTarArchive(dir, archiveFileName)){"], [39, "            logger.info(\"Couldn't create tar.gz archive.\");"], [40, "         }"], [41, "      }"], [42, "   }"], [43, ""], [44, "   public boolean createZipArchive(String dir, String archiveFileName)  {"], [47, "         File srcDir = new File(dir);"], [48, "         String filename = dir + \"-\" + archiveFileName + \".zip\";"], [49, ""], [50, "         FileOutputStream fout = new FileOutputStream(filename);"], [51, "         ZipArchiveOutputStream taos = new ZipArchiveOutputStream(fout);"], [52, "         archiveResultsZip(archiveFileName, taos, srcDir, \"\", true);"], [53, "         taos.close();"], [54, ""], [55, "         logger.info(\"Archive: \" + filename + \" was created\");"], [56, ""], [57, "      } catch (Exception ioe) {"], [58, "         logger.log(SystemProperties.DIAG, \"Couldn't create archive.\", ioe);"], [59, "         return false;"], [60, "      }"], [61, "      return true;"], [63, "   }"], [64, ""], [65, "   public boolean createTarArchive(String dir, String archiveFileName) {"], [66, ""], [67, "      try {"], [77, "         archiveResultsTar(archiveFileName, taos, srcDir, \"\", true);"], [83, "         logger.log(SystemProperties.DIAG, \"Couldn't create archive.\", ioe);"], [84, "         return false;"], [87, "      return true;"], [88, ""], [91, "   public void archiveResultsZip(String archiveFilename, ZipArchiveOutputStream taos, File file, String path, boolean append) {"], [92, "      String relPath = \"\";"], [93, ""], [94, "      try {"], [95, "         if (append) {"], [96, "            relPath = path + \"/\" + file.getName() + \"-\" + archiveFilename;"], [97, "         } else {"], [98, "            relPath = path + \"/\" + file.getName();"], [99, "         }"], [100, "         ZipArchiveEntry tae = new ZipArchiveEntry(file, relPath);"], [101, "         taos.putArchiveEntry(tae);"], [102, ""], [103, "         if (file.isFile()) {"], [104, "            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));"], [105, "            IOUtils.copy(bis, taos);"], [106, "            taos.closeArchiveEntry();"], [107, "            bis.close();"], [108, ""], [109, "         } else if (file.isDirectory()) {"], [110, "            taos.closeArchiveEntry();"], [111, "            for (File childFile : file.listFiles()) {"], [112, "               archiveResultsZip(archiveFilename, taos, childFile, relPath, false);"], [113, "            }"], [114, "         }"], [115, "      } catch (IOException e) {"], [116, "         logger.info(\"Archive Error\", e);"], [117, "      }"], [118, "   }"], [120, "   public void archiveResultsTar(String archiveFilename, TarArchiveOutputStream taos, File file, String path, boolean append) {"], [141, "               archiveResultsTar(archiveFilename, taos, childFile, relPath, false);"], [154, "         ZipFile zf = new ZipFile(new File(sourceInput));"], [155, "         archiveProcessor.init(zf);"], [157, "         Enumeration<ZipArchiveEntry> entries = zf.getEntriesInPhysicalOrder();"], [158, "         while(entries.hasMoreElements()){"], [159, "            ZipArchiveEntry tae = entries.nextElement();"], [163, "            archiveProcessor.process(zf.getInputStream(tae), name);"], [165, ""], [171, "}"]], "deleted": [[9, "import org.apache.commons.compress.utils.IOUtils;"], [43, "         archiveResults(archiveFileName, taos, srcDir, \"\", true);"], [49, "         logger.info(\"Couldn't create archive. {}\", ioe);"], [54, "   public void archiveResults(String archiveFilename, TarArchiveOutputStream taos, File file, String path, boolean append) {"], [76, "               archiveResults(archiveFilename, taos, childFile, relPath, false);"], [86, "      TarArchiveInputStream archive = readDiagArchive(sourceInput);"], [90, "         // Base archive name - it's not redundant like Intellij is complaining..."], [91, "         TarArchiveEntry tae = archive.getNextTarEntry();"], [93, "         // First actual archived entry"], [94, "         tae = archive.getNextTarEntry();"], [95, ""], [96, "         while (tae != null) {"], [100, "            archiveProcessor.process(archive, name);"], [101, "            tae = archive.getNextTarEntry();"], [110, "   private TarArchiveInputStream readDiagArchive(String archivePath) throws Exception {"], [111, ""], [112, "      FileInputStream fileStream = new FileInputStream(archivePath);"], [113, "      BufferedInputStream inStream = new BufferedInputStream(fileStream);"], [114, "      TarArchiveInputStream tarIn = new TarArchiveInputStream(new GzipCompressorInputStream(inStream));"], [115, "      return tarIn;"], [116, ""], [117, "   }"], [118, ""], [119, ""], [120, "}"]]}, "num_lines_added": 78, "num_lines_removed": 25}