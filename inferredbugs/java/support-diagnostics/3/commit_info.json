{"hash": "de793b2b1d3d5e87f95e5809ab6f5db4a6a7567a", "message": "Change to deal with removal of conf path in nodes output, Changed log/configuration/scrub functionality to fail gracefully and produce archive along with detailed messages on operations that failed.", "file_num_lines": 153, "diff_parsed": {"added": [[19, "import java.util.Iterator;"], [26, "      if (context.getInputParams().isSkipLogs() || ! context.isProcessLocal()) {"], [31, "      if(diagNode == null){"], [32, "         logger.error(\"Could not locate node running on current host.\");"], [33, "            return true;"], [34, "      }"], [35, ""], [39, ""], [41, "      Iterator<JsonNode> inputArgs = diagNode.path(\"jvm\").path(\"input_arguments\").iterator();"], [42, ""], [50, "      String inputArgsConfig = findConfigArg(inputArgs);"], [68, "         String configFileLoc = determineConfigLocation(conf, config, home, defaultConf, inputArgsConfig);"], [70, "         // Process the config directory"], [72, "         File configDir = new File(configFileLoc);"], [73, "         if(configDir.exists() && configDir.listFiles().length > 0){"], [74, ""], [75, "           FileUtils.copyDirectory(configDir, new File(configDest), configFilter, true);"], [77, "            if (commercialDir != \"\") {"], [78, "               File comm = new File(configFileLoc + SystemProperties.fileSeparator + commercialDir);"], [79, "               if (comm.exists()) {"], [80, "                  FileUtils.copyDirectory(comm, new File(configDest + SystemProperties.fileSeparator + commercialDir), true);"], [81, "               }"], [84, "            File scripts = new File(configFileLoc + SystemProperties.fileSeparator + \"scripts\");"], [85, "            if (scripts.exists()) {"], [86, "               FileUtils.copyDirectory(scripts, new File(configDest + SystemProperties.fileSeparator + \"scripts\"), true);"], [87, "            }"], [91, "         logs = determineLogLocation(home, logs, defaultLogs);"], [92, "         File logDir = new File(logs);"], [93, "         if (logDir.exists() && logDir.listFiles().length > 0) {"], [94, "            if (context.getInputParams().isArchivedLogs()) {"], [95, "               FileUtils.copyDirectory(logDir, logDest, true);"], [97, "               //Get the top level log, slow search, and slow index logs"], [98, "               FileUtils.copyFileToDirectory(new File(logs + SystemProperties.fileSeparator + clusterName + \".log\"), logDest);"], [99, "               FileUtils.copyFileToDirectory(new File(logs + SystemProperties.fileSeparator + clusterName + \"_index_indexing_slowlog.log\"), logDest);"], [100, "               FileUtils.copyFileToDirectory(new File(logs + SystemProperties.fileSeparator + clusterName + \"_index_search_slowlog.log\"), logDest);"], [101, ""], [102, "               if (getAccess) {"], [103, "                  FileUtils.copyFileToDirectory(new File(logs + SystemProperties.fileSeparator + clusterName + \"_access.log\"), logDest);"], [104, "               }"], [105, "               int majorVersion = Integer.parseInt(context.getVersion().split(\"\\\\.\")[0]);"], [106, "               String patternString = null;"], [107, "               if (majorVersion > 2) {"], [108, "                  patternString = clusterName + \"-\\\\d{4}-\\\\d{2}-\\\\d{2}.log*\";"], [110, "                  patternString = clusterName + \".log.\\\\d{4}-\\\\d{2}-\\\\d{2}\";"], [111, "               }"], [112, "               // Get the two most recent server log rollovers"], [113, "               //Pattern pattern = Pattern.compile(patternString);"], [114, "               FileFilter logFilter = new RegexFileFilter(patternString);"], [115, "               File[] logDirList = logDir.listFiles(logFilter);"], [116, "               Arrays.sort(logDirList, LastModifiedFileComparator.LASTMODIFIED_REVERSE);"], [117, ""], [118, "               int limit = 2, count = 0;"], [119, "               for (File logListing : logDirList) {"], [120, "                  if (count < limit) {"], [121, "                     FileUtils.copyFileToDirectory(logListing, logDest);"], [122, "                     count++;"], [123, "                  } else {"], [124, "                     break;"], [125, "                  }"], [129, "         else {"], [130, "            logger.error(\"Configured log directory is not readable or does not exist: \" + logDir.getAbsolutePath());"], [131, "         }"], [142, "   public String determineConfigLocation(String conf, String config, String home, String defaultConf, String inputArgsConfig) {"], [154, "      } else if (! \"\".equals(inputArgsConfig)){"], [155, "         configFileLoc = inputArgsConfig;"], [178, ""], [179, "   String findConfigArg(Iterator<JsonNode> args){"], [180, ""], [181, "      try{"], [182, "         while(args.hasNext()){"], [183, "            String arg = args.next().asText();"], [184, "            if(arg.contains(\"-Des.path.conf=\")){"], [185, "               return arg.replace(\"-Des.path.conf=\", \"\");"], [186, "            }"], [187, "         }"], [188, "      }"], [189, "      catch (Exception e){"], [190, "         logger.error(\"Error parsing input arguments for config directory:\" + args);"], [191, "      }"], [192, ""], [193, "      return \"\";"], [194, ""], [195, "   }"]], "deleted": [[25, "      if (context.getInputParams().isSkipLogs()) {"], [58, "         String configFileLoc = determineConfigLocation(conf, config, home, defaultConf);"], [59, "         logs = determineLogLocation(home, logs, defaultLogs);"], [61, "         // Copy the config directory"], [63, "         FileUtils.copyDirectory(new File(configFileLoc), new File(configDest), configFilter, true);"], [65, "         if (commercialDir != \"\") {"], [66, "            File comm = new File(configFileLoc + SystemProperties.fileSeparator + commercialDir);"], [67, "            if (comm.exists()) {"], [68, "               FileUtils.copyDirectory(comm, new File(configDest + SystemProperties.fileSeparator + commercialDir), true);"], [70, "         }"], [72, "         File scripts = new File(configFileLoc + SystemProperties.fileSeparator + \"scripts\");"], [73, "         if (scripts.exists()) {"], [74, "            FileUtils.copyDirectory(scripts, new File(configDest + SystemProperties.fileSeparator + \"scripts\"), true);"], [77, "         // Creat the temp directory for the logs"], [78, "         File logDir = new File(logs);"], [80, ""], [81, "         if (context.getInputParams().isArchivedLogs()) {"], [82, "            FileUtils.copyDirectory(logDir, logDest, true);"], [83, "         } else {"], [84, "            //Get the top level log, slow search, and slow index logs"], [85, "            FileUtils.copyFileToDirectory(new File(logs + SystemProperties.fileSeparator + clusterName + \".log\"), logDest);"], [86, "            FileUtils.copyFileToDirectory(new File(logs + SystemProperties.fileSeparator + clusterName + \"_index_indexing_slowlog.log\"), logDest);"], [87, "            FileUtils.copyFileToDirectory(new File(logs + SystemProperties.fileSeparator + clusterName + \"_index_search_slowlog.log\"), logDest);"], [88, ""], [89, "            if (getAccess) {"], [90, "               FileUtils.copyFileToDirectory(new File(logs + SystemProperties.fileSeparator + clusterName + \"_access.log\"), logDest);"], [91, "            }"], [92, "            int majorVersion = Integer.parseInt(context.getVersion().split(\"\\\\.\")[0]);"], [93, "            String patternString = null;"], [94, "            if (majorVersion > 2) {"], [95, "               patternString = clusterName + \"-\\\\d{4}-\\\\d{2}-\\\\d{2}.log*\";"], [97, "               patternString = clusterName + \".log.\\\\d{4}-\\\\d{2}-\\\\d{2}\";"], [98, "            }"], [99, "            // Get the two most recent server log rollovers"], [100, "            //Pattern pattern = Pattern.compile(patternString);"], [101, "            FileFilter logFilter = new RegexFileFilter(patternString);"], [102, "            File[] logDirList = logDir.listFiles(logFilter);"], [103, "            Arrays.sort(logDirList, LastModifiedFileComparator.LASTMODIFIED_REVERSE);"], [104, ""], [105, "            int limit = 2, count = 0;"], [106, "            for (File logListing : logDirList) {"], [107, "               if (count < limit) {"], [108, "                  FileUtils.copyFileToDirectory(logListing, logDest);"], [109, "                  count++;"], [111, "                  break;"], [115, ""], [126, "   public String determineConfigLocation(String conf, String config, String home, String defaultConf) {"]]}, "num_lines_added": 83, "num_lines_removed": 47}