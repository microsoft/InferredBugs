{"hash": "220b3b183f75ba1176c56078ca388ec1f623d894", "message": "changed zip to tar.gz", "file_num_lines": 371, "diff_parsed": {"added": [[9, "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;"], [10, "import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;"], [11, "import org.apache.commons.compress.utils.IOUtils;"], [21, "import org.yaml.snakeyaml.DumperOptions;"], [22, "import org.yaml.snakeyaml.Yaml;"], [29, "import java.text.SimpleDateFormat;"], [31, "import java.util.zip.GZIPOutputStream;"], [36, "    private static final String UTC_DATE_FORMAT = \"MM/dd/yyyy KK:mm:ss a Z\";"], [49, "        int connectTimeout = (Integer) configMap.get(\"connectTimeout\");"], [50, "        int requestTimeout = (Integer) configMap.get(\"requestTimeout\");"], [63, "        Map<String, String> statements = (Map<String, String>) configMap.get(\"restQueries\");"], [72, "            FileUtils.deleteDirectory(new File(tempDir));"], [84, "        for (Map.Entry<String, String> entry : entries) {"], [165, "            if (query.contains(\"license\")) {"], [194, "            cluster.put(\"collectionDate\", getUtcDateString());"], [263, ""], [268, "            FileOutputStream fout = new FileOutputStream(dir + \".tar.gz\");"], [269, "            GZIPOutputStream gzout = new GZIPOutputStream(fout);"], [270, "            TarArchiveOutputStream taos = new TarArchiveOutputStream(gzout);"], [271, "            taos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);"], [272, "            taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);"], [273, ""], [274, "            //out.setLevel(ZipOutputStream.DEFLATED);"], [275, "            archiveResults(taos, srcDir, \"\");"], [276, "            taos.close();"], [283, "            throw new RuntimeException((\"Error creating compressed archive from statistics files.\"));"], [286, ""], [287, "    public Set getIpAndHostData() {"], [306, "        } catch (Exception e) {"], [314, ""], [315, "    public void archiveResults(TarArchiveOutputStream taos, File file, String path) {"], [316, ""], [317, "        try {"], [318, ""], [319, "            String relPath = path + \"/\" + file.getName();"], [320, "            TarArchiveEntry tae = new TarArchiveEntry(file, relPath);"], [321, "            taos.putArchiveEntry(tae);"], [322, ""], [323, "            if (file.isFile()) {"], [324, "                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));"], [325, "                IOUtils.copy(bis, taos);"], [326, "                taos.closeArchiveEntry();"], [327, "                bis.close();"], [328, ""], [329, "            } else if (file.isDirectory()) {"], [330, "                taos.closeArchiveEntry();"], [331, "                for (File childFile : file.listFiles()) {"], [332, "                    archiveResults(taos, childFile, relPath);"], [333, "                }"], [334, "            }"], [335, ""], [336, "        } catch (IOException e) {"], [337, "            logger.error(\"Archive Error\", e);"], [338, "        }"], [339, ""], [340, "    }"], [341, ""], [360, "                if (!(ipAndHosts.contains(ip) || ipAndHosts.contains(hostName))) {"], [377, "                FileUtils.copyDirectory(new File(configFileLoc), new File(nodeDir + SystemProperties.fileSeparator + \"config\"));"], [383, "                FileUtils.copyDirectory(new File(logs),  new File(nodeDir + SystemProperties.fileSeparator + \"logs\"));"], [384, ""], [385, "                /*SystemUtils.copyFile(logs + SystemProperties.fileSeparator + clusterName + \".log\", nodeDir + SystemProperties.fileSeparator + clusterName + \".log\");"], [388, "                */"], [401, "    public String determineConfigLocation(String conf, String config, String home) {"], [427, "        } else {"], [470, "            return readYaml(is, true);"], [478, "    public String getUtcDateString(){"], [479, "        Date curDate = new Date();"], [480, "        SimpleDateFormat format = new SimpleDateFormat(UTC_DATE_FORMAT);"], [481, "        return format.format(curDate);"], [482, "    }"], [483, ""], [484, "    public  Map readYaml(InputStream inputStream, boolean isBlock){"], [485, "        Map doc = new LinkedHashMap();"], [486, ""], [487, "        try{"], [488, "            DumperOptions options = new DumperOptions();"], [489, "            if(isBlock){"], [490, "                options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);"], [491, "            }"], [492, ""], [493, "            Yaml yaml=new Yaml(options);"], [494, "            doc = (Map)yaml.load(inputStream);"], [495, ""], [496, "        }"], [497, "        catch (  Exception e) {"], [498, "            logger.error(\"Not able to read config file \", e);"], [499, "            throw new RuntimeException(\"Error reading configuration\");"], [500, "        }"], [501, "        return doc;"], [502, "    }"], [503, ""], [504, ""]], "deleted": [[25, "import java.util.zip.ZipOutputStream;"], [42, "        int connectTimeout = (Integer)configMap.get(\"connectTimeout\");"], [43, "        int requestTimeout =  (Integer)configMap.get(\"requestTimeout\");"], [53, "        Map versionMap = (Map) resultMap.get(\"version\");"], [54, "        String version = (String) versionMap.get(\"number\");"], [58, "        Map<String, String> statements = getConfiguredStatements(version, configMap);"], [67, "            SystemUtils.deleteDir(tempDir);"], [79, "        for(Map.Entry<String, String> entry: entries){"], [90, ""], [95, "    public Map<String, String> getConfiguredStatements(String version, Map configMap) {"], [96, ""], [97, "        // use the appropriate combination of statements - overlay the current with the prior ones"], [98, "        // if using an older version"], [99, "        Map<String, String> statements = (Map<String, String>) configMap.get(\"restQueries\");"], [100, ""], [101, "        return statements;"], [102, ""], [103, "    }"], [104, ""], [171, "            if(query.contains(\"license\")){"], [200, "            cluster.put(\"collectionDate\", SystemUtils.getUtcDateString());"], [273, "            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(dir + \".zip\"));"], [274, "            out.setLevel(ZipOutputStream.DEFLATED);"], [275, "            SystemUtils.zipDir(\"\", srcDir, out);"], [276, "            out.close();"], [283, "            throw new RuntimeException((\"Error creating compressed archive from statistics files.\" ));"], [286, "    public Set getIpAndHostData(){"], [305, "        }"], [306, "        catch (Exception e) {"], [332, "                if (! (ipAndHosts.contains(ip) || ipAndHosts.contains(hostName) ) ) {"], [349, "                //zipConfig(configFileLoc, nodeDir  + SystemProperties.fileSeparator + \"config.zip\");"], [350, "                FileUtils.copyDirectory(new File(configFileLoc), new File(nodeDir));"], [356, "                // Copy the main and slow logs"], [357, "                SystemUtils.copyFile(logs + SystemProperties.fileSeparator + clusterName + \".log\", nodeDir + SystemProperties.fileSeparator + clusterName + \".log\");"], [360, ""], [373, "    public String determineConfigLocation(String conf, String config, String home){"], [399, "        }"], [400, "        else {"], [443, "            return SystemUtils.readYaml(is, true);"]]}, "num_lines_added": 93, "num_lines_removed": 39}