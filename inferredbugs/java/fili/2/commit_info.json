{"hash": "12655ffc8f73e5716a9915bee1bd3f118655c1b8", "message": "DruidQuery::getInnerQuery and Datasource::getQuery return Optional (#485)", "file_num_lines": 231, "diff_parsed": {"added": [[31, "import java.util.Optional;"], [138, "    public Optional<? extends DruidAggregationQuery> getInnerQuery() {"], [139, "        return (Optional<? extends DruidAggregationQuery>) this.dataSource.getQuery();"], [140, "    }"], [141, ""], [142, "    /**"], [143, "     * Return the Inner Query without checking that it exists."], [144, "     *"], [145, "     * @return the inner query."], [146, "     */"], [147, "    @JsonIgnore"], [148, "    private DruidAggregationQuery<?> getInnerQueryUnchecked() {"], [149, "        return getInnerQuery().get();"], [182, "        return getInnerQueryUnchecked().getGranularity();"], [188, "        return getInnerQueryUnchecked().getAggregations();"], [194, "        return getInnerQueryUnchecked().getFilter();"], [200, "        return getInnerQueryUnchecked().getIntervals();"], [206, "        return getInnerQueryUnchecked().getDimensions();"], [217, "        return Stream.concat(getInnerQueryUnchecked().getPostAggregations().stream(), postAggregations.stream())"], [225, "        return withDataSource(new QueryDataSource(getInnerQueryUnchecked().withAggregations(aggregations)));"], [242, "        return new LookbackQuery(new QueryDataSource(getInnerQueryUnchecked().withPostAggregations(postAggregations)), granularity, filter, aggregations, getLookbackPostAggregations(), intervals, context, false, lookbackOffsets, lookbackPrefixes, having, limitSpec);"], [258, "        return withDataSource(new QueryDataSource(getInnerQueryUnchecked().withGranularity(granularity)));"], [263, "        return withDataSource(new QueryDataSource(getInnerQueryUnchecked().withFilter(filter)));"], [268, "        return withDataSource(new QueryDataSource(getInnerQueryUnchecked().withIntervals(intervals)));"], [273, "        Optional<DruidFactQuery<?>> innerQuery = (Optional<DruidFactQuery<?>>) this.dataSource.getQuery();"], [274, "        return !innerQuery.isPresent() ?"], [276, "                withDataSource(new QueryDataSource(innerQuery.get().withAllIntervals(intervals))).withIntervals(intervals);"], [286, "        Optional<DruidFactQuery<?>> innerQuery = (Optional<DruidFactQuery<?>>) this.dataSource.getQuery();"], [289, "                withDataSource(new QueryDataSource(innerQuery.get().withInnermostDataSource(dataSource)));"]], "deleted": [[137, "    public DruidAggregationQuery<?> getInnerQuery() {"], [138, "        return (DruidAggregationQuery) this.dataSource.getQuery();"], [171, "        return getInnerQuery().getGranularity();"], [177, "        return getInnerQuery().getAggregations();"], [183, "        return getInnerQuery().getFilter();"], [189, "        return getInnerQuery().getIntervals();"], [195, "        return getInnerQuery().getDimensions();"], [206, "        return Stream.concat(getInnerQuery().getPostAggregations().stream(), postAggregations.stream())"], [214, "        return withDataSource(new QueryDataSource(getInnerQuery().withAggregations(aggregations)));"], [231, "        return new LookbackQuery(new QueryDataSource(getInnerQuery().withPostAggregations(postAggregations)), granularity, filter, aggregations, getLookbackPostAggregations(), intervals, context, false, lookbackOffsets, lookbackPrefixes, having, limitSpec);"], [247, "        return withDataSource(new QueryDataSource(getInnerQuery().withGranularity(granularity)));"], [252, "        return withDataSource(new QueryDataSource(getInnerQuery().withFilter(filter)));"], [257, "        return withDataSource(new QueryDataSource(getInnerQuery().withIntervals(intervals)));"], [262, "        DruidFactQuery<?> innerQuery = (DruidFactQuery<?>) this.dataSource.getQuery();"], [263, "        return (innerQuery == null) ?"], [265, "                withDataSource(new QueryDataSource(innerQuery.withAllIntervals(intervals))).withIntervals(intervals);"], [275, "        DruidFactQuery<?> innerQuery = (DruidFactQuery<?>) this.dataSource.getQuery();"], [278, "                withDataSource(new QueryDataSource(innerQuery.withInnermostDataSource(dataSource)));"]]}, "num_lines_added": 29, "num_lines_removed": 18}