{"hash": "5f60c2e98918c8e328d3488db3a301eecd42ea73", "message": "Fix locking behavior in LuceneSearchProvider (#871)", "file_num_lines": 581, "diff_parsed": {"added": [[68, "import java.util.concurrent.TimeUnit;"], [81, "    private static final SystemConfig SYSTEM_CONFIG = SystemConfigProvider.getInstance();"], [86, "            SYSTEM_CONFIG.getPackageVariableName(\"lucene_search_timeout_ms\"),"], [87, "            600000"], [90, "    // Default is 1.2 * modifier, just long enough for a single read query to timeout."], [91, "    public static final float WRITE_LOCK_TIMEOUT_MULTIPLIER = SYSTEM_CONFIG.getFloatProperty("], [92, "            SYSTEM_CONFIG.getPackageVariableName(\"lucene_search_write_lock_timeout_multiplier\"),"], [93, "            1.2f"], [94, "    );"], [95, ""], [96, "    private Analyzer analyzer;"], [97, ""], [98, "    protected final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();"], [99, "    private final String luceneIndexPath;"], [100, ""], [151, "     * Attempts to acquire the read lock. If waiting for the read lock times out or is interrupted an exception is"], [152, "     * thrown and the query is failed. Timeout is equivalent to the timeout on a search."], [153, "     */"], [154, "    protected void readLock() {"], [155, "        try {"], [156, "            if (!lock.readLock().tryLock(searchTimeout, TimeUnit.MILLISECONDS)) {"], [157, "                String msg = String.format("], [158, "                        ErrorMessageFormat.LUCENE_LOCK_TIMEOUT.getMessageFormat(),"], [159, "                        getDimension().getApiName()"], [160, "                );"], [161, ""], [162, "                LOG.error(msg);"], [163, "                throw new IllegalStateException(msg);"], [164, "            }"], [165, "        } catch (InterruptedException e) {"], [166, "            String msg = String.format("], [167, "                    ErrorMessageFormat.LUCENE_LOCK_INTERRUPTED.getMessageFormat(),"], [168, "                    getDimension()"], [169, "            );"], [170, "            LOG.error(msg);"], [171, "            throw new IllegalStateException(msg, e);"], [172, "        }"], [173, "    }"], [174, ""], [175, "    /**"], [176, "     * Unlocks the held read lock for this thread."], [177, "     */"], [178, "    protected void readUnlock() {"], [179, "        lock.readLock().unlock();"], [180, "    }"], [181, ""], [182, "    /**"], [183, "     * Attempts to acquire the write lock. If waiting for the write lock times out or is interrupted an exception is"], [184, "     * thrown and the query is failed. Timeout is equivalent to the timeout on a search multiplied by a constant"], [185, "     * write timeout multiplier."], [186, "     */"], [187, "    protected void writeLock() {"], [188, "        try {"], [189, "            if (!lock.writeLock().tryLock("], [190, "                    (int) (searchTimeout * WRITE_LOCK_TIMEOUT_MULTIPLIER),"], [191, "                    TimeUnit.MILLISECONDS)"], [192, "            ) {"], [193, "                String msg = String.format("], [194, "                        ErrorMessageFormat.LUCENE_LOCK_TIMEOUT.getMessageFormat(),"], [195, "                        getDimension().getApiName()"], [196, "                );"], [197, ""], [198, "                LOG.error(msg);"], [199, "                throw new IllegalStateException(msg);"], [200, "            }"], [201, "        } catch (InterruptedException e) {"], [202, "            String msg = String.format("], [203, "                    ErrorMessageFormat.LUCENE_LOCK_INTERRUPTED.getMessageFormat(),"], [204, "                    getDimension().getApiName()"], [205, "            );"], [206, ""], [207, "            LOG.error(msg);"], [208, "            throw new IllegalStateException(msg, e);"], [209, "        }"], [210, "    }"], [211, ""], [212, "    /**"], [213, "     * Unlocks the write lock for this thread."], [214, "     */"], [215, "    protected void writeUnlock() {"], [216, "        lock.writeLock().unlock();"], [217, "    }"], [218, ""], [219, "    /**"], [241, "        writeLock();"], [272, "            writeUnlock();"], [380, "        writeLock();"], [403, "            writeUnlock();"], [448, "        writeLock();"], [470, "            writeUnlock();"], [547, "        writeLock();"], [579, "            writeUnlock();"], [591, "        readLock();"], [595, "            readUnlock();"], [799, "        readLock();"], [857, "            readUnlock();"], [901, "        readLock();"], [912, "            readUnlock();"]], "deleted": [[81, "    private Analyzer analyzer;"], [84, "    protected final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();"], [85, "    private final String luceneIndexPath;"], [86, ""], [87, "    private static final SystemConfig SYSTEM_CONFIG = SystemConfigProvider.getInstance();"], [89, "            SYSTEM_CONFIG.getPackageVariableName(\"lucene_search_timeout_ms\"), 600000"], [163, "        lock.writeLock().lock();"], [194, "            lock.writeLock().unlock();"], [302, "        lock.writeLock().lock();"], [325, "            lock.writeLock().unlock();"], [370, "        lock.writeLock().lock();"], [392, "            lock.writeLock().unlock();"], [469, "        lock.writeLock().lock();"], [501, "            lock.writeLock().unlock();"], [513, "        lock.readLock().lock();"], [517, "            lock.readLock().unlock();"], [721, "        lock.readLock().lock();"], [779, "            lock.readLock().unlock();"], [823, "        lock.readLock().lock();"], [834, "            lock.readLock().unlock();"]]}, "num_lines_added": 98, "num_lines_removed": 20}