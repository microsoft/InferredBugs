{"hash": "760372a21ed7aa9dc8fca9b29c440f0418b26c04", "message": "Make almost everything in jimfs.internal package-private and change AttributeProvider impl tests to not use JimfsFileStore.", "file_num_lines": 88, "diff_parsed": {"added": [[32, "import java.util.HashMap;"], [40, "public class UserDefinedAttributeProviderTest"], [41, "    extends AttributeProviderTest<UserDefinedAttributeProvider> {"], [44, "  protected UserDefinedAttributeProvider createProvider() {"], [45, "    return new UserDefinedAttributeProvider();"], [51, "    ASSERT.that(ImmutableList.copyOf(store.getAttributeKeys())).isEmpty();"], [57, "    assertCannotSetOnCreate(\"anything\");"], [59, "    ASSERT.that(provider.isSettable(store, \"anything\")).isTrue();"], [67, "    provider.set(store, \"one\", bytes);"], [68, "    provider.set(store, \"two\", ByteBuffer.wrap(bytes));"], [70, "    byte[] one = (byte[]) provider.get(store, \"one\");"], [71, "    byte[] two = (byte[]) provider.get(store, \"two\");"], [75, "    assertSetFails(\"foo\", \"hello\");"], [77, "    Map<String, Object> map = new HashMap<>();"], [78, "    provider.readAll(store, map);"], [86, "    UserDefinedFileAttributeView view = provider.getView(attributeStoreSupplier());"], [99, "    ASSERT.that(store.getAttributeKeys()).has().exactly(\"user:b1\", \"user:b2\");"], [116, "    ASSERT.that(store.getAttributeKeys()).has().exactly(\"user:b1\");"]], "deleted": [[25, "import com.google.jimfs.attribute.AttributeProvider;"], [40, "public class UserDefinedAttributeProviderTest extends AttributeProviderTest {"], [43, "  protected Iterable<? extends AttributeProvider> createProviders() {"], [44, "    return ImmutableList.of(new UserDefinedAttributeProvider());"], [50, "    ASSERT.that(ImmutableList.copyOf(file.getAttributeKeys())).isEmpty();"], [57, "    ASSERT.that(provider.isSettable(file, \"anything\")).isTrue();"], [65, "    service.setAttribute(file, \"user\", \"one\", bytes);"], [66, "    service.setAttribute(file, \"user:two\", ByteBuffer.wrap(bytes));"], [68, "    byte[] one = service.getAttribute(file, \"user:one\");"], [69, "    byte[] two = service.getAttribute(file, \"user\", \"two\");"], [73, "    assertSetOnCreateFails(\"user:foo\", bytes);"], [74, "    assertSetFails(\"user:foo\", \"hello\");"], [76, "    Map<String, Object> map = service.readAttributes(file, \"user:*\");"], [84, "    UserDefinedFileAttributeView view ="], [85, "        service.getFileAttributeView(fileSupplier(), UserDefinedFileAttributeView.class);"], [98, "    ASSERT.that(service.readAttributes(file, \"user:*\").keySet())"], [99, "        .has().allOf(\"b1\", \"b2\");"], [116, "    ASSERT.that(service.readAttributes(file, \"user:*\").keySet())"], [117, "        .has().exactly(\"b1\");"]]}, "num_lines_added": 18, "num_lines_removed": 19}