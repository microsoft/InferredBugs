{"hash": "cec8d1f01800e5b383b7ff20731431c0ec72b29b", "message": "Add deflate block compression to Curly", "file_num_lines": 115, "diff_parsed": {"added": [[24, "import java.io.IOException;"], [110, "  private void doTestBlockCompression(BlockCompressionCodec blockCompressionCodec, byte[] compressedBlock) throws IOException {"], [113, "    s.write(compressedBlock);"], [124, "        blockCompressionCodec, 3, 2, true);"], [148, "  public void testBlockCompressionSlowNoCompression() throws Exception {"], [149, "    doTestBlockCompression(BlockCompressionCodec.SLOW_NO_COMPRESSION, EXPECTED_RECORD_FILE_BLOCK_COMPRESSED_SLOW_NO_COMPRESSION);"], [150, "  }"], [152, "  public void testBlockCompressionDeflate() throws Exception {"], [153, "    doTestBlockCompression(BlockCompressionCodec.DEFLATE, EXPECTED_RECORD_FILE_BLOCK_COMPRESSED_DEFLATE);"], [154, "  }"], [156, "  public void testBlockCompressionGzip() throws Exception {"], [157, "    doTestBlockCompression(BlockCompressionCodec.GZIP, EXPECTED_RECORD_FILE_BLOCK_COMPRESSED_GZIP);"], [161, "    doTestBlockCompression(BlockCompressionCodec.SNAPPY, EXPECTED_RECORD_FILE_BLOCK_COMPRESSED_SNAPPY);"]], "deleted": [[109, "  public void testBlockCompression() throws Exception {"], [112, "    s.write(EXPECTED_RECORD_FILE_BLOCK_COMPRESSED);"], [123, "        BlockCompressionCodec.SLOW_NO_COMPRESSION, 3, 2, true);"], [147, "  public void testBlockCompressionGzip() throws Exception {"], [148, "    new File(TMP_TEST_CURLY_READER).mkdirs();"], [149, "    OutputStream s = new FileOutputStream(TMP_TEST_CURLY_READER + \"/00000.base.curly\");"], [150, "    s.write(EXPECTED_RECORD_FILE_BLOCK_COMPRESSED_GZIP);"], [151, "    s.flush();"], [152, "    s.close();"], [153, ""], [154, "    MapReader keyfileReader = new MapReader(0,"], [155, "        KEY1.array(), new byte[]{0, 0, 0, 0, 0},"], [156, "        KEY2.array(), new byte[]{0, 0, 0, 5, 0},"], [157, "        KEY3.array(), new byte[]{0, 0, 0, 10, 0}"], [158, "    );"], [159, ""], [160, "    CurlyReader reader = new CurlyReader(CurlyReader.getLatestBase(TMP_TEST_CURLY_READER), 1024, keyfileReader, -1,"], [161, "        BlockCompressionCodec.GZIP, 3, 2, true);"], [162, ""], [163, "    ReaderResult result = new ReaderResult();"], [164, ""], [165, "    reader.get(KEY1, result);"], [166, "    assertTrue(result.isFound());"], [167, "    assertEquals(VALUE1, result.getBuffer());"], [168, "    result.clear();"], [169, ""], [170, "    reader.get(KEY4, result);"], [171, "    assertFalse(result.isFound());"], [172, "    result.clear();"], [174, "    reader.get(KEY3, result);"], [175, "    assertTrue(result.isFound());"], [176, "    assertEquals(VALUE3, result.getBuffer());"], [177, "    result.clear();"], [179, "    reader.get(KEY2, result);"], [180, "    assertTrue(result.isFound());"], [181, "    assertEquals(VALUE2, result.getBuffer());"], [182, "    result.clear();"], [186, "    new File(TMP_TEST_CURLY_READER).mkdirs();"], [187, "    OutputStream s = new FileOutputStream(TMP_TEST_CURLY_READER + \"/00000.base.curly\");"], [188, "    s.write(EXPECTED_RECORD_FILE_BLOCK_COMPRESSED_SNAPPY);"], [189, "    s.flush();"], [190, "    s.close();"], [191, ""], [192, "    MapReader keyfileReader = new MapReader(0,"], [193, "        KEY1.array(), new byte[]{0, 0, 0, 0, 0},"], [194, "        KEY2.array(), new byte[]{0, 0, 0, 5, 0},"], [195, "        KEY3.array(), new byte[]{0, 0, 0, 10, 0}"], [196, "    );"], [197, ""], [198, "    CurlyReader reader = new CurlyReader(CurlyReader.getLatestBase(TMP_TEST_CURLY_READER), 1024, keyfileReader, -1,"], [199, "        BlockCompressionCodec.SNAPPY, 3, 2, true);"], [200, ""], [201, "    ReaderResult result = new ReaderResult();"], [202, ""], [203, "    reader.get(KEY1, result);"], [204, "    assertTrue(result.isFound());"], [205, "    assertEquals(VALUE1, result.getBuffer());"], [206, "    result.clear();"], [207, ""], [208, "    reader.get(KEY4, result);"], [209, "    assertFalse(result.isFound());"], [210, "    result.clear();"], [211, ""], [212, "    reader.get(KEY3, result);"], [213, "    assertTrue(result.isFound());"], [214, "    assertEquals(VALUE3, result.getBuffer());"], [215, "    result.clear();"], [216, ""], [217, "    reader.get(KEY2, result);"], [218, "    assertTrue(result.isFound());"], [219, "    assertEquals(VALUE2, result.getBuffer());"], [220, "    result.clear();"]]}, "num_lines_added": 13, "num_lines_removed": 72}