{"hash": "15cf3b8430da8581ccc202d81bfdd1b2297fd991", "message": "Improve the command processing logic in PartitionServer by moving it to a\nseparate interface.", "file_num_lines": 291, "diff_parsed": {"added": [[37, "public class PartitionServer implements HostCommandQueueChangeListener, HostCurrentCommandChangeListener {"], [47, "  private boolean hasProcessedCommandOnStartup = false;"], [71, "    host.setCurrentCommandChangeListener(this);"], [75, "    setStateSynchronized(HostState.IDLE); // In case of exception, server will stop and state will be coherent."], [77, "    processCommandOnStartup();"], [96, "    setStateSynchronized(HostState.OFFLINE); // In case of exception, server will stop and state will be coherent."], [100, "  public synchronized void stopSynchronized() {"], [101, "    stop();"], [105, "  private void stop() {"], [118, "  public synchronized void onCommandQueueChange(Host host) {"], [119, "    // Do not process anything when we have not yet tried to process a command when starting up."], [120, "    if (!hasProcessedCommandOnStartup) {"], [121, "      return;"], [122, "    }"], [126, "        // When command queue changes, and current command is empty, move on to next command"], [127, "        host.nextCommand();"], [128, "      } else {"], [129, "        // A current command was already in place, we are still processing it. Do nothing."], [131, "    } catch (IOException e) {"], [132, "      LOG.error(\"Failed to move on to next command.\", e);"], [133, "      stop();"], [134, "    }"], [135, "  }"], [136, ""], [137, "  @Override"], [138, "  public synchronized void onCurrentCommandChange(Host host) {"], [139, "    // Do not process anything when stopping"], [140, "    if (stopping) {"], [141, "      return;"], [142, "    }"], [143, "    try {"], [144, "      HostCommand command = host.getCurrentCommand();"], [150, "      stop();"], [151, "    }"], [152, "  }"], [153, ""], [154, "  public synchronized void processCommandOnStartup() {"], [155, "    try {"], [156, "      HostCommand command = host.getCurrentCommand();"], [157, "      if (command != null) {"], [158, "        processCommand(command, host.getState());"], [159, "      } else {"], [160, "        host.nextCommand();"], [161, "      }"], [162, "    } catch (IOException e) {"], [163, "      LOG.error(\"Failed to process current command on startup.\", e);"], [164, "      stop();"], [166, "    hasProcessedCommandOnStartup = true;"], [169, "  private synchronized void setStateSynchronized(HostState state) throws IOException {"], [174, "      stop();"], [179, "  private synchronized HostCommand nextCommandSynchronized() throws IOException {"], [184, "      stop();"], [207, "        host.setState(HostState.IDLE); // In case of exception, server will stop and state will be coherent."], [208, "        host.nextCommand(); // In case of exception, server will stop and state will be coherent."], [212, "        host.nextCommand(); // In case of exception, server will stop and state will be coherent."], [219, "        host.setState(HostState.UPDATING); // In case of exception, server will stop and state will be coherent."], [225, "        host.nextCommand(); // In case of exception, server will stop and state will be coherent."], [226, "    }"], [227, "  }"], [228, ""], [229, "  private void processServeData(HostState state) throws IOException {"], [230, "    switch (state) {"], [231, "      case IDLE:"], [232, "        serveData();"], [233, "        host.setState(HostState.SERVING);  // In case of exception, server will stop and state will be coherent."], [234, "        host.nextCommand(); // In case of exception, server will stop and state will be coherent."], [235, "        break;"], [236, "      default:"], [237, "        LOG.debug(ignoreIncompatibleCommandMessage(HostCommand.SERVE_DATA, state));"], [238, "        host.nextCommand(); // In case of exception, server will stop and state will be coherent."], [259, "          setStateSynchronized(HostState.IDLE); // In case of exception, server will stop and state will be coherent."], [265, "          nextCommandSynchronized(); // In case of exception, server will stop and state will be coherent."], [319, "          stopSynchronized();"]], "deleted": [[37, "public class PartitionServer implements HostCommandQueueChangeListener {"], [73, "    setState(HostState.IDLE); // In case of exception, server will stop and state will be coherent."], [75, "    processCurrentCommand();"], [94, "    setState(HostState.OFFLINE); // In case of exception, server will stop and state will be coherent."], [98, "  public synchronized void stop() {"], [99, "    stopNotSynchronized();"], [103, "  private void stopNotSynchronized() {"], [116, "  public void onCommandQueueChange(Host host) {"], [117, "    processCurrentCommand();"], [118, "  }"], [119, ""], [120, "  private synchronized void processCurrentCommand() {"], [123, "      // If there is no current command, move on to the next one."], [125, "        command = host.nextCommand();"], [127, "      // If there is a command available, process it."], [133, "      stopNotSynchronized();"], [137, "  private synchronized void setState(HostState state) throws IOException {"], [142, "      stopNotSynchronized();"], [147, "  private synchronized HostCommand nextCommand() throws IOException {"], [152, "      stopNotSynchronized();"], [171, "  private void processServeData(HostState state) throws IOException {"], [172, "    switch (state) {"], [173, "      case IDLE:"], [174, "        serveData();"], [175, "        setState(HostState.SERVING);  // In case of exception, server will stop and state will be coherent."], [176, "        nextCommand(); // In case of exception, server will stop and state will be coherent."], [177, "        break;"], [178, "      default:"], [179, "        LOG.debug(ignoreIncompatibleCommandMessage(HostCommand.SERVE_DATA, state));"], [180, "        nextCommand(); // In case of exception, server will stop and state will be coherent."], [181, "    }"], [182, "  }"], [183, ""], [188, "        setState(HostState.IDLE); // In case of exception, server will stop and state will be coherent."], [189, "        nextCommand(); // In case of exception, server will stop and state will be coherent."], [193, "        nextCommand(); // In case of exception, server will stop and state will be coherent."], [200, "        setState(HostState.UPDATING); // In case of exception, server will stop and state will be coherent."], [206, "        nextCommand(); // In case of exception, server will stop and state will be coherent."], [227, "          setState(HostState.IDLE); // In case of exception, server will stop and state will be coherent."], [233, "          nextCommand(); // In case of exception, server will stop and state will be coherent."], [287, "          stop();"]]}, "num_lines_added": 73, "num_lines_removed": 41}