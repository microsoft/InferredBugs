{"hash": "8276c6a413493e69fbf0872c1360480f00cfc19d", "message": "fixed #94 - switched ZkRingGroup over to WatchedInt for its current and updating-to versions", "file_num_lines": 225, "diff_parsed": {"added": [[37, "import com.rapleaf.hank.zookeeper.WatchedInt;"], [41, "  private static final String UPDATING_TO_VERSION_PATH_SEGMENT = \"/updating_to_version\";"], [42, "  private static final String CURRENT_VERSION_PATH_SEGMENT = \"/current_version\";"], [45, "  public static ZkRingGroup create(ZooKeeperPlus zk, String path, ZkDomainGroup domainGroup) throws KeeperException, InterruptedException, IOException {"], [46, "    if (domainGroup.getVersions().isEmpty()) {"], [47, "      throw new IllegalStateException("], [48, "        \"You cannot create a ring group for a domain group that has no versions!\");"], [49, "    }"], [50, "    zk.create(path, domainGroup.getName().getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"], [51, "    zk.create(path + CURRENT_VERSION_PATH_SEGMENT, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"], [52, "    zk.create(path + UPDATING_TO_VERSION_PATH_SEGMENT,"], [53, "      (\"\" + domainGroup.getLatestVersion().getVersionNumber()).getBytes(), Ids.OPEN_ACL_UNSAFE,"], [54, "      CreateMode.PERSISTENT);"], [55, "    return new ZkRingGroup(zk, path, domainGroup);"], [56, "  }"], [57, ""], [61, "    public StateChangeListener(RingGroupChangeListener listener)"], [62, "        throws KeeperException, InterruptedException {"], [115, "  private final HashMap<Integer, Ring> ringsByNumber = new HashMap<Integer, Ring>();"], [122, "  private final WatchedInt currentVersion;"], [123, "  private final WatchedInt updatingToVersion;"], [124, ""], [125, "  public ZkRingGroup(ZooKeeperPlus zk, String ringGroupPath, DomainGroup domainGroup)"], [126, "      throws InterruptedException, KeeperException {"], [141, "    currentVerPath = ringGroupPath + CURRENT_VERSION_PATH_SEGMENT;"], [142, "    updatingToVersionPath = ringGroupPath + UPDATING_TO_VERSION_PATH_SEGMENT;"], [144, ""], [145, "    currentVersion = new WatchedInt(zk, currentVerPath, true, null);"], [146, "    updatingToVersion = new WatchedInt(zk, updatingToVersionPath, true, null);"], [199, "      throw new IllegalStateException("], [200, "        \"Can't release the data deployer lock when it's not currently set!\");"], [209, "      return currentVersion.get();"], [223, "      updatingToVersion.set(versionNumber);"], [232, "      currentVersion.set(getUpdatingToVersion());"], [236, "    setUpdatingToVersion(null);"], [251, "      return updatingToVersion.get();"], [260, "      Ring rc = ZkRing.create(zk, ringGroupPath, ringNum, this,"], [261, "        isUpdating() ? getUpdatingToVersion() : getCurrentVersion());"]], "deleted": [[45, "    public StateChangeListener(RingGroupChangeListener listener) throws KeeperException, InterruptedException {"], [98, "  private final HashMap<Integer,Ring> ringsByNumber ="], [99, "    new HashMap<Integer, Ring>();"], [106, "  public ZkRingGroup(ZooKeeperPlus zk, String ringGroupPath, DomainGroup domainGroup) throws InterruptedException, KeeperException {"], [121, "    currentVerPath = ringGroupPath + \"/current_version\";"], [122, "    updatingToVersionPath = ringGroupPath + \"/updating_to_version\";"], [176, "      throw new IllegalStateException(\"Can't release the data deployer lock when it's not currently set!\");"], [185, "      return zk.getIntOrNull(ringGroupPath + \"/current_version\");"], [198, "    byte[] newVer = (\"\" + versionNumber).getBytes();"], [200, "      if (zk.exists(updatingToVersionPath, false) == null) {"], [201, "        zk.create(updatingToVersionPath, newVer, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"], [202, "      } else {"], [203, "        zk.setData(updatingToVersionPath, newVer, -1);"], [204, "      }"], [212, "    byte[] newVer = (\"\" + getUpdatingToVersion()).getBytes();"], [214, "      if (zk.exists(currentVerPath, false) == null) {"], [215, "        zk.create(currentVerPath, newVer, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"], [216, "      } else {"], [217, "        zk.setData(currentVerPath, newVer, -1);"], [218, "      }"], [219, "      zk.delete(updatingToVersionPath, -1);"], [234, "  public static ZkRingGroup create(ZooKeeperPlus zk, String path, ZkDomainGroup domainGroup) throws KeeperException, InterruptedException, IOException {"], [235, "    if (domainGroup.getVersions().isEmpty()) {"], [236, "      throw new IllegalStateException(\"You cannot create a ring group for a domain group that has no versions!\");"], [237, "    }"], [238, "    zk.create(path, domainGroup.getName().getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"], [239, "    zk.create(path + \"/updating_to_version\", (\"\" + domainGroup.getLatestVersion().getVersionNumber()).getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"], [240, "    return new ZkRingGroup(zk, path, domainGroup);"], [241, "  }"], [242, ""], [246, "      return zk.getIntOrNull(ringGroupPath + \"/updating_to_version\");"], [255, "      Ring rc = ZkRing.create(zk, ringGroupPath, ringNum, this, isUpdating() ? getUpdatingToVersion() : getCurrentVersion());"]]}, "num_lines_added": 38, "num_lines_removed": 32}