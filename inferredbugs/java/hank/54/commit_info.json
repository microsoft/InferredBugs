{"hash": "9adaf434d52df322ad60cb88292a9fd7e210e1a4", "message": "Refactor Curly block decompression", "file_num_lines": 216, "diff_parsed": {"added": [[19, "import com.rapleaf.hank.compress.*;"], [39, ""], [45, "  private class Local {"], [47, "    private final BlockDecompressor blockDecompressor;"], [48, "    private final UnsafeByteArrayOutputStream decompressionOutputStream;"], [50, "    public Local() {"], [51, "      this.blockDecompressor = initializeBlockDecompressor();"], [52, "      this.decompressionOutputStream = new UnsafeByteArrayOutputStream();"], [55, "    public BlockDecompressor getBlockDecompressor() {"], [56, "      return blockDecompressor;"], [59, "    public UnsafeByteArrayOutputStream getDecompressionOutputStream() {"], [60, "      return decompressionOutputStream;"], [66, ""], [67, "    private BlockDecompressor initializeBlockDecompressor() {"], [68, "      switch (blockCompressionCodec) {"], [69, "        case GZIP:"], [70, "          return new GzipBlockDecompressor();"], [71, "        case SNAPPY:"], [72, "          return new SnappyBlockDecompressor();"], [73, "        case SLOW_NO_COMPRESSION:"], [74, "          return new SlowNoCompressionBlockDecompressor();"], [75, "        default:"], [76, "          throw new RuntimeException(\"Unknown block compression codec: \" + blockCompressionCodec);"], [77, "      }"], [78, "    }"], [81, "  private final ThreadLocal<Local> threadLocal = new ThreadLocal<Local>() {"], [83, "    public Local initialValue() {"], [84, "      return new Local();"], [195, "    Local local = threadLocal.get();"], [196, "    local.reset();"], [197, "    local.getBlockDecompressor().decompress("], [198, "        block.array(),"], [199, "        block.arrayOffset() + block.position(),"], [200, "        block.remaining(),"], [201, "        local.getDecompressionOutputStream());"], [202, "    return local.getDecompressionOutputStream().getByteBuffer();"]], "deleted": [[19, "import com.rapleaf.hank.compress.BlockCompressionCodec;"], [23, "import org.xerial.snappy.SnappyInputStream;"], [29, "import java.util.zip.GZIPInputStream;"], [46, "  private static class Buffers {"], [48, "    private UnsafeByteArrayOutputStream decompressionOutputStream;"], [49, "    private byte[] copyBuffer;"], [51, "    public Buffers() {"], [52, "      decompressionOutputStream = new UnsafeByteArrayOutputStream();"], [53, "      copyBuffer = new byte[IOStreamUtils.DEFAULT_BUFFER_SIZE];"], [56, "    public UnsafeByteArrayOutputStream getDecompressionOutputStream() {"], [57, "      return decompressionOutputStream;"], [60, "    public byte[] getCopyBuffer() {"], [61, "      return copyBuffer;"], [69, "  private final static ThreadLocal<Buffers> threadLocalBuffers = new ThreadLocal<Buffers>() {"], [71, "    public Buffers initialValue() {"], [72, "      return new Buffers();"], [183, "    Buffers buffers = threadLocalBuffers.get();"], [184, "    buffers.reset();"], [185, "    // Decompress the block"], [186, "    InputStream blockInputStream ="], [187, "        new ByteArrayInputStream(block.array(), block.arrayOffset() + block.position(), block.remaining());"], [188, "    // Build an InputStream corresponding to the compression codec"], [189, "    InputStream decompressedBlockInputStream = getBlockCompressionInputStream(blockInputStream);"], [190, "    // Decompress into the specialized result buffer"], [191, "    IOStreamUtils.copy(decompressedBlockInputStream, buffers.getDecompressionOutputStream(), buffers.getCopyBuffer());"], [192, "    decompressedBlockInputStream.close();"], [193, "    return buffers.getDecompressionOutputStream().getByteBuffer();"], [194, "  }"], [195, ""], [196, "  private InputStream getBlockCompressionInputStream(InputStream blockInputStream) throws IOException {"], [197, "    switch (blockCompressionCodec) {"], [198, "      case GZIP:"], [199, "        return new GZIPInputStream(blockInputStream);"], [200, "      case SNAPPY:"], [201, "        return new SnappyInputStream(blockInputStream);"], [202, "      case SLOW_NO_COMPRESSION:"], [203, "        return new BufferedInputStream(blockInputStream);"], [204, "      default:"], [205, "        throw new RuntimeException(\"Unknown block compression codec: \" + blockCompressionCodec);"], [206, "    }"]]}, "num_lines_added": 36, "num_lines_removed": 40}