{"hash": "47eeabd70e185180cdb0690ec111e3315a4047a5", "message": "User objects now condensened to 1 IRC user = 1 object, instead of 1 IRC user = [num of channels] objects.\n\nAdded more checking to only setup the user object if it wasn't already setup\n\nUtility methods added\n\nNow load testing on QuakeNet over 11 channels totaling around 7050 users", "file_num_lines": 897, "diff_parsed": {"added": [[81, "\tprotected InputThread _inputThread = null;"], [82, "\tprotected OutputThread _outputThread = null;"], [83, "\tprotected Thread _actualInputThread;"], [84, "\tprotected Thread _actualOutputThread;"], [95, "\tprivate final Map<String, User> _users = Collections.synchronizedMap(new HashMap<String, User>());"], [109, "\tprivate final Object logLock = new Object();"], [986, "\t\t\t\tChannel chan = getChannel(channel);"], [993, "\t\t\t\tUser usr = getUser(sourceNick);"], [994, "\t\t\t\t//Only setup if nessesary"], [995, "\t\t\t\tif (usr.getHostmask() == null) {"], [996, "\t\t\t\t\tusr.setLogin(sourceLogin);"], [997, "\t\t\t\t\tusr.setHostmask(sourceHostname);"], [998, "\t\t\t\t}"], [999, "\t\t\t\tchan.addUser(usr);"], [1000, ""], [1006, "\t\t\t\telse"], [1007, "\t\t\t\t\t//Just remove the user from memory"], [1008, "\t\t\t\t\tgetChannel(target).removeUser(sourceNick);"], [1033, "\t\t\t\tremoveUser(recipient);"], [1041, "\t\t\t} else if (command.equals(\"TOPIC\")) {"], [1043, "\t\t\t\tString topic = line.substring(line.indexOf(\" :\") + 2);"], [1044, "\t\t\t\tlong currentTime = System.currentTimeMillis();"], [1045, "\t\t\t\tChannel chan = getChannel(target);"], [1046, "\t\t\t\tchan.setTopic(topic);"], [1047, "\t\t\t\tchan.setTopicSetter(sourceNick);"], [1048, "\t\t\t\tchan.setTopicTimestamp(currentTime);"], [1049, ""], [1050, "\t\t\t\tonTopic(target, topic, sourceNick, currentTime, true);"], [1051, "\t\t\t} else if (command.equals(\"INVITE\"))"], [1176, "\t\t\t\tUser curUser = getUser(nick);"], [1177, "\t\t\t\tcurUser.setOp(chan.getName(), nick.contains(\"@\"));"], [1178, "\t\t\t\tcurUser.setVoice(chan.getName(), nick.contains(\"+\"));"], [1190, "\t\t\tChannel chan = getChannel(parsed[1]);"], [1191, ""], [1192, "\t\t\tUser curUser = getUser(parsed[5]);"], [1193, "\t\t\t//Only setup when needed"], [1194, "\t\t\tif (Utils.isBlank(curUser.getLogin())) {"], [1195, "\t\t\t\tcurUser.setLogin(parsed[2]);"], [1196, "\t\t\t\tcurUser.setIdentified(parsed[2].startsWith(\"~\"));"], [1197, "\t\t\t\tcurUser.setHostmask(parsed[3]);"], [1198, "\t\t\t\tcurUser.setServer(parsed[4]);"], [1199, "\t\t\t\tcurUser.setNick(parsed[5]);"], [1200, "\t\t\t\tcurUser.parseStatus(chan.getName(), parsed[6]);"], [1201, "\t\t\t\tcurUser.setHops(Integer.parseInt(parsed[7].substring(1)));"], [1202, "\t\t\t\tcurUser.setRealname(parsed[8]);"], [1203, "\t\t\t}"], [1204, "\t\t\t//Add to channels memory"], [1205, "\t\t\tchan.addUser(curUser);"], [1206, ""], [1212, "\t\t\tonUserList(channel, getUsers(channel));"], [1515, "\t\t\tUser user = getUser(sourceNick);"], [1526, "\t\t\t\t\t\tuser.setOp(channel, true);"], [1529, "\t\t\t\t\t\tuser.setOp(channel, false);"], [1535, "\t\t\t\t\t\tuser.setVoice(channel, true);"], [1538, "\t\t\t\t\t\tuser.setVoice(channel, false);"], [2774, "\t\treturn _users.values();"], [2775, "\t}"], [2776, ""], [2777, "\tpublic User getUser(String nick) {"], [2778, "\t\tUser usr = _users.get(nick);"], [2779, "\t\tif (usr == null) {"], [2780, "\t\t\t//User does not exist, create one"], [2781, "\t\t\tusr = new User(nick);"], [2782, "\t\t\tsynchronized (_users) {"], [2783, "\t\t\t\t_users.put(nick, usr);"], [2784, "\t\t\t}"], [2785, "\t\t}"], [2786, "\t\treturn usr;"], [2844, "\t\tsynchronized (_users) {"], [2845, "\t\t\t_users.remove(nick);"], [2853, "\t\tsynchronized (_users) {"], [2854, "\t\t\tSystem.err.println(\"Renaming user \"+oldNick+\" to \"+newNick);"], [2855, "\t\t\tUser removed = _users.remove(oldNick);"], [2856, "\t\t\tremoved.setNick(newNick);"], [2857, "\t\t\t_users.put(newNick, removed);"], [2901, ""], [2902, "\tpublic Channel getChannel(String name) {"], [2903, "\t\tChannel chan = _channels.get(name);"], [2904, "\t\tif (chan == null) {"], [2905, "\t\t\t//User does not exist, create one"], [2906, "\t\t\tchan = new Channel(name);"], [2907, "\t\t\tsynchronized (_users) {"], [2908, "\t\t\t\t_channels.put(name, chan);"], [2909, "\t\t\t}"], [2910, "\t\t}"], [2911, "\t\treturn chan;"], [2912, "\t}"]], "deleted": [[81, "\tprivate InputThread _inputThread = null;"], [82, "\tprivate OutputThread _outputThread = null;"], [83, "\tprivate Thread _actualInputThread;"], [84, "\tprivate Thread _actualOutputThread;"], [108, "\tprivate final Object logLock = null;"], [987, "\t\t\t\t\t_channels.put(channel, new Channel(channel));"], [992, "\t\t\t\tUser usr = _channels.get(channel).getUser(sourceNick);"], [993, "\t\t\t\tusr.setLogin(sourceLogin);"], [994, "\t\t\t\tusr.setHostmask(sourceHostname);"], [998, "\t\t\t\tremoveUser(target, sourceNick);"], [1025, "\t\t\t\tremoveUser(target, recipient);"], [1033, "\t\t\t} else if (command.equals(\"TOPIC\"))"], [1035, "\t\t\t\tonTopic(target, line.substring(line.indexOf(\" :\") + 2), sourceNick, System.currentTimeMillis(), true);"], [1036, "\t\t\telse if (command.equals(\"INVITE\"))"], [1161, "\t\t\t\tUser curUser = chan.getUser(nick);"], [1162, "\t\t\t\tcurUser.setOp(nick.contains(\"@\"));"], [1163, "\t\t\t\tcurUser.setVoice(nick.contains(\"+\"));"], [1175, "\t\t\tChannel chan = _channels.get(parsed[1]);"], [1176, ""], [1177, "\t\t\tUser curUser = chan.getUser(parsed[5]);"], [1178, "\t\t\tcurUser.setLogin(parsed[2]);"], [1179, "\t\t\tcurUser.setIdentified(parsed[2].startsWith(\"~\"));"], [1180, "\t\t\tcurUser.setHostmask(parsed[3]);"], [1181, "\t\t\tcurUser.setServer(parsed[4]);"], [1182, "\t\t\tcurUser.setNick(parsed[5]);"], [1183, "\t\t\tcurUser.parseStatus(parsed[6]);"], [1184, "\t\t\tcurUser.setHops(Integer.parseInt(parsed[7].substring(1)));"], [1185, "\t\t\tcurUser.setRealname(parsed[8]);"], [1191, "\t\t\tonUserList(channel, this.getUsers(channel));"], [1494, "\t\t\tChannel channelInfo = _channels.get(channel);"], [1495, "\t\t\t//Get the user or create a dummy object to prevent NPE's"], [1496, "\t\t\tUser user = channelInfo.getUser(sourceNick);"], [1507, "\t\t\t\t\t\tuser.setOp(true);"], [1510, "\t\t\t\t\t\tuser.setOp(false);"], [1516, "\t\t\t\t\t\tuser.setVoice(true);"], [1519, "\t\t\t\t\t\tuser.setVoice(false);"], [2755, "\t\treturn _channels.get(channel).getAllUsers();"], [2810, "\t * Remove a user from the specified channel in our memory."], [2811, "\t */"], [2812, "\tprivate void removeUser(String channel, String nick) {"], [2813, "\t\tsynchronized (_channels) {"], [2814, "\t\t\t_channels.get(channel.toLowerCase()).removeUser(nick);"], [2815, "\t\t}"], [2816, "\t}"], [2817, ""], [2818, "\t/**"], [2822, "\t\tsynchronized (_channels) {"], [2823, "\t\t\tfor (Channel curChannel : _channels.values())"], [2824, "\t\t\t\t//Can blindly call remove user since checking is going to be done anyway"], [2825, "\t\t\t\tcurChannel.removeUser(nick);"], [2833, "\t\tsynchronized (_channels) {"], [2834, "\t\t\tfor (Channel curChannel : _channels.values())"], [2835, "\t\t\t\tcurChannel.renameUser(oldNick, newNick);"]]}, "num_lines_added": 87, "num_lines_removed": 53}