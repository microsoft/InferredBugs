{"hash": "2bb411d97a526e81157887a8173ed2f6734dc8b5", "message": "Finished implementation of gzip and base64gzip active scan", "file_num_lines": 1227, "diff_parsed": {"added": [[807, "\t\tint magicPos = helpers.indexOf(insertionPointBaseValue, serializeMagic, false, 0, insertionPointBaseValue.length);"], [808, "\t\tint magicPosBase64 = helpers.indexOf(insertionPointBaseValue, base64Magic, false, 0, insertionPointBaseValue.length);"], [809, "\t\tint magicPosAsciiHex = helpers.indexOf(insertionPointBaseValue, asciiHexMagic, false, 0, insertionPointBaseValue.length);"], [810, "\t\tint magicPosBase64Gzip = helpers.indexOf(insertionPointBaseValue, base64GzipMagic, false, 0, insertionPointBaseValue.length);"], [811, "        int magicPosGzip = helpers.indexOf(insertionPointBaseValue, gzipMagic, false, 0, insertionPointBaseValue.length);"], [812, ""], [844, ""], [878, ""], [892, "    \t}"], [893, "        else { //Check for full body insertion point now"], [894, "            // Full body insertion point"], [895, "            byte[] request = baseRequestResponse.getRequest();"], [896, "            IRequestInfo requestInfo = helpers.analyzeRequest(request);"], [897, "            int bodyOffset = requestInfo.getBodyOffset();"], [898, "            magicPos = helpers.indexOf(request, serializeMagic, false, 0, request.length);"], [899, "            magicPosBase64 = helpers.indexOf(request, base64Magic, false, 0, request.length);"], [900, "            magicPosAsciiHex = helpers.indexOf(request, asciiHexMagic, false, 0, request.length);"], [901, "            magicPosBase64Gzip = helpers.indexOf(request, base64GzipMagic, false, 0, request.length);"], [902, "            magicPosGzip = helpers.indexOf(request, gzipMagic, false, 0, request.length);"], [903, ""], [904, "            if((magicPos > -1 && magicPos == bodyOffset) || (magicPosBase64 > -1 && magicPosBase64 == bodyOffset) || (magicPosAsciiHex > -1 && magicPosAsciiHex == bodyOffset) || (magicPosBase64Gzip > -1 && magicPosBase64Gzip == bodyOffset) || (magicPosGzip > -1 && magicPosGzip == bodyOffset)) {"], [905, ""], [906, "               List<String> headers = requestInfo.getHeaders();"], [907, ""], [908, "               Set<String> payloadKeys = payloads.keySet();"], [909, "               Iterator<String> iter = payloadKeys.iterator();"], [910, "               String currentKey;"], [911, "               while (iter.hasNext()) {"], [912, ""], [913, "                   currentKey = iter.next();"], [914, ""], [915, "                   byte[] newBody = null;"], [916, "                   if(magicPos > -1)    {"], [917, "                       // Put directly the payload"], [918, "                       newBody = ArrayUtils.addAll(Arrays.copyOfRange(request, bodyOffset, magicPos),payloads.get(currentKey));"], [919, "                   } else if(magicPosBase64 > -1) {"], [920, "                       // Encode the payload in Base64"], [921, "                       newBody = ArrayUtils.addAll(Arrays.copyOfRange(request, bodyOffset, magicPosBase64),Base64.encodeBase64URLSafe(payloads.get(currentKey)));"], [922, "                   } else if(magicPosAsciiHex > -1) {"], [923, "                       // Encode the payload in Ascii HEX"], [924, "                       newBody = ArrayUtils.addAll(Arrays.copyOfRange(request, bodyOffset, magicPosAsciiHex),Hex.encodeHexString(payloads.get(currentKey)).getBytes());"], [925, "                   } else if(magicPosBase64Gzip > -1) {"], [926, "                        // Encode/compress the payload in Gzip and Base64"], [927, "                        newBody = ArrayUtils.addAll(Arrays.copyOfRange(request, bodyOffset, magicPosBase64Gzip),Base64.encodeBase64(gzipData(payloads.get(currentKey))));"], [928, "                      } else {"], [929, "                          // Encode/compress the payload with Gzip"], [930, "                          newBody = ArrayUtils.addAll(Arrays.copyOfRange(request, bodyOffset, magicPosGzip),gzipData(payloads.get(currentKey)));"], [931, "                      }"], [932, ""], [933, "                   byte[] newRequest = helpers.buildHttpMessage(headers, newBody);"], [934, "                   long startTime = System.nanoTime();"], [935, "                   IHttpRequestResponse checkRequestResponse = callbacks.makeHttpRequest(baseRequestResponse.getHttpService(), newRequest);"], [936, "                   long endTime = System.nanoTime();"], [937, "                   long duration = (long)((((float)(endTime - startTime))) / 1000000000L);  //divide by 1000000 to get milliseconds."], [938, ""], [939, "                   if(((int)duration) >= 10){"], [940, ""], [941, "                       // Vulnerability founded"], [942, ""], [943, "                       List<int[]> requestMarkers = new ArrayList<int[]>();"], [944, ""], [945, "                       int markerStartPos = 0;"], [946, "                       String issueName = \"\";"], [947, "                       if(magicPos > -1) {"], [948, "                           markerStartPos = helpers.indexOf(newRequest, serializeMagic, false, 0, newRequest.length);"], [949, "                           issueName = activeScanIssue + currentKey;"], [950, "                       } else if(magicPosBase64 > -1) {"], [951, "                           markerStartPos = helpers.indexOf(newRequest, base64Magic, false, 0, newRequest.length);"], [952, "                           issueName = activeScanIssue + currentKey + \" (encoded in Base64)\";"], [953, "                       } else if (magicPosAsciiHex > -1) {"], [954, "                           markerStartPos = helpers.indexOf(newRequest, asciiHexMagic, false, 0, newRequest.length);"], [955, "                           issueName = activeScanIssue + currentKey + \" (encoded in Ascii HEX)\";"], [956, "                       } else if (magicPosBase64Gzip > -1) {"], [957, "                           markerStartPos = helpers.indexOf(newRequest, base64GzipMagic, false, 0, newRequest.length);"], [958, "                           issueName = activeScanIssue + currentKey + \" (encoded in Base64 and Gzipped)\";"], [959, "                       } else {"], [960, "                           markerStartPos = helpers.indexOf(newRequest, gzipMagic, false, 0, newRequest.length);"], [961, "                           issueName = activeScanIssue + currentKey + \" (encoded/compressed with Gzip)\";"], [962, "                       }"], [963, "                       requestMarkers.add(new int[]{markerStartPos,newRequest.length});"], [964, ""], [965, "                          issues.add(new CustomScanIssue("], [966, "                                  baseRequestResponse.getHttpService(),"], [967, "                                  helpers.analyzeRequest(baseRequestResponse).getUrl(),"], [968, "                                  new IHttpRequestResponse[] { callbacks.applyMarkers(checkRequestResponse, requestMarkers, new ArrayList<int[]>()) },"], [969, "                                  issueName,"], [970, "                                  activeScanSeverity,"], [971, "                                  activeScanConfidence,"], [972, "                                  activeScanIssueDetail + currentKey + \".\","], [973, "                                  activeScanRemediationDetail));"], [974, ""], [975, "                   }"], [976, ""], [977, "               }"], [978, ""], [979, "            }"], [980, ""], [981, "        }"]], "deleted": [[804, "    \tstdout.println(insertionPoint.getBaseValue());"], [805, "    \t// Full body insertion point"], [806, "    \tbyte[] request = baseRequestResponse.getRequest();"], [807, "    \tIRequestInfo requestInfo = helpers.analyzeRequest(request);"], [808, "    \tint bodyOffset = requestInfo.getBodyOffset();"], [809, "    \tint magicPos = helpers.indexOf(request, serializeMagic, false, 0, request.length);"], [810, "    \tint magicPosBase64 = helpers.indexOf(request, base64Magic, false, 0, request.length);"], [811, "    \tint magicPosAsciiHex = helpers.indexOf(request, asciiHexMagic, false, 0, request.length);"], [812, "        int magicPosBase64Gzip = helpers.indexOf(request, base64GzipMagic, false, 0, request.length);"], [813, "        int magicPosGzip = helpers.indexOf(request, gzipMagic, false, 0, request.length);"], [814, ""], [815, "  //   \tif((magicPos > -1 && magicPos >= bodyOffset) || (magicPosBase64 > -1 && magicPosBase64 >= bodyOffset) || (magicPosAsciiHex > -1 && magicPosAsciiHex >= bodyOffset) || (magicPosBase64Gzip > -1 && magicPosBase64Gzip >= bodyOffset) || (magicPosGzip > -1 && magicPosGzip >= bodyOffset)) {"], [816, ""], [817, "  //   \t\tList<String> headers = requestInfo.getHeaders();"], [818, ""], [819, "  //   \t\tSet<String> payloadKeys = payloads.keySet();"], [820, "  //   \t\tIterator<String> iter = payloadKeys.iterator();"], [821, "  //   \t\tString currentKey;"], [822, "  //   \t\twhile (iter.hasNext()) {"], [823, ""], [824, "  //   \t\t\tcurrentKey = iter.next();"], [825, ""], [826, "  //       \t\tbyte[] newBody = null;"], [827, "  //       \t\tif(magicPos > -1)\t {"], [828, "  //       \t\t\t// Put directly the payload"], [829, "  //       \t\t\tnewBody = ArrayUtils.addAll(Arrays.copyOfRange(request, bodyOffset, magicPos),payloads.get(currentKey));"], [830, "  //       \t\t} else if(magicPosBase64 > -1) {"], [831, "  //       \t\t\t// Encode the payload in Base64"], [832, "  //       \t\t\tnewBody = ArrayUtils.addAll(Arrays.copyOfRange(request, bodyOffset, magicPosBase64),Base64.encodeBase64URLSafe(payloads.get(currentKey)));"], [833, "  //       \t\t} else if(magicPosAsciiHex > -1) {"], [834, "  //       \t\t\t// Encode the payload in Ascii HEX"], [835, "  //       \t\t\tnewBody = ArrayUtils.addAll(Arrays.copyOfRange(request, bodyOffset, magicPosAsciiHex),Hex.encodeHexString(payloads.get(currentKey)).getBytes());"], [836, "  //       \t\t} else if(magicPosBase64Gzip > -1) {"], [837, "  //                   // Encode/compress the payload in Gzip and Base64"], [838, "  //                   newBody = ArrayUtils.addAll(Arrays.copyOfRange(request, bodyOffset, magicPosBase64Gzip),helpers.urlEncode(Base64.encodeBase64(gzipData(payloads.get(currentKey)))));"], [839, "  //               } else {"], [840, "  //                   // Encode/compress the payload with Gzip"], [841, "  //                   newBody = ArrayUtils.addAll(Arrays.copyOfRange(request, bodyOffset, magicPosGzip),gzipData(payloads.get(currentKey)));"], [842, "  //               }"], [843, ""], [844, "  //       \t\tbyte[] newRequest = helpers.buildHttpMessage(headers, newBody);"], [845, ""], [846, "  //       \t\tlong startTime = System.nanoTime();"], [847, "  //       \t\tIHttpRequestResponse checkRequestResponse = callbacks.makeHttpRequest(baseRequestResponse.getHttpService(), newRequest);"], [848, "  //       \t\tlong endTime = System.nanoTime();"], [849, "  //       \t\tlong duration = (long)((((float)(endTime - startTime))) / 1000000000L);  //divide by 1000000 to get milliseconds."], [850, ""], [851, "  //       \t\tif(((int)duration) >= 10){"], [852, ""], [853, "  //       \t\t\t// Vulnerability founded"], [854, ""], [855, "  //       \t\t\tList<int[]> requestMarkers = new ArrayList<int[]>();"], [856, ""], [857, "  //       \t    \tint markerStartPos = 0;"], [858, "  //       \t    \tString issueName = \"\";"], [859, "  //       \t    \tif(magicPos > -1) {"], [860, "  //       \t    \t\tmarkerStartPos = helpers.indexOf(newRequest, serializeMagic, false, 0, newRequest.length);"], [861, "  //       \t    \t\tissueName = activeScanIssue + currentKey;"], [862, "  //       \t\t\t} else if(magicPosBase64 > -1) {"], [863, "  //       \t\t\t\tmarkerStartPos = helpers.indexOf(newRequest, base64Magic, false, 0, newRequest.length);"], [864, "  //       \t\t\t\tissueName = activeScanIssue + currentKey + \" (encoded in Base64)\";"], [865, "  //       \t\t\t} else if (magicPosAsciiHex > -1) {"], [866, "  //       \t\t\t\tmarkerStartPos = helpers.indexOf(newRequest, asciiHexMagic, false, 0, newRequest.length);"], [867, "  //       \t\t\t\tissueName = activeScanIssue + currentKey + \" (encoded in Ascii HEX)\";"], [868, "  //       \t\t\t} else if (magicPosBase64Gzip > -1) {"], [869, "  //                       markerStartPos = helpers.indexOf(newRequest, base64GzipMagic, false, 0, newRequest.length);"], [870, "  //                       issueName = activeScanIssue + currentKey + \" (encoded in Base64 and Gzipped)\";"], [871, "  //                   } else {"], [872, "  //                       markerStartPos = helpers.indexOf(newRequest, gzipMagic, false, 0, newRequest.length);"], [873, "  //                       issueName = activeScanIssue + currentKey + \" (encoded/compressed with Gzip)\";"], [874, "  //                   }"], [875, "  //       \t    \trequestMarkers.add(new int[]{markerStartPos,newRequest.length});"], [876, ""], [877, "  //                   issues.add(new CustomScanIssue("], [878, "  //                           baseRequestResponse.getHttpService(),"], [879, "  //                           helpers.analyzeRequest(baseRequestResponse).getUrl(),"], [880, "  //                           new IHttpRequestResponse[] { callbacks.applyMarkers(checkRequestResponse, requestMarkers, new ArrayList<int[]>()) },"], [881, "  //                           issueName,"], [882, "  //                           activeScanSeverity,"], [883, "  //                           activeScanConfidence,"], [884, "  //                           activeScanIssueDetail + currentKey + \".\","], [885, "  //                           activeScanRemediationDetail));"], [886, ""], [887, "  //       \t\t}"], [888, ""], [889, "  //   \t\t}"], [890, ""], [891, "\t\t// }"], [895, "\t\tmagicPos = helpers.indexOf(insertionPointBaseValue, serializeMagic, false, 0, insertionPointBaseValue.length);"], [896, "\t\tmagicPosBase64 = helpers.indexOf(insertionPointBaseValue, base64Magic, false, 0, insertionPointBaseValue.length);"], [897, "\t\tmagicPosAsciiHex = helpers.indexOf(insertionPointBaseValue, asciiHexMagic, false, 0, insertionPointBaseValue.length);"], [898, "\t\tmagicPosBase64Gzip = helpers.indexOf(insertionPointBaseValue, base64GzipMagic, false, 0, insertionPointBaseValue.length);"], [899, "        magicPosGzip = helpers.indexOf(insertionPointBaseValue, gzipMagic, false, 0, insertionPointBaseValue.length);"], [900, "stdout.println(magicPosBase64Gzip);"], [932, "        \t\t\tstdout.println(new String(newRequest));"], [933, "                    //stdout.println(new String(helpers.urlEncode(Base64.encodeBase64(gzipData(payloads.get(currentKey))))));"], [934, "                    try {"], [935, "                        stdout.println(URLEncoder.encode(new String(Base64.encodeBase64(gzipData(payloads.get(currentKey)))), \"UTF-8\"));"], [936, "                    } catch (Exception ex) {"], [937, "                        stderr.println(ex.getMessage());"], [938, "                    }"], [972, "        \t\t\tstdout.println(markerStart + \" - \" + markerEnd);"], [986, "    \t}"]]}, "num_lines_added": 98, "num_lines_removed": 103}