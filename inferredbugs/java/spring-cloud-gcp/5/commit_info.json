{"hash": "77e6f62ad25344c830ff9f5b373dc4ffadabaf09", "message": "Datastore read event (#1504)\n\nrelated #1113\r\ndatastore read and query events", "file_num_lines": 871, "diff_parsed": {"added": [[23, "import java.util.HashSet;"], [68, "import org.springframework.cloud.gcp.data.datastore.core.mapping.event.AfterFindByKeyEvent;"], [69, "import org.springframework.cloud.gcp.data.datastore.core.mapping.event.AfterQueryEvent;"], [373, "\t\tverifyBeforeAndAfterEvents(null,"], [374, "\t\t\t\tnew AfterFindByKeyEvent(Arrays.asList(this.ob1), Collections.singleton(this.key1)),"], [375, "\t\t\t\t() -> {"], [376, "\t\t\t\t\tTestEntity result = this.datastoreTemplate.findById(this.key1, TestEntity.class);"], [377, "\t\t\t\t\tassertThat(result).isEqualTo(this.ob1);"], [378, "\t\t\t\t\tassertThat(result.childEntities).contains(this.childEntity1);"], [379, "\t\t\t\t\tassertThat(this.childEntity1).isEqualTo(result.singularReference);"], [380, "\t\t\t\t\tassertThat(result.multipleReference).contains(this.childEntity1);"], [381, "\t\t\t\t}, x -> {"], [382, "\t\t\t\t});"], [388, "\t\tverifyBeforeAndAfterEvents(null, new AfterFindByKeyEvent(Collections.emptyList(), Collections.singleton(null)),"], [389, "\t\t\t\t() -> assertThat(this.datastoreTemplate.findById(createFakeKey(\"key0\"), TestEntity.class)).isNull(),"], [390, "\t\t\t\tx -> {"], [391, "\t\t\t\t});"], [396, "\t\twhen(this.datastore.fetch(eq(this.key2), eq(this.key1)))"], [399, ""], [400, "\t\tverifyBeforeAndAfterEvents(null, new AfterFindByKeyEvent(Arrays.asList(this.ob1, this.ob2), new HashSet<>(keys)),"], [401, "\t\t\t\t() -> assertThat(this.datastoreTemplate.findAllById(keys, TestEntity.class)).containsExactly(this.ob1,"], [402, "\t\t\t\t\t\tthis.ob2),"], [403, "\t\t\t\tx -> {"], [404, "\t\t\t\t});"], [414, "\t\tverifyBeforeAndAfterEvents(null,"], [415, "\t\t\t\tnew AfterFindByKeyEvent(Collections.singletonList(this.ob1), Collections.singleton(this.key1)),"], [416, "\t\t\t\t() -> {"], [417, "\t\t\t\t\tTestEntity parentEntity1 = this.datastoreTemplate.findById(this.key1, TestEntity.class);"], [418, "\t\t\t\t\tassertThat(parentEntity1).isSameAs(this.ob1);"], [419, "\t\t\t\t\tChildEntity singularReference1 = parentEntity1.singularReference;"], [420, "\t\t\t\t\tChildEntity childEntity1 = parentEntity1.childEntities.get(0);"], [421, "\t\t\t\t\tassertThat(singularReference1).isSameAs(childEntity1);"], [422, ""], [423, "\t\t\t\t\tTestEntity parentEntity2 = this.datastoreTemplate.findById(this.key1, TestEntity.class);"], [424, "\t\t\t\t\tassertThat(parentEntity2).isSameAs(this.ob1);"], [425, "\t\t\t\t\tChildEntity singularReference2 = parentEntity2.singularReference;"], [426, "\t\t\t\t\tChildEntity childEntity2 = parentEntity2.childEntities.get(0);"], [427, "\t\t\t\t\tassertThat(singularReference2).isSameAs(childEntity2);"], [428, ""], [429, "\t\t\t\t\tassertThat(childEntity1).isNotSameAs(childEntity2);"], [430, "\t\t\t\t}, x -> {"], [431, "\t\t\t\t});"], [444, "\t\tReferenceTestEntity referenceTestEntity = new ReferenceTestEntity();"], [445, ""], [447, "\t\t\t\t.thenAnswer(invocationOnMock -> referenceTestEntity);"], [449, "\t\tverifyBeforeAndAfterEvents(null,"], [450, "\t\t\t\tnew AfterFindByKeyEvent(Collections.singletonList(referenceTestEntity), Collections.singleton(this.key1)),"], [451, "\t\t\t\t() -> {"], [452, "\t\t\t\t\tReferenceTestEntity readReferenceTestEntity = this.datastoreTemplate.findById(this.key1,"], [453, "\t\t\t\t\t\t\tReferenceTestEntity.class);"], [455, "\t\t\t\t\tassertThat(readReferenceTestEntity.sibling).isSameAs(readReferenceTestEntity);"], [456, "\t\t\t\t}, x -> {"], [457, "\t\t\t\t});"], [651, "\t\tverifyBeforeAndAfterEvents(null,"], [652, "\t\t\t\tnew AfterQueryEvent(Arrays.asList(this.ob1, this.ob2), this.findAllTestEntityQuery),"], [653, "\t\t\t\t() -> assertThat(this.datastoreTemplate.findAll(TestEntity.class)).contains(this.ob1, this.ob2), x -> {"], [654, "\t\t\t\t});"], [659, "\t\tverifyBeforeAndAfterEvents(null,"], [660, "\t\t\t\tnew AfterQueryEvent(Arrays.asList(this.ob1, this.ob2), this.testEntityQuery),"], [661, "\t\t\t\t() -> assertThat(this.datastoreTemplate.query((Query<Entity>) this.testEntityQuery, TestEntity.class))"], [662, "\t\t\t\t\t\t.contains(this.ob1, this.ob2),"], [663, "\t\t\t\tx -> {"], [664, "\t\t\t\t});"], [717, "\t\t\t\tnew BeforeDeleteEvent(new Key[] { this.key2, this.key1 }, TestEntity.class,"], [719, "\t\t\t\tnew AfterDeleteEvent(new Key[] { this.key2, this.key1 }, TestEntity.class,"], [723, "\t\t\t\tx -> x.verify(this.datastore, times(1)).delete(same(this.key2), same(this.key1)));"], [867, "\t\tQuery query = builder.setFilter(filter).build();"], [868, "\t\tverifyBeforeAndAfterEvents(null, new AfterQueryEvent(Collections.emptyList(), query),"], [869, "\t\t\t\t() -> this.datastoreTemplate.queryByExample(Example.of(this.simpleTestEntity), null),"], [870, "\t\t\t\tx -> x.verify(this.datastore, times(1)).run(query));"]], "deleted": [[370, "\t\tTestEntity result = this.datastoreTemplate.findById(this.key1, TestEntity.class);"], [371, "\t\tassertThat(result).isEqualTo(this.ob1);"], [372, "\t\tassertThat(result.childEntities).contains(this.childEntity1);"], [373, "\t\tassertThat(this.childEntity1).isEqualTo(result.singularReference);"], [374, "\t\tassertThat(result.multipleReference).contains(this.childEntity1);"], [380, "\t\tassertThat(this.datastoreTemplate.findById(createFakeKey(\"key0\"), TestEntity.class)).isNull();"], [385, "\t\twhen(this.datastore.fetch(eq(this.key1), eq(this.key2)))"], [388, "\t\tassertThat(this.datastoreTemplate.findAllById(keys, TestEntity.class)).containsExactly(this.ob1, this.ob2);"], [398, "\t\tTestEntity parentEntity1 = this.datastoreTemplate.findById(this.key1, TestEntity.class);"], [399, "\t\tassertThat(parentEntity1).isSameAs(this.ob1);"], [400, "\t\tChildEntity singularReference1 = parentEntity1.singularReference;"], [401, "\t\tChildEntity childEntity1 = parentEntity1.childEntities.get(0);"], [402, "\t\tassertThat(singularReference1).isSameAs(childEntity1);"], [403, ""], [404, "\t\tTestEntity parentEntity2 = this.datastoreTemplate.findById(this.key1, TestEntity.class);"], [405, "\t\tassertThat(parentEntity2).isSameAs(this.ob1);"], [406, "\t\tChildEntity singularReference2 = parentEntity2.singularReference;"], [407, "\t\tChildEntity childEntity2 = parentEntity2.childEntities.get(0);"], [408, "\t\tassertThat(singularReference2).isSameAs(childEntity2);"], [409, ""], [410, "\t\tassertThat(childEntity1).isNotSameAs(childEntity2);"], [416, ""], [425, "\t\t\t\t.thenAnswer(invocationOnMock -> new ReferenceTestEntity());"], [427, "\t\tReferenceTestEntity readReferenceTestEntity = this.datastoreTemplate.findById(this.key1, ReferenceTestEntity.class);"], [429, "\t\tassertThat(readReferenceTestEntity.sibling).isSameAs(readReferenceTestEntity);"], [623, "\t\tthis.datastoreTemplate.findAll(TestEntity.class);"], [624, "\t\tassertThat(this.datastoreTemplate.findAll(TestEntity.class)).contains(this.ob1, this.ob2);"], [629, "\t\tassertThat(this.datastoreTemplate.query((Query<Entity>) this.testEntityQuery, TestEntity.class))"], [630, "\t\t\t\t.contains(this.ob1, this.ob2);"], [683, "\t\t\t\tnew BeforeDeleteEvent(new Key[] { this.key1, this.key2 }, TestEntity.class,"], [685, "\t\t\t\tnew AfterDeleteEvent(new Key[] { this.key1, this.key2 }, TestEntity.class,"], [689, "\t\t\t\tx -> x.verify(this.datastore, times(1)).delete(same(this.key1), same(this.key2)));"], [830, "\t\tthis.datastoreTemplate.queryByExample(Example.of(this.simpleTestEntity), null);"], [831, ""], [835, "\t\tverify(this.datastore, times(1)).run(builder.setFilter(filter).build());"]]}, "num_lines_added": 70, "num_lines_removed": 35}