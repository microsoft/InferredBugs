{"hash": "6d3d1946522e82512ebfef2e8509a832bbfbcd54", "message": "- Upload basket panel closed.", "file_num_lines": 128, "diff_parsed": {"added": [[38, "import org.zkoss.zul.Panelchildren;"], [47, "import com.jaeksoft.searchlib.web.model.FieldContentModel;"], [56, "\tprivate Panelchildren basketComponent;"], [57, ""], [60, "\t\tbasketComponent = null;"], [64, "\t\tsynchronized (this) {"], [65, "\t\t\tcheckBasketComponent();"], [66, "\t\t\treturn getCurrentDocument() != null;"], [67, "\t\t}"], [68, "\t}"], [69, ""], [70, "\tprivate void removeBasketComponent() {"], [71, "\t\tsynchronized (this) {"], [72, "\t\t\tif (basketComponent == null)"], [73, "\t\t\t\treturn;"], [74, "\t\t\tgetFellow(\"basketDocumentPanel\").removeChild(basketComponent);"], [75, "\t\t\tbasketComponent = null;"], [76, "\t\t}"], [77, "\t}"], [78, ""], [79, "\tprivate void setBasketComponent() {"], [80, "\t\tsynchronized (this) {"], [81, "\t\t\tremoveBasketComponent();"], [82, "\t\t\tBasketDocument basketDocument = getCurrentDocument();"], [83, "\t\t\tif (basketDocument == null)"], [84, "\t\t\t\treturn;"], [85, "\t\t\tbasketComponent = FieldContentModel"], [86, "\t\t\t\t\t.createIndexDocumentComponent(basketDocument"], [87, "\t\t\t\t\t\t\t.getFieldContentArray());"], [88, "\t\t\tbasketComponent.setParent(getFellow(\"basketDocumentPanel\"));"], [89, "\t\t}"], [90, "\t}"], [91, ""], [92, "\tprivate void checkBasketComponent() {"], [93, "\t\tsynchronized (this) {"], [94, "\t\t\tif (basketComponent != null)"], [95, "\t\t\t\treturn;"], [96, "\t\t\tsetBasketComponent();"], [97, "\t\t}"], [101, "\t\tsynchronized (this) {"], [102, "\t\t\treturn (BasketDocument) getAttribute(ScopeAttribute.BASKET_CURRENT_DOCUMENT);"], [103, "\t\t}"], [107, "\t\tsynchronized (this) {"], [108, "\t\t\tsetAttribute(ScopeAttribute.BASKET_CURRENT_DOCUMENT, basketDocument);"], [109, "\t\t\tsetBasketComponent();"], [110, "\t\t}"], [121, "\t\tsynchronized (this) {"], [122, "\t\t\tsetCurrentDocument(null);"], [123, "\t\t\tParserSelector parserSelector = getClient().getParserSelector();"], [124, "\t\t\tParser parser = null;"], [125, "\t\t\tString contentType = media.getContentType();"], [126, "\t\t\tif (contentType != null)"], [127, "\t\t\t\tparser = parserSelector.getParserFromMimeType(contentType);"], [128, "\t\t\tif (parser == null) {"], [129, "\t\t\t\tString extension = FileUtils.getFileNameExtension(media"], [130, "\t\t\t\t\t\t.getName());"], [131, "\t\t\t\tparser = parserSelector.getParserFromExtension(extension);"], [132, "\t\t\t}"], [133, "\t\t\tif (parser == null) {"], [134, "\t\t\t\tMessagebox.show(\"No parser found for that document type (\""], [135, "\t\t\t\t\t\t+ contentType + \" - \" + media.getName() + ')');"], [136, "\t\t\t\treturn;"], [137, "\t\t\t}"], [139, "\t\t\tBasketDocument basketDocument = parser.getBasketDocument();"], [140, "\t\t\tbasketDocument.addIfNoEmpty(\"filename\", media.getName());"], [141, "\t\t\tbasketDocument.addIfNoEmpty(\"content_type\", contentType);"], [154, "\t\t\tsetCurrentDocument(basketDocument);"], [159, "\tpublic void onSave() throws SearchLibException, InterruptedException {"], [160, "\t\tsynchronized (this) {"], [161, "\t\t\tBasketDocument basketDocument = getCurrentDocument();"], [162, "\t\t\tif (basketDocument == null)"], [163, "\t\t\t\treturn;"], [164, "\t\t\tgetClient().getBasketCache().put(basketDocument, basketDocument);"], [165, "\t\t\tsetCurrentDocument(null);"], [166, "\t\t\tMessagebox.show(\"Document added with id \""], [167, "\t\t\t\t\t+ Integer.toString(basketDocument.getKey()),"], [168, "\t\t\t\t\t\"Jaeksoft SearchServer\", Messagebox.OK,"], [169, "\t\t\t\t\torg.zkoss.zul.Messagebox.INFORMATION);"], [170, "\t\t\treloadDesktop();"], [171, "\t\t}"]], "deleted": [[37, "import org.zkoss.zk.ui.event.Event;"], [60, "\t\treturn getCurrentDocument() != null;"], [64, "\t\treturn (BasketDocument) getAttribute(ScopeAttribute.BASKET_CURRENT_DOCUMENT);"], [68, "\t\tsetAttribute(ScopeAttribute.BASKET_CURRENT_DOCUMENT, basketDocument);"], [79, "\t\tsetCurrentDocument(null);"], [80, "\t\tParserSelector parserSelector = getClient().getParserSelector();"], [81, "\t\tParser parser = null;"], [82, "\t\tString contentType = media.getContentType();"], [83, "\t\tif (contentType != null)"], [84, "\t\t\tparser = parserSelector.getParserFromMimeType(contentType);"], [85, "\t\tif (parser == null) {"], [86, "\t\t\tString extension = FileUtils.getFileNameExtension(media.getName());"], [87, "\t\t\tparser = parserSelector.getParserFromExtension(extension);"], [88, "\t\t}"], [89, "\t\tif (parser == null) {"], [90, "\t\t\tMessagebox.show(\"No parser found for that document type (\""], [91, "\t\t\t\t\t+ contentType + \" - \" + media.getName() + ')');"], [92, "\t\t\treturn;"], [93, "\t\t}"], [95, "\t\tBasketDocument basketDocument = parser.getBasketDocument();"], [96, "\t\tsetCurrentDocument(basketDocument);"], [97, "\t\tbasketDocument.addIfNoEmpty(\"filename\", media.getName());"], [98, "\t\tbasketDocument.addIfNoEmpty(\"content_type\", contentType);"], [100, "\t\tsynchronized (this) {"], [116, "\tpublic void onPaging(Event event) {"], [117, "\t\tSystem.out.println(event);"]]}, "num_lines_added": 80, "num_lines_removed": 26}