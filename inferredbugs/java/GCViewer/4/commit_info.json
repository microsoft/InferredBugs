{"hash": "a374f6f63f18a2cadf487852bb559e5601eb712e", "message": "parse complete exclusive event (#73)", "file_num_lines": 186, "diff_parsed": {"added": [[34, "    private static final String GC_END = \"gc-end\";"], [37, "    private static Logger LOG = Logger.getLogger(DataReaderIBM_J9_R27.class.getName());"], [62, "                            currentGcEvent = handleExclusiveStart(startElement);"], [67, "                        case GC_END:"], [68, "                            handleGcEnd(eventReader, currentGcEvent);"], [69, "                            break;"], [71, "                            handleExclusiveEnd(startElement, currentGcEvent);"], [87, "    private GCEvent handleExclusiveStart(StartElement startElement) {"], [99, "    private void handleExclusiveEnd(StartElement startElement, GCEvent event) {"], [100, "        event.setPause(NumberParser.parseDouble(getAttributeValue(startElement, \"durationms\")) / 1000);"], [101, "    }"], [102, ""], [117, "                    setTotalAndPreUsed(event, startEl);"], [118, "                }"], [119, "                else if (startEl.getName().getLocalPart().equals(\"mem\")) {"], [120, "                    switch (getAttributeValue(startEl, \"type\")) {"], [121, "                        case \"nursery\":"], [122, "                            GCEvent young = new GCEvent();"], [123, "                            young.setType(Type.lookup(\"nursery\"));"], [124, "                            setTotalAndPreUsed(young, startEl);"], [125, "                            event.add(young);"], [126, "                            break;"], [127, "                        case \"tenure\":"], [128, "                            GCEvent tenured = new GCEvent();"], [129, "                            tenured.setType(Type.lookup(\"tenure\"));"], [130, "                            setTotalAndPreUsed(tenured, startEl);"], [131, "                            event.add(tenured);"], [132, "                            break;"], [133, "                        // all other are ignored"], [134, "                    }"], [135, "                }"], [136, "            }"], [137, "            else if (xmlEvent.isEndElement()) {"], [138, "                EndElement endElement = xmlEvent.asEndElement();"], [139, "                currentElementName = endElement.getName().getLocalPart();"], [140, "            }"], [141, "        }"], [142, "    }"], [143, ""], [144, "    private void handleGcEnd(XMLEventReader eventReader, GCEvent event) throws XMLStreamException {"], [145, "        String currentElementName = \"\";"], [146, "        while (eventReader.hasNext() && !currentElementName.equals(GC_END)) {"], [147, ""], [148, "            XMLEvent xmlEvent = eventReader.nextEvent();"], [149, "            if (xmlEvent.isStartElement()) {"], [150, "                StartElement startEl = xmlEvent.asStartElement();"], [151, "                if (startEl.getName().getLocalPart().equals(\"mem-info\")) {"], [152, "                    setPostUsed(event, startEl);"], [157, "                            setPostUsed(event.getYoung(), startEl);"], [158, "                            break;"], [159, "                        case \"tenure\":"], [160, "                            setPostUsed(event.getTenured(), startEl);"], [162, "                        // all other are ignored"], [173, "    private void setTotalAndPreUsed(GCEvent event, StartElement startEl) {"], [174, "        long total = NumberParser.parseInt(getAttributeValue(startEl, \"total\"));"], [175, "        event.setTotal(toKiloBytes(total));"], [176, "        event.setPreUsed(toKiloBytes(total - NumberParser.parseInt(getAttributeValue(startEl, \"free\"))));"], [177, "    }"], [178, ""], [179, "    private void setPostUsed(GCEvent event, StartElement startEl) {"], [180, "        long total = NumberParser.parseInt(getAttributeValue(startEl, \"total\"));"], [181, "        event.setPostUsed(toKiloBytes(total - NumberParser.parseInt(getAttributeValue(startEl, \"free\"))));"], [182, "    }"], [183, ""], [213, ""], [214, "    private int toKiloBytes(long bytes) {"], [215, "        return (int)Math.rint(bytes / (double)1024);"], [216, "    }"]], "deleted": [[36, "    private static Logger LOG = Logger.getLogger(DataReaderIBM_J9_5_0.class.getName());"], [61, "                            currentGcEvent = handleExclusiveStart(eventReader, startElement);"], [66, "//                        case \"gc-end\":"], [67, "//                            handleGcEnd(eventReader);"], [68, "//                            break;"], [70, "                            // TODO read pause time"], [86, "    private GCEvent handleExclusiveStart(XMLEventReader eventReader, StartElement startElement) {"], [112, "                    event.setTotal(NumberParser.parseInt(getAttributeValue(startEl, \"total\")) / 1024);"], [113, "                    event.setPreUsed(event.getTotal() - (NumberParser.parseInt(getAttributeValue(startEl, \"free\")) / 1024));"], [118, "                            // TODO read young"]]}, "num_lines_added": 68, "num_lines_removed": 10}