{"hash": "48476ae587fa91f04eacf7486b6c7cf4bb988977", "message": "Standardize the startup class structure (#243)", "file_num_lines": 124, "diff_parsed": {"added": [[21, "import ch.qos.logback.core.joran.spi.JoranException;"], [24, "import java.io.IOException;"], [45, ""], [46, "    private static InternalLogger log;"], [47, "    private static Properties properties = null;"], [48, "    private static CommandLine commandLine = null;"], [55, ""], [57, "            NamesrvController controller = createNamesrvController(args);"], [58, "            start(controller);"], [59, "            String tip = \"The Name Server boot success. serializeType=\" + RemotingCommand.getSerializeTypeConfigInThisServer();"], [60, "            log.info(tip);"], [61, "            System.out.printf(\"%s%n\", tip);"], [62, "            return controller;"], [63, "        } catch (Throwable e) {"], [64, "            e.printStackTrace();"], [65, "            System.exit(-1);"], [66, "        }"], [68, "        return null;"], [69, "    }"], [71, "    public static NamesrvController createNamesrvController(String[] args) throws IOException, JoranException {"], [72, "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));"], [73, "        //PackageConflictDetect.detectFastjson();"], [75, "        Options options = ServerUtil.buildCommandlineOptions(new Options());"], [76, "        commandLine = ServerUtil.parseCmdLine(\"mqnamesrv\", args, buildCommandlineOptions(options), new PosixParser());"], [77, "        if (null == commandLine) {"], [78, "            System.exit(-1);"], [79, "            return null;"], [80, "        }"], [81, ""], [82, "        final NamesrvConfig namesrvConfig = new NamesrvConfig();"], [83, "        final NettyServerConfig nettyServerConfig = new NettyServerConfig();"], [84, "        nettyServerConfig.setListenPort(9876);"], [85, "        if (commandLine.hasOption('c')) {"], [86, "            String file = commandLine.getOptionValue('c');"], [87, "            if (file != null) {"], [88, "                InputStream in = new BufferedInputStream(new FileInputStream(file));"], [89, "                properties = new Properties();"], [90, "                properties.load(in);"], [91, "                MixAll.properties2Object(properties, namesrvConfig);"], [92, "                MixAll.properties2Object(properties, nettyServerConfig);"], [93, ""], [94, "                namesrvConfig.setConfigStorePath(file);"], [95, ""], [96, "                System.out.printf(\"load config properties file OK, %s%n\", file);"], [97, "                in.close();"], [99, "        }"], [100, ""], [101, "        if (commandLine.hasOption('p')) {"], [102, "            MixAll.printObjectProperties(null, namesrvConfig);"], [103, "            MixAll.printObjectProperties(null, nettyServerConfig);"], [104, "            System.exit(0);"], [105, "        }"], [107, "        MixAll.properties2Object(ServerUtil.commandLine2Properties(commandLine), namesrvConfig);"], [109, "        if (null == namesrvConfig.getRocketmqHome()) {"], [110, "            System.out.printf(\"Please set the %s variable in your environment to match the location of the RocketMQ installation%n\", MixAll.ROCKETMQ_HOME_ENV);"], [111, "            System.exit(-2);"], [112, "        }"], [114, "        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();"], [115, "        JoranConfigurator configurator = new JoranConfigurator();"], [116, "        configurator.setContext(lc);"], [117, "        lc.reset();"], [118, "        configurator.doConfigure(namesrvConfig.getRocketmqHome() + \"/conf/logback_namesrv.xml\");"], [120, "        log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);"], [122, "        MixAll.printObjectProperties(log, namesrvConfig);"], [123, "        MixAll.printObjectProperties(log, nettyServerConfig);"], [125, "        final NamesrvController controller = new NamesrvController(namesrvConfig, nettyServerConfig);"], [127, "        // remember all configs to prevent discard"], [128, "        controller.getConfiguration().registerConfig(properties);"], [130, "        return controller;"], [131, "    }"], [133, "    public static NamesrvController start(final NamesrvController controller) throws Exception {"], [135, "        if (null == controller) {"], [136, "            throw new IllegalArgumentException(\"NamesrvController is null\");"], [137, "        }"], [139, "        boolean initResult = controller.initialize();"], [140, "        if (!initResult) {"], [141, "            controller.shutdown();"], [142, "            System.exit(-3);"], [145, "        Runtime.getRuntime().addShutdownHook(new ShutdownHookThread(log, new Callable<Void>() {"], [146, "            @Override"], [147, "            public Void call() throws Exception {"], [148, "                controller.shutdown();"], [149, "                return null;"], [150, "            }"], [151, "        }));"], [152, ""], [153, "        controller.start();"], [154, ""], [155, "        return controller;"], [156, "    }"], [157, ""], [158, "    public static void shutdown(final NamesrvController controller) {"], [159, "        controller.shutdown();"]], "deleted": [[43, "    public static Properties properties = null;"], [44, "    public static CommandLine commandLine = null;"], [51, "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));"], [53, "            //PackageConflictDetect.detectFastjson();"], [55, "            Options options = ServerUtil.buildCommandlineOptions(new Options());"], [56, "            commandLine = ServerUtil.parseCmdLine(\"mqnamesrv\", args, buildCommandlineOptions(options), new PosixParser());"], [57, "            if (null == commandLine) {"], [58, "                System.exit(-1);"], [59, "                return null;"], [60, "            }"], [62, "            final NamesrvConfig namesrvConfig = new NamesrvConfig();"], [63, "            final NettyServerConfig nettyServerConfig = new NettyServerConfig();"], [64, "            nettyServerConfig.setListenPort(9876);"], [65, "            if (commandLine.hasOption('c')) {"], [66, "                String file = commandLine.getOptionValue('c');"], [67, "                if (file != null) {"], [68, "                    InputStream in = new BufferedInputStream(new FileInputStream(file));"], [69, "                    properties = new Properties();"], [70, "                    properties.load(in);"], [71, "                    MixAll.properties2Object(properties, namesrvConfig);"], [72, "                    MixAll.properties2Object(properties, nettyServerConfig);"], [73, ""], [74, "                    namesrvConfig.setConfigStorePath(file);"], [75, ""], [76, "                    System.out.printf(\"load config properties file OK, %s%n\", file);"], [77, "                    in.close();"], [78, "                }"], [79, "            }"], [81, "            if (commandLine.hasOption('p')) {"], [82, "                MixAll.printObjectProperties(null, namesrvConfig);"], [83, "                MixAll.printObjectProperties(null, nettyServerConfig);"], [84, "                System.exit(0);"], [87, "            MixAll.properties2Object(ServerUtil.commandLine2Properties(commandLine), namesrvConfig);"], [89, "            if (null == namesrvConfig.getRocketmqHome()) {"], [90, "                System.out.printf(\"Please set the %s variable in your environment to match the location of the RocketMQ installation%n\", MixAll.ROCKETMQ_HOME_ENV);"], [91, "                System.exit(-2);"], [92, "            }"], [94, "            LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();"], [95, "            JoranConfigurator configurator = new JoranConfigurator();"], [96, "            configurator.setContext(lc);"], [97, "            lc.reset();"], [98, "            configurator.doConfigure(namesrvConfig.getRocketmqHome() + \"/conf/logback_namesrv.xml\");"], [99, "            final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);"], [101, "            MixAll.printObjectProperties(log, namesrvConfig);"], [102, "            MixAll.printObjectProperties(log, nettyServerConfig);"], [104, "            final NamesrvController controller = new NamesrvController(namesrvConfig, nettyServerConfig);"], [106, "            // remember all configs to prevent discard"], [107, "            controller.getConfiguration().registerConfig(properties);"], [109, "            boolean initResult = controller.initialize();"], [110, "            if (!initResult) {"], [111, "                controller.shutdown();"], [112, "                System.exit(-3);"], [113, "            }"], [115, "            Runtime.getRuntime().addShutdownHook(new ShutdownHookThread(log, new Callable<Void>() {"], [116, "                @Override"], [117, "                public Void call() throws Exception {"], [118, "                    controller.shutdown();"], [119, "                    return null;"], [120, "                }"], [121, "            }));"], [123, "            controller.start();"], [125, "            String tip = \"The Name Server boot success. serializeType=\" + RemotingCommand.getSerializeTypeConfigInThisServer();"], [126, "            log.info(tip);"], [127, "            System.out.printf(\"%s%n\", tip);"], [129, "            return controller;"], [130, "        } catch (Throwable e) {"], [131, "            e.printStackTrace();"], [132, "            System.exit(-1);"], [135, "        return null;"]]}, "num_lines_added": 93, "num_lines_removed": 69}