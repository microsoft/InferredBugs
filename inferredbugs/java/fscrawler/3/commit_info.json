{"hash": "4320948b2f3cdd5756edebe9895c4820a8938e9d", "message": "Autodetect if a local node is running before starting docker (#512)\n\nIf so we don't need to have any explicitly set `tests.cluster.host`.\r\n\r\nCloses #509.", "file_num_lines": 369, "diff_parsed": {"added": [[229, "            ElasticsearchClient elasticsearchClientTemporary = null;"], [230, "            try {"], [231, "                testClusterHost = \"localhost\";"], [232, "                // We test if we have already something running at the testClusterHost address"], [233, "                elasticsearchClientTemporary = new ElasticsearchClient(getClientBuilder("], [234, "                        new HttpHost(testClusterHost, testClusterPort), testClusterUser, testClusterPass));"], [235, "                elasticsearchClientTemporary.info();"], [236, "                staticLogger.debug(\"A node is already running locally. No need to start a Docker instance.\");"], [237, "            } catch (ConnectException e) {"], [238, "                staticLogger.debug(\"No local node running. We need to start a Docker instance.\");"], [239, "                // We start an elasticsearch Docker instance"], [240, "                Properties props = new Properties();"], [241, "                props.load(AbstractITCase.class.getResourceAsStream(\"/elasticsearch.version.properties\"));"], [242, "                container = new ElasticsearchContainer().withVersion(props.getProperty(\"version\"));"], [243, "                container.withEnv(\"ELASTIC_PASSWORD\", testClusterPass);"], [244, "                container.setWaitStrategy("], [245, "                        new HttpWaitStrategy()"], [246, "                                .forStatusCode(200)"], [247, "                                .withBasicCredentials(testClusterUser, testClusterPass)"], [248, "                                .withStartupTimeout(Duration.ofSeconds(90)));"], [249, "                container.start();"], [250, ""], [251, "                testClusterHost = container.getHost().getHostName();"], [252, "                testClusterPort = container.getFirstMappedPort();"], [253, "            } finally {"], [254, "                // We need to close the temporary client"], [255, "                if (elasticsearchClientTemporary != null) {"], [256, "                    elasticsearchClientTemporary.shutdown();"], [257, "                }"], [258, "            }"]], "deleted": [[229, "            // We start an elasticsearch Docker instance"], [230, "            Properties props = new Properties();"], [231, "            props.load(AbstractITCase.class.getResourceAsStream(\"/elasticsearch.version.properties\"));"], [232, "            container = new ElasticsearchContainer().withVersion(props.getProperty(\"version\"));"], [233, "            container.withEnv(\"ELASTIC_PASSWORD\", testClusterPass);"], [234, "            container.setWaitStrategy("], [235, "                    new HttpWaitStrategy()"], [236, "                            .forStatusCode(200)"], [237, "                            .withBasicCredentials(testClusterUser, testClusterPass)"], [238, "                            .withStartupTimeout(Duration.ofSeconds(90)));"], [239, "            container.start();"], [240, ""], [241, "            testClusterHost = container.getHost().getHostName();"], [242, "            testClusterPort = container.getFirstMappedPort();"], [247, "        if (testClusterHost == null) {"], [248, "            Thread.dumpStack();"], [249, "        }"], [250, ""]]}, "num_lines_added": 30, "num_lines_removed": 18}