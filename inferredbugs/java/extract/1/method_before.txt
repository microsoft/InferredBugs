 public CommandLine parse(final String[] args) throws ParseException, IllegalArgumentException {
		final CommandLine cmd = super.parse(args);

		final Report report = ReportFactory.createReport(cmd, ReportType.REDIS);
		ExtractionResult match = null;

		if (cmd.hasOption("reporter-status")) {
			match = ExtractionResult.get(((Number) cmd.getParsedOptionValue("reporter-status")));

			if (null == match) {
				throw new IllegalArgumentException(String.format("%s is not a valid report status.",
					cmd.getOptionValue("reporter-status")));
			}
		}

		final ProgressBar progressBar = ConsoleProgressBar.on(System.err)
			.withFormat("[:bar] :percent% :elapsed/:total ETA: :eta")
			.withTotalSteps(report.size());

		final ObjectMapper mapper = new ObjectMapper();
		final SimpleModule module = new SimpleModule();

		module.addSerializer(Report.class, new ReportSerializer(progressBar, match));
		mapper.registerModule(module);

		try (
			final JsonGenerator jsonGenerator = new JsonFactory()
				.setCodec(mapper)
				.createGenerator(System.out, JsonEncoding.UTF8)
		) {
			jsonGenerator.useDefaultPrettyPrinter();
			jsonGenerator.writeObject(report);
			jsonGenerator.writeRaw('\n');
		} catch (IOException e) {
			throw new RuntimeException("Unable to output JSON.", e);
		}

		try {
			report.close();
		} catch (IOException e) {
			throw new RuntimeException("Exception while closing report.", e);
		}

		return cmd;
	}