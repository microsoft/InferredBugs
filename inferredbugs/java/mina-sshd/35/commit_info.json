{"hash": "8bfdf38cd74ff669fcdb8ca78bd34e77decbc98e", "message": "[SSHD-218] Possible deadlock in client when getting SSH_MSG_DISCONNECT on invalid channel", "file_num_lines": 175, "diff_parsed": {"added": [[22, "import java.util.concurrent.atomic.AtomicBoolean;"], [55, "    protected volatile boolean eof;"], [56, "    protected final AtomicBoolean closing = new AtomicBoolean();"], [89, "    protected void notifyStateChanged() {"], [90, "        synchronized (lock) {"], [91, "            lock.notifyAll();"], [92, "        }"], [93, "    }"], [94, ""], [99, "        if (closing.compareAndSet(false, true)) {"], [100, "            try {"], [103, "                    doClose();"], [105, "                    notifyStateChanged();"], [108, "                    log.debug(\"Closing channel {} gracefully\", id);"], [109, "                    doClose();"], [110, "                    log.debug(\"Send SSH_MSG_CHANNEL_CLOSE on channel {}\", id);"], [111, "                    Buffer buffer = session.createBuffer(SshConstants.Message.SSH_MSG_CHANNEL_CLOSE, 0);"], [112, "                    buffer.putInt(recipient);"], [113, "                    session.writePacket(buffer).addListener(new IoFutureListener<WriteFuture>() {"], [114, "                        public void operationComplete(WriteFuture future) {"], [115, "                            if (closedByOtherSide) {"], [116, "                                log.debug(\"Message SSH_MSG_CHANNEL_CLOSE written on channel {}\", id);"], [117, "                                closeFuture.setClosed();"], [118, "                                notifyStateChanged();"], [120, "                        }"], [121, "                    });"], [123, "            } catch (IOException e) {"], [124, "                session.exceptionCaught(e);"], [125, "                closeFuture.setClosed();"], [133, "        closedByOtherSide = !closing.get();"], [134, "        if (closedByOtherSide) {"], [135, "            close(false);"], [136, "        } else {"], [137, "            close(false).setClosed();"], [138, "            notifyStateChanged();"], [146, "        if (!closing.get()) {"], [147, "            session.writePacket(buffer);"], [148, "        } else {"], [149, "            log.debug(\"Discarding output packet because channel is being closed\");"], [188, "        eof = true;"], [189, "        notifyStateChanged();"]], "deleted": [[22, "import java.io.InterruptedIOException;"], [54, "    protected boolean eof;"], [56, "    protected boolean closing;"], [93, "        try {"], [94, "            synchronized (lock) {"], [98, "                    lock.notifyAll();"], [101, "                    if (!closing) {"], [102, "                        closing = true;"], [103, "                        log.debug(\"Send SSH_MSG_CHANNEL_CLOSE on channel {}\", id);"], [104, "                        Buffer buffer = session.createBuffer(SshConstants.Message.SSH_MSG_CHANNEL_CLOSE, 0);"], [105, "                        buffer.putInt(recipient);"], [106, "                        session.writePacket(buffer).addListener(new IoFutureListener<WriteFuture>() {"], [107, "                            public void operationComplete(WriteFuture future) {"], [108, "                                synchronized (lock) {"], [109, "                                    if (closedByOtherSide) {"], [110, "                                        log.debug(\"Message SSH_MSG_CHANNEL_CLOSE written on channel {}\", id);"], [111, "                                        closeFuture.setClosed();"], [112, "                                        doClose();"], [113, "                                        lock.notifyAll();"], [114, "                                    }"], [115, "                                }"], [117, "                        });"], [118, "                    }"], [121, "        } catch (IOException e) {"], [122, "            session.exceptionCaught(e);"], [123, "            closeFuture.setClosed();"], [130, "        synchronized (lock) {"], [131, "            closedByOtherSide = !closing;"], [132, "            if (closedByOtherSide) {"], [133, "                close(false);"], [134, "            } else {"], [135, "                close(false).setClosed();"], [136, "                doClose();"], [137, "                lock.notifyAll();"], [138, "            }"], [146, "        synchronized (lock) {"], [147, "            if (!closing) {"], [148, "                session.writePacket(buffer);"], [149, "            } else {"], [150, "                log.debug(\"Discarding output packet because channel is being closed\");"], [151, "            }"], [190, "        synchronized (lock) {"], [191, "            eof = true;"], [192, "            lock.notifyAll();"], [193, "        }"]]}, "num_lines_added": 41, "num_lines_removed": 45}