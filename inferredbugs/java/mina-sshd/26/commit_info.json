{"hash": "2382d6060d6e490fe8cdba670e053f4b4bc4c710", "message": "[SSHD-220] Return a usable AuthFuture when authenticating on the client side", "file_num_lines": 514, "diff_parsed": {"added": [[69, "    /**"], [70, "     * The AuthFuture that is being used by the current auth request.  This encodes the state."], [71, "     * isSuccess -> authenticated, else if isDone -> server waiting for user auth, else authenticating."], [72, "     */"], [73, "    private volatile AuthFuture authFuture;"], [85, "        // Maintain the current auth status in the authFuture."], [86, "        authFuture = new DefaultAuthFuture(lock);"], [97, "    /**"], [98, "     * return true if/when ready for auth; false if never ready."], [99, "     * @return server is ready and waiting for auth"], [100, "     */"], [101, "    private boolean readyForAuth() {"], [102, "        // isDone indicates that the last auth finished and a new one can commence."], [103, "        while (!this.authFuture.isDone()) {"], [104, "            log.debug(\"waiting to send authentication\");"], [105, "            try {"], [106, "                this.authFuture.await();"], [107, "            } catch (InterruptedException e) {"], [108, "                log.debug(\"Unexpected interrupt\", e);"], [109, "                throw new RuntimeException(e);"], [110, "            }"], [111, "        }"], [112, "        if (this.authFuture.isSuccess()) {"], [113, "            log.debug(\"already authenticated\");"], [114, "            throw new IllegalStateException(\"Already authenticated\");"], [115, "        }"], [116, "        if (this.authFuture.getException() != null) {"], [117, "            log.debug(\"probably closed\", this.authFuture.getException());"], [118, "            return false;"], [119, "        }"], [120, "        if (!this.authFuture.isFailure()) {"], [121, "            log.debug(\"unexpected state\");"], [122, "            throw new IllegalStateException(\"Unexpected authentication state\");"], [123, "        }"], [124, "        if (this.userAuth != null) {"], [125, "            log.debug(\"authentication already in progress\");"], [126, "            throw new IllegalStateException(\"Authentication already in progress?\");"], [127, "        }"], [128, "        log.debug(\"ready to try authentication with new lock\");"], [129, "        // The new future !isDone() - i.e., in progress blocking out other waits."], [130, "        this.authFuture = new DefaultAuthFuture(lock);"], [131, "        return true;"], [132, "    }"], [133, ""], [134, "    /**"], [135, "     * execute one step in user authentication."], [136, "     * @param buffer"], [137, "     * @throws IOException"], [138, "     */"], [139, "    private void processUserAuth(Buffer buffer) throws IOException {"], [140, "        log.debug(\"processing {}\", userAuth);"], [141, "        switch (userAuth.next(buffer)) {"], [142, "            case Success:"], [143, "                log.debug(\"succeeded with {}\", userAuth);"], [144, "                this.authed = true;"], [145, "                this.username = userAuth.getUsername();"], [146, "                setState(State.Running);"], [147, "                // Will wake up anyone sitting in waitFor"], [148, "                authFuture.setAuthed(true);"], [149, "                startHeartBeat();"], [150, "                break;"], [151, "            case Failure:"], [152, "                log.debug(\"failed with {}\", userAuth);"], [153, "                this.userAuth = null;"], [154, "                setState(State.WaitForAuth);"], [155, "                // Will wake up anyone sitting in waitFor"], [156, "                this.authFuture.setAuthed(false);"], [157, "                break;"], [158, "            case Continued:"], [159, "                // Will wake up anyone sitting in waitFor"], [160, "                setState(State.UserAuth);"], [161, "                log.debug(\"continuing with {}\", userAuth);"], [162, "                break;"], [163, "        }"], [164, "    }"], [165, ""], [167, "        log.debug(\"Trying agent authentication\");"], [168, "        if (getFactoryManager().getAgentFactory() == null) {"], [169, "            throw new IllegalStateException(\"No ssh agent factory has been configured\");"], [170, "        }"], [172, "            if (readyForAuth()) {"], [173, "                userAuth = new UserAuthAgent(this, AUTHENTICATION_SERVICE, user);"], [174, "                processUserAuth(null);"], [181, "        log.debug(\"Trying password authentication\");"], [183, "            if (readyForAuth()) {"], [184, "                userAuth = new UserAuthPassword(this, AUTHENTICATION_SERVICE, user, password);"], [185, "                processUserAuth(null);"], [192, "        log.debug(\"Trying keyboard-interactive authentication\");"], [194, "            if (readyForAuth()) {"], [195, "                userAuth = new UserAuthKeyboardInteractive(this, AUTHENTICATION_SERVICE, user, password);"], [196, "                processUserAuth(null);"], [200, "   }"], [203, "        log.debug(\"Trying publickey authentication\");"], [205, "            if (readyForAuth()) {"], [206, "                userAuth = new UserAuthPublicKey(this, AUTHENTICATION_SERVICE, user, key);"], [207, "                processUserAuth(null);"], [272, "            if (!authFuture.isDone()) {"], [347, "                        authFuture.setAuthed(false);"], [368, "                            processUserAuth(buffer);"], [427, "                if (authed) { // authFuture.isSuccess()"], [430, "                if (authFuture.isFailure()) {"]], "deleted": [[69, "    private AuthFuture authFuture;"], [93, "            if (closeFuture.isClosed()) {"], [94, "                throw new IllegalStateException(\"Session is closed\");"], [95, "            }"], [96, "            if (authed) {"], [97, "                throw new IllegalStateException(\"User authentication has already been performed\");"], [98, "            }"], [99, "            if (userAuth != null) {"], [100, "                throw new IllegalStateException(\"A user authentication request is already pending\");"], [101, "            }"], [102, "            if (getFactoryManager().getAgentFactory() == null) {"], [103, "                throw new IllegalStateException(\"No ssh agent factory has been configured\");"], [104, "            }"], [105, "            waitFor(CLOSED | WAIT_AUTH, 0);"], [106, "            if (closeFuture.isClosed()) {"], [107, "                throw new IllegalStateException(\"Session is closed\");"], [108, "            }"], [109, "            authFuture = new DefaultAuthFuture(lock);"], [110, "            userAuth = new UserAuthAgent(this, AUTHENTICATION_SERVICE, user);"], [111, "            setState(State.UserAuth);"], [112, ""], [113, "            switch (userAuth.next(null)) {"], [114, "                case Success:"], [115, "                    authFuture.setAuthed(true);"], [116, "                    username = userAuth.getUsername();"], [117, "                    authed = true;"], [118, "                    setState(State.Running);"], [119, "                    break;"], [120, "                case Failure:"], [121, "                    authFuture.setAuthed(false);"], [122, "                    userAuth = null;"], [123, "                    setState(State.WaitForAuth);"], [124, "                    break;"], [125, "                case Continued:"], [126, "                    break;"], [134, "            if (closeFuture.isClosed()) {"], [135, "                throw new IllegalStateException(\"Session is closed\");"], [136, "            }"], [137, "            if (authed) {"], [138, "                throw new IllegalStateException(\"User authentication has already been performed\");"], [139, "            }"], [140, "            if (userAuth != null) {"], [141, "                throw new IllegalStateException(\"A user authentication request is already pending\");"], [142, "            }"], [143, "            waitFor(CLOSED | WAIT_AUTH, 0);"], [144, "            if (closeFuture.isClosed()) {"], [145, "                throw new IllegalStateException(\"Session is closed\");"], [146, "            }"], [147, "            authFuture = new DefaultAuthFuture(lock);"], [148, "            userAuth = new UserAuthPassword(this, AUTHENTICATION_SERVICE, user, password);"], [149, "            setState(State.UserAuth);"], [150, ""], [151, "            switch (userAuth.next(null)) {"], [152, "                case Success:"], [153, "                    authFuture.setAuthed(true);"], [154, "                    username = userAuth.getUsername();"], [155, "                    authed = true;"], [156, "                    setState(State.Running);"], [157, "                    break;"], [158, "                case Failure:"], [159, "                    authFuture.setAuthed(false);"], [160, "                    userAuth = null;"], [161, "                    setState(State.WaitForAuth);"], [162, "                    break;"], [163, "                case Continued:"], [164, "                    break;"], [172, "            if (closeFuture.isClosed()) {"], [173, "                throw new IllegalStateException(\"Session is closed\");"], [174, "            }"], [175, "            if (authed) {"], [176, "                throw new IllegalStateException(\"User authentication has already been performed\");"], [177, "            }"], [178, "            if (userAuth != null) {"], [179, "                throw new IllegalStateException(\"A user authentication request is already pending\");"], [180, "            }"], [181, "            waitFor(CLOSED | WAIT_AUTH, 0);"], [182, "            if (closeFuture.isClosed()) {"], [183, "                throw new IllegalStateException(\"Session is closed\");"], [184, "            }"], [185, "            authFuture = new DefaultAuthFuture(lock);"], [186, "            userAuth = new UserAuthKeyboardInteractive(this, AUTHENTICATION_SERVICE, user, password);"], [187, "            setState(State.UserAuth);"], [188, ""], [189, "            switch (userAuth.next(null)) {"], [190, "                case Success:"], [191, "                    authFuture.setAuthed(true);"], [192, "                    username = userAuth.getUsername();"], [193, "                    authed = true;"], [194, "                    setState(State.Running);"], [195, "                    break;"], [196, "                case Failure:"], [197, "                    authFuture.setAuthed(false);"], [198, "                    userAuth = null;"], [199, "                    setState(State.WaitForAuth);"], [200, "                    break;"], [201, "                case Continued:"], [202, "                    break;"], [206, "    }"], [210, "            if (closeFuture.isClosed()) {"], [211, "                throw new IllegalStateException(\"Session is closed\");"], [212, "            }"], [213, "            if (authed) {"], [214, "                throw new IllegalStateException(\"User authentication has already been performed\");"], [215, "            }"], [216, "            if (userAuth != null) {"], [217, "                throw new IllegalStateException(\"A user authentication request is already pending\");"], [218, "            }"], [219, "            waitFor(CLOSED | WAIT_AUTH, 0);"], [220, "            if (closeFuture.isClosed()) {"], [221, "                throw new IllegalStateException(\"Session is closed\");"], [222, "            }"], [223, "            authFuture = new DefaultAuthFuture(lock);"], [224, "            userAuth = new UserAuthPublicKey(this, AUTHENTICATION_SERVICE, user, key);"], [225, "            setState(State.UserAuth);"], [226, ""], [227, "            switch (userAuth.next(null)) {"], [228, "                case Success:"], [229, "                    authFuture.setAuthed(true);"], [230, "                    username = userAuth.getUsername();"], [231, "                    authed = true;"], [232, "                    setState(State.Running);"], [233, "                    break;"], [234, "                case Failure:"], [235, "                    authFuture.setAuthed(false);"], [236, "                    userAuth = null;"], [237, "                    setState(State.WaitForAuth);"], [238, "                    break;"], [239, "                case Continued:"], [240, "                    break;"], [305, "            if (authFuture != null && !authFuture.isDone()) {"], [400, "                            switch (userAuth.next(buffer)) {"], [401, "                                 case Success:"], [402, "                                     authFuture.setAuthed(true);"], [403, "                                     username = userAuth.getUsername();"], [404, "                                     authed = true;"], [405, "                                     setState(State.Running);"], [406, "                                     startHeartBeat();"], [407, "                                     break;"], [408, "                                 case Failure:"], [409, "                                     authFuture.setAuthed(false);"], [410, "                                     userAuth = null;"], [411, "                                     setState(State.WaitForAuth);"], [412, "                                     break;"], [413, "                                 case Continued:"], [414, "                                     break;"], [415, "                            }"], [474, "                if (authed) {"], [477, "                if (getState() == State.WaitForAuth) {"]]}, "num_lines_added": 101, "num_lines_removed": 148}