{"hash": "d7c21f79990e17fcafa7df97c5eda7122189ecce", "message": "Make sure nio2 is disabled on jdk < 7 while still supporting various commands correctly", "file_num_lines": 394, "diff_parsed": {"added": [[52, "    protected static final Logger LOG = LoggerFactory.getLogger(NativeSshFile.class);"], [57, "    protected String fileName;"], [59, "    protected File file;"], [61, "    protected String userName;"], [63, "    protected final NativeFileSystemView nativeFileSystemView;"], [600, "        map.put(Attribute.Size, getSize());"], [601, "        map.put(Attribute.IsDirectory, isDirectory());"], [602, "        map.put(Attribute.IsRegularFile, isFile());"], [603, "        map.put(Attribute.IsSymbolicLink, false);"], [604, "        map.put(Attribute.LastModifiedTime, getLastModified());"], [605, "        map.put(Attribute.LastAccessTime, getLastModified());"], [606, "        map.put(Attribute.Owner, userName);"], [607, "        map.put(Attribute.Group, userName);"], [609, "        if (isReadable()) {"], [610, "            p.add(Permission.UserRead);"], [611, "            p.add(Permission.GroupRead);"], [612, "            p.add(Permission.OthersRead);"], [614, "        if (isWritable()) {"], [615, "            p.add(Permission.UserWrite);"], [616, "            p.add(Permission.GroupWrite);"], [617, "            p.add(Permission.OthersWrite);"], [619, "        if (isExecutable()) {"], [620, "            p.add(Permission.UserExecute);"], [621, "            p.add(Permission.GroupExecute);"], [622, "            p.add(Permission.OthersExecute);"], [623, "        }"], [624, "        map.put(Attribute.Permissions, p);"], [625, "        return map;"], [628, "    public void setAttributes(Map<Attribute, Object> attributes) throws IOException {"], [629, "        if (!attributes.isEmpty()) {"], [630, "            throw new UnsupportedOperationException();"], [645, "        throw new UnsupportedOperationException();"]], "deleted": [[30, "import java.nio.file.Files;"], [31, "import java.nio.file.LinkOption;"], [32, "import java.nio.file.Path;"], [33, "import java.nio.file.attribute.FileTime;"], [34, "import java.nio.file.attribute.GroupPrincipal;"], [35, "import java.nio.file.attribute.PosixFilePermission;"], [36, "import java.nio.file.attribute.UserPrincipal;"], [37, "import java.nio.file.attribute.UserPrincipalLookupService;"], [43, "import java.util.HashSet;"], [46, "import java.util.Set;"], [62, "    private static final Logger LOG = LoggerFactory.getLogger(NativeSshFile.class);"], [67, "    private String fileName;"], [69, "    private File file;"], [71, "    private String userName;"], [73, "\tprivate final NativeFileSystemView nativeFileSystemView;"], [609, "        Map<String, Object> a = Files.readAttributes("], [610, "                file.toPath(),"], [611, "                \"unix:size,uid,owner,gid,group,isDirectory,isRegularFile,isSymbolicLink,permissions,creationTime,lastModifiedTime,lastAccessTime\","], [612, "                followLinks ? new LinkOption[0] : new LinkOption[] { LinkOption.NOFOLLOW_LINKS });"], [614, "        map.put(Attribute.Size, a.get(\"size\"));"], [615, "        map.put(Attribute.Uid, a.get(\"uid\"));"], [616, "        map.put(Attribute.Owner, ((UserPrincipal) a.get(\"owner\")).getName());"], [617, "        map.put(Attribute.Gid, a.get(\"gid\"));"], [618, "        map.put(Attribute.Group, ((GroupPrincipal) a.get(\"group\")).getName());"], [619, "        map.put(Attribute.IsDirectory, a.get(\"isDirectory\"));"], [620, "        map.put(Attribute.IsRegularFile, a.get(\"isRegularFile\"));"], [621, "        map.put(Attribute.IsSymbolicLink, a.get(\"isSymbolicLink\"));"], [622, "        map.put(Attribute.CreationTime, ((FileTime) a.get(\"creationTime\")).toMillis());"], [623, "        map.put(Attribute.LastModifiedTime, ((FileTime) a.get(\"lastModifiedTime\")).toMillis());"], [624, "        map.put(Attribute.LastAccessTime, ((FileTime) a.get(\"lastAccessTime\")).toMillis());"], [625, "        map.put(Attribute.Permissions, fromPerms((Set<PosixFilePermission>) a.get(\"permissions\")));"], [626, "        return map;"], [627, "    }"], [628, ""], [629, "    private EnumSet<Permission> fromPerms(Set<PosixFilePermission> perms) {"], [631, "        for (PosixFilePermission perm : perms) {"], [632, "            switch (perm) {"], [633, "                case OWNER_READ:     p.add(Permission.UserRead); break;"], [634, "                case OWNER_WRITE:    p.add(Permission.UserWrite); break;"], [635, "                case OWNER_EXECUTE:  p.add(Permission.UserExecute); break;"], [636, "                case GROUP_READ:     p.add(Permission.GroupRead); break;"], [637, "                case GROUP_WRITE:    p.add(Permission.GroupWrite); break;"], [638, "                case GROUP_EXECUTE:  p.add(Permission.GroupExecute); break;"], [639, "                case OTHERS_READ:    p.add(Permission.OthersRead); break;"], [640, "                case OTHERS_WRITE:   p.add(Permission.OthersWrite); break;"], [641, "                case OTHERS_EXECUTE: p.add(Permission.OthersExecute); break;"], [642, "            }"], [644, "        return p;"], [645, "    }"], [646, ""], [647, "    public void setAttributes(Map<Attribute, Object> attributes) throws IOException {"], [648, "        for (Attribute attribute : attributes.keySet()) {"], [649, "            String name = null;"], [650, "            Object value = attributes.get(attribute);"], [651, "            switch (attribute) {"], [652, "                case Uid:              name = \"unix:uid\"; break;"], [653, "                case Owner:            name = \"unix:owner\"; value = toUser((String) value); break;"], [654, "                case Gid:              name = \"unix:gid\"; break;"], [655, "                case Group:            name = \"unix:group\"; value = toGroup((String) value); break;"], [656, "                case CreationTime:     name = \"unix:creationTime\"; value = FileTime.fromMillis((Long) value); break;"], [657, "                case LastModifiedTime: name = \"unix:lastModifiedTime\"; value = FileTime.fromMillis((Long) value); break;"], [658, "                case LastAccessTime:   name = \"unix:lastAccessTime\"; value = FileTime.fromMillis((Long) value); break;"], [659, "                case Permissions:      name = \"unix:permissions\"; value = toPerms((EnumSet<Permission>) value); break;"], [660, "            }"], [661, "            if (name != null && value != null) {"], [662, "                Files.setAttribute(file.toPath(), name, value, LinkOption.NOFOLLOW_LINKS);"], [663, "            }"], [667, "    private GroupPrincipal toGroup(String name) throws IOException {"], [668, "        UserPrincipalLookupService lookupService = file.toPath().getFileSystem().getUserPrincipalLookupService();"], [669, "        return lookupService.lookupPrincipalByGroupName(name);"], [670, "    }"], [671, ""], [672, "    private UserPrincipal toUser(String name) throws IOException {"], [673, "        UserPrincipalLookupService lookupService = file.toPath().getFileSystem().getUserPrincipalLookupService();"], [674, "        return lookupService.lookupPrincipalByName(name);"], [675, "    }"], [676, ""], [677, "    private Set<PosixFilePermission> toPerms(EnumSet<Permission> perms) {"], [678, "        Set<PosixFilePermission> set = new HashSet<PosixFilePermission>();"], [679, "        for (Permission p : perms) {"], [680, "            switch (p) {"], [681, "                case UserRead:      set.add(PosixFilePermission.OWNER_READ); break;"], [682, "                case UserWrite:     set.add(PosixFilePermission.OWNER_WRITE); break;"], [683, "                case UserExecute:   set.add(PosixFilePermission.OWNER_EXECUTE); break;"], [684, "                case GroupRead:     set.add(PosixFilePermission.GROUP_READ); break;"], [685, "                case GroupWrite:    set.add(PosixFilePermission.GROUP_WRITE); break;"], [686, "                case GroupExecute:  set.add(PosixFilePermission.GROUP_EXECUTE); break;"], [687, "                case OthersRead:    set.add(PosixFilePermission.OTHERS_READ); break;"], [688, "                case OthersWrite:   set.add(PosixFilePermission.OTHERS_WRITE); break;"], [689, "                case OthersExecute: set.add(PosixFilePermission.OTHERS_EXECUTE); break;"], [690, "            }"], [692, "        return set;"], [706, "        Path path = file.toPath();"], [707, "        Path link = Files.readSymbolicLink(path);"], [708, "        return link.toString();"]]}, "num_lines_added": 32, "num_lines_removed": 95}