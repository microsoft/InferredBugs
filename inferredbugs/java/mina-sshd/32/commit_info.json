{"hash": "8bfdf38cd74ff669fcdb8ca78bd34e77decbc98e", "message": "[SSHD-218] Possible deadlock in client when getting SSH_MSG_DISCONNECT on invalid channel", "file_num_lines": 216, "diff_parsed": {"added": [[43, "    protected volatile boolean opened;"], [99, "        if (!closeFuture.isDone()) {"], [100, "            if (opened) {"], [101, "                super.close(immediately);"], [102, "            } else if (openFuture != null) {"], [103, "                if (immediately) {"], [104, "                    openFuture.setException(new SshException(\"Channel closed\"));"], [107, "                    openFuture.addListener(new SshFutureListener<OpenFuture>() {"], [108, "                        public void operationComplete(OpenFuture future) {"], [109, "                            if (future.isOpened()) {"], [110, "                                close(immediately);"], [111, "                            } else {"], [112, "                                close(true);"], [113, "                            }"], [114, "                        }"], [115, "                    });"], [117, "            } else {"], [118, "                closeFuture.setClosed();"], [119, "                notifyStateChanged();"], [201, "        this.recipient = recipient;"], [202, "        this.remoteWindow.init(rwsize, rmpsize);"], [203, "        try {"], [204, "            doOpen();"], [205, "            this.opened = true;"], [206, "            this.openFuture.setOpened();"], [207, "        } catch (Exception e) {"], [208, "            this.openFuture.setException(e);"], [209, "            this.closeFuture.setClosed();"], [210, "            this.doClose();"], [211, "        } finally {"], [212, "            notifyStateChanged();"], [221, "        this.openFailureReason = reason;"], [222, "        this.openFailureMsg = msg;"], [223, "        this.openFuture.setException(new SshException(msg));"], [224, "        this.closeFuture.setClosed();"], [225, "        this.doClose();"], [226, "        notifyStateChanged();"], [233, "        } else {"], [234, "            throw new IllegalStateException(\"No output stream for channel\");"], [243, "        } else {"], [244, "            throw new IllegalStateException(\"No error stream for channel\");"], [254, "            exitStatus = buffer.getInt();"], [255, "            notifyStateChanged();"], [258, "            exitSignal = buffer.getString();"], [259, "            notifyStateChanged();"]], "deleted": [[43, "    protected boolean opened;"], [99, "        synchronized (lock) {"], [100, "            if (!closeFuture.isDone()) {"], [101, "                if (opened) {"], [103, "                } else if (openFuture != null) {"], [104, "                    if (immediately) {"], [105, "                        openFuture.setException(new SshException(\"Channel closed\"));"], [106, "                        super.close(immediately);"], [107, "                    } else {"], [108, "                        openFuture.addListener(new SshFutureListener<OpenFuture>() {"], [109, "                            public void operationComplete(OpenFuture future) {"], [110, "                                if (future.isOpened()) {"], [111, "                                    close(immediately);"], [112, "                                } else {"], [113, "                                    close(true);"], [114, "                                }"], [115, "                            }"], [116, "                        });"], [117, "                    }"], [119, "                    closeFuture.setClosed();"], [120, "                    lock.notifyAll();"], [203, "        synchronized (lock) {"], [204, "            this.recipient = recipient;"], [205, "            this.remoteWindow.init(rwsize, rmpsize);"], [206, "            try {"], [207, "                doOpen();"], [208, "                this.opened = true;"], [209, "                this.openFuture.setOpened();"], [210, "            } catch (Exception e) {"], [211, "                this.openFuture.setException(e);"], [212, "                this.closeFuture.setClosed();"], [213, "                this.doClose();"], [214, "            } finally {"], [215, "                lock.notifyAll();"], [216, "            }"], [225, "        synchronized (lock) {"], [226, "            this.openFailureReason = reason;"], [227, "            this.openFailureMsg = msg;"], [228, "            this.openFuture.setException(new SshException(msg));"], [229, "            this.closeFuture.setClosed();"], [230, "            this.doClose();"], [231, "            lock.notifyAll();"], [232, "        }"], [256, "            synchronized (lock) {"], [257, "                exitStatus = buffer.getInt();"], [258, "                lock.notifyAll();"], [259, "            }"], [262, "            synchronized (lock) {"], [263, "                exitSignal = buffer.getString();"], [264, "                lock.notifyAll();"], [265, "            }"]]}, "num_lines_added": 45, "num_lines_removed": 51}