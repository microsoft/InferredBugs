{"hash": "7131497416522b421d7504a04f7b547149c93432", "message": "[feat]: add default application context API in $", "file_num_lines": 49, "diff_parsed": {"added": [[9, "import java.util.ArrayList;"], [14, "    public static final String DEFAULT_CONFIG_FILE = \"firefly.xml\";"], [15, "    public static final String SCAN_ELEMENT = \"component-scan\";"], [16, "    public static final String PACKAGE_ATTRIBUTE = \"base-package\";"], [17, ""], [18, "    private Config config;"], [19, ""], [20, "    private ConfigReader() {"], [21, "        config = new Config();"], [22, "    }"], [23, ""], [24, "    private static class Holder {"], [25, "        private static ConfigReader instance = new ConfigReader();"], [26, "    }"], [27, ""], [28, "    public static ConfigReader getInstance() {"], [29, "        return Holder.instance;"], [30, "    }"], [31, ""], [32, "    public Config load(String file) {"], [33, "        Dom dom = new DefaultDom();"], [34, "        Document doc = dom.getDocument(file == null ? DEFAULT_CONFIG_FILE : file);"], [35, "        Element root = dom.getRoot(doc);"], [36, "        load(root, dom);"], [37, "        return config;"], [38, "    }"], [39, ""], [40, "    public Config load(Element root, Dom dom) {"], [41, "        List<Element> scanList = dom.elements(root, SCAN_ELEMENT);"], [42, ""], [43, "        if (scanList != null) {"], [44, "            List<String> paths = new ArrayList<>();"], [45, "            for (int i = 0; i < scanList.size(); i++) {"], [46, "                Element ele = scanList.get(i);"], [47, "                String path = ele.getAttribute(PACKAGE_ATTRIBUTE);"], [48, "                if (!VerifyUtils.isEmpty(path))"], [49, "                    paths.add(path);"], [50, "            }"], [51, "            config.setPaths(paths.toArray(new String[0]));"], [52, "        } else {"], [53, "            config.setPaths(new String[0]);"], [54, "        }"], [55, "        return config;"], [56, "    }"], [57, ""], [58, "    public Config getConfig() {"], [59, "        return config;"], [60, "    }"]], "deleted": [[6, "import org.slf4j.Logger;"], [7, "import org.slf4j.LoggerFactory;"], [11, "import java.util.LinkedList;"], [15, "\tprivate static Logger log = LoggerFactory.getLogger(\"firefly-system\");"], [17, "\tpublic static final String DEFAULT_CONFIG_FILE = \"firefly.xml\";"], [18, "\tpublic static final String SCAN_ELEMENT = \"component-scan\";"], [19, "\tpublic static final String MVC_ELEMENT = \"mvc\";"], [20, "\tpublic static final String PACKAGE_ATTRIBUTE = \"base-package\";"], [21, "\tpublic static final String VIEW_PATH_ATTRIBUTE = \"view-path\";"], [22, "\tpublic static final String VIEW_ENCODING_ATTRIBUTE = \"view-encoding\";"], [23, "\tpublic static final String VIEW_TYPE_ATTRIBUTE = \"view-type\";"], [24, ""], [25, "\tprivate Config config;"], [26, ""], [27, "\tprivate ConfigReader() {"], [28, "\t\tconfig = new Config();"], [29, "\t}"], [30, ""], [31, "\tprivate static class Holder {"], [32, "\t\tprivate static ConfigReader instance = new ConfigReader();"], [33, "\t}"], [34, ""], [35, "\tpublic static ConfigReader getInstance() {"], [36, "\t\treturn Holder.instance;"], [37, "\t}"], [38, ""], [39, "\tpublic Config load(String file) {"], [40, "\t\tDom dom = new DefaultDom();"], [41, "\t\t// \u83b7\u5f97Xml\u6587\u6863\u5bf9\u8c61"], [42, "\t\tDocument doc = dom.getDocument(file == null ? DEFAULT_CONFIG_FILE : file);"], [43, "\t\t// \u5f97\u5230\u6839\u8282\u70b9"], [44, "\t\tElement root = dom.getRoot(doc);"], [45, "\t\tload(root, dom);"], [46, "\t\treturn config;"], [47, "\t}"], [48, ""], [49, "\tpublic Config load(Element root, Dom dom) {"], [50, "\t\t// \u5f97\u5230\u6240\u6709scan\u8282\u70b9"], [51, "\t\tList<Element> scanList = dom.elements(root, SCAN_ELEMENT);"], [52, ""], [53, "\t\tif (scanList != null) {"], [54, "\t\t\tList<String> paths = new LinkedList<String>();"], [55, "\t\t\tfor (int i = 0; i < scanList.size(); i++) {"], [56, "\t\t\t\tElement ele = scanList.get(i);"], [57, "\t\t\t\tString path = ele.getAttribute(PACKAGE_ATTRIBUTE);"], [58, "\t\t\t\tif (!VerifyUtils.isEmpty(path))"], [59, "\t\t\t\t\tpaths.add(path);"], [60, "\t\t\t}"], [61, "\t\t\tconfig.setPaths(paths.toArray(new String[0]));"], [62, "\t\t} else {"], [63, "\t\t\tconfig.setPaths(new String[0]);"], [64, "\t\t}"], [65, ""], [66, "\t\tElement mvc = dom.element(root, MVC_ELEMENT);"], [67, "\t\tif (mvc != null) {"], [68, "\t\t\tString viewPath = mvc.getAttribute(VIEW_PATH_ATTRIBUTE);"], [69, "\t\t\tString encoding = mvc.getAttribute(VIEW_ENCODING_ATTRIBUTE);"], [70, "\t\t\tlog.info(\"the MVC view path is {}, the encoding is {}\", viewPath, encoding);"], [71, ""], [72, "\t\t\tif (VerifyUtils.isNotEmpty(viewPath))"], [73, "\t\t\t\tconfig.setViewPath(viewPath);"], [74, "\t\t\tif (VerifyUtils.isNotEmpty(encoding))"], [75, "\t\t\t\tconfig.setEncoding(encoding);"], [76, "\t\t}"], [77, "\t\treturn config;"], [78, "\t}"], [79, ""], [80, "\tpublic Config getConfig() {"], [81, "\t\treturn config;"], [82, "\t}"]]}, "num_lines_added": 48, "num_lines_removed": 70}