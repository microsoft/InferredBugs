{"hash": "a5fac0da093923e07d12b3b04de7a22372a1f062", "message": "[fix]: get instance error", "file_num_lines": 277, "diff_parsed": {"added": [[36, "        List<BeanDefinition> annotationBeanDefs = new AnnotationBeanReader(file).loadBeanDefinitions();"], [37, "        List<BeanDefinition> xmlBeanDefs = new XmlBeanReader(file).loadBeanDefinitions();"], [38, "        if (annotationBeanDefs != null && xmlBeanDefs != null) {"], [40, "            annotationBeanDefs.addAll(xmlBeanDefs);"], [41, "            return annotationBeanDefs;"], [42, "        } else if (annotationBeanDefs != null) {"], [44, "            return annotationBeanDefs;"], [45, "        } else if (xmlBeanDefs != null) {"], [47, "            return xmlBeanDefs;"], [73, "                instance = map.get(k);"], [78, "            return null;"], [106, "                ReflectUtils.getSetterMethods(clazz, (propertyName, method) -> {"], [132, "            String typeName;"], [174, "                        .getClassLoader()"], [175, "                        .loadClass(values.getTypeName())"], [181, "            collection = (setterParamType == null ? new ArrayList<>()"], [185, "        if (collection != null) {"], [186, "            for (XmlManagedNode item : values) {"], [187, "                Object listValue = getInjectArg(item, null);"], [188, "                collection.add(listValue);"], [189, "            }"], [210, "                                                                     .loadClass(values.getTypeName())"], [211, "                                                                     .newInstance();"], [217, "            if (m != null && log.isDebugEnabled()) {"], [218, "                log.debug(\"map ret [{}]\", m.getClass().getName());"], [219, "            }"], [221, ""], [222, "        if (m != null) {"], [223, "            for (XmlManagedNode o : values.keySet()) {"], [224, "                Object k = getInjectArg(o, null);"], [225, "                Object v = getInjectArg(values.get(o), null);"], [226, "                m.put(k, v);"], [227, "            }"]], "deleted": [[10, "import com.firefly.utils.ReflectUtils.BeanMethodFilter;"], [22, " *"], [23, " * @author JJ Xu &amp; Alvin Qiu"], [39, "        List<BeanDefinition> list1 = new AnnotationBeanReader(file)"], [40, "                .loadBeanDefinitions();"], [41, "        List<BeanDefinition> list2 = new XmlBeanReader(file)"], [42, "                .loadBeanDefinitions();"], [43, "        if (list1 != null && list2 != null) {"], [45, "            list1.addAll(list2);"], [46, "            return list1;"], [47, "        } else if (list1 != null) {"], [49, "            return list1;"], [50, "        } else if (list2 != null) {"], [52, "            return list2;"], [78, "                instance = map.get(beanDef);"], [83, "            return instance;"], [111, "                ReflectUtils.getSetterMethods(clazz, (String propertyName, Method method) -> {"], [137, "            String typeName = null;"], [179, "                        .getClassLoader().loadClass(values.getTypeName())"], [185, "            collection = (setterParamType == null ? new ArrayList<Object>()"], [189, "        for (XmlManagedNode item : values) {"], [190, "            Object listValue = getInjectArg(item, null);"], [191, "            collection.add(listValue);"], [212, "                        .loadClass(values.getTypeName())"], [213, "                        .newInstance();"], [219, "            log.debug(\"map ret [{}]\", m.getClass().getName());"], [221, "        for (XmlManagedNode o : values.keySet()) {"], [222, "            Object k = getInjectArg(o, null);"], [223, "            Object v = getInjectArg(values.get(o), null);"], [224, "            m.put(k, v);"], [229, "    /**"], [230, "     * annotation injecting"], [231, "     *"], [232, "     * @param beanDef"], [233, "     * @return"], [234, "     */"]]}, "num_lines_added": 33, "num_lines_removed": 36}