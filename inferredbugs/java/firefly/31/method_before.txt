    @Test
    public void testMethodType() {
        Map<String, MethodGenericTypeBind> getterMap = ReflectUtils.getGenericBeanGetterMethods(
                new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>>() {
                }, null);
        MethodGenericTypeBind extInfo = getterMap.get("extInfo");
        ParameterizedType parameterizedType = (ParameterizedType) extInfo.getType();
        System.out.println(parameterizedType.getTypeName());
        Assert.assertThat(parameterizedType.getTypeName(), is("java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<test.utils.lang.TestGenericTypeReference$Foo>>>"));
        Assert.assertThat(extInfo.getMethodType(), is(MethodType.GETTER));

        Map<String, MethodGenericTypeBind> setterMap = ReflectUtils.getGenericBeanSetterMethods(
                new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>>() {
                }, null);
        extInfo = setterMap.get("extInfo");
        parameterizedType = (ParameterizedType) extInfo.getType();
        System.out.println(parameterizedType.getTypeName());
        Assert.assertThat(parameterizedType.getTypeName(), is("java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<test.utils.lang.TestGenericTypeReference$Foo>>>"));
        Assert.assertThat(extInfo.getMethodType(), is(MethodType.SETTER));
    }