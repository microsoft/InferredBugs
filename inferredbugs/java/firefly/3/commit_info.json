{"hash": "5a5ddb0984b30447c15a900d4601ec1d1ffaded7", "message": "add date format settings for JSON parser", "file_num_lines": 430, "diff_parsed": {"added": [[9, "import java.util.Calendar;"], [23, "import test.utils.json.DateFormatObject;"], [414, "\t@Test"], [415, "\tpublic void testDateFormat() {"], [416, "\t\tCalendar cal = Calendar.getInstance();"], [417, "\t\tcal.set(2015, Calendar.JANUARY, 25, 14, 53, 12);"], [418, ""], [419, "\t\tDateFormatObject obj = new DateFormatObject();"], [420, "\t\tSystem.out.println(obj);"], [421, "\t\tobj.init(cal);"], [422, "\t\tString json = Json.toJson(obj);"], [423, "\t\tSystem.out.println(json);"], [424, ""], [425, "\t\tDateFormatObject obj2 = Json.toObject(json, DateFormatObject.class);"], [426, "\t\tSystem.out.println(obj2);"], [427, ""], [428, "\t\tAssert.assertThat(obj2.title, is(obj.title));"], [429, ""], [430, "\t\tCalendar calDateDefault = Calendar.getInstance();"], [431, "\t\tcalDateDefault.setTime(obj2.getDateDefault());"], [432, "\t\tAssert.assertThat(calDateDefault.get(Calendar.YEAR), is(cal.get(Calendar.YEAR)));"], [433, "\t\tAssert.assertThat(calDateDefault.get(Calendar.MONTH), is(cal.get(Calendar.MONTH)));"], [434, "\t\tAssert.assertThat(calDateDefault.get(Calendar.DAY_OF_MONTH), is(cal.get(Calendar.DAY_OF_MONTH)));"], [435, "\t\tAssert.assertThat(calDateDefault.get(Calendar.HOUR_OF_DAY), is(cal.get(Calendar.HOUR_OF_DAY)));"], [436, "\t\tAssert.assertThat(calDateDefault.get(Calendar.MINUTE), is(cal.get(Calendar.MINUTE)));"], [437, "\t\tAssert.assertThat(calDateDefault.get(Calendar.SECOND), is(cal.get(Calendar.SECOND)));"], [438, ""], [439, "\t\tCalendar dateFieldDefaultFormat = Calendar.getInstance();"], [440, "\t\tdateFieldDefaultFormat.setTime(obj2.getDateFieldDefaultFormat());"], [441, "\t\tAssert.assertThat(dateFieldDefaultFormat.get(Calendar.YEAR), is(cal.get(Calendar.YEAR)));"], [442, "\t\tAssert.assertThat(dateFieldDefaultFormat.get(Calendar.MONTH), is(cal.get(Calendar.MONTH)));"], [443, "\t\tAssert.assertThat(dateFieldDefaultFormat.get(Calendar.DAY_OF_MONTH), is(cal.get(Calendar.DAY_OF_MONTH)));"], [444, "\t\tAssert.assertThat(dateFieldDefaultFormat.get(Calendar.HOUR_OF_DAY), is(cal.get(Calendar.HOUR_OF_DAY)));"], [445, "\t\tAssert.assertThat(dateFieldDefaultFormat.get(Calendar.MINUTE), is(cal.get(Calendar.MINUTE)));"], [446, "\t\tAssert.assertThat(dateFieldDefaultFormat.get(Calendar.SECOND), is(cal.get(Calendar.SECOND)));"], [447, ""], [448, "\t\tCalendar dateFieldTimestamp = Calendar.getInstance();"], [449, "\t\tdateFieldTimestamp.setTime(obj2.getDateFieldTimestamp());"], [450, "\t\tAssert.assertThat(dateFieldTimestamp.get(Calendar.YEAR), is(cal.get(Calendar.YEAR)));"], [451, "\t\tAssert.assertThat(dateFieldTimestamp.get(Calendar.MONTH), is(cal.get(Calendar.MONTH)));"], [452, "\t\tAssert.assertThat(dateFieldTimestamp.get(Calendar.DAY_OF_MONTH), is(cal.get(Calendar.DAY_OF_MONTH)));"], [453, "\t\tAssert.assertThat(dateFieldTimestamp.get(Calendar.HOUR_OF_DAY), is(cal.get(Calendar.HOUR_OF_DAY)));"], [454, "\t\tAssert.assertThat(dateFieldTimestamp.get(Calendar.MINUTE), is(cal.get(Calendar.MINUTE)));"], [455, "\t\tAssert.assertThat(dateFieldTimestamp.get(Calendar.SECOND), is(cal.get(Calendar.SECOND)));"], [456, ""], [457, "\t\tCalendar dateFieldFormat1 = Calendar.getInstance();"], [458, "\t\tdateFieldFormat1.setTime(obj2.dateFieldFormat1);"], [459, "\t\tAssert.assertThat(dateFieldFormat1.get(Calendar.YEAR), is(cal.get(Calendar.YEAR)));"], [460, "\t\tAssert.assertThat(dateFieldFormat1.get(Calendar.MONTH), is(cal.get(Calendar.MONTH)));"], [461, "\t\tAssert.assertThat(dateFieldFormat1.get(Calendar.DAY_OF_MONTH), is(cal.get(Calendar.DAY_OF_MONTH)));"], [462, "\t\tAssert.assertThat(dateFieldFormat1.get(Calendar.HOUR_OF_DAY), is(cal.get(Calendar.HOUR_OF_DAY)));"], [463, "\t\tAssert.assertThat(dateFieldFormat1.get(Calendar.MINUTE), is(cal.get(Calendar.MINUTE)));"], [464, "\t\tAssert.assertThat(dateFieldFormat1.get(Calendar.SECOND), is(cal.get(Calendar.SECOND)));"], [465, ""], [466, "\t\tCalendar cal2 = Calendar.getInstance();"], [467, "\t\tcal2.setTime(obj2.getDateMethodFormat());"], [468, "\t\tAssert.assertThat(cal2.get(Calendar.YEAR), is(cal.get(Calendar.YEAR)));"], [469, "\t\tAssert.assertThat(cal2.get(Calendar.MONTH), is(cal.get(Calendar.MONTH)));"], [470, "\t\tAssert.assertThat(cal2.get(Calendar.DAY_OF_MONTH), is(cal.get(Calendar.DAY_OF_MONTH)));"], [471, "\t\tAssert.assertThat(cal2.get(Calendar.HOUR_OF_DAY), is(0));"], [472, "\t\tAssert.assertThat(cal2.get(Calendar.MINUTE), is(0));"], [473, "\t\tAssert.assertThat(cal2.get(Calendar.SECOND), is(0));"], [474, "\t}"], [475, ""], [476, "\tpublic static void main3(String[] args) {"], [483, "\tpublic static void main4(String[] args) {"], [484, "\t\tDate date = new Date();"], [485, "\t\tSystem.out.println(date.getClass() == Date.class);"], [486, "\t\tSystem.out.println(Date.class.isAssignableFrom(java.sql.Date.class));"], [487, "\t\tSystem.out.println(date.getClass() == new Date().getClass());"], [488, "\t}"], [489, ""], [490, "\tpublic static void main(String[] args) {"], [491, "\t\tCalendar cal = Calendar.getInstance();"], [492, "\t\tcal.set(2015, Calendar.JANUARY, 25, 14, 53, 12);"], [493, "\t\tSystem.out.println(cal.get(Calendar.HOUR_OF_DAY));"], [494, ""], [495, "\t\tDateFormatObject obj = new DateFormatObject();"], [496, "\t\tSystem.out.println(obj);"], [497, "\t\tobj.init(cal);"], [498, "\t\tString json = Json.toJson(obj);"], [499, "\t\tSystem.out.println(json);"], [500, ""], [501, "\t\tDateFormatObject obj2 = Json.toObject(json, DateFormatObject.class);"], [502, "\t\tSystem.out.println(obj2);"], [503, "\t}"], [504, ""]], "deleted": [[412, "\tpublic static void main(String[] args) {"]]}, "num_lines_added": 87, "num_lines_removed": 1}