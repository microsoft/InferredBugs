{"hash": "6d9e5453d731a84f16298371f7cf719a3bd34df1", "message": "upgrade http2", "file_num_lines": 133, "diff_parsed": {"added": [[15, "import com.firefly.codec.http2.stream.HTTPConnection;"], [59, "\t\ttry {"], [60, "\t\t\tif (context == null) {"], [61, "\t\t\t\tlog.error(\"http2 client can not get the client context of session {}\", session.getSessionId());"], [62, "\t\t\t\tsession.closeNow();"], [66, "\t\t\tif (config.isSecure()) {"], [67, "\t\t\t\tif (sslContext == null) {"], [68, "\t\t\t\t\tcontext.promise.failed(new IllegalStateException(\"the ssl context is null\"));"], [69, "\t\t\t\t\treturn;"], [72, "\t\t\t\tfinal SSLEngine sslEngine = sslContext.createSSLEngine();"], [73, "\t\t\t\tnew SSLSession(sslContext, sslEngine, session, true, new SSLEventHandler() {"], [75, "\t\t\t\t\t@Override"], [76, "\t\t\t\t\tpublic void handshakeFinished(SSLSession sslSession) {"], [77, "\t\t\t\t\t\tif (context.serverSelectedProtocol.equals(\"http/1.1\")) {"], [78, "\t\t\t\t\t\t\tinitializeHTTP1ClientConnection(session, context, sslSession);"], [80, "\t\t\t\t\t\t\tinitializeHTTP2ClientConnection(session, context, sslSession);"], [82, "\t\t\t\t\t}"], [83, "\t\t\t\t}, new ALPN.ClientProvider() {"], [84, ""], [85, "\t\t\t\t\t@Override"], [86, "\t\t\t\t\tpublic List<String> protocols() {"], [87, "\t\t\t\t\t\treturn protocols;"], [88, "\t\t\t\t\t}"], [89, ""], [90, "\t\t\t\t\t@Override"], [91, "\t\t\t\t\tpublic void unsupported() {"], [94, ""], [95, "\t\t\t\t\t@Override"], [96, "\t\t\t\t\tpublic void selected(String protocol) {"], [97, "\t\t\t\t\t\ttry {"], [98, "\t\t\t\t\t\t\tif (protocols.contains(protocol)) {"], [99, "\t\t\t\t\t\t\t\tcontext.serverSelectedProtocol = protocol;"], [100, "\t\t\t\t\t\t\t} else {"], [101, "\t\t\t\t\t\t\t\tlog.info(\"The client can not negotiate protocol. server [{}] - client {}\", protocol,"], [102, "\t\t\t\t\t\t\t\t\t\tprotocols);"], [103, "\t\t\t\t\t\t\t\tsession.close();"], [104, "\t\t\t\t\t\t\t}"], [105, "\t\t\t\t\t\t} finally {"], [106, "\t\t\t\t\t\t\tALPN.remove(sslEngine);"], [107, "\t\t\t\t\t\t}"], [108, "\t\t\t\t\t}"], [109, "\t\t\t\t});"], [110, "\t\t\t} else {"], [111, "\t\t\t\t// TODO negotiate protocol without ALPN"], [112, "\t\t\t\tinitializeHTTP2ClientConnection(session, context, null);"], [113, "\t\t\t}"], [114, "\t\t} finally {"], [115, "\t\t\thttp2ClientContext.remove(session.getSessionId());"], [126, "\t\tHTTP2ClientConnection.initialize(config, session, context, sslSession);"], [133, "\t\t\tHTTPConnection httpConnection = (HTTPConnection) session.getAttachment();"], [134, "\t\t\tif (httpConnection != null && httpConnection.isOpen()) {"], [135, "\t\t\t\thttpConnection.close();"], [151, "\t\tHTTPConnection httpConnection = (HTTPConnection) session.getAttachment();"], [152, "\t\tif (httpConnection != null && httpConnection.isOpen()) {"], [153, "\t\t\thttpConnection.close();"]], "deleted": [[5, "import java.io.IOException;"], [7, "import java.util.Collections;"], [16, "import com.firefly.codec.http2.frame.PrefaceFrame;"], [17, "import com.firefly.codec.http2.frame.SettingsFrame;"], [18, "import com.firefly.codec.http2.frame.WindowUpdateFrame;"], [19, "import com.firefly.codec.http2.stream.FlowControlStrategy;"], [21, "import com.firefly.codec.http2.stream.SessionSPI;"], [28, "import com.firefly.utils.concurrent.Callback;"], [66, "\t\tif (context == null) {"], [67, "\t\t\tlog.error(\"http2 client can not get the client context of session {}\", session.getSessionId());"], [68, "\t\t\tsession.closeNow();"], [69, "\t\t\treturn;"], [70, "\t\t}"], [71, ""], [72, "\t\tif (config.isSecure()) {"], [73, "\t\t\tif (sslContext == null) {"], [74, "\t\t\t\tcontext.promise.failed(new IllegalStateException(\"the ssl context is null\"));"], [78, "\t\t\tfinal SSLEngine sslEngine = sslContext.createSSLEngine();"], [79, "\t\t\tnew SSLSession(sslContext, sslEngine, session, true, new SSLEventHandler() {"], [80, ""], [81, "\t\t\t\t@Override"], [82, "\t\t\t\tpublic void handshakeFinished(SSLSession sslSession) {"], [83, "\t\t\t\t\tif (context.serverSelectedProtocol.equals(\"http/1.1\")) {"], [84, "\t\t\t\t\t\tinitializeHTTP1ClientConnection(session, context, sslSession);"], [85, "\t\t\t\t\t} else {"], [86, "\t\t\t\t\t\tinitializeHTTP2ClientConnection(session, context, sslSession);"], [87, "\t\t\t\t\t}"], [88, "\t\t\t\t}"], [89, "\t\t\t}, new ALPN.ClientProvider() {"], [90, ""], [91, "\t\t\t\t@Override"], [92, "\t\t\t\tpublic List<String> protocols() {"], [93, "\t\t\t\t\treturn protocols;"], [96, "\t\t\t\t@Override"], [97, "\t\t\t\tpublic void unsupported() {"], [98, "\t\t\t\t\tALPN.remove(sslEngine);"], [99, "\t\t\t\t}"], [101, "\t\t\t\t@Override"], [102, "\t\t\t\tpublic void selected(String protocol) {"], [103, "\t\t\t\t\ttry {"], [104, "\t\t\t\t\t\tif (protocols.contains(protocol)) {"], [105, "\t\t\t\t\t\t\tcontext.serverSelectedProtocol = protocol;"], [107, "\t\t\t\t\t\t\tlog.info(\"The client can not negotiate protocol. server [{}] - client {}\", protocol,"], [108, "\t\t\t\t\t\t\t\t\tprotocols);"], [109, "\t\t\t\t\t\t\tsession.close();"], [111, "\t\t\t\t\t} finally {"], [114, "\t\t\t\t}"], [115, "\t\t\t});"], [116, "\t\t} else {"], [117, "\t\t\t// TODO negotiate protocol without ALPN"], [118, "\t\t\tinitializeHTTP2ClientConnection(session, context, null);"], [129, ""], [130, "\t\tfinal HTTP2ClientConnection connection = new HTTP2ClientConnection(config, session, sslSession,"], [131, "\t\t\t\tcontext.listener);"], [132, "\t\tMap<Integer, Integer> settings = context.listener.onPreface(connection.getHttp2Session());"], [133, "\t\tif (settings == null) {"], [134, "\t\t\tsettings = Collections.emptyMap();"], [135, "\t\t}"], [136, "\t\tPrefaceFrame prefaceFrame = new PrefaceFrame();"], [137, "\t\tSettingsFrame settingsFrame = new SettingsFrame(settings, false);"], [138, "\t\tSessionSPI sessionSPI = connection.getSessionSPI();"], [139, "\t\tint windowDelta = config.getInitialSessionRecvWindow() - FlowControlStrategy.DEFAULT_WINDOW_SIZE;"], [140, "\t\tCallback callback = new Callback() {"], [141, ""], [142, "\t\t\t@Override"], [143, "\t\t\tpublic void succeeded() {"], [144, "\t\t\t\tcontext.promise.succeeded(connection);"], [145, "\t\t\t}"], [146, ""], [147, "\t\t\t@Override"], [148, "\t\t\tpublic void failed(Throwable x) {"], [149, "\t\t\t\ttry {"], [150, "\t\t\t\t\tconnection.close();"], [151, "\t\t\t\t} catch (IOException e) {"], [152, "\t\t\t\t\tlog.error(\"http2 connection initialization error\", e);"], [153, "\t\t\t\t}"], [154, "\t\t\t\tcontext.promise.failed(x);"], [155, "\t\t\t}"], [156, "\t\t};"], [157, ""], [158, "\t\tif (windowDelta > 0) {"], [159, "\t\t\tsessionSPI.updateRecvWindow(windowDelta);"], [160, "\t\t\tsessionSPI.frames(null, callback, prefaceFrame, settingsFrame, new WindowUpdateFrame(0, windowDelta));"], [161, "\t\t} else {"], [162, "\t\t\tsessionSPI.frames(null, callback, prefaceFrame, settingsFrame);"], [163, "\t\t}"], [170, "\t\t\tHTTP2ClientConnection http2ClientConnection = (HTTP2ClientConnection) session.getAttachment();"], [171, "\t\t\tif (http2ClientConnection != null && http2ClientConnection.isOpen()) {"], [172, "\t\t\t\thttp2ClientConnection.close();"], [188, "\t\tHTTP2ClientConnection http2ClientConnection = (HTTP2ClientConnection) session.getAttachment();"], [189, "\t\tif (http2ClientConnection != null && http2ClientConnection.isOpen()) {"], [190, "\t\t\thttp2ClientConnection.close();"]]}, "num_lines_added": 55, "num_lines_removed": 92}