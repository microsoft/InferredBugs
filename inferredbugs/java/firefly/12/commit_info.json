{"hash": "2ec518072b956ea354e85232fd68fb70b14e0a31", "message": "improve LogFactory code structure", "file_num_lines": 147, "diff_parsed": {"added": [[12, "import com.firefly.utils.VerifyUtils;"], [21, "\tpublic static final String DEFAULT_LOG_LEVEL = \"INFO\";"], [22, "\tpublic static final File DEFAULT_LOG_DIRECTORY = new File(System.getProperty(\"user.dir\"), \"logs\");"], [46, "\t\tif(logMap.get(DEFAULT_LOG_NAME) == null) {"], [47, "\t\t\tcreateDefaultLog();"], [48, "\t\t}"], [49, ""], [52, ""], [53, "\tprivate Properties loadLogConfigurationFile() throws IOException{"], [54, "\t\tProperties properties = new Properties();"], [55, "\t\ttry (InputStream input = LogFactory.class.getClassLoader().getResourceAsStream(CONFIGURATION_FILE_NAME)) {"], [56, "\t\t\tproperties.load(input);"], [57, "\t\t}"], [58, "\t\treturn properties;"], [59, "\t}"], [60, ""], [61, "\tprivate boolean createLogDirectory(File file) {"], [62, "\t\tif(file.exists() && file.isDirectory()) {"], [63, "\t\t\treturn true;"], [64, "\t\t} else {"], [65, "\t\t\treturn file.mkdirs();"], [66, "\t\t}"], [67, "\t}"], [68, ""], [70, "\t\tcreateLog(DEFAULT_LOG_NAME, DEFAULT_LOG_LEVEL, null, false);"], [71, "\t}"], [72, ""], [73, "\tprivate void createLog(String name, String level, String path, boolean console) {"], [75, "\t\tfileLog.setName(name);"], [76, "\t\tfileLog.setLevel(LogLevel.fromName(level));"], [78, "\t\tboolean createLogDirectorySuccess = false;"], [79, "\t\tif(VerifyUtils.isNotEmpty(path)) {"], [80, "\t\t\tFile file = new File(path);"], [81, "\t\t\tcreateLogDirectorySuccess = createLogDirectory(file);"], [82, "\t\t\tif(createLogDirectorySuccess) {"], [83, "\t\t\t\tfileLog.setPath(path);"], [84, "\t\t\t\tfileLog.setFileOutput(true);"], [85, "\t\t\t} else {"], [86, "\t\t\t\tcreateLogDirectorySuccess = createLogDirectory(DEFAULT_LOG_DIRECTORY);"], [87, "\t\t\t\tif(createLogDirectorySuccess) {"], [88, "\t\t\t\t\tfileLog.setPath(DEFAULT_LOG_DIRECTORY.getAbsolutePath());"], [89, "\t\t\t\t\tfileLog.setFileOutput(true);"], [90, "\t\t\t\t} else {"], [91, "\t\t\t\t\tfileLog.setFileOutput(false);"], [92, "\t\t\t\t}"], [93, "\t\t\t}"], [95, "\t\t\tcreateLogDirectorySuccess = createLogDirectory(DEFAULT_LOG_DIRECTORY);"], [96, "\t\t\tif(createLogDirectorySuccess) {"], [97, "\t\t\t\tfileLog.setPath(DEFAULT_LOG_DIRECTORY.getAbsolutePath());"], [98, "\t\t\t\tfileLog.setFileOutput(true);"], [100, "\t\t\t\tfileLog.setFileOutput(false);"], [104, "\t\tif(createLogDirectorySuccess) {"], [105, "\t\t\tfileLog.setConsoleOutput(console);"], [108, "\t\t\tSystem.err.println(\"create log directory is failure\");"], [111, "\t\tlogMap.put(name, fileLog);"], [112, "\t\tSystem.out.println(\"initialize log \" + fileLog.toString());"], [122, "\t\t\tswitch (strs.length) {"], [123, "\t\t\tcase 1:"], [124, "\t\t\t\tcreateLog(name, strs[0], null, false);"], [125, "\t\t\t\tbreak;"], [126, "\t\t\tcase 2:"], [127, "\t\t\t\tif(\"console\".equalsIgnoreCase(strs[1])) {"], [128, "\t\t\t\t\tcreateLog(name, strs[0], null, true);"], [130, "\t\t\t\t\tcreateLog(name, strs[0], strs[1], false);"], [132, "\t\t\t\tbreak;"], [133, "\t\t\tcase 3:"], [134, "\t\t\t\tcreateLog(name, strs[0], strs[1], \"console\".equalsIgnoreCase(strs[2]));"], [135, "\t\t\t\tbreak;"], [136, "\t\t\tdefault:"], [137, "\t\t\t\tSystem.err.println(\"The log \" + name + \" configuration format is illegal. It will use default log configuration\");"], [138, "\t\t\t\tcreateLog(name, DEFAULT_LOG_LEVEL, null, false);"], [139, "\t\t\t\tbreak;"]], "deleted": [[36, "\t\tcreateDefaultLog();"], [37, ""], [47, ""], [50, "\t\tfileLog.setName(DEFAULT_LOG_NAME);"], [51, "\t\tfileLog.setLevel(LogLevel.INFO);"], [53, "\t\tboolean setLogDirectorySuccess = false;"], [54, "\t\tFile logDir = new File(System.getProperty(\"user.dir\"), \"logs\");"], [55, "\t\tif(logDir.isDirectory() && logDir.exists()) {"], [56, "\t\t\tfileLog.setPath(logDir.getAbsolutePath());"], [57, "\t\t\tsetLogDirectorySuccess = true;"], [59, "\t\t\tboolean success = logDir.mkdirs();"], [60, "\t\t\tif(success) {"], [61, "\t\t\t\tfileLog.setPath(logDir.getAbsolutePath());"], [62, "\t\t\t\tsetLogDirectorySuccess = true;"], [64, "\t\t\t\tsetLogDirectorySuccess = false;"], [68, "\t\tif(setLogDirectorySuccess) {"], [69, "\t\t\tfileLog.setFileOutput(true);"], [70, "\t\t\tfileLog.setConsoleOutput(false);"], [72, "\t\t\tfileLog.setFileOutput(false);"], [76, "\t\tlogMap.put(DEFAULT_LOG_NAME, fileLog);"], [77, "\t\tSystem.out.println(\"create default log: \" + fileLog.toString());"], [78, "\t}"], [79, ""], [80, "\tprivate Properties loadLogConfigurationFile() throws IOException{"], [81, "\t\tProperties properties = new Properties();"], [82, "\t\ttry (InputStream input = LogFactory.class.getClassLoader().getResourceAsStream(CONFIGURATION_FILE_NAME)) {"], [83, "\t\t\tproperties.load(input);"], [84, "\t\t}"], [85, "\t\treturn properties;"], [92, "//\t\t\tSystem.out.println(name + \"|\" + value);"], [95, "\t\t\tif (strs.length < 2) {"], [96, "\t\t\t\tSystem.err.println(\"the log configuration file format is illegal\");"], [97, "\t\t\t\tcontinue;"], [98, "\t\t\t}"], [99, ""], [100, "\t\t\tString path = strs[1];"], [101, "\t\t\tFileLog fileLog = new FileLog();"], [102, "\t\t\tfileLog.setName(name);"], [103, "\t\t\tfileLog.setLevel(LogLevel.fromName(strs[0]));"], [105, "\t\t\tif (\"console\".equalsIgnoreCase(path)) {"], [106, "\t\t\t\tfileLog.setFileOutput(false);"], [107, "\t\t\t\tfileLog.setConsoleOutput(true);"], [108, "\t\t\t} else {"], [109, "\t\t\t\tFile file = new File(path);"], [110, "\t\t\t\tif(file.exists() && file.isDirectory()) {"], [111, "\t\t\t\t\tfileLog.setPath(path);"], [112, "\t\t\t\t\tfileLog.setFileOutput(true);"], [114, "\t\t\t\t\tboolean success = file.mkdirs();"], [115, "\t\t\t\t\tif(success) {"], [116, "\t\t\t\t\t\tfileLog.setPath(path);"], [117, "\t\t\t\t\t\tfileLog.setFileOutput(true);"], [118, "\t\t\t\t\t} else {"], [119, "\t\t\t\t\t\tSystem.err.println(\"create directory \" + path + \" failure\");"], [120, "\t\t\t\t\t\tcontinue;"], [121, "\t\t\t\t\t}"], [123, ""], [124, "\t\t\t\tif (strs.length > 2)"], [125, "\t\t\t\t\tfileLog.setConsoleOutput(\"console\".equalsIgnoreCase(strs[2]));"], [127, "\t\t\tlogMap.put(name, fileLog);"], [128, "\t\t\tSystem.out.println(\"initialize log \" + fileLog.toString() + \" success\");"]]}, "num_lines_added": 72, "num_lines_removed": 60}