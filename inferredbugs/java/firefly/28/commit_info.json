{"hash": "ff656b34a55d8b026a9cb157986ca18f6e31fe95", "message": "[test]: test nested class reflection", "file_num_lines": 196, "diff_parsed": {"added": [[76, ""], [77, "            public class Sar<U> {"], [78, "                private U sar;"], [79, "                private List<T> list;"], [80, ""], [81, "                public U getSar() {"], [82, "                    return sar;"], [83, "                }"], [84, ""], [85, "                public void setSar(U sar) {"], [86, "                    this.sar = sar;"], [87, "                }"], [88, ""], [89, "                public List<T> getList() {"], [90, "                    return list;"], [91, "                }"], [92, ""], [93, "                public void setList(List<T> list) {"], [94, "                    this.list = list;"], [95, "                }"], [96, "            }"], [112, "    public static GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>> reqRef = new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>>() {"], [113, "    };"], [114, "    public static GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Bar<List<String>>> barRef = new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Bar<List<String>>>() {"], [115, "    };"], [116, "    public static GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Car<List<Integer>>> carRef = new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Car<List<Integer>>>() {"], [117, "    };"], [118, "    public static GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Par> parRef = new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Par>() {"], [119, "    };"], [120, "    public static GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Par.Sar<Integer>> sarRef = new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Par.Sar<Integer>>() {"], [121, "    };"], [122, ""], [173, "        Map<String, FieldGenericTypeBind> map = ReflectUtils.getGenericBeanFields(reqRef);"], [193, "        Map<String, FieldGenericTypeBind> map = ReflectUtils.getGenericBeanFields(barRef);"], [210, "        map = ReflectUtils.getGenericBeanFields(carRef);"], [215, "        Assert.assertThat(parameterizedType.getTypeName(), is(\"java.util.List<java.lang.Integer>\"));"], [218, "        map = ReflectUtils.getGenericBeanFields(parRef);"], [223, ""], [224, "        Map<String, MethodGenericTypeBind> getterMap = ReflectUtils.getGenericBeanGetterMethods(sarRef);"], [225, "        MethodGenericTypeBind list = getterMap.get(\"list\");"], [226, "        System.out.println(list.getType().getTypeName());"], [227, "        Assert.assertThat(list.getType().getTypeName(), is(\"java.util.List<java.util.Map<java.lang.String, test.utils.lang.TestGenericTypeReference$Foo>>\"));"], [228, ""], [229, "        MethodGenericTypeBind sar = getterMap.get(\"sar\");"], [230, "        Assert.assertThat(sar.getType().getTypeName(), is(\"java.lang.Integer\"));"], [235, "        Map<String, MethodGenericTypeBind> getterMap = ReflectUtils.getGenericBeanGetterMethods(reqRef);"], [242, "        Map<String, MethodGenericTypeBind> setterMap = ReflectUtils.getGenericBeanSetterMethods(reqRef);"]], "deleted": [[141, "        Map<String, FieldGenericTypeBind> map = ReflectUtils.getGenericBeanFields("], [142, "                new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>>() {"], [143, "                }, null);"], [163, "        Map<String, FieldGenericTypeBind> map = ReflectUtils.getGenericBeanFields("], [164, "                new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Bar<List<String>>>() {"], [165, "                }, null);"], [182, "        map = ReflectUtils.getGenericBeanFields("], [183, "                new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Car<List<String>>>() {"], [184, "                }, null);"], [189, "        Assert.assertThat(parameterizedType.getTypeName(), is(\"java.util.List<java.lang.String>\"));"], [192, "        map = ReflectUtils.getGenericBeanFields("], [193, "                new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>.Par>() {"], [194, "                }, null);"], [203, "        Map<String, MethodGenericTypeBind> getterMap = ReflectUtils.getGenericBeanGetterMethods("], [204, "                new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>>() {"], [205, "                }, null);"], [212, "        Map<String, MethodGenericTypeBind> setterMap = ReflectUtils.getGenericBeanSetterMethods("], [213, "                new GenericTypeReference<Request<Map<String, Foo>, String, Map<String, List<Foo>>>>() {"], [214, "                }, null);"]]}, "num_lines_added": 47, "num_lines_removed": 19}