{"hash": "07c92a5b56e2243770967e5cd19e514a822470ca", "message": "Improves performance of the date roll file log", "file_num_lines": 216, "diff_parsed": {"added": [[4, "import java.io.Closeable;"], [17, "public class FileLog implements Log, Closeable {"], [25, "\tprivate BufferedWriter bufferedWriter;"], [26, "\tprivate String currentDate = LogFactory.dayDateFormat.format(new Date());"], [27, ""], [32, "\t\tif (fileOutput && buffer.size() >= BATCH_SIZE) {"], [33, "//\t\t\tSystem.out.println(\"the buffer is full\");"], [35, "\t\t}"], [43, "\t\t\t\t\tbufferedWriter = getBufferedWriter(LogFactory.dayDateFormat.format(d));"], [47, "\t\t\t\tbufferedWriter.flush();"], [53, ""], [54, "\t@Override"], [55, "\tpublic void close() throws IOException {"], [56, "\t\tif(bufferedWriter != null)"], [57, "\t\t\tbufferedWriter.close();"], [58, "\t}"], [60, "\tprivate BufferedWriter getBufferedWriter(String newDate) throws IOException {"], [62, "\t\tif(bufferedWriter == null || !currentDate.equals(newDate)) {"], [63, "\t\t\tFile file = new File(path, name + \".\" + newDate + \".txt\");"], [64, "\t\t\tboolean ret = true;"], [65, "\t\t\tif (!file.exists()) {"], [66, "\t\t\t\tret = file.createNewFile();"], [67, "\t\t\t}"], [68, "\t\t\tif (ret) {"], [69, "\t\t\t\tclose();"], [70, "\t\t\t\tbufferedWriter = new BufferedWriter(new FileWriter(file, true));"], [71, "\t\t\t\tcurrentDate = newDate;"], [72, "\t\t\t\tSystem.out.println(\"get new buffered \" + file.getName());"], [73, "\t\t\t}"], [75, ""], [76, "\t\treturn bufferedWriter;"]], "deleted": [[16, "public class FileLog implements Log {"], [28, "\t\tif (fileOutput && buffer.size() >= BATCH_SIZE)"], [34, "\t\t\tBufferedWriter bufferedWriter = null;"], [36, "\t\t\t\tString date = LogFactory.dayDateFormat.format(new Date());"], [37, "\t\t\t\tbufferedWriter = getBufferedWriter(date);"], [38, ""], [41, "\t\t\t\t\tString newDate = LogFactory.dayDateFormat.format(d);"], [42, "\t\t\t\t\tif(!newDate.equals(date)) {"], [43, "\t\t\t\t\t\tif (bufferedWriter != null)"], [44, "\t\t\t\t\t\t\ttry {"], [45, "\t\t\t\t\t\t\t\tbufferedWriter.close();"], [46, "\t\t\t\t\t\t\t} catch (IOException e) {"], [47, "\t\t\t\t\t\t\t\te.printStackTrace();"], [48, "\t\t\t\t\t\t\t}"], [49, "\t\t\t\t\t\tdate = newDate;"], [50, "\t\t\t\t\t\tbufferedWriter = getBufferedWriter(date);"], [51, "\t\t\t\t\t}"], [52, ""], [58, "\t\t\t} finally {"], [59, "\t\t\t\tif (bufferedWriter != null)"], [60, "\t\t\t\t\ttry {"], [61, "\t\t\t\t\t\tbufferedWriter.close();"], [62, "\t\t\t\t\t} catch (IOException e) {"], [63, "\t\t\t\t\t\te.printStackTrace();"], [64, "\t\t\t\t\t}"], [69, "\tprivate BufferedWriter getBufferedWriter(String date) throws IOException {"], [71, "\t\tFile file = new File(path, name + \".\" + date + \".txt\");"], [72, "\t\tboolean ret = false;"], [73, "\t\tif (!file.exists()) {"], [74, "\t\t\tret = file.createNewFile();"], [75, "\t\t} else {"], [76, "\t\t\tret = true;"], [78, "\t\tif (ret)"], [79, "\t\t\treturn new BufferedWriter(new FileWriter(file, true));"], [80, "\t\telse"], [81, "\t\t\treturn null;"]]}, "num_lines_added": 31, "num_lines_removed": 36}