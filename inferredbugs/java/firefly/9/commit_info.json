{"hash": "39477879b4a43b35296634bc3c566311df1f8e0e", "message": "add stream test case", "file_num_lines": 211, "diff_parsed": {"added": [[28, ""], [29, "\tSpdyDecoder clientDecoder = new SpdyDecoder(new DefaultSpdyDecodingEventListener(new StreamEventListener(){"], [31, "\t\t@Override"], [32, "\t\tpublic void onSynStream(SynStreamFrame synStreamFrame, Stream stream, Connection connection) {"], [34, "\t\t}"], [36, "\t\t@Override"], [37, "\t\tpublic void onSynReply(SynReplyFrame synReplyFrame, Stream stream, Connection connection) {"], [39, "\t\t}"], [41, "\t\t@Override"], [42, "\t\tpublic void onRstStream(RstStreamFrame rstStreamFrame, Stream stream, Connection connection) {"], [44, "\t\t}"], [46, "\t\t@Override"], [47, "\t\tpublic void onHeaders(HeadersFrame headersFrame, Stream stream, Connection connection) {"], [49, "\t\t}"], [51, "\t\t@Override"], [52, "\t\tpublic void onData(DataFrame dataFrame, Stream stream, Connection connection) {"], [54, "\t\t}}, new SettingsManager(null, \"localhost\", 7777)));"], [55, ""], [56, "\tSpdyDecoder serverDecoder = new SpdyDecoder(new DefaultSpdyDecodingEventListener(new StreamEventListener(){"], [58, "\t\t@Override"], [59, "\t\tpublic void onSynStream(SynStreamFrame synStreamFrame, Stream stream, Connection connection) {"], [60, "\t\t\tSystem.out.println(\"Server receives syn stream -> \" + synStreamFrame);"], [61, ""], [62, "\t\t}"], [64, "\t\t@Override"], [65, "\t\tpublic void onSynReply(SynReplyFrame synReplyFrame, Stream stream, Connection connection) {"], [67, "\t\t}"], [69, "\t\t@Override"], [70, "\t\tpublic void onRstStream(RstStreamFrame rstStreamFrame, Stream stream, Connection connection) {"], [72, "\t\t}"], [74, "\t\t@Override"], [75, "\t\tpublic void onHeaders(HeadersFrame headersFrame, Stream stream, Connection connection) {"], [77, "\t\t}"], [79, "\t\t@Override"], [80, "\t\tpublic void onData(DataFrame dataFrame, Stream stream, Connection connection) {"], [81, "\t\t\tSystem.out.println(\"Server receives data -> \" + dataFrame);"], [82, "\t\t\tif(dataFrame.getFlags() == DataFrame.FLAG_FIN) {"], [83, "\t\t\t\tFields headers = stream.createFields();"], [84, "\t\t\t\theaders.put(\"response\", \"ok\");"], [85, "\t\t\t\tstream.reply(Version.V3, (byte)0, headers);"], [86, "\t\t\t\tstream.sendLastData(\"the server has received messages\".getBytes());"], [88, "\t\t}}, null));"], [90, "\t@Test"], [91, "\tpublic void testWindowUpdate() throws Throwable {"], [92, "\t\tMockSession clientSession = new MockSession();"], [93, "\t\tMockSession serverSession = new MockSession();"], [94, ""], [95, "\t\ttry(SpdySessionAttachment clientAttachment = new SpdySessionAttachment(new Connection(clientSession, true));"], [96, "\t\tSpdySessionAttachment serverAttachment = new SpdySessionAttachment(new Connection(serverSession, false));) {"], [97, ""], [98, "\t\t\tclientSession.attachObject(clientAttachment);"], [99, "\t\t\tserverSession.attachObject(serverAttachment);"], [100, ""], [101, "\t\t\t// Client creates a stream"], [102, "\t\t\tStream clientStream = clientAttachment.getConnection().createStream(new StreamEventListener(){"], [103, ""], [104, "\t\t\t\t@Override"], [105, "\t\t\t\tpublic void onSynStream(SynStreamFrame synStreamFrame, Stream stream, Connection connection) {"], [106, ""], [107, "\t\t\t\t}"], [108, ""], [109, "\t\t\t\t@Override"], [110, "\t\t\t\tpublic void onSynReply(SynReplyFrame synReplyFrame, Stream stream, Connection connection) {"], [111, "\t\t\t\t\tSystem.out.println(\"Client receives reply frame -> \" + synReplyFrame);"], [112, "\t\t\t\t\tAssert.assertThat(synReplyFrame.getHeaders().get(\"response\").getValue(), is(\"ok\"));"], [113, "\t\t\t\t}"], [114, ""], [115, "\t\t\t\t@Override"], [116, "\t\t\t\tpublic void onRstStream(RstStreamFrame rstStreamFrame, Stream stream, Connection connection) {"], [117, ""], [119, ""], [120, "\t\t\t\t@Override"], [121, "\t\t\t\tpublic void onHeaders(HeadersFrame headersFrame, Stream stream, Connection connection) {"], [122, ""], [123, "\t\t\t\t}"], [124, ""], [125, "\t\t\t\t@Override"], [126, "\t\t\t\tpublic void onData(DataFrame dataFrame, Stream stream, Connection connection) {"], [127, "\t\t\t\t\tSystem.out.println(\"Client receives data -> \" + dataFrame);"], [128, "\t\t\t\t\tif(dataFrame.getFlags() == DataFrame.FLAG_FIN) {"], [129, "\t\t\t\t\t\tAssert.assertThat(new String(dataFrame.getData()), is(\"the server has received messages\"));"], [130, "\t\t\t\t\t}"], [131, "\t\t\t\t}});"], [132, ""], [133, "\t\t\tAssert.assertThat(clientStream.getId(), is(1));"], [134, "\t\t\tAssert.assertThat(clientStream.getPriority(), is((byte)0));"], [135, "\t\t\tAssert.assertThat(clientAttachment.getConnection().getStream(1) == clientStream, is(true));"], [136, ""], [137, "\t\t\t// Client sends a SYN stream to server"], [138, "\t\t\tFields headers = clientStream.createFields();"], [139, "\t\t\theaders.put(\"test1\", \"testValue1\");"], [140, "\t\t\theaders.put(\"test2\", \"testValue2\");"], [141, "\t\t\theaders.add(\"testM1\", \"testm1\");"], [142, "\t\t\theaders.add(\"testM2\", \"testm2\");"], [143, "\t\t\tclientStream.syn(Version.V3, (byte)0, 0, (byte)0, headers);"], [144, "\t\t\tAssert.assertThat(clientStream.getWindowSize(), is(64 * 1024));"], [145, "\t\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(64 * 1024));"], [146, ""], [147, "\t\t\t// Server receives a SYN stream"], [148, "\t\t\tserverDecoder.decode(clientSession.outboundData.poll(), serverSession);"], [149, ""], [150, "\t\t\t// Client sends data frames"], [151, "\t\t\tint currentWindowSize = 64 * 1024;"], [152, "\t\t\tbyte[] data = \"hello world\".getBytes();"], [153, "\t\t\tclientStream.sendData(data);"], [154, "\t\t\tcurrentWindowSize -= data.length;"], [155, "\t\t\tAssert.assertThat(clientStream.getWindowSize(), is(currentWindowSize));"], [156, "\t\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(currentWindowSize));"], [157, ""], [158, "\t\t\tdata = \"data2\".getBytes();"], [159, "\t\t\tclientStream.sendData(data);"], [160, "\t\t\tcurrentWindowSize -= data.length;"], [161, "\t\t\tAssert.assertThat(clientStream.getWindowSize(), is(currentWindowSize));"], [162, "\t\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(currentWindowSize));"], [163, ""], [164, "\t\t\tdata = \"data3\".getBytes();"], [165, "\t\t\tclientStream.sendLastData(data);"], [166, "\t\t\tcurrentWindowSize -= data.length;"], [167, "\t\t\tAssert.assertThat(clientStream.getWindowSize(), is(currentWindowSize));"], [168, "\t\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(currentWindowSize));"], [169, "\t\t\tAssert.assertThat(clientStream.isOutboundClosed(), is(true));"], [170, "\t\t\tAssert.assertThat(clientStream.isInboundClosed(), is(false));"], [171, ""], [172, "\t\t\t// Server receives data"], [173, "\t\t\tByteBuffer buf = null;"], [174, "\t\t\twhile( (buf = clientSession.outboundData.poll()) != null ) {"], [175, "\t\t\t\tserverDecoder.decode(buf, serverSession);"], [176, "\t\t\t}"], [177, ""], [178, "\t\t\t// Server sends window update and replies"], [179, "\t\t\twhile( (buf = serverSession.outboundData.poll()) != null ) {"], [180, "\t\t\t\tclientDecoder.decode(buf, clientSession);"], [181, "\t\t\t}"], [182, "\t\t\tAssert.assertThat(clientStream.isOutboundClosed(), is(true));"], [183, "\t\t\tAssert.assertThat(clientStream.isInboundClosed(), is(true));"], [184, "\t\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(64 * 1024));"], [185, "\t\t}"], [186, "\t}"], [187, ""], [188, "\t@Test"], [189, "\tpublic void testWindowSizeIsNotEnough() throws Throwable {"], [190, "\t\tMockSession clientSession = new MockSession();"], [191, "\t\tMockSession serverSession = new MockSession();"], [193, "\t\ttry(SpdySessionAttachment clientAttachment = new SpdySessionAttachment(new Connection(clientSession, true));"], [194, "\t\tSpdySessionAttachment serverAttachment = new SpdySessionAttachment(new Connection(serverSession, false));) {"], [195, ""], [196, "\t\t\tclientSession.attachObject(clientAttachment);"], [197, "\t\t\tserverSession.attachObject(serverAttachment);"], [198, ""], [199, "\t\t\t// Client creates a stream"], [200, "\t\t\tStream clientStream = clientAttachment.getConnection().createStream(new StreamEventListener(){"], [201, ""], [202, "\t\t\t\t@Override"], [203, "\t\t\t\tpublic void onSynStream(SynStreamFrame synStreamFrame, Stream stream, Connection connection) {"], [204, ""], [205, "\t\t\t\t}"], [206, ""], [207, "\t\t\t\t@Override"], [208, "\t\t\t\tpublic void onSynReply(SynReplyFrame synReplyFrame, Stream stream, Connection connection) {"], [209, "\t\t\t\t\tSystem.out.println(\"Client receives reply frame -> \" + synReplyFrame);"], [210, "\t\t\t\t\tAssert.assertThat(synReplyFrame.getHeaders().get(\"response\").getValue(), is(\"ok\"));"], [211, "\t\t\t\t}"], [212, ""], [213, "\t\t\t\t@Override"], [214, "\t\t\t\tpublic void onRstStream(RstStreamFrame rstStreamFrame, Stream stream, Connection connection) {"], [215, ""], [216, "\t\t\t\t}"], [217, ""], [218, "\t\t\t\t@Override"], [219, "\t\t\t\tpublic void onHeaders(HeadersFrame headersFrame, Stream stream, Connection connection) {"], [220, ""], [221, "\t\t\t\t}"], [222, ""], [223, "\t\t\t\t@Override"], [224, "\t\t\t\tpublic void onData(DataFrame dataFrame, Stream stream, Connection connection) {"], [225, "\t\t\t\t\tSystem.out.println(\"Client receives data -> \" + dataFrame);"], [226, "\t\t\t\t\tif(dataFrame.getFlags() == DataFrame.FLAG_FIN) {"], [227, "\t\t\t\t\t\tAssert.assertThat(new String(dataFrame.getData()), is(\"the server has received messages\"));"], [228, "\t\t\t\t\t}"], [229, "\t\t\t\t}});"], [230, ""], [231, "\t\t\tAssert.assertThat(clientStream.getId(), is(1));"], [232, "\t\t\tAssert.assertThat(clientStream.getPriority(), is((byte)0));"], [233, "\t\t\tAssert.assertThat(clientAttachment.getConnection().getStream(1) == clientStream, is(true));"], [234, ""], [235, ""], [236, "\t\t\t// Client sends a SYN stream to server"], [237, "\t\t\tFields headers = clientStream.createFields();"], [238, "\t\t\theaders.put(\"testBigData\", \"testBigData\");"], [239, "\t\t\tclientStream.syn(Version.V3, (byte)0, 0, (byte)0, headers);"], [240, "\t\t\tAssert.assertThat(clientStream.getWindowSize(), is(64 * 1024));"], [241, "\t\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(64 * 1024));"], [242, ""], [243, "\t\t\t// Server receives a SYN stream"], [244, "\t\t\tserverDecoder.decode(clientSession.outboundData.poll(), serverSession);"], [245, ""], [246, "\t\t\tStringBuilder s = new StringBuilder(40 * 1024);"], [247, "\t\t\tfor (int i = 0; i < 40 * 1024; i++) {"], [248, "\t\t\t\ts.append('b');"], [250, "\t\t\tbyte[] data1 = s.toString().getBytes();"], [251, "\t\t\tbyte[] data2 = s.toString().getBytes();"], [252, "\t\t\tclientStream.sendData(data1);"], [253, "\t\t\tclientStream.sendLastData(data2);"], [254, "\t\t\tAssert.assertThat(clientStream.getWindowSize(), is(24 * 1024));"], [255, "\t\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(24 * 1024));"], [256, "\t\t\tAssert.assertThat(clientSession.outboundData.size(), is(1));"], [257, ""], [258, ""], [259, "\t\t\tByteBuffer buf = null;"], [260, "\t\t\t// Server receives data"], [261, "\t\t\twhile( (buf = clientSession.outboundData.poll()) != null ) {"], [262, "\t\t\t\tserverDecoder.decode(buf, serverSession);"], [264, "\t\t\t// Client receives window update"], [265, "\t\t\twhile( (buf = serverSession.outboundData.poll()) != null ) {"], [266, "\t\t\t\tclientDecoder.decode(buf, clientSession);"], [268, "\t\t\tAssert.assertThat(clientStream.isOutboundClosed(), is(true));"], [269, "\t\t\tAssert.assertThat(clientStream.isInboundClosed(), is(false));"], [270, ""], [271, ""], [272, "\t\t\t// Server receives the last data"], [273, "\t\t\twhile( (buf = clientSession.outboundData.poll()) != null ) {"], [274, "\t\t\t\tserverDecoder.decode(buf, serverSession);"], [276, "\t\t\t// Client receives reply frame"], [277, "\t\t\twhile( (buf = serverSession.outboundData.poll()) != null ) {"], [278, "\t\t\t\tclientDecoder.decode(buf, clientSession);"], [279, "\t\t\t}"], [280, "\t\t\tAssert.assertThat(clientStream.isOutboundClosed(), is(true));"], [281, "\t\t\tAssert.assertThat(clientStream.isInboundClosed(), is(true));"], [282, ""], [284, "\t}"], [285, ""], [286, "\tpublic void testPing() throws Throwable {"], [290, "\tpublic void testSettings() throws Throwable {"], [294, "\tpublic void testRst() throws Throwable {"], [295, ""], [296, "\t}"], [297, ""], [298, "\tpublic void testGoAway() throws Throwable {"], [299, ""], [300, "\t}"], [301, ""]], "deleted": [[28, ""], [29, "\t@Test"], [30, "\tpublic void testWindowUpdate() throws Throwable {"], [31, "\t\tMockSession clientSession = new MockSession();"], [32, "\t\tMockSession serverSession = new MockSession();"], [33, ""], [34, "\t\tSpdySessionAttachment clientAttachment = new SpdySessionAttachment(new Connection(clientSession, true));"], [35, "\t\tSpdySessionAttachment serverAttachment = new SpdySessionAttachment(new Connection(serverSession, false));"], [36, ""], [37, "\t\tclientSession.attachObject(clientAttachment);"], [38, "\t\tserverSession.attachObject(serverAttachment);"], [40, "\t\tSpdyDecoder clientDecoder = new SpdyDecoder(new DefaultSpdyDecodingEventListener(new StreamEventListener(){"], [42, "\t\t\t@Override"], [43, "\t\t\tpublic void onSynStream(SynStreamFrame synStreamFrame, Stream stream, Connection connection) {"], [45, "\t\t\t}"], [47, "\t\t\t@Override"], [48, "\t\t\tpublic void onSynReply(SynReplyFrame synReplyFrame, Stream stream, Connection connection) {"], [50, "\t\t\t}"], [52, "\t\t\t@Override"], [53, "\t\t\tpublic void onRstStream(RstStreamFrame rstStreamFrame, Stream stream, Connection connection) {"], [55, "\t\t\t}"], [57, "\t\t\t@Override"], [58, "\t\t\tpublic void onHeaders(HeadersFrame headersFrame, Stream stream, Connection connection) {"], [60, "\t\t\t}"], [62, "\t\t\t@Override"], [63, "\t\t\tpublic void onData(DataFrame dataFrame, Stream stream, Connection connection) {"], [65, "\t\t\t}}, new SettingsManager(null, \"localhost\", 7777)));"], [66, ""], [67, "\t\tSpdyDecoder serverDecoder = new SpdyDecoder(new DefaultSpdyDecodingEventListener(new StreamEventListener(){"], [69, "\t\t\t@Override"], [70, "\t\t\tpublic void onSynStream(SynStreamFrame synStreamFrame, Stream stream, Connection connection) {"], [71, "\t\t\t\tSystem.out.println(\"Server receives syn stream -> \" + synStreamFrame);"], [72, ""], [73, "\t\t\t}"], [75, "\t\t\t@Override"], [76, "\t\t\tpublic void onSynReply(SynReplyFrame synReplyFrame, Stream stream, Connection connection) {"], [78, "\t\t\t}"], [80, "\t\t\t@Override"], [81, "\t\t\tpublic void onRstStream(RstStreamFrame rstStreamFrame, Stream stream, Connection connection) {"], [83, "\t\t\t}"], [85, "\t\t\t@Override"], [86, "\t\t\tpublic void onHeaders(HeadersFrame headersFrame, Stream stream, Connection connection) {"], [90, "\t\t\t@Override"], [91, "\t\t\tpublic void onData(DataFrame dataFrame, Stream stream, Connection connection) {"], [92, "\t\t\t\tSystem.out.println(\"Server receives data -> \" + dataFrame);"], [93, "\t\t\t\tif(dataFrame.getFlags() == DataFrame.FLAG_FIN) {"], [94, "\t\t\t\t\tFields headers = stream.createFields();"], [95, "\t\t\t\t\theaders.put(\"response\", \"ok\");"], [96, "\t\t\t\t\tstream.reply(Version.V3, (byte)0, headers);"], [97, "\t\t\t\t\tstream.sendLastData(\"the server has received messages\".getBytes());"], [99, "\t\t\t}}, null));"], [101, "\t\t// Client creates a stream"], [102, "\t\tStream clientStream = clientAttachment.getConnection().createStream(new StreamEventListener(){"], [103, ""], [104, "\t\t\t@Override"], [105, "\t\t\tpublic void onSynStream(SynStreamFrame synStreamFrame, Stream stream, Connection connection) {"], [106, ""], [108, ""], [109, "\t\t\t@Override"], [110, "\t\t\tpublic void onSynReply(SynReplyFrame synReplyFrame, Stream stream, Connection connection) {"], [111, "\t\t\t\tSystem.out.println(\"Client receives reply frame -> \" + synReplyFrame);"], [112, "\t\t\t\tAssert.assertThat(synReplyFrame.getHeaders().get(\"response\").getValue(), is(\"ok\"));"], [114, ""], [115, "\t\t\t@Override"], [116, "\t\t\tpublic void onRstStream(RstStreamFrame rstStreamFrame, Stream stream, Connection connection) {"], [117, ""], [119, ""], [120, "\t\t\t@Override"], [121, "\t\t\tpublic void onHeaders(HeadersFrame headersFrame, Stream stream, Connection connection) {"], [122, ""], [124, ""], [125, "\t\t\t@Override"], [126, "\t\t\tpublic void onData(DataFrame dataFrame, Stream stream, Connection connection) {"], [127, "\t\t\t\tSystem.out.println(\"Client receives data -> \" + dataFrame);"], [128, "\t\t\t\tif(dataFrame.getFlags() == DataFrame.FLAG_FIN) {"], [129, "\t\t\t\t\tAssert.assertThat(new String(dataFrame.getData()), is(\"the server has received messages\"));"], [130, "\t\t\t\t}"], [131, "\t\t\t}});"], [132, ""], [133, "\t\tAssert.assertThat(clientStream.getId(), is(1));"], [134, "\t\tAssert.assertThat(clientStream.getPriority(), is((byte)0));"], [135, "\t\tAssert.assertThat(clientAttachment.getConnection().getStream(1) == clientStream, is(true));"], [136, ""], [137, "\t\t// Client sends a SYN stream to server"], [138, "\t\tFields headers = clientStream.createFields();"], [139, "\t\theaders.put(\"test1\", \"testValue1\");"], [140, "\t\theaders.put(\"test2\", \"testValue2\");"], [141, "\t\theaders.add(\"testM1\", \"testm1\");"], [142, "\t\theaders.add(\"testM2\", \"testm2\");"], [143, "\t\tclientStream.syn(Version.V3, (byte)0, 0, (byte)0, headers);"], [144, "\t\tAssert.assertThat(clientStream.getWindowSize(), is(64 * 1024));"], [145, "\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(64 * 1024));"], [146, ""], [147, "\t\t// Server receives a SYN stream"], [148, "\t\tserverDecoder.decode(clientSession.outboundData.poll(), serverSession);"], [149, ""], [150, "\t\t// Client sends data frames"], [151, "\t\tint currentWindowSize = 64 * 1024;"], [152, "\t\tbyte[] data = \"hello world\".getBytes();"], [153, "\t\tclientStream.sendData(data);"], [154, "\t\tcurrentWindowSize -= data.length;"], [155, "\t\tAssert.assertThat(clientStream.getWindowSize(), is(currentWindowSize));"], [156, "\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(currentWindowSize));"], [157, ""], [158, "\t\tdata = \"data2\".getBytes();"], [159, "\t\tclientStream.sendData(data);"], [160, "\t\tcurrentWindowSize -= data.length;"], [161, "\t\tAssert.assertThat(clientStream.getWindowSize(), is(currentWindowSize));"], [162, "\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(currentWindowSize));"], [163, ""], [164, "\t\tdata = \"data3\".getBytes();"], [165, "\t\tclientStream.sendLastData(data);"], [166, "\t\tcurrentWindowSize -= data.length;"], [167, "\t\tAssert.assertThat(clientStream.getWindowSize(), is(currentWindowSize));"], [168, "\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(currentWindowSize));"], [169, "\t\tAssert.assertThat(clientStream.isOutboundClosed(), is(true));"], [170, "\t\tAssert.assertThat(clientStream.isInboundClosed(), is(false));"], [171, ""], [172, "\t\t// Server receives data"], [173, "\t\tByteBuffer buf = null;"], [174, "\t\twhile( (buf = clientSession.outboundData.poll()) != null ) {"], [175, "\t\t\tserverDecoder.decode(buf, serverSession);"], [178, "\t\t// Server sends window update and replies"], [179, "\t\twhile( (buf = serverSession.outboundData.poll()) != null ) {"], [180, "\t\t\tclientDecoder.decode(buf, clientSession);"], [181, "\t\t}"], [182, "\t\tAssert.assertThat(clientStream.isOutboundClosed(), is(true));"], [183, "\t\tAssert.assertThat(clientStream.isInboundClosed(), is(true));"], [184, "\t\tAssert.assertThat(clientAttachment.getConnection().getWindowSize(), is(64 * 1024));"], [187, "\tpublic void testBigData() throws Throwable {"]]}, "num_lines_added": 241, "num_lines_removed": 130}