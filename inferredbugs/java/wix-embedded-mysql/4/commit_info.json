{"hash": "c643925b5a8a1b274931e227a9fb2c35b5a47bfa", "message": "Updated implementation to not depend on log, but instead to output to stdout/stderr. Gives better results for Windows.", "file_num_lines": 148, "diff_parsed": {"added": [[5, "import com.wix.mysql.io.NotifyingStreamProcessor;"], [6, "import com.wix.mysql.io.NotifyingStreamProcessor.ResultMatchingListener;"], [12, "import de.flapdoodle.embed.process.io.Processors;"], [34, "public class MysqldProcess extends AbstractProcess<MysqldConfig, MysqldExecutable, MysqldProcess> {"], [38, "    private NotifyingStreamProcessor outputWatch;"], [50, "        outputWatch = new NotifyingStreamProcessor(StreamToLineProcessor.wrap(runtimeConfig.getProcessOutput().getOutput()));"], [51, "        Processors.connect(process.getReader(), outputWatch);"], [52, "        Processors.connect(process.getError(), outputWatch);"], [53, "        ResultMatchingListener startupListener = outputWatch.addListener(new ResultMatchingListener(\"ready for connections\"));"], [54, ""], [56, "            startupListener.waitForResult(getConfig().getTimeout());"], [58, "            if (!startupListener.isInitWithSuccess()) {"], [59, "                throw new RuntimeException(\"mysql start failed with error: \" + startupListener.getFailureFound());"], [83, "                \"--console\","], [115, "    protected void cleanupInternal() {"], [116, "    }"], [119, "        ResultMatchingListener shutdownListener = outputWatch.addListener(new ResultMatchingListener(\": Shutdown complete\"));"], [126, "            Process p = Runtime.getRuntime().exec(new String[]{"], [137, "                shutdownListener.waitForResult(getConfig().getTimeout());"], [139, "                if (!shutdownListener.isInitWithSuccess()) {"], [140, "                    logger.error(\"mysql shutdown failed. Expected to find in output: 'Shutdown complete', got: \" + shutdownListener.getFailureFound());"], [142, "                } else {"], [143, "                    retValue = true;"], [145, ""], [153, "                    logger.error(\"mysql shutdown failed with error code: \" + p.waitFor() + \" and message: \" + errOutput);"], [160, "            closeCloseables(stdErr);"], [173, "            Field f = AbstractProcess.class.getDeclaredField(\"executable\");"], [175, "            return (MysqldExecutable) f.get(this);"], [186, "     * <p>"], [197, "}"]], "deleted": [[3, "import com.google.common.collect.Sets;"], [6, "import com.wix.mysql.input.LogFileProcessor;"], [7, "import com.wix.mysql.input.OutputWatchStreamProcessor;"], [12, "import de.flapdoodle.embed.process.distribution.Platform;"], [27, "import java.util.Set;"], [30, "import static de.flapdoodle.embed.process.distribution.Platform.Windows;"], [37, "class MysqldProcess extends AbstractProcess<MysqldConfig, MysqldExecutable, MysqldProcess> {"], [41, "    private OutputWatchStreamProcessor logWatch = null;"], [42, "    private LogFileProcessor logFile = null;"], [53, "    protected void onBeforeProcessStart(ProcessBuilder processBuilder, MysqldConfig config, IRuntimeConfig runtimeConfig) {"], [54, "        super.onBeforeProcessStart(processBuilder, config, runtimeConfig);"], [55, ""], [56, "        logWatch = new OutputWatchStreamProcessor(Sets.newHashSet(\"ready for connections\"), \"[ERROR]\","], [57, "                StreamToLineProcessor.wrap(runtimeConfig.getProcessOutput().getOutput()));"], [58, ""], [59, "        logFile = new LogFileProcessor("], [60, "                new File(this.getExecutable().getBaseDir() + \"/data/error.log\"),"], [61, "                logWatch);"], [62, "    }"], [63, ""], [64, "    @Override"], [65, "    protected void onAfterProcessStop(MysqldConfig config, IRuntimeConfig runtimeConfig) {"], [66, "        super.onAfterProcessStop(config, runtimeConfig);"], [67, "    }"], [68, ""], [69, "    @Override"], [72, "            logWatch.waitForResult(getConfig().getTimeout());"], [74, "            if (!logWatch.isInitWithSuccess()) {"], [75, "                logger.error(\"Init failed with log: \" + logWatch.collectedLog());"], [76, "                throw new RuntimeException(\"mysql start failed with error: \" + logWatch.getFailureFound());"], [81, "        } finally {"], [82, "            if (logFile != null) logFile.shutdown();"], [102, "                format(\"--log-error=%s/data/error.log\", baseDir),"], [134, "    protected void cleanupInternal() {}"], [138, ""], [139, "        Reader stdOut = null;"], [141, "        LogFileProcessor processor = null;"], [142, "        Set<String> successPatterns = Sets.newHashSet("], [143, "                \"'Can't connect to MySQL server on 'localhost'\","], [144, "                Platform.detect() == Windows ? \"mysqld.exe: Shutdown complete\" : \"mysqld: Shutdown complete\");"], [149, "            Process p = Runtime.getRuntime().exec(new String[] {"], [157, "            OutputWatchStreamProcessor outputWatch = new OutputWatchStreamProcessor(successPatterns, \"[ERROR]\","], [158, "                    StreamToLineProcessor.wrap(getRuntimeConfig().getProcessOutput().getOutput()));"], [159, ""], [160, "            processor = new LogFileProcessor(new File(this.getExecutable().getBaseDir() + \"/data/error.log\"), outputWatch);"], [161, ""], [162, "            stdOut = new InputStreamReader(p.getInputStream());"], [166, "                outputWatch.waitForResult(getConfig().getTimeout());"], [168, "                if (!outputWatch.isInitWithSuccess()) {"], [169, "                    logger.error(\"mysql shutdown failed. Expected to find in output: 'Shutdown complete', got: \" + outputWatch.getFailureFound());"], [179, "                    logger.error(\"mysql shutdown failed with error code: \" + p.waitFor() + \" and message: \" + CharStreams.toString(stdErr));"], [186, "            closeCloseables(stdOut, stdErr);"], [187, "            if (processor != null) processor.shutdown();"], [200, "            Field f =  AbstractProcess.class.getDeclaredField(\"executable\");"], [202, "            return (MysqldExecutable)f.get(this);"], [203, "        } catch (Exception e) {"], [204, "            throw new RuntimeException(e);"], [205, "        }"], [206, "    }"], [207, ""], [208, "    /**"], [209, "     * Work-around to get IRuntimeConfig in hooks where it's not provided and as"], [210, "     * all init is done in base class constructor, local vars are still not"], [211, "     * initialized:/"], [212, "     */"], [213, "    private IRuntimeConfig getRuntimeConfig() {"], [214, "        try {"], [215, "            Field f = AbstractProcess.class.getDeclaredField(\"runtimeConfig\");"], [216, "            f.setAccessible(true);"], [217, "            return (IRuntimeConfig)f.get(this);"], [228, "     *"], [239, "}"], [240, ""], [241, ""]]}, "num_lines_added": 30, "num_lines_removed": 74}