{"hash": "c377dcb4ebfe3332f58e028bc9b01bfd044f297c", "message": "Don't throw exception when we read a file in classpath but return null\nCloses #34.", "file_num_lines": 387, "diff_parsed": {"added": [[43, "import org.springframework.core.io.ClassPathResource;"], [162, "\tprotected static Log logger = LogFactory.getLog(ElasticsearchAbstractClientFactoryBean.class);"], [798, "    /**"], [799, "     * Read a file in classpath and return its content. If the file is not found, the error is logged, but null"], [800, "     * is returned so that the user is aware of what happened."], [801, "     *"], [802, "     * @param url File URL Example : /es/twitter/_settings.json"], [803, "     * @return File content or null if file doesn't exist"], [804, "     */"], [805, "    public static String readFileInClasspath(String url) throws Exception {"], [806, "        StringBuilder bufferJSON = new StringBuilder();"], [807, ""], [808, "        BufferedReader br = null;"], [809, ""], [810, "        try {"], [811, "            ClassPathResource classPathResource = new ClassPathResource(url);"], [812, "            InputStreamReader ipsr = new InputStreamReader(classPathResource.getInputStream());"], [813, "            br = new BufferedReader(ipsr);"], [814, "            String line;"], [815, ""], [816, "            while ((line = br.readLine()) != null) {"], [817, "                bufferJSON.append(line);"], [818, "            }"], [819, "        } catch (Exception e) {"], [820, "            logger.error(String.format(\"Failed to load file from url: %s\", url), e);"], [821, "            return null;"], [822, "        } finally {"], [823, "            if (br != null) br.close();"], [824, "        }"], [825, ""], [826, "        return bufferJSON.toString();"], [827, "    }"]], "deleted": [[49, "import java.io.InputStream;"], [162, "\tprotected final Log logger = LogFactory.getLog(getClass());"], [798, "\t/**"], [799, "\t * Read a file in classpath and return its content"], [800, "\t * @param url File URL Example : /es/twitter/_settings.json"], [801, "\t * @return File content or null if file doesn't exist"], [802, "\t * @throws Exception"], [803, "\t */"], [804, "\tpublic static String readFileInClasspath(String url) throws Exception {"], [805, "\t\tStringBuffer bufferJSON = new StringBuffer();"], [806, ""], [807, "\t\ttry {"], [808, "\t\t\tInputStream ips= ElasticsearchAbstractClientFactoryBean.class.getResourceAsStream(url);"], [809, "\t\t\tInputStreamReader ipsr = new InputStreamReader(ips);"], [810, "\t\t\tBufferedReader br = new BufferedReader(ipsr);"], [811, "\t\t\tString line;"], [812, ""], [813, "\t\t\twhile ((line=br.readLine())!=null){"], [814, "\t\t\t\tbufferJSON.append(line);"], [815, "\t\t\t}"], [816, "\t\t\tbr.close();"], [817, "\t\t} catch (Exception e){"], [818, "\t\t\treturn null;"], [819, "\t\t}"], [821, "\t\treturn bufferJSON.toString();"], [822, "\t}"], [824, ""]]}, "num_lines_added": 32, "num_lines_removed": 27}