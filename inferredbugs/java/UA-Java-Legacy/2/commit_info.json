{"hash": "34285d1819f039c416ca4becbdb1497af82078c6", "message": "#160, support for BigDecimals within Variant", "file_num_lines": 1125, "diff_parsed": {"added": [[1284, "\t\tfinal int builtinType;"], [1285, "\t\tfinal boolean isDecimal;"], [1286, "\t\tif(BigDecimal.class.isAssignableFrom(compositeClass)) {"], [1288, "\t\t\tisDecimal = true;"], [1289, "\t\t}else {"], [1290, "\t\t\tisDecimal = false;"], [1291, "\t\t\tif (Structure.class.isAssignableFrom(compositeClass)"], [1292, "\t\t\t\t\t|| Enumeration.class.isAssignableFrom(compositeClass))"], [1293, "\t\t\t\tbuiltinType = 22;"], [1294, "\t\t\telse"], [1295, "\t\t\t\tbuiltinType = BuiltinsMap.ID_MAP.get(compositeClass);"], [1296, "\t\t}"], [1301, "\t\t\tif(isDecimal) {"], [1302, "\t\t\t\to = EncoderUtils.decimalToExtensionObject((BigDecimal) o);"], [1303, "\t\t\t}"], [1312, "\t\t\tif(isDecimal) {"], [1313, "\t\t\t\to = EncoderUtils.decimalArraytoExtensionObjectArray((BigDecimal[]) o);"], [1314, "\t\t\t}"], [1329, "\t\t\t} else {"], [1330, "\t\t\t\twhile (i.hasNext()) {"], [1331, "\t\t\t\t\tObject elem = i.next();"], [1332, "\t\t\t\t\tif(isDecimal) {"], [1333, "\t\t\t\t\t\telem = EncoderUtils.decimalToExtensionObject((BigDecimal) elem);"], [1334, "\t\t\t\t\t}"], [1336, "\t\t\t\t}"], [1749, "\t\tExtensionObject eo = EncoderUtils.decimalToExtensionObject(bd);"]], "deleted": [[18, "import java.nio.ByteBuffer;"], [19, "import java.nio.ByteOrder;"], [43, "import org.opcfoundation.ua.common.NamespaceTable;"], [46, "import org.opcfoundation.ua.core.Identifiers;"], [1288, "\t\tint builtinType;"], [1289, "\t\tif (Structure.class.isAssignableFrom(compositeClass)"], [1290, "\t\t\t\t|| Enumeration.class.isAssignableFrom(compositeClass))"], [1292, "\t\telse"], [1293, "\t\t\tbuiltinType = BuiltinsMap.ID_MAP.get(compositeClass);"], [1320, "\t\t\t} else"], [1321, "\t\t\t{"], [1322, "\t\t\t\twhile (i.hasNext())"], [1736, "\t\tint scaleInt = bd.scale();"], [1737, "\t\tif(scaleInt > Short.MAX_VALUE) {"], [1738, "\t\t\tthrow new EncodingException(\"Decimal scale overflow Short max value: \"+scaleInt);"], [1739, "\t\t}"], [1740, "\t\tif(scaleInt < Short.MIN_VALUE) {"], [1741, "\t\t\tthrow new EncodingException(\"Decimal scale underflow Short min value: \"+scaleInt);"], [1742, "\t\t}"], [1743, "\t\tshort scale = (short)scaleInt;"], [1744, "\t\tByteBuffer bb = ByteBuffer.allocate(2);"], [1745, "\t\tbb.order(ByteOrder.LITTLE_ENDIAN);"], [1746, "\t\tbb.putShort(scale);"], [1747, "\t\tbb.rewind();"], [1748, "\t\tbyte[] scalebytes = bb.array();"], [1749, ""], [1750, "\t\t//NOTE BigInteger uses big-endian, and UA Decimal encoding uses little-endian"], [1751, "\t\tbyte[] valuebytes = EncoderUtils.reverse(bd.unscaledValue().toByteArray());"], [1752, "\t\tbyte[] combined = EncoderUtils.concat(scalebytes, valuebytes);"], [1753, ""], [1754, "\t\tExpandedNodeId id = new ExpandedNodeId(NamespaceTable.OPCUA_NAMESPACE, Identifiers.Decimal.getValue());"], [1755, "\t\tExtensionObject eo = new ExtensionObject(id, combined);"]]}, "num_lines_added": 26, "num_lines_removed": 32}