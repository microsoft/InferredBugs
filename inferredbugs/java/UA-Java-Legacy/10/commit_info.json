{"hash": "0a9b74e5494357bbacf302a65e87bcd2bb84ca76", "message": "Fixed #165, Fixed #102, refactorings/changes to security provider init\n\nFor #102 apparently java.vendor is better than java.runtime.name (which\nseems to not work on later android versions), additional refactorings of\n#165 should ensure SC is initialized and added", "file_num_lines": 373, "diff_parsed": {"added": [[87, "\tprivate static final String SC_PROVIDER_NAME = \"org.opcfoundation.ua.transport.security.ScCryptoProvider\";"], [88, "\tprivate static final String BC_PROVIDER_NAME = \"org.opcfoundation.ua.transport.security.BcCryptoProvider\";"], [89, ""], [417, "\t * Returns {@link CryptoProvider} previously set with {@link #setCryptoProvider(CryptoProvider)}."], [418, "\t * If it is not set, tries to load either Bouncy or SpongyCastle based on the return value of {@link #getSecurityProviderName()}."], [419, "\t * Throws {@link RuntimeException} if cannot be loaded."], [424, "\t\t\t\ttry {"], [425, "\t\t\t\t\tcryptoProvider = (CryptoProvider) Class.forName(SC_PROVIDER_NAME).newInstance();"], [426, "\t\t\t\t} catch (Exception e) {"], [427, "\t\t\t\t\tthrow new RuntimeException(\"Cannot init \"+SC_PROVIDER_NAME, e);"], [428, "\t\t\t\t}"], [430, "\t\t\t\ttry {"], [431, "\t\t\t\t\tcryptoProvider = (CryptoProvider) Class.forName(BC_PROVIDER_NAME).newInstance();"], [432, "\t\t\t\t} catch (Exception e) {"], [433, "\t\t\t\t\tthrow new RuntimeException(\"Cannot init \"+BC_PROVIDER_NAME, e);"], [434, "\t\t\t\t}"], [527, "\t * The Preferred Security Provider name. If not set via {@link #setSecurityProviderName(String)},"], [528, "\t * will return 'SC' on android and 'BC' otherwise. Otherwise returns the set String."], [532, "\t\t\tif (LOGGER.isDebugEnabled()) {"], [535, "\t\t\t}"], [536, "\t\t\tboolean isAndroid = System.getProperty(\"java.vendor\")"], [539, "\t\t\t\tsecurityProviderName = \"SC\";"], [540, "\t\t\t} else{"], [548, "\t * Gets a suitable jce provider name for the given situation."], [550, "\tpublic static String getSecurityProviderName(Class<?> clazz) {"], [551, "\t\treturn getCryptoProvider().getSecurityProviderName(clazz);"], [622, "\t * yourself. NOTE! This method will set the {@link #setSecurityProviderName(String)} from the given provider."], [624, "\t * @param cryptoProvider the cryptoProvider to set, if null will clear the previous one."], [628, "\t\tCryptoUtil.securityProviderName = cryptoProvider==null ? null : cryptoProvider.getSecurityProviderName(null);"], [635, "\t *"], [636, "\t * NOTE! Calling this with a different provider name than previously"], [637, "\t * set will reset possible calls made to {@link #setCryptoProvider(CryptoProvider)}."], [638, "\t *"], [737, ""], [738, "\t/**"], [739, "\t * Returns a loaded JCE {@link Provider} of the given class."], [740, "\t * Tries to add the provider if it is not already loaded."], [741, "\t * Throws {@link IllegalArgumentException} if cannot be done."], [742, "\t */"], [743, "\tpublic static synchronized Provider loadOrInstallProvider(String jceName, String providerName) throws IllegalArgumentException{"], [744, "\t\tProvider provider = Security.getProvider(jceName);"], [745, "\t\tif(provider != null) {"], [746, "\t\t\treturn provider;"], [747, "\t\t}"], [749, "\t\t\tprovider = (Provider) Class.forName(providerName).newInstance();"], [750, "\t\t\tSecurity.addProvider(provider);"], [751, "\t\t\treturn provider;"], [752, "\t\t}catch(Exception e) {"], [753, "\t\t\tthrow new IllegalArgumentException(\"Cannot add Security Provider class: \"+providerName, e);"]], "deleted": [[17, "import java.security.KeyStore;"], [25, "import java.security.Signature;"], [48, "import org.opcfoundation.ua.transport.security.BcCryptoProvider;"], [50, "import org.opcfoundation.ua.transport.security.ScCryptoProvider;"], [418, "\t * <p>Getter for the field <code>cryptoProvider</code>.</p>"], [419, "\t *"], [420, "\t * @return a {@link org.opcfoundation.ua.transport.security.CryptoProvider} object."], [425, "\t\t\t\tcryptoProvider = new ScCryptoProvider();"], [427, "\t\t\t\tcryptoProvider = new BcCryptoProvider();"], [520, "\t * The Preferred Security Provider name. Will check if a Spongy Castle (on"], [521, "\t * Android) or Bouncy Castle provider is already available or if such can be"], [522, "\t * initialized from the respective class."], [523, "\t * <p>"], [524, "\t *"], [525, "\t * @return the provider name to use for specific crypto tasks"], [526, "\t * @throws java.lang.RuntimeException"], [527, "\t *             if none is available and none cannot be initialized."], [531, "\t\t\tProvider provider = null;"], [532, "\t\t\tif (LOGGER.isDebugEnabled())"], [535, "\t\t\tboolean isAndroid = System.getProperty(\"java.runtime.name\")"], [538, "\t\t\t\tif (Security.getProvider(\"SC\") != null)"], [539, "\t\t\t\t\tsecurityProviderName = \"SC\";"], [540, "\t\t\t\telse {"], [541, "\t\t\t\t\tprovider = hasClass(\"org.spongycastle.jce.provider.BouncyCastleProvider\");"], [542, "\t\t\t\t\tif (provider != null)"], [543, "\t\t\t\t\t\tsecurityProviderName = \"SC\";"], [544, "\t\t\t\t}"], [545, "\t\t\t} else if (Security.getProvider(\"BC\") != null)"], [547, "\t\t\telse {"], [548, "\t\t\t\tif (provider == null) {"], [549, "\t\t\t\t\tprovider = hasClass(\"org.bouncycastle.jce.provider.BouncyCastleProvider\");"], [550, "\t\t\t\t\tif (provider != null)"], [551, "\t\t\t\t\t\tsecurityProviderName = \"BC\";"], [552, "\t\t\t\t}"], [553, "\t\t\t\tif (provider == null) {"], [554, "\t\t\t\t\tprovider = hasClass(\"com.sun.crypto.provider.SunJCE\");"], [555, "\t\t\t\t\tif (provider != null)"], [556, "\t\t\t\t\t{"], [557, "\t                    throw new RuntimeException(\"BouncyCastle Security Provider not available! Not recommended SunJCE Security Provider is found, use it with CryptoUtil.setSecurityProviderName.\");"], [558, "\t\t\t\t\t}"], [559, "\t\t\t\t}"], [560, "\t\t\t\tif (provider != null)"], [561, "\t\t\t\t\tsecurityProviderName = provider.getName();"], [562, ""], [564, "\t\t\tif (securityProviderName != null)"], [565, "\t\t\t\tLOGGER.info(\"Using SecurityProvider {}\", securityProviderName);"], [566, "\t\t\telse"], [567, "\t\t\t\tthrow new RuntimeException(\"NO SECURITY PROVIDER AVAILABLE!\");"], [573, "\t * <p>Getter for the field <code>securityProviderName</code>.</p>"], [574, "\t *"], [575, "\t * @param class1 a {@link java.lang.Class} object."], [576, "\t * @return a {@link java.lang.String} object."], [578, "\tpublic static String getSecurityProviderName(Class<?> class1) {"], [579, "\t\tif (\"SunJCE\".equals(getSecurityProviderName())) {"], [580, "\t\t\tif (Signature.class.equals(class1))"], [581, "\t\t\t\treturn \"SunRsaSign\";"], [582, "\t\t\tif (KeyStore.class.equals(class1))"], [583, "\t\t\t\treturn \"SunJSSE\";"], [584, "\t\t}"], [585, "\t\treturn getSecurityProviderName();"], [656, "\t * yourself."], [658, "\t * @param cryptoProvider"], [659, "\t *            the cryptoProvider to set"], [767, ""], [768, "\tprivate static Provider hasClass(String className) {"], [770, "\t\t\tClass<?> providerClass = CryptoUtil.class.getClassLoader()"], [771, "\t\t\t\t\t.loadClass(className);"], [772, "\t\t\ttry {"], [773, "\t\t\t\tProvider provider = (Provider) providerClass.getConstructor()"], [774, "\t\t\t\t\t\t.newInstance();"], [775, "\t\t\t\tSecurity.addProvider(provider);"], [776, "\t\t\t\tLOGGER.info(\"SecurityProvider initialized from {}\","], [777, "\t\t\t\t\t\tproviderClass.getName());"], [778, "\t\t\t\treturn provider;"], [779, "\t\t\t} catch (Exception e) {"], [780, "\t\t\t\tthrow new RuntimeException("], [781, "\t\t\t\t\t\t\"Cannot add Security provider class=\""], [782, "\t\t\t\t\t\t\t\t+ providerClass.getName(), e);"], [783, "\t\t\t}"], [784, "\t\t} catch (ClassNotFoundException e) {"], [785, "\t\t\treturn null;"]]}, "num_lines_added": 49, "num_lines_removed": 81}