{"hash": "34285d1819f039c416ca4becbdb1497af82078c6", "message": "#160, support for BigDecimals within Variant", "file_num_lines": 1860, "diff_parsed": {"added": [[231, "\t\tExtensionObject eo = EncoderUtils.decimalToExtensionObject(bd);"], [2178, "\t\tfinal int builtinType;"], [2179, "\t\tfinal boolean isDecimal;"], [2180, "\t\tif(BigDecimal.class.isAssignableFrom(compositeClass)) {"], [2182, "\t\t\tisDecimal = true;"], [2183, "\t\t}else {"], [2184, "\t\t\tisDecimal = false;"], [2185, "\t\t\tif (Structure.class.isAssignableFrom(compositeClass))"], [2186, "\t\t\t\tbuiltinType = 22;"], [2187, "\t\t\telse"], [2188, "\t\t\t\tbuiltinType = BuiltinsMap.ID_MAP.get(compositeClass);"], [2189, "\t\t}"], [2194, "\t\t\tif(isDecimal) {"], [2195, "\t\t\t\to = EncoderUtils.decimalToExtensionObject((BigDecimal) o);"], [2196, "\t\t\t}"], [2205, "\t\t\tif(isDecimal) {"], [2206, "\t\t\t\to = EncoderUtils.decimalArraytoExtensionObjectArray((BigDecimal[]) o);"], [2207, "\t\t\t}"], [2219, "\t\t\twhile (i.hasNext()) {"], [2220, "\t\t\t\tObject elem = i.next();"], [2221, "\t\t\t\tif(isDecimal) {"], [2222, "\t\t\t\t\telem = EncoderUtils.decimalToExtensionObject((BigDecimal) elem);"], [2223, "\t\t\t\t}"], [2224, "\t\t\t\tputScalar(null, builtinType, elem);"], [2225, "\t\t\t}"]], "deleted": [[52, "import org.opcfoundation.ua.common.NamespaceTable;"], [55, "import org.opcfoundation.ua.core.Identifiers;"], [233, "\t\tint scaleInt = bd.scale();"], [234, "\t\tif(scaleInt > Short.MAX_VALUE) {"], [235, "\t\t\tthrow new EncodingException(\"Decimal scale overflow Short max value: \"+scaleInt);"], [236, "\t\t}"], [237, "\t\tif(scaleInt < Short.MIN_VALUE) {"], [238, "\t\t\tthrow new EncodingException(\"Decimal scale underflow Short min value: \"+scaleInt);"], [239, "\t\t}"], [240, "\t\tshort scale = (short)scaleInt;"], [241, "\t\tByteBuffer bb = ByteBuffer.allocate(2);"], [242, "\t\tbb.order(ByteOrder.LITTLE_ENDIAN);"], [243, "\t\tbb.putShort(scale);"], [244, "\t\tbyte[] scalebytes = bb.array();"], [245, ""], [246, "\t\t//NOTE BigInteger uses big-endian, and UA Decimal encoding uses little-endian"], [247, "\t\tbyte[] valuebytes = EncoderUtils.reverse(bd.unscaledValue().toByteArray());"], [248, "\t\tbyte[] combined = EncoderUtils.concat(scalebytes, valuebytes);"], [249, ""], [250, "\t\tExpandedNodeId id = new ExpandedNodeId(NamespaceTable.OPCUA_NAMESPACE, Identifiers.Decimal.getValue());"], [251, "\t\tExtensionObject eo = new ExtensionObject(id, combined);"], [2198, "\t\tint builtinType;"], [2199, "\t\tif (Structure.class.isAssignableFrom(compositeClass))"], [2201, "\t\telse"], [2202, "\t\t\tbuiltinType = BuiltinsMap.ID_MAP.get(compositeClass);"], [2226, "\t\t\twhile (i.hasNext())"], [2227, "\t\t\t\tputScalar(null, builtinType, i.next());"]]}, "num_lines_added": 25, "num_lines_removed": 27}