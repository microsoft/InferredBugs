{"hash": "0fdaa836eac9599803118e27839998c0a02255d6", "message": "working on async agg node\n\n\nFormer-commit-id: 2ea70ae0a65d8f384225d3608c3efe39c75b3c76", "file_num_lines": 81, "diff_parsed": {"added": [[5, "import java.sql.Connection;"], [6, "import java.sql.DriverManager;"], [7, "import java.sql.SQLException;"], [8, "import java.sql.Statement;"], [9, "import java.util.ArrayList;"], [10, "import java.util.Arrays;"], [11, "import java.util.List;"], [12, "import java.util.Random;"], [13, ""], [14, "import org.junit.AfterClass;"], [15, "import org.junit.BeforeClass;"], [17, "import org.verdictdb.connection.JdbcConnection;"], [20, "import org.verdictdb.core.query.AliasedColumn;"], [23, "import org.verdictdb.core.query.CreateTableAsSelectQuery;"], [26, "import org.verdictdb.core.rewriter.ScrambleMetaForTable;"], [28, "import org.verdictdb.core.scramble.UniformScrambler;"], [29, "import org.verdictdb.core.sql.QueryToSql;"], [30, "import org.verdictdb.core.sql.SelectQueryToSql;"], [31, "import org.verdictdb.exception.VerdictDBException;"], [33, "import org.verdictdb.sql.syntax.H2Syntax;"], [37, "  static Connection conn;"], [38, ""], [39, "  static String originalSchema = \"originalschema\";"], [40, ""], [41, "  static String originalTable = \"originalschema\";"], [42, ""], [43, "  static String newSchema = \"newschema\";"], [44, ""], [45, "  static String newTable = \"newtable\";"], [46, ""], [47, "  static ScrambleMeta scrambleMeta = new ScrambleMeta();"], [48, ""], [49, "//  ScrambleMeta generateTestScrambleMeta() {"], [50, "//    int aggblockCount = 2;"], [51, "//    ScrambleMeta meta = new ScrambleMeta();"], [52, "//    meta.insertScrambleMetaEntry(\"default\", \"people\","], [53, "//        Scrambler.getAggregationBlockColumn(),"], [54, "//        Scrambler.getSubsampleColumn(),"], [55, "//        Scrambler.getTierColumn(),"], [56, "//        aggblockCount);"], [57, "//    return meta;"], [58, "//  }"], [59, ""], [60, "  @BeforeClass"], [61, "  public static void setupH2Database() throws SQLException, VerdictDBException {"], [62, "    final String DB_CONNECTION = \"jdbc:h2:mem:aggexecnodeblocktest;DB_CLOSE_DELAY=-1\";"], [63, "    final String DB_USER = \"\";"], [64, "    final String DB_PASSWORD = \"\";"], [65, "    conn = DriverManager.getConnection(DB_CONNECTION, DB_USER, DB_PASSWORD);"], [66, "    conn.createStatement().execute(String.format(\"CREATE SCHEMA \\\"%s\\\"\", originalSchema));"], [67, "    conn.createStatement().execute(String.format(\"CREATE SCHEMA \\\"%s\\\"\", newSchema));"], [68, "    populateRandomData(conn, originalSchema, originalTable);"], [69, ""], [70, "    int aggBlockCount = 2;"], [71, "    UniformScrambler scrambler ="], [72, "        new UniformScrambler(originalSchema, originalTable, newSchema, newTable, aggBlockCount);"], [73, "    CreateTableAsSelectQuery createQuery = scrambler.scrambledTableCreationQuery();"], [74, "    String scrambleSql = QueryToSql.convert(new H2Syntax(), createQuery);"], [75, "    conn.createStatement().execute(scrambleSql);"], [76, "    ScrambleMetaForTable metaEntry = scrambler.generateMeta();"], [77, "    scrambleMeta.insertScrambleMetaEntry(metaEntry);"], [78, "  }"], [79, ""], [80, "  @AfterClass"], [81, "  public static void closeH2Connection() throws SQLException {"], [82, "    conn.close();"], [88, "        new AliasedColumn(ColumnOp.count(), \"agg\"),"], [89, "        new BaseTable(newSchema, newTable, \"t\"));"], [90, "    AggExecutionNode aggnode = AggExecutionNode.create(aggQuery, newSchema);"], [92, "    QueryExecutionNode converted = block.convertToProgressiveAgg(newSchema, scrambleMeta);"], [94, "    converted.execute(new JdbcConnection(conn, new H2Syntax()));"], [95, "  }"], [96, ""], [97, "  static void populateRandomData(Connection conn, String schemaName, String tableName) throws SQLException {"], [98, "    Statement stmt = conn.createStatement();"], [99, "    stmt.execute(String.format(\"CREATE TABLE \\\"%s\\\".\\\"%s\\\"(\\\"id\\\" int, \\\"value\\\" double)\", schemaName, tableName));"], [100, "    Random r = new Random();"], [101, "    for (int i = 0; i < 10; i++) {"], [102, "      stmt.execute(String.format(\"INSERT INTO \\\"%s\\\".\\\"%s\\\"(\\\"id\\\", \\\"value\\\") VALUES(%s, %f)\","], [103, "          schemaName, tableName, i, r.nextDouble()));"], [104, "    }"], [105, "    stmt.close();"]], "deleted": [[17, "  ScrambleMeta generateTestScrambleMeta() {"], [18, "    int aggblockCount = 2;"], [19, "    ScrambleMeta meta = new ScrambleMeta();"], [20, "    meta.insertScrambleMetaEntry(\"myschema\", \"mytable\","], [21, "        Scrambler.getAggregationBlockColumn(),"], [22, "        Scrambler.getSubsampleColumn(),"], [23, "        Scrambler.getTierColumn(),"], [24, "        aggblockCount);"], [25, "    return meta;"], [31, "        ColumnOp.count(),"], [32, "        new BaseTable(\"myschema\", \"mytable\", \"t\"));"], [33, "    AggExecutionNode aggnode = AggExecutionNode.create(aggQuery, \"myschema\");"], [35, "    ScrambleMeta scrambleMeta = generateTestScrambleMeta();"], [36, "    QueryExecutionNode converted = block.convertToProgressiveAgg(scrambleMeta);"]]}, "num_lines_added": 82, "num_lines_removed": 14}