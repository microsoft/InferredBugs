{"hash": "f56d40d81ba38f02a48932cccd8a33352f819d36", "message": "basic bootstrapping works with correct column labels", "file_num_lines": 310, "diff_parsed": {"added": [[3, "import java.util.ArrayList;"], [13, "import edu.umich.verdict.exceptions.VerdictException;"], [18, "\tfinal String RAND_COLNAME = vc.getConf().get(\"bootstrap_random_value_colname\");"], [19, ""], [20, "\tfinal String MULTIPLICITY = vc.getConf().get(\"bootstrap_multiplicity_colname\");"], [21, ""], [22, "\tprotected String resampleMethod;"], [23, ""], [67, "\t\tresampleMethod = \"con\";"], [70, "\tpublic void setResampleMethod(String m) throws VerdictException {"], [71, "\t\tif (m.equals(\"con\") || m.equals(\"1\")) {"], [72, "\t\t\tthrow new VerdictException(\"Unexpected resample method: \" + m);"], [73, "\t\t}"], [74, "\t\tresampleMethod = m;"], [75, "\t}"], [88, "\t\tStringBuilder sql = new StringBuilder(2000);"], [89, ""], [90, "\t\t// this statement computes the mean value"], [91, "\t\tAnalyticSelectStatementRewriter meanRewriter = new AnalyticSelectStatementRewriter(vc, queryString);"], [92, "\t\tmeanRewriter.setDepth(depth+1);"], [93, "\t\tmeanRewriter.setIndentLevel(defaultIndent + 6);"], [94, "\t\tString mainSql = meanRewriter.visit(ctx);"], [95, "\t\tcumulativeReplacedTableSources.putAll(meanRewriter.getCumulativeSampleTables());"], [96, ""], [97, "\t\t// this statement computes the standard deviation"], [98, "\t\tBootstrapSelectStatementRewriter varianceRewriter = new BootstrapSelectStatementRewriter(vc, queryString);"], [99, "\t\tvarianceRewriter.setDepth(depth+1);"], [100, "\t\tvarianceRewriter.setIndentLevel(defaultIndent + 6);"], [101, "\t\tString subSql = varianceRewriter.varianceComputationStatement(ctx);"], [102, ""], [103, "\t\tString leftAlias = genAlias();"], [104, "\t\tString rightAlias = genAlias();"], [105, ""], [106, "\t\t// we combine those two statements using join."], [107, "\t\tList<Pair<String, String>> thisColumnName2Aliases = new ArrayList<Pair<String, String>>();"], [108, ""], [109, "\t\tList<Pair<String, String>> leftColName2Aliases = meanRewriter.getColName2Aliases();"], [110, "//\t\tList<Boolean> leftAggColIndicator = meanRewriter.getAggregateColumnIndicator();"], [111, ""], [112, "\t\tList<Pair<String, String>> rightColName2Aliases = varianceRewriter.getColName2Aliases();"], [113, "//\t\tList<Boolean> rightAggColIndicator = varianceRewriter.getAggregateColumnIndicator();"], [114, ""], [115, "\t\tsql.append(String.format(\"%sSELECT\", indentString));"], [116, "\t\tint leftSelectElemIndex = 0;"], [117, "\t\tint totalSelectElemIndex = 0;"], [118, "\t\tfor (Pair<String, String> colName2Alias : leftColName2Aliases) {"], [119, "\t\t\tleftSelectElemIndex++;"], [120, "\t\t\tif (leftSelectElemIndex == 1) sql.append(\" \");"], [121, "\t\t\telse sql.append(\", \");"], [122, ""], [123, "\t\t\tif (meanRewriter.isAggregateColumn(leftSelectElemIndex)) {"], [124, "\t\t\t\t// mean"], [125, "\t\t\t\ttotalSelectElemIndex++;"], [126, "\t\t\t\tString alias = genAlias();"], [127, "\t\t\t\tsql.append(String.format(\"%s.%s AS %s\", leftAlias, colName2Alias.getRight(), alias));"], [128, "\t\t\t\tthisColumnName2Aliases.add(Pair.of(colName2Alias.getLeft(), alias));"], [129, ""], [130, "\t\t\t\t// error (standard deviation * 1.96 (for 95% confidence interval))"], [131, "\t\t\t\ttotalSelectElemIndex++;"], [132, "\t\t\t\talias = genAlias();"], [133, "\t\t\t\tString matchingAliasName = null;"], [134, "\t\t\t\tfor (Pair<String, String> r : rightColName2Aliases) {"], [135, "\t\t\t\t\tif (colName2Alias.getLeft().equals(r.getLeft())) {"], [136, "\t\t\t\t\t\tmatchingAliasName = r.getRight();"], [137, "\t\t\t\t\t}"], [138, "\t\t\t\t}"], [139, "\t\t\t\tsql.append(String.format(\", %s.%s AS %s\", rightAlias, matchingAliasName, alias));"], [140, "\t\t\t\tthisColumnName2Aliases.add(Pair.of(colName2Alias.getLeft(), alias));"], [141, ""], [142, "\t\t\t\tmeanColIndex2ErrColIndex.put(totalSelectElemIndex-1, totalSelectElemIndex);"], [143, "\t\t\t} else {"], [144, "\t\t\t\ttotalSelectElemIndex++;"], [145, "\t\t\t\tsql.append(String.format(\"%s.%s AS %s\", leftAlias, colName2Alias.getRight(), colName2Alias.getRight()));"], [146, "\t\t\t\tthisColumnName2Aliases.add(Pair.of(colName2Alias.getLeft(), colName2Alias.getRight()));"], [147, "\t\t\t}"], [148, "\t\t}"], [149, "\t\tcolName2Aliases = thisColumnName2Aliases;"], [150, ""], [151, "\t\tsql.append(String.format(\"\\n%sFROM (\\n\", indentString));"], [152, "\t\tsql.append(mainSql);"], [153, "\t\tsql.append(String.format(\"\\n%s     ) AS %s\", indentString, leftAlias));"], [154, "\t\tsql.append(\" LEFT JOIN (\\n\");"], [155, "\t\tsql.append(subSql);"], [156, "\t\tsql.append(String.format(\"%s) AS %s\", indentString, rightAlias));"], [157, "\t\tsql.append(String.format(\" ON %s.l_shipmode = %s.l_shipmode\", leftAlias, rightAlias));"], [158, ""], [159, "\t\treturn sql.toString();"], [160, "\t}"], [161, ""], [162, "\tprotected String visitQuery_specificationForSingleTrial(VerdictSQLParser.Query_specificationContext ctx) {"], [163, "\t\treturn super.visitQuery_specification(ctx);"], [164, "\t}"], [165, ""], [166, "\tprotected String varianceFunction() {"], [167, "\t\treturn vc.getDbms().varianceFunction();"], [168, "\t}"], [169, ""], [170, "\tprotected String stddevFunction() {"], [171, "\t\treturn vc.getDbms().stddevFunction();"], [172, "\t}"], [173, ""], [174, "\tprotected String varianceComputationStatement(VerdictSQLParser.Query_specificationContext ctx) {"], [182, "\t\t\tsingleRewriter.setIndentLevel(defaultIndent + 6);"], [183, "\t\t\tsingleRewriter.setDepth(depth+1);"], [188, "\t\t\tif (i > 0) unionedFrom.append(String.format(\"\\n%s    UNION\\n\", indentString));"], [193, "\t\tsql.append(String.format(\"%sSELECT\", indentString));"], [200, "\t\t\t\tsql.append(String.format(\"%s(%s) AS %s\","], [201, "\t\t\t\t\t\tstddevFunction(), e.getRight(), alias));"], [209, "\t\tsql.append(String.format(\"\\n%sFROM (\\n\", indentString));"], [211, "\t\tsql.append(String.format(\"\\n%s) AS %s\", indentString, genAlias()));"], [212, "\t\tsql.append(String.format(\"\\n%sGROUP BY\", indentString));"], [252, "\t\treturn multiplicityExpression(resampleMethod);"]], "deleted": [[80, "\t\t\tsingleRewriter.setIndentLevel(2);"], [81, "\t\t\tsingleRewriter.setDepth(1);"], [86, "\t\t\tif (i > 0) unionedFrom.append(\"\\n  UNION\\n\");"], [91, "\t\tsql.append(\"SELECT\");"], [98, "\t\t\t\tsql.append(String.format(\"AVG(%s) AS %s\","], [99, "\t\t\t\t\t\te.getRight(), alias));"], [107, "\t\tsql.append(\"\\nFROM (\\n\");"], [109, "\t\tsql.append(\"\\n) AS t\");"], [110, "\t\tsql.append(\"\\nGROUP BY\");"], [124, "\tprotected String visitQuery_specificationForSingleTrial(VerdictSQLParser.Query_specificationContext ctx) {"], [125, "\t\treturn super.visitQuery_specification(ctx);"], [126, "\t}"], [127, ""], [154, "\t\treturn multiplicityExpression(\"con\");"], [157, "\tfinal String RAND_COLNAME = vc.getConf().get(\"bootstrap_random_value_colname\");"], [158, "\tfinal String MULTIPLICITY = vc.getConf().get(\"bootstrap_multiplicity_colname\");"], [159, ""]]}, "num_lines_added": 112, "num_lines_removed": 17}