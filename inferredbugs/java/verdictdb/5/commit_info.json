{"hash": "013a8434568e04fe815a50d7081999ceb7954e20", "message": "approx relation construction works; but unnecessary join on __vpart should be removed", "file_num_lines": 157, "diff_parsed": {"added": [[4, "import java.util.Arrays;"], [13, "import edu.umich.verdict.relation.expr.BinaryOpExpr;"], [15, "import edu.umich.verdict.relation.expr.ConstantExpr;"], [45, "\t\tExactRelation r = rewriteWithPartition(true);"], [46, ""], [47, "\t\t// construct a new list of select elements. the last element is __vpart, which should be omitted."], [48, "\t\t// newElems and newAggs hold almost the same info; just replicate them to follow the structure"], [49, "\t\t// of AggregatedRelation-ProjectedRelation."], [50, "\t\tList<SelectElem> newElems = new ArrayList<SelectElem>();"], [51, "\t\tList<Expr> newAggs = new ArrayList<Expr>();"], [52, "\t\tList<SelectElem> elems = ((ProjectedRelation) r).getSelectElems();"], [53, "\t\tfor (int i = 0; i < elems.size() - 1; i++) {"], [54, "\t\t\tSelectElem elem = elems.get(i);"], [55, "\t\t\tif (!elem.isagg()) {"], [56, "\t\t\t\tnewElems.add(new SelectElem(ColNameExpr.from(elem.getAlias()), elem.getAlias()));"], [57, "\t\t\t} else {"], [58, "\t\t\t\tif (elem.getAlias().equals(partitionSizeAlias)) {"], [59, "\t\t\t\t\tcontinue;"], [60, "\t\t\t\t}"], [61, ""], [62, "\t\t\t\tColNameExpr est = new ColNameExpr(elem.getAlias(), r.getAliasName());"], [63, "\t\t\t\tColNameExpr psize = new ColNameExpr(partitionSizeAlias, r.getAliasName());"], [64, ""], [65, "\t\t\t\t// average estimate"], [66, "\t\t\t\tExpr averaged = null;"], [67, "\t\t\t\tif (elem.getExpr().isCountDistinct()) {"], [68, "\t\t\t\t\t// for count-distinct (i.e., universe samples), weighted average should not be used."], [69, "\t\t\t\t\taveraged = FuncExpr.round(FuncExpr.avg(est));"], [70, "\t\t\t\t} else {"], [71, "\t\t\t\t\t// weighted average"], [72, "\t\t\t\t\taveraged = BinaryOpExpr.from(FuncExpr.sum(BinaryOpExpr.from(est, psize, \"*\")),"], [73, "\t\t                    \t\t\t\t\t  FuncExpr.sum(psize), \"/\");"], [74, "\t\t\t\t\tif (elem.getExpr().isCount()) {"], [75, "\t\t\t\t\t\taveraged = FuncExpr.round(averaged);"], [76, "\t\t\t\t\t}"], [77, "\t\t\t\t}"], [78, "\t\t\t\tnewElems.add(new SelectElem(averaged, elem.getAlias()));"], [79, "\t\t\t\tnewAggs.add(averaged);"], [80, ""], [81, "\t\t\t\t// error estimation"], [82, "\t\t\t\t// scale by sqrt(subsample size) / sqrt(sample size)"], [83, "\t\t\t\tExpr error = BinaryOpExpr.from("], [84, "\t\t\t\t\t\t\t\tBinaryOpExpr.from(FuncExpr.stddev(est), FuncExpr.sqrt(FuncExpr.avg(psize)), \"*\"),"], [85, "\t\t\t\t\t\t\t\tFuncExpr.sqrt(FuncExpr.sum(psize)),"], [86, "\t\t\t\t\t\t\t\t\"/\");"], [87, "\t\t\t\terror = BinaryOpExpr.from(error, ConstantExpr.from(confidenceIntervalMultiplier()), \"*\");"], [88, "\t\t\t\tnewElems.add(new SelectElem(error, Relation.errorBoundColumn(elem.getAlias())));"], [89, "\t\t\t\tnewAggs.add(error);"], [93, "\t\t// this extra aggregation stage should be grouped by non-agg elements except for __vpart"], [94, "\t\tList<Expr> newGroupby = new ArrayList<Expr>();"], [95, "\t\tfor (SelectElem elem : elems) {"], [96, "\t\t\tif (!elem.isagg() && !elem.getAlias().equals(partitionColumnName())) {"], [97, "\t\t\t\tnewGroupby.add(ColNameExpr.from(elem.getAlias()));"], [100, "\t\tr = new GroupedRelation(vc, r, newGroupby);"], [101, "\t\tr = new AggregatedRelation(vc, r, newAggs);"], [102, "\t\tr = new ProjectedRelation(vc, r, newElems);"], [107, "//\t@Override"], [108, "//\tpublic ExactRelation rewriteWithSubsampledErrorBounds() {"], [109, "//\t\tExactRelation newSource = source.rewriteWithSubsampledErrorBounds();"], [110, "//\t\tList<SelectElem> sourceElems = null; // newSource.getSelectList();"], [111, "//\t\tSet<String> colAliases = new HashSet<String>();"], [112, "//\t\tfor (SelectElem e : sourceElems) {"], [113, "//\t\t\tif (e.aliasPresent()) {"], [114, "//\t\t\t\t// we're only interested in the columns for which aliases are present."], [115, "//\t\t\t\t// note that every column with aggregate function must have an alias (enforced by ColNameExpr class)."], [116, "//\t\t\t\tcolAliases.add(e.getAlias());"], [117, "//\t\t\t}"], [118, "//\t\t}"], [119, "//"], [120, "//\t\t// we search for error bound columns based on the assumption that the error bound columns have the suffix attached"], [121, "//\t\t// to the original agg columns. The suffix is obtained from the ApproxRelation#errColSuffix() method."], [122, "//\t\t// ApproxAggregatedRelation#rewriteWithSubsampledErrorBounds() method is responsible for having those columns."], [123, "//\t\tList<SelectElem> elemsWithErr = new ArrayList<SelectElem>();"], [124, "//\t\tfor (SelectElem e : elems) {"], [125, "//\t\t\telemsWithErr.add(e);"], [126, "//\t\t\tString errColName = errColName(e.getExpr().getText());"], [127, "//\t\t\tif (colAliases.contains(errColName)) {"], [128, "//\t\t\t\telemsWithErr.add(new SelectElem(new ColNameExpr(errColName), errColName));"], [129, "//\t\t\t}"], [130, "//\t\t}"], [131, "//"], [132, "//\t\tExactRelation r = new ProjectedRelation(vc, newSource, elemsWithErr);"], [133, "//\t\tr.setAliasName(getAliasName());"], [134, "//\t\treturn r;"], [135, "//\t}"], [136, ""], [137, "\t/**"], [138, "\t * Returns an ExactProjectRelation instance. The returned relation must include the partition column."], [139, "\t * If the source relation is an ApproxAggregatedRelation, we can expect that an extra groupby column is inserted for"], [140, "\t * propagating the partition column."], [141, "\t */"], [143, "\tprotected ExactRelation rewriteWithPartition() {"], [144, "\t\treturn rewriteWithPartition(false);"], [145, "\t}"], [146, ""], [147, "\t/**"], [148, "\t * Inserts extra information if extra is set to true. The extra information is:"], [149, "\t * 1. partition size."], [150, "\t * @param extra"], [151, "\t * @return"], [152, "\t */"], [153, "\tprotected ExactRelation rewriteWithPartition(boolean extra) {"], [155, "\t\tList<SelectElem> newElems = new ArrayList<SelectElem>();"], [156, ""], [157, "\t\tint index = 0;"], [158, "\t\tfor (SelectElem elem : elems) {"], [159, "\t\t\t// we insert the non-agg element as it is"], [160, "\t\t\t// for an agg element, we found the expression in the source relation."], [161, "\t\t\t// if there exists an agg element, source relation must be an instance of AggregatedRelation."], [162, "\t\t\tif (!elem.getExpr().isagg()) {"], [163, "\t\t\t\tnewElems.add(elem);"], [164, "\t\t\t} else {"], [165, "\t\t\t\tExpr agg = ((AggregatedRelation) newSource).getAggList().get(index++);"], [166, "\t\t\t\tnewElems.add(new SelectElem(agg, elem.getAlias()));"], [167, "//\t\t\t\tExpr agg_err = ((AggregatedRelation) newSource).getAggList().get(index++);"], [168, "//\t\t\t\tnewElems.add(new SelectElem(agg_err, Relation.errorBoundColumn(elem.getAlias())));"], [169, "\t\t\t}"], [170, "\t\t}"], [171, ""], [172, "\t\t// partition size only if the newSource is an instance of AggregatedRelation"], [173, "\t\tif (extra) {"], [174, "\t\t\tnewElems.add(new SelectElem(FuncExpr.count(), partitionSizeAlias));"], [175, "\t\t}"], [176, ""], [177, "\t\t// partition number"]], "deleted": [[42, "\t\tExactRelation newSource = source.rewriteWithSubsampledErrorBounds();"], [43, "\t\tList<SelectElem> sourceElems = null; // newSource.getSelectList();"], [44, "\t\tSet<String> colAliases = new HashSet<String>();"], [45, "\t\tfor (SelectElem e : sourceElems) {"], [46, "\t\t\tif (e.aliasPresent()) {"], [47, "\t\t\t\t// we're only interested in the columns for which aliases are present."], [48, "\t\t\t\t// note that every column with aggregate function must have an alias (enforced by ColNameExpr class)."], [49, "\t\t\t\tcolAliases.add(e.getAlias());"], [53, "\t\t// we search for error bound columns based on the assumption that the error bound columns have the suffix attached"], [54, "\t\t// to the original agg columns. The suffix is obtained from the ApproxRelation#errColSuffix() method."], [55, "\t\t// ApproxAggregatedRelation#rewriteWithSubsampledErrorBounds() method is responsible for having those columns."], [56, "\t\tList<SelectElem> elemsWithErr = new ArrayList<SelectElem>();"], [57, "\t\tfor (SelectElem e : elems) {"], [58, "\t\t\telemsWithErr.add(e);"], [59, "\t\t\tString errColName = errColName(e.getExpr().getText());"], [60, "\t\t\tif (colAliases.contains(errColName)) {"], [61, "\t\t\t\telemsWithErr.add(new SelectElem(new ColNameExpr(errColName), errColName));"], [65, "\t\tExactRelation r = new ProjectedRelation(vc, newSource, elemsWithErr);"], [66, "\t\tr.setAliasName(getAliasName());"], [71, "\tpublic ExactRelation rewriteWithPartition() {"], [73, "\t\tList<SelectElem> newElems = new ArrayList<SelectElem>(elems);"]]}, "num_lines_added": 125, "num_lines_removed": 21}