{"hash": "5afc9d2696e4047d32eec6fe4a94b371a8d77c52", "message": "aggregations for mean estimations and error estimations are computed separately.", "file_num_lines": 272, "diff_parsed": {"added": [[80, "\t\t\t// odd columns are for mean estimation"], [81, "\t\t\t// even columns are for err estimation"], [82, "\t\t\tif (i%2 == 1) continue;"], [83, ""], [84, "\t\t\tSelectElem meanElem = selectElems.get(i);"], [85, "\t\t\tSelectElem errElem = selectElems.get(i+1);"], [86, "\t\t\tColNameExpr est = new ColNameExpr(meanElem.getAlias(), r.getAliasName());"], [87, "\t\t\tColNameExpr errEst = new ColNameExpr(errElem.getAlias(), r.getAliasName());"], [90, "\t\t\tExpr originalAggExpr = elems.get(i/2).getExpr();"], [91, ""], [93, "\t\t\tExpr meanEstExpr = null;"], [94, "\t\t\tif (originalAggExpr.isCountDistinct()) {"], [95, "\t\t\t\tmeanEstExpr = FuncExpr.round(FuncExpr.avg(est));"], [96, "\t\t\t} else {"], [97, "\t\t\t\tmeanEstExpr = BinaryOpExpr.from(FuncExpr.sum(BinaryOpExpr.from(est, psize, \"*\")),"], [98, "\t                    \t\t\t\t\tFuncExpr.sum(psize), \"/\");"], [99, "\t\t\t\tif (originalAggExpr.isCount()) {"], [100, "\t\t\t\t\tmeanEstExpr = FuncExpr.round(meanEstExpr);"], [103, "\t\t\tfinalAgg.add(new SelectElem(meanEstExpr, meanElem.getAlias()));"], [106, "\t\t\tExpr errEstExpr = BinaryOpExpr.from("], [107, "\t\t\t\t\tBinaryOpExpr.from(FuncExpr.stddev(errEst), FuncExpr.sqrt(FuncExpr.avg(psize)), \"*\"),"], [108, "\t\t\t\t\tFuncExpr.sqrt(FuncExpr.sum(psize)),"], [109, "\t\t\t\t\t\"/\");"], [110, "\t\t\tfinalAgg.add(new SelectElem(errEstExpr, errElem.getAlias()));"], [162, "\t\t\t// for mean estimation"], [163, "\t\t\tExpr scaled = transformForSingleFunctionWithPartitionSize(e.getExpr(), samplingProbCols, groupby, newSource.partitionColumn(), sub, false);"], [165, ""], [166, "\t\t\t// for error estimation"], [167, "\t\t\tExpr scaledErr = transformForSingleFunctionWithPartitionSize(e.getExpr(), samplingProbCols, groupby, newSource.partitionColumn(), sub, true);"], [168, "\t\t\tscaledElems.add(new SelectElem(scaledErr, errColName(e.getAlias())));"], [199, "\t\t\tfinal Map<String, String> tablesNamesSub,"], [200, "\t\t\tfinal boolean forErrorEst) {"], [221, "\t\t\t\t\t\test = scaleWithPartitionSize(est, groupbyExpr, partitionCol, forErrorEst);"], [237, "\t\t\t\t\t\t\test = scaleWithPartitionSize(est, groupbyExpr, partitionCol, forErrorEst);"], [244, "\t\t\t\t\t\test = scaleWithPartitionSize(est, groupbyExpr, partitionCol, forErrorEst);"], [274, "\tprivate Expr scaleWithPartitionSize(Expr expr, List<Expr> groupby, ColNameExpr partitionCol, boolean forErrorEst) {"], [276, ""], [277, "\t\tExpr scaled = null;"], [278, ""], [279, "\t\tif (!forErrorEst) {"], [280, "\t\t\tif (expr.isCountDistinct()) {"], [281, "\t\t\t\t// scale by the partition count. the ratio between average partition size and the sum of them should be"], [282, "\t\t\t\t// almost same as the inverse of the partition count."], [283, "\t\t\t\tscaled = BinaryOpExpr.from(expr, new FuncExpr(FuncExpr.FuncName.AVG, FuncExpr.count(), new OverClause(groupby)), \"/\");"], [284, "\t\t\t\tscaled = BinaryOpExpr.from(scaled, new FuncExpr(FuncExpr.FuncName.SUM, FuncExpr.count(), new OverClause(groupby)), \"*\");"], [285, "\t\t\t} else {"], [286, "\t\t\t\tscaled = BinaryOpExpr.from(expr, FuncExpr.count(), \"/\");"], [287, "\t\t\t\tscaled = BinaryOpExpr.from(scaled, new FuncExpr(FuncExpr.FuncName.SUM, FuncExpr.count(), new OverClause(groupby)), \"*\");"], [288, "\t\t\t}"], [289, "\t\t} else {"], [290, "\t\t\t// for error estimations, we do not exactly scale with the partition size ratios."], [291, "\t\t\tscaled = BinaryOpExpr.from(expr, new FuncExpr(FuncExpr.FuncName.AVG, FuncExpr.count(), new OverClause(groupby)), \"/\");"], [292, "\t\t\tscaled = BinaryOpExpr.from(scaled, new FuncExpr(FuncExpr.FuncName.SUM, FuncExpr.count(), new OverClause(groupby)), \"*\");"], [293, "\t\t}"], [294, ""]], "deleted": [[70, "\tprivate final String groupSizeAlias = \"__vgsize\";"], [71, ""], [82, "\t\t\tSelectElem e = selectElems.get(i);"], [83, "\t\t\tColNameExpr est = new ColNameExpr(e.getAlias(), r.getAliasName());"], [87, "//\t\t\tExpr meanEst = BinaryOpExpr.from("], [88, "//\t\t\t\t\t\t\tFuncExpr.sum(BinaryOpExpr.from(est, psize, \"*\")),"], [89, "//\t\t\t\t\t\t\tFuncExpr.sum(psize), \"/\");"], [90, "\t\t\tExpr meanEst = FuncExpr.avg(est);"], [91, "\t\t\tExpr originalAggExpr = elems.get(i).getExpr();"], [92, "\t\t\tif (originalAggExpr instanceof FuncExpr) {"], [93, "\t\t\t\tif (((FuncExpr) originalAggExpr).getFuncName().equals(FuncExpr.FuncName.COUNT)"], [94, "\t\t\t\t\t|| ((FuncExpr) originalAggExpr).getFuncName().equals(FuncExpr.FuncName.COUNT_DISTINCT)) {"], [95, "\t\t\t\t\tmeanEst = FuncExpr.round(meanEst);"], [98, "\t\t\tfinalAgg.add(new SelectElem(meanEst, e.getAlias()));"], [101, "\t\t\tfinalAgg.add(new SelectElem("], [102, "\t\t\t\t\tBinaryOpExpr.from("], [103, "\t\t\t\t\t\t\tBinaryOpExpr.from(FuncExpr.stddev(est), FuncExpr.sqrt(FuncExpr.avg(psize)), \"*\"),"], [104, "\t\t\t\t\t\t\tFuncExpr.sqrt(FuncExpr.sum(psize)),"], [105, "\t\t\t\t\t\t\t\"/\"),"], [106, "\t\t\t\t\te.getAlias() + errColSuffix()));"], [158, "//\t\t\tExpr scaled = transformForSingleFunction(e.getExpr(), samplingProbCols);"], [159, "\t\t\tExpr scaled = transformForSingleFunctionWithPartitionSize(e.getExpr(), samplingProbCols, groupby, newSource.partitionColumn(), sub);"], [191, "\t\t\tfinal Map<String, String> tablesNamesSub) {"], [212, "\t\t\t\t\t\test = scaleWithPartitionSize(est, groupbyExpr, partitionCol);"], [228, "\t\t\t\t\t\t\test = scaleWithPartitionSize(est, groupbyExpr, partitionCol);"], [235, "\t\t\t\t\t\test = scaleWithPartitionSize(est, groupbyExpr, partitionCol);"], [265, "\tprivate Expr scaleWithPartitionSize(Expr expr, List<Expr> groupby, ColNameExpr partitionCol) {"], [267, "\t\tExpr scaled = BinaryOpExpr.from(expr, new FuncExpr(FuncExpr.FuncName.AVG, FuncExpr.count(), new OverClause(groupby)), \"/\");"], [268, "\t\tscaled = BinaryOpExpr.from(scaled, new FuncExpr(FuncExpr.FuncName.SUM, FuncExpr.count(), new OverClause(groupby)), \"*\");"]]}, "num_lines_added": 55, "num_lines_removed": 29}