{"hash": "ecb8bbed75ab1cf7ae0fcd8c51dea4e304cedebd", "message": "aliases bug fixed; runs for 6 instacart queries", "file_num_lines": 281, "diff_parsed": {"added": [[8, "import java.util.Set;"], [18, "import edu.umich.verdict.util.NameHelpers;"], [19, "import edu.umich.verdict.util.TypeCasting;"], [39, "\t// Records the alias information from the derived tables; we will need this to replace"], [40, "\t// The key is the alias name of a derived table."], [41, "\t// The value is the map of original column name and its Aliases (i.e., the original col name and its alias)."], [42, "\tprotected Map<String, Map<String, Alias>> derivedTableColName2Aliases;"], [43, ""], [72, "\t\tderivedTableColName2Aliases = new HashMap<String, Map<String, Alias>>();"], [193, "\t\t\t// We use a baseRewriter to prevent that \"COUNT(*)\" is rewritten to \"COUNT(*) * (1/sample_ratio)\""], [195, "\t\t\tString tabColName = baseRewriter.visit(ctx.expression());"], [196, "\t\t\tString tabName = NameHelpers.tabNameOfColName(tabColName);"], [197, "\t\t\tTableUniqueName tabUniqueName = NameHelpers.tabUniqueNameOfColName(vc, tabColName);"], [198, "\t\t\tString colName = NameHelpers.colNameOfColName(tabColName);"], [199, ""], [200, "\t\t\t// if a table name is specified, we change it to its alias name."], [201, "\t\t\tif (tableAliases.containsKey(tabUniqueName)) {"], [202, "\t\t\t\ttabName = tableAliases.get(tabUniqueName).toString();"], [203, "\t\t\t}"], [204, ""], [205, "\t\t\t// if there was derived table(s), we may need to substitute aliased name for the colName."], [206, "\t\t\tfor (Map.Entry<String, Map<String, Alias>> e : derivedTableColName2Aliases.entrySet()) {"], [207, "\t\t\t\tString derivedTabName = e.getKey();"], [208, ""], [209, "\t\t\t\tif (tabName.length() > 0 && !tabName.equals(derivedTabName)) {"], [210, "\t\t\t\t\t// this is the case where there are more than one derived tables, and a user specifically referencing"], [211, "\t\t\t\t\t// a column in one of those derived tables."], [212, "\t\t\t\t\tcontinue;"], [213, "\t\t\t\t}"], [214, "\t\t\t\tif (e.getValue().containsKey(colName)) {"], [215, "\t\t\t\t\tAlias alias = e.getValue().get(colName);"], [216, "\t\t\t\t\tif (alias.autoGenerated()) {"], [217, "\t\t\t\t\t\tcolName = alias.toString();"], [218, "\t\t\t\t\t}"], [219, "\t\t\t\t}"], [220, "\t\t\t}"], [221, ""], [222, "\t\t\tif (tabName.length() > 0) {"], [223, "\t\t\t\telem.append(String.format(\"%s.%s\", tabName, colName));"], [224, "\t\t\t} else {"], [225, "\t\t\t\telem.append(colName);"], [226, "\t\t\t}"], [286, "\t\t// As we process the FROM clause, we need to get alias information as well."], [348, "\tpublic String visitDerived_table_source_item(VerdictSQLParser.Derived_table_source_itemContext ctx) {"], [352, "\t\tString derivedTable = subqueryVisitor.visit(ctx.derived_table().subquery().select_statement().query_expression());"], [354, ""], [355, "\t\tAlias alias = new Alias(\"subquery\", ctx.as_table_alias().getText());"], [356, "\t\tderivedTableColName2Aliases.put(alias.toString(), TypeCasting.listToMap(subqueryVisitor.getColName2Aliases()));"], [357, ""], [358, "\t\treturn String.format(\"(\\n%s) %s \", derivedTable, alias);"], [361, "//\t@Override"], [362, "//\tpublic String visitSubquery(VerdictSQLParser.SubqueryContext ctx) {"], [363, "//\t\tAnalyticSelectStatementRewriter subqueryVisitor = new AnalyticSelectStatementRewriter(vc, queryString);"], [364, "//\t\tsubqueryVisitor.setIndentLevel(defaultIndent + 4);"], [365, "//\t\tsubqueryVisitor.setDepth(depth+1);"], [366, "//\t\tString ret = subqueryVisitor.visit(ctx.select_statement().query_expression());"], [367, "//\t\tcumulativeReplacedTableSources.putAll(subqueryVisitor.getCumulativeSampleTables());"], [368, "////\t\tderivedTableColName2Aliases.put()"], [369, "//\t\treturn ret;"], [370, "//\t}"], [371, ""], [378, "\t\t\tif (NameHelpers.colNameOfColName(e.getKey()).equals(groupName)) {"]], "deleted": [[183, "\t\t\telem.append(visit(ctx.expression()));"], [186, "\t\t\tString colName = baseRewriter.visit(ctx.expression());"], [307, "\tpublic String visitSubquery(VerdictSQLParser.SubqueryContext ctx) {"], [311, "\t\tString ret = subqueryVisitor.visit(ctx.select_statement().query_expression());"], [313, "\t\treturn ret;"], [322, "\t\t\tif (e.getKey().equals(groupName)) {"]]}, "num_lines_added": 62, "num_lines_removed": 6}