    public void triggerTest(String pack, List<String> tests) throws Exception {

        String operSys = System.getProperty("os.name").toLowerCase();
        File f = new File(System.getProperty("user.dir") + "/target/appiumlogs/");
        if (!f.exists()) {
            System.out.println("creating directory: " + "Logs");
            boolean result = false;
            try {
                f.mkdir();
                result = true;
            } catch (SecurityException se) {
                se.printStackTrace();
            }
        }

        input = new FileInputStream("config.properties");
        prop.load(input);

        if (deviceConf.getDevices() != null) {
            devices = deviceConf.getDevices();
            deviceCount = devices.size() / 3;
            File adb_logs = new File(System.getProperty("user.dir") + "/target/adblogs/");
            if (!adb_logs.exists()) {
                System.out.println("creating directory: " + "ADBLogs");
                boolean result = false;
                try {
                    adb_logs.mkdir();
                    result = true;
                } catch (SecurityException se) {
                    se.printStackTrace();
                }
            }
            createSnapshotFolderAndroid(deviceCount, "android");
        }
        if (operSys.contains("mac")) {
            if (iosDevice.getIOSUDID() != null) {
                iosDevice.checkExecutePermissionForIOSDebugProxyLauncher();
                iOSdevices = iosDevice.getIOSUDIDHash();
                deviceCount += iOSdevices.size();
                createSnapshotFolderiOS(deviceCount, "iPhone");
            }

        }
        if (deviceCount == 0) {
            System.exit(0);
        }

        System.out.println("Total Number of devices detected::" + deviceCount);
        System.out.println("starting running tests in threads");

        testcases = new ArrayList<Class>();

        if (prop.getProperty("FRAMEWORK").equalsIgnoreCase("testng")) {
            // final String pack = "com.paralle.tests"; // Or any other package
            PackageUtil.getClasses(pack).stream().forEach(s -> {
                if (s.toString().contains("Test")) {
                    System.out.println("forEach: " + testcases.add((Class) s));
                }
            });

            if (prop.getProperty("RUNNER").equalsIgnoreCase("distribute")) {
                myTestExecutor.runMethodParallelAppium(tests, pack, deviceCount, "distribute");

            }
            if (prop.getProperty("RUNNER").equalsIgnoreCase("parallel")) {
                myTestExecutor.runMethodParallelAppium(tests, pack, deviceCount, "parallel");
            }
        }

        if (prop.getProperty("FRAMEWORK").equalsIgnoreCase("cucumber")) {
            //addPluginToCucumberRunner();
            if (prop.getProperty("RUNNER").equalsIgnoreCase("distribute")) {
                myTestExecutor.distributeTests(deviceCount);
            } else if (prop.getProperty("RUNNER").equalsIgnoreCase("parallel")) {
                //addPluginToCucumberRunner();
                myTestExecutor.parallelTests(deviceCount);
            }
        }
    }