{"hash": "328b572ec806a4d38451342846320b122c99c43f", "message": "scheduler impl, global 2 schedule q required", "file_num_lines": 270, "diff_parsed": {"added": [[57, "    public static final int SCHEDULE_PER_PROFILE = 32;"], [107, "                if ( scheduler.getBackoffStrategy().isSleeping(emptyCount) && System.currentTimeMillis()-created > 3000 ) {"], [108, "                    if ( queueList.size() == 0 ) {"], [109, "                        shutDown = true;"], [110, "                    } else {"], [111, "                        scheduler.tryStopThread(this);"], [112, "                    }"], [113, "                }"], [117, "        for ( int i = 0; i < 100; i++ ) {"], [118, "            LockSupport.parkNanos(1000*1000*5);"], [119, "            if ( queueList.size() > 0 ) {"], [120, "                System.out.println(\"Severe: zombie dispatcher thread detected\");"], [121, "                run(); // for now keep things going .."], [122, "                break;"], [123, "            }"], [124, "        }"], [125, "        System.out.println(\"thread died\");"], [130, "    void applyQueueList() {"], [132, "            Queue queues[] = new Queue[queueList.size()];"], [133, "            Queue cbQueues[] = new Queue[queueList.size()];"], [138, "            this.queues = queues;"], [139, "            this.cbQueues = cbQueues;"], [200, "                    Actor actor = (Actor) poll.getTarget();"], [201, "                    actor.__stopped = true;"], [202, "                    removeActor(actor);"], [224, "        ((Actor) poll.getTarget()).__nanos = (((Actor) poll.getTarget()).__nanos * 31 + nanos) / 32;"], [235, "        if (load > 80 && queueList.size() > 1 && System.currentTimeMillis()-created > 1000 ) {"], [239, "                scheduler.rebalance(this);"], [288, "    /**"], [289, "     * @return percentage of queue fill of max actor"], [290, "     */"], [302, "    /**"], [303, "     * @return profiling based load"], [304, "     */"], [305, "    public long getLoadNanos() {"], [306, "        long res = 0;"], [307, "        for (int i = 0; i < queueList.size(); i++) {"], [308, "            Actor a = queueList.get(i);"], [309, "            res += a.__nanos;"], [310, "        }"], [311, "        return res;"], [312, "    }"], [313, ""]], "deleted": [[57, "    public static final int SCHEDULE_PER_PROFILE = 10;"], [114, "    public void applyQueueList() {"], [116, "            if ( queueList.size() == 0 )"], [117, "                shutDown = true;"], [118, "            queues = new Queue[queueList.size()];"], [119, "            cbQueues = new Queue[queueList.size()];"], [184, "                    removeActor((Actor) poll.getTarget());"], [206, "        ((Actor) poll.getTarget()).__nanos = (((Actor) poll.getTarget()).__nanos * 7 + nanos) / 8;"], [217, "        if (load > 80 && queueList.size() > 1 && System.currentTimeMillis()-created > 100 ) {"], [221, "                doSplit();"], [226, "    private void doSplit() {"], [227, "        scheduler.rebalance(this);"], [228, "    }"], [229, ""]]}, "num_lines_added": 43, "num_lines_removed": 14}