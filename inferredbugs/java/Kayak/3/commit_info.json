{"hash": "52dc97b5f4b86cae7337ed943308ab8b3a9507cb", "message": "fixed start page behaviour", "file_num_lines": 75, "diff_parsed": {"added": [[3, "import com.github.kayak.ui.options.Options;"], [4, "import org.netbeans.api.settings.ConvertAsProperties;"], [5, "import org.openide.awt.ActionID;"], [6, "import org.openide.awt.ActionReference;"], [10, "@ConvertAsProperties(dtd = \"-//com.github.kayak.ui.startpage//StartPage//EN\", autostore = false)"], [11, "@TopComponent.Description(preferredID = \"StartPageTopComponent\","], [12, "iconBase=\"org/freedesktop/tango/16x16/mimetypes/text-x-generic.png\","], [13, "persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED)"], [14, "@TopComponent.Registration(mode = \"editor\", openAtStartup = true)"], [15, "@ActionID(category = \"Window\", id = \"com.github.kayak.ui.startpage.StartPageTopComponent\")"], [16, "@ActionReference(path = \"Menu/Window\" , position = 10 )"], [17, "@TopComponent.OpenActionRegistration(displayName = \"#CTL_StartPageTopComponent\","], [18, "preferredID = \"StartPageTopTopComponent\")"], [21, "    public static boolean firstTimeOpen = true;"], [37, "        // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents"], [38, "        private void initComponents() {"], [40, "                jScrollPane2 = new javax.swing.JScrollPane();"], [41, "                jTextPane1 = new javax.swing.JTextPane();"], [42, "                jCheckBox1 = new javax.swing.JCheckBox();"], [44, "                setLayout(new java.awt.BorderLayout(20, 20));"], [46, "                jScrollPane2.setBorder(null);"], [48, "                jTextPane1.setBorder(null);"], [49, "                jTextPane1.setContentType(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, \"StartPageTopComponent.jTextPane1.contentType\")); // NOI18N"], [50, "                jTextPane1.setEditable(false);"], [51, "                jTextPane1.setFont(jTextPane1.getFont());"], [52, "                jTextPane1.setText(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, \"StartPageTopComponent.jTextPane1.text\")); // NOI18N"], [53, "                jTextPane1.setToolTipText(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, \"StartPageTopComponent.jTextPane1.toolTipText\")); // NOI18N"], [54, "                jScrollPane2.setViewportView(jTextPane1);"], [56, "                add(jScrollPane2, java.awt.BorderLayout.CENTER);"], [58, "                org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, \"StartPageTopComponent.jCheckBox1.text\")); // NOI18N"], [59, "                jCheckBox1.addActionListener(new java.awt.event.ActionListener() {"], [60, "                        public void actionPerformed(java.awt.event.ActionEvent evt) {"], [61, "                                jCheckBox1ActionPerformed(evt);"], [62, "                        }"], [63, "                });"], [64, "                add(jCheckBox1, java.awt.BorderLayout.PAGE_END);"], [65, "        }// </editor-fold>//GEN-END:initComponents"], [69, "            Options.setShowStartPage(false);"], [71, "            Options.setShowStartPage(true);"], [74, "        // Variables declaration - do not modify//GEN-BEGIN:variables"], [75, "        private javax.swing.JCheckBox jCheckBox1;"], [76, "        private javax.swing.JScrollPane jScrollPane2;"], [77, "        private javax.swing.JTextPane jTextPane1;"], [78, "        // End of variables declaration//GEN-END:variables"], [82, "        if(firstTimeOpen) {"], [83, "            firstTimeOpen = false;"], [84, "            if(!Options.getShowStartPage()) {"], [85, "                close();"], [86, "            }"], [87, "        }"], [88, "        jCheckBox1.setSelected(!Options.getShowStartPage());"], [101, "    void readProperties(java.util.Properties p) {"]], "deleted": [[1, "/*"], [2, " * To change this template, choose Tools | Templates"], [3, " * and open the template in the editor."], [4, " */"], [7, "import java.util.logging.Logger;"], [10, "import org.openide.windows.WindowManager;"], [11, "//import org.openide.util.ImageUtilities;"], [12, "import org.netbeans.api.settings.ConvertAsProperties;"], [14, "/**"], [15, " * Top component which displays something."], [16, " */"], [17, "@ConvertAsProperties(dtd = \"-//com.github.kayak.ui.startpage//StartPage//EN\","], [18, "autostore = false)"], [21, "    private static StartPageTopComponent instance;"], [22, "    private static boolean showOnStartup;"], [23, "    /** path to the icon used by the component and its open action */"], [24, "//    static final String ICON_PATH = \"SET/PATH/TO/ICON/HERE\";"], [25, "    private static final String PREFERRED_ID = \"StartPageTopComponent\";"], [31, "//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));"], [42, "    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents"], [43, "    private void initComponents() {"], [44, ""], [45, "        jScrollPane2 = new javax.swing.JScrollPane();"], [46, "        jTextPane1 = new javax.swing.JTextPane();"], [47, "        jCheckBox1 = new javax.swing.JCheckBox();"], [48, "        jScrollPane3 = new javax.swing.JScrollPane();"], [49, "        jTextPane3 = new javax.swing.JTextPane();"], [50, "        jPanel1 = new javax.swing.JPanel();"], [51, "        jPanel2 = new javax.swing.JPanel();"], [52, "        jScrollPane1 = new javax.swing.JScrollPane();"], [53, "        jTextPane2 = new javax.swing.JTextPane();"], [54, ""], [55, "        setLayout(new java.awt.BorderLayout(20, 20));"], [56, ""], [57, "        jScrollPane2.setBorder(null);"], [58, ""], [59, "        jTextPane1.setBorder(null);"], [60, "        jTextPane1.setContentType(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, \"StartPageTopComponent.jTextPane1.contentType\")); // NOI18N"], [61, "        jTextPane1.setEditable(false);"], [62, "        jTextPane1.setFont(jTextPane1.getFont().deriveFont(jTextPane1.getFont().getStyle() | java.awt.Font.BOLD, jTextPane1.getFont().getSize()+2));"], [63, "        jTextPane1.setText(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, \"StartPageTopComponent.jTextPane1.text\")); // NOI18N"], [64, "        jScrollPane2.setViewportView(jTextPane1);"], [65, ""], [66, "        add(jScrollPane2, java.awt.BorderLayout.CENTER);"], [67, ""], [68, "        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, \"StartPageTopComponent.jCheckBox1.text\")); // NOI18N"], [69, "        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {"], [70, "            public void actionPerformed(java.awt.event.ActionEvent evt) {"], [71, "                jCheckBox1ActionPerformed(evt);"], [72, "            }"], [73, "        });"], [74, "        add(jCheckBox1, java.awt.BorderLayout.PAGE_END);"], [75, ""], [76, "        jScrollPane3.setBorder(null);"], [77, ""], [78, "        jTextPane3.setBorder(null);"], [79, "        jTextPane3.setEditable(false);"], [80, "        jTextPane3.setText(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, \"StartPageTopComponent.jTextPane3.text\")); // NOI18N"], [81, "        jTextPane3.setPreferredSize(new java.awt.Dimension(200, 25));"], [82, "        jScrollPane3.setViewportView(jTextPane3);"], [83, ""], [84, "        add(jScrollPane3, java.awt.BorderLayout.LINE_START);"], [85, ""], [86, "        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);"], [87, "        jPanel1.setLayout(jPanel1Layout);"], [88, "        jPanel1Layout.setHorizontalGroup("], [89, "            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)"], [90, "            .addGap(0, 1012, Short.MAX_VALUE)"], [91, "        );"], [92, "        jPanel1Layout.setVerticalGroup("], [93, "            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)"], [94, "            .addGap(0, 100, Short.MAX_VALUE)"], [95, "        );"], [97, "        add(jPanel1, java.awt.BorderLayout.PAGE_START);"], [99, "        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));"], [101, "        jScrollPane1.setBorder(null);"], [103, "        jTextPane2.setBorder(null);"], [104, "        jTextPane2.setEditable(false);"], [105, "        jTextPane2.setFont(jTextPane2.getFont());"], [106, "        jTextPane2.setText(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, \"StartPageTopComponent.jTextPane2.text\")); // NOI18N"], [107, "        jTextPane2.setPreferredSize(new java.awt.Dimension(200, 300));"], [108, "        jScrollPane1.setViewportView(jTextPane2);"], [110, "        jPanel2.add(jScrollPane1);"], [112, "        add(jPanel2, java.awt.BorderLayout.LINE_END);"], [113, "    }// </editor-fold>//GEN-END:initComponents"], [117, "            showOnStartup = false;"], [119, "            showOnStartup = true;"], [122, "    // Variables declaration - do not modify//GEN-BEGIN:variables"], [123, "    private javax.swing.JCheckBox jCheckBox1;"], [124, "    private javax.swing.JPanel jPanel1;"], [125, "    private javax.swing.JPanel jPanel2;"], [126, "    private javax.swing.JScrollPane jScrollPane1;"], [127, "    private javax.swing.JScrollPane jScrollPane2;"], [128, "    private javax.swing.JScrollPane jScrollPane3;"], [129, "    private javax.swing.JTextPane jTextPane1;"], [130, "    private javax.swing.JTextPane jTextPane2;"], [131, "    private javax.swing.JTextPane jTextPane3;"], [132, "    // End of variables declaration//GEN-END:variables"], [133, "    /**"], [134, "     * Gets default instance. Do not use directly: reserved for *.settings files only,"], [135, "     * i.e. deserialization routines; otherwise you could get a non-deserialized instance."], [136, "     * To obtain the singleton instance, use {@link #findInstance}."], [137, "     */"], [138, "    public static synchronized StartPageTopComponent getDefault() {"], [139, "        if (instance == null) {"], [140, "            instance = new StartPageTopComponent();"], [141, "        }"], [142, "        return instance;"], [143, "    }"], [144, ""], [145, "    /**"], [146, "     * Obtain the StartPageTopComponent instance. Never call {@link #getDefault} directly!"], [147, "     */"], [148, "    public static synchronized StartPageTopComponent findInstance() {"], [149, "        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);"], [150, "        if (win == null) {"], [151, "            Logger.getLogger(StartPageTopComponent.class.getName()).warning("], [152, "                    \"Cannot find \" + PREFERRED_ID + \" component. It will not be located properly in the window system.\");"], [153, "            return getDefault();"], [154, "        }"], [155, "        if (win instanceof StartPageTopComponent) {"], [156, "            return (StartPageTopComponent) win;"], [157, "        }"], [158, "        Logger.getLogger(StartPageTopComponent.class.getName()).warning("], [159, "                \"There seem to be multiple components with the '\" + PREFERRED_ID"], [160, "                + \"' ID. That is a potential source of errors and unexpected behavior.\");"], [161, "        return getDefault();"], [162, "    }"], [163, ""], [164, "    @Override"], [165, "    public int getPersistenceType() {"], [166, "        if(showOnStartup)"], [167, "            return TopComponent.PERSISTENCE_ALWAYS;"], [168, "        else"], [169, "            return TopComponent.PERSISTENCE_NEVER;"], [170, "    }"], [174, "        // TODO add custom code on component opening"], [179, "        // TODO add custom code on component closing"], [186, "        p.setProperty(\"show\", Boolean.toString(showOnStartup));"], [187, "    }"], [188, ""], [189, "    Object readProperties(java.util.Properties p) {"], [190, "        if (instance == null) {"], [191, "            instance = this;"], [192, "        }"], [193, "        instance.readPropertiesImpl(p);"], [194, "        return instance;"], [197, "    private void readPropertiesImpl(java.util.Properties p) {"], [198, "        String version = p.getProperty(\"version\");"], [199, "        showOnStartup = Boolean.parseBoolean(p.getProperty(\"show\"));"], [202, "    @Override"], [203, "    protected String preferredID() {"], [204, "        return PREFERRED_ID;"], [205, "    }"]]}, "num_lines_added": 52, "num_lines_removed": 154}