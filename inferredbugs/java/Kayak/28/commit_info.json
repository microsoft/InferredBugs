{"hash": "0bdbed4c8bee5298ac81aab6e5d24cb81a043f70", "message": "LogFile parsing updated and byteArrayToHexString fix", "file_num_lines": 208, "diff_parsed": {"added": [[21, "import java.io.BufferedWriter;"], [29, "import java.io.OutputStreamWriter;"], [30, "import java.io.RandomAccessFile;"], [78, "    public Set<String> getBusses() {"], [80, "        return keys;"], [103, "        this.platform = platform;"], [104, "        rewriteHeader();"], [105, "    }"], [107, "    public void setDescription(String description) throws FileNotFoundException, IOException {"], [108, "        if(!descriptionPattern.matcher(description).matches())"], [109, "            throw new IllegalArgumentException(\"Description must match \" + descriptionPattern.pattern());"], [111, "        this.description = description;"], [112, "        rewriteHeader();"], [113, "    }"], [115, "    public LogFile(File file) throws FileNotFoundException, IOException {"], [116, "        this.file = file;"], [117, "        this.platform = \"\";"], [118, "        this.description = \"\";"], [119, "        deviceAlias = new HashMap<String, String>();"], [120, "        String filename = file.getPath();"], [122, "        if (filename.endsWith(\".log.gz\")) {"], [123, "            compressed = true;"], [124, "            inputStream = new GZIPInputStream(new FileInputStream(file));"], [125, "        } else {"], [126, "            compressed = false;"], [127, "            inputStream = new FileInputStream(file);"], [130, "        parseHeader();"], [133, "    private void rewriteHeader() throws FileNotFoundException, IOException {"], [134, "        BufferedWriter wr = null;"], [135, "        BufferedReader br = null;"], [141, "            wr = new BufferedWriter(new OutputStreamWriter(outStream));"], [144, "            wr = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)));"], [148, "        boolean descriptionWritten = false;"], [149, "        boolean platformWritten = false;"], [151, "        /* update header */"], [153, "            if (descriptionLinePattern.matcher(line).matches()) {"], [154, "                wr.write(\"DESCRIPTION \\\"\");"], [155, "                wr.write(description);"], [156, "                wr.write(\"\\\"\\n\");"], [157, "                descriptionWritten = true;"], [158, "            } else if(platformLinePattern.matcher(line).matches()) {"], [159, "                wr.write(\"PLATFORM \");"], [160, "                wr.write(platform);"], [161, "                wr.write(\"\\n\");"], [162, "                platformWritten = true;"], [163, "            } else if(line.startsWith(\"(\")) {"], [164, "                if(!descriptionWritten) {"], [165, "                    wr.write(\"DESCRIPTION \\\"\");"], [166, "                    wr.write(description);"], [167, "                    wr.write(\"\\\"\\n\");"], [168, "                }"], [169, ""], [170, "                if(!platformWritten) {"], [171, "                    wr.write(\"PLATFORM \");"], [172, "                    wr.write(platform);"], [173, "                    wr.write(\"\\n\");"], [174, "                }"], [175, ""], [176, "                wr.write(line);"], [177, "                wr.append('\\n');"], [178, "                break;"], [179, "            /* Write all other lines */"], [181, "                wr.write(line);"], [182, "                wr.append('\\n');"], [186, "        /* write rest of file without checking */"], [187, "        char[] buff = new char[4096];"], [188, "        int len;"], [189, "        while ((len = br.read(buff, 0, 4096)) > 0) {"], [190, "            wr.write(buff, 0, len);"], [191, "        }"], [192, ""], [193, "        wr.close();"], [208, "        long startTime = 0;"], [230, "                } else if (line.startsWith(\"(\")) {"], [231, "                    if (description.equals(\"\")) {"], [232, "                        description = file.getName();"], [233, "                    }"], [234, "                    if (platform.equals(\"\")) {"], [235, "                        platform = \"No platform\";"], [236, "                    }"], [237, ""], [238, "                    Frame f = Frame.fromLogFileNotation(line);"], [239, "                    startTime = f.getTimestamp();"], [240, "                    break;"], [243, ""], [254, "        /*RandomAccessFile raf = null;"], [255, "        try {"], [256, "            raf = new RandomAccessFile(file, \"r\");"], [257, ""], [258, "            // try to find last valid content line"], [259, "            for(int i=1;;i++) {"], [260, "                raf.seek(raf.length()-i);"], [261, "                String line = raf.readLine();"], [262, ""], [263, "                if(line != null && !line.equals(\"\")) {"], [264, "                    Frame f = Frame.fromLogFileNotation(line);"], [265, "                    if(f != null) {"], [266, "                        long stopTime = f.getTimestamp();"], [267, ""], [268, "                        length = stopTime - startTime;"], [269, "                    }"], [270, "                }"], [271, "            }"], [272, ""], [273, "        } catch (FileNotFoundException ex) {"], [274, "            Logger.getLogger(LogFile.class.getName()).log(Level.SEVERE, null, ex);"], [275, "        } catch (IOException ex) {"], [276, "            Logger.getLogger(LogFile.class.getName()).log(Level.SEVERE, null, ex);"], [277, "        } finally {"], [278, "            if(raf != null)"], [279, "                try {"], [280, "                raf.close();"], [281, "            } catch (IOException ex) {"], [282, "                Logger.getLogger(LogFile.class.getName()).log(Level.SEVERE, null, ex);"], [283, "            }"], [284, "        }*/"]], "deleted": [[25, "import java.io.FileWriter;"], [29, "import java.io.PrintWriter;"], [30, "import java.util.ArrayList;"], [78, "    public ArrayList<String> getBusses() {"], [79, "        ArrayList<String> busNames = new ArrayList<String>();"], [81, ""], [82, "        for (String bus : keys) {"], [83, "            busNames.add(deviceAlias.get(bus));"], [84, "        }"], [85, ""], [86, "        return busNames;"], [87, ""], [110, "        File tempFile = new File(file.getAbsolutePath() + \".tmp\");"], [111, "        BufferedReader br;"], [112, "        PrintWriter pw;"], [113, ""], [114, "        if(compressed) {"], [115, "            GZIPInputStream zipStream = new GZIPInputStream(new FileInputStream(file));"], [116, "            br = new BufferedReader(new InputStreamReader(zipStream));"], [117, "            GZIPOutputStream outStream = new GZIPOutputStream(new FileOutputStream(tempFile));"], [118, "            pw = new PrintWriter(outStream);"], [119, "        } else {"], [120, "            br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));"], [121, "            pw = new PrintWriter(new FileWriter(tempFile));"], [122, "        }"], [123, ""], [124, "        String line = null;"], [125, "        boolean written = false;"], [127, "        while ((line = br.readLine()) != null) {"], [128, "            /* If line is found overwrite it */"], [129, "            if (!written && line.startsWith((\"PLATFORM\"))) {"], [130, "                pw.println(\"PLATFORM \" + platform);"], [131, "                written = true;"], [132, "            /* If header has no such field add it */"], [133, "            } else if(!written && line.startsWith(\"(\")) {"], [134, "                pw.println(\"PLATFORM \" + platform);"], [135, "                pw.println(line);"], [136, "                written = true;"], [137, "            /* Write all other header lines */"], [138, "            } else {"], [139, "                pw.println(line);"], [140, "                pw.flush();"], [141, "            }"], [142, "        }"], [144, "        pw.close();"], [145, "        br.close();"], [147, "        if (!file.delete()) {"], [148, "            logger.log(Level.WARNING, \"Could not delete old file\");"], [149, "            return;"], [150, "        }"], [152, "        if (!tempFile.renameTo(file)) {"], [153, "            logger.log(Level.WARNING, \"Could not rename new file to old filename\");"], [156, "        this.platform = platform;"], [159, "    public void setDescription(String description) throws FileNotFoundException, IOException {"], [160, "        if(!descriptionPattern.matcher(description).matches())"], [161, "            throw new IllegalArgumentException(\"Description must match \" + descriptionPattern.pattern());"], [162, ""], [164, "        BufferedReader br;"], [165, "        PrintWriter pw;"], [166, ""], [171, "            pw = new PrintWriter(outStream);"], [174, "            pw = new PrintWriter(new FileWriter(tempFile));"], [178, "        boolean written = false;"], [181, "            /* If line is found overwrite it */"], [182, "            if (!written && line.startsWith((\"DESCRIPTION\"))) {"], [183, "                pw.println(\"DESCRIPTION \\\"\" + description + \"\\\"\");"], [184, "                written = true;"], [185, "            /* If header has no such field add it */"], [186, "            } else if(!written && line.startsWith(\"(\")) {"], [187, "                pw.println(\"DESCRIPTION \\\"\" + description + \"\\\"\");"], [188, "                pw.println(line);"], [189, "                written = true;"], [190, "            /* Write all other header lines */"], [192, "                pw.println(line);"], [193, "                pw.flush();"], [197, "        pw.close();"], [208, ""], [209, "        this.description = description;"], [210, "    }"], [211, ""], [212, "    public LogFile(File file) throws FileNotFoundException, IOException {"], [213, "        this.file = file;"], [214, "        this.platform = \"\";"], [215, "        this.description = \"\";"], [216, "        deviceAlias = new HashMap<String, String>();"], [217, "        String filename = file.getPath();"], [218, ""], [219, "        if (filename.endsWith(\".log.gz\")) {"], [220, "            compressed = true;"], [221, "            inputStream = new GZIPInputStream(new FileInputStream(file));"], [222, "        } else {"], [223, "            compressed = false;"], [224, "            inputStream = new FileInputStream(file);"], [225, "        }"], [226, ""], [227, "        parseHeader();"], [253, "                } else if (!line.matches(\"\\\\s\")) {"], [254, "                        if (description.equals(\"\")) {"], [255, "                            description = file.getName();"], [256, "                        }"], [257, "                        if (platform.equals(\"\")) {"], [258, "                            platform = \"No platform\";"], [259, "                        }"], [260, "                        break;"], [273, "        /* TODO: get length of file */"]]}, "num_lines_added": 116, "num_lines_removed": 105}