{"hash": "4a29ecde171825547ba39c7b8c2450cfc63e2432", "message": "fix format problem", "file_num_lines": 101, "diff_parsed": {"added": [[56, "        validate(chartSeries, data);"], [58, "        int totalSeriesCount = ensureSeriesCount(chart, chartSeries);"], [63, "            List<SeriesRenderData> currentSeriesData = null;"], [66, "                currentSeriesData = data.getSeriesDatas();"], [68, "                currentSeriesData = obtainSeriesData(chartData.getClass(), data.getSeriesDatas());"], [70, "            usedSeriesDatas.addAll(currentSeriesData);"], [71, "            int currentSeriesSize = currentSeriesData.size();"], [74, "            for (int i = 0; i < currentSeriesSize; i++) {"], [76, "                        currentSeriesData.get(i).getValues(), valueCol);"], [87, "                String name = currentSeriesData.get(i).getName();"], [92, "            removeExtraSeries(chartData, orignSize, currentSeriesSize);"], [110, "    private int ensureSeriesCount(XWPFChart chart, List<XDDFChartData> chartSeries) throws IllegalAccessException {"], [111, "        // hack for poi 4.1.1+: repair seriesCount value,"], [112, "        int totalSeriesCount = chartSeries.stream().mapToInt(XDDFChartData::getSeriesCount).sum();"], [113, "        Field field = ReflectionUtils.findField(XDDFChart.class, \"seriesCount\");"], [114, "        field.setAccessible(true);"], [115, "        field.set(chart, totalSeriesCount);"], [116, "        return totalSeriesCount;"], [117, "    }"], [118, ""], [119, "    private void validate(List<XDDFChartData> chartSeries, ChartMultiSeriesRenderData data) {"], [120, "        // validate combo"], [121, "        if (chartSeries.size() >= 2) {"], [122, "            long nullCount = data.getSeriesDatas().stream().filter(d -> null == d.getComboType()).count();"], [123, "            if (nullCount > 0) throw new RenderException(\"Combo chart must set comboType field of series!\");"], [124, "        }"], [125, "    }"], [126, ""]], "deleted": [[47, " * @version 1.8.0"], [55, "        if (null == data) return;"], [58, "        // validate combo"], [59, "        if (chartSeries.size() >= 2) {"], [60, "            long nullCount = data.getSeriesDatas().stream().filter(d -> null == d.getComboType()).count();"], [61, "            if (nullCount > 0) throw new RenderException(\"Combo chart must set comboType field of series!\");"], [62, "        }"], [63, ""], [64, "        // hack for poi 4.1.1+: repair seriesCount value,"], [65, "        int totalSeriesCount = chartSeries.stream().mapToInt(XDDFChartData::getSeriesCount).sum();"], [66, "        Field field = ReflectionUtils.findField(XDDFChart.class, \"seriesCount\");"], [67, "        field.setAccessible(true);"], [68, "        field.set(chart, totalSeriesCount);"], [74, "            List<SeriesRenderData> seriesDatas = null;"], [77, "                seriesDatas = data.getSeriesDatas();"], [79, "                seriesDatas = obtainSeriesData(chartData.getClass(), data.getSeriesDatas());"], [81, "            usedSeriesDatas.addAll(seriesDatas);"], [82, "            int seriesSize = seriesDatas.size();"], [85, "            for (int i = 0; i < seriesSize; i++) {"], [87, "                        seriesDatas.get(i).getValues(), valueCol);"], [98, "                String name = seriesDatas.get(i).getName();"], [103, "            removeExtraSeries(chartData, orignSize, seriesSize);"]]}, "num_lines_added": 28, "num_lines_removed": 22}