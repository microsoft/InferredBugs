{"hash": "3f70955ad9fecca9c2cb8651363a68a471f0c986", "message": "iterable abstract template design pattern", "file_num_lines": 82, "diff_parsed": {"added": [[17, "import com.deepoove.poi.template.IterableTemplate;"], [21, "import com.deepoove.poi.xwpf.ParagraphContext;"], [22, "import com.deepoove.poi.xwpf.ParentContext;"], [23, "import com.deepoove.poi.xwpf.XWPFParagraphContext;"], [35, "        super.visit((IterableTemplate) iterableTemplate);"], [36, "    }"], [38, "    @Override"], [39, "    protected void handleNever(IterableTemplate iterableTemplate, BodyContainer bodyContainer) {"], [40, "        ParagraphContext parentContext = new XWPFParagraphContext("], [41, "                new XWPFParagraphWrapper((XWPFParagraph) iterableTemplate.getStartRun().getParent()));"], [43, "        Integer startRunPos = iterableTemplate.getStartMark().getRunPos();"], [44, "        Integer endRunPos = iterableTemplate.getEndMark().getRunPos();"], [46, "        for (int i = endRunPos - 1; i > startRunPos; i--) {"], [47, "            parentContext.removeRun(i);"], [48, "        }"], [49, "    }"], [51, "    @Override"], [52, "    protected void handleIterable(IterableTemplate iterableTemplate, BodyContainer bodyContainer, Iterable<?> compute) {"], [53, "        RunTemplate start = iterableTemplate.getStartMark();"], [54, "        RunTemplate end = iterableTemplate.getEndMark();"], [56, "        ParagraphContext parentContext = new XWPFParagraphContext("], [57, "                new XWPFParagraphWrapper((XWPFParagraph) start.getRun().getParent()));"], [59, "        Integer startRunPos = start.getRunPos();"], [60, "        Integer endRunPos = end.getRunPos();"], [62, "        Iterator<?> iterator = compute.iterator();"], [63, "        while (iterator.hasNext()) {"], [64, "            next(iterableTemplate, parentContext, startRunPos, endRunPos, iterator.next());"], [65, "        }"], [67, "        // clear self iterable template"], [68, "        for (int i = endRunPos - 1; i > startRunPos; i--) {"], [69, "            parentContext.removeRun(i);"], [70, "        }"], [71, "    }"], [73, "    @Override"], [74, "    public void next(IterableTemplate iterable, ParentContext parentContext, int startPos, int endPos,"], [75, "            Object model) {"], [76, ""], [77, "        ParagraphContext paragraphContext = (ParagraphContext) parentContext;"], [78, "        RunTemplate end = iterable.getEndMark();"], [79, "        CTR endCtr = end.getRun().getCTR();"], [80, ""], [81, "        // copy position cursor"], [82, "        int insertPostionCursor = end.getRunPos();"], [83, ""], [84, "        // copy content"], [85, "        List<XWPFRun> runs = paragraphContext.getParagraph().getRuns();"], [86, "        List<XWPFRun> copies = new ArrayList<XWPFRun>();"], [87, "        for (int i = startPos + 1; i < endPos; i++) {"], [88, "            insertPostionCursor = end.getRunPos();"], [89, ""], [90, "            XWPFRun xwpfRun = runs.get(i);"], [91, "            XWPFRun insertNewRun = paragraphContext.insertNewRun(xwpfRun, insertPostionCursor);"], [92, "            XWPFRun replaceXwpfRun = paragraphContext.createRun(xwpfRun, (IRunBody) paragraphContext.getParagraph());"], [93, "            paragraphContext.setAndUpdateRun(replaceXwpfRun, insertNewRun, insertPostionCursor);"], [94, ""], [95, "            XmlCursor newCursor = endCtr.newCursor();"], [96, "            newCursor.toPrevSibling();"], [97, "            XmlObject object = newCursor.getObject();"], [98, "            XWPFRun copy = paragraphContext.createRun(object, (IRunBody) paragraphContext.getParagraph());"], [99, "            copies.add(copy);"], [100, "            paragraphContext.setAndUpdateRun(copy, replaceXwpfRun, insertPostionCursor);"], [103, "        // re-parse"], [104, "        List<MetaTemplate> templates = template.getResolver().resolveXWPFRuns(copies);"], [105, ""], [106, "        // render"], [107, "        process(templates, model);"]], "deleted": [[20, "import com.deepoove.poi.xwpf.BodyContainerFactory;"], [31, ""], [33, "        BodyContainer bodyContainer = BodyContainerFactory.getBodyContainer(iterableTemplate);"], [34, ""], [35, "        Object compute = renderDataCompute.compute(iterableTemplate.getStartMark().getTagName());"], [36, "        int times = conditionTimes(compute);"], [37, ""], [38, "        if (TIMES_ONCE == times) {"], [39, ""], [40, "            RenderDataCompute dataCompute = template.getConfig().getRenderDataComputeFactory().newCompute(compute);"], [41, "            new DocumentProcessor(this.template, dataCompute).process(iterableTemplate.getTemplates());"], [42, ""], [43, "        } else if (TIMES_N == times) {"], [44, ""], [45, "            RunTemplate start = iterableTemplate.getStartMark();"], [46, "            RunTemplate end = iterableTemplate.getEndMark();"], [47, ""], [48, "            XWPFRun startRun = start.getRun();"], [49, "            XWPFRun endRun = end.getRun();"], [50, ""], [51, "            XWPFParagraph currentParagraph = (XWPFParagraph) startRun.getParent();"], [52, "            XWPFParagraphWrapper paragraphWrapper = new XWPFParagraphWrapper(currentParagraph);"], [53, ""], [54, "            Integer startRunPos = start.getRunPos();"], [55, "            Integer endRunPos = end.getRunPos();"], [56, ""], [57, "            CTR endCtr = endRun.getCTR();"], [58, ""], [59, "            Iterable<?> model = (Iterable<?>) compute;"], [60, "            Iterator<?> iterator = model.iterator();"], [61, "            while (iterator.hasNext()) {"], [62, "                // copy position cursor"], [63, "                int insertPostionCursor = end.getRunPos();"], [64, ""], [65, "                // copy content"], [66, "                List<XWPFRun> runs = currentParagraph.getRuns();"], [67, "                List<XWPFRun> copies = new ArrayList<XWPFRun>();"], [68, "                for (int i = startRunPos + 1; i < endRunPos; i++) {"], [69, "                    insertPostionCursor = end.getRunPos();"], [70, ""], [71, "                    XWPFRun xwpfRun = runs.get(i);"], [72, "                    XWPFRun insertNewRun = paragraphWrapper.insertNewRun(xwpfRun, insertPostionCursor);"], [73, "                    XWPFRun xwpfRun2 = paragraphWrapper.createRun(xwpfRun, (IRunBody)currentParagraph);"], [74, "                    paragraphWrapper.setAndUpdateRun(xwpfRun2, insertNewRun, insertPostionCursor);"], [76, "                    XmlCursor newCursor = endCtr.newCursor();"], [77, "                    newCursor.toPrevSibling();"], [78, "                    XmlObject object = newCursor.getObject();"], [79, "                    XWPFRun copy = paragraphWrapper.createRun(object, (IRunBody)currentParagraph);"], [80, "                    copies.add(copy);"], [81, "                    paragraphWrapper.setAndUpdateRun(copy, xwpfRun2, insertPostionCursor);"], [82, "                }"], [84, "                // re-parse"], [85, "                List<MetaTemplate> templates = template.getResolver().resolveXWPFRuns(copies);"], [87, "                // render"], [88, "                RenderDataCompute dataCompute = template.getConfig().getRenderDataComputeFactory().newCompute(iterator.next());"], [89, "                new DocumentProcessor(this.template, dataCompute).process(templates);"], [90, "            }"], [92, "            // clear self iterable template"], [93, "            for (int i = endRunPos - 1; i > startRunPos; i--) {"], [94, "                paragraphWrapper.removeRun(i);"], [95, "            }"], [97, "        } else {"], [99, "            XWPFParagraph currentParagraph = (XWPFParagraph) iterableTemplate.getStartRun().getParent();"], [100, "            XWPFParagraphWrapper paragraphWrapper = new XWPFParagraphWrapper(currentParagraph);"], [102, "            Integer startRunPos = iterableTemplate.getStartMark().getRunPos();"], [103, "            Integer endRunPos = iterableTemplate.getEndMark().getRunPos();"], [105, "            for (int i = endRunPos - 1; i > startRunPos; i--) {"], [106, "                paragraphWrapper.removeRun(i);"], [107, "            }"], [111, "        bodyContainer.clearPlaceholder(iterableTemplate.getStartRun());"], [112, "        bodyContainer.clearPlaceholder(iterableTemplate.getEndRun());"]]}, "num_lines_added": 66, "num_lines_removed": 71}