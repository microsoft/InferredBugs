{"hash": "8aeefc1cc4de671ca40a2ae4ffcef2a910fd0d3a", "message": "finish navigation history function\nupdate refresh function", "file_num_lines": 1927, "diff_parsed": {"added": [[18, "import org.eclipse.swt.layout.GridData;"], [19, "import org.eclipse.swt.layout.GridLayout;"], [20, "import org.eclipse.swt.widgets.Button;"], [21, "import org.eclipse.swt.widgets.Composite;"], [75, "\tprivate NavHistory history = new NavHistory();"], [78, "\tprivate TreeItem treeItemSelected;"], [79, ""], [120, "\tprivate Image leftImage;"], [121, "\tprivate Image rightImage;"], [122, "\tprivate Image upImage;"], [123, "\tprivate Image refreshImage;"], [129, "\tprivate Button btnBackward;"], [130, "\tprivate Button btnForward;"], [199, ""], [200, "\t\tleftImage = new Image(shlRedisClient.getDisplay(), getClass()"], [201, "\t\t\t\t.getResourceAsStream(\"/left.png\"));"], [202, "\t\trightImage = new Image(shlRedisClient.getDisplay(), getClass()"], [203, "\t\t\t\t.getResourceAsStream(\"/right.png\"));"], [204, "\t\tupImage = new Image(shlRedisClient.getDisplay(), getClass()"], [205, "\t\t\t\t.getResourceAsStream(\"/up.png\"));"], [206, "\t\trefreshImage = new Image(shlRedisClient.getDisplay(), getClass()"], [207, "\t\t\t\t.getResourceAsStream(\"/refresh.png\"));"], [218, "\t\tSashForm sashForm_2 = new SashForm(shlRedisClient, SWT.VERTICAL);"], [220, "\t\tComposite composite = new Composite(sashForm_2, SWT.NONE);"], [221, "\t\tGridLayout gl_composite = new GridLayout(5, false);"], [222, "\t\tgl_composite.verticalSpacing = 0;"], [223, "\t\tgl_composite.horizontalSpacing = 0;"], [224, "\t\tgl_composite.marginRight = 5;"], [225, "\t\tgl_composite.marginBottom = 5;"], [226, "\t\tgl_composite.marginLeft = 5;"], [227, "\t\tgl_composite.marginTop = 5;"], [228, "\t\tgl_composite.marginWidth = 0;"], [229, "\t\tgl_composite.marginHeight = 0;"], [230, "\t\tcomposite.setLayout(gl_composite);"], [231, ""], [232, "\t\tbtnBackward = new Button(composite, SWT.CENTER);"], [233, "\t\tbtnBackward.setEnabled(false);"], [234, "\t\tbtnBackward.addSelectionListener(new SelectionAdapter() {"], [235, "\t\t\t@Override"], [236, "\t\t\tpublic void widgetSelected(SelectionEvent e) {"], [237, "\t\t\t\tTreeItem item = history.backward();"], [238, "\t\t\t\tif(!item.isDisposed()) {"], [239, "\t\t\t\t\ttree.setSelection(item);"], [240, "\t\t\t\t\ttreeItemSelected(false);"], [241, "\t\t\t\t\tif(!history.canBackward())"], [242, "\t\t\t\t\t\tbtnBackward.setEnabled(false);"], [243, ""], [244, "\t\t\t\t\tbtnForward.setEnabled(true);"], [245, ""], [246, "\t\t\t\t}else {"], [247, "\t\t\t\t\tMessageDialog.openInformation(shlRedisClient, \"error\", \"container is deleted!\");"], [248, "\t\t\t\t}"], [249, "\t\t\t}"], [250, "\t\t});"], [251, "\t\tbtnBackward.setImage(leftImage);"], [252, ""], [253, "\t\tbtnForward = new Button(composite, SWT.NONE);"], [254, "\t\tbtnForward.setEnabled(false);"], [255, "\t\tbtnForward.addSelectionListener(new SelectionAdapter() {"], [256, "\t\t\t@Override"], [257, "\t\t\tpublic void widgetSelected(SelectionEvent e) {"], [258, "\t\t\t\tTreeItem item = history.forward();"], [259, "\t\t\t\tbtnBackward.setEnabled(true);"], [260, "\t\t\t\tif(!item.isDisposed()) {"], [261, "\t\t\t\t\ttree.setSelection(item);"], [262, "\t\t\t\t\ttreeItemSelected(false);"], [263, "\t\t\t\t\tif(!history.canForward())"], [264, "\t\t\t\t\t\tbtnForward.setEnabled(false);"], [265, ""], [266, "\t\t\t\t}else {"], [267, "\t\t\t\t\tMessageDialog.openInformation(shlRedisClient, \"error\", \"container is deleted!\");"], [268, "\t\t\t\t}"], [269, "\t\t\t}"], [270, "\t\t});"], [271, "\t\tbtnForward.setImage(rightImage);"], [272, ""], [273, "\t\tButton btnUP = new Button(composite, SWT.CENTER);"], [274, "\t\tbtnUP.addSelectionListener(new SelectionAdapter() {"], [275, "\t\t\t@Override"], [276, "\t\t\tpublic void widgetSelected(SelectionEvent e) {"], [277, "\t\t\t\tTreeItem[] items = tree.getSelection();"], [278, "\t\t\t\tif(items[0] != rootRedisServers){"], [279, "\t\t\t\t\thistory.add(items[0].getParentItem());"], [280, "\t\t\t\t\tbtnBackward.setEnabled(true);"], [281, "\t\t\t\t\tbtnForward.setEnabled(false);"], [282, "\t\t\t\t\ttree.setSelection(items[0].getParentItem());"], [283, "\t\t\t\t\ttreeItemSelected(false);"], [284, "\t\t\t\t}"], [285, "\t\t\t}"], [286, "\t\t});"], [287, "\t\tbtnUP.setImage(upImage);"], [288, ""], [289, "\t\tButton btnRefresh = new Button(composite, SWT.CENTER);"], [290, "\t\tbtnRefresh.addSelectionListener(new SelectionAdapter() {"], [291, "\t\t\t@Override"], [292, "\t\t\tpublic void widgetSelected(SelectionEvent e) {"], [293, "\t\t\t\ttreeItemSelected(true);"], [294, "\t\t\t}"], [295, "\t\t});"], [296, "\t\tbtnRefresh.setImage(refreshImage);"], [297, ""], [298, "\t\ttext = new Text(composite, SWT.BORDER);"], [299, "\t\ttext.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));"], [301, ""], [330, "\t\tsashForm_2.setWeights(new int[] {43, 643});"], [331, ""], [333, ""], [334, "\t\thistory.add(rootRedisServers);"], [398, "\t\t\t\tTreeItem[] items = tree.getSelection();"], [399, ""], [400, "\t\t\t\tif((itemSelected instanceof TreeItem && items[0] != itemSelected) ) {"], [401, "\t\t\t\t\thistory.add(items[0]);"], [402, "\t\t\t\t\tbtnBackward.setEnabled(true);"], [403, "\t\t\t\t\tbtnForward.setEnabled(false);"], [404, "\t\t\t\t\ttreeItemSelected(false);"], [405, "\t\t\t\t} else if(itemSelected instanceof TableItem  && items[0] != treeItemSelected){"], [406, "\t\t\t\t\thistory.add(items[0]);"], [407, "\t\t\t\t\tbtnBackward.setEnabled(true);"], [408, "\t\t\t\t\tbtnForward.setEnabled(false);"], [409, "\t\t\t\t\ttreeItemSelected(false);"], [410, "\t\t\t\t}"], [422, "\t\t\t\t\t\t//itemSelected = selectedItem;"], [675, "\t\t\t\tTreeItem[] treeItems = tree.getSelection();"], [676, "\t\t\t\ttreeItemSelected = treeItems[0];"], [677, ""], [702, "\t\t\t\t\t//treeItemSelected(true);"], [703, "\t\t\t\t\tboolean find = false;"], [704, "\t\t\t\t\tfor (TreeItem treeItem : treeItems[0].getItems()) {"], [705, "\t\t\t\t\t\tString treeText = treeItem.getText();"], [706, "\t\t\t\t\t\tString tableText = selectedItem.getText(0);"], [707, "\t\t\t\t\t\tString type = selectedItem.getText(1);"], [708, "\t\t\t\t\t\tif (treeText.equals(tableText)) {"], [709, "\t\t\t\t\t\t\tfind = true;"], [710, ""], [711, "\t\t\t\t\t\t\tif (type.equals(NodeType.DATABASE.toString())"], [712, "\t\t\t\t\t\t\t\t\t|| type.equals(NodeType.CONTAINER"], [713, "\t\t\t\t\t\t\t\t\t\t\t.toString()))"], [714, "\t\t\t\t\t\t\t\tdbContainerTreeItemSelected(treeItem, false);"], [715, "\t\t\t\t\t\t\telse if (type.equals(NodeType.SERVER.toString()))"], [716, "\t\t\t\t\t\t\t\tserverTreeItemSelected(treeItem, false);"], [717, ""], [718, "\t\t\t\t\t\t\thistory.add(treeItem);"], [719, "\t\t\t\t\t\t\tbtnBackward.setEnabled(true);"], [720, "\t\t\t\t\t\t\tbtnForward.setEnabled(false);"], [721, "\t\t\t\t\t\t\tbreak;"], [724, "\t\t\t\t\tif(!find)"], [725, "\t\t\t\t\t\tMessageDialog.openInformation(shlRedisClient, \"information\", \"New key found, please refresh container: \"+text.getText());"], [1277, "\t\t\t\tTreeItem selected = gotoDBContainer(node.getId(), node.getDb(), node.getKey(), true, true);"], [1278, "\t\t\t\thistory.add(selected);"], [1279, "\t\t\t\tbtnBackward.setEnabled(true);"], [1280, "\t\t\t\tbtnForward.setEnabled(false);"], [1289, "\t\t\t\t\t\tTreeItem selected = gotoDBContainer(node1.getId(), node1.getDb(), node1.getKey(), true, true);"], [1290, "\t\t\t\t\t\thistory.add(selected);"], [1291, "\t\t\t\t\t\tbtnBackward.setEnabled(true);"], [1292, "\t\t\t\t\t\tbtnForward.setEnabled(false);"], [1310, "\t\t\t\tTreeItem selected = gotoDBContainer(node.getId(), node.getDb(), node.getKey(), true, true);"], [1311, ""], [1312, "\t\t\t\thistory.add(selected);"], [1313, "\t\t\t\tbtnBackward.setEnabled(true);"], [1314, "\t\t\t\tbtnForward.setEnabled(false);"], [1323, "\t\t\t\t\t\tTreeItem selected = gotoDBContainer(node1.getId(), node1.getDb(), node1.getKey(), true, true);"], [1324, ""], [1325, "\t\t\t\t\t\thistory.add(selected);"], [1326, "\t\t\t\t\t\tbtnBackward.setEnabled(true);"], [1327, "\t\t\t\t\t\tbtnForward.setEnabled(false);"], [1357, ""], [1359, "\t\t\t\tTreeItem selected = gotoDBContainer(node.getId(), node.getDb(), node.getKey(), true, true);"], [1360, "\t\t\t\thistory.add(selected);"], [1361, "\t\t\t\tbtnBackward.setEnabled(true);"], [1362, "\t\t\t\tbtnForward.setEnabled(false);"], [1468, "\t\t\t\t\t\tTreeItem selected = gotoDBContainer(sid,Integer.parseInt(containers[1].replaceFirst(DB_PREFIX, \"\")), container, favorite.isData(), false);"], [1469, "\t\t\t\t\t\thistory.add(selected);"], [1470, "\t\t\t\t\t\tbtnBackward.setEnabled(true);"], [1471, "\t\t\t\t\t\tbtnForward.setEnabled(false);"], [1653, "\t\tif(itemSelected == items[0] && !refresh)"], [1654, "\t\t\treturn;"], [1655, ""], [1701, "\t\t} else if (refresh) {"], [1702, "\t\t\tfor(Node node: cnodes){"], [1703, "\t\t\t\tif(!findItemByNode(itemSelected, node)){"], [1704, "\t\t\t\t\tTreeItem item = new TreeItem(itemSelected, SWT.NONE);"], [1705, "\t\t\t\t\titem.setText(node.getKey());"], [1706, "\t\t\t\t\titem.setData(NODE_TYPE, node.getType());"], [1707, "\t\t\t\t\titem.setImage(containerImage);"], [1708, "\t\t\t\t}"], [1709, "\t\t\t}"], [1710, ""], [1711, "\t\t\tTreeItem[] items = itemSelected.getItems();"], [1712, "\t\t\tfor(TreeItem item: items){"], [1713, "\t\t\t\tif(!findNodeByItem(cnodes, item)){"], [1714, "\t\t\t\t\titem.dispose();"], [1715, "\t\t\t\t}"], [1716, "\t\t\t}"], [1718, ""], [1723, ""], [1724, "\tprivate boolean findItemByNode(TreeItem itemSelected, Node node) {"], [1725, "\t\tTreeItem[] items = itemSelected.getItems();"], [1726, ""], [1727, "\t\tfor(TreeItem item: items){"], [1728, "\t\t\tif(item.getText().equals(node.getKey()))"], [1729, "\t\t\t\treturn true;"], [1730, "\t\t}"], [1731, "\t\treturn false;"], [1732, ""], [1733, "\t}"], [1734, ""], [1735, "\tprivate boolean findNodeByItem(Set<Node> nodes, TreeItem item) {"], [1736, "\t\tfor (Node node : nodes) {"], [1737, "\t\t\tif(node.getKey().equals(item.getText()))"], [1738, "\t\t\t\treturn true;"], [1739, "\t\t}"], [1740, "\t\treturn false;"], [1741, "\t}"], [1836, "\t\t} else if (refresh){"], [1837, ""], [1839, ""], [1879, "\t\tint amount = service1.listDBs((Integer) selectedItem.getData(NODE_ID));"], [1880, ""], [1884, ""], [1885, "\t\t\tfor (int i = 0; i < amount; i++) {"], [1886, "\t\t\t\tTreeItem dbItem = new TreeItem(selectedItem, SWT.NONE);"], [1887, "\t\t\t\tdbItem.setText(DB_PREFIX + i);"], [1888, "\t\t\t\tdbItem.setData(NODE_ID, i);"], [1889, "\t\t\t\tdbItem.setData(NODE_TYPE, NodeType.DATABASE);"], [1890, "\t\t\t\tdbItem.setImage(dbImage);"], [1891, "\t\t\t}"], [1892, "\t\t\tselectedItem.setExpanded(true);"], [1893, "\t\t\tselectedItem.setData(ITEM_OPENED, true);"], [1894, "\t\t} else if (refresh){"], [1895, ""], [1898, "\t\tfor (int i = 0; i < amount; i++) {"], [2189, "\t\t\t\tgotoDBContainer(target.getId(), target.getDb(), target.getContainer() + pBuffer.getKey(), true, true);"], [2191, "\t\t\t\tgotoDBContainer(target.getId(), target.getDb(), newKey, true, true);"], [2194, "\t\t\tgotoDBContainer(target.getId(), target.getDb(), target.getContainer(), false, true);"], [2224, "\tprivate TreeItem gotoDBContainer(int id, int db, String container, boolean isKey, boolean refresh) {"], [2226, "\t\tTreeItem dbItem = findDBTreeItem(id, db);"], [2227, "\t\tTreeItem dataItemSelected = null;"], [2228, ""], [2229, "\t\tif(dbItem != null) {"], [2230, "\t\t\tdbContainerTreeItemSelected(dbItem,\trefresh);"], [2231, "\t\t\tTreeItem[] dataItems = dbItem.getItems();"], [2233, "\t\t\tif(container.length() == 0)"], [2234, "\t\t\t\treturn dbItem;"], [2235, "\t\t\telse {"], [2236, "\t\t\t\tString[] containers = container.split(\":\");"], [2237, "\t\t\t\tif(!isKey){"], [2238, "\t\t\t\t\tfor (int i = 0; i < containers.length; i++) {"], [2239, "\t\t\t\t\t\tfor (TreeItem dataItem : dataItems) {"], [2240, "\t\t\t\t\t\t\tif (dataItem.getText().equals(containers[i])) {"], [2241, "\t\t\t\t\t\t\t\ttree.setSelection(dataItem);"], [2242, "\t\t\t\t\t\t\t\tdbContainerTreeItemSelected(dataItem, refresh);"], [2243, "\t\t\t\t\t\t\t\tdataItems = dataItem.getItems();"], [2244, "\t\t\t\t\t\t\t\tdataItemSelected = dataItem;"], [2245, "\t\t\t\t\t\t\t\tbreak;"], [2247, "\t\t\t\t\t\t}"], [2248, "\t\t\t\t\t}"], [2249, "\t\t\t\t} else {"], [2250, "\t\t\t\t\tfor (int i = 0; i < containers.length - 1; i++) {"], [2251, "\t\t\t\t\t\tfor (TreeItem dataItem : dataItems) {"], [2252, "\t\t\t\t\t\t\tif (dataItem.getText().equals(containers[i])) {"], [2253, "\t\t\t\t\t\t\t\ttree.setSelection(dataItem);"], [2254, "\t\t\t\t\t\t\t\tdbContainerTreeItemSelected(dataItem, false);"], [2255, "\t\t\t\t\t\t\t\tdataItems = dataItem.getItems();"], [2256, "\t\t\t\t\t\t\t\tdataItemSelected = dataItem;"], [2257, "\t\t\t\t\t\t\t\tbreak;"], [2261, "\t\t\t\t\tTableItem[] tableItems = table.getItems();"], [2262, "\t\t\t\t\tfor(TableItem tableItem : tableItems) {"], [2263, "\t\t\t\t\t\tNodeType type = (NodeType) tableItem.getData(NODE_TYPE);"], [2264, "\t\t\t\t\t\tif(type != NodeType.SERVER && type != NodeType.DATABASE && type != NodeType.CONTAINER && tableItem.getText().equals(containers[containers.length -1])){"], [2265, "\t\t\t\t\t\t\ttable.setSelection(tableItem);"], [2266, "\t\t\t\t\t\t\tdataItemSelected();"], [2267, "\t\t\t\t\t\t\tbreak;"], [2268, "\t\t\t\t\t\t}"], [2269, ""], [2270, "\t\t\t\t\t}"], [2274, "\t\treturn dataItemSelected;"], [2275, "\t}"], [2276, ""], [2277, "\tprivate TreeItem findServerTreeItem(int id){"], [2278, "\t\tTreeItem[] treeItems = rootRedisServers.getItems();"], [2279, "\t\tfor (TreeItem treeItem : treeItems) {"], [2280, "\t\t\tint serverId = (Integer) treeItem.getData(NODE_ID);"], [2281, "\t\t\tif (serverId == id)"], [2282, "\t\t\t\treturn treeItem;"], [2283, "\t\t}"], [2284, "\t\treturn null;"], [2285, "\t}"], [2286, ""], [2287, "\tprivate TreeItem findDBTreeItem(int id, int db) {"], [2288, "\t\tTreeItem server = findServerTreeItem(id);"], [2289, "\t\tif(server == null)"], [2290, "\t\t\treturn null;"], [2291, "\t\telse {"], [2292, "\t\t\tserverTreeItemSelected(server, false);"], [2293, "\t\t\tTreeItem[] dbItems = server.getItems();"], [2294, "\t\t\tfor (TreeItem dbItem : dbItems) {"], [2295, "\t\t\t\tif (dbItem.getText().equals(DB_PREFIX+db))"], [2296, "\t\t\t\t\treturn dbItem;"], [2297, "\t\t\t}"], [2298, "\t\t\treturn null;"], [2299, "\t\t}"]], "deleted": [[73, ""], [197, "\t\tSashForm sashForm_2 = new SashForm(shlRedisClient, SWT.SMOOTH"], [198, "\t\t\t\t| SWT.VERTICAL);"], [200, ""], [201, "\t\ttext = new Text(sashForm_2, SWT.BORDER | SWT.SEARCH);"], [222, "\t\tsashForm_2.setWeights(new int[] { 22, 368 });"], [296, "\t\t\t\ttreeItemSelected(false);"], [308, "\t\t\t\t\t\titemSelected = selectedItem;"], [585, "\t\t\t\t\tif(treeItems[0].getItems().length == 0)"], [586, "\t\t\t\t\t\ttreeItemSelected(true);"], [587, "\t\t\t\t\telse {"], [588, "\t\t\t\t\t\tfor (TreeItem treeItem : treeItems[0].getItems()) {"], [589, "\t\t\t\t\t\t\tString treeText = treeItem.getText();"], [590, "\t\t\t\t\t\t\tString tableText = selectedItem.getText(0);"], [591, "\t\t\t\t\t\t\tString type = selectedItem.getText(1);"], [592, "\t\t\t\t\t\t\tif (treeText.equals(tableText)) {"], [593, "\t\t\t\t\t\t\t\tif (type.equals(NodeType.DATABASE.toString())"], [594, "\t\t\t\t\t\t\t\t\t\t|| type.equals(NodeType.CONTAINER"], [595, "\t\t\t\t\t\t\t\t\t\t\t\t.toString()))"], [596, "\t\t\t\t\t\t\t\t\tdbContainerTreeItemSelected(treeItem, false);"], [597, "\t\t\t\t\t\t\t\telse if (type.equals(NodeType.SERVER.toString()))"], [598, "\t\t\t\t\t\t\t\t\tserverTreeItemSelected(treeItem, false);"], [599, "\t\t\t\t\t\t\t\tbreak;"], [600, "\t\t\t\t\t\t\t}"], [1154, "\t\t\t\tgo(node.getId(), node.getDb(), node.getKey(), true, true);"], [1163, "\t\t\t\t\t\tgo(node1.getId(), node1.getDb(), node1.getKey(), true, true);"], [1181, "\t\t\t\tgo(node.getId(), node.getDb(), node.getKey(), true, true);"], [1190, "\t\t\t\t\t\tgo(node1.getId(), node1.getDb(), node1.getKey(), true, true);"], [1221, "\t\t\t\tgo(node.getId(), node.getDb(), node.getKey(), true, true);"], [1327, "\t\t\t\t\t\tgo(sid,Integer.parseInt(containers[1].replaceFirst(DB_PREFIX, \"\")), container, favorite.isData(), false);"], [1328, ""], [1345, "\tprivate void addDBTreeItem(int server, TreeItem serverItem) {"], [1346, "\t\tint amount = service1.listDBs(server);"], [1347, "\t\tfor (int i = 0; i < amount; i++) {"], [1348, "\t\t\tTreeItem dbItem = new TreeItem(serverItem, SWT.NONE);"], [1349, "\t\t\tdbItem.setText(DB_PREFIX + i);"], [1350, "\t\t\tdbItem.setData(NODE_ID, i);"], [1351, "\t\t\tdbItem.setData(NODE_TYPE, NodeType.DATABASE);"], [1352, "\t\t\tdbItem.setImage(dbImage);"], [1353, "\t\t}"], [1354, "\t\tif (amount > 0) {"], [1355, "\t\t\tserverItem.setExpanded(true);"], [1356, "\t\t\tserverItem.setData(ITEM_OPENED, true);"], [1357, "\t\t}"], [1358, "\t}"], [1359, ""], [1557, "\t\tif (refresh)"], [1558, "\t\t\titemSelected.setData(ITEM_OPENED, false);"], [1559, ""], [1668, "\t\tif (refresh)"], [1669, "\t\t\trootRedisServers.setData(ITEM_OPENED, false);"], [1670, ""], [1675, ""], [1716, "\t\tif (refresh)"], [1717, "\t\t\tselectedItem.setData(ITEM_OPENED, false);"], [1718, ""], [1722, "\t\t\taddDBTreeItem((Integer) selectedItem.getData(NODE_ID), selectedItem);"], [1725, "\t\tint dbs = service1.listDBs((Integer) selectedItem.getData(NODE_ID));"], [1726, "\t\tfor (int i = 0; i < dbs; i++) {"], [2017, "\t\t\t\tgo(target.getId(), target.getDb(), target.getContainer() + pBuffer.getKey(), true, true);"], [2019, "\t\t\t\tgo(target.getId(), target.getDb(), newKey, true, true);"], [2022, "\t\t\tgo(target.getId(), target.getDb(), target.getContainer(), false, true);"], [2052, "\tprivate void go(int id, int db, String container, boolean isKey, boolean refresh) {"], [2054, "\t\tTreeItem[] treeItems = rootRedisServers.getItems();"], [2055, "\t\tfor (TreeItem treeItem : treeItems) {"], [2056, "\t\t\tint serverId = (Integer) treeItem.getData(NODE_ID);"], [2057, "\t\t\tif (serverId == id) {"], [2058, "\t\t\t\tserverTreeItemSelected(treeItem, false);"], [2059, ""], [2060, "\t\t\t\tTreeItem[] dbItems = treeItem.getItems();"], [2061, "\t\t\t\tfor (TreeItem dbItem : dbItems) {"], [2062, "\t\t\t\t\tif (dbItem.getText().equals(DB_PREFIX+db)) {"], [2063, "\t\t\t\t\t\ttree.setSelection(dbItem);"], [2064, "\t\t\t\t\t\tdbContainerTreeItemSelected(dbItem,\trefresh);"], [2065, "\t\t\t\t\t\tTreeItem[] dataItems = dbItem.getItems();"], [2067, ""], [2068, "\t\t\t\t\t\tString[] containers = container.split(\":\");"], [2069, "\t\t\t\t\t\tif(!isKey){"], [2070, "\t\t\t\t\t\t\tfor (int i = 0; i < containers.length; i++) {"], [2071, "\t\t\t\t\t\t\t\tfor (TreeItem dataItem : dataItems) {"], [2072, "\t\t\t\t\t\t\t\t\tif (dataItem.getText().equals(containers[i])) {"], [2073, "\t\t\t\t\t\t\t\t\t\ttree.setSelection(dataItem);"], [2074, "\t\t\t\t\t\t\t\t\t\tdbContainerTreeItemSelected(dataItem, refresh);"], [2075, "\t\t\t\t\t\t\t\t\t\tdataItems = dataItem.getItems();"], [2076, ""], [2077, "\t\t\t\t\t\t\t\t\t\tbreak;"], [2078, "\t\t\t\t\t\t\t\t\t}"], [2079, "\t\t\t\t\t\t\t\t}"], [2080, "\t\t\t\t\t\t\t}"], [2081, "\t\t\t\t\t\t} else {"], [2082, "\t\t\t\t\t\t\tfor (int i = 0; i < containers.length - 1; i++) {"], [2083, "\t\t\t\t\t\t\t\tfor (TreeItem dataItem : dataItems) {"], [2084, "\t\t\t\t\t\t\t\t\tif (dataItem.getText().equals(containers[i])) {"], [2085, "\t\t\t\t\t\t\t\t\t\ttree.setSelection(dataItem);"], [2086, "\t\t\t\t\t\t\t\t\t\tdbContainerTreeItemSelected(dataItem, false);"], [2087, "\t\t\t\t\t\t\t\t\t\tdataItems = dataItem.getItems();"], [2088, "\t\t\t\t\t\t\t\t\t\tbreak;"], [2089, "\t\t\t\t\t\t\t\t\t}"], [2090, "\t\t\t\t\t\t\t\t}"], [2092, "\t\t\t\t\t\t\tTableItem[] tableItems = table.getItems();"], [2093, "\t\t\t\t\t\t\tfor(TableItem tableItem : tableItems) {"], [2094, "\t\t\t\t\t\t\t\tNodeType type = (NodeType) tableItem.getData(NODE_TYPE);"], [2095, "\t\t\t\t\t\t\t\tif(type != NodeType.SERVER && type != NodeType.DATABASE && type != NodeType.CONTAINER && tableItem.getText().equals(containers[containers.length -1])){"], [2096, "\t\t\t\t\t\t\t\t\ttable.setSelection(tableItem);"], [2097, "\t\t\t\t\t\t\t\t\tdataItemSelected();"], [2098, "\t\t\t\t\t\t\t\t\tbreak;"], [2099, "\t\t\t\t\t\t\t\t}"], [2100, ""], [2105, ""]]}, "num_lines_added": 301, "num_lines_removed": 109}