{"hash": "71a4761454a5bbbaa6fd35620653a5fd8905ec56", "message": "support for parameter files", "file_num_lines": 129, "diff_parsed": {"added": [[6, "import java.util.ArrayList;"], [7, "import java.util.Collections;"], [8, "import java.util.List;"], [33, "\t\t/* assume --gui if no parameters are given */"], [34, ""], [35, "\t\tif (unparsedArgs.length == 0) {"], [36, ""], [37, "\t\t\tSystem.out.println(\"No parameters, running graphical interface.\\n\""], [38, "\t\t\t\t\t+ \"If you want to use the command line, use the --help\""], [39, "\t\t\t\t\t+ \" parameter for a list of available parameters.\");"], [40, ""], [41, "\t\t\tunparsedArgs = new String[]{\"--gui\"};"], [42, ""], [43, "\t\t}"], [47, "\t\tCLIArguments args = null;"], [48, ""], [49, "\t\ttry {"], [50, "\t\t\targs = parseArguments(unparsedArgs);"], [51, "\t\t} catch (Exception e) {"], [52, "\t\t\tSystem.err.println(e.getMessage());"], [53, "\t\t\tSystem.exit(1);"], [54, "\t\t}"], [55, ""], [56, "\t\t/* parse lines from parameter file (if one exists) */"], [57, ""], [58, "\t\tList<CLIArguments> argumentsList = Collections.singletonList(args);"], [59, ""], [60, "\t\tif (args.isParameterFile()) {"], [61, ""], [62, "\t\t\targumentsList = new ArrayList<CLIArguments>();"], [65, ""], [66, "\t\t\t\tList<String[]> unparsedArgsLines = CLIArgumentsUtil"], [67, "\t\t\t\t\t.getUnparsedParameterGroups(args.getParameterFile());"], [68, ""], [69, "\t\t\t\tfor (String[] unparsedArgsLine : unparsedArgsLines) {"], [70, ""], [71, "\t\t\t\t\ttry {"], [72, "\t\t\t\t\t\targumentsList.add(parseArguments(unparsedArgsLine));"], [73, "\t\t\t\t\t} catch (Exception e) {"], [74, "\t\t\t\t\t\tSystem.err.println(\"Could not parse parameters from file:\");"], [75, "\t\t\t\t\t\tSystem.err.println(unparsedArgsLine);"], [76, "\t\t\t\t\t\tSystem.err.println(\"Ignoring it. Reason:\");"], [77, "\t\t\t\t\t\tSystem.err.println(e.getMessage());"], [78, "\t\t\t\t\t}"], [79, ""], [80, "\t\t\t\t}"], [81, ""], [82, "\t\t\t} catch (IOException e) {"], [87, "\t\t}"], [88, ""], [89, "\t\t/* collect parameter groups into compatible groups"], [90, "\t\t * (groups of parameter groups that use the same input and config files) */"], [91, ""], [92, "\t\tList<CLIArgumentsGroup> argumentsGroups = new ArrayList<CLIArgumentsGroup>();"], [93, ""], [94, "\t\tfor (CLIArguments arguments : argumentsList) {"], [95, ""], [96, "\t\t\tboolean added = false;"], [97, ""], [98, "\t\t\tfor (CLIArgumentsGroup compatibleGroup : argumentsGroups) {"], [99, "\t\t\t\tif (compatibleGroup.isCompatible(arguments)) {"], [100, "\t\t\t\t\t// add to existing compatible group"], [101, "\t\t\t\t\tcompatibleGroup.addCLIArguments(arguments);"], [102, "\t\t\t\t\tadded = true;"], [103, "\t\t\t\t\tbreak;"], [104, "\t\t\t\t}"], [107, "\t\t\tif (!added) {"], [108, "\t\t\t\t// start a new compatible group"], [109, "\t\t\t\targumentsGroups.add(new CLIArgumentsGroup(arguments));"], [110, "\t\t\t}"], [112, "\t\t}"], [113, ""], [114, "\t\t/* execute conversions */"], [115, ""], [116, "\t\tfor (CLIArgumentsGroup argumentsGroup : argumentsGroups) {"], [117, ""], [118, "\t\t\tif (argumentsList.size() > 1) {"], [119, "\t\t\t\tSystem.out.print(\"executing conversion for these parameter lines: \");"], [120, "\t\t\t\tfor (CLIArguments p : argumentsGroup.getCLIArgumentsList()) {"], [121, "\t\t\t\t\tSystem.out.print(argumentsList.indexOf(p) + \" \");"], [122, "\t\t\t\t}"], [123, "\t\t\t\tSystem.out.print(\"\\n\");"], [124, "\t\t\t}"], [125, ""], [126, "\t\t\texecuteArgumentsGroup(argumentsGroup);"], [130, "\t}"], [132, "\tprivate static CLIArguments parseArguments(String[] unparsedArgs)"], [133, "\t\tthrows ArgumentValidationException, Exception {"], [134, ""], [135, "\t\tCLIArguments args = CliFactory.parseArguments(CLIArguments.class, unparsedArgs);"], [136, ""], [137, "\t\tif (!CLIArgumentsUtil.isValid(args)) {"], [138, "\t\t\tthrow new Exception(CLIArgumentsUtil.getErrorString(args));"], [139, "\t\t}"], [140, "\t\treturn args;"], [141, ""], [142, "\t}"], [143, ""], [144, "\tprivate static void executeArgumentsGroup(CLIArgumentsGroup argumentsGroup) {"], [145, ""], [146, "\t\t/* load configuration file */"], [147, ""], [150, "\t\tif (argumentsGroup.getRepresentative().isConfig()) {"], [152, "\t\t\t\tconfig = new PropertiesConfiguration("], [153, "\t\t\t\t\t\targumentsGroup.getRepresentative().getConfig());"], [159, ""], [162, "\t\tProgramMode programMode ="], [163, "\t\t\tCLIArgumentsUtil.getProgramMode(argumentsGroup.getRepresentative());"], [164, ""], [189, "\t\t\t\tOutput.output(config, argumentsGroup);"]], "deleted": [[30, "\t\tProgramMode programMode;"], [31, "\t\tCLIArguments args = null;"], [35, "\t\tif (unparsedArgs.length > 0) {"], [38, "\t\t\t\targs = CliFactory.parseArguments(CLIArguments.class, unparsedArgs);"], [39, "\t\t\t} catch (ArgumentValidationException e) {"], [44, "\t\t\tif (!CLIArgumentsUtil.isValid(args)) {"], [45, "\t\t\t\tSystem.err.println(CLIArgumentsUtil.getErrorString(args));"], [46, "\t\t\t\tSystem.exit(1);"], [49, "\t\t\tprogramMode = CLIArgumentsUtil.getProgramMode(args);"], [51, "\t\t} else {"], [52, ""], [53, "\t\t\tSystem.out.println(\"No parameters, running graphical interface.\\n\""], [54, "\t\t\t\t\t+ \"If you want to use the command line, use the --help\""], [55, "\t\t\t\t\t+ \" parameter for a list of available parameters.\");"], [56, "\t\t\tprogramMode = ProgramMode.GUI;"], [60, "\t\t/* load configuration file */"], [64, "\t\tif (args != null && args.isConfig()) {"], [66, "\t\t\t\tconfig = new PropertiesConfiguration(args.getConfig());"], [72, ""], [78, "\t\t\t//parser.printHelp();"], [100, "\t\t\t\tOutput.output(config, args);"], [107, ""]]}, "num_lines_added": 110, "num_lines_removed": 22}