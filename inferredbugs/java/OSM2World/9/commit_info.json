{"hash": "5fee298e5f76a53934f5194d8c6b8fb80a2a6841", "message": "Use try-with-resources to prevent resource leaks", "file_num_lines": 156, "diff_parsed": {"added": [[48, ""], [49, "\t\ttry (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {"], [50, ""], [55, "\t\t\t// Associate the code string with the unique id"], [56, "\t\t\tgl.glShaderSource(vertShader, 1, vertCode, null);"], [57, "\t\t\t// compile the vertex shader"], [58, "\t\t\tgl.glCompileShader(vertShader);"], [60, "\t\t\t// acquire compilation status"], [61, "\t\t\tIntBuffer shaderStatus = IntBuffer.allocate(1);"], [62, "\t\t\tgl.glGetShaderiv(vertShader, GL3.GL_COMPILE_STATUS, shaderStatus);"], [64, "\t\t\t// check whether compilation was successful"], [65, "\t\t\tif (shaderStatus.get() == GL.GL_FALSE) {"], [66, "\t\t\t\tprintShaderInfoLog(gl, vertShader);"], [67, "\t\t\t\tthrow new IllegalStateException(\"compilation error for shader [\" + filename + \"].\");"], [68, "\t\t\t}"], [70, ""], [71, "\t\t\t// the int returned is now associated with the compiled shader"], [72, "\t\t\treturn vertShader;"], [73, ""], [74, "\t\t} catch (IOException e) {"], [75, "\t\t\tthrow new RuntimeException(\"Failed reading vertex shader \\\"\" + filename + \"\\\".\",e);"], [99, ""], [100, "\t\ttry (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {"], [101, ""], [106, "\t\t\tgl.glShaderSource(fragShader, 1, fragCode, null);"], [107, "\t\t\tgl.glCompileShader(fragShader);"], [109, "\t\t\t// acquire compilation status"], [110, "\t\t\tIntBuffer shaderStatus = IntBuffer.allocate(1);"], [111, "\t\t\tgl.glGetShaderiv(fragShader, GL3.GL_COMPILE_STATUS, shaderStatus);"], [113, "\t\t\t// check whether compilation was successful"], [114, "\t\t\tif (shaderStatus.get() == GL.GL_FALSE) {"], [115, "\t\t\t\tprintShaderInfoLog(gl, fragShader);"], [116, "\t\t\t\tthrow new IllegalStateException(\"compilation error for shader [\""], [117, "\t\t\t\t\t\t+ filename + \"].\");"], [118, "\t\t\t}"], [120, ""], [121, "\t\t\treturn fragShader;"], [122, ""], [123, "\t\t} catch (IOException e) {"], [124, "\t\t\tthrow new RuntimeException(\"Failed reading fragment shader \\\"\" + filename + \"\\\".\",e);"]], "deleted": [[48, "\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(stream));"], [49, "\t\ttry {"], [53, "\t\t} catch (IOException e) {"], [54, "\t\t\tthrow new RuntimeException(\"Failed reading vertex shader \\\"\" + filename + \"\\\".\",e);"], [55, "\t\t}"], [57, "\t\t// Associate the code string with the unique id"], [58, "\t\tgl.glShaderSource(vertShader, 1, vertCode, null);"], [59, "\t\t// compile the vertex shader"], [60, "\t\tgl.glCompileShader(vertShader);"], [62, "\t\t// acquire compilation status"], [63, "\t\tIntBuffer shaderStatus = IntBuffer.allocate(1);"], [64, "\t\tgl.glGetShaderiv(vertShader, GL3.GL_COMPILE_STATUS, shaderStatus);"], [66, "\t\t// check whether compilation was successful"], [67, "\t\tif (shaderStatus.get() == GL.GL_FALSE) {"], [69, "\t\t\tthrow new IllegalStateException(\"compilation error for shader [\""], [70, "\t\t\t\t\t+ filename + \"].\");"], [72, "\t\tprintShaderInfoLog(gl, vertShader);"], [74, "\t\t// the int returned is now associated with the compiled shader"], [75, "\t\treturn vertShader;"], [97, "\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(stream));"], [98, "\t\ttry {"], [102, "\t\t} catch (IOException e) {"], [103, "\t\t\tthrow new RuntimeException(\"Failed reading fragment shader \\\"\" + filename + \"\\\".\",e);"], [104, "\t\t}"], [106, "\t\tgl.glShaderSource(fragShader, 1, fragCode, null);"], [107, "\t\tgl.glCompileShader(fragShader);"], [109, "\t\t// acquire compilation status"], [110, "\t\tIntBuffer shaderStatus = IntBuffer.allocate(1);"], [111, "\t\tgl.glGetShaderiv(fragShader, GL3.GL_COMPILE_STATUS, shaderStatus);"], [113, "\t\t// check whether compilation was successful"], [114, "\t\tif (shaderStatus.get() == GL.GL_FALSE) {"], [116, "\t\t\tthrow new IllegalStateException(\"compilation error for shader [\""], [117, "\t\t\t\t\t+ filename + \"].\");"], [119, "\t\tprintShaderInfoLog(gl, fragShader);"], [121, "\t\treturn fragShader;"]]}, "num_lines_added": 40, "num_lines_removed": 35}