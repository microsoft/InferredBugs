{"hash": "9f2c8496851b17717feee8f19f45651d79be43dc", "message": "Remove references from MapElement back to OsmEntity", "file_num_lines": 464, "diff_parsed": {"added": [[20, "import org.osm2world.core.map_data.data.TagSet;"], [159, "\t\treturn singleton(new MapArea(tagSource.getId(), tagSource instanceof OsmRelation,"], [160, "\t\t\t\tOSMToMapDataConverter.tagsOfEntity(tagSource), outerNodes, holes));"], [335, "\t\t\tMapArea area = new MapArea(relation.getId(), true, OSMToMapDataConverter.tagsOfEntity(relation),"], [336, "\t\t\t\t\touterRing.getNodeLoop(), holes, new PolygonWithHolesXZ(outerRing.getPolygon(), holesXZ));"], [349, "\tprivate static final TagSet COASTLINE_NODE_TAGS = TagSet.of("], [350, "\t\t\t\"osm2world:note\", \"fake node from coastline processing\");"], [436, "\t\t\t\t\t\t\t\t\t\t++highestNodeId, nodeIdMap, mapNodes);"], [461, "\t\t\t\t\t\t++highestNodeId, nodeIdMap, mapNodes);"], [596, "\t\t\t\t\t\t\t\t\t++highestNodeId, nodeIdMap, mapNodes));"], [641, "\t\t\tTLongObjectMap<MapNode> nodeIdMap, Collection<MapNode> mapNodes) {"], [643, "\t\tlong id = nodeId + 1;"], [644, "\t\tMapNode mapNode = new MapNode(id, COASTLINE_NODE_TAGS, pos);"], [646, "\t\tnodeIdMap.put(id, mapNode);"], [819, "\t\t\treturn \"(\" + outgoingIntersection + \", \" + node.getId() + \"@\" + node.getPos() + \")\";"]], "deleted": [[5, "import static java.lang.Double.NaN;"], [39, "import de.topobyte.osm4j.core.model.impl.Node;"], [160, "\t\treturn singleton(new MapArea(tagSource, outerNodes, holes));"], [335, "\t\t\tMapArea area = new MapArea(relation, outerRing.getNodeLoop(), holes,"], [336, "\t\t\t\t\tnew PolygonWithHolesXZ(outerRing.getPolygon(), holesXZ));"], [349, "\tprivate static final List<OsmTag> COASTLINE_NODE_TAGS = singletonList("], [350, "\t\tnew Tag(\"osm2world:note\", \"fake node from coastline processing\"));"], [436, "\t\t\t\t\t\t\t\t\t\t++highestNodeId, osmData, nodeIdMap, mapNodes);"], [461, "\t\t\t\t\t\t++highestNodeId, osmData, nodeIdMap, mapNodes);"], [596, "\t\t\t\t\t\t\t\t\t++highestNodeId, osmData, nodeIdMap, mapNodes));"], [641, "\t\t\tOSMData osmData, TLongObjectMap<MapNode> nodeIdMap,"], [642, "\t\t\tCollection<MapNode> mapNodes) {"], [643, ""], [644, "\t\tNode osmNode = new Node(nodeId + 1, NaN, NaN);"], [645, "\t\tosmNode.setTags(COASTLINE_NODE_TAGS);"], [646, ""], [647, "\t\tosmData.getData().getNodes().put(osmNode.getId(), osmNode);"], [649, "\t\tMapNode mapNode = new MapNode(pos, osmNode);"], [651, "\t\tnodeIdMap.put(osmNode.getId(), mapNode);"], [824, "\t\t\treturn \"(\" + outgoingIntersection + \", \" + node.getOsmElement().getId() +"], [825, "\t\t\t\t\t\"@\" + node.getPos() + \")\";"]]}, "num_lines_added": 15, "num_lines_removed": 21}