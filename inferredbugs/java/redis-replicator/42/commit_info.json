{"hash": "66ffb5c66bc4802fd8b78aa4c610730bc8e65578", "message": "add merge rdb example", "file_num_lines": 100, "diff_parsed": {"added": [[39, "        try (FileOutputStream out = new FileOutputStream(new File(\"./src/test/resources/dump-merged.rdb\"))) {"], [40, "            // you know your redis version. so you know your rdb version."], [41, "            out.write(\"REDIS0007\".getBytes());"], [42, "            for (int i = 0; i < 4; i++) {"], [43, "                Replicator replicator = new RedisReplicator(new File(\"./src/test/resources/dump-split-\" + i + \".rdb\"),"], [44, "                        FileType.RDB, Configuration.defaultSetting());"], [45, "                final Tuple2<String, ByteBuilder> tuple = new Tuple2<>();"], [46, "                tuple.setT2(ByteBuilder.allocate(128));"], [48, "                final RawByteListener rawByteListener = new RawByteListener() {"], [49, "                    @Override"], [50, "                    public void handle(byte... rawBytes) {"], [51, "                        if (tuple.getT1() != null) {"], [52, "                            try {"], [53, "                                byte[] ary = tuple.getT2().array();"], [54, "                                byte[] head = Arrays.copyOfRange(ary, 0, 5);"], [55, "                                if (Arrays.equals(\"REDIS\".getBytes(), head)) {"], [56, "                                    out.write(ary, 9, ary.length - 9);"], [57, "                                } else {"], [58, "                                    out.write(ary);"], [59, "                                }"], [60, "                            } catch (IOException e) {"], [61, "                                throw new UncheckedIOException(e);"], [63, "                            tuple.setT1(null);"], [64, "                            tuple.setT2(ByteBuilder.allocate(128));"], [66, "                        for (byte b : rawBytes) tuple.getT2().put(b);"], [67, "                    }"], [68, "                };"], [69, "                replicator.addRawByteListener(rawByteListener);"], [70, "                replicator.addAuxFieldListener(new AuxFieldListener() {"], [71, "                    @Override"], [72, "                    public void handle(Replicator replicator, AuxField auxField) {"], [73, "                        // clear aux field"], [76, "                });"], [77, "                replicator.addRdbListener(new RdbListener.Adaptor() {"], [78, "                    @Override"], [79, "                    public void handle(Replicator replicator, KeyValuePair<?> kv) {"], [80, "                        tuple.setT1(kv.getKey());"], [81, "                    }"], [83, "                    public void postFullSync(Replicator replicator, long checksum) {"], [84, "                        tuple.setT2(ByteBuilder.allocate(128));"], [85, "                    }"], [86, "                });"], [88, "                replicator.open();"], [89, "            }"], [90, "            out.write(Constants.RDB_OPCODE_EOF);"], [91, "            // if you want to load data from split rdb file which we generated."], [92, "            // You MUST close rdbchecksum in redis.conf."], [93, "            // Because this checksum is not correct."], [94, "            out.write(longToByteArray(0L));"]], "deleted": [[39, "        final FileOutputStream out = new FileOutputStream(new File(\"./src/test/resources/dump-merged.rdb\"));"], [40, "        // you know your redis version. so you know your rdb version."], [41, "        out.write(\"REDIS0007\".getBytes());"], [42, "        for (int i = 0; i < 4; i++) {"], [43, "            Replicator replicator = new RedisReplicator(new File(\"./src/test/resources/dump-split-\" + i + \".rdb\"),"], [44, "                    FileType.RDB, Configuration.defaultSetting());"], [45, "            final Tuple2<String, ByteBuilder> tuple = new Tuple2<>();"], [46, "            tuple.setT2(ByteBuilder.allocate(128));"], [48, "            final RawByteListener rawByteListener = new RawByteListener() {"], [49, "                @Override"], [50, "                public void handle(byte... rawBytes) {"], [51, "                    if (tuple.getT1() != null) {"], [52, "                        try {"], [53, "                            byte[] ary = tuple.getT2().array();"], [54, "                            byte[] head = Arrays.copyOfRange(ary, 0, 5);"], [55, "                            if (Arrays.equals(\"REDIS\".getBytes(), head)) {"], [56, "                                out.write(ary, 9, ary.length - 9);"], [57, "                            } else {"], [58, "                                out.write(ary);"], [60, "                        } catch (IOException e) {"], [61, "                            throw new UncheckedIOException(e);"], [63, "                        tuple.setT1(null);"], [66, "                    for (byte b : rawBytes) tuple.getT2().put(b);"], [67, "                }"], [68, "            };"], [69, "            replicator.addRawByteListener(rawByteListener);"], [70, "            replicator.addAuxFieldListener(new AuxFieldListener() {"], [71, "                @Override"], [72, "                public void handle(Replicator replicator, AuxField auxField) {"], [73, "                    // clear aux field"], [74, "                    tuple.setT2(ByteBuilder.allocate(128));"], [75, "                }"], [76, "            });"], [77, "            replicator.addRdbListener(new RdbListener.Adaptor() {"], [78, "                @Override"], [79, "                public void handle(Replicator replicator, KeyValuePair<?> kv) {"], [80, "                    tuple.setT1(kv.getKey());"], [81, "                }"], [83, "                public void postFullSync(Replicator replicator, long checksum) {"], [84, "                    tuple.setT2(ByteBuilder.allocate(128));"], [85, "                }"], [86, "            });"], [88, "            replicator.open();"], [90, "        out.write(Constants.RDB_OPCODE_EOF);"], [91, "        // if you want to load data from split rdb file which we generated."], [92, "        // You MUST close rdbchecksum in redis.conf."], [93, "        // Because this checksum is not correct."], [94, "        out.write(longToByteArray(0L));"], [95, "        out.close();"]]}, "num_lines_added": 49, "num_lines_removed": 49}