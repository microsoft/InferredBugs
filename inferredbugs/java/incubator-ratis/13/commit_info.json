{"hash": "e99f0d4b4fcf187ec3623fc550ecfa8d4df80cc7", "message": "RATIS-1099. DataStreamServerRpc should connect other peers automatically (#225)\n\n* RATIS-1099. DataStreamServerRpc should connect other peers automatically.\r\n\r\n* Add NettyServerStreamRpc.Proxies.\r\n\r\n* Remove unused import.", "file_num_lines": 179, "diff_parsed": {"added": [[21, "import java.io.IOException;"], [32, "import org.apache.ratis.server.DataStreamServerRpc;"], [55, "  static class SingleDataStreamStateMachine extends BaseStateMachine {"], [131, "      final DataStreamServerImpl streamServer = new DataStreamServerImpl("], [132, "          peers.get(i), singleDataStreamStateMachine, properties, null);"], [133, "      final DataStreamServerRpc rpc = streamServer.getServerRpc();"], [138, "        rpc.addPeers(otherPeers);"], [140, "      rpc.start();"], [150, "  public void shutdown() throws IOException {"], [152, "    for (DataStreamServerImpl server : servers) {"], [153, "      server.close();"], [154, "    }"], [158, "  public void testDataStreamSingleServer() throws Exception {"], [159, "    runTestDataStream(1);"], [163, "  public void testDataStreamMultipleServer() throws Exception {"], [164, "    runTestDataStream(3);"], [165, "  }"], [166, ""], [167, "  void runTestDataStream(int numServers) throws Exception {"], [169, "    peers = Arrays.stream(MiniRaftCluster.generateIds(numServers, 0))"], [171, "        .map(id -> new RaftPeer(id, NetUtils.createLocalServerAddress()))"], [172, "        .collect(Collectors.toList());"], [176, "    try {"], [177, "      runTestDataStream();"], [178, "    } finally {"], [179, "      shutdown();"], [180, "    }"]], "deleted": [[27, "import org.apache.ratis.netty.server.NettyServerStreamRpc;"], [54, "  class SingleDataStreamStateMachine extends BaseStateMachine {"], [130, "      DataStreamServerImpl streamServer;"], [135, "        streamServer = new DataStreamServerImpl("], [136, "            peers.get(i), properties, null, singleDataStreamStateMachine, otherPeers);"], [137, "      } else {"], [138, "        streamServer = new DataStreamServerImpl("], [139, "            peers.get(i), singleDataStreamStateMachine, properties, null);"], [142, "      streamServer.getServerRpc().startServer();"], [143, "    }"], [144, ""], [145, "    // start peer clients on stream servers"], [146, "    for (DataStreamServerImpl streamServer : servers) {"], [147, "      ((NettyServerStreamRpc) streamServer.getServerRpc()).startClientToPeers();"], [156, "  public void shutDownSetup(){"], [158, "    servers.stream().forEach(s -> s.close());"], [162, "  public void testDataStream(){"], [163, "    properties = new RaftProperties();"], [164, "    peers = Arrays.stream(MiniRaftCluster.generateIds(1, 0))"], [165, "                       .map(RaftPeerId::valueOf)"], [166, "                       .map(id -> new RaftPeer(id, NetUtils.createLocalServerAddress())).collect("], [167, "            Collectors.toList());"], [168, ""], [169, "    setupServer();"], [170, "    setupClient();"], [171, "    runTestDataStream();"], [175, "  public void testDataStreamMultipleServer(){"], [177, "    peers = Arrays.asList(MiniRaftCluster.generateIds(3, 0)).stream()"], [179, "        .map(id -> new RaftPeer(id, NetUtils.createLocalServerAddress())).collect("], [180, "            Collectors.toList());"], [184, "    runTestDataStream();"], [222, ""], [223, "    shutDownSetup();"]]}, "num_lines_added": 27, "num_lines_removed": 33}