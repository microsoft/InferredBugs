{"hash": "28bafa1556c25a82db0e2838cd438e80dcd135fc", "message": "RATIS-1209. Compare the performance between DataStreamApi and AsyncApi. (#328)", "file_num_lines": 115, "diff_parsed": {"added": [[26, "import org.apache.ratis.thirdparty.io.netty.buffer.ByteBuf;"], [27, "import org.apache.ratis.thirdparty.io.netty.buffer.ByteBufAllocator;"], [28, "import org.apache.ratis.thirdparty.io.netty.buffer.PooledByteBufAllocator;"], [29, "import org.apache.ratis.util.Preconditions;"], [37, "import java.util.Collections;"], [78, "      final long fileLength = file.length();"], [79, "      Preconditions.assertTrue(fileLength == getFileSizeInBytes(), \"Unexpected file size: expected size is \""], [80, "          + getFileSizeInBytes() + \" but actual size is \" + fileLength);"], [116, "    final int fileSize = getFileSizeInBytes();"], [117, "    final int bufferSize = getBufferSizeInBytes();"], [118, "    if (fileSize <= 0) {"], [119, "      return Collections.emptyList();"], [121, "    List<CompletableFuture<DataStreamReply>> futures = new ArrayList<>();"], [122, "    final ByteBufAllocator alloc = PooledByteBufAllocator.DEFAULT;"], [123, ""], [124, "    for(long offset = 0L; offset < fileSize;) {"], [125, "      final ByteBuf buf = alloc.directBuffer(bufferSize);"], [126, "      final int bytesRead = buf.writeBytes(fileChannel, bufferSize);"], [127, "      if (bytesRead < 0) {"], [128, "        throw new IllegalStateException(\"Failed to read \" + fileSize"], [129, "            + \" byte(s). The channel has reached end-of-stream at \" + offset);"], [130, "      } else if (bytesRead > 0) {"], [131, "        offset += bytesRead;"], [132, ""], [133, "        final CompletableFuture<DataStreamReply> f = dataStreamOutput.writeAsync(buf.nioBuffer(), offset == fileSize);"], [134, "        f.thenRun(buf::release);"], [135, "        futures.add(f);"]], "deleted": [[30, "import java.nio.ByteBuffer;"], [109, "    List<CompletableFuture<DataStreamReply>> futures = new ArrayList<>();"], [110, ""], [111, "    int bytesToRead = getBufferSizeInBytes();"], [112, "    if (getFileSizeInBytes() > 0L && getFileSizeInBytes() < getBufferSizeInBytes()) {"], [113, "      bytesToRead = getFileSizeInBytes();"], [115, ""], [116, "    ByteBuffer byteBuffer = ByteBuffer.allocateDirect(bytesToRead);"], [117, "    long offset = 0L;"], [118, ""], [119, "    while (fileChannel.read(byteBuffer) > 0) {"], [120, "      byteBuffer.flip();"], [121, "      futures.add(dataStreamOutput.writeAsync(byteBuffer, offset + bytesToRead == getFileSizeInBytes()));"], [122, "      offset += bytesToRead;"], [123, "      bytesToRead = (int) Math.min(getFileSizeInBytes() - offset, getBufferSizeInBytes());"], [124, "      if (bytesToRead > 0) {"], [125, "        byteBuffer = ByteBuffer.allocateDirect(bytesToRead);"]]}, "num_lines_added": 27, "num_lines_removed": 17}