{"hash": "cbdf7bda1ad749c846af8aba5afeac28efb96c65", "message": "RATIS-525. Usability improvements to VerificationTool\n\n* Add lots of new options\n* Fix LOG/stdout use\n* Remove logs if they already exist before writing", "file_num_lines": 172, "diff_parsed": {"added": [[24, "import java.util.HashSet;"], [26, "import java.util.Set;"], [27, "import java.util.concurrent.ExecutorService;"], [28, "import java.util.concurrent.Executors;"], [29, "import java.util.concurrent.Future;"], [31, "import org.apache.ratis.logservice.api.LogInfo;"], [41, "import com.beust.jcommander.JCommander;"], [42, "import com.beust.jcommander.Parameter;"], [43, ""], [50, "    @Parameter(names = {\"-nl\", \"--numLogs\"}, description = \"Number of logs\")"], [52, "    @Parameter(names = {\"-nr\", \"--numRecords\"}, description = \"Number of records per log\")"], [54, "    @Parameter(names = {\"-w\", \"--write\"}, description = \"Write to the logs\")"], [55, "    private boolean write = true;"], [56, "    @Parameter(names = {\"-r\", \"--read\"}, description = \"Read the logs\")"], [57, "    private boolean read = true;"], [58, "    @Parameter(names = {\"-l\", \"--logFrequency\"}, description = \"Print update every N operations\")"], [59, "    private int logFrequency = 50;"], [60, "    @Parameter(names = {\"-h\", \"--help\"}, description = \"Help\", help = true)"], [61, "    private boolean help = false;"], [62, ""], [63, "    public static final String LOG_NAME_PREFIX = \"testlog\";"], [64, "    public static final String MESSAGE_PREFIX = \"message\";"], [65, ""], [66, "    public static void main(String[] args) throws IOException {"], [68, "        JCommander jc = JCommander.newBuilder()"], [70, "                .build();"], [71, ""], [72, "        jc.parse(args);"], [73, "        if (tool.help) {"], [74, "          jc.usage();"], [75, "          return;"], [76, "        }"], [81, ""], [82, "        if (tool.write) {"], [83, "          LOG.info(\"Executing parallel writes\");"], [84, "          // Delete any logs that already exist first"], [85, "          final Set<LogName> logsInSystem = new HashSet<>();"], [86, "          List<LogInfo> listOfLogs = client.listLogs();"], [87, "          for (LogInfo logInfo : listOfLogs) {"], [88, "            logsInSystem.add(logInfo.getLogName());"], [89, "          }"], [90, ""], [91, "          LOG.info(\"Observed logs already in system: {}\", logsInSystem);"], [92, "          for (int i = 0; i < tool.numLogs; i++) {"], [93, "              LogName logName = getLogName(i);"], [94, "              if (logsInSystem.contains(logName)) {"], [95, "                LOG.info(\"Deleting {}\", logName);"], [96, "                client.deleteLog(logName);"], [97, "              }"], [98, "              BulkWriter writer = new BulkWriter(getLogName(i), client, tool.numRecords, tool.logFrequency);"], [99, "              futures.add(executor.submit(writer));"], [100, "          }"], [101, "          waitForCompletion(futures);"], [103, ""], [104, "        if (tool.read) {"], [105, "          LOG.info(\"Executing parallel reads\");"], [106, "          futures = new ArrayList<Future<?>>(tool.numLogs);"], [107, "          for (int i = 0; i < tool.numLogs; i++) {"], [108, "              BulkReader reader = new BulkReader(getLogName(i), client, tool.numRecords, tool.logFrequency);"], [109, "              futures.add(executor.submit(reader));"], [110, "          }"], [111, "          waitForCompletion(futures);"], [116, "    private static LogName getLogName(int id) {"], [117, "      return LogName.of(LOG_NAME_PREFIX + id);"], [118, "    }"], [119, ""], [133, "        LOG.info(\"All operations finished\");"], [136, "    static abstract class Operation implements Runnable {"], [137, "      final LogName logName;"], [138, "      final LogServiceClient client;"], [139, "      final int numRecords;"], [140, "      final int logFreq;"], [141, ""], [142, "      Operation(LogName logName, LogServiceClient client, int numRecords, int logFreq) {"], [143, "        this.logName = logName;"], [144, "        this.client = client;"], [145, "        this.numRecords = numRecords;"], [146, "        this.logFreq = logFreq;"], [147, "      }"], [148, "    }"], [150, "    static class BulkWriter extends Operation {"], [151, "        BulkWriter(LogName logName, LogServiceClient client, int numRecords, int logFreq) {"], [152, "            super(logName, client, numRecords, logFreq);"], [157, "                LOG.info(\"Creating {}\", logName);"], [158, "                LogStream logStream = this.client.createLog(logName);"], [162, "                    if (i % logFreq == 0) {"], [163, "                      LOG.info(logName + \" Writing \" + message);"], [164, "                    }"], [168, "                LOG.info(\"{} log entries written to log {} successfully.\", numRecords, logName);"], [175, "    static class BulkReader extends Operation {"], [176, "        BulkReader(LogName logName, LogServiceClient client, int numRecords, int logFreq) {"], [177, "          super(logName, client, numRecords, logFreq);"], [178, "      }"], [182, "                LogStream logStream = this.client.getLog(logName);"], [186, "                    LOG.error(\"There is mismatch is number of records. Expected Records: \"+"], [194, "                    if (i % logFreq == 0) {"], [195, "                      LOG.info(logName + \" Read \" + message);"], [196, "                    }"], [198, "                        LOG.error(\"Message is not correct. Expected: \"+(MESSAGE_PREFIX + i)"], [203, "                LOG.info(\"{} log entries read from log {} successfully.\", numRecords, logName);"]], "deleted": [[25, "import java.util.concurrent.*;"], [32, ""], [33, "import com.beust.jcommander.JCommander;"], [34, "import com.beust.jcommander.Parameter;"], [36, "import org.jline.utils.Log;"], [46, "    public static String LOG_NAME_PREFIX = \"testlog\";"], [47, "    public static String MESSAGE_PREFIX = \"message\";"], [48, ""], [51, ""], [52, "    public static void main(String[] args) {"], [54, "        JCommander.newBuilder()"], [56, "                .build()"], [57, "                .parse(args);"], [62, "        for (int i = 0; i < tool.numLogs; i++) {"], [63, "            BulkWriter writer = new BulkWriter(LOG_NAME_PREFIX + i, client, tool.numRecords);"], [64, "            futures.add(executor.submit(writer));"], [66, "        waitForCompletion(futures);"], [67, "        futures = new ArrayList<Future<?>>(tool.numLogs);"], [68, "        for (int i = 0; i < tool.numLogs; i++) {"], [69, "            BulkReader reader = new BulkReader(LOG_NAME_PREFIX + i, client, tool.numRecords);"], [70, "            futures.add(executor.submit(reader));"], [72, "        waitForCompletion(futures);"], [88, ""], [92, "    static class BulkWriter implements Runnable {"], [93, "        private String logName;"], [94, "        private LogServiceClient logServiceClient;"], [95, "        private int numRecords;"], [97, "        BulkWriter(String logName, LogServiceClient logServiceClient, int numRecords) {"], [98, "            this.logName = logName;"], [99, "            this.logServiceClient = logServiceClient;"], [100, "            this.numRecords = numRecords;"], [105, "                LogStream logStream = this.logServiceClient.createLog(LogName.of(logName));"], [109, "                    System.out.println(logName + \" Writing \" + message);"], [113, "                Log.info(\"\" + numRecords + \"log entries written to log \"+ this.logName + \" successfully.\");"], [120, "    static class BulkReader implements Runnable {"], [121, "        private String logName;"], [122, "        private LogServiceClient logServiceClient;"], [123, "        private int numRecords;"], [124, ""], [125, "        BulkReader(String logName, LogServiceClient logServiceClient, int numRecords) {"], [126, "            this.logName = logName;"], [127, "            this.logServiceClient = logServiceClient;"], [128, "            this.numRecords = numRecords;"], [129, "        }"], [133, "                LogStream logStream = this.logServiceClient.getLog(LogName.of(logName));"], [137, "                    Log.error(\"There is mismatch is number of records. Expected Records: \"+"], [145, "                    System.out.println(logName + \" Read \" + message);"], [147, "                        Log.error(\"Message is not correct. Expected: \"+(MESSAGE_PREFIX + i)"], [152, "                Log.info(\"\" + numRecords + \" log entries read from log \"+ this.logName + \" successfully.\");"]]}, "num_lines_added": 100, "num_lines_removed": 49}