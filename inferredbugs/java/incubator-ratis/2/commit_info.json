{"hash": "96a3b1bfeda319e8543da3dbcd2afadd5468a803", "message": "RATIS-409. Watch requests may not work if there is a conf change.", "file_num_lines": 91, "diff_parsed": {"added": [[21, "import org.apache.ratis.protocol.RaftPeerId;"], [22, "import org.apache.ratis.server.storage.RaftLogIndex;"], [24, "import org.slf4j.Logger;"], [25, "import org.slf4j.LoggerFactory;"], [28, "import java.util.function.Consumer;"], [31, "  public static final Logger LOG = LoggerFactory.getLogger(FollowerInfo.class);"], [32, ""], [33, "  private final String name;"], [34, "  private final Consumer<Object> infoIndexChange;"], [35, "  private final Consumer<Object> debugIndexChange;"], [36, ""], [40, "  private final RaftLogIndex nextIndex;"], [41, "  private final RaftLogIndex matchIndex = new RaftLogIndex(\"matchIndex\", 0L);"], [42, "  private final RaftLogIndex commitIndex = new RaftLogIndex(\"commitIndex\", RaftServerConstants.INVALID_LOG_INDEX);"], [46, ""], [47, "  FollowerInfo(RaftPeerId id, RaftPeer peer, Timestamp lastRpcTime, long nextIndex,"], [49, "    this.name = id + \"->\" + peer.getId();"], [50, "    this.infoIndexChange = s -> LOG.info(\"{}: {}\", name, s);"], [51, "    this.debugIndexChange = s -> LOG.debug(\"{}: {}\", name, s);"], [52, ""], [56, "    this.nextIndex = new RaftLogIndex(\"nextIndex\", nextIndex);"], [65, "  public void updateMatchIndex(long newMatchIndex) {"], [66, "    matchIndex.updateIncreasingly(newMatchIndex, debugIndexChange);"], [67, "  }"], [68, ""], [75, "    return commitIndex.updateToMax(newCommitIndex, debugIndexChange);"], [76, "  }"], [77, ""], [78, "  public long getNextIndex() {"], [79, "    return nextIndex.get();"], [82, "  public void updateNextIndex(long newNextIndex) {"], [83, "    nextIndex.updateIncreasingly(newNextIndex, debugIndexChange);"], [86, "  public void decreaseNextIndex(long newNextIndex) {"], [87, "    nextIndex.updateUnconditionally(old -> old <= 0L? old: Math.min(old - 1, newNextIndex), infoIndexChange);"], [90, "  public void setSnapshotIndex(long snapshotIndex) {"], [91, "    matchIndex.setUnconditionally(snapshotIndex, infoIndexChange);"], [92, "    nextIndex.setUnconditionally(snapshotIndex + 1, infoIndexChange);"], [97, "    return name + \"(c\" + getCommitIndex() + \",m\" + getMatchIndex() + \",n\" + getNextIndex()"], [98, "        + \", attendVote=\" + attendVote +"]], "deleted": [[21, "import org.apache.ratis.util.Preconditions;"], [24, "import java.util.concurrent.atomic.AtomicLong;"], [31, "  private long nextIndex;"], [32, "  private final AtomicLong matchIndex;"], [33, "  private final AtomicLong commitIndex = new AtomicLong(RaftServerConstants.INVALID_LOG_INDEX);"], [37, "  FollowerInfo(RaftPeer peer, Timestamp lastRpcTime, long nextIndex,"], [42, "    this.nextIndex = nextIndex;"], [43, "    this.matchIndex = new AtomicLong(0);"], [48, "  public void updateMatchIndex(final long matchIndex) {"], [49, "    this.matchIndex.set(matchIndex);"], [50, "  }"], [51, ""], [62, "    final long old = commitIndex.getAndUpdate(oldCommitIndex -> newCommitIndex);"], [63, "    Preconditions.assertTrue(newCommitIndex >= old,"], [64, "        () -> \"newCommitIndex = \" + newCommitIndex + \" < old = \" + old);"], [65, "    return old != newCommitIndex;"], [68, "  public synchronized long getNextIndex() {"], [69, "    return nextIndex;"], [72, "  public synchronized void updateNextIndex(long i) {"], [73, "    nextIndex = i;"], [76, "  public synchronized void decreaseNextIndex(long targetIndex) {"], [77, "    if (nextIndex > 0) {"], [78, "      nextIndex = Math.min(nextIndex - 1, targetIndex);"], [79, "    }"], [84, "    return peer.getId() + \"(next=\" + nextIndex + \", match=\" + matchIndex + \",\" +"], [85, "        \" attendVote=\" + attendVote +"]]}, "num_lines_added": 39, "num_lines_removed": 26}