{"hash": "134c1aad7f1378570d7ee6bc9a0b15fcda274375", "message": "ns", "file_num_lines": 234, "diff_parsed": {"added": [[12, "import org.jgroups.logging.Log;"], [18, "import java.util.concurrent.Future;"], [76, "    protected Future<?>         election_task;"], [85, "    /** The address of the candidate this node voted for in the current term */"], [86, "    protected Address           voted_for;"], [87, ""], [110, "    public RAFT createNewTerm() {"], [112, "            public RAFT call() throws Exception {"], [113, "                current_term++;"], [114, "                voted_for=null;"], [115, "                return RAFT.this;"], [116, "            }});"], [119, "    public Log log() {return log;}"], [123, "        RaftImpl tmp=impl;"], [124, "        return tmp.getClass().getSimpleName();"], [192, "    protected void startElectionTimer() {"], [193, "        withLockDo(lock, new Callable<Void>() {"], [194, "            public Void call() throws Exception {"], [195, "                if(election_task == null || election_task.isDone())"], [196, "                    election_task=timer.scheduleWithDynamicInterval(new ElectionTask());"], [197, "                return null;"], [198, "            }"], [199, "        });"], [200, "    }"], [201, ""], [202, "    protected void stopElectionTimer() {"], [203, "        withLockDo(lock, new Callable<Void>() {"], [204, "            public Void call() throws Exception {"], [205, "                if(election_task != null) election_task.cancel(true);"], [206, "                return null;"], [207, "            }"], [208, "        });"], [209, "    }"], [210, ""], [247, "        final RaftImpl new_impl=new_role == Role.Follower? new Follower(this) : new_role == Role.Candidate? new Candidate(this) : new Leader(this);"], [248, "        withLockDo(impl_lock, new Callable<Void>() {"], [249, "            public Void call() throws Exception {"], [250, "                if(!impl.getClass().equals(new_impl.getClass())) {"], [251, "                    impl.destroy();"], [252, "                    new_impl.init();"], [253, "                    impl=new_impl;"], [254, "                }"], [255, "                return null;"], [257, "        });"], [291, "            withLockDo(impl_lock, new Callable<Void>() {"], [292, "                public Void call() throws Exception {"], [293, "                    impl.electionTimeout();"], [294, "                    return null;"], [295, "                }"], [296, "            });"]], "deleted": [[104, "    public RAFT incrementCurrentTerm() {"], [106, "            public RAFT call() throws Exception {current_term++; return RAFT.this;}});"], [112, "        return withLockDo(impl_lock, new Callable<String>() {"], [113, "            public String call() throws Exception {return impl.getClass().toString();}});"], [217, "        RaftImpl new_impl=null;"], [218, "        switch(new_role) {"], [219, "            case Follower:"], [220, "                new_impl=new Follower(this);"], [221, "                break;"], [222, "            case Candidate:"], [223, "                new_impl=new Follower(this);"], [224, "                break;"], [225, "            case Leader:"], [226, "                new_impl=new Leader(this);"], [227, "                break;"], [228, "        }"], [229, "        impl_lock.lock();"], [230, "        try {"], [231, "            if(!impl.getClass().equals(new_impl.getClass())) {"], [232, "                impl.destroy();"], [233, "                new_impl.init();"], [234, "                impl=new_impl;"], [236, "        }"], [237, "        finally {"], [238, "            impl_lock.unlock();"], [239, "        }"], [273, "            if(!heartbeat_received)"], [274, "                changeRole(Role.Candidate);"], [275, "            else"], [276, "                heartbeat_received=false;"]]}, "num_lines_added": 50, "num_lines_removed": 30}