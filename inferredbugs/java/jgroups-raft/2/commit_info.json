{"hash": "59687f494a5b508a974cc57581845b7df704e634", "message": "ns", "file_num_lines": 314, "diff_parsed": {"added": [[19, "import java.util.concurrent.TimeUnit;"], [54, "    @Property(description=\"Static majority needed to achieve consensus. This means we have to start \" +"], [55, "      \"majority*2-1 servers. This property will be removed when dynamic cluster membership has been \" +"], [56, "      \"implemented (section 6 of the RAFT paper)\", writable=false)"], [79, "    protected Future<?>         heartbeat_task;"], [151, "    public int incrVotes() {"], [152, "        return withLockDo(lock,new Callable<Integer>() {"], [153, "            public Integer call() throws Exception {return ++current_votes;}"], [154, "        });"], [155, "    }"], [156, ""], [157, "    public boolean heartbeatReceived(final boolean flag) {"], [159, "            public Boolean call() throws Exception {"], [160, "                boolean retval=heartbeat_received;"], [161, "                heartbeat_received=flag;"], [162, "                return retval;"], [163, "            }"], [266, "    protected void startHeartbeatTimer() {"], [267, "        withLockDo(lock,new Callable<Void>() {"], [268, "            public Void call() throws Exception {"], [269, "                if(heartbeat_task == null || heartbeat_task.isDone())"], [270, "                    heartbeat_task=timer.scheduleAtFixedRate(new HeartbeatTask(), heartbeat_interval, heartbeat_interval,TimeUnit.MILLISECONDS);"], [271, "                return null;"], [272, "            }"], [273, "        });"], [274, "    }"], [275, ""], [276, "    protected void stopHeartbeatTimer() {"], [277, "        withLockDo(lock,new Callable<Void>() {"], [278, "            public Void call() throws Exception {"], [279, "                if(heartbeat_task != null)"], [280, "                    heartbeat_task.cancel(true);"], [281, "                return null;"], [282, "            }"], [283, "        });"], [284, "    }"], [285, ""], [287, "        // log.trace(\"%s: received %s from %s\", local_addr, hdr, msg.src());"], [363, "    protected void sendAppendEntriesReq() {"], [364, "        Message req=new Message(null).putHeader(id, new AppendEntriesRequest(currentTerm()));"], [365, "        down_prot.down(new Event(Event.MSG, req));"], [366, "    }"], [377, "                    if(!heartbeatReceived(false))"], [378, "                        impl.electionTimeout();"], [385, "    protected class HeartbeatTask implements Runnable {"], [386, ""], [387, "        public void run() {"], [388, "            sendAppendEntriesReq();"], [389, "        }"], [390, "    }"], [391, ""]], "deleted": [[53, "    @Property(description=\"Static majority needed to achieve consensus. This means we have to start 5 servers. \" +"], [54, "      \"This property will be removed when dynamic cluster membership has been implemented (section 6 of the RAFT paper)\", writable=false)"], [148, "    public boolean incrVotes() {"], [150, "            public Boolean call() throws Exception {return ++current_votes >= majority;}"], [254, "        log.trace(\"%s: received %s from %s\", local_addr, hdr, msg.src());"], [333, ""], [341, "                    impl.electionTimeout();"]]}, "num_lines_added": 51, "num_lines_removed": 7}