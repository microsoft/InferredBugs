{"hash": "20d703410a81a06dc6f74ec9f97692b847112790", "message": "Fix `@EnableRetry` do not proxy all beans\n\nFixes https://github.com/spring-projects/spring-retry/issues/13\n\nPreviously the `@EnableRetry` caused to proxy **all** beans in the context, because\nof `IntroductionAdvisor` nature in the `AopUtils` logic and simple `ClassFilter.TRUE`\nin that case. In the end it just skipped `MethodMatcher` and applied `ProxyFactory` for any bean.\n\nSince we can't avoid `IntroductionAdvisor` because of `getInterfaces()` introduction,\nprovide a new internal `AnnotationClassOrMethodFilter` to apply both class and method level annotation filter at once.\n\nPolishing for the `AnnotationAwareRetryOperationsInterceptor` to skip non-`@Retryable` methods and just call `invocation.proceed()`\n\nFixes gh-13, fixes gh-14", "file_num_lines": 236, "diff_parsed": {"added": [[20, "import static org.junit.Assert.assertFalse;"], [47, "\t\tFoo foo = context.getBean(Foo.class);"], [48, "\t\tassertFalse(AopUtils.isAopProxy(foo));"], [151, "\t\tpublic Sleeper sleeper() {"], [195, ""], [196, "\t\t@Bean"], [197, "\t\tpublic Foo foo() {"], [198, "\t\t\treturn new Foo();"], [199, "\t\t}"], [200, ""], [314, ""], [315, "\tprivate static class Foo {"], [316, ""], [317, "\t}"], [318, ""]], "deleted": [[148, "\t\tpublic Sleeper sleper() {"]]}, "num_lines_added": 15, "num_lines_removed": 1}