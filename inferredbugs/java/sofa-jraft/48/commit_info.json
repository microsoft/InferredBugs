{"hash": "b727ab2fd179522185a3cbdb151e92bfc43485ba", "message": "(fix) Declare rpcClient to be volatile, fix #319 (#323)\n\n* (fix) Declare rpcClient to be volatile, fix #319\r\n\r\n* (fix) improve check null with rpcClient (#326)\r\n\r\n* (feat) minor changes", "file_num_lines": 228, "diff_parsed": {"added": [[64, "    protected volatile RpcClient    rpcClient;"], [76, "        final RpcClient rc = this.rpcClient;"], [77, "        return rc != null && isConnected(rc, endpoint);"], [78, "    }"], [79, ""], [80, "    private static boolean isConnected(final RpcClient rpcClient, final Endpoint endpoint) {"], [81, "        return rpcClient.checkConnection(endpoint.toString());"], [132, "        final RpcClient rc = this.rpcClient;"], [133, "        if (rc == null) {"], [134, "            throw new IllegalStateException(\"Client service is uninitialized.\");"], [136, "        if (isConnected(rc, endpoint)) {"], [143, "            final ErrorResponse resp = (ErrorResponse) rc.invokeSync(endpoint.toString(), req, this.defaultInvokeCtx,"], [144, "                this.rpcOptions.getRpcConnectTimeoutMs());"], [157, "        final RpcClient rc = this.rpcClient;"], [158, "        if (rc == null) {"], [159, "            return true;"], [160, "        }"], [161, "        LOG.info(\"Disconnect from {}.\", endpoint);"], [162, "        rc.closeConnection(endpoint.toString());"], [188, "        final RpcClient rc = this.rpcClient;"], [189, ""], [192, "            if (rc == null) {"], [193, "                future.failure(new IllegalStateException(\"Client service is uninitialized.\"));"], [194, "                // should be in another thread to avoid dead locking."], [195, "                Utils.runClosureInThread(done, new Status(RaftError.EINTERNAL, \"Client service is uninitialized.\"));"], [196, "                return future;"], [197, "            }"], [199, "            rc.invokeWithCallback(rpcUrl, request, ctx, new InvokeCallback() {"]], "deleted": [[64, "    protected RpcClient             rpcClient;"], [76, "        return this.rpcClient.checkConnection(endpoint.toString());"], [127, "        if (this.rpcClient == null) {"], [128, "            throw new IllegalStateException(\"Client service is not inited.\");"], [130, "        if (isConnected(endpoint)) {"], [137, "            final ErrorResponse resp = (ErrorResponse) this.rpcClient.invokeSync(endpoint.toString(), req,"], [138, "                this.defaultInvokeCtx, this.rpcOptions.getRpcConnectTimeoutMs());"], [151, "        LOG.info(\"Disconnect from {}\", endpoint);"], [152, "        this.rpcClient.closeConnection(endpoint.toString());"], [181, "            this.rpcClient.invokeWithCallback(rpcUrl, request, ctx, new InvokeCallback() {"]]}, "num_lines_added": 28, "num_lines_removed": 10}