    public <T extends Message> Future<Message> invokeWithDone(final Endpoint endpoint, final Message request,
                                                              final InvokeContext ctx,
                                                              final RpcResponseClosure<T> done, final int timeoutMs,
                                                              final Executor rpcExecutor) {
        final RpcClient rc = this.rpcClient;

        final FutureImpl<Message> future = new FutureImpl<>();
        try {
            if (rc == null) {
                future.failure(new IllegalStateException("Client service is uninitialized."));
                // should be in another thread to avoid dead locking.
                Utils.runClosureInThread(done, new Status(RaftError.EINTERNAL, "Client service is uninitialized."));
                return future;
            }
            final Url rpcUrl = this.rpcAddressParser.parse(endpoint.toString());
            rc.invokeWithCallback(rpcUrl, request, ctx, new InvokeCallback() {

                @SuppressWarnings("unchecked")
                @Override
                public void onResponse(final Object result) {
                    if (future.isCancelled()) {
                        onCanceled(request, done);
                        return;
                    }
                    Status status = Status.OK();
                    if (result instanceof ErrorResponse) {
                        final ErrorResponse eResp = (ErrorResponse) result;
                        status = new Status();
                        status.setCode(eResp.getErrorCode());
                        if (eResp.hasErrorMsg()) {
                            status.setErrorMsg(eResp.getErrorMsg());
                        }
                    } else {
                        if (done != null) {
                            done.setResponse((T) result);
                        }
                    }
                    if (done != null) {
                        try {
                            done.run(status);
                        } catch (final Throwable t) {
                            LOG.error("Fail to run RpcResponseClosure, the request is {}.", request, t);
                        }
                    }
                    if (!future.isDone()) {
                        future.setResult((Message) result);
                    }
                }

                @Override
                public void onException(final Throwable e) {
                    if (future.isCancelled()) {
                        onCanceled(request, done);
                        return;
                    }
                    if (done != null) {
                        try {
                            done.run(new Status(e instanceof InvokeTimeoutException ? RaftError.ETIMEDOUT
                                : RaftError.EINTERNAL, "RPC exception:" + e.getMessage()));
                        } catch (final Throwable t) {
                            LOG.error("Fail to run RpcResponseClosure, the request is {}.", request, t);
                        }
                    }
                    if (!future.isDone()) {
                        future.failure(e);
                    }
                }

                @Override
                public Executor getExecutor() {
                    return rpcExecutor != null ? rpcExecutor : AbstractBoltClientService.this.rpcExecutor;
                }
            }, timeoutMs <= 0 ? this.rpcOptions.getRpcDefaultTimeout() : timeoutMs);
        } catch (final InterruptedException e) {
            Thread.currentThread().interrupt();
            future.failure(e);
            // should be in another thread to avoid dead locking.
            Utils.runClosureInThread(done, new Status(RaftError.EINTR, "Sending rpc was interrupted"));
        } catch (final RemotingException e) {
            future.failure(e);
            // should be in another thread to avoid dead locking.
            Utils.runClosureInThread(done,
                new Status(RaftError.EINTERNAL, "Fail to send a RPC request:" + e.getMessage()));

        }
        return future;
    }