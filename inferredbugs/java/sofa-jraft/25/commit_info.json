{"hash": "5baccae01e826955653dce704983112712cd4740", "message": "Implement ReplicatorStateListener for Replicator consecutiveErrorTimes enhancement (#256)\n\n* [ISSUE#197]add ReplicatorStatusListener for enhancement initially.\r\n\r\n* [ISSUE#197]polish replicatorStatusListener implement part of codes.\r\n\r\n* [ISSUE#197]adjust and polish some class codes about replicatorStatusListener implement.\r\n\r\n* [ISSUE#197]adjust some code style and standard for some class codes about replicatorStatusListener implement.\r\n\r\n* [ISSUE#197]polish and fix some issue about replicatorStatusListener implement.\r\n\r\n* [ISSUE#197]polish and fix some issue and suggestion about replicatorStatusListener implement.\r\n\r\n* [ISSUE#197]polish and fix some issue and suggestion about replicatorStatusListener implement.\r\n\r\n* [ISSUE#197]adjust code formates for unit tests.\r\n\r\n* [ISSUE#197]adjust code formates for unit tests.\r\n\r\n* [ISSUE#197]adjust code comments for Node class.\r\n\r\n* [ISSUE#197]adjust code comments and code-stype for Node class.\r\n\r\n* [ISSUE#197]adjust code comments and code-stype for Node class.", "file_num_lines": 1374, "diff_parsed": {"added": [[22, "import java.util.List;"], [33, "import com.alipay.sofa.jraft.Node;"], [204, "    enum ReplicatorEvent {"], [205, "        CREATED, // created"], [206, "        ERROR, // error"], [207, "        DESTROYED // destroyed"], [208, "    }"], [209, ""], [210, "    /**"], [211, "     * User can implement the ReplicatorStateListener interface by themselves."], [212, "     * So they can do some their own logic codes when replicator created, destroyed or had some errors."], [213, "     *"], [214, "     * @author zongtanghu"], [215, "     *"], [216, "     * 2019-Aug-20 2:32:10 PM"], [217, "     */"], [218, "    public interface ReplicatorStateListener {"], [219, ""], [220, "        /**"], [221, "         * Called when this replicator has been created."], [222, "         *"], [223, "         * @param peer   replicator related peerId"], [224, "         */"], [225, "        void onCreated(final PeerId peer);"], [226, ""], [227, "        /**"], [228, "         * Called when this replicator has some errors."], [229, "         *"], [230, "         * @param peer   replicator related peerId"], [231, "         * @param status replicator's error detailed status"], [232, "         */"], [233, "        void onError(final PeerId peer, final Status status);"], [234, ""], [235, "        /**"], [236, "         * Called when this replicator has been destroyed."], [237, "         *"], [238, "         * @param peer   replicator related peerId"], [239, "         */"], [240, "        void onDestroyed(final PeerId peer);"], [241, "    }"], [242, ""], [243, "    /**"], [244, "     * Notify replicator event(such as created, error, destroyed) to replicatorStateListener which is implemented by users."], [245, "     *"], [246, "     * @param replicator    replicator object"], [247, "     * @param event         replicator's state listener event type"], [248, "     * @param status        replicator's error detailed status"], [249, "     */"], [250, "    private static void notifyReplicatorStatusListener(final Replicator replicator, final ReplicatorEvent event, final Status status) {"], [251, "        final ReplicatorOptions replicatorOpts = Requires.requireNonNull(replicator.getOpts(), \"replicatorOptions\");"], [252, "        final Node node = Requires.requireNonNull(replicatorOpts.getNode(), \"node\");"], [253, "        final PeerId peer = Requires.requireNonNull(replicatorOpts.getPeerId(), \"peer\");"], [254, ""], [255, "        final List<ReplicatorStateListener> listenerList = node.getReplicatorStatueListeners();"], [256, "        for (int i = 0; i < listenerList.size(); i++) {"], [257, "            final ReplicatorStateListener listener = listenerList.get(i);"], [258, "            if(listener != null) {"], [259, "                try {"], [260, "                    switch (event) {"], [261, "                        case CREATED:"], [262, "                            Utils.runInThread(() -> listener.onCreated(peer));"], [263, "                            break;"], [264, "                        case ERROR:"], [265, "                            Utils.runInThread(() -> listener.onError(peer, status));"], [266, "                            break;"], [267, "                        case DESTROYED:"], [268, "                            Utils.runInThread(() -> listener.onDestroyed(peer));"], [269, "                            break;"], [270, "                        default:"], [271, "                            break;"], [272, "                    }"], [273, "                } catch (final Exception e) {"], [274, "                    LOG.error(\"Fail to notify ReplicatorStatusListener, listener={}, event={}.\", listener, event);"], [275, "                }"], [276, "            }"], [277, "        }"], [278, "    }"], [279, ""], [280, "    /**"], [281, "     * Notify replicator event(such as created, error, destroyed) to replicatorStateListener which is implemented by users for none status."], [282, "     *"], [283, "     * @param replicator    replicator object"], [284, "     * @param event         replicator's state listener event type"], [285, "     */"], [286, "    private static void notifyReplicatorStatusListener(final Replicator replicator, final ReplicatorEvent event) {"], [287, "        notifyReplicatorStatusListener(replicator, event, null);"], [288, "    }"], [289, ""], [631, "                notifyReplicatorStatusListener(r, ReplicatorEvent.ERROR, status);"], [806, "        notifyReplicatorStatusListener(r, ReplicatorEvent.CREATED);"], [1041, "        notifyReplicatorStatusListener((Replicator) savedId.getData(), ReplicatorEvent.DESTROYED);"], [1081, "                notifyReplicatorStatusListener(r, ReplicatorEvent.ERROR, status);"], [1298, "            notifyReplicatorStatusListener(r, ReplicatorEvent.ERROR, status);"], [1623, "            notifyReplicatorStatusListener(r, ReplicatorEvent.ERROR, status);"]], "deleted": [[29, ""]]}, "num_lines_added": 94, "num_lines_removed": 1}