{"hash": "0d8c96f881c0893e115a236a5e8d2b32a29b8382", "message": "Some corner cases fixes (#462)\n\n* (fix) replicator state\r\n\r\n* (fix) Replicate logs before appliedIndex should be considered success.\r\n\r\n* (feat) prevent too many block timer created when fail to append entries\r\n\r\n* (feat) dump threads stack when test hang too long\r\n\r\n* (fix) code format\r\n\r\n* (feat) revert readLock for Node#isLeader\r\n\r\n* (feat) adds test cases for fixes\r\n\r\n* (feat) Adds RpcUtils to run replicator/rpc closures, #426\r\n\r\n* (fix) testReadIndexFromLearner may hang when learner state is not synced\r\n\r\n* (fix) format\r\n\r\n* format\r\n\r\n* format\r\n\r\nCo-authored-by: jiachun.fjc <jiachun_fjc@163.com>", "file_num_lines": 687, "diff_parsed": {"added": [[38, "import com.alipay.sofa.jraft.core.Replicator.RequestType;"], [173, "        testRpcReturnedError();"], [174, "    }"], [175, ""], [176, "    private Replicator testRpcReturnedError() {"], [191, "        return r;"], [192, "    }"], [193, ""], [194, "    @Test"], [195, "    public void testOnRpcReturnedRpcContinuousError() throws Exception {"], [196, "        Replicator r = testRpcReturnedError();"], [197, "        ScheduledFuture<?> timer = r.getBlockTimer();"], [198, "        assertNotNull(timer);"], [199, ""], [200, "        final RpcRequests.AppendEntriesRequest request = createEmptyEntriesRequest();"], [201, "        final RpcRequests.AppendEntriesResponse response = RpcRequests.AppendEntriesResponse.newBuilder() //"], [202, "            .setSuccess(false) //"], [203, "            .setLastLogIndex(12) //"], [204, "            .setTerm(2) //"], [205, "            .build();"], [206, "        r.getInflights().add(new Replicator.Inflight(RequestType.AppendEntries, r.getNextSendIndex(), 0, 0, 1, null));"], [207, "        Replicator.onRpcReturned(this.id, Replicator.RequestType.AppendEntries, new Status(-1, \"test error\"), request,"], [208, "            response, 1, 1, Utils.monotonicMs());"], [209, "        assertEquals(r.statInfo.runningState, Replicator.RunningState.BLOCKING);"], [210, "        assertNotNull(r.getBlockTimer());"], [211, "        // the same timer"], [212, "        assertSame(timer, r.getBlockTimer());"], [213, ""], [214, "        Thread.sleep(r.getOpts().getDynamicHeartBeatTimeoutMs() * 2);"], [215, "        r.getInflights().add(new Replicator.Inflight(RequestType.AppendEntries, r.getNextSendIndex(), 0, 0, 1, null));"], [216, "        Replicator.onRpcReturned(this.id, Replicator.RequestType.AppendEntries, new Status(-1, \"test error\"), request,"], [217, "            response, 1, 2, Utils.monotonicMs());"], [218, "        assertEquals(r.statInfo.runningState, Replicator.RunningState.BLOCKING);"], [219, "        assertNotNull(r.getBlockTimer());"], [220, "        // the same timer"], [221, "        assertNotSame(timer, r.getBlockTimer());"], [277, "        assertEquals(0, Replicator.getNextIndex(this.id));"], [315, "        assertEquals(0, Replicator.getNextIndex(this.id));"], [331, "        Mockito.when(this.logManager.wait(eq(10L), Mockito.any(), same(this.id))).thenReturn(99L);"], [337, "            public void run(final Status status) {"], [348, "        assertEquals(11, Replicator.getNextIndex(this.id));"], [380, "        testOnRpcReturnedWaitMoreEntries();"], [393, "        testOnRpcReturnedWaitMoreEntries();"], [458, "        Replicator.onHeartbeatReturned(this.id, new Status(-1, \"test\"), createEmptyEntriesRequest(), null,"], [473, "        Replicator"], [474, "            .onHeartbeatReturned(this.id, Status.OK(), createEmptyEntriesRequest(), response, Utils.monotonicMs());"], [510, "        testTransferLeadership();"], [549, "            public void run(final Status status) {"], [712, "        Replicator.onRpcReturned(this.id, Replicator.RequestType.Snapshot, Status.OK(), request, response, 0, 0, -1);"], [741, "    private void mockSendEntries(@SuppressWarnings(\"SameParameterValue\") final int n) {"], [747, "    private RpcRequests.AppendEntriesRequest createEntriesRequest(final int n) {"]], "deleted": [[241, "        assertEquals(0, Replicator.getNextIndex(id));"], [279, "        assertEquals(0, Replicator.getNextIndex(id));"], [295, "        Mockito.when(logManager.wait(eq(10L), Mockito.any(), same(this.id))).thenReturn(99L);"], [301, "            public void run(Status status) {"], [312, "        assertEquals(11, Replicator.getNextIndex(id));"], [344, "        this.testOnRpcReturnedWaitMoreEntries();"], [357, "        this.testOnRpcReturnedWaitMoreEntries();"], [422, "        Replicator.onHeartbeatReturned(this.id, new Status(-1, \"test\"), this.createEmptyEntriesRequest(), null,"], [437, "        Replicator.onHeartbeatReturned(this.id, Status.OK(), this.createEmptyEntriesRequest(), response,"], [438, "            Utils.monotonicMs());"], [474, "        this.testTransferLeadership();"], [513, "            public void run(Status status) {"], [676, "        Replicator.onRpcReturned(id, Replicator.RequestType.Snapshot, Status.OK(), request, response, 0, 0, -1);"], [705, "    private void mockSendEntries(@SuppressWarnings(\"SameParameterValue\") int n) {"], [711, "    private RpcRequests.AppendEntriesRequest createEntriesRequest(int n) {"]]}, "num_lines_added": 51, "num_lines_removed": 15}