{"hash": "7ab72f016181b0d63f0a89bf6dbe7f8de3d31143", "message": "#329 JPEGImageReader endless loop fix", "file_num_lines": 135, "diff_parsed": {"added": [[176, "    public void testEOFExceptionInSegmentParsingShouldNotCreateBadState2() throws IOException {"], [177, "        ImageInputStream iis = new JPEGSegmentImageInputStream(ImageIO.createImageInputStream(getClassLoaderResource(\"/broken-jpeg/51432b02-02a8-11e7-9203-b42b1c43c0c3.jpg\")));"], [178, ""], [179, "        byte[] buffer = new byte[4096];"], [180, ""], [181, "        // NOTE: This is a simulation of how the native parts of com.sun...JPEGImageReader would read the image..."], [182, "        assertEquals(2, iis.read(buffer, 0, buffer.length));"], [183, "        assertEquals(2, iis.getStreamPosition());"], [184, ""], [185, "        iis.seek(2000); // Just a random postion beyond EOF"], [186, "        assertEquals(2000, iis.getStreamPosition());"], [187, ""], [188, "        // So far, so good (but stream position is now really beyond EOF)..."], [189, ""], [190, "        // This however, will blow up with an EOFException internally (but we'll return -1 to be good)"], [191, "        assertEquals(-1, iis.read(buffer, 0, buffer.length));"], [192, "        assertEquals(-1, iis.read());"], [193, "        assertEquals(2000, iis.getStreamPosition());"], [194, ""], [195, "        // Again, should just continue returning -1 for ever"], [196, "        assertEquals(-1, iis.read());"], [197, "        assertEquals(-1, iis.read(buffer, 0, buffer.length));"], [198, "        assertEquals(2000, iis.getStreamPosition());"], [199, "    }"], [200, ""], [201, "    @Test"], [218, "        assertEquals(-1, iis.read());"], [223, "        assertEquals(-1, iis.read());"]], "deleted": []}, "num_lines_added": 28, "num_lines_removed": 0}