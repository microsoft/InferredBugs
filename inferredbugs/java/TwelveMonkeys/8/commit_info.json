{"hash": "d677141ab7f0e1b111189426b25be9d6efaecf84", "message": "#386 Fixed ColorSpaces ICC profile caching bug", "file_num_lines": 249, "diff_parsed": {"added": [[43, "import java.security.MessageDigest;"], [44, "import java.security.NoSuchAlgorithmException;"], [111, "        // Fix profile before lookup/create"], [112, "        profileCleaner.fixProfile(profile);"], [113, ""], [114, "        byte[] profileHeader = getProfileHeaderWithProfileId(profile);"], [121, "        return getCachedOrCreateCS(profile, profileHeader);"], [122, "    }"], [124, "    private static byte[] getProfileHeaderWithProfileId(final ICC_Profile profile) {"], [125, "        byte[] header = profile.getData(ICC_Profile.icSigHead);"], [127, "        computeProfileIdMD5(profile, header);"], [129, "        return header;"], [130, "    }"], [131, ""], [132, "    private static void computeProfileIdMD5(final ICC_Profile profile, final byte[] header) {"], [133, "        // Clear out preferred CMM, platform & creator, as these does not affect the profile in any way"], [134, "        // - LCMS updates CMM + creator to \"lcms\" and platform to current platform"], [135, "        // - KCMS keeps the values in the file..."], [136, "        Arrays.fill(header, ICC_Profile.icHdrCmmId, ICC_Profile.icHdrCmmId + 4, (byte) 0);"], [137, "        Arrays.fill(header, ICC_Profile.icHdrPlatform, ICC_Profile.icHdrPlatform + 4, (byte) 0);"], [138, "        // + Clear out rendering intent, as this may be updated by application"], [139, "        Arrays.fill(header, ICC_Profile.icHdrRenderingIntent, ICC_Profile.icHdrRenderingIntent + 4, (byte) 0);"], [140, "        Arrays.fill(header, ICC_Profile.icHdrCreator, ICC_Profile.icHdrCreator + 4, (byte) 0);"], [141, ""], [142, "        // Clear out any existing MD5, as it is no longer correct"], [143, "        Arrays.fill(header, ICC_Profile.icHdrProfileID, ICC_Profile.icHdrProfileID + 16, (byte) 0);"], [144, ""], [145, "        // Get *entire profile data*... :-/"], [146, "        byte[] data = profile.getData();"], [147, ""], [148, "        // Update with the new header data"], [149, "        System.arraycopy(header, 0, data, 0, header.length);"], [150, ""], [151, "        // Generate new MD5 and store in header"], [152, "        try {"], [153, "            byte[] md5 = MessageDigest.getInstance(\"MD5\").digest(data);"], [154, "            System.arraycopy(md5, 0, header, ICC_Profile.icHdrProfileID, md5.length);"], [155, "        } catch (NoSuchAlgorithmException e) {"], [156, "            throw new IllegalStateException(\"Missing MD5 MessageDigest\");"], [157, "        }"], [212, "        return profile.getColorSpaceType() == ColorSpace.TYPE_RGB && Arrays.equals(getProfileHeaderWithProfileId(profile), sRGB.header);"], [240, "        byte[] header = profile.getData(ICC_Profile.icSigHead);"], [242, "        return header[ICC_Profile.icHdrRenderingIntent] != 0 || header[ICC_Profile.icHdrRenderingIntent + 1] != 0"], [243, "                || header[ICC_Profile.icHdrRenderingIntent + 2] != 0 || header[ICC_Profile.icHdrRenderingIntent + 3] != 0;"], [244, "        }"], [302, "                        if (profile.getColorSpaceType() != ColorSpace.TYPE_RGB) {"], [303, "                            throw new IllegalStateException(\"Configured AdobeRGB1998 profile is not TYPE_RGB\");"], [304, "                        }"], [305, ""], [329, "                        if (profile.getColorSpaceType() != ColorSpace.TYPE_CMYK) {"], [330, "                            throw new IllegalStateException(\"Configured Generic CMYK profile is not TYPE_CMYK\");"], [331, "                        }"], [332, ""], [391, "        Key(byte[] data) {"], [408, "        private static final byte[] header = getProfileHeaderWithProfileId(ICC_Profile.getInstance(ColorSpace.CS_sRGB));"], [412, "        private static final byte[] header = getProfileHeaderWithProfileId(ICC_Profile.getInstance(ColorSpace.CS_CIEXYZ));"], [416, "        private static final byte[] header = getProfileHeaderWithProfileId(ICC_Profile.getInstance(ColorSpace.CS_PYCC));"], [420, "        private static final byte[] header = getProfileHeaderWithProfileId(ICC_Profile.getInstance(ColorSpace.CS_GRAY));"], [424, "        private static final byte[] header = getProfileHeaderWithProfileId(ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB));"], [428, "        // TODO: Honour java.iccprofile.path property?"], [475, "        static String getPath(final String profileName) {"]], "deleted": [[109, "        byte[] profileHeader = profile.getData(ICC_Profile.icSigHead);"], [116, "        // Special case for color profiles with rendering intent != 0, see isOffendingColorProfile method"], [117, "        // NOTE: Rendering intent is really a 4 byte value, but legal values are 0-3 (ICC1v42_2006_05_1.pdf, 7.2.15, p. 19)"], [118, "        if (profileHeader[ICC_Profile.icHdrRenderingIntent] != 0) {"], [119, "            profileHeader[ICC_Profile.icHdrRenderingIntent] = 0;"], [121, "            // Test again if this is an internal CS"], [122, "            cs = getInternalCS(profile.getColorSpaceType(), profileHeader);"], [123, "            if (cs != null) {"], [124, "                return cs;"], [125, "            }"], [127, "            // Fix profile before lookup/create"], [128, "            profileCleaner.fixProfile(profile, profileHeader);"], [129, "        }"], [130, "        else {"], [131, "            profileCleaner.fixProfile(profile, null);"], [132, "        }"], [134, "        return getCachedOrCreateCS(profile, profileHeader);"], [189, "        return profile.getColorSpaceType() == ColorSpace.TYPE_RGB && Arrays.equals(profile.getData(ICC_Profile.icSigHead), sRGB.header);"], [217, "        byte[] data = profile.getData(ICC_Profile.icSigHead);"], [219, "        return data[ICC_Profile.icHdrRenderingIntent] != 0;"], [220, "    }"], [359, "        public Key(byte[] data) {"], [376, "        private static final byte[] header = ICC_Profile.getInstance(ColorSpace.CS_sRGB).getData(ICC_Profile.icSigHead);"], [380, "        private static final byte[] header = ICC_Profile.getInstance(ColorSpace.CS_CIEXYZ).getData(ICC_Profile.icSigHead);"], [384, "        private static final byte[] header = ICC_Profile.getInstance(ColorSpace.CS_PYCC).getData(ICC_Profile.icSigHead);"], [388, "        private static final byte[] header = ICC_Profile.getInstance(ColorSpace.CS_GRAY).getData(ICC_Profile.icSigHead);"], [392, "        private static final byte[] header = ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB).getData(ICC_Profile.icSigHead);"], [442, "        public static String getPath(final String profileName) {"]]}, "num_lines_added": 61, "num_lines_removed": 28}