{"hash": "762b59674b46fb88f471da6095063f1578dcb91e", "message": "#306 TIFF LZW IndexColorModel issue + sequence index", "file_num_lines": 673, "diff_parsed": {"added": [[41, "import com.twelvemonkeys.imageio.util.ProgressListenerBase;"], [47, "import javax.imageio.event.IIOWriteWarningListener;"], [79, "    // TODO: Support use-case: Transcode multi-layer PSD to multi-page TIFF with metadata (hard, as Photoshop don't store layers as multi-page TIFF...)"], [97, "    // Support CCITT Modified Huffman compression (2)"], [98, "    // Full \"Baseline TIFF\" support (pending CCITT compression 2)"], [99, "    // CCITT compressions T.4 and T.6"], [100, "    // Support storing multiple images in one stream (multi-page TIFF)"], [101, "    // Support more of the ImageIO metadata (ie. compression from metadata, etc)"], [108, "    private boolean writingSequence = false;"], [109, ""], [110, "    private int sequenceIndex = 0;"], [115, "    private TIFFWriter sequenceTIFFWriter = null;"], [142, "        writePage(0, image, param, tiffWriter, imageOutput.getStreamPosition());"], [147, "    private long writePage(int imageIndex, IIOImage image, ImageWriteParam param, TIFFWriter tiffWriter, long lastIFDPointerOffset)"], [251, "            // TODO: Fix consistency between sampleModel.getSampleSize() and colorModel.getPixelSize()..."], [252, "            // We should be able to support 1, 2, 4 and 8 bits per sample at least, and probably 3, 5, 6 and 7 too"], [253, "            entries.put(TIFF.TAG_COLOR_MAP, new TIFFEntry(TIFF.TAG_COLOR_MAP, createColorMap((IndexColorModel) colorModel, sampleModel.getSampleSize(0))));"], [360, "                ListenerDelegate listener = new ListenerDelegate(imageIndex);"], [361, "                jpegWriter.addIIOWriteProgressListener(listener);"], [362, "                jpegWriter.addIIOWriteWarningListener(listener);"], [371, "            writeImageData(createCompressorStream(renderedImage, param, entries), imageIndex, renderedImage, numBands, bandOffsets, bitOffsets);"], [461, "        int samplesPerPixel = (Integer) entries.get(TIFF.TAG_SAMPLES_PER_PIXEL).getValue();"], [462, "        int bitPerSample = ((short[]) entries.get(TIFF.TAG_BITS_PER_SAMPLE).getValue())[0];"], [463, ""], [502, "                    stream = new HorizontalDifferencingStream(stream, image.getTileWidth(), samplesPerPixel, bitPerSample, imageOutput.getByteOrder());"], [509, "                stream = new EncoderStream(stream, new LZWEncoder((image.getTileWidth() * image.getTileHeight() * samplesPerPixel * bitPerSample + 7) / 8));"], [511, "                    stream = new HorizontalDifferencingStream(stream, image.getTileWidth(), samplesPerPixel, bitPerSample, imageOutput.getByteOrder());"], [566, "    private short[] createColorMap(final IndexColorModel colorModel, final int sampleSize) {"], [571, "        short[] colorMap = new short[(int) (3 * Math.pow(2, sampleSize))];"], [597, "    private void writeImageData(DataOutput stream, int imageIndex, RenderedImage renderedImage, int numComponents, int[] bandOffsets, int[] bitOffsets) throws IOException {"], [604, "        processImageStarted(imageIndex);"], [790, "            processImageProgress((100f * (yTile + 1)) / maxYTiles);"], [897, "        if (writingSequence) {"], [902, "        configureStreamByteOrder(streamMetadata, imageOutput);"], [903, ""], [904, "        writingSequence = true;"], [905, "        sequenceTIFFWriter = new TIFFWriter();"], [906, "        sequenceTIFFWriter.writeTIFFHeader(imageOutput);"], [912, "        if (!writingSequence) {"], [920, "        sequenceLastIFDPos = writePage(sequenceIndex++, image, param, sequenceTIFFWriter, sequenceLastIFDPos);"], [925, "        if (!writingSequence) {"], [929, "        writingSequence = false;"], [930, "        sequenceIndex = 0;"], [931, "        sequenceTIFFWriter = null;"], [940, "        writingSequence = false;"], [941, "        sequenceIndex = 0;"], [942, "        sequenceTIFFWriter = null;"], [1083, ""], [1084, "    private class ListenerDelegate extends ProgressListenerBase implements IIOWriteWarningListener {"], [1085, "        private final int imageIndex;"], [1086, ""], [1087, "        public ListenerDelegate(final int imageIndex) {"], [1088, "            this.imageIndex = imageIndex;"], [1089, "        }"], [1090, ""], [1091, "        @Override"], [1092, "        public void imageComplete(ImageWriter source) {"], [1093, "            processImageComplete();"], [1094, "        }"], [1095, ""], [1096, "        @Override"], [1097, "        public void imageProgress(ImageWriter source, float percentageDone) {"], [1098, "            processImageProgress(percentageDone);"], [1099, "        }"], [1100, ""], [1101, "        @Override"], [1102, "        public void imageStarted(ImageWriter source, int imageIndex) {"], [1103, "            processImageStarted(this.imageIndex);"], [1104, "        }"], [1105, ""], [1106, "        @Override"], [1107, "        public void thumbnailComplete(ImageWriter source) {"], [1108, "            processThumbnailComplete();"], [1109, "        }"], [1110, ""], [1111, "        @Override"], [1112, "        public void thumbnailProgress(ImageWriter source, float percentageDone) {"], [1113, "            processThumbnailProgress(percentageDone);"], [1114, "        }"], [1115, ""], [1116, "        @Override"], [1117, "        public void thumbnailStarted(ImageWriter source, int imageIndex, int thumbnailIndex) {"], [1118, "            processThumbnailStarted(this.imageIndex, thumbnailIndex);"], [1119, "        }"], [1120, ""], [1121, "        @Override"], [1122, "        public void writeAborted(ImageWriter source) {"], [1123, "            processWriteAborted();"], [1124, "        }"], [1125, ""], [1126, "        @Override"], [1127, "        public void warningOccurred(ImageWriter source, int imageIndex, String warning) {"], [1128, "            processWarningOccurred(this.imageIndex, warning);"], [1129, "        }"], [1130, "    }"]], "deleted": [[72, "    // Short term"], [73, "    // TODO: Support more of the ImageIO metadata (ie. compression from metadata, etc)"], [74, ""], [78, "    // TODO: Support CCITT Modified Huffman compression (2)"], [79, "    // TODO: Full \"Baseline TIFF\" support (pending CCITT compression 2)"], [80, "    // TODO: CCITT compressions T.4 and T.6"], [83, "    // TODO: Support storing multiple images in one stream (multi-page TIFF)"], [84, "    // TODO: Support use-case: Transcode multi-layer PSD to multi-page TIFF with metadata"], [108, "    private boolean isWritingSequence = false;"], [113, "    private TIFFWriter sequenceTiffWriter = null;"], [140, "        writePage(image, param, tiffWriter, imageOutput.getStreamPosition());"], [145, "    private long writePage(IIOImage image, ImageWriteParam param, TIFFWriter tiffWriter, long lastIFDPointerOffset)"], [249, "            entries.put(TIFF.TAG_COLOR_MAP, new TIFFEntry(TIFF.TAG_COLOR_MAP, createColorMap((IndexColorModel) colorModel)));"], [364, "            writeImageData(createCompressorStream(renderedImage, param, entries), renderedImage, numBands, bandOffsets, bitOffsets);"], [492, "                    stream = new HorizontalDifferencingStream(stream, image.getTileWidth(), image.getTile(0, 0).getNumBands(), image.getColorModel().getComponentSize(0), imageOutput.getByteOrder());"], [499, "                stream = new EncoderStream(stream, new LZWEncoder((image.getTileWidth() * image.getTileHeight() * image.getColorModel().getPixelSize() + 7) / 8));"], [501, "                    stream = new HorizontalDifferencingStream(stream, image.getTileWidth(), image.getTile(0, 0).getNumBands(), image.getColorModel().getComponentSize(0), imageOutput.getByteOrder());"], [556, "    private short[] createColorMap(final IndexColorModel colorModel) {"], [561, "        short[] colorMap = new short[(int) (3 * Math.pow(2, colorModel.getPixelSize()))];"], [587, "    private void writeImageData(DataOutput stream, RenderedImage renderedImage, int numComponents, int[] bandOffsets, int[] bitOffsets) throws IOException {"], [594, "        processImageStarted(0);"], [780, "            processImageProgress((100f * yTile) / maxYTiles);"], [887, "        if (isWritingSequence) {"], [891, "        // Ignore streamMetadata. ByteOrder is determined from OutputStream"], [893, "        isWritingSequence = true;"], [894, "        sequenceTiffWriter = new TIFFWriter();"], [895, "        sequenceTiffWriter.writeTIFFHeader(imageOutput);"], [901, "        if (!isWritingSequence) {"], [909, "        sequenceLastIFDPos = writePage(image, param, sequenceTiffWriter, sequenceLastIFDPos);"], [914, "        if (!isWritingSequence) {"], [918, "        isWritingSequence = false;"], [919, "        sequenceTiffWriter = null;"], [928, "        isWritingSequence = false;"], [929, "        sequenceTiffWriter = null;"], [1049, "        // TODO: Support writing multipage TIFF"]]}, "num_lines_added": 95, "num_lines_removed": 35}