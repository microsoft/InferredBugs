{"hash": "8a2ec98fd5ebf9f3936537f531bb7859cc763cb8", "message": "#525 \u52a0\u5f3aUtils Modules\u6a21\u5757  StringHolder \u548c Dumper\u53d7OpenHFT\u6539\u8fdb", "file_num_lines": 69, "diff_parsed": {"added": [[3, "import java.util.Map;"], [4, "import java.util.Map.Entry;"], [64, "\t\tlogger.info(\"Thread dump by ThreadDumpper\" + (reasonMsg != null ? (\" for \" + reasonMsg) : \"\"));"], [66, "\t\tMap<Thread, StackTraceElement[]> threads = Thread.getAllStackTraces();"], [67, "\t\t// \u4e24\u6761\u65e5\u5fd7\u95f4\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u662fVM\u88abthread dump\u5835\u585e\u7684\u65f6\u95f4."], [68, "\t\tlogger.info(\"Finish the threads snapshot\");"], [69, ""], [70, "\t\tStringBuilder sb = new StringBuilder(8192 * 20).append(\"\\n\");"], [72, "\t\tfor (Entry<Thread, StackTraceElement[]> entry : threads.entrySet()) {"], [73, "\t\t\tdumpThreadInfo(entry.getKey(), entry.getValue(), sb);"], [75, "\t\tlogger.info(sb.toString());"], [82, "\tprivate String dumpThreadInfo(Thread thread, StackTraceElement[] stackTrace, StringBuilder sb) {"], [83, "\t\tsb.append(\"\\\"\").append(thread.getName()).append(\"\\\" Id=\").append(thread.getId()).append(' ')"], [84, "\t\t\t\t.append(thread.getState());"]], "deleted": [[3, "import java.lang.management.ManagementFactory;"], [4, "import java.lang.management.ThreadInfo;"], [5, "import java.lang.management.ThreadMXBean;"], [30, "\tprivate ThreadMXBean threadMBean = ManagementFactory.getThreadMXBean();"], [66, "\t\tlogger.info(\"Thread dump by ThreadDumpper\" + reasonMsg != null ? (\" for \" + reasonMsg) : \"\");"], [68, "\t\t// \u53c2\u6570\u5747\u4e3afalse, \u907f\u514d\u8f93\u51falockedMonitors\u548clockedSynchronizers\u5bfc\u81f4\u7684JVM\u7f13\u6162"], [69, "\t\tThreadInfo[] threadInfos = threadMBean.dumpAllThreads(false, false);"], [71, "\t\tStringBuilder b = new StringBuilder(8192);"], [72, "\t\tb.append('[');"], [73, "\t\tfor (int i = 0; i < threadInfos.length; i++) {"], [74, "\t\t\tb.append(dumpThreadInfo(threadInfos[i])).append(\", \");"], [77, "\t\t// \u4e24\u6761\u65e5\u5fd7\u95f4\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u662fVM\u88abthread dump\u5835\u585e\u7684\u65f6\u95f4."], [78, "\t\tlogger.info(b.toString());"], [84, "\tprivate String dumpThreadInfo(ThreadInfo threadInfo) {"], [85, "\t\tStringBuilder sb = new StringBuilder(512);"], [86, "\t\tsb.append(\"\\\"\").append(threadInfo.getThreadName()).append(\"\\\" Id=\").append(threadInfo.getThreadId()).append(' ')"], [87, "\t\t\t\t.append(threadInfo.getThreadState());"], [88, "\t\tif (threadInfo.getLockName() != null) {"], [89, "\t\t\tsb.append(\" on \").append(threadInfo.getLockName());"], [90, "\t\t}"], [91, "\t\tif (threadInfo.getLockOwnerName() != null) {"], [92, "\t\t\tsb.append(\" owned by \\\"\").append(threadInfo.getLockOwnerName()).append(\"\\\" Id=\")"], [93, "\t\t\t\t\t.append(threadInfo.getLockOwnerId());"], [94, "\t\t}"], [95, "\t\tif (threadInfo.isSuspended()) {"], [96, "\t\t\tsb.append(\" (suspended)\");"], [97, "\t\t}"], [98, "\t\tif (threadInfo.isInNative()) {"], [99, "\t\t\tsb.append(\" (in native)\");"], [100, "\t\t}"], [103, "\t\tStackTraceElement[] stackTrace = threadInfo.getStackTrace();"], [107, "\t\t\tif (i == 0 && threadInfo.getLockInfo() != null) {"], [108, "\t\t\t\tThread.State ts = threadInfo.getThreadState();"], [109, "\t\t\t\tswitch (ts) {"], [110, "\t\t\t\tcase BLOCKED:"], [111, "\t\t\t\t\tsb.append(\"\\t-  blocked on \").append(threadInfo.getLockInfo()).append('\\n');"], [112, "\t\t\t\t\tbreak;"], [113, "\t\t\t\tcase WAITING:"], [114, "\t\t\t\t\tsb.append(\"\\t-  waiting on \").append(threadInfo.getLockInfo()).append('\\n');"], [115, "\t\t\t\t\tbreak;"], [116, "\t\t\t\tcase TIMED_WAITING:"], [117, "\t\t\t\t\tsb.append(\"\\t-  time waiting on \").append(threadInfo.getLockInfo()).append('\\n');"], [118, "\t\t\t\t\tbreak;"], [119, "\t\t\t\tdefault:"], [120, "\t\t\t\t}"], [121, "\t\t\t}"], [122, ""]]}, "num_lines_added": 14, "num_lines_removed": 47}