{"hash": "cc90f75d851c0e534bb27554b8b877f42ce36ec4", "message": "rename#243 counter\u903b\u8f91\u6539\u4e3a\u4e0estatsd\u4e00\u6837\uff0c\u6bcf\u6b21\u53d1\u9001\u65f6\u6e05\u96f6\uff0c\u4f46\u4e5f\u4fdd\u6301\u4e00\u4e2a\u957f\u671f\u7684counter\uff0c\u53e6\u5916\uff0cgraphiteReporter\u53ea\u53d1\u9001\u53d8\u5316\u7684counter\u503c", "file_num_lines": 123, "diff_parsed": {"added": [[80, "\t\tsend(MetricRegistry.name(prefix, name, \"count\"), format(counter.lastCount), timestamp);"], [94, "\t\tsend(MetricRegistry.name(prefix, name, \"count\"), format(execution.counterMetric.lastCount), timestamp);"], [96, "\t\tsend(MetricRegistry.name(prefix, name, \"min\"), format(execution.histogramMetric.min), timestamp);"], [97, "\t\tsend(MetricRegistry.name(prefix, name, \"max\"), format(execution.histogramMetric.max), timestamp);"], [98, "\t\tsend(MetricRegistry.name(prefix, name, \"mean\"), format(execution.histogramMetric.mean), timestamp);"], [99, "\t\tfor (Entry<Double, Long> pct : execution.histogramMetric.pcts.entrySet()) {"], [138, ""], [139, "\tprivate String format(long n) {"], [140, "\t\treturn Long.toString(n);"], [141, "\t}"], [142, ""], [143, "\tprivate String format(double v) {"], [144, "\t\treturn String.format(Locale.US, \"%2.2f\", v);"], [145, "\t}"], [146, ""], [147, "\tprivate String sanitize(String s) {"], [148, "\t\treturn WHITESPACE.matcher(s).replaceAll(\"-\");"], [149, "\t}"]], "deleted": [[68, ""], [81, "\t\tsend(MetricRegistry.name(prefix, name, \"count\"), format(counter.count), timestamp);"], [95, "\t\tsend(MetricRegistry.name(prefix, name, \"count\"), format(execution.counter.count), timestamp);"], [97, "\t\tsend(MetricRegistry.name(prefix, name, \"min\"), format(execution.histogram.min), timestamp);"], [98, "\t\tsend(MetricRegistry.name(prefix, name, \"max\"), format(execution.histogram.max), timestamp);"], [99, "\t\tsend(MetricRegistry.name(prefix, name, \"mean\"), format(execution.histogram.mean), timestamp);"], [100, "\t\tfor (Entry<Double, Long> pct : execution.histogram.pcts.entrySet()) {"], [106, "\tprivate String format(Object o) {"], [107, "\t\tif (o instanceof Float) {"], [108, "\t\t\treturn format(((Float) o).doubleValue());"], [109, "\t\t} else if (o instanceof Double) {"], [110, "\t\t\treturn format(((Double) o).doubleValue());"], [111, "\t\t} else if (o instanceof Byte) {"], [112, "\t\t\treturn format(((Byte) o).longValue());"], [113, "\t\t} else if (o instanceof Short) {"], [114, "\t\t\treturn format(((Short) o).longValue());"], [115, "\t\t} else if (o instanceof Integer) {"], [116, "\t\t\treturn format(((Integer) o).longValue());"], [117, "\t\t} else if (o instanceof Long) {"], [118, "\t\t\treturn format(((Long) o).longValue());"], [119, "\t\t}"], [120, "\t\treturn null;"], [121, "\t}"], [122, ""], [123, "\tprivate String format(long n) {"], [124, "\t\treturn Long.toString(n);"], [125, "\t}"], [126, ""], [127, "\tprivate String format(double v) {"], [128, "\t\treturn String.format(Locale.US, \"%2.2f\", v);"], [129, "\t}"], [130, ""], [140, "\t/**"], [141, "\t * Sends the given measurement to the server."], [142, "\t *"], [143, "\t * @param name the name of the metric"], [144, "\t * @param value the value of the metric"], [145, "\t * @param timestamp the timestamp of the metric"], [146, "\t * @throws IOException if there was an error sending the metric"], [147, "\t */"], [161, "\tprivate String sanitize(String s) {"], [162, "\t\treturn WHITESPACE.matcher(s).replaceAll(\"-\");"], [163, "\t}"], [164, ""]]}, "num_lines_added": 18, "num_lines_removed": 44}