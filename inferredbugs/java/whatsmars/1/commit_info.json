{"hash": "4cf0ce05476f591c930ff421975570c32054d316", "message": "connector", "file_num_lines": 103, "diff_parsed": {"added": [[6, "import javax.servlet.ServletException;"], [16, "    private HttpConnector connector;"], [17, "    private HttpRequest request;"], [18, "    private HttpResponse response;"], [19, "    private HttpRequestLine requestLine = new HttpRequestLine();"], [41, "            if (request.getRequestURI().startsWith(\"/servlet/\")) {"], [55, "    private void parseHeaders(SocketInputStream input) throws IOException, ServletException{"], [56, "        while (true) { // \u4e00\u884c\u4e00\u884c\u89e3\u6790\u5b8cheader"], [57, "            HttpHeader header = new HttpHeader();"], [58, "            // Read the next header"], [59, "            input.readHeader(header);"], [60, "            if (header.nameEnd == 0) {"], [61, "                if (header.valueEnd == 0) {"], [62, "                    return;"], [63, "                } else {"], [64, "                    throw new ServletException(\"httpProcessor parseHeaders colon\");"], [65, "                }"], [66, "            }"], [67, "            String name = new String(header.name, 0, header.nameEnd);"], [68, "            String value = new String(header.value, 0, header.valueEnd);"], [69, "            request.addHeader(name, value);"], [70, "            // do something for some headers, ignore others."], [71, "            if (name.equals(\"cookie\")) {"], [72, "                // ..."], [73, "                // request.addCookie(cookies[i]);"], [74, "            } else if (name.equals(\"content-length\")) {"], [75, "                int n = -1;"], [76, "                try {"], [77, "                    n = Integer.parseInt(value);"], [78, "                } catch (Exception e) {"], [79, "                    throw new ServletException(\"httpProcessor.parseHeaders.contentLength\");"], [80, "                }"], [81, "                request.setContentLength(n);"], [82, "            } else if (name.equals(\"content-type\")) {"], [83, "                request.setContentType(value);"], [84, "            }"], [88, "    private void parseRequest(SocketInputStream input, OutputStream output) throws IOException, ServletException {"], [89, "        input.readRequestLine(requestLine);"], [90, ""], [91, "        String method = new String(requestLine.method, 0, requestLine.methodEnd);"], [92, "        String uri = null;"], [93, "        String protocol = new String(requestLine.protocol, 0, requestLine.protocolEnd);"], [94, ""], [95, "        // Validate the incoming request line"], [96, "        if (method.length() < 1) {"], [97, "            throw new ServletException(\"Missing HTTP request method\");"], [98, "        } else if (requestLine.uriEnd < 1) {"], [99, "            throw new ServletException(\"Missing HTTP request URI\");"], [101, "        // Parse any query parameters out of the request URI"], [102, "        int question = requestLine.indexOf(\"?\");"], [103, "        if (question >= 0) {"], [104, "            request.setQueryString(new String(requestLine.uri, question + 1,"], [105, "                    requestLine.uriEnd - question - 1));"], [106, "            uri = new String(requestLine.uri, 0, question);"], [107, "        } else {"], [108, "            request.setQueryString(null);"], [109, "            uri = new String(requestLine.uri, 0, requestLine.uriEnd);"], [111, "        String normalizedUri = normalize(uri);"], [113, "        ((HttpRequest) request).setMethod(method);"], [114, "        request.setProtocol(protocol);"], [115, "        if (normalizedUri != null) {"], [116, "            ((HttpRequest) request).setRequestURI(normalizedUri);"], [117, "        }"], [118, "        else {"], [119, "            ((HttpRequest) request).setRequestURI(uri);"], [120, "        }"], [121, ""], [122, "        if (normalizedUri == null) {"], [123, "            throw new ServletException(\"Invalid URI: \" + uri + \"'\");"], [124, "        }"], [127, "    // Return a context-relative path, beginning with a \"/\""], [128, "    protected String normalize(String path) {"], [129, "        if (path == null) return null;"], [130, "        String normalized = path;"], [132, "        return path;"]], "deleted": [[15, "    HttpConnector connector;"], [16, "    HttpRequest request;"], [17, "    HttpResponse response;"], [38, "            // request.addHeader(name, value); // \u5c06\u8bf7\u6c42\u5934\u7684\u540d/\u503c\u6dfb\u52a0\u5230request\u5bf9\u8c61\u7684HashMap\u8bf7\u6c42\u5934\u4e2d"], [40, "            if (request.getUri().startsWith(\"/servlet/\")) {"], [54, "    private void parseHeaders(SocketInputStream input) {"], [55, "        int line = -1;"], [56, "        while (line != -1) { // \u4e00\u884c\u4e00\u884c\u89e3\u6790\u5b8chear"], [57, "            HttpHeader httpHeader = new HttpHeader();"], [58, "            input.readHeader(httpHeader);"], [62, "    private void parseRequest(SocketInputStream input, OutputStream output) {"], [63, "        StringBuffer requestStr = new StringBuffer(2048);"], [64, "        int i;"], [65, "        byte[] buffer = new byte[2048];"], [66, "        try {"], [67, "            i = input.read(buffer);"], [68, "        } catch (IOException e) {"], [69, "            e.printStackTrace();"], [70, "            i = -1;"], [72, "        for (int j = 0; j < i; j++) {"], [73, "            requestStr.append((char) buffer[j]);"], [75, "        System.out.println(requestStr.toString());"], [76, "        String uri = parseUri(requestStr.toString());"], [77, "        request.setUri(uri);"], [79, "        // \u586b\u5145HttpRequest\u5bf9\u8c61"], [82, "    private String parseUri(String requestStr) {"], [83, "        // GET /index.html HTTP/1.1"], [84, "        // Accept: text/plain; text/html"], [86, "        int index1 = requestStr.indexOf(' ');"], [87, "        int index2;"], [88, "        if (index1 != -1) {"], [89, "            index2 = requestStr.indexOf(' ', index1 + 1);"], [90, "            if (index2 > index1) {"], [91, "                return requestStr.substring(index1 + 1, index2);"], [92, "            }"], [93, "        }"], [94, "        return null;"]]}, "num_lines_added": 75, "num_lines_removed": 37}