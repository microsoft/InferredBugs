{"hash": "c43e91616bb8df00e4a60e1d28226254da108663", "message": "Fix getgroups test by accounting for unspecified behavior.", "file_num_lines": 113, "diff_parsed": {"added": [[5, "import java.io.IOException;"], [92, "            String[] groupIdsAsStrings = exec(\"id -G\").split(\" \");"], [93, "            long[] expectedGroupIds = new long[groupIdsAsStrings.length];"], [95, "            for (int i = 0; i < groupIdsAsStrings.length; i++) {"], [96, "                expectedGroupIds[i] = Long.parseLong(groupIdsAsStrings[i]);"], [97, "            }"], [99, "            long[] actualGroupIds = posix.getgroups();"], [101, "            // getgroups does not specify whether the effective group ID is included along with the supplementary"], [102, "            // group IDs. However, `id -G` always includes all group IDs. So, we must do something of a fuzzy match."], [103, "            // If the actual list is shorter than the expected list by 1, alter the expected list by removing the"], [104, "            // effective group ID before comparing the two arrays."], [105, "            if (actualGroupIds.length == expectedGroupIds.length - 1) {"], [106, "                long effectiveGroupId = Long.parseLong(exec(\"id -g\"));"], [107, "                expectedGroupIds = removeElement(expectedGroupIds, effectiveGroupId);"], [108, "            }"], [109, ""], [110, "            Arrays.sort(expectedGroupIds);"], [111, "            Arrays.sort(actualGroupIds);"], [113, "            assertArrayEquals(expectedGroupIds, actualGroupIds);"], [114, "        }"], [115, "    }"], [117, "    private String exec(String command) throws IOException {"], [118, "        InputStreamReader isr = null;"], [119, "        BufferedReader reader = null;"], [121, "        try {"], [122, "            isr = new InputStreamReader(Runtime.getRuntime().exec(command).getInputStream());"], [123, "            reader = new BufferedReader(isr);"], [125, "            return reader.readLine();"], [126, "        } finally {"], [127, "            if (reader != null) {"], [128, "                reader.close();"], [129, "            }"], [130, ""], [131, "            if (isr != null) {"], [132, "                isr.close();"], [136, ""], [137, "    private long[] removeElement(long[] array, long value) {"], [138, "        for (int i = 0; i < array.length; i++) {"], [139, "            if (array[i] == value) {"], [140, "                long[] ret = new long[array.length - 1];"], [141, "                System.arraycopy(array, 0, ret, 0, i);"], [142, "                System.arraycopy(array, i + 1, ret, i, array.length - i - 1);"], [143, "                return ret;"], [144, "            }"], [145, "        }"], [146, ""], [147, "        return array;"], [148, "    }"]], "deleted": [[91, "            InputStreamReader isr = null;"], [92, "            BufferedReader reader = null;"], [94, "            try {"], [95, "                isr = new InputStreamReader(Runtime.getRuntime().exec(\"id -G\").getInputStream());"], [96, "                reader = new BufferedReader(isr);"], [98, "                String[] groupIdsAsStrings = reader.readLine().split(\" \");"], [99, "                long[] expectedGroupIds = new long[groupIdsAsStrings.length];"], [101, "                for (int i = 0; i < groupIdsAsStrings.length; i++) {"], [102, "                    expectedGroupIds[i] = Long.parseLong(groupIdsAsStrings[i]);"], [103, "                }"], [105, "                long[] actualGroupIds = posix.getgroups();"], [107, "                Arrays.sort(expectedGroupIds);"], [108, "                Arrays.sort(actualGroupIds);"], [110, "                assertArrayEquals(expectedGroupIds, actualGroupIds);"], [111, "            } finally {"], [112, "                if (reader != null) {"], [113, "                    reader.close();"], [114, "                }"], [116, "                if (isr != null) {"], [117, "                    isr.close();"], [118, "                }"]]}, "num_lines_added": 48, "num_lines_removed": 21}