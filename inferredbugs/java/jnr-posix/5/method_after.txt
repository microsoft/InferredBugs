    @Test
    public void dup2Test() throws Throwable {
        File tmp = File.createTempFile("dupTest", "tmp");
        int oldFd = posix.open(tmp.getAbsolutePath(), OpenFlags.O_RDWR.intValue(), 0666);
        int newFd = 1000;

        byte[] outContent = "foo".getBytes();

        // NB: Windows differs a bit from POSIX's return value.  Both will return -1 on failure, but Windows will return
        // 0 upon success, while POSIX will return the new FD.  Since we already know what the FD will be if the call
        // is successful, it's easy to make code that works with both forms.  But it is something to watch out for.
        assertNotEquals(-1, posix.dup2(oldFd, newFd));
        FileDescriptor newFileDescriptor = toDescriptor(newFd);

        new FileOutputStream(toDescriptor(oldFd)).write(outContent);
        posix.lseek(newFd, SEEK_SET, 0);

        byte[] inContent = new byte[outContent.length];
        new FileInputStream(newFileDescriptor).read(inContent, 0, 3);

        assertArrayEquals(inContent, outContent);
    }