{"hash": "4a77e35a766513b1fe98b3c00c900dd0d9f8c466", "message": "#472: support switching socket users", "file_num_lines": 221, "diff_parsed": {"added": [[56, "import org.omnifaces.cdi.push.SocketEvent.Switched;"], [216, " * When the <code>user</code> attribute is an EL expression and it changes during an ajax request, then the socket"], [217, " * user will be actually switched, even though you did not cover the <code>&lt;o:socket&gt;</code> component in any ajax"], [218, " * render/update. So make sure the value is tied to at least a view scoped property in case you intend to control it"], [219, " * during the view scope."], [220, " * <p>"], [388, " * <strong><code>&#64;</code>{@link Opened}</strong> qualifier. When the <code>user</code> attribute of the"], [389, " * <code>&lt;o:socket&gt;</code> changes, a new CDI <strong>{@link SocketEvent}</strong> will be fired with"], [390, " * <strong><code>&#64;</code>{@link Switched}</strong> qualifier. When a web socket has been closed, a new CDI"], [405, " *     public void onSwitch(&#64;Observes &#64;Switched SocketEvent event) {"], [406, " *         String channel = event.getChannel(); // Returns &lt;o:socket channel&gt;."], [407, " *         Long currentUserId = event.getUser(); // Returns current &lt;o:socket user&gt;, if any."], [408, " *         Long previousUserId = event.getPreviousUser(); // Returns previous &lt;o:socket user&gt;, if any."], [409, " *         // Do your thing with it. E.g. updating in a concurrent/synchronized collection."], [410, " *     }"], [411, " *"], [747, "\t\t\tString channelId = SocketChannelManager.getInstance().register(channel, getScope(), getUser());"]], "deleted": [[22, "import static org.omnifaces.util.Beans.getReference;"], [383, " * <strong><code>&#64;</code>{@link Opened}</strong> qualifier. When a web socket has been closed, a new CDI"], [733, "\t\t\tString channelId = getReference(SocketChannelManager.class).register(channel, getScope(), getUser());"]]}, "num_lines_added": 17, "num_lines_removed": 3}