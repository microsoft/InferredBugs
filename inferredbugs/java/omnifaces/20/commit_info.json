{"hash": "43db9049658fba652052b0a8ed1af5b64481dc93", "message": "Fix #319: make behavior of rendered/connected attribute as intuitive as\npossible; finishing touches to o:socket f:ajax support", "file_num_lines": 272, "diff_parsed": {"added": [[22, "import static org.omnifaces.util.Faces.isRenderResponse;"], [37, "import java.util.logging.Logger;"], [45, "import javax.faces.component.UIComponent;"], [63, "import org.omnifaces.util.Components;"], [69, " * The <code>&lt;o:socket&gt;</code> is an {@link UIComponent} whith opens an one-way (server to client) web socket"], [70, " * based push connection in client side which can be reached from server side via {@link PushContext} interface injected"], [71, " * in any CDI/container managed artifact via <code>&#64;</code>{@link Push} annotation."], [84, " * It will install the {@link SocketEndpoint}. Lazy initialization of the endpoint via component is unfortunately not"], [286, " * close the web socket push connection. If the value of the <code>connected</code> or <code>rendered</code> attribute"], [287, " * is an EL expression and it becomes <code>false</code> during an ajax request, then any opened push connection will"], [288, " * explicitly be closed during oncomplete of that ajax request, even though you did not cover the"], [289, " * <code>&lt;o:socket&gt;</code> component in ajax render/update. So make sure the value is tied to at least a view"], [290, " * scoped property in case you intend to control it during the view scope."], [671, "\tprivate Boolean rendered;"], [688, "\t\tif (PropertyKeys.user.toString().equals(name)) {"], [689, "\t\t\tObject user = binding.getValue(getFacesContext().getELContext());"], [691, "\t\t\tif (user != null && !(user instanceof Serializable)) {"], [692, "\t\t\t\tthrow new IllegalArgumentException(String.format(ERROR_INVALID_USER, user));"], [693, "\t\t\t}"], [711, "\tprotected boolean moveToBody(ComponentSystemEvent event) {"], [712, "\t\treturn (getClosestParent(this, UIForm.class) == null) && super.moveToBody(event);"], [759, ""], [760, "\t\trendered = super.isRendered();"], [952, "\t\treturn super.isRendered() && state.<Boolean>get(PropertyKeys.connected, TRUE);"], [967, "\t/**"], [968, "\t * An override which explicitly returns <code>true</code> once more when the <code>rendered</code> condition gets"], [969, "\t * toggled to <code>false</code> while the socket is already in connected state. This gives the component the"], [970, "\t * opportunity to render the close script."], [971, "\t */"], [972, "\t@Override"], [973, "\tpublic boolean isRendered() {"], [974, "\t\tif (isRenderResponse()) {"], [975, "\t\t\tif (rendered != null) {"], [976, "\t\t\t\treturn rendered;"], [977, "\t\t\t}"], [978, ""], [979, "\t\t\trendered = super.isRendered() && Components.isRendered(getParent());"], [980, ""], [981, "\t\t\tif (!rendered && isCurrentlyConnected(getFacesContext(), getChannel())) {"], [982, "\t\t\t\trendered = true;"], [983, "\t\t\t}"], [984, ""], [985, "\t\t\treturn rendered;"], [986, "\t\t}"], [987, ""], [988, "\t\treturn super.isRendered();"], [989, "\t}"], [990, ""], [998, "\t\tif (TRUE.equals(context.getAttribute(Socket.class.getName()))) {"], [1002, "\t\tif (!parseBoolean(context.getInitParameter(PARAM_SOCKET_ENDPOINT_ENABLED))) {"], [1003, "\t\t\tif (parseBoolean(context.getInitParameter(PARAM_ENABLE_SOCKET_ENDPOINT))) { // TODO: remove in OmniFaces 3.0."], [1004, "\t\t\t\tLogger.getLogger(Socket.class.getName()).warning("], [1005, "\t\t\t\t\t\"Context parameter name '\" + PARAM_ENABLE_SOCKET_ENDPOINT + \"' is deprecated.\""], [1006, "\t\t\t\t\t\t+ \" It has been renamed to '\" + PARAM_SOCKET_ENDPOINT_ENABLED + \"'.\""], [1007, "\t\t\t\t\t\t+ \" Please update web.xml accordingly.\");"], [1008, "\t\t\t}"], [1009, "\t\t\telse {"], [1010, "\t\t\t\treturn;"], [1011, "\t\t\t}"], [1012, "\t\t}"], [1013, ""], [1030, "\t\tBoolean previouslyConnected = getConnectedStates(context).put(channel, connected);"], [1031, "\t\treturn (previouslyConnected == null) ? null : (previouslyConnected != connected);"], [1032, "\t}"], [1034, "\t/**"], [1035, "\t * Helper to check whether given channel is currently connected."], [1036, "\t */"], [1037, "\tprivate static boolean isCurrentlyConnected(FacesContext context, String channel) {"], [1038, "\t\tBoolean currentlyConnected = getConnectedStates(context).get(channel);"], [1039, "\t\treturn (currentlyConnected != null && currentlyConnected);"], [1040, "\t}"], [1041, ""], [1042, "\tprivate static Map<String, Boolean> getConnectedStates(FacesContext context) {"], [1043, "\t\tMap<String, Boolean> connectedStates = getViewAttribute(context, Socket.class.getName());"], [1044, ""], [1045, "\t\tif (connectedStates == null) {"], [1046, "\t\t\tconnectedStates = new HashMap<>(ESTIMATED_TOTAL_CHANNELS);"], [1047, "\t\t\tsetViewAttribute(context, Socket.class.getName(), connectedStates);"], [1050, "\t\treturn connectedStates;"]], "deleted": [[47, "import javax.faces.event.AbortProcessingException;"], [66, " * The <code>&lt;o:socket&gt;</code> tag opens an one-way (server to client) web socket based push connection in client"], [67, " * side which can be reached from server side via {@link PushContext} interface injected in any CDI/container managed"], [68, " * artifact via <code>&#64;</code>{@link Push} annotation."], [81, " * It will install the {@link SocketEndpoint}. Lazy initialization of the endpoint via taghandler is unfortunately not"], [283, " * close the web socket push connection. If the value is an EL expression and it becomes <code>false</code> during an"], [284, " * ajax request, then the push connection will explicitly be closed during oncomplete of that ajax request, even though"], [285, " * you did not cover the <code>&lt;o:socket&gt;</code> tag in ajax render/update. So make sure it's tied to at least a"], [286, " * view scoped property in case you intend to control it during the view scope."], [683, "\t\tObject user = binding.getValue(getFacesContext().getELContext());"], [685, "\t\tif (user != null && !(user instanceof Serializable)) {"], [686, "\t\t\tthrow new IllegalArgumentException(String.format(ERROR_INVALID_USER, user));"], [704, "\tpublic void processEvent(ComponentSystemEvent event) throws AbortProcessingException {"], [705, "\t\tif (getClosestParent(this, UIForm.class) == null) {"], [706, "\t\t\tsuper.processEvent(event);"], [707, "\t\t}"], [945, "\t\treturn state.get(PropertyKeys.connected, TRUE);"], [967, "\t\tif (TRUE.equals(context.getAttribute(Socket.class.getName()))"], [968, "\t\t\t|| !(parseBoolean(context.getInitParameter(PARAM_SOCKET_ENDPOINT_ENABLED))"], [969, "\t\t\t\t|| parseBoolean(context.getInitParameter(PARAM_ENABLE_SOCKET_ENDPOINT)))) {"], [989, "\t\tMap<String, Boolean> channels = getViewAttribute(context, Socket.class.getName());"], [991, "\t\tif (channels == null) {"], [992, "\t\t\tchannels = new HashMap<>(ESTIMATED_TOTAL_CHANNELS);"], [993, "\t\t\tsetViewAttribute(context, Socket.class.getName(), channels);"], [996, "\t\tBoolean previouslyConnected = channels.put(channel, connected);"], [997, "\t\treturn (previouslyConnected == null) ? null : (previouslyConnected != connected);"]]}, "num_lines_added": 79, "num_lines_removed": 26}