{"hash": "9cf27705f0e83f2e545bb8988719a51cb664122e", "message": "#17: finishing touches on socket: added guarding SocketChannelFilter;\nLet application scoped channel also use scopeId (for better guarding);\nSome refactoring; reviewed javadocs; updated copyright year to 2016", "file_num_lines": 116, "diff_parsed": {"added": [[2, " * Copyright 2016 OmniFaces."], [17, "import static javax.servlet.DispatcherType.ASYNC;"], [18, "import static javax.servlet.DispatcherType.REQUEST;"], [27, "import java.util.EnumSet;"], [43, "import javax.servlet.FilterRegistration;"], [62, " * First enable the web socket endpoint and channel filter by below boolean context parameter in <code>web.xml</code>:"], [70, " * It will install the {@link SocketEndpoint} and {@link SocketChannelFilter}. Lazy initialization of the endpoint is"], [71, " * unfortunately not possible across all containers (yet)."], [81, " * Here's an example which refers an existing JavaScript listener function (do not include the parentheses!)."], [91, " * Here's an example which declares an inline JavaScript listener function."], [96, " * The <code>onmessage</code> JavaScript listener function will be invoked with three arguments:"], [105, " * The optional <code>onclose</code> JavaScript listener function can be used to listen on (ab)normal close of a web"], [106, " * socket."], [120, " * The <code>onclose</code> JavaScript listener function will be invoked with three arguments:"], [173, " * Although web sockets support two-way communication, the <code>&lt;o:socket&gt;</code> push is designed for one-way"], [174, " * communication, from server to client. In case you intend to send some data from client to server, just continue"], [175, " * using JSF ajax the usual way, if necessary from JavaScript on with <code>&lt;o:commandScript&gt;</code> or perhaps"], [195, " * You can also explicitly set it to <code>false</code> and manually open the push connection in client side by"], [196, " * invoking <code>OmniFaces.Push.open(channel)</code>, passing the channel name, for example in an onclick listener"], [197, " * function of a command button which initiates a long running asynchronous task in server side."], [202, " * function someOnclickListener() {"], [210, " * usually because you only wanted to present the result of an one-time asynchronous action in a manually opened push"], [211, " * socket as in above example, you can optionally explicitly close the push connection from client side by invoking"], [212, " * <code>OmniFaces.Push.close(channel)</code>, passing the channel name. For example, in the <code>onmessage</code>"], [213, " * JavaScript listener function as below:"], [215, " * function someSocketListener(message, channel) {"], [263, " * <p>"], [264, " * As extra security, the <code>&lt;o:socket&gt;</code> will remember all so far opened channels in"], [265, " * {@link SocketScopeManager} and the aforementioned {@link SocketChannelFilter} will check all incoming web socket"], [266, " * handshake requests whether they match the so far opened channels in both the application and session scopes, and"], [267, " * otherwise send a HTTP 400 error back. This should prevent users from manually opening arbitrary channels which are"], [268, " * nowhere declared via <code>&lt;o:socket channel=\"...\"&gt;</code>."], [279, " *     private final String message;"], [317, " * application scoped). The {@link FacesContext} will also be unavailable in the method."], [373, " * be to combine <code>&lt;o:socket&gt;</code> with <code>&lt;o:commandScript&gt;</code> which simply invokes a bean"], [390, " * @see SocketScopeManager"], [406, "\tprivate static final Pattern PATTERN_CHANNEL = Pattern.compile(\"[\\\\w.-]+\");"], [411, "\tprivate static final String ERROR_INVALID_CHANNEL ="], [414, "\tprivate static final String ERROR_INVALID_SCOPE ="], [469, "\t\tif (!PATTERN_CHANNEL.matcher(channelName).matches()) {"], [470, "\t\t\tthrow new IllegalArgumentException(String.format(ERROR_INVALID_CHANNEL, channelName));"], [473, "\t\tSocketScopeManager scopeManager = getReference(SocketScopeManager.class);"], [474, "\t\tString scopeName = getString(context, scope);"], [475, "\t\tString scopeId;"], [476, ""], [477, "\t\ttry {"], [478, "\t\t\tscopeId = scopeManager.register(channelName, scopeName);"], [479, "\t\t}"], [480, "\t\tcatch (IllegalArgumentException ignore) {"], [481, "\t\t\tthrow new IllegalArgumentException(String.format(ERROR_INVALID_SCOPE, scopeName));"], [482, "\t\t}"], [502, "\t * Register web socket endpoint and channel filter if necessary, i.e. when it's enabled via context param and not"], [503, "\t * already installed."], [506, "\tpublic static void registerEndpointAndFilterIfNecessary(ServletContext context) {"], [515, "\t\t\tFilterRegistration filter = context.addFilter(SocketChannelFilter.class.getName(), SocketChannelFilter.class);"], [516, "\t\t\tfilter.addMappingForUrlPatterns(EnumSet.of(REQUEST, ASYNC), false, SocketChannelFilter.URL_PATTERN);"]], "deleted": [[2, " * Copyright 2015 OmniFaces."], [58, " * First enable the web socket endpoint by below boolean context parameter in <code>web.xml</code>:"], [66, " * It will install the {@link SocketEndpoint}. Lazy initialization of the endpoint is unfortunately not possible across"], [67, " * all containers (yet)."], [77, " * Here's an example which refers an existing JS listener function (do not include the parentheses!)."], [87, " * Here's an example which declares an inline JS listener function."], [92, " * The <code>onmessage</code> JS listener function will be invoked with three arguments:"], [101, " * The optional <code>onclose</code> JS listener function can be used to listen on (ab)normal close of a web socket."], [115, " * The <code>onclose</code> JS listener function will be invoked with three arguments:"], [168, " * The push is one-way, from server to client. In case you intend to send some data from client to server, just continue"], [169, " * using Ajax the usual way, if necessary with <code>&lt;o:commandScript&gt;</code> or perhaps"], [189, " * You can also explicitly set it to <code>false</code> and manually open the push connection from client side by"], [190, " * invoking <code>OmniFaces.Push.open(channel)</code>, passing the channel name."], [195, " * function someFunction() {"], [203, " * usually because you only wanted to present the result of an one-time asynchronous action, you can optionally"], [204, " * explicitly close the push connection from client side by invoking <code>OmniFaces.Push.close(channel)</code>, passing"], [205, " * the channel name. For example, in the <code>onmessage</code> JS listener function as below:"], [207, " * function socketListener(message, channel) {"], [265, " *     private String message;"], [303, " * application scoped). The {@link FacesContext} will be also unavailable in the method."], [359, " * be to combine <code>&lt;o:socket&gt;</code> with <code>&lt;o:commandScript&gt;</code>which simply invokes a bean"], [376, " * @see SocketScope"], [392, "\tenum Scope {"], [393, "\t\tAPPLICATION, SESSION;"], [394, ""], [395, "\t\tpublic static Scope of(String value) {"], [396, "\t\t\tif (value == null) {"], [397, "\t\t\t\treturn APPLICATION;"], [398, "\t\t\t}"], [399, ""], [400, "\t\t\tfor (Scope scope : values()) {"], [401, "\t\t\t\tif (scope.name().equalsIgnoreCase(value)) {"], [402, "\t\t\t\t\treturn scope;"], [403, "\t\t\t\t}"], [404, "\t\t\t}"], [405, ""], [406, "\t\t\tthrow new IllegalArgumentException(String.format(ERROR_ILLEGAL_SCOPE, value));"], [407, "\t\t}"], [408, "\t}"], [409, ""], [410, "\tprivate static final Pattern PATTERN_CHANNEL_NAME = Pattern.compile(\"[\\\\w.-]+\");"], [415, "\tprivate static final String ERROR_ILLEGAL_CHANNEL_NAME ="], [418, "\tprivate static final String ERROR_ILLEGAL_SCOPE ="], [473, "\t\tif (!PATTERN_CHANNEL_NAME.matcher(channelName).matches()) {"], [474, "\t\t\tthrow new IllegalArgumentException(String.format(ERROR_ILLEGAL_CHANNEL_NAME, channelName));"], [477, "\t\tString scopeId = getReference(SocketScope.class).register(channelName, Scope.of(getString(context, scope)));"], [497, "\t * Register web socket endpoint if necessary, i.e. when it's enabled via context param and not already installed."], [500, "\tpublic static void registerEndpointIfNecessary(ServletContext context) {"]]}, "num_lines_added": 56, "num_lines_removed": 48}