{"hash": "2f2f440fa426ace9999d3ed6032b820a6e7b136d", "message": "#17: register channels and return error code 1008 on unknown channels", "file_num_lines": 110, "diff_parsed": {"added": [[259, " * <p>"], [260, " * As extra security, the <code>&lt;o:socket&gt;</code> will register all so far declared channels in the current HTTP"], [261, " * session and any incoming web socket open request will be checked whether they match the so far registered channels in"], [262, " * the current HTTP session. In case the channel is unknown (e.g. randomly guessed or spoofed by endusers), then the web"], [263, " * socket will immediately be closed with close code {@link CloseCodes#VIOLATED_POLICY} (error code <code>1008</code>)."], [385, " * @see SocketChannelManager"], [468, "\t\tSocketChannelManager channelManager = getReference(SocketChannelManager.class);"], [470, "\t\tString channelId;"], [473, "\t\t\tchannelId = channelManager.register(channelName, scopeName);"], [479, "\t\tif (channelId == null) {"], [489, "\t\tSystemEventListener listener = new SocketEventListener(portNumber, channelName, channelId, functions, connectedExpression);"]], "deleted": [[380, " * @see SocketScopeManager"], [463, "\t\tSocketScopeManager scopeManager = getReference(SocketScopeManager.class);"], [465, "\t\tString scopeId;"], [468, "\t\t\tscopeId = scopeManager.register(channelName, scopeName);"], [474, "\t\tif (scopeId == null) {"], [484, "\t\tSystemEventListener listener = new SocketEventListener(portNumber, channelName, scopeId, functions, connectedExpression);"]]}, "num_lines_added": 11, "num_lines_removed": 6}