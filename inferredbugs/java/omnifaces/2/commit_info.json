{"hash": "6a5de7e505caf67efc09264fb607a18a30b276f4", "message": "#20: fix ResetInputAjaxActionListener to work in UIData as well (and simplified the logic)", "file_num_lines": 96, "diff_parsed": {"added": [[155, "\t * Handle the reset input action as follows, only and only if the current request is an ajax request and the"], [157, "\t * {@link PartialViewContext#getExecuteIds()}: find all {@link EditableValueHolder} components based on"], [158, "\t * {@link PartialViewContext#getRenderIds()} and if the component is not covered by"], [159, "\t * {@link PartialViewContext#getExecuteIds()}, then invoke {@link EditableValueHolder#resetValue()} on the"], [160, "\t * component."], [174, "\t\t\t\tresetEditableValueHolders(VisitContext.createVisitContext("], [175, "\t\t\t\t\tcontext, renderIds, VISIT_HINTS), context.getViewRoot(), executeIds);"], [221, "\t * reset them when they are not covered by the given execute IDs."], [224, "\t * @param executeIds The execute IDs."], [226, "\tprivate void resetEditableValueHolders"], [227, "\t\t(VisitContext context, final UIComponent component, final Collection<String> executeIds)"], [232, "\t\t\t\tif (executeIds.contains(target.getClientId(context.getFacesContext()))) {"], [233, "\t\t\t\t\treturn VisitResult.REJECT;"], [237, "\t\t\t\t\t((EditableValueHolder) target).resetValue();"], [240, "\t\t\t\t\t// Render ID didn't point an EditableValueHolder. Visit all children as well."], [241, "\t\t\t\t\tresetEditableValueHolders(VisitContext.createVisitContext("], [242, "\t\t\t\t\t\tcontext.getFacesContext(), null, context.getHints()), target, executeIds);"]], "deleted": [[19, "import java.util.HashSet;"], [39, "import org.omnifaces.util.Components;"], [40, ""], [158, "\t * <p>Handle the reset input action as follows, only and only if the current request is an ajax request and the"], [160, "\t * {@link PartialViewContext#getExecuteIds()}:"], [161, "\t * <ul>"], [162, "\t * <li>Collect all {@link EditableValueHolder} components based on {@link PartialViewContext#getRenderIds()}."], [163, "\t * <li>Remove all components covered by {@link PartialViewContext#getExecuteIds()} from this collection."], [164, "\t * <li>Invoke {@link EditableValueHolder#resetValue()} on the remaining components of this collection."], [165, "\t * </ul>"], [179, "\t\t\t\tfinal Set<EditableValueHolder> inputs = new HashSet<EditableValueHolder>();"], [180, ""], [181, "\t\t\t\t// First find all to be rendered inputs in the current view and add them to the set."], [182, "\t\t\t\tfindAndAddEditableValueHolders(VisitContext.createVisitContext("], [183, "\t\t\t\t\tcontext, renderIds, VISIT_HINTS), context.getViewRoot(), inputs);"], [184, ""], [185, "\t\t\t\t// Then find all executed inputs in the current form and remove them from the set."], [186, "\t\t\t\tfindAndRemoveEditableValueHolders(VisitContext.createVisitContext("], [187, "\t\t\t\t\tcontext, executeIds, VISIT_HINTS), Components.getCurrentForm(), inputs);"], [188, ""], [189, "\t\t\t\t// The set now contains inputs which are to be rendered, but which are not been executed. Reset them."], [190, "\t\t\t\tfor (EditableValueHolder input : inputs) {"], [191, "\t\t\t\t\tinput.resetValue();"], [192, "\t\t\t\t}"], [238, "\t * add them to the given set."], [241, "\t * @param inputs The set to add the found editable value holder components to."], [243, "\tprivate static void findAndAddEditableValueHolders"], [244, "\t\t(VisitContext context, final UIComponent component, final Set<EditableValueHolder> inputs)"], [249, "\t\t\t\tif (target instanceof EditableValueHolder) {"], [250, "\t\t\t\t\tinputs.add((EditableValueHolder) target);"], [252, "\t\t\t\telse if (context.getIdsToVisit() != VisitContext.ALL_IDS) {"], [253, "\t\t\t\t\t// Render ID didn't point an EditableValueHolder. Visit all children as well."], [254, "\t\t\t\t\tfindAndAddEditableValueHolders(VisitContext.createVisitContext("], [255, "\t\t\t\t\t\tcontext.getFacesContext(), null, context.getHints()), target, inputs);"], [256, "\t\t\t\t}"], [257, ""], [258, "\t\t\t\treturn VisitResult.ACCEPT;"], [259, "\t\t\t}"], [260, "\t\t});"], [261, "\t}"], [263, "\t/**"], [264, "\t * Find all editable value holder components in the component hierarchy, starting with the given component and"], [265, "\t * remove them from the given set."], [266, "\t * @param context The visit context to work with."], [267, "\t * @param component The starting point of the component hierarchy to look for editable value holder components."], [268, "\t * @param inputs The set to remove the found editable value holder components from."], [269, "\t */"], [270, "\tprivate static void findAndRemoveEditableValueHolders"], [271, "\t\t(VisitContext context, final UIComponent component, final Set<EditableValueHolder> inputs)"], [272, "\t{"], [273, "\t\tcomponent.visitTree(context, new VisitCallback() {"], [274, "\t\t\t@Override"], [275, "\t\t\tpublic VisitResult visit(VisitContext context, UIComponent target) {"], [277, "\t\t\t\t\tinputs.remove(target);"], [280, "\t\t\t\t\t// Execute ID didn't point an EditableValueHolder. Visit all children as well."], [281, "\t\t\t\t\tfindAndRemoveEditableValueHolders(VisitContext.createVisitContext("], [282, "\t\t\t\t\t\tcontext.getFacesContext(), null, context.getHints()), target, inputs);"]]}, "num_lines_added": 17, "num_lines_removed": 57}