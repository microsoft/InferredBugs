{"hash": "dd94dd0410db03922d89456a106724ad62774d06", "message": "Fixed character encoding bug in ResourceInclude (it was relying on platform default encoding)", "file_num_lines": 90, "diff_parsed": {"added": [[15, "import java.io.ByteArrayOutputStream;"], [17, "import java.io.OutputStreamWriter;"], [20, "import javax.faces.FacesException;"], [34, " * This component is used to catch the output from a JSP/Servlet resource and render it as output"], [38, " * @author Bauke Scholtz"], [43, "\t// Public constants -----------------------------------------------------------------------------------------------"], [44, ""], [45, "\t/** The component type. */"], [48, "\t/** The standard component family. */"], [51, "\t// UIComponent overrides ------------------------------------------------------------------------------------------"], [52, ""], [53, "\t/**"], [54, "\t * Returns {@link #COMPONENT_FAMILY}."], [55, "\t */"], [61, "\t/**"], [62, "\t * Returns <code>true</code>."], [63, "\t */"], [64, "\t@Override"], [65, "\tpublic boolean getRendersChildren() {"], [66, "\t\treturn true;"], [67, "\t}"], [68, ""], [69, "\t/**"], [70, "\t * Create a dispatcher for the resource given by the component's path attribute, catch its output and write it to"], [71, "\t * the JSF response writer."], [72, "\t */"], [77, "\t\tExternalContext externalContext = context.getExternalContext();"], [78, "\t\tHttpServletRequest request = (HttpServletRequest) externalContext.getRequest();"], [79, "\t\tHttpServletResponse response = (HttpServletResponse) externalContext.getResponse();"], [80, "\t\tBufferedHttpServletResponse bufferedResponse = new BufferedHttpServletResponse(response);"], [82, "\t\ttry {"], [83, "\t\t\trequest.getRequestDispatcher((String) getAttributes().get(\"path\")).include(request, bufferedResponse);"], [86, "\t\t\tthrow new FacesException(e);"], [89, "\t\tcontext.getResponseWriter().write(new String(bufferedResponse.getBuffer(), response.getCharacterEncoding()));"], [92, "\t// Nested classes -------------------------------------------------------------------------------------------------"], [93, ""], [94, "\t/**"], [95, "\t * This HTTP servlet response implementation buffers the entire response body. The buffered response body is as a"], [96, "\t * byte array available by {@link #getBuffer()} method. The response writer will use the same character encoding"], [97, "\t * as is been set on the response supplied to the constructor. Note that this way any setCharacterEncoding() calls"], [98, "\t * on the included JSP/Servlet resourse have thus no effect."], [99, "\t *"], [100, "\t * @author Bauke Scholtz"], [101, "\t */"], [102, "\tstatic class BufferedHttpServletResponse extends HttpServletResponseWrapper {"], [103, ""], [104, "\t    private final ByteArrayOutputStream buffer;"], [105, "\t    private PrintWriter writer;"], [106, "\t    private ServletOutputStream output;"], [107, ""], [108, "\t    public BufferedHttpServletResponse(HttpServletResponse response) {"], [109, "\t        super(response);"], [110, "\t        buffer = new ByteArrayOutputStream(response.getBufferSize());"], [111, "\t    }"], [112, ""], [113, "\t    @Override"], [114, "\t    public ServletOutputStream getOutputStream() throws IOException {"], [115, "\t        if (writer != null) {"], [116, "\t            throw new IllegalStateException(\"getWriter() has already been called on this response.\");"], [117, "\t        }"], [118, ""], [119, "\t        if (output == null) {"], [120, "\t        \toutput = new ServletOutputStream() {"], [121, "\t\t\t\t\t@Override"], [122, "\t\t\t\t\tpublic void write(int b) throws IOException {"], [123, "\t\t\t\t\t\tbuffer.write(b);"], [124, "\t\t\t\t\t}"], [125, "\t\t\t\t};"], [126, "\t        }"], [127, ""], [128, "\t        return output;"], [129, "\t    }"], [130, ""], [131, "\t    @Override"], [132, "\t    public PrintWriter getWriter() throws IOException {"], [133, "\t        if (output != null) {"], [134, "\t            throw new IllegalStateException(\"getOutputStream() has already been called on this response.\");"], [135, "\t        }"], [136, ""], [137, "\t        if (writer == null) {"], [138, "\t            writer = new PrintWriter(new OutputStreamWriter(buffer, getResponse().getCharacterEncoding()), true);"], [139, "\t        }"], [140, ""], [141, "\t        return writer;"], [142, "\t    }"], [143, ""], [144, "\t    @Override"], [145, "\t    public void flushBuffer() throws IOException {"], [146, "\t        if (writer != null) {"], [147, "\t            writer.flush();"], [148, "\t        } else if (output != null) {"], [149, "\t            output.flush();"], [150, "\t        }"], [151, "\t    }"], [152, ""], [153, "\t    public byte[] getBuffer() throws IOException {"], [154, "\t    \tflushBuffer();"], [155, "            return buffer.toByteArray();"], [156, "\t    }"]], "deleted": [[15, "import java.io.ByteArrayInputStream;"], [16, "import java.io.CharArrayWriter;"], [18, "import java.io.InputStream;"], [20, "import java.io.Writer;"], [26, "import javax.servlet.RequestDispatcher;"], [36, " * This component is used to catch the output from a Servlet resource and render it as output"], [40, " *"], [58, "\t\ttry {"], [59, "\t\t\tExternalContext externalContext = context.getExternalContext();"], [60, "\t\t\tHttpServletRequest request = (HttpServletRequest) externalContext.getRequest();"], [61, "\t\t\tHttpServletResponse response = (HttpServletResponse) externalContext.getResponse();"], [62, ""], [63, "\t\t\t// Create dispatcher for the resource given by the component's page attribute."], [64, "\t\t\tRequestDispatcher requestDispatcher = request.getRequestDispatcher((String) getAttributes().get(\"path\"));"], [66, "\t\t\t// Catch the resource's output."], [67, "\t\t\tCharResponseWrapper responseWrapper = new CharResponseWrapper(response);"], [68, "\t\t\trequestDispatcher.include(request, responseWrapper);"], [69, ""], [70, "\t\t\t// Write the output from the resource to the JSF response writer."], [71, "\t\t\tcontext.getResponseWriter().write(responseWrapper.toString());"], [74, "\t\t\tthrow new IOException();"], [75, "\t\t}"], [76, "\t}"], [77, ""], [78, "\tstatic class CharResponseWrapper extends HttpServletResponseWrapper {"], [79, ""], [80, "\t\tprivate CharArrayWriter output;"], [81, ""], [82, "\t\t@Override"], [83, "\t\tpublic String toString() {"], [84, "\t\t\treturn output.toString();"], [87, "\t\tpublic CharResponseWrapper(HttpServletResponse response) {"], [88, "\t\t\tsuper(response);"], [89, "\t\t\toutput = new CharArrayWriter();"], [90, "\t\t}"], [91, ""], [92, "\t\tpublic CharArrayWriter getCharWriter() {"], [93, "\t\t\treturn output;"], [94, "\t\t}"], [95, ""], [96, "\t\t@Override"], [97, "\t\tpublic PrintWriter getWriter() {"], [98, "\t\t\treturn new PrintWriter(output);"], [99, "\t\t}"], [100, ""], [101, "\t\t@Override"], [102, "\t\tpublic ServletOutputStream getOutputStream() {"], [103, "\t\t\treturn new CharOutputStream(output);"], [104, "\t\t}"], [105, ""], [106, "\t\tpublic InputStream getInputStream() {"], [107, "\t\t\treturn new ByteArrayInputStream(toString().getBytes());"], [108, "\t\t}"], [111, "\tstatic class CharOutputStream extends ServletOutputStream {"], [112, ""], [113, "\t\tprivate Writer output;"], [114, ""], [115, "\t\tpublic CharOutputStream(Writer writer) {"], [116, "\t\t\toutput = writer;"], [117, "\t\t}"], [118, ""], [119, "\t\t@Override"], [120, "\t\tpublic void write(int b) throws IOException {"], [121, "\t\t\toutput.write(b);"], [122, "\t\t}"]]}, "num_lines_added": 99, "num_lines_removed": 65}