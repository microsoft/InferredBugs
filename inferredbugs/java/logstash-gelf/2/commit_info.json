{"hash": "46574ae8c7ead62196450ab17540129906991e0d", "message": "Add configuration options for TCP sender #62\n\nThe TCP protocol nature allows to specify read/connection timeouts and keep-alive. The sender requires an established TCP connection that is open and valid from both ends. If a TCP connection times out (broken pipe from the other end) it failed before and dropped the log message. To avoid this, another option was introduced: deliveryAttempts. This option allows to (re)deliver the message until it was sent sucessfully.", "file_num_lines": 72, "diff_parsed": {"added": [[17, ""], [18, "    public final static String CONNECTION_TIMEOUT = \"connectionTimeout\";"], [19, "    public final static String READ_TIMEOUT = \"readTimeout\";"], [20, "    public final static String RETRIES = \"deliveryAttempts\";"], [21, "    public final static String KEEPALIVE = \"keepAlive\";"], [22, ""], [28, "    private int deliveryAttempts;"], [29, "    private boolean keepAlive;"], [35, "        this(host, port, connectTimeoutMs, readTimeoutMs, 1, false, errorReporter);"], [36, "    }"], [37, ""], [38, "    public GelfTCPSender(String host, int port, int connectTimeoutMs, int readTimeoutMs, int deliveryAttempts,"], [39, "                         boolean keepAlive, ErrorReporter errorReporter) throws IOException {"], [40, "        this.keepAlive = keepAlive;"], [46, "        this.deliveryAttempts = deliveryAttempts < 1 ? Integer.MAX_VALUE : deliveryAttempts;"], [54, "        IOException exception = null;"], [56, "        for (int i = 0; i < deliveryAttempts; i++) {"], [57, "            try {"], [58, "                // reconnect if necessary"], [59, "                if (socket == null) {"], [60, "                    socket = createSocket();"], [61, "                }"], [63, "                socket.getOutputStream().write(message.toTCPBuffer().array());"], [64, "                return true;"], [65, "            } catch (IOException e) {"], [66, "                exception = e;"], [67, "                // if an error occours, signal failure"], [68, "                socket = null;"], [69, "            }"], [71, ""], [72, "        if (exception != null) {"], [73, "            errorReporter.reportError(exception.getMessage(), new IOException(\"Cannot send data to \" + host + \":\" + port,"], [74, "                    exception));"], [75, "        }"], [76, ""], [77, "        return false;"], [83, "        socket.setKeepAlive(keepAlive);"]], "deleted": [[39, "        try {"], [40, "            // reconnect if necessary"], [41, "            if (socket == null) {"], [42, "                socket = createSocket();"], [43, "            }"], [45, "            socket.getOutputStream().write(message.toTCPBuffer().array());"], [47, "            return true;"], [48, "        } catch (IOException e) {"], [49, "            errorReporter.reportError(e.getMessage(), new IOException(\"Cannot send data to \" + host + \":\" + port, e));"], [50, "            // if an error occours, signal failure"], [51, "            socket = null;"], [52, "            return false;"]]}, "num_lines_added": 37, "num_lines_removed": 12}