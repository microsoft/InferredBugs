{"hash": "36e65ac180e7e60785d7dcdae1da30ca31e6c359", "message": "Manifold ext change\n- small perf improvement on structural proxy generation, test for ICallHandler statically as well as via extension and cache the result", "file_num_lines": 397, "diff_parsed": {"added": [[35, "  private static final Map<Class, Boolean> ICALL_HANDLER_MAP = new ConcurrentWeakHashMap<>();"], [386, "    if( ICallHandler.class.isAssignableFrom( rootClass ) )"], [387, "    {"], [388, "      // Nominally implements ICallHandler"], [389, "      return true;"], [390, "    }"], [391, "    if( ReflectUtil.method( rootClass, \"call\", Class.class, String.class, String.class, Class.class, Class[].class, Object[].class ) != null )"], [392, "    {"], [393, "      // Structurally implements ICallHandler"], [394, "      return true;"], [395, "    }"], [396, ""], [397, "    // maybe has an extension satisfying ICallHandler"], [398, "    return hasCallHandlerFromExtension( rootClass );"], [399, "  }"], [400, ""], [401, "  private static boolean hasCallHandlerFromExtension( Class rootClass )"], [402, "  {"], [403, "    Boolean isCallHandler = ICALL_HANDLER_MAP.get( rootClass );"], [404, "    if( isCallHandler != null )"], [405, "    {"], [406, "      return isCallHandler;"], [407, "    }"], [408, ""], [416, "      isCallHandler = true;"], [418, "    else"], [419, "    {"], [420, "      // Structurally implements ICallHandler"], [421, "      isCallHandler = hasCallMethod( javacTask, classSymbol.getFirst() );"], [422, "    }"], [423, "    ICALL_HANDLER_MAP.put( rootClass, isCallHandler );"], [424, "    return isCallHandler;"]], "deleted": [[392, "      return true;"], [394, ""], [395, "    return hasCallMethod( javacTask, classSymbol.getFirst() );"]]}, "num_lines_added": 32, "num_lines_removed": 3}