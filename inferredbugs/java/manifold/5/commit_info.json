{"hash": "8038158ad6891dea0084ded0df2b473d501832b7", "message": "Manifold core changes\n- some perf improvements re extension manifold, mostly about reusing javac task", "file_num_lines": 209, "diff_parsed": {"added": [[42, "  private LocklessLazyVar<BasicJavacTask> _altJavacTask_PlainFileMgr;"], [43, "  private LocklessLazyVar<BasicJavacTask> _altJavacTask_ManFileMgr;"], [62, "    _altJavacTask_PlainFileMgr = LocklessLazyVar.make( () -> {"], [74, "    _altJavacTask_ManFileMgr = LocklessLazyVar.make( () -> {"], [75, "      init();"], [76, "      if( _wfm == null )"], [77, "      {"], [78, "        _wfm = new ManifoldJavaFileManager( _fm, null, false );"], [79, "      }"], [80, "      StringWriter errors = new StringWriter();"], [81, "      BasicJavacTask task = (BasicJavacTask)_javacTool.getTask( errors, _wfm, null, Arrays.asList( \"-proc:none\", \"-source\", \"1.8\", \"-Xprefer:source\" ), null, null );"], [82, "      if( errors.getBuffer().length() > 0 )"], [83, "      {"], [84, "        // report errors to console"], [85, "        System.err.println( errors.getBuffer() );"], [86, "      }"], [87, "      return task;"], [88, "    } );"], [121, "  public BasicJavacTask getJavacTask_PlainFileMgr()"], [122, "  {"], [123, "    return _altJavacTask_PlainFileMgr.get();"], [124, "  }"], [125, "  public BasicJavacTask getJavacTask_ManFileMgr()"], [127, "    return _altJavacTask_ManFileMgr.get();"], [184, "    BasicJavacTask javacTask = location != null && JavacPlugin.instance() != null ? JavacPlugin.instance().getJavacTask() : getJavacTask_PlainFileMgr();"], [197, "    return SrcClassUtil.instance().makeStub( _module, fqn, classSymbol, pair.getSecond(), getJavacTask_PlainFileMgr() );"], [218, "    // need javac with ManifoldJavaFileManager because the produced class must come from manifold"], [219, "    task[0] = getJavacTask_ManFileMgr();"], [220, ""], [221, "    Symbol.ClassSymbol e = IDynamicJdk.instance().getTypeElement( task[0].getContext(), null, fqn );"]], "deleted": [[8, "import com.sun.tools.javac.model.JavacElements;"], [15, "import java.util.Collections;"], [20, "import javax.tools.JavaFileObject;"], [45, "  private LocklessLazyVar<BasicJavacTask> _altJavacTask;"], [64, "    _altJavacTask = LocklessLazyVar.make( () -> {"], [108, "  public BasicJavacTask getJavacTask()"], [110, "    return _altJavacTask.get();"], [167, "    BasicJavacTask javacTask = location != null && JavacPlugin.instance() != null ? JavacPlugin.instance().getJavacTask() : getJavacTask();"], [180, "    return SrcClassUtil.instance().makeStub( _module, fqn, classSymbol, pair.getSecond(), getJavacTask() );"], [199, "    init();"], [200, ""], [201, "    Pair<JavaFileObject, String> fileObj = JavaParser.instance().findJavaSource( fqn, null );"], [202, "    if( fileObj == null )"], [203, "    {"], [204, "      return null;"], [205, "    }"], [206, ""], [208, "    if( _wfm == null )"], [209, "    {"], [210, "      _wfm = new ManifoldJavaFileManager( _fm, null, false );"], [211, "    }"], [212, "    task[0] = (BasicJavacTask)_javacTool.getTask( errors, _wfm, null, Arrays.asList( \"-proc:none\", \"-source\", \"1.8\", \"-Xprefer:source\" ), null, Collections.singleton( fileObj.getFirst() ) );"], [214, "    // note, ok to call getTypeElement() directly here and not via IDynamicJdk because always in context of 1.8 (no module)"], [215, "    JavacElements elementUtils = JavacElements.instance( task[0].getContext() );"], [216, "    Symbol.ClassSymbol e = elementUtils.getTypeElement( fqn );"]]}, "num_lines_added": 30, "num_lines_removed": 25}