{"hash": "5e418a623cd316174e91835a5ea7e0c4b2a763ca", "message": "#13 Fix infinite loop when read length less than 16", "file_num_lines": 213, "diff_parsed": {"added": [[105, "    if (len < 0) {"], [106, "      throw new IllegalArgumentException(\"Negative read length\");"], [107, "    }"], [108, ""], [109, "    if (len == 0) {"], [110, "      return 0;"], [111, "    }"], [112, ""], [113, "    if (localFileHeader.isDirectory()) {"], [118, "      int readLen = decompressedInputStream.read(b, off, len);"], [130, "        throw new ZipException(e.getMessage(), e.getCause(), ZipException.Type.WRONG_PASSWORD);"], [158, "    ZipEntryInputStream zipEntryInputStream = new ZipEntryInputStream(inputStream, getCompressedSize(localFileHeader));"], [179, "      return new InflaterInputStream(cipherInputStream);"], [182, "    return new StoreInputStream(cipherInputStream);"], [253, "    if (getCompressionMethod(localFileHeader).equals(CompressionMethod.STORE)) {"], [254, "      return localFileHeader.getUncompressedSize();"], [255, "    }"], [256, ""]], "deleted": [[105, "    if (isZipEntryDirectory(localFileHeader.getFileName())) {"], [110, "      int readLen = decompressedInputStream.read(b, off, (len - len %16));"], [122, "        throw new ZipException(e.getCause(), ZipException.Type.WRONG_PASSWORD);"], [150, "    ZipEntryInputStream zipEntryInputStream = new ZipEntryInputStream(inputStream);"], [171, "      return new InflaterInputStream(cipherInputStream, getCompressedSize(localFileHeader));"], [174, "    return new StoreInputStream(cipherInputStream, localFileHeader.getUncompressedSize());"]]}, "num_lines_added": 18, "num_lines_removed": 6}