{
    "hash": "a37335d59542396e8e9dfefd77e14d64cf66823f",
    "message": "+ Added aliases for most frequent primitives. Fixed objects content assigned from text parsing.",
    "file_num_lines": 390,
    "diff_parsed": {
        "added": [
            [
                277,
                "                        Top.currentPropertyText = xmlReader.ReadContentAsString();"
            ],
            [
                294,
                "        /// \u0410\u043b\u0438\u0430\u0441\u044b \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432-\u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u0432 XAML \u0434\u043b\u0438\u043d\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u043a\u0438 \u0432\u0438\u0434\u0430"
            ],
            [
                295,
                "        /// &lt;xaml:Primitive x:TypeArg1=\"{Type System.Double}\"&gt;&lt;/xaml:Primitive&gt;"
            ],
            [
                296,
                "        /// </summary>"
            ],
            [
                297,
                "        private static readonly Dictionary<String, Type> aliases = new Dictionary< string, Type >( )"
            ],
            [
                298,
                "            {"
            ],
            [
                299,
                "                { \"string\", typeof ( Primitive< string > ) },"
            ],
            [
                300,
                "                { \"int\", typeof ( Primitive< int > ) },"
            ],
            [
                301,
                "                { \"double\", typeof ( Primitive< double > ) },"
            ],
            [
                302,
                "                { \"float\", typeof ( Primitive< float > ) },"
            ],
            [
                303,
                "                { \"char\", typeof ( Primitive< char > ) },"
            ],
            [
                304,
                "                { \"bool\", typeof ( Primitive< bool > ) }"
            ],
            [
                305,
                "            };"
            ],
            [
                306,
                ""
            ],
            [
                307,
                "        /// <summary>"
            ],
            [
                308,
                "        /// todo : \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 \u0438 \u0442\u0438\u043f\u044b-\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b ?"
            ],
            [
                311,
                "            Type type = aliases.ContainsKey(name) ? aliases[ name ] : resolveType( name );"
            ],
            [
                312,
                ""
            ],
            [
                313,
                "            ConstructorInfo constructorInfo = type.GetConstructor(new Type[0]);"
            ],
            [
                314,
                "            if (null == constructorInfo) {"
            ],
            [
                315,
                "                throw new ApplicationException("
            ],
            [
                316,
                "                    String.Format(\"Type {0} has no default constructor.\", type.FullName));"
            ],
            [
                318,
                "            Object invoke = constructorInfo.Invoke(new object[0]);"
            ],
            [
                319,
                "            return new ObjectInfo() {"
            ],
            [
                320,
                "                name = name,"
            ],
            [
                321,
                "                obj = invoke,"
            ],
            [
                322,
                "                type = type"
            ],
            [
                323,
                "            };"
            ],
            [
                359,
                "        private String getContentPropertyName( Type type ) {"
            ],
            [
                360,
                "            // todo : determine name of content property"
            ],
            [
                361,
                "            return \"Content\";"
            ],
            [
                362,
                "        }"
            ],
            [
                363,
                ""
            ],
            [
                368,
                "            bool assignToParent;"
            ],
            [
                369,
                ""
            ],
            [
                372,
                "                PropertyInfo property = Top.currentProperty != null"
            ],
            [
                373,
                "                                            ? Top.type.GetProperty( Top.currentProperty )"
            ],
            [
                374,
                "                                            : Top.type.GetProperty(getContentPropertyName(Top.type));"
            ],
            [
                386,
                "                    assignToParent = false;"
            ],
            [
                388,
                "                    // \u0414\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0437\u0430\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u043c ( <MyObject>text</MyObject> )"
            ],
            [
                389,
                "                    // currentProperty \u0440\u0430\u0432\u043d\u043e null, \u0438 \u043f\u0440\u0438 \u0432\u0441\u0442\u0440\u0435\u0447\u0435 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0435\u0433\u043e \u0442\u0435\u0433\u0430 </MyObject>"
            ],
            [
                390,
                "                    // \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c Content-\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 text, \u043d\u043e \u0438"
            ],
            [
                391,
                "                    // \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0443 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u044d\u0442\u0430"
            ],
            [
                392,
                "                    // \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0443\u0434\u0435\u0442 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u0430 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044e"
            ],
            [
                393,
                "                    // <MyObject><MyObject.Content>text</MyObject.Content></MyObject>"
            ],
            [
                394,
                "                    assignToParent = true;"
            ],
            [
                395,
                "                }"
            ],
            [
                396,
                "                Top.currentPropertyText = null;"
            ],
            [
                397,
                "            } else {"
            ],
            [
                398,
                "                assignToParent = true;"
            ],
            [
                399,
                "            }"
            ],
            [
                400,
                ""
            ],
            [
                401,
                "            if ( !assignToParent ) return;"
            ],
            [
                402,
                ""
            ],
            [
                403,
                "            // closed element having sub-element content"
            ],
            [
                404,
                "            if ( Top.currentProperty != null ) {"
            ],
            [
                405,
                "                // \u0431\u044b\u043b \u0437\u0430\u043a\u0440\u044b\u0442 \u043e\u0434\u0438\u043d \u0438\u0437 \u0442\u0435\u0433\u043e\u0432-\u0441\u0432\u043e\u0439\u0441\u0442\u0432, \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442"
            ],
            [
                406,
                "                // \u0443\u0436\u0435 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0443, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e, \u043a\u0440\u043e\u043c\u0435"
            ],
            [
                407,
                "                // \u043e\u0431\u043d\u0443\u043b\u0435\u043d\u0438\u044f currentProperty"
            ],
            [
                408,
                "                Top.currentProperty = null;"
            ],
            [
                409,
                "            } else {"
            ],
            [
                410,
                "                // \u0431\u044b\u043b \u0437\u0430\u043a\u0440\u044b\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0442\u0435\u0433 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430"
            ],
            [
                411,
                "                // \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u0432\u044b\u0448\u0435 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u0441\u0435\u0431\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0443 \u044d\u0442\u043e\u0433\u043e"
            ],
            [
                412,
                "                // \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043b\u0438\u0431\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e-\u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f"
            ],
            [
                413,
                "                ObjectInfo initialized = objects.Pop( );"
            ],
            [
                414,
                ""
            ],
            [
                415,
                "                if ( initialized.obj is IPrimitive) {"
            ],
            [
                416,
                "                    initialized.obj = ( ( IPrimitive ) initialized.obj ).ContentNonGeneric;"
            ],
            [
                417,
                "                }"
            ],
            [
                419,
                "                if ( objects.Count == 0 ) {"
            ],
            [
                420,
                "                    result = initialized.obj;"
            ],
            [
                421,
                "                } else {"
            ],
            [
                422,
                "                    string propertyName = Top.currentProperty ?? getContentPropertyName(Top.type);"
            ],
            [
                423,
                ""
            ],
            [
                424,
                "                    // If parent object property is ICollection<T>,"
            ],
            [
                425,
                "                    // add current object into them as T (will conversion if need)"
            ],
            [
                426,
                "                    PropertyInfo property = Top.type.GetProperty( propertyName );"
            ],
            [
                427,
                "                    Type typeArg1 = property.PropertyType.IsGenericType"
            ],
            [
                428,
                "                                        ? property.PropertyType.GetGenericArguments( )[ 0 ]"
            ],
            [
                429,
                "                                        : null;"
            ],
            [
                430,
                "                    if ( null != typeArg1 &&"
            ],
            [
                431,
                "                            typeof ( ICollection< > ).MakeGenericType( typeArg1 ).IsAssignableFrom( property.PropertyType ) ) {"
            ],
            [
                432,
                "                        object collection = property.GetValue( Top.obj, null );"
            ],
            [
                433,
                "                        MethodInfo methodInfo = collection.GetType( ).GetMethod( \"Add\" );"
            ],
            [
                434,
                "                        object converted = convertValueIfNeed( initialized.obj.GetType( ), typeArg1, initialized.obj );"
            ],
            [
                435,
                "                        methodInfo.Invoke( collection, new[ ] { converted } );"
            ],
            [
                436,
                "                    } else {"
            ],
            [
                437,
                "                        // If parent object property is IDictionary<string, T>,"
            ],
            [
                438,
                "                        // add current object into them (by x:Key value)"
            ],
            [
                439,
                "                        // with conversion to T if need"
            ],
            [
                440,
                "                        Type typeArg2 = property.PropertyType.IsGenericType &&"
            ],
            [
                441,
                "                                        property.PropertyType.GetGenericArguments( ).Length > 1"
            ],
            [
                442,
                "                                            ? property.PropertyType.GetGenericArguments( )[ 1 ]"
            ],
            [
                444,
                "                        if ( null != typeArg1 && typeArg1 == typeof ( string )"
            ],
            [
                445,
                "                                && null != typeArg2 &&"
            ],
            [
                446,
                "                                typeof ( IDictionary< , > ).MakeGenericType( typeArg1, typeArg2 )"
            ],
            [
                447,
                "                                                        .IsAssignableFrom( property.PropertyType ) ) {"
            ],
            [
                448,
                "                            object dictionary = property.GetValue( Top.obj, null );"
            ],
            [
                449,
                "                            MethodInfo methodInfo = dictionary.GetType( ).GetMethod( \"Add\" );"
            ],
            [
                450,
                "                            object converted = convertValueIfNeed( initialized.obj.GetType( ),"
            ],
            [
                451,
                "                                                                    typeArg2, initialized.obj );"
            ],
            [
                452,
                "                            if ( null == initialized.key )"
            ],
            [
                453,
                "                                throw new InvalidOperationException("
            ],
            [
                454,
                "                                    \"Key is not specified for item of dictionary\" );"
            ],
            [
                455,
                "                            methodInfo.Invoke( dictionary, new[ ] { initialized.key, converted } );"
            ],
            [
                457,
                "                            // Handle as property - call setter with conversion if need"
            ],
            [
                458,
                "                            property.SetValue( Top.obj, convertValueIfNeed("
            ],
            [
                459,
                "                                initialized.obj.GetType( ), property.PropertyType, initialized.obj ),"
            ],
            [
                460,
                "                                                null );"
            ],
            [
                463,
                "                }"
            ],
            [
                465,
                "                // \u0415\u0441\u043b\u0438 \u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u0434\u0430\u043d x:Id, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0432 objectsById"
            ],
            [
                466,
                "                if ( initialized.id != null ) {"
            ],
            [
                467,
                "                    if (objectsById.ContainsKey( initialized.id ))"
            ],
            [
                468,
                "                        throw new InvalidOperationException(string.Format(\"Object with Id={0} redefinition.\", initialized.id));"
            ],
            [
                469,
                "                    objectsById.Add( initialized.id, initialized.obj );"
            ],
            [
                471,
                "                    processFixupTokens( );"
            ]
        ],
        "deleted": [
            [
                277,
                "                        string content = xmlReader.ReadContentAsString( );"
            ],
            [
                278,
                "                        if ( Top.name == \"item\" ) {"
            ],
            [
                279,
                "                            Top.obj = content;"
            ],
            [
                280,
                "                        } else {"
            ],
            [
                281,
                "                            Top.currentPropertyText = content;"
            ],
            [
                282,
                "                        }"
            ],
            [
                299,
                "        /// todo : \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 ?"
            ],
            [
                300,
                "        /// todo : \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 ?"
            ],
            [
                303,
                "            // object"
            ],
            [
                304,
                "            if ( name == \"item\" ) {"
            ],
            [
                305,
                "                // predefined string object"
            ],
            [
                306,
                "                return new ObjectInfo( )"
            ],
            [
                307,
                "                    {"
            ],
            [
                308,
                "                        name = \"item\","
            ],
            [
                309,
                "                        type = typeof ( string )"
            ],
            [
                310,
                "                    };"
            ],
            [
                311,
                "            } else {"
            ],
            [
                312,
                "                Type type = resolveType( name );"
            ],
            [
                313,
                "                ConstructorInfo constructorInfo = type.GetConstructor( new Type[ 0 ] );"
            ],
            [
                314,
                "                if ( null == constructorInfo ) {"
            ],
            [
                315,
                "                    throw new ApplicationException("
            ],
            [
                316,
                "                        String.Format( \"Type {0} has no default constructor.\", type.FullName ) );"
            ],
            [
                317,
                "                }"
            ],
            [
                318,
                "                Object invoke = constructorInfo.Invoke( new object[ 0 ] );"
            ],
            [
                319,
                "                return new ObjectInfo( )"
            ],
            [
                320,
                "                    {"
            ],
            [
                321,
                "                        name = name,"
            ],
            [
                322,
                "                        obj = invoke,"
            ],
            [
                323,
                "                        type = type"
            ],
            [
                324,
                "                    };"
            ],
            [
                367,
                "                PropertyInfo property = Top.type.GetProperty( Top.currentProperty );"
            ],
            [
                377,
                "                Top.currentProperty = null;"
            ],
            [
                378,
                "                Top.currentPropertyText = null;"
            ],
            [
                379,
                "            } else {"
            ],
            [
                380,
                "                // closed element having sub-element content"
            ],
            [
                382,
                "                    // \u0431\u044b\u043b \u0437\u0430\u043a\u0440\u044b\u0442 \u043e\u0434\u0438\u043d \u0438\u0437 \u0442\u0435\u0433\u043e\u0432-\u0441\u0432\u043e\u0439\u0441\u0442\u0432, \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442"
            ],
            [
                383,
                "                    // \u0443\u0436\u0435 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0443, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e, \u043a\u0440\u043e\u043c\u0435"
            ],
            [
                384,
                "                    // \u043e\u0431\u043d\u0443\u043b\u0435\u043d\u0438\u044f currentProperty"
            ],
            [
                387,
                "                    // \u0431\u044b\u043b \u0437\u0430\u043a\u0440\u044b\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0442\u0435\u0433 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430"
            ],
            [
                388,
                "                    // \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u0432\u044b\u0448\u0435 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u0441\u0435\u0431\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0443 \u044d\u0442\u043e\u0433\u043e"
            ],
            [
                389,
                "                    // \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043b\u0438\u0431\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e-\u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f"
            ],
            [
                390,
                "                    ObjectInfo initialized = objects.Pop( );"
            ],
            [
                391,
                "                    if ( objects.Count == 0 ) {"
            ],
            [
                392,
                "                        result = initialized.obj;"
            ],
            [
                393,
                "                    } else {"
            ],
            [
                394,
                "                        string propertyName;"
            ],
            [
                395,
                "                        if ( Top.currentProperty != null ) {"
            ],
            [
                396,
                "                            propertyName = Top.currentProperty;"
            ],
            [
                397,
                "                        } else {"
            ],
            [
                398,
                "                            // todo : determine name of content property"
            ],
            [
                399,
                "                            propertyName = \"Content\";"
            ],
            [
                400,
                "                        }"
            ],
            [
                402,
                "                        // If parent object property is ICollection<T>,"
            ],
            [
                403,
                "                        // add current object into them as T (will conversion if need)"
            ],
            [
                404,
                "                        PropertyInfo property = Top.type.GetProperty( propertyName );"
            ],
            [
                405,
                "                        Type typeArg1 = property.PropertyType.IsGenericType"
            ],
            [
                406,
                "                                            ? property.PropertyType.GetGenericArguments( )[ 0 ]"
            ],
            [
                408,
                "                        if ( null != typeArg1 &&"
            ],
            [
                409,
                "                             typeof ( ICollection< > ).MakeGenericType( typeArg1 ).IsAssignableFrom( property.PropertyType ) ) {"
            ],
            [
                410,
                "                            object collection = property.GetValue( Top.obj, null );"
            ],
            [
                411,
                "                            MethodInfo methodInfo = collection.GetType( ).GetMethod( \"Add\" );"
            ],
            [
                412,
                "                            object converted = convertValueIfNeed( initialized.obj.GetType( ), typeArg1, initialized.obj );"
            ],
            [
                413,
                "                            methodInfo.Invoke( collection, new[ ] { converted } );"
            ],
            [
                415,
                "                            // If parent object property is IDictionary<string, T>,"
            ],
            [
                416,
                "                            // add current object into them (by x:Key value)"
            ],
            [
                417,
                "                            // with conversion to T if need"
            ],
            [
                418,
                "                            Type typeArg2 = property.PropertyType.IsGenericType &&"
            ],
            [
                419,
                "                                            property.PropertyType.GetGenericArguments( ).Length > 1"
            ],
            [
                420,
                "                                                ? property.PropertyType.GetGenericArguments( )[ 1 ]"
            ],
            [
                421,
                "                                                : null;"
            ],
            [
                422,
                "                            if ( null != typeArg1 && typeArg1 == typeof ( string )"
            ],
            [
                423,
                "                                 && null != typeArg2 &&"
            ],
            [
                424,
                "                                 typeof ( IDictionary< , > ).MakeGenericType( typeArg1, typeArg2 )"
            ],
            [
                425,
                "                                                            .IsAssignableFrom( property.PropertyType ) ) {"
            ],
            [
                426,
                "                                object dictionary = property.GetValue( Top.obj, null );"
            ],
            [
                427,
                "                                MethodInfo methodInfo = dictionary.GetType( ).GetMethod( \"Add\" );"
            ],
            [
                428,
                "                                object converted = convertValueIfNeed( initialized.obj.GetType( ),"
            ],
            [
                429,
                "                                                                       typeArg2, initialized.obj );"
            ],
            [
                430,
                "                                if ( null == initialized.key )"
            ],
            [
                431,
                "                                    throw new InvalidOperationException("
            ],
            [
                432,
                "                                        \"Key is not specified for item of dictionary\" );"
            ],
            [
                433,
                "                                methodInfo.Invoke( dictionary, new[ ] { initialized.key, converted } );"
            ],
            [
                434,
                "                            } else {"
            ],
            [
                435,
                "                                // Handle as property - call setter with conversion if need"
            ],
            [
                436,
                "                                property.SetValue( Top.obj, convertValueIfNeed("
            ],
            [
                437,
                "                                    initialized.obj.GetType( ), property.PropertyType, initialized.obj ),"
            ],
            [
                438,
                "                                                   null );"
            ],
            [
                439,
                "                            }"
            ],
            [
                443,
                "                    // \u0415\u0441\u043b\u0438 \u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u0434\u0430\u043d x:Id, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0432 objectsById"
            ],
            [
                444,
                "                    if ( initialized.id != null ) {"
            ],
            [
                445,
                "                        if (objectsById.ContainsKey( initialized.id ))"
            ],
            [
                446,
                "                            throw new InvalidOperationException(string.Format(\"Object with Id={0} redefinition.\", initialized.id));"
            ],
            [
                447,
                "                        objectsById.Add( initialized.id, initialized.obj );"
            ],
            [
                449,
                "                        processFixupTokens( );"
            ],
            [
                450,
                "                    }"
            ]
        ]
    },
    "num_lines_added": 116,
    "num_lines_removed": 95
}