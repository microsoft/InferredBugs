{
    "hash": "d01e00beb88c28ab29079123d16772157fb32e8f",
    "message": "+ Added forward references support in XAML, added Ref and Convert markup extensions.",
    "file_num_lines": 384,
    "diff_parsed": {
        "added": [
            [
                44,
                "            /// \u041a\u043b\u044e\u0447, \u0437\u0430\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c x:Key (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c) - \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443 \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u0443\u0434\u0435\u0442"
            ],
            [
                45,
                "            /// \u043f\u043e\u043b\u043e\u0436\u0435\u043d \u0432 Dictionary-\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430."
            ],
            [
                48,
                "            /// <summary>"
            ],
            [
                49,
                "            /// \u041a\u043b\u044e\u0447, \u0437\u0430\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c x:Id (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c). \u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443 \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u0443\u0434\u0435\u0442"
            ],
            [
                50,
                "            /// \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0438\u0437 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0435\u0440\u0435\u0437 Ref)."
            ],
            [
                51,
                "            /// </summary>"
            ],
            [
                52,
                "            public string id;"
            ],
            [
                94,
                "                if ( name == \"Ref\" )"
            ],
            [
                95,
                "                    return typeof ( RefMarkupExtension );"
            ],
            [
                96,
                "                if ( name == \"Convert\" )"
            ],
            [
                97,
                "                    return typeof ( ConvertMarkupExtension );"
            ],
            [
                102,
                "        private class FixupToken : IFixupToken"
            ],
            [
                103,
                "        {"
            ],
            [
                104,
                "            /// <summary>"
            ],
            [
                105,
                "            /// \u0421\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0435\u0440\u043d\u0443\u043b\u043e \u044d\u0442\u043e\u0442 \u0442\u043e\u043a\u0435\u043d."
            ],
            [
                106,
                "            /// </summary>"
            ],
            [
                107,
                "            public string Expression;"
            ],
            [
                108,
                "            /// <summary>"
            ],
            [
                109,
                "            /// \u0418\u043c\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u044d\u0442\u0438\u043c \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438."
            ],
            [
                110,
                "            /// </summary>"
            ],
            [
                111,
                "            public string PropertyName;"
            ],
            [
                112,
                "            /// <summary>"
            ],
            [
                113,
                "            /// \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438."
            ],
            [
                114,
                "            /// </summary>"
            ],
            [
                115,
                "            public object Object;"
            ],
            [
                116,
                "            /// <summary>"
            ],
            [
                117,
                "            /// \u041f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u0432 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 dataContext."
            ],
            [
                118,
                "            /// </summary>"
            ],
            [
                119,
                "            public object DataContext;"
            ],
            [
                120,
                "            /// <summary>"
            ],
            [
                121,
                "            /// \u0421\u043f\u0438\u0441\u043e\u043a x:Id, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0431\u044b\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u044b \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0433\u0440\u0430\u0444\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432,"
            ],
            [
                122,
                "            /// \u043d\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f ProvideValue."
            ],
            [
                123,
                "            /// </summary>"
            ],
            [
                124,
                "            public IEnumerable<string> Ids;"
            ],
            [
                125,
                "        }"
            ],
            [
                126,
                ""
            ],
            [
                132,
                "            private XamlParser self;"
            ],
            [
                133,
                "            private string expression;"
            ],
            [
                134,
                ""
            ],
            [
                135,
                "            public object GetObjectById( string id ) {"
            ],
            [
                136,
                "                object value;"
            ],
            [
                137,
                "                return self.objectsById.TryGetValue( id, out value ) ? value : null;"
            ],
            [
                138,
                "            }"
            ],
            [
                140,
                "            /// <summary>"
            ],
            [
                141,
                "            /// fixupTokensAvailable = true \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0435\u0449\u0451 \u043d\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d, \u0438 \u0435\u0449\u0451 \u043c\u043e\u0436\u043d\u043e"
            ],
            [
                142,
                "            /// \u0441\u043e\u0437\u0434\u0430\u0442\u044c FixupToken, false \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0443\u0436\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0451\u043d, \u0438 \u043d\u043e\u0432\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"
            ],
            [
                143,
                "            /// \u0443\u0436\u0435 \u043d\u0435 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0441\u043b\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430"
            ],
            [
                144,
                "            /// \u043e\u0431\u044a\u0435\u043a\u0442, \u0442\u043e \u0435\u043c\u0443 \u0443\u0436\u0435 \u043d\u0435\u0447\u0435\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u043a\u0440\u043e\u043c\u0435 \u043a\u0430\u043a \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f."
            ],
            [
                145,
                "            /// </summary>"
            ],
            [
                146,
                "            public bool IsFixupTokenAvailable { get { return self.objects.Count != 0; } }"
            ],
            [
                147,
                ""
            ],
            [
                148,
                "            public IFixupToken GetFixupToken( IEnumerable< string > ids ) {"
            ],
            [
                149,
                "                if (!IsFixupTokenAvailable)"
            ],
            [
                150,
                "                    throw new InvalidOperationException(\"Fixup tokens are not available now.\");"
            ],
            [
                151,
                "                FixupToken fixupToken = new FixupToken(  );"
            ],
            [
                152,
                "                fixupToken.Expression = expression;"
            ],
            [
                153,
                "                fixupToken.PropertyName = PropertyName;"
            ],
            [
                154,
                "                fixupToken.Object = Object;"
            ],
            [
                155,
                "                fixupToken.DataContext = DataContext;"
            ],
            [
                156,
                "                fixupToken.Ids = ids;"
            ],
            [
                157,
                "                return fixupToken;"
            ],
            [
                158,
                "            }"
            ],
            [
                159,
                ""
            ],
            [
                160,
                "            public MarkupExtensionContext( XamlParser self,"
            ],
            [
                161,
                "                                           string expression,"
            ],
            [
                162,
                "                                           string propertyName,"
            ],
            [
                163,
                "                                           object obj,"
            ],
            [
                164,
                "                                           object dataContext ) {"
            ],
            [
                165,
                "                this.self = self;"
            ],
            [
                166,
                "                this.expression = expression;"
            ],
            [
                179,
                "        private Object processText( String text,"
            ],
            [
                193,
                "                MarkupExtensionContext context = new MarkupExtensionContext("
            ],
            [
                194,
                "                    this, text, currentProperty, currentObject, dataContext);"
            ],
            [
                195,
                "                object providedValue = markupExtensionsParser.ProcessMarkupExtension( context );"
            ],
            [
                196,
                "                if ( providedValue is IFixupToken ) {"
            ],
            [
                197,
                "                    fixupTokens.Add( ( FixupToken ) providedValue );"
            ],
            [
                198,
                "                    // Null means no value will be assigned to target property"
            ],
            [
                199,
                "                    return null;"
            ],
            [
                200,
                "                }"
            ],
            [
                201,
                "                return providedValue;"
            ],
            [
                207,
                ""
            ],
            [
                223,
                "        /// <summary>"
            ],
            [
                224,
                "        /// Map { x:Id -> object } of fully configured objects available to reference from"
            ],
            [
                225,
                "        /// markup extensions."
            ],
            [
                226,
                "        /// </summary>"
            ],
            [
                227,
                "        private readonly Dictionary<String, Object> objectsById = new Dictionary< string, object >();"
            ],
            [
                228,
                ""
            ],
            [
                229,
                "        /// <summary>"
            ],
            [
                230,
                "        /// List of fixup tokens used to defer objects by id resolving if markup extension"
            ],
            [
                231,
                "        /// has forward references to objects declared later."
            ],
            [
                232,
                "        /// </summary>"
            ],
            [
                233,
                "        private readonly List< FixupToken > fixupTokens = new List< FixupToken >();"
            ],
            [
                234,
                ""
            ],
            [
                291,
                "            // \u041f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0440\u0430\u0437 \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a"
            ],
            [
                292,
                "            // \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f\u043c \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438, \u043e\u0436\u0438\u0434\u0430\u044e\u0449\u0438\u043c \u0441\u0432\u043e\u0438 forward-references"
            ],
            [
                293,
                "            processFixupTokens();"
            ],
            [
                294,
                ""
            ],
            [
                339,
                "                    if ( namespaceUrl == \"http://consoleframework.org/xaml.xsd\" ) {"
            ],
            [
                340,
                "                        if ( attributeName == \"Key\" ) {"
            ],
            [
                341,
                "                            Top.key = attributeValue;"
            ],
            [
                342,
                "                        } else if ( attributeName == \"Id\" ) {"
            ],
            [
                343,
                "                            Top.id = attributeValue;"
            ],
            [
                344,
                "                        }"
            ],
            [
                361,
                "        /// <summary>"
            ],
            [
                362,
                "        /// Finishes configuring current object and assigns it to property of parent object."
            ],
            [
                363,
                "        /// </summary>"
            ],
            [
                442,
                ""
            ],
            [
                443,
                "                    // \u0415\u0441\u043b\u0438 \u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u0434\u0430\u043d x:Id, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0432 objectsById"
            ],
            [
                444,
                "                    if ( initialized.id != null ) {"
            ],
            [
                445,
                "                        if (objectsById.ContainsKey( initialized.id ))"
            ],
            [
                446,
                "                            throw new InvalidOperationException(string.Format(\"Object with Id={0} redefinition.\", initialized.id));"
            ],
            [
                447,
                "                        objectsById.Add( initialized.id, initialized.obj );"
            ],
            [
                448,
                ""
            ],
            [
                449,
                "                        processFixupTokens( );"
            ],
            [
                450,
                "                    }"
            ],
            [
                451,
                "                }"
            ],
            [
                452,
                "            }"
            ],
            [
                453,
                "        }"
            ],
            [
                454,
                ""
            ],
            [
                455,
                "        private void processFixupTokens( ) {"
            ],
            [
                456,
                "            // \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u043e\u0438\u0441\u043a fixup tokens, \u0436\u0435\u043b\u0430\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0435\u043d\u044b,"
            ],
            [
                457,
                "            // \u0438 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u0434\u043b\u044f \u043d\u0438\u0445 \u0441\u043d\u043e\u0432\u0430"
            ],
            [
                458,
                "            List< FixupToken > tokens = new List< FixupToken >( fixupTokens );"
            ],
            [
                459,
                "            fixupTokens.Clear(  );"
            ],
            [
                460,
                "            foreach ( FixupToken token in tokens ) {"
            ],
            [
                461,
                "                if ( token.Ids.All( id => objectsById.ContainsKey( id ) ) ) {"
            ],
            [
                462,
                "                    // todo : use real resolver"
            ],
            [
                463,
                "                    MarkupExtensionsParser markupExtensionsParser = new MarkupExtensionsParser("
            ],
            [
                464,
                "                        new TestResolver(), token.Expression);"
            ],
            [
                465,
                "                    MarkupExtensionContext context = new MarkupExtensionContext("
            ],
            [
                466,
                "                        this, token.Expression, token.PropertyName, token.Object, token.DataContext);"
            ],
            [
                467,
                "                    object providedValue = markupExtensionsParser.ProcessMarkupExtension(context);"
            ],
            [
                468,
                "                    if ( providedValue is IFixupToken ) {"
            ],
            [
                469,
                "                        fixupTokens.Add( ( FixupToken ) providedValue );"
            ],
            [
                470,
                "                    } else {"
            ],
            [
                471,
                "                        // assign providedValue to property of object"
            ],
            [
                472,
                "                        if (null != providedValue) {"
            ],
            [
                473,
                "                            PropertyInfo propertyInfo = token.Object.GetType(  ).GetProperty("
            ],
            [
                474,
                "                                token.PropertyName);"
            ],
            [
                475,
                "                            object convertedValue = convertValueIfNeed(providedValue.GetType(),"
            ],
            [
                476,
                "                                                                        propertyInfo.PropertyType,"
            ],
            [
                477,
                "                                                                        providedValue);"
            ],
            [
                478,
                "                            propertyInfo.SetValue(token.Object, convertedValue, null);"
            ],
            [
                479,
                "                        }"
            ],
            [
                480,
                "                    }"
            ],
            [
                481,
                "                } else {"
            ],
            [
                482,
                "                    fixupTokens.Add( token );"
            ]
        ],
        "deleted": [
            [
                44,
                "            /// \u041a\u043b\u044e\u0447, \u0437\u0430\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c x:Key (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c)."
            ],
            [
                98,
                "            public MarkupExtensionContext( string propertyName,"
            ],
            [
                99,
                "                object obj, object dataContext) {"
            ],
            [
                112,
                "        private static Object processText( String text,"
            ],
            [
                126,
                "                // todo : use real context"
            ],
            [
                127,
                "                MarkupExtensionContext context = new MarkupExtensionContext( currentProperty, currentObject, dataContext );"
            ],
            [
                128,
                "                return markupExtensionsParser.ProcessMarkupExtension(context);"
            ],
            [
                249,
                "                    if ( namespaceUrl == \"http://consoleframework.org/xaml.xsd\""
            ],
            [
                250,
                "                         && attributeName == \"Key\" ) {"
            ],
            [
                251,
                "                        Top.key = attributeValue;"
            ]
        ]
    },
    "num_lines_added": 147,
    "num_lines_removed": 10
}