{
    "hash": "bf489b2923b13389da86f39f3511b5fb85704df9",
    "message": "+ Added IDictionary support in XAML.",
    "file_num_lines": 270,
    "diff_parsed": {
        "added": [
            [
                34,
                "            /// <summary>"
            ],
            [
                35,
                "            /// \u041a\u043b\u044e\u0447, \u0437\u0430\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c x:Key (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c)."
            ],
            [
                36,
                "            /// </summary>"
            ],
            [
                37,
                "            public string key;"
            ],
            [
                127,
                "        /// <param name=\"dataContext\"></param>"
            ],
            [
                132,
                "            // { prefix -> namespace }"
            ],
            [
                133,
                "            Dictionary<String, String> namespaces = new Dictionary< string, string >();"
            ],
            [
                148,
                "                        // explicit property syntax"
            ],
            [
                149,
                "                        if ( top != null && name.StartsWith( top.name + \".\" ) ) {"
            ],
            [
                156,
                "                            if ( name == \"item\" ) {"
            ],
            [
                157,
                "                                // predefined string object"
            ],
            [
                158,
                "                                top = new ObjectInfo(  )"
            ],
            [
                159,
                "                                    {"
            ],
            [
                160,
                "                                        name = \"item\","
            ],
            [
                161,
                "                                        type = typeof(string)"
            ],
            [
                162,
                "                                    };"
            ],
            [
                163,
                "                                objects.Push( top );"
            ],
            [
                164,
                "                            } else {"
            ],
            [
                165,
                "                                Type type = resolveType( name );"
            ],
            [
                166,
                "                                ConstructorInfo constructorInfo = type.GetConstructor( new Type[ 0 ] );"
            ],
            [
                167,
                "                                if ( null == constructorInfo ) {"
            ],
            [
                168,
                "                                    throw new ApplicationException("
            ],
            [
                169,
                "                                        String.Format( \"Type {0} has no default constructor.\", type.FullName ) );"
            ],
            [
                170,
                "                                }"
            ],
            [
                171,
                "                                Object invoke = constructorInfo.Invoke( new object[ 0 ] );"
            ],
            [
                172,
                "                                top = new ObjectInfo( )"
            ],
            [
                173,
                "                                    {"
            ],
            [
                174,
                "                                        name = name,"
            ],
            [
                175,
                "                                        obj = invoke,"
            ],
            [
                176,
                "                                        type = type"
            ],
            [
                177,
                "                                    };"
            ],
            [
                178,
                "                                objects.Push( top );"
            ],
            [
                185,
                "                                    string attributePrefix = xmlReader.Prefix;"
            ],
            [
                186,
                "                                    string attributeName = xmlReader.LocalName;"
            ],
            [
                187,
                "                                    string attributeValue = xmlReader.Value;"
            ],
            [
                188,
                ""
            ],
            [
                189,
                "                                    // If we have found xmlns-attributes on root object, register them"
            ],
            [
                190,
                "                                    // in namespaces dictionary"
            ],
            [
                191,
                "                                    if ( attributePrefix == \"xmlns\" && objects.Count == 1 ) {"
            ],
            [
                192,
                "                                        namespaces.Add( attributeName, attributeValue );"
            ],
            [
                193,
                "                                    } else {"
            ],
            [
                194,
                "                                        if ( attributePrefix != string.Empty ) {"
            ],
            [
                195,
                "                                            if ( !namespaces.ContainsKey( attributePrefix ) )"
            ],
            [
                196,
                "                                                throw new InvalidOperationException("
            ],
            [
                197,
                "                                                    string.Format( \"Unknown prefix {0}\", attributePrefix ) );"
            ],
            [
                198,
                "                                            string namespaceUrl = namespaces[ attributePrefix ];"
            ],
            [
                199,
                "                                            if ( namespaceUrl == \"http://consoleframework.org/xaml.xsd\""
            ],
            [
                200,
                "                                                 && attributeName == \"Key\" ) {"
            ],
            [
                201,
                "                                                top.key = attributeValue;"
            ],
            [
                202,
                "                                            }"
            ],
            [
                203,
                "                                        } else {"
            ],
            [
                204,
                "                                            // Process attribute as property assignment"
            ],
            [
                205,
                "                                            PropertyInfo propertyInfo = top.type.GetProperty( attributeName );"
            ],
            [
                206,
                "                                            Object value = processText( attributeValue, attributeName, top.obj,"
            ],
            [
                207,
                "                                                                        dataContext );"
            ],
            [
                208,
                "                                            if ( null != value ) {"
            ],
            [
                209,
                "                                                object convertedValue = convertValueIfNeed( value.GetType( ),"
            ],
            [
                210,
                "                                                                                            propertyInfo.PropertyType,"
            ],
            [
                211,
                "                                                                                            value );"
            ],
            [
                212,
                "                                                propertyInfo.SetValue( top.obj, convertedValue, null );"
            ],
            [
                213,
                "                                            }"
            ],
            [
                214,
                "                                        }"
            ],
            [
                273,
                "                                    // If parent object property is ICollection<T>,"
            ],
            [
                274,
                "                                    // add current object into them as T (will conversion if need)"
            ],
            [
                276,
                "                                    Type typeArg1 = property.PropertyType.IsGenericType"
            ],
            [
                279,
                "                                    if (null != typeArg1 && typeof(ICollection<>).MakeGenericType(typeArg1).IsAssignableFrom(property.PropertyType))"
            ],
            [
                283,
                "                                        object converted = convertValueIfNeed( initialized.obj.GetType(  ), typeArg1, initialized.obj );"
            ],
            [
                286,
                "                                        // If parent object property is IDictionary<string, T>,"
            ],
            [
                287,
                "                                        // add current object into them (by x:Key value)"
            ],
            [
                288,
                "                                        // with conversion to T if need"
            ],
            [
                289,
                "                                        Type typeArg2 = property.PropertyType.IsGenericType && property.PropertyType.GetGenericArguments(  ).Length > 1"
            ],
            [
                290,
                "                                                            ? property.PropertyType.GetGenericArguments( )[ 1 ]"
            ],
            [
                291,
                "                                                            : null;"
            ],
            [
                292,
                "                                        if ( null != typeArg1 && typeArg1 == typeof ( string )"
            ],
            [
                293,
                "                                             && null != typeArg2 &&"
            ],
            [
                294,
                "                                             typeof ( IDictionary< , > ).MakeGenericType( typeArg1, typeArg2 )"
            ],
            [
                295,
                "                                                                        .IsAssignableFrom( property.PropertyType ) ) {"
            ],
            [
                296,
                "                                            object dictionary = property.GetValue( top.obj, null );"
            ],
            [
                297,
                "                                            MethodInfo methodInfo = dictionary.GetType( ).GetMethod( \"Add\" );"
            ],
            [
                298,
                "                                            object converted = convertValueIfNeed( initialized.obj.GetType( ),"
            ],
            [
                299,
                "                                                                                   typeArg2, initialized.obj );"
            ],
            [
                300,
                "                                            if ( null == initialized.key )"
            ],
            [
                301,
                "                                                throw new InvalidOperationException("
            ],
            [
                302,
                "                                                    \"Key is not specified for item of dictionary\" );"
            ],
            [
                303,
                "                                            methodInfo.Invoke( dictionary, new[ ] { initialized.key, converted } );"
            ],
            [
                304,
                "                                        } else {"
            ],
            [
                305,
                "                                            // Handle as property - call setter with conversion if need"
            ],
            [
                306,
                "                                            property.SetValue( top.obj, convertValueIfNeed("
            ],
            [
                307,
                "                                                initialized.obj.GetType( ), property.PropertyType, initialized.obj ),"
            ],
            [
                308,
                "                                                               null );"
            ],
            [
                309,
                "                                        }"
            ]
        ],
        "deleted": [
            [
                141,
                "                        // \u043e\u0434\u043d\u043e \u0438\u0437 \u043f\u0440\u0435\u0434\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439"
            ],
            [
                142,
                "                        if ( name == \"item\" ) {"
            ],
            [
                143,
                "                            // predefined string object"
            ],
            [
                144,
                "                            top = new ObjectInfo(  )"
            ],
            [
                145,
                "                                {"
            ],
            [
                146,
                "                                    name = \"item\","
            ],
            [
                147,
                "                                    type = typeof(string)"
            ],
            [
                148,
                "                                };"
            ],
            [
                149,
                "                            objects.Push( top );"
            ],
            [
                150,
                "                        } else if ( top != null && name.StartsWith( top.name + \".\" ) ) {"
            ],
            [
                151,
                "                            // property"
            ],
            [
                158,
                "                            Type type = resolveType( name );"
            ],
            [
                159,
                "                            ConstructorInfo constructorInfo = type.GetConstructor( new Type[ 0 ] );"
            ],
            [
                160,
                "                            if ( null == constructorInfo ) {"
            ],
            [
                161,
                "                                throw new ApplicationException("
            ],
            [
                162,
                "                                    String.Format( \"Type {0} has no default constructor.\", type.FullName ) );"
            ],
            [
                164,
                "                            Object invoke = constructorInfo.Invoke( new object[ 0 ] );"
            ],
            [
                165,
                "                            top = new ObjectInfo( )"
            ],
            [
                166,
                "                                {"
            ],
            [
                167,
                "                                    name = name,"
            ],
            [
                168,
                "                                    obj = invoke,"
            ],
            [
                169,
                "                                    type = type"
            ],
            [
                170,
                "                                };"
            ],
            [
                171,
                "                            objects.Push( top );"
            ],
            [
                177,
                "                                    PropertyInfo propertyInfo = top.type.GetProperty( xmlReader.Name );"
            ],
            [
                178,
                "                                    Object value = processText(xmlReader.Value,"
            ],
            [
                179,
                "                                        xmlReader.Name,"
            ],
            [
                180,
                "                                        top.obj,"
            ],
            [
                181,
                "                                        dataContext);"
            ],
            [
                182,
                "                                    if ( null != value ) {"
            ],
            [
                183,
                "                                        object convertedValue = convertValueIfNeed( value.GetType( ),"
            ],
            [
                184,
                "                                                                                    propertyInfo.PropertyType, value );"
            ],
            [
                185,
                "                                        propertyInfo.SetValue( top.obj, convertedValue, null );"
            ],
            [
                244,
                "                                    // use type conversion and handle collection if need"
            ],
            [
                246,
                "                                    Type typeArg = property.PropertyType.IsGenericType"
            ],
            [
                249,
                "                                    if (null != typeArg && typeof(ICollection<>).MakeGenericType(typeArg).IsAssignableFrom(property.PropertyType))"
            ],
            [
                253,
                "                                        object converted = convertValueIfNeed( initialized.obj.GetType(  ), typeArg, initialized.obj );"
            ],
            [
                256,
                "                                        property.SetValue(top.obj, convertValueIfNeed("
            ],
            [
                257,
                "                                            initialized.obj.GetType(), property.PropertyType, initialized.obj), null);"
            ]
        ]
    },
    "num_lines_added": 91,
    "num_lines_removed": 39
}