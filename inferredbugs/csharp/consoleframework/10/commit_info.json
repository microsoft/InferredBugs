{
    "hash": "8375d5ddff40598806f0c332c2b197c23af46f2c",
    "message": "* Applied markup extensions to XAML parser (with test resolver).",
    "file_num_lines": 196,
    "diff_parsed": {
        "added": [
            [
                36,
                "        public class TestExtension : IMarkupExtension"
            ],
            [
                37,
                "        {"
            ],
            [
                38,
                "            public TestExtension( ) {"
            ],
            [
                39,
                "                Property1 = String.Empty;"
            ],
            [
                40,
                "                Property2 = String.Empty;"
            ],
            [
                41,
                "                Property3 = String.Empty;"
            ],
            [
                42,
                "            }"
            ],
            [
                43,
                ""
            ],
            [
                44,
                "            public TestExtension( String param1 ) {"
            ],
            [
                45,
                "                Property1 = param1;"
            ],
            [
                46,
                "                Property2 = String.Empty;"
            ],
            [
                47,
                "                Property3 = String.Empty;"
            ],
            [
                48,
                "            }"
            ],
            [
                49,
                ""
            ],
            [
                50,
                "            public TestExtension( String param1, String param2 ) {"
            ],
            [
                51,
                "                Property1 = param1;"
            ],
            [
                52,
                "                Property2 = param2;"
            ],
            [
                53,
                "                Property3 = String.Empty;"
            ],
            [
                54,
                "            }"
            ],
            [
                55,
                ""
            ],
            [
                56,
                "            public String Property1 { get; set; }"
            ],
            [
                57,
                ""
            ],
            [
                58,
                "            public String Property2 { get; set; }"
            ],
            [
                59,
                ""
            ],
            [
                60,
                "            public String Property3 { get; set; }"
            ],
            [
                61,
                ""
            ],
            [
                62,
                "            public object ProvideValue( object context ) {"
            ],
            [
                63,
                "                return Property1 + \"_\" + Property2 + \"_\" + Property3;"
            ],
            [
                64,
                "            }"
            ],
            [
                65,
                "        }"
            ],
            [
                66,
                ""
            ],
            [
                67,
                "        public class TestResolver : IMarkupExtensionsResolver"
            ],
            [
                68,
                "        {"
            ],
            [
                69,
                "            public Type Resolve( string name ) {"
            ],
            [
                70,
                "                return typeof(TestExtension);"
            ],
            [
                71,
                "            }"
            ],
            [
                72,
                "        }"
            ],
            [
                73,
                ""
            ],
            [
                74,
                "        /// <summary>"
            ],
            [
                75,
                "        /// \u0415\u0441\u043b\u0438 str \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u043e\u0434\u0438\u043d\u0430\u0440\u043d\u043e\u0439 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u0444\u0438\u0433\u0443\u0440\u043d\u043e\u0439 \u0441\u043a\u043e\u0431\u043a\u0438, \u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0435\u0433\u043e"
            ],
            [
                76,
                "        /// \u043a\u0430\u043a \u0432\u044b\u0437\u043e\u0432 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0438\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435,"
            ],
            [
                77,
                "        /// \u0435\u0441\u043b\u0438 \u043f\u0440\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435 \u0438\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0438. \u0415\u0441\u043b\u0438 \u0436\u0435 str \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f c \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438"
            ],
            [
                78,
                "        /// {}, \u0442\u043e \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0439."
            ],
            [
                79,
                "        /// </summary>"
            ],
            [
                80,
                "        private static Object processText( String text ) {"
            ],
            [
                81,
                "            if ( String.IsNullOrEmpty( text ) ) return String.Empty;"
            ],
            [
                82,
                ""
            ],
            [
                83,
                "            if ( text[ 0 ] != '{' ) {"
            ],
            [
                84,
                "                // interpret whole text as string"
            ],
            [
                85,
                "                return text;"
            ],
            [
                86,
                "            } else if (text.Length > 1 && text[1] == '}') {"
            ],
            [
                87,
                "                // interpret the rest as string"
            ],
            [
                88,
                "                return text.Length > 2 ? text.Substring(2) : String.Empty;"
            ],
            [
                89,
                "            } else {"
            ],
            [
                90,
                "                // todo : use real resolver"
            ],
            [
                91,
                "                MarkupExtensionsParser markupExtensionsParser = new MarkupExtensionsParser("
            ],
            [
                92,
                "                    new TestResolver( ), text );"
            ],
            [
                93,
                "                // todo : use real context"
            ],
            [
                94,
                "                return markupExtensionsParser.ProcessMarkupExtension( null );"
            ],
            [
                95,
                "            }"
            ],
            [
                96,
                "        }"
            ],
            [
                97,
                ""
            ],
            [
                157,
                "                                    Object value = processText(xmlReader.Value);"
            ],
            [
                158,
                "                                    object convertedValue = convertValueIfNeed( value.GetType(  ),"
            ],
            [
                159,
                "                                        propertyInfo.PropertyType, value );"
            ],
            [
                160,
                "                                    propertyInfo.SetValue( top.obj, convertedValue, null );"
            ],
            [
                181,
                "                            PropertyInfo property = top.type.GetProperty(top.currentProperty);"
            ],
            [
                182,
                "                            Object value = processText( top.currentPropertyText );"
            ],
            [
                183,
                "                            Object convertedValue = convertValueIfNeed( value.GetType(  ),"
            ],
            [
                184,
                "                                                                        property.PropertyType, value );"
            ],
            [
                185,
                "                            property.SetValue( top.obj, convertedValue, null );"
            ]
        ],
        "deleted": [
            [
                95,
                "                                    object value = convertValueIfNeed( typeof ( String ),"
            ],
            [
                96,
                "                                        propertyInfo.PropertyType, xmlReader.Value );"
            ],
            [
                97,
                "                                    propertyInfo.SetValue( top.obj, value, null );"
            ],
            [
                118,
                "                            string content = top.currentPropertyText;"
            ],
            [
                119,
                "                            PropertyInfo property = top.type.GetProperty( top.currentProperty );"
            ],
            [
                120,
                "                            property.SetValue( top.obj, convertValueIfNeed( typeof ( string ),"
            ],
            [
                121,
                "                                property.PropertyType, content ), null );"
            ]
        ]
    },
    "num_lines_added": 71,
    "num_lines_removed": 7
}