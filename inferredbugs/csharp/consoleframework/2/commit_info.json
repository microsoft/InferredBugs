{
    "hash": "6c4ecbcd584e1abce8da7ca71264e1a8128b7791",
    "message": "+ Content properties support, enums autoconversion.",
    "file_num_lines": 158,
    "diff_parsed": {
        "added": [
            [
                14,
                "            /// <summary>"
            ],
            [
                15,
                "            /// \u0422\u0438\u043f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430."
            ],
            [
                16,
                "            /// </summary>"
            ],
            [
                18,
                "            /// <summary>"
            ],
            [
                19,
                "            /// \u041e\u0431\u044a\u0435\u043a\u0442 (\u0438\u043b\u0438 null \u0435\u0441\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f String)."
            ],
            [
                20,
                "            /// </summary>"
            ],
            [
                22,
                "            /// <summary>"
            ],
            [
                23,
                "            /// \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u0433\u0430."
            ],
            [
                24,
                "            /// </summary>"
            ],
            [
                27,
                "            /// \u0422\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u0442\u0435\u0433\u043e\u043c \u0441 \u0442\u043e\u0447\u043a\u043e\u0439 \u0432 \u0438\u043c\u0435\u043d\u0438."
            ],
            [
                30,
                "            /// <summary>"
            ],
            [
                31,
                "            /// \u0417\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u0440\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435 \u0442\u0435\u0433\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 - \u0442\u0435\u043a\u0441\u0442."
            ],
            [
                32,
                "            /// </summary>"
            ],
            [
                33,
                "            public string currentPropertyText;"
            ],
            [
                48,
                "                // stack of constructing objects"
            ],
            [
                93,
                "                                    //"
            ],
            [
                94,
                "                                    PropertyInfo propertyInfo = top.type.GetProperty( xmlReader.Name );"
            ],
            [
                95,
                "                                    object value = convertValueIfNeed( typeof ( String ),"
            ],
            [
                96,
                "                                        propertyInfo.PropertyType, xmlReader.Value );"
            ],
            [
                97,
                "                                    propertyInfo.SetValue( top.obj, value, null );"
            ],
            [
                98,
                "                                    //"
            ],
            [
                111,
                "                            top.currentPropertyText = content;"
            ],
            [
                117,
                "                        if (top.currentPropertyText != null) {"
            ],
            [
                118,
                "                            string content = top.currentPropertyText;"
            ],
            [
                125,
                "                                property.SetValue( top.obj, convertValueIfNeed( typeof ( string ),"
            ],
            [
                126,
                "                                                                            property.PropertyType, content ), null );"
            ],
            [
                129,
                "                            top.currentPropertyText = null;"
            ],
            [
                147,
                "                                    string propertyName;"
            ],
            [
                148,
                "                                    if ( top.currentProperty != null ) {"
            ],
            [
                149,
                "                                        propertyName = top.currentProperty;"
            ],
            [
                150,
                "                                    } else {"
            ],
            [
                151,
                "                                        // todo : determine name of content property"
            ],
            [
                152,
                "                                        propertyName = \"Content\";"
            ],
            [
                153,
                "                                    }"
            ],
            [
                154,
                ""
            ],
            [
                156,
                "                                    PropertyInfo property = top.type.GetProperty(propertyName);"
            ],
            [
                164,
                "                                        object converted = convertValueIfNeed( initialized.obj.GetType(  ), typeArg, initialized.obj );"
            ],
            [
                165,
                "                                        methodInfo.Invoke( collection, new[ ] { converted } );"
            ],
            [
                167,
                "                                        property.SetValue(top.obj, convertValueIfNeed("
            ],
            [
                168,
                "                                            initialized.obj.GetType(), property.PropertyType, initialized.obj), null);"
            ],
            [
                179,
                ""
            ],
            [
                180,
                "        /// <summary>"
            ],
            [
                181,
                "        /// Converts the value from source type to destination if need"
            ],
            [
                182,
                "        /// using default conversion strategies and registered type converters."
            ],
            [
                183,
                "        /// </summary>"
            ],
            [
                184,
                "        /// <param name=\"source\">Type of source value</param>"
            ],
            [
                185,
                "        /// <param name=\"dest\">Type of destination</param>"
            ],
            [
                186,
                "        /// <param name=\"value\">Source value</param>"
            ],
            [
                187,
                "        private static object convertValueIfNeed( Type source, Type dest, object value ) {"
            ],
            [
                188,
                "            if ( dest.IsAssignableFrom( source ) ) {"
            ],
            [
                189,
                "                return value;"
            ],
            [
                190,
                "            }"
            ],
            [
                191,
                ""
            ],
            [
                192,
                "            // process enumerations"
            ],
            [
                193,
                "            if ( source == typeof ( String ) && dest.IsEnum ) {"
            ],
            [
                194,
                "                string[ ] enumNames = dest.GetEnumNames( );"
            ],
            [
                195,
                "                for ( int i = 0, len = enumNames.Length; i < len; i++ ) {"
            ],
            [
                196,
                "                    if ( enumNames[i] == (String) value ) {"
            ],
            [
                197,
                "                        return Enum.ToObject( dest, dest.GetEnumValues( ).GetValue( i ) );"
            ],
            [
                198,
                "                    }"
            ],
            [
                199,
                "                }"
            ],
            [
                200,
                "                throw new ApplicationException(\"Specified enum value not found.\");"
            ],
            [
                201,
                "            }"
            ],
            [
                211,
                "            // todo : scan default namespaces and connected namespaces"
            ]
        ],
        "deleted": [
            [
                2,
                "using System.Collections;"
            ],
            [
                5,
                "using System.Linq;"
            ],
            [
                7,
                "using System.Text;"
            ],
            [
                21,
                "            /// \u0422\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u0447\u043a\u0443."
            ],
            [
                24,
                ""
            ],
            [
                25,
                "            public string currentPropertyContent;"
            ],
            [
                84,
                "                                    // todo :"
            ],
            [
                85,
                "                                    Console.WriteLine(xmlReader.Name, xmlReader.Value);"
            ],
            [
                98,
                "                            top.currentPropertyContent = content;"
            ],
            [
                104,
                "                        if (top.currentPropertyContent != null) {"
            ],
            [
                105,
                "                            string content = top.currentPropertyContent;"
            ],
            [
                112,
                "                                if ( property.PropertyType == typeof ( string ) ) {"
            ],
            [
                113,
                "                                    property.SetValue( top.obj, content, null );"
            ],
            [
                114,
                "                                } else {"
            ],
            [
                115,
                "                                    property.SetValue( top.obj, convertValue( typeof ( string ),"
            ],
            [
                116,
                "                                                                              property.PropertyType, content ), null );"
            ],
            [
                117,
                "                                }"
            ],
            [
                120,
                "                            top.currentPropertyContent = null;"
            ],
            [
                139,
                "                                    PropertyInfo property = top.type.GetProperty( top.currentProperty );"
            ],
            [
                147,
                "                                        if ( initialized.obj.GetType( ) == typeArg ) {"
            ],
            [
                148,
                "                                            methodInfo.Invoke( collection, new object[ ] { initialized.obj } );"
            ],
            [
                149,
                "                                        } else {"
            ],
            [
                150,
                "                                            object converted = convertValue( initialized.obj.GetType(  ), typeArg, initialized.obj );"
            ],
            [
                151,
                "                                            methodInfo.Invoke( collection, new object[ ] { converted } );"
            ],
            [
                152,
                "                                        }"
            ],
            [
                154,
                "                                        if ( property.PropertyType.IsInstanceOfType(initialized.obj) ) {"
            ],
            [
                155,
                "                                            property.SetValue( top.obj, initialized.obj, null );"
            ],
            [
                156,
                "                                        } else {"
            ],
            [
                157,
                "                                            object converted = convertValue(initialized.obj.GetType(  ), property.PropertyType, initialized.obj);"
            ],
            [
                158,
                "                                            property.SetValue( top.obj, converted, null );"
            ],
            [
                159,
                "                                        }"
            ],
            [
                171,
                "        private static object convertValue( Type source, Type dest, object value ) {"
            ]
        ]
    },
    "num_lines_added": 64,
    "num_lines_removed": 32
}