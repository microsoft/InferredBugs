{
    "hash": "d38e9d0ffae4978657aaf30c886beb3d609543e9",
    "message": "Added support for HTTP request tracking (#44)",
    "file_num_lines": 151,
    "diff_parsed": {
        "added": [
            [
                57,
                ""
            ],
            [
                58,
                "            // starts event collection via TraceEvent"
            ],
            [
                85,
                "                            SendHTTP(list);"
            ],
            [
                105,
                "                // subscribe to all exception start events"
            ],
            [
                116,
                "                        //Console.WriteLine(\"Exception found: {0} at {1}\", e.type, e.timestamp);"
            ],
            [
                119,
                ""
            ],
            [
                122,
                "                    if (data.ProcessID == myProcess.Id && data.EventName == \"Request/Start\")"
            ],
            [
                123,
                "                    {"
            ],
            [
                124,
                "                        Console.WriteLine(\"EVENT FOUND: {0} at {1}\", data.EventName, data.TimeStamp);"
            ],
            [
                125,
                "                    }"
            ],
            [
                126,
                "                    else if (data.ProcessID == myProcess.Id && data.EventName == \"Request/Stop\")"
            ],
            [
                128,
                "                        // make HTTP request class - one property will be type (start/stop) and other will be timestamp"
            ],
            [
                131,
                ""
            ],
            [
                135,
                "                session.EnableProvider(ClrTraceEventParser.ProviderGuid, TraceEventLevel.Verbose, 0x8000);"
            ],
            [
                146,
                "                Console.WriteLine(output);"
            ],
            [
                152,
                "                try"
            ],
            [
                153,
                "                {"
            ],
            [
                154,
                "                    HttpResponseMessage response = client.SendAsync(request).Result;"
            ],
            [
                155,
                "                }"
            ],
            [
                156,
                "                catch {}"
            ],
            [
                179,
                "            //Console.WriteLine(\"CPU: {0}; time: {1}\", cpu.usage, cpu.timestamp);"
            ],
            [
                189,
                "            //Console.WriteLine(\"Mem: {0}; time: {1}\", mem.usage, mem.timestamp);"
            ]
        ],
        "deleted": [
            [
                59,
                "                // starts event collection via TraceEvent"
            ],
            [
                84,
                "                            //SendHTTP(list);"
            ],
            [
                104,
                "                // subscribe to all GC allocation events"
            ],
            [
                115,
                "                        Console.WriteLine(\"Exception found: {0} at {1}\", e.type, e.timestamp);"
            ],
            [
                118,
                "                /*"
            ],
            [
                121,
                "                    if (data.ProcessID == myProcess.Id)"
            ],
            [
                123,
                "                        Console.WriteLine(\"EVENT FOUND: {0}\", data.EventName);"
            ],
            [
                126,
                "                */"
            ],
            [
                130,
                "                session.EnableProvider(ClrTraceEventParser.ProviderGuid);"
            ],
            [
                146,
                "                HttpResponseMessage response = client.SendAsync(request).Result;"
            ],
            [
                169,
                "            Console.WriteLine(\"CPU: {0}; time: {1}\", cpu.usage, cpu.timestamp);"
            ],
            [
                179,
                "            Console.WriteLine(\"Mem: {0}; time: {1}\", mem.usage, mem.timestamp);"
            ]
        ]
    },
    "num_lines_added": 22,
    "num_lines_removed": 12
}