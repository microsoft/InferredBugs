{
    "hash": "3e1e4e70f6784944a13847e7d430c674bbf68d8f",
    "message": "Finished up fixing all the problems with XdrDataInputStream and XdrDataOutputStream. All unit tests pass!",
    "file_num_lines": 158,
    "diff_parsed": {
        "added": [
            [
                1,
                "\ufeffusing System;"
            ],
            [
                5,
                "using stellar_dotnetcore_sdk.xdr;"
            ],
            [
                13,
                "        private Transaction(KeyPair sourceAccount, long sequenceNumber, Operation[] operations, Memo memo, TimeBounds timeBounds)"
            ],
            [
                15,
                "            SourceAccount = sourceAccount ?? throw new ArgumentNullException(nameof(sourceAccount), \"sourceAccount cannot be null\");"
            ],
            [
                16,
                "            SequenceNumber = sequenceNumber;"
            ],
            [
                17,
                "            Operations = operations ?? throw new ArgumentNullException(nameof(operations), \"operations cannot be null\");"
            ],
            [
                21,
                "            Fee = operations.Length * BASE_FEE;"
            ],
            [
                22,
                "            Signatures = new List<DecoratedSignature>();"
            ],
            [
                23,
                "            Memo = memo != null ? memo : Memo.None();"
            ],
            [
                24,
                "            TimeBounds = timeBounds;"
            ],
            [
                27,
                "        public int Fee { get; }"
            ],
            [
                28,
                ""
            ],
            [
                29,
                "        public KeyPair SourceAccount { get; }"
            ],
            [
                30,
                ""
            ],
            [
                31,
                "        public long SequenceNumber { get; }"
            ],
            [
                32,
                ""
            ],
            [
                33,
                "        public Operation[] Operations { get; }"
            ],
            [
                34,
                ""
            ],
            [
                35,
                "        public Memo Memo { get; }"
            ],
            [
                36,
                ""
            ],
            [
                37,
                "        public TimeBounds TimeBounds { get; }"
            ],
            [
                38,
                ""
            ],
            [
                39,
                "        public List<DecoratedSignature> Signatures { get; }"
            ],
            [
                40,
                ""
            ],
            [
                50,
                "            var txHash = Hash();"
            ],
            [
                51,
                "            Signatures.Add(signer.SignDecorated(txHash));"
            ],
            [
                60,
                "            var signature = new Signature();"
            ],
            [
                63,
                "            var hash = Util.Hash(preimage);"
            ],
            [
                68,
                "            var signatureHint = new SignatureHint();"
            ],
            [
                71,
                "            var decoratedSignature = new DecoratedSignature();"
            ],
            [
                75,
                "            Signatures.Add(decoratedSignature);"
            ],
            [
                94,
                "            var writer = new XdrDataOutputStream();"
            ],
            [
                100,
                "            EnvelopeType.Encode(writer, EnvelopeType.Create(EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_TX));"
            ],
            [
                103,
                "            var txWriter = new XdrDataOutputStream();"
            ],
            [
                106,
                "            writer.Write(txWriter.ToArray());"
            ],
            [
                108,
                "            return writer.ToArray();"
            ],
            [
                117,
                "            var fee = new Uint32();"
            ],
            [
                118,
                "            fee.InnerValue = Fee;"
            ],
            [
                121,
                "            var sequenceNumberUint = new Uint64();"
            ],
            [
                122,
                "            sequenceNumberUint.InnerValue = SequenceNumber;"
            ],
            [
                123,
                "            var sequenceNumber = new SequenceNumber();"
            ],
            [
                127,
                "            var sourceAccount = new AccountID();"
            ],
            [
                128,
                "            sourceAccount.InnerValue = SourceAccount.XdrPublicKey;"
            ],
            [
                131,
                "            var operations = new xdr.Operation[Operations.Length];"
            ],
            [
                133,
                "            for (var i = 0; i < Operations.Length; i++)"
            ],
            [
                134,
                "                operations[i] = Operations[i].ToXdr();"
            ],
            [
                137,
                "            var ext = new xdr.Transaction.TransactionExt();"
            ],
            [
                140,
                "            var transaction = new xdr.Transaction();"
            ],
            [
                145,
                "            transaction.Memo = Memo.ToXdr();"
            ],
            [
                146,
                "            transaction.TimeBounds = TimeBounds == null ? null : TimeBounds.ToXdr();"
            ],
            [
                154,
                "        public TransactionEnvelope ToEnvelopeXdr()"
            ],
            [
                156,
                "            if (Signatures.Count == 0)"
            ],
            [
                159,
                "            var thisXdr = new TransactionEnvelope();"
            ],
            [
                160,
                "            var transaction = ToXdr();"
            ],
            [
                163,
                "            var signatures = new DecoratedSignature[Signatures.Count];"
            ],
            [
                164,
                "            signatures = Signatures.ToArray();"
            ],
            [
                172,
                "        public string ToEnvelopeXdrBase64()"
            ],
            [
                174,
                "            var envelope = ToEnvelopeXdr();"
            ],
            [
                175,
                "            var writer = new XdrDataOutputStream();"
            ],
            [
                178,
                "            return Convert.ToBase64String(writer.ToArray());"
            ],
            [
                188,
                "            private readonly BlockingCollection<Operation> mOperations;"
            ],
            [
                263,
                "                var operations = mOperations.ToArray();"
            ],
            [
                265,
                "                var transaction = new Transaction(mSourceAccount.KeyPair, mSourceAccount.GetIncrementedSequenceNumber(), operations, mMemo, mTimeBounds);"
            ],
            [
                272,
                "}"
            ]
        ],
        "deleted": [
            [
                1,
                "\ufeffusing stellar_dotnetcore_sdk.xdr;"
            ],
            [
                2,
                "using System;"
            ],
            [
                5,
                "using System.IO;"
            ],
            [
                7,
                "using System.Text;"
            ],
            [
                15,
                "        private readonly int _Fee;"
            ],
            [
                16,
                "        private readonly KeyPair _SourceAccount;"
            ],
            [
                17,
                "        private readonly long _SequenceNumber;"
            ],
            [
                18,
                "        private readonly Operation[] _Operations;"
            ],
            [
                19,
                "        private readonly Memo _Memo;"
            ],
            [
                20,
                "        private readonly TimeBounds _TimeBounds;"
            ],
            [
                21,
                "        private List<DecoratedSignature> _Signatures;"
            ],
            [
                22,
                ""
            ],
            [
                23,
                "        public int Fee { get { return _Fee; } }"
            ],
            [
                24,
                "        public KeyPair SourceAccount { get { return _SourceAccount; } }"
            ],
            [
                25,
                "        public long SequenceNumber { get { return _SequenceNumber; } }"
            ],
            [
                26,
                "        public Operation[] Operations { get { return _Operations; } }"
            ],
            [
                27,
                "        public Memo Memo { get { return _Memo; } }"
            ],
            [
                28,
                "        public TimeBounds TimeBounds { get { return _TimeBounds; } }"
            ],
            [
                29,
                "        public List<DecoratedSignature> Signatures { get { return _Signatures; } }"
            ],
            [
                30,
                ""
            ],
            [
                31,
                "        Transaction(KeyPair sourceAccount, long sequenceNumber, Operation[] operations, Memo memo, TimeBounds timeBounds)"
            ],
            [
                33,
                "            _SourceAccount = sourceAccount ?? throw new ArgumentNullException(nameof(sourceAccount), \"sourceAccount cannot be null\");"
            ],
            [
                34,
                "            _SequenceNumber = sequenceNumber;"
            ],
            [
                35,
                "            _Operations = operations ?? throw new ArgumentNullException(nameof(operations), \"operations cannot be null\");"
            ],
            [
                39,
                "            _Fee = operations.Length * BASE_FEE;"
            ],
            [
                40,
                "            _Signatures = new List<xdr.DecoratedSignature>();"
            ],
            [
                41,
                "            _Memo = memo != null ? memo : Memo.None();"
            ],
            [
                42,
                "            _TimeBounds = timeBounds;"
            ],
            [
                54,
                "            byte[] txHash = Hash();"
            ],
            [
                55,
                "            _Signatures.Add(signer.SignDecorated(txHash));"
            ],
            [
                64,
                "            Signature signature = new Signature();"
            ],
            [
                67,
                "            byte[] hash = Util.Hash(preimage);"
            ],
            [
                72,
                "            SignatureHint signatureHint = new SignatureHint();"
            ],
            [
                75,
                "            DecoratedSignature decoratedSignature = new DecoratedSignature();"
            ],
            [
                79,
                "            _Signatures.Add(decoratedSignature);"
            ],
            [
                96,
                "            {"
            ],
            [
                98,
                "            }"
            ],
            [
                100,
                "            var memoryStream = new MemoryStream();"
            ],
            [
                101,
                "            var writer = new BinaryWriter(memoryStream);"
            ],
            [
                107,
                "            writer.Write((int)EnvelopeType.Create(EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_TX).InnerValue);"
            ],
            [
                110,
                "            var txMemoryStream = new MemoryStream();"
            ],
            [
                111,
                "            var txWriter = new XdrDataOutputStream(txMemoryStream);"
            ],
            [
                113,
                "            writer.Write(txMemoryStream.ToArray());"
            ],
            [
                115,
                "            return memoryStream.ToArray();"
            ],
            [
                125,
                "            Uint32 fee = new Uint32();"
            ],
            [
                126,
                "            fee.InnerValue = _Fee;"
            ],
            [
                129,
                "            Uint64 sequenceNumberUint = new Uint64();"
            ],
            [
                130,
                "            sequenceNumberUint.InnerValue = _SequenceNumber;"
            ],
            [
                131,
                "            SequenceNumber sequenceNumber = new SequenceNumber();"
            ],
            [
                135,
                "            AccountID sourceAccount = new AccountID();"
            ],
            [
                136,
                "            sourceAccount.InnerValue = _SourceAccount.XdrPublicKey;"
            ],
            [
                139,
                "            xdr.Operation[] operations = new xdr.Operation[_Operations.Length];"
            ],
            [
                141,
                "            for (int i = 0; i < _Operations.Length; i++)"
            ],
            [
                142,
                "            {"
            ],
            [
                143,
                "                operations[i] = _Operations[i].ToXdr();"
            ],
            [
                144,
                "            }"
            ],
            [
                147,
                "            xdr.Transaction.TransactionExt ext = new xdr.Transaction.TransactionExt();"
            ],
            [
                150,
                "            xdr.Transaction transaction = new xdr.Transaction();"
            ],
            [
                155,
                "            transaction.Memo = _Memo.ToXdr();"
            ],
            [
                156,
                "            transaction.TimeBounds = _TimeBounds == null ? null : _TimeBounds.ToXdr();"
            ],
            [
                164,
                "        public xdr.TransactionEnvelope ToEnvelopeXdr()"
            ],
            [
                166,
                "            if (_Signatures.Count == 0)"
            ],
            [
                167,
                "            {"
            ],
            [
                169,
                "            }"
            ],
            [
                171,
                "            TransactionEnvelope thisXdr = new TransactionEnvelope();"
            ],
            [
                172,
                "            xdr.Transaction transaction = ToXdr();"
            ],
            [
                175,
                "            DecoratedSignature[] signatures = new DecoratedSignature[_Signatures.Count];"
            ],
            [
                176,
                "            signatures = _Signatures.ToArray();"
            ],
            [
                184,
                "        public String ToEnvelopeXdrBase64()"
            ],
            [
                186,
                "            TransactionEnvelope envelope = ToEnvelopeXdr();"
            ],
            [
                187,
                "            var memoryStream = new MemoryStream();"
            ],
            [
                188,
                "            var writer = new XdrDataOutputStream(memoryStream);"
            ],
            [
                191,
                "            return Convert.ToBase64String(memoryStream.ToArray());"
            ],
            [
                202,
                "            BlockingCollection<Operation> mOperations;"
            ],
            [
                233,
                "                {"
            ],
            [
                235,
                "                }"
            ],
            [
                250,
                "                {"
            ],
            [
                252,
                "                }"
            ],
            [
                268,
                "                {"
            ],
            [
                270,
                "                }"
            ],
            [
                282,
                "                Operation[] operations = mOperations.ToArray();"
            ],
            [
                284,
                "                Transaction transaction = new Transaction(mSourceAccount.KeyPair, mSourceAccount.GetIncrementedSequenceNumber(), operations, mMemo, mTimeBounds);"
            ],
            [
                291,
                "}"
            ]
        ]
    },
    "num_lines_added": 64,
    "num_lines_removed": 83
}