{
    "hash": "e8dfb304e19d3a2a330e2b138cf5d1d993c5639d",
    "message": "Refactoring + empty stack fix.",
    "file_num_lines": 154,
    "diff_parsed": {
        "added": [
            [
                6,
                "namespace ExpressiveAnnotations.Analysis"
            ],
            [
                19,
                "    public sealed class Parser"
            ],
            [
                21,
                "        private Stack<Token> Tokens { get; set; }"
            ],
            [
                50,
                "            Tokens = new Stack<Token>(lexer.Analyze(expression).Reverse());"
            ],
            [
                53,
                "        private bool PeekToken(out Token token)"
            ],
            [
                55,
                "            token = Tokens.Any() ? Tokens.Peek() : null;"
            ],
            [
                56,
                "            return token != null;"
            ],
            [
                72,
                "            Token token;"
            ],
            [
                73,
                "            if (!PeekToken(out token) || token.Id != TokenId.OR)"
            ],
            [
                83,
                "            Token token;"
            ],
            [
                84,
                "            if (!PeekToken(out token) || token.Id != TokenId.AND)"
            ],
            [
                93,
                "            Token token;"
            ],
            [
                94,
                "            if (!PeekToken(out token) || token.Id != TokenId.NOT)"
            ],
            [
                95,
                "                return ParseRelExp();"
            ],
            [
                96,
                "            CrushToken();"
            ],
            [
                97,
                "            return Expression.Not(ParseRelExp());"
            ],
            [
                103,
                "            Token token;"
            ],
            [
                104,
                "            if (!PeekToken(out token) || !new[] { TokenId.LT, TokenId.LE, TokenId.GT, TokenId.GE, TokenId.EQ, TokenId.NEQ }.Contains(token.Id))"
            ],
            [
                110,
                "            switch (token.Id)"
            ],
            [
                112,
                "                case TokenId.LT:"
            ],
            [
                114,
                "                case TokenId.LE:"
            ],
            [
                116,
                "                case TokenId.GT:"
            ],
            [
                118,
                "                case TokenId.GE:"
            ],
            [
                120,
                "                case TokenId.EQ:"
            ],
            [
                122,
                "                case TokenId.NEQ:"
            ],
            [
                131,
                "            Token token;"
            ],
            [
                132,
                "            if (!PeekToken(out token))"
            ],
            [
                133,
                "                throw new InvalidOperationException();"
            ],
            [
                134,
                ""
            ],
            [
                135,
                "            if (token.Id == TokenId.LEFT_BRACKET)"
            ],
            [
                139,
                "                if (!PeekToken(out token) || token.Id != TokenId.RIGHT_BRACKET)"
            ],
            [
                145,
                "            CrushToken();"
            ],
            [
                146,
                "            switch (token.Id)"
            ],
            [
                148,
                "                case TokenId.NULL:"
            ],
            [
                149,
                "                    return Expression.Constant(null);"
            ],
            [
                150,
                "                case TokenId.INT:"
            ],
            [
                151,
                "                    return Expression.Constant(token.Value, typeof(int));"
            ],
            [
                152,
                "                case TokenId.FLOAT:"
            ],
            [
                153,
                "                    return Expression.Constant(token.Value, typeof(float));"
            ],
            [
                154,
                "                case TokenId.BOOL:"
            ],
            [
                155,
                "                    return Expression.Constant(token.Value, typeof(bool));"
            ],
            [
                156,
                "                case TokenId.STRING:"
            ],
            [
                157,
                "                    return Expression.Constant(token.Value, typeof(string));"
            ],
            [
                158,
                "                case TokenId.PROPERTY:"
            ],
            [
                159,
                "                    return ExtractProp(token.Value.ToString());"
            ],
            [
                160,
                "                default:"
            ],
            [
                161,
                "                    throw new InvalidOperationException();"
            ],
            [
                165,
                "        private Expression ExtractProp(string name)"
            ],
            [
                167,
                "            var props = name.Split('.');"
            ],
            [
                168,
                "            var type = ModelType;"
            ],
            [
                169,
                "            var expr = ModelExpression;"
            ],
            [
                170,
                "            foreach (var prop in props)"
            ],
            [
                172,
                "                var pi = type.GetProperty(prop);"
            ],
            [
                173,
                "                if (pi == null)"
            ],
            [
                174,
                "                    throw new ArgumentException(string.Format(\"Dynamic extraction interrupted. Field {0} not found.\", prop), name);"
            ],
            [
                175,
                "                expr = Expression.Property(expr, pi);"
            ],
            [
                176,
                "                type = pi.PropertyType;"
            ],
            [
                178,
                "            return expr;"
            ]
        ],
        "deleted": [
            [
                5,
                "using ExpressiveAnnotations.LogicalExpressionsAnalysis.LexicalAnalysis;"
            ],
            [
                6,
                "using ExpressiveAnnotations.Misc;"
            ],
            [
                8,
                "namespace ExpressiveAnnotations.LogicalExpressionsAnalysis.SyntacticAnalysis"
            ],
            [
                21,
                "    internal sealed class Parser"
            ],
            [
                23,
                "        private Stack<TokenOutput> Tokens { get; set; }"
            ],
            [
                52,
                "            Tokens = new Stack<TokenOutput>(lexer.Analyze(expression).Reverse());"
            ],
            [
                55,
                "        private TokenOutput PeekToken()"
            ],
            [
                57,
                "            if (Tokens.Any())"
            ],
            [
                58,
                "                return Tokens.Peek();"
            ],
            [
                59,
                "            return null;"
            ],
            [
                75,
                "            if (PeekToken().Token != Token.OR)"
            ],
            [
                85,
                "            if (PeekToken().Token != Token.AND)"
            ],
            [
                94,
                "            var isNot = PeekToken().Token == Token.NOT;"
            ],
            [
                95,
                "            if (isNot)"
            ],
            [
                96,
                "                CrushToken();"
            ],
            [
                97,
                "            var arg = ParseRelExp();"
            ],
            [
                98,
                ""
            ],
            [
                99,
                "            if (isNot)"
            ],
            [
                100,
                "                return Expression.Not(arg);"
            ],
            [
                101,
                "            return arg;"
            ],
            [
                107,
                "            var token = PeekToken();"
            ],
            [
                108,
                "            if (!new[] { Token.LT, Token.LE, Token.GT, Token.GE, Token.EQ, Token.NEQ }.Contains(token.Token))"
            ],
            [
                114,
                "            switch (token.Token)"
            ],
            [
                116,
                "                case Token.LT:"
            ],
            [
                118,
                "                case Token.LE:"
            ],
            [
                120,
                "                case Token.GT:"
            ],
            [
                122,
                "                case Token.GE:"
            ],
            [
                124,
                "                case Token.EQ:"
            ],
            [
                126,
                "                case Token.NEQ:"
            ],
            [
                135,
                "            if (PeekToken().Token == Token.LEFT_BRACKET)"
            ],
            [
                139,
                "                if (PeekToken().Token != Token.RIGHT_BRACKET)"
            ],
            [
                145,
                "            if (PeekToken().Token == Token.NULL)"
            ],
            [
                146,
                "            {"
            ],
            [
                147,
                "                CrushToken();"
            ],
            [
                148,
                "                return Expression.Constant(null);"
            ],
            [
                149,
                "            }"
            ],
            [
                150,
                ""
            ],
            [
                151,
                "            var value = ParseIntLiteral() ?? ParseFloatLiteral() ?? ParseBoolLiteral() ?? ParseStringLiteral() ?? ParseProp();"
            ],
            [
                152,
                "            if (value == null)"
            ],
            [
                153,
                "                throw new InvalidOperationException();"
            ],
            [
                154,
                "            return value;"
            ],
            [
                155,
                "        }"
            ],
            [
                156,
                ""
            ],
            [
                157,
                "        private Expression ParseIntLiteral()"
            ],
            [
                158,
                "        {"
            ],
            [
                159,
                "            var token = PeekToken();"
            ],
            [
                160,
                "            if (PeekToken().Token == Token.INT)"
            ],
            [
                161,
                "            {"
            ],
            [
                162,
                "                CrushToken();"
            ],
            [
                163,
                "                return Expression.Constant(token.Value, typeof(int));"
            ],
            [
                164,
                "            }"
            ],
            [
                165,
                "            return null;"
            ],
            [
                166,
                "        }"
            ],
            [
                167,
                ""
            ],
            [
                168,
                "        private Expression ParseFloatLiteral()"
            ],
            [
                169,
                "        {"
            ],
            [
                170,
                "            var token = PeekToken();"
            ],
            [
                171,
                "            if (PeekToken().Token == Token.FLOAT)"
            ],
            [
                172,
                "            {"
            ],
            [
                173,
                "                CrushToken();"
            ],
            [
                174,
                "                return Expression.Constant(token.Value, typeof(float));"
            ],
            [
                175,
                "            }"
            ],
            [
                176,
                "            return null;"
            ],
            [
                177,
                "        }"
            ],
            [
                178,
                ""
            ],
            [
                179,
                "        private Expression ParseBoolLiteral()"
            ],
            [
                180,
                "        {"
            ],
            [
                181,
                "            var token = PeekToken();"
            ],
            [
                182,
                "            if (PeekToken().Token == Token.BOOL)"
            ],
            [
                183,
                "            {"
            ],
            [
                184,
                "                CrushToken();"
            ],
            [
                185,
                "                return Expression.Constant(token.Value, typeof(bool));"
            ],
            [
                186,
                "            }"
            ],
            [
                187,
                "            return null;"
            ],
            [
                188,
                "        }"
            ],
            [
                189,
                ""
            ],
            [
                190,
                "        private Expression ParseStringLiteral()"
            ],
            [
                191,
                "        {"
            ],
            [
                192,
                "            var token = PeekToken();"
            ],
            [
                193,
                "            if (PeekToken().Token == Token.INT)"
            ],
            [
                195,
                "                CrushToken();"
            ],
            [
                196,
                "                return Expression.Constant(token.Value, typeof(string));"
            ],
            [
                198,
                "            return null;"
            ],
            [
                201,
                "        private Expression ParseProp()"
            ],
            [
                203,
                "            var token = PeekToken();"
            ],
            [
                204,
                "            if (PeekToken().Token == Token.PROPERTY)"
            ],
            [
                206,
                "                CrushToken();"
            ],
            [
                207,
                "                var propName = token.Value.ToString();"
            ],
            [
                208,
                "                var props = propName.Split('.');"
            ],
            [
                209,
                "                var type = ModelType;"
            ],
            [
                210,
                "                var expr = ModelExpression;"
            ],
            [
                211,
                "                foreach (var prop in props)"
            ],
            [
                212,
                "                {"
            ],
            [
                213,
                "                    var pi = type.GetProperty(prop);"
            ],
            [
                214,
                "                    if (pi == null)"
            ],
            [
                215,
                "                        throw new ArgumentException(string.Format(\"Dynamic extraction interrupted. Field {0} not found.\", prop), propName);"
            ],
            [
                216,
                "                    expr = Expression.Property(expr, pi);"
            ],
            [
                217,
                "                    type = pi.PropertyType;"
            ],
            [
                218,
                "                }"
            ],
            [
                219,
                "                return expr;"
            ],
            [
                221,
                "            return null;"
            ],
            [
                225,
                ""
            ]
        ]
    },
    "num_lines_added": 58,
    "num_lines_removed": 102
}