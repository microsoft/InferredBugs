{
    "hash": "8636c77f5cdc30182aaca212faf53f5361b7782f",
    "message": "Adjust scripts to work on paths with whitespaces. Impove branch coverage in few switch cases, by providing default branch. Mock and unit test type loading exceptions scenario.",
    "file_num_lines": 685,
    "diff_parsed": {
        "added": [
            [
                395,
                "                    return Expression.LessThan(arg1, arg2);"
            ],
            [
                397,
                "                    return Expression.LessThanOrEqual(arg1, arg2);"
            ],
            [
                399,
                "                    return Expression.GreaterThan(arg1, arg2);"
            ],
            [
                401,
                "                    return Expression.GreaterThanOrEqual(arg1, arg2);"
            ],
            [
                403,
                "                    return Expression.Equal(arg1, arg2);"
            ],
            [
                404,
                "                default: // assures full branch coverage"
            ],
            [
                405,
                "                    Debug.Assert(oper.Type == TokenType.NEQ); // http://stackoverflow.com/a/1468385/270315"
            ],
            [
                406,
                "                    return Expression.NotEqual(arg1, arg2);"
            ],
            [
                477,
                "                    return ParseAddExpInternal("
            ],
            [
                484,
                "                default:"
            ],
            [
                485,
                "                    Debug.Assert(oper.Type == TokenType.SUB);"
            ],
            [
                486,
                "                    return ParseAddExpInternal(Expression.Subtract(arg1, arg2));"
            ],
            [
                525,
                "                    return ParseMulExpInternal(Expression.Multiply(arg1, arg2));"
            ],
            [
                526,
                "                default:"
            ],
            [
                527,
                "                    Debug.Assert(oper.Type == TokenType.DIV);"
            ],
            [
                528,
                "                    return ParseMulExpInternal(Expression.Divide(arg1, arg2));"
            ],
            [
                710,
                "                    .SelectMany(a => new AssemblyTypeProvider(a).GetLoadableTypes())"
            ],
            [
                738,
                "                    .SelectMany(a => new AssemblyTypeProvider(a).GetLoadableTypes())"
            ],
            [
                741,
                "                        .Where(fi => fi.IsLiteral && !fi.IsInitOnly && fi.Name.Equals(parts.Last())))"
            ]
        ],
        "deleted": [
            [
                392,
                "            Expression expression = null;"
            ],
            [
                396,
                "                    expression = Expression.LessThan(arg1, arg2);"
            ],
            [
                397,
                "                    break;"
            ],
            [
                399,
                "                    expression = Expression.LessThanOrEqual(arg1, arg2);"
            ],
            [
                400,
                "                    break;"
            ],
            [
                402,
                "                    expression = Expression.GreaterThan(arg1, arg2);"
            ],
            [
                403,
                "                    break;"
            ],
            [
                405,
                "                    expression = Expression.GreaterThanOrEqual(arg1, arg2);"
            ],
            [
                406,
                "                    break;"
            ],
            [
                408,
                "                    expression = Expression.Equal(arg1, arg2);"
            ],
            [
                409,
                "                    break;"
            ],
            [
                410,
                "                case TokenType.NEQ:"
            ],
            [
                411,
                "                    expression = Expression.NotEqual(arg1, arg2);"
            ],
            [
                412,
                "                    break;"
            ],
            [
                414,
                "            return expression;"
            ],
            [
                481,
                "            Expression expression = null;"
            ],
            [
                485,
                "                    expression = ParseAddExpInternal("
            ],
            [
                492,
                "                    break;"
            ],
            [
                493,
                "                case TokenType.SUB:"
            ],
            [
                494,
                "                    expression = ParseAddExpInternal(Expression.Subtract(arg1, arg2));"
            ],
            [
                495,
                "                    break;"
            ],
            [
                497,
                "            return expression;"
            ],
            [
                532,
                "            Expression expression = null;"
            ],
            [
                536,
                "                    expression = ParseMulExpInternal(Expression.Multiply(arg1, arg2));"
            ],
            [
                537,
                "                    break;"
            ],
            [
                538,
                "                case TokenType.DIV:"
            ],
            [
                539,
                "                    expression = ParseMulExpInternal(Expression.Divide(arg1, arg2));"
            ],
            [
                540,
                "                    break;"
            ],
            [
                542,
                "            return expression;"
            ],
            [
                723,
                "                    .SelectMany(a => a.GetLoadableTypes())"
            ],
            [
                751,
                "                    .SelectMany(a => a.GetLoadableTypes())"
            ],
            [
                754,
                "                        .Where(fi => fi.IsLiteral && !fi.IsInitOnly && fi.Name.Equals(parts.Last())))"
            ]
        ]
    },
    "num_lines_added": 19,
    "num_lines_removed": 32
}