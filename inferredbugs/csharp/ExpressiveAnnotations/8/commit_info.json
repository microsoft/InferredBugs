{
    "hash": "b1c90a36eb8933a1e9b4538d8ffe8992ccc08d51",
    "message": "Functions parsing handled. Parser simplified. Tests supplemented.",
    "file_num_lines": 244,
    "diff_parsed": {
        "added": [
            [
                16,
                "     * val        => \"null\" | int | float | bool | string | func | \"(\" or-exp \")\""
            ],
            [
                27,
                "        private IDictionary<string, LambdaExpression> Functions { get; set; }"
            ],
            [
                28,
                ""
            ],
            [
                29,
                "        /// <summary>"
            ],
            [
                30,
                "        /// Initializes a new instance of the <see cref=\"Parser\"/> class."
            ],
            [
                31,
                "        /// </summary>"
            ],
            [
                32,
                "        public Parser()"
            ],
            [
                33,
                "        {"
            ],
            [
                34,
                "            Functions = new Dictionary<string, LambdaExpression>();"
            ],
            [
                35,
                "        }"
            ],
            [
                71,
                "        /// <summary>"
            ],
            [
                72,
                "        /// Adds function signature to the parser context."
            ],
            [
                73,
                "        /// </summary>"
            ],
            [
                74,
                "        /// <typeparam name=\"Result\">Type identifier of returned result.</typeparam>"
            ],
            [
                75,
                "        /// <param name=\"name\">Function name.</param>"
            ],
            [
                76,
                "        /// <param name=\"func\">Function lambda.</param>"
            ],
            [
                77,
                "        public void AddFunction<Result>(string name, Expression<Func<Result>> func)"
            ],
            [
                78,
                "        {"
            ],
            [
                79,
                "            Functions.Add(name, func);"
            ],
            [
                80,
                "        }"
            ],
            [
                81,
                ""
            ],
            [
                82,
                "        /// <summary>"
            ],
            [
                83,
                "        /// Adds function signature to the parser context."
            ],
            [
                84,
                "        /// </summary>"
            ],
            [
                85,
                "        /// <typeparam name=\"Arg1\">First argument.</typeparam>"
            ],
            [
                86,
                "        /// <typeparam name=\"Result\">Type identifier of returned result.</typeparam>"
            ],
            [
                87,
                "        /// <param name=\"name\">Function name.</param>"
            ],
            [
                88,
                "        /// <param name=\"func\">Function lambda.</param>"
            ],
            [
                89,
                "        public void AddFunction<Arg1, Result>(string name, Expression<Func<Arg1, Result>> func)"
            ],
            [
                90,
                "        {"
            ],
            [
                91,
                "            Functions.Add(name, func);"
            ],
            [
                92,
                "        }"
            ],
            [
                93,
                ""
            ],
            [
                94,
                "        /// <summary>"
            ],
            [
                95,
                "        /// Adds function signature to the parser context."
            ],
            [
                96,
                "        /// </summary>"
            ],
            [
                97,
                "        /// <typeparam name=\"Arg1\">First argument.</typeparam>"
            ],
            [
                98,
                "        /// <typeparam name=\"Arg2\">Second argument.</typeparam>"
            ],
            [
                99,
                "        /// <typeparam name=\"Result\">Type identifier of returned result.</typeparam>"
            ],
            [
                100,
                "        /// <param name=\"name\">Function name.</param>"
            ],
            [
                101,
                "        /// <param name=\"func\">Function lambda.</param>"
            ],
            [
                102,
                "        public void AddFunction<Arg1, Arg2, Result>(string name, Expression<Func<Arg1, Arg2, Result>> func)"
            ],
            [
                103,
                "        {"
            ],
            [
                104,
                "            Functions.Add(name, func);"
            ],
            [
                105,
                "        }"
            ],
            [
                106,
                ""
            ],
            [
                113,
                "        private TokenId PeekType()"
            ],
            [
                114,
                "        {"
            ],
            [
                115,
                "            return Tokens.Any() ? Tokens.Peek().Id : TokenId.NONE;"
            ],
            [
                116,
                "        }"
            ],
            [
                117,
                ""
            ],
            [
                118,
                "        private object PeekValue()"
            ],
            [
                120,
                "            return Tokens.Peek().Value;"
            ],
            [
                123,
                "        private void ReadToken()"
            ],
            [
                136,
                "            if (PeekType() != TokenId.OR)"
            ],
            [
                138,
                "            ReadToken();"
            ],
            [
                146,
                "            if (PeekType() != TokenId.AND)"
            ],
            [
                148,
                "            ReadToken();"
            ],
            [
                155,
                "            if (PeekType() != TokenId.NOT)"
            ],
            [
                157,
                "            ReadToken();"
            ],
            [
                164,
                "            if (!new[] { TokenId.LT, TokenId.LE, TokenId.GT, TokenId.GE, TokenId.EQ, TokenId.NEQ }.Contains(PeekType()))"
            ],
            [
                166,
                "            var oper = PeekType();"
            ],
            [
                167,
                "            ReadToken();"
            ],
            [
                171,
                "            switch (oper)"
            ],
            [
                191,
                "        {"
            ],
            [
                192,
                "            if (PeekType() == TokenId.LEFT_BRACKET)"
            ],
            [
                194,
                "                ReadToken();"
            ],
            [
                196,
                "                if (PeekType() != TokenId.RIGHT_BRACKET)"
            ],
            [
                198,
                "                ReadToken();"
            ],
            [
                201,
                ""
            ],
            [
                202,
                "            switch (PeekType())"
            ],
            [
                204,
                "                case TokenId.NULL:"
            ],
            [
                207,
                "                    return ParseInt();"
            ],
            [
                209,
                "                    return ParseFloat();"
            ],
            [
                211,
                "                    return ParseBool();"
            ],
            [
                213,
                "                    return ParseString();"
            ],
            [
                214,
                "                case TokenId.FUNC:"
            ],
            [
                215,
                "                    return ParseFunc();"
            ],
            [
                221,
                "        private Expression ParseInt()"
            ],
            [
                222,
                "        {"
            ],
            [
                223,
                "            var value = PeekValue();"
            ],
            [
                224,
                "            ReadToken();"
            ],
            [
                225,
                "            return Expression.Constant(value, typeof(int));"
            ],
            [
                226,
                "        }"
            ],
            [
                227,
                ""
            ],
            [
                228,
                "        private Expression ParseFloat()"
            ],
            [
                229,
                "        {"
            ],
            [
                230,
                "            var value = PeekValue();"
            ],
            [
                231,
                "            ReadToken();"
            ],
            [
                232,
                "            return Expression.Constant(value, typeof(float));"
            ],
            [
                233,
                "        }"
            ],
            [
                234,
                ""
            ],
            [
                235,
                "        private Expression ParseBool()"
            ],
            [
                236,
                "        {"
            ],
            [
                237,
                "            var value = PeekValue();"
            ],
            [
                238,
                "            ReadToken();"
            ],
            [
                239,
                "            return Expression.Constant(value, typeof(bool));"
            ],
            [
                240,
                "        }"
            ],
            [
                241,
                ""
            ],
            [
                242,
                "        private Expression ParseString()"
            ],
            [
                243,
                "        {"
            ],
            [
                244,
                "            var value = PeekValue();"
            ],
            [
                245,
                "            ReadToken();"
            ],
            [
                246,
                "            return Expression.Constant(value, typeof(string));"
            ],
            [
                247,
                "        }"
            ],
            [
                248,
                ""
            ],
            [
                249,
                "        private Expression ParseFunc()"
            ],
            [
                250,
                "        {"
            ],
            [
                251,
                "            var propertyName = PeekValue().ToString();"
            ],
            [
                252,
                "            ReadToken(); // read name"
            ],
            [
                253,
                ""
            ],
            [
                254,
                "            if (PeekType() != TokenId.LEFT_BRACKET)"
            ],
            [
                255,
                "                return ExtractProperty(propertyName);"
            ],
            [
                256,
                ""
            ],
            [
                257,
                "            ReadToken(); // read \"(\""
            ],
            [
                258,
                ""
            ],
            [
                259,
                "            // read arguments"
            ],
            [
                260,
                "            var args = new List<Expression>();"
            ],
            [
                261,
                "            while (PeekType() != TokenId.RIGHT_BRACKET)"
            ],
            [
                262,
                "            {"
            ],
            [
                263,
                "                var arg = ParseExpression();"
            ],
            [
                264,
                "                if (PeekType() == TokenId.COMMA)"
            ],
            [
                265,
                "                    ReadToken();"
            ],
            [
                266,
                "                args.Add(arg);"
            ],
            [
                267,
                "            }"
            ],
            [
                268,
                ""
            ],
            [
                269,
                "            if (PeekType() != TokenId.RIGHT_BRACKET)"
            ],
            [
                270,
                "                throw new InvalidOperationException();"
            ],
            [
                271,
                "            ReadToken();"
            ],
            [
                272,
                ""
            ],
            [
                273,
                "            var mi = ContextType.GetMethod(propertyName); // check if custom func is defined for model"
            ],
            [
                274,
                "            if (mi != null)"
            ],
            [
                275,
                "                return Expression.Call(ContextExpression, mi, args);"
            ],
            [
                276,
                ""
            ],
            [
                277,
                "            if(!Functions.ContainsKey(propertyName))"
            ],
            [
                278,
                "                throw new InvalidOperationException();"
            ],
            [
                279,
                ""
            ],
            [
                280,
                "            return CreateLambdaCallExpression(Functions[propertyName], args, propertyName);"
            ],
            [
                281,
                "        }"
            ],
            [
                282,
                ""
            ],
            [
                298,
                ""
            ],
            [
                299,
                "        private static InvocationExpression CreateLambdaCallExpression(LambdaExpression funcExpr, IList<Expression> parsedArgs, string funcName)"
            ],
            [
                300,
                "        {"
            ],
            [
                301,
                "            if (funcExpr.Parameters.Count != parsedArgs.Count)"
            ],
            [
                302,
                "                throw new InvalidOperationException("
            ],
            [
                303,
                "                    string.Format(\"Funtion {0} expects {1} parameters. You provided {2}.\", funcName, funcExpr.Parameters.Count, parsedArgs.Count));"
            ],
            [
                304,
                ""
            ],
            [
                305,
                "            var convertedArgs = new List<Expression>();"
            ],
            [
                306,
                "            for (var i = 0; i < parsedArgs.Count; i++)"
            ],
            [
                307,
                "            {"
            ],
            [
                308,
                "                var arg = parsedArgs[i];"
            ],
            [
                309,
                "                var param = funcExpr.Parameters[i];"
            ],
            [
                310,
                "                if (arg.Type == param.Type)"
            ],
            [
                311,
                "                    convertedArgs.Add(arg);"
            ],
            [
                312,
                "                else"
            ],
            [
                313,
                "                {"
            ],
            [
                314,
                "                    try"
            ],
            [
                315,
                "                    {"
            ],
            [
                316,
                "                        var conv = Expression.Convert(arg, param.Type);"
            ],
            [
                317,
                "                        convertedArgs.Add(conv);"
            ],
            [
                318,
                "                    }"
            ],
            [
                319,
                "                    catch"
            ],
            [
                320,
                "                    {"
            ],
            [
                321,
                "                        throw new InvalidOperationException("
            ],
            [
                322,
                "                            string.Format(\"Cannot convert {0} argument type from {1} to needed {2}.\", i, arg.Type.Name, param.Type.Name));"
            ],
            [
                323,
                "                    }"
            ],
            [
                324,
                "                }"
            ],
            [
                325,
                "            }"
            ],
            [
                326,
                "            return Expression.Invoke(funcExpr, convertedArgs);"
            ],
            [
                327,
                "        }"
            ]
        ],
        "deleted": [
            [
                16,
                "     * val        => \"null\" | int | float | bool | string | prop | \"(\" or-exp \")\""
            ],
            [
                68,
                "        private bool PeekToken(out Token token)"
            ],
            [
                70,
                "            token = Tokens.Any() ? Tokens.Peek() : null;"
            ],
            [
                71,
                "            return token != null;"
            ],
            [
                74,
                "        private void CrushToken()"
            ],
            [
                87,
                "            Token token;"
            ],
            [
                88,
                "            if (!PeekToken(out token) || token.Id != TokenId.OR)"
            ],
            [
                90,
                "            CrushToken();"
            ],
            [
                98,
                "            Token token;"
            ],
            [
                99,
                "            if (!PeekToken(out token) || token.Id != TokenId.AND)"
            ],
            [
                101,
                "            CrushToken();"
            ],
            [
                108,
                "            Token token;"
            ],
            [
                109,
                "            if (!PeekToken(out token) || token.Id != TokenId.NOT)"
            ],
            [
                111,
                "            CrushToken();"
            ],
            [
                118,
                "            Token token;"
            ],
            [
                119,
                "            if (!PeekToken(out token) || !new[] { TokenId.LT, TokenId.LE, TokenId.GT, TokenId.GE, TokenId.EQ, TokenId.NEQ }.Contains(token.Id))"
            ],
            [
                121,
                "            CrushToken();"
            ],
            [
                125,
                "            switch (token.Id)"
            ],
            [
                145,
                "        {"
            ],
            [
                146,
                "            Token token;"
            ],
            [
                147,
                "            if (!PeekToken(out token))"
            ],
            [
                148,
                "                throw new InvalidOperationException();"
            ],
            [
                149,
                ""
            ],
            [
                150,
                "            if (token.Id == TokenId.LEFT_BRACKET)"
            ],
            [
                152,
                "                CrushToken();"
            ],
            [
                154,
                "                if (!PeekToken(out token) || token.Id != TokenId.RIGHT_BRACKET)"
            ],
            [
                156,
                "                CrushToken();"
            ],
            [
                159,
                ""
            ],
            [
                160,
                "            CrushToken();"
            ],
            [
                161,
                "            switch (token.Id)"
            ],
            [
                163,
                "                case TokenId.NULL:"
            ],
            [
                166,
                "                    return Expression.Constant(token.Value, typeof(int));"
            ],
            [
                168,
                "                    return Expression.Constant(token.Value, typeof(float));"
            ],
            [
                170,
                "                    return Expression.Constant(token.Value, typeof(bool));"
            ],
            [
                172,
                "                    return Expression.Constant(token.Value, typeof(string));"
            ],
            [
                173,
                "                case TokenId.PROPERTY:"
            ],
            [
                174,
                "                    return ExtractProperty(token.Value.ToString());"
            ]
        ]
    },
    "num_lines_added": 170,
    "num_lines_removed": 37
}