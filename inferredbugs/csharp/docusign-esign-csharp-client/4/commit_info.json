{
    "hash": "67532fbad365c01718a4a2f8460a3f5ea4555d5d",
    "message": "v3.0.1 Hotfixes",
    "file_num_lines": 550,
    "diff_parsed": {
        "added": [
            [
                650,
                "            if (string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(clientSecret) || string.IsNullOrEmpty(code))"
            ],
            [
                651,
                "            {"
            ],
            [
                652,
                "                throw new ArgumentNullException();"
            ],
            [
                653,
                "            }"
            ],
            [
                654,
                ""
            ],
            [
                660,
                ""
            ],
            [
                662,
                "            restClient.Timeout = Configuration.Timeout;"
            ],
            [
                663,
                "            restClient.UserAgent = Configuration.UserAgent;"
            ],
            [
                664,
                ""
            ],
            [
                679,
                "            IRestResponse response = restClient.Execute(request);"
            ],
            [
                680,
                ""
            ],
            [
                681,
                "            if (response.StatusCode >= HttpStatusCode.OK && response.StatusCode < HttpStatusCode.BadRequest)"
            ],
            [
                683,
                "                OAuth.OAuthToken tokenObj = JsonConvert.DeserializeObject<OAuth.OAuthToken>(((RestResponse)response).Content);"
            ],
            [
                690,
                "            else"
            ],
            [
                692,
                "                throw new ApiException((int)response.StatusCode,"
            ],
            [
                693,
                "                  \"Error while requesting server, received a non successful HTTP code \""
            ],
            [
                694,
                "                  + response.ResponseStatus + \" with response Body: '\" + response.Content + \"'\");"
            ],
            [
                713,
                "            restClient.Timeout = Configuration.Timeout;"
            ],
            [
                714,
                "            restClient.UserAgent = Configuration.UserAgent;"
            ],
            [
                715,
                ""
            ],
            [
                717,
                ""
            ],
            [
                720,
                "            IRestResponse response = restClient.Execute(request);"
            ],
            [
                721,
                "            if (response.StatusCode >= HttpStatusCode.OK && response.StatusCode < HttpStatusCode.BadRequest)"
            ],
            [
                726,
                "            else"
            ],
            [
                728,
                "                throw new ApiException((int)response.StatusCode,"
            ],
            [
                729,
                "                      \"Error while requesting server, received a non successful HTTP code \""
            ],
            [
                730,
                "                      + response.ResponseStatus + \" with response Body: '\" + response.Content + \"'\");"
            ],
            [
                827,
                "            string baseUri = string.Format(\"https://{0}/\", oauthBasePath);"
            ],
            [
                828,
                "            RestClient restClient = new RestClient(baseUri);"
            ],
            [
                829,
                "            restClient.Timeout = Configuration.Timeout;"
            ],
            [
                830,
                "            restClient.UserAgent = Configuration.UserAgent;"
            ],
            [
                849,
                "            RestRequest request = PrepareRequest(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, contentType);"
            ],
            [
                850,
                ""
            ],
            [
                851,
                "            IRestResponse response = restClient.Execute(request);"
            ],
            [
                852,
                ""
            ],
            [
                853,
                "            if (response.StatusCode >= HttpStatusCode.OK && response.StatusCode < HttpStatusCode.BadRequest)"
            ],
            [
                860,
                "            else"
            ],
            [
                862,
                "                throw new ApiException((int)response.StatusCode,"
            ],
            [
                863,
                "                      \"Error while requesting server, received a non successful HTTP code \""
            ],
            [
                864,
                "                      + response.ResponseStatus + \" with response Body: '\" + response.Content + \"'\");"
            ],
            [
                902,
                "    }"
            ],
            [
                907,
                "    [Obsolete(\"This class is deprecated. Please use 'OAuth.OAuthToken' instead.\", false)]"
            ]
        ],
        "deleted": [
            [
                655,
                ""
            ],
            [
                671,
                "            try"
            ],
            [
                673,
                "                IRestResponse restResponse = restClient.Execute(request);"
            ],
            [
                674,
                "                OAuth.OAuthToken tokenObj = JsonConvert.DeserializeObject<OAuth.OAuthToken>(((RestResponse)restResponse).Content);"
            ],
            [
                679,
                ""
            ],
            [
                682,
                "            catch (Exception e)"
            ],
            [
                684,
                "                throw new Exception(\"Error: \" + e.Message);"
            ],
            [
                706,
                "            try"
            ],
            [
                708,
                "                IRestResponse response = restClient.Execute(request);"
            ],
            [
                709,
                "                if (response.StatusCode != HttpStatusCode.OK)"
            ],
            [
                710,
                "                {"
            ],
            [
                711,
                "                    throw new ApiException(int.Parse(response.StatusCode.ToString()),"
            ],
            [
                712,
                "                            \"Error while requesting server, received a non successful HTTP code \""
            ],
            [
                713,
                "                            + response.ResponseStatus + \" with response Body: '\" + response.Content + \"'\""
            ],
            [
                714,
                "                            + response.Headers, response.Content);"
            ],
            [
                715,
                "                }"
            ],
            [
                719,
                "            catch (Exception ex)"
            ],
            [
                721,
                "                throw new Exception(\"Error while fecthing user info: \" + ex.Message);"
            ],
            [
                818,
                "            Uri baseUrl = this.RestClient.BaseUrl;"
            ],
            [
                819,
                "            this.RestClient.BaseUrl = new Uri(string.Format(\"https://{0}\", oauthBasePath));"
            ],
            [
                838,
                "            try"
            ],
            [
                840,
                "                var response = CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, contentType);"
            ],
            [
                842,
                ""
            ],
            [
                845,
                ""
            ],
            [
                846,
                "                this.RestClient.BaseUrl = baseUrl;"
            ],
            [
                847,
                ""
            ],
            [
                850,
                "            catch (Exception ex)"
            ],
            [
                852,
                "                throw new Exception(ex.Message);"
            ],
            [
                890,
                "}"
            ]
        ]
    },
    "num_lines_added": 42,
    "num_lines_removed": 29
}