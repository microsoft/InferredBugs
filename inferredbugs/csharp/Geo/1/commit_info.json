{
    "hash": "de306b4e59b536916e8c248fe4fd500b806c5459",
    "message": "Better GPX Compatibility\n\nUnified all GPS data types to use only Waypoint.\nRemoved Fix type.",
    "file_num_lines": 64,
    "diff_parsed": {
        "added": [
            [
                14,
                "            Waypoints = new List<Waypoint>();"
            ],
            [
                17,
                "        public List<Waypoint> Waypoints { get; set; }"
            ],
            [
                21,
                "            return new LineString(Waypoints.Select(x => x.Coordinate));"
            ],
            [
                26,
                "            return Waypoints.Count == 0;"
            ],
            [
                29,
                "        public Waypoint GetFirstWaypoint()"
            ],
            [
                31,
                "            return IsEmpty() ? default(Waypoint) : Waypoints[0];"
            ],
            [
                34,
                "        public Waypoint GetLastWaypoint()"
            ],
            [
                36,
                "            return IsEmpty() ? default(Waypoint) : Waypoints[Waypoints.Count - 1];"
            ],
            [
                46,
                "            if (GetFirstWaypoint().TimeUtc.HasValue && GetLastWaypoint().TimeUtc.HasValue)"
            ],
            [
                47,
                "                return GetLastWaypoint().TimeUtc.Value - GetFirstWaypoint().TimeUtc.Value;"
            ],
            [
                48,
                "            return TimeSpan.Zero;"
            ],
            [
                58,
                "            if (Waypoints.Any(x => !x.TimeUtc.HasValue)) {"
            ],
            [
                59,
                "                throw new NotSupportedException(\"All waypoints require a timestamp, for track segment to be quantized.\");"
            ],
            [
                60,
                "            }"
            ],
            [
                61,
                ""
            ],
            [
                62,
                "            var waypoints = new List<Waypoint>();"
            ],
            [
                63,
                "            Waypoint lastWaypoint = null;"
            ],
            [
                64,
                "            foreach (var waypoint in Waypoints)"
            ],
            [
                66,
                "                if (lastWaypoint == null || Math.Abs((waypoint.TimeUtc.Value - lastWaypoint.TimeUtc.Value).TotalSeconds) >= seconds)"
            ],
            [
                68,
                "                    lastWaypoint = waypoint;"
            ],
            [
                69,
                "                    waypoints.Add(waypoint);"
            ],
            [
                72,
                "            Waypoints = waypoints;"
            ]
        ],
        "deleted": [
            [
                14,
                "            Fixes = new List<Fix>();"
            ],
            [
                17,
                "        public List<Fix> Fixes { get; set; }"
            ],
            [
                21,
                "            return new LineString(Fixes.Select(x => x.Coordinate));"
            ],
            [
                26,
                "            return Fixes.Count == 0;"
            ],
            [
                29,
                "        public Fix GetFirstFix()"
            ],
            [
                31,
                "            return IsEmpty() ? default(Fix) : Fixes[0];"
            ],
            [
                34,
                "        public Fix GetLastFix()"
            ],
            [
                36,
                "            return IsEmpty() ? default(Fix) : Fixes[Fixes.Count - 1];"
            ],
            [
                46,
                "            return GetLastFix().TimeUtc - GetFirstFix().TimeUtc;"
            ],
            [
                56,
                "            var fixes = new List<Fix>();"
            ],
            [
                57,
                "            Fix lastFix = null;"
            ],
            [
                58,
                "            foreach (var fix in Fixes)"
            ],
            [
                60,
                "                if (lastFix == null || Math.Abs((fix.TimeUtc - lastFix.TimeUtc).TotalSeconds) >= seconds)"
            ],
            [
                62,
                "                    lastFix = fix;"
            ],
            [
                63,
                "                    fixes.Add(fix);"
            ],
            [
                66,
                "            Fixes = fixes;"
            ]
        ]
    },
    "num_lines_added": 22,
    "num_lines_removed": 16
}