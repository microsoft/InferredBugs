{
    "hash": "8732bc4abfc3c413526a26755fe4b80a1310cdb9",
    "message": "more logging and tests",
    "file_num_lines": 130,
    "diff_parsed": {
        "added": [
            [
                14,
                "    readonly Task<string[]> processOut;"
            ],
            [
                15,
                "    readonly Task<string[]> processErr;"
            ],
            [
                22,
                "        : this(outputHelper, Random.Shared.Next(5000, 8000), argument)"
            ],
            [
                23,
                "    {"
            ],
            [
                24,
                "    }"
            ],
            [
                25,
                ""
            ],
            [
                26,
                "    public NatsServer(ITestOutputHelper outputHelper, int port, string argument = \"\")"
            ],
            [
                29,
                "        this.Port = port;"
            ],
            [
                30,
                "        var cmd = $\"{natsServerPath} -p {Port} {argument}\".Trim();"
            ],
            [
                31,
                "        outputHelper.WriteLine(cmd);"
            ],
            [
                32,
                "        var (p, stdout, stderror) = ProcessX.GetDualAsyncEnumerable(cmd);"
            ],
            [
                33,
                ""
            ],
            [
                34,
                "        this.processOut = EnumerteWithLogsAsync(stdout, cancellationTokenSource.Token);"
            ],
            [
                35,
                "        this.processErr = EnumerteWithLogsAsync(stderror, cancellationTokenSource.Token);"
            ],
            [
                57,
                "        if (this.processOut.IsFaulted)"
            ],
            [
                58,
                "        {"
            ],
            [
                59,
                "            this.processOut.GetAwaiter().GetResult(); // throw exception"
            ],
            [
                60,
                "        }"
            ],
            [
                61,
                "        if (this.processErr.IsFaulted)"
            ],
            [
                62,
                "        {"
            ],
            [
                63,
                "            this.processErr.GetAwaiter().GetResult(); // throw exception"
            ],
            [
                64,
                "        }"
            ],
            [
                65,
                ""
            ],
            [
                78,
                "                var processLogs = await processErr; // wait for process exit, nats output info to stderror"
            ],
            [
                79,
                "                if (processLogs.Length != 0)"
            ],
            [
                80,
                "                {"
            ],
            [
                81,
                "                    outputHelper.WriteLine(\"Process Logs of \" + Port);"
            ],
            [
                82,
                "                    foreach (var item in processLogs)"
            ],
            [
                83,
                "                    {"
            ],
            [
                84,
                "                        outputHelper.WriteLine(item);"
            ],
            [
                85,
                "                    }"
            ],
            [
                86,
                "                }"
            ],
            [
                92,
                "    async Task<string[]> EnumerteWithLogsAsync(ProcessAsyncEnumerable enumerable, CancellationToken cancellationToken)"
            ],
            [
                93,
                "    {"
            ],
            [
                94,
                "        var l = new List<string>();"
            ],
            [
                95,
                "        try"
            ],
            [
                96,
                "        {"
            ],
            [
                97,
                "            await foreach (var item in enumerable.WithCancellation(cancellationToken))"
            ],
            [
                98,
                "            {"
            ],
            [
                99,
                "                l.Add(item);"
            ],
            [
                100,
                "            }"
            ],
            [
                101,
                "        }"
            ],
            [
                102,
                "        catch (OperationCanceledException)"
            ],
            [
                103,
                "        {"
            ],
            [
                104,
                "        }"
            ],
            [
                105,
                "        return l.ToArray();"
            ],
            [
                106,
                "    }"
            ],
            [
                107,
                ""
            ],
            [
                120,
                "            ConnectTimeout = TimeSpan.FromSeconds(1),"
            ],
            [
                121,
                "            ReconnectWait = TimeSpan.Zero, // no wait for reconnect"
            ],
            [
                122,
                "            ReconnectJitter = TimeSpan.Zero,"
            ],
            [
                138,
                "        var Port1 = Random.Shared.Next(10000, 13000);"
            ],
            [
                139,
                "        var Port2 = Random.Shared.Next(10000, 13000);"
            ],
            [
                140,
                "        var Port3 = Random.Shared.Next(10000, 13000);"
            ],
            [
                143,
                "        this.Server1 = new NatsServer(outputHelper, $\"--cluster_name test-cluster -cluster nats://localhost:{Port1} -routes nats://localhost:{Port2},nats://localhost:{Port3}\");"
            ],
            [
                144,
                "        this.Server2 = new NatsServer(outputHelper, $\"--cluster_name test-cluster -cluster nats://localhost:{Port2} -routes nats://localhost:{Port1},nats://localhost:{Port3}\");"
            ],
            [
                145,
                "        this.Server3 = new NatsServer(outputHelper, $\"--cluster_name test-cluster -cluster nats://localhost:{Port3} -routes nats://localhost:{Port1},nats://localhost:{Port2}\");"
            ]
        ],
        "deleted": [
            [
                2,
                "using System;"
            ],
            [
                5,
                "using System.Threading;"
            ],
            [
                6,
                "using System.Threading.Tasks;"
            ],
            [
                7,
                "using Xunit.Abstractions;"
            ],
            [
                18,
                "    readonly Task process;"
            ],
            [
                27,
                "        this.Port = Random.Shared.Next(5000, 6000);"
            ],
            [
                28,
                "        this.process = ProcessX.StartAsync($\"{natsServerPath} -p {Port} {argument}\".Trim()).WaitAsync(cancellationTokenSource.Token);"
            ],
            [
                62,
                "                await process; // wait for process exit."
            ],
            [
                95,
                "        var Port1 = Random.Shared.Next(10000, 11000);"
            ],
            [
                96,
                "        var Port2 = Random.Shared.Next(10000, 11000);"
            ],
            [
                97,
                "        var Port3 = Random.Shared.Next(10000, 11000);"
            ],
            [
                100,
                "        this.Server1 = new NatsServer(outputHelper, $\"--cluster_name test-cluster -cluster nats://localhost:{Port1}\");"
            ],
            [
                101,
                "        this.Server2 = new NatsServer(outputHelper, $\"--cluster_name test-cluster -cluster nats://localhost:{Port2} -routes nats://localhost:{Port1}\");"
            ],
            [
                102,
                "        this.Server3 = new NatsServer(outputHelper, $\"--cluster_name test-cluster -cluster nats://localhost:{Port3} -routes nats://localhost:{Port1}\");"
            ]
        ]
    },
    "num_lines_added": 57,
    "num_lines_removed": 14
}