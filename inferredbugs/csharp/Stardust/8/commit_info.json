{
    "hash": "054b24333ad65b82432118a1d9b2ad2dbaf1b247",
    "message": "\u641c\u7d22RedisStream\u961f\u5217",
    "file_num_lines": 281,
    "diff_parsed": {
        "added": [
            [
                132,
                "            if (node.ScanQueue && dbs != null && dbs.Length > 0) ScanQueue(node, dbs);"
            ],
            [
                143,
                "                var rds = GetOrAdd(node, i);"
            ],
            [
                146,
                "                if (rds.Count < 10000)"
            ],
            [
                148,
                "                    foreach (var item in rds.Search(\"*:Status:*\", 1000))"
            ],
            [
                156,
                "                            SaveQueue(node, i, queues, topic, \"Queue\");"
            ],
            [
                162,
                "                            if (rds.ContainsKey(topic)) SaveQueue(node, i, queues, topic, \"Delay\");"
            ],
            [
                163,
                "                        }"
            ],
            [
                164,
                "                    }"
            ],
            [
                165,
                "                }"
            ],
            [
                166,
                "                // \u641c\u7d22RedisStream\u961f\u5217"
            ],
            [
                167,
                "                if (rds.Count < 100)"
            ],
            [
                168,
                "                {"
            ],
            [
                169,
                "                    foreach (var item in rds.Keys)"
            ],
            [
                170,
                "                    {"
            ],
            [
                171,
                "                        var type = rds.Execute(item, r => r.Execute<String>(\"TYPE\", item), false);"
            ],
            [
                172,
                "                        if (type.EqualIgnoreCase(\"stream\"))"
            ],
            [
                173,
                "                        {"
            ],
            [
                174,
                "                            SaveQueue(node, i, queues, item, type);"
            ],
            [
                181,
                "        private void SaveQueue(RedisNode node, Int32 db, IList<RedisMessageQueue> queues, String topic, String type)"
            ],
            [
                183,
                "            var mq = queues.FirstOrDefault(e => e.Db == db && e.Topic == topic);"
            ],
            [
                189,
                "                    Db = db,"
            ],
            [
                200,
                "            if (mq.Type.IsNullOrEmpty()) mq.Type = type;"
            ]
        ],
        "deleted": [
            [
                132,
                "            if (node.ScanQueue && dbs != null) ScanQueue(node, dbs);"
            ],
            [
                143,
                "                var rds2 = GetOrAdd(node, i);"
            ],
            [
                146,
                "                if (rds2.Count < 10000)"
            ],
            [
                148,
                "                    foreach (var item in rds2.Search(\"*:Status:*\", 1000))"
            ],
            [
                156,
                "                            SaveQueue(node, i, queues, topic);"
            ],
            [
                162,
                "                            if (rds2.ContainsKey(topic)) SaveQueue(node, i, queues, topic);"
            ],
            [
                169,
                "        private void SaveQueue(RedisNode node, Int32 i, IList<RedisMessageQueue> queues, String topic)"
            ],
            [
                171,
                "            var mq = queues.FirstOrDefault(e => e.Db == i && e.Topic == topic);"
            ],
            [
                177,
                "                    Db = i,"
            ],
            [
                188,
                "            if (mq.Type.IsNullOrEmpty())"
            ],
            [
                189,
                "            {"
            ],
            [
                190,
                "                mq.Type = topic.EndsWithIgnoreCase(\":Delay\") ? \"Delay\" : \"Queue\";"
            ],
            [
                191,
                "            }"
            ]
        ]
    },
    "num_lines_added": 22,
    "num_lines_removed": 13
}