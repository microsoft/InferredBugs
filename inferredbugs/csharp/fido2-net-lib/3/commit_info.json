{
    "hash": "ff1f8d384e0bfe9c03b63add0b92761839c375d0",
    "message": "Combine CoseToFido and VerifySigWithCoseKey",
    "file_num_lines": 376,
    "diff_parsed": {
        "added": [
            [
                30,
                ""
            ],
            [
                48,
                ""
            ],
            [
                49,
                "        public static bool VerifySigWithCoseKey(byte[] data, PeterO.Cbor.CBORObject coseKey, byte[] sig)"
            ],
            [
                51,
                "            // Validate that alg matches the algorithm of the credentialPublicKey in authenticatorData"
            ],
            [
                52,
                "            var kty = coseKey[PeterO.Cbor.CBORObject.FromObject(1)].AsInt32();"
            ],
            [
                53,
                "            var alg = coseKey[PeterO.Cbor.CBORObject.FromObject(3)].AsInt32();"
            ],
            [
                54,
                "            var crv = 0;"
            ],
            [
                55,
                "            if (1 == kty || 2 == kty) crv = coseKey[PeterO.Cbor.CBORObject.FromObject(-1)].AsInt32();"
            ],
            [
                60,
                "                        switch (alg) // https://www.iana.org/assignments/cose/cose.xhtml#algorithms"
            ],
            [
                61,
                "                        {"
            ],
            [
                62,
                "                            case -8:"
            ],
            [
                63,
                "                                switch (crv) // https://www.iana.org/assignments/cose/cose.xhtml#elliptic-curves"
            ],
            [
                64,
                "                                {"
            ],
            [
                65,
                "                                    case 6:"
            ],
            [
                66,
                "                                        throw new Fido2VerificationException(\"ALG_SIGN_ED25519_EDDSA_SHA512_RAW support not yet implmented\");"
            ],
            [
                67,
                "                                    default:"
            ],
            [
                68,
                "                                        throw new ArgumentOutOfRangeException(\"crv\");"
            ],
            [
                69,
                "                                }"
            ],
            [
                70,
                "                            default:"
            ],
            [
                71,
                "                                throw new ArgumentOutOfRangeException(\"alg\");"
            ],
            [
                72,
                "                        }"
            ],
            [
                76,
                "                        var point = new ECPoint"
            ],
            [
                77,
                "                        {"
            ],
            [
                78,
                "                            X = coseKey[PeterO.Cbor.CBORObject.FromObject(-2)].GetByteString(),"
            ],
            [
                79,
                "                            Y = coseKey[PeterO.Cbor.CBORObject.FromObject(-3)].GetByteString()"
            ],
            [
                80,
                "                        };"
            ],
            [
                81,
                "                        ECCurve curve = ECCurve.NamedCurves.nistP256;"
            ],
            [
                82,
                "                        switch (alg) // https://www.iana.org/assignments/cose/cose.xhtml#algorithms"
            ],
            [
                83,
                "                        {"
            ],
            [
                84,
                "                            case -7:"
            ],
            [
                85,
                "                                switch (crv) // https://www.iana.org/assignments/cose/cose.xhtml#elliptic-curves"
            ],
            [
                86,
                "                                {"
            ],
            [
                87,
                "                                    case 1:"
            ],
            [
                88,
                "                                    case 8:"
            ],
            [
                89,
                "                                        break;"
            ],
            [
                90,
                "                                    default:"
            ],
            [
                91,
                "                                        throw new ArgumentOutOfRangeException(\"crv\");"
            ],
            [
                92,
                "                                }"
            ],
            [
                93,
                "                                break;"
            ],
            [
                94,
                "                            case -35:"
            ],
            [
                95,
                "                                switch (crv) // https://www.iana.org/assignments/cose/cose.xhtml#elliptic-curves"
            ],
            [
                96,
                "                                {"
            ],
            [
                97,
                "                                    case 2:"
            ],
            [
                98,
                "                                        curve = ECCurve.NamedCurves.nistP384;"
            ],
            [
                99,
                "                                        break;"
            ],
            [
                100,
                "                                    default:"
            ],
            [
                101,
                "                                        throw new ArgumentOutOfRangeException(\"crv\");"
            ],
            [
                102,
                "                                }"
            ],
            [
                103,
                "                                break;"
            ],
            [
                104,
                "                            case -36:"
            ],
            [
                105,
                "                                switch (crv) // https://www.iana.org/assignments/cose/cose.xhtml#elliptic-curves"
            ],
            [
                106,
                "                                {"
            ],
            [
                107,
                "                                    case 3:"
            ],
            [
                108,
                "                                        curve = ECCurve.NamedCurves.nistP521;"
            ],
            [
                109,
                "                                        System.Diagnostics.Debug.WriteLine(BitConverter.ToString(sig).Replace(\"-\", \"\"));"
            ],
            [
                110,
                "                                        break;"
            ],
            [
                111,
                "                                    default:"
            ],
            [
                112,
                "                                        throw new ArgumentOutOfRangeException(\"crv\");"
            ],
            [
                113,
                "                                }"
            ],
            [
                114,
                "                                break;"
            ],
            [
                115,
                "                            default:"
            ],
            [
                116,
                "                                throw new ArgumentOutOfRangeException(\"alg\");"
            ],
            [
                117,
                "                        }"
            ],
            [
                118,
                "                        var cng = ECDsaCng.Create(new ECParameters"
            ],
            [
                119,
                "                        {"
            ],
            [
                120,
                "                            Q = point,"
            ],
            [
                121,
                "                            Curve = curve"
            ],
            [
                122,
                "                        });"
            ],
            [
                123,
                "                        var ecsig = SigFromEcDsaSig(sig);"
            ],
            [
                124,
                "                        System.Diagnostics.Debug.WriteLine(BitConverter.ToString(ecsig).Replace(\"-\", \"\"));"
            ],
            [
                125,
                "                        return cng.VerifyData(data, ecsig, algMap[alg]);"
            ],
            [
                129,
                "                        RSACng rsa = new RSACng();"
            ],
            [
                130,
                "                        rsa.ImportParameters("
            ],
            [
                131,
                "                            new RSAParameters()"
            ],
            [
                132,
                "                            {"
            ],
            [
                133,
                "                                Modulus = coseKey[PeterO.Cbor.CBORObject.FromObject(-1)].GetByteString(),"
            ],
            [
                134,
                "                                Exponent = coseKey[PeterO.Cbor.CBORObject.FromObject(-2)].GetByteString()"
            ],
            [
                135,
                "                            }"
            ],
            [
                136,
                "                        );"
            ],
            [
                137,
                "                        RSASignaturePadding padding = RSASignaturePadding.Pss;"
            ],
            [
                138,
                "                        switch (alg)"
            ],
            [
                139,
                "                        {"
            ],
            [
                141,
                "                            case -37:"
            ],
            [
                142,
                "                            case -38:"
            ],
            [
                143,
                "                            case -39:"
            ],
            [
                144,
                "                                break;"
            ],
            [
                145,
                ""
            ],
            [
                146,
                "                            case -65535:"
            ],
            [
                147,
                "                            case -257:"
            ],
            [
                148,
                "                            case -258:"
            ],
            [
                149,
                "                            case -259:"
            ],
            [
                150,
                "                                padding = RSASignaturePadding.Pkcs1;"
            ],
            [
                151,
                "                                break;"
            ],
            [
                152,
                "                            default:"
            ],
            [
                153,
                "                                throw new ArgumentOutOfRangeException(\"alg\");"
            ],
            [
                154,
                "                        }"
            ],
            [
                155,
                "                        return rsa.VerifyData(data, sig, algMap[alg], padding);"
            ],
            [
                156,
                "                    }"
            ],
            [
                158,
                "            throw new Fido2VerificationException(\"Missing or unknown keytype\");"
            ],
            [
                335,
                "                if (0x00 == ecDsaSig[offset])// && ((ecDsaSig[offset + 1] & (1 << 7)) != 0))"
            ]
        ],
        "deleted": [
            [
                47,
                "        public static string CoseToFido(Int32 kty, Int32 alg, Int32 crv)"
            ],
            [
                52,
                "                    switch (alg) // https://www.iana.org/assignments/cose/cose.xhtml#algorithms"
            ],
            [
                54,
                "                        case -8:"
            ],
            [
                55,
                "                            switch (crv) // https://www.iana.org/assignments/cose/cose.xhtml#elliptic-curves"
            ],
            [
                56,
                "                            {"
            ],
            [
                57,
                "                                case 6:"
            ],
            [
                58,
                "                                    return \"ALG_SIGN_ED25519_EDDSA_SHA256_RAW\";"
            ],
            [
                59,
                "                                default:"
            ],
            [
                60,
                "                                    throw new ArgumentOutOfRangeException(\"crv\");"
            ],
            [
                61,
                "                            }"
            ],
            [
                62,
                "                        default:"
            ],
            [
                63,
                "                            throw new ArgumentOutOfRangeException(\"alg\");"
            ],
            [
                66,
                "                    switch (alg) // https://www.iana.org/assignments/cose/cose.xhtml#algorithms"
            ],
            [
                68,
                "                        case -7:"
            ],
            [
                69,
                "                            switch (crv)"
            ],
            [
                70,
                "                            {"
            ],
            [
                71,
                "                                case 1:"
            ],
            [
                72,
                "                                    return \"ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW\";"
            ],
            [
                73,
                "                                case 8:"
            ],
            [
                74,
                "                                    return \"ALG_SIGN_SECP256K1_ECDSA_SHA256_RAW\";"
            ],
            [
                75,
                "                                default:"
            ],
            [
                76,
                "                                    throw new ArgumentOutOfRangeException(\"crv\");"
            ],
            [
                77,
                "                            }"
            ],
            [
                78,
                "                        case -35:"
            ],
            [
                79,
                "                            switch (crv)"
            ],
            [
                80,
                "                            {"
            ],
            [
                81,
                "                                case 2:"
            ],
            [
                82,
                "                                    return \"ALG_SIGN_SECP384R1_ECDSA_SHA384_RAW\";"
            ],
            [
                83,
                "                                default:"
            ],
            [
                84,
                "                                    throw new ArgumentOutOfRangeException(\"crv\");"
            ],
            [
                85,
                "                            }"
            ],
            [
                86,
                "                        case -36:"
            ],
            [
                87,
                "                            switch (crv)"
            ],
            [
                88,
                "                            {"
            ],
            [
                89,
                "                                case 3:"
            ],
            [
                90,
                "                                    return \"ALG_SIGN_SECP521R1_ECDSA_SHA512_RAW\";"
            ],
            [
                91,
                "                                default:"
            ],
            [
                92,
                "                                    throw new ArgumentOutOfRangeException(\"crv\");"
            ],
            [
                93,
                "                            }"
            ],
            [
                94,
                "                        default:"
            ],
            [
                95,
                "                            throw new ArgumentOutOfRangeException(\"alg\");"
            ],
            [
                98,
                "                    switch (alg) // https://www.iana.org/assignments/cose/cose.xhtml#algorithms"
            ],
            [
                100,
                "                        case -37:"
            ],
            [
                101,
                "                            return \"ALG_SIGN_RSASSA_PSS_SHA256_RAW\";"
            ],
            [
                102,
                "                        case -38:"
            ],
            [
                103,
                "                            return \"ALG_SIGN_RSASSA_PSS_SHA384_RAW\";"
            ],
            [
                104,
                "                        case -39:"
            ],
            [
                105,
                "                            return \"ALG_SIGN_RSASSA_PSS_SHA512_RAW\";"
            ],
            [
                106,
                "                        case -65535:"
            ],
            [
                107,
                "                            return \"ALG_SIGN_RSASSA_PKCSV15_SHA1_RAW\";"
            ],
            [
                108,
                "                        case -257:"
            ],
            [
                109,
                "                            return \"ALG_SIGN_RSASSA_PKCSV15_SHA256_RAW\";"
            ],
            [
                110,
                "                        case -258:"
            ],
            [
                111,
                "                            return \"ALG_SIGN_RSASSA_PKCSV15_SHA384_RAW\";"
            ],
            [
                112,
                "                        case -259:"
            ],
            [
                113,
                "                            return \"ALG_SIGN_RSASSA_PKCSV15_SHA512_RAW\";"
            ],
            [
                114,
                "                        default:"
            ],
            [
                115,
                "                            throw new ArgumentOutOfRangeException(\"alg\");"
            ],
            [
                116,
                "                    }"
            ],
            [
                117,
                "                case 4: // Symmetric"
            ],
            [
                118,
                "                    throw new Fido2VerificationException(\"Symmetric keys not supported\");"
            ],
            [
                119,
                "                default:"
            ],
            [
                120,
                "                    throw new ArgumentOutOfRangeException(\"kty\");"
            ],
            [
                121,
                "            }"
            ],
            [
                122,
                "        }"
            ],
            [
                123,
                "        public static bool VerifySigWithCoseKey(byte[] data, PeterO.Cbor.CBORObject coseKey, byte[] sig)"
            ],
            [
                124,
                "        {"
            ],
            [
                125,
                "            // Validate that alg matches the algorithm of the credentialPublicKey in authenticatorData"
            ],
            [
                126,
                "            var coseKty = coseKey[PeterO.Cbor.CBORObject.FromObject(1)].AsInt32();"
            ],
            [
                127,
                "            var coseAlg = coseKey[PeterO.Cbor.CBORObject.FromObject(3)].AsInt32();"
            ],
            [
                128,
                "            var packedCrv = 0;"
            ],
            [
                129,
                "            if (1 == coseKty || 2 == coseKty) packedCrv = coseKey[PeterO.Cbor.CBORObject.FromObject(-1)].AsInt32();"
            ],
            [
                130,
                "            var FidoAlg = CoseToFido(coseKty, coseAlg, packedCrv);"
            ],
            [
                131,
                "            if (1 == coseKty)"
            ],
            [
                132,
                "            {"
            ],
            [
                133,
                "                if (true == FidoAlg.Equals(\"ALG_SIGN_ED25519_EDDSA_SHA512_RAW\")) throw new Fido2VerificationException(\"ALG_SIGN_ED25519_EDDSA_SHA512_RAW support not yet implmented\");"
            ],
            [
                134,
                "                else throw new Fido2VerificationException(\"Unknown algorithm\");"
            ],
            [
                135,
                "            }"
            ],
            [
                136,
                "            else if (2 == coseKty)"
            ],
            [
                137,
                "            {"
            ],
            [
                138,
                "                var curve = ECCurve.NamedCurves.nistP256;"
            ],
            [
                139,
                "                if (FidoAlg.Equals(\"ALG_SIGN_SECP384R1_ECDSA_SHA384_RAW\")) curve = ECCurve.NamedCurves.nistP384;"
            ],
            [
                140,
                "                if (FidoAlg.Equals(\"ALG_SIGN_SECP521R1_ECDSA_SHA512_RAW\")) curve = ECCurve.NamedCurves.nistP521;"
            ],
            [
                141,
                "                var cng = ECDsaCng.Create(new ECParameters"
            ],
            [
                142,
                "                {"
            ],
            [
                143,
                "                    Curve = curve,"
            ],
            [
                144,
                "                    Q = new ECPoint"
            ],
            [
                145,
                "                    {"
            ],
            [
                146,
                "                        X = coseKey[PeterO.Cbor.CBORObject.FromObject(-2)].GetByteString(),"
            ],
            [
                147,
                "                        Y = coseKey[PeterO.Cbor.CBORObject.FromObject(-3)].GetByteString()"
            ],
            [
                148,
                "                    }"
            ],
            [
                149,
                "                });"
            ],
            [
                150,
                "                if (FidoAlg.Equals(\"ALG_SIGN_SECP521R1_ECDSA_SHA512_RAW\")) System.Diagnostics.Debug.WriteLine(BitConverter.ToString(sig).Replace(\"-\", \"\"));"
            ],
            [
                151,
                "                var ecsig = SigFromEcDsaSig(sig);"
            ],
            [
                152,
                "                if (FidoAlg.Equals(\"ALG_SIGN_SECP521R1_ECDSA_SHA512_RAW\")) System.Diagnostics.Debug.WriteLine(BitConverter.ToString(ecsig).Replace(\"-\", \"\"));"
            ],
            [
                153,
                "                // Verify that sig is a valid signature over the concatenation of authenticatorData and clientDataHash using the credential public key with alg"
            ],
            [
                154,
                "                return cng.VerifyData(data, ecsig, algMap[coseAlg]);"
            ],
            [
                155,
                "            }"
            ],
            [
                156,
                "            else if (3 == coseKty)"
            ],
            [
                157,
                "            {"
            ],
            [
                158,
                "                RSACng rsa = new RSACng();"
            ],
            [
                159,
                "                rsa.ImportParameters("
            ],
            [
                160,
                "                    new RSAParameters()"
            ],
            [
                161,
                "                    {"
            ],
            [
                162,
                "                        Modulus = coseKey[PeterO.Cbor.CBORObject.FromObject(-1)].GetByteString(),"
            ],
            [
                163,
                "                        Exponent = coseKey[PeterO.Cbor.CBORObject.FromObject(-2)].GetByteString()"
            ],
            [
                164,
                "                    }"
            ],
            [
                165,
                "                );"
            ],
            [
                167,
                "                if (FidoAlg.Contains(\"RSASSA_PKCSV15\"))"
            ],
            [
                168,
                "                    return rsa.VerifyData(data, sig, algMap[coseAlg], RSASignaturePadding.Pkcs1);"
            ],
            [
                169,
                "                if (FidoAlg.Contains(\"RSASSA_PSS\"))"
            ],
            [
                170,
                "                    return rsa.VerifyData(data, sig, algMap[coseAlg], RSASignaturePadding.Pss);"
            ],
            [
                172,
                "            else throw new Fido2VerificationException(\"Missing or unknown keytype\");"
            ],
            [
                173,
                "            return false;"
            ],
            [
                350,
                "                if ((0x00 == ecDsaSig[offset]) && ((ecDsaSig[offset + 1] & (1 << 7)) != 0))"
            ]
        ]
    },
    "num_lines_added": 100,
    "num_lines_removed": 115
}