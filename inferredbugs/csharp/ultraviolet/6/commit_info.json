{
    "hash": "ef7187e6933f6cd55dd37065c7ae66619fda2b2d",
    "message": "Added high watermark value to ExpandingPool",
    "file_num_lines": 70,
    "diff_parsed": {
        "added": [
            [
                18,
                "        {"
            ],
            [
                19,
                "            Create<T>(capacity, Int32.MaxValue, allocator);"
            ],
            [
                20,
                "        }"
            ],
            [
                21,
                ""
            ],
            [
                22,
                "        /// <summary>"
            ],
            [
                23,
                "        /// Creates a pool for the specified type with the specified initial capacity and allocator."
            ],
            [
                24,
                "        /// </summary>"
            ],
            [
                25,
                "        /// <typeparam name=\"T\">The type of object for which to create an expanding pool.</typeparam>"
            ],
            [
                26,
                "        /// <param name=\"capacity\">The pool's initial capacity.</param>"
            ],
            [
                27,
                "        /// <param name=\"watermark\">The pool's watermark value, if it must be created.</param>"
            ],
            [
                28,
                "        /// <param name=\"allocator\">The pool's instance allocator, if it must be created.</param>"
            ],
            [
                29,
                "        public void Create<T>(Int32 capacity, Int32 watermark, Func<T> allocator = null)"
            ],
            [
                32,
                "            Contract.EnsureRange(watermark >= 1, \"watermark\");"
            ],
            [
                33,
                "            Contract.EnsureRange(watermark >= capacity, \"watermark\");"
            ],
            [
                38,
                "            pools[typeof(T)] = new ExpandingPool<T>(capacity, watermark, allocator);"
            ],
            [
                102,
                "        {"
            ],
            [
                103,
                "            return Get<T>(capacity, Int32.MaxValue, allocator);"
            ],
            [
                104,
                "        }"
            ],
            [
                105,
                ""
            ],
            [
                106,
                "        /// <summary>"
            ],
            [
                107,
                "        /// Gets the pool for the specified type. If the pool does not exist, it will be created"
            ],
            [
                108,
                "        /// with the specified initial capacity and allocator."
            ],
            [
                109,
                "        /// </summary>"
            ],
            [
                110,
                "        /// <typeparam name=\"T\">The type of object for which to retrieve a pool.</typeparam>"
            ],
            [
                111,
                "        /// <param name=\"capacity\">The initial capacity of the pool, if it must be created.</param>"
            ],
            [
                112,
                "        /// <param name=\"watermark\">The pool's watermark value, if it must be created.</param>"
            ],
            [
                113,
                "        /// <param name=\"allocator\">The pool's instance allocator, if it must be created.</param>"
            ],
            [
                114,
                "        /// <returns>The pool for the specified type.</returns>"
            ],
            [
                115,
                "        public IPool<T> Get<T>(Int32 capacity, Int32 watermark, Func<T> allocator = null)"
            ],
            [
                118,
                "            Contract.EnsureRange(watermark >= 1, \"watermark\");"
            ],
            [
                119,
                "            Contract.EnsureRange(watermark >= capacity, \"watermark\");"
            ],
            [
                124,
                "                pool = new ExpandingPool<T>(capacity, watermark, allocator);"
            ]
        ],
        "deleted": [
            [
                24,
                "            pools[typeof(T)] = new ExpandingPool<T>(capacity, allocator);"
            ],
            [
                94,
                "                pool = new ExpandingPool<T>(capacity, allocator);"
            ]
        ]
    },
    "num_lines_added": 32,
    "num_lines_removed": 2
}