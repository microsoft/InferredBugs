        private bool Verify(Stream inputStream, Stream publicKeyStream)
        {
            PgpPublicKey publicKey = Utilities.ReadPublicKey(publicKeyStream);
            bool verified = false;

            System.IO.Stream encodedFile = PgpUtilities.GetDecoderStream(inputStream);
            PgpObjectFactory factory = new PgpObjectFactory(encodedFile);
            PgpObject pgpObject = factory.NextPgpObject();

            if (pgpObject is PgpCompressedData)
            {
                PgpPublicKeyEncryptedData publicKeyED = Utilities.ExtractPublicKeyEncryptedData(encodedFile);

                // Verify against public key ID and that of any sub keys
                if (publicKey.KeyId == publicKeyED.KeyId || publicKey.GetKeySignatures().Cast<PgpSignature>().Select(x => x.KeyId).Contains(publicKeyED.KeyId))
                {
                    verified = true;
                }
                else
                {
                    verified = false;
                }
            }
            else if (pgpObject is PgpEncryptedDataList)
            {
                PgpEncryptedDataList encryptedDataList = (PgpEncryptedDataList)pgpObject;
                PgpPublicKeyEncryptedData publicKeyED = Utilities.ExtractPublicKey(encryptedDataList);

                // Verify against public key ID and that of any sub keys
                if (publicKey.KeyId == publicKeyED.KeyId || publicKey.GetKeySignatures().Cast<PgpSignature>().Select(x => x.KeyId).Contains(publicKeyED.KeyId))
                {
                    verified = true;
                }
                else
                {
                    verified = false;
                }
            }
            else if (pgpObject is PgpOnePassSignatureList)
            {
                PgpOnePassSignatureList pgpOnePassSignatureList = (PgpOnePassSignatureList)pgpObject;
                PgpOnePassSignature pgpOnePassSignature = pgpOnePassSignatureList[0];

                // Verify against public key ID and that of any sub keys
                if (publicKey.KeyId == pgpOnePassSignature.KeyId || publicKey.GetKeySignatures().Cast<PgpSignature>().Select(x => x.KeyId).Contains(pgpOnePassSignature.KeyId))
                {
                    verified = true;
                }
                else
                {
                    verified = false;
                }
            }
            else
                throw new PgpException("Message is not a encrypted and signed file or simple signed file.");

            return verified;
        }