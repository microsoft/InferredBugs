{
    "hash": "cede4c734c4d0623ebf8cda0ab1179d3169123a9",
    "message": "Finished the AVL Tree implementation.",
    "file_num_lines": 165,
    "diff_parsed": {
        "added": [
            [
                14,
                ""
            ],
            [
                64,
                ""
            ],
            [
                70,
                ""
            ],
            [
                220,
                "            this._updateSubtreeSize(node.Parent);"
            ],
            [
                253,
                "            this._remove(node);"
            ]
        ],
        "deleted": [
            [
                14,
                ""
            ],
            [
                64,
                ""
            ],
            [
                70,
                ""
            ],
            [
                220,
                "            _updateSubtreeSize(node.Parent);"
            ],
            [
                253,
                "            _remove(node);"
            ],
            [
                259,
                "        /// <summary>"
            ],
            [
                260,
                "        /// Finds the minimum in tree"
            ],
            [
                261,
                "        /// </summary>"
            ],
            [
                262,
                "        /// <returns>Min</returns>"
            ],
            [
                263,
                "        public override T FindMin()"
            ],
            [
                264,
                "        {"
            ],
            [
                265,
                "            if (IsEmpty())"
            ],
            [
                266,
                "                throw new Exception(\"Tree is empty.\");"
            ],
            [
                267,
                ""
            ],
            [
                268,
                "            return base._findMinNode(Root).Value;"
            ],
            [
                269,
                "        }"
            ],
            [
                270,
                ""
            ],
            [
                271,
                "        /// <summary>"
            ],
            [
                272,
                "        /// Finds the maximum in tree"
            ],
            [
                273,
                "        /// </summary>"
            ],
            [
                274,
                "        /// <returns>Max</returns>"
            ],
            [
                275,
                "        public override T FindMax()"
            ],
            [
                276,
                "        {"
            ],
            [
                277,
                "            if (IsEmpty())"
            ],
            [
                278,
                "                throw new Exception(\"Tree is empty.\");"
            ],
            [
                279,
                ""
            ],
            [
                280,
                "            return base._findMaxNode(Root).Value;"
            ],
            [
                281,
                "        }"
            ],
            [
                282,
                ""
            ],
            [
                283,
                "        /// <summary>"
            ],
            [
                284,
                "        /// Find the item in the tree. Throws an exception if not found."
            ],
            [
                285,
                "        /// </summary>"
            ],
            [
                286,
                "        /// <param name=\"item\">Item to find.</param>"
            ],
            [
                287,
                "        /// <returns>Item.</returns>"
            ],
            [
                288,
                "        public override T Find(T item)"
            ],
            [
                289,
                "        {"
            ],
            [
                290,
                "            if (IsEmpty())"
            ],
            [
                291,
                "                throw new Exception(\"Tree is empty.\");"
            ],
            [
                292,
                ""
            ],
            [
                293,
                "            var node = base._findNode(Root, item);"
            ],
            [
                294,
                ""
            ],
            [
                295,
                "            if (node != null)"
            ],
            [
                296,
                "                return node.Value;"
            ],
            [
                297,
                "            else"
            ],
            [
                298,
                "                throw new Exception(\"Item was not found.\");"
            ],
            [
                299,
                "        }"
            ],
            [
                300,
                ""
            ],
            [
                301,
                "        /// <summary>"
            ],
            [
                302,
                "        /// Given a predicate function, find all the elements that match it."
            ],
            [
                303,
                "        /// </summary>"
            ],
            [
                304,
                "        /// <param name=\"searchPredicate\">The search predicate</param>"
            ],
            [
                305,
                "        /// <returns>ArrayList<T> of elements.</returns>"
            ],
            [
                306,
                "        public override List<T> FindAll(Predicate<T> searchPredicate)"
            ],
            [
                307,
                "        {"
            ],
            [
                308,
                "            var list = new List<T>();"
            ],
            [
                309,
                "            base._findAll(Root, searchPredicate, ref list);"
            ],
            [
                310,
                ""
            ],
            [
                311,
                "            return list;"
            ],
            [
                312,
                "        }"
            ],
            [
                313,
                ""
            ],
            [
                314,
                "        /// <summary>"
            ],
            [
                315,
                "        /// Sort the elements in this tree, using in-order traversal, and returns them."
            ],
            [
                316,
                "        /// </summary>"
            ],
            [
                317,
                "        public override List<T> Sort()"
            ],
            [
                318,
                "        {"
            ],
            [
                319,
                "            var list = new List<T>();"
            ],
            [
                320,
                "            base._inOrderTraverse(Root, ref list);"
            ],
            [
                321,
                ""
            ],
            [
                322,
                "            return list;"
            ],
            [
                323,
                "        }"
            ],
            [
                324,
                ""
            ]
        ]
    },
    "num_lines_added": 5,
    "num_lines_removed": 71
}