{
    "hash": "899a40d7f0e98969f36909c852ca59f4e48b35bc",
    "message": "Some cleanups",
    "file_num_lines": 133,
    "diff_parsed": {
        "added": [
            [
                140,
                "\t\t\tvar options = sslContext.Options;"
            ],
            [
                141,
                ""
            ],
            [
                143,
                "\t\t\tif (!EnumExtensions.HasFlag(enabledSslProtocols, SslProtocols.Ssl2))"
            ],
            [
                145,
                "\t\t\t\toptions |= SslOptions.SSL_OP_NO_SSLv2;"
            ],
            [
                147,
                ""
            ],
            [
                148,
                "\t\t\tif (!EnumExtensions.HasFlag(enabledSslProtocols, SslProtocols.Ssl3))"
            ],
            [
                150,
                "\t\t\t\toptions |= SslOptions.SSL_OP_NO_SSLv3;"
            ],
            [
                152,
                ""
            ],
            [
                153,
                "\t\t\tif (!EnumExtensions.HasFlag(enabledSslProtocols, SslProtocols.Tls))"
            ],
            [
                155,
                "\t\t\t\toptions |= SslOptions.SSL_OP_NO_TLSv1;"
            ],
            [
                158,
                "\t\t\t// Set the workaround options"
            ],
            [
                159,
                "\t\t\tsslContext.Options = options | SslOptions.SSL_OP_ALL;"
            ],
            [
                160,
                ""
            ],
            [
                163,
                ""
            ],
            [
                181,
                "\t\t\t\tsslContext.SetCertificateStore(new X509Store(caCerts, false));"
            ],
            [
                192,
                "\t\t\tsslContext.SetCipherList(SslCipher.MakeString(enabledSslProtocols, sslStrength));"
            ]
        ],
        "deleted": [
            [
                141,
                "\t\t\tif ((enabledSslProtocols & SslProtocols.Ssl2) != SslProtocols.Ssl2)"
            ],
            [
                143,
                "\t\t\t\tsslContext.Options |= SslOptions.SSL_OP_NO_SSLv2;"
            ],
            [
                145,
                "\t\t\tif ((enabledSslProtocols & SslProtocols.Ssl3) != SslProtocols.Ssl3 &&"
            ],
            [
                146,
                "\t\t\t    ((enabledSslProtocols & SslProtocols.Default) != SslProtocols.Default))"
            ],
            [
                148,
                "\t\t\t\t// no SSLv3 support"
            ],
            [
                149,
                "\t\t\t\tsslContext.Options |= SslOptions.SSL_OP_NO_SSLv3;"
            ],
            [
                151,
                "\t\t\tif ((enabledSslProtocols & SslProtocols.Tls) != SslProtocols.Tls &&"
            ],
            [
                152,
                "\t\t\t    (enabledSslProtocols & SslProtocols.Default) != SslProtocols.Default)"
            ],
            [
                154,
                "\t\t\t\tsslContext.Options |= SslOptions.SSL_OP_NO_TLSv1;"
            ],
            [
                159,
                "\t\t\t// Set the workaround options"
            ],
            [
                160,
                "\t\t\tsslContext.Options = SslOptions.SSL_OP_ALL;"
            ],
            [
                178,
                "\t\t\t\tvar cert_store = new X509Store(caCerts, false);"
            ],
            [
                179,
                "\t\t\t\tsslContext.SetCertificateStore(cert_store);"
            ],
            [
                190,
                "\t\t\tsslContext.SetCipherList(GetCipherString(false, enabledSslProtocols, sslStrength));"
            ]
        ]
    },
    "num_lines_added": 16,
    "num_lines_removed": 14
}