{
    "hash": "45ab140cb27d7d200a42be019b0814e7b0428bd8",
    "message": "resumable put ok",
    "file_num_lines": 89,
    "diff_parsed": {
        "added": [
            [
                4,
                "using QBox.Util;"
            ],
            [
                13,
                "        public static ResumablePutFileRet Mkblock(string host, Client client, Stream body, long length)"
            ],
            [
                15,
                "            string url = host + \"/mkblk/\" + Convert.ToString(length);"
            ],
            [
                16,
                "            CallRet callRet = client.PostWithBinary(url, \"application/octet-stream\", body, length);"
            ],
            [
                20,
                "        public static PutFileRet Mkfile(string host, Client client, string entryURI, long fsize,"
            ],
            [
                23,
                "            string url = host + \"/rs-mkfile/\" + Base64UrlSafe.Encode(entryURI) +"
            ],
            [
                27,
                "                url += \"/params/\" + Base64UrlSafe.Encode(callbackParam);"
            ],
            [
                31,
                "                url += \"/meta/\" + Base64UrlSafe.Encode(customMeta);"
            ],
            [
                45,
                "                body.Seek(0, SeekOrigin.Begin);"
            ],
            [
                46,
                "                CallRet ret= client.PostWithBinary(url, \"text/plain\", body, body.Length);"
            ],
            [
                57,
                "            string host = Config.UP_HOST;"
            ],
            [
                64,
                "                Console.WriteLine(\"ResumablePut ==> fsize: {0}, chunkCnt: {1}\", fsize, chunkCnt);"
            ],
            [
                74,
                "                        fs.Seek(i * ChunkSize, SeekOrigin.Begin);"
            ],
            [
                75,
                "                        ret = Mkblock(host, client, fs, chunkSize);"
            ],
            [
                79,
                "                            host = ret.Host;"
            ],
            [
                92,
                "            return Mkfile(host, client, entryURI, fsize, customMeta, callbackParam, ctxs);"
            ]
        ],
        "deleted": [
            [
                12,
                "        public static ResumablePutFileRet Mkblock(Client client, Stream body, long length)"
            ],
            [
                14,
                "            string url = Config.UP_HOST + \"/mkblk/\" + Convert.ToString(length);"
            ],
            [
                15,
                "            CallRet callRet = client.CallWithBinary(url, \"application/octet-stream\", body, length);"
            ],
            [
                19,
                "        public static PutFileRet Mkfile(Client client, string entryURI, long fsize,"
            ],
            [
                22,
                "            string url = Config.UP_HOST + \"/rs-mkfile/\" + Base64UrlSafe.Encode(entryURI) +"
            ],
            [
                26,
                "                url += \"/params/\" + callbackParam;"
            ],
            [
                30,
                "                url += \"/meta/\" + customMeta;"
            ],
            [
                44,
                "                CallRet ret= client.CallWithBinary(url, \"text/plain\", body, body.Length);"
            ],
            [
                70,
                "                        ret = Mkblock(client, fs, chunkSize);"
            ],
            [
                86,
                "            return Mkfile(client, entryURI, fsize, customMeta, callbackParam, ctxs);"
            ]
        ]
    },
    "num_lines_added": 16,
    "num_lines_removed": 10
}