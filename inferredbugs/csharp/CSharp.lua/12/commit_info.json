{
    "hash": "1175189ae8a08f680141292f5224e9acedd10825",
    "message": "fix typo",
    "file_num_lines": 1295,
    "diff_parsed": {
        "added": [
            [
                29,
                "    private readonly Stack<LuaIdentifierNameSyntax> conditionalTemps_ = new();"
            ],
            [
                77,
                "          Contract.Assert(node.ArgumentList!.Arguments.Count == 1);"
            ],
            [
                81,
                "          var expressions = node.ArgumentList!.Arguments.Select(i => i.Expression.AcceptExpression(this));"
            ],
            [
                88,
                "        if (type?.Kind == SymbolKind.NamedType) {"
            ],
            [
                91,
                "            Contract.Assert(node.ArgumentList!.Arguments.Count == 1);"
            ],
            [
                97,
                "        Contract.Assert(!node.ArgumentList!.Arguments.Any());"
            ],
            [
                115,
                "            invocation.ArgumentList.Arguments.AddRange(argumentList!.Arguments);"
            ],
            [
                188,
                "      Contract.Assert(symbol != null);"
            ],
            [
                235,
                "      if (initializer?.Expressions.Count > 0) {"
            ],
            [
                279,
                "    private LuaInvocationExpressionSyntax BuildCallBaseConstructor(INamedTypeSymbol type, ITypeSymbol baseType, int ctorCounter) {"
            ],
            [
                283,
                "      if (ctorCounter > 0) {"
            ],
            [
                284,
                "        otherCtorInvoke = new LuaInvocationExpressionSyntax(new LuaTableIndexAccessExpressionSyntax(memberAccess, ctorCounter));"
            ],
            [
                295,
                "    private LuaInvocationExpressionSyntax BuildCallBaseConstructor(INamedTypeSymbol typeSymbol, out int ctorCounter) {"
            ],
            [
                296,
                "      ctorCounter = 0;"
            ],
            [
                301,
                "            ctorCounter = 1;"
            ],
            [
                304,
                "        var otherCtorInvoke = BuildCallBaseConstructor(typeSymbol, baseType, ctorCounter);"
            ],
            [
                341,
                "        int ctorIndex = GetConstructorIndex(initializerSymbol);"
            ],
            [
                344,
                "          Contract.Assert(ctorIndex != 0);"
            ],
            [
                346,
                "            LuaIdentifierNameSyntax thisCtor = LuaSyntaxNode.GetCtorNameString(ctorIndex);"
            ],
            [
                351,
                "          otherCtorInvoke = BuildCallBaseConstructor(symbol.ContainingType, initializerSymbol.ReceiverType, ctorIndex);"
            ],
            [
                479,
                "        if (delegateInvokeMethod!.ReturnsVoid) {"
            ],
            [
                516,
                "      if (type?.TypeKind == TypeKind.Enum) {"
            ],
            [
                585,
                "            var mathTypeInvocation = new LuaInvocationExpressionSyntax(LuaIdentifierNameSyntax.Is, temp, typeName);"
            ],
            [
                587,
                "              ifCondition = ifCondition.And(mathTypeInvocation);"
            ],
            [
                589,
                "              ifCondition = mathTypeInvocation;"
            ],
            [
                613,
                "            var declaration = catchNode.Declaration.Accept<LuaVariableDeclaratorSyntax>(this);"
            ],
            [
                614,
                "            declaration.Initializer = new LuaEqualsValueClauseSyntax(temp);"
            ],
            [
                615,
                "            body.Statements.Add(new LuaLocalVariableDeclaratorSyntax(declaration));"
            ],
            [
                618,
                "              when.AddParameter(declaration.Identifier);"
            ],
            [
                625,
                "            var declaration = catchNode.Declaration.Accept<LuaVariableDeclaratorSyntax>(this);"
            ],
            [
                626,
                "            declaration.Initializer = new LuaEqualsValueClauseSyntax(temp);"
            ],
            [
                627,
                "            block.Statements.Insert(0, new LuaLocalVariableDeclaratorSyntax(declaration));"
            ],
            [
                738,
                "        var finallyFunctionExpress = node.Finally.Accept<LuaFunctionExpressionSyntax>(this);"
            ],
            [
                739,
                "        tryInvocationExpression.AddArgument(finallyFunctionExpress);"
            ],
            [
                785,
                "      int position = indexs.Count - 1;"
            ],
            [
                786,
                "      while (position >= 1 && indexs[position] == indexs[position - 1] + 1) {"
            ],
            [
                787,
                "        --position;"
            ],
            [
                792,
                "      for (int i = position; i < indexs.Count; ++i) {"
            ],
            [
                805,
                "      block.Statements.RemoveRange(indexs[position]);"
            ],
            [
                807,
                "      indexs.RemoveRange(position);"
            ],
            [
                842,
                "      var symbol = semanticModel_.GetSymbolInfo(node.Parent!).Symbol;"
            ],
            [
                843,
                "      Contract.Assert(symbol != null);"
            ],
            [
                885,
                "      switch (node.Parent?.Kind()) {"
            ],
            [
                957,
                "      var symbol = semanticModel_.GetSymbolInfo(node).Symbol;"
            ],
            [
                958,
                "      Contract.Assert(symbol != null);"
            ],
            [
                986,
                "      Contract.Assert(typeSymbol != null);"
            ],
            [
                991,
                "      var propertySymbol = typeSymbol.GetMembers(\"Count\").Concat(typeSymbol.GetMembers(\"Length\")).OfType<IPropertySymbol>().First(i => !i.IsWriteOnly && i.Type.SpecialType == SpecialType.System_Int32);"
            ],
            [
                1075,
                "      if (symbol?.Kind == SymbolKind.Method) {"
            ],
            [
                1078,
                "        if (typeSymbol!.TypeKind == TypeKind.Array) {"
            ],
            [
                1089,
                "    private LuaExpressionSyntax VisitFormatInterpolatedStringExpression(InterpolatedStringExpressionSyntax node) {"
            ],
            [
                1150,
                "        return VisitFormatInterpolatedStringExpression(node);"
            ],
            [
                1170,
                "      Contract.Assert(symbol != null);"
            ],
            [
                1267,
                "          if (result.Document?.IsEmpty == false) {"
            ],
            [
                1297,
                "        if (leftType!.IsValueType) {"
            ],
            [
                1428,
                "      switch (node.Parent?.Kind()) {"
            ],
            [
                1430,
                "          var assignment = (AssignmentExpressionSyntax)node.Parent;"
            ],
            [
                1431,
                "          if (assignment.Left == node) {"
            ],
            [
                1438,
                "          if (assignment.Right.IsKind(SyntaxKind.TupleExpression) && assignment.Left.IsKind(SyntaxKind.TupleExpression)) {"
            ]
        ],
        "deleted": [
            [
                29,
                "    private readonly Stack<LuaIdentifierNameSyntax> conditionalTemps_ = new Stack<LuaIdentifierNameSyntax>();"
            ],
            [
                77,
                "          Contract.Assert(node.ArgumentList.Arguments.Count == 1);"
            ],
            [
                81,
                "          var expressions = node.ArgumentList.Arguments.Select(i => i.Expression.AcceptExpression(this));"
            ],
            [
                88,
                "        if (type != null && type.Kind == SymbolKind.NamedType) {"
            ],
            [
                91,
                "            Contract.Assert(node.ArgumentList.Arguments.Count == 1);"
            ],
            [
                97,
                "        Contract.Assert(!node.ArgumentList.Arguments.Any());"
            ],
            [
                115,
                "            invocation.ArgumentList.Arguments.AddRange(argumentList.Arguments);"
            ],
            [
                234,
                "      if (initializer != null && initializer.Expressions.Count > 0) {"
            ],
            [
                278,
                "    private LuaInvocationExpressionSyntax BuildCallBaseConstructor(INamedTypeSymbol type, ITypeSymbol baseType, int ctroCounter) {"
            ],
            [
                282,
                "      if (ctroCounter > 0) {"
            ],
            [
                283,
                "        otherCtorInvoke = new LuaInvocationExpressionSyntax(new LuaTableIndexAccessExpressionSyntax(memberAccess, ctroCounter));"
            ],
            [
                294,
                "    private LuaInvocationExpressionSyntax BuildCallBaseConstructor(INamedTypeSymbol typeSymbol, out int ctroCounter) {"
            ],
            [
                295,
                "      ctroCounter = 0;"
            ],
            [
                300,
                "            ctroCounter = 1;"
            ],
            [
                303,
                "        var otherCtorInvoke = BuildCallBaseConstructor(typeSymbol, baseType, ctroCounter);"
            ],
            [
                340,
                "        int ctroIndex = GetConstructorIndex(initializerSymbol);"
            ],
            [
                343,
                "          Contract.Assert(ctroIndex != 0);"
            ],
            [
                345,
                "            LuaIdentifierNameSyntax thisCtor = LuaSyntaxNode.GetCtorNameString(ctroIndex);"
            ],
            [
                350,
                "          otherCtorInvoke = BuildCallBaseConstructor(symbol.ContainingType, initializerSymbol.ReceiverType, ctroIndex);"
            ],
            [
                478,
                "        if (delegateInvokeMethod.ReturnsVoid) {"
            ],
            [
                515,
                "      if (type != null && type.TypeKind == TypeKind.Enum) {"
            ],
            [
                584,
                "            var mathcTypeInvocation = new LuaInvocationExpressionSyntax(LuaIdentifierNameSyntax.Is, temp, typeName);"
            ],
            [
                586,
                "              ifCondition = ifCondition.And(mathcTypeInvocation);"
            ],
            [
                588,
                "              ifCondition = mathcTypeInvocation;"
            ],
            [
                612,
                "            var variableDeclarator = catchNode.Declaration.Accept<LuaVariableDeclaratorSyntax>(this);"
            ],
            [
                613,
                "            variableDeclarator.Initializer = new LuaEqualsValueClauseSyntax(temp);"
            ],
            [
                614,
                "            body.Statements.Add(new LuaLocalVariableDeclaratorSyntax(variableDeclarator));"
            ],
            [
                617,
                "              when.AddParameter(variableDeclarator.Identifier);"
            ],
            [
                624,
                "            var variableDeclarator = catchNode.Declaration.Accept<LuaVariableDeclaratorSyntax>(this);"
            ],
            [
                625,
                "            variableDeclarator.Initializer = new LuaEqualsValueClauseSyntax(temp);"
            ],
            [
                626,
                "            block.Statements.Insert(0, new LuaLocalVariableDeclaratorSyntax(variableDeclarator));"
            ],
            [
                737,
                "        var finallyfunctionExpress = node.Finally.Accept<LuaFunctionExpressionSyntax>(this);"
            ],
            [
                738,
                "        tryInvocationExpression.AddArgument(finallyfunctionExpress);"
            ],
            [
                784,
                "      int postion = indexs.Count - 1;"
            ],
            [
                785,
                "      while (postion >= 1 && indexs[postion] == indexs[postion - 1] + 1) {"
            ],
            [
                786,
                "        --postion;"
            ],
            [
                791,
                "      for (int i = postion; i < indexs.Count; ++i) {"
            ],
            [
                804,
                "      block.Statements.RemoveRange(indexs[postion]);"
            ],
            [
                806,
                "      indexs.RemoveRange(postion);"
            ],
            [
                841,
                "      var symbol = semanticModel_.GetSymbolInfo(node.Parent).Symbol;"
            ],
            [
                883,
                "      switch (node.Parent.Kind()) {"
            ],
            [
                955,
                "      ISymbol symbol = semanticModel_.GetSymbolInfo(node).Symbol;"
            ],
            [
                987,
                "      var propertySymbol = typeSymbol.GetMembers(\"Count\").Concat(typeSymbol.GetMembers(\"Length\")).OfType<IPropertySymbol>().Where(i => {"
            ],
            [
                988,
                "        return !i.IsWriteOnly && i.Type.SpecialType == SpecialType.System_Int32;"
            ],
            [
                989,
                "      }).First();"
            ],
            [
                1073,
                "      if (symbol != null && symbol.Kind == SymbolKind.Method) {"
            ],
            [
                1076,
                "        if (typeSymbol.TypeKind == TypeKind.Array) {"
            ],
            [
                1087,
                "    private LuaExpressionSyntax VisitForamtInterpolatedStringExpression(InterpolatedStringExpressionSyntax node) {"
            ],
            [
                1124,
                "      int index = 0;"
            ],
            [
                1132,
                "          ++index;"
            ],
            [
                1150,
                "        return VisitForamtInterpolatedStringExpression(node);"
            ],
            [
                1266,
                "          if (result.Document != null && !result.Document.IsEmpty) {"
            ],
            [
                1296,
                "        if (leftType.IsValueType) {"
            ],
            [
                1427,
                "      switch (node.Parent.Kind()) {"
            ],
            [
                1429,
                "          var assigment = (AssignmentExpressionSyntax)node.Parent;"
            ],
            [
                1430,
                "          if (assigment.Left == node) {"
            ],
            [
                1437,
                "          if (assigment.Right.IsKind(SyntaxKind.TupleExpression) && assigment.Left.IsKind(SyntaxKind.TupleExpression)) {"
            ]
        ]
    },
    "num_lines_added": 58,
    "num_lines_removed": 57
}