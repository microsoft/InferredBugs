{
    "hash": "1175189ae8a08f680141292f5224e9acedd10825",
    "message": "fix typo",
    "file_num_lines": 1954,
    "diff_parsed": {
        "added": [
            [
                33,
                "      private readonly HashSet<string> strings_ = new();"
            ],
            [
                34,
                "      private readonly HashSet<ISymbol> symbols_ = new();"
            ],
            [
                60,
                "    private static readonly Regex codeTemplateRegex_ = new(@\"(,?\\s*)\\{(\\*?[\\w|`]+)\\}\", RegexOptions.Compiled);"
            ],
            [
                61,
                "    private static readonly Regex unicodeRegex_ = new(@\"\\\\u([0-9a-fA-F]{4})\", RegexOptions.Compiled);"
            ],
            [
                62,
                "    private readonly Dictionary<ISymbol, LuaIdentifierNameSyntax> localReservedNames_ = new();"
            ],
            [
                63,
                "    private readonly Dictionary<LuaFunctionExpressionSyntax, FunctionUpValuesInfo> functionUpValues_ = new();"
            ],
            [
                65,
                "    private readonly Stack<bool> checks_ = new();"
            ],
            [
                110,
                "    private SyntaxNode FindParent(SyntaxNode node, Func<SyntaxNode, bool> match) {"
            ],
            [
                113,
                "        if (match(parent)) {"
            ],
            [
                126,
                "      var parent = FindParent(node, i => {"
            ],
            [
                150,
                "      return (parent, body);"
            ],
            [
                213,
                "        var localFunctionNode = (LocalFunctionStatementSyntax)symbol.GetDeclaringSyntaxNode();"
            ],
            [
                215,
                "        if (localFunctionNode.Modifiers.IsStatic() && IsStaticLocalMethodEnableAddToType(symbol)) {"
            ],
            [
                242,
                "    private static bool IsContinueExists(SyntaxNode node) {"
            ],
            [
                265,
                "            if (label.Value.ToString() == node.Expression!.ToString()) {"
            ],
            [
                310,
                "      var matches = codeTemplateRegex_.Matches(codeTemplate);"
            ],
            [
                312,
                "      foreach (Match match in matches) {"
            ],
            [
                395,
                "          if (typeSymbol.IsContainsInternalSymbol(symbol) && !IsMoreThanLocalVariables(symbol) && !IsMoreThanUpValues(symbol)) {"
            ],
            [
                552,
                "          return unicodeRegex_.Replace(text, m => $@\"\\u{{{m.Groups[1].Value}}}\");"
            ],
            [
                716,
                "      var type = semanticModel_.GetTypeInfo(conditionalWhenTrue!).Type;"
            ],
            [
                748,
                "    private bool IsImportTypeNameEnable(INamedTypeSymbol symbol) {"
            ],
            [
                790,
                "    private bool IsMoreThanUpValues(object nameStringOrSymbol) {"
            ],
            [
                795,
                "      const int kMaxCountUpValues = LuaSyntaxNode.kUpvaluesMaxCount - 2;"
            ],
            [
                798,
                "        var upValues = functionUpValues_.GetOrDefault(current);"
            ],
            [
                799,
                "        if (upValues != null) {"
            ],
            [
                800,
                "          if (!upValues.Contains(nameStringOrSymbol)) {"
            ],
            [
                801,
                "            if (upValues.Count >= kMaxCountUpValues) {"
            ],
            [
                804,
                "            upValues.Add(nameStringOrSymbol);"
            ],
            [
                807,
                "          upValues = new FunctionUpValuesInfo();"
            ],
            [
                808,
                "          functionUpValues_.Add(current, upValues);"
            ],
            [
                809,
                "          upValues.Add(nameStringOrSymbol);"
            ],
            [
                815,
                "    private bool IsImportFunctionUpValuesMax {"
            ],
            [
                817,
                "        const int kMaxCountUpValues = LuaSyntaxNode.kUpvaluesMaxCount - 1;  // System"
            ],
            [
                820,
                "        return usingDeclaresCount + genericDeclaresCount >= kMaxCountUpValues;"
            ],
            [
                826,
                "        if (!IsLuaNewest && IsMoreThanUpValues(newPrefix)) {"
            ],
            [
                833,
                "        if (IsImportFunctionUpValuesMax) {"
            ],
            [
                837,
                "        if (IsMoreThanUpValues(newPrefix)) {"
            ],
            [
                851,
                "      if (IsImportTypeNameEnable(symbol)) {"
            ],
            [
                871,
                "        if (!IsLuaNewest && IsMoreThanUpValues(name)) {"
            ],
            [
                878,
                "        if (IsImportFunctionUpValuesMax) {"
            ],
            [
                882,
                "        if (IsMoreThanUpValues(name)) {"
            ],
            [
                1218,
                "    private LuaExpressionSyntax GetRecordInterfaceTypeName(INamedTypeSymbol recordType) {"
            ],
            [
                1269,
                "      checks_.Push(isChecked);"
            ],
            [
                1273,
                "      checks_.Pop();"
            ],
            [
                1278,
                "        if (checks_.Count > 0) {"
            ],
            [
                1279,
                "          return checks_.Peek();"
            ],
            [
                1324,
                "    private LuaExpressionSyntax GetUserDefinedOperatorExpression(IMethodSymbol methodSymbol, ExpressionSyntax argument) {"
            ],
            [
                1326,
                "        () => VisitExpression(argument),"
            ],
            [
                1625,
                "      var increment = node.Incrementors.First();"
            ],
            [
                1626,
                "      switch (increment.Kind()) {"
            ],
            [
                1632,
                "          if (increment is PrefixUnaryExpressionSyntax prefixUnaryExpression) {"
            ],
            [
                1635,
                "            operand = ((PostfixUnaryExpressionSyntax)increment).Operand;"
            ],
            [
                1640,
                "          if (increment.IsKind(SyntaxKind.PreIncrementExpression) || increment.IsKind(SyntaxKind.PostIncrementExpression)) {"
            ],
            [
                1655,
                "          var assignment = (AssignmentExpressionSyntax)increment;"
            ],
            [
                1665,
                "          if (increment.IsKind(SyntaxKind.AddAssignmentExpression)) {"
            ],
            [
                1683,
                "      var declaredSymbol = (ILocalSymbol)semanticModel_.GetDeclaredSymbol(variable);"
            ],
            [
                1684,
                "      if (IsClosureVariableExists(declaredSymbol, node.Statement)) {"
            ],
            [
                1777,
                "    public int GetConstructorIndex(IMethodSymbol symbol) {"
            ],
            [
                1778,
                "      Contract.Assert(symbol.MethodKind == MethodKind.Constructor);"
            ],
            [
                1779,
                "      if (generator_.IsFromLuaModule(symbol.ContainingType)) {"
            ],
            [
                1780,
                "        var typeSymbol = (INamedTypeSymbol)symbol.ReceiverType;"
            ],
            [
                1789,
                "            } else if (symbol.IsImplicitlyDeclared) {"
            ],
            [
                1808,
                "          int index = ctors.IndexOf(symbol);"
            ],
            [
                1810,
                "          int ctorCounter = index + 1;"
            ],
            [
                1811,
                "          return ctorCounter;"
            ],
            [
                1941,
                "      var prevSemanticModel = semanticModel_;"
            ],
            [
                1965,
                "      semanticModel_ = prevSemanticModel;"
            ],
            [
                2189,
                "        refExpression = (RefExpressionSyntax)methodDeclaration.ExpressionBody!.Expression;"
            ],
            [
                2191,
                "      var fieldSymbol = (IFieldSymbol)semanticModel_.GetSymbolInfo(refExpression!.Expression).Symbol;"
            ]
        ],
        "deleted": [
            [
                33,
                "      private readonly HashSet<string> strings_ = new HashSet<string>();"
            ],
            [
                34,
                "      private readonly HashSet<ISymbol> symbols_ = new HashSet<ISymbol>();"
            ],
            [
                60,
                "    private static readonly Regex codeTemplateRegex_ = new Regex(@\"(,?\\s*)\\{(\\*?[\\w|`]+)\\}\", RegexOptions.Compiled);"
            ],
            [
                61,
                "    private static readonly Regex unicodeRegex_ = new Regex(@\"\\\\u([0-9a-fA-F]{4})\", RegexOptions.Compiled);"
            ],
            [
                62,
                "    private readonly Dictionary<ISymbol, LuaIdentifierNameSyntax> localReservedNames_ = new Dictionary<ISymbol, LuaIdentifierNameSyntax>();"
            ],
            [
                63,
                "    private readonly Dictionary<LuaFunctionExpressionSyntax, FunctionUpValuesInfo> functionUpValues_ = new Dictionary<LuaFunctionExpressionSyntax, FunctionUpValuesInfo>();"
            ],
            [
                65,
                "    private readonly Stack<bool> checkeds_ = new Stack<bool>();"
            ],
            [
                110,
                "    private SyntaxNode FindParent(SyntaxNode node, Func<SyntaxNode, bool> macth) {"
            ],
            [
                113,
                "        if (macth(parent)) {"
            ],
            [
                126,
                "      var parnet = FindParent(node, i => {"
            ],
            [
                150,
                "      return (parnet, body);"
            ],
            [
                213,
                "        var lcoalFunctionNode = (LocalFunctionStatementSyntax)symbol.GetDeclaringSyntaxNode();"
            ],
            [
                215,
                "        if (lcoalFunctionNode.Modifiers.IsStatic() && IsStaticLocalMethodEnableAddToType(symbol)) {"
            ],
            [
                242,
                "    private bool IsContinueExists(SyntaxNode node) {"
            ],
            [
                265,
                "            if (label.Value.ToString() == node.Expression.ToString()) {"
            ],
            [
                310,
                "      var matchs = codeTemplateRegex_.Matches(codeTemplate);"
            ],
            [
                312,
                "      foreach (Match match in matchs) {"
            ],
            [
                395,
                "          if (typeSymbol.IsContainsInternalSymbol(symbol) && !IsMoreThanLocalVariables(symbol) && !IsMoreThanUpvalues(symbol)) {"
            ],
            [
                552,
                "          return unicodeRegex_.Replace(text, m => {"
            ],
            [
                553,
                "            return $@\"\\u{{{m.Groups[1].Value}}}\";"
            ],
            [
                554,
                "          });"
            ],
            [
                718,
                "      var type = semanticModel_.GetTypeInfo(conditionalWhenTrue).Type;"
            ],
            [
                750,
                "    private bool IsImportTypeNameEnale(INamedTypeSymbol symbol) {"
            ],
            [
                792,
                "    private bool IsMoreThanUpvalues(object nameStringOrSymbol) {"
            ],
            [
                797,
                "      const int kMaxCountUpvalues = LuaSyntaxNode.kUpvaluesMaxCount - 2;"
            ],
            [
                800,
                "        var upvalues = functionUpValues_.GetOrDefault(current);"
            ],
            [
                801,
                "        if (upvalues != null) {"
            ],
            [
                802,
                "          if (!upvalues.Contains(nameStringOrSymbol)) {"
            ],
            [
                803,
                "            if (upvalues.Count >= kMaxCountUpvalues) {"
            ],
            [
                806,
                "            upvalues.Add(nameStringOrSymbol);"
            ],
            [
                809,
                "          upvalues = new FunctionUpValuesInfo();"
            ],
            [
                810,
                "          functionUpValues_.Add(current, upvalues);"
            ],
            [
                811,
                "          upvalues.Add(nameStringOrSymbol);"
            ],
            [
                817,
                "    private bool IsImportFunctionUpvaluesMax {"
            ],
            [
                819,
                "        const int kMaxCountUpvalues = LuaSyntaxNode.kUpvaluesMaxCount - 1;  // System"
            ],
            [
                822,
                "        return usingDeclaresCount + genericDeclaresCount >= kMaxCountUpvalues;"
            ],
            [
                828,
                "        if (!IsLuaNewest && IsMoreThanUpvalues(newPrefix)) {"
            ],
            [
                835,
                "        if (IsImportFunctionUpvaluesMax) {"
            ],
            [
                839,
                "        if (IsMoreThanUpvalues(newPrefix)) {"
            ],
            [
                853,
                "      if (IsImportTypeNameEnale(symbol)) {"
            ],
            [
                873,
                "        if (!IsLuaNewest && IsMoreThanUpvalues(name)) {"
            ],
            [
                880,
                "        if (IsImportFunctionUpvaluesMax) {"
            ],
            [
                884,
                "        if (IsMoreThanUpvalues(name)) {"
            ],
            [
                1220,
                "    private LuaExpressionSyntax GetRecordInerfaceTypeName(INamedTypeSymbol recordType) {"
            ],
            [
                1271,
                "      checkeds_.Push(isChecked);"
            ],
            [
                1275,
                "      checkeds_.Pop();"
            ],
            [
                1280,
                "        if (checkeds_.Count > 0) {"
            ],
            [
                1281,
                "          return checkeds_.Peek();"
            ],
            [
                1326,
                "    private LuaExpressionSyntax GetUserDefinedOperatorExpression(IMethodSymbol methodSymbol, ExpressionSyntax arguemt) {"
            ],
            [
                1328,
                "        () => VisitExpression(arguemt),"
            ],
            [
                1627,
                "      var incrementor = node.Incrementors.First();"
            ],
            [
                1628,
                "      switch (incrementor.Kind()) {"
            ],
            [
                1634,
                "          if (incrementor is PrefixUnaryExpressionSyntax prefixUnaryExpression) {"
            ],
            [
                1637,
                "            operand = ((PostfixUnaryExpressionSyntax)incrementor).Operand;"
            ],
            [
                1642,
                "          if (incrementor.IsKind(SyntaxKind.PreIncrementExpression) || incrementor.IsKind(SyntaxKind.PostIncrementExpression)) {"
            ],
            [
                1657,
                "          var assignment = (AssignmentExpressionSyntax)incrementor;"
            ],
            [
                1667,
                "          if (incrementor.IsKind(SyntaxKind.AddAssignmentExpression)) {"
            ],
            [
                1685,
                "      var variableSybmol = (ILocalSymbol)semanticModel_.GetDeclaredSymbol(variable);"
            ],
            [
                1686,
                "      if (IsClosureVariableExists(variableSybmol, node.Statement)) {"
            ],
            [
                1779,
                "    public int GetConstructorIndex(IMethodSymbol symbool) {"
            ],
            [
                1780,
                "      Contract.Assert(symbool.MethodKind == MethodKind.Constructor);"
            ],
            [
                1781,
                "      if (generator_.IsFromLuaModule(symbool.ContainingType)) {"
            ],
            [
                1782,
                "        var typeSymbol = (INamedTypeSymbol)symbool.ReceiverType;"
            ],
            [
                1791,
                "            } else if (symbool.IsImplicitlyDeclared) {"
            ],
            [
                1810,
                "          int index = ctors.IndexOf(symbool);"
            ],
            [
                1812,
                "          int ctroCounter = index + 1;"
            ],
            [
                1813,
                "          return ctroCounter;"
            ],
            [
                1943,
                "      var prevSemanticModel_ = semanticModel_;"
            ],
            [
                1967,
                "      semanticModel_ = prevSemanticModel_;"
            ],
            [
                2191,
                "        refExpression = (RefExpressionSyntax)methodDeclaration.ExpressionBody.Expression;"
            ],
            [
                2193,
                "      var fieldSymbol = (IFieldSymbol)semanticModel_.GetSymbolInfo(refExpression.Expression).Symbol;"
            ]
        ]
    },
    "num_lines_added": 69,
    "num_lines_removed": 71
}