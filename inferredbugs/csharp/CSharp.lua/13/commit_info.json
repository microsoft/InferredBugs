{
    "hash": "db8cfe29910948f348e1bedd0a21fedd34e283e5",
    "message": "fix struct.unpack & some typo",
    "file_num_lines": 4654,
    "diff_parsed": {
        "added": [
            [
                298,
                "    private LuaSpeaicalGenericType CheckSpecialGenericArgument(INamedTypeSymbol typeSymbol) {"
            ],
            [
                365,
                "        var genericArgument = CheckSpecialGenericArgument(typeSymbol);"
            ],
            [
                603,
                "      var returnTypeSymbol = (INamedTypeSymbol)symbol.ReturnType;"
            ],
            [
                604,
                "      string name = LuaSyntaxNode.Tokens.Yield + returnTypeSymbol.Name;"
            ],
            [
                615,
                "      if (returnTypeSymbol.IsGenericType) {"
            ],
            [
                616,
                "        var typeName = returnTypeSymbol.TypeArguments.First();"
            ],
            [
                3483,
                "      var variable = new LuaVariableDeclaratorSyntax(identifier);"
            ],
            [
                3485,
                "        variable.Initializer = node.Initializer.Accept<LuaEqualsValueClauseSyntax>(this);"
            ],
            [
                3487,
                "      return variable;"
            ],
            [
                3893,
                "        return new LuaConstLiteralExpression(new LuaStringLiteralExpressionSyntax(symbol!.Name), typeInfo.ToString());"
            ],
            [
                4439,
                "    private void CheckIncrementExpression(ExpressionSyntax operand, ref LuaExpressionSyntax expression, bool isAddOrAssignment) {"
            ],
            [
                4442,
                "        var method = symbol.GetMembers(\"op_Implicit\").OfType<IMethodSymbol>();"
            ],
            [
                4443,
                "        var methodSymbol = method.FirstOrDefault(i => isAddOrAssignment ? i.ReturnType.IsIntegerType() : i.ReturnType.EQ(symbol));"
            ],
            [
                4452,
                "      CheckIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4454,
                "      CheckIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4473,
                "      CheckIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4475,
                "      CheckIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4618,
                "        CheckIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4620,
                "        CheckIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4626,
                "        CheckIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4628,
                "        CheckIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4638,
                "        CheckIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4640,
                "        CheckIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4647,
                "        CheckIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4649,
                "        CheckIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4844,
                "      var curMethod = CurMethodInfoOrNull;"
            ],
            [
                4845,
                "      curMethod.HasYield = true;"
            ],
            [
                4852,
                "        if (curMethod.Symbol.IsAsync) {"
            ],
            [
                5008,
                "      var targetNullableElementType = targetType.NullableElemetType();"
            ],
            [
                5009,
                "      var originalNullableElementType = originalType.NullableElemetType();"
            ],
            [
                5010,
                "      if (targetNullableElementType != null) {"
            ],
            [
                5011,
                "        if (originalNullableElementType != null) {"
            ],
            [
                5020,
                "          var castExpression = BuildEnumAndNumberCastExpression(identifier, originalNullableElementType, targetNullableElementType);"
            ],
            [
                5031,
                "          return BuildEnumAndNumberCastExpression(expression, originalType, targetNullableElementType);"
            ],
            [
                5033,
                "      } else if (originalNullableElementType != null) {"
            ],
            [
                5036,
                "        return BuildEnumAndNumberCastExpression(expression, originalNullableElementType, targetType);"
            ],
            [
                5048,
                "      Contract.Assert(targetType != null);"
            ]
        ],
        "deleted": [
            [
                298,
                "    private LuaSpeaicalGenericType CheckSpeaicalGenericArgument(INamedTypeSymbol typeSymbol) {"
            ],
            [
                365,
                "        var genericArgument = CheckSpeaicalGenericArgument(typeSymbol);"
            ],
            [
                603,
                "      var retrurnTypeSymbol = (INamedTypeSymbol)symbol.ReturnType;"
            ],
            [
                604,
                "      string name = LuaSyntaxNode.Tokens.Yield + retrurnTypeSymbol.Name;"
            ],
            [
                615,
                "      if (retrurnTypeSymbol.IsGenericType) {"
            ],
            [
                616,
                "        var typeName = retrurnTypeSymbol.TypeArguments.First();"
            ],
            [
                3483,
                "      var variableDeclarator = new LuaVariableDeclaratorSyntax(identifier);"
            ],
            [
                3485,
                "        variableDeclarator.Initializer = node.Initializer.Accept<LuaEqualsValueClauseSyntax>(this);"
            ],
            [
                3487,
                "      return variableDeclarator;"
            ],
            [
                3893,
                "        return new LuaConstLiteralExpression(new LuaStringLiteralExpressionSyntax(symbol.Name), typeInfo.ToString());"
            ],
            [
                4439,
                "    private void ChecktIncrementExpression(ExpressionSyntax operand, ref LuaExpressionSyntax expression, bool isAddOrAssignment) {"
            ],
            [
                4442,
                "        var op_Implicits = symbol.GetMembers(\"op_Implicit\").OfType<IMethodSymbol>();"
            ],
            [
                4443,
                "        var methodSymbol = op_Implicits.FirstOrDefault(i => isAddOrAssignment ? i.ReturnType.IsIntegerType() : i.ReturnType.EQ(symbol));"
            ],
            [
                4452,
                "      ChecktIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4454,
                "      ChecktIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4473,
                "      ChecktIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4475,
                "      ChecktIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4618,
                "        ChecktIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4620,
                "        ChecktIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4626,
                "        ChecktIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4628,
                "        ChecktIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4638,
                "        ChecktIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4640,
                "        ChecktIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4647,
                "        ChecktIncrementExpression(node.Operand, ref left, true);"
            ],
            [
                4649,
                "        ChecktIncrementExpression(node.Operand, ref binary, false);"
            ],
            [
                4844,
                "      var curMehod = CurMethodInfoOrNull;"
            ],
            [
                4845,
                "      curMehod.HasYield = true;"
            ],
            [
                4852,
                "        if (curMehod.Symbol.IsAsync) {"
            ],
            [
                5008,
                "      var targetNullableElemetType = targetType.NullableElemetType();"
            ],
            [
                5009,
                "      var originalNullableElemetType = originalType.NullableElemetType();"
            ],
            [
                5010,
                "      if (targetNullableElemetType != null) {"
            ],
            [
                5011,
                "        if (originalNullableElemetType != null) {"
            ],
            [
                5020,
                "          var castExpression = BuildEnumAndNumberCastExpression(identifier, originalNullableElemetType, targetNullableElemetType);"
            ],
            [
                5031,
                "          return BuildEnumAndNumberCastExpression(expression, originalType, targetNullableElemetType);"
            ],
            [
                5033,
                "      } else if (originalNullableElemetType != null) {"
            ],
            [
                5036,
                "        return BuildEnumAndNumberCastExpression(expression, originalNullableElemetType, targetType);"
            ]
        ]
    },
    "num_lines_added": 37,
    "num_lines_removed": 36
}