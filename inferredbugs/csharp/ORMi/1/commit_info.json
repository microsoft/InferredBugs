{
    "hash": "25a666bc287c0d4c1ccb8a5d8dbe441b0d373087",
    "message": "Improved static and instance methods. Improved doc.",
    "file_num_lines": 64,
    "diff_parsed": {
        "added": [
            [
                16,
                "        /// <summary>"
            ],
            [
                17,
                "        /// Executes an WMI instance method with no parameter."
            ],
            [
                18,
                "        /// </summary>"
            ],
            [
                19,
                "        /// <param name=\"obj\">Instance which will be instanciated to call the method.</param>"
            ],
            [
                20,
                "        /// <returns></returns>"
            ],
            [
                37,
                "        /// <summary>"
            ],
            [
                38,
                "        /// Executes an instance method with parameters."
            ],
            [
                39,
                "        /// </summary>"
            ],
            [
                40,
                "        /// <param name=\"obj\">Instance which will be instanciated to call the method.</param>"
            ],
            [
                41,
                "        /// <param name=\"parameters\">Anonymous object with properties matching the parameter names of the method.</param>"
            ],
            [
                42,
                "        /// <returns></returns>"
            ],
            [
                47,
                "            var frame = new StackTrace().GetFrames().Skip(2).First(x => x.GetMethod().DeclaringType.Namespace != \"System.Dynamic\");"
            ],
            [
                48,
                ""
            ],
            [
                49,
                "            string methodName = frame.GetMethod().Name;"
            ],
            [
                67,
                "        /// <summary>"
            ],
            [
                68,
                "        /// Executes a static method without parameters."
            ],
            [
                69,
                "        /// </summary>"
            ],
            [
                70,
                "        /// <returns></returns>"
            ],
            [
                85,
                "        /// <summary>"
            ],
            [
                86,
                "        /// Executes a static method with parameters."
            ],
            [
                87,
                "        /// </summary>"
            ],
            [
                88,
                "        /// <param name=\"parameters\">Anonymous object with properties matching the WMI method parameters</param>"
            ],
            [
                89,
                "        /// <returns></returns>"
            ],
            [
                92,
                "            var frame = new StackTrace().GetFrames().Skip(2).First(x => x.GetMethod().DeclaringType.Namespace != \"System.Dynamic\");"
            ],
            [
                94,
                "            string methodName = frame.GetMethod().Name;"
            ],
            [
                95,
                ""
            ],
            [
                96,
                "            Type t = frame.GetMethod().ReflectedType;"
            ]
        ],
        "deleted": [
            [
                36,
                "            var mth = new StackTrace().GetFrame(1).GetMethod();"
            ],
            [
                37,
                "            string methodName = mth.Name;"
            ],
            [
                71,
                "            var mth = new StackTrace().GetFrame(1).GetMethod();"
            ],
            [
                72,
                "            string methodName = mth.Name;"
            ],
            [
                74,
                "            Type t = mth.ReflectedType;"
            ]
        ]
    },
    "num_lines_added": 27,
    "num_lines_removed": 5
}