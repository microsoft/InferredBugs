{
    "hash": "ae97a908b67be236289981ba4d8ace23ce2086bb",
    "message": "[GRAPHDB-57] LuceneIndex now using Dictionary for FieldName Strings + no more NumericFields (they are not queryable) + implemented GetEntriesInnerByField method",
    "file_num_lines": 244,
    "diff_parsed": {
        "added": [
            [
                24,
                "        public enum Fields { ID, INDEX_ID, VERTEX_ID, PROPERTY_ID, TEXT };"
            ],
            [
                25,
                "        internal static Dictionary<Fields, String> FieldNames = new Dictionary<Fields, string>()"
            ],
            [
                26,
                "        {"
            ],
            [
                27,
                "            { Fields.ID, \"id\" },"
            ],
            [
                28,
                "            { Fields.INDEX_ID, \"indexId\" },"
            ],
            [
                29,
                "            { Fields.VERTEX_ID, \"vertexId\" },"
            ],
            [
                30,
                "            { Fields.PROPERTY_ID, \"propertyId\" },"
            ],
            [
                31,
                "            { Fields.TEXT, \"Text\" }"
            ],
            [
                32,
                "        };"
            ],
            [
                33,
                ""
            ],
            [
                93,
                "              new Field(FieldNames[Fields.ID],"
            ],
            [
                102,
                "              new Field(FieldNames[Fields.INDEX_ID],"
            ],
            [
                110,
                "            Field vertexId ="
            ],
            [
                111,
                "              new Field(FieldNames[Fields.VERTEX_ID],"
            ],
            [
                112,
                "              myEntry.VertexId.ToString(),"
            ],
            [
                114,
                "              Field.Index.ANALYZED,"
            ],
            [
                115,
                "              Field.TermVector.YES);"
            ],
            [
                121,
                "                Field propertyId ="
            ],
            [
                122,
                "                    new Field(FieldNames[Fields.PROPERTY_ID],"
            ],
            [
                123,
                "                    myEntry.PropertyId.ToString(),"
            ],
            [
                124,
                "                    Field.Store.YES,"
            ],
            [
                125,
                "                    Field.Index.ANALYZED,"
            ],
            [
                126,
                "                    Field.TermVector.YES);"
            ],
            [
                132,
                "              new Field(FieldNames[Fields.TEXT],"
            ],
            [
                159,
                "            Term delterm = new Term(LuceneIndex.FieldNames[LuceneIndex.Fields.ID], myEntry.Id);"
            ],
            [
                200,
                "                        delterms.Add(new Term(LuceneIndex.FieldNames[LuceneIndex.Fields.ID], entry.Id));"
            ],
            [
                209,
                "                var queryparser = new QueryParser(Lucene.Net.Util.Version.LUCENE_29, FieldNames[Fields.TEXT], new StandardAnalyzer(Lucene.Net.Util.Version.LUCENE_29));"
            ],
            [
                308,
                "            var queryparser = new QueryParser(Lucene.Net.Util.Version.LUCENE_29, FieldNames[Fields.TEXT], new StandardAnalyzer(Lucene.Net.Util.Version.LUCENE_29));"
            ],
            [
                345,
                "        /// <param name=\"myMaxResultsCount\">The count of maximum results to return (to limit the complexity).</param>"
            ],
            [
                360,
                "        public LuceneReturn GetEntriesInnerByField(int myMaxResultsCount, String myQuery, String myInnerQuery, Fields myInnerField)"
            ],
            [
                362,
                "            var outerqueryparser = new QueryParser(Lucene.Net.Util.Version.LUCENE_29, FieldNames[Fields.TEXT], new StandardAnalyzer(Lucene.Net.Util.Version.LUCENE_29));"
            ],
            [
                363,
                "            var innerqueryparser = new QueryParser(Lucene.Net.Util.Version.LUCENE_29, FieldNames[myInnerField], new StandardAnalyzer(Lucene.Net.Util.Version.LUCENE_29));"
            ],
            [
                364,
                "            Query outerquery = null;"
            ],
            [
                365,
                "            Query innerquery = null;"
            ],
            [
                366,
                "            Query query = null;"
            ],
            [
                367,
                "            try"
            ],
            [
                368,
                "            {"
            ],
            [
                369,
                "                outerquery = outerqueryparser.Parse(myQuery);"
            ],
            [
                370,
                "                innerquery = innerqueryparser.Parse(myInnerQuery);"
            ],
            [
                371,
                "                BooleanQuery boolquery = new BooleanQuery();"
            ],
            [
                372,
                "                boolquery.Add(outerquery, BooleanClause.Occur.MUST);"
            ],
            [
                373,
                "                boolquery.Add(innerquery, BooleanClause.Occur.MUST);"
            ],
            [
                374,
                "                query = (Query)boolquery;"
            ],
            [
                375,
                "            }"
            ],
            [
                376,
                "            catch (ParseException)"
            ],
            [
                377,
                "            {"
            ],
            [
                378,
                "                return null;"
            ],
            [
                379,
                "            }"
            ],
            [
                380,
                ""
            ],
            [
                381,
                "            var _IndexSearcher = new IndexSearcher(_IndexDirectory, true);"
            ],
            [
                382,
                "            var _Collector = TopScoreDocCollector.create(myMaxResultsCount, true);"
            ],
            [
                383,
                ""
            ],
            [
                384,
                "            _IndexSearcher.Search(query, _Collector);"
            ],
            [
                385,
                ""
            ],
            [
                386,
                "            return new LuceneReturn(_Collector, _IndexSearcher);"
            ]
        ],
        "deleted": [
            [
                83,
                "              new Field(\"id\","
            ],
            [
                92,
                "              new Field(\"indexId\","
            ],
            [
                100,
                "            NumericField vertexId ="
            ],
            [
                101,
                "              new NumericField(\"vertexId\","
            ],
            [
                103,
                "              false);"
            ],
            [
                104,
                ""
            ],
            [
                105,
                "            vertexId.SetLongValue(myEntry.VertexId);"
            ],
            [
                111,
                ""
            ],
            [
                112,
                "                NumericField propertyId ="
            ],
            [
                113,
                "                  new NumericField(\"propertyId\","
            ],
            [
                114,
                "                  Field.Store.YES,"
            ],
            [
                115,
                "                  false);"
            ],
            [
                116,
                ""
            ],
            [
                117,
                "                propertyId.SetLongValue((long)myEntry.PropertyId);"
            ],
            [
                123,
                "              new Field(\"text\","
            ],
            [
                150,
                "            Term delterm = new Term(\"id\", myEntry.Id);"
            ],
            [
                191,
                "                        delterms.Add(new Term(\"id\", entry.Id));"
            ],
            [
                200,
                "                var queryparser = new QueryParser(Lucene.Net.Util.Version.LUCENE_29, \"text\", new StandardAnalyzer(Lucene.Net.Util.Version.LUCENE_29));"
            ],
            [
                299,
                "            var queryparser = new QueryParser(Lucene.Net.Util.Version.LUCENE_29, \"text\", new StandardAnalyzer(Lucene.Net.Util.Version.LUCENE_29));"
            ],
            [
                350,
                "        public IEnumerable<LuceneEntry> GetEntriesInnerByField(String myQuery, String myInnerQuery, String myInnerField)"
            ],
            [
                352,
                "            throw new NotImplementedException();"
            ]
        ]
    },
    "num_lines_added": 55,
    "num_lines_removed": 21
}