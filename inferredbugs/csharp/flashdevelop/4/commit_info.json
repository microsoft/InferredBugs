{
    "hash": "ed98417b6ff3379ba2031ccf4e44eb591e1b95a2",
    "message": "AppMan fixes and improvements...",
    "file_num_lines": 1449,
    "diff_parsed": {
        "added": [
            [
                43,
                "        /**"
            ],
            [
                44,
                "        * Static type and state constants"
            ],
            [
                45,
                "        */"
            ],
            [
                46,
                "        public static String TYPE_LINK = \"Link\";"
            ],
            [
                47,
                "        public static String TYPE_EXECUTABLE = \"Executable\";"
            ],
            [
                48,
                "        public static String TYPE_ARCHIVE = \"Archive\";"
            ],
            [
                49,
                "        public static String STATE_INSTALLED = \"Installed\";"
            ],
            [
                50,
                "        public static String STATE_UPDATE = \"Updated\";"
            ],
            [
                51,
                "        public static String STATE_NEW = \"New\";"
            ],
            [
                52,
                ""
            ],
            [
                67,
                "            #if WIN32"
            ],
            [
                69,
                "            #endif"
            ],
            [
                80,
                ""
            ],
            [
                81,
                "        /// <summary>"
            ],
            [
                82,
                "        /// Handles the mouse wheel on hover"
            ],
            [
                83,
                "        /// </summary>"
            ],
            [
                84,
                "        public Boolean PreFilterMessage(ref Message m)"
            ],
            [
                85,
                "        {"
            ],
            [
                86,
                "            if (m.Msg == 0x20a) // WM_MOUSEWHEEL"
            ],
            [
                87,
                "            {"
            ],
            [
                88,
                "                Point pos = new Point(m.LParam.ToInt32() & 0xffff, m.LParam.ToInt32() >> 16);"
            ],
            [
                89,
                "                IntPtr hWnd = WindowFromPoint(pos);"
            ],
            [
                90,
                "                if (hWnd != IntPtr.Zero)"
            ],
            [
                91,
                "                {"
            ],
            [
                92,
                "                    if (Control.FromHandle(hWnd) != null)"
            ],
            [
                93,
                "                    {"
            ],
            [
                94,
                "                        SendMessage(hWnd, m.Msg, m.WParam, m.LParam);"
            ],
            [
                95,
                "                        return true;"
            ],
            [
                96,
                "                    }"
            ],
            [
                97,
                "                    else if (this.listView != null && hWnd == this.listView.Handle)"
            ],
            [
                98,
                "                    {"
            ],
            [
                99,
                "                        SendMessage(hWnd, m.Msg, m.WParam, m.LParam);"
            ],
            [
                100,
                "                        return true;"
            ],
            [
                101,
                "                    }"
            ],
            [
                102,
                "                }"
            ],
            [
                103,
                "            }"
            ],
            [
                104,
                "            return false;"
            ],
            [
                105,
                "        }"
            ],
            [
                336,
                ""
            ],
            [
                337,
                "        /// <summary>"
            ],
            [
                338,
                "        /// Opens the help when pressing help button or F1."
            ],
            [
                339,
                "        /// </summary>"
            ],
            [
                347,
                "        /// Save notification files to the notify paths."
            ],
            [
                404,
                ""
            ],
            [
                449,
                "                        if (state == STATE_INSTALLED || state == STATE_UPDATE)"
            ],
            [
                464,
                "                            this.TryDeleteEntryDir(entry);"
            ],
            [
                539,
                "                    if (state == STATE_NEW) item.Checked = true;"
            ],
            [
                563,
                "                    if (state == STATE_INSTALLED) item.Checked = true;"
            ],
            [
                587,
                "                    if (state == STATE_UPDATE) item.Checked = true;"
            ],
            [
                651,
                "                        if (state == STATE_INSTALLED || state == STATE_UPDATE) dele++;"
            ],
            [
                652,
                "                        if (state == STATE_NEW || state == STATE_UPDATE) inst++;"
            ],
            [
                681,
                "                    item.SubItems.Add(this.GetLocaleState(STATE_NEW));"
            ],
            [
                682,
                "                    item.SubItems.Add(this.GetLocaleType(entry.Type));"
            ],
            [
                764,
                "        /// <summary>"
            ],
            [
                765,
                "        /// Try to delete old entry directory"
            ],
            [
                766,
                "        /// </summary>"
            ],
            [
                767,
                "        private void TryDeleteEntryDir(DepEntry entry)"
            ],
            [
                768,
                "        {"
            ],
            [
                769,
                "            String folder = Path.Combine(PathHelper.APPS_DIR, entry.Id);"
            ],
            [
                770,
                "            // Sometimes we might get \"dir not empty\" error, try 10 times..."
            ],
            [
                771,
                "            for (Int32 attempts = 0; attempts < 10; attempts++)"
            ],
            [
                772,
                "            {"
            ],
            [
                773,
                "                try"
            ],
            [
                774,
                "                {"
            ],
            [
                775,
                "                    if (Directory.Exists(folder)) Directory.Delete(folder, true);"
            ],
            [
                776,
                "                    return;"
            ],
            [
                777,
                "                }"
            ],
            [
                778,
                "                catch (IOException) { Thread.Sleep(50); }"
            ],
            [
                779,
                "            }"
            ],
            [
                780,
                "            throw new Exception(this.localeData.DeleteDirError + folder);"
            ],
            [
                781,
                "        }"
            ],
            [
                782,
                ""
            ],
            [
                806,
                "        /// <summary>"
            ],
            [
                807,
                "        /// Gets the locale string for state"
            ],
            [
                808,
                "        /// </summary>"
            ],
            [
                809,
                "        private String GetLocaleState(String state)"
            ],
            [
                810,
                "        {"
            ],
            [
                811,
                "            if (state == STATE_INSTALLED) return this.localeData.StateInstalled;"
            ],
            [
                812,
                "            else if (state == STATE_UPDATE) return this.localeData.StateUpdate;"
            ],
            [
                813,
                "            else return this.localeData.StateNew;"
            ],
            [
                814,
                "        }"
            ],
            [
                815,
                ""
            ],
            [
                816,
                "        /// <summary>"
            ],
            [
                817,
                "        /// Gets the locale string for type"
            ],
            [
                818,
                "        /// </summary>"
            ],
            [
                819,
                "        private String GetLocaleType(String type)"
            ],
            [
                820,
                "        {"
            ],
            [
                821,
                "            if (type == TYPE_LINK) return this.localeData.TypeLink;"
            ],
            [
                822,
                "            else if (type == TYPE_EXECUTABLE) return this.localeData.TypeExecutable;"
            ],
            [
                823,
                "            else return this.localeData.TypeArchive;"
            ],
            [
                824,
                "        }"
            ],
            [
                825,
                ""
            ],
            [
                831,
                "            return entry.Type == TYPE_EXECUTABLE;"
            ],
            [
                832,
                "        }"
            ],
            [
                833,
                ""
            ],
            [
                834,
                "        /// <summary>"
            ],
            [
                835,
                "        /// Checks if entry is an executable."
            ],
            [
                836,
                "        /// </summary>"
            ],
            [
                837,
                "        private Boolean IsLink(DepEntry entry)"
            ],
            [
                838,
                "        {"
            ],
            [
                839,
                "            return entry.Type == TYPE_LINK;"
            ],
            [
                924,
                "                    if (state == STATE_NEW || state == STATE_UPDATE)"
            ],
            [
                947,
                "                    if (this.IsLink(this.curEntry)) this.RunExecutableProcess(file);"
            ],
            [
                948,
                "                    else this.fileQueue.Enqueue(file);"
            ],
            [
                949,
                "                }"
            ],
            [
                950,
                "                if (this.IsLink(this.curEntry))"
            ],
            [
                951,
                "                {"
            ],
            [
                952,
                "                    if (this.downloadQueue.Count > 0) this.DownloadNextFromQueue();"
            ],
            [
                953,
                "                    else"
            ],
            [
                954,
                "                    {"
            ],
            [
                955,
                "                        this.isLoading = false;"
            ],
            [
                956,
                "                        this.progressBar.Value = 0;"
            ],
            [
                957,
                "                        this.cancelButton.Enabled = false;"
            ],
            [
                958,
                "                        this.statusLabel.Text = this.localeData.AllItemsCompleted;"
            ],
            [
                959,
                "                        this.NoneLinkLabelLinkClicked(null, null);"
            ],
            [
                960,
                "                        this.UpdateButtonLabels();"
            ],
            [
                961,
                "                    }"
            ],
            [
                962,
                "                    return;"
            ],
            [
                1018,
                "                    if (this.downloadQueue.Count > 0) message += this.localeData.ContinueWithNextItem;"
            ],
            [
                1020,
                "                    if (this.downloadQueue.Count > 0) this.DownloadNextFromQueue();"
            ],
            [
                1024,
                "                        this.progressBar.Value = 0;"
            ],
            [
                1026,
                "                        this.statusLabel.Text = this.localeData.AllItemsCompleted;"
            ],
            [
                1027,
                "                        this.NoneLinkLabelLinkClicked(null, null);"
            ],
            [
                1028,
                "                        this.TryDeleteEntryDir(this.curEntry);"
            ],
            [
                1057,
                "                if (this.downloadQueue.Count > 0) message += this.localeData.ContinueWithNextItem;"
            ],
            [
                1058,
                "                DialogHelper.ShowError(message); // Show message first..."
            ],
            [
                1059,
                "                if (this.downloadQueue.Count > 0) this.DownloadNextFromQueue();"
            ],
            [
                1060,
                "                else"
            ],
            [
                1061,
                "                {"
            ],
            [
                1062,
                "                    this.isLoading = false;"
            ],
            [
                1063,
                "                    this.progressBar.Value = 0;"
            ],
            [
                1064,
                "                    this.cancelButton.Enabled = false;"
            ],
            [
                1065,
                "                    this.statusLabel.Text = this.localeData.AllItemsCompleted;"
            ],
            [
                1066,
                "                    this.NoneLinkLabelLinkClicked(null, null);"
            ],
            [
                1067,
                "                    this.TryDeleteEntryDir(this.curEntry);"
            ],
            [
                1068,
                "                    this.TryDeleteOldTempFiles();"
            ],
            [
                1069,
                "                    this.UpdateButtonLabels();"
            ],
            [
                1070,
                "                }"
            ],
            [
                1094,
                "                String message = this.localeData.ExtractingError + this.curFile + \".\\n\";"
            ],
            [
                1095,
                "                if (this.downloadQueue.Count > 0) message += this.localeData.ContinueWithNextItem;"
            ],
            [
                1096,
                "                DialogHelper.ShowError(message); // Show message first..."
            ],
            [
                1097,
                "                if (this.downloadQueue.Count > 0) this.DownloadNextFromQueue();"
            ],
            [
                1098,
                "                else"
            ],
            [
                1099,
                "                {"
            ],
            [
                1100,
                "                    this.isLoading = false;"
            ],
            [
                1101,
                "                    this.progressBar.Value = 0;"
            ],
            [
                1102,
                "                    this.cancelButton.Enabled = false;"
            ],
            [
                1103,
                "                    this.statusLabel.Text = this.localeData.AllItemsCompleted;"
            ],
            [
                1104,
                "                    this.NoneLinkLabelLinkClicked(null, null);"
            ],
            [
                1105,
                "                    this.TryDeleteEntryDir(this.curEntry);"
            ],
            [
                1106,
                "                    this.TryDeleteOldTempFiles();"
            ],
            [
                1107,
                "                    this.UpdateButtonLabels();"
            ],
            [
                1108,
                "                }"
            ],
            [
                1113,
                "        /// When file has been handled, continues to next file or download next item."
            ],
            [
                1202,
                "                List<String> entryFiles = new List<String>();"
            ],
            [
                1232,
                "                    item.SubItems[3].Text = this.GetLocaleState(STATE_NEW);"
            ],
            [
                1233,
                "                    this.entryStates[dep.Id] = STATE_NEW;"
            ],
            [
                1240,
                "                            String state = STATE_INSTALLED;"
            ],
            [
                1241,
                "                            String text = this.GetLocaleState(STATE_INSTALLED);"
            ],
            [
                1245,
                "                                text = this.GetLocaleState(STATE_UPDATE);"
            ],
            [
                1246,
                "                                state = STATE_UPDATE;"
            ],
            [
                1249,
                "                            this.entryStates[inst.Id] = state;"
            ],
            [
                1344,
                "        private Double curScale = Double.MinValue;"
            ],
            [
                1349,
                "        public Int32 ScaleValue(Int32 value)"
            ],
            [
                1351,
                "            return (Int32)(value * GetScale());"
            ],
            [
                1357,
                "        public Double GetScale()"
            ],
            [
                1359,
                "            if (curScale != Double.MinValue) return curScale;"
            ],
            [
                1407,
                "            this.Type = MainForm.TYPE_ARCHIVE;"
            ],
            [
                1420,
                "            else this.Type = MainForm.TYPE_ARCHIVE;"
            ],
            [
                1483,
                "        public String DeleteDirError = \"Error while deleting directory: \";"
            ],
            [
                1498,
                "        public String TypeExecutable = \"Executable\";"
            ],
            [
                1499,
                "        public String TypeArchive = \"Archive\";"
            ],
            [
                1500,
                "        public String TypeLink = \"Link\";"
            ]
        ],
        "deleted": [
            [
                305,
                "        /// Save notification files to the notify paths"
            ],
            [
                406,
                "                        if (state == this.localeData.StateInstalled || state == this.localeData.StateUpdate)"
            ],
            [
                421,
                "                            String folder = Path.Combine(PathHelper.APPS_DIR, entry.Id);"
            ],
            [
                422,
                "                            // Sometimes we might get \"dir not empty\" error, try 10 times..."
            ],
            [
                423,
                "                            for (Int32 attempts = 0; attempts < 10; attempts++)"
            ],
            [
                424,
                "                            {"
            ],
            [
                425,
                "                                try"
            ],
            [
                426,
                "                                {"
            ],
            [
                427,
                "                                    if (Directory.Exists(folder)) Directory.Delete(folder, true);"
            ],
            [
                428,
                "                                    return;"
            ],
            [
                429,
                "                                }"
            ],
            [
                430,
                "                                catch (IOException) { Thread.Sleep(50); }"
            ],
            [
                431,
                "                            }"
            ],
            [
                432,
                "                            throw new Exception(\"Could not delete the directory:\\n\" +  folder);"
            ],
            [
                507,
                "                    if (state == this.localeData.StateNew) item.Checked = true;"
            ],
            [
                531,
                "                    if (state == this.localeData.StateInstalled) item.Checked = true;"
            ],
            [
                555,
                "                    if (state == this.localeData.StateUpdate) item.Checked = true;"
            ],
            [
                583,
                "        /// <summary>"
            ],
            [
                584,
                "        /// Handles the mouse wheel on hover"
            ],
            [
                585,
                "        /// </summary>"
            ],
            [
                586,
                "        public Boolean PreFilterMessage(ref Message m)"
            ],
            [
                587,
                "        {"
            ],
            [
                588,
                "            #if WIN32"
            ],
            [
                589,
                "            if (m.Msg == 0x20a) // WM_MOUSEWHEEL"
            ],
            [
                590,
                "            {"
            ],
            [
                591,
                "                Point pos = new Point(m.LParam.ToInt32() & 0xffff, m.LParam.ToInt32() >> 16);"
            ],
            [
                592,
                "                IntPtr hWnd = WindowFromPoint(pos);"
            ],
            [
                593,
                "                if (hWnd != IntPtr.Zero)"
            ],
            [
                594,
                "                {"
            ],
            [
                595,
                "                    if (Control.FromHandle(hWnd) != null)"
            ],
            [
                596,
                "                    {"
            ],
            [
                597,
                "                        SendMessage(hWnd, m.Msg, m.WParam, m.LParam);"
            ],
            [
                598,
                "                        return true;"
            ],
            [
                599,
                "                    }"
            ],
            [
                600,
                "                    else if (this.listView != null && hWnd == this.listView.Handle)"
            ],
            [
                601,
                "                    {"
            ],
            [
                602,
                "                        SendMessage(hWnd, m.Msg, m.WParam, m.LParam);"
            ],
            [
                603,
                "                        return true;"
            ],
            [
                604,
                "                    }"
            ],
            [
                605,
                "                }"
            ],
            [
                606,
                "            }"
            ],
            [
                607,
                "            #endif"
            ],
            [
                608,
                "            return false;"
            ],
            [
                609,
                "        }"
            ],
            [
                610,
                ""
            ],
            [
                647,
                "                        if (state == this.localeData.StateInstalled || state == this.localeData.StateUpdate) dele++;"
            ],
            [
                648,
                "                        if (state == this.localeData.StateNew || state == this.localeData.StateUpdate) inst++;"
            ],
            [
                677,
                "                    item.SubItems.Add(this.localeData.StateNew);"
            ],
            [
                678,
                "                    item.SubItems.Add(this.IsExecutable(entry) ? this.localeData.ExecutableType : this.localeData.ArchiveType);"
            ],
            [
                788,
                "            return entry.Type == this.localeData.ExecutableType;"
            ],
            [
                873,
                "                    if (state == this.localeData.StateNew || state == this.localeData.StateUpdate)"
            ],
            [
                896,
                "                    this.fileQueue.Enqueue(file);"
            ],
            [
                952,
                "                    if (this.downloadQueue.Count > 1) message += this.localeData.ContinueWithNextItem;"
            ],
            [
                954,
                "                    if (this.downloadQueue.Count > 1) this.DownloadNextFromQueue();"
            ],
            [
                960,
                "                        this.progressBar.Value = 0;"
            ],
            [
                988,
                "                if (this.downloadQueue.Count > 1) message += this.localeData.ContinueWithNextItem;"
            ],
            [
                989,
                "                DialogHelper.ShowError(message);"
            ],
            [
                990,
                "                this.DownloadNextFromQueue();"
            ],
            [
                1014,
                "                DialogHelper.ShowError(this.localeData.ExtractingError + this.curFile + \".\\n\" + this.localeData.ContinueWithNextItem);"
            ],
            [
                1015,
                "                this.DownloadNextFromQueue();"
            ],
            [
                1020,
                "        /// When file hasd been handled, continues to next file or download next item."
            ],
            [
                1109,
                "                List<String> entryFiles = new List<string>();"
            ],
            [
                1139,
                "                    this.entryStates[dep.Id] = this.localeData.StateNew;"
            ],
            [
                1140,
                "                    item.SubItems[3].Text = this.localeData.StateNew;"
            ],
            [
                1147,
                "                            String text = this.localeData.StateInstalled;"
            ],
            [
                1151,
                "                                text = this.localeData.StateUpdate;"
            ],
            [
                1154,
                "                            this.entryStates[inst.Id] = text;"
            ],
            [
                1249,
                "        private double curScale = double.MinValue;"
            ],
            [
                1254,
                "        public int ScaleValue(Int32 value)"
            ],
            [
                1256,
                "            return (int)(value * GetScale());"
            ],
            [
                1262,
                "        public double GetScale()"
            ],
            [
                1264,
                "            if (curScale != double.MinValue) return curScale;"
            ],
            [
                1312,
                "            this.Type = \"Archive\";"
            ],
            [
                1325,
                "            else this.Type = \"Archive\";"
            ],
            [
                1402,
                "        public String ExecutableType = \"Executable\";"
            ],
            [
                1403,
                "        public String ArchiveType = \"Archive\";"
            ]
        ]
    },
    "num_lines_added": 173,
    "num_lines_removed": 76
}