{
    "hash": "bdeb607cc90d0c4c96b05d97d15ab81156da7514",
    "message": "Matrix Bug Fixes",
    "file_num_lines": 1648,
    "diff_parsed": {
        "added": [
            [
                354,
                "        #region GetCofactor"
            ],
            [
                355,
                ""
            ],
            [
                356,
                "        private static void GetCofactor(Matrix<T> a, Matrix<T> temp, int p, int q, int n)"
            ],
            [
                357,
                "        {"
            ],
            [
                358,
                "            int i = 0, j = 0;"
            ],
            [
                359,
                "            for (int row = 0; row < n; row++)"
            ],
            [
                360,
                "            {"
            ],
            [
                361,
                "                for (int col = 0; col < n; col++)"
            ],
            [
                362,
                "                {"
            ],
            [
                363,
                "                    if (row != p && col != q)"
            ],
            [
                364,
                "                    {"
            ],
            [
                365,
                "                        temp.Set(i, j++, a.Get(row, col));"
            ],
            [
                366,
                "                        if (j == n - 1)"
            ],
            [
                367,
                "                        {"
            ],
            [
                368,
                "                            j = 0;"
            ],
            [
                369,
                "                            i++;"
            ],
            [
                370,
                "                        }"
            ],
            [
                371,
                "                    }"
            ],
            [
                372,
                "                }"
            ],
            [
                373,
                "            }"
            ],
            [
                374,
                "        }"
            ],
            [
                375,
                ""
            ],
            [
                376,
                "        #endregion"
            ],
            [
                377,
                ""
            ],
            [
                378,
                "        #region GetDeterminant"
            ],
            [
                379,
                ""
            ],
            [
                380,
                "        private static T GetDeterminant(Matrix<T> a, int n)"
            ],
            [
                381,
                "        {"
            ],
            [
                382,
                "            T determinent = Constant<T>.Zero;"
            ],
            [
                383,
                "            if (n == 1)"
            ],
            [
                384,
                "            {"
            ],
            [
                385,
                "                return a.Get(0, 0);"
            ],
            [
                386,
                "            }"
            ],
            [
                387,
                "            Matrix<T> temp = new Matrix<T>(n, n);"
            ],
            [
                388,
                "            T sign = Constant<T>.One;"
            ],
            [
                389,
                "            for (int f = 0; f < n; f++)"
            ],
            [
                390,
                "            {"
            ],
            [
                391,
                "                GetCofactor(a, temp, 0, f, n);"
            ],
            [
                392,
                "                determinent ="
            ],
            [
                393,
                "                    Compute.Add(determinent,"
            ],
            [
                394,
                "                        Compute.Multiply(sign,"
            ],
            [
                395,
                "                            Compute.Multiply(a.Get(0, f),"
            ],
            [
                396,
                "                                GetDeterminant(temp, n - 1))));"
            ],
            [
                397,
                "                sign = Compute.Negate(sign);"
            ],
            [
                398,
                "            }"
            ],
            [
                399,
                "            return determinent;"
            ],
            [
                400,
                "        }"
            ],
            [
                401,
                ""
            ],
            [
                402,
                "        #endregion"
            ],
            [
                403,
                ""
            ],
            [
                1135,
                "            return GetDeterminant(a, a.Rows);"
            ],
            [
                1137,
                "            #region Old Version"
            ],
            [
                1139,
                "            //if (a is null)"
            ],
            [
                1140,
                "            //{"
            ],
            [
                1141,
                "            //    throw new ArgumentNullException(nameof(a));"
            ],
            [
                1142,
                "            //}"
            ],
            [
                1143,
                "            //if (!a.IsSquare)"
            ],
            [
                1144,
                "            //{"
            ],
            [
                1145,
                "            //    throw new MathematicsException(\"Argument invalid !(\" + nameof(a) + \".\" + nameof(a.IsSquare) + \")\");"
            ],
            [
                1146,
                "            //}"
            ],
            [
                1147,
                "            //T determinant = Constant<T>.One;"
            ],
            [
                1148,
                "            //Matrix<T> rref = a.Clone();"
            ],
            [
                1149,
                "            //int a_rows = a._rows;"
            ],
            [
                1150,
                "            //for (int i = 0; i < a_rows; i++)"
            ],
            [
                1151,
                "            //{"
            ],
            [
                1152,
                "            //    if (Compute.Equal(rref[i, i], Constant<T>.Zero))"
            ],
            [
                1153,
                "            //    {"
            ],
            [
                1154,
                "            //        for (int j = i + 1; j < rref.Rows; j++)"
            ],
            [
                1155,
                "            //        {"
            ],
            [
                1156,
                "            //            if (Compute.NotEqual(rref.Get(j, i), Constant<T>.Zero))"
            ],
            [
                1157,
                "            //            {"
            ],
            [
                1158,
                "            //                SwapRows(rref, i, j);"
            ],
            [
                1159,
                "            //                determinant = Compute.Multiply(determinant, Constant<T>.NegativeOne);"
            ],
            [
                1160,
                "            //            }"
            ],
            [
                1161,
                "            //        }"
            ],
            [
                1162,
                "            //    }"
            ],
            [
                1163,
                "            //    determinant = Compute.Multiply(determinant, rref.Get(i, i));"
            ],
            [
                1164,
                "            //    T temp_rowMultiplication = Compute.Divide(Constant<T>.One, rref.Get(i, i));"
            ],
            [
                1165,
                "            //    RowMultiplication(rref, i, temp_rowMultiplication);"
            ],
            [
                1166,
                "            //    for (int j = i + 1; j < rref.Rows; j++)"
            ],
            [
                1167,
                "            //    {"
            ],
            [
                1168,
                "            //        T scalar = Compute.Negate(rref.Get(j, i));"
            ],
            [
                1169,
                "            //        RowAddition(rref, j, i, scalar);"
            ],
            [
                1170,
                ""
            ],
            [
                1171,
                "            //    }"
            ],
            [
                1172,
                "            //    for (int j = i - 1; j >= 0; j--)"
            ],
            [
                1173,
                "            //    {"
            ],
            [
                1174,
                "            //        T scalar = Compute.Negate(rref.Get(j, i));"
            ],
            [
                1175,
                "            //        RowAddition(rref, j, i, scalar);"
            ],
            [
                1176,
                ""
            ],
            [
                1177,
                "            //    }"
            ],
            [
                1178,
                "            //}"
            ],
            [
                1179,
                "            //return determinant;"
            ],
            [
                1180,
                ""
            ],
            [
                1181,
                "            #endregion"
            ],
            [
                1685,
                "            if (!a.IsSquare)"
            ],
            [
                1687,
                "                throw new MathematicsException(\"Argument invalid !(\" + nameof(a) + \".\" + nameof(a.IsSquare) + \")\");"
            ],
            [
                1689,
                "            T determinent = Determinent(a);"
            ],
            [
                1690,
                "            if (Compute.Equal(determinent, Constant<T>.Zero))"
            ],
            [
                1692,
                "                throw new MathematicsException(\"Singular matrix encountered during inverse caluculation (cannot be inversed).\");"
            ],
            [
                1693,
                "            }"
            ],
            [
                1694,
                "            Matrix<T> adjoint = a.Adjoint();"
            ],
            [
                1695,
                "            int dimension = a.Rows;"
            ],
            [
                1696,
                "            int Length = a.Length;"
            ],
            [
                1697,
                "            if (object.ReferenceEquals(a, b))"
            ],
            [
                1698,
                "            {"
            ],
            [
                1699,
                "                b = a.Clone();"
            ],
            [
                1700,
                "            }"
            ],
            [
                1701,
                "            else if (b != null && b.Length == Length)"
            ],
            [
                1702,
                "            {"
            ],
            [
                1703,
                "                b._rows = dimension;"
            ],
            [
                1704,
                "                b._columns = dimension;"
            ],
            [
                1705,
                "            }"
            ],
            [
                1706,
                "            else"
            ],
            [
                1707,
                "            {"
            ],
            [
                1708,
                "                b = new Matrix<T>(dimension, dimension, Length);"
            ],
            [
                1709,
                "            }"
            ],
            [
                1710,
                "            for (int i = 0; i < dimension; i++)"
            ],
            [
                1711,
                "            {"
            ],
            [
                1712,
                "                for (int j = 0; j < dimension; j++)"
            ],
            [
                1714,
                "                    b.Set(i, j, Compute.Divide(adjoint.Get(i, j), determinent));"
            ],
            [
                1717,
                ""
            ],
            [
                1718,
                "            #region Old Version"
            ],
            [
                1719,
                ""
            ],
            [
                1720,
                "            //// Note: this method can be optimized..."
            ],
            [
                1721,
                ""
            ],
            [
                1722,
                "            //if (a is null)"
            ],
            [
                1723,
                "            //{"
            ],
            [
                1724,
                "            //    throw new ArgumentNullException(nameof(a));"
            ],
            [
                1725,
                "            //}"
            ],
            [
                1726,
                "            //if (Compute.Equal(Determinent(a), Constant<T>.Zero))"
            ],
            [
                1727,
                "            //{"
            ],
            [
                1728,
                "            //    throw new MathematicsException(\"inverse calculation failed.\");"
            ],
            [
                1729,
                "            //}"
            ],
            [
                1730,
                "            //Matrix<T> identity = FactoryIdentity(a.Rows, a.Columns);"
            ],
            [
                1731,
                "            //Matrix<T> rref = a.Clone();"
            ],
            [
                1732,
                "            //for (int i = 0; i < a.Rows; i++)"
            ],
            [
                1733,
                "            //{"
            ],
            [
                1734,
                "            //    if (Compute.Equal(rref[i, i], Constant<T>.Zero))"
            ],
            [
                1735,
                "            //    {"
            ],
            [
                1736,
                "            //        for (int j = i + 1; j < rref.Rows; j++)"
            ],
            [
                1737,
                "            //        {"
            ],
            [
                1738,
                "            //            if (Compute.NotEqual(rref[j, i], Constant<T>.Zero))"
            ],
            [
                1739,
                "            //            {"
            ],
            [
                1740,
                "            //                SwapRows(rref, i, j);"
            ],
            [
                1741,
                "            //                SwapRows(identity, i, j);"
            ],
            [
                1742,
                "            //            }"
            ],
            [
                1743,
                "            //        }"
            ],
            [
                1744,
                "            //    }"
            ],
            [
                1745,
                "            //    T identityRowMultiplier = Compute.Divide(Constant<T>.One, rref[i, i]);"
            ],
            [
                1746,
                "            //    RowMultiplication(identity, i, identityRowMultiplier);"
            ],
            [
                1747,
                "            //    RowMultiplication(rref, i, identityRowMultiplier);"
            ],
            [
                1748,
                "            //    for (int j = i + 1; j < rref.Rows; j++)"
            ],
            [
                1749,
                "            //    {"
            ],
            [
                1750,
                "            //        T rowAdder = Compute.Negate(rref[j, i]);"
            ],
            [
                1751,
                "            //        RowAddition(identity, j, i, rowAdder);"
            ],
            [
                1752,
                "            //        RowAddition(rref, j, i, rowAdder);"
            ],
            [
                1753,
                "            //    }"
            ],
            [
                1754,
                "            //    for (int j = i - 1; j >= 0; j--)"
            ],
            [
                1755,
                "            //    {"
            ],
            [
                1756,
                "            //        T rowAdder = Compute.Negate(rref[j, i]);"
            ],
            [
                1757,
                "            //        RowAddition(identity, j, i, rowAdder);"
            ],
            [
                1758,
                "            //        RowAddition(rref, j, i, rowAdder);"
            ],
            [
                1759,
                "            //    }"
            ],
            [
                1760,
                "            //}"
            ],
            [
                1761,
                "            //b = identity;"
            ],
            [
                1762,
                ""
            ],
            [
                1763,
                "            #endregion"
            ],
            [
                1828,
                "            int dimension = a.Rows;"
            ],
            [
                1829,
                "            int Length = a.Length;"
            ],
            [
                1832,
                "                b = a.Clone();"
            ],
            [
                1834,
                "            else if (b != null && b.Length == Length)"
            ],
            [
                1836,
                "                b._rows = dimension;"
            ],
            [
                1837,
                "                b._columns = dimension;"
            ],
            [
                1841,
                "                b = new Matrix<T>(dimension, dimension, Length);"
            ],
            [
                1843,
                ""
            ],
            [
                1844,
                "            if (dimension == 1)"
            ],
            [
                1846,
                "                b.Set(0, 0, Constant<T>.One);"
            ],
            [
                1847,
                "                return;"
            ],
            [
                1848,
                "            }"
            ],
            [
                1849,
                "            T sign = Constant<T>.One;"
            ],
            [
                1850,
                "            Matrix<T> temp = new Matrix<T>(dimension, dimension, Length);"
            ],
            [
                1851,
                "            for (int i=0; i<dimension; i++)"
            ],
            [
                1852,
                "            {"
            ],
            [
                1853,
                "                for (int j = 0; j < dimension; j++)"
            ],
            [
                1855,
                "                    GetCofactor(a, temp, i, j, dimension);"
            ],
            [
                1856,
                "                    sign = (i + j) % 2 == 0 ? Constant<T>.One : Constant<T>.NegativeOne;"
            ],
            [
                1857,
                "                    b.Set(j, i, Compute.Multiply(sign, GetDeterminant(temp, dimension - 1)));"
            ],
            [
                1859,
                "            }"
            ],
            [
                1860,
                ""
            ],
            [
                1861,
                "            #region Old Version"
            ],
            [
                1862,
                ""
            ],
            [
                1863,
                "            //if (a is null)"
            ],
            [
                1864,
                "            //{"
            ],
            [
                1865,
                "            //    throw new ArgumentNullException(nameof(a));"
            ],
            [
                1866,
                "            //}"
            ],
            [
                1867,
                "            //if (!a.IsSquare)"
            ],
            [
                1868,
                "            //{"
            ],
            [
                1869,
                "            //    throw new MathematicsException(\"Argument invalid !(\" + nameof(a) + \".\" + nameof(a.IsSquare) + \")\");"
            ],
            [
                1870,
                "            //}"
            ],
            [
                1871,
                "            //if (object.ReferenceEquals(a, b))"
            ],
            [
                1872,
                "            //{"
            ],
            [
                1873,
                "            //    a = a.Clone();"
            ],
            [
                1874,
                "            //}"
            ],
            [
                1875,
                "            //int Length = a.Length;"
            ],
            [
                1876,
                "            //int Rows = a.Rows;"
            ],
            [
                1877,
                "            //int Columns = a.Columns;"
            ],
            [
                1878,
                "            //if (b != null && b.Length == Length)"
            ],
            [
                1879,
                "            //{"
            ],
            [
                1880,
                "            //    b._rows = Rows;"
            ],
            [
                1881,
                "            //    b._columns = Columns;"
            ],
            [
                1882,
                "            //}"
            ],
            [
                1883,
                "            //else"
            ],
            [
                1884,
                "            //{"
            ],
            [
                1885,
                "            //    b = new Matrix<T>(Rows, Columns, Length);"
            ],
            [
                1886,
                "            //}"
            ],
            [
                1887,
                "            //for (int i = 0; i < Rows; i++)"
            ],
            [
                1888,
                "            //{"
            ],
            [
                1889,
                "            //    for (int j = 0; j < Columns; j++)"
            ],
            [
                1890,
                "            //    {"
            ],
            [
                1891,
                "            //        if (Compute.IsEven(a.Get(i, j)))"
            ],
            [
                1892,
                "            //        {"
            ],
            [
                1893,
                "            //            b[i, j] = Determinent(Minor(a, i, j));"
            ],
            [
                1894,
                "            //        }"
            ],
            [
                1895,
                "            //        else"
            ],
            [
                1896,
                "            //        {"
            ],
            [
                1897,
                "            //            b[i, j] = Compute.Negate(Determinent(Minor(a, i, j)));"
            ],
            [
                1898,
                "            //        }"
            ],
            [
                1899,
                "            //    }"
            ],
            [
                1900,
                "            //}"
            ],
            [
                1901,
                ""
            ],
            [
                1902,
                "            #endregion"
            ]
        ],
        "deleted": [
            [
                1085,
                "            T determinant = Constant<T>.One;"
            ],
            [
                1086,
                "            Matrix<T> rref = a.Clone();"
            ],
            [
                1087,
                "            int a_rows = a._rows;"
            ],
            [
                1088,
                "            for (int i = 0; i < a_rows; i++)"
            ],
            [
                1089,
                "            {"
            ],
            [
                1090,
                "                if (Compute.Equal(rref[i, i], Constant<T>.Zero))"
            ],
            [
                1091,
                "                {"
            ],
            [
                1092,
                "                    for (int j = i + 1; j < rref.Rows; j++)"
            ],
            [
                1093,
                "                    {"
            ],
            [
                1094,
                "                        if (Compute.NotEqual(rref.Get(j, i), Constant<T>.Zero))"
            ],
            [
                1095,
                "                        {"
            ],
            [
                1096,
                "                            SwapRows(rref, i, j);"
            ],
            [
                1097,
                "                            determinant = Compute.Multiply(determinant, Constant<T>.NegativeOne);"
            ],
            [
                1098,
                "                        }"
            ],
            [
                1099,
                "                    }"
            ],
            [
                1100,
                "                }"
            ],
            [
                1101,
                "                determinant = Compute.Multiply(determinant, rref.Get(i, i));"
            ],
            [
                1102,
                "                T temp_rowMultiplication = Compute.Divide(Constant<T>.One, rref.Get(i, i));"
            ],
            [
                1103,
                "                RowMultiplication(rref, i, temp_rowMultiplication);"
            ],
            [
                1104,
                "                for (int j = i + 1; j < rref.Rows; j++)"
            ],
            [
                1105,
                "                {"
            ],
            [
                1106,
                "                    T scalar = Compute.Negate(rref.Get(j, i));"
            ],
            [
                1107,
                "                    RowAddition(rref, j, i, scalar);"
            ],
            [
                1109,
                "                }"
            ],
            [
                1110,
                "                for (int j = i - 1; j >= 0; j--)"
            ],
            [
                1111,
                "                {"
            ],
            [
                1112,
                "                    T scalar = Compute.Negate(rref.Get(j, i));"
            ],
            [
                1113,
                "                    RowAddition(rref, j, i, scalar);"
            ],
            [
                1115,
                "                }"
            ],
            [
                1116,
                "            }"
            ],
            [
                1117,
                "            return determinant;"
            ],
            [
                1617,
                "            // Note: this method can be optimized..."
            ],
            [
                1618,
                ""
            ],
            [
                1623,
                "            if (Compute.Equal(Determinent(a), Constant<T>.Zero))"
            ],
            [
                1625,
                "                throw new MathematicsException(\"inverse calculation failed.\");"
            ],
            [
                1627,
                "            Matrix<T> identity = FactoryIdentity(a.Rows, a.Columns);"
            ],
            [
                1628,
                "            Matrix<T> rref = a.Clone();"
            ],
            [
                1629,
                "            for (int i = 0; i < a.Rows; i++)"
            ],
            [
                1631,
                "                if (Compute.Equal(rref[i, i], Constant<T>.Zero))"
            ],
            [
                1632,
                "                {"
            ],
            [
                1633,
                "                    for (int j = i + 1; j < rref.Rows; j++)"
            ],
            [
                1634,
                "                    {"
            ],
            [
                1635,
                "                        if (Compute.NotEqual(rref[j, i], Constant<T>.Zero))"
            ],
            [
                1636,
                "                        {"
            ],
            [
                1637,
                "                            SwapRows(rref, i, j);"
            ],
            [
                1638,
                "                            SwapRows(identity, i, j);"
            ],
            [
                1639,
                "                        }"
            ],
            [
                1640,
                "                    }"
            ],
            [
                1641,
                "                }"
            ],
            [
                1642,
                "                T identityRowMultiplier = Compute.Divide(Constant<T>.One, rref[i, i]);"
            ],
            [
                1643,
                "                RowMultiplication(identity, i, identityRowMultiplier);"
            ],
            [
                1644,
                "                RowMultiplication(rref, i, identityRowMultiplier);"
            ],
            [
                1645,
                "                for (int j = i + 1; j < rref.Rows; j++)"
            ],
            [
                1646,
                "                {"
            ],
            [
                1647,
                "                    T rowAdder = Compute.Negate(rref[j, i]);"
            ],
            [
                1648,
                "                    RowAddition(identity, j, i, rowAdder);"
            ],
            [
                1649,
                "                    RowAddition(rref, j, i, rowAdder);"
            ],
            [
                1650,
                "                }"
            ],
            [
                1651,
                "                for (int j = i - 1; j >= 0; j--)"
            ],
            [
                1653,
                "                    T rowAdder = Compute.Negate(rref[j, i]);"
            ],
            [
                1654,
                "                    RowAddition(identity, j, i, rowAdder);"
            ],
            [
                1655,
                "                    RowAddition(rref, j, i, rowAdder);"
            ],
            [
                1658,
                "            b = identity;"
            ],
            [
                1725,
                "                a = a.Clone();"
            ],
            [
                1727,
                "            int Length = a.Length;"
            ],
            [
                1728,
                "            int Rows = a.Rows;"
            ],
            [
                1729,
                "            int Columns = a.Columns;"
            ],
            [
                1730,
                "            if (b != null && b.Length == Length)"
            ],
            [
                1732,
                "                b._rows = Rows;"
            ],
            [
                1733,
                "                b._columns = Columns;"
            ],
            [
                1737,
                "                b = new Matrix<T>(Rows, Columns, Length);"
            ],
            [
                1739,
                "            for (int i = 0; i < Rows; i++)"
            ],
            [
                1741,
                "                for (int j = 0; j < Columns; j++)"
            ],
            [
                1743,
                "                    if (Compute.IsEven(a.Get(i, j)))"
            ],
            [
                1744,
                "                    {"
            ],
            [
                1745,
                "                        b[i, j] = Determinent(Minor(a, i, j));"
            ],
            [
                1746,
                "                    }"
            ],
            [
                1747,
                "                    else"
            ],
            [
                1748,
                "                    {"
            ],
            [
                1749,
                "                        b[i, j] = Compute.Negate(Determinent(Minor(a, i, j)));"
            ],
            [
                1750,
                "                    }"
            ],
            [
                1752,
                "            }"
            ]
        ]
    },
    "num_lines_added": 232,
    "num_lines_removed": 82
}