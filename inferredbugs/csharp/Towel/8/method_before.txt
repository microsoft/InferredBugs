        public static T Determinent(Matrix<T> a)
        {
            if (a is null)
            {
                throw new ArgumentNullException(nameof(a));
            }
            if (!a.IsSquare)
            {
                throw new MathematicsException("Argument invalid !(" + nameof(a) + "." + nameof(a.IsSquare) + ")");
            }
            T determinant = Constant<T>.One;
            Matrix<T> rref = a.Clone();
            int a_rows = a._rows;
            for (int i = 0; i < a_rows; i++)
            {
                if (Compute.Equal(rref[i, i], Constant<T>.Zero))
                {
                    for (int j = i + 1; j < rref.Rows; j++)
                    {
                        if (Compute.NotEqual(rref.Get(j, i), Constant<T>.Zero))
                        {
                            SwapRows(rref, i, j);
                            determinant = Compute.Multiply(determinant, Constant<T>.NegativeOne);
                        }
                    }
                }
                determinant = Compute.Multiply(determinant, rref.Get(i, i));
                T temp_rowMultiplication = Compute.Divide(Constant<T>.One, rref.Get(i, i));
                RowMultiplication(rref, i, temp_rowMultiplication);
                for (int j = i + 1; j < rref.Rows; j++)
                {
                    T scalar = Compute.Negate(rref.Get(j, i));
                    RowAddition(rref, j, i, scalar);

                }
                for (int j = i - 1; j >= 0; j--)
                {
                    T scalar = Compute.Negate(rref.Get(j, i));
                    RowAddition(rref, j, i, scalar);

                }
            }
            return determinant;
        }