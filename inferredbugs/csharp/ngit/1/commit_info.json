{
    "hash": "b24bbd339f6db11c11de09316491d8402d720d5b",
    "message": "Bump ngit to the latest jgit commit\n\nFixes two known bugs:\n1) A null reference when cloning to a file/directory path which already\nexists.\n2) An ArgumentNullException when calculating the 'blame' for a file\nwhen the file had uncommitted changes.\n\nThe latter was a jgit regression which was fixed in the last few days.",
    "file_num_lines": 280,
    "diff_parsed": {
        "added": [
            [
                276,
                "\t\t\t\tDirCacheBuilder builder = dc.Builder();"
            ],
            [
                278,
                "\t\t\t\ttw.AddTree(new DirCacheBuildIterator(builder));"
            ],
            [
                285,
                "\t\t\t\t\t// only keep file in index if it's in the commit"
            ],
            [
                286,
                "\t\t\t\t\tif (tree != null)"
            ],
            [
                289,
                "\t\t\t\t\t\tDirCacheEntry entry = new DirCacheEntry(tw.RawPath);"
            ],
            [
                290,
                "\t\t\t\t\t\tentry.FileMode = tree.EntryFileMode;"
            ],
            [
                291,
                "\t\t\t\t\t\tentry.SetObjectId(tree.EntryObjectId);"
            ],
            [
                292,
                "\t\t\t\t\t\tbuilder.Add(entry);"
            ],
            [
                295,
                "\t\t\t\tbuilder.Commit();"
            ],
            [
                317,
                "\t\t\t\tDirCacheBuilder builder = dc.Builder();"
            ],
            [
                327,
                "\t\t\t\t\t\t// Not in commit, don't add to new index"
            ],
            [
                340,
                "\t\t\t\t\tbuilder.Add(entry);"
            ],
            [
                342,
                "\t\t\t\tbuilder.Commit();"
            ]
        ],
        "deleted": [
            [
                273,
                "\t\t\tDirCacheEditor edit;"
            ],
            [
                277,
                "\t\t\t\tedit = dc.Editor();"
            ],
            [
                279,
                "\t\t\t\ttw.AddTree(new DirCacheIterator(dc));"
            ],
            [
                285,
                "\t\t\t\t\tstring path = tw.PathString;"
            ],
            [
                286,
                "\t\t\t\t\t// DirCacheIterator dci = tw.getTree(0, DirCacheIterator.class);"
            ],
            [
                288,
                "\t\t\t\t\tif (tree == null)"
            ],
            [
                289,
                "\t\t\t\t\t{"
            ],
            [
                290,
                "\t\t\t\t\t\t// file is not in the commit, remove from index"
            ],
            [
                291,
                "\t\t\t\t\t\tedit.Add(new DirCacheEditor.DeletePath(path));"
            ],
            [
                292,
                "\t\t\t\t\t}"
            ],
            [
                293,
                "\t\t\t\t\telse"
            ],
            [
                296,
                "\t\t\t\t\t\t// it seams that there is concurrent access to tree"
            ],
            [
                297,
                "\t\t\t\t\t\t// variable, therefore we need to keep references to"
            ],
            [
                298,
                "\t\t\t\t\t\t// entryFileMode and entryObjectId in local"
            ],
            [
                299,
                "\t\t\t\t\t\t// variables"
            ],
            [
                300,
                "\t\t\t\t\t\tFileMode entryFileMode = tree.EntryFileMode;"
            ],
            [
                301,
                "\t\t\t\t\t\tObjectId entryObjectId = tree.EntryObjectId;"
            ],
            [
                302,
                "\t\t\t\t\t\tedit.Add(new _PathEdit_305(entryFileMode, entryObjectId, path));"
            ],
            [
                305,
                "\t\t\t\tedit.Commit();"
            ],
            [
                320,
                "\t\tprivate sealed class _PathEdit_305 : DirCacheEditor.PathEdit"
            ],
            [
                321,
                "\t\t{"
            ],
            [
                322,
                "\t\t\tpublic _PathEdit_305(FileMode entryFileMode, ObjectId entryObjectId, string baseArg1"
            ],
            [
                323,
                "\t\t\t\t) : base(baseArg1)"
            ],
            [
                324,
                "\t\t\t{"
            ],
            [
                325,
                "\t\t\t\tthis.entryFileMode = entryFileMode;"
            ],
            [
                326,
                "\t\t\t\tthis.entryObjectId = entryObjectId;"
            ],
            [
                327,
                "\t\t\t}"
            ],
            [
                328,
                ""
            ],
            [
                329,
                "\t\t\tpublic override void Apply(DirCacheEntry ent)"
            ],
            [
                330,
                "\t\t\t{"
            ],
            [
                331,
                "\t\t\t\tent.FileMode = entryFileMode;"
            ],
            [
                332,
                "\t\t\t\tent.SetObjectId(entryObjectId);"
            ],
            [
                333,
                "\t\t\t\tent.LastModified = 0;"
            ],
            [
                334,
                "\t\t\t}"
            ],
            [
                335,
                ""
            ],
            [
                336,
                "\t\t\tprivate readonly FileMode entryFileMode;"
            ],
            [
                337,
                ""
            ],
            [
                338,
                "\t\t\tprivate readonly ObjectId entryObjectId;"
            ],
            [
                339,
                "\t\t}"
            ],
            [
                340,
                ""
            ],
            [
                348,
                "\t\t\t\tDirCacheEditor editor = dc.Editor();"
            ],
            [
                358,
                "\t\t\t\t\t\teditor.Add(new DirCacheEditor.DeletePath(walk.PathString));"
            ],
            [
                371,
                "\t\t\t\t\teditor.Add(new _PathEdit_356(entry, entry));"
            ],
            [
                373,
                "\t\t\t\teditor.Commit();"
            ],
            [
                385,
                "\t\tprivate sealed class _PathEdit_356 : DirCacheEditor.PathEdit"
            ],
            [
                386,
                "\t\t{"
            ],
            [
                387,
                "\t\t\tpublic _PathEdit_356(DirCacheEntry entry, DirCacheEntry baseArg1) : base(baseArg1"
            ],
            [
                388,
                "\t\t\t\t)"
            ],
            [
                389,
                "\t\t\t{"
            ],
            [
                390,
                "\t\t\t\tthis.entry = entry;"
            ],
            [
                391,
                "\t\t\t}"
            ],
            [
                392,
                ""
            ],
            [
                393,
                "\t\t\tpublic override void Apply(DirCacheEntry ent)"
            ],
            [
                394,
                "\t\t\t{"
            ],
            [
                395,
                "\t\t\t\tent.CopyMetaData(entry);"
            ],
            [
                396,
                "\t\t\t}"
            ],
            [
                397,
                ""
            ],
            [
                398,
                "\t\t\tprivate readonly DirCacheEntry entry;"
            ],
            [
                399,
                "\t\t}"
            ],
            [
                400,
                ""
            ]
        ]
    },
    "num_lines_added": 13,
    "num_lines_removed": 60
}