{
    "hash": "e772c1b110310e556e935a80c971d33dac547c00",
    "message": "Use ReadOnlyMemory<byte> in CloudEventFormatter\n\nThis sometimes feels a little cumbersome, with conversions that will\n*sometimes* involve copying data, but leaves room for optimization\nlater and is a more flexible API in the long term.\n\nSigned-off-by: Jon Skeet <jonskeet@google.com>",
    "file_num_lines": 856,
    "diff_parsed": {
        "added": [
            [
                21,
                "using CloudNative.CloudEvents.Core;"
            ],
            [
                50,
                "            var encoded = new JsonEventFormatter().EncodeStructuredModeMessage(cloudEvent, out var contentType);"
            ],
            [
                125,
                "            var encoded = formatter.EncodeStructuredModeMessage(cloudEvent, out _);"
            ],
            [
                237,
                "            var bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                258,
                "            var bytes = formatter.EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                273,
                "            var bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                291,
                "            var bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                292,
                "            Assert.Equal(\"\\\"some text\\\"\", BinaryDataUtilities.GetString(bytes, Encoding.GetEncoding(charset)));"
            ],
            [
                301,
                "            var bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                302,
                "            Assert.True(bytes.IsEmpty);"
            ],
            [
                313,
                "            var bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                314,
                "            Assert.Equal(\"some text\", BinaryDataUtilities.GetString(bytes, Encoding.GetEncoding(charset)));"
            ],
            [
                324,
                "            var bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                344,
                "            var bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                367,
                "            var bytes = formatter.EncodeBatchModeMessage(cloudEvents, out var contentType);"
            ],
            [
                387,
                "            var bytes = formatter.EncodeBatchModeMessage(cloudEvents, out var contentType);"
            ],
            [
                448,
                "            var bytes = Encoding.GetEncoding(charset).GetBytes(obj.ToString());"
            ],
            [
                471,
                "            var bytes = Encoding.GetEncoding(charset).GetBytes(obj.ToString());"
            ],
            [
                590,
                "            var bytes = Encoding.UTF8.GetBytes(obj.ToString());"
            ],
            [
                615,
                "            var bytes = Encoding.UTF8.GetBytes(obj.ToString());"
            ],
            [
                801,
                "            Assert.Equal(bytes, data);"
            ],
            [
                842,
                "            var bytes = Encoding.UTF8.GetBytes(array.ToString());"
            ],
            [
                862,
                "            var bytes = Encoding.UTF8.GetBytes(new JArray { obj }.ToString());"
            ],
            [
                942,
                "        internal static JsonElement ParseJson(ReadOnlyMemory<byte> data)"
            ],
            [
                955,
                "            var encoded = formatter.EncodeStructuredModeMessage(cloudEvent, out _);"
            ],
            [
                965,
                "            var bytes = Encoding.UTF8.GetBytes(obj.ToString());"
            ],
            [
                976,
                "            var bytes = Encoding.UTF8.GetBytes(array.ToString());"
            ]
        ],
        "deleted": [
            [
                49,
                "            byte[] encoded = new JsonEventFormatter().EncodeStructuredModeMessage(cloudEvent, out var contentType);"
            ],
            [
                124,
                "            byte[] encoded = formatter.EncodeStructuredModeMessage(cloudEvent, out _);"
            ],
            [
                236,
                "            byte[] bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                257,
                "            byte[] bytes = formatter.EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                272,
                "            byte[] bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                290,
                "            byte[] bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                291,
                "            Assert.Equal(\"\\\"some text\\\"\", Encoding.GetEncoding(charset).GetString(bytes));"
            ],
            [
                300,
                "            byte[] bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                301,
                "            Assert.Empty(bytes);"
            ],
            [
                312,
                "            byte[] bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                313,
                "            Assert.Equal(\"some text\", Encoding.GetEncoding(charset).GetString(bytes));"
            ],
            [
                323,
                "            byte[] bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                343,
                "            byte[] bytes = new JsonEventFormatter().EncodeBinaryModeEventData(cloudEvent);"
            ],
            [
                366,
                "            byte[] bytes = formatter.EncodeBatchModeMessage(cloudEvents, out var contentType);"
            ],
            [
                386,
                "            byte[] bytes = formatter.EncodeBatchModeMessage(cloudEvents, out var contentType);"
            ],
            [
                447,
                "            byte[] bytes = Encoding.GetEncoding(charset).GetBytes(obj.ToString());"
            ],
            [
                470,
                "            byte[] bytes = Encoding.GetEncoding(charset).GetBytes(obj.ToString());"
            ],
            [
                589,
                "            byte[] bytes = Encoding.UTF8.GetBytes(obj.ToString());"
            ],
            [
                614,
                "            byte[] bytes = Encoding.UTF8.GetBytes(obj.ToString());"
            ],
            [
                800,
                "            Assert.Same(bytes, data);"
            ],
            [
                841,
                "            byte[] bytes = Encoding.UTF8.GetBytes(array.ToString());"
            ],
            [
                861,
                "            byte[] bytes = Encoding.UTF8.GetBytes(new JArray { obj }.ToString());"
            ],
            [
                941,
                "        internal static JsonElement ParseJson(byte[] data)"
            ],
            [
                954,
                "            byte[] encoded = formatter.EncodeStructuredModeMessage(cloudEvent, out _);"
            ],
            [
                964,
                "            byte[] bytes = Encoding.UTF8.GetBytes(obj.ToString());"
            ],
            [
                975,
                "            byte[] bytes = Encoding.UTF8.GetBytes(array.ToString());"
            ]
        ]
    },
    "num_lines_added": 27,
    "num_lines_removed": 26
}