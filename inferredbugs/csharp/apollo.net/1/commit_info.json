{
    "hash": "bcb9a223f4ab8423503e5835c49de56716f4b962",
    "message": "ExecutionContext.SuppressFlow()",
    "file_num_lines": 215,
    "diff_parsed": {
        "added": [
            [
                16,
                "    private static readonly Func<Action<LogLevel, string, Exception?>> Logger = () =>"
            ],
            [
                17,
                "        LogManager.CreateLogger(typeof(RemoteConfigLongPollService));"
            ],
            [
                18,
                ""
            ],
            [
                29,
                "    private readonly ConcurrentDictionary<string, ApolloNotificationMessages>"
            ],
            [
                30,
                "        _remoteNotificationMessages; //namespaceName -> watchedKey -> notificationId"
            ],
            [
                31,
                ""
            ],
            [
                32,
                "    public RemoteConfigLongPollService(ConfigServiceLocator serviceLocator, HttpUtil httpUtil,"
            ],
            [
                33,
                "        IApolloOptions configUtil)"
            ],
            [
                47,
                "        var remoteConfigRepositories ="
            ],
            [
                48,
                "            _longPollNamespaces.GetOrAdd(namespaceName, _ => new HashSet<RemoteConfigRepository>());"
            ],
            [
                61,
                "        bool restoreFlow = false;"
            ],
            [
                64,
                "            if (!ExecutionContext.IsFlowSuppressed())"
            ],
            [
                65,
                "            {"
            ],
            [
                66,
                "                ExecutionContext.SuppressFlow();"
            ],
            [
                67,
                "                restoreFlow = true;"
            ],
            [
                68,
                "            }"
            ],
            [
                69,
                ""
            ],
            [
                77,
                "        finally"
            ],
            [
                78,
                "        {"
            ],
            [
                79,
                "            if (restoreFlow) ExecutionContext.RestoreFlow();"
            ],
            [
                80,
                "        }"
            ],
            [
                83,
                "    private async Task DoLongPollingRefresh(string appId, string cluster, string? dataCenter,"
            ],
            [
                84,
                "        CancellationToken cancellationToken)"
            ],
            [
                104,
                ""
            ],
            [
                105,
                "                var response = await _httpUtil"
            ],
            [
                107,
                "                    .DoGetAsync<ICollection<ApolloConfigNotification>>(url, 600000)"
            ],
            [
                109,
                "                    .DoGetAsync<IReadOnlyCollection<ApolloConfigNotification>>(url, 600000)"
            ],
            [
                111,
                "                    .ConfigureAwait(false);"
            ],
            [
                112,
                ""
            ],
            [
                114,
                ""
            ],
            [
                138,
                "                Logger().Warn("
            ],
            [
                139,
                "                    $\"Long polling failed, will retry in {sleepTimeInSecond} seconds. appId: {appId}, cluster: {cluster}, namespace: {string.Join(ConfigConsts.ClusterNamespaceSeparator, _longPollNamespaces.Keys)}, long polling url: {url}, reason: {ex.GetDetailMessage()}\");"
            ],
            [
                171,
                "            if (_longPollNamespaces.TryGetValue($\"{namespaceName}.{ConfigFileFormat.Properties.GetString()}\","
            ],
            [
                172,
                "                    out registries) && registries != null)"
            ],
            [
                176,
                ""
            ],
            [
                203,
                ""
            ],
            [
                217,
                "            if (string.IsNullOrEmpty(notification.NamespaceName) || notification.Messages == null ||"
            ],
            [
                218,
                "                notification.Messages.IsEmpty()) continue;"
            ],
            [
                241,
                ""
            ],
            [
                260,
                "        JsonConvert.SerializeObject(notificationsMap.Select(kvp => new ApolloConfigNotification"
            ],
            [
                261,
                "        {"
            ],
            [
                262,
                "            NamespaceName = kvp.Key,"
            ],
            [
                263,
                "            NotificationId = kvp.Value.GetValueOrDefault(InitNotificationId)"
            ],
            [
                264,
                "        }), JsonSettings);"
            ]
        ],
        "deleted": [
            [
                16,
                "    private static readonly Func<Action<LogLevel, string, Exception?>> Logger = () => LogManager.CreateLogger(typeof(RemoteConfigLongPollService));"
            ],
            [
                26,
                "    private readonly ConcurrentDictionary<string, ApolloNotificationMessages> _remoteNotificationMessages; //namespaceName -> watchedKey -> notificationId"
            ],
            [
                28,
                "    public RemoteConfigLongPollService(ConfigServiceLocator serviceLocator, HttpUtil httpUtil, IApolloOptions configUtil)"
            ],
            [
                42,
                "        var remoteConfigRepositories = _longPollNamespaces.GetOrAdd(namespaceName, _ => new HashSet<RemoteConfigRepository>());"
            ],
            [
                66,
                "    private async Task DoLongPollingRefresh(string appId, string cluster, string? dataCenter, CancellationToken cancellationToken)"
            ],
            [
                87,
                "                var response = await _httpUtil.DoGetAsync<ICollection<ApolloConfigNotification>>(url, 600000).ConfigureAwait(false);"
            ],
            [
                89,
                "                var response = await _httpUtil.DoGetAsync<IReadOnlyCollection<ApolloConfigNotification>>(url, 600000).ConfigureAwait(false);"
            ],
            [
                106,
                "                {"
            ],
            [
                108,
                "                }"
            ],
            [
                117,
                "                Logger().Warn($\"Long polling failed, will retry in {sleepTimeInSecond} seconds. appId: {appId}, cluster: {cluster}, namespace: {string.Join(ConfigConsts.ClusterNamespaceSeparator, _longPollNamespaces.Keys)}, long polling url: {url}, reason: {ex.GetDetailMessage()}\");"
            ],
            [
                149,
                "            if (_longPollNamespaces.TryGetValue($\"{namespaceName}.{ConfigFileFormat.Properties.GetString()}\", out registries) && registries != null)"
            ],
            [
                192,
                "            if (string.IsNullOrEmpty(notification.NamespaceName) || notification.Messages == null || notification.Messages.IsEmpty()) continue;"
            ],
            [
                233,
                "        JsonConvert.SerializeObject(notificationsMap"
            ],
            [
                234,
                "            .Select(kvp => new ApolloConfigNotification"
            ],
            [
                235,
                "            {"
            ],
            [
                236,
                "                NamespaceName = kvp.Key,"
            ],
            [
                237,
                "                NotificationId = kvp.Value.GetValueOrDefault(InitNotificationId)"
            ],
            [
                238,
                "            }), JsonSettings);"
            ]
        ]
    },
    "num_lines_added": 44,
    "num_lines_removed": 18
}