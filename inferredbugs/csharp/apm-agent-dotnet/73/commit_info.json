{
    "hash": "9ac03e5638c8373e27cd887a2c7cb2fbae897f2e",
    "message": "Add unit test to make sure DefaultValues.MetricsInterval and DefaultValues.MetricsIntervalInMilliseconds are in sync. Fix test names.",
    "file_num_lines": 276,
    "diff_parsed": {
        "added": [
            [
                9,
                "using static Elastic.Apm.Config.ConfigConsts;"
            ],
            [
                33,
                "\t\t\tagent.ConfigurationReader.ServerUrls[0].Should().Be(DefaultServerUri);"
            ],
            [
                42,
                "\t\t\tagent.ConfigurationReader.ServerUrls[0].Should().Be(DefaultServerUri);"
            ],
            [
                51,
                "\t\t\t\t\tEnvVarNames.ServerUrls,"
            ],
            [
                106,
                "\t\t\t\t\tEnvVarNames.ServerUrls,"
            ],
            [
                125,
                "\t\t\tEnvironment.SetEnvironmentVariable(EnvVarNames.CaptureHeaders, \"false\");"
            ],
            [
                132,
                "\t\t\tAgent.Config.TransactionSampleRate.Should().Be(DefaultValues.TransactionSampleRate);"
            ],
            [
                137,
                "\t\t\tEnvironment.SetEnvironmentVariable(EnvVarNames.TransactionSampleRate, \"0.789\");"
            ],
            [
                145,
                "\t\t\tEnvironment.SetEnvironmentVariable(EnvVarNames.TransactionSampleRate, \"0,789\");"
            ],
            [
                148,
                "\t\t\tconfig.TransactionSampleRate.Should().Be(DefaultValues.TransactionSampleRate);"
            ],
            [
                201,
                "\t\t\t\t\tEnvVarNames.LogLevel,"
            ],
            [
                233,
                "\t\t\tEnvironment.SetEnvironmentVariable(EnvVarNames.ServiceName, serviceName);"
            ],
            [
                251,
                "\t\t\tEnvironment.SetEnvironmentVariable(EnvVarNames.ServiceName, serviceName);"
            ],
            [
                294,
                "\t\t\tEnvironment.SetEnvironmentVariable(EnvVarNames.ServerUrls, \"localhost\"); //invalid, it should be \"http://localhost\""
            ],
            [
                305,
                "\t\t => MetricsIntervalTestCommon(\"10s\").Should().Be(10 * 1000);"
            ],
            [
                312,
                "\t\tpublic void SetMetricsIntervalTo500Ms()"
            ],
            [
                313,
                "\t\t\t=> MetricsIntervalTestCommon(\"500ms\").Should().Be(0);"
            ],
            [
                316,
                "\t\tpublic void SetMetricsIntervalTo1500Ms()"
            ],
            [
                317,
                "\t\t\t=> MetricsIntervalTestCommon(\"1500ms\").Should().Be(1500);"
            ],
            [
                320,
                "\t\tpublic void SetMetricsIntervalTo1HourAs60minutes()"
            ],
            [
                321,
                "\t\t\t=> MetricsIntervalTestCommon(\"60m\").Should().Be(60*60*1000);"
            ],
            [
                324,
                "\t\tpublic void SetMetricsIntervalTo1HourUsingUnsupportedUnits()"
            ],
            [
                325,
                "\t\t\t=> MetricsIntervalTestCommon(\"1h\").Should().Be(DefaultValues.MetricsIntervalInMilliseconds);"
            ],
            [
                328,
                "\t\tpublic void SetMetricsIntervalTo1M()"
            ],
            [
                329,
                "\t\t\t=> MetricsIntervalTestCommon(\"1m\").Should().Be(60 * 1000);"
            ],
            [
                336,
                "\t\tpublic void SetMetricsIntervalTo10()"
            ],
            [
                337,
                "\t\t\t=> MetricsIntervalTestCommon(\"10\").Should().Be(10 * 1000);"
            ],
            [
                343,
                "\t\tpublic void SetMetricsIntervalToNegativeNoUnits()"
            ],
            [
                344,
                "\t\t\t=> MetricsIntervalTestCommon(\"-1\").Should().Be(0);"
            ],
            [
                347,
                "\t\tpublic void SetMetricsIntervalToNegativeSeconds()"
            ],
            [
                348,
                "\t\t\t=> MetricsIntervalTestCommon(\"-0.3s\").Should().Be(0);"
            ],
            [
                351,
                "\t\tpublic void SetMetricsIntervalToNegativeMinutes()"
            ],
            [
                352,
                "\t\t\t=> MetricsIntervalTestCommon(\"-5m\").Should().Be(0);"
            ],
            [
                355,
                "\t\tpublic void SetMetricsIntervalToNegativeMilliseconds()"
            ],
            [
                356,
                "\t\t\t=> MetricsIntervalTestCommon(\"-5ms\").Should().Be(0);"
            ],
            [
                358,
                "\t\t/// <summary>"
            ],
            [
                359,
                "\t\t/// Make sure <see cref=\"DefaultValues.MetricsInterval\" /> and <see cref=\"DefaultValues.MetricsIntervalInMilliseconds\" /> are in sync"
            ],
            [
                360,
                "\t\t/// </summary>"
            ],
            [
                361,
                "\t\t[Fact]"
            ],
            [
                362,
                "\t\tpublic void MetricsIntervalDefaultValuesInSync()"
            ],
            [
                363,
                "\t\t\t=> MetricsIntervalTestCommon(DefaultValues.MetricsInterval).Should().Be(DefaultValues.MetricsIntervalInMilliseconds);"
            ],
            [
                364,
                ""
            ],
            [
                365,
                "\t\tprivate static double MetricsIntervalTestCommon(string configValue)"
            ],
            [
                367,
                "\t\t\tEnvironment.SetEnvironmentVariable(EnvVarNames.MetricsInterval, configValue);"
            ],
            [
                375,
                "\t\t\tEnvironment.SetEnvironmentVariable(EnvVarNames.ServerUrls, null);"
            ],
            [
                376,
                "\t\t\tEnvironment.SetEnvironmentVariable(EnvVarNames.MetricsInterval, null);"
            ]
        ],
        "deleted": [
            [
                32,
                "\t\t\tagent.ConfigurationReader.ServerUrls[0].Should().Be(ConfigConsts.DefaultServerUri);"
            ],
            [
                41,
                "\t\t\tagent.ConfigurationReader.ServerUrls[0].Should().Be(ConfigConsts.DefaultServerUri);"
            ],
            [
                50,
                "\t\t\t\t\tConfigConsts.EnvVarNames.ServerUrls,"
            ],
            [
                105,
                "\t\t\t\t\tConfigConsts.EnvVarNames.ServerUrls,"
            ],
            [
                124,
                "\t\t\tEnvironment.SetEnvironmentVariable(ConfigConsts.EnvVarNames.CaptureHeaders, \"false\");"
            ],
            [
                131,
                "\t\t\tAgent.Config.TransactionSampleRate.Should().Be(ConfigConsts.DefaultValues.TransactionSampleRate);"
            ],
            [
                136,
                "\t\t\tEnvironment.SetEnvironmentVariable(ConfigConsts.EnvVarNames.TransactionSampleRate, \"0.789\");"
            ],
            [
                144,
                "\t\t\tEnvironment.SetEnvironmentVariable(ConfigConsts.EnvVarNames.TransactionSampleRate, \"0,789\");"
            ],
            [
                147,
                "\t\t\tconfig.TransactionSampleRate.Should().Be(ConfigConsts.DefaultValues.TransactionSampleRate);"
            ],
            [
                200,
                "\t\t\t\t\tConfigConsts.EnvVarNames.LogLevel,"
            ],
            [
                232,
                "\t\t\tEnvironment.SetEnvironmentVariable(ConfigConsts.EnvVarNames.ServiceName, serviceName);"
            ],
            [
                250,
                "\t\t\tEnvironment.SetEnvironmentVariable(ConfigConsts.EnvVarNames.ServiceName, serviceName);"
            ],
            [
                293,
                "\t\t\tEnvironment.SetEnvironmentVariable(ConfigConsts.EnvVarNames.ServerUrls, \"localhost\"); //invalid, it should be \"http://localhost\""
            ],
            [
                304,
                "\t\t => MetricsInterValTestCommon(\"10s\").Should().Be(10 * 1000);"
            ],
            [
                311,
                "\t\tpublic void SetMetricsInterValTo500Ms()"
            ],
            [
                312,
                "\t\t\t=> MetricsInterValTestCommon(\"500ms\").Should().Be(0);"
            ],
            [
                315,
                "\t\tpublic void SetMetricsInterValTo1500Ms()"
            ],
            [
                316,
                "\t\t\t=> MetricsInterValTestCommon(\"1500ms\").Should().Be(1500);"
            ],
            [
                319,
                "\t\tpublic void SetMetricsInterValTo1HourAs60minutes()"
            ],
            [
                320,
                "\t\t\t=> MetricsInterValTestCommon(\"60m\").Should().Be(60*60*1000);"
            ],
            [
                323,
                "\t\tpublic void SetMetricsInterValTo1HourUsingUnsupportedUnits()"
            ],
            [
                324,
                "\t\t\t=> MetricsInterValTestCommon(\"1h\").Should().Be(ConfigConsts.DefaultValues.MetricsIntervalInMilliseconds);"
            ],
            [
                327,
                "\t\tpublic void SetMetricsInterValTo1M()"
            ],
            [
                328,
                "\t\t\t=> MetricsInterValTestCommon(\"1m\").Should().Be(60 * 1000);"
            ],
            [
                335,
                "\t\tpublic void SetMetricsInterValTo10()"
            ],
            [
                336,
                "\t\t\t=> MetricsInterValTestCommon(\"10\").Should().Be(10 * 1000);"
            ],
            [
                342,
                "\t\tpublic void SetMetricsInterValToNegative5()"
            ],
            [
                343,
                "\t\t\t=> MetricsInterValTestCommon(\"-1\").Should().Be(0);"
            ],
            [
                346,
                "\t\tpublic void SetMetricsInterValToNegative5S()"
            ],
            [
                347,
                "\t\t\t=> MetricsInterValTestCommon(\"-0.3s\").Should().Be(0);"
            ],
            [
                350,
                "\t\tpublic void SetMetricsInterValToNegative5M()"
            ],
            [
                351,
                "\t\t\t=> MetricsInterValTestCommon(\"-5m\").Should().Be(0);"
            ],
            [
                354,
                "\t\tpublic void SetMetricsInterValToNegative5Ms()"
            ],
            [
                355,
                "\t\t\t=> MetricsInterValTestCommon(\"-5ms\").Should().Be(0);"
            ],
            [
                357,
                "\t\tprivate static double MetricsInterValTestCommon(string configValue)"
            ],
            [
                359,
                "\t\t\tEnvironment.SetEnvironmentVariable(ConfigConsts.EnvVarNames.MetricsInterval, configValue);"
            ],
            [
                367,
                "\t\t\tEnvironment.SetEnvironmentVariable(ConfigConsts.EnvVarNames.ServerUrls, null);"
            ],
            [
                368,
                "\t\t\tEnvironment.SetEnvironmentVariable(ConfigConsts.EnvVarNames.MetricsInterval, null);"
            ]
        ]
    },
    "num_lines_added": 46,
    "num_lines_removed": 38
}