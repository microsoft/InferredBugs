{
    "hash": "71da5aa65c3ec80bf3260b2d86aecca4716fa98f",
    "message": "Handling truncation of values in Dictionary<string,string> #129",
    "file_num_lines": 79,
    "diff_parsed": {
        "added": [
            [
                1,
                "using System.Collections.Generic;"
            ],
            [
                18,
                "\t\t/// Tests the <see cref=\"StringTruncationValueResolver\" />. It serializes a transaction with Transaction.Name.Length > 1024."
            ],
            [
                19,
                "\t\t/// Makes sure that the Transaction.Name is truncated correctly."
            ],
            [
                26,
                "\t\t\tfor (var i = 0; i < 1200; i++) sb.Append('a');"
            ],
            [
                43,
                "\t\t/// Test <see cref=\"NoTruncationInJsonNetAttribute\" />."
            ],
            [
                44,
                "\t\t/// It creates an instance of <see cref=\"DummyType\" /> with a <see cref=\"DummyType.StringProp\" /> that has a string"
            ],
            [
                45,
                "\t\t/// which is longer than <see cref=\"Consts.PropertyMaxLength\" />."
            ],
            [
                47,
                "\t\t/// the property pointing to the string was marked with <see cref=\"NoTruncationInJsonNetAttribute\" />."
            ],
            [
                50,
                "\t\tpublic void StringNoTruncateAttributeTest()"
            ],
            [
                54,
                "\t\t\tfor (var i = 0; i < 1200; i++) sb.Append('a');"
            ],
            [
                69,
                "\t\t/// <summary>"
            ],
            [
                70,
                "\t\t/// Creates a <see cref=\"Context\"/> that has <see cref=\"Context.Tags\"/>"
            ],
            [
                71,
                "\t\t/// with strings longer than <see cref=\"Consts.PropertyMaxLength\" />."
            ],
            [
                72,
                "\t\t/// Makes sure that the long string is trimmed."
            ],
            [
                73,
                "\t\t/// </summary>"
            ],
            [
                74,
                "\t\t[Fact]"
            ],
            [
                75,
                "\t\tpublic void TagsTruncation()"
            ],
            [
                76,
                "\t\t{"
            ],
            [
                77,
                "\t\t\tvar sb = new StringBuilder();"
            ],
            [
                78,
                ""
            ],
            [
                79,
                "\t\t\tfor (var i = 0; i < 1200; i++) sb.Append('a');"
            ],
            [
                80,
                ""
            ],
            [
                81,
                "\t\t\tvar context = new Context();"
            ],
            [
                82,
                "\t\t\tcontext.Tags[\"foo\"] = sb.ToString();"
            ],
            [
                83,
                ""
            ],
            [
                84,
                "\t\t\tvar settings = new JsonSerializerSettings { ContractResolver = new StringTruncationValueResolver() };"
            ],
            [
                85,
                "\t\t\tvar json = JsonConvert.SerializeObject(context, settings);"
            ],
            [
                86,
                "\t\t\tvar deserializedContext = JsonConvert.DeserializeObject(json) as JObject;"
            ],
            [
                87,
                ""
            ],
            [
                88,
                "\t\t\tAssert.NotNull(deserializedContext);"
            ],
            [
                89,
                ""
            ],
            [
                90,
                "\t\t\tAssert.Equal(Consts.PropertyMaxLength, deserializedContext[\"tags\"].Value<JObject>()[\"foo\"]?.Value<string>()?.Length);"
            ],
            [
                91,
                "\t\t\tAssert.Equal(\"...\", deserializedContext[\"tags\"].Value<JObject>()[\"foo\"].Value<string>().Substring(1021, 3));"
            ],
            [
                92,
                "\t\t}"
            ],
            [
                93,
                ""
            ],
            [
                94,
                "\t\t/// <summary>"
            ],
            [
                95,
                "\t\t/// Test <see cref=\"NoTruncationInJsonNetAttribute\" />."
            ],
            [
                96,
                "\t\t/// It creates an instance of <see cref=\"DummyType\" /> with a <see cref=\"DummyType.DictionaryProp\" /> that has a value"
            ],
            [
                97,
                "\t\t/// which is longer than <see cref=\"Consts.PropertyMaxLength\" />."
            ],
            [
                98,
                "\t\t/// Makes sure that the serialized instance still contains the whole value (aka it was not trimmed), since"
            ],
            [
                99,
                "\t\t/// the property pointing to the string was marked with <see cref=\"NoTruncationInJsonNetAttribute\" />."
            ],
            [
                100,
                "\t\t/// </summary>"
            ],
            [
                101,
                "\t\t[Fact]"
            ],
            [
                102,
                "\t\tpublic void DictionaryNoTruncateAttributeTest()"
            ],
            [
                103,
                "\t\t{"
            ],
            [
                104,
                "\t\t\tvar sb = new StringBuilder();"
            ],
            [
                105,
                ""
            ],
            [
                106,
                "\t\t\tfor (var i = 0; i < 1200; i++) sb.Append('a');"
            ],
            [
                107,
                ""
            ],
            [
                108,
                "\t\t\tvar dummyInstance = new DummyType();"
            ],
            [
                109,
                "\t\t\tdummyInstance.DictionaryProp[\"foo\"] = sb.ToString();"
            ],
            [
                110,
                ""
            ],
            [
                111,
                "\t\t\tvar settings = new JsonSerializerSettings { ContractResolver = new StringTruncationValueResolver() };"
            ],
            [
                112,
                "\t\t\tvar json = JsonConvert.SerializeObject(dummyInstance, settings);"
            ],
            [
                113,
                "\t\t\tvar deserializedDummyInstance = JsonConvert.DeserializeObject(json) as JObject;"
            ],
            [
                114,
                ""
            ],
            [
                115,
                "\t\t\tAssert.NotNull(deserializedDummyInstance);"
            ],
            [
                116,
                ""
            ],
            [
                117,
                "\t\t\tAssert.Equal(sb.Length, deserializedDummyInstance[\"dictionaryProp\"].Value<JObject>()[\"foo\"]?.Value<string>()?.Length);"
            ],
            [
                118,
                "\t\t\tAssert.Equal(sb.ToString(), deserializedDummyInstance[\"dictionaryProp\"].Value<JObject>()[\"foo\"].Value<string>());"
            ],
            [
                119,
                "\t\t}"
            ],
            [
                120,
                ""
            ],
            [
                121,
                "\t\t/// <summary>"
            ],
            [
                122,
                "\t\t/// A dummy type to attach <see cref=\"NoTruncationInJsonNetAttribute\"/> to some of its properties."
            ],
            [
                123,
                "\t\t/// It's used by test methods."
            ],
            [
                124,
                "\t\t/// </summary>"
            ],
            [
                127,
                "\t\t\tpublic int IntProp { get; set; }"
            ],
            [
                128,
                ""
            ],
            [
                132,
                "\t\t\t[NoTruncationInJsonNet]"
            ],
            [
                133,
                "\t\t\t// ReSharper disable once CollectionNeverQueried.Local - it's by JsonConvert"
            ],
            [
                134,
                "\t\t\tpublic Dictionary<string, string> DictionaryProp { get; } = new Dictionary<string, string>();"
            ]
        ],
        "deleted": [
            [
                17,
                "\t\t/// Tests the <see cref=\"StringTruncationValueResolver\"/>. It serializes a transaction with Transaction.Name.Length > 1024"
            ],
            [
                18,
                "\t\t/// And makes sure that the Transaction.Name is truncated correctly."
            ],
            [
                25,
                "\t\t\tfor (var i = 0; i < 1200; i++)"
            ],
            [
                26,
                "\t\t\t{"
            ],
            [
                27,
                "\t\t\t\tsb.Append('a');"
            ],
            [
                28,
                "\t\t\t}"
            ],
            [
                45,
                "\t\t/// Test <see cref=\"NoTruncationInJsonNetAttribute\"/>."
            ],
            [
                46,
                "\t\t/// It creates an instance of <see cref=\"DummyType\"/> with a <see cref=\"DummyType.StringProp\"/> that has a string"
            ],
            [
                47,
                "\t\t/// which is longer than <see cref=\"Consts.PropertyMaxLength\"/>."
            ],
            [
                49,
                "\t\t/// the property pointing to the string was marked with <see cref=\"NoTruncationInJsonNetAttribute\"/>."
            ],
            [
                52,
                "\t\tpublic void NoTruncateAttributeTest()"
            ],
            [
                56,
                "\t\t\tfor (var i = 0; i < 1200; i++)"
            ],
            [
                57,
                "\t\t\t{"
            ],
            [
                58,
                "\t\t\t\tsb.Append('a');"
            ],
            [
                59,
                "\t\t\t}"
            ],
            [
                79,
                "\t\t\tpublic int IntProp { get; set; }"
            ]
        ]
    },
    "num_lines_added": 71,
    "num_lines_removed": 16
}