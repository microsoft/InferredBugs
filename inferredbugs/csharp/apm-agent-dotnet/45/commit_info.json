{
    "hash": "6bd2a2d266ac1a6d32e11585fb8ad6797d8f0644",
    "message": "Adapting tests to intake v2 #13 - WIP",
    "file_num_lines": 437,
    "diff_parsed": {
        "added": [
            [
                377,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                379,
                "\t\t\tpayloadSender.FirstTransaction.Name.Should().Be(TransactionName);"
            ],
            [
                380,
                "\t\t\tpayloadSender.FirstTransaction.Type.Should().Be(TransactionType);"
            ],
            [
                382,
                "\t\t\tvar duration = payloadSender.FirstTransaction.Duration;"
            ],
            [
                387,
                "\t\t\tpayloadSender.FirstError.Culprit.Should().Be(\"A task was canceled\");"
            ],
            [
                388,
                "\t\t\tpayloadSender.FirstError.Exception.Message.Should().Be(\"Task canceled\");"
            ],
            [
                412,
                "\t\t\tpayloadSender.FirstTransaction.Tags.Should().Contain(\"foo\", \"bar\");"
            ],
            [
                436,
                "\t\t\tpayloadSender.FirstTransaction.Tags.Should().Contain(\"foo\", \"bar\");"
            ],
            [
                467,
                "\t\t\tpayloadSender.FirstTransaction.Tags.Should().Contain(\"foo\", \"bar\");"
            ],
            [
                594,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                595,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                597,
                "\t\t\tpayloadSender.FirstTransaction.Name.Should().Be(TransactionName);"
            ],
            [
                598,
                "\t\t\tpayloadSender.FirstTransaction.Type.Should().Be(TransactionType);"
            ],
            [
                600,
                "\t\t\tvar duration = payloadSender.FirstTransaction.Duration;"
            ],
            [
                616,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                617,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                619,
                "\t\t\tpayloadSender.FirstTransaction.Name.Should().Be(TransactionName);"
            ],
            [
                620,
                "\t\t\tpayloadSender.FirstTransaction.Type.Should().Be(TransactionType);"
            ],
            [
                622,
                "\t\t\tvar duration = payloadSender.FirstTransaction.Duration;"
            ],
            [
                626,
                "\t\t\tpayloadSender.Errors.Should().NotBeEmpty();"
            ],
            [
                628,
                "\t\t\tpayloadSender.FirstError.Exception.Type.Should().Be(typeof(InvalidOperationException).FullName);"
            ],
            [
                629,
                "\t\t\tpayloadSender.FirstError.Exception.Message.Should().Be(ExceptionMessage);"
            ],
            [
                643,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                644,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                646,
                "\t\t\tpayloadSender.FirstTransaction.Name.Should().Be(TransactionName);"
            ],
            [
                647,
                "\t\t\tpayloadSender.FirstTransaction.Type.Should().Be(TransactionType);"
            ],
            [
                649,
                "\t\t\tvar duration = payloadSender.FirstTransaction.Duration;"
            ],
            [
                665,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                666,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                668,
                "\t\t\tpayloadSender.FirstTransaction.Name.Should().Be(TransactionName);"
            ],
            [
                669,
                "\t\t\tpayloadSender.FirstTransaction.Type.Should().Be(TransactionType);"
            ],
            [
                671,
                "\t\t\tvar duration = payloadSender.FirstTransaction.Duration;"
            ],
            [
                675,
                "\t\t\tpayloadSender.Errors.Should().NotBeEmpty();"
            ],
            [
                677,
                "\t\t\tpayloadSender.FirstError.Exception.Type.Should().Be(typeof(InvalidOperationException).FullName);"
            ],
            [
                678,
                "\t\t\tpayloadSender.FirstError.Exception.Message.Should().Be(ExceptionMessage);"
            ]
        ],
        "deleted": [
            [
                377,
                "\t\t\tpayloadSender.Payloads.Should().NotBeEmpty();"
            ],
            [
                378,
                "\t\t\tpayloadSender.Payloads[0].Transactions.Should().NotBeEmpty();"
            ],
            [
                380,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Name.Should().Be(TransactionName);"
            ],
            [
                381,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Type.Should().Be(TransactionType);"
            ],
            [
                383,
                "\t\t\tvar duration = payloadSender.Payloads[0].Transactions[0].Duration;"
            ],
            [
                387,
                "\t\t\tpayloadSender.Errors[0].Errors.Should().NotBeEmpty();"
            ],
            [
                389,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Culprit.Should().Be(\"A task was canceled\");"
            ],
            [
                390,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Exception.Message.Should().Be(\"Task canceled\");"
            ],
            [
                414,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Tags.Should().Contain(\"foo\", \"bar\");"
            ],
            [
                438,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Tags.Should().Contain(\"foo\", \"bar\");"
            ],
            [
                469,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Tags.Should().Contain(\"foo\", \"bar\");"
            ],
            [
                596,
                "\t\t\tpayloadSender.Payloads.Should().NotBeEmpty();"
            ],
            [
                597,
                "\t\t\tpayloadSender.Payloads[0].Transactions.Should().NotBeEmpty();"
            ],
            [
                599,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Name.Should().Be(TransactionName);"
            ],
            [
                600,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Type.Should().Be(TransactionType);"
            ],
            [
                602,
                "\t\t\tvar duration = payloadSender.Payloads[0].Transactions[0].Duration;"
            ],
            [
                618,
                "\t\t\tpayloadSender.Payloads.Should().NotBeEmpty();"
            ],
            [
                619,
                "\t\t\tpayloadSender.Payloads[0].Transactions.Should().NotBeEmpty();"
            ],
            [
                621,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Name.Should().Be(TransactionName);"
            ],
            [
                622,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Type.Should().Be(TransactionType);"
            ],
            [
                624,
                "\t\t\tvar duration = payloadSender.Payloads[0].Transactions[0].Duration;"
            ],
            [
                628,
                "\t\t\tpayloadSender.Errors[0].Errors.Should().NotBeEmpty();"
            ],
            [
                630,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Exception.Type.Should().Be(typeof(InvalidOperationException).FullName);"
            ],
            [
                631,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Exception.Message.Should().Be(ExceptionMessage);"
            ],
            [
                645,
                "\t\t\tpayloadSender.Payloads.Should().NotBeEmpty();"
            ],
            [
                646,
                "\t\t\tpayloadSender.Payloads[0].Transactions.Should().NotBeEmpty();"
            ],
            [
                648,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Name.Should().Be(TransactionName);"
            ],
            [
                649,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Type.Should().Be(TransactionType);"
            ],
            [
                651,
                "\t\t\tvar duration = payloadSender.Payloads[0].Transactions[0].Duration;"
            ],
            [
                667,
                "\t\t\tpayloadSender.Payloads.Should().NotBeEmpty();"
            ],
            [
                668,
                "\t\t\tpayloadSender.Payloads[0].Transactions.Should().NotBeEmpty();"
            ],
            [
                670,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Name.Should().Be(TransactionName);"
            ],
            [
                671,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Type.Should().Be(TransactionType);"
            ],
            [
                673,
                "\t\t\tvar duration = payloadSender.Payloads[0].Transactions[0].Duration;"
            ],
            [
                677,
                "\t\t\tpayloadSender.Errors[0].Errors.Should().NotBeEmpty();"
            ],
            [
                679,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Exception.Type.Should().Be(typeof(InvalidOperationException).FullName);"
            ],
            [
                680,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Exception.Message.Should().Be(ExceptionMessage);"
            ]
        ]
    },
    "num_lines_added": 35,
    "num_lines_removed": 37
}