{
    "hash": "6bd2a2d266ac1a6d32e11585fb8ad6797d8f0644",
    "message": "Adapting tests to intake v2 #13 - WIP",
    "file_num_lines": 235,
    "diff_parsed": {
        "added": [
            [
                38,
                ""
            ],
            [
                40,
                ""
            ],
            [
                62,
                "\t\t\tpayloadSender.Transactions.Should().BeEmpty();"
            ],
            [
                82,
                "\t\t\tpayloadSender.Transactions[0].Result.Should().Be(result);"
            ],
            [
                159,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                164,
                "\t\t\t//TODO:"
            ],
            [
                165,
                "\t\t\t//payloadSender.Payloads[0].Service.Should().NotBeNull();"
            ],
            [
                188,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                191,
                "\t\t\t//TODO:"
            ],
            [
                192,
                "\t\t\t//payloadSender.Payloads[0].Service.Should().NotBeNull();"
            ],
            [
                213,
                "\t\t\tpayloadSender.Transactions.Should().NotBeEmpty();"
            ],
            [
                220,
                "\t\t\t//TODO:"
            ],
            [
                221,
                "\t\t\t//payloadSender.Payloads[0].Service.Should().NotBeNull();"
            ],
            [
                266,
                "\t\t\tpayloadSender.Transactions.Should().ContainSingle();"
            ],
            [
                268,
                "\t\t\tpayloadSender.FirstError.Exception.Message.Should().Be(exceptionMessage);"
            ],
            [
                269,
                "\t\t\tpayloadSender.FirstError.Exception.Message.Should().Be(exceptionMessage);"
            ],
            [
                271,
                "\t\t\tpayloadSender.FirstError.Culprit.Should().Be(!string.IsNullOrEmpty(culprit) ? culprit : \"PublicAPI-CaptureException\");"
            ],
            [
                306,
                "\t\t\tpayloadSender.Transactions.Should().ContainSingle();"
            ],
            [
                308,
                "\t\t\tpayloadSender.FirstError.Exception.Message.Should().Be(exceptionMessage);"
            ],
            [
                347,
                "\t\t\tpayloadSender.Transactions.Should().ContainSingle();"
            ],
            [
                349,
                "\t\t\tpayloadSender.FirstError.Exception.Message.Should().Be(exceptionMessage);"
            ],
            [
                351,
                "\t\t\tpayloadSender.FirstTransaction.Tags.Should().Contain(\"fooTransaction1\", \"barTransaction1\");"
            ],
            [
                354,
                "\t\t\tpayloadSender.FirstTransaction.Tags.Should().Contain(\"fooTransaction2\", \"barTransaction2\");"
            ]
        ],
        "deleted": [
            [
                60,
                "\t\t\tpayloadSender.Payloads.Should().BeEmpty();"
            ],
            [
                80,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Result.Should().Be(result);"
            ],
            [
                157,
                "\t\t\tpayloadSender.Payloads.Should().NotBeEmpty();"
            ],
            [
                162,
                "\t\t\tpayloadSender.Payloads[0].Service.Should().NotBeNull();"
            ],
            [
                185,
                "\t\t\tpayloadSender.Payloads.Should().NotBeEmpty();"
            ],
            [
                188,
                "\t\t\tpayloadSender.Payloads[0].Service.Should().NotBeNull();"
            ],
            [
                209,
                "\t\t\tpayloadSender.Payloads.Should().NotBeEmpty();"
            ],
            [
                216,
                "\t\t\tpayloadSender.Payloads[0].Service.Should().NotBeNull();"
            ],
            [
                261,
                "\t\t\tpayloadSender.Payloads.Should().ContainSingle();"
            ],
            [
                263,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Exception.Message.Should().Be(exceptionMessage);"
            ],
            [
                264,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Exception.Message.Should().Be(exceptionMessage);"
            ],
            [
                266,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Culprit.Should().Be(!string.IsNullOrEmpty(culprit) ? culprit : \"PublicAPI-CaptureException\");"
            ],
            [
                301,
                "\t\t\tpayloadSender.Payloads.Should().ContainSingle();"
            ],
            [
                303,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Exception.Message.Should().Be(exceptionMessage);"
            ],
            [
                342,
                "\t\t\tpayloadSender.Payloads.Should().ContainSingle();"
            ],
            [
                344,
                "\t\t\tpayloadSender.Errors[0].Errors[0].Exception.Message.Should().Be(exceptionMessage);"
            ],
            [
                346,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Tags.Should().Contain(\"fooTransaction1\", \"barTransaction1\");"
            ],
            [
                349,
                "\t\t\tpayloadSender.Payloads[0].Transactions[0].Tags.Should().Contain(\"fooTransaction2\", \"barTransaction2\");"
            ]
        ]
    },
    "num_lines_added": 23,
    "num_lines_removed": 18
}