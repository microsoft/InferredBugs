{
    "hash": "6149eefb39c2ed9d35c7fdb8ea4a505b0a743b9e",
    "message": "add support for central configuration for more configuration options",
    "file_num_lines": 205,
    "diff_parsed": {
        "added": [
            [
                2,
                "using System.Collections.Generic;"
            ],
            [
                3,
                "using System.Linq;"
            ],
            [
                8,
                "using Elastic.Apm.Config;"
            ],
            [
                19,
                "\t\tprivate readonly HttpResponseMessage _correctResponse;"
            ],
            [
                24,
                "\t\t\t_correctResponse = new HttpResponseMessage"
            ],
            [
                25,
                "\t\t\t{"
            ],
            [
                26,
                "\t\t\t\tStatusCode = HttpStatusCode.OK,"
            ],
            [
                27,
                "\t\t\t\tHeaders = { ETag = new EntityTagHeaderValue(\"\\\"33a64df551425fcc55e4d42a148795d9f25f89d4\\\"\") }"
            ],
            [
                28,
                "\t\t\t};"
            ],
            [
                73,
                "\t\t\tvar exception = Assert.Throws<CentralConfigFetcher.FailedToFetchConfigException>("
            ],
            [
                75,
                ""
            ],
            [
                76,
                "\t\t\texception.Message.Should().Contain(\"HTTP status code is \");"
            ],
            [
                86,
                "\t\t\tvar exception = Assert.Throws<CentralConfigFetcher.FailedToFetchConfigException>("
            ],
            [
                88,
                ""
            ],
            [
                89,
                "\t\t\texception.Message.Should().Contain(\"doesn't have ETag header\");"
            ],
            [
                95,
                "\t\t\t// Arrange + Act"
            ],
            [
                96,
                "\t\t\tvar (configDelta, _) = _parser.ParseHttpResponse(_correctResponse, \"{}\");"
            ],
            [
                104,
                "\t\t\tconfigDelta.CaptureHeaders.Should().BeNull();"
            ],
            [
                105,
                "\t\t\tconfigDelta.LogLevel.Should().BeNull();"
            ],
            [
                106,
                "\t\t\tconfigDelta.SpanFramesMinDurationInMilliseconds.Should().BeNull();"
            ],
            [
                107,
                "\t\t\tconfigDelta.StackTraceLimit.Should().BeNull();"
            ],
            [
                118,
                "\t\t\tparser.ParseHttpResponse(_correctResponse, \"{\\\"unknownKey\\\": \\\"value\\\"}\");"
            ],
            [
                127,
                ""
            ],
            [
                128,
                "\t\tpublic static IEnumerable<object[]> ConfigDeltaData"
            ],
            [
                129,
                "\t\t{"
            ],
            [
                130,
                "\t\t\tget"
            ],
            [
                131,
                "\t\t\t{"
            ],
            [
                132,
                "\t\t\t\tforeach (var value in ConfigConsts.SupportedValues.CaptureBodySupportedValues)"
            ],
            [
                133,
                "\t\t\t\t{"
            ],
            [
                134,
                "\t\t\t\t\tyield return new object[]"
            ],
            [
                135,
                "\t\t\t\t\t{"
            ],
            [
                136,
                "\t\t\t\t\t\t$\"{{\\\"{CentralConfigResponseParser.CentralConfigPayload.CaptureBodyKey}\\\": \\\"{value}\\\"}}\","
            ],
            [
                137,
                "\t\t\t\t\t\tnew Action<CentralConfigReader>(cfg =>"
            ],
            [
                138,
                "\t\t\t\t\t\t{"
            ],
            [
                139,
                "\t\t\t\t\t\t\tcfg.CaptureBody.Should()"
            ],
            [
                140,
                "\t\t\t\t\t\t\t\t.NotBeNull()"
            ],
            [
                141,
                "\t\t\t\t\t\t\t\t.And.Be(value);"
            ],
            [
                142,
                "\t\t\t\t\t\t})"
            ],
            [
                143,
                "\t\t\t\t\t};"
            ],
            [
                144,
                "\t\t\t\t}"
            ],
            [
                145,
                ""
            ],
            [
                146,
                "\t\t\t\tyield return new object[]"
            ],
            [
                147,
                "\t\t\t\t{"
            ],
            [
                148,
                "\t\t\t\t\t$\"{{\\\"{CentralConfigResponseParser.CentralConfigPayload.TransactionMaxSpansKey}\\\": \\\"{100}\\\"}}\","
            ],
            [
                149,
                "\t\t\t\t\tnew Action<CentralConfigReader>(cfg =>"
            ],
            [
                150,
                "\t\t\t\t\t{"
            ],
            [
                151,
                "\t\t\t\t\t\tcfg.TransactionMaxSpans.Should()"
            ],
            [
                152,
                "\t\t\t\t\t\t\t.NotBeNull()"
            ],
            [
                153,
                "\t\t\t\t\t\t\t.And.Be(100);"
            ],
            [
                154,
                "\t\t\t\t\t})"
            ],
            [
                155,
                "\t\t\t\t};"
            ],
            [
                156,
                ""
            ],
            [
                157,
                "\t\t\t\tyield return new object[]"
            ],
            [
                158,
                "\t\t\t\t{"
            ],
            [
                159,
                "\t\t\t\t\t$\"{{\\\"{CentralConfigResponseParser.CentralConfigPayload.TransactionSampleRateKey}\\\": \\\"{0.75}\\\"}}\","
            ],
            [
                160,
                "\t\t\t\t\tnew Action<CentralConfigReader>(cfg =>"
            ],
            [
                161,
                "\t\t\t\t\t{"
            ],
            [
                162,
                "\t\t\t\t\t\tcfg.TransactionSampleRate.Should()"
            ],
            [
                163,
                "\t\t\t\t\t\t\t.NotBeNull()"
            ],
            [
                164,
                "\t\t\t\t\t\t\t.And.Be(0.75);"
            ],
            [
                165,
                "\t\t\t\t\t})"
            ],
            [
                166,
                "\t\t\t\t};"
            ],
            [
                167,
                ""
            ],
            [
                168,
                "\t\t\t\tvar captureBodyContentTypes = \"application/x-www-form-urlencoded*, application/json*\";"
            ],
            [
                169,
                "\t\t\t\tyield return new object[]"
            ],
            [
                170,
                "\t\t\t\t{"
            ],
            [
                171,
                "\t\t\t\t\t$\"{{\\\"{CentralConfigResponseParser.CentralConfigPayload.CaptureBodyContentTypesKey}\\\": \\\"{captureBodyContentTypes}\\\"}}\","
            ],
            [
                172,
                "\t\t\t\t\tnew Action<CentralConfigReader>(cfg =>"
            ],
            [
                173,
                "\t\t\t\t\t{"
            ],
            [
                174,
                "\t\t\t\t\t\tcfg.CaptureBodyContentTypes.Should()"
            ],
            [
                175,
                "\t\t\t\t\t\t\t.NotBeNull()"
            ],
            [
                176,
                "\t\t\t\t\t\t\t.And.BeEquivalentTo(captureBodyContentTypes.Split(',').Select(x => x.Trim()));"
            ],
            [
                177,
                "\t\t\t\t\t})"
            ],
            [
                178,
                "\t\t\t\t};"
            ],
            [
                179,
                ""
            ],
            [
                180,
                "\t\t\t\tyield return new object[]"
            ],
            [
                181,
                "\t\t\t\t{"
            ],
            [
                182,
                "\t\t\t\t\t$\"{{\\\"{CentralConfigResponseParser.CentralConfigPayload.StackTraceLimitKey}\\\": \\\"{150}\\\"}}\","
            ],
            [
                183,
                "\t\t\t\t\tnew Action<CentralConfigReader>(cfg =>"
            ],
            [
                184,
                "\t\t\t\t\t{"
            ],
            [
                185,
                "\t\t\t\t\t\tcfg.StackTraceLimit.Should()"
            ],
            [
                186,
                "\t\t\t\t\t\t\t.NotBeNull()"
            ],
            [
                187,
                "\t\t\t\t\t\t\t.And.Be(150);"
            ],
            [
                188,
                "\t\t\t\t\t})"
            ],
            [
                189,
                "\t\t\t\t};"
            ],
            [
                190,
                ""
            ],
            [
                191,
                "\t\t\t\tyield return new object[]"
            ],
            [
                192,
                "\t\t\t\t{"
            ],
            [
                193,
                "\t\t\t\t\t$\"{{\\\"{CentralConfigResponseParser.CentralConfigPayload.SpanFramesMinDurationKey}\\\": \\\"{150}\\\"}}\","
            ],
            [
                194,
                "\t\t\t\t\tnew Action<CentralConfigReader>(cfg =>"
            ],
            [
                195,
                "\t\t\t\t\t{"
            ],
            [
                196,
                "\t\t\t\t\t\tcfg.SpanFramesMinDurationInMilliseconds.Should()"
            ],
            [
                197,
                "\t\t\t\t\t\t\t.NotBeNull()"
            ],
            [
                198,
                "\t\t\t\t\t\t\t.And.Be(150);"
            ],
            [
                199,
                "\t\t\t\t\t})"
            ],
            [
                200,
                "\t\t\t\t};"
            ],
            [
                201,
                ""
            ],
            [
                202,
                "\t\t\t\tyield return new object[]"
            ],
            [
                203,
                "\t\t\t\t{"
            ],
            [
                204,
                "\t\t\t\t\t$\"{{\\\"{CentralConfigResponseParser.CentralConfigPayload.CaptureHeadersKey}\\\": \\\"{false}\\\"}}\","
            ],
            [
                205,
                "\t\t\t\t\tnew Action<CentralConfigReader>(cfg =>"
            ],
            [
                206,
                "\t\t\t\t\t{"
            ],
            [
                207,
                "\t\t\t\t\t\tcfg.CaptureHeaders.Should()"
            ],
            [
                208,
                "\t\t\t\t\t\t\t.NotBeNull()"
            ],
            [
                209,
                "\t\t\t\t\t\t\t.And.Be(false);"
            ],
            [
                210,
                "\t\t\t\t\t})"
            ],
            [
                211,
                "\t\t\t\t};"
            ],
            [
                212,
                ""
            ],
            [
                213,
                "\t\t\t\tyield return new object[]"
            ],
            [
                214,
                "\t\t\t\t{"
            ],
            [
                215,
                "\t\t\t\t\t$\"{{\\\"{CentralConfigResponseParser.CentralConfigPayload.CaptureHeadersKey}\\\": \\\"{true}\\\"}}\","
            ],
            [
                216,
                "\t\t\t\t\tnew Action<CentralConfigReader>(cfg =>"
            ],
            [
                217,
                "\t\t\t\t\t{"
            ],
            [
                218,
                "\t\t\t\t\t\tcfg.CaptureHeaders.Should()"
            ],
            [
                219,
                "\t\t\t\t\t\t\t.NotBeNull()"
            ],
            [
                220,
                "\t\t\t\t\t\t\t.And.Be(true);"
            ],
            [
                221,
                "\t\t\t\t\t})"
            ],
            [
                222,
                "\t\t\t\t};"
            ],
            [
                223,
                ""
            ],
            [
                224,
                "\t\t\t\tforeach (var value in Enum.GetValues(typeof(LogLevel)))"
            ],
            [
                225,
                "\t\t\t\t{"
            ],
            [
                226,
                "\t\t\t\t\tyield return new object[]"
            ],
            [
                227,
                "\t\t\t\t\t{"
            ],
            [
                228,
                "\t\t\t\t\t\t$\"{{\\\"{CentralConfigResponseParser.CentralConfigPayload.LogLevelKey}\\\": \\\"{value}\\\"}}\","
            ],
            [
                229,
                "\t\t\t\t\t\tnew Action<CentralConfigReader>(cfg =>"
            ],
            [
                230,
                "\t\t\t\t\t\t{"
            ],
            [
                231,
                "\t\t\t\t\t\t\tcfg.LogLevel.Should()"
            ],
            [
                232,
                "\t\t\t\t\t\t\t\t.NotBeNull()"
            ],
            [
                233,
                "\t\t\t\t\t\t\t\t.And.Be(value);"
            ],
            [
                234,
                "\t\t\t\t\t\t})"
            ],
            [
                235,
                "\t\t\t\t\t};"
            ],
            [
                236,
                "\t\t\t\t}"
            ],
            [
                237,
                "\t\t\t}"
            ],
            [
                238,
                "\t\t}"
            ],
            [
                239,
                ""
            ],
            [
                240,
                "\t\t[Theory]"
            ],
            [
                241,
                "\t\t[MemberData(nameof(ConfigDeltaData))]"
            ],
            [
                242,
                "\t\tinternal void ParseHttpResponse_ShouldCorrectlyCalculateConfigDelta(string httpResponseBody, Action<CentralConfigReader> assert)"
            ],
            [
                243,
                "\t\t{"
            ],
            [
                244,
                "\t\t\t// Arrange + Act"
            ],
            [
                245,
                "\t\t\tvar (configDelta, _) = _parser.ParseHttpResponse(_correctResponse, httpResponseBody);"
            ],
            [
                246,
                ""
            ],
            [
                247,
                "\t\t\t// Assert"
            ],
            [
                248,
                "\t\t\tconfigDelta.Should().NotBeNull();"
            ],
            [
                249,
                "\t\t\tassert.Invoke(configDelta);"
            ],
            [
                250,
                "\t\t}"
            ]
        ],
        "deleted": [
            [
                64,
                "\t\t\tAssert.Throws<CentralConfigFetcher.FailedToFetchConfigException>("
            ],
            [
                75,
                "\t\t\tAssert.Throws<CentralConfigFetcher.FailedToFetchConfigException>("
            ],
            [
                82,
                "\t\t\t// Arrange"
            ],
            [
                83,
                "\t\t\tvar response = new HttpResponseMessage"
            ],
            [
                84,
                "\t\t\t{"
            ],
            [
                85,
                "\t\t\t\tStatusCode = HttpStatusCode.OK,"
            ],
            [
                86,
                "\t\t\t\tHeaders = { ETag = new EntityTagHeaderValue(\"\\\"33a64df551425fcc55e4d42a148795d9f25f89d4\\\"\") }"
            ],
            [
                87,
                "\t\t\t};"
            ],
            [
                88,
                ""
            ],
            [
                89,
                "\t\t\t// Act"
            ],
            [
                90,
                "\t\t\tvar (configDelta, _) = _parser.ParseHttpResponse(response, \"{}\");"
            ],
            [
                107,
                "\t\t\tvar response = new HttpResponseMessage"
            ],
            [
                108,
                "\t\t\t{"
            ],
            [
                109,
                "\t\t\t\tStatusCode = HttpStatusCode.OK,"
            ],
            [
                110,
                "\t\t\t\tHeaders = { ETag = new EntityTagHeaderValue(\"\\\"33a64df551425fcc55e4d42a148795d9f25f89d4\\\"\") }"
            ],
            [
                111,
                "\t\t\t};"
            ],
            [
                112,
                ""
            ],
            [
                114,
                "\t\t\tparser.ParseHttpResponse(response, \"{\\\"unknownKey\\\": \\\"value\\\"}\");"
            ]
        ]
    },
    "num_lines_added": 146,
    "num_lines_removed": 18
}