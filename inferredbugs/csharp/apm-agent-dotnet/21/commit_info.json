{
    "hash": "a8b99b828d173b32dadf2cf737707415b4cfc9e6",
    "message": "Add helper method that sleeps and delays according to timer's frequency",
    "file_num_lines": 345,
    "diff_parsed": {
        "added": [
            [
                37,
                "\t\t\t\t() => { WaitHelpers.SleepMinimum(); });"
            ],
            [
                52,
                "\t\t\t\t\tWaitHelpers.SleepMinimum();"
            ],
            [
                72,
                "\t\t\t\t\tWaitHelpers.SleepMinimum();"
            ],
            [
                91,
                "\t\t\t\t\tWaitHelpers.SleepMinimum();"
            ],
            [
                107,
                "\t\t\t\tWaitHelpers.SleepMinimum();"
            ],
            [
                128,
                "\t\t\t\t\tWaitHelpers.SleepMinimum();"
            ],
            [
                151,
                "\t\t\t\t\tWaitHelpers.SleepMinimum();"
            ],
            [
                177,
                "\t\t\t\t\tWaitHelpers.SleepMinimum();"
            ],
            [
                199,
                "\t\t\t\tasync () => { await WaitHelpers.DelayMinimum(); });"
            ],
            [
                214,
                "\t\t\t\t\tawait WaitHelpers.DelayMinimum();"
            ],
            [
                233,
                "\t\t\t\t\tawait WaitHelpers.DelayMinimum();"
            ],
            [
                253,
                "\t\t\t\t\tawait WaitHelpers.DelayMinimum();"
            ],
            [
                269,
                "\t\t\t\tawait WaitHelpers.DelayMinimum();"
            ],
            [
                289,
                "\t\t\t\t\tawait WaitHelpers.DelayMinimum();"
            ],
            [
                312,
                "\t\t\t\t\tawait WaitHelpers.DelayMinimum();"
            ],
            [
                338,
                "\t\t\t\t\tawait WaitHelpers.DelayMinimum();"
            ],
            [
                371,
                "\t\t\t\t\t\tawait WaitHelpers.DelayMinimum();"
            ],
            [
                383,
                "\t\t\tAssert.True(duration >= WaitHelpers.SleepLength, $\"Expected {duration} to be greater or equal to: {WaitHelpers.SleepLength}\");"
            ],
            [
                404,
                "\t\t\t\t\t\tWaitHelpers.SleepMinimum();"
            ],
            [
                428,
                "\t\t\t\t\t\tawait WaitHelpers.DelayMinimum();"
            ],
            [
                454,
                "\t\t\t\t\t\t\tawait WaitHelpers.DelayMinimum();"
            ],
            [
                487,
                "\t\t\tWaitHelpers.AssertMinimumSleepLength(duration);"
            ],
            [
                509,
                "\t\t\tWaitHelpers.AssertMinimumSleepLength(duration);"
            ],
            [
                536,
                "\t\t\tWaitHelpers.AssertMinimumSleepLength(duration);"
            ],
            [
                558,
                "\t\t\tWaitHelpers.AssertMinimumSleepLength(duration);"
            ]
        ],
        "deleted": [
            [
                2,
                "using System.Diagnostics;"
            ],
            [
                29,
                "\t\tprivate int SleepLength"
            ],
            [
                30,
                "\t\t{"
            ],
            [
                31,
                "\t\t\tget"
            ],
            [
                32,
                "\t\t\t{"
            ],
            [
                33,
                "\t\t\t\tvar frequency = Stopwatch.Frequency;"
            ],
            [
                34,
                "\t\t\t\treturn 1000L / frequency < 1 ? 1 : (int)(1000L / frequency);"
            ],
            [
                35,
                "\t\t\t}"
            ],
            [
                36,
                "\t\t}"
            ],
            [
                37,
                ""
            ],
            [
                47,
                "\t\t\t\t() => { Thread.Sleep(SleepLength); });"
            ],
            [
                62,
                "\t\t\t\t\tThread.Sleep(SleepLength);"
            ],
            [
                82,
                "\t\t\t\t\tThread.Sleep(SleepLength);"
            ],
            [
                101,
                "\t\t\t\t\tThread.Sleep(SleepLength);"
            ],
            [
                117,
                "\t\t\t\tThread.Sleep(SleepLength);"
            ],
            [
                138,
                "\t\t\t\t\tThread.Sleep(SleepLength);"
            ],
            [
                161,
                "\t\t\t\t\tThread.Sleep(SleepLength);"
            ],
            [
                187,
                "\t\t\t\t\tThread.Sleep(SleepLength);"
            ],
            [
                209,
                "\t\t\t\tasync () => { await Task.Delay(SleepLength); });"
            ],
            [
                224,
                "\t\t\t\t\tawait Task.Delay(SleepLength);"
            ],
            [
                243,
                "\t\t\t\t\tawait Task.Delay(SleepLength);"
            ],
            [
                263,
                "\t\t\t\t\tawait Task.Delay(SleepLength);"
            ],
            [
                279,
                "\t\t\t\tawait Task.Delay(SleepLength);"
            ],
            [
                299,
                "\t\t\t\t\tawait Task.Delay(SleepLength);"
            ],
            [
                322,
                "\t\t\t\t\tawait Task.Delay(SleepLength);"
            ],
            [
                348,
                "\t\t\t\t\tawait Task.Delay(SleepLength);"
            ],
            [
                381,
                "\t\t\t\t\t\tawait Task.Delay(SleepLength);"
            ],
            [
                392,
                "\t\t\t//`await Task.Delay` is inaccurate, so we enable 10% error in the test"
            ],
            [
                393,
                "\t\t\tvar expectedTransactionLength = SleepLength - SleepLength * 0.1;"
            ],
            [
                395,
                "\t\t\tAssert.True(duration >= expectedTransactionLength, $\"Expected {duration} to be greater or equal to: {expectedTransactionLength}\");"
            ],
            [
                416,
                "\t\t\t\t\t\tThread.Sleep(SleepLength);"
            ],
            [
                440,
                "\t\t\t\t\t\tawait Task.Delay(SleepLength);"
            ],
            [
                466,
                "\t\t\t\t\t\t\tawait Task.Delay(SleepLength);"
            ],
            [
                499,
                "\t\t\tAssert.True(duration >= SleepLength, $\"Expected {duration} to be greater or equal to: {SleepLength}\");"
            ],
            [
                521,
                "\t\t\tAssert.True(duration >= SleepLength, $\"Expected {duration} to be greater or equal to: {SleepLength}\");"
            ],
            [
                548,
                "\t\t\tAssert.True(duration >= SleepLength, $\"Expected {duration} to be greater or equal to: {SleepLength}\");"
            ],
            [
                570,
                "\t\t\tAssert.True(duration >= SleepLength, $\"Expected {duration} to be greater or equal to: {SleepLength}\");"
            ]
        ]
    },
    "num_lines_added": 25,
    "num_lines_removed": 37
}