{
    "hash": "307803931d41b26ec930ce64d6573c2813b751be",
    "message": "Move TransactionContainer into AgentComponents\n\nAnd removed unused `using`s",
    "file_num_lines": 321,
    "diff_parsed": {
        "added": [
            [
                83,
                "\t\t\tAssert.Equal(request.RequestUri.ToString(), Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                84,
                "\t\t\tAssert.Equal(HttpMethod.Get.ToString(), Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Method);"
            ],
            [
                113,
                "\t\t\tAssert.NotNull(Agent.TransactionContainer.Transactions.Value);"
            ],
            [
                114,
                "\t\t\tAssert.Single(Agent.TransactionContainer.Transactions.Value.Spans);"
            ],
            [
                176,
                "\t\t\tvar (listener, payloadSender, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                178,
                "\t\t\tusing (listener)"
            ],
            [
                185,
                "\t\t\t\tAssert.Equal(localServer.Uri, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                188,
                "\t\t\tAssert.Equal(200, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.StatusCode);"
            ],
            [
                189,
                "\t\t\tAssert.Equal(HttpMethod.Get.ToString(), Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Method);"
            ],
            [
                200,
                "\t\t\tvar (listener, payloadSender, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                202,
                "\t\t\tusing(listener)"
            ],
            [
                209,
                "\t\t\t\tAssert.Equal(localServer.Uri, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                212,
                "\t\t\tAssert.Equal(500, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.StatusCode);"
            ],
            [
                213,
                "\t\t\tAssert.Equal(HttpMethod.Post.ToString(), Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Method);"
            ],
            [
                223,
                "\t\t\tvar (listener, payloadSender, agent) = RegisterListenerAndStartTransaction();"
            ],
            [
                235,
                "\t\t\tfinally"
            ],
            [
                236,
                "\t\t\t{"
            ],
            [
                237,
                "\t\t\t\tlistener.Dispose();"
            ],
            [
                238,
                "\t\t\t}"
            ],
            [
                251,
                "\t\t\tvar (disposableListener, payloadSender, agent) = RegisterListenerAndStartTransaction();"
            ],
            [
                253,
                "\t\t\tusing (disposableListener)"
            ],
            [
                254,
                "\t\t\t{"
            ],
            [
                255,
                "\t\t\t\tvar listener = new HttpDiagnosticListener(agent);"
            ],
            [
                257,
                "\t\t\t\tvar request = new HttpRequestMessage(HttpMethod.Get, \"https://elastic.co\");"
            ],
            [
                259,
                "\t\t\t\t//Simulate Start"
            ],
            [
                260,
                "\t\t\t\tlistener.OnNext(new KeyValuePair<string, object>(\"System.Net.Http.HttpRequestOut.Start\", new { Request = request }));"
            ],
            [
                262,
                "\t\t\t\tvar exceptionMsg = \"Sample exception msg\";"
            ],
            [
                263,
                "\t\t\t\tvar exception = new Exception(exceptionMsg);"
            ],
            [
                264,
                "\t\t\t\t//Simulate Exception"
            ],
            [
                265,
                "\t\t\t\tlistener.OnNext(new KeyValuePair<string, object>(\"System.Net.Http.Exception\", new { Request = request, Exception = exception }));"
            ],
            [
                267,
                "\t\t\t\tAssert.NotEmpty(payloadSender.Errors);"
            ],
            [
                268,
                "\t\t\t\tAssert.Equal(exceptionMsg, payloadSender.Errors[0].Errors[0].Exception.Message);"
            ],
            [
                269,
                "\t\t\t\tAssert.Equal(typeof(Exception).FullName, payloadSender.Errors[0].Errors[0].Exception.Type);"
            ],
            [
                270,
                "\t\t\t}"
            ],
            [
                279,
                "\t\t\tvar (listener, payloadSender, agent) = RegisterListenerAndStartTransaction();"
            ],
            [
                281,
                "\t\t\tusing (listener)"
            ],
            [
                290,
                "\t\t\tAssert.Equal(ApiConstants.TypeExternal, Agent.TransactionContainer.Transactions.Value.Spans[0].Type);"
            ],
            [
                291,
                "\t\t\tAssert.Equal(ApiConstants.SubtypeHttp, Agent.TransactionContainer.Transactions.Value.Spans[0].Subtype);"
            ],
            [
                292,
                "\t\t\tAssert.Null(Agent.TransactionContainer.Transactions.Value.Spans[0].Action); //we don't set Action for HTTP calls"
            ],
            [
                301,
                "\t\t\tvar (listener, payloadSender, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                303,
                "\t\t\tusing(listener)"
            ],
            [
                312,
                "\t\t\tAssert.Equal(\"GET localhost\", Agent.TransactionContainer.Transactions.Value.Spans[0].Name);"
            ],
            [
                322,
                "\t\t\tvar (listener, payloadSender, agent) = RegisterListenerAndStartTransaction();"
            ],
            [
                324,
                "\t\t\tusing(listener)"
            ],
            [
                335,
                "\t\t\t\tAssert.Equal(localServer.Uri, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                338,
                "\t\t\tAssert.True(Agent.TransactionContainer.Transactions.Value.Spans[0].Duration > 0);"
            ],
            [
                347,
                "\t\t\tvar (listener, payloadSender, agent) = RegisterListenerAndStartTransaction();"
            ],
            [
                349,
                "\t\t\tusing(listener)"
            ],
            [
                356,
                "\t\t\t\tAssert.Equal(localServer.Uri, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                359,
                "\t\t\tAssert.True(Agent.TransactionContainer.Transactions.Value.Spans[0].Id > 0);"
            ],
            [
                402,
                ""
            ],
            [
                403,
                "\t\t\tusing(var sub = agent.Subscribe(new HttpDiagnosticsSubscriber()))"
            ],
            [
                404,
                "\t\t\t{"
            ],
            [
                405,
                "\t\t\t\tvar url = \"https://elastic.co/\";"
            ],
            [
                406,
                "\t\t\t\tawait agent.Tracer.CaptureTransaction(\"TestTransaction\", \"TestType\", async (t) =>"
            ],
            [
                407,
                "\t\t\t\t{"
            ],
            [
                408,
                "\t\t\t\t\tThread.Sleep(5);"
            ],
            [
                409,
                ""
            ],
            [
                410,
                "\t\t\t\t\tvar httpClient = new HttpClient();"
            ],
            [
                411,
                "\t\t\t\t\ttry"
            ],
            [
                412,
                "\t\t\t\t\t{"
            ],
            [
                413,
                "\t\t\t\t\t\tawait httpClient.GetAsync(url);"
            ],
            [
                414,
                "\t\t\t\t\t}"
            ],
            [
                415,
                "\t\t\t\t\tcatch (Exception e)"
            ],
            [
                416,
                "\t\t\t\t\t{"
            ],
            [
                417,
                "\t\t\t\t\t\tt.CaptureException(e);"
            ],
            [
                418,
                "\t\t\t\t\t}"
            ],
            [
                419,
                "\t\t\t\t});"
            ],
            [
                420,
                ""
            ],
            [
                421,
                "\t\t\t\tAssert.NotEmpty(mockPayloadSender.Payloads[0].Transactions);"
            ],
            [
                422,
                "\t\t\t\tAssert.NotEmpty(mockPayloadSender.Payloads[0].Transactions[0].Spans);"
            ],
            [
                423,
                ""
            ],
            [
                424,
                "\t\t\t\tAssert.NotNull(mockPayloadSender.Payloads[0].Transactions[0].Spans[0].Context.Http);"
            ],
            [
                425,
                "\t\t\t\tAssert.Equal(url, mockPayloadSender.Payloads[0].Transactions[0].Spans[0].Context.Http.Url);"
            ],
            [
                426,
                "\t\t\t}"
            ],
            [
                427,
                "\t\t}"
            ],
            [
                428,
                ""
            ],
            [
                429,
                ""
            ],
            [
                430,
                "\t\t/// <summary>"
            ],
            [
                431,
                "\t\t/// Subscribes to diagnostic events then unsubscribes."
            ],
            [
                432,
                "\t\t/// Makes sure unsubscribing worked."
            ],
            [
                433,
                "\t\t/// </summary>"
            ],
            [
                434,
                "\t\t[Fact]"
            ],
            [
                435,
                "\t\tpublic async Task SubscribeUnsubscribe()"
            ],
            [
                436,
                "\t\t{"
            ],
            [
                437,
                "\t\t\tvar mockPayloadSender = new MockPayloadSender();"
            ],
            [
                438,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents(payloadSender: mockPayloadSender));"
            ],
            [
                439,
                ""
            ],
            [
                440,
                "\t\t\tvar sub = agent.Subscribe(new HttpDiagnosticsSubscriber()); //subscribe"
            ],
            [
                441,
                "\t\t\t{"
            ],
            [
                442,
                ""
            ],
            [
                443,
                "\t\t\t} //and then unsubscribe"
            ],
            [
                446,
                "\t\t\tawait agent.Tracer.CaptureTransaction(\"TestTransaction\", \"TestType\", async (t) =>"
            ],
            [
                461,
                "\t\t\tAssert.NotNull(Agent.TransactionContainer.Transactions.Value);"
            ],
            [
                462,
                "\t\t\tAssert.Empty(mockPayloadSender.Payloads[0].Transactions[0].Spans);"
            ],
            [
                465,
                "\t\tprivate (IDisposable, MockPayloadSender, ApmAgent) RegisterListenerAndStartTransaction()"
            ],
            [
                467,
                "\t\t\tvar payloadSender = new MockPayloadSender();"
            ],
            [
                468,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents(payloadSender: payloadSender));"
            ],
            [
                469,
                "\t\t\tvar sub = agent.Subscribe(new HttpDiagnosticsSubscriber());"
            ],
            [
                471,
                ""
            ],
            [
                472,
                "\t\t\treturn (sub, payloadSender, agent);"
            ],
            [
                477,
                "\t\t\t=> Agent.TransactionContainer.Transactions.Value ="
            ]
        ],
        "deleted": [
            [
                6,
                "using System.Reflection.Metadata.Ecma335;"
            ],
            [
                84,
                "\t\t\tAssert.Equal(request.RequestUri.ToString(), TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                85,
                "\t\t\tAssert.Equal(HttpMethod.Get.ToString(), TransactionContainer.Transactions.Value.Spans[0].Context.Http.Method);"
            ],
            [
                114,
                "\t\t\tAssert.NotNull(TransactionContainer.Transactions.Value);"
            ],
            [
                115,
                "\t\t\tAssert.Single(TransactionContainer.Transactions.Value.Spans);"
            ],
            [
                177,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents());"
            ],
            [
                178,
                "\t\t\tRegisterListenerAndStartTransaction(agent);"
            ],
            [
                186,
                "\t\t\t\tAssert.Equal(localServer.Uri, TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                189,
                "\t\t\tAssert.Equal(200, TransactionContainer.Transactions.Value.Spans[0].Context.Http.StatusCode);"
            ],
            [
                190,
                "\t\t\tAssert.Equal(HttpMethod.Get.ToString(), TransactionContainer.Transactions.Value.Spans[0].Context.Http.Method);"
            ],
            [
                201,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents());"
            ],
            [
                202,
                "\t\t\tRegisterListenerAndStartTransaction(agent);"
            ],
            [
                210,
                "\t\t\t\tAssert.Equal(localServer.Uri, TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                213,
                "\t\t\tAssert.Equal(500, TransactionContainer.Transactions.Value.Spans[0].Context.Http.StatusCode);"
            ],
            [
                214,
                "\t\t\tAssert.Equal(HttpMethod.Post.ToString(), TransactionContainer.Transactions.Value.Spans[0].Context.Http.Method);"
            ],
            [
                224,
                "\t\t\tvar payloadSender = new MockPayloadSender();"
            ],
            [
                225,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents(payloadSender: payloadSender));"
            ],
            [
                226,
                ""
            ],
            [
                227,
                "\t\t\tRegisterListenerAndStartTransaction(agent);"
            ],
            [
                251,
                "\t\t\tvar payloadSender = new MockPayloadSender();"
            ],
            [
                252,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents(payloadSender: payloadSender));"
            ],
            [
                253,
                "\t\t\tRegisterListenerAndStartTransaction(agent);"
            ],
            [
                255,
                "\t\t\tvar listener = new HttpDiagnosticListener(agent);"
            ],
            [
                257,
                "\t\t\tvar request = new HttpRequestMessage(HttpMethod.Get, \"https://elastic.co\");"
            ],
            [
                259,
                "\t\t\t//Simulate Start"
            ],
            [
                260,
                "\t\t\tlistener.OnNext(new KeyValuePair<string, object>(\"System.Net.Http.HttpRequestOut.Start\", new { Request = request }));"
            ],
            [
                262,
                "\t\t\tvar exceptionMsg = \"Sample exception msg\";"
            ],
            [
                263,
                "\t\t\tvar exception = new Exception(exceptionMsg);"
            ],
            [
                264,
                "\t\t\t//Simulate Exception"
            ],
            [
                265,
                "\t\t\tlistener.OnNext(new KeyValuePair<string, object>(\"System.Net.Http.Exception\", new { Request = request, Exception = exception }));"
            ],
            [
                267,
                "\t\t\tAssert.NotEmpty(payloadSender.Errors);"
            ],
            [
                268,
                "\t\t\tAssert.Equal(exceptionMsg, payloadSender.Errors[0].Errors[0].Exception.Message);"
            ],
            [
                269,
                "\t\t\tAssert.Equal(typeof(Exception).FullName, payloadSender.Errors[0].Errors[0].Exception.Type);"
            ],
            [
                278,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents());"
            ],
            [
                279,
                "\t\t\tRegisterListenerAndStartTransaction(agent);"
            ],
            [
                289,
                "\t\t\tAssert.Equal(ApiConstants.TypeExternal, TransactionContainer.Transactions.Value.Spans[0].Type);"
            ],
            [
                290,
                "\t\t\tAssert.Equal(ApiConstants.SubtypeHttp, TransactionContainer.Transactions.Value.Spans[0].Subtype);"
            ],
            [
                291,
                "\t\t\tAssert.Null(TransactionContainer.Transactions.Value.Spans[0].Action); //we don't set Action for HTTP calls"
            ],
            [
                300,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents());"
            ],
            [
                301,
                "\t\t\tRegisterListenerAndStartTransaction(agent);"
            ],
            [
                311,
                "\t\t\tAssert.Equal(\"GET localhost\", TransactionContainer.Transactions.Value.Spans[0].Name);"
            ],
            [
                321,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents());"
            ],
            [
                322,
                "\t\t\tRegisterListenerAndStartTransaction(agent);"
            ],
            [
                334,
                "\t\t\t\tAssert.Equal(localServer.Uri, TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                337,
                "\t\t\tAssert.True(TransactionContainer.Transactions.Value.Spans[0].Duration > 0);"
            ],
            [
                346,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents());"
            ],
            [
                347,
                "\t\t\tRegisterListenerAndStartTransaction(agent);"
            ],
            [
                355,
                "\t\t\t\tAssert.Equal(localServer.Uri, TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                358,
                "\t\t\tAssert.True(TransactionContainer.Transactions.Value.Spans[0].Id > 0);"
            ],
            [
                401,
                "\t\t\tagent.Subscribe(new HttpDiagnosticsSubscriber());"
            ],
            [
                404,
                "\t\t\tawait agent.Tracer.CaptureTransaction(\"TestTransaction\", \"TestType\", async(t) =>"
            ],
            [
                419,
                "\t\t\tAssert.NotEmpty(mockPayloadSender.Payloads[0].Transactions);"
            ],
            [
                420,
                "\t\t\tAssert.NotEmpty(mockPayloadSender.Payloads[0].Transactions[0].Spans);"
            ],
            [
                421,
                ""
            ],
            [
                422,
                "\t\t\tAssert.NotNull(mockPayloadSender.Payloads[0].Transactions[0].Spans[0].Context.Http);"
            ],
            [
                423,
                "\t\t\tAssert.Equal(url, mockPayloadSender.Payloads[0].Transactions[0].Spans[0].Context.Http.Url);"
            ],
            [
                426,
                "\t\tprivate void RegisterListenerAndStartTransaction(ApmAgent agent)"
            ],
            [
                428,
                "\t\t\tagent = agent ?? new ApmAgent(new TestAgentComponents());"
            ],
            [
                429,
                "\t\t\tnew HttpDiagnosticsSubscriber().Subscribe(agent);"
            ],
            [
                435,
                "\t\t\t=> TransactionContainer.Transactions.Value ="
            ]
        ]
    },
    "num_lines_added": 102,
    "num_lines_removed": 60
}