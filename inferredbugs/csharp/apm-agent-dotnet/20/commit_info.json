{
    "hash": "ec49a0619f953cc54eafac4fd564206a2c2e4a15",
    "message": "Utilize Stopwatch.Frequency to calibrate sleeps and delays",
    "file_num_lines": 355,
    "diff_parsed": {
        "added": [
            [
                2,
                "using System.Diagnostics;"
            ],
            [
                25,
                ""
            ],
            [
                29,
                "\t\tprivate int SleepLength"
            ],
            [
                30,
                "\t\t{"
            ],
            [
                31,
                "\t\t\tget"
            ],
            [
                32,
                "\t\t\t{"
            ],
            [
                33,
                "\t\t\t\tvar frequency = Stopwatch.Frequency;"
            ],
            [
                34,
                "\t\t\t\treturn 1000L / frequency < 1 ? 1 : (int)(1000L / frequency);"
            ],
            [
                35,
                "\t\t\t}"
            ],
            [
                36,
                "\t\t}"
            ],
            [
                37,
                ""
            ],
            [
                393,
                "\t\t\tvar expectedTransactionLength = SleepLength - SleepLength * 0.1;"
            ],
            [
                499,
                "\t\t\tAssert.True(duration >= SleepLength, $\"Expected {duration} to be greater or equal to: {SleepLength}\");"
            ],
            [
                521,
                "\t\t\tAssert.True(duration >= SleepLength, $\"Expected {duration} to be greater or equal to: {SleepLength}\");"
            ],
            [
                548,
                "\t\t\tAssert.True(duration >= SleepLength, $\"Expected {duration} to be greater or equal to: {SleepLength}\");"
            ],
            [
                570,
                "\t\t\tAssert.True(duration >= SleepLength, $\"Expected {duration} to be greater or equal to: {SleepLength}\");"
            ]
        ],
        "deleted": [
            [
                24,
                "\t\tprivate const int SleepLength = 45;"
            ],
            [
                383,
                "\t\t\tvar expectedTransactionLength = SleepLength - (SleepLength * 0.1);"
            ],
            [
                488,
                "\t\t\t//`await Task.Delay` is inaccurate, so we enable 10% error in the test"
            ],
            [
                489,
                "\t\t\tvar expectedTransactionLength = SleepLength - (SleepLength * 0.1);"
            ],
            [
                491,
                "\t\t\tAssert.True(duration >= expectedTransactionLength, $\"Expected {duration} to be greater or equal to: {expectedTransactionLength}\");"
            ],
            [
                512,
                "\t\t\t//`await Task.Delay` is inaccurate, so we enable 10% error in the test"
            ],
            [
                513,
                "\t\t\tvar expectedTransactionLength = SleepLength - (SleepLength * 0.1);"
            ],
            [
                515,
                "\t\t\tAssert.True(duration >= expectedTransactionLength, $\"Expected {duration} to be greater or equal to: {expectedTransactionLength}\");"
            ],
            [
                541,
                "\t\t\t//`await Task.Delay` is inaccurate, so we enable 10% error in the test"
            ],
            [
                542,
                "\t\t\tvar expectedTransactionLength = SleepLength - (SleepLength * 0.1);"
            ],
            [
                544,
                "\t\t\tAssert.True(duration >= expectedTransactionLength, $\"Expected {duration} to be greater or equal to: {expectedTransactionLength}\");"
            ],
            [
                565,
                ""
            ],
            [
                566,
                "\t\t\t//`await Task.Delay` is inaccurate, so we enable 10% error in the test"
            ],
            [
                567,
                "\t\t\tvar expectedTransactionLength = SleepLength - (SleepLength * 0.1);"
            ],
            [
                569,
                "\t\t\tAssert.True(duration >= expectedTransactionLength, $\"Expected {duration} to be greater or equal to: {expectedTransactionLength}\");"
            ]
        ]
    },
    "num_lines_added": 16,
    "num_lines_removed": 15
}