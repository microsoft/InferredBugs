{
    "hash": "14064078c448309082114aac644deaa2cdf48560",
    "message": "Make internal things internal #77 - WIP",
    "file_num_lines": 365,
    "diff_parsed": {
        "added": [
            [
                70,
                "\t\t\tvar payloadSender = new MockPayloadSender();"
            ],
            [
                71,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents(logger, payloadSender: payloadSender));"
            ],
            [
                84,
                "\t\t\tAssert.Equal(request.RequestUri.ToString(), (Agent.TransactionContainer.Transactions.Value.Spans[0] as Span)?.Context.Http.Url);"
            ],
            [
                85,
                "\t\t\tAssert.Equal(HttpMethod.Get.ToString(), (Agent.TransactionContainer.Transactions.Value.Spans[0] as Span)?.Context.Http.Method);"
            ],
            [
                177,
                "\t\t\tvar (listener, payloadSender, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                186,
                "\t\t\t\tAssert.Equal(localServer.Uri, (Agent.TransactionContainer.Transactions.Value.Spans[0] as Span)?.Context.Http.Url);"
            ],
            [
                189,
                "\t\t\tAssert.Equal(200, (Agent.TransactionContainer.Transactions.Value.Spans[0] as Span)?.Context.Http.StatusCode);"
            ],
            [
                190,
                "\t\t\tAssert.Equal(HttpMethod.Get.ToString(), (Agent.TransactionContainer.Transactions.Value.Spans[0] as Span)?.Context.Http.Method);"
            ],
            [
                201,
                "\t\t\tvar (listener, payloadSender, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                210,
                "\t\t\t\tAssert.Equal(localServer.Uri, (Agent.TransactionContainer.Transactions.Value.Spans[0] as Span)?.Context.Http.Url);"
            ],
            [
                213,
                "\t\t\tAssert.Equal(500, (Agent.TransactionContainer.Transactions.Value.Spans[0] as Span)?.Context.Http.StatusCode);"
            ],
            [
                214,
                "\t\t\tAssert.Equal(HttpMethod.Post.ToString(), (Agent.TransactionContainer.Transactions.Value.Spans[0] as Span)?.Context.Http.Method);"
            ],
            [
                326,
                "\t\t\tvar (listener, payloadSender, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                339,
                "\t\t\t\tAssert.Equal(localServer.Uri, (Agent.TransactionContainer.Transactions.Value.Spans[0] as Span)?.Context.Http.Url);"
            ],
            [
                351,
                "\t\t\tvar (listener, payloadSender, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                360,
                "\t\t\t\tAssert.Equal(localServer.Uri, (Agent.TransactionContainer.Transactions.Value.Spans[0] as Span)?.Context.Http.Url);"
            ],
            [
                394,
                "\t\t\tAssert.Empty(mockPayloadSender.SpansOnFirstTransaction);"
            ],
            [
                397,
                "\t\t/// <summary>"
            ],
            [
                398,
                "\t\t/// Make sure HttpDiagnosticSubscriber does not report spans after its disposed"
            ],
            [
                399,
                "\t\t/// </summary>"
            ],
            [
                415,
                "\t\t\t\t\tAssert.True(res.IsSuccessStatusCode);"
            ],
            [
                421,
                "\t\t\t\tforeach (var _ in Enumerable.Range(0, 10))"
            ],
            [
                459,
                "\t\t\t\tAssert.NotEmpty(mockPayloadSender.SpansOnFirstTransaction);"
            ],
            [
                461,
                "\t\t\t\tAssert.NotNull(mockPayloadSender.SpansOnFirstTransaction[0].Context.Http);"
            ],
            [
                462,
                "\t\t\t\tAssert.Equal(url, mockPayloadSender.SpansOnFirstTransaction[0].Context.Http.Url);"
            ],
            [
                514,
                "\t\t\tAssert.Empty(mockPayloadSender.SpansOnFirstTransaction);"
            ],
            [
                521,
                "\t\t\tvar sub = agent.Subscribe(new HttpDiagnosticsSubscriber());"
            ],
            [
                528,
                "\t\t\t//\t=> agent.TransactionContainer.Transactions.Value ="
            ],
            [
                529,
                "\t\t\t//\t\tnew Transaction(agent, $\"{nameof(TestSimpleOutgoingHttpRequest)}\", ApiConstants.TypeRequest);"
            ],
            [
                530,
                "\t\t\t=> agent.Tracer.StartTransaction($\"{nameof(TestSimpleOutgoingHttpRequest)}\", ApiConstants.TypeRequest);"
            ]
        ],
        "deleted": [
            [
                70,
                "\t\t\tvar agent = new ApmAgent(new TestAgentComponents(logger));"
            ],
            [
                83,
                "\t\t\tAssert.Equal(request.RequestUri.ToString(), Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                84,
                "\t\t\tAssert.Equal(HttpMethod.Get.ToString(), Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Method);"
            ],
            [
                176,
                "\t\t\tvar (listener, _, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                185,
                "\t\t\t\tAssert.Equal(localServer.Uri, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                188,
                "\t\t\tAssert.Equal(200, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.StatusCode);"
            ],
            [
                189,
                "\t\t\tAssert.Equal(HttpMethod.Get.ToString(), Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Method);"
            ],
            [
                200,
                "\t\t\tvar (listener, _, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                209,
                "\t\t\t\tAssert.Equal(localServer.Uri, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                212,
                "\t\t\tAssert.Equal(500, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.StatusCode);"
            ],
            [
                213,
                "\t\t\tAssert.Equal(HttpMethod.Post.ToString(), Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Method);"
            ],
            [
                325,
                "\t\t\tvar (listener, _, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                338,
                "\t\t\t\tAssert.Equal(localServer.Uri, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                350,
                "\t\t\tvar (listener, _, _) = RegisterListenerAndStartTransaction();"
            ],
            [
                359,
                "\t\t\t\tAssert.Equal(localServer.Uri, Agent.TransactionContainer.Transactions.Value.Spans[0].Context.Http.Url);"
            ],
            [
                393,
                "\t\t\tAssert.Empty(mockPayloadSender.Payloads[0].Transactions[0].Spans);"
            ],
            [
                396,
                "\t\t/// <summary> Make sure HttpDiagnosticSubscriber does not report spans after its disposed</summary>"
            ],
            [
                417,
                "\t\t\t\tforeach (var i in Enumerable.Range(0, 10))"
            ],
            [
                455,
                "\t\t\t\tAssert.NotEmpty(mockPayloadSender.Payloads[0].Transactions[0].Spans);"
            ],
            [
                457,
                "\t\t\t\tAssert.NotNull(mockPayloadSender.Payloads[0].Transactions[0].Spans[0].Context.Http);"
            ],
            [
                458,
                "\t\t\t\tAssert.Equal(url, mockPayloadSender.Payloads[0].Transactions[0].Spans[0].Context.Http.Url);"
            ],
            [
                510,
                "\t\t\tAssert.Empty(mockPayloadSender.Payloads[0].Transactions[0].Spans);"
            ],
            [
                517,
                "\t\t\tvar subscriber = new HttpDiagnosticsSubscriber();"
            ],
            [
                518,
                "\t\t\tvar sub = agent.Subscribe(subscriber);"
            ],
            [
                525,
                "\t\t\t=> Agent.TransactionContainer.Transactions.Value ="
            ],
            [
                526,
                "\t\t\t\tnew Transaction(agent, $\"{nameof(TestSimpleOutgoingHttpRequest)}\", ApiConstants.TypeRequest);"
            ]
        ]
    },
    "num_lines_added": 30,
    "num_lines_removed": 26
}