      public void CreateThrift(Field field, Thrift.SchemaElement parent, IList<Thrift.SchemaElement> container)
      {
         parent.Num_children += 1;

         //add the root container where map begins
         var root = new Thrift.SchemaElement(field.Name)
         {
            Converted_type = Thrift.ConvertedType.MAP,
            Num_children = 1,
            Repetition_type = Thrift.FieldRepetitionType.OPTIONAL
         };
         container.Add(root);

         //key-value is a container for column of keys and column of values
         var keyValue = new Thrift.SchemaElement("key_value")
         {
            Num_children = 0, //is assigned by children
            Repetition_type = Thrift.FieldRepetitionType.REPEATED
         };
         container.Add(keyValue);

         //now add the key and value separately
         MapField mapField = field as MapField;
         IDataTypeHandler keyHandler = DataTypeFactory.Match(mapField.Key.DataType);
         IDataTypeHandler valueHandler = DataTypeFactory.Match(mapField.Value.DataType);

         keyHandler.CreateThrift(mapField.Key, keyValue, container);
         Thrift.SchemaElement tseKey = container[container.Count - 1];
         valueHandler.CreateThrift(mapField.Value, keyValue, container);
         Thrift.SchemaElement tseValue = container[container.Count - 1];

         //fixups for weirdness in RLs
         if (tseKey.Repetition_type == Thrift.FieldRepetitionType.REPEATED)
            tseKey.Repetition_type = Thrift.FieldRepetitionType.OPTIONAL;
         if (tseValue.Repetition_type == Thrift.FieldRepetitionType.REPEATED)
            tseValue.Repetition_type = Thrift.FieldRepetitionType.OPTIONAL;
      }