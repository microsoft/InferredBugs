        private SyntaxVisitorResult<IN, OUT> Visit(OptionSyntaxNode<IN> node, object context = null)
        {
            var child = node.Children != null && node.Children.Any<ISyntaxNode<IN>>() ? node.Children[0] : null;
            if (child == null || node.IsEmpty)
            {
                if (node.IsGroupOption)
                {
                 return SyntaxVisitorResult<IN, OUT>.NewOptionGroupNone();   
                }
                else
                {
                    return SyntaxVisitorResult<IN, OUT>.NewOptionNone();
                }
            }

            var innerResult = Visit(child, context);
            switch (child)
            {
                case SyntaxLeaf<IN> leaf:
                    return SyntaxVisitorResult<IN, OUT>.NewToken(leaf.Token);
                case GroupSyntaxNode<IN> group:
                    return SyntaxVisitorResult<IN, OUT>.NewOptionGroupSome(innerResult.GroupResult);
                default:
                    return SyntaxVisitorResult<IN, OUT>.NewOptionSome(innerResult.ValueResult);
            }
        }