{
    "hash": "a3645c86c72cd3a7ac33ea4520823cb63bb914df",
    "message": "Started refactoring the DIMSE service into separate classes. Improved FileWriterSCP",
    "file_num_lines": 126,
    "diff_parsed": {
        "added": [
            [
                12,
                "using EvilDICOM.Network.SCUOps;"
            ],
            [
                26,
                "            using (var client = new TcpClient())"
            ],
            [
                27,
                "            {"
            ],
            [
                28,
                "                client.ConnectAsync(IPAddress.Parse(ae.IpAddress), ae.Port).Wait();"
            ],
            [
                29,
                "                var assoc = new Association(this, client) { AeTitle = ae.AeTitle };"
            ],
            [
                30,
                "                PDataMessenger.Send(dimse, assoc);"
            ],
            [
                31,
                "                assoc.Listen();"
            ],
            [
                32,
                "            }"
            ],
            [
                33,
                "        }"
            ],
            [
                35,
                "        public CFinder GetCFinder(Entity callingEntity)"
            ],
            [
                36,
                "        {"
            ],
            [
                37,
                "            return new CFinder(this, callingEntity);"
            ],
            [
                38,
                "        }"
            ],
            [
                40,
                "        public CMover GetCMover(Entity callingEntity)"
            ],
            [
                41,
                "        {"
            ],
            [
                42,
                "            return new CMover(this, callingEntity);"
            ],
            [
                56,
                "                if (res.Status != (ushort)Status.PENDING)"
            ],
            [
                57,
                "                    mr.Set();"
            ],
            [
                58,
                "                else { mr.Reset(); }"
            ],
            [
                63,
                "            mr.WaitOne(msWait);"
            ],
            [
                72,
                "            int msWait = 4000;"
            ],
            [
                80,
                "                Console.WriteLine($\"Adding response {lastContact}\");"
            ],
            [
                84,
                "                else { mr.Reset(); }"
            ],
            [
                89,
                "            mr.WaitOne(msWait); //Max wait for timeout"
            ]
        ],
        "deleted": [
            [
                25,
                "            var client = new TcpClient();"
            ],
            [
                27,
                "            client.ConnectAsync(IPAddress.Parse(ae.IpAddress), ae.Port).Wait();"
            ],
            [
                28,
                "            var assoc = new Association(this, client) { AeTitle = ae.AeTitle };"
            ],
            [
                29,
                "            PDataMessenger.Send(dimse, assoc);"
            ],
            [
                30,
                "            assoc.Listen();"
            ],
            [
                44,
                "                if (!(res.Status == (ushort)Status.PENDING))"
            ],
            [
                45,
                "                    mr.Set();"
            ],
            [
                51,
                "            while ((System.DateTime.Now - lastContact).TotalMilliseconds < msWait)"
            ],
            [
                52,
                "                mr.WaitOne(msWait);"
            ],
            [
                61,
                "            int msWait = 2000;"
            ],
            [
                76,
                "            while ((System.DateTime.Now - lastContact).TotalMilliseconds < msWait)"
            ],
            [
                77,
                "                mr.WaitOne(msWait);"
            ],
            [
                117,
                "        /// <summary>"
            ],
            [
                118,
                "        /// Emits a CMove operation to an entity which moves an image from the entity to the specified AETitle"
            ],
            [
                119,
                "        /// </summary>"
            ],
            [
                120,
                "        /// <param name=\"scp\">the provider which will perform the move</param>"
            ],
            [
                121,
                "        /// <param name=\"sopUid\">the uid of the image to be moved</param>"
            ],
            [
                122,
                "        /// <param name=\"patientId\">the patient id of the image</param>"
            ],
            [
                123,
                "        /// <param name=\"toAETite\">the entity title which will receive the image</param>"
            ],
            [
                124,
                "        /// <param name=\"msgId\">the message id</param>"
            ],
            [
                125,
                "        /// <returns>the move response</returns>"
            ],
            [
                126,
                "        public CMoveResponse SendCMove(Entity daemon, CFindImageIOD iod, string toAETite, ref ushort msgId)"
            ],
            [
                127,
                "        {"
            ],
            [
                128,
                "            var result = new CMoveIOD"
            ],
            [
                129,
                "            {"
            ],
            [
                130,
                "                QueryLevel = QueryLevel.IMAGE,"
            ],
            [
                131,
                "                SOPInstanceUID = iod.SOPInstanceUID,"
            ],
            [
                132,
                "                PatientId = iod.PatientId,"
            ],
            [
                133,
                "                StudyInstanceUID = iod.StudyInstanceUID,"
            ],
            [
                134,
                "                SeriesInstanceUID = iod.SeriesInstanceUID"
            ],
            [
                135,
                "            };"
            ],
            [
                136,
                "            var request = new CMoveRequest(result, toAETite, Root.STUDY, Core.Enums.Priority.MEDIUM, msgId);"
            ],
            [
                137,
                "            return GetResponse<CMoveResponse, CMoveRequest>(request, daemon, ref msgId);"
            ],
            [
                138,
                "        }"
            ],
            [
                139,
                ""
            ],
            [
                140,
                "        public CMoveResponse SendCMove(Entity daemon, CFindSeriesIOD iod, string toAETite, ref ushort msgId)"
            ],
            [
                141,
                "        {"
            ],
            [
                142,
                "            var result = new CMoveIOD"
            ],
            [
                143,
                "            {"
            ],
            [
                144,
                "                QueryLevel = QueryLevel.SERIES,"
            ],
            [
                145,
                "                SOPInstanceUID = iod.SeriesInstanceUID,"
            ],
            [
                146,
                "                PatientId = iod.PatientId,"
            ],
            [
                147,
                "                StudyInstanceUID = iod.StudyInstanceUID,"
            ],
            [
                148,
                "                SeriesInstanceUID = iod.SeriesInstanceUID"
            ],
            [
                149,
                "            };"
            ],
            [
                150,
                "            var request = new CMoveRequest(result, toAETite, Root.STUDY, Core.Enums.Priority.MEDIUM, msgId);"
            ],
            [
                151,
                "            return GetResponse<CMoveResponse, CMoveRequest>(request, daemon, ref msgId);"
            ],
            [
                152,
                "        }"
            ],
            [
                153,
                ""
            ],
            [
                154,
                "        public CMoveResponse SendCMoveStudy(Entity daemon, CFindStudyIOD iod, string toAETite, ref ushort msgId)"
            ],
            [
                155,
                "        {"
            ],
            [
                156,
                "            var result = new CMoveIOD"
            ],
            [
                157,
                "            {"
            ],
            [
                158,
                "                QueryLevel = QueryLevel.STUDY,"
            ],
            [
                159,
                "                SOPInstanceUID = iod.StudyInstanceUID,"
            ],
            [
                160,
                "                PatientId = iod.PatientId,"
            ],
            [
                161,
                "                StudyInstanceUID = iod.StudyInstanceUID,"
            ],
            [
                162,
                "            };"
            ],
            [
                163,
                "            var request = new CMoveRequest(result, toAETite, Root.STUDY, Core.Enums.Priority.MEDIUM, msgId);"
            ],
            [
                164,
                "            return GetResponse<CMoveResponse, CMoveRequest>(request, daemon, ref msgId);"
            ],
            [
                165,
                "        }"
            ],
            [
                166,
                ""
            ]
        ]
    },
    "num_lines_added": 24,
    "num_lines_removed": 62
}