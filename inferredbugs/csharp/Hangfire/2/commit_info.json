{
    "hash": "51deb68da6186091ccd9006f6032356431fafef2",
    "message": "Multiple queues processing by one server instance, relates to #22",
    "file_num_lines": 126,
    "diff_parsed": {
        "added": [
            [
                14,
                "        private readonly IEnumerable<WorkerPool> _workerPools;"
            ],
            [
                15,
                "        private readonly TimeSpan _pollInterval;"
            ],
            [
                16,
                ""
            ],
            [
                19,
                "        private readonly ICollection<JobManager> _managers = new List<JobManager>();"
            ],
            [
                30,
                "            IEnumerable<WorkerPool> workerPools,"
            ],
            [
                34,
                "            _workerPools = workerPools;"
            ],
            [
                35,
                "            _pollInterval = pollInterval;"
            ],
            [
                37,
                "            if (workerPools == null) throw new ArgumentNullException(\"workerPools\");"
            ],
            [
                67,
                "            foreach (var pool in _workerPools)"
            ],
            [
                68,
                "            {"
            ],
            [
                69,
                "                _managers.Add(new JobManager(_context, pool));"
            ],
            [
                70,
                "            }"
            ],
            [
                71,
                ""
            ],
            [
                72,
                "            _schedulePoller = new ThreadWrapper(new SchedulePoller(_pollInterval));"
            ],
            [
                80,
                ""
            ],
            [
                81,
                "            foreach (var manager in _managers)"
            ],
            [
                82,
                "            {"
            ],
            [
                83,
                "                manager.SendStop();"
            ],
            [
                84,
                "            }"
            ],
            [
                85,
                ""
            ],
            [
                86,
                "            foreach (var manager in _managers)"
            ],
            [
                87,
                "            {"
            ],
            [
                88,
                "                manager.Dispose();"
            ],
            [
                89,
                "            }"
            ],
            [
                125,
                "                foreach (var workerPool in _workerPools)"
            ],
            [
                127,
                "                    var pool = workerPool;"
            ],
            [
                130,
                "                        pool.Queue));"
            ]
        ],
        "deleted": [
            [
                5,
                "using System.Linq;"
            ],
            [
                17,
                "        private JobManager _manager;"
            ],
            [
                28,
                "            IEnumerable<string> queues,"
            ],
            [
                29,
                "            int concurrency,"
            ],
            [
                33,
                "            if (queues == null)"
            ],
            [
                34,
                "            {"
            ],
            [
                35,
                "                throw new ArgumentNullException(\"queues\");"
            ],
            [
                36,
                "            }"
            ],
            [
                38,
                "            if (concurrency <= 0)"
            ],
            [
                39,
                "            {"
            ],
            [
                40,
                "                throw new ArgumentOutOfRangeException(\"concurrency\", \"Concurrency value can not be negative or zero.\");"
            ],
            [
                41,
                "            }"
            ],
            [
                52,
                "                queues.ToList(),"
            ],
            [
                53,
                "                concurrency,"
            ],
            [
                54,
                "                pollInterval,"
            ],
            [
                74,
                "            _manager = new JobManager(_context);"
            ],
            [
                75,
                "            _schedulePoller = new ThreadWrapper(new SchedulePoller(_context.PollInterval));"
            ],
            [
                83,
                "            _manager.Dispose();"
            ],
            [
                116,
                "                            { \"Workers\", _context.WorkersCount.ToString() },"
            ],
            [
                120,
                "                foreach (var queue in _context.Queues)"
            ],
            [
                122,
                "                    var queueName = queue;"
            ],
            [
                125,
                "                        queueName));"
            ]
        ]
    },
    "num_lines_added": 27,
    "num_lines_removed": 22
}