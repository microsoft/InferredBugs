{
    "hash": "e6e0c1c75f1159a7b94b777d7a7dab8baeb6eb81",
    "message": "Handle file names independent of dates and numbers",
    "file_num_lines": 131,
    "diff_parsed": {
        "added": [
            [
                10,
                "    private const int _uninitializedFileNumber = -1;"
            ],
            [
                15,
                "    private bool _isFileNameDateDependent;"
            ],
            [
                16,
                "    private bool _isFileNameNumberDependent;"
            ],
            [
                17,
                ""
            ],
            [
                21,
                "    public string Directory { get; }"
            ],
            [
                42,
                "        PrefixPattern = DefaultPrefixPattern;"
            ],
            [
                43,
                "        Directory = Path.GetFullPath(directory);"
            ],
            [
                45,
                "        _currentFileNumber = _uninitializedFileNumber;"
            ],
            [
                65,
                "        if (_currentFileNumber == _uninitializedFileNumber)"
            ],
            [
                66,
                "            Initialize();"
            ],
            [
                68,
                "        var fileName = Path.Combine(Directory, GetFileName(DateOnly.FromDateTime(_currentDate), _currentFileNumber));"
            ],
            [
                94,
                "    private void Initialize()"
            ],
            [
                95,
                "    {"
            ],
            [
                96,
                "        System.IO.Directory.CreateDirectory(Directory);"
            ],
            [
                97,
                ""
            ],
            [
                98,
                "        _currentDate = DateTime.UtcNow.Date;"
            ],
            [
                99,
                ""
            ],
            [
                100,
                "        // Check if the file name depends on date and number (will work if the implementation is an unconditional pure method)"
            ],
            [
                101,
                "        var baseFileName = GetFileName(DateOnly.FromDateTime(_currentDate), 0);"
            ],
            [
                102,
                "        _isFileNameDateDependent = !FileNameEquals(baseFileName, GetFileName(DateOnly.FromDateTime(_currentDate).AddDays(1), 0));"
            ],
            [
                103,
                "        _isFileNameNumberDependent = !FileNameEquals(baseFileName, GetFileName(DateOnly.FromDateTime(_currentDate), 1));"
            ],
            [
                104,
                ""
            ],
            [
                105,
                "        _currentFileNumber = FindLastRollingFileNumber(DateOnly.FromDateTime(_currentDate));"
            ],
            [
                106,
                "    }"
            ],
            [
                107,
                ""
            ],
            [
                139,
                "        var maxSizeReached = _isFileNameNumberDependent && MaxFileSizeInBytes > 0 && Stream.Position >= MaxFileSizeInBytes;"
            ],
            [
                140,
                "        var dateReached = _isFileNameDateDependent && _currentDate != timestamp.Date;"
            ],
            [
                166,
                "            var fileName = Path.Combine(Directory, GetFileName(date, nextFileNumber));"
            ],
            [
                169,
                "            if (FileNameEquals(fileName, lastExistingFileName))"
            ],
            [
                207,
                ""
            ],
            [
                208,
                "    private static bool FileNameEquals(string? a, string? b)"
            ],
            [
                209,
                "        => string.Equals(a, b, OperatingSystem.IsWindows() ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal);"
            ]
        ],
        "deleted": [
            [
                10,
                "    private const int _initializeOnFirstAppend = -1;"
            ],
            [
                18,
                "    public string FileDirectory { get; }"
            ],
            [
                39,
                "        PrefixPattern = \"%time - %level - %logger || \";"
            ],
            [
                40,
                "        FileDirectory = Path.GetFullPath(directory);"
            ],
            [
                42,
                "        _currentFileNumber = _initializeOnFirstAppend;"
            ],
            [
                62,
                "        if (_currentFileNumber == _initializeOnFirstAppend)"
            ],
            [
                63,
                "        {"
            ],
            [
                64,
                "            Directory.CreateDirectory(FileDirectory);"
            ],
            [
                65,
                ""
            ],
            [
                66,
                "            _currentDate = DateTime.UtcNow.Date;"
            ],
            [
                67,
                "            _currentFileNumber = FindLastRollingFileNumber(DateOnly.FromDateTime(_currentDate));"
            ],
            [
                68,
                "        }"
            ],
            [
                70,
                "        var fileName = Path.Combine(FileDirectory, GetFileName(DateOnly.FromDateTime(_currentDate), _currentFileNumber));"
            ],
            [
                127,
                "        var maxSizeReached = MaxFileSizeInBytes > 0 && Stream.Position >= MaxFileSizeInBytes;"
            ],
            [
                128,
                "        var dateReached = _currentDate != timestamp.Date;"
            ],
            [
                154,
                "            var fileName = Path.Combine(FileDirectory, GetFileName(date, nextFileNumber));"
            ],
            [
                157,
                "            if (string.Equals(fileName, lastExistingFileName, OperatingSystem.IsWindows() ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal))"
            ]
        ]
    },
    "num_lines_added": 32,
    "num_lines_removed": 17
}