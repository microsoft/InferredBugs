{
    "hash": "f9f0321bb814e7ac1a92ccc8f8a98799f0733991",
    "message": "requirement options and proper not-conditions",
    "file_num_lines": 75,
    "diff_parsed": {
        "added": [
            [
                18,
                "\t\t\tif (context.NumberRanges == null)"
            ],
            [
                19,
                "\t\t\t\treturn GenerationResult.NotApplicable;"
            ],
            [
                21,
                "\t\t\tvar range = context.NumberRanges.Ranges.Any()"
            ],
            [
                22,
                "\t\t\t\t? JsonSchemaExtensions.Randomizer.ArrayElement(context.NumberRanges.Ranges.ToArray())"
            ],
            [
                23,
                "\t\t\t\t: NumberRangeSet.Full.Ranges[0];"
            ],
            [
                25,
                "\t\t\tvar minValue = (long) Math.Ceiling(range.Minimum.Value);"
            ],
            [
                26,
                "\t\t\tvar maxValue = (long) Math.Floor(range.Maximum.Value);"
            ],
            [
                27,
                ""
            ],
            [
                28,
                "\t\t\tvar value = GetValue(minValue, maxValue, context.Multiples?.ToArray() ?? Array.Empty<decimal>(),"
            ],
            [
                29,
                "\t\t\t\tcontext.Antimultiples?.ToArray() ?? Array.Empty<decimal>());"
            ]
        ],
        "deleted": [
            [
                18,
                "\t\t\tJsonSchema schema = null;"
            ],
            [
                20,
                "\t\t\tvar minimum = schema.Keywords?.OfType<MinimumKeyword>().FirstOrDefault()?.Value;"
            ],
            [
                21,
                "\t\t\tvar minValue = minimum.HasValue ? (long) Math.Ceiling(minimum.Value) : -1000;"
            ],
            [
                22,
                "\t\t\tvar maximum = schema.Keywords?.OfType<MaximumKeyword>().FirstOrDefault()?.Value;"
            ],
            [
                23,
                "\t\t\tvar maxValue = maximum.HasValue ? (long) Math.Floor(maximum.Value) : 1000;"
            ],
            [
                24,
                "\t\t\tvar multipleOf = schema.Keywords?.OfType<MultipleOfKeyword>().FirstOrDefault()?.Value ?? 1;"
            ],
            [
                26,
                "\t\t\tvar value = GetValue(minValue, maxValue, new[] {multipleOf}, new decimal[] { });"
            ]
        ]
    },
    "num_lines_added": 10,
    "num_lines_removed": 7
}