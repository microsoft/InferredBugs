{
    "hash": "33865b8bb1b0e06c3f95052c16a03da83566422f",
    "message": "Property signature ignored on invalid signature",
    "file_num_lines": 331,
    "diff_parsed": {
        "added": [
            [
                225,
                "            BlobSignatureReader reader;"
            ],
            [
                226,
                "            if (TryGetBlobReader(signature, out reader))"
            ],
            [
                228,
                "                using (reader)"
            ],
            [
                229,
                "                {"
            ],
            [
                230,
                "                    reader.GenericContext = parentProperty.DeclaringType;"
            ],
            [
                232,
                "                    byte flag = reader.ReadByte();"
            ],
            [
                234,
                "                    if ((flag & 8) == 0)"
            ],
            [
                235,
                "                        throw new ArgumentException(\"Signature doesn't refer to a valid property signature.\");"
            ],
            [
                237,
                "                    propertySig = new PropertySignature();"
            ],
            [
                238,
                "                    propertySig.HasThis = (flag & 0x20) != 0;"
            ],
            [
                239,
                "                    NETGlobals.ReadCompressedUInt32(reader);"
            ],
            [
                240,
                "                    propertySig.ReturnType = reader.ReadTypeReference();"
            ],
            [
                241,
                "                }"
            ]
        ],
        "deleted": [
            [
                225,
                "            using (BlobSignatureReader reader = GetBlobReader(signature))"
            ],
            [
                227,
                "                reader.GenericContext = parentProperty.DeclaringType;"
            ],
            [
                229,
                "                byte flag = reader.ReadByte();"
            ],
            [
                231,
                "                if ((flag & 8) == 0)"
            ],
            [
                232,
                "                    throw new ArgumentException(\"Signature doesn't refer to a valid property signature.\");"
            ],
            [
                234,
                "                propertySig = new PropertySignature();"
            ],
            [
                235,
                "                propertySig.HasThis = (flag & 0x20) != 0;"
            ],
            [
                236,
                "                NETGlobals.ReadCompressedUInt32(reader);"
            ],
            [
                237,
                "                propertySig.ReturnType = reader.ReadTypeReference();"
            ]
        ]
    },
    "num_lines_added": 13,
    "num_lines_removed": 9
}