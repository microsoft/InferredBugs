{
    "hash": "0fe15318f0af263eea71168daf26bd9c63a0e84c",
    "message": "using a pool of servers, and reusing sockets instead of having to manage sockets",
    "file_num_lines": 40,
    "diff_parsed": {
        "added": [
            [
                10,
                "\t\tprivate IStubHttp _httpMockRepository;"
            ],
            [
                14,
                "\t\t\t_httpMockRepository = HttpMockRepository.At(\"http://localhost:8080/\");"
            ],
            [
                21,
                "\t\t\t_httpMockRepository.WithNewContext().Stub(x => x.Post(\"/firsttest\")).Return(stubbedReponse).OK();"
            ],
            [
                23,
                "\t\t\tAssert.That(wc.DownloadString(\"Http://localhost:8080/firsttest/\"), Is.EqualTo(stubbedReponse));"
            ],
            [
                27,
                "\t\tpublic void SecondTest() {"
            ],
            [
                30,
                "\t\t\t_httpMockRepository.WithNewContext().Stub(x => x.Post(\"/secondtest\")).Return(stubbedReponse).OK();"
            ],
            [
                32,
                "\t\t\tAssert.That(wc.DownloadString(\"Http://localhost:8080/secondtest/\"), Is.EqualTo(stubbedReponse));"
            ],
            [
                36,
                "\t\tpublic void Stubs_should_be_unique_within_context() {"
            ],
            [
                41,
                "\t\t\tIStubHttp stubHttp = _httpMockRepository.WithNewContext();"
            ],
            [
                43,
                "\t\t\tstubHttp.Stub(x => x.Post(\"/firsttest\")).Return(stubbedReponseOne).OK();"
            ],
            [
                45,
                "\t\t\tstubHttp.Stub(x => x.Post(\"/secondtest\")).Return(stubbedReponseTwo).OK();"
            ],
            [
                47,
                "\t\t\tAssert.That(wc.DownloadString(\"Http://localhost:8080/firsttest/\"), Is.EqualTo(stubbedReponseOne));"
            ],
            [
                48,
                "\t\t\tAssert.That(wc.DownloadString(\"Http://localhost:8080/secondtest/\"), Is.EqualTo(stubbedReponseTwo));"
            ]
        ],
        "deleted": [
            [
                10,
                "\t\tprivate IHttpEndpoint _httpEndpoint;"
            ],
            [
                14,
                "\t\t\t_httpEndpoint = new HttpEndpoint().At(\"http://localhost:8081/\");"
            ],
            [
                21,
                "\t\t\t_httpEndpoint.WithNewContext()"
            ],
            [
                22,
                "\t\t\t\t.Stub(x => x.Post(\"/firsttest\"))"
            ],
            [
                23,
                "\t\t\t\t.Return(stubbedReponse)"
            ],
            [
                24,
                "\t\t\t\t.OK();"
            ],
            [
                26,
                "\t\t\tAssert.That(wc.DownloadString(\"Http://localhost:8081/firsttest/\"), Is.EqualTo(stubbedReponse));"
            ],
            [
                30,
                "\t\tpublic void SecondTest()"
            ],
            [
                31,
                "\t\t{"
            ],
            [
                34,
                "\t\t\t_httpEndpoint.WithNewContext()"
            ],
            [
                35,
                "\t\t\t\t.Stub(x => x.Post(\"/secondtest\"))"
            ],
            [
                36,
                "\t\t\t\t.Return(stubbedReponse).OK();"
            ],
            [
                38,
                "\t\t\tAssert.That(wc.DownloadString(\"Http://localhost:8081/secondtest/\"), Is.EqualTo(stubbedReponse));"
            ],
            [
                42,
                "\t\tpublic void Stubs_should_be_unique_within_context()"
            ],
            [
                43,
                "\t\t{"
            ],
            [
                48,
                "\t\t\tvar stubHttp = _httpEndpoint.WithNewContext();"
            ],
            [
                50,
                "\t\t\tstubHttp"
            ],
            [
                51,
                "\t\t\t\t.Stub(x => x.Post(\"/firsttest\"))"
            ],
            [
                52,
                "\t\t\t\t.Return(stubbedReponseOne).OK();"
            ],
            [
                54,
                "\t\t\tstubHttp"
            ],
            [
                55,
                "\t\t\t\t.Stub(x => x.Post(\"/secondtest\"))"
            ],
            [
                56,
                "\t\t\t\t.Return(stubbedReponseTwo).OK();"
            ],
            [
                58,
                "\t\t\tAssert.That(wc.DownloadString(\"Http://localhost:8081/firsttest/\"), Is.EqualTo(stubbedReponseOne));"
            ],
            [
                59,
                "\t\t\tAssert.That(wc.DownloadString(\"Http://localhost:8081/secondtest/\"), Is.EqualTo(stubbedReponseTwo));"
            ],
            [
                60,
                ""
            ],
            [
                61,
                "\t\t}"
            ],
            [
                62,
                ""
            ],
            [
                63,
                ""
            ],
            [
                64,
                "\t\t[TestFixtureTearDown]"
            ],
            [
                65,
                "\t\tpublic void TearDown() {"
            ],
            [
                66,
                "\t\t\t_httpEndpoint.Dispose();"
            ]
        ]
    },
    "num_lines_added": 13,
    "num_lines_removed": 31
}