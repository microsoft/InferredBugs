{
    "hash": "de3c3698ca362f8ff9f596cc0d35cecb8aa6a3c9",
    "message": "More work",
    "file_num_lines": 95,
    "diff_parsed": {
        "added": [
            [
                2,
                "using System.Runtime.CompilerServices;"
            ],
            [
                9,
                "\t\tstatic public void Assert (bool assert, [CallerMemberName] string caller = null, string message = \"\")"
            ],
            [
                10,
                "\t\t{"
            ],
            [
                11,
                "\t\t\tif (!assert){"
            ],
            [
                12,
                "\t\t\t\tthrow new Exception ($\"{caller}: {message}\");"
            ],
            [
                13,
                "\t\t\t}"
            ],
            [
                14,
                "\t\t}"
            ],
            [
                15,
                ""
            ],
            [
                16,
                "\t\tstatic public void Assert (TFStatus status, [CallerMemberName] string caller = null, string message = \"\")"
            ],
            [
                17,
                "\t\t{"
            ],
            [
                18,
                "\t\t\tif (status.StatusCode != TFCode.Ok) {"
            ],
            [
                19,
                "\t\t\t\tthrow new Exception ($\"{caller}: {status.StatusMessage} {message}\");"
            ],
            [
                20,
                "\t\t\t}"
            ],
            [
                21,
                "\t\t}"
            ],
            [
                22,
                ""
            ],
            [
                27,
                "\t\t\tConsole.WriteLine (\"Handle: {0}\", desc.Handle);"
            ],
            [
                28,
                "\t\t\tvar j = desc.FinishOperation ();"
            ],
            [
                29,
                "\t\t\tConsole.WriteLine (\"FinishHandle: {0}\", j.Handle);"
            ],
            [
                30,
                "\t\t\treturn j;"
            ],
            [
                33,
                "\t\tTFOperation ScalarConst (int v, TFGraph graph, TFStatus status)"
            ],
            [
                35,
                "\t\t\tvar desc = new TFOperation (graph, \"Const\", \"scalar\");"
            ],
            [
                36,
                "\t\t\tdesc.SetAttr (\"value\", TFTensor.Constant (v), status);"
            ],
            [
                37,
                "\t\t\tif (status.StatusCode != TFCode.Ok)"
            ],
            [
                38,
                "\t\t\t\treturn null;"
            ],
            [
                39,
                "\t\t\tdesc.SetAttrType (\"dtype\", TFDataType.Int32);"
            ],
            [
                40,
                "\t\t\treturn desc.FinishOperation ();"
            ],
            [
                43,
                "\t\tTFOperation Add (TFOperation left, TFOperation right, TFGraph graph, TFStatus status)"
            ],
            [
                45,
                "\t\t\tvar op = new TFOperation (graph, \"AddN\", \"add\");"
            ],
            [
                46,
                ""
            ],
            [
                47,
                "\t\t\top.AddInputs (new TFOutput (left, 0), new TFOutput (right, 0));"
            ],
            [
                48,
                "\t\t\top.FinishOperation ();"
            ],
            [
                49,
                "\t\t\treturn op;"
            ],
            [
                55,
                "\t\t\tTFBuffer graphDef;"
            ],
            [
                56,
                ""
            ],
            [
                57,
                "\t\t\t// Create graph with two nodes, \"x\" and \"3\""
            ],
            [
                58,
                "\t\t\tusing (var graph = new TFGraph ()) {"
            ],
            [
                59,
                "\t\t\t\tAssert (status);"
            ],
            [
                60,
                "\t\t\t\tPlaceholder (graph, status);"
            ],
            [
                61,
                "\t\t\t\tAssert (graph [\"feed\"] != null);"
            ],
            [
                62,
                ""
            ],
            [
                63,
                "\t\t\t\tScalarConst (3, graph, status);"
            ],
            [
                64,
                "\t\t\t\tAssert (graph [\"scalar\"] != null);"
            ],
            [
                65,
                ""
            ],
            [
                66,
                "\t\t\t\t// Export to GraphDef"
            ],
            [
                67,
                "\t\t\t\tgraphDef = new TFBuffer ();"
            ],
            [
                68,
                "\t\t\t\tgraph.ToGraphDef (graphDef, status);"
            ],
            [
                69,
                "\t\t\t\tAssert (status);"
            ],
            [
                70,
                "\t\t\t};"
            ],
            [
                71,
                ""
            ],
            [
                72,
                "\t\t\t// Import it again, with a prefix, in a fresh graph"
            ],
            [
                73,
                "\t\t\tusing (var graph = new TFGraph ()) {"
            ],
            [
                74,
                "\t\t\t\tusing (var options = new TFImportGraphDefOptions ()) {"
            ],
            [
                75,
                "\t\t\t\t\toptions.SetPrefix (\"imported\");"
            ],
            [
                76,
                "\t\t\t\t\tgraph.ImportGraphDef (graphDef, options, status);"
            ],
            [
                77,
                "\t\t\t\t\tAssert (status);"
            ],
            [
                78,
                "\t\t\t\t}"
            ],
            [
                79,
                "\t\t\t\tgraphDef.Dispose ();"
            ],
            [
                80,
                ""
            ],
            [
                81,
                "\t\t\t\tvar scalar = graph [\"imported/scalar\"];"
            ],
            [
                82,
                "\t\t\t\tvar feed = graph [\"imported/feed\"];"
            ],
            [
                83,
                "\t\t\t\tAssert (scalar != null);"
            ],
            [
                84,
                "\t\t\t\tAssert (feed != null);"
            ],
            [
                85,
                ""
            ],
            [
                86,
                "\t\t\t\t// Can add nodes to the imported graph without trouble"
            ],
            [
                87,
                "\t\t\t\tAdd (feed, scalar, graph, status);"
            ],
            [
                88,
                "\t\t\t\tAssert (status);"
            ],
            [
                89,
                "\t\t\t}"
            ],
            [
                90,
                "\t\t}"
            ],
            [
                91,
                ""
            ],
            [
                92,
                "\t\tpublic void TestSession ()"
            ],
            [
                93,
                "\t\t{"
            ],
            [
                94,
                "\t\t\tvar status = new TFStatus ();"
            ],
            [
                95,
                "\t\t\tusing (var graph = new TFGraph ()) {"
            ],
            [
                96,
                "\t\t\t\tvar feed = Placeholder (graph, status);"
            ],
            [
                97,
                "\t\t\t\tvar two = ScalarConst (2, graph, status);"
            ],
            [
                98,
                "\t\t\t\tvar add = Add (feed, two, graph, status);"
            ],
            [
                99,
                "\t\t\t\tAssert (status);"
            ],
            [
                100,
                ""
            ],
            [
                101,
                "\t\t\t\tusing (var session = new TFSession (graph, status)) {"
            ],
            [
                102,
                ""
            ],
            [
                103,
                "\t\t\t\t}"
            ],
            [
                104,
                "\t\t\t}"
            ],
            [
                111,
                "\t\t\tvar t = new MainClass ();"
            ],
            [
                112,
                "\t\t\tt.TestImportGraphDef ();"
            ],
            [
                113,
                "\t\t\tt.TestSession ();"
            ]
        ],
        "deleted": [
            [
                12,
                "\t\t\treturn desc;"
            ],
            [
                15,
                "\t\tTFTensor Int32Tensor (int v)"
            ],
            [
                17,
                "\t\t\t// return new TFTensor (TFDataType.Int32, null,"
            ],
            [
                18,
                "\t\t\treturn null;;"
            ],
            [
                21,
                "\t\tTFOperation ScalarConst (int v, TFGraph graph, TFStatus s)"
            ],
            [
                23,
                "\t\t\tvar desc = new TFOperation (graph, \"Const\", \"scalar\");"
            ],
            [
                24,
                "\t\t\t//desc.SetAttr (desc, \"value\""
            ],
            [
                25,
                "\t\t\treturn null;"
            ],
            [
                31,
                "\t\t\tvar graph = new TFGraph ();"
            ],
            [
                32,
                "\t\t\tPlaceholder (graph, status);"
            ],
            [
                39,
                "\t\t\tnew MainClass ().TestImportGraphDef ();"
            ]
        ]
    },
    "num_lines_added": 85,
    "num_lines_removed": 11
}