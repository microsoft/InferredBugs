        [TestCase("en", "Line One", "Line Two", "Line Three")]
        [TestCase("es", "Línea Uno", "Línea dos", "Línea Tres")]
        public void Translation_ShouldConsider_LineBreakCharacters(string locale, string line1, string line2, string line3)
        {
            I18N.Current.Locale = locale;

            const string key = "TextWithLineBreakCharacters";
            var textWithLineBreaks = I18N.Current.Translate(key);
            var textWithLineBreaksOrNull = I18N.Current.TranslateOrNull(key);
            var expected = $"{line1}{Environment.NewLine}{line2}{Environment.NewLine}{line3}";

            Assert.AreEqual(expected, textWithLineBreaks);
            Assert.AreEqual(expected, textWithLineBreaksOrNull);

            I18N.Current = new I18N()
                .SetResourcesFolder("JsonKvpLocales")
                .AddLocaleReader(new JsonKvpReader(), ".json")
                .Init(GetType().Assembly);

            I18N.Current.Locale = locale;

            textWithLineBreaks = I18N.Current.Translate(key);
            textWithLineBreaksOrNull = I18N.Current.TranslateOrNull(key);
            expected = $"{line1}{Environment.NewLine}{line2}{Environment.NewLine}{line3}";

            Assert.AreEqual(expected, textWithLineBreaks);
            Assert.AreEqual(expected, textWithLineBreaksOrNull);

            I18N.Current = new I18N()
                .SetResourcesFolder("JsonListLocales")
                .AddLocaleReader(new JsonListReader(), ".json")
                .Init(GetType().Assembly);

            I18N.Current.Locale = locale;

            textWithLineBreaks = I18N.Current.Translate(key);
            textWithLineBreaksOrNull = I18N.Current.TranslateOrNull(key);
            expected = $"{line1}{Environment.NewLine}{line2}{Environment.NewLine}{line3}";

            Assert.AreEqual(expected, textWithLineBreaks);
            Assert.AreEqual(expected, textWithLineBreaksOrNull);

            I18N.Current = new I18N()
                .SetResourcesFolder("CsvLineLocales")
                .AddLocaleReader(new SingleLocaleCsvReader(), ".csv")
                .Init(GetType().Assembly);

            I18N.Current.Locale = locale;

            textWithLineBreaks = I18N.Current.Translate(key);
            textWithLineBreaksOrNull = I18N.Current.TranslateOrNull(key);
            expected = $"{line1}{Environment.NewLine}{line2}{Environment.NewLine}{line3}";

            Assert.AreEqual(expected, textWithLineBreaks);
            Assert.AreEqual(expected, textWithLineBreaksOrNull);
        }