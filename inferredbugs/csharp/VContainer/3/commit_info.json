{
    "hash": "18077dadceaea290c3f1172d795304ceb0b57c91",
    "message": "Fix a bug where Singletons are duplicated if the child has the same interface",
    "file_num_lines": 166,
    "diff_parsed": {
        "added": [
            [
                83,
                "            builder.Register<DisposableServiceA>(Lifetime.Singleton)"
            ],
            [
                84,
                "                .AsImplementedInterfaces()"
            ],
            [
                85,
                "                .AsSelf();"
            ],
            [
                88,
                "            var scopedContainer = container.CreateScope(childBuilder =>"
            ],
            [
                89,
                "            {"
            ],
            [
                90,
                "                childBuilder.Register<DisposableServiceB>(Lifetime.Singleton)"
            ],
            [
                91,
                "                    .AsImplementedInterfaces()"
            ],
            [
                92,
                "                    .AsSelf();"
            ],
            [
                93,
                "            });"
            ],
            [
                95,
                "            var singleton = container.Resolve<DisposableServiceA>();"
            ],
            [
                96,
                "            var singleton2 = scopedContainer.Resolve<DisposableServiceA>();"
            ],
            [
                97,
                "            Assert.That(singleton, Is.InstanceOf<DisposableServiceA>());"
            ],
            [
                98,
                "            Assert.That(singleton2, Is.InstanceOf<DisposableServiceA>());"
            ],
            [
                99,
                "            Assert.That(singleton, Is.EqualTo(singleton2));"
            ]
        ],
        "deleted": [
            [
                83,
                "            builder.Register<NoDependencyServiceA>(Lifetime.Singleton);"
            ],
            [
                86,
                "            var scopedContainer = container.CreateScope();"
            ],
            [
                88,
                "            var singleton = scopedContainer.Resolve<NoDependencyServiceA>();"
            ],
            [
                89,
                "            Assert.That(singleton, Is.InstanceOf<NoDependencyServiceA>());"
            ]
        ]
    },
    "num_lines_added": 14,
    "num_lines_removed": 4
}