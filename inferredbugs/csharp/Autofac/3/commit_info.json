{
    "hash": "93891b2b8d7fffd656d19f7c7e5a243f5302e6cb",
    "message": "Added WithParameter() overload accepting the same predicate/value accessor arguments as supported by ResolvedParameter, hopefully making this feature more discoverable.",
    "file_num_lines": 81,
    "diff_parsed": {
        "added": [
            [
                16,
                "            var target = new Container();"
            ],
            [
                17,
                "            var ex = Assert.Throws<ComponentNotRegisteredException>(() => target.Resolve<object>());"
            ],
            [
                18,
                "            Assert.IsTrue(ex.Message.Contains(\"System.Object\"));"
            ],
            [
                74,
                "        public void WhenPredicateAndValueParameterSupplied_PassedToComponent()"
            ],
            [
                76,
                "            const string a = \"Hello\";"
            ],
            [
                77,
                "            const int b = 42;"
            ],
            [
                78,
                "            var builder = new ContainerBuilder();"
            ],
            [
                79,
                ""
            ],
            [
                80,
                "            builder.RegisterType<Parameterised>()"
            ],
            [
                81,
                "                .WithParameter("
            ],
            [
                82,
                "                    (pi, c) => pi.Name == \"a\","
            ],
            [
                83,
                "                    (pi, c) => a)"
            ],
            [
                84,
                "                .WithParameter("
            ],
            [
                85,
                "                    (pi, c) => pi.Name == \"b\","
            ],
            [
                86,
                "                    (pi, c) => b);"
            ],
            [
                87,
                ""
            ],
            [
                88,
                "            var container = builder.Build();"
            ],
            [
                89,
                "            var result = container.Resolve<Parameterised>();"
            ],
            [
                90,
                ""
            ],
            [
                91,
                "            Assert.AreEqual(a, result.A);"
            ],
            [
                92,
                "            Assert.AreEqual(b, result.B);"
            ]
        ],
        "deleted": [
            [
                2,
                "using System.Collections.Generic;"
            ],
            [
                3,
                "using System.Linq;"
            ],
            [
                4,
                "using System.Text;"
            ],
            [
                19,
                "            try"
            ],
            [
                20,
                "            {"
            ],
            [
                21,
                "                var target = new Container();"
            ],
            [
                22,
                "                target.Resolve<object>();"
            ],
            [
                23,
                "            }"
            ],
            [
                24,
                "            catch (ComponentNotRegisteredException se)"
            ],
            [
                25,
                "            {"
            ],
            [
                26,
                "                Assert.IsTrue(se.Message.Contains(\"System.Object\"));"
            ],
            [
                27,
                "                return;"
            ],
            [
                28,
                "            }"
            ],
            [
                29,
                "            catch (Exception ex)"
            ],
            [
                30,
                "            {"
            ],
            [
                31,
                "                Assert.Fail(\"Expected a ComponentNotRegisteredException, got {0}.\", ex);"
            ],
            [
                32,
                "                return;"
            ],
            [
                33,
                "            }"
            ],
            [
                34,
                ""
            ],
            [
                35,
                "            Assert.Fail(\"Expected a ComponentNotRegisteredException.\");"
            ],
            [
                91,
                "        public void WhenParametersProvided_ResolveOptionalReturnsNull()"
            ],
            [
                93,
                "            var target = new Container();"
            ],
            [
                94,
                "            var instance = target.ResolveOptional<string>(TypedParameter.From(1));"
            ],
            [
                95,
                "            Assert.IsNull(instance);"
            ]
        ]
    },
    "num_lines_added": 21,
    "num_lines_removed": 24
}