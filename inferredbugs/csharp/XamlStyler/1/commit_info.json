{
    "hash": "d7047449c131c01a29fef36ed13581129c2fc462",
    "message": "Added Canvas children ordering",
    "file_num_lines": 462,
    "diff_parsed": {
        "added": [
            [
                184,
                "                    // is this a Grid or Canvas with child elements?"
            ],
            [
                186,
                "                    // Note: we look at elements, not just nodes - if there's only non-element nodes,"
            ],
            [
                194,
                "                    else if (element.Name.LocalName == \"Canvas\" && element.HasElements)"
            ],
            [
                195,
                "                    {"
            ],
            [
                196,
                "                        ProcessCanvas(element);"
            ],
            [
                197,
                "                    }"
            ],
            [
                198,
                ""
            ],
            [
                207,
                "        private void ProcessCanvas(XElement element)"
            ],
            [
                208,
                "        {"
            ],
            [
                209,
                "            List<CanvasNodeContainer> lstNodeContainers = new List<CanvasNodeContainer>();"
            ],
            [
                210,
                ""
            ],
            [
                211,
                "            var children = element.Nodes();"
            ],
            [
                212,
                ""
            ],
            [
                213,
                "            // Run through child elements & read the attributes"
            ],
            [
                214,
                ""
            ],
            [
                215,
                "            foreach (var child in children)"
            ],
            [
                216,
                "            {"
            ],
            [
                217,
                "                switch (child.NodeType)"
            ],
            [
                218,
                "                {"
            ],
            [
                219,
                ""
            ],
            [
                220,
                "                    case XmlNodeType.Element:"
            ],
            [
                221,
                ""
            ],
            [
                222,
                "                        // it's an element.  Search for attached Canvas properties"
            ],
            [
                223,
                "                        var leftAttr = (child as XElement).Attributes(\"Canvas.Left\").FirstOrDefault();"
            ],
            [
                224,
                "                        var topAttr = (child as XElement).Attributes(\"Canvas.Top\").FirstOrDefault();"
            ],
            [
                225,
                "                        var rightAttr = (child as XElement).Attributes(\"Canvas.Right\").FirstOrDefault();"
            ],
            [
                226,
                "                        var bottomAttr = (child as XElement).Attributes(\"Canvas.Bottom\").FirstOrDefault();"
            ],
            [
                227,
                ""
            ],
            [
                228,
                "                        // no attribute?  0,0"
            ],
            [
                229,
                "                        lstNodeContainers.Add(new CanvasNodeContainer"
            ],
            [
                230,
                "                            (child,"
            ],
            [
                231,
                "                            leftAttr == null ? 0 : int.Parse(leftAttr.Value),"
            ],
            [
                232,
                "                            topAttr == null ? 0 : int.Parse(topAttr.Value),"
            ],
            [
                233,
                "                            rightAttr == null ? 0 : int.Parse(rightAttr.Value),"
            ],
            [
                234,
                "                            bottomAttr == null ? 0 : int.Parse(bottomAttr.Value)"
            ],
            [
                235,
                "                            ));"
            ],
            [
                236,
                ""
            ],
            [
                237,
                "                        break;"
            ],
            [
                238,
                ""
            ],
            [
                239,
                "                    default:"
            ],
            [
                240,
                "                        // it's not an element - add it, passing in the previous attached property value - this ensures"
            ],
            [
                241,
                "                        // comments, whitespace, ... are kept in the correct place"
            ],
            [
                242,
                ""
            ],
            [
                243,
                "                        var prev = lstNodeContainers.FirstOrDefault();"
            ],
            [
                244,
                "                        if (prev != null)"
            ],
            [
                245,
                "                        {"
            ],
            [
                246,
                "                            lstNodeContainers.Add(new CanvasNodeContainer(child, prev.Left, prev.Top, prev.Right, prev.Bottom));"
            ],
            [
                247,
                "                        }"
            ],
            [
                248,
                "                        else"
            ],
            [
                249,
                "                        {"
            ],
            [
                250,
                "                            lstNodeContainers.Add(new CanvasNodeContainer(child, 0, 0, 0, 0));"
            ],
            [
                251,
                "                        }"
            ],
            [
                252,
                ""
            ],
            [
                253,
                "                        break;"
            ],
            [
                254,
                "                }"
            ],
            [
                255,
                "            }"
            ],
            [
                256,
                ""
            ],
            [
                257,
                "            // sort that list."
            ],
            [
                258,
                "            lstNodeContainers = lstNodeContainers.OrderBy(nc => nc.Left).ThenBy(nc => nc.Top)"
            ],
            [
                259,
                "                .ThenBy(nc => nc.Right).ThenBy(nc => nc.Bottom).ToList();"
            ],
            [
                260,
                ""
            ],
            [
                261,
                "            // replace the element's nodes"
            ],
            [
                262,
                "            element.ReplaceAll(lstNodeContainers.Select(nc => nc.Node));"
            ],
            [
                263,
                "        }"
            ],
            [
                264,
                ""
            ]
        ],
        "deleted": [
            [
                167,
                ""
            ],
            [
                185,
                "                    // is this a Grid  with child elements?"
            ],
            [
                187,
                "                    // Note: we look at elements, not just Nodes - if there's only non-element nodes,"
            ],
            [
                195,
                ""
            ]
        ]
    },
    "num_lines_added": 65,
    "num_lines_removed": 4
}