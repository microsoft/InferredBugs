{
    "hash": "1983a3101f88523736c4938e02047d03f59bc181",
    "message": "Allow 0x format for hexadecimal integer constants in Pastel.",
    "file_num_lines": 747,
    "diff_parsed": {
        "added": [
            [
                691,
                "                    Token numToken = tokens.Pop();"
            ],
            [
                692,
                "                    EnsureInteger(tokens.Pop(), false);"
            ],
            [
                719,
                "                Token numToken = tokens.Pop();"
            ],
            [
                722,
                "                    EnsureInteger(numToken, false);"
            ],
            [
                725,
                "                    Token decimalToken = tokens.Pop();"
            ],
            [
                726,
                "                    EnsureInteger(decimalToken, false);"
            ],
            [
                735,
                "                else"
            ],
            [
                736,
                "                {"
            ],
            [
                737,
                "                    int numValue = EnsureInteger(numToken, true);"
            ],
            [
                738,
                "                    return new InlineConstant(PType.INT, numToken, numValue, this.currentCodeOwner);"
            ],
            [
                739,
                "                }"
            ],
            [
                777,
                "        private int EnsureInteger(Token token, bool allowHex)"
            ],
            [
                782,
                "                // This is like 80% of the cases"
            ],
            [
                783,
                "                case \"0\": return 0;"
            ],
            [
                784,
                "                case \"1\": return 1;"
            ],
            [
                785,
                "                case \"2\": return 2;"
            ],
            [
                788,
                "            if (allowHex && value.StartsWith(\"0x\"))"
            ],
            [
                789,
                "            {"
            ],
            [
                790,
                "                value = value.Substring(2).ToLower();"
            ],
            [
                791,
                "                int num = 0;"
            ],
            [
                792,
                "                for (int i = 0; i < value.Length; ++i)"
            ],
            [
                793,
                "                {"
            ],
            [
                794,
                "                    num <<= 4;"
            ],
            [
                795,
                "                    c = value[i];"
            ],
            [
                796,
                "                    if (c >= '0' && c <= '9')"
            ],
            [
                797,
                "                    {"
            ],
            [
                798,
                "                        num += c - '0';"
            ],
            [
                799,
                "                    }"
            ],
            [
                800,
                "                    else if (c >= 'a' && c <= 'f')"
            ],
            [
                801,
                "                    {"
            ],
            [
                802,
                "                        num += c - 'a' + 10;"
            ],
            [
                803,
                "                    }"
            ],
            [
                804,
                "                }"
            ],
            [
                805,
                "                return num;"
            ],
            [
                806,
                "            }"
            ],
            [
                815,
                "            return int.Parse(value);"
            ]
        ],
        "deleted": [
            [
                691,
                "                    Token numToken = EnsureInteger(tokens.Pop());"
            ],
            [
                718,
                "                Token numToken = EnsureInteger(tokens.Pop());"
            ],
            [
                723,
                "                    Token decimalToken = EnsureInteger(tokens.Pop());"
            ],
            [
                732,
                "                return new InlineConstant(PType.INT, numToken, int.Parse(numToken.Value), this.currentCodeOwner);"
            ],
            [
                770,
                "        private Token EnsureInteger(Token token)"
            ],
            [
                775,
                "                case \"0\":"
            ],
            [
                776,
                "                case \"1\":"
            ],
            [
                777,
                "                case \"2\":"
            ],
            [
                778,
                "                    // this is like 80% of cases."
            ],
            [
                779,
                "                    return token;"
            ],
            [
                790,
                "            return token;"
            ]
        ]
    },
    "num_lines_added": 36,
    "num_lines_removed": 11
}