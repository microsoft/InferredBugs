        private Expression ParseEntityWithoutSuffixChain(TokenStream tokens, Node owner)
        {
            tokens.EnsureNotEof();

            Token nextToken = tokens.Peek();
            string next = nextToken.Value;

            if (next == this.parser.Keywords.NULL) return new NullConstant(tokens.Pop(), owner);
            if (next == this.parser.Keywords.TRUE) return new BooleanConstant(tokens.Pop(), true, owner);
            if (next == this.parser.Keywords.FALSE) return new BooleanConstant(tokens.Pop(), false, owner);

            Token peekToken = tokens.Peek();
            if (next.StartsWith("'")) return new StringConstant(tokens.Pop(), StringConstant.ParseOutRawValue(peekToken), owner);
            if (next.StartsWith("\"")) return new StringConstant(tokens.Pop(), StringConstant.ParseOutRawValue(peekToken), owner);
            if (next == this.parser.Keywords.NEW) return this.ParseInstantiate(tokens, owner);

            char firstChar = next[0];
            if (VARIABLE_STARTER.Contains(firstChar))
            {
                Token varToken = tokens.Pop();
                return new Variable(varToken, varToken.Value, owner);
            }

            if (firstChar == '[')
            {
                Token bracketToken = tokens.PopExpected("[");
                List<Expression> elements = new List<Expression>();
                bool previousHasCommaOrFirst = true;
                while (!tokens.PopIfPresent("]"))
                {
                    if (!previousHasCommaOrFirst) tokens.PopExpected("]"); // throws appropriate error
                    elements.Add(Parse(tokens, owner));
                    previousHasCommaOrFirst = tokens.PopIfPresent(",");
                }
                return new ListDefinition(bracketToken, elements, owner);
            }

            if (firstChar == '{')
            {
                Token braceToken = tokens.PopExpected("{");
                List<Expression> keys = new List<Expression>();
                List<Expression> values = new List<Expression>();
                bool previousHasCommaOrFirst = true;
                while (!tokens.PopIfPresent("}"))
                {
                    if (!previousHasCommaOrFirst) tokens.PopExpected("}"); // throws appropriate error
                    keys.Add(Parse(tokens, owner));
                    tokens.PopExpected(":");
                    values.Add(Parse(tokens, owner));
                    previousHasCommaOrFirst = tokens.PopIfPresent(",");
                }
                return new DictionaryDefinition(braceToken, keys, values, owner);
            }

            if (next.Length > 2 && next.Substring(0, 2) == "0x")
            {
                Token intToken = tokens.Pop();
                int intValue = IntegerConstant.ParseIntConstant(intToken, intToken.Value);
                return new IntegerConstant(intToken, intValue, owner);
            }

            if (nextToken.IsInteger)
            {
                Token numberToken = tokens.Pop();
                string numberValue = numberToken.Value;

                if (tokens.IsNext("."))
                {
                    Token decimalToken = tokens.Pop();
                    if (decimalToken.HasWhitespacePrefix)
                    {
                        throw new ParserException(decimalToken, "Decimals cannot have whitespace before them.");
                    }

                    Token afterDecimal = tokens.Pop();
                    if (afterDecimal.HasWhitespacePrefix) throw new ParserException(afterDecimal, "Cannot have whitespace after the decimal.");
                    if (!afterDecimal.IsInteger) throw new ParserException(afterDecimal, "Decimal must be followed by an integer.");

                    numberValue += "." + afterDecimal.Value;

                    double floatValue = FloatConstant.ParseValue(numberToken, numberValue);
                    return new FloatConstant(numberToken, floatValue, owner);
                }

                int intValue = IntegerConstant.ParseIntConstant(numberToken, numberToken.Value);
                return new IntegerConstant(numberToken, intValue, owner);
            }

            if (tokens.IsNext("."))
            {
                Token dotToken = tokens.PopExpected(".");
                string numberValue = "0.";
                Token postDecimal = tokens.Pop();
                if (postDecimal.HasWhitespacePrefix || !postDecimal.IsInteger)
                {
                    throw new ParserException(dotToken, "Unexpected dot.");
                }

                numberValue += postDecimal.Value;

                double floatValue;
                if (Util.ParseDouble(numberValue, out floatValue))
                {
                    return new FloatConstant(dotToken, floatValue, owner);
                }

                throw new ParserException(dotToken, "Invalid float literal.");
            }

            throw new ParserException(tokens.Peek(), "Encountered unexpected token: '" + tokens.PeekValue() + "'");
        }