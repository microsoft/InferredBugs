{
    "hash": "2390b47e5039e0473072f711ca3a4f63780dc8b4",
    "message": "Generate key file without sn.exe\n\nPerform a simple strong-name key file generation if one was not passed\nin. This removes the requirement of having sn.exe on the machine.",
    "file_num_lines": 148,
    "diff_parsed": {
        "added": [
            [
                4,
                "using System.Security.Cryptography;"
            ],
            [
                122,
                "      // Disassemble."
            ],
            [
                130,
                "        // Check if we have a key."
            ],
            [
                131,
                "        bool deleteKeyFile = false;"
            ],
            [
                132,
                "        if (string.IsNullOrEmpty(keyPath))"
            ],
            [
                134,
                "          deleteKeyFile = true;"
            ],
            [
                135,
                "          keyPath = CreateStrongNameKeyFile();"
            ],
            [
                136,
                "        }"
            ],
            [
                137,
                "        else if (!File.Exists(keyPath))"
            ],
            [
                138,
                "        {"
            ],
            [
                139,
                "          throw new FileNotFoundException(\"Could not find provided strong-name key file file.\", keyPath);"
            ],
            [
                140,
                "        }"
            ],
            [
                142,
                "        using (var ilasm = new ILAsm(info, ildasm.BinaryILFilePath, keyPath, outputPath))"
            ],
            [
                143,
                "        {"
            ],
            [
                144,
                "          if (!ilasm.Run(outputHandler))"
            ],
            [
                146,
                "            throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture, \"ILASM failed to execute for assembly '{0}'.\", assemblyPath));"
            ],
            [
                149,
                "          if (deleteKeyFile && File.Exists(keyPath))"
            ],
            [
                151,
                "            File.Delete(keyPath);"
            ],
            [
                153,
                ""
            ],
            [
                154,
                "          return GetAssemblyInfo(ilasm.SignedAssemblyPath);"
            ],
            [
                253,
                ""
            ],
            [
                254,
                "    private static string CreateStrongNameKeyFile()"
            ],
            [
                255,
                "    {"
            ],
            [
                256,
                "      string fileName = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString() + \".snk\");"
            ],
            [
                257,
                ""
            ],
            [
                258,
                "      using (var provider = new RSACryptoServiceProvider(1024, new CspParameters() { KeyNumber = 2 }))"
            ],
            [
                259,
                "      {"
            ],
            [
                260,
                "        File.WriteAllBytes(fileName, provider.ExportCspBlob(!provider.PublicOnly));"
            ],
            [
                261,
                "      }"
            ],
            [
                262,
                ""
            ],
            [
                263,
                "      return fileName;"
            ],
            [
                264,
                "    }"
            ]
        ],
        "deleted": [
            [
                121,
                "      // Disassemble"
            ],
            [
                129,
                "        // Check if we have a key"
            ],
            [
                130,
                "        using (var signtool = new SignTool())"
            ],
            [
                132,
                "          if (string.IsNullOrEmpty(keyPath))"
            ],
            [
                133,
                "          {"
            ],
            [
                134,
                "            if (!signtool.Run(outputHandler))"
            ],
            [
                135,
                "            {"
            ],
            [
                136,
                "              throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture, \"SIGNTOOL failed to create a strong-name key file for '{0}'.\", assemblyPath));"
            ],
            [
                137,
                "            }"
            ],
            [
                139,
                "            keyPath = signtool.KeyFilePath;"
            ],
            [
                140,
                "          }"
            ],
            [
                141,
                "          else if (!File.Exists(keyPath))"
            ],
            [
                143,
                "            throw new FileNotFoundException(\"Could not find provided strong-name key file file.\", keyPath);"
            ],
            [
                146,
                "          using (var ilasm = new ILAsm(info, ildasm.BinaryILFilePath, keyPath, outputPath))"
            ],
            [
                148,
                "            if (!ilasm.Run(outputHandler))"
            ],
            [
                149,
                "            {"
            ],
            [
                150,
                "              throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture, \"ILASM failed to execute for assembly '{0}'.\", assemblyPath));"
            ],
            [
                151,
                "            }"
            ],
            [
                152,
                ""
            ],
            [
                153,
                "            return GetAssemblyInfo(ilasm.SignedAssemblyPath);"
            ],
            [
                235,
                ""
            ],
            [
                236,
                "      using (var sn = new SignTool())"
            ],
            [
                237,
                "      {"
            ],
            [
                238,
                "        if (!File.Exists(sn.Executable))"
            ],
            [
                239,
                "        {"
            ],
            [
                240,
                "          throw new FileNotFoundException(\"Could not find required executable 'SN.exe'.\", sn.Executable);"
            ],
            [
                241,
                "        }"
            ],
            [
                242,
                "      }"
            ]
        ]
    },
    "num_lines_added": 32,
    "num_lines_removed": 28
}