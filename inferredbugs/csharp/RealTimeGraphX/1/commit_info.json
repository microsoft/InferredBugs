{
    "hash": "79ba0aedbb82372bdc60782f89231443cab2933f",
    "message": "Fixed issue with FloatDataPoint CreateRange.",
    "file_num_lines": 78,
    "diff_parsed": {
        "added": [
            [
                1,
                "\ufeffusing System;"
            ],
            [
                2,
                "using System.Collections.Generic;"
            ],
            [
                3,
                "using System.Linq;"
            ],
            [
                4,
                "using System.Text;"
            ],
            [
                5,
                "using System.Threading.Tasks;"
            ],
            [
                6,
                ""
            ],
            [
                7,
                "namespace RealTimeGraphX.DataPoints"
            ],
            [
                8,
                "{"
            ],
            [
                9,
                "    /// <summary>"
            ],
            [
                10,
                "    /// Represents a graph <see cref=\"float\"/> value data point."
            ],
            [
                11,
                "    /// </summary>"
            ],
            [
                12,
                "    /// <seealso cref=\"RealTimeGraphX.GraphDataPoint{float, RealTimeGraphX.DataPoints.FloatDataPoint}\" />"
            ],
            [
                13,
                "    public class FloatDataPoint : GraphDataPoint<float, FloatDataPoint>"
            ],
            [
                14,
                "    {"
            ],
            [
                15,
                "        /// <summary>"
            ],
            [
                16,
                "        /// Initializes a new instance of the <see cref=\"FloatDataPoint\"/> class."
            ],
            [
                17,
                "        /// </summary>"
            ],
            [
                18,
                "        public FloatDataPoint() : base()"
            ],
            [
                19,
                "        {"
            ],
            [
                20,
                ""
            ],
            [
                21,
                "        }"
            ],
            [
                22,
                ""
            ],
            [
                23,
                "        /// <summary>"
            ],
            [
                24,
                "        /// Initializes a new instance of the <see cref=\"FloatDataPoint\"/> class."
            ],
            [
                25,
                "        /// </summary>"
            ],
            [
                26,
                "        /// <param name=\"value\">The value.</param>"
            ],
            [
                27,
                "        public FloatDataPoint(float value) : base(value)"
            ],
            [
                28,
                "        {"
            ],
            [
                29,
                ""
            ],
            [
                30,
                "        }"
            ],
            [
                31,
                ""
            ],
            [
                32,
                "        /// <summary>"
            ],
            [
                33,
                "        /// Performs an implicit conversion from <see cref=\"float\"/> to <see cref=\"FloatDataPoint\"/>."
            ],
            [
                34,
                "        /// </summary>"
            ],
            [
                35,
                "        /// <param name=\"value\">The value.</param>"
            ],
            [
                36,
                "        /// <returns>"
            ],
            [
                37,
                "        /// The result of the conversion."
            ],
            [
                38,
                "        /// </returns>"
            ],
            [
                39,
                "        public static implicit operator FloatDataPoint(float value)"
            ],
            [
                40,
                "        {"
            ],
            [
                41,
                "            return new FloatDataPoint(value);"
            ],
            [
                42,
                "        }"
            ],
            [
                43,
                ""
            ],
            [
                44,
                "        /// <summary>"
            ],
            [
                45,
                "        /// Implements the operator -."
            ],
            [
                46,
                "        /// </summary>"
            ],
            [
                47,
                "        /// <param name=\"a\">a.</param>"
            ],
            [
                48,
                "        /// <param name=\"b\">The b.</param>"
            ],
            [
                49,
                "        /// <returns>"
            ],
            [
                50,
                "        /// The result of the operator."
            ],
            [
                51,
                "        /// </returns>"
            ],
            [
                52,
                "        public static FloatDataPoint operator -(FloatDataPoint a, FloatDataPoint b)"
            ],
            [
                53,
                "        {"
            ],
            [
                54,
                "            return new FloatDataPoint(a.Value - b.Value);"
            ],
            [
                55,
                "        }"
            ],
            [
                56,
                ""
            ],
            [
                57,
                "        /// <summary>"
            ],
            [
                58,
                "        /// Implements the operator +."
            ],
            [
                59,
                "        /// </summary>"
            ],
            [
                60,
                "        /// <param name=\"a\">a.</param>"
            ],
            [
                61,
                "        /// <param name=\"b\">The b.</param>"
            ],
            [
                62,
                "        /// <returns>"
            ],
            [
                63,
                "        /// The result of the operator."
            ],
            [
                64,
                "        /// </returns>"
            ],
            [
                65,
                "        public static FloatDataPoint operator +(FloatDataPoint a, FloatDataPoint b)"
            ],
            [
                66,
                "        {"
            ],
            [
                67,
                "            return new FloatDataPoint(a.Value + b.Value);"
            ],
            [
                68,
                "        }"
            ],
            [
                69,
                ""
            ],
            [
                70,
                "        /// <summary>"
            ],
            [
                71,
                "        /// Sums the value of this instance with another instance value and returns the result."
            ],
            [
                72,
                "        /// </summary>"
            ],
            [
                73,
                "        /// <param name=\"other\">The other instance.</param>"
            ],
            [
                74,
                "        /// <returns></returns>"
            ],
            [
                75,
                "        public override IGraphDataPoint Add(IGraphDataPoint other)"
            ],
            [
                76,
                "        {"
            ],
            [
                77,
                "            return new FloatDataPoint(this.Value + (other as FloatDataPoint).Value);"
            ],
            [
                78,
                "        }"
            ],
            [
                79,
                ""
            ],
            [
                80,
                "        /// <summary>"
            ],
            [
                81,
                "        /// Subtract the value of another instance from this instance and returns the result."
            ],
            [
                82,
                "        /// </summary>"
            ],
            [
                83,
                "        /// <param name=\"other\">The other instance.</param>"
            ],
            [
                84,
                "        /// <returns></returns>"
            ],
            [
                85,
                "        public override IGraphDataPoint Subtract(IGraphDataPoint other)"
            ],
            [
                86,
                "        {"
            ],
            [
                87,
                "            return new FloatDataPoint(this.Value - (other as FloatDataPoint).Value);"
            ],
            [
                88,
                "        }"
            ],
            [
                89,
                ""
            ],
            [
                90,
                "        /// <summary>"
            ],
            [
                91,
                "        /// Multiplies the value of this instance with another instance value and returns the result."
            ],
            [
                92,
                "        /// </summary>"
            ],
            [
                93,
                "        /// <param name=\"other\">The other instance.</param>"
            ],
            [
                94,
                "        /// <returns></returns>"
            ],
            [
                95,
                "        public override IGraphDataPoint Multiply(IGraphDataPoint other)"
            ],
            [
                96,
                "        {"
            ],
            [
                97,
                "            return new FloatDataPoint(this.Value * (other as FloatDataPoint).Value);"
            ],
            [
                98,
                "        }"
            ],
            [
                99,
                ""
            ],
            [
                100,
                "        /// <summary>"
            ],
            [
                101,
                "        /// Divides the value of this instance with another instance value and returns the result."
            ],
            [
                102,
                "        /// </summary>"
            ],
            [
                103,
                "        /// <param name=\"other\">The other instance.</param>"
            ],
            [
                104,
                "        /// <returns></returns>"
            ],
            [
                105,
                "        public override IGraphDataPoint Divide(IGraphDataPoint other)"
            ],
            [
                106,
                "        {"
            ],
            [
                107,
                "            return new FloatDataPoint(this.Value / (other as FloatDataPoint).Value);"
            ],
            [
                108,
                "        }"
            ],
            [
                109,
                ""
            ],
            [
                110,
                "        /// <summary>"
            ],
            [
                111,
                "        /// Returns the percentage value of this instance between the specified minimum and maximum values."
            ],
            [
                112,
                "        /// </summary>"
            ],
            [
                113,
                "        /// <param name=\"min\">The minimum.</param>"
            ],
            [
                114,
                "        /// <param name=\"max\">The maximum.</param>"
            ],
            [
                115,
                "        /// <returns></returns>"
            ],
            [
                116,
                "        public override double ComputeRelativePosition(IGraphDataPoint min, IGraphDataPoint max)"
            ],
            [
                117,
                "        {"
            ],
            [
                118,
                "            FloatDataPoint dMin = min as FloatDataPoint;"
            ],
            [
                119,
                "            FloatDataPoint dMax = max as FloatDataPoint;"
            ],
            [
                120,
                ""
            ],
            [
                121,
                "            var result = ((Value - dMin) * 100) / (dMax - dMin);"
            ],
            [
                122,
                ""
            ],
            [
                123,
                "            return double.IsNaN(result) || double.IsInfinity(result) ? dMin.Value : result;"
            ],
            [
                124,
                "        }"
            ],
            [
                125,
                ""
            ],
            [
                126,
                "        /// <summary>"
            ],
            [
                127,
                "        /// Returns the absolute value of the specified percentage value between the specified minimum and maximum values."
            ],
            [
                128,
                "        /// </summary>"
            ],
            [
                129,
                "        /// <param name=\"min\">The minimum.</param>"
            ],
            [
                130,
                "        /// <param name=\"max\">The maximum.</param>"
            ],
            [
                131,
                "        /// <param name=\"percentage\">The percentage.</param>"
            ],
            [
                132,
                "        /// <returns></returns>"
            ],
            [
                133,
                "        public override IGraphDataPoint ComputeAbsolutePosition(IGraphDataPoint min, IGraphDataPoint max, double percentage)"
            ],
            [
                134,
                "        {"
            ],
            [
                135,
                "            double minimum = (double)min.GetValue();"
            ],
            [
                136,
                "            double maximum = (double)max.GetValue();"
            ],
            [
                137,
                ""
            ],
            [
                138,
                "            return new FloatDataPoint((float)(minimum + (maximum - minimum) * percentage));"
            ],
            [
                139,
                "        }"
            ],
            [
                140,
                ""
            ],
            [
                141,
                "        /// <summary>"
            ],
            [
                142,
                "        /// Creates a range of values from the specified minimum and maximum."
            ],
            [
                143,
                "        /// </summary>"
            ],
            [
                144,
                "        /// <param name=\"min\">The minimum.</param>"
            ],
            [
                145,
                "        /// <param name=\"max\">The maximum.</param>"
            ],
            [
                146,
                "        /// <param name=\"count\">The count.</param>"
            ],
            [
                147,
                "        /// <returns></returns>"
            ],
            [
                148,
                "        public override IEnumerable<IGraphDataPoint> CreateRange(IGraphDataPoint min, IGraphDataPoint max, int count)"
            ],
            [
                149,
                "        {"
            ],
            [
                150,
                "            float minimum = (float)min.GetValue();"
            ],
            [
                151,
                "            float maximum = (float)max.GetValue();"
            ],
            [
                152,
                ""
            ],
            [
                153,
                "            return Enumerable.Range(0, count)."
            ],
            [
                154,
                "                Select(i => minimum + (maximum - minimum) * ((double)i / (count - 1)))."
            ],
            [
                155,
                "                Select(x => new FloatDataPoint((float)x));"
            ],
            [
                156,
                "        }"
            ],
            [
                157,
                ""
            ],
            [
                158,
                "        /// <summary>"
            ],
            [
                159,
                "        /// Returns a formated string of this data point."
            ],
            [
                160,
                "        /// </summary>"
            ],
            [
                161,
                "        /// <param name=\"format\">The format.</param>"
            ],
            [
                162,
                "        /// <returns></returns>"
            ],
            [
                163,
                "        public override string ToString(string format)"
            ],
            [
                164,
                "        {"
            ],
            [
                165,
                "            return Value.ToString(format);"
            ],
            [
                166,
                "        }"
            ],
            [
                167,
                ""
            ],
            [
                168,
                "        /// <summary>"
            ],
            [
                169,
                "        /// Parses the specified value and returns a new instance of <see cref=\"!:TDataType\" /> data point."
            ],
            [
                170,
                "        /// </summary>"
            ],
            [
                171,
                "        /// <param name=\"value\">The value.</param>"
            ],
            [
                172,
                "        /// <returns></returns>"
            ],
            [
                173,
                "        public override IGraphDataPoint Parse(string value)"
            ],
            [
                174,
                "        {"
            ],
            [
                175,
                "            return new FloatDataPoint(float.Parse(value));"
            ],
            [
                176,
                "        }"
            ],
            [
                177,
                ""
            ],
            [
                178,
                "        /// <summary>"
            ],
            [
                179,
                "        /// Return the default margins for this data point type."
            ],
            [
                180,
                "        /// <see cref=\"IGraphRange.AutoYFallbackMode\" /> and <see cref=\"GraphRangeAutoYFallBackMode.Margins\" />."
            ],
            [
                181,
                "        /// </summary>"
            ],
            [
                182,
                "        /// <returns></returns>"
            ],
            [
                183,
                "        protected override FloatDataPoint OnGetDefaultMargins()"
            ],
            [
                184,
                "        {"
            ],
            [
                185,
                "            return new FloatDataPoint(0.5f);"
            ],
            [
                186,
                "        }"
            ],
            [
                187,
                "    }"
            ],
            [
                188,
                "}"
            ]
        ],
        "deleted": [
            [
                1,
                "\ufeffusing System;"
            ],
            [
                2,
                "using System.Collections.Generic;"
            ],
            [
                3,
                "using System.Linq;"
            ],
            [
                4,
                "using System.Text;"
            ],
            [
                5,
                "using System.Threading.Tasks;"
            ],
            [
                6,
                ""
            ],
            [
                7,
                "namespace RealTimeGraphX.DataPoints"
            ],
            [
                8,
                "{"
            ],
            [
                9,
                "    /// <summary>"
            ],
            [
                10,
                "    /// Represents a graph <see cref=\"float\"/> value data point."
            ],
            [
                11,
                "    /// </summary>"
            ],
            [
                12,
                "    /// <seealso cref=\"RealTimeGraphX.GraphDataPoint{float, RealTimeGraphX.DataPoints.FloatDataPoint}\" />"
            ],
            [
                13,
                "    public class FloatDataPoint : GraphDataPoint<float, FloatDataPoint>"
            ],
            [
                14,
                "    {"
            ],
            [
                15,
                "        /// <summary>"
            ],
            [
                16,
                "        /// Initializes a new instance of the <see cref=\"FloatDataPoint\"/> class."
            ],
            [
                17,
                "        /// </summary>"
            ],
            [
                18,
                "        public FloatDataPoint() : base()"
            ],
            [
                19,
                "        {"
            ],
            [
                20,
                ""
            ],
            [
                21,
                "        }"
            ],
            [
                22,
                ""
            ],
            [
                23,
                "        /// <summary>"
            ],
            [
                24,
                "        /// Initializes a new instance of the <see cref=\"FloatDataPoint\"/> class."
            ],
            [
                25,
                "        /// </summary>"
            ],
            [
                26,
                "        /// <param name=\"value\">The value.</param>"
            ],
            [
                27,
                "        public FloatDataPoint(float value) : base(value)"
            ],
            [
                28,
                "        {"
            ],
            [
                29,
                ""
            ],
            [
                30,
                "        }"
            ],
            [
                31,
                ""
            ],
            [
                32,
                "        /// <summary>"
            ],
            [
                33,
                "        /// Performs an implicit conversion from <see cref=\"float\"/> to <see cref=\"FloatDataPoint\"/>."
            ],
            [
                34,
                "        /// </summary>"
            ],
            [
                35,
                "        /// <param name=\"value\">The value.</param>"
            ],
            [
                36,
                "        /// <returns>"
            ],
            [
                37,
                "        /// The result of the conversion."
            ],
            [
                38,
                "        /// </returns>"
            ],
            [
                39,
                "        public static implicit operator FloatDataPoint(float value)"
            ],
            [
                40,
                "        {"
            ],
            [
                41,
                "            return new FloatDataPoint(value);"
            ],
            [
                42,
                "        }"
            ],
            [
                43,
                ""
            ],
            [
                44,
                "        /// <summary>"
            ],
            [
                45,
                "        /// Implements the operator -."
            ],
            [
                46,
                "        /// </summary>"
            ],
            [
                47,
                "        /// <param name=\"a\">a.</param>"
            ],
            [
                48,
                "        /// <param name=\"b\">The b.</param>"
            ],
            [
                49,
                "        /// <returns>"
            ],
            [
                50,
                "        /// The result of the operator."
            ],
            [
                51,
                "        /// </returns>"
            ],
            [
                52,
                "        public static FloatDataPoint operator -(FloatDataPoint a, FloatDataPoint b)"
            ],
            [
                53,
                "        {"
            ],
            [
                54,
                "            return new FloatDataPoint(a.Value - b.Value);"
            ],
            [
                55,
                "        }"
            ],
            [
                56,
                ""
            ],
            [
                57,
                "        /// <summary>"
            ],
            [
                58,
                "        /// Implements the operator +."
            ],
            [
                59,
                "        /// </summary>"
            ],
            [
                60,
                "        /// <param name=\"a\">a.</param>"
            ],
            [
                61,
                "        /// <param name=\"b\">The b.</param>"
            ],
            [
                62,
                "        /// <returns>"
            ],
            [
                63,
                "        /// The result of the operator."
            ],
            [
                64,
                "        /// </returns>"
            ],
            [
                65,
                "        public static FloatDataPoint operator +(FloatDataPoint a, FloatDataPoint b)"
            ],
            [
                66,
                "        {"
            ],
            [
                67,
                "            return new FloatDataPoint(a.Value + b.Value);"
            ],
            [
                68,
                "        }"
            ],
            [
                69,
                ""
            ],
            [
                70,
                "        /// <summary>"
            ],
            [
                71,
                "        /// Sums the value of this instance with another instance value and returns the result."
            ],
            [
                72,
                "        /// </summary>"
            ],
            [
                73,
                "        /// <param name=\"other\">The other instance.</param>"
            ],
            [
                74,
                "        /// <returns></returns>"
            ],
            [
                75,
                "        public override IGraphDataPoint Add(IGraphDataPoint other)"
            ],
            [
                76,
                "        {"
            ],
            [
                77,
                "            return new FloatDataPoint(this.Value + (other as FloatDataPoint).Value);"
            ],
            [
                78,
                "        }"
            ],
            [
                79,
                ""
            ],
            [
                80,
                "        /// <summary>"
            ],
            [
                81,
                "        /// Subtract the value of another instance from this instance and returns the result."
            ],
            [
                82,
                "        /// </summary>"
            ],
            [
                83,
                "        /// <param name=\"other\">The other instance.</param>"
            ],
            [
                84,
                "        /// <returns></returns>"
            ],
            [
                85,
                "        public override IGraphDataPoint Subtract(IGraphDataPoint other)"
            ],
            [
                86,
                "        {"
            ],
            [
                87,
                "            return new FloatDataPoint(this.Value - (other as FloatDataPoint).Value);"
            ],
            [
                88,
                "        }"
            ],
            [
                89,
                ""
            ],
            [
                90,
                "        /// <summary>"
            ],
            [
                91,
                "        /// Multiplies the value of this instance with another instance value and returns the result."
            ],
            [
                92,
                "        /// </summary>"
            ],
            [
                93,
                "        /// <param name=\"other\">The other instance.</param>"
            ],
            [
                94,
                "        /// <returns></returns>"
            ],
            [
                95,
                "        public override IGraphDataPoint Multiply(IGraphDataPoint other)"
            ],
            [
                96,
                "        {"
            ],
            [
                97,
                "            return new FloatDataPoint(this.Value * (other as FloatDataPoint).Value);"
            ],
            [
                98,
                "        }"
            ],
            [
                99,
                ""
            ],
            [
                100,
                "        /// <summary>"
            ],
            [
                101,
                "        /// Divides the value of this instance with another instance value and returns the result."
            ],
            [
                102,
                "        /// </summary>"
            ],
            [
                103,
                "        /// <param name=\"other\">The other instance.</param>"
            ],
            [
                104,
                "        /// <returns></returns>"
            ],
            [
                105,
                "        public override IGraphDataPoint Divide(IGraphDataPoint other)"
            ],
            [
                106,
                "        {"
            ],
            [
                107,
                "            return new FloatDataPoint(this.Value / (other as FloatDataPoint).Value);"
            ],
            [
                108,
                "        }"
            ],
            [
                109,
                ""
            ],
            [
                110,
                "        /// <summary>"
            ],
            [
                111,
                "        /// Returns the percentage value of this instance between the specified minimum and maximum values."
            ],
            [
                112,
                "        /// </summary>"
            ],
            [
                113,
                "        /// <param name=\"min\">The minimum.</param>"
            ],
            [
                114,
                "        /// <param name=\"max\">The maximum.</param>"
            ],
            [
                115,
                "        /// <returns></returns>"
            ],
            [
                116,
                "        public override double ComputeRelativePosition(IGraphDataPoint min, IGraphDataPoint max)"
            ],
            [
                117,
                "        {"
            ],
            [
                118,
                "            FloatDataPoint dMin = min as FloatDataPoint;"
            ],
            [
                119,
                "            FloatDataPoint dMax = max as FloatDataPoint;"
            ],
            [
                120,
                ""
            ],
            [
                121,
                "            var result = ((Value - dMin) * 100) / (dMax - dMin);"
            ],
            [
                122,
                ""
            ],
            [
                123,
                "            return double.IsNaN(result) || double.IsInfinity(result) ? dMin.Value : result;"
            ],
            [
                124,
                "        }"
            ],
            [
                125,
                ""
            ],
            [
                126,
                "        /// <summary>"
            ],
            [
                127,
                "        /// Returns the absolute value of the specified percentage value between the specified minimum and maximum values."
            ],
            [
                128,
                "        /// </summary>"
            ],
            [
                129,
                "        /// <param name=\"min\">The minimum.</param>"
            ],
            [
                130,
                "        /// <param name=\"max\">The maximum.</param>"
            ],
            [
                131,
                "        /// <param name=\"percentage\">The percentage.</param>"
            ],
            [
                132,
                "        /// <returns></returns>"
            ],
            [
                133,
                "        public override IGraphDataPoint ComputeAbsolutePosition(IGraphDataPoint min, IGraphDataPoint max, double percentage)"
            ],
            [
                134,
                "        {"
            ],
            [
                135,
                "            double minimum = (double)min.GetValue();"
            ],
            [
                136,
                "            double maximum = (double)max.GetValue();"
            ],
            [
                137,
                ""
            ],
            [
                138,
                "            return new FloatDataPoint((float)(minimum + (maximum - minimum) * percentage));"
            ],
            [
                139,
                "        }"
            ],
            [
                140,
                ""
            ],
            [
                141,
                "        /// <summary>"
            ],
            [
                142,
                "        /// Creates a range of values from the specified minimum and maximum."
            ],
            [
                143,
                "        /// </summary>"
            ],
            [
                144,
                "        /// <param name=\"min\">The minimum.</param>"
            ],
            [
                145,
                "        /// <param name=\"max\">The maximum.</param>"
            ],
            [
                146,
                "        /// <param name=\"count\">The count.</param>"
            ],
            [
                147,
                "        /// <returns></returns>"
            ],
            [
                148,
                "        public override IEnumerable<IGraphDataPoint> CreateRange(IGraphDataPoint min, IGraphDataPoint max, int count)"
            ],
            [
                149,
                "        {"
            ],
            [
                150,
                "            double minimum = (double)min.GetValue();"
            ],
            [
                151,
                "            double maximum = (double)max.GetValue();"
            ],
            [
                152,
                ""
            ],
            [
                153,
                "            return Enumerable.Range(0, count)."
            ],
            [
                154,
                "                Select(i => minimum + (maximum - minimum) * ((double)i / (count - 1)))."
            ],
            [
                155,
                "                Select(x => new FloatDataPoint((float)x));"
            ],
            [
                156,
                "        }"
            ],
            [
                157,
                ""
            ],
            [
                158,
                "        /// <summary>"
            ],
            [
                159,
                "        /// Returns a formated string of this data point."
            ],
            [
                160,
                "        /// </summary>"
            ],
            [
                161,
                "        /// <param name=\"format\">The format.</param>"
            ],
            [
                162,
                "        /// <returns></returns>"
            ],
            [
                163,
                "        public override string ToString(string format)"
            ],
            [
                164,
                "        {"
            ],
            [
                165,
                "            return Value.ToString(format);"
            ],
            [
                166,
                "        }"
            ],
            [
                167,
                ""
            ],
            [
                168,
                "        /// <summary>"
            ],
            [
                169,
                "        /// Parses the specified value and returns a new instance of <see cref=\"!:TDataType\" /> data point."
            ],
            [
                170,
                "        /// </summary>"
            ],
            [
                171,
                "        /// <param name=\"value\">The value.</param>"
            ],
            [
                172,
                "        /// <returns></returns>"
            ],
            [
                173,
                "        public override IGraphDataPoint Parse(string value)"
            ],
            [
                174,
                "        {"
            ],
            [
                175,
                "            return new FloatDataPoint(float.Parse(value));"
            ],
            [
                176,
                "        }"
            ],
            [
                177,
                ""
            ],
            [
                178,
                "        /// <summary>"
            ],
            [
                179,
                "        /// Return the default margins for this data point type."
            ],
            [
                180,
                "        /// <see cref=\"IGraphRange.AutoYFallbackMode\" /> and <see cref=\"GraphRangeAutoYFallBackMode.Margins\" />."
            ],
            [
                181,
                "        /// </summary>"
            ],
            [
                182,
                "        /// <returns></returns>"
            ],
            [
                183,
                "        protected override FloatDataPoint OnGetDefaultMargins()"
            ],
            [
                184,
                "        {"
            ],
            [
                185,
                "            return new FloatDataPoint(0.5f);"
            ],
            [
                186,
                "        }"
            ],
            [
                187,
                "    }"
            ],
            [
                188,
                "}"
            ]
        ]
    },
    "num_lines_added": 188,
    "num_lines_removed": 188
}