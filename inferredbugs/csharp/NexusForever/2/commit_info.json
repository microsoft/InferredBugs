{
    "hash": "744e6cf95e14dc4538a79707ace8a3de1ac5f0b2",
    "message": "Inventory Bag changing completed\n\nRefactored Bag feature\nWill not re-index items unless necessary\n\nMinor updates\n\nTidy up following Fabi's review\n\nTidied up calculation when moving or removing bags\n\nUpdate Item checks to prevent bags from stacking\n\nAdded Error Message response on full inventory\n\nFixes following rebase\n\nFix item display updating issues\n\nFixes for Bag Support\n\nFixes for bag capacity changes\nFixes following PR review\n\nRefactored resize into Add/Remove Item\nRefactored ItemMove to handle resize better\n\nFixes following rebase\n\nFix for charges",
    "file_num_lines": 733,
    "diff_parsed": {
        "added": [
            [
                36,
                "        static EquippedItem[] visualItemSlots = new EquippedItem[]"
            ],
            [
                37,
                "            {EquippedItem.Chest, EquippedItem.Head, EquippedItem.Legs, EquippedItem.Hands, EquippedItem.WeaponPrimary, EquippedItem.Shoulder, EquippedItem.Feet};"
            ],
            [
                38,
                "        static EquippedItem[] containerSlots = new EquippedItem[]"
            ],
            [
                39,
                "            {EquippedItem.Bag0, EquippedItem.Bag1, EquippedItem.Bag2, EquippedItem.Bag3};"
            ],
            [
                40,
                ""
            ],
            [
                52,
                "            foreach (var itemModel in model.Item.Select(i => i).OrderBy(i => i.Location).ToList())"
            ],
            [
                53,
                "            {"
            ],
            [
                54,
                "                Item item = new Item(itemModel);"
            ],
            [
                55,
                "                AddItem(item);"
            ],
            [
                56,
                "            }"
            ],
            [
                109,
                "                if (!IsVisualItem((EquippedItem)item.BagIndex))"
            ],
            [
                110,
                "                    continue;"
            ],
            [
                111,
                ""
            ],
            [
                339,
                "            if (IsStackable(itemEntry) && itemEntry.MaxStackCount > 1)"
            ],
            [
                364,
                "                    else"
            ],
            [
                365,
                "                        player.Session.EnqueueMessageEncrypted(new ServerItemError"
            ],
            [
                366,
                "                        {"
            ],
            [
                367,
                "                            ErrorCode = ItemError.InventoryFull"
            ],
            [
                368,
                "                        });"
            ],
            [
                369,
                ""
            ],
            [
                373,
                "                var item = new Item(characterId, itemEntry, Math.Min(count, IsStackable(itemEntry) ? itemEntry.MaxStackCount : 1), charges);"
            ],
            [
                413,
                ""
            ],
            [
                414,
                "            ItemMove(from, to, srcItem, dstItem);"
            ],
            [
                415,
                "        }"
            ],
            [
                416,
                ""
            ],
            [
                417,
                "        private ItemError CheckValidItemForValidLocation(ItemLocation from, ItemLocation to, Item srcItem)"
            ],
            [
                418,
                "        {"
            ],
            [
                419,
                "            if (!IsEquippableBag(srcItem.Entry) && IsEquippedBagLocation(to))"
            ],
            [
                420,
                "                return ItemError.InvalidForThisSlot;"
            ],
            [
                421,
                ""
            ],
            [
                422,
                "            if (IsEquippedBagLocation(from) && !IsEquippedBagLocation(to) && IsEquippableBag(srcItem.Entry))"
            ],
            [
                423,
                "                if (GetInventoryFreeBagIndexCount() < srcItem.Entry.MaxStackCount)"
            ],
            [
                424,
                "                    return ItemError.InventoryFull;"
            ],
            [
                425,
                ""
            ],
            [
                426,
                "            return ItemError.IsValid;"
            ],
            [
                427,
                "        }"
            ],
            [
                428,
                ""
            ],
            [
                429,
                "        /// <summary>"
            ],
            [
                430,
                "        /// Move <see cref=\"Item\"/> from one <see cref=\"ItemLocation\"/> to another, handling swapping if necessary."
            ],
            [
                431,
                "        /// </summary>"
            ],
            [
                432,
                "        private void ItemMove(ItemLocation from, ItemLocation to, Item srcItem, Item dstItem = null)"
            ],
            [
                433,
                "        {"
            ],
            [
                434,
                "            if (srcItem == null || from == null || to == null)"
            ],
            [
                435,
                "                throw new InvalidPacketValueException();"
            ],
            [
                436,
                ""
            ],
            [
                437,
                "            if (dstItem == null && GetBag(to.Location).GetItem(to.BagIndex) != null)"
            ],
            [
                438,
                "                throw new InvalidPacketValueException();"
            ],
            [
                439,
                ""
            ],
            [
                440,
                "            ItemError validItemMove = CheckValidItemForValidLocation(from, to, srcItem);"
            ],
            [
                441,
                "            if (validItemMove != ItemError.IsValid)"
            ],
            [
                442,
                "            {"
            ],
            [
                443,
                "                player.Session.EnqueueMessageEncrypted(new ServerItemError"
            ],
            [
                444,
                "                {"
            ],
            [
                445,
                "                    ItemGuid = srcItem.Guid,"
            ],
            [
                446,
                "                    ErrorCode = validItemMove"
            ],
            [
                447,
                "                });"
            ],
            [
                448,
                "                return;"
            ],
            [
                449,
                "            }"
            ],
            [
                450,
                ""
            ],
            [
                463,
                "                            Guid = srcItem.Guid,"
            ],
            [
                468,
                "                else if (srcItem.Entry.Id == dstItem.Entry.Id && IsStackable(dstItem.Entry))"
            ],
            [
                482,
                "                    }"
            ],
            [
                488,
                "                    if (IsEquippedBagLocation(from) || IsEquippedBagLocation(to))"
            ],
            [
                489,
                "                    {"
            ],
            [
                490,
                "                        (int capacityChange, ItemError itemError) = GetCapacityChange(from, to, srcItem, dstItem);"
            ],
            [
                491,
                ""
            ],
            [
                492,
                "                        if (itemError == ItemError.IsValid)"
            ],
            [
                493,
                "                        {"
            ],
            [
                494,
                "                            // item at destination, swap with source item"
            ],
            [
                495,
                "                            RemoveItem(srcItem, false);"
            ],
            [
                496,
                "                            RemoveItem(dstItem, false);"
            ],
            [
                497,
                "                            AddItem(srcItem, to.Location, to.BagIndex, false);"
            ],
            [
                498,
                "                            AddItem(dstItem, from.Location, from.BagIndex, false);"
            ],
            [
                499,
                ""
            ],
            [
                500,
                "                            MoveItemsAfterBagSwap(capacityChange);"
            ],
            [
                501,
                ""
            ],
            [
                502,
                "                            if (capacityChange != 0)"
            ],
            [
                503,
                "                                GetBag(InventoryLocation.Inventory).Resize(capacityChange);"
            ],
            [
                504,
                "                        }"
            ],
            [
                505,
                "                        else"
            ],
            [
                506,
                "                        {"
            ],
            [
                507,
                "                            player.Session.EnqueueMessageEncrypted(new ServerItemError"
            ],
            [
                508,
                "                            {"
            ],
            [
                509,
                "                                ItemGuid = srcItem.Guid,"
            ],
            [
                510,
                "                                ErrorCode = itemError"
            ],
            [
                511,
                "                            });"
            ],
            [
                512,
                "                            return;"
            ],
            [
                513,
                "                        }"
            ],
            [
                514,
                "                    }"
            ],
            [
                515,
                "                    else"
            ],
            [
                516,
                "                    {"
            ],
            [
                517,
                "                        // item at destination, swap with source item"
            ],
            [
                518,
                "                        RemoveItem(srcItem);"
            ],
            [
                519,
                "                        RemoveItem(dstItem);"
            ],
            [
                520,
                "                        AddItem(srcItem, to.Location, to.BagIndex);"
            ],
            [
                521,
                "                        AddItem(dstItem, from.Location, from.BagIndex);"
            ],
            [
                522,
                "                    }"
            ],
            [
                528,
                "                            Guid = srcItem.Guid,"
            ],
            [
                533,
                "                            Guid = dstItem.Guid,"
            ],
            [
                546,
                "        private (int capacityChange, ItemError itemError) GetCapacityChange(ItemLocation from, ItemLocation to, Item srcItem, Item dstItem = null)"
            ],
            [
                547,
                "        {"
            ],
            [
                548,
                "            int capacityChange = 0;"
            ],
            [
                549,
                "            if (IsEquippableBag(srcItem.Entry) && IsEquippedBagLocation(to))"
            ],
            [
                550,
                "            {"
            ],
            [
                551,
                "                if (dstItem != null && !IsEquippedBagLocation(from))"
            ],
            [
                552,
                "                    capacityChange = (int)srcItem.Entry.MaxStackCount - (int)dstItem.Entry.MaxStackCount; // Replacing bag"
            ],
            [
                553,
                "            }"
            ],
            [
                554,
                "            else if (IsEquippableBag(srcItem.Entry) && IsEquippedBagLocation(from))"
            ],
            [
                555,
                "            {"
            ],
            [
                556,
                "                if (dstItem != null && IsEquippableBag(dstItem.Entry))"
            ],
            [
                557,
                "                    capacityChange = (int)dstItem.Entry.MaxStackCount - (int)srcItem.Entry.MaxStackCount; // Replacing bag"
            ],
            [
                558,
                "            }"
            ],
            [
                559,
                ""
            ],
            [
                560,
                "            ItemError itemError = ItemError.IsValid;"
            ],
            [
                561,
                "            if (capacityChange < 0 && GetBag(InventoryLocation.Equipped).SlotsRemaining < (capacityChange * -1))"
            ],
            [
                562,
                "                itemError = ItemError.BagMustBeEmpty;"
            ],
            [
                563,
                ""
            ],
            [
                564,
                "            return (capacityChange, itemError);"
            ],
            [
                565,
                "        }"
            ],
            [
                566,
                ""
            ],
            [
                576,
                "            if (IsEquippableBag(item.Entry))"
            ],
            [
                577,
                "                throw new InvalidPacketValueException();"
            ],
            [
                578,
                ""
            ],
            [
                728,
                "            // Intentionally not checking for bag resize because nothing should call this method without checking for non-equipped items first."
            ],
            [
                729,
                ""
            ],
            [
                793,
                "        private void AddItem(Item item, InventoryLocation location, uint bagIndex, bool resizeBags = true)"
            ],
            [
                801,
                "            AddItem(item, resizeBags);"
            ],
            [
                804,
                "        public void AddItem(Item item, bool resizeBags = true)"
            ],
            [
                818,
                "                if (IsVisualItem((EquippedItem)item.BagIndex))"
            ],
            [
                819,
                "                    VisualUpdate(item);"
            ],
            [
                820,
                ""
            ],
            [
                821,
                "            if (resizeBags && IsEquippedBagLocation(item.Location, item.BagIndex))"
            ],
            [
                822,
                "                GetBag(InventoryLocation.Inventory).Resize((int)item.Entry.MaxStackCount);"
            ],
            [
                828,
                "        private void RemoveItem(Item item, bool resizeBags = true)"
            ],
            [
                841,
                "                if (IsVisualItem((EquippedItem)item.PreviousBagIndex)) // Using previous bag index because the item will've already been moved"
            ],
            [
                842,
                "                    VisualUpdate(item);"
            ],
            [
                843,
                ""
            ],
            [
                844,
                "            if (resizeBags && IsEquippedBagLocation(item.PreviousLocation, item.PreviousBagIndex) && IsEquippableBag(item.Entry))"
            ],
            [
                845,
                "            {"
            ],
            [
                846,
                "                MoveItemsAfterBagSwap((int)(item.Entry.MaxStackCount * -1));"
            ],
            [
                847,
                "                GetBag(InventoryLocation.Inventory).Resize((int)item.Entry.MaxStackCount * -1);"
            ],
            [
                848,
                "            }"
            ],
            [
                920,
                "                    }, ItemUpdateReason.MaterialBagConversion);"
            ],
            [
                921,
                "        }"
            ],
            [
                922,
                ""
            ],
            [
                923,
                "        /// Check if the current <see cref=\"Item\"/> is in a visual slot"
            ],
            [
                924,
                "        /// </summary>"
            ],
            [
                925,
                "        private bool IsVisualItem(EquippedItem item)"
            ],
            [
                926,
                "        {"
            ],
            [
                927,
                "            return visualItemSlots.Contains(item);"
            ],
            [
                928,
                "        }"
            ],
            [
                929,
                ""
            ],
            [
                930,
                "        /// <summary>"
            ],
            [
                931,
                "        /// Used to adjust items after a bag is equipped. Should only occur when the Inventory size shrinks."
            ],
            [
                932,
                "        /// </summary>"
            ],
            [
                933,
                "        private void MoveItemsAfterBagSwap(int capacityChange)"
            ],
            [
                934,
                "        {"
            ],
            [
                935,
                "            if (capacityChange > 0)"
            ],
            [
                936,
                "                return;"
            ],
            [
                937,
                ""
            ],
            [
                938,
                "            Bag inventory = GetBag(InventoryLocation.Inventory);"
            ],
            [
                939,
                "            if (inventory == null)"
            ],
            [
                940,
                "                throw new InvalidPacketValueException(\"Can't find Inventory.\");"
            ],
            [
                941,
                ""
            ],
            [
                942,
                "            int inventoryMaxIndex = inventory.GetSize() - 1;"
            ],
            [
                943,
                ""
            ],
            [
                944,
                "            for (int i = inventoryMaxIndex; i > (inventoryMaxIndex + capacityChange); i--)"
            ],
            [
                945,
                "            {"
            ],
            [
                946,
                "                Item item = inventory.GetItem((uint)i);"
            ],
            [
                947,
                "                if (item != null)"
            ],
            [
                948,
                "                {"
            ],
            [
                949,
                "                    uint newItemIndex = inventory.GetFirstAvailableBagIndexAfterIndex((int)inventory.GetFirstAvailableBagIndex());"
            ],
            [
                950,
                "                    if (newItemIndex == uint.MaxValue)"
            ],
            [
                951,
                "                        throw new InvalidPacketValueException($\"Missing BagIndex to move item {item.Guid} to.\");"
            ],
            [
                952,
                ""
            ],
            [
                953,
                "                    ItemMove(new ItemLocation"
            ],
            [
                954,
                "                    {"
            ],
            [
                955,
                "                        Location = item.Location,"
            ],
            [
                956,
                "                        BagIndex = item.BagIndex"
            ],
            [
                957,
                "                    },"
            ],
            [
                958,
                "                    new ItemLocation"
            ],
            [
                959,
                "                    {"
            ],
            [
                960,
                "                        Location = InventoryLocation.Inventory,"
            ],
            [
                961,
                "                        BagIndex = newItemIndex"
            ],
            [
                962,
                "                    },"
            ],
            [
                963,
                "                    item,"
            ],
            [
                964,
                "                    null);"
            ],
            [
                965,
                "                }"
            ],
            [
                966,
                "            }"
            ],
            [
                967,
                "        }"
            ],
            [
                968,
                ""
            ],
            [
                969,
                "        /// <summary>"
            ],
            [
                970,
                "        /// Check if the <see cref=\"Item\"/> is an equipped container"
            ],
            [
                971,
                "        /// </summary>"
            ],
            [
                972,
                "        private bool IsEquippedBag(Item item)"
            ],
            [
                973,
                "        {"
            ],
            [
                974,
                "            return containerSlots.Contains((EquippedItem)item.BagIndex);"
            ],
            [
                975,
                "        }"
            ],
            [
                976,
                ""
            ],
            [
                977,
                "        /// <summary>"
            ],
            [
                978,
                "        /// Returns whether or not the provided <see cref=\"ItemLocation\"/> is an Equipped Bag slot."
            ],
            [
                979,
                "        /// </summary>"
            ],
            [
                980,
                "        private bool IsEquippedBagLocation(ItemLocation itemLocation)"
            ],
            [
                981,
                "        {"
            ],
            [
                982,
                "            return IsEquippedBagLocation(itemLocation.Location, itemLocation.BagIndex);"
            ],
            [
                983,
                "        }"
            ],
            [
                984,
                ""
            ],
            [
                985,
                "        /// <summary>"
            ],
            [
                986,
                "        /// Returns whether or not the provided <see cref=\"InventoryLocation\"/> and bagIndex match an Equipped Bag slot."
            ],
            [
                987,
                "        /// </summary>"
            ],
            [
                988,
                "        private bool IsEquippedBagLocation(InventoryLocation inventoryLocation, uint bagIndex)"
            ],
            [
                989,
                "        {"
            ],
            [
                990,
                "            if (inventoryLocation != InventoryLocation.Equipped)"
            ],
            [
                991,
                "                return false;"
            ],
            [
                992,
                ""
            ],
            [
                993,
                "            return containerSlots.Contains((EquippedItem)bagIndex);"
            ],
            [
                994,
                "        }"
            ],
            [
                995,
                ""
            ],
            [
                996,
                "        // <summary>"
            ],
            [
                997,
                "        /// Returns whether this item is a stackable item"
            ],
            [
                998,
                "        /// </summary>"
            ],
            [
                999,
                "        public bool IsStackable(Item2Entry item2Entry)"
            ],
            [
                1000,
                "        {"
            ],
            [
                1001,
                "            // TODO: Figure out other non-stackable items, which have MaxStackCount > 1"
            ],
            [
                1002,
                "            return !IsEquippableBag(item2Entry) && item2Entry.MaxStackCount > 1;"
            ],
            [
                1003,
                "        }"
            ],
            [
                1004,
                ""
            ],
            [
                1005,
                "        /// <summary>"
            ],
            [
                1006,
                "        /// Returns whether this item is an equippable bag for expanding inventory slots"
            ],
            [
                1007,
                "        /// </summary>"
            ],
            [
                1008,
                "        public bool IsEquippableBag(Item2Entry item2Entry)"
            ],
            [
                1009,
                "        {"
            ],
            [
                1010,
                "            return item2Entry.Item2FamilyId == 5 && item2Entry.Item2CategoryId == 88 && item2Entry.Item2TypeId == 134;"
            ]
        ],
        "deleted": [
            [
                47,
                "            foreach (ItemModel itemModel in model.Item)"
            ],
            [
                48,
                "                AddItem(new Item(itemModel));"
            ],
            [
                328,
                "            if (itemEntry.MaxStackCount > 1)"
            ],
            [
                355,
                ""
            ],
            [
                357,
                "                var item = new Item(characterId, itemEntry, Math.Min(count, itemEntry.MaxStackCount), charges);"
            ],
            [
                409,
                "                            Guid     = srcItem.Guid,"
            ],
            [
                414,
                "                else if (srcItem.Entry.Id == dstItem.Entry.Id)"
            ],
            [
                428,
                "                    }"
            ],
            [
                434,
                "                    // item at destination, swap with source item"
            ],
            [
                435,
                "                    RemoveItem(srcItem);"
            ],
            [
                436,
                "                    RemoveItem(dstItem);"
            ],
            [
                437,
                "                    AddItem(srcItem, to.Location, to.BagIndex);"
            ],
            [
                438,
                "                    AddItem(dstItem, from.Location, from.BagIndex);"
            ],
            [
                444,
                "                            Guid     = srcItem.Guid,"
            ],
            [
                449,
                "                            Guid     = dstItem.Guid,"
            ],
            [
                683,
                "        private void AddItem(Item item, InventoryLocation location, uint bagIndex)"
            ],
            [
                691,
                "            AddItem(item);"
            ],
            [
                694,
                "        public void AddItem(Item item)"
            ],
            [
                708,
                "                VisualUpdate(item);"
            ],
            [
                714,
                "        private void RemoveItem(Item item)"
            ],
            [
                727,
                "                VisualUpdate(item);"
            ],
            [
                799,
                "                    }, ItemUpdateReason.ResourceConversion);"
            ]
        ]
    },
    "num_lines_added": 233,
    "num_lines_removed": 22
}