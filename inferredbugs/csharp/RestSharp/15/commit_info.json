{
    "hash": "b104eac15db1ec2ecb63d622839b10b141ad73bf",
    "message": "Fix indentation",
    "file_num_lines": 329,
    "diff_parsed": {
        "added": [
            [
                260,
                "\t\t\tIEnumerable<Parameter> parameters = null;"
            ],
            [
                261,
                ""
            ],
            [
                262,
                "\t\t\tif (request.Method != Method.POST && request.Method != Method.PUT && request.Method != Method.PATCH)"
            ],
            [
                263,
                "\t\t\t{"
            ],
            [
                264,
                "\t\t\t\t// build and attach querystring if this is a get-style request"
            ],
            [
                265,
                "\t\t\t\tparameters = request.Parameters.Where(p => p.Type == ParameterType.GetOrPost || p.Type == ParameterType.QueryString);"
            ],
            [
                266,
                "\t\t\t}"
            ],
            [
                267,
                "\t\t\telse"
            ],
            [
                268,
                "\t\t\t{"
            ],
            [
                269,
                "\t\t\t\tparameters = request.Parameters.Where(p => p.Type == ParameterType.QueryString);"
            ],
            [
                270,
                "\t\t\t}"
            ],
            [
                271,
                ""
            ],
            [
                272,
                "\t\t\t// build and attach querystring"
            ],
            [
                273,
                "\t\t\tif (parameters != null && parameters.Any())"
            ],
            [
                274,
                "\t\t\t{"
            ],
            [
                275,
                "\t\t\t\tvar data = EncodeParameters(request, parameters);"
            ],
            [
                276,
                "\t\t\t\tassembled = string.Format(\"{0}?{1}\", assembled, data);"
            ],
            [
                277,
                "\t\t\t}"
            ],
            [
                282,
                "\t\tprivate string EncodeParameters(IRestRequest request, IEnumerable<Parameter> parameters)"
            ],
            [
                283,
                "\t\t{"
            ],
            [
                284,
                "\t\t\tvar querystring = new StringBuilder();"
            ],
            [
                285,
                "\t\t\tforeach (var p in parameters)"
            ],
            [
                286,
                "\t\t\t{"
            ],
            [
                287,
                "\t\t\t\tif (querystring.Length > 1)"
            ],
            [
                288,
                "\t\t\t\t\tquerystring.Append(\"&\");"
            ],
            [
                289,
                "\t\t\t\tquerystring.AppendFormat(\"{0}={1}\", p.Name.UrlEncode(), (p.Value.ToString()).UrlEncode());"
            ],
            [
                290,
                "\t\t\t}"
            ],
            [
                295,
                "\t\tprivate void ConfigureHttp(IRestRequest request, IHttp http)"
            ],
            [
                296,
                "\t\t{"
            ],
            [
                304,
                "\t\t\tforeach (var p in DefaultParameters)"
            ],
            [
                306,
                "\t\t\t\tif (request.Parameters.Any(p2 => p2.Name == p.Name && p2.Type == p.Type))"
            ],
            [
                344,
                "\t\t\tif (request.Credentials != null)"
            ],
            [
                357,
                "\t\t\tforeach (var header in headers)"
            ],
            [
                370,
                "\t\t\tforeach (var cookie in cookies)"
            ],
            [
                384,
                "\t\t\tforeach (var parameter in @params)"
            ],
            [
                389,
                "\t\t\tforeach (var file in request.Files)"
            ],
            [
                398,
                "\t\t\tif (body != null)"
            ],
            [
                446,
                "\t\t\t\trestResponse.Cookies.Add(new RestResponseCookie"
            ],
            [
                447,
                "\t\t\t\t{"
            ],
            [
                479,
                "\t\t\t\tif (response.StatusCode == HttpStatusCode.OK"
            ],
            [
                480,
                "\t\t\t\t\t|| response.StatusCode == HttpStatusCode.Created"
            ]
        ],
        "deleted": [
            [
                260,
                "            IEnumerable<Parameter> parameters = null;"
            ],
            [
                261,
                ""
            ],
            [
                262,
                "            if (request.Method != Method.POST && request.Method != Method.PUT && request.Method != Method.PATCH)"
            ],
            [
                263,
                "            {"
            ],
            [
                264,
                "                // build and attach querystring if this is a get-style request"
            ],
            [
                265,
                "                parameters = request.Parameters.Where(p => p.Type == ParameterType.GetOrPost || p.Type == ParameterType.QueryString);"
            ],
            [
                266,
                "            }"
            ],
            [
                267,
                "            else"
            ],
            [
                268,
                "            {"
            ],
            [
                269,
                "                parameters = request.Parameters.Where(p => p.Type == ParameterType.QueryString);"
            ],
            [
                270,
                "            }"
            ],
            [
                271,
                ""
            ],
            [
                272,
                "            // build and attach querystring"
            ],
            [
                273,
                "            if  (parameters != null && parameters.Any())"
            ],
            [
                274,
                "            {"
            ],
            [
                275,
                "                var data = EncodeParameters(request, parameters);"
            ],
            [
                276,
                "                assembled = string.Format(\"{0}?{1}\", assembled, data);"
            ],
            [
                277,
                "            }"
            ],
            [
                282,
                "        private string EncodeParameters(IRestRequest request, IEnumerable<Parameter> parameters)"
            ],
            [
                283,
                "        {"
            ],
            [
                284,
                "            var querystring = new StringBuilder();"
            ],
            [
                285,
                "            foreach (var p in parameters)"
            ],
            [
                286,
                "            {"
            ],
            [
                287,
                "                if (querystring.Length > 1)"
            ],
            [
                288,
                "                    querystring.Append(\"&\");"
            ],
            [
                289,
                "                querystring.AppendFormat(\"{0}={1}\", p.Name.UrlEncode(), (p.Value.ToString()).UrlEncode());"
            ],
            [
                290,
                "            }"
            ],
            [
                295,
                "\t\tprivate void ConfigureHttp(IRestRequest request, IHttp http) {"
            ],
            [
                303,
                "\t\t\tforeach(var p in DefaultParameters)"
            ],
            [
                305,
                "\t\t\t\tif(request.Parameters.Any(p2 => p2.Name == p.Name && p2.Type == p.Type))"
            ],
            [
                343,
                "\t\t\tif(request.Credentials != null)"
            ],
            [
                356,
                "\t\t\tforeach(var header in headers)"
            ],
            [
                369,
                "\t\t\tforeach(var cookie in cookies)"
            ],
            [
                383,
                "\t\t\tforeach(var parameter in @params)"
            ],
            [
                388,
                "\t\t\tforeach(var file in request.Files)"
            ],
            [
                397,
                "\t\t\tif(body != null)"
            ],
            [
                445,
                "\t\t\t\trestResponse.Cookies.Add(new RestResponseCookie {"
            ],
            [
                477,
                "\t\t\t\tif (response.StatusCode == HttpStatusCode.OK"
            ],
            [
                478,
                "\t\t\t\t\t|| response.StatusCode == HttpStatusCode.Created"
            ]
        ]
    },
    "num_lines_added": 41,
    "num_lines_removed": 39
}