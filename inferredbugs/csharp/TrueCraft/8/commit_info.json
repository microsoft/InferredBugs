{
    "hash": "eda5dd2f826fd8bbce61a0da5f87fa11cc215791",
    "message": "Implement bed placement and supported blocks",
    "file_num_lines": 317,
    "diff_parsed": {
        "added": [
            [
                32,
                "        private bool _BlockUpdatesEnabled = true;"
            ],
            [
                33,
                "        private struct BlockUpdate"
            ],
            [
                34,
                "        {"
            ],
            [
                35,
                "            public Coordinates3D Coordinates;"
            ],
            [
                36,
                "            public IWorld World;"
            ],
            [
                37,
                "        }"
            ],
            [
                38,
                "        private Queue<BlockUpdate> PendingBlockUpdates { get; set; }"
            ],
            [
                39,
                "        public bool BlockUpdatesEnabled"
            ],
            [
                40,
                "        {"
            ],
            [
                41,
                "            get"
            ],
            [
                42,
                "            {"
            ],
            [
                43,
                "                return _BlockUpdatesEnabled;"
            ],
            [
                44,
                "            }"
            ],
            [
                45,
                "            set"
            ],
            [
                46,
                "            {"
            ],
            [
                47,
                "                _BlockUpdatesEnabled = value;"
            ],
            [
                48,
                "                if (_BlockUpdatesEnabled)"
            ],
            [
                49,
                "                {"
            ],
            [
                50,
                "                    ProcessBlockUpdates();"
            ],
            [
                51,
                "                }"
            ],
            [
                52,
                "            }"
            ],
            [
                53,
                "        }"
            ],
            [
                54,
                ""
            ],
            [
                60,
                "        private object ClientLock = new object();"
            ],
            [
                80,
                "            PendingBlockUpdates = new Queue<BlockUpdate>();"
            ],
            [
                118,
                "                            (sbyte)e.NewBlock.ID, (sbyte)e.NewBlock.Metadata));"
            ],
            [
                119,
                "                }"
            ],
            [
                120,
                "            }"
            ],
            [
                121,
                "            PendingBlockUpdates.Enqueue(new BlockUpdate { Coordinates = e.Position, World = sender as IWorld });"
            ],
            [
                122,
                "            ProcessBlockUpdates();"
            ],
            [
                123,
                "        }"
            ],
            [
                124,
                ""
            ],
            [
                125,
                "        private void ProcessBlockUpdates()"
            ],
            [
                126,
                "        {"
            ],
            [
                127,
                "            if (!BlockUpdatesEnabled)"
            ],
            [
                128,
                "                return;"
            ],
            [
                129,
                "            var adjacent = new[]"
            ],
            [
                130,
                "            {"
            ],
            [
                131,
                "                Coordinates3D.Up, Coordinates3D.Down,"
            ],
            [
                132,
                "                Coordinates3D.Left, Coordinates3D.Right,"
            ],
            [
                133,
                "                Coordinates3D.Forwards, Coordinates3D.Backwards"
            ],
            [
                134,
                "            };"
            ],
            [
                135,
                "            while (PendingBlockUpdates.Count != 0)"
            ],
            [
                136,
                "            {"
            ],
            [
                137,
                "                var update = PendingBlockUpdates.Dequeue();"
            ],
            [
                138,
                "                foreach (var offset in adjacent)"
            ],
            [
                139,
                "                {"
            ],
            [
                140,
                "                    var descriptor = update.World.GetBlockData(update.Coordinates + offset);"
            ],
            [
                141,
                "                    var provider = BlockRepository.GetBlockProvider(descriptor.ID);"
            ],
            [
                142,
                "                    if (provider != null)"
            ],
            [
                143,
                "                        provider.BlockUpdate(descriptor, this, update.World);"
            ],
            [
                217,
                "            lock (ClientLock)"
            ],
            [
                218,
                "                Clients.Add(client);"
            ],
            [
                238,
                "                    RemoteClient client;"
            ],
            [
                239,
                "                    lock (ClientLock)"
            ],
            [
                240,
                "                        client = Clients[i] as RemoteClient;"
            ],
            [
                241,
                "                    var sendTimeout = DateTime.Now.AddMilliseconds(100);"
            ],
            [
                242,
                "                    while (client.PacketQueue.Count != 0)"
            ],
            [
                244,
                "                        if (DateTime.Now > sendTimeout)"
            ],
            [
                245,
                "                        {"
            ],
            [
                246,
                "                            Console.WriteLine(\"Send timeout\" + DateTime.Now);"
            ],
            [
                247,
                "                            break;"
            ],
            [
                248,
                "                        }"
            ],
            [
                285,
                "                    var receiveTimeout = DateTime.Now.AddMilliseconds(100);"
            ],
            [
                286,
                "                    while (client.DataAvailable)"
            ],
            [
                288,
                "                        if (DateTime.Now > receiveTimeout)"
            ],
            [
                289,
                "                        {"
            ],
            [
                290,
                "                            Console.WriteLine(\"Receive timeout\" + DateTime.Now);"
            ],
            [
                291,
                "                            break;"
            ],
            [
                292,
                "                        }"
            ],
            [
                333,
                "                        lock (ClientLock)"
            ],
            [
                334,
                "                            Clients.RemoveAt(i);"
            ]
        ],
        "deleted": [
            [
                93,
                "                        (sbyte)e.NewBlock.ID, (sbyte)e.NewBlock.Metadata));"
            ],
            [
                167,
                "            Clients.Add(client);"
            ],
            [
                187,
                "                    Console.WriteLine(\"Running update \" + DateTime.Now);"
            ],
            [
                188,
                "                    var client = Clients[i] as RemoteClient;"
            ],
            [
                189,
                "                    var sendTimeout = DateTime.Now.AddMilliseconds(50);"
            ],
            [
                190,
                "                    while (client.PacketQueue.Count != 0 && DateTime.Now < sendTimeout)"
            ],
            [
                228,
                "                    var receiveTimeout = DateTime.Now.AddMilliseconds(50);"
            ],
            [
                229,
                "                    while (client.DataAvailable && DateTime.Now < receiveTimeout)"
            ],
            [
                271,
                "                        Clients.RemoveAt(i);"
            ]
        ]
    },
    "num_lines_added": 72,
    "num_lines_removed": 9
}