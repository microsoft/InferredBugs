{
    "hash": "427329f06c0e985aae156d287b6050fd9f144d39",
    "message": "Add worlds and logging to server",
    "file_num_lines": 124,
    "diff_parsed": {
        "added": [
            [
                9,
                "using TrueCraft.API.World;"
            ],
            [
                10,
                "using TrueCraft.API.Logging;"
            ],
            [
                11,
                "using TrueCraft.Core.Networking.Packets;"
            ],
            [
                19,
                "        public IList<IWorld> Worlds { get; private set; }"
            ],
            [
                24,
                "        private IList<ILogProvider> LogProviders;"
            ],
            [
                34,
                "            Worlds = new List<IWorld>();"
            ],
            [
                35,
                "            LogProviders = new List<ILogProvider>();"
            ],
            [
                51,
                "            Log(LogCategory.Notice, \"Running TrueCraft server on {0}\", endPoint);"
            ],
            [
                56,
                "        public void AddWorld(IWorld world)"
            ],
            [
                57,
                "        {"
            ],
            [
                58,
                "            Worlds.Add(world);"
            ],
            [
                59,
                "        }"
            ],
            [
                60,
                ""
            ],
            [
                61,
                "        public void AddLogProvider(ILogProvider provider)"
            ],
            [
                62,
                "        {"
            ],
            [
                63,
                "            LogProviders.Add(provider);"
            ],
            [
                64,
                "        }"
            ],
            [
                65,
                ""
            ],
            [
                66,
                "        public void Log(LogCategory category, string text, params object[] parameters)"
            ],
            [
                67,
                "        {"
            ],
            [
                68,
                "            for (int i = 0, LogProvidersCount = LogProviders.Count; i < LogProvidersCount; i++)"
            ],
            [
                69,
                "            {"
            ],
            [
                70,
                "                var provider = LogProviders[i];"
            ],
            [
                71,
                "                provider.Log(category, text, parameters);"
            ],
            [
                72,
                "            }"
            ],
            [
                73,
                "        }"
            ],
            [
                74,
                ""
            ],
            [
                75,
                "        private void DisconnectClient(IRemoteClient _client)"
            ],
            [
                76,
                "        {"
            ],
            [
                77,
                "            var client = (RemoteClient)_client;"
            ],
            [
                78,
                "            if (client.LoggedIn)"
            ],
            [
                79,
                "                Log(LogCategory.Notice, \"{0} has left the server.\");"
            ],
            [
                80,
                "            Clients.Remove(client);"
            ],
            [
                81,
                "        }"
            ],
            [
                82,
                ""
            ],
            [
                107,
                "                    if (packet is DisconnectPacket)"
            ],
            [
                108,
                "                    {"
            ],
            [
                109,
                "                        DisconnectClient(client);"
            ],
            [
                110,
                "                        i--;"
            ],
            [
                111,
                "                    }"
            ],
            [
                122,
                "                        catch (Exception e)"
            ],
            [
                124,
                "                            Log(LogCategory.Debug, \"Disconnecting client due to exception in network worker\");"
            ],
            [
                125,
                "                            Log(LogCategory.Debug, e.ToString());"
            ],
            [
                126,
                "                            DisconnectClient(client);"
            ],
            [
                132,
                "                        // TODO: Something productive"
            ]
        ],
        "deleted": [
            [
                71,
                "                    Console.WriteLine(\"Sending packet 0x{0:X2}: {1}\", packet.ID, packet.GetType().Name);"
            ],
            [
                79,
                "                        Console.WriteLine(\"Got packet 0x{0:X2}: {1}\", packet.ID, packet.GetType().Name);"
            ],
            [
                84,
                "                        catch (Exception)"
            ],
            [
                86,
                "                            // TODO: Something else"
            ],
            [
                87,
                "                            Clients.Remove(client);"
            ],
            [
                93,
                "                        Console.WriteLine(\"WARNING: Got unhandled packet 0x{0:X2}: {1}\", packet.ID, packet.GetType().Name);"
            ]
        ]
    },
    "num_lines_added": 45,
    "num_lines_removed": 6
}