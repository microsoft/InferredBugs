{
    "hash": "3e2cac56ea5f75982eea3a9150bfff9cf3645cb3",
    "message": "Implemented the other methods",
    "file_num_lines": 389,
    "diff_parsed": {
        "added": [
            [
                24,
                ""
            ],
            [
                27,
                "        private bool IsMachineWideSettings { get; set; }"
            ],
            [
                65,
                "            IsMachineWideSettings = isMachineWideSettings;"
            ],
            [
                122,
                "            if (String.IsNullOrEmpty(section))"
            ],
            [
                123,
                "            {"
            ],
            [
                124,
                "                throw new ArgumentException(NuGet_Configuration_Resources.Argument_Cannot_Be_Null_Or_Empty, \"section\");"
            ],
            [
                125,
                "            }"
            ],
            [
                126,
                ""
            ],
            [
                127,
                "            var settingValues = new List<SettingValue>();"
            ],
            [
                128,
                "            var curr = this;"
            ],
            [
                129,
                "            while (curr != null)"
            ],
            [
                130,
                "            {"
            ],
            [
                131,
                "                curr.PopulateValues(section, settingValues);"
            ],
            [
                132,
                "                curr = curr._next;"
            ],
            [
                133,
                "            }"
            ],
            [
                134,
                ""
            ],
            [
                135,
                "            return settingValues.AsReadOnly();"
            ],
            [
                140,
                "            if (String.IsNullOrEmpty(section))"
            ],
            [
                141,
                "            {"
            ],
            [
                142,
                "                throw new ArgumentException(NuGet_Configuration_Resources.Argument_Cannot_Be_Null_Or_Empty, \"section\");"
            ],
            [
                143,
                "            }"
            ],
            [
                144,
                ""
            ],
            [
                145,
                "            if (String.IsNullOrEmpty(subSection))"
            ],
            [
                146,
                "            {"
            ],
            [
                147,
                "                throw new ArgumentException(NuGet_Configuration_Resources.Argument_Cannot_Be_Null_Or_Empty, \"subSection\");"
            ],
            [
                148,
                "            }"
            ],
            [
                149,
                ""
            ],
            [
                150,
                "            var values = new List<SettingValue>();"
            ],
            [
                151,
                "            var curr = this;"
            ],
            [
                152,
                "            while (curr != null)"
            ],
            [
                153,
                "            {"
            ],
            [
                154,
                "                curr.PopulateNestedValues(section, subSection, values);"
            ],
            [
                155,
                "                curr = curr._next;"
            ],
            [
                156,
                "            }"
            ],
            [
                157,
                ""
            ],
            [
                158,
                "            return values.Select(v => new KeyValuePair<string, string>(v.Key, v.Value)).ToList().AsReadOnly();"
            ],
            [
                163,
                "            // machine wide settings cannot be changed."
            ],
            [
                164,
                "            if (IsMachineWideSettings)"
            ],
            [
                165,
                "            {"
            ],
            [
                166,
                "                if (_next == null)"
            ],
            [
                167,
                "                {"
            ],
            [
                168,
                "                    throw new InvalidOperationException(NuGet_Configuration_Resources.Error_NoWritableConfig);"
            ],
            [
                169,
                "                }"
            ],
            [
                170,
                ""
            ],
            [
                171,
                "                _next.SetValue(section, key, value);"
            ],
            [
                172,
                "                return;"
            ],
            [
                173,
                "            }"
            ],
            [
                174,
                ""
            ],
            [
                175,
                "            if (String.IsNullOrEmpty(section))"
            ],
            [
                176,
                "            {"
            ],
            [
                177,
                "                throw new ArgumentException(NuGet_Configuration_Resources.Argument_Cannot_Be_Null_Or_Empty, \"section\");"
            ],
            [
                178,
                "            }"
            ],
            [
                179,
                "            var sectionElement = GetOrCreateSection(ConfigXDocument.Root, section);"
            ],
            [
                180,
                "            SetValueInternal(sectionElement, key, value);"
            ],
            [
                181,
                "            Save();"
            ],
            [
                189,
                "        public void SetNestedValues(string section, string key, IList<KeyValuePair<string, string>> values)"
            ],
            [
                191,
                "            // machine wide settings cannot be changed."
            ],
            [
                192,
                "            if (IsMachineWideSettings)"
            ],
            [
                193,
                "            {"
            ],
            [
                194,
                "                if (_next == null)"
            ],
            [
                195,
                "                {"
            ],
            [
                196,
                "                    throw new InvalidOperationException(NuGet_Configuration_Resources.Error_NoWritableConfig);"
            ],
            [
                197,
                "                }"
            ],
            [
                198,
                ""
            ],
            [
                199,
                "                _next.SetNestedValues(section, key, values);"
            ],
            [
                200,
                "                return;"
            ],
            [
                201,
                "            }"
            ],
            [
                202,
                ""
            ],
            [
                203,
                "            if (String.IsNullOrEmpty(section))"
            ],
            [
                204,
                "            {"
            ],
            [
                205,
                "                throw new ArgumentException(NuGet_Configuration_Resources.Argument_Cannot_Be_Null_Or_Empty, \"section\");"
            ],
            [
                206,
                "            }"
            ],
            [
                207,
                "            if (values == null)"
            ],
            [
                208,
                "            {"
            ],
            [
                209,
                "                throw new ArgumentNullException(\"values\");"
            ],
            [
                210,
                "            }"
            ],
            [
                211,
                ""
            ],
            [
                212,
                "            var sectionElement = GetOrCreateSection(ConfigXDocument.Root, section);"
            ],
            [
                213,
                "            var element = GetOrCreateSection(sectionElement, key);"
            ],
            [
                214,
                ""
            ],
            [
                215,
                "            foreach (var kvp in values)"
            ],
            [
                216,
                "            {"
            ],
            [
                217,
                "                SetValueInternal(element, kvp.Key, kvp.Value);"
            ],
            [
                218,
                "            }"
            ],
            [
                219,
                "            Save();"
            ],
            [
                224,
                "            // machine wide settings cannot be changed."
            ],
            [
                225,
                "            if (IsMachineWideSettings)"
            ],
            [
                226,
                "            {"
            ],
            [
                227,
                "                if (_next == null)"
            ],
            [
                228,
                "                {"
            ],
            [
                229,
                "                    throw new InvalidOperationException(NuGet_Configuration_Resources.Error_NoWritableConfig);"
            ],
            [
                230,
                "                }"
            ],
            [
                231,
                ""
            ],
            [
                232,
                "                return _next.DeleteValue(section, key);"
            ],
            [
                233,
                "            }"
            ],
            [
                234,
                ""
            ],
            [
                235,
                "            if (String.IsNullOrEmpty(section))"
            ],
            [
                236,
                "            {"
            ],
            [
                237,
                "                throw new ArgumentException(NuGet_Configuration_Resources.Argument_Cannot_Be_Null_Or_Empty, \"section\");"
            ],
            [
                238,
                "            }"
            ],
            [
                239,
                "            if (String.IsNullOrEmpty(key))"
            ],
            [
                240,
                "            {"
            ],
            [
                241,
                "                throw new ArgumentException(NuGet_Configuration_Resources.Argument_Cannot_Be_Null_Or_Empty, \"key\");"
            ],
            [
                242,
                "            }"
            ],
            [
                243,
                ""
            ],
            [
                244,
                "            var sectionElement = GetSection(ConfigXDocument.Root, section);"
            ],
            [
                245,
                "            if (sectionElement == null)"
            ],
            [
                246,
                "            {"
            ],
            [
                247,
                "                return false;"
            ],
            [
                248,
                "            }"
            ],
            [
                249,
                ""
            ],
            [
                250,
                "            var elementToDelete = FindElementByKey(sectionElement, key, null);"
            ],
            [
                251,
                "            if (elementToDelete == null)"
            ],
            [
                252,
                "            {"
            ],
            [
                253,
                "                return false;"
            ],
            [
                254,
                "            }"
            ],
            [
                255,
                "            XElementUtility.RemoveIndented(elementToDelete);"
            ],
            [
                256,
                "            Save();"
            ],
            [
                257,
                "            return true;"
            ],
            [
                262,
                "            // machine wide settings cannot be changed."
            ],
            [
                263,
                "            if (IsMachineWideSettings)"
            ],
            [
                264,
                "            {"
            ],
            [
                265,
                "                if (_next == null)"
            ],
            [
                266,
                "                {"
            ],
            [
                267,
                "                    throw new InvalidOperationException(NuGet_Configuration_Resources.Error_NoWritableConfig);"
            ],
            [
                268,
                "                }"
            ],
            [
                269,
                ""
            ],
            [
                270,
                "                return _next.DeleteSection(section);"
            ],
            [
                271,
                "            }"
            ],
            [
                272,
                ""
            ],
            [
                273,
                "            if (String.IsNullOrEmpty(section))"
            ],
            [
                274,
                "            {"
            ],
            [
                275,
                "                throw new ArgumentException(NuGet_Configuration_Resources.Argument_Cannot_Be_Null_Or_Empty, \"section\");"
            ],
            [
                276,
                "            }"
            ],
            [
                277,
                ""
            ],
            [
                278,
                "            var sectionElement = GetSection(ConfigXDocument.Root, section);"
            ],
            [
                279,
                "            if (sectionElement == null)"
            ],
            [
                280,
                "            {"
            ],
            [
                281,
                "                return false;"
            ],
            [
                282,
                "            }"
            ],
            [
                283,
                ""
            ],
            [
                284,
                "            XElementUtility.RemoveIndented(sectionElement);"
            ],
            [
                285,
                "            Save();"
            ],
            [
                286,
                "            return true;"
            ],
            [
                308,
                "        private static XElement GetOrCreateSection(XElement parentElement, string sectionName)"
            ],
            [
                309,
                "        {"
            ],
            [
                310,
                "            sectionName = XmlConvert.EncodeLocalName(sectionName);"
            ],
            [
                311,
                "            var section = parentElement.Element(sectionName);"
            ],
            [
                312,
                "            if (section == null)"
            ],
            [
                313,
                "            {"
            ],
            [
                314,
                "                section = new XElement(sectionName);"
            ],
            [
                315,
                "                XElementUtility.AddIndented(parentElement, section);"
            ],
            [
                316,
                "            }"
            ],
            [
                317,
                "            return section;"
            ],
            [
                318,
                "        }"
            ],
            [
                319,
                ""
            ],
            [
                331,
                "                         XElementUtility.GetOptionalAttributeValue(element, \"key\").Equals(key, StringComparison.OrdinalIgnoreCase))"
            ],
            [
                347,
                "            string value = XElementUtility.GetOptionalAttributeValue(element, \"value\");"
            ],
            [
                373,
                "        private void PopulateValues(string section, List<SettingValue> current)"
            ],
            [
                374,
                "        {"
            ],
            [
                375,
                "            var sectionElement = GetSection(ConfigXDocument.Root, section);"
            ],
            [
                376,
                "            if (sectionElement != null)"
            ],
            [
                377,
                "            {"
            ],
            [
                378,
                "                ReadSection(sectionElement, current);"
            ],
            [
                379,
                "            }"
            ],
            [
                380,
                "        }"
            ],
            [
                381,
                ""
            ],
            [
                382,
                "        private void PopulateNestedValues(string section, string subSection, List<SettingValue> current)"
            ],
            [
                383,
                "        {"
            ],
            [
                384,
                "            var sectionElement = GetSection(ConfigXDocument.Root, section);"
            ],
            [
                385,
                "            if (sectionElement == null)"
            ],
            [
                386,
                "            {"
            ],
            [
                387,
                "                return;"
            ],
            [
                388,
                "            }"
            ],
            [
                389,
                "            var subSectionElement = GetSection(sectionElement, subSection);"
            ],
            [
                390,
                "            if (subSection == null)"
            ],
            [
                391,
                "            {"
            ],
            [
                392,
                "                return;"
            ],
            [
                393,
                "            }"
            ],
            [
                394,
                "            ReadSection(subSectionElement, current);"
            ],
            [
                395,
                "        }"
            ],
            [
                396,
                ""
            ],
            [
                397,
                "        private void ReadSection(XContainer sectionElement, ICollection<SettingValue> values)"
            ],
            [
                398,
                "        {"
            ],
            [
                399,
                "            var elements = sectionElement.Elements();"
            ],
            [
                400,
                ""
            ],
            [
                401,
                "            foreach (var element in elements)"
            ],
            [
                402,
                "            {"
            ],
            [
                403,
                "                string elementName = element.Name.LocalName;"
            ],
            [
                404,
                "                if (elementName.Equals(\"add\", StringComparison.OrdinalIgnoreCase))"
            ],
            [
                405,
                "                {"
            ],
            [
                406,
                "                    var v = ReadValue(element);"
            ],
            [
                407,
                "                    values.Add(new SettingValue(v.Key, v.Value, IsMachineWideSettings, _priority));"
            ],
            [
                408,
                "                }"
            ],
            [
                409,
                "                else if (elementName.Equals(\"clear\", StringComparison.OrdinalIgnoreCase))"
            ],
            [
                410,
                "                {"
            ],
            [
                411,
                "                    values.Clear();"
            ],
            [
                412,
                "                }"
            ],
            [
                413,
                "            }"
            ],
            [
                414,
                "        }"
            ],
            [
                415,
                ""
            ],
            [
                416,
                "        private KeyValuePair<string, string> ReadValue(XElement element)"
            ],
            [
                417,
                "        {"
            ],
            [
                418,
                "            var keyAttribute = element.Attribute(\"key\");"
            ],
            [
                419,
                "            var valueAttribute = element.Attribute(\"value\");"
            ],
            [
                420,
                ""
            ],
            [
                421,
                "            if (keyAttribute == null || String.IsNullOrEmpty(keyAttribute.Value) || valueAttribute == null)"
            ],
            [
                422,
                "            {"
            ],
            [
                423,
                "                throw new InvalidDataException(String.Format(CultureInfo.CurrentCulture, NuGet_Configuration_Resources.UserSettings_UnableToParseConfigFile, ConfigFilePath));"
            ],
            [
                424,
                "            }"
            ],
            [
                425,
                ""
            ],
            [
                426,
                "            var value = valueAttribute.Value;"
            ],
            [
                427,
                "            //Uri uri;"
            ],
            [
                428,
                "            //if (isPath && Uri.TryCreate(value, UriKind.Relative, out uri))"
            ],
            [
                429,
                "            //{"
            ],
            [
                430,
                "            //    string configDirectory = Path.GetDirectoryName(ConfigFilePath);"
            ],
            [
                431,
                "            //    value = _fileSystem.GetFullPath(Path.Combine(configDirectory, value));"
            ],
            [
                432,
                "            //}"
            ],
            [
                433,
                ""
            ],
            [
                434,
                "            return new KeyValuePair<string, string>(keyAttribute.Value, value);"
            ],
            [
                435,
                "        }"
            ],
            [
                436,
                ""
            ],
            [
                437,
                "        private void SetValueInternal(XElement sectionElement, string key, string value)"
            ],
            [
                438,
                "        {"
            ],
            [
                439,
                "            if (String.IsNullOrEmpty(key))"
            ],
            [
                440,
                "            {"
            ],
            [
                441,
                "                throw new ArgumentException(NuGet_Configuration_Resources.Argument_Cannot_Be_Null_Or_Empty, \"key\");"
            ],
            [
                442,
                "            }"
            ],
            [
                443,
                "            if (value == null)"
            ],
            [
                444,
                "            {"
            ],
            [
                445,
                "                throw new ArgumentNullException(\"value\");"
            ],
            [
                446,
                "            }"
            ],
            [
                447,
                ""
            ],
            [
                448,
                "            var element = FindElementByKey(sectionElement, key, null);"
            ],
            [
                449,
                "            if (element != null)"
            ],
            [
                450,
                "            {"
            ],
            [
                451,
                "                element.SetAttributeValue(\"value\", value);"
            ],
            [
                452,
                "                Save();"
            ],
            [
                453,
                "            }"
            ],
            [
                454,
                "            else"
            ],
            [
                455,
                "            {"
            ],
            [
                456,
                "                XElementUtility.AddIndented(sectionElement, new XElement(\"add\","
            ],
            [
                457,
                "                                                            new XAttribute(\"key\", key),"
            ],
            [
                458,
                "                                                            new XAttribute(\"value\", value)));"
            ],
            [
                459,
                "            }"
            ],
            [
                460,
                "        }"
            ],
            [
                461,
                ""
            ],
            [
                462,
                "        private void Save()"
            ],
            [
                463,
                "        {"
            ],
            [
                464,
                "            ExecuteSynchronized(() => FileSystemUtility.AddFile(ConfigFilePath, ConfigXDocument.Save));"
            ],
            [
                465,
                "        }"
            ],
            [
                466,
                ""
            ]
        ],
        "deleted": [
            [
                26,
                ""
            ],
            [
                29,
                ""
            ],
            [
                30,
                "        private readonly bool _isMachineWideSettings;"
            ],
            [
                31,
                ""
            ],
            [
                67,
                "            _isMachineWideSettings = isMachineWideSettings;"
            ],
            [
                124,
                "            throw new NotImplementedException();"
            ],
            [
                129,
                "            throw new NotImplementedException();"
            ],
            [
                134,
                "            throw new NotImplementedException();"
            ],
            [
                142,
                "        public void SetNestedValues(string section, string subSection, IList<KeyValuePair<string, string>> values)"
            ],
            [
                144,
                "            throw new NotImplementedException();"
            ],
            [
                149,
                "            throw new NotImplementedException();"
            ],
            [
                154,
                "            throw new NotImplementedException();"
            ],
            [
                187,
                "                         XmlUtility.GetOptionalAttributeValue(element, \"key\").Equals(key, StringComparison.OrdinalIgnoreCase))"
            ],
            [
                203,
                "            string value = XmlUtility.GetOptionalAttributeValue(element, \"value\");"
            ]
        ]
    },
    "num_lines_added": 252,
    "num_lines_removed": 14
}