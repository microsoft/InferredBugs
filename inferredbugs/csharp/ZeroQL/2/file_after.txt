using System;
using System.Linq;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using ZeroQL.SourceGenerators.Resolver;

namespace ZeroQL.SourceGenerators.Generator;

[Generator]
public class GraphQLQueryIncrementalSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var invocations = context.SyntaxProvider
            .CreateSyntaxProvider(FindMethods, (c, ct) => (Invocation: (InvocationExpressionSyntax)c.Node, c.SemanticModel));

        context.RegisterImplementationSourceOutput(invocations, GenerateSource);
    }

    private void GenerateSource(
        SourceProductionContext context,
        (InvocationExpressionSyntax Invocation, SemanticModel SemanticModel) input)
    {
        var (invocation, semanticModel) = input;
        var uniqId = Guid.NewGuid().ToString("N");
        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var queryMethod = QueryAnalyzerHelper.ExtractQueryMethod(semanticModel.Compilation, input.Invocation);
        if (queryMethod is null)
        {
            return;
        }

        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var argumentSyntax = invocation.ArgumentList.Arguments.Last();
        var key = argumentSyntax.ToString();
        var symbol = semanticModel.GetSymbolInfo(argumentSyntax.Expression);
        if (symbol.Symbol is not IMethodSymbol lambdaSymbol)
        {
            return;
        }

        if (invocation.Expression is not MemberAccessExpressionSyntax memberAccess)
        {
            return;
        }

        var requestKind = memberAccess.Name.Identifier.Text.ToLower();
        var variablesTypeName = GetVariableTypename(lambdaSymbol);
        var queryTypeName = lambdaSymbol.Parameters.Last().ToGlobalName();


        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var executeRequest = GetPrepareRequest(lambdaSymbol, semanticModel);

        var (query, error) = GraphQLQueryResolver.Resolve(semanticModel, argumentSyntax.Expression, context.CancellationToken).Unwrap();
        if (error)
        {
            if (error is ErrorWithData<Diagnostic> errorWithData)
            {
                context.ReportDiagnostic(errorWithData.Data);
                return;
            }

            context.ReportDiagnostic(Diagnostic.Create(Descriptors.FailedToConvert, argumentSyntax.Expression.GetLocation()));
            return;
        }


        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var source = $@"// This file generated for ZeroQL.
// <auto-generated/>
using System;
using System.Threading.Tasks;
using System.Text;
using System.Text.Json;
using System.Net.Http;
using ZeroQL.Core;
using ZeroQL.Core.Stores;

namespace {semanticModel.Compilation.Assembly.Name}
{{
    {SourceGeneratorInfo.CodeGenerationAttribute}
    public static class ZeroQLModuleInitializer_{uniqId}
    {{
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        public static void Init()
        {{
            GraphQLQueryStore<{queryTypeName}>.Query[{SyntaxFactory.Literal(key).Text}] = Execute;
        }}

        public static async Task<GraphQLResult<{queryTypeName}>> Execute(HttpClient httpClient, string? operationName, object variablesObject)
        {{
            var queryBody = {SyntaxFactory.Literal(query).Text};
            var variables = ({variablesTypeName})variablesObject;
            
            var stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(""{requestKind} "");
            if (!string.IsNullOrEmpty(operationName))
            {{
                stringBuilder.Append(operationName);
            }}
            stringBuilder.Append(queryBody);

            var query = stringBuilder.ToString();
            var queryRequest = new GraphQLRequest
            {{
                Variables = variables,
                Query = query
            }};

            {executeRequest}
            var responseJson = await response.Content.ReadAsStringAsync();
            var qlResponse = JsonSerializer.Deserialize<GraphQLResponse<{queryTypeName}>>(responseJson, ZeroQLJsonOptions.Options);

            if (qlResponse is null)
            {{
                return new GraphQLResult<{queryTypeName}>
                {{
                    Errors = new[]
                    {{
                        new GraphQueryError {{ Message = ""Failed to deserialize response: "" + responseJson }}
                    }}
                }};
            }}

            if (qlResponse.Errors?.Length > 0)
            {{
                return new GraphQLResult<{queryTypeName}>
                {{
                    Query = query,
                    Errors = qlResponse.Errors
                }};
            }}

            return new GraphQLResult<{queryTypeName}>
            {{
                Query = query,
                Data = qlResponse.Data
            }};
        }}
    }}
}}";

        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        context.AddSource($"ZeroQLModuleInitializer.{uniqId}.g.cs", source);
    }

    private string GetPrepareRequest(IMethodSymbol lambdaSymbol, SemanticModel semanticModel)
    {
        if (lambdaSymbol.Parameters.Length == 1)
        {
            return RequestWithoutVariables();
        }

        var inputType = lambdaSymbol.Parameters
            .First()
            .GetNamedTypeSymbol();

        var upload = semanticModel.Compilation.GetTypeByMetadataName("ZeroQL.Core.Upload");
        {
            var isFile = SymbolEqualityComparer.Default.Equals(inputType, upload);
            if (isFile)
            {
                return RequestWithSingleStream();
            }
        }

        var streamProperties = inputType
            .GetRealProperties()
            .Select(o =>
            {
                var isFile = SymbolEqualityComparer.Default.Equals(o.Type, upload);
                return (File: isFile, o.Name, o.Type);
            })
            .Where(o => o.File)
            .ToArray();

        if (!streamProperties.Any())
        {
            return RequestWithoutVariables();
        }

        return RequestWithMultipleStreams(streamProperties);
    }

    private static string RequestWithMultipleStreams(
        (bool Stream, string Name, ITypeSymbol Type)[] streamProperties)
    {
        var executeRequest = $@"
            var form = new MultipartFormDataContent();

            var queryJson = JsonSerializer.Serialize(queryRequest, ZeroQLJsonOptions.Options);
            form.Add(new StringContent(queryJson), ""operations"");

            var map = @""{{ {streamProperties.Select((o, i) => $@"""""{i}"""": [""""variables.{o.Name.FirstToLower()}""""]").Join()} }}"";
            form.Add(new StringContent(map), ""map"");
{streamProperties
    .Select((o, i) =>
        $@"form.Add(new StreamContent(variables.{o.Name}.Stream), ""{i}"", variables.{o.Name}.FileName);").JoinWithNewLine()}

            var response = await httpClient.PostAsync("""", form);";

        return executeRequest;
    }

    private static string RequestWithSingleStream()
    {
        return "";
    }

    private static string RequestWithoutVariables()
    {
        var executeRequest = @"
            var requestJson = JsonSerializer.Serialize(queryRequest, ZeroQLJsonOptions.Options);
            var response = await httpClient.PostAsync("""", new StringContent(requestJson, Encoding.UTF8, ""application/json""));";

        return executeRequest;
    }

    private static string GetVariableTypename(IMethodSymbol lambdaSymbol)
    {
        if (lambdaSymbol.Parameters.Length == 1)
        {
            return "global::ZeroQL.Core.Unit";
        }

        var namedSymbol = lambdaSymbol.Parameters.First().GetNamedTypeSymbol();
        return namedSymbol switch
        {
            { IsAnonymousType: true } anonymous => anonymous.BaseType!.ToGlobalName(),
            _ => namedSymbol.ToGlobalName()
        };
    }

    private bool FindMethods(SyntaxNode syntaxNode, CancellationToken cancellationToken)
    {
        if (syntaxNode is not InvocationExpressionSyntax invocation)
        {
            return false;
        }

        if (invocation.Expression is MemberAccessExpressionSyntax memberAccess &&
            memberAccess.Name.ToString() is "Query" or "Mutation")
        {
            return true;
        }

        return false;
    }
}