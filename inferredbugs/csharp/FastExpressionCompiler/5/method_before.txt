        protected internal virtual Expression VisitLambda<T>(Expression<T> node) where T : System.Delegate
        {
            var body = Visit(node.Body);
            var parameters = VisitAndConvert(node.Parameters);
            if (body == node.Body && ReferenceEquals(parameters, node.Parameters))
                return node;
            return parameters.Count == 0
                ? (body.Type == node.ReturnType
                    ? new Expression<T>(body)
                    : new TypedReturnExpression<T>(body, node.ReturnType))
                : (body.Type == node.ReturnType
                    ? new ManyParametersExpression<T>(body, parameters)
                    : (Expression<T>)new ManyParametersTypedReturnExpression<T>(body, parameters, node.ReturnType));
        }