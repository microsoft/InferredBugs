{
    "hash": "798ac2ae9baf367721180cbcea9ba7bc4ee507bb",
    "message": "added test for #215 and expression cleanup",
    "file_num_lines": 3074,
    "diff_parsed": {
        "added": [
            [
                421,
                "        public static TypeBinaryExpression TypeEqual(Expression operand, Type type) =>"
            ],
            [
                424,
                "        public static TypeBinaryExpression TypeIs(Expression operand, Type type) =>"
            ],
            [
                1445,
                ""
            ],
            [
                1446,
                "        internal static StringBuilder AppendMethod(this StringBuilder sb, MethodInfo method,"
            ],
            [
                1447,
                "            bool stripNamespace = false, Func<Type, string, string> printType = null)"
            ],
            [
                1448,
                "        {"
            ],
            [
                1449,
                "            var type = method.DeclaringType;"
            ],
            [
                1450,
                "            var methodIndex = type.GetTypeInfo().GetDeclaredMethods(method.Name).AsArray().GetFirstIndex(method);"
            ],
            [
                1451,
                "            return sb.AppendTypeof(type, stripNamespace, printType)"
            ],
            [
                1452,
                "                .Append(\".GetTypeInfo().GetDeclaredMethods(\\\"\").Append(method.Name)"
            ],
            [
                1453,
                "                .Append(\"\\\").ToArray()[\").Append(methodIndex).Append(\"]\");"
            ],
            [
                1454,
                "        }"
            ],
            [
                1611,
                "                case ExpressionType.ArrayLength:    return SysExpr.ArrayLength(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1612,
                "                case ExpressionType.Convert:        return SysExpr.Convert(Operand.ToExpression(ref exprsConverted), Type, Method);"
            ],
            [
                1613,
                "                case ExpressionType.ConvertChecked: return SysExpr.ConvertChecked(Operand.ToExpression(ref exprsConverted), Type, Method);"
            ],
            [
                1614,
                "                case ExpressionType.Decrement:      return SysExpr.Decrement(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1615,
                "                case ExpressionType.Increment:      return SysExpr.Increment(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1616,
                "                case ExpressionType.IsFalse:        return SysExpr.IsFalse(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1617,
                "                case ExpressionType.IsTrue:         return SysExpr.IsTrue(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1618,
                "                case ExpressionType.Negate:         return SysExpr.Negate(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1619,
                "                case ExpressionType.NegateChecked:  return SysExpr.NegateChecked(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1620,
                "                case ExpressionType.OnesComplement: return SysExpr.OnesComplement(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1621,
                "                case ExpressionType.PostDecrementAssign: return SysExpr.PostDecrementAssign(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1622,
                "                case ExpressionType.PostIncrementAssign: return SysExpr.PostIncrementAssign(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1623,
                "                case ExpressionType.PreDecrementAssign:  return SysExpr.PreDecrementAssign(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1624,
                "                case ExpressionType.PreIncrementAssign:  return SysExpr.PreIncrementAssign(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1625,
                "                case ExpressionType.Quote:          return SysExpr.Quote(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1626,
                "                case ExpressionType.UnaryPlus:      return SysExpr.UnaryPlus(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1627,
                "                case ExpressionType.Unbox:          return SysExpr.Unbox(Operand.ToExpression(ref exprsConverted), Type);"
            ],
            [
                1628,
                "                case ExpressionType.Throw:          return SysExpr.Throw(Operand.ToExpression(ref exprsConverted), Type);"
            ],
            [
                1629,
                "                case ExpressionType.TypeAs:         return SysExpr.TypeAs(Operand.ToExpression(ref exprsConverted), Type);"
            ],
            [
                1648,
                "                sb.Append(',').NewLineIdent(lineIdent).AppendTypeof(Type, stripNamespace, printType);"
            ],
            [
                1654,
                "                sb.Append(',').NewLineIdent(lineIdent).AppendMethod(Method, stripNamespace, printType);"
            ],
            [
                1710,
                "    // todo: @perf memory by fixing the nodeType"
            ],
            [
                1928,
                "                sb.NewLineIdent(lineIdent).AppendMethod(AddMethod, stripNamespace, printType);"
            ],
            [
                2468,
                "            sb.NewLineIdent(lineIdent).AppendMethod(Method, stripNamespace, printType);"
            ],
            [
                3765,
                "            sb.NewLineIdent(lineIdent).AppendMethod(Comparison, stripNamespace, printType);"
            ]
        ],
        "deleted": [
            [
                414,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                415,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to Not and the Operand property set to the specified value.</returns>"
            ],
            [
                423,
                "        public static Expression TypeEqual(Expression operand, Type type) =>"
            ],
            [
                426,
                "        public static Expression TypeIs(Expression operand, Type type) =>"
            ],
            [
                430,
                "        /// <param name=\"array\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                431,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to ArrayLength and the Operand property equal to array.</returns>"
            ],
            [
                436,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                437,
                "        /// <param name=\"type\">A Type to set the Type property equal to.</param>"
            ],
            [
                438,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to Convert and the Operand and Type properties set to the specified values.</returns>"
            ],
            [
                443,
                "        /// <typeparam name=\"TTo\">A Type to set the Type property equal to.</typeparam>"
            ],
            [
                444,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                445,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to Convert and the Operand and Type properties set to the specified values.</returns>"
            ],
            [
                450,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                451,
                "        /// <param name=\"type\">A Type to set the Type property equal to.</param>"
            ],
            [
                452,
                "        /// <param name=\"method\">A MethodInfo to set the Method property equal to.</param>"
            ],
            [
                453,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to Convert and the Operand, Type, and Method properties set to the specified values.</returns>"
            ],
            [
                458,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                459,
                "        /// <param name=\"type\">A Type to set the Type property equal to.</param>"
            ],
            [
                460,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to ConvertChecked and the Operand and Type properties set to the specified values.</returns>"
            ],
            [
                465,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                466,
                "        /// <param name=\"type\">A Type to set the Type property equal to.</param>"
            ],
            [
                467,
                "        /// <param name=\"method\">A MethodInfo to set the Method property equal to.</param>"
            ],
            [
                468,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to ConvertChecked and the Operand, Type, and Method properties set to the specified values.</returns>"
            ],
            [
                473,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                474,
                "        /// <returns>A UnaryExpression that represents the decremented expression.</returns>"
            ],
            [
                479,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                480,
                "        /// <returns>A UnaryExpression that represents the incremented expression.</returns>"
            ],
            [
                485,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                486,
                "        /// <returns>An instance of UnaryExpression.</returns>"
            ],
            [
                491,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                492,
                "        /// <returns>An instance of UnaryExpression.</returns>"
            ],
            [
                497,
                "        /// <param name=\"unaryType\">The ExpressionType that specifies the type of unary operation.</param>"
            ],
            [
                498,
                "        /// <param name=\"operand\">An Expression that represents the operand.</param>"
            ],
            [
                499,
                "        /// <param name=\"type\">The Type that specifies the type to be converted to (pass null if not applicable).</param>"
            ],
            [
                500,
                "        /// <returns>The UnaryExpression that results from calling the appropriate factory method.</returns>"
            ],
            [
                507,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                508,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to Negate and the Operand property set to the specified value.</returns>"
            ],
            [
                513,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                514,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to NegateChecked and the Operand property set to the specified value.</returns>"
            ],
            [
                519,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                520,
                "        /// <returns>An instance of UnaryExpression.</returns>"
            ],
            [
                525,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                526,
                "        /// <returns>A UnaryExpression that represents the resultant expression.</returns>"
            ],
            [
                531,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                532,
                "        /// <returns>A UnaryExpression that represents the resultant expression.</returns>"
            ],
            [
                537,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                538,
                "        /// <returns>A UnaryExpression that represents the resultant expression.</returns>"
            ],
            [
                543,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                544,
                "        /// <returns>A UnaryExpression that represents the resultant expression.</returns>"
            ],
            [
                549,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                550,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to Quote and the Operand property set to the specified value.</returns>"
            ],
            [
                555,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                556,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to UnaryPlus and the Operand property set to the specified value.</returns>"
            ],
            [
                561,
                "        /// <param name=\"expression\">An Expression to set the Operand property equal to.</param>"
            ],
            [
                562,
                "        /// <param name=\"type\">A Type to set the Type property equal to.</param>"
            ],
            [
                563,
                "        /// <returns>A UnaryExpression that has the NodeType property equal to unbox and the Operand and Type properties set to the specified values.</returns>"
            ],
            [
                1655,
                "                case ExpressionType.ArrayLength:"
            ],
            [
                1656,
                "                    return SysExpr.ArrayLength(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1657,
                "                case ExpressionType.Convert:"
            ],
            [
                1658,
                "                    return SysExpr.Convert(Operand.ToExpression(ref exprsConverted), Type, Method);"
            ],
            [
                1659,
                "                case ExpressionType.ConvertChecked:"
            ],
            [
                1660,
                "                    return SysExpr.ConvertChecked(Operand.ToExpression(ref exprsConverted), Type, Method);"
            ],
            [
                1661,
                "                case ExpressionType.Decrement:"
            ],
            [
                1662,
                "                    return SysExpr.Decrement(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1663,
                "                case ExpressionType.Increment:"
            ],
            [
                1664,
                "                    return SysExpr.Increment(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1665,
                "                case ExpressionType.IsFalse:"
            ],
            [
                1666,
                "                    return SysExpr.IsFalse(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1667,
                "                case ExpressionType.IsTrue:"
            ],
            [
                1668,
                "                    return SysExpr.IsTrue(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1669,
                "                case ExpressionType.Negate:"
            ],
            [
                1670,
                "                    return SysExpr.Negate(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1671,
                "                case ExpressionType.NegateChecked:"
            ],
            [
                1672,
                "                    return SysExpr.NegateChecked(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1673,
                "                case ExpressionType.OnesComplement:"
            ],
            [
                1674,
                "                    return SysExpr.OnesComplement(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1675,
                "                case ExpressionType.PostDecrementAssign:"
            ],
            [
                1676,
                "                    return SysExpr.PostDecrementAssign(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1677,
                "                case ExpressionType.PostIncrementAssign:"
            ],
            [
                1678,
                "                    return SysExpr.PostIncrementAssign(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1679,
                "                case ExpressionType.PreDecrementAssign:"
            ],
            [
                1680,
                "                    return SysExpr.PreDecrementAssign(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1681,
                "                case ExpressionType.PreIncrementAssign:"
            ],
            [
                1682,
                "                    return SysExpr.PreIncrementAssign(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1683,
                "                case ExpressionType.Quote:"
            ],
            [
                1684,
                "                    return SysExpr.Quote(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1685,
                "                case ExpressionType.UnaryPlus:"
            ],
            [
                1686,
                "                    return SysExpr.UnaryPlus(Operand.ToExpression(ref exprsConverted));"
            ],
            [
                1687,
                "                case ExpressionType.Unbox:"
            ],
            [
                1688,
                "                    return SysExpr.Unbox(Operand.ToExpression(ref exprsConverted), Type);"
            ],
            [
                1689,
                "                case ExpressionType.Throw:"
            ],
            [
                1690,
                "                    return SysExpr.Throw(Operand.ToExpression(ref exprsConverted), Type);"
            ],
            [
                1691,
                "                case ExpressionType.TypeAs:"
            ],
            [
                1692,
                "                    return SysExpr.TypeAs(Operand.ToExpression(ref exprsConverted), Type);"
            ],
            [
                1711,
                "                sb.Append(',');"
            ],
            [
                1712,
                "                sb.NewLineIdent(lineIdent).AppendTypeof(Type, stripNamespace, printType);"
            ],
            [
                1718,
                "                sb.Append(',');"
            ],
            [
                1719,
                "                var methodIndex = Method.DeclaringType.GetTypeInfo().GetDeclaredMethods(Method.Name).AsArray().GetFirstIndex(Method);"
            ],
            [
                1720,
                "                sb.NewLineIdent(lineIdent).AppendTypeof(Method.DeclaringType, stripNamespace, printType)"
            ],
            [
                1721,
                "                    .Append(\".GetTypeInfo().GetDeclaredMethods(\\\"\").Append(Method.Name).Append(\"\\\").ToArray()[\").Append(methodIndex).Append(\"]\");"
            ],
            [
                1780,
                "        public override Type Type => Method.ReturnType;"
            ],
            [
                1781,
                ""
            ],
            [
                1782,
                "        public ConvertWithMethodUnaryExpression(ExpressionType nodeType, Expression operand, MethodInfo method)"
            ],
            [
                1783,
                "            : base(nodeType, operand, method.ReturnType) =>"
            ],
            [
                1784,
                "            Method = method;"
            ],
            [
                1791,
                "    // todo: @perf minimize the memory consumption - bind Type to bool for boolean expressions"
            ],
            [
                2000,
                ""
            ],
            [
                2001,
                "                var m = AddMethod;"
            ],
            [
                2002,
                "                var methodIndex = m.DeclaringType.GetTypeInfo().GetDeclaredMethods(m.Name).AsArray().GetFirstIndex(m);"
            ],
            [
                2003,
                "                sb.NewLineIdent(lineIdent).AppendTypeof(m.DeclaringType, stripNamespace, printType)"
            ],
            [
                2004,
                "                    .Append(\".GetTypeInfo().GetDeclaredMethods(\\\"\").Append(m.Name).Append(\"\\\").ToArray()[\").Append(methodIndex).Append(\"],\");"
            ],
            [
                2544,
                ""
            ],
            [
                2545,
                "            var methodIndex = Method.DeclaringType.GetTypeInfo().GetDeclaredMethods(Method.Name).AsArray().GetFirstIndex(Method);"
            ],
            [
                2546,
                "            sb.NewLineIdent(lineIdent).AppendTypeof(Method.DeclaringType, stripNamespace, printType)"
            ],
            [
                2547,
                "                .Append(\".GetTypeInfo().GetDeclaredMethods(\\\"\").Append(Method.Name).Append(\"\\\").ToArray()[\").Append(methodIndex).Append(\"],\");"
            ],
            [
                2548,
                ""
            ],
            [
                3845,
                ""
            ],
            [
                3846,
                "            var methodIndex = Comparison.DeclaringType.GetTypeInfo().DeclaredMethods.AsArray().GetFirstIndex(Comparison);"
            ],
            [
                3847,
                "            sb.NewLineIdent(lineIdent).AppendTypeof(Comparison.DeclaringType, stripNamespace, printType)"
            ],
            [
                3848,
                "                .Append(\".GetTypeInfo().GetDeclaredMethods(\\\"\").Append(Comparison.Name).Append(\"\\\").ToArray()[\")"
            ],
            [
                3849,
                "                .Append(methodIndex).Append(\"],\");"
            ],
            [
                3850,
                ""
            ]
        ]
    },
    "num_lines_added": 37,
    "num_lines_removed": 122
}