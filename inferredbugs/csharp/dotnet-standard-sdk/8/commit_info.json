{
    "hash": "39be36ae19eccf6cba3fd85c794c94254910ebde",
    "message": "chore(visual recognition v3): Apply manual changes",
    "file_num_lines": 299,
    "diff_parsed": {
        "added": [
            [
                44,
                "            if (!string.IsNullOrEmpty(this.Endpoint))"
            ],
            [
                52,
                "            if (string.IsNullOrEmpty(versionDate))"
            ],
            [
                167,
                "                if (_tokenManager == null)"
            ],
            [
                169,
                "                    client = this.Client;"
            ],
            [
                184,
                "                if (result == null)"
            ],
            [
                188,
                "            catch (AggregateException ae)"
            ],
            [
                256,
                "                if (_tokenManager == null)"
            ],
            [
                258,
                "                    client = this.Client;"
            ],
            [
                273,
                "                if (result == null)"
            ],
            [
                277,
                "            catch (AggregateException ae)"
            ],
            [
                304,
                "                if (_tokenManager == null)"
            ],
            [
                306,
                "                    client = this.Client;"
            ],
            [
                318,
                "                if (result == null)"
            ],
            [
                322,
                "            catch (AggregateException ae)"
            ],
            [
                351,
                "                if (_tokenManager == null)"
            ],
            [
                353,
                "                    client = this.Client;"
            ],
            [
                365,
                "                if (result == null)"
            ],
            [
                369,
                "            catch (AggregateException ae)"
            ],
            [
                395,
                "                if (_tokenManager == null)"
            ],
            [
                397,
                "                    client = this.Client;"
            ],
            [
                411,
                "                if (result == null)"
            ],
            [
                415,
                "            catch (AggregateException ae)"
            ],
            [
                449,
                "                if (_tokenManager == null)"
            ],
            [
                451,
                "                    client = this.Client;"
            ],
            [
                465,
                "                if (result == null)"
            ],
            [
                469,
                "            catch (AggregateException ae)"
            ]
        ],
        "deleted": [
            [
                44,
                "            if(!string.IsNullOrEmpty(this.Endpoint))"
            ],
            [
                48,
                "        public VisualRecognitionService(, string versionDate) : this()"
            ],
            [
                49,
                "        {"
            ],
            [
                50,
                "            if(string.IsNullOrEmpty(versionDate))"
            ],
            [
                51,
                "                throw new ArgumentNullException(\"versionDate cannot be null.\");"
            ],
            [
                52,
                ""
            ],
            [
                53,
                "            VersionDate = versionDate;"
            ],
            [
                54,
                "        }"
            ],
            [
                55,
                ""
            ],
            [
                60,
                "            if(string.IsNullOrEmpty(versionDate))"
            ],
            [
                175,
                "                if(_tokenManager == null)"
            ],
            [
                191,
                "                if(result == null)"
            ],
            [
                195,
                "            catch(AggregateException ae)"
            ],
            [
                263,
                "                if(_tokenManager == null)"
            ],
            [
                279,
                "                if(result == null)"
            ],
            [
                283,
                "            catch(AggregateException ae)"
            ],
            [
                284,
                "            {"
            ],
            [
                285,
                "                throw ae.Flatten();"
            ],
            [
                286,
                "            }"
            ],
            [
                287,
                ""
            ],
            [
                288,
                "            return result;"
            ],
            [
                289,
                "        }"
            ],
            [
                290,
                "        /// <summary>"
            ],
            [
                291,
                "        /// Create a classifier."
            ],
            [
                292,
                "        ///"
            ],
            [
                293,
                "        /// Train a new multi-faceted classifier on the uploaded image data. Create your custom classifier with positive"
            ],
            [
                294,
                "        /// or negative examples. Include at least two sets of examples, either two positive example files or one"
            ],
            [
                295,
                "        /// positive and one negative file. You can upload a maximum of 256 MB per call."
            ],
            [
                296,
                "        ///"
            ],
            [
                297,
                "        /// Encode all names in UTF-8 if they contain non-ASCII characters (.zip and image file names, and classifier"
            ],
            [
                298,
                "        /// and class names). The service assumes UTF-8 encoding if it encounters non-ASCII characters."
            ],
            [
                299,
                "        /// </summary>"
            ],
            [
                300,
                "        /// <param name=\"name\">The name of the new classifier. Encode special characters in UTF-8.</param>"
            ],
            [
                301,
                "        /// <param name=\"positiveExamples\">A .zip file of images that depict the visual subject of a class in the new"
            ],
            [
                302,
                "        /// classifier. You can include more than one positive example file in a call."
            ],
            [
                303,
                "        ///"
            ],
            [
                304,
                "        /// Specify the parameter name by appending `_positive_examples` to the class name. For example,"
            ],
            [
                305,
                "        /// `goldenretriever_positive_examples` creates the class **goldenretriever**."
            ],
            [
                306,
                "        ///"
            ],
            [
                307,
                "        /// Include at least 10 images in .jpg or .png format. The minimum recommended image resolution is 32X32 pixels."
            ],
            [
                308,
                "        /// The maximum number of images is 10,000 images or 100 MB per .zip file."
            ],
            [
                309,
                "        ///"
            ],
            [
                310,
                "        /// Encode special characters in the file name in UTF-8.</param>"
            ],
            [
                311,
                "        /// <param name=\"negativeExamples\">A .zip file of images that do not depict the visual subject of any of the"
            ],
            [
                312,
                "        /// classes of the new classifier. Must contain a minimum of 10 images."
            ],
            [
                313,
                "        ///"
            ],
            [
                314,
                "        /// Encode special characters in the file name in UTF-8. (optional)</param>"
            ],
            [
                315,
                "        /// <param name=\"customData\">Custom data object to pass data including custom request headers.</param>"
            ],
            [
                316,
                "        /// <returns><see cref=\"Classifier\" />Classifier</returns>"
            ],
            [
                317,
                "        public Classifier CreateClassifier(string name, Dictionary<string, System.IO.FileStream> positiveExamples, System.IO.FileStream negativeExamples = null, Dictionary<string, object> customData = null)"
            ],
            [
                318,
                "        {"
            ],
            [
                319,
                "            if (string.IsNullOrEmpty(name))"
            ],
            [
                320,
                "                throw new ArgumentNullException(nameof(name));"
            ],
            [
                321,
                "            if (positiveExamples == null)"
            ],
            [
                322,
                "                throw new ArgumentNullException(nameof(positiveExamples));"
            ],
            [
                323,
                "            if (positiveExamples.Count == 0)"
            ],
            [
                324,
                "                throw new ArgumentException(\"positiveExamples must contain at least one dictionary entry\");"
            ],
            [
                325,
                ""
            ],
            [
                326,
                "            if (string.IsNullOrEmpty(VersionDate))"
            ],
            [
                327,
                "                throw new ArgumentNullException(\"versionDate cannot be null.\");"
            ],
            [
                328,
                ""
            ],
            [
                329,
                "            Classifier result = null;"
            ],
            [
                330,
                ""
            ],
            [
                331,
                "            try"
            ],
            [
                332,
                "            {"
            ],
            [
                333,
                "                var formData = new MultipartFormDataContent();"
            ],
            [
                334,
                ""
            ],
            [
                335,
                "                if (name != null)"
            ],
            [
                336,
                "                {"
            ],
            [
                337,
                "                    var nameContent = new StringContent(name, Encoding.UTF8, HttpMediaType.TEXT_PLAIN);"
            ],
            [
                338,
                "                    nameContent.Headers.ContentType = null;"
            ],
            [
                339,
                "                    formData.Add(nameContent, \"name\");"
            ],
            [
                340,
                "                }"
            ],
            [
                341,
                ""
            ],
            [
                342,
                "                if (positiveExamples != null && positiveExamples.Count > 0)"
            ],
            [
                343,
                "                {"
            ],
            [
                344,
                "                    foreach(KeyValuePair<string, System.IO.FileStream> entry in positiveExamples)"
            ],
            [
                345,
                "                    {"
            ],
            [
                346,
                "                        var partName = string.Format(\"{0}_positive_examples\", entry.Key);"
            ],
            [
                347,
                "                        var partContent = new ByteArrayContent((entry.Value as Stream).ReadAllBytes());"
            ],
            [
                348,
                "                        System.Net.Http.Headers.MediaTypeHeaderValue contentType;"
            ],
            [
                349,
                "                        System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(\"application/octet-stream\", out contentType);"
            ],
            [
                350,
                "                        partContent.Headers.ContentType = contentType;"
            ],
            [
                351,
                "                        formData.Add(partContent, partName, entry.Value.Name);"
            ],
            [
                352,
                "                    }"
            ],
            [
                353,
                "                }"
            ],
            [
                354,
                ""
            ],
            [
                355,
                "                if (negativeExamples != null)"
            ],
            [
                356,
                "                {"
            ],
            [
                357,
                "                    var negativeExamplesContent = new ByteArrayContent((negativeExamples as Stream).ReadAllBytes());"
            ],
            [
                358,
                "                    System.Net.Http.Headers.MediaTypeHeaderValue contentType;"
            ],
            [
                359,
                "                    System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(\"application/octet-stream\", out contentType);"
            ],
            [
                360,
                "                    negativeExamplesContent.Headers.ContentType = contentType;"
            ],
            [
                361,
                "                    formData.Add(negativeExamplesContent, \"negative_examples\", negativeExamples.Name);"
            ],
            [
                362,
                "                }"
            ],
            [
                363,
                ""
            ],
            [
                364,
                "                IClient client;"
            ],
            [
                365,
                "                if(_tokenManager == null)"
            ],
            [
                366,
                "                {"
            ],
            [
                367,
                "                }"
            ],
            [
                368,
                "                else"
            ],
            [
                369,
                "                {"
            ],
            [
                370,
                "                    client = this.Client.WithAuthentication(_tokenManager.GetToken());"
            ],
            [
                371,
                "                }"
            ],
            [
                372,
                "                var restRequest = client.PostAsync($\"{this.Endpoint}/v3/classifiers\");"
            ],
            [
                373,
                ""
            ],
            [
                374,
                "                restRequest.WithArgument(\"version\", VersionDate);"
            ],
            [
                375,
                "                restRequest.WithBodyContent(formData);"
            ],
            [
                376,
                "                if (customData != null)"
            ],
            [
                377,
                "                    restRequest.WithCustomData(customData);"
            ],
            [
                378,
                "                result = restRequest.As<Classifier>().Result;"
            ],
            [
                379,
                "                if(result == null)"
            ],
            [
                380,
                "                    result = new Classifier();"
            ],
            [
                381,
                "                result.CustomData = restRequest.CustomData;"
            ],
            [
                382,
                "            }"
            ],
            [
                383,
                "            catch(AggregateException ae)"
            ],
            [
                410,
                "                if(_tokenManager == null)"
            ],
            [
                423,
                "                if(result == null)"
            ],
            [
                427,
                "            catch(AggregateException ae)"
            ],
            [
                456,
                "                if(_tokenManager == null)"
            ],
            [
                469,
                "                if(result == null)"
            ],
            [
                473,
                "            catch(AggregateException ae)"
            ],
            [
                499,
                "                if(_tokenManager == null)"
            ],
            [
                514,
                "                if(result == null)"
            ],
            [
                518,
                "            catch(AggregateException ae)"
            ],
            [
                519,
                "            {"
            ],
            [
                520,
                "                throw ae.Flatten();"
            ],
            [
                521,
                "            }"
            ],
            [
                522,
                ""
            ],
            [
                523,
                "            return result;"
            ],
            [
                524,
                "        }"
            ],
            [
                525,
                ""
            ],
            [
                526,
                "        /// <summary>"
            ],
            [
                527,
                "        /// Update a classifier."
            ],
            [
                528,
                "        ///"
            ],
            [
                529,
                "        /// Update a custom classifier by adding new positive or negative classes (examples) or by adding new images to"
            ],
            [
                530,
                "        /// existing classes. You must supply at least one set of positive or negative examples. For details, see"
            ],
            [
                531,
                "        /// [Updating custom"
            ],
            [
                532,
                "        /// classifiers](https://cloud.ibm.com/docs/services/visual-recognition/customizing.html#updating-custom-classifiers)."
            ],
            [
                533,
                "        ///"
            ],
            [
                534,
                "        /// Encode all names in UTF-8 if they contain non-ASCII characters (.zip and image file names, and classifier"
            ],
            [
                535,
                "        /// and class names). The service assumes UTF-8 encoding if it encounters non-ASCII characters."
            ],
            [
                536,
                "        ///"
            ],
            [
                537,
                "        /// **Tip:** Don't make retraining calls on a classifier until the status is ready. When you submit retraining"
            ],
            [
                538,
                "        /// requests in parallel, the last request overwrites the previous requests. The retrained property shows the"
            ],
            [
                539,
                "        /// last time the classifier retraining finished."
            ],
            [
                540,
                "        /// </summary>"
            ],
            [
                541,
                "        /// <param name=\"classifierId\">The ID of the classifier.</param>"
            ],
            [
                542,
                "        /// <param name=\"positiveExamples\">A .zip file of images that depict the visual subject of a class in the"
            ],
            [
                543,
                "        /// classifier. The positive examples create or update classes in the classifier. You can include more than one"
            ],
            [
                544,
                "        /// positive example file in a call."
            ],
            [
                545,
                "        ///"
            ],
            [
                546,
                "        /// Specify the parameter name by appending `_positive_examples` to the class name. For example,"
            ],
            [
                547,
                "        /// `goldenretriever_positive_examples` creates the class `goldenretriever`."
            ],
            [
                548,
                "        ///"
            ],
            [
                549,
                "        /// Include at least 10 images in .jpg or .png format. The minimum recommended image resolution is 32X32 pixels."
            ],
            [
                550,
                "        /// The maximum number of images is 10,000 images or 100 MB per .zip file."
            ],
            [
                551,
                "        ///"
            ],
            [
                552,
                "        /// Encode special characters in the file name in UTF-8. (optional)</param>"
            ],
            [
                553,
                "        /// <param name=\"negativeExamples\">A .zip file of images that do not depict the visual subject of any of the"
            ],
            [
                554,
                "        /// classes of the new classifier. Must contain a minimum of 10 images."
            ],
            [
                555,
                "        ///"
            ],
            [
                556,
                "        /// Encode special characters in the file name in UTF-8. (optional)</param>"
            ],
            [
                557,
                "        /// <param name=\"customData\">Custom data object to pass data including custom request headers.</param>"
            ],
            [
                558,
                "        /// <returns><see cref=\"Classifier\" />Classifier</returns>"
            ],
            [
                559,
                "        public Classifier UpdateClassifier(string classifierId, Dictionary<string, System.IO.FileStream> positiveExamples = null, System.IO.FileStream negativeExamples = null, Dictionary<string, object> customData = null)"
            ],
            [
                560,
                "        {"
            ],
            [
                561,
                "            if (string.IsNullOrEmpty(classifierId))"
            ],
            [
                562,
                "                throw new ArgumentNullException(nameof(classifierId));"
            ],
            [
                563,
                ""
            ],
            [
                564,
                "            if (string.IsNullOrEmpty(VersionDate))"
            ],
            [
                565,
                "                throw new ArgumentNullException(\"versionDate cannot be null.\");"
            ],
            [
                566,
                ""
            ],
            [
                567,
                "            Classifier result = null;"
            ],
            [
                568,
                ""
            ],
            [
                569,
                "            try"
            ],
            [
                570,
                "            {"
            ],
            [
                571,
                "                var formData = new MultipartFormDataContent();"
            ],
            [
                572,
                ""
            ],
            [
                573,
                "                if (positiveExamples != null && positiveExamples.Count > 0)"
            ],
            [
                574,
                "                {"
            ],
            [
                575,
                "                    foreach(KeyValuePair<string, System.IO.FileStream> entry in positiveExamples)"
            ],
            [
                576,
                "                    {"
            ],
            [
                577,
                "                        var partName = string.Format(\"{0}_positive_examples\", entry.Key);"
            ],
            [
                578,
                "                        var partContent = new ByteArrayContent((entry.Value as Stream).ReadAllBytes());"
            ],
            [
                579,
                "                        System.Net.Http.Headers.MediaTypeHeaderValue contentType;"
            ],
            [
                580,
                "                        System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(\"application/octet-stream\", out contentType);"
            ],
            [
                581,
                "                        partContent.Headers.ContentType = contentType;"
            ],
            [
                582,
                "                        formData.Add(partContent, partName, entry.Value.Name);"
            ],
            [
                583,
                "                    }"
            ],
            [
                584,
                "                }"
            ],
            [
                585,
                ""
            ],
            [
                586,
                "                if (negativeExamples != null)"
            ],
            [
                587,
                "                {"
            ],
            [
                588,
                "                    var negativeExamplesContent = new ByteArrayContent((negativeExamples as Stream).ReadAllBytes());"
            ],
            [
                589,
                "                    System.Net.Http.Headers.MediaTypeHeaderValue contentType;"
            ],
            [
                590,
                "                    System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(\"application/octet-stream\", out contentType);"
            ],
            [
                591,
                "                    negativeExamplesContent.Headers.ContentType = contentType;"
            ],
            [
                592,
                "                    formData.Add(negativeExamplesContent, \"negative_examples\", negativeExamples.Name);"
            ],
            [
                593,
                "                }"
            ],
            [
                594,
                ""
            ],
            [
                595,
                "                IClient client;"
            ],
            [
                596,
                "                if(_tokenManager == null)"
            ],
            [
                597,
                "                {"
            ],
            [
                598,
                "                }"
            ],
            [
                599,
                "                else"
            ],
            [
                600,
                "                {"
            ],
            [
                601,
                "                    client = this.Client.WithAuthentication(_tokenManager.GetToken());"
            ],
            [
                602,
                "                }"
            ],
            [
                603,
                "                var restRequest = client.PostAsync($\"{this.Endpoint}/v3/classifiers/{classifierId}\");"
            ],
            [
                604,
                ""
            ],
            [
                605,
                "                restRequest.WithArgument(\"version\", VersionDate);"
            ],
            [
                606,
                "                restRequest.WithBodyContent(formData);"
            ],
            [
                607,
                "                if (customData != null)"
            ],
            [
                608,
                "                    restRequest.WithCustomData(customData);"
            ],
            [
                609,
                "                result = restRequest.As<Classifier>().Result;"
            ],
            [
                610,
                "                if(result == null)"
            ],
            [
                611,
                "                    result = new Classifier();"
            ],
            [
                612,
                "                result.CustomData = restRequest.CustomData;"
            ],
            [
                613,
                "            }"
            ],
            [
                614,
                "            catch(AggregateException ae)"
            ],
            [
                621,
                "        /// <summary>"
            ],
            [
                622,
                "        /// Retrieve a Core ML model of a classifier."
            ],
            [
                623,
                "        ///"
            ],
            [
                624,
                "        /// Download a Core ML model file (.mlmodel) of a custom classifier that returns <tt>\"core_ml_enabled\":"
            ],
            [
                625,
                "        /// true</tt> in the classifier details."
            ],
            [
                626,
                "        /// </summary>"
            ],
            [
                627,
                "        /// <param name=\"classifierId\">The ID of the classifier.</param>"
            ],
            [
                628,
                "        /// <param name=\"customData\">Custom data object to pass data including custom request headers.</param>"
            ],
            [
                629,
                "        /// <returns><see cref=\"byte[]\" />byte[]</returns>"
            ],
            [
                630,
                "        public byte[] GetCoreMlModel(string classifierId, Dictionary<string, object> customData = null)"
            ],
            [
                631,
                "        {"
            ],
            [
                632,
                "            if (string.IsNullOrEmpty(classifierId))"
            ],
            [
                633,
                "                throw new ArgumentNullException(nameof(classifierId));"
            ],
            [
                634,
                ""
            ],
            [
                635,
                "            if (string.IsNullOrEmpty(VersionDate))"
            ],
            [
                636,
                "                throw new ArgumentNullException(\"versionDate cannot be null.\");"
            ],
            [
                637,
                ""
            ],
            [
                638,
                "            byte[] result = null;"
            ],
            [
                639,
                ""
            ],
            [
                640,
                "            try"
            ],
            [
                641,
                "            {"
            ],
            [
                642,
                "                IClient client;"
            ],
            [
                643,
                "                if(_tokenManager == null)"
            ],
            [
                644,
                "                {"
            ],
            [
                645,
                "                }"
            ],
            [
                646,
                "                else"
            ],
            [
                647,
                "                {"
            ],
            [
                648,
                "                    client = this.Client.WithAuthentication(_tokenManager.GetToken());"
            ],
            [
                649,
                "                }"
            ],
            [
                650,
                "                var restRequest = client.GetAsync($\"{this.Endpoint}/v3/classifiers/{classifierId}/core_ml_model\");"
            ],
            [
                651,
                ""
            ],
            [
                652,
                "                restRequest.WithArgument(\"version\", VersionDate);"
            ],
            [
                653,
                "                if (customData != null)"
            ],
            [
                654,
                "                    restRequest.WithCustomData(customData);"
            ],
            [
                655,
                "                result = restRequest.As<byte[]>().Result;"
            ],
            [
                656,
                "            }"
            ],
            [
                657,
                "            catch(AggregateException ae)"
            ],
            [
                658,
                "            {"
            ],
            [
                659,
                "                throw ae.Flatten();"
            ],
            [
                660,
                "            }"
            ],
            [
                662,
                "            return result;"
            ],
            [
                663,
                "        }"
            ],
            [
                690,
                "                if(_tokenManager == null)"
            ],
            [
                705,
                "                if(result == null)"
            ],
            [
                709,
                "            catch(AggregateException ae)"
            ]
        ]
    },
    "num_lines_added": 26,
    "num_lines_removed": 266
}