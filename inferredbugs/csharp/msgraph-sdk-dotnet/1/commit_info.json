{
    "hash": "cba2c1bee348a9d110d384726fc7d81583e15dcd",
    "message": "Updated tests",
    "file_num_lines": 236,
    "diff_parsed": {
        "added": [
            [
                21,
                "        private DelegatingHandler[] handlers = new DelegatingHandler[3];"
            ],
            [
                30,
                "            handlers[2] = new AuthenticationHandler();"
            ],
            [
                41,
                "            using (RetryHandler retryHandler = (RetryHandler)GraphClientFactory.CreatePipeline(null, handlers))"
            ],
            [
                42,
                "            using (RedirectHandler redirectHandler = (RedirectHandler)retryHandler.InnerHandler)"
            ],
            [
                43,
                "            using (AuthenticationHandler authenticationHandler = (AuthenticationHandler)redirectHandler.InnerHandler)"
            ],
            [
                44,
                "            using (HttpClientHandler innerMost = (HttpClientHandler)authenticationHandler.InnerHandler)"
            ],
            [
                46,
                "                Assert.NotNull(retryHandler);"
            ],
            [
                47,
                "                Assert.NotNull(redirectHandler);"
            ],
            [
                48,
                "                Assert.NotNull(authenticationHandler);"
            ],
            [
                50,
                "                Assert.IsType(typeof(RetryHandler), retryHandler);"
            ],
            [
                51,
                "                Assert.IsType(typeof(RedirectHandler), redirectHandler);"
            ],
            [
                52,
                "                Assert.IsType(typeof(AuthenticationHandler), authenticationHandler);"
            ],
            [
                61,
                "            using (RetryHandler retryHandler = (RetryHandler)GraphClientFactory.CreatePipeline(this.testHttpMessageHandler, handlers))"
            ],
            [
                62,
                "            using (RedirectHandler redirectHandler = (RedirectHandler)retryHandler.InnerHandler)"
            ],
            [
                63,
                "            using (AuthenticationHandler authenticationHandler = (AuthenticationHandler)redirectHandler.InnerHandler)"
            ],
            [
                64,
                "            using (MockRedirectHandler innerMost = (MockRedirectHandler)authenticationHandler.InnerHandler)"
            ],
            [
                66,
                "                Assert.NotNull(retryHandler);"
            ],
            [
                67,
                "                Assert.NotNull(redirectHandler);"
            ],
            [
                68,
                "                Assert.NotNull(authenticationHandler);"
            ],
            [
                70,
                "                Assert.IsType(typeof(RetryHandler), retryHandler);"
            ],
            [
                71,
                "                Assert.IsType(typeof(RedirectHandler), redirectHandler);"
            ],
            [
                72,
                "                Assert.IsType(typeof(AuthenticationHandler), authenticationHandler);"
            ],
            [
                211,
                "        [Fact]"
            ],
            [
                212,
                "        public async Task SendRequest_UnauthorizedWithNoAuthenticationProvider()"
            ],
            [
                213,
                "        {"
            ],
            [
                214,
                "            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, \"https://example.com/bar\");"
            ],
            [
                215,
                "            httpRequestMessage.Content = new StringContent(\"Hello World\");"
            ],
            [
                216,
                ""
            ],
            [
                217,
                "            var unauthorizedResponse = new HttpResponseMessage(HttpStatusCode.Unauthorized);"
            ],
            [
                218,
                "            var okResponse = new HttpResponseMessage(HttpStatusCode.OK);"
            ],
            [
                219,
                ""
            ],
            [
                220,
                "            testHttpMessageHandler.SetHttpResponse(unauthorizedResponse, okResponse);"
            ],
            [
                221,
                ""
            ],
            [
                222,
                "            using (HttpClient client = GraphClientFactory.CreateClient(testHttpMessageHandler, handlers))"
            ],
            [
                223,
                "            {"
            ],
            [
                224,
                "                var response = await client.SendAsync(httpRequestMessage, new CancellationToken());"
            ],
            [
                225,
                "                Assert.Same(response, unauthorizedResponse);"
            ],
            [
                226,
                "                Assert.Same(response.RequestMessage, httpRequestMessage);"
            ],
            [
                227,
                "            }"
            ],
            [
                228,
                "        }"
            ],
            [
                229,
                ""
            ],
            [
                230,
                "        [Fact]"
            ],
            [
                231,
                "        public async Task SendRequest_UnauthorizedWithAuthenticationProvider()"
            ],
            [
                232,
                "        {"
            ],
            [
                233,
                "            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, \"https://example.com/bar\");"
            ],
            [
                234,
                "            httpRequestMessage.Content = new StringContent(\"Hello World\");"
            ],
            [
                235,
                ""
            ],
            [
                236,
                "            var unauthorizedResponse = new HttpResponseMessage(HttpStatusCode.Unauthorized);"
            ],
            [
                237,
                "            var okResponse = new HttpResponseMessage(HttpStatusCode.OK);"
            ],
            [
                238,
                ""
            ],
            [
                239,
                "            testHttpMessageHandler.SetHttpResponse(unauthorizedResponse, okResponse);"
            ],
            [
                240,
                ""
            ],
            [
                241,
                "            handlers[2] = new AuthenticationHandler(new MockAuthenticationProvider().Object);"
            ],
            [
                242,
                ""
            ],
            [
                243,
                "            using (HttpClient client = GraphClientFactory.CreateClient(testHttpMessageHandler, handlers))"
            ],
            [
                244,
                "            {"
            ],
            [
                245,
                "                var response = await client.SendAsync(httpRequestMessage, new CancellationToken());"
            ],
            [
                246,
                "                Assert.Same(response, okResponse);"
            ],
            [
                247,
                "                Assert.Same(response.RequestMessage, httpRequestMessage);"
            ],
            [
                248,
                "            }"
            ],
            [
                249,
                "        }"
            ],
            [
                254,
                "            handlers[handlers.Length - 1] = null;"
            ],
            [
                265,
                "            handlers[handlers.Length - 1] = new RetryHandler(this.testHttpMessageHandler);"
            ],
            [
                273,
                "                Assert.Equal(exception.Message, String.Format(\"DelegatingHandler array has unexpected InnerHandler. {0} has unexpected InnerHandler.\", handlers[handlers.Length - 1]));"
            ]
        ],
        "deleted": [
            [
                21,
                "        private DelegatingHandler[] handlers = new DelegatingHandler[2];"
            ],
            [
                40,
                "            using (RetryHandler handler = (RetryHandler)GraphClientFactory.CreatePipeline(null, handlers))"
            ],
            [
                41,
                "            using (RedirectHandler inner = (RedirectHandler)handler.InnerHandler)"
            ],
            [
                42,
                "            using (HttpClientHandler innerMost = (HttpClientHandler)inner.InnerHandler)"
            ],
            [
                44,
                "                Assert.NotNull(handler);"
            ],
            [
                45,
                "                Assert.NotNull(inner);"
            ],
            [
                47,
                "                Assert.IsType(typeof(RetryHandler), handler);"
            ],
            [
                48,
                "                Assert.IsType(typeof(RedirectHandler), inner);"
            ],
            [
                57,
                "            using (RetryHandler handler = (RetryHandler)GraphClientFactory.CreatePipeline(this.testHttpMessageHandler, handlers))"
            ],
            [
                58,
                "            using (RedirectHandler inner = (RedirectHandler)handler.InnerHandler)"
            ],
            [
                59,
                "            using (MockRedirectHandler innerMost = (MockRedirectHandler)inner.InnerHandler)"
            ],
            [
                61,
                "                Assert.NotNull(handler);"
            ],
            [
                62,
                "                Assert.NotNull(inner);"
            ],
            [
                64,
                "                Assert.IsType(typeof(RetryHandler), handler);"
            ],
            [
                65,
                "                Assert.IsType(typeof(RedirectHandler), inner);"
            ],
            [
                68,
                ""
            ],
            [
                71,
                ""
            ],
            [
                151,
                ""
            ],
            [
                211,
                "            handlers[1] = null;"
            ],
            [
                222,
                "            handlers[1] = new RetryHandler(this.testHttpMessageHandler);"
            ],
            [
                230,
                "                Assert.Equal(exception.Message, String.Format(\"DelegatingHandler array has unexpected InnerHandler. {0} has unexpected InnerHandler.\", handlers[1]));"
            ]
        ]
    },
    "num_lines_added": 64,
    "num_lines_removed": 21
}