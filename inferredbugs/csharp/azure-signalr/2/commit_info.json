{
    "hash": "98d62a96050414a8cfee0bcd491048770106a345",
    "message": "switch to Azure.Identity to support conditional access. (#1309)",
    "file_num_lines": 140,
    "diff_parsed": {
        "added": [
            [
                7,
                "using Azure.Identity;"
            ],
            [
                137,
                "                        return new AadAccessKey(new ClientSecretCredential(tenantId, clientId, clientSecret), endpoint, port);"
            ],
            [
                139,
                "                    else if (dict.TryGetValue(ClientCertProperty, out var clientCertPath))"
            ],
            [
                141,
                "                        return new AadAccessKey(new ClientCertificateCredential(tenantId, clientId, clientCertPath), endpoint, port);"
            ],
            [
                150,
                "                    return new AadAccessKey(new ManagedIdentityCredential(clientId), endpoint, port);"
            ],
            [
                155,
                "                return new AadAccessKey(new ManagedIdentityCredential(), endpoint, port);"
            ]
        ],
        "deleted": [
            [
                6,
                "using System.IO;"
            ],
            [
                7,
                "using System.Security.Cryptography.X509Certificates;"
            ],
            [
                21,
                "        private const string FileNotExists = \"Client cert file not exists.\";"
            ],
            [
                137,
                "                    var options = new AadApplicationOptions(clientId, tenantId);"
            ],
            [
                138,
                ""
            ],
            [
                141,
                "                        return new AadAccessKey(options.WithClientSecret(clientSecret), endpoint, port);"
            ],
            [
                143,
                "                    else if (dict.TryGetValue(ClientCertProperty, out var clientCert))"
            ],
            [
                145,
                "                        if (!File.Exists(clientCert))"
            ],
            [
                146,
                "                        {"
            ],
            [
                147,
                "                            throw new FileNotFoundException(FileNotExists, clientCert);"
            ],
            [
                148,
                "                        }"
            ],
            [
                149,
                "                        var cert = new X509Certificate2(clientCert);"
            ],
            [
                150,
                "                        return new AadAccessKey(options.WithClientCert(cert), endpoint, port);"
            ],
            [
                159,
                "                    return new AadAccessKey(new AadManagedIdentityOptions(clientId), endpoint, port);"
            ],
            [
                164,
                "                return new AadAccessKey(new AadManagedIdentityOptions(), endpoint, port);"
            ]
        ]
    },
    "num_lines_added": 6,
    "num_lines_removed": 15
}