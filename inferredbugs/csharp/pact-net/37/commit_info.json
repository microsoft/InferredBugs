{
    "hash": "300f0fd85e2cfe0383772a1f405c34a58a9c119a",
    "message": "Adding tests for NancyContext fix which strips slashes from the exception message",
    "file_num_lines": 250,
    "diff_parsed": {
        "added": [
            [
                2,
                "using System.IO;"
            ],
            [
                25,
                "                new ProviderServiceInteraction { Request =  null, Response = new ProviderServiceResponse()}"
            ],
            [
                55,
                "                new ProviderServiceInteraction { Request = new ProviderServiceRequest(), Response = null }"
            ],
            [
                97,
                "                new ProviderServiceInteraction { Request = expectedRequest, Response = expectedResponse}"
            ],
            [
                127,
                "                new ProviderServiceInteraction { Request = expectedRequest, Response = expectedResponse }"
            ],
            [
                163,
                "                new ProviderServiceInteraction { Request = expectedRequest, Response = expectedResponse}"
            ],
            [
                202,
                "                new ProviderServiceInteraction { Request = expectedRequest, Response = expectedResponse }"
            ],
            [
                246,
                "                new ProviderServiceInteraction { Request = expectedRequest, Response = expectedResponse }"
            ],
            [
                270,
                "            Assert.NotEmpty(response.ReasonPhrase);"
            ],
            [
                271,
                "        }"
            ],
            [
                272,
                ""
            ],
            [
                273,
                "        [Fact]"
            ],
            [
                274,
                "        public void Handle_WhenExpectionIsThrownHandlingRequest_ReasonPhraseAndBodyContentIsSetWithoutBackSlashes()"
            ],
            [
                275,
                "        {"
            ],
            [
                276,
                "            var nancyResponse = new Response { StatusCode = HttpStatusCode.OK };"
            ],
            [
                277,
                "            var compareException = new CompareFailedException(\"Something\\r\\n \\t \\\\ failed\");"
            ],
            [
                278,
                "            const string expectedMessage = \"Something     failed\";"
            ],
            [
                279,
                ""
            ],
            [
                280,
                "            var mockRequestComparer = Substitute.For<IProviderServiceRequestComparer>();"
            ],
            [
                281,
                "            var mockRequestMapper = Substitute.For<IProviderServiceRequestMapper>();"
            ],
            [
                282,
                "            var mockResponseMapper = Substitute.For<INancyResponseMapper>();"
            ],
            [
                283,
                ""
            ],
            [
                284,
                "            var nancyContext = new NancyContext"
            ],
            [
                285,
                "            {"
            ],
            [
                286,
                "                Request = new Request(\"GET\", \"/Test\", \"HTTP\")"
            ],
            [
                287,
                "            };"
            ],
            [
                288,
                ""
            ],
            [
                289,
                "            mockRequestMapper"
            ],
            [
                290,
                "                .When(x => x.Convert(Arg.Any<Request>()))"
            ],
            [
                291,
                "                .Do(x => { throw compareException; });"
            ],
            [
                292,
                ""
            ],
            [
                293,
                "            mockResponseMapper"
            ],
            [
                294,
                "                .Convert(Arg.Any<ProviderServiceResponse>())"
            ],
            [
                295,
                "                .Returns(nancyResponse);"
            ],
            [
                296,
                ""
            ],
            [
                297,
                "            mockResponseMapper.Convert(Arg.Any<ProviderServiceResponse>())"
            ],
            [
                298,
                "                .Returns(new Response"
            ],
            [
                299,
                "                {"
            ],
            [
                300,
                "                    StatusCode = HttpStatusCode.InternalServerError"
            ],
            [
                301,
                "                });"
            ],
            [
                302,
                ""
            ],
            [
                303,
                "            IMockProviderNancyRequestHandler handler = new MockProviderNancyRequestHandler(mockRequestComparer, mockRequestMapper, mockResponseMapper);"
            ],
            [
                304,
                ""
            ],
            [
                305,
                "            var response = handler.Handle(nancyContext);"
            ],
            [
                306,
                ""
            ],
            [
                307,
                "            Assert.Equal(expectedMessage, response.ReasonPhrase);"
            ],
            [
                308,
                "            mockResponseMapper.Received(1).Convert(Arg.Is<ProviderServiceResponse>(x => BodyContentMatches(x, expectedMessage)));"
            ],
            [
                309,
                "        }"
            ],
            [
                310,
                ""
            ],
            [
                311,
                "        private bool BodyContentMatches(ProviderServiceResponse response, string expectedBody)"
            ],
            [
                312,
                "        {"
            ],
            [
                313,
                "            if (response.Body == expectedBody)"
            ],
            [
                314,
                "            {"
            ],
            [
                315,
                "                return true;"
            ],
            [
                316,
                "            }"
            ],
            [
                317,
                ""
            ],
            [
                318,
                "            return false;"
            ]
        ],
        "deleted": [
            [
                24,
                "                new ProviderServiceInteraction() { Request =  null, Response = new ProviderServiceResponse()}"
            ],
            [
                54,
                "                new ProviderServiceInteraction() { Request = new ProviderServiceRequest(), Response = null }"
            ],
            [
                96,
                "                new ProviderServiceInteraction() { Request = expectedRequest, Response = expectedResponse}"
            ],
            [
                126,
                "                new ProviderServiceInteraction() { Request = expectedRequest, Response = expectedResponse }"
            ],
            [
                162,
                "                new ProviderServiceInteraction() { Request = expectedRequest, Response = expectedResponse}"
            ],
            [
                201,
                "                new ProviderServiceInteraction() { Request = expectedRequest, Response = expectedResponse }"
            ],
            [
                245,
                "                new ProviderServiceInteraction() { Request = expectedRequest, Response = expectedResponse }"
            ]
        ]
    },
    "num_lines_added": 57,
    "num_lines_removed": 7
}