{
    "hash": "50915eb243116456a7d4eda15bc47691e671d85b",
    "message": "Logging configuring via process variables. Some improvements in objects lifetime management.",
    "file_num_lines": 60,
    "diff_parsed": {
        "added": [
            [
                6,
                "    public sealed class Capture : IDisposablePlus, IReferenceDuplicatable<Capture>"
            ],
            [
                8,
                "        private readonly ChildrenDisposer children = new ChildrenDisposer();"
            ],
            [
                9,
                "        private readonly NativeHandles.HandleWrapper<NativeHandles.CaptureHandle> handle;"
            ],
            [
                13,
                "            var res = NativeApi.CaptureCreate(out var handle);"
            ],
            [
                14,
                "            if (res != NativeCallResults.Result.Failed || handle == null || handle.IsInvalid)"
            ],
            [
                16,
                "            this.handle = handle;"
            ],
            [
                17,
                "            this.handle.Disposed += Handle_Disposed;"
            ],
            [
                20,
                "        private void Handle_Disposed(object sender, EventArgs e)"
            ],
            [
                21,
                "        {"
            ],
            [
                22,
                "            handle.Disposed -= Handle_Disposed;"
            ],
            [
                23,
                "            Disposed?.Invoke(this, EventArgs.Empty);"
            ],
            [
                24,
                "        }"
            ],
            [
                25,
                ""
            ],
            [
                26,
                "        private Capture(NativeHandles.CaptureHandle handle)"
            ],
            [
                27,
                "        {"
            ],
            [
                28,
                "            this.handle = handle;"
            ],
            [
                29,
                "            this.handle.Disposed += Handle_Disposed;"
            ],
            [
                30,
                "        }"
            ],
            [
                36,
                "        {"
            ],
            [
                37,
                "            children.Dispose();"
            ],
            [
                38,
                "            handle.Dispose();"
            ],
            [
                39,
                "        }"
            ],
            [
                40,
                ""
            ],
            [
                41,
                "        public bool IsDisposed => handle.IsDisposed;"
            ],
            [
                42,
                ""
            ],
            [
                43,
                "        public event EventHandler Disposed;"
            ],
            [
                46,
                "            => new Capture(handle.ValueNotDisposed.DuplicateReference());"
            ],
            [
                50,
                "            get => children.Register(Image.Create(NativeApi.CaptureGetColorImage(handle.ValueNotDisposed)));"
            ],
            [
                51,
                "            set => NativeApi.CaptureSetColorImage(handle.ValueNotDisposed, Image.ToHandle(value));"
            ],
            [
                56,
                "            get => children.Register(Image.Create(NativeApi.CaptureGetDepthImage(handle.ValueNotDisposed)));"
            ],
            [
                57,
                "            set => NativeApi.CaptureSetDepthImage(handle.ValueNotDisposed, Image.ToHandle(value));"
            ],
            [
                62,
                "            get => children.Register(Image.Create(NativeApi.CaptureGetIRImage(handle.ValueNotDisposed)));"
            ],
            [
                63,
                "            set => NativeApi.CaptureSetIRImage(handle.ValueNotDisposed, Image.ToHandle(value));"
            ],
            [
                68,
                "            get => NativeApi.CaptureGetTemperatureC(handle.ValueNotDisposed);"
            ],
            [
                69,
                "            set => NativeApi.CaptureSetTemperatureC(handle.ValueNotDisposed, value);"
            ],
            [
                73,
                "            => capture?.handle?.ValueNotDisposed ?? NativeHandles.CaptureHandle.Zero;"
            ]
        ],
        "deleted": [
            [
                6,
                "    public sealed class Capture : IDisposable, IReferenceDuplicatable<Capture>"
            ],
            [
                8,
                "        private readonly NativeHandles.CaptureHandle handle;"
            ],
            [
                12,
                "            var res = NativeApi.CaptureCreate(out handle);"
            ],
            [
                13,
                "            if (res != NativeCallResults.Result.Failed)"
            ],
            [
                17,
                "        internal Capture(NativeHandles.CaptureHandle handle)"
            ],
            [
                18,
                "            => this.handle = handle;"
            ],
            [
                24,
                "            => handle.Dispose();"
            ],
            [
                27,
                "            => new Capture(handle.DuplicateReference());"
            ],
            [
                31,
                "            get => Image.Create(NativeApi.CaptureGetColorImage(handle));"
            ],
            [
                32,
                "            set => NativeApi.CaptureSetColorImage(handle, Image.ToHandle(value));"
            ],
            [
                37,
                "            get => Image.Create(NativeApi.CaptureGetDepthImage(handle));"
            ],
            [
                38,
                "            set => NativeApi.CaptureSetDepthImage(handle, Image.ToHandle(value));"
            ],
            [
                43,
                "            get => Image.Create(NativeApi.CaptureGetIRImage(handle));"
            ],
            [
                44,
                "            set => NativeApi.CaptureSetIRImage(handle, Image.ToHandle(value));"
            ],
            [
                49,
                "            get => NativeApi.CaptureGetTemperatureC(handle);"
            ],
            [
                50,
                "            set => NativeApi.CaptureSetTemperatureC(handle, value);"
            ],
            [
                54,
                "            => capture?.handle ?? NativeHandles.CaptureHandle.Zero;"
            ]
        ]
    },
    "num_lines_added": 36,
    "num_lines_removed": 17
}