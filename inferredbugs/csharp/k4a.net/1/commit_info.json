{
    "hash": "50915eb243116456a7d4eda15bc47691e671d85b",
    "message": "Logging configuring via process variables. Some improvements in objects lifetime management.",
    "file_num_lines": 62,
    "diff_parsed": {
        "added": [
            [
                6,
                "    public sealed class Image : IDisposablePlus, IReferenceDuplicatable<Image>"
            ],
            [
                8,
                "        private readonly NativeHandles.HandleWrapper<NativeHandles.ImageHandle> handle;"
            ],
            [
                11,
                "        {"
            ],
            [
                12,
                "            this.handle = handle;"
            ],
            [
                13,
                "            this.handle.Disposed += Handle_Disposed;"
            ],
            [
                14,
                "        }"
            ],
            [
                21,
                "            var res = NativeApi.ImageCreate(format, widthPixels, heightPixels, strideBytes, out var handle);"
            ],
            [
                22,
                "            if (res != NativeCallResults.Result.Succeeded || handle == null || handle.IsInvalid)"
            ],
            [
                24,
                "            this.handle = handle;"
            ],
            [
                25,
                "            this.handle.Disposed += Handle_Disposed;"
            ],
            [
                26,
                "        }"
            ],
            [
                27,
                ""
            ],
            [
                28,
                "        private void Handle_Disposed(object sender, EventArgs e)"
            ],
            [
                29,
                "        {"
            ],
            [
                30,
                "            handle.Disposed -= Handle_Disposed;"
            ],
            [
                31,
                "            Disposed?.Invoke(this, EventArgs.Empty);"
            ],
            [
                37,
                "        public bool IsDisposed => handle.IsDisposed;"
            ],
            [
                38,
                ""
            ],
            [
                39,
                "        public event EventHandler Disposed;"
            ],
            [
                40,
                ""
            ],
            [
                42,
                "            => new Image(handle.ValueNotDisposed.DuplicateReference());"
            ],
            [
                44,
                "        public IntPtr Buffer => NativeApi.ImageGetBuffer(handle.ValueNotDisposed);"
            ],
            [
                46,
                "        public int Size => Helpers.UIntPtrToInt32(NativeApi.ImageGetSize(handle.ValueNotDisposed));"
            ],
            [
                48,
                "        public ImageFormat Format => NativeApi.ImageGetFormat(handle.ValueNotDisposed);"
            ],
            [
                50,
                "        public int WidthPixels => NativeApi.ImageGetWidthPixels(handle.ValueNotDisposed);"
            ],
            [
                52,
                "        public int HeightPixels => NativeApi.ImageGetHeightPixels(handle.ValueNotDisposed);"
            ],
            [
                54,
                "        public int StrideBytes => NativeApi.ImageGetStrideBytes(handle.ValueNotDisposed);"
            ],
            [
                58,
                "            get => NativeApi.ImageGetTimestamp(handle.ValueNotDisposed);"
            ],
            [
                59,
                "            set => NativeApi.ImageSetTimestamp(handle.ValueNotDisposed, value);"
            ],
            [
                64,
                "            get => NativeApi.ImageGetExposureUsec(handle.ValueNotDisposed);"
            ],
            [
                65,
                "            set => NativeApi.ImageSetExposureTimeUsec(handle.ValueNotDisposed, value);"
            ],
            [
                70,
                "            get => checked((int)NativeApi.ImageGetWhiteBalance(handle.ValueNotDisposed));"
            ],
            [
                71,
                "            set => NativeApi.ImageSetWhiteBalance(handle.ValueNotDisposed, checked((uint)value));"
            ],
            [
                76,
                "            get => checked((int)NativeApi.ImageGetIsoSpeed(handle.ValueNotDisposed));"
            ],
            [
                77,
                "            set => NativeApi.ImageSetIsoSpeed(handle.ValueNotDisposed, checked((uint)value));"
            ],
            [
                81,
                "            => image?.handle?.ValueNotDisposed ?? NativeHandles.ImageHandle.Zero;"
            ]
        ],
        "deleted": [
            [
                6,
                "    public sealed class Image : IDisposable, IReferenceDuplicatable<Image>"
            ],
            [
                8,
                "        private readonly NativeHandles.ImageHandle handle;"
            ],
            [
                11,
                "            => this.handle = handle;"
            ],
            [
                18,
                "            var res = NativeApi.ImageCreate(format, widthPixels, heightPixels, strideBytes, out handle);"
            ],
            [
                19,
                "            if (res != NativeCallResults.Result.Succeeded)"
            ],
            [
                27,
                "            => new Image(handle.DuplicateReference());"
            ],
            [
                29,
                "        public IntPtr Buffer => NativeApi.ImageGetBuffer(handle);"
            ],
            [
                31,
                "        public int Size => checked((int)NativeApi.ImageGetSize(handle).ToUInt32());"
            ],
            [
                33,
                "        public ImageFormat Format => NativeApi.ImageGetFormat(handle);"
            ],
            [
                35,
                "        public int WidthPixels => NativeApi.ImageGetWidthPixels(handle);"
            ],
            [
                37,
                "        public int HeightPixels => NativeApi.ImageGetHeightPixels(handle);"
            ],
            [
                39,
                "        public int StrideBytes => NativeApi.ImageGetStrideBytes(handle);"
            ],
            [
                43,
                "            get => NativeApi.ImageGetTimestamp(handle);"
            ],
            [
                44,
                "            set => NativeApi.ImageSetTimestamp(handle, value);"
            ],
            [
                49,
                "            get => NativeApi.ImageGetExposureUsec(handle);"
            ],
            [
                50,
                "            set => NativeApi.ImageSetExposureTimeUsec(handle, value);"
            ],
            [
                55,
                "            get => checked((int)NativeApi.ImageGetWhiteBalance(handle));"
            ],
            [
                56,
                "            set => NativeApi.ImageSetWhiteBalance(handle, checked((uint)value));"
            ],
            [
                61,
                "            get => checked((int)NativeApi.ImageGetIsoSpeed(handle));"
            ],
            [
                62,
                "            set => NativeApi.ImageSetIsoSpeed(handle, checked((uint)value));"
            ],
            [
                66,
                "            => image?.handle ?? NativeHandles.ImageHandle.Zero;"
            ]
        ]
    },
    "num_lines_added": 36,
    "num_lines_removed": 21
}