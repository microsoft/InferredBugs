        static void Main(string[] args)
        {
            //using (StreamReader stream = new StreamReader("Redis.rsf"))
            //{
            //    ip = stream.ReadLine();
            //    port = int.Parse(stream.ReadLine());
            //    //pwd = stream.ReadLine();
            //}
            ip = "127.0.0.1";
            port = 6379;
            var endpoit = new IPEndPoint(IPAddress.Parse(ip), port);

            //NewRedisClient2 client = new NewRedisClient2(endpoit);
            //TestClient2(client);
            NewRedisClient3 client3 = new NewRedisClient3(endpoit);
            //TestClient3(client3);
            NewRedisClient4 client4 = new NewRedisClient4(endpoit);
            //TestClient3(client3);
            //TestClient2(client);
            //new
            //NewRedisClient client = new NewRedisClient(endpoit);
            //var result = client.SelectDB(0).Result;

            //client.Set("test01", "123123").Wait();

            //FreeRedis
            var redisClient = new RedisClient($"{ip}:{port},database=15,min pool size=100");

            //StackExchange
            ConnectionMultiplexer seredis = ConnectionMultiplexer.Connect("127.0.0.1:6379");
            IDatabase sedb = seredis.GetDatabase(1);
            redisClient.FlushDb();
            SendFromFreeRedis(redisClient);
            redisClient.FlushDb();
            SendFromStackExchangeRedis(sedb);
            redisClient.FlushDb();
            SendFromNewSocketRedis3(client3, sedb);
            redisClient.FlushDb();
            SendFromNewSocketRedis4(client4, sedb);
            Console.WriteLine("====== 以上预热 =======");
            //seredis.get
            //SendFromNewSocketRedis2(client, seredis.GetDatabase(0));
            redisClient.FlushDb();
            SendFromFreeRedis(redisClient);
            redisClient.FlushDb();
            SendFromStackExchangeRedis(sedb);
            redisClient.FlushDb();
            SendFromNewSocketRedis3(client3, sedb);
            redisClient.FlushDb();
            SendFromNewSocketRedis4(client4, sedb);
            //redisClient.FlushDb();
            //SendFromFreeRedis(redisClient);
            ////SendFromNewSocketRedis(client, seredis.GetDatabase(0));
            //SendFromStackExchangeRedis(sedb);

            //_sendQueue = new ConcurrentQueue<TaskWithBytes>();
            //_receiverQueue = new ConcurrentQueue<TaskCompletionSource<bool>>();

            ////NewSocketTest(endpoit);
            ////result = client.Set("newRedis", "natasha").Result;
            ////Console.WriteLine(result);
            //Server(endpoit);
            //Test(endpoit);
            //Task.Run(async () =>
            //{
            //    await Task.Delay(5000);
            //    Console.WriteLine();
            //    Console.WriteLine(_sendQueue.Count);
            //    Console.WriteLine(_receiverQueue.Count);

            //});
            Console.ReadKey();

        }