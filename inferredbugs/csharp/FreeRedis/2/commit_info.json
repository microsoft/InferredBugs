{
    "hash": "cf973ce17ae4de8cad2a79508eee59dc773dbece",
    "message": "formatting the test code",
    "file_num_lines": 220,
    "diff_parsed": {
        "added": [
            [
                22,
                ""
            ],
            [
                24,
                "        private static string ip;"
            ],
            [
                26,
                "        private const int frequence = 20000;"
            ],
            [
                27,
                ""
            ],
            [
                28,
                "        private static RedisClient _freeRedisClient;"
            ],
            [
                29,
                "        private static NewRedisClient3 _redisClient3;"
            ],
            [
                30,
                "        private static NewRedisClient4 _redisClient4;"
            ],
            [
                31,
                "        private static IDatabase _stackExnchangeClient;"
            ],
            [
                32,
                ""
            ],
            [
                33,
                "        private static void InitClient()"
            ],
            [
                35,
                "            //Notice : Please use \"//\" comment \"/*\"."
            ],
            [
                36,
                ""
            ],
            [
                37,
                "            ///*"
            ],
            [
                38,
                "            using (StreamReader stream = new StreamReader(\"Redis.rsf\"))"
            ],
            [
                39,
                "            {"
            ],
            [
                40,
                "                ip = stream.ReadLine();"
            ],
            [
                41,
                "                port = int.Parse(stream.ReadLine());"
            ],
            [
                42,
                "                //pwd = stream.ReadLine();"
            ],
            [
                43,
                "            }//*/"
            ],
            [
                44,
                "            /*"
            ],
            [
                47,
                "            //*/"
            ],
            [
                48,
                "            _freeRedisClient = new RedisClient($\"{ip}:{port},database=15,min pool size=100\");"
            ],
            [
                49,
                "            _redisClient3 = new NewRedisClient3(ip, port);"
            ],
            [
                50,
                "            _redisClient4 = new NewRedisClient4(ip, port);"
            ],
            [
                51,
                "            ConnectionMultiplexer seredis = ConnectionMultiplexer.Connect(\"127.0.0.1:6379\");"
            ],
            [
                52,
                "            _stackExnchangeClient = seredis.GetDatabase(1);"
            ],
            [
                54,
                "        }"
            ],
            [
                56,
                ""
            ],
            [
                57,
                "        static void Main(string[] args)"
            ],
            [
                58,
                "        {"
            ],
            [
                60,
                "            InitClient();"
            ],
            [
                61,
                "            FreeRedisSetTest();"
            ],
            [
                62,
                "            StackExchangeRedisSetTest();"
            ],
            [
                63,
                "            NewSocketRedis3SetTest();"
            ],
            [
                64,
                "            NewSocketRedis4SetTest();"
            ],
            [
                65,
                ""
            ],
            [
                68,
                "            FreeRedisSetTest();"
            ],
            [
                69,
                "            StackExchangeRedisSetTest();"
            ],
            [
                70,
                "            NewSocketRedis3SetTest();"
            ],
            [
                71,
                "            NewSocketRedis4SetTest();"
            ],
            [
                73,
                "            Console.ReadKey();"
            ],
            [
                78,
                "        #region TestNewSocket"
            ],
            [
                123,
                "            Output(connection);"
            ],
            [
                128,
                ""
            ],
            [
                192,
                "        #region RedisTest"
            ],
            [
                195,
                "        public static void NewSocketRedis3SetTest()"
            ],
            [
                197,
                "            var tasks = new Task[frequence];"
            ],
            [
                200,
                "            for (var a = 0; a < frequence; a += 1)"
            ],
            [
                205,
                "                    var result = await _redisClient3.SetAsync(key, key);"
            ],
            [
                216,
                "            Console.WriteLine($\"NewRedis3(0-{frequence}): {sw.ElapsedMilliseconds}ms\");"
            ],
            [
                220,
                "        #region NewSocketRedis4 - SET"
            ],
            [
                221,
                "        public static void NewSocketRedis4SetTest()"
            ],
            [
                223,
                "            var tasks = new Task[frequence];"
            ],
            [
                226,
                "            for (var a = 0; a < frequence; a += 1)"
            ],
            [
                231,
                "                    var result = await _redisClient4.SetAsync(key, key);"
            ],
            [
                240,
                "            Console.WriteLine($\"NewRedis4(0-{frequence}): {sw.ElapsedMilliseconds}ms\");"
            ],
            [
                245,
                "        public static void FreeRedisSetTest()"
            ],
            [
                247,
                "            var tasks = new Task[frequence];"
            ],
            [
                250,
                "            for (var a = 0; a < frequence; a += 1)"
            ],
            [
                255,
                "                    await _freeRedisClient.SetAsync(key, key);"
            ],
            [
                260,
                "            Console.WriteLine($\"FreeRedis(0-{frequence}): {sw.ElapsedMilliseconds}ms\");"
            ],
            [
                265,
                "        public static void StackExchangeRedisSetTest()"
            ],
            [
                267,
                "            var tasks = new Task[frequence];"
            ],
            [
                270,
                "            for (var a = 0; a < frequence; a += 1)"
            ],
            [
                275,
                "                    var result = await _stackExnchangeClient.StringSetAsync(key, key);"
            ],
            [
                284,
                "            Console.WriteLine($\"StackExchange(0-{frequence}): {sw.ElapsedMilliseconds}ms\");"
            ],
            [
                286,
                ""
            ],
            [
                290,
                "        #endregion"
            ]
        ],
        "deleted": [
            [
                6,
                "using System.Collections.Concurrent;"
            ],
            [
                7,
                "using System.Collections.Generic;"
            ],
            [
                10,
                "using System.IO.Pipelines;"
            ],
            [
                14,
                "using System.Threading;"
            ],
            [
                26,
                "        private static string ip;"
            ],
            [
                29,
                "        static void Main(string[] args)"
            ],
            [
                31,
                "            //using (StreamReader stream = new StreamReader(\"Redis.rsf\"))"
            ],
            [
                32,
                "            //{"
            ],
            [
                33,
                "            //    ip = stream.ReadLine();"
            ],
            [
                34,
                "            //    port = int.Parse(stream.ReadLine());"
            ],
            [
                35,
                "            //    //pwd = stream.ReadLine();"
            ],
            [
                36,
                "            //}"
            ],
            [
                39,
                "            var endpoit = new IPEndPoint(IPAddress.Parse(ip), port);"
            ],
            [
                40,
                ""
            ],
            [
                41,
                "            //NewRedisClient2 client = new NewRedisClient2(endpoit);"
            ],
            [
                42,
                "            //TestClient2(client);"
            ],
            [
                43,
                "            NewRedisClient3 client3 = new NewRedisClient3(endpoit);"
            ],
            [
                44,
                "            //TestClient3(client3);"
            ],
            [
                45,
                "            NewRedisClient4 client4 = new NewRedisClient4(endpoit);"
            ],
            [
                46,
                "            //TestClient3(client3);"
            ],
            [
                47,
                "            //TestClient2(client);"
            ],
            [
                48,
                "            //new"
            ],
            [
                49,
                "            //NewRedisClient client = new NewRedisClient(endpoit);"
            ],
            [
                50,
                "            //var result = client.SelectDB(0).Result;"
            ],
            [
                52,
                "            //client.Set(\"test01\", \"123123\").Wait();"
            ],
            [
                54,
                "            //FreeRedis"
            ],
            [
                55,
                "            var redisClient = new RedisClient($\"{ip}:{port},database=15,min pool size=100\");"
            ],
            [
                57,
                "            //StackExchange"
            ],
            [
                58,
                "            ConnectionMultiplexer seredis = ConnectionMultiplexer.Connect(\"127.0.0.1:6379\");"
            ],
            [
                59,
                "            IDatabase sedb = seredis.GetDatabase(1);"
            ],
            [
                60,
                "            redisClient.FlushDb();"
            ],
            [
                61,
                "            SendFromFreeRedis(redisClient);"
            ],
            [
                62,
                "            redisClient.FlushDb();"
            ],
            [
                63,
                "            SendFromStackExchangeRedis(sedb);"
            ],
            [
                64,
                "            redisClient.FlushDb();"
            ],
            [
                65,
                "            SendFromNewSocketRedis3(client3, sedb);"
            ],
            [
                66,
                "            redisClient.FlushDb();"
            ],
            [
                67,
                "            SendFromNewSocketRedis4(client4, sedb);"
            ],
            [
                69,
                "            //seredis.get"
            ],
            [
                70,
                "            //SendFromNewSocketRedis2(client, seredis.GetDatabase(0));"
            ],
            [
                71,
                "            redisClient.FlushDb();"
            ],
            [
                72,
                "            SendFromFreeRedis(redisClient);"
            ],
            [
                73,
                "            redisClient.FlushDb();"
            ],
            [
                74,
                "            SendFromStackExchangeRedis(sedb);"
            ],
            [
                75,
                "            redisClient.FlushDb();"
            ],
            [
                76,
                "            SendFromNewSocketRedis3(client3, sedb);"
            ],
            [
                77,
                "            redisClient.FlushDb();"
            ],
            [
                78,
                "            SendFromNewSocketRedis4(client4, sedb);"
            ],
            [
                79,
                "            //redisClient.FlushDb();"
            ],
            [
                80,
                "            //SendFromFreeRedis(redisClient);"
            ],
            [
                81,
                "            ////SendFromNewSocketRedis(client, seredis.GetDatabase(0));"
            ],
            [
                82,
                "            //SendFromStackExchangeRedis(sedb);"
            ],
            [
                83,
                ""
            ],
            [
                84,
                "            //_sendQueue = new ConcurrentQueue<TaskWithBytes>();"
            ],
            [
                85,
                "            //_receiverQueue = new ConcurrentQueue<TaskCompletionSource<bool>>();"
            ],
            [
                86,
                ""
            ],
            [
                87,
                "            ////NewSocketTest(endpoit);"
            ],
            [
                88,
                "            ////result = client.Set(\"newRedis\", \"natasha\").Result;"
            ],
            [
                89,
                "            ////Console.WriteLine(result);"
            ],
            [
                90,
                "            //Server(endpoit);"
            ],
            [
                91,
                "            //Test(endpoit);"
            ],
            [
                92,
                "            //Task.Run(async () =>"
            ],
            [
                93,
                "            //{"
            ],
            [
                94,
                "            //    await Task.Delay(5000);"
            ],
            [
                95,
                "            //    Console.WriteLine();"
            ],
            [
                96,
                "            //    Console.WriteLine(_sendQueue.Count);"
            ],
            [
                97,
                "            //    Console.WriteLine(_receiverQueue.Count);"
            ],
            [
                98,
                ""
            ],
            [
                99,
                "            //});"
            ],
            [
                100,
                "            Console.ReadKey();"
            ],
            [
                102,
                "        }"
            ],
            [
                103,
                "        public static async void TestClient2(NewRedisClient2 client)"
            ],
            [
                104,
                "        {"
            ],
            [
                106,
                "            var result = await client.SetAsync(\"1\",\"1\");"
            ],
            [
                107,
                "            Console.WriteLine(result);"
            ],
            [
                110,
                "        public static async void TestClient3(NewRedisClient3 client)"
            ],
            [
                111,
                "        {"
            ],
            [
                113,
                "            var result = await client.SetAsync(\"1\", \"1\");"
            ],
            [
                114,
                "            Console.WriteLine(result);"
            ],
            [
                116,
                "        }"
            ],
            [
                161,
                "            Output(connection.Transport.Output);"
            ],
            [
                162,
                "            ParallelOutput2();"
            ],
            [
                163,
                ""
            ],
            [
                164,
                ""
            ],
            [
                165,
                "        }"
            ],
            [
                166,
                ""
            ],
            [
                167,
                "        private static ConcurrentQueue<TaskWithBytes> _sendQueue;"
            ],
            [
                168,
                "        private static ConcurrentQueue<TaskCompletionSource<bool>> _receiverQueue;"
            ],
            [
                169,
                ""
            ],
            [
                170,
                "        public static bool IsRunning;"
            ],
            [
                171,
                ""
            ],
            [
                172,
                "        public static async Task SendAsync(string value)"
            ],
            [
                173,
                "        {"
            ],
            [
                174,
                "            var bytes = Encoding.UTF8.GetBytes(value);"
            ],
            [
                175,
                "            var taskSource = new TaskCompletionSource<bool>();"
            ],
            [
                176,
                "            _sendQueue.Enqueue(new TaskWithBytes(bytes, taskSource));"
            ],
            [
                177,
                "            if (!sendTask.Task.IsCompleted)"
            ],
            [
                178,
                "            {"
            ],
            [
                179,
                "                lock (sendTask)"
            ],
            [
                180,
                "                {"
            ],
            [
                181,
                ""
            ],
            [
                182,
                "                    if (!sendTask.Task.IsCompleted)"
            ],
            [
                183,
                "                    {"
            ],
            [
                184,
                "                        sendTask.SetResult(true);"
            ],
            [
                185,
                "                    }"
            ],
            [
                186,
                ""
            ],
            [
                187,
                "                }"
            ],
            [
                188,
                "            }"
            ],
            [
                189,
                "            await taskSource.Task.ConfigureAwait(false);"
            ],
            [
                190,
                ""
            ],
            [
                191,
                "        }"
            ],
            [
                192,
                "        private static TaskCompletionSource<bool> sendTask;"
            ],
            [
                193,
                "        public static async void Output(PipeWriter sender)"
            ],
            [
                194,
                "        {"
            ],
            [
                195,
                "            TaskWithBytes task;"
            ],
            [
                196,
                "            while (true)"
            ],
            [
                197,
                "            {"
            ],
            [
                198,
                ""
            ],
            [
                199,
                "                if (_sendQueue.IsEmpty)"
            ],
            [
                200,
                "                {"
            ],
            [
                201,
                ""
            ],
            [
                202,
                "                    sendTask = new TaskCompletionSource<bool>();"
            ],
            [
                203,
                "                    await sendTask.Task.ConfigureAwait(false);"
            ],
            [
                204,
                ""
            ],
            [
                205,
                "                }"
            ],
            [
                206,
                ""
            ],
            [
                207,
                "                while (!_sendQueue.IsEmpty)"
            ],
            [
                208,
                "                {"
            ],
            [
                209,
                "                    while (!_sendQueue.TryDequeue(out task)) { };"
            ],
            [
                210,
                "                    await sender.WriteAsync(task.Bytes).ConfigureAwait(false);"
            ],
            [
                211,
                "                    _receiverQueue.Enqueue(task.Task);"
            ],
            [
                212,
                "                    task.Task.SetResult(true);"
            ],
            [
                213,
                "                    //if (_receiverQueue.Count == 10000)"
            ],
            [
                214,
                "                    //{"
            ],
            [
                215,
                "                    //    Debug.WriteLine(_receiverQueue.Count);"
            ],
            [
                216,
                "                    //}"
            ],
            [
                217,
                ""
            ],
            [
                218,
                "                    //Debug.WriteLine(_receiverQueue.Count);"
            ],
            [
                219,
                "                }"
            ],
            [
                220,
                ""
            ],
            [
                221,
                ""
            ],
            [
                222,
                "            }"
            ],
            [
                223,
                ""
            ],
            [
                224,
                "        }"
            ],
            [
                225,
                "        public static async void ParallelOutput2()"
            ],
            [
                226,
                "        {"
            ],
            [
                227,
                "            //object obj = new object();"
            ],
            [
                228,
                "            //var bytes = Encoding.UTF8.GetBytes(\"te1111st\");"
            ],
            [
                229,
                ""
            ],
            [
                230,
                "            var result = Parallel.For(0, 10000, async (state) =>"
            ],
            [
                231,
                "            {"
            ],
            [
                232,
                ""
            ],
            [
                233,
                "                if (state == 9999)"
            ],
            [
                234,
                "                {"
            ],
            [
                235,
                "                    await SendAsync(\"------------$$$$-----------\" + state.ToString()).ConfigureAwait(false);"
            ],
            [
                236,
                "                }"
            ],
            [
                237,
                "                else"
            ],
            [
                238,
                "                {"
            ],
            [
                239,
                "                    await SendAsync(state.ToString()).ConfigureAwait(false);"
            ],
            [
                240,
                "                }"
            ],
            [
                241,
                ""
            ],
            [
                242,
                "                //await sender.FlushAsync(CancellationToken.None).ConfigureAwait(false);"
            ],
            [
                243,
                "                //await sender.WriteAsync(bytes);"
            ],
            [
                244,
                "            });"
            ],
            [
                248,
                "        public static int flag = 0;"
            ],
            [
                249,
                "        public static async void ParallelOutput(PipeWriter sender)"
            ],
            [
                250,
                "        {"
            ],
            [
                251,
                "            object obj = new object();"
            ],
            [
                252,
                "            var bytes = Encoding.UTF8.GetBytes(\"te1111st\");"
            ],
            [
                253,
                ""
            ],
            [
                254,
                "            Parallel.For(0, 10000, async (state) =>"
            ],
            [
                255,
                "            {"
            ],
            [
                256,
                ""
            ],
            [
                257,
                "                while (flag == 1)"
            ],
            [
                258,
                "                {"
            ],
            [
                259,
                "                    await Task.Delay(100).ConfigureAwait(false);"
            ],
            [
                260,
                "                }"
            ],
            [
                261,
                "                Interlocked.Exchange(ref flag, 1);"
            ],
            [
                262,
                "                if (state == 9999)"
            ],
            [
                263,
                "                {"
            ],
            [
                264,
                "                    await sender.WriteAsync(Encoding.UTF8.GetBytes(\"------------$$$$-----------\" + state.ToString())).ConfigureAwait(false);"
            ],
            [
                265,
                "                }"
            ],
            [
                266,
                "                else"
            ],
            [
                267,
                "                {"
            ],
            [
                268,
                "                    await sender.WriteAsync(Encoding.UTF8.GetBytes(state.ToString())).ConfigureAwait(false);"
            ],
            [
                269,
                "                }"
            ],
            [
                270,
                ""
            ],
            [
                271,
                "                Interlocked.Exchange(ref flag, 0);"
            ],
            [
                273,
                "                //await sender.FlushAsync(CancellationToken.None).ConfigureAwait(false);"
            ],
            [
                274,
                "                //await sender.WriteAsync(bytes);"
            ],
            [
                275,
                "            });"
            ],
            [
                276,
                ""
            ],
            [
                277,
                ""
            ],
            [
                278,
                ""
            ],
            [
                279,
                "        }"
            ],
            [
                293,
                "                    //connection.Transport.Output.Advance(result.);"
            ],
            [
                294,
                "                    //Console.WriteLine(\"\u53d1\u9001\u6570\u636e\uff01\");"
            ],
            [
                295,
                "                    //connection.Transport.Output.Complete();"
            ],
            [
                341,
                ""
            ],
            [
                342,
                ""
            ],
            [
                343,
                "                //await result.Buffer."
            ],
            [
                344,
                "                //connection.Transport.Input.Complete();"
            ],
            [
                345,
                ""
            ],
            [
                349,
                ""
            ],
            [
                350,
                "        private static readonly Stopwatch sw = new Stopwatch();"
            ],
            [
                351,
                "        private const int frequence = 20000;"
            ],
            [
                352,
                "        private static int count = 0;"
            ],
            [
                353,
                ""
            ],
            [
                354,
                "        #region newSocket"
            ],
            [
                355,
                ""
            ],
            [
                356,
                "        public static async void NewSocketTest(IPEndPoint endpoit)"
            ],
            [
                357,
                "        {"
            ],
            [
                358,
                "            //ResultDict = new ConcurrentDictionary<string, string>();"
            ],
            [
                359,
                "            SocketConnectionFactory client = new SocketConnectionFactory(new SocketTransportOptions());"
            ],
            [
                360,
                "            var connection = client.ConnectAsync(endpoit).Result;"
            ],
            [
                361,
                "            connection.Transport.Output.WriteAsync(Encoding.UTF8.GetBytes($\"AUTH {pwd}\\r\\n\"));"
            ],
            [
                362,
                "            var result = connection.Transport.Output.WriteAsync(Encoding.UTF8.GetBytes(\"SELECT 15\\r\\n\")).Result;"
            ],
            [
                363,
                "            Thread.Sleep(3000);"
            ],
            [
                364,
                "            var readResult = connection.Transport.Input.ReadAsync().Result;"
            ],
            [
                365,
                "            var data = Encoding.UTF8.GetString(readResult.Buffer.FirstSpan);"
            ],
            [
                366,
                "            Console.WriteLine(data);"
            ],
            [
                367,
                "            connection.Transport.Input.AdvanceTo(readResult.Buffer.End);"
            ],
            [
                368,
                "            SendPing(connection);"
            ],
            [
                369,
                "            GetPong(connection);"
            ],
            [
                370,
                "            while (count != frequence)"
            ],
            [
                371,
                "            {"
            ],
            [
                372,
                "                Thread.Sleep(1000);"
            ],
            [
                373,
                "            }"
            ],
            [
                374,
                "            SendPing(connection);"
            ],
            [
                375,
                "            while (count != frequence)"
            ],
            [
                376,
                "            {"
            ],
            [
                377,
                "                Thread.Sleep(1000);"
            ],
            [
                378,
                "            }"
            ],
            [
                379,
                "            SendPing(connection);"
            ],
            [
                380,
                "        }"
            ],
            [
                381,
                "        public static async void SendPing(ConnectionContext connection)"
            ],
            [
                382,
                "        {"
            ],
            [
                383,
                "            count = 0;"
            ],
            [
                384,
                "            sw.Restart();"
            ],
            [
                385,
                "            int index = 0;"
            ],
            [
                386,
                "            while (index < frequence)"
            ],
            [
                387,
                "            {"
            ],
            [
                388,
                "                await connection.Transport.Output.WriteAsync(Encoding.UTF8.GetBytes(\"PING\\r\\n\"));"
            ],
            [
                389,
                "                index += 1;"
            ],
            [
                390,
                "            }"
            ],
            [
                391,
                "        }"
            ],
            [
                392,
                "        public static async void GetPong(ConnectionContext connection)"
            ],
            [
                393,
                "        {"
            ],
            [
                394,
                "            while (true)"
            ],
            [
                395,
                "            {"
            ],
            [
                396,
                ""
            ],
            [
                397,
                "                var result = await connection.Transport.Input.ReadAsync();"
            ],
            [
                398,
                "                AddCount(result.Buffer.ToArray());"
            ],
            [
                399,
                "                //connection.Transport.Input.AsStream().Flush();"
            ],
            [
                400,
                "                connection.Transport.Input.AdvanceTo(result.Buffer.End);"
            ],
            [
                401,
                ""
            ],
            [
                402,
                "            }"
            ],
            [
                403,
                ""
            ],
            [
                404,
                "        }"
            ],
            [
                405,
                "        public static async void AddCount(byte[] buffer)"
            ],
            [
                406,
                "        {"
            ],
            [
                407,
                "            var data = Encoding.UTF8.GetString(buffer);"
            ],
            [
                408,
                "            Interlocked.Add(ref count, data.Split('+').Length - 1);"
            ],
            [
                409,
                "            if (count == frequence)"
            ],
            [
                410,
                "            {"
            ],
            [
                411,
                "                sw.Stop();"
            ],
            [
                412,
                "                Console.WriteLine(\"NewSocketRedis:\" + sw.ElapsedMilliseconds + \"ms\");"
            ],
            [
                413,
                "            }"
            ],
            [
                414,
                "        }"
            ],
            [
                415,
                ""
            ],
            [
                416,
                "        private ConcurrentDictionary<string, string> ResultDict;"
            ],
            [
                417,
                ""
            ],
            [
                420,
                ""
            ],
            [
                421,
                "        #region CSRedis"
            ],
            [
                422,
                "        public static async void FreeRedisTest()"
            ],
            [
                423,
                "        {"
            ],
            [
                424,
                ""
            ],
            [
                425,
                "            var client = new RedisClient($\"{ip}:{port},password={pwd},database=15,asyncPipeline=true\");"
            ],
            [
                426,
                "            SendPing(client);"
            ],
            [
                427,
                "            while (count != frequence)"
            ],
            [
                428,
                "            {"
            ],
            [
                429,
                "                Thread.Sleep(1000);"
            ],
            [
                430,
                "            }"
            ],
            [
                431,
                "            SendPing(client);"
            ],
            [
                432,
                "            while (count != frequence)"
            ],
            [
                433,
                "            {"
            ],
            [
                434,
                "                Thread.Sleep(1000);"
            ],
            [
                435,
                "            }"
            ],
            [
                436,
                "            SendPing(client);"
            ],
            [
                437,
                "        }"
            ],
            [
                438,
                "        public static async void SendPing(RedisClient client)"
            ],
            [
                439,
                "        {"
            ],
            [
                440,
                "            count = 0;"
            ],
            [
                441,
                "            sw.Restart();"
            ],
            [
                442,
                "            Parallel.For(0, frequence, (state) =>"
            ],
            [
                443,
                "            {"
            ],
            [
                444,
                "                var data = client.Ping();"
            ],
            [
                445,
                "                //Console.WriteLine(data);"
            ],
            [
                446,
                "                Interlocked.Add(ref count, data.Split('N').Length - 1);"
            ],
            [
                447,
                "                if (count == frequence)"
            ],
            [
                448,
                "                {"
            ],
            [
                449,
                "                    sw.Stop();"
            ],
            [
                450,
                "                    Console.WriteLine(\"FreeRedis:\" + sw.ElapsedMilliseconds + \"ms\");"
            ],
            [
                451,
                "                }"
            ],
            [
                452,
                "            });"
            ],
            [
                453,
                ""
            ],
            [
                454,
                "        }"
            ],
            [
                455,
                "        #endregion"
            ],
            [
                456,
                ""
            ],
            [
                457,
                "        #region NewSocketRedis - SET"
            ],
            [
                458,
                "        public static void SendFromNewSocketRedis(NewRedisClient client, IDatabase sedb)"
            ],
            [
                459,
                "        {"
            ],
            [
                460,
                "            var tasks = new Task[10000];"
            ],
            [
                461,
                "            Stopwatch sw = new Stopwatch();"
            ],
            [
                462,
                "            sw.Start();"
            ],
            [
                463,
                "            for (var a = 0; a < 10000; a += 1)"
            ],
            [
                464,
                "            {"
            ],
            [
                465,
                "                tasks[a] = Task.Run(async () =>"
            ],
            [
                466,
                "                {"
            ],
            [
                467,
                "                    var tmp = Guid.NewGuid().ToString();"
            ],
            [
                468,
                "                    await client.Set(tmp, \"Natasha\\r\\nNatasha\");"
            ],
            [
                469,
                "                    var val = await sedb.StringGetAsync(tmp); //valid"
            ],
            [
                470,
                "                    if (val != \"Natasha\\r\\nNatasha\") throw new Exception(\"not equal\");"
            ],
            [
                471,
                "                });"
            ],
            [
                472,
                "            }"
            ],
            [
                473,
                "            Task.WaitAll(tasks);"
            ],
            [
                474,
                "            sw.Stop();"
            ],
            [
                475,
                "            Console.WriteLine(\"NewRedisClient(0-10000): \" + sw.ElapsedMilliseconds + \"ms\");"
            ],
            [
                476,
                "        }"
            ],
            [
                477,
                "        #endregion"
            ],
            [
                478,
                ""
            ],
            [
                479,
                "        #region NewSocketRedis2 - SET"
            ],
            [
                480,
                "        public static void SendFromNewSocketRedis2(NewRedisClient2 client, IDatabase sedb)"
            ],
            [
                481,
                "        {"
            ],
            [
                482,
                "            var tasks = new Task[10000];"
            ],
            [
                483,
                "            Stopwatch sw = new Stopwatch();"
            ],
            [
                484,
                "            sw.Start();"
            ],
            [
                485,
                "            for (var a = 0; a < 10000; a += 1)"
            ],
            [
                486,
                "            {"
            ],
            [
                487,
                "                tasks[a] = Task.Run(async () =>"
            ],
            [
                488,
                "                {"
            ],
            [
                489,
                "                    var key = a.ToString();"
            ],
            [
                490,
                "                    await client.SetAsync(key, key);"
            ],
            [
                491,
                "                    var val = await sedb.StringGetAsync(key); //valid"
            ],
            [
                492,
                "                    if (val != key) throw new Exception(\"not equal\");"
            ],
            [
                493,
                "                });"
            ],
            [
                494,
                "            }"
            ],
            [
                495,
                "            Task.WaitAll(tasks);"
            ],
            [
                496,
                "            sw.Stop();"
            ],
            [
                497,
                "            Console.WriteLine(\"NewRedisClient2(0-10000): \" + sw.ElapsedMilliseconds + \"ms\");"
            ],
            [
                498,
                "        }"
            ],
            [
                499,
                "        #endregion"
            ],
            [
                502,
                "        public static void SendFromNewSocketRedis3(NewRedisClient3 client, IDatabase sedb)"
            ],
            [
                504,
                "            var tasks = new Task[100000];"
            ],
            [
                507,
                "            for (var a = 0; a < 100000; a += 1)"
            ],
            [
                512,
                "                    var result = await client.SetAsync(key, key);"
            ],
            [
                523,
                "            Console.WriteLine(\"NewRedisClient3(0-100000): \" + sw.ElapsedMilliseconds + \"ms\");"
            ],
            [
                524,
                "            //client.Dispose();"
            ],
            [
                528,
                "        #region NewSocketRedis3 - SET"
            ],
            [
                529,
                "        public static void SendFromNewSocketRedis4(NewRedisClient4 client, IDatabase sedb)"
            ],
            [
                531,
                "            var tasks = new Task[100000];"
            ],
            [
                534,
                "            for (var a = 0; a < 100000; a += 1)"
            ],
            [
                539,
                "                    var result = await client.SetAsync(key, key);"
            ],
            [
                544,
                "                    //var val = await sedb.StringGetAsync(key); //valid"
            ],
            [
                545,
                "                    //if (val != key) throw new Exception(\"not equal\");"
            ],
            [
                550,
                "            Console.WriteLine(\"NewRedisClient4(0-100000): \" + sw.ElapsedMilliseconds + \"ms\");"
            ],
            [
                551,
                "            //client.Dispose();"
            ],
            [
                556,
                "        public static void SendFromFreeRedis(RedisClient client)"
            ],
            [
                558,
                "            var tasks = new Task[100000];"
            ],
            [
                561,
                "            for (var a = 0; a < 100000; a += 1)"
            ],
            [
                566,
                "                    await client.SetAsync(key, key);"
            ],
            [
                567,
                "                    //var val = await client.GetAsync(key); //valid"
            ],
            [
                568,
                "                    //if (val != key) throw new Exception(\"not equal\");"
            ],
            [
                573,
                "            Console.WriteLine(\"FreeRedisClient(0-100000): \" + sw.ElapsedMilliseconds + \"ms\");"
            ],
            [
                578,
                "        public static void SendFromStackExchangeRedis(IDatabase sedb)"
            ],
            [
                580,
                "            var tasks = new Task[100000];"
            ],
            [
                583,
                "            for (var a = 0; a < 100000; a += 1)"
            ],
            [
                588,
                "                    var result = await sedb.StringSetAsync(key, key);"
            ],
            [
                593,
                "                    //var val = await sedb.StringGetAsync(key); //valid"
            ],
            [
                594,
                "                    //if (val != key) throw new Exception(\"not equal\");"
            ],
            [
                599,
                "            Console.WriteLine(\"StackExchangeAsync(0-100000): \" + sw.ElapsedMilliseconds + \"ms\");"
            ],
            [
                601,
                ""
            ],
            [
                606,
                "    }"
            ],
            [
                608,
                "    public class TaskWithBytes"
            ],
            [
                609,
                "    {"
            ],
            [
                610,
                "        public readonly byte[] Bytes;"
            ],
            [
                611,
                "        public readonly TaskCompletionSource<bool> Task;"
            ],
            [
                612,
                "        public TaskWithBytes(byte[] bytes, TaskCompletionSource<bool> task)"
            ],
            [
                613,
                "        {"
            ],
            [
                614,
                "            Bytes = bytes;"
            ],
            [
                615,
                "            Task = task;"
            ],
            [
                616,
                "        }"
            ]
        ]
    },
    "num_lines_added": 68,
    "num_lines_removed": 392
}