{
    "hash": "be391adf22ffef042aeef822b5d0a185c6f71780",
    "message": "Added documentation",
    "file_num_lines": 21,
    "diff_parsed": {
        "added": [],
        "deleted": [
            [
                10,
                "\t    static void Encrypt(byte[] a, byte[] b)"
            ],
            [
                11,
                "\t    {"
            ],
            [
                12,
                "\t\t    byte c = 64;"
            ],
            [
                13,
                "\t\t    for (int i = 0; i < 16; i++)"
            ],
            [
                14,
                "\t\t    {"
            ],
            [
                15,
                "\t\t\t    a[i] = (byte)(a[i] ^ (byte)(c ^ b[i]));"
            ],
            [
                16,
                "\t\t\t    c = a[i];"
            ],
            [
                17,
                "\t\t    }"
            ],
            [
                18,
                "\t    }"
            ],
            [
                19,
                ""
            ],
            [
                20,
                "\t    static void PrintBytes(byte[] array)"
            ],
            [
                21,
                "\t    {"
            ],
            [
                22,
                "\t\t    foreach(var b in array)"
            ],
            [
                23,
                "\t\t\t\tConsole.Write(b + \" \");"
            ],
            [
                24,
                "\t\t\tConsole.Write(\"\\n\");"
            ],
            [
                25,
                "\t    }"
            ],
            [
                26,
                ""
            ],
            [
                27,
                "\t    private static readonly byte[] sourceId = { 0x58, 0xAB, 0xA9, 0xF0, 0x6C, 0xA2, 0xD8, 0x3F, 0x4D, 0x47, 0x49, 0xA3, 0xB4, 0xB2, 0xE7, 0x3D };"
            ],
            [
                28,
                "\t    private static readonly byte[] key =      { 0xE2, 0x4F, 0x7B, 0x5F, 0xCD, 0xE4, 0xC8, 0x6D, 0xDB, 0xD8, 0xFB, 0xD7, 0x40, 0x58, 0xC6, 0x78 };"
            ],
            [
                29,
                ""
            ],
            [
                41,
                ""
            ],
            [
                42,
                "\t        /*var timestamp = node[\"FBXHeaderExtension\"][\"CreationTimeStamp\"];"
            ],
            [
                43,
                ""
            ],
            [
                44,
                "\t        var year = (int)timestamp[\"Year\"].Properties[0];"
            ],
            [
                45,
                "\t\t\tvar month = (int)timestamp[\"Month\"].Properties[0];"
            ],
            [
                46,
                "\t\t\tvar day = (int)timestamp[\"Day\"].Properties[0];"
            ],
            [
                47,
                "\t\t\tvar hour = (int)timestamp[\"Hour\"].Properties[0];"
            ],
            [
                48,
                "\t\t\tvar minute = (int)timestamp[\"Minute\"].Properties[0];"
            ],
            [
                49,
                "\t\t\tvar second = (int)timestamp[\"Second\"].Properties[0];"
            ],
            [
                50,
                "\t\t\tvar millisecond = (int)timestamp[\"Millisecond\"].Properties[0];"
            ],
            [
                51,
                ""
            ],
            [
                52,
                "\t        var mangledtime = $\"{second:00}{month:00}{hour:00}{day:00}{(millisecond/10):00}{year:0000}{minute:00}\";"
            ],
            [
                53,
                ""
            ],
            [
                54,
                "\t\t\tConsole.WriteLine(mangledtime);"
            ],
            [
                55,
                ""
            ],
            [
                56,
                "\t        var mangledBytes = Encoding.ASCII.GetBytes(mangledtime);"
            ],
            [
                57,
                ""
            ],
            [
                58,
                "\t\t\tif(mangledBytes.Length != 16)"
            ],
            [
                59,
                "\t\t\t\tthrow new Exception();"
            ],
            [
                60,
                ""
            ],
            [
                61,
                "\t        var str = (byte[])sourceId.Clone();"
            ],
            [
                62,
                "\t\t\tEncrypt(str, mangledBytes);"
            ],
            [
                63,
                "\t\t\tEncrypt(str, key);"
            ],
            [
                64,
                "\t\t\tEncrypt(str, mangledBytes);"
            ],
            [
                65,
                ""
            ],
            [
                66,
                "\t\t\tPrintBytes(footer);"
            ],
            [
                67,
                "\t\t\tPrintBytes(str);*/"
            ],
            [
                68,
                ""
            ],
            [
                69,
                ""
            ],
            [
                70,
                "\t\t\t//Console.ReadLine();"
            ]
        ]
    },
    "num_lines_added": 0,
    "num_lines_removed": 50
}