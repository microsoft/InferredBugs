  void WriteArray(Array array, Type elementType, PropertyWriter writer)
		{
			stream.Write(array.Length);
			
			var size = array.Length*Marshal.SizeOf(elementType);
			bool compress = size >= CompressionThreshold;
			stream.Write(compress ? 1 : 0);

			var sw = stream;
			DeflateWithChecksum codec = null;

			var compressLengthPos = stream.BaseStream.Position;
			stream.Write(0); // Placeholder compressed length
			var dataStart = stream.BaseStream.Position;
			if (compress)
			{
				stream.Write(new byte[] { 0x58, 0x85 }, 0, 2); // Header bytes for DeflateStream settings
				codec = new DeflateWithChecksum(stream.BaseStream, CompressionMode.Compress, true);
				sw = new BinaryWriter(codec);
			}
			foreach (var obj in array)
				writer(sw, obj);
			if (compress)
			{
				codec.Close(); // This is important - otherwise bytes can be incorrect
				var checksum = codec.Checksum;
				byte[] bytes =
				{
					(byte)((checksum >> 24) & 0xFF),
					(byte)((checksum >> 16) & 0xFF),
					(byte)((checksum >> 8) & 0xFF),
					(byte)(checksum & 0xFF),
				};
				stream.Write(bytes);
			}
			
			// Now we can write the compressed data length, since we know the size
			if (compress)
			{
				var dataEnd = stream.BaseStream.Position;
				stream.BaseStream.Position = compressLengthPos;
				stream.Write((int)(dataEnd - dataStart));
				stream.BaseStream.Position = dataEnd;
			}
		}