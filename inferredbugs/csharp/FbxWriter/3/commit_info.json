{
    "hash": "01f87255429c704857a3713e22d4337fa120db00",
    "message": "Added better text writing and exceptions",
    "file_num_lines": 196,
    "diff_parsed": {
        "added": [
            [
                19,
                "\t\treadonly Stack<string> nodePath = new Stack<string>();"
            ],
            [
                20,
                ""
            ],
            [
                37,
                "\t\t\tthis.stream = new BinaryWriter(memory, Encoding.ASCII);"
            ],
            [
                57,
                "\t\t\t\t{ typeof(int),\tnew WriterInfo('I', (sw, obj) => sw.Write((int)obj)) },"
            ],
            [
                66,
                "\t\t\t\t{ typeof(int[]),\tnew WriterInfo('i', null) },"
            ],
            [
                98,
                "\t\t\tvar bytes = Encoding.ASCII.GetBytes(str);"
            ],
            [
                108,
                "\t\t\tbool compress = size >= CompressionThreshold;"
            ],
            [
                149,
                "\t\tvoid WriteProperty(object obj, int id)"
            ],
            [
                155,
                "\t\t\t\tthrow new FbxException(nodePath, id,"
            ],
            [
                156,
                "\t\t\t\t\t\"Invalid property type \" + obj.GetType());"
            ],
            [
                162,
                "\t\t\t\tWriteArray((Array) obj, elementType, writePropertyActions[elementType].writer);"
            ],
            [
                178,
                "\t\t\t\tnodePath.Push(node.Name ?? \"\");"
            ],
            [
                182,
                "\t\t\t\t\t\t\"Node name is too long\");"
            ],
            [
                196,
                "\t\t\t\tfor(int i = 0; i < node.Properties.Count; i++)"
            ],
            [
                198,
                "\t\t\t\t\tWriteProperty(node.Properties[i], i);"
            ],
            [
                222,
                ""
            ],
            [
                223,
                "\t\t\t\tnodePath.Pop();"
            ],
            [
                237,
                "\t\t\tnodePath.Clear();"
            ],
            [
                241,
                "\t\t\tstream.Write(GenerateFooterCode(document));"
            ]
        ],
        "deleted": [
            [
                35,
                "            this.stream = new BinaryWriter(memory, Encoding.ASCII);"
            ],
            [
                55,
                "\t\t\t\t{ typeof(int),    new WriterInfo('I', (sw, obj) => sw.Write((int)obj)) },"
            ],
            [
                64,
                "\t\t\t\t{ typeof(int[]),    new WriterInfo('i', null) },"
            ],
            [
                96,
                "            var bytes = Encoding.ASCII.GetBytes(str);"
            ],
            [
                106,
                "            bool compress = size >= CompressionThreshold;"
            ],
            [
                147,
                "\t\tvoid WriteProperty(object obj)"
            ],
            [
                153,
                "\t\t\t\tthrow new ArgumentException(\"Invalid property type \" + obj.GetType());"
            ],
            [
                159,
                "                WriteArray((Array) obj, elementType, writePropertyActions[elementType].writer);"
            ],
            [
                178,
                "\t\t\t\t\t\t\"Node name '\" + node.Name + \"' is too long\");"
            ],
            [
                192,
                "\t\t\t\tforeach (var p in node.Properties)"
            ],
            [
                194,
                "\t\t\t\t\tWriteProperty(p);"
            ],
            [
                234,
                "\t\t\tstream.Write(GenerateFooterCode(document, stream.BaseStream.Position));"
            ]
        ]
    },
    "num_lines_added": 19,
    "num_lines_removed": 12
}