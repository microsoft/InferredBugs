{
    "hash": "7e16534a7b12f951f1c18b905c57ac693a75f435",
    "message": "groom code",
    "file_num_lines": 258,
    "diff_parsed": {
        "added": [
            [
                4,
                "using System.IO;"
            ],
            [
                9,
                "using System.Threading;"
            ],
            [
                92,
                "            int origin = Interlocked.CompareExchange(ref _state, _listening, _none);"
            ],
            [
                93,
                "            if (origin == _disposed)"
            ],
            [
                94,
                "            {"
            ],
            [
                95,
                "                throw new ObjectDisposedException(GetType().FullName);"
            ],
            [
                96,
                "            }"
            ],
            [
                97,
                "            else if (origin != _none)"
            ],
            [
                98,
                "            {"
            ],
            [
                99,
                "                throw new InvalidOperationException(\"This tcp server has already started.\");"
            ],
            [
                100,
                "            }"
            ],
            [
                102,
                "            try"
            ],
            [
                103,
                "            {"
            ],
            [
                104,
                "                _listener = new Socket(this.ListenedEndPoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);"
            ],
            [
                105,
                "                _listener.Bind(this.ListenedEndPoint);"
            ],
            [
                107,
                "                ConfigureListener();"
            ],
            [
                109,
                "                _listener.Listen(_configuration.PendingConnectionBacklog);"
            ],
            [
                110,
                ""
            ],
            [
                111,
                "                StartAccept();"
            ],
            [
                112,
                "            }"
            ],
            [
                113,
                "            catch (Exception ex) when (!ShouldThrow(ex)) { }"
            ],
            [
                118,
                "            if (Interlocked.Exchange(ref _state, _disposed) == _disposed)"
            ],
            [
                119,
                "            {"
            ],
            [
                120,
                "                return;"
            ],
            [
                121,
                "            }"
            ],
            [
                123,
                "            try"
            ],
            [
                124,
                "            {"
            ],
            [
                125,
                "                _listener.Dispose();"
            ],
            [
                126,
                ""
            ],
            [
                127,
                "                //foreach (var session in _sessions.Values)"
            ],
            [
                128,
                "                //{"
            ],
            [
                129,
                "                //    await session.Close();"
            ],
            [
                130,
                "                //}"
            ],
            [
                131,
                "            }"
            ],
            [
                132,
                "            catch (Exception ex) when (!ShouldThrow(ex)) { }"
            ],
            [
                133,
                "            finally"
            ],
            [
                134,
                "            {"
            ],
            [
                135,
                "                _listener = null;"
            ],
            [
                136,
                "            }"
            ],
            [
                156,
                "        private bool ShouldThrow(Exception ex)"
            ],
            [
                157,
                "        {"
            ],
            [
                158,
                "            if (ex is ObjectDisposedException"
            ],
            [
                159,
                "                || ex is InvalidOperationException"
            ],
            [
                160,
                "                || ex is SocketException"
            ],
            [
                161,
                "                || ex is IOException)"
            ],
            [
                162,
                "            {"
            ],
            [
                163,
                "                return false;"
            ],
            [
                164,
                "            }"
            ],
            [
                165,
                "            return true;"
            ],
            [
                166,
                "        }"
            ],
            [
                167,
                ""
            ],
            [
                187,
                "                _log.ErrorFormat(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");"
            ],
            [
                200,
                "            StartAccept();"
            ],
            [
                201,
                ""
            ],
            [
                204,
                "                _log.ErrorFormat(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");"
            ],
            [
                215,
                "                _log.ErrorFormat(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");"
            ],
            [
                246,
                "                    throw new InvalidOperationException("
            ],
            [
                247,
                "                        string.Format(\"The last operation [{0}] completed on the socket was not a receive or send.\", e.LastOperation));"
            ],
            [
                253,
                "            var buffer = _bufferManager.BorrowBuffer();"
            ],
            [
                254,
                "            saea.SetBuffer(buffer, 0, buffer.Length);"
            ],
            [
                267,
                "                _log.ErrorFormat(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");"
            ],
            [
                268,
                ""
            ],
            [
                269,
                "                CloseSession(saea);"
            ],
            [
                273,
                "            var receiveCount = saea.BytesTransferred;"
            ],
            [
                274,
                "            if (receiveCount == 0)"
            ],
            [
                276,
                "                CloseSession(saea);"
            ],
            [
                280,
                "            var buffer = new byte[99999];"
            ],
            [
                281,
                "            Array.Copy(saea.Buffer, 0, buffer, 0, receiveCount);"
            ],
            [
                283,
                "            StartReceive(saea);"
            ],
            [
                286,
                "        private void StartSend(SocketAsyncEventArgs saea)"
            ],
            [
                288,
                "            bool isIoOperationPending = saea.AcceptSocket.SendAsync(saea);"
            ],
            [
                289,
                "            if (!isIoOperationPending)"
            ],
            [
                290,
                "            {"
            ],
            [
                291,
                "                ProcessSend(saea);"
            ],
            [
                292,
                "            }"
            ],
            [
                295,
                "        private void ProcessSend(SocketAsyncEventArgs saea)"
            ],
            [
                297,
                "            if (saea.SocketError == SocketError.Success)"
            ],
            [
                298,
                "            {"
            ],
            [
                299,
                "                //receiveSendToken.sendBytesRemainingCount = receiveSendToken.sendBytesRemainingCount - saea.BytesTransferred;"
            ],
            [
                300,
                ""
            ],
            [
                301,
                "                //if (receiveSendToken.sendBytesRemainingCount == 0)"
            ],
            [
                302,
                "                //{"
            ],
            [
                303,
                "                //    StartReceive(saea);"
            ],
            [
                304,
                "                //}"
            ],
            [
                305,
                "                //else"
            ],
            [
                306,
                "                //{"
            ],
            [
                307,
                "                //    receiveSendToken.bytesSentAlreadyCount += saea.BytesTransferred;"
            ],
            [
                308,
                "                //    StartSend(saea);"
            ],
            [
                309,
                "                //}"
            ],
            [
                310,
                "            }"
            ],
            [
                311,
                "            else"
            ],
            [
                312,
                "            {"
            ],
            [
                313,
                "                CloseSession(saea);"
            ],
            [
                314,
                "            }"
            ],
            [
                317,
                "        private void CloseSession(SocketAsyncEventArgs saea)"
            ],
            [
                319,
                "            try"
            ],
            [
                320,
                "            {"
            ],
            [
                321,
                "                saea.AcceptSocket.Shutdown(SocketShutdown.Both);"
            ],
            [
                322,
                "            }"
            ],
            [
                323,
                "            catch (Exception)"
            ],
            [
                324,
                "            {"
            ],
            [
                325,
                "                _log.ErrorFormat(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");"
            ],
            [
                326,
                "            }"
            ],
            [
                327,
                ""
            ],
            [
                328,
                "            try"
            ],
            [
                329,
                "            {"
            ],
            [
                330,
                "                saea.AcceptSocket.Dispose();"
            ],
            [
                331,
                "            }"
            ],
            [
                332,
                "            catch (Exception)"
            ],
            [
                333,
                "            {"
            ],
            [
                334,
                "                _log.ErrorFormat(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");"
            ],
            [
                335,
                "            }"
            ]
        ],
        "deleted": [
            [
                90,
                "            _listener = new Socket(this.ListenedEndPoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);"
            ],
            [
                91,
                "            _listener.Bind(this.ListenedEndPoint);"
            ],
            [
                93,
                "            ConfigureListener();"
            ],
            [
                95,
                "            _listener.Listen(_configuration.PendingConnectionBacklog);"
            ],
            [
                97,
                "            StartAccept();"
            ],
            [
                155,
                "                StartAccept();"
            ],
            [
                160,
                ""
            ],
            [
                171,
                ""
            ],
            [
                176,
                ""
            ],
            [
                177,
                "            StartAccept();"
            ],
            [
                200,
                "                    throw new ArgumentException(\"The last operation completed on the socket was not a receive or send\");"
            ],
            [
                206,
                "            //saea.SetBuffer(receiveSendToken.bufferOffsetReceive, this.socketListenerSettings.BufferSize);"
            ],
            [
                219,
                "                CloseClientSocket(saea);"
            ],
            [
                223,
                "            if (saea.BytesTransferred == 0)"
            ],
            [
                225,
                "                CloseClientSocket(saea);"
            ],
            [
                229,
                "            //int remainingBytesToProcess = saea.BytesTransferred;"
            ],
            [
                231,
                "            //if (receiveSendToken.receivedPrefixBytesDoneCount < this.socketListenerSettings.ReceivePrefixLength)"
            ],
            [
                232,
                "            //{"
            ],
            [
                233,
                "            //    remainingBytesToProcess = prefixHandler.HandlePrefix(saea, receiveSendToken, remainingBytesToProcess);"
            ],
            [
                234,
                ""
            ],
            [
                235,
                "            //    if (remainingBytesToProcess == 0)"
            ],
            [
                236,
                "            //    {"
            ],
            [
                237,
                "            //        StartReceive(saea);"
            ],
            [
                238,
                "            //        return;"
            ],
            [
                239,
                "            //    }"
            ],
            [
                240,
                "            //}"
            ],
            [
                241,
                ""
            ],
            [
                242,
                "            //bool incomingTcpMessageIsReady = messageHandler.HandleMessage(saea, receiveSendToken, remainingBytesToProcess);"
            ],
            [
                243,
                ""
            ],
            [
                244,
                "            //if (incomingTcpMessageIsReady == true)"
            ],
            [
                245,
                "            //{"
            ],
            [
                246,
                "            //    receiveSendToken.theMediator.HandleData(receiveSendToken.theDataHolder);"
            ],
            [
                247,
                "            //    receiveSendToken.CreateNewDataHolder();"
            ],
            [
                248,
                "            //    receiveSendToken.Reset();"
            ],
            [
                249,
                ""
            ],
            [
                250,
                "            //    receiveSendToken.theMediator.PrepareOutgoingData();"
            ],
            [
                251,
                "            //    StartSend(receiveSendToken.theMediator.GiveBack());"
            ],
            [
                252,
                "            //}"
            ],
            [
                253,
                "            //else"
            ],
            [
                254,
                "            //{"
            ],
            [
                255,
                "            //    receiveSendToken.receiveMessageOffset = receiveSendToken.bufferOffsetReceive;"
            ],
            [
                256,
                ""
            ],
            [
                257,
                "            //    receiveSendToken.recPrefixBytesDoneThisOp = 0;"
            ],
            [
                258,
                ""
            ],
            [
                259,
                "            //    StartReceive(saea);"
            ],
            [
                260,
                "            //}"
            ],
            [
                263,
                "        private void CloseClientSocket(SocketAsyncEventArgs saea)"
            ],
            [
                265,
                "            //var receiveSendToken = (saea.UserToken as DataHoldingUserToken);"
            ],
            [
                266,
                ""
            ],
            [
                267,
                "            //try"
            ],
            [
                268,
                "            //{"
            ],
            [
                269,
                "            //    saea.AcceptSocket.Shutdown(SocketShutdown.Both);"
            ],
            [
                270,
                "            //}"
            ],
            [
                271,
                "            //catch (Exception)"
            ],
            [
                272,
                "            //{"
            ],
            [
                273,
                "            //}"
            ],
            [
                274,
                ""
            ],
            [
                275,
                "            //saea.AcceptSocket.Close();"
            ],
            [
                276,
                ""
            ],
            [
                277,
                "            //if (receiveSendToken.theDataHolder.dataMessageReceived != null)"
            ],
            [
                278,
                "            //{"
            ],
            [
                279,
                "            //    receiveSendToken.CreateNewDataHolder();"
            ],
            [
                280,
                "            //}"
            ],
            [
                281,
                ""
            ],
            [
                282,
                "            //this.poolOfRecSendEventArgs.Push(saea);"
            ],
            [
                283,
                ""
            ],
            [
                284,
                "            //Interlocked.Decrement(ref this.numberOfAcceptedSockets);"
            ],
            [
                285,
                ""
            ],
            [
                286,
                "            //this.theMaxConnectionsEnforcer.Release();"
            ],
            [
                289,
                "        private void StartSend(SocketAsyncEventArgs receiveSendEventArgs)"
            ],
            [
                291,
                "            //DataHoldingUserToken receiveSendToken = (DataHoldingUserToken)receiveSendEventArgs.UserToken;"
            ],
            [
                292,
                ""
            ],
            [
                293,
                "            //if (receiveSendToken.sendBytesRemainingCount <= this.socketListenerSettings.BufferSize)"
            ],
            [
                294,
                "            //{"
            ],
            [
                295,
                "            //    receiveSendEventArgs.SetBuffer(receiveSendToken.bufferOffsetSend, receiveSendToken.sendBytesRemainingCount);"
            ],
            [
                296,
                "            //    Buffer.BlockCopy(receiveSendToken.dataToSend, receiveSendToken.bytesSentAlreadyCount, receiveSendEventArgs.Buffer, receiveSendToken.bufferOffsetSend, receiveSendToken.sendBytesRemainingCount);"
            ],
            [
                297,
                "            //}"
            ],
            [
                298,
                "            //else"
            ],
            [
                299,
                "            //{"
            ],
            [
                300,
                "            //    receiveSendEventArgs.SetBuffer(receiveSendToken.bufferOffsetSend, this.socketListenerSettings.BufferSize);"
            ],
            [
                301,
                "            //    Buffer.BlockCopy(receiveSendToken.dataToSend, receiveSendToken.bytesSentAlreadyCount, receiveSendEventArgs.Buffer, receiveSendToken.bufferOffsetSend, this.socketListenerSettings.BufferSize);"
            ],
            [
                302,
                "            //}"
            ],
            [
                303,
                ""
            ],
            [
                304,
                "            //bool willRaiseEvent = receiveSendEventArgs.AcceptSocket.SendAsync(receiveSendEventArgs);"
            ],
            [
                305,
                ""
            ],
            [
                306,
                "            //if (!willRaiseEvent)"
            ],
            [
                307,
                "            //{"
            ],
            [
                308,
                "            //    ProcessSend(receiveSendEventArgs);"
            ],
            [
                309,
                "            //}"
            ],
            [
                312,
                "        private void ProcessSend(SocketAsyncEventArgs receiveSendEventArgs)"
            ],
            [
                314,
                "            //DataHoldingUserToken receiveSendToken = (DataHoldingUserToken)receiveSendEventArgs.UserToken;"
            ],
            [
                315,
                ""
            ],
            [
                316,
                "            //if (receiveSendEventArgs.SocketError == SocketError.Success)"
            ],
            [
                317,
                "            //{"
            ],
            [
                318,
                "            //    receiveSendToken.sendBytesRemainingCount = receiveSendToken.sendBytesRemainingCount - receiveSendEventArgs.BytesTransferred;"
            ],
            [
                319,
                ""
            ],
            [
                320,
                "            //    if (receiveSendToken.sendBytesRemainingCount == 0)"
            ],
            [
                321,
                "            //    {"
            ],
            [
                322,
                "            //        StartReceive(receiveSendEventArgs);"
            ],
            [
                323,
                "            //    }"
            ],
            [
                324,
                "            //    else"
            ],
            [
                325,
                "            //    {"
            ],
            [
                326,
                "            //        receiveSendToken.bytesSentAlreadyCount += receiveSendEventArgs.BytesTransferred;"
            ],
            [
                327,
                "            //        StartSend(receiveSendEventArgs);"
            ],
            [
                328,
                "            //    }"
            ],
            [
                329,
                "            //}"
            ],
            [
                330,
                "            //else"
            ],
            [
                331,
                "            //{"
            ],
            [
                332,
                "            //    receiveSendToken.Reset();"
            ],
            [
                333,
                "            //    CloseClientSocket(receiveSendEventArgs);"
            ],
            [
                334,
                "            //}"
            ]
        ]
    },
    "num_lines_added": 112,
    "num_lines_removed": 111
}