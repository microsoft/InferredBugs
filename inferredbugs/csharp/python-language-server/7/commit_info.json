{
    "hash": "e86edf11b2ede90696ab5ff1713114e546ca67d7",
    "message": "Remove check for indexes in parser tests (#885)\n\nTests that check errors reported by parser were expecting specific index numbers.\r\nIndex numbers differ by OS (based on usage of CRLF/LF, etc) so I removed the check fixing the tests for other platforms. Notice that index numbers remain there unused.\r\nThis prepares us for a different commit which would delete ErrorInfo and all those numbers from our tests.\r\nI also added tokenizer tests for different newlines.",
    "file_num_lines": 85,
    "diff_parsed": {
        "added": [
            [
                40,
                "        [TestMethod, Priority(0)]"
            ],
            [
                41,
                "        public void CRLFNewLines() {"
            ],
            [
                42,
                "            foreach (var version in AllVersions) {"
            ],
            [
                43,
                "                var code = \"\\r\\nx\\r\\ny\\r\\n\";"
            ],
            [
                44,
                ""
            ],
            [
                45,
                "                var initialLocation = SourceLocation.MinValue;"
            ],
            [
                46,
                "                var tokenizer = MakeTokenizer(version, TokenizerOptions.None, code,"
            ],
            [
                47,
                "                    initialLocation);"
            ],
            [
                48,
                ""
            ],
            [
                49,
                "                CheckAndReadNext(tokenizer, new IndexSpan(0, 2), TokenKind.NLToken);"
            ],
            [
                50,
                "                CheckAndReadNext(tokenizer, new IndexSpan(2, 1), TokenKind.Name);"
            ],
            [
                51,
                "                CheckAndReadNext(tokenizer, new IndexSpan(3, 2), TokenKind.NewLine);"
            ],
            [
                52,
                "                CheckAndReadNext(tokenizer, new IndexSpan(5, 1), TokenKind.Name);"
            ],
            [
                53,
                "                CheckAndReadNext(tokenizer, new IndexSpan(6, 2), TokenKind.NewLine);"
            ],
            [
                54,
                "            }"
            ],
            [
                55,
                "        }"
            ],
            [
                56,
                ""
            ],
            [
                57,
                "        [TestMethod, Priority(0)]"
            ],
            [
                58,
                "        public void CombineNewLines() {"
            ],
            [
                59,
                "            foreach (var version in AllVersions) {"
            ],
            [
                60,
                "                var code = \"\\r\\nx\\ny\\r\\n\";"
            ],
            [
                61,
                ""
            ],
            [
                62,
                "                var initialLocation = SourceLocation.MinValue;"
            ],
            [
                63,
                "                var tokenizer = MakeTokenizer(version, TokenizerOptions.None, code,"
            ],
            [
                64,
                "                    initialLocation);"
            ],
            [
                65,
                ""
            ],
            [
                66,
                "                CheckAndReadNext(tokenizer, new IndexSpan(0, 2), TokenKind.NLToken);"
            ],
            [
                67,
                "                CheckAndReadNext(tokenizer, new IndexSpan(2, 1), TokenKind.Name);"
            ],
            [
                68,
                "                CheckAndReadNext(tokenizer, new IndexSpan(3, 1), TokenKind.NewLine);"
            ],
            [
                69,
                "                CheckAndReadNext(tokenizer, new IndexSpan(4, 1), TokenKind.Name);"
            ],
            [
                70,
                "                CheckAndReadNext(tokenizer, new IndexSpan(5, 2), TokenKind.NewLine);"
            ],
            [
                71,
                "            }"
            ],
            [
                72,
                "        }"
            ],
            [
                73,
                ""
            ],
            [
                74,
                "        [TestMethod, Priority(0)]"
            ],
            [
                75,
                "        public void LFNewLines() {"
            ],
            [
                76,
                "            foreach (var version in AllVersions) {"
            ],
            [
                77,
                "                var code = \"\\nx\\ny\\n\";"
            ],
            [
                78,
                ""
            ],
            [
                79,
                "                var initialLocation = SourceLocation.MinValue;"
            ],
            [
                80,
                "                var tokenizer = MakeTokenizer(version, TokenizerOptions.None, code,"
            ],
            [
                81,
                "                    initialLocation);"
            ],
            [
                82,
                ""
            ],
            [
                83,
                "                CheckAndReadNext(tokenizer, new IndexSpan(0, 1), TokenKind.NLToken);"
            ],
            [
                84,
                "                CheckAndReadNext(tokenizer, new IndexSpan(1, 1), TokenKind.Name);"
            ],
            [
                85,
                "                CheckAndReadNext(tokenizer, new IndexSpan(2, 1), TokenKind.NewLine);"
            ],
            [
                86,
                "                CheckAndReadNext(tokenizer, new IndexSpan(3, 1), TokenKind.Name);"
            ],
            [
                87,
                "                CheckAndReadNext(tokenizer, new IndexSpan(4, 1), TokenKind.NewLine);"
            ],
            [
                88,
                "            }"
            ],
            [
                89,
                "        }"
            ],
            [
                90,
                ""
            ],
            [
                91,
                "        private static void CheckAndReadNext(Tokenizer tokenizer, IndexSpan tokenSpan, TokenKind tokenKind) {"
            ],
            [
                92,
                "            var token = tokenizer.GetNextToken();"
            ],
            [
                93,
                "            tokenizer.TokenSpan.Should().Be(tokenSpan);"
            ],
            [
                94,
                "            token.Kind.Should().Be(tokenKind);"
            ],
            [
                95,
                "        }"
            ],
            [
                96,
                ""
            ],
            [
                98,
                "            SourceLocation? initialSourceLocation = null) {"
            ],
            [
                99,
                "            return MakeTokenizer(version, optionSet, new StringReader(text), initialSourceLocation);"
            ],
            [
                100,
                "        }"
            ],
            [
                101,
                ""
            ],
            [
                102,
                "        private Tokenizer MakeTokenizer(PythonLanguageVersion version, TokenizerOptions optionSet, StringReader reader,"
            ],
            [
                106,
                "            tokenizer.Initialize(null, reader, initialSourceLocation ?? SourceLocation.MinValue);"
            ]
        ],
        "deleted": [
            [
                44,
                "            tokenizer.Initialize(null, new StringReader(text), initialSourceLocation ?? SourceLocation.MinValue);"
            ]
        ]
    },
    "num_lines_added": 63,
    "num_lines_removed": 1
}