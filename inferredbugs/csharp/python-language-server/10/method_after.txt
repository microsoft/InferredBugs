        public AndConstraint<PythonFunctionOverloadAssertions> HaveReturnType(string type, string because = "", params object[] reasonArgs) {
            var returnType = Subject.Call(ArgumentSet.WithoutContext, null).GetPythonType();
            Execute.Assertion.ForCondition(string.Equals(returnType.Name, type, StringComparison.Ordinal))
                .BecauseOf(because, reasonArgs)
                .FailWith($"Expected {Subject.Name} to have return type [{type}]{{reason}}, but it has [{returnType}].");

            return new AndConstraint<PythonFunctionOverloadAssertions>(this);
        }