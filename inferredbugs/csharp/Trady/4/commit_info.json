{
    "hash": "29afb2093dea22b72aaa542208b2ac19e904a797",
    "message": "Rename 'BuyPartialCurrencies' to 'BuyWithAllAvailableCash', and 'Fee' to 'FlatExchangeFeeRate' of BackTest builder for clear explanation of function",
    "file_num_lines": 108,
    "diff_parsed": {
        "added": [
            [
                15,
                "        private readonly bool _buyInCompleteQuantity;"
            ],
            [
                21,
                "            bool buyInCompleteQuantity)"
            ],
            [
                27,
                "            _buyInCompleteQuantity = buyInCompleteQuantity;"
            ],
            [
                100,
                "            if (assetCashMap.TryGetValue(indexedCandle.BackingList, out decimal cash))"
            ],
            [
                103,
                "                decimal quantity = (cash - premium) / nextCandle.Open;"
            ],
            [
                105,
                "                if (_buyInCompleteQuantity)"
            ],
            [
                106,
                "                    quantity = Math.Floor(quantity);"
            ],
            [
                108,
                "                decimal cashToBuyAsset = nextCandle.Open * quantity + premium;"
            ],
            [
                113,
                "                quantity -= _flatExchangeFee * quantity;"
            ],
            [
                114,
                "                //var quoteCurrencyFee = _flatExchangeFee * nextCandle.Open;"
            ],
            [
                116,
                "                assetCashMap[indexedCandle.BackingList] -= cashToBuyAsset;"
            ],
            [
                118,
                "                transactions.Add(new Transaction(indexedCandle.BackingList, nextCandle.Index, nextCandle.DateTime, TransactionType.Buy, quantity, cashToBuyAsset));"
            ],
            [
                119,
                "                OnBought?.Invoke(indexedCandle.BackingList, nextCandle.Index, nextCandle.DateTime, nextCandle.Open, quantity, cashToBuyAsset, assetCashMap[indexedCandle.BackingList]);"
            ],
            [
                132,
                "                var quantity = lastTransaction.Quantity;"
            ],
            [
                133,
                "                decimal cashWhenSellAsset = nextCandle.Open * quantity - premium;"
            ],
            [
                138,
                "                cashWhenSellAsset -= _flatExchangeFee * cashWhenSellAsset;"
            ],
            [
                140,
                "                decimal profitLossRatio = (cashWhenSellAsset - lastTransaction.AbsoluteCashFlow) / lastTransaction.AbsoluteCashFlow;"
            ],
            [
                141,
                "                assetCashMap[indexedCandle.BackingList] += cashWhenSellAsset;"
            ],
            [
                143,
                "                transactions.Add(new Transaction(indexedCandle.BackingList, nextCandle.Index, nextCandle.DateTime, TransactionType.Sell, quantity, cashWhenSellAsset));"
            ],
            [
                144,
                "                OnSold?.Invoke(indexedCandle.BackingList, nextCandle.Index, nextCandle.DateTime, nextCandle.Open, quantity, cashWhenSellAsset, assetCashMap[indexedCandle.BackingList], profitLossRatio);"
            ]
        ],
        "deleted": [
            [
                15,
                "        private readonly bool _buyCompleteBaseCurrencies;"
            ],
            [
                21,
                "            bool buyCompleteBaseCurrencies)"
            ],
            [
                27,
                "            _buyCompleteBaseCurrencies = buyCompleteBaseCurrencies;"
            ],
            [
                100,
                "            if (assetCashMap.TryGetValue(indexedCandle.BackingList, out decimal availableQuoteCurrency))"
            ],
            [
                103,
                "                decimal baseCurrencyQte = (availableQuoteCurrency - premium) / nextCandle.Open;"
            ],
            [
                105,
                "                if (_buyCompleteBaseCurrencies)"
            ],
            [
                106,
                "                {"
            ],
            [
                107,
                "                    baseCurrencyQte = Math.Floor(baseCurrencyQte);"
            ],
            [
                108,
                "                }"
            ],
            [
                110,
                "                decimal quoteCurrencyQte = nextCandle.Open * baseCurrencyQte + premium;"
            ],
            [
                115,
                "                baseCurrencyQte -= _flatExchangeFee * baseCurrencyQte;"
            ],
            [
                116,
                "                var quoteCurrencyFee = _flatExchangeFee * nextCandle.Open;"
            ],
            [
                118,
                "                assetCashMap[indexedCandle.BackingList] -= quoteCurrencyQte;"
            ],
            [
                120,
                "                transactions.Add(new Transaction(indexedCandle.BackingList, nextCandle.Index, nextCandle.DateTime, TransactionType.Buy, baseCurrencyQte, quoteCurrencyQte));"
            ],
            [
                121,
                "                OnBought?.Invoke(indexedCandle.BackingList, nextCandle.Index, nextCandle.DateTime, nextCandle.Open, baseCurrencyQte, quoteCurrencyQte, assetCashMap[indexedCandle.BackingList]);"
            ],
            [
                134,
                "                var baseCurrencyQte = lastTransaction.Quantity;"
            ],
            [
                135,
                "                decimal quoteCurrencyQte = nextCandle.Open * baseCurrencyQte - premium;"
            ],
            [
                140,
                "                quoteCurrencyQte -= _flatExchangeFee * quoteCurrencyQte;"
            ],
            [
                142,
                "                decimal plRatio = (quoteCurrencyQte - lastTransaction.AbsoluteCashFlow) / lastTransaction.AbsoluteCashFlow;"
            ],
            [
                143,
                "                assetCashMap[indexedCandle.BackingList] += quoteCurrencyQte;"
            ],
            [
                145,
                "                transactions.Add(new Transaction(indexedCandle.BackingList, nextCandle.Index, nextCandle.DateTime, TransactionType.Sell, baseCurrencyQte, quoteCurrencyQte));"
            ],
            [
                146,
                "                OnSold?.Invoke(indexedCandle.BackingList, nextCandle.Index, nextCandle.DateTime, nextCandle.Open, baseCurrencyQte, quoteCurrencyQte, assetCashMap[indexedCandle.BackingList], plRatio);"
            ]
        ]
    },
    "num_lines_added": 20,
    "num_lines_removed": 22
}