{
    "hash": "7ec07af07a159d5af46698d7cb97f430cab63227",
    "message": "Support for .NET Core 2.1 - DelayPromise now uses TimerQueueTimer directly instead of Timer",
    "file_num_lines": 74,
    "diff_parsed": {
        "added": [
            [
                15,
                "        private static bool TryGetTimer(Task task, out object timer)"
            ],
            [
                22,
                "                    .GetValue(task);"
            ],
            [
                29,
                "            if (TryGetTimer(delayPromise, out var timerObject))"
            ],
            [
                31,
                "                object timerQueueTimer;"
            ],
            [
                33,
                "                if (TimerQueueTimerAccessor.IsTimerQueueTimer(timerObject))"
            ],
            [
                34,
                "                {"
            ],
            [
                35,
                "                    timerQueueTimer = timerObject;"
            ],
            [
                36,
                "                }"
            ],
            [
                37,
                "                else if (timerObject is Timer timer)"
            ],
            [
                38,
                "                {"
            ],
            [
                39,
                "                    timerQueueTimer = timer.GetTimerQueueTimer();"
            ],
            [
                40,
                "                }"
            ],
            [
                41,
                "                else"
            ],
            [
                42,
                "                {"
            ],
            [
                43,
                "                    throw new InvalidOperationException(\"unknown timer type\");"
            ],
            [
                44,
                "                }"
            ],
            [
                45,
                ""
            ],
            [
                46,
                "                TimerQueueTimerAccessor.GetSettings(timerQueueTimer, out var start, out var initialDelay, out var interval);"
            ],
            [
                62,
                "            if (TryGetTimer(delayPromise, out var timerObject))"
            ],
            [
                64,
                "                if (TimerQueueTimerAccessor.IsTimerQueueTimer(timerObject))"
            ],
            [
                65,
                "                {"
            ],
            [
                66,
                "                    TimerQueueTimerAccessor.Close(timerObject);"
            ],
            [
                67,
                "                }"
            ],
            [
                68,
                "                else if (timerObject is Timer timer)"
            ],
            [
                69,
                "                {"
            ],
            [
                70,
                "                    timer.Dispose();"
            ],
            [
                71,
                "                }"
            ],
            [
                72,
                "                else"
            ],
            [
                73,
                "                {"
            ],
            [
                74,
                "                    throw new InvalidOperationException(\"unknown timer type\");"
            ],
            [
                75,
                "                }"
            ]
        ],
        "deleted": [
            [
                15,
                "        private static bool TryGetTimer(Task task, out Timer timer)"
            ],
            [
                22,
                "                    .GetValue(task) as Timer;"
            ],
            [
                29,
                "            if (TryGetTimer(delayPromise, out var timer))"
            ],
            [
                31,
                "                timer.GetSettings(out var start, out var initialDelay, out var interval);"
            ],
            [
                48,
                "            if (TryGetTimer(delayPromise, out var timer))"
            ],
            [
                50,
                "                timer.Dispose();"
            ]
        ]
    },
    "num_lines_added": 31,
    "num_lines_removed": 6
}