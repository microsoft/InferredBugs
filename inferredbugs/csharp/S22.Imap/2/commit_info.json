{
    "hash": "a61b14113c3d203a0003d288d7c6daa44bf9b3b8",
    "message": "Bugfix IdleLoop\n\naddresses issues mentioned in #20, #51 and #61",
    "file_num_lines": 1288,
    "diff_parsed": {
        "added": [
            [
                19,
                "\t/// Enables applications to communicate with a mail server using the Internet Message Access"
            ],
            [
                20,
                "\t/// Protocol (IMAP)."
            ],
            [
                117,
                "\t\t/// <summary>"
            ],
            [
                118,
                "\t\t/// The event that is raised when an I/O exception occurs in the idle-thread."
            ],
            [
                119,
                "\t\t/// </summary>"
            ],
            [
                120,
                "\t\t/// <remarks>"
            ],
            [
                121,
                "\t\t/// An I/O exception can occur if the underlying network connection has been reset or the"
            ],
            [
                122,
                "\t\t/// server unexpectedly closed the connection."
            ],
            [
                123,
                "\t\t/// </remarks>"
            ],
            [
                124,
                "\t\tpublic event EventHandler<IdleErrorEventArgs> IdleError;"
            ],
            [
                125,
                ""
            ],
            [
                129,
                "\t\t/// <param name=\"stream\">A stream to initialize the ImapClient instance with.</param>"
            ],
            [
                413,
                "\t\t\t\t// Annoyingly, Gmail OAUTH2 issues an untagged capability response during the SASL"
            ],
            [
                414,
                "\t\t\t\t// authentication process. As per spec this is illegal, but we should still deal with it."
            ],
            [
                473,
                "\t\t\t// We can safely use UTF-8 here since it's backwards compatible with ASCII and comes in handy"
            ],
            [
                474,
                "\t\t\t// when sending strings in literal form (see RFC 3501, 4.3)."
            ],
            [
                512,
                "\t\t\t\t\t\tint i = stream.ReadByte();"
            ],
            [
                513,
                "\t\t\t\t\t\tif (i == -1)"
            ],
            [
                514,
                "\t\t\t\t\t\t\tthrow new IOException(\"The stream could not be read.\");"
            ],
            [
                515,
                "\t\t\t\t\t\tbyte b = (byte)i;"
            ],
            [
                760,
                "\t\t\t\t\tMatch m = Regex.Match(response, \"\\\\* LIST \\\\((.*)\\\\)\\\\s+\\\"([^\\\"]+)\\\"\\\\s+(.+)\");"
            ],
            [
                769,
                "\t\t\t\t\t\t// Names _should_ be enclosed in double-quotes but not all servers follow through with"
            ],
            [
                770,
                "\t\t\t\t\t\t// this, so we don't enforce it in the above regex."
            ],
            [
                775,
                "\t\t\t\t\t\t\t// Include the unaltered string in the result if UTF-7 decoding failed for any reason."
            ],
            [
                842,
                "\t\t\t// This is not a cheap method to call, it involves a couple of round-trips to the server."
            ],
            [
                1010,
                "\t\t\t\t\t\t\t\"to ASCII-only characters.\", new BadServerResponseException(response));"
            ],
            [
                1741,
                "\t\t\t\twhile (response.StartsWith(\"*\"))"
            ],
            [
                1785,
                "\t\t\t\tstring response = SendCommandGetResponse(tag + \"UID FETCH \" + uid + \" (FLAGS)\");"
            ],
            [
                1839,
                "\t\t\t\twhile (response.StartsWith(\"*\"))"
            ],
            [
                1881,
                "\t\t\t\twhile (response.StartsWith(\"*\"))"
            ],
            [
                1923,
                "\t\t\t\twhile (response.StartsWith(\"*\"))"
            ],
            [
                1954,
                "\t\t\t\tthrow new InvalidOperationException(\"The server does not support the IMAP4 IDLE command.\");"
            ],
            [
                1966,
                "\t\t\t\tthrow new ApplicationException(\"idleThread is not null.\");"
            ],
            [
                2072,
                "\t\t\t\tthrow new ApplicationException(\"idleThread is not null.\");"
            ],
            [
                2115,
                "\t\t\t\t\t// Shutdown idleThread."
            ],
            [
                2116,
                "\t\t\t\t\t// Stop Timer."
            ],
            [
                2117,
                "\t\t\t\t\t// Set idling to false."
            ],
            [
                2118,
                "\t\t\t\t\tidleThread = null;"
            ],
            [
                2119,
                "\t\t\t\t\tidling = false;"
            ],
            [
                2120,
                "\t\t\t\t\tnoopTimer.Stop();"
            ],
            [
                2121,
                "\t\t\t\t\ttry {"
            ],
            [
                2122,
                "\t\t\t\t\t\tIdleError.Raise(this, new IdleErrorEventArgs(e, this));"
            ],
            [
                2123,
                "\t\t\t\t\t} catch {"
            ],
            [
                2124,
                "\t\t\t\t\t}"
            ],
            [
                2125,
                "\t\t\t\t\tConsole.WriteLine(\"Shutting down IdleLoop\");"
            ],
            [
                2126,
                "\t\t\t\t\treturn;"
            ],
            [
                2127,
                ""
            ],
            [
                2213,
                "\t\t\t\t\tMatch m = Regex.Match(response, \"\\\\* QUOTA \\\"(\\\\w*)\\\" \\\\((\\\\w+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\)\");"
            ]
        ],
        "deleted": [
            [
                19,
                "\t/// Enables applications to communicate with a mail server using the"
            ],
            [
                20,
                "\t/// Internet Message Access Protocol (IMAP)."
            ],
            [
                120,
                "\t\t/// <param name=\"stream\">A stream to initialize the ImapClient instance"
            ],
            [
                121,
                "\t\t/// with.</param>"
            ],
            [
                405,
                "\t\t\t\t// Annoyingly, Gmail OAUTH2 issues an untagged capability response during"
            ],
            [
                406,
                "\t\t\t\t// the SASL authentication process. As per spec this is illegal, but we"
            ],
            [
                407,
                "\t\t\t\t// should still deal with it."
            ],
            [
                466,
                "\t\t\t// We can safely use UTF-8 here since it's backwards compatible with ASCII"
            ],
            [
                467,
                "\t\t\t// and comes in handy when sending strings in literal form (see RFC 3501, 4.3)."
            ],
            [
                505,
                "\t\t\t\t\t\tbyte b = (byte)stream.ReadByte();"
            ],
            [
                719,
                "\t\t\t\t// Fixme: evaluate untagged data?"
            ],
            [
                751,
                "\t\t\t\t\tMatch m = Regex.Match(response,"
            ],
            [
                752,
                "\t\t\t\t\t\t\"\\\\* LIST \\\\((.*)\\\\)\\\\s+\\\"([^\\\"]+)\\\"\\\\s+(.+)\");"
            ],
            [
                761,
                "\t\t\t\t\t\t// Names _should_ be enclosed in double-quotes but not all servers"
            ],
            [
                762,
                "\t\t\t\t\t\t// follow through with this, so we don't enforce it in the above regex."
            ],
            [
                767,
                "\t\t\t\t\t\t\t// Include the unaltered string in the result if UTF-7 decoding"
            ],
            [
                768,
                "\t\t\t\t\t\t\t// failed for any reason."
            ],
            [
                835,
                "\t\t\t// This is not a cheap method to call, it involves a couple of round-trips"
            ],
            [
                836,
                "\t\t\t// to the server."
            ],
            [
                1004,
                "\t\t\t\t\t\t\t\"to ASCII-only characters\", new BadServerResponseException(response));"
            ],
            [
                1735,
                "\t\t\t\twhile (response.StartsWith(\"*\")) {"
            ],
            [
                1737,
                "\t\t\t\t}"
            ],
            [
                1780,
                "\t\t\t\tstring response = SendCommandGetResponse(tag + \"UID FETCH \" + uid +"
            ],
            [
                1781,
                "\t\t\t\t\t\" (FLAGS)\");"
            ],
            [
                1835,
                "\t\t\t\twhile (response.StartsWith(\"*\")) {"
            ],
            [
                1837,
                "\t\t\t\t}"
            ],
            [
                1878,
                "\t\t\t\twhile (response.StartsWith(\"*\")) {"
            ],
            [
                1880,
                "\t\t\t\t}"
            ],
            [
                1921,
                "\t\t\t\twhile (response.StartsWith(\"*\")) {"
            ],
            [
                1923,
                "\t\t\t\t}"
            ],
            [
                1953,
                "\t\t\t\tthrow new InvalidOperationException(\"The server does not support the \" +"
            ],
            [
                1954,
                "\t\t\t\t\t\"IMAP4 IDLE command\");"
            ],
            [
                1966,
                "\t\t\t\tthrow new ApplicationException(\"idleThread is not null\");"
            ],
            [
                2072,
                "\t\t\t\tthrow new ApplicationException(\"idleThread is not null\");"
            ],
            [
                2115,
                "\t\t\t\t\tthrow;"
            ],
            [
                2201,
                "\t\t\t\t\tMatch m = Regex.Match(response,"
            ],
            [
                2202,
                "\t\t\t\t\t\t\"\\\\* QUOTA \\\"(\\\\w*)\\\" \\\\((\\\\w+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\)\");"
            ]
        ]
    },
    "num_lines_added": 48,
    "num_lines_removed": 37
}