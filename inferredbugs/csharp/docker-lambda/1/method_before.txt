        public unsafe void ReportDone(string invokeId, string errorType, bool waitForExit)
        {
            if (!invoked && invokeError == null) return;

            var output = Interop.InteropUtils.ReadUTF8String(curSBSharedMem.EventBody, curSBSharedMem.ResponseBodyLen);

            var suffix = errorType == null ? "response" : "error";

            Task<HttpResponseMessage> task;
            using (var requestMessage = new HttpRequestMessage(HttpMethod.Post, $"http://127.0.0.1:9001/2018-06-01/runtime/invocation/{context.RequestId}/{suffix}"))
            {
                if (logTail)
                {
                    requestMessage.Headers.Add("Docker-Lambda-Log-Result", Convert.ToBase64String(LogsTail4k()));
                }
                requestMessage.Content = new StringContent(output);
                task = client.SendAsync(requestMessage);
                try
                {
                    task.Wait();
                }
                catch (AggregateException ae)
                {
                    if (!context.StayOpen && ae.InnerException is HttpRequestException && ae.InnerException.InnerException != null &&
                        (ae.InnerException.InnerException is SocketException ||
                            // happens on dotnetcore2.0
                            ae.InnerException.InnerException.GetType().ToString().Equals("System.Net.Http.CurlException")))
                    {
                        System.Environment.Exit(string.IsNullOrEmpty(errorType) && invokeError == null ? 0 : 1);
                    }
                    else
                    {
                        throw ae;
                    }
                }
                var response = task.Result;
                if (response.StatusCode != HttpStatusCode.Accepted)
                {
                    throw new Exception($"Unknown response from invocation: {response.StatusCode}");
                }
            }
            if (invokeError != null)
            {
                Console.Error.WriteLine(invokeError);
                return;
            }
        }