{
    "hash": "a8d2b9feacc4db04c4fd3ab1ce5faa4a14db5f04",
    "message": "Working through integration tests",
    "file_num_lines": 85,
    "diff_parsed": {
        "added": [
            [
                19,
                "        private const bool BinaryLog = false;"
            ],
            [
                23,
                "\t\t\t//\"https://github.com/AngleSharp/AngleSharp.git\", contains portable project, can't build"
            ],
            [
                28,
                "\t\t\t//\"https://github.com/moq/moq.git\", build is broken, see https://github.com/moq/moq/issues/21"
            ],
            [
                29,
                "\t\t\t//\"https://github.com/JamesNK/Newtonsoft.Json.git\", contains portable project, can't build"
            ],
            [
                30,
                "\t\t\t//\"https://github.com/nodatime/nodatime.git\", fails when running Blazor commands due to design-time build and missing artifacts at E:\\NuGet\\microsoft.aspnetcore.blazor.build\\0.4.0\\targets\\Blazor.MonoRuntime.targets(529,5)"
            ],
            [
                43,
                "            string[] solutionFiles = CloneOrFetchRepository(repository);"
            ],
            [
                44,
                "            foreach (string solutionFile in solutionFiles)"
            ],
            [
                46,
                "                StringWriter log = new StringWriter();"
            ],
            [
                47,
                "                AnalyzerManager manager = new AnalyzerManager(solutionFile, new AnalyzerManagerOptions"
            ],
            [
                48,
                "                {"
            ],
            [
                49,
                "                    LogWriter = log,"
            ],
            [
                50,
                "                    LoggerVerbosity = Verbosity"
            ],
            [
                51,
                "                });"
            ],
            [
                53,
                "                foreach (ProjectAnalyzer analyzer in manager.Projects.Values)"
            ],
            [
                55,
                "                    // When"
            ],
            [
                56,
                "                    Console.WriteLine(analyzer.ProjectFile.Path);"
            ],
            [
                57,
                "                    if (BinaryLog)"
            ],
            [
                58,
                "                    {"
            ],
            [
                59,
                "                        analyzer.AddBinaryLogger($@\"E:\\Temp\\{Path.GetFileNameWithoutExtension(solutionFile)}.{Path.GetFileNameWithoutExtension(analyzer.ProjectFile.Path)}.integration.core.binlog\");"
            ],
            [
                60,
                "                    }"
            ],
            [
                61,
                "                    AnalyzerResults results = analyzer.Build();"
            ],
            [
                63,
                "                    // Then"
            ],
            [
                64,
                "                    results.Count.ShouldBeGreaterThan(0, log.ToString());"
            ],
            [
                65,
                "                    results.First().OverallSuccess.ShouldBeTrue(log.ToString());"
            ],
            [
                66,
                "                    results.First().ProjectInstance.ShouldNotBeNull(log.ToString());"
            ],
            [
                67,
                "                }"
            ],
            [
                71,
                "        private static string[] CloneOrFetchRepository(string repository)"
            ],
            [
                88,
                "            return Directory.GetFiles(path, \"*.sln\", SearchOption.AllDirectories).ToArray();"
            ]
        ],
        "deleted": [
            [
                19,
                "        private const bool BinaryLog = true;"
            ],
            [
                23,
                "\t\t\t// \"https://github.com/AngleSharp/AngleSharp.git\", contains portable project, can't build"
            ],
            [
                28,
                "\t\t\t\"https://github.com/moq/moq.git\","
            ],
            [
                29,
                "\t\t\t\"https://github.com/JamesNK/Newtonsoft.Json.git\","
            ],
            [
                30,
                "\t\t\t\"https://github.com/nodatime/nodatime.git\","
            ],
            [
                43,
                "            string solutionFile = CloneOrFetchRepository(repository);"
            ],
            [
                44,
                "            StringWriter log = new StringWriter();"
            ],
            [
                45,
                "            AnalyzerManager manager = new AnalyzerManager(solutionFile, new AnalyzerManagerOptions"
            ],
            [
                47,
                "                LogWriter = log,"
            ],
            [
                48,
                "                LoggerVerbosity = Verbosity"
            ],
            [
                49,
                "            });"
            ],
            [
                51,
                "            foreach (ProjectAnalyzer analyzer in manager.Projects.Values)"
            ],
            [
                52,
                "            {"
            ],
            [
                53,
                "                // When"
            ],
            [
                54,
                "                Console.WriteLine(analyzer.ProjectFile.Path);"
            ],
            [
                55,
                "                if (BinaryLog)"
            ],
            [
                57,
                "                    analyzer.AddBinaryLogger(Path.Combine(@\"E:\\Temp\\\", Path.ChangeExtension(Path.GetFileName(analyzer.ProjectFile.Path), \".integration.core.binlog\")));"
            ],
            [
                58,
                "                }"
            ],
            [
                59,
                "                AnalyzerResults results = analyzer.Build();"
            ],
            [
                61,
                "                // Then"
            ],
            [
                62,
                "                results.Count.ShouldBeGreaterThan(0, log.ToString());"
            ],
            [
                63,
                "                results.First().OverallSuccess.ShouldBeTrue(log.ToString());"
            ],
            [
                64,
                "                results.First().ProjectInstance.ShouldNotBeNull(log.ToString());"
            ],
            [
                65,
                "                results.First().GetSourceFiles().Count.ShouldBeGreaterThan(0);"
            ],
            [
                69,
                "        private static ProjectAnalyzer GetProjectAnalyzer(string projectFile, StringWriter log) =>"
            ],
            [
                70,
                "            new AnalyzerManager(new AnalyzerManagerOptions"
            ],
            [
                71,
                "            {"
            ],
            [
                72,
                "                LogWriter = log"
            ],
            [
                73,
                "            })"
            ],
            [
                74,
                "            .GetProject(projectFile);"
            ],
            [
                75,
                ""
            ],
            [
                76,
                "        private static string CloneOrFetchRepository(string repository)"
            ],
            [
                93,
                "            return Directory.GetFiles(path, \"*.sln\", SearchOption.AllDirectories)[0];"
            ]
        ]
    },
    "num_lines_added": 28,
    "num_lines_removed": 33
}