{
    "hash": "2210dd41bb574c86af4ca02c18ddbf7d20968548",
    "message": "Updated tests and logic in observables\n\nThis should now correctly factor in excluded components too.",
    "file_num_lines": 299,
    "diff_parsed": {
        "added": [
            [
                22,
                "            var accessorToken = new ObservableGroupToken(new Type[0], new Type[0], \"default\");"
            ],
            [
                52,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, new Type[0], collectionName);"
            ],
            [
                74,
                "            Assert.Equal(applicableEntity, cacheableobservableGroup.CachedEntities[applicableEntity.Id]);"
            ],
            [
                82,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, new Type[0], \"some-other-entityCollection-name\");"
            ],
            [
                110,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, new Type[0], \"default\");"
            ],
            [
                135,
                "            Assert.Equal(existingEntityTwo, cacheableobservableGroup.CachedEntities[existingEntityTwo.Id]);"
            ],
            [
                139,
                "        public void should_remove_entity_when_required_components_no_longer_match_group()"
            ],
            [
                142,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, new Type[0], \"default\");"
            ],
            [
                171,
                "            Assert.Equal(existingEntityTwo, cacheableobservableGroup.CachedEntities[existingEntityTwo.Id]);"
            ],
            [
                172,
                "        }"
            ],
            [
                173,
                ""
            ],
            [
                174,
                "        [Fact]"
            ],
            [
                175,
                "        public void should_add_entity_when_required_components_match_and_excluded_component_removed()"
            ],
            [
                176,
                "        {"
            ],
            [
                177,
                "            var mockEventSystem = Substitute.For<IEventSystem>();"
            ],
            [
                178,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, new [] { typeof(TestComponentThree)}, \"default\");"
            ],
            [
                179,
                ""
            ],
            [
                180,
                "            var entityToAdd = new Entity(Guid.NewGuid(), mockEventSystem);"
            ],
            [
                181,
                "            var componentToRemove = new TestComponentThree();"
            ],
            [
                182,
                "            entityToAdd.AddComponent<TestComponentOne>();"
            ],
            [
                183,
                "            entityToAdd.AddComponent<TestComponentTwo>();"
            ],
            [
                184,
                "            entityToAdd.AddComponent(componentToRemove);"
            ],
            [
                185,
                ""
            ],
            [
                186,
                "            var underlyingEvent = new Subject<ComponentsRemovedEvent>();"
            ],
            [
                187,
                "            mockEventSystem.Receive<ComponentsRemovedEvent>().Returns(underlyingEvent);"
            ],
            [
                188,
                "            mockEventSystem.Receive<EntityAddedEvent>().Returns(Observable.Empty<EntityAddedEvent>());"
            ],
            [
                189,
                "            mockEventSystem.Receive<ComponentsAddedEvent>().Returns(Observable.Empty<ComponentsAddedEvent>());"
            ],
            [
                190,
                "            mockEventSystem.Receive<ComponentsBeforeRemovedEvent>().Returns(Observable.Empty<ComponentsBeforeRemovedEvent>());"
            ],
            [
                191,
                "            mockEventSystem.Receive<EntityRemovedEvent>().Returns(Observable.Empty<EntityRemovedEvent>());"
            ],
            [
                192,
                ""
            ],
            [
                193,
                "            var cacheableobservableGroup = new ObservableGroup(mockEventSystem, accessorToken, new IEntity[0]);"
            ],
            [
                194,
                "            entityToAdd.RemoveComponent(componentToRemove);"
            ],
            [
                195,
                "            underlyingEvent.OnNext(new ComponentsRemovedEvent(entityToAdd, new[]{componentToRemove}));"
            ],
            [
                196,
                ""
            ],
            [
                197,
                "            Assert.Equal(1, cacheableobservableGroup.CachedEntities.Count);"
            ],
            [
                198,
                "            Assert.Equal(entityToAdd, cacheableobservableGroup.CachedEntities[entityToAdd.Id]);"
            ],
            [
                205,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, new Type[0], \"default\");"
            ],
            [
                231,
                "            Assert.Equal(existingEntityOne, cacheableobservableGroup.CachedEntities[existingEntityOne.Id]);"
            ],
            [
                240,
                "            var accessorToken = new ObservableGroupToken(componentTypes, new Type[0], \"default\");"
            ],
            [
                279,
                "            var accessorToken = new ObservableGroupToken(componentTypes, new Type[0], \"default\");"
            ],
            [
                317,
                "            var accessorToken = new ObservableGroupToken(componentTypes, new Type[0], \"default\");"
            ],
            [
                346,
                "            var accessorToken = new ObservableGroupToken(componentTypes, new Type[0], \"default\");"
            ],
            [
                348,
                "            var fakeEntity1 = new Entity(Guid.NewGuid(), fakeEventSystem);"
            ],
            [
                353,
                "            var fakeEntity2 = new Entity(Guid.NewGuid(), fakeEventSystem);"
            ]
        ],
        "deleted": [
            [
                22,
                "            var accessorToken = new ObservableGroupToken(new Type[] { }, \"default\");"
            ],
            [
                52,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, collectionName);"
            ],
            [
                74,
                "            Assert.Equal<IEntity>(applicableEntity, cacheableobservableGroup.CachedEntities[applicableEntity.Id]);"
            ],
            [
                82,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, \"some-other-entityCollection-name\");"
            ],
            [
                110,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, \"default\");"
            ],
            [
                135,
                "            Assert.Equal<IEntity>(existingEntityTwo, cacheableobservableGroup.CachedEntities[existingEntityTwo.Id]);"
            ],
            [
                139,
                "        public void should_only_remove_entity_when_components_no_longer_match_group()"
            ],
            [
                142,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, \"default\");"
            ],
            [
                171,
                "            Assert.Equal<IEntity>(existingEntityTwo, cacheableobservableGroup.CachedEntities[existingEntityTwo.Id]);"
            ],
            [
                178,
                "            var accessorToken = new ObservableGroupToken(new[] { typeof(TestComponentOne), typeof(TestComponentTwo) }, \"default\");"
            ],
            [
                204,
                "            Assert.Equal<IEntity>(existingEntityOne, cacheableobservableGroup.CachedEntities[existingEntityOne.Id]);"
            ],
            [
                213,
                "            var accessorToken = new ObservableGroupToken(componentTypes, \"default\");"
            ],
            [
                252,
                "            var accessorToken = new ObservableGroupToken(componentTypes, \"default\");"
            ],
            [
                290,
                "            var accessorToken = new ObservableGroupToken(componentTypes, \"default\");"
            ],
            [
                319,
                "            var accessorToken = new ObservableGroupToken(componentTypes, \"default\");"
            ],
            [
                321,
                "            var fakeEntity1 = new Entity(Guid.Empty, fakeEventSystem);"
            ],
            [
                326,
                "            var fakeEntity2 = new Entity(Guid.Empty, fakeEventSystem);"
            ]
        ]
    },
    "num_lines_added": 44,
    "num_lines_removed": 17
}