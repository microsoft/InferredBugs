        public MethodDefinition Rewrite(MethodReference method_reference)
        {
            // Look up base class.
            TypeReference mr_dt = method_reference.DeclaringType;
            if (mr_dt != null && mr_dt.FullName == "System.String")
            {
                // Find in Campy.Runtime.
                string yopath = @"C:\Users\Kenne\Documents\Campy\Campy.Runtime\Corlib\bin\Debug\netstandard1.3\corlib.dll";
                Mono.Cecil.ModuleDefinition md = Mono.Cecil.ModuleDefinition.ReadModule(yopath);
                foreach (var ttt in md.Types)
                {
                    var yyy = ttt.Resolve();
                    foreach (var mmm in yyy.Methods)
                    {
                        System.Console.WriteLine("type " + yyy.FullName + " Method " + mmm.FullName);
                        var bbb = mmm.Body;
                    }
                }
            }

            MethodDefinition method_definition = method_reference.Resolve();
            var name = method_reference.FullName;
            var found = _rewritten_runtime.ContainsKey(name);
            if (found)
            {
                string rewrite = _rewritten_runtime[name];
                MethodDefinition def = GetDefinition(rewrite);
                method_definition = def;
            }
            if (method_definition == null)
            {
                // Note, some situations MethodDefinition.Resolve() return null.
                // For a good introduction on Resolve(), see https://github.com/jbevain/cecil/wiki/Resolving
                // According to that, it should always return non-null. However, multi-dimensional arrays do not
                // seem to resolve. Moreover, to add more confusion, a one dimensional array do resolve,
                // As arrays are so central to GPU programming, we need to substitute for System.Array code--that
                // we cannot find--into code from a runtime library.
                System.Console.WriteLine("ERROR: No definition for " + method_reference.FullName);
                System.Console.WriteLine(method_reference.IsDefinition ? "" : "Is not a definition at that!");
                this.Failed = true;
                return null;
            }
            else if (method_definition.Body == null)
            {
                System.Console.WriteLine("ERROR: METHOD BODY NULL! " + method_definition);
                var t = method_definition.IsInternalCall;
                this.Failed = true;
                return null;
            }

            Dictionary<TypeReference, System.Type> additional = new Dictionary<TypeReference, System.Type>();
            var mr_gp = method_reference.GenericParameters;
            var mr_hgp = method_reference.HasGenericParameters;
            var mr_dt_hgp = method_reference.DeclaringType.HasGenericParameters;
            var mr_igi = method_reference.IsGenericInstance;
            var mr_dt_igi = method_reference.DeclaringType.IsGenericInstance;
            if (mr_igi)
            {
                GenericInstanceMethod i = method_reference as GenericInstanceMethod;
                var mr_hga = i.HasGenericArguments;
            }
            if (mr_dt_igi)
            {
                GenericInstanceType git = mr_dt as GenericInstanceType;
                var mr_dt_hga = git.HasGenericArguments;
                Collection<TypeReference> ga = git.GenericArguments;
                var e1 = git.ElementType;
                var e2 = git.GetElementType();
                Collection<GenericParameter> gg = e1.GenericParameters;
                // Map parameter to instantiated type.
                for (int i = 0; i < gg.Count; ++i)
                {
                    GenericParameter pp = gg[i];
                    TypeReference qq = ga[i];
                    TypeReference trrr = pp as TypeReference;
                    var system_type = qq
                        .ToSystemType();
                    if (system_type == null) throw new Exception("Failed to convert " + qq);
                    additional[pp] = system_type;
                }
            }
            return method_definition;
        }