{
    "hash": "d0a8a7d055f1506dd478ef73fb69bf160a4f2195",
    "message": "added code for map and seq indexing",
    "file_num_lines": 599,
    "diff_parsed": {
        "added": [
            [
                18,
                "            {"
            ],
            [
                20,
                "            }"
            ],
            [
                21,
                "            else if (type is PrtIntType)"
            ],
            [
                25,
                "            else if (type is PrtBoolType)"
            ],
            [
                41,
                "            else if (type is PrtTupleType)"
            ],
            [
                47,
                "                throw new PrtInternalException(\"Invalid type in PrtMkDefaultType\");"
            ],
            [
                53,
                "            throw new NotImplementedException(\"ToString method is not overridden in the derived class\");"
            ],
            [
                66,
                "            else if (value is PrtNullValue)"
            ],
            [
                68,
                "                return (type is PrtEventType || type is PrtMachineType);"
            ],
            [
                70,
                "            else if (type is PrtIntType)"
            ],
            [
                86,
                "            else if (type is PrtNamedTupleType) // must come before PrtTupleType since PrtNamedTupleType derives from PrtTupleType"
            ],
            [
                88,
                "                var nmtupType = type as PrtNamedTupleType;"
            ],
            [
                89,
                "                var nmtupVal = value as PrtNamedTupleValue;"
            ],
            [
                90,
                "                if (nmtupVal == null) return false;"
            ],
            [
                91,
                "                if (nmtupVal.fieldValues.Count != nmtupType.fieldTypes.Count) return false;"
            ],
            [
                92,
                "                for (int i = 0; i < nmtupVal.fieldValues.Count; i++)"
            ],
            [
                94,
                "                    if (nmtupVal.fieldNames[i] != nmtupType.fieldNames[i]) return false;"
            ],
            [
                96,
                "                for (int i = 0; i < nmtupVal.fieldValues.Count; i++)"
            ],
            [
                98,
                "                    if (!PrtInhabitsType(nmtupVal.fieldValues[i], nmtupType.fieldTypes[i])) return false;"
            ],
            [
                100,
                "                return true;"
            ],
            [
                102,
                "            else if (type is PrtTupleType)"
            ],
            [
                104,
                "                var tupType = type as PrtTupleType;"
            ],
            [
                105,
                "                var tupVal = value as PrtTupleValue;"
            ],
            [
                106,
                "                if (tupVal == null) return false;"
            ],
            [
                107,
                "                if (tupVal.fieldValues.Count != tupType.fieldTypes.Count) return false;"
            ],
            [
                108,
                "                for (int i = 0; i < tupVal.fieldValues.Count; i++)"
            ],
            [
                110,
                "                    if (!PrtInhabitsType(tupVal.fieldValues[i], tupType.fieldTypes[i])) return false;"
            ],
            [
                112,
                "                return true;"
            ],
            [
                116,
                "                var mapType = type as PrtMapType;"
            ],
            [
                117,
                "                var mapVal = value as PrtMapValue;"
            ],
            [
                118,
                "                if (mapVal == null) return false;"
            ],
            [
                119,
                "                foreach (var p in mapVal.keyToValueMap)"
            ],
            [
                121,
                "                    if (!PrtInhabitsType(p.Key.key, mapType.keyType)) return false;"
            ],
            [
                122,
                "                    if (!PrtInhabitsType(p.Value, mapType.valType)) return false;"
            ],
            [
                124,
                "                return true;"
            ],
            [
                128,
                "                var seqType = type as PrtSeqType;"
            ],
            [
                129,
                "                var seqVal = value as PrtSeqValue;"
            ],
            [
                130,
                "                if (seqVal == null) return false;"
            ],
            [
                131,
                "                foreach (var elem in seqVal.elements)"
            ],
            [
                133,
                "                    if (!PrtInhabitsType(elem, seqType.elemType)) return false;"
            ],
            [
                135,
                "                return true;"
            ],
            [
                139,
                "                throw new PrtInternalException(\"Unknown type in PrtInhabitsType\");"
            ],
            [
                165,
                "            return (value is PrtNullValue);"
            ],
            [
                195,
                "            var intVal = val as PrtIntValue;"
            ],
            [
                196,
                "            if (intVal == null) return false;"
            ],
            [
                197,
                "            return this.nt == intVal.nt;"
            ],
            [
                232,
                "            var boolVal = val as PrtBoolValue;"
            ],
            [
                233,
                "            if (boolVal == null) return false;"
            ],
            [
                234,
                "            return this.bl == boolVal.bl;"
            ],
            [
                264,
                "            var eventVal = val as PrtEventValue;"
            ],
            [
                265,
                "            if (eventVal == null) return false;"
            ],
            [
                266,
                "            return this.evt == eventVal.evt;"
            ],
            [
                296,
                "            var machineVal = val as PrtMachineValue;"
            ],
            [
                297,
                "            if (machineVal == null) return false;"
            ],
            [
                298,
                "            return this.mach == machineVal.mach;"
            ],
            [
                333,
                "                throw new PrtInternalException(\"Number of fields is different from number of arguments\");"
            ],
            [
                438,
                "            for (int i = 0; i < fieldValues.Count; i++)"
            ],
            [
                440,
                "                retStr += fieldNames[i] + \":\" + fieldValues[i].ToString() + \", \";"
            ],
            [
                466,
                "        public PrtValue Lookup(int index)"
            ],
            [
                468,
                "            if (index < 0 || index >= elements.Count)"
            ],
            [
                470,
                "                throw new PrtAssertFailureException(\"Illegal index for Lookup\");"
            ],
            [
                472,
                "            return elements[index];"
            ],
            [
                473,
                "        }"
            ],
            [
                474,
                ""
            ],
            [
                475,
                "        public PrtValue Lookup(PrtValue index)"
            ],
            [
                476,
                "        {"
            ],
            [
                477,
                "            return Lookup(((PrtIntValue)index).nt);"
            ],
            [
                478,
                "        }"
            ],
            [
                479,
                ""
            ],
            [
                480,
                "        public void Insert(int index, PrtValue val)"
            ],
            [
                481,
                "        {"
            ],
            [
                482,
                "            if (index < 0 || index > elements.Count)"
            ],
            [
                484,
                "                throw new PrtAssertFailureException(\"Illegal index for Insert\");"
            ],
            [
                486,
                "            elements.Insert(index, val.Clone());"
            ],
            [
                489,
                "        public void Update(int index, PrtValue val)"
            ],
            [
                491,
                "            if (index < 0 || index > elements.Count)"
            ],
            [
                492,
                "            {"
            ],
            [
                493,
                "                throw new PrtAssertFailureException(\"Illegal index for Update\");"
            ],
            [
                494,
                "            }"
            ],
            [
                495,
                "            if (index == elements.Count)"
            ],
            [
                497,
                "                elements.Insert(index, val.Clone());"
            ],
            [
                501,
                "                elements[index] = val.Clone();"
            ],
            [
                507,
                "            if (index < 0 || index >= elements.Count)"
            ],
            [
                508,
                "            {"
            ],
            [
                509,
                "                throw new PrtAssertFailureException(\"Illegal index for Remove\");"
            ],
            [
                510,
                "            }"
            ],
            [
                522,
                "            if (seqVal == null) return false;"
            ],
            [
                523,
                "            if (seqVal.elements.Count != this.elements.Count) return false;"
            ],
            [
                524,
                "            for (int i = 0; i < this.elements.Count; i++)"
            ],
            [
                526,
                "                if (!this.elements[i].Equals(seqVal.elements[i])) return false;"
            ],
            [
                534,
                "            for (int i = 0; i < elements.Count; i++)"
            ],
            [
                536,
                "                retStr += elements[i] + \", \";"
            ],
            [
                543,
                "    public class PrtMapKey"
            ],
            [
                544,
                "    {"
            ],
            [
                545,
                "        public PrtValue key;"
            ],
            [
                546,
                "        public int keyIndex;"
            ],
            [
                547,
                "        public PrtMapKey(PrtValue x, int i)"
            ],
            [
                548,
                "        {"
            ],
            [
                549,
                "            key = x;"
            ],
            [
                550,
                "            keyIndex = i;"
            ],
            [
                551,
                "        }"
            ],
            [
                552,
                "        public override bool Equals(object obj)"
            ],
            [
                553,
                "        {"
            ],
            [
                554,
                "            var mapKey = obj as PrtMapKey;"
            ],
            [
                555,
                "            if (mapKey == null) return false;"
            ],
            [
                556,
                "            return key.Equals(mapKey);"
            ],
            [
                557,
                "        }"
            ],
            [
                558,
                ""
            ],
            [
                559,
                "        public override int GetHashCode()"
            ],
            [
                560,
                "        {"
            ],
            [
                561,
                "            return key.GetHashCode();"
            ],
            [
                562,
                "        }"
            ],
            [
                563,
                "    }"
            ],
            [
                564,
                ""
            ],
            [
                567,
                "        public int nextKeyIndex;"
            ],
            [
                568,
                "        public Dictionary<PrtMapKey, PrtValue> keyToValueMap;"
            ],
            [
                572,
                "            nextKeyIndex = 0;"
            ],
            [
                573,
                "            keyToValueMap = new Dictionary<PrtMapKey, PrtValue>();"
            ],
            [
                579,
                "            int count = 0;"
            ],
            [
                580,
                "            foreach (var k in keyToValueMap.Keys.OrderBy(x => x.keyIndex))"
            ],
            [
                582,
                "                clone.keyToValueMap[new PrtMapKey(k.key.Clone(), count)] = keyToValueMap[k].Clone();"
            ],
            [
                583,
                "                count++;"
            ],
            [
                585,
                "            clone.nextKeyIndex = count;"
            ],
            [
                591,
                "            return keyToValueMap.Count;"
            ],
            [
                594,
                "        public PrtValue Lookup(PrtValue key)"
            ],
            [
                598,
                "                throw new PrtAssertFailureException(\"Illegal key in Lookup\");"
            ],
            [
                600,
                "            return keyToValueMap[new PrtMapKey(key, 0)];"
            ],
            [
                606,
                "            foreach (var k in keyToValueMap.Keys.OrderBy(x => x.keyIndex))"
            ],
            [
                607,
                "            {"
            ],
            [
                608,
                "                seqKeys.elements.Add(k.key.Clone());"
            ],
            [
                609,
                "            }"
            ],
            [
                616,
                "            foreach (var k in keyToValueMap.Keys.OrderBy(x => x.keyIndex))"
            ],
            [
                617,
                "            {"
            ],
            [
                618,
                "                seqValues.elements.Add(keyToValueMap[k].Clone());"
            ],
            [
                619,
                "            }"
            ],
            [
                625,
                "            return keyToValueMap.ContainsKey(new PrtMapKey(key, 0));"
            ],
            [
                632,
                "                throw new PrtAssertFailureException(\"Illegal key in Add\");"
            ],
            [
                636,
                "                keyToValueMap[new PrtMapKey(key.Clone(), nextKeyIndex)] = val.Clone();"
            ],
            [
                637,
                "                nextKeyIndex++;"
            ],
            [
                645,
                "                throw new PrtAssertFailureException(\"Illegal key in Remove\");"
            ],
            [
                647,
                "            keyToValueMap.Remove(new PrtMapKey(key, 0));"
            ],
            [
                652,
                "            keyToValueMap[new PrtMapKey(key, 0)] = val.Clone();"
            ],
            [
                658,
                "            if (mapVal == null) return false;"
            ],
            [
                659,
                "            if (this.keyToValueMap.Count != mapVal.keyToValueMap.Count) return false;"
            ],
            [
                660,
                "            foreach (var k in this.keyToValueMap.Keys)"
            ],
            [
                662,
                "                if (!mapVal.Contains(k.key)) return false;"
            ],
            [
                664,
                "            return true;"
            ],
            [
                670,
                "            foreach (var k in keyToValueMap.Keys.OrderBy(x => x.keyIndex))"
            ],
            [
                672,
                "                retStr += \"(\" + k.key.ToString() + \",\" + keyToValueMap[k].ToString() + \"), \";"
            ]
        ],
        "deleted": [
            [
                19,
                ""
            ],
            [
                20,
                "            else if(type is PrtIntType)"
            ],
            [
                24,
                "            else if(type is PrtBoolType)"
            ],
            [
                40,
                "            else if(type is PrtTupleType)"
            ],
            [
                46,
                "                Debug.Assert(false, \"Invalid type !!\");"
            ],
            [
                47,
                "                return null;"
            ],
            [
                53,
                "            throw new NotImplementedException(\"ToString function is not overriden in the derived class\");"
            ],
            [
                66,
                ""
            ],
            [
                67,
                "            if (value is PrtNullValue)"
            ],
            [
                69,
                "                if (type is PrtEventType || type is PrtMachineType)"
            ],
            [
                70,
                "                {"
            ],
            [
                71,
                "                    return true;"
            ],
            [
                72,
                "                }"
            ],
            [
                73,
                "                else"
            ],
            [
                74,
                "                {"
            ],
            [
                75,
                "                    return false;"
            ],
            [
                76,
                "                }"
            ],
            [
                78,
                ""
            ],
            [
                79,
                "            if (type is PrtIntType)"
            ],
            [
                95,
                "            else if (type is PrtTupleType)"
            ],
            [
                97,
                "                if ((!(value is PrtTupleValue)) || (value as PrtTupleValue).fieldValues.Count != (type as PrtTupleType).fieldTypes.Count)"
            ],
            [
                99,
                "                    return false;"
            ],
            [
                101,
                "                else"
            ],
            [
                103,
                "                    int index = 0;"
            ],
            [
                104,
                "                    var tupVal = (value as PrtTupleValue);"
            ],
            [
                105,
                "                    var tupType = (type as PrtTupleType);"
            ],
            [
                106,
                "                    while (index < tupVal.fieldValues.Count)"
            ],
            [
                107,
                "                    {"
            ],
            [
                108,
                "                        if (!PrtInhabitsType(tupVal.fieldValues[index], tupType.fieldTypes[index]))"
            ],
            [
                109,
                "                        {"
            ],
            [
                110,
                "                            return false;"
            ],
            [
                111,
                "                        }"
            ],
            [
                112,
                "                        index++;"
            ],
            [
                113,
                "                    }"
            ],
            [
                114,
                ""
            ],
            [
                115,
                "                    return true;"
            ],
            [
                118,
                "            else if (type is PrtNamedTupleType)"
            ],
            [
                120,
                "                if ((!(value is PrtNamedTupleValue)) || (value as PrtNamedTupleValue).fieldValues.Count != (type as PrtNamedTupleType).fieldTypes.Count)"
            ],
            [
                121,
                "                {"
            ],
            [
                122,
                "                    return false;"
            ],
            [
                123,
                "                }"
            ],
            [
                124,
                "                else"
            ],
            [
                126,
                "                    int index = 0;"
            ],
            [
                127,
                "                    var nmtupVal = (value as PrtNamedTupleValue);"
            ],
            [
                128,
                "                    var nmtupType = (type as PrtNamedTupleType);"
            ],
            [
                129,
                "                    while (index < nmtupVal.fieldValues.Count)"
            ],
            [
                130,
                "                    {"
            ],
            [
                131,
                "                        if (nmtupVal.fieldNames[index] != nmtupType.fieldNames[index])"
            ],
            [
                132,
                "                        {"
            ],
            [
                133,
                "                            return false;"
            ],
            [
                134,
                "                        }"
            ],
            [
                135,
                "                        else if (!PrtInhabitsType(nmtupVal.fieldValues[index], nmtupType.fieldTypes[index]))"
            ],
            [
                136,
                "                        {"
            ],
            [
                137,
                "                            return false;"
            ],
            [
                138,
                "                        }"
            ],
            [
                139,
                "                        index++;"
            ],
            [
                140,
                "                    }"
            ],
            [
                141,
                ""
            ],
            [
                142,
                "                    return true;"
            ],
            [
                147,
                "                if (!(value is PrtMapValue))"
            ],
            [
                149,
                "                    return false;"
            ],
            [
                150,
                "                }"
            ],
            [
                151,
                "                else"
            ],
            [
                152,
                "                {"
            ],
            [
                153,
                "                    var mapVal = (value as PrtMapValue);"
            ],
            [
                154,
                "                    foreach (var key in mapVal.keys)"
            ],
            [
                155,
                "                    {"
            ],
            [
                156,
                "                        if (!PrtInhabitsType(key, (type as PrtMapType).keyType))"
            ],
            [
                157,
                "                        {"
            ],
            [
                158,
                "                            return false;"
            ],
            [
                159,
                "                        }"
            ],
            [
                160,
                "                    }"
            ],
            [
                161,
                "                    foreach (var val in mapVal.values)"
            ],
            [
                162,
                "                    {"
            ],
            [
                163,
                "                        if (!PrtInhabitsType(val, (type as PrtMapType).valType))"
            ],
            [
                164,
                "                        {"
            ],
            [
                165,
                "                            return false;"
            ],
            [
                166,
                "                        }"
            ],
            [
                167,
                "                    }"
            ],
            [
                168,
                ""
            ],
            [
                169,
                "                    return true;"
            ],
            [
                174,
                "                if (!(value is PrtSeqValue))"
            ],
            [
                176,
                "                    return false;"
            ],
            [
                177,
                "                }"
            ],
            [
                178,
                "                else"
            ],
            [
                179,
                "                {"
            ],
            [
                180,
                "                    var seqVal = (value as PrtSeqValue);"
            ],
            [
                181,
                "                    foreach (var elem in seqVal.elements)"
            ],
            [
                182,
                "                    {"
            ],
            [
                183,
                "                        if (!PrtInhabitsType(elem, (type as PrtSeqType).elemType))"
            ],
            [
                184,
                "                        {"
            ],
            [
                185,
                "                            return false;"
            ],
            [
                186,
                "                        }"
            ],
            [
                187,
                "                    }"
            ],
            [
                188,
                ""
            ],
            [
                189,
                "                    return true;"
            ],
            [
                194,
                "                Debug.Assert(false, \"Unknown type\");"
            ],
            [
                195,
                "                return false;"
            ],
            [
                205,
                ""
            ],
            [
                222,
                "            if (value is PrtNullValue)"
            ],
            [
                223,
                "                return true;"
            ],
            [
                224,
                "            else"
            ],
            [
                225,
                "                return false;"
            ],
            [
                255,
                "            Debug.Assert(val is PrtIntValue, \"Error in type checking, invalid equals invocation\");"
            ],
            [
                256,
                "            return this.nt == (val as PrtIntValue).nt;"
            ],
            [
                291,
                "            Debug.Assert(val is PrtBoolValue, \"Error in type checking, invalid equals invocation\");"
            ],
            [
                292,
                "            return this.bl == (val as PrtBoolValue).bl;"
            ],
            [
                322,
                "            Debug.Assert(val is PrtEventValue, \"Error in type checking, invalid equals invocation\");"
            ],
            [
                323,
                "            return this.evt == (val as PrtEventValue).evt;"
            ],
            [
                353,
                "            Debug.Assert(val is PrtMachineValue, \"Error in type checking, invalid equals invocation\");"
            ],
            [
                354,
                "            return this.mach == (val as PrtMachineValue).mach;"
            ],
            [
                389,
                "                throw new PrtInternalException();"
            ],
            [
                494,
                "            int index = 0;"
            ],
            [
                495,
                ""
            ],
            [
                496,
                "            while (index < fieldValues.Count)"
            ],
            [
                498,
                "                retStr += fieldNames[index] + \":\" + fieldValues[index].ToString() + \", \";"
            ],
            [
                499,
                "                index++;"
            ],
            [
                522,
                ""
            ],
            [
                526,
                "        public PrtValue ElementAt(PrtValue index)"
            ],
            [
                528,
                "            var _index = index as PrtIntValue;"
            ],
            [
                529,
                "            if (_index == null)"
            ],
            [
                531,
                "                //TODO: Problem"
            ],
            [
                532,
                "                throw new Exception();"
            ],
            [
                534,
                "            else"
            ],
            [
                536,
                "                if (_index.nt < Size())"
            ],
            [
                537,
                "                {"
            ],
            [
                538,
                "                    return elements[_index.nt];"
            ],
            [
                539,
                "                }"
            ],
            [
                540,
                "                else"
            ],
            [
                541,
                "                {"
            ],
            [
                542,
                "                    //TODO: Problem"
            ],
            [
                543,
                "                    throw new Exception();"
            ],
            [
                544,
                "                }"
            ],
            [
                548,
                "        public PrtValue ElementAt(int index)"
            ],
            [
                550,
                "            if (index < Size())"
            ],
            [
                552,
                "                return elements[index];"
            ],
            [
                556,
                "                //TODO: Problem"
            ],
            [
                557,
                "                throw new Exception();"
            ],
            [
                561,
                "        public void Insert(int index, PrtValue val)"
            ],
            [
                562,
                "        {"
            ],
            [
                563,
                "            //TODO: raise an exception for invalid index"
            ],
            [
                564,
                "            elements.Insert(index, val.Clone());"
            ],
            [
                565,
                "        }"
            ],
            [
                566,
                ""
            ],
            [
                569,
                "            //TODO: raise an exception for invalid index"
            ],
            [
                580,
                "            Debug.Assert(val is PrtSeqValue, \"Error in type checking, invalid equals invocation\");"
            ],
            [
                582,
                "            if (seqVal.elements.Count != this.elements.Count)"
            ],
            [
                584,
                "                return false;"
            ],
            [
                585,
                "            }"
            ],
            [
                586,
                "            else"
            ],
            [
                587,
                "            {"
            ],
            [
                588,
                "                int index = 0;"
            ],
            [
                589,
                "                while (index < this.elements.Count)"
            ],
            [
                590,
                "                {"
            ],
            [
                591,
                "                    if (!this.elements[index].Equals(seqVal.elements[index]))"
            ],
            [
                592,
                "                        return false;"
            ],
            [
                593,
                ""
            ],
            [
                594,
                "                    index++;"
            ],
            [
                595,
                "                }"
            ],
            [
                603,
                "            int index = 0;"
            ],
            [
                604,
                ""
            ],
            [
                605,
                "            while (index < elements.Count)"
            ],
            [
                607,
                "                retStr += elements[index] + \", \";"
            ],
            [
                608,
                "                index++;"
            ],
            [
                617,
                "        public List<PrtValue> keys;"
            ],
            [
                618,
                "        public List<PrtValue> values;"
            ],
            [
                622,
                "            values = new List<PrtValue>();"
            ],
            [
                623,
                "            keys = new List<PrtValue>();"
            ],
            [
                629,
                "            foreach (var v in values)"
            ],
            [
                630,
                "            {"
            ],
            [
                631,
                "                clone.values.Add(v.Clone());"
            ],
            [
                632,
                "            }"
            ],
            [
                633,
                "            foreach (var k in keys)"
            ],
            [
                635,
                "                clone.keys.Add(k.Clone());"
            ],
            [
                642,
                "            return values.Count();"
            ],
            [
                645,
                "        public PrtValue LookUp(PrtValue key)"
            ],
            [
                649,
                "                //TODO: raise an exception for invalid update"
            ],
            [
                651,
                "            var index = keys.FindIndex((k => k.Equals(key)));"
            ],
            [
                652,
                "            return values[index].Clone();"
            ],
            [
                658,
                "            seqKeys.elements.AddRange((this.Clone() as PrtMapValue).keys);"
            ],
            [
                665,
                "            seqValues.elements.AddRange((this.Clone() as PrtMapValue).values);"
            ],
            [
                671,
                "            return keys.Where(k => k.Equals(key)).Count() > 0;"
            ],
            [
                678,
                "                //TODO: raise an exception for invalid add"
            ],
            [
                682,
                "                keys.Add(key.Clone());"
            ],
            [
                683,
                "                values.Add(val.Clone());"
            ],
            [
                691,
                "                //TODO: raise an exception for invalid remove"
            ],
            [
                693,
                "            var index = keys.FindIndex((k => k.Equals(key)));"
            ],
            [
                694,
                "            keys.RemoveAt(index);"
            ],
            [
                695,
                "            values.RemoveAt(index);"
            ],
            [
                700,
                "            if (!Contains(key))"
            ],
            [
                701,
                "            {"
            ],
            [
                702,
                "                //TODO: raise an exception for invalid update"
            ],
            [
                703,
                "            }"
            ],
            [
                704,
                "            var index = keys.FindIndex((k => k.Equals(key)));"
            ],
            [
                705,
                "            values[index] = val.Clone();"
            ],
            [
                710,
                "            Debug.Assert(val is PrtMapValue, \"Error in type checking, invalid equals invocation\");"
            ],
            [
                712,
                "            if (mapVal.keys.Count != this.keys.Count)"
            ],
            [
                713,
                "            {"
            ],
            [
                714,
                "                return false;"
            ],
            [
                715,
                "            }"
            ],
            [
                716,
                "            else"
            ],
            [
                718,
                "                foreach (var k in this.keys)"
            ],
            [
                719,
                "                {"
            ],
            [
                720,
                "                    if (!mapVal.Contains(k))"
            ],
            [
                721,
                "                    {"
            ],
            [
                722,
                "                        return false;"
            ],
            [
                723,
                "                    }"
            ],
            [
                724,
                "                    else"
            ],
            [
                725,
                "                    {"
            ],
            [
                726,
                "                        var index = this.keys.FindIndex(_k => _k.Equals(k));"
            ],
            [
                727,
                "                        var _index = mapVal.keys.FindIndex(_k => _k.Equals(k));"
            ],
            [
                728,
                "                        if (this.values[index].Equals(mapVal.values[_index]))"
            ],
            [
                729,
                "                        {"
            ],
            [
                730,
                "                            return false;"
            ],
            [
                731,
                "                        }"
            ],
            [
                732,
                "                    }"
            ],
            [
                733,
                "                }"
            ],
            [
                734,
                "                return true;"
            ],
            [
                741,
                "            int index = 0;"
            ],
            [
                742,
                ""
            ],
            [
                743,
                "            while (index < values.Count)"
            ],
            [
                745,
                "                retStr += \"(\" + keys[index].ToString() + \",\" + values[index].ToString() + \"), \";"
            ],
            [
                746,
                "                index++;"
            ]
        ]
    },
    "num_lines_added": 149,
    "num_lines_removed": 223
}