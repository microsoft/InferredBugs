{
    "hash": "6fec76e8c32da9c7f87a906d24fdd65e1c1b88a0",
    "message": "Fix UploadSWEntry\n\nAllow upload of XML and JSON based entries",
    "file_num_lines": 776,
    "diff_parsed": {
        "added": [
            [
                49,
                "                    using (HttpClientHandler handler = new HttpClientHandler())"
            ],
            [
                52,
                "                        if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                54,
                "                            handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                55,
                "                            handler.UseProxy = true;"
            ],
            [
                57,
                ""
            ],
            [
                58,
                "                        using (var oClient = new HttpClient(handler))"
            ],
            [
                60,
                "                            if (!string.IsNullOrEmpty(ProxyUserPW))"
            ],
            [
                61,
                "                            {"
            ],
            [
                62,
                "                                oClient.DefaultRequestHeaders.ProxyAuthorization = new AuthenticationHeaderValue(\"Basic\", Convert.ToBase64String(bProxyUser));"
            ],
            [
                63,
                "                            }"
            ],
            [
                64,
                "                            oClient.DefaultRequestHeaders.Add(\"Username\", Username);"
            ],
            [
                65,
                "                            oClient.DefaultRequestHeaders.Add(\"Password\", Password);"
            ],
            [
                66,
                "                            oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));"
            ],
            [
                67,
                "                            var response = oClient.GetStringAsync(sURL + \"/rest/AuthenticateUser\");"
            ],
            [
                68,
                "                            response.Wait(7000);"
            ],
            [
                69,
                "                            if (response.IsCompleted)"
            ],
            [
                70,
                "                            {"
            ],
            [
                71,
                "                                Token = response.Result.Replace(\"\\\"\", \"\");"
            ],
            [
                73,
                "                                // Set cache options."
            ],
            [
                74,
                "                                var cacheEntryOptions = new MemoryCacheEntryOptions()"
            ],
            [
                75,
                "                                    // Keep in cache for this time, reset time if accessed."
            ],
            [
                76,
                "                                    .SetSlidingExpiration(TimeSpan.FromSeconds(300));"
            ],
            [
                78,
                "                                _cache.Set(\"PW\" + (Username + Password).GetHashCode(StringComparison.InvariantCultureIgnoreCase), Token, cacheEntryOptions);"
            ],
            [
                80,
                "                                return Token;"
            ],
            [
                81,
                "                            }"
            ],
            [
                150,
                "                        response.Wait(10000); //10s max."
            ],
            [
                186,
                "                using (var handler = new HttpClientHandler())"
            ],
            [
                188,
                "                    if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                189,
                "                    {"
            ],
            [
                190,
                "                        handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                191,
                "                        handler.UseProxy = true;"
            ],
            [
                192,
                "                    }"
            ],
            [
                193,
                "                    using (var oClient = new HttpClient(handler))"
            ],
            [
                195,
                "                        try"
            ],
            [
                196,
                "                        {"
            ],
            [
                197,
                "                            oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                198,
                "                            oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));"
            ],
            [
                199,
                "                            var response = oClient.GetStringAsync(sURL + \"/rest/SWGetShort?name=\" + WebUtility.UrlEncode(Shortname));"
            ],
            [
                200,
                "                            response.Wait(5000);"
            ],
            [
                201,
                "                            if (response.IsCompleted)"
            ],
            [
                202,
                "                            {"
            ],
            [
                203,
                "                                sResult = response.Result;"
            ],
            [
                205,
                "                                // Set cache options."
            ],
            [
                206,
                "                                var cacheEntryOptions = new MemoryCacheEntryOptions()"
            ],
            [
                207,
                "                                    .SetSlidingExpiration(TimeSpan.FromSeconds(330));"
            ],
            [
                209,
                "                                _cache.Set(\"SWGET1-\" + Shortname.GetHashCode(StringComparison.InvariantCultureIgnoreCase), sResult, cacheEntryOptions);"
            ],
            [
                211,
                "                                return sResult;"
            ],
            [
                212,
                "                            }"
            ],
            [
                213,
                "                        }"
            ],
            [
                214,
                "                        catch { }"
            ],
            [
                217,
                ""
            ],
            [
                230,
                "                    using (var handler = new HttpClientHandler())"
            ],
            [
                232,
                "                        if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                233,
                "                        {"
            ],
            [
                234,
                "                            handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                235,
                "                            handler.UseProxy = true;"
            ],
            [
                236,
                "                        }"
            ],
            [
                237,
                "                        using (var oClient = new HttpClient(handler))"
            ],
            [
                238,
                "                        {"
            ],
            [
                239,
                "                            oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                240,
                "                            oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));"
            ],
            [
                241,
                "                            var response = oClient.GetStringAsync(sURL + \"/rest/SWGet?name=\" + WebUtility.UrlEncode(PackageName) + \"&ver=\" + PackageVersion);"
            ],
            [
                242,
                "                            response.Wait(5000);"
            ],
            [
                243,
                "                            if (response.IsCompleted)"
            ],
            [
                244,
                "                            {"
            ],
            [
                245,
                "                                sResult = response.Result;"
            ],
            [
                246,
                ""
            ],
            [
                247,
                "                                // Set cache options."
            ],
            [
                248,
                "                                var cacheEntryOptions = new MemoryCacheEntryOptions()"
            ],
            [
                249,
                "                                    .SetSlidingExpiration(TimeSpan.FromSeconds(330));"
            ],
            [
                250,
                "                                sResult = response.Result;"
            ],
            [
                251,
                "                                _cache.Set(\"SWGET2-\" + (PackageName + PackageVersion).GetHashCode(StringComparison.InvariantCultureIgnoreCase), sResult, cacheEntryOptions);"
            ],
            [
                252,
                "                                return sResult;"
            ],
            [
                253,
                "                            }"
            ],
            [
                254,
                "                        }"
            ],
            [
                270,
                "                    using (var handler = new HttpClientHandler())"
            ],
            [
                272,
                "                        if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                273,
                "                        {"
            ],
            [
                274,
                "                            handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                275,
                "                            handler.UseProxy = true;"
            ],
            [
                276,
                "                        }"
            ],
            [
                277,
                "                        using (var oClient = new HttpClient(handler))"
            ],
            [
                278,
                "                        {"
            ],
            [
                279,
                "                            oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                280,
                "                            oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));"
            ],
            [
                281,
                "                            var response = oClient.GetStringAsync(sURL + \"/rest/SWGetPkg?name=\" + WebUtility.UrlEncode(PackageName) + \"&manuf=\" + WebUtility.UrlEncode(Manufacturer) + \"&ver=\" + PackageVersion);"
            ],
            [
                282,
                "                            response.Wait(5000);"
            ],
            [
                283,
                "                            if (response.IsCompleted)"
            ],
            [
                284,
                "                            {"
            ],
            [
                285,
                "                                sResult = response.Result;"
            ],
            [
                286,
                ""
            ],
            [
                287,
                "                                // Set cache options."
            ],
            [
                288,
                "                                var cacheEntryOptions = new MemoryCacheEntryOptions()"
            ],
            [
                289,
                "                                    .SetSlidingExpiration(TimeSpan.FromSeconds(330));"
            ],
            [
                290,
                "                                sResult = response.Result;"
            ],
            [
                291,
                "                                _cache.Set(\"SWGET3-\" + (PackageName + Manufacturer + PackageVersion).GetHashCode(StringComparison.InvariantCultureIgnoreCase), sResult, cacheEntryOptions);"
            ],
            [
                292,
                "                                return sResult;"
            ],
            [
                293,
                "                            }"
            ],
            [
                294,
                "                        }"
            ],
            [
                363,
                "                        response.Wait(10000);"
            ],
            [
                696,
                "                        var response = oClient.PostAsync(sURL + \"/rest/UploadSWEntry\", oCont);"
            ],
            [
                697,
                "                        response.Wait(5000);"
            ],
            [
                698,
                ""
            ],
            [
                699,
                "                        if (response.IsCompleted)"
            ],
            [
                700,
                "                        {"
            ],
            [
                701,
                "                            if (response.Result.StatusCode == HttpStatusCode.OK)"
            ],
            [
                703,
                "                                return true;"
            ],
            [
                704,
                "                            }"
            ],
            [
                705,
                "                            else"
            ],
            [
                706,
                "                            {"
            ],
            [
                707,
                "                                return false;"
            ],
            [
                710,
                ""
            ]
        ],
        "deleted": [
            [
                49,
                "                    HttpClientHandler handler = new HttpClientHandler();"
            ],
            [
                50,
                ""
            ],
            [
                51,
                "                    if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                53,
                "                        handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                54,
                "                        handler.UseProxy = true;"
            ],
            [
                55,
                "                    }"
            ],
            [
                57,
                "                    using (var oClient = new HttpClient(handler))"
            ],
            [
                58,
                "                    {"
            ],
            [
                59,
                "                        if (!string.IsNullOrEmpty(ProxyUserPW))"
            ],
            [
                61,
                "                            oClient.DefaultRequestHeaders.ProxyAuthorization = new AuthenticationHeaderValue(\"Basic\", Convert.ToBase64String(bProxyUser));"
            ],
            [
                63,
                "                        oClient.DefaultRequestHeaders.Add(\"Username\", Username);"
            ],
            [
                64,
                "                        oClient.DefaultRequestHeaders.Add(\"Password\", Password);"
            ],
            [
                65,
                "                        oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));"
            ],
            [
                66,
                "                        var response = oClient.GetStringAsync(sURL + \"/rest/AuthenticateUser\");"
            ],
            [
                67,
                "                        response.Wait(5000);"
            ],
            [
                68,
                "                        if (response.IsCompleted)"
            ],
            [
                70,
                "                            Token = response.Result.Replace(\"\\\"\", \"\");"
            ],
            [
                72,
                "                            // Set cache options."
            ],
            [
                73,
                "                            var cacheEntryOptions = new MemoryCacheEntryOptions()"
            ],
            [
                74,
                "                                // Keep in cache for this time, reset time if accessed."
            ],
            [
                75,
                "                                .SetSlidingExpiration(TimeSpan.FromSeconds(300));"
            ],
            [
                77,
                "                            _cache.Set(\"PW\" + (Username + Password).GetHashCode(StringComparison.InvariantCultureIgnoreCase), Token, cacheEntryOptions);"
            ],
            [
                79,
                "                            return Token;"
            ],
            [
                148,
                "                        response.Wait(7000); //7s max."
            ],
            [
                184,
                "                try"
            ],
            [
                186,
                "                    var oClient = new HttpClient();"
            ],
            [
                187,
                "                    oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                188,
                "                    oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));"
            ],
            [
                189,
                "                    var response = oClient.GetStringAsync(sURL + \"/rest/SWGetShort?name=\" + WebUtility.UrlEncode(Shortname));"
            ],
            [
                190,
                "                    response.Wait(5000);"
            ],
            [
                191,
                "                    if (response.IsCompleted)"
            ],
            [
                193,
                "                        sResult = response.Result;"
            ],
            [
                195,
                "                        // Set cache options."
            ],
            [
                196,
                "                        var cacheEntryOptions = new MemoryCacheEntryOptions()"
            ],
            [
                197,
                "                            .SetSlidingExpiration(TimeSpan.FromSeconds(330));"
            ],
            [
                199,
                "                        _cache.Set(\"SWGET1-\" + Shortname.GetHashCode(StringComparison.InvariantCultureIgnoreCase), sResult, cacheEntryOptions);"
            ],
            [
                201,
                "                        return sResult;"
            ],
            [
                204,
                "                catch { }"
            ],
            [
                217,
                "                    var oClient = new HttpClient();"
            ],
            [
                218,
                "                    oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                219,
                "                    oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));"
            ],
            [
                220,
                "                    var response = oClient.GetStringAsync(sURL + \"/rest/SWGet?name=\" + WebUtility.UrlEncode(PackageName) + \"&ver=\" + PackageVersion);"
            ],
            [
                221,
                "                    response.Wait(5000);"
            ],
            [
                222,
                "                    if (response.IsCompleted)"
            ],
            [
                224,
                "                        sResult = response.Result;"
            ],
            [
                225,
                ""
            ],
            [
                226,
                "                        // Set cache options."
            ],
            [
                227,
                "                        var cacheEntryOptions = new MemoryCacheEntryOptions()"
            ],
            [
                228,
                "                            .SetSlidingExpiration(TimeSpan.FromSeconds(330));"
            ],
            [
                229,
                "                        sResult = response.Result;"
            ],
            [
                230,
                "                        _cache.Set(\"SWGET2-\" + (PackageName + PackageVersion).GetHashCode(StringComparison.InvariantCultureIgnoreCase), sResult, cacheEntryOptions);"
            ],
            [
                231,
                "                        return sResult;"
            ],
            [
                247,
                "                    var oClient = new HttpClient();"
            ],
            [
                248,
                "                    oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                249,
                "                    oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));"
            ],
            [
                250,
                "                    var response = oClient.GetStringAsync(sURL + \"/rest/SWGetPkg?name=\" + WebUtility.UrlEncode(PackageName) + \"&manuf=\" + WebUtility.UrlEncode(Manufacturer) + \"&ver=\" + PackageVersion);"
            ],
            [
                251,
                "                    response.Wait(5000);"
            ],
            [
                252,
                "                    if (response.IsCompleted)"
            ],
            [
                254,
                "                        sResult = response.Result;"
            ],
            [
                255,
                ""
            ],
            [
                256,
                "                        // Set cache options."
            ],
            [
                257,
                "                        var cacheEntryOptions = new MemoryCacheEntryOptions()"
            ],
            [
                258,
                "                            .SetSlidingExpiration(TimeSpan.FromSeconds(330));"
            ],
            [
                259,
                "                        sResult = response.Result;"
            ],
            [
                260,
                "                        _cache.Set(\"SWGET3-\" + (PackageName + Manufacturer + PackageVersion).GetHashCode(StringComparison.InvariantCultureIgnoreCase), sResult, cacheEntryOptions);"
            ],
            [
                261,
                "                        return sResult;"
            ],
            [
                330,
                "                        response.Wait(5000);"
            ],
            [
                662,
                "                        if (contentType == \"application/xml\")"
            ],
            [
                663,
                "                        {"
            ],
            [
                664,
                "                            var response = oClient.PostAsync(sURL + \"/rest/UploadSWEntry\", oCont);"
            ],
            [
                665,
                "                            response.Wait(5000);"
            ],
            [
                667,
                "                            if (response.IsCompleted)"
            ],
            [
                669,
                "                                if (response.Result.StatusCode == HttpStatusCode.OK)"
            ],
            [
                670,
                "                                {"
            ],
            [
                671,
                "                                    return true;"
            ],
            [
                672,
                "                                }"
            ],
            [
                673,
                "                                else"
            ],
            [
                674,
                "                                {"
            ],
            [
                675,
                "                                    return false;"
            ],
            [
                676,
                "                                }"
            ]
        ]
    },
    "num_lines_added": 112,
    "num_lines_removed": 80
}