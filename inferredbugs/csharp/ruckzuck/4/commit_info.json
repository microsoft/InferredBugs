{
    "hash": "11ff15c769f4c4cf2edaac9a43bb8d745f5afc54",
    "message": "Proxy support\n\nProxy and ProxyUserPW variable added. ProxyUserPW is using Basic auth\nfor the Proxy and the format is <username:password>",
    "file_num_lines": 747,
    "diff_parsed": {
        "added": [
            [
                31,
                "        public static string Proxy = \"\";"
            ],
            [
                32,
                "        public static string ProxyUserPW = \"\";"
            ],
            [
                33,
                ""
            ],
            [
                34,
                "        private static byte[] bProxyUser"
            ],
            [
                35,
                "        {"
            ],
            [
                36,
                "            get"
            ],
            [
                37,
                "            {"
            ],
            [
                38,
                "                return Encoding.ASCII.GetBytes(ProxyUserPW);"
            ],
            [
                39,
                "            }"
            ],
            [
                40,
                "        }"
            ],
            [
                49,
                "                    HttpClientHandler handler = new HttpClientHandler();"
            ],
            [
                50,
                ""
            ],
            [
                51,
                "                    if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                52,
                "                    {"
            ],
            [
                53,
                "                        handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                54,
                "                        handler.UseProxy = true;"
            ],
            [
                55,
                "                    }"
            ],
            [
                56,
                ""
            ],
            [
                57,
                "                    using (var oClient = new HttpClient(handler))"
            ],
            [
                59,
                "                        if (!string.IsNullOrEmpty(ProxyUserPW))"
            ],
            [
                60,
                "                        {"
            ],
            [
                61,
                "                            oClient.DefaultRequestHeaders.ProxyAuthorization = new AuthenticationHeaderValue(\"Basic\", Convert.ToBase64String(bProxyUser));"
            ],
            [
                62,
                "                        }"
            ],
            [
                133,
                "                    if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                134,
                "                    {"
            ],
            [
                135,
                "                        handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                136,
                "                        handler.UseProxy = true;"
            ],
            [
                137,
                "                    }"
            ],
            [
                138,
                ""
            ],
            [
                141,
                "                        if (!string.IsNullOrEmpty(ProxyUserPW))"
            ],
            [
                142,
                "                        {"
            ],
            [
                143,
                "                            oClient.DefaultRequestHeaders.ProxyAuthorization = new AuthenticationHeaderValue(\"Basic\", Convert.ToBase64String(bProxyUser));"
            ],
            [
                144,
                "                        }"
            ],
            [
                319,
                "                    if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                320,
                "                    {"
            ],
            [
                321,
                "                        handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                322,
                "                        handler.UseProxy = true;"
            ],
            [
                323,
                "                    }"
            ],
            [
                324,
                ""
            ],
            [
                476,
                "                    using (var handler = new HttpClientHandler())"
            ],
            [
                478,
                "                        handler.AllowAutoRedirect = true;"
            ],
            [
                479,
                "                        handler.MaxAutomaticRedirections = 5;"
            ],
            [
                480,
                "                        handler.CheckCertificateRevocationList = false;"
            ],
            [
                481,
                ""
            ],
            [
                482,
                "                        if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                483,
                "                        {"
            ],
            [
                484,
                "                            handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                485,
                "                            handler.UseProxy = true;"
            ],
            [
                486,
                "                        }"
            ],
            [
                487,
                ""
            ],
            [
                488,
                "                        using (var oClient = new HttpClient(handler))"
            ],
            [
                489,
                "                        {"
            ],
            [
                490,
                ""
            ],
            [
                491,
                "                            //oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                492,
                "                            oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"image/jpeg\"));"
            ],
            [
                493,
                "                            var response = oClient.GetStreamAsync(sURL + \"/rest/GetIcon?id=\" + iconid.ToString());"
            ],
            [
                494,
                "                            response.Wait(5000);"
            ],
            [
                495,
                "                            if (response.IsCompleted)"
            ],
            [
                496,
                "                            {"
            ],
            [
                497,
                "                                var oRet = response.Result;"
            ],
            [
                498,
                "                                using (var sIcon = new FileStream(@\"wwwroot/icons/\" + iconid.ToString() + \".jpg\", FileMode.Create))"
            ],
            [
                499,
                "                                {"
            ],
            [
                500,
                "                                    response.Result.CopyTo(sIcon);"
            ],
            [
                501,
                "                                    sIcon.Flush();"
            ],
            [
                502,
                "                                    sIcon.Dispose();"
            ],
            [
                503,
                "                                }"
            ],
            [
                504,
                "                                return File.Open(@\"wwwroot/icons/\" + iconid.ToString() + \".jpg\", FileMode.Open);"
            ],
            [
                505,
                "                            }"
            ],
            [
                506,
                "                        }"
            ],
            [
                568,
                "                using (var handler = new HttpClientHandler())"
            ],
            [
                570,
                "                    handler.AllowAutoRedirect = true;"
            ],
            [
                571,
                "                    handler.MaxAutomaticRedirections = 5;"
            ],
            [
                572,
                "                    handler.CheckCertificateRevocationList = false;"
            ],
            [
                573,
                ""
            ],
            [
                574,
                "                    if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                576,
                "                        handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                577,
                "                        handler.UseProxy = true;"
            ],
            [
                580,
                "                    using (var oClient = new HttpClient(handler))"
            ],
            [
                582,
                "                        oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                583,
                "                        oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));"
            ],
            [
                584,
                "                        HttpContent oCont = new StringContent(lSoftware, Encoding.UTF8, contentType);"
            ],
            [
                585,
                "                        if (contentType == \"application/xml\")"
            ],
            [
                587,
                "                            var response = oClient.PostAsync(sURL + \"/rest/CheckForUpdateXml\", oCont);"
            ],
            [
                588,
                "                            response.Wait(10000);"
            ],
            [
                589,
                "                            if (response.IsCompleted)"
            ],
            [
                590,
                "                            {"
            ],
            [
                591,
                "                                string responseBody = response.Result.Content.ReadAsStringAsync().Result;"
            ],
            [
                592,
                "                                sResult = responseBody;"
            ],
            [
                593,
                "                                return sResult;"
            ],
            [
                594,
                "                            }"
            ],
            [
                595,
                "                        }"
            ],
            [
                597,
                "                        if (contentType == \"application/json\")"
            ],
            [
                598,
                "                        {"
            ],
            [
                599,
                "                            var response = oClient.PostAsync(sURL + \"/rest/CheckForUpdate\", oCont);"
            ],
            [
                600,
                "                            response.Wait(10000);"
            ],
            [
                601,
                "                            if (response.IsCompleted)"
            ],
            [
                603,
                "                                string responseBody = response.Result.Content.ReadAsStringAsync().Result;"
            ],
            [
                604,
                ""
            ],
            [
                605,
                "                                sResult = responseBody;"
            ],
            [
                607,
                "                                try"
            ],
            [
                608,
                "                                {"
            ],
            [
                609,
                "                                    var lSWUpd = Newtonsoft.Json.JsonConvert.DeserializeObject<List<AddSoftware>>(sResult);"
            ],
            [
                610,
                "                                    if (lSWUpd.Count == 0) //No Updates found -> cache all SW Items to prevent further check"
            ],
            [
                612,
                "                                        // Set cache options."
            ],
            [
                613,
                "                                        var cacheEntryOptions = new MemoryCacheEntryOptions()"
            ],
            [
                614,
                "                                            .SetSlidingExpiration(new TimeSpan(4, 0, 0)); //Cache 4h"
            ],
            [
                615,
                ""
            ],
            [
                616,
                "                                        foreach (AddSoftware oSW in lSWToCheck)"
            ],
            [
                617,
                "                                        {"
            ],
            [
                618,
                "                                            _cache.Set(\"noUpd\" + oSW.ProductName + oSW.ProductVersion + oSW.Manufacturer, oSW, cacheEntryOptions);"
            ],
            [
                619,
                "                                        }"
            ],
            [
                622,
                "                                catch { }"
            ],
            [
                624,
                "                                return sResult;"
            ],
            [
                625,
                "                            }"
            ],
            [
                641,
                "                using (var handler = new HttpClientHandler())"
            ],
            [
                643,
                "                    handler.AllowAutoRedirect = true;"
            ],
            [
                644,
                "                    handler.MaxAutomaticRedirections = 5;"
            ],
            [
                645,
                "                    handler.CheckCertificateRevocationList = false;"
            ],
            [
                647,
                "                    if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                649,
                "                        handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                650,
                "                        handler.UseProxy = true;"
            ],
            [
                652,
                ""
            ],
            [
                653,
                "                    using (var oClient = new HttpClient(handler))"
            ],
            [
                655,
                "                        if (!string.IsNullOrEmpty(ProxyUserPW))"
            ],
            [
                656,
                "                        {"
            ],
            [
                657,
                "                            oClient.DefaultRequestHeaders.ProxyAuthorization = new AuthenticationHeaderValue(\"Basic\", Convert.ToBase64String(bProxyUser));"
            ],
            [
                658,
                "                        }"
            ],
            [
                659,
                "                        oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                660,
                "                        oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));"
            ],
            [
                661,
                "                        HttpContent oCont = new StringContent(lSoftware, Encoding.UTF8, contentType);"
            ],
            [
                662,
                "                        if (contentType == \"application/xml\")"
            ],
            [
                663,
                "                        {"
            ],
            [
                664,
                "                            var response = oClient.PostAsync(sURL + \"/rest/UploadSWEntry\", oCont);"
            ],
            [
                665,
                "                            response.Wait(5000);"
            ],
            [
                666,
                ""
            ],
            [
                667,
                "                            if (response.IsCompleted)"
            ],
            [
                668,
                "                            {"
            ],
            [
                669,
                "                                if (response.Result.StatusCode == HttpStatusCode.OK)"
            ],
            [
                670,
                "                                {"
            ],
            [
                671,
                "                                    return true;"
            ],
            [
                672,
                "                                }"
            ],
            [
                673,
                "                                else"
            ],
            [
                674,
                "                                {"
            ],
            [
                675,
                "                                    return false;"
            ],
            [
                676,
                "                                }"
            ],
            [
                677,
                "                            }"
            ],
            [
                678,
                "                        }"
            ],
            [
                708,
                "                    if (!string.IsNullOrEmpty(Proxy))"
            ],
            [
                709,
                "                    {"
            ],
            [
                710,
                "                        handler.Proxy = new WebProxy(Proxy, true);"
            ],
            [
                711,
                "                        handler.UseProxy = true;"
            ],
            [
                712,
                "                    }"
            ],
            [
                713,
                ""
            ]
        ],
        "deleted": [
            [
                39,
                "                    using (var oClient = new HttpClient())"
            ],
            [
                283,
                ""
            ],
            [
                439,
                "                    var oClient = new HttpClient();"
            ],
            [
                440,
                ""
            ],
            [
                441,
                "                    //oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                442,
                "                    oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"image/jpeg\"));"
            ],
            [
                443,
                "                    var response = oClient.GetStreamAsync(sURL + \"/rest/GetIcon?id=\" + iconid.ToString());"
            ],
            [
                444,
                "                    response.Wait(5000);"
            ],
            [
                445,
                "                    if (response.Result != null)"
            ],
            [
                447,
                "                        var oRet = response.Result;"
            ],
            [
                448,
                "                        var sIcon = new System.IO.FileStream(@\"wwwroot/icons/\" + iconid.ToString() + \".jpg\", FileMode.Create);"
            ],
            [
                449,
                "                        response.Result.CopyTo(sIcon);"
            ],
            [
                450,
                "                        sIcon.Flush();"
            ],
            [
                451,
                "                        sIcon.Dispose();"
            ],
            [
                452,
                "                        return File.Open(@\"wwwroot/icons/\" + iconid.ToString() + \".jpg\", FileMode.Open);"
            ],
            [
                514,
                "                using (var oClient = new HttpClient())"
            ],
            [
                516,
                "                    oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                517,
                "                    oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));"
            ],
            [
                518,
                "                    HttpContent oCont = new StringContent(lSoftware, Encoding.UTF8, contentType);"
            ],
            [
                519,
                "                    if (contentType == \"application/xml\")"
            ],
            [
                521,
                "                        var response = oClient.PostAsync(sURL + \"/rest/CheckForUpdateXml\", oCont);"
            ],
            [
                522,
                "                        response.Wait(10000);"
            ],
            [
                523,
                "                        if (response.IsCompleted)"
            ],
            [
                524,
                "                        {"
            ],
            [
                525,
                "                            string responseBody = response.Result.Content.ReadAsStringAsync().Result;"
            ],
            [
                526,
                "                            sResult = responseBody;"
            ],
            [
                527,
                "                            return sResult;"
            ],
            [
                528,
                "                        }"
            ],
            [
                531,
                "                    if (contentType == \"application/json\")"
            ],
            [
                533,
                "                        var response = oClient.PostAsync(sURL + \"/rest/CheckForUpdate\", oCont);"
            ],
            [
                534,
                "                        response.Wait(10000);"
            ],
            [
                535,
                "                        if (response.IsCompleted)"
            ],
            [
                537,
                "                            string responseBody = response.Result.Content.ReadAsStringAsync().Result;"
            ],
            [
                538,
                ""
            ],
            [
                539,
                "                            sResult = responseBody;"
            ],
            [
                541,
                "                            try"
            ],
            [
                543,
                "                                var lSWUpd = Newtonsoft.Json.JsonConvert.DeserializeObject<List<AddSoftware>>(sResult);"
            ],
            [
                544,
                "                                if (lSWUpd.Count == 0) //No Updates found -> cache all SW Items to prevent further check"
            ],
            [
                545,
                "                                {"
            ],
            [
                546,
                "                                    // Set cache options."
            ],
            [
                547,
                "                                    var cacheEntryOptions = new MemoryCacheEntryOptions()"
            ],
            [
                548,
                "                                        .SetSlidingExpiration(new TimeSpan(4, 0, 0)); //Cache 4h"
            ],
            [
                550,
                "                                    foreach (AddSoftware oSW in lSWToCheck)"
            ],
            [
                552,
                "                                        _cache.Set(\"noUpd\" + oSW.ProductName + oSW.ProductVersion + oSW.Manufacturer, oSW, cacheEntryOptions);"
            ],
            [
                555,
                "                            }"
            ],
            [
                556,
                "                            catch { }"
            ],
            [
                558,
                "                            return sResult;"
            ],
            [
                574,
                "                var oClient = new HttpClient();"
            ],
            [
                575,
                "                oClient.DefaultRequestHeaders.Add(\"AuthenticatedToken\", Token);"
            ],
            [
                576,
                "                oClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));"
            ],
            [
                577,
                "                HttpContent oCont = new StringContent(lSoftware, Encoding.UTF8, contentType);"
            ],
            [
                578,
                "                if (contentType == \"application/xml\")"
            ],
            [
                580,
                "                    var response = oClient.PostAsync(sURL + \"/rest/UploadSWEntry\", oCont);"
            ],
            [
                581,
                "                    response.Wait(5000);"
            ],
            [
                583,
                "                    if (response.Result.StatusCode == HttpStatusCode.OK)"
            ],
            [
                585,
                "                        return true;"
            ],
            [
                587,
                "                    else"
            ],
            [
                589,
                "                        return false;"
            ]
        ]
    },
    "num_lines_added": 153,
    "num_lines_removed": 58
}