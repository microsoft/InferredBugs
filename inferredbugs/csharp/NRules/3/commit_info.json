{
    "hash": "bb6ffb45c2325188a7af4983e69c442c09ff4a79",
    "message": "Respect JSON serialization options for property names",
    "file_num_lines": 227,
    "diff_parsed": {
        "added": [
            [
                9,
                "using static NRules.Json.JsonUtilities;"
            ],
            [
                10,
                ""
            ],
            [
                24,
                "                !JsonNameConvertEquals(nameof(Expression.NodeType), reader.GetString(), options)) throw new JsonException();"
            ],
            [
                46,
                "            writer.WriteString(JsonName(nameof(value.NodeType), options), value.NodeType.ToString());"
            ],
            [
                71,
                "                var propertyName = JsonName(reader.GetString(), options);"
            ],
            [
                74,
                "                if (JsonNameEquals(propertyName, nameof(LambdaExpression.Type), options))"
            ],
            [
                78,
                "                else if (JsonNameEquals(propertyName, nameof(LambdaExpression.Body), options))"
            ],
            [
                82,
                "                else if (JsonNameEquals(propertyName, nameof(LambdaExpression.Parameters), options))"
            ],
            [
                104,
                "            writer.WritePropertyName(JsonName(nameof(value.Type), options));"
            ],
            [
                107,
                "            writer.WritePropertyName(JsonName(nameof(value.Body), options));"
            ],
            [
                110,
                "            writer.WriteStartArray(JsonName(nameof(value.Parameters), options));"
            ],
            [
                126,
                "                var propertyName = JsonName(reader.GetString(), options);"
            ],
            [
                129,
                "                if (JsonNameEquals(propertyName, nameof(ParameterExpression.Name), options))"
            ],
            [
                133,
                "                else if (JsonNameEquals(propertyName, nameof(ParameterExpression.Type), options))"
            ],
            [
                144,
                "            writer.WriteString(JsonName(nameof(value.Name), options), value.Name);"
            ],
            [
                146,
                "            writer.WritePropertyName(JsonName(nameof(value.Type), options));"
            ],
            [
                160,
                "                var propertyName = JsonName(reader.GetString(), options);"
            ],
            [
                163,
                "                if (JsonNameEquals(propertyName, nameof(MemberExpression.Expression), options))"
            ],
            [
                167,
                "                else if (JsonNameEquals(propertyName, nameof(MemberExpression.Member.MemberType), options))"
            ],
            [
                171,
                "                else if (JsonNameEquals(propertyName, nameof(MemberExpression.Member.Name), options))"
            ],
            [
                175,
                "                else if (JsonNameEquals(propertyName, nameof(MemberExpression.Member.DeclaringType), options))"
            ],
            [
                183,
                "                member = declaringType!.GetField(name!);"
            ],
            [
                185,
                "                member = declaringType!.GetProperty(name!);"
            ],
            [
                194,
                "            writer.WriteString(JsonName(nameof(value.Member.MemberType), options), value.Member.MemberType.ToString());"
            ],
            [
                195,
                "            writer.WriteString(JsonName(nameof(value.Member.Name), options), value.Member.Name);"
            ],
            [
                196,
                "            writer.WritePropertyName(JsonName(nameof(value.Member.DeclaringType), options));"
            ],
            [
                199,
                "            writer.WritePropertyName(JsonName(nameof(value.Expression), options));"
            ],
            [
                213,
                "                var propertyName = JsonName(reader.GetString(), options);"
            ],
            [
                216,
                "                if (JsonNameEquals(propertyName, nameof(MethodCallExpression.Object), options))"
            ],
            [
                220,
                "                else if (JsonNameEquals(propertyName, nameof(MethodCallExpression.Method.Name), options))"
            ],
            [
                224,
                "                else if (JsonNameEquals(propertyName, nameof(MethodCallExpression.Method.DeclaringType), options))"
            ],
            [
                228,
                "                else if (JsonNameEquals(propertyName, nameof(MethodCallExpression.Arguments), options))"
            ],
            [
                247,
                "            writer.WriteString(JsonName(nameof(value.Method.Name), options), value.Method.Name);"
            ],
            [
                248,
                "            writer.WritePropertyName(JsonName(nameof(value.Method.DeclaringType), options));"
            ],
            [
                253,
                "                writer.WritePropertyName(JsonName(nameof(value.Object), options));"
            ],
            [
                257,
                "            if (value.Arguments.Any())"
            ],
            [
                259,
                "                writer.WriteStartArray(JsonName(nameof(value.Arguments), options));"
            ],
            [
                260,
                "                foreach (var argument in value.Arguments)"
            ],
            [
                261,
                "                {"
            ],
            [
                262,
                "                    JsonSerializer.Serialize(writer, argument, options);"
            ],
            [
                263,
                "                }"
            ],
            [
                265,
                ""
            ]
        ],
        "deleted": [
            [
                22,
                "                reader.GetString() != nameof(Expression.NodeType)) throw new JsonException();"
            ],
            [
                44,
                "            writer.WriteString(nameof(value.NodeType), value.NodeType.ToString());"
            ],
            [
                69,
                "                var propertyName = reader.GetString();"
            ],
            [
                72,
                "                if (propertyName == nameof(LambdaExpression.Type))"
            ],
            [
                76,
                "                else if (propertyName == nameof(LambdaExpression.Body))"
            ],
            [
                80,
                "                else if (propertyName == nameof(LambdaExpression.Parameters))"
            ],
            [
                102,
                "            writer.WritePropertyName(nameof(value.Type));"
            ],
            [
                105,
                "            writer.WritePropertyName(nameof(value.Body));"
            ],
            [
                108,
                "            writer.WriteStartArray(nameof(value.Parameters));"
            ],
            [
                124,
                "                var propertyName = reader.GetString();"
            ],
            [
                127,
                "                if (propertyName == nameof(ParameterExpression.Name))"
            ],
            [
                131,
                "                else if (propertyName == nameof(ParameterExpression.Type))"
            ],
            [
                142,
                "            writer.WriteString(nameof(value.Name), value.Name);"
            ],
            [
                144,
                "            writer.WritePropertyName(nameof(value.Type));"
            ],
            [
                158,
                "                var propertyName = reader.GetString();"
            ],
            [
                161,
                "                if (propertyName == nameof(MemberExpression.Expression))"
            ],
            [
                165,
                "                else if (propertyName == nameof(MemberExpression.Member.MemberType))"
            ],
            [
                169,
                "                else if (propertyName == nameof(MemberExpression.Member.Name))"
            ],
            [
                173,
                "                else if (propertyName == nameof(MemberExpression.Member.DeclaringType))"
            ],
            [
                181,
                "                member = declaringType.GetField(name);"
            ],
            [
                183,
                "                member = declaringType.GetProperty(name);"
            ],
            [
                192,
                "            writer.WriteString(nameof(value.Member.MemberType), value.Member.MemberType.ToString());"
            ],
            [
                193,
                "            writer.WriteString(nameof(value.Member.Name), value.Member.Name);"
            ],
            [
                194,
                "            writer.WritePropertyName(nameof(value.Member.DeclaringType));"
            ],
            [
                197,
                "            writer.WritePropertyName(nameof(value.Expression));"
            ],
            [
                211,
                "                var propertyName = reader.GetString();"
            ],
            [
                214,
                "                if (propertyName == nameof(MethodCallExpression.Object))"
            ],
            [
                218,
                "                else if (propertyName == nameof(MethodCallExpression.Method.Name))"
            ],
            [
                222,
                "                else if (propertyName == nameof(MethodCallExpression.Method.DeclaringType))"
            ],
            [
                226,
                "                else if (propertyName == nameof(MethodCallExpression.Arguments))"
            ],
            [
                245,
                "            writer.WriteString(nameof(value.Method.Name), value.Method.Name);"
            ],
            [
                246,
                "            writer.WritePropertyName(nameof(value.Method.DeclaringType));"
            ],
            [
                251,
                "                writer.WritePropertyName(nameof(value.Object));"
            ],
            [
                255,
                "            writer.WriteStartArray(nameof(value.Arguments));"
            ],
            [
                256,
                "            foreach (var argument in value.Arguments)"
            ],
            [
                258,
                "                JsonSerializer.Serialize(writer, argument, options);"
            ]
        ]
    },
    "num_lines_added": 42,
    "num_lines_removed": 36
}