        private Expression ReadMember(ref Utf8JsonReader reader, JsonSerializerOptions options)
        {
            Expression expression = default;
            MemberTypes memberType = default;
            string name = default;
            Type declaringType = default;

            while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
            {
                if (reader.TokenType != JsonTokenType.PropertyName) throw new JsonException();
                var propertyName = reader.GetString();
                reader.Read();

                if (propertyName == nameof(MemberExpression.Expression))
                {
                    expression = JsonSerializer.Deserialize<Expression>(ref reader, options);
                }
                else if (propertyName == nameof(MemberExpression.Member.MemberType))
                {
                    Enum.TryParse(reader.GetString(), out memberType);
                }
                else if (propertyName == nameof(MemberExpression.Member.Name))
                {
                    name = reader.GetString();
                }
                else if (propertyName == nameof(MemberExpression.Member.DeclaringType))
                {
                    declaringType = JsonSerializer.Deserialize<Type>(ref reader, options);
                }
            }

            MemberInfo member;
            if (memberType == MemberTypes.Field)
                member = declaringType.GetField(name);
            else if (memberType == MemberTypes.Property)
                member = declaringType.GetProperty(name);
            else
                throw new NotSupportedException($"MemberType={memberType}");

            return Expression.MakeMemberAccess(expression, member!);
        }