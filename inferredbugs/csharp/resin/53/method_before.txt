        public static IServiceProvider Configure(IServiceCollection services)
        {
            var assemblyPath = Directory.GetCurrentDirectory();
            var config = new KeyValueConfiguration(Path.Combine(assemblyPath, "sir.ini"));

            services.Add(new ServiceDescriptor(typeof(IConfigurationProvider), config));

            var loggerFactory = services.BuildServiceProvider().GetService<ILoggerFactory>();
            var logger = loggerFactory.CreateLogger("Sir");
            var model = new BagOfCharsModel();
            var sessionFactory = new StreamFactory(logger);
            var directory = config.Get("data_dir");
            var qp = new QueryParser<string>(directory, sessionFactory, model, logger);
            var httpParser = new HttpQueryParser(qp);

            services.AddSingleton(typeof(IModel<string>), model);
            services.AddSingleton(typeof(IStreamFactory), sessionFactory);
            services.AddSingleton(typeof(StreamFactory), sessionFactory);
            services.AddSingleton(typeof(QueryParser<string>), qp);
            services.AddSingleton(typeof(HttpQueryParser), httpParser);
            services.AddSingleton(typeof(IHttpWriter), new HttpWriter(sessionFactory, config));
            services.AddSingleton(typeof(IHttpReader), new HttpReader(
                sessionFactory,
                httpParser,
                config,
                loggerFactory.CreateLogger<HttpReader>()));

            return services.BuildServiceProvider();
        }