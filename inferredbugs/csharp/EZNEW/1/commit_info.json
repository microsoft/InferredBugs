{
    "hash": "bfeebe04e84e1130c083c718c1a35e508783361a",
    "message": "'modify'",
    "file_num_lines": 2195,
    "diff_parsed": {
        "added": [
            [
                238,
                "        /// <summary>"
            ],
            [
                239,
                "        /// atomic condition count"
            ],
            [
                240,
                "        /// </summary>"
            ],
            [
                241,
                "        public int AtomicConditionCount { get; private set; } = 0;"
            ],
            [
                242,
                ""
            ],
            [
                243,
                "        /// <summary>"
            ],
            [
                244,
                "        /// all condition field names"
            ],
            [
                245,
                "        /// </summary>"
            ],
            [
                246,
                "        public List<string> AllConditionFieldNames { get; private set; } = new List<string>();"
            ],
            [
                247,
                ""
            ],
            [
                1156,
                "        #region NotLike"
            ],
            [
                1157,
                ""
            ],
            [
                1158,
                "        /// <summary>"
            ],
            [
                1159,
                "        /// Not Like Condition"
            ],
            [
                1160,
                "        /// </summary>"
            ],
            [
                1161,
                "        /// <param name=\"fieldName\">field</param>"
            ],
            [
                1162,
                "        /// <param name=\"value\">value</param>"
            ],
            [
                1163,
                "        /// <param name=\"or\">connect with 'and'(true/default) or 'or'(false)</param>"
            ],
            [
                1164,
                "        /// <returns>return newest instance</returns>"
            ],
            [
                1165,
                "        public IQuery NotLike(string fieldName, string value, bool or = false, ICriteriaConvert convert = null)"
            ],
            [
                1166,
                "        {"
            ],
            [
                1167,
                "            AddCriteria(or ? QueryOperator.OR : QueryOperator.AND, fieldName, CriteriaOperator.NotLike, value, convert);"
            ],
            [
                1168,
                "            return this;"
            ],
            [
                1169,
                "        }"
            ],
            [
                1170,
                ""
            ],
            [
                1171,
                "        /// <summary>"
            ],
            [
                1172,
                "        /// Not Like Condition"
            ],
            [
                1173,
                "        /// </summary>"
            ],
            [
                1174,
                "        /// <param name=\"field\">field</param>"
            ],
            [
                1175,
                "        /// <param name=\"value\">value</param>"
            ],
            [
                1176,
                "        /// <param name=\"or\">connect with 'and'(true/default) or 'or'(false)</param>"
            ],
            [
                1177,
                "        /// <returns>return newest instance</returns>"
            ],
            [
                1178,
                "        public IQuery NotLike<T>(Expression<Func<T, dynamic>> field, string value, bool or = false, ICriteriaConvert convert = null) where T : QueryModel<T>"
            ],
            [
                1179,
                "        {"
            ],
            [
                1180,
                "            AddCriteria(or ? QueryOperator.OR : QueryOperator.AND, ExpressionHelper.GetExpressionPropertyName(field.Body), CriteriaOperator.NotLike, value, convert);"
            ],
            [
                1181,
                "            return this;"
            ],
            [
                1182,
                "        }"
            ],
            [
                1183,
                ""
            ],
            [
                1184,
                "        #endregion"
            ],
            [
                1185,
                ""
            ],
            [
                1216,
                "        #region BeginLike"
            ],
            [
                1217,
                ""
            ],
            [
                1218,
                "        /// <summary>"
            ],
            [
                1219,
                "        /// Not Begin Like Condition"
            ],
            [
                1220,
                "        /// </summary>"
            ],
            [
                1221,
                "        /// <param name=\"fieldName\">field</param>"
            ],
            [
                1222,
                "        /// <param name=\"value\">value</param>"
            ],
            [
                1223,
                "        /// <param name=\"or\">connect with 'and'(true/default) or 'or'(false)</param>"
            ],
            [
                1224,
                "        /// <returns>return newest instance</returns>"
            ],
            [
                1225,
                "        public IQuery NotBeginLike(string fieldName, string value, bool or = false, ICriteriaConvert convert = null)"
            ],
            [
                1226,
                "        {"
            ],
            [
                1227,
                "            AddCriteria(or ? QueryOperator.OR : QueryOperator.AND, fieldName, CriteriaOperator.NotBeginLike, value, convert);"
            ],
            [
                1228,
                "            return this;"
            ],
            [
                1229,
                "        }"
            ],
            [
                1230,
                ""
            ],
            [
                1231,
                "        /// <summary>"
            ],
            [
                1232,
                "        /// Not Begin Like Condition"
            ],
            [
                1233,
                "        /// </summary>"
            ],
            [
                1234,
                "        /// <param name=\"field\">field</param>"
            ],
            [
                1235,
                "        /// <param name=\"value\">value</param>"
            ],
            [
                1236,
                "        /// <param name=\"or\">connect with 'and'(true/default) or 'or'(false)</param>"
            ],
            [
                1237,
                "        /// <returns>return newest instance</returns>"
            ],
            [
                1238,
                "        public IQuery NotBeginLike<T>(Expression<Func<T, dynamic>> field, string value, bool or = false, ICriteriaConvert convert = null) where T : QueryModel<T>"
            ],
            [
                1239,
                "        {"
            ],
            [
                1240,
                "            AddCriteria(or ? QueryOperator.OR : QueryOperator.AND, ExpressionHelper.GetExpressionPropertyName(field.Body), CriteriaOperator.NotBeginLike, value, convert);"
            ],
            [
                1241,
                "            return this;"
            ],
            [
                1242,
                "        }"
            ],
            [
                1243,
                ""
            ],
            [
                1244,
                "        #endregion"
            ],
            [
                1245,
                ""
            ],
            [
                1276,
                "        #region EndLike"
            ],
            [
                1277,
                ""
            ],
            [
                1278,
                "        /// <summary>"
            ],
            [
                1279,
                "        /// Not End Like Condition"
            ],
            [
                1280,
                "        /// </summary>"
            ],
            [
                1281,
                "        /// <param name=\"fieldName\">field</param>"
            ],
            [
                1282,
                "        /// <param name=\"value\">value</param>"
            ],
            [
                1283,
                "        /// <param name=\"or\">connect with 'and'(true/default) or 'or'(false)</param>"
            ],
            [
                1284,
                "        /// <returns>return newest instance</returns>"
            ],
            [
                1285,
                "        public IQuery NotEndLike(string fieldName, string value, bool or = false, ICriteriaConvert convert = null)"
            ],
            [
                1286,
                "        {"
            ],
            [
                1287,
                "            AddCriteria(or ? QueryOperator.OR : QueryOperator.AND, fieldName, CriteriaOperator.NotEndLike, value, convert);"
            ],
            [
                1288,
                "            return this;"
            ],
            [
                1289,
                "        }"
            ],
            [
                1290,
                ""
            ],
            [
                1291,
                "        /// <summary>"
            ],
            [
                1292,
                "        /// Not EndLike"
            ],
            [
                1293,
                "        /// </summary>"
            ],
            [
                1294,
                "        /// <param name=\"field\">field</param>"
            ],
            [
                1295,
                "        /// <param name=\"value\">value</param>"
            ],
            [
                1296,
                "        /// <param name=\"or\">connect with 'and'(true/default) or 'or'(false)</param>"
            ],
            [
                1297,
                "        /// <returns>return newest instance</returns>"
            ],
            [
                1298,
                "        public IQuery NotEndLike<T>(Expression<Func<T, dynamic>> field, string value, bool or = false, ICriteriaConvert convert = null) where T : QueryModel<T>"
            ],
            [
                1299,
                "        {"
            ],
            [
                1300,
                "            AddCriteria(or ? QueryOperator.OR : QueryOperator.AND, ExpressionHelper.GetExpressionPropertyName(field.Body), CriteriaOperator.NotEndLike, value, convert);"
            ],
            [
                1301,
                "            return this;"
            ],
            [
                1302,
                "        }"
            ],
            [
                1303,
                ""
            ],
            [
                1304,
                "        #endregion"
            ],
            [
                1305,
                ""
            ],
            [
                4051,
                ""
            ],
            [
                4053,
                "            query.AtomicConditionCount++;"
            ],
            [
                4054,
                "            query.AllConditionFieldNames.Add(criteria.Name);"
            ],
            [
                4068,
                "            query.AtomicConditionCount += valueQuery.AtomicConditionCount;"
            ],
            [
                4069,
                "            query.AllConditionFieldNames.AddRange(valueQuery.AllConditionFieldNames);"
            ],
            [
                4128,
                "                return GetCallExpressionQueryItem(queryOperator, expression);"
            ],
            [
                4135,
                "                    return GetCallExpressionQueryItem(queryOperator, unaryExpress.Operand, true);"
            ],
            [
                4147,
                "        Tuple<QueryOperator, IQueryItem> GetCallExpressionQueryItem(QueryOperator queryOperator, Expression expression, bool negation = false)"
            ],
            [
                4150,
                "            MemberExpression memberArg = null;"
            ],
            [
                4151,
                "            Expression parameterExpression = null;"
            ],
            [
                4152,
                "            if (callExpression.Object != null)"
            ],
            [
                4153,
                "            {"
            ],
            [
                4154,
                "                memberArg = callExpression.Object as MemberExpression;"
            ],
            [
                4155,
                "                parameterExpression = callExpression.Arguments[0];"
            ],
            [
                4156,
                "            }"
            ],
            [
                4157,
                "            else if (callExpression.Arguments.Count == 2)"
            ],
            [
                4158,
                "            {"
            ],
            [
                4159,
                "                memberArg = callExpression.Arguments[0] as MemberExpression;"
            ],
            [
                4160,
                "                parameterExpression = callExpression.Arguments[1];"
            ],
            [
                4161,
                "            }"
            ],
            [
                4162,
                "            if (memberArg == null || parameterExpression == null)"
            ],
            [
                4163,
                "            {"
            ],
            [
                4164,
                "                return null;"
            ],
            [
                4165,
                "            }"
            ],
            [
                4166,
                "            Criteria criteria = null;"
            ],
            [
                4167,
                "            var dataType = memberArg.Type;"
            ],
            [
                4168,
                "            if (dataType == typeof(string))"
            ],
            [
                4169,
                "            {"
            ],
            [
                4170,
                "                criteria = GetStringCallExpressionQueryItem(callExpression.Method.Name, memberArg, parameterExpression, negation);"
            ],
            [
                4171,
                "            }"
            ],
            [
                4172,
                "            else if (typeof(IEnumerable).IsAssignableFrom(memberArg.Type))"
            ],
            [
                4173,
                "            {"
            ],
            [
                4174,
                "                criteria = GetIEnumerableCallExpressionQueryItem(callExpression.Method.Name, parameterExpression, memberArg, negation);"
            ],
            [
                4175,
                "            }"
            ],
            [
                4176,
                "            if (criteria != null)"
            ],
            [
                4177,
                "            {"
            ],
            [
                4178,
                "                return new Tuple<QueryOperator, IQueryItem>(queryOperator, criteria);"
            ],
            [
                4179,
                "            }"
            ],
            [
                4180,
                "            return null;"
            ],
            [
                4181,
                "        }"
            ],
            [
                4182,
                ""
            ],
            [
                4183,
                "        /// <summary>"
            ],
            [
                4184,
                "        /// get string call expression query item"
            ],
            [
                4185,
                "        /// </summary>"
            ],
            [
                4186,
                "        /// <param name=\"methodName\">method name</param>"
            ],
            [
                4187,
                "        /// <param name=\"expression\">expression</param>"
            ],
            [
                4188,
                "        /// <param name=\"negation\">negation</param>"
            ],
            [
                4189,
                "        /// <returns></returns>"
            ],
            [
                4190,
                "        Criteria GetStringCallExpressionQueryItem(string methodName, Expression memberArg, Expression parameter, bool negation = false)"
            ],
            [
                4191,
                "        {"
            ],
            [
                4192,
                "            Criteria criteria = null;"
            ],
            [
                4193,
                "            CriteriaOperator criteriaOperator = CriteriaOperator.Like;"
            ],
            [
                4194,
                "            //parameter name"
            ],
            [
                4195,
                "            string parameterName = string.Empty;"
            ],
            [
                4196,
                "            if (memberArg is ParameterExpression)"
            ],
            [
                4197,
                "            {"
            ],
            [
                4198,
                "                parameterName = (memberArg as ParameterExpression)?.Name;"
            ],
            [
                4199,
                "            }"
            ],
            [
                4200,
                "            else if (memberArg is MemberExpression)"
            ],
            [
                4201,
                "            {"
            ],
            [
                4202,
                "                parameterName = ExpressionHelper.GetExpressionPropertyName(memberArg as MemberExpression);"
            ],
            [
                4203,
                "            }"
            ],
            [
                4204,
                "            if (string.IsNullOrWhiteSpace(parameterName))"
            ],
            [
                4205,
                "            {"
            ],
            [
                4206,
                "                return null;"
            ],
            [
                4207,
                "            }"
            ],
            [
                4208,
                "            string value = Expression.Lambda(parameter)?.Compile().DynamicInvoke()?.ToString();"
            ],
            [
                4209,
                "            switch (methodName)"
            ],
            [
                4210,
                "            {"
            ],
            [
                4211,
                "                case \"EndsWith\":"
            ],
            [
                4212,
                "                    criteriaOperator = negation ? CriteriaOperator.NotEndLike : CriteriaOperator.EndLike;"
            ],
            [
                4213,
                "                    criteria = Criteria.CreateNewCriteria(parameterName, criteriaOperator, value);"
            ],
            [
                4214,
                "                    break;"
            ],
            [
                4215,
                "                case \"StartsWith\":"
            ],
            [
                4216,
                "                    criteriaOperator = negation ? CriteriaOperator.NotBeginLike : CriteriaOperator.BeginLike;"
            ],
            [
                4217,
                "                    criteria = Criteria.CreateNewCriteria(parameterName, criteriaOperator, value);"
            ],
            [
                4218,
                "                    break;"
            ],
            [
                4219,
                "                case \"Contains\":"
            ],
            [
                4220,
                "                    criteriaOperator = negation ? CriteriaOperator.NotLike : CriteriaOperator.Like;"
            ],
            [
                4221,
                "                    criteria = Criteria.CreateNewCriteria(parameterName, criteriaOperator, value);"
            ],
            [
                4222,
                "                    break;"
            ],
            [
                4223,
                "            }"
            ],
            [
                4224,
                "            return criteria;"
            ],
            [
                4225,
                "        }"
            ],
            [
                4226,
                ""
            ],
            [
                4227,
                "        /// <summary>"
            ],
            [
                4228,
                "        /// get ienumerable call expression query item"
            ],
            [
                4229,
                "        /// </summary>"
            ],
            [
                4230,
                "        /// <param name=\"methodName\">method name</param>"
            ],
            [
                4231,
                "        /// <param name=\"memberArg\">memberArg</param>"
            ],
            [
                4232,
                "        /// <param name=\"parameter\">parameter</param>"
            ],
            [
                4233,
                "        /// <param name=\"negation\">negation</param>"
            ],
            [
                4234,
                "        /// <returns></returns>"
            ],
            [
                4235,
                "        Criteria GetIEnumerableCallExpressionQueryItem(string methodName, Expression memberArg, Expression parameter, bool negation = false)"
            ],
            [
                4236,
                "        {"
            ],
            [
                4238,
                "            CriteriaOperator criteriaOperator = CriteriaOperator.In;"
            ],
            [
                4239,
                "            IEnumerable values = null;"
            ],
            [
                4240,
                "            string parameterName = string.Empty;"
            ],
            [
                4241,
                "            if (memberArg is ParameterExpression)"
            ],
            [
                4242,
                "            {"
            ],
            [
                4243,
                "                parameterName = (memberArg as ParameterExpression)?.Name;"
            ],
            [
                4244,
                "            }"
            ],
            [
                4245,
                "            else if (memberArg is MemberExpression)"
            ],
            [
                4246,
                "            {"
            ],
            [
                4247,
                "                parameterName = ExpressionHelper.GetExpressionPropertyName(memberArg as MemberExpression);"
            ],
            [
                4248,
                "            }"
            ],
            [
                4249,
                "            if (string.IsNullOrWhiteSpace(parameterName))"
            ],
            [
                4250,
                "            {"
            ],
            [
                4251,
                "                return null;"
            ],
            [
                4252,
                "            }"
            ],
            [
                4253,
                "            switch (methodName)"
            ],
            [
                4256,
                "                    values = Expression.Lambda(parameter)?.Compile().DynamicInvoke() as IEnumerable;"
            ],
            [
                4261,
                "                    criteriaOperator = negation ? CriteriaOperator.NotIn : CriteriaOperator.In;"
            ],
            [
                4265,
                "            return criteria;"
            ]
        ],
        "deleted": [
            [
                4023,
                "                return GetCallExpressionQueryItem(queryOperator, CriteriaOperator.In, expression);"
            ],
            [
                4030,
                "                    return GetCallExpressionQueryItem(queryOperator, CriteriaOperator.NotIn, unaryExpress.Operand);"
            ],
            [
                4042,
                "        Tuple<QueryOperator, IQueryItem> GetCallExpressionQueryItem(QueryOperator queryOperator, CriteriaOperator criteriaOperator, Expression expression)"
            ],
            [
                4046,
                "            switch (callExpression.Method.Name)"
            ],
            [
                4049,
                "                    MemberExpression memberArg = null;"
            ],
            [
                4050,
                "                    Expression parameterExpression = null;"
            ],
            [
                4051,
                "                    string parameterName = string.Empty;"
            ],
            [
                4052,
                "                    if (callExpression.Object != null)"
            ],
            [
                4053,
                "                    {"
            ],
            [
                4054,
                "                        memberArg = callExpression.Object as MemberExpression;"
            ],
            [
                4055,
                "                        parameterExpression = callExpression.Arguments[0];"
            ],
            [
                4056,
                "                    }"
            ],
            [
                4057,
                "                    else if (callExpression.Arguments.Count == 2)"
            ],
            [
                4058,
                "                    {"
            ],
            [
                4059,
                "                        memberArg = callExpression.Arguments[0] as MemberExpression;"
            ],
            [
                4060,
                "                        parameterExpression = callExpression.Arguments[1];"
            ],
            [
                4061,
                "                    }"
            ],
            [
                4062,
                "                    if (memberArg == null || parameterExpression == null)"
            ],
            [
                4063,
                "                    {"
            ],
            [
                4064,
                "                        return null;"
            ],
            [
                4065,
                "                    }"
            ],
            [
                4066,
                "                    IEnumerable values = Expression.Lambda(memberArg)?.Compile().DynamicInvoke() as IEnumerable;"
            ],
            [
                4071,
                "                    if (parameterExpression is ParameterExpression)"
            ],
            [
                4072,
                "                    {"
            ],
            [
                4073,
                "                        parameterName = (parameterExpression as ParameterExpression)?.Name;"
            ],
            [
                4074,
                "                    }"
            ],
            [
                4075,
                "                    else if (parameterExpression is MemberExpression)"
            ],
            [
                4076,
                "                    {"
            ],
            [
                4077,
                "                        parameterName = ExpressionHelper.GetExpressionPropertyName(parameterExpression as MemberExpression);"
            ],
            [
                4078,
                "                    }"
            ],
            [
                4079,
                "                    if (string.IsNullOrWhiteSpace(parameterName))"
            ],
            [
                4080,
                "                    {"
            ],
            [
                4081,
                "                        return null;"
            ],
            [
                4082,
                "                    }"
            ],
            [
                4086,
                "            if (criteria != null)"
            ],
            [
                4087,
                "            {"
            ],
            [
                4088,
                "                return new Tuple<QueryOperator, IQueryItem>(queryOperator, criteria);"
            ],
            [
                4089,
                "            }"
            ],
            [
                4090,
                "            return null;"
            ]
        ]
    },
    "num_lines_added": 214,
    "num_lines_removed": 39
}