{
    "hash": "57998433d401174deb1d96a12892fcddc4d64070",
    "message": "working on playcard",
    "file_num_lines": 224,
    "diff_parsed": {
        "added": [
            [
                6,
                "using System.Linq;"
            ],
            [
                13,
                "using SabberStoneCore.Tasks;"
            ],
            [
                59,
                "            var sendOptionId = sendOption.Id;"
            ],
            [
                60,
                "            var sendOptionMainOption = sendOption.MainOption;"
            ],
            [
                61,
                "            var sendOptionPosition = sendOption.Position;"
            ],
            [
                62,
                "            var sendOptionSubOption = sendOption.SubOption;"
            ],
            [
                63,
                "            var sendOptionTarget = sendOption.Target;"
            ],
            [
                65,
                "            Console.WriteLine($\"Id={sendOption.Id} MainOption={sendOption.MainOption} Position={sendOption.Position} SubOption={sendOption.SubOption} Target={sendOption.Target}\");"
            ],
            [
                66,
                "            var allOptions = _game.AllOptionsMap[sendOptionId+1];"
            ],
            [
                67,
                "            Console.WriteLine(allOptions.Print());"
            ],
            [
                69,
                "            var powerOption = allOptions.PowerOptionList[sendOptionMainOption];"
            ],
            [
                70,
                "            var optionType = powerOption.OptionType;"
            ],
            [
                71,
                ""
            ],
            [
                72,
                ""
            ],
            [
                73,
                ""
            ],
            [
                74,
                "            PlayerTask task = null;"
            ],
            [
                75,
                "            switch (optionType)"
            ],
            [
                76,
                "            {"
            ],
            [
                77,
                "                case OptionType.END_TURN:"
            ],
            [
                78,
                "                    task = EndTurnTask.Any(_game.CurrentPlayer);"
            ],
            [
                79,
                "                    break;"
            ],
            [
                80,
                ""
            ],
            [
                81,
                "                case OptionType.POWER:"
            ],
            [
                82,
                ""
            ],
            [
                83,
                "                    var mainOption = powerOption.MainOption;"
            ],
            [
                84,
                "                    IPlayable source = _game.IdEntityDic[mainOption.EntityId];"
            ],
            [
                85,
                "                    IPlayable target = null;"
            ],
            [
                86,
                "                    if (mainOption.Targets != null && mainOption.Targets.Any())"
            ],
            [
                87,
                "                    {"
            ],
            [
                88,
                "                        target = _game.IdEntityDic[mainOption.Targets[sendOptionTarget]];"
            ],
            [
                89,
                "                    }"
            ],
            [
                90,
                ""
            ],
            [
                91,
                "                    task = PlayCardTask.Any(_game.CurrentPlayer, source, target, sendOptionPosition, 0);"
            ],
            [
                92,
                ""
            ],
            [
                93,
                "                    //var subOptions = powerOption.SubOptions;"
            ],
            [
                94,
                "                    //if (subOptions != null && subOptions.Any())"
            ],
            [
                95,
                "                    //{"
            ],
            [
                96,
                "                    //}"
            ],
            [
                97,
                ""
            ],
            [
                98,
                "                    break;"
            ],
            [
                99,
                "                case OptionType.PASS:"
            ],
            [
                100,
                "                    break;"
            ],
            [
                101,
                "                default:"
            ],
            [
                102,
                "                    throw new NotImplementedException();"
            ],
            [
                103,
                "            }"
            ],
            [
                104,
                ""
            ],
            [
                105,
                "            _game.Process(task);"
            ],
            [
                106,
                "            ShowLog(_game, LogLevel.VERBOSE);"
            ],
            [
                131,
                "            ShowLog(_game, LogLevel.VERBOSE);"
            ],
            [
                144,
                ""
            ],
            [
                145,
                "                ShowLog(_game, LogLevel.VERBOSE);"
            ],
            [
                146,
                ""
            ],
            [
                186,
                "            ShowLog(_game, LogLevel.VERBOSE);"
            ],
            [
                230,
                ""
            ],
            [
                231,
                "        private static void ShowLog(Game game, LogLevel level)"
            ],
            [
                232,
                "        {"
            ],
            [
                233,
                "            while (game.Logs.Count > 0)"
            ],
            [
                234,
                "            {"
            ],
            [
                235,
                "                var logEntry = game.Logs.Dequeue();"
            ],
            [
                236,
                "                if (logEntry.Level <= level)"
            ],
            [
                237,
                "                {"
            ],
            [
                238,
                "                    var foreground = ConsoleColor.White;"
            ],
            [
                239,
                "                    switch (logEntry.Level)"
            ],
            [
                240,
                "                    {"
            ],
            [
                241,
                "                        case LogLevel.DUMP:"
            ],
            [
                242,
                "                            foreground = ConsoleColor.DarkCyan;"
            ],
            [
                243,
                "                            break;"
            ],
            [
                244,
                "                        case LogLevel.ERROR:"
            ],
            [
                245,
                "                            foreground = ConsoleColor.Red;"
            ],
            [
                246,
                "                            break;"
            ],
            [
                247,
                "                        case LogLevel.WARNING:"
            ],
            [
                248,
                "                            foreground = ConsoleColor.DarkRed;"
            ],
            [
                249,
                "                            break;"
            ],
            [
                250,
                "                        case LogLevel.INFO:"
            ],
            [
                251,
                "                            foreground = logEntry.Location.Equals(\"Game\") ?"
            ],
            [
                252,
                "                                ConsoleColor.Yellow :"
            ],
            [
                253,
                "                                ConsoleColor.Green;"
            ],
            [
                254,
                "                            break;"
            ],
            [
                255,
                "                        case LogLevel.VERBOSE:"
            ],
            [
                256,
                "                            foreground = ConsoleColor.DarkGreen;"
            ],
            [
                257,
                "                            break;"
            ],
            [
                258,
                "                        case LogLevel.DEBUG:"
            ],
            [
                259,
                "                            foreground = ConsoleColor.DarkGray;"
            ],
            [
                260,
                "                            break;"
            ],
            [
                261,
                "                        default:"
            ],
            [
                262,
                "                            throw new ArgumentOutOfRangeException();"
            ],
            [
                263,
                "                    }"
            ],
            [
                264,
                ""
            ],
            [
                265,
                "                    Console.ForegroundColor = foreground;"
            ],
            [
                266,
                ""
            ],
            [
                267,
                "                    Console.WriteLine("
            ],
            [
                268,
                "                        $\"{logEntry.TimeStamp} - {logEntry.Level} [{logEntry.BlockType}] - {logEntry.Location}: {logEntry.Text}\");"
            ],
            [
                269,
                "                }"
            ],
            [
                270,
                "            }"
            ],
            [
                271,
                "            Console.ResetColor();"
            ],
            [
                272,
                "        }"
            ]
        ],
        "deleted": [
            [
                57,
                "            var allOptions = _game.AllOptionsMap[sendOption.Id];"
            ],
            [
                96,
                ""
            ]
        ]
    },
    "num_lines_added": 96,
    "num_lines_removed": 2
}