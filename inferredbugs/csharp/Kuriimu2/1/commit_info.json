{
    "hash": "07ad7faeb9264180f915ea26d2e5a54ba3a1e8f1",
    "message": "Finished Xts Write Tests;\nFixed other krypto tests;",
    "file_num_lines": 139,
    "diff_parsed": {
        "added": [
            [
                22,
                "        public void Decrypt(byte[] content, byte[] sectorId)"
            ],
            [
                23,
                "        {"
            ],
            [
                24,
                "            var aes = AesXts.Create(false, 0x20);"
            ],
            [
                25,
                "            var enc = aes.CreateDecryptor(new byte[0x20], sectorId);"
            ],
            [
                26,
                "            enc.TransformBlock(content, 0, content.Length, content, 0);"
            ],
            [
                27,
                "        }"
            ],
            [
                28,
                ""
            ],
            [
                94,
                "            var expected = new byte[0x30];"
            ],
            [
                95,
                "            expected[0x21] = 0x02;"
            ],
            [
                96,
                "            Encrypt(expected, new byte[0x10]);"
            ],
            [
                97,
                ""
            ],
            [
                98,
                "            var content = new byte[0x30];"
            ],
            [
                99,
                "            content[0x21] = 0x02;"
            ],
            [
                100,
                "            Encrypt(content, new byte[0x10]);"
            ],
            [
                102,
                "            var xts = new XtsStream(ms, new byte[0x20], new byte[0x10], false, 0x20);"
            ],
            [
                104,
                "            xts.Position = 0x21;"
            ],
            [
                105,
                "            xts.Write(new byte[] { 0x02 }, 0, 1);"
            ],
            [
                106,
                "            xts.Flush();"
            ],
            [
                108,
                "            Assert.AreEqual(0x30, xts.Length);"
            ],
            [
                110,
                "            Assert.AreEqual(0x22, xts.Position);"
            ],
            [
                117,
                "            var expected = new byte[0x40];"
            ],
            [
                118,
                "            expected[0x2f] = 0x02;"
            ],
            [
                119,
                "            expected[0x30] = 0x02;"
            ],
            [
                120,
                "            Encrypt(expected, new byte[0x10]);"
            ],
            [
                121,
                ""
            ],
            [
                122,
                "            var content = new byte[0x30];"
            ],
            [
                123,
                "            Encrypt(content, new byte[0x10]);"
            ],
            [
                125,
                "            ms.Write(content, 0, 0x30);"
            ],
            [
                126,
                "            ms.Position = 0;"
            ],
            [
                127,
                "            var xts = new XtsStream(ms, new byte[0x20], new byte[0x10], false, 0x20);"
            ],
            [
                129,
                "            xts.Position = 0x2f;"
            ],
            [
                130,
                "            xts.Write(new byte[] { 0x02, 0x02 }, 0, 2);"
            ],
            [
                131,
                "            xts.Flush();"
            ],
            [
                133,
                "            Assert.AreEqual(0x40, xts.Length);"
            ],
            [
                135,
                "            Assert.AreEqual(0x40, xts.Position);"
            ],
            [
                136,
                "            Assert.AreEqual(0, ms.Position);"
            ],
            [
                142,
                "            var expected = new byte[0x40];"
            ],
            [
                143,
                "            expected[0x35] = 0x02;"
            ],
            [
                144,
                "            expected[0x36] = 0x02;"
            ],
            [
                145,
                "            Encrypt(expected, new byte[0x10]);"
            ],
            [
                146,
                ""
            ],
            [
                147,
                "            var content = new byte[0x30];"
            ],
            [
                148,
                "            Encrypt(content, new byte[0x10]);"
            ],
            [
                150,
                "            ms.Write(content, 0, 0x30);"
            ],
            [
                151,
                "            ms.Position = 0;"
            ],
            [
                152,
                "            var xts = new XtsStream(ms, new byte[0x20], new byte[0x10], false, 0x20);"
            ],
            [
                154,
                "            xts.Position = 0x35;"
            ],
            [
                155,
                "            xts.Write(new byte[] { 0x02, 0x02 }, 0, 2);"
            ],
            [
                156,
                "            xts.Flush();"
            ],
            [
                158,
                "            Assert.AreEqual(0x40, xts.Length);"
            ],
            [
                160,
                "            Assert.AreEqual(0x40, xts.Position);"
            ],
            [
                161,
                "            Assert.AreEqual(0, ms.Position);"
            ]
        ],
        "deleted": [
            [
                87,
                "            var key = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };"
            ],
            [
                88,
                "            var content = new byte[] { 0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b, 0x88, 0x4c, 0xfa, 0x59, 0xca, 0x34, 0x2b, 0x2e };"
            ],
            [
                89,
                "            var expected = new byte[] { 0x40, 0x15, 0xaf, 0xf5, 0x6f, 0xb5, 0xb9, 0x20, 0xc9, 0x55, 0x44, 0x90, 0x35, 0xda, 0xa7, 0x41 };"
            ],
            [
                91,
                "            var ecb = new EcbStream(ms, key);"
            ],
            [
                93,
                "            ecb.Position = 3;"
            ],
            [
                94,
                "            ecb.Write(new byte[] { 0x11, 0x11 }, 0, 2);"
            ],
            [
                95,
                "            ecb.Flush();"
            ],
            [
                98,
                "            Assert.AreEqual(5, ecb.Position);"
            ],
            [
                105,
                "            var key = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };"
            ],
            [
                106,
                "            var content = new byte[] { 0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b, 0x88, 0x4c, 0xfa, 0x59, 0xca, 0x34, 0x2b, 0x2e };"
            ],
            [
                107,
                "            var expected = new byte[] { 0x04, 0x10, 0xbe, 0xfc, 0xcd, 0xe6, 0x94, 0x4b, 0x69, 0xdd, 0x00, 0x7d, 0xeb, 0xe3, 0x9a, 0x9d,"
            ],
            [
                108,
                "            0x3a, 0xb6, 0x07, 0x36, 0xf9, 0xcd, 0x20, 0xa2, 0xcf, 0xe1, 0xf2, 0x48, 0x34, 0xb6, 0x25, 0x3d};"
            ],
            [
                110,
                "            ms.Write(content, 0, content.Length);"
            ],
            [
                111,
                "            var ecb = new EcbStream(ms, key);"
            ],
            [
                113,
                "            ecb.Position = 15;"
            ],
            [
                114,
                "            ecb.Write(new byte[] { 0x11, 0x11 }, 0, 2);"
            ],
            [
                115,
                "            var actualLength = ecb.Length;"
            ],
            [
                116,
                "            ecb.Flush();"
            ],
            [
                117,
                "            var flushedLength = ecb.Length;"
            ],
            [
                120,
                "            Assert.AreEqual(32, ecb.Length);"
            ],
            [
                121,
                "            Assert.AreEqual(17, actualLength);"
            ],
            [
                122,
                "            Assert.AreEqual(32, flushedLength);"
            ],
            [
                123,
                "            Assert.AreEqual(16, ms.Position);"
            ],
            [
                129,
                "            var key = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };"
            ],
            [
                130,
                "            var content = new byte[] { 0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b, 0x88, 0x4c, 0xfa, 0x59, 0xca, 0x34, 0x2b, 0x2e };"
            ],
            [
                131,
                "            var expected = new byte[] { 0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b, 0x88, 0x4c, 0xfa, 0x59, 0xca, 0x34, 0x2b, 0x2e,"
            ],
            [
                132,
                "                0x4c, 0x02, 0x1d, 0x6d, 0xf5, 0x51, 0xd7, 0xf8, 0x74, 0xa4, 0xe0, 0x30, 0x8f, 0x4c, 0xb6, 0x13 };"
            ],
            [
                134,
                "            ms.Write(content, 0, content.Length);"
            ],
            [
                135,
                "            var ecb = new EcbStream(ms, key);"
            ],
            [
                137,
                "            ecb.Position = 17;"
            ],
            [
                138,
                "            ecb.Write(new byte[] { 0x11, 0x11 }, 0, 2);"
            ],
            [
                139,
                "            var actualLength = ecb.Length;"
            ],
            [
                140,
                "            ecb.Flush();"
            ],
            [
                141,
                "            var flushedLength = ecb.Length;"
            ],
            [
                144,
                "            Assert.AreEqual(32, ecb.Length);"
            ],
            [
                145,
                "            Assert.AreEqual(19, actualLength);"
            ],
            [
                146,
                "            Assert.AreEqual(32, flushedLength);"
            ],
            [
                147,
                "            Assert.AreEqual(16, ms.Position);"
            ]
        ]
    },
    "num_lines_added": 52,
    "num_lines_removed": 38
}