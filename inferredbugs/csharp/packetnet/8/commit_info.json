{
    "hash": "b62d1c80d87046ad404f48495b60e1cab46e9f62",
    "message": "Adding support for 32 bit alignment of PPI header fields",
    "file_num_lines": 296,
    "diff_parsed": {
        "added": [
            [
                61,
                "                    var length = PpiHeaderFields.PpiPacketHeaderLength;"
            ],
            [
                62,
                ""
            ],
            [
                63,
                "                    foreach (var field in PpiFields )"
            ],
            [
                64,
                "                    {"
            ],
            [
                65,
                "                        length += PpiHeaderFields.FieldHeaderLength + field.Length;"
            ],
            [
                66,
                "                        if((Flags & HeaderFlags.Alignment32Bit) == HeaderFlags.Alignment32Bit)"
            ],
            [
                67,
                "                        {"
            ],
            [
                68,
                "                            length += GetDistanceTo32BitAlignment(field.Length);"
            ],
            [
                69,
                "                        }"
            ],
            [
                70,
                "                    }"
            ],
            [
                71,
                "                    return (UInt16)length;"
            ],
            [
                319,
                "                //If aligned is true then fields must all start on 32bit boundaries so we might need"
            ],
            [
                320,
                "                //to read some extra padding from the end of the header fields."
            ],
            [
                321,
                "                bool aligned = ((Flags & HeaderFlags.Alignment32Bit) == HeaderFlags.Alignment32Bit);"
            ],
            [
                322,
                ""
            ],
            [
                346,
                "                    var paddingBytesRequired = GetDistanceTo32BitAlignment(field.Length);"
            ],
            [
                347,
                "                    if(aligned && (paddingBytesRequired > 0))"
            ],
            [
                348,
                "                    {"
            ],
            [
                349,
                "                        writer.Write(new byte[paddingBytesRequired]);"
            ],
            [
                350,
                "                    }"
            ],
            [
                363,
                "                //If aligned is true then fields must all start on 32bit boundaries so we might need"
            ],
            [
                364,
                "                //to read some extra padding from the end of the header fields."
            ],
            [
                365,
                "                bool aligned = ((Flags & HeaderFlags.Alignment32Bit) == HeaderFlags.Alignment32Bit);"
            ],
            [
                383,
                "                    var paddingByteCount = GetDistanceTo32BitAlignment(fieldLength);"
            ],
            [
                384,
                "                    if(aligned && (paddingByteCount > 0))"
            ],
            [
                385,
                "                    {"
            ],
            [
                386,
                "                        br.ReadBytes(paddingByteCount);"
            ],
            [
                387,
                "                        length += paddingByteCount;"
            ],
            [
                388,
                "                    }"
            ],
            [
                442,
                ""
            ],
            [
                443,
                "            private int GetDistanceTo32BitAlignment(int length)"
            ],
            [
                444,
                "            {"
            ],
            [
                445,
                "                return ((length % 4) == 0) ? 0 : 4 - (length % 4);"
            ],
            [
                446,
                "            }"
            ],
            [
                447,
                ""
            ]
        ],
        "deleted": [
            [
                61,
                "                    return (UInt16) (PpiHeaderFields.PpiPacketHeaderLength +"
            ],
            [
                62,
                "                        (PpiFields.Count * PpiHeaderFields.FieldHeaderLength) +"
            ],
            [
                63,
                "                        PpiFields.Sum( field => field.Length ));"
            ],
            [
                416,
                ""
            ]
        ]
    },
    "num_lines_added": 35,
    "num_lines_removed": 4
}