{
    "hash": "3c8ea6967389adacd8fb3d8341fb797e9a295e60",
    "message": "Add the ability to access the vertex array object ID via a public property.\nAdd a CalculateNormals method to the OpenGL.Constructs.Geometry class.\nAdd a 'CreateCubeWithNormals' method, which computes the normals of an 8 vertex cube and stores them as part of the VAO.",
    "file_num_lines": 87,
    "diff_parsed": {
        "added": [
            [
                7,
                "        /// <summary>"
            ],
            [
                8,
                "        /// Calculate the array of vertex normals based on vertex and face information (assuming triangle polygons)."
            ],
            [
                9,
                "        /// </summary>"
            ],
            [
                10,
                "        /// <param name=\"vertexData\">The vertex data to find the normals for.</param>"
            ],
            [
                11,
                "        /// <param name=\"elementData\">The element array describing the order in which vertices are drawn.</param>"
            ],
            [
                12,
                "        /// <returns></returns>"
            ],
            [
                13,
                "        public static Vector3[] CalculateNormals(Vector3[] vertexData, int[] elementData)"
            ],
            [
                14,
                "        {"
            ],
            [
                15,
                "            Vector3 b1, b2, normal;"
            ],
            [
                16,
                "            Vector3[] normalData = new Vector3[vertexData.Length];"
            ],
            [
                17,
                ""
            ],
            [
                18,
                "            for (int i = 0; i < elementData.Length / 3; i++)"
            ],
            [
                19,
                "            {"
            ],
            [
                20,
                "                int cornerA = elementData[i * 3];"
            ],
            [
                21,
                "                int cornerB = elementData[i * 3 + 1];"
            ],
            [
                22,
                "                int cornerC = elementData[i * 3 + 2];"
            ],
            [
                23,
                ""
            ],
            [
                24,
                "                b1 = vertexData[cornerB] - vertexData[cornerA];"
            ],
            [
                25,
                "                b2 = vertexData[cornerC] - vertexData[cornerA];"
            ],
            [
                26,
                ""
            ],
            [
                27,
                "                normal = Vector3.Cross(b1, b2).Normalize();"
            ],
            [
                28,
                ""
            ],
            [
                29,
                "                normalData[cornerA] += normal;"
            ],
            [
                30,
                "                normalData[cornerB] += normal;"
            ],
            [
                31,
                "                normalData[cornerC] += normal;"
            ],
            [
                32,
                "            }"
            ],
            [
                33,
                ""
            ],
            [
                34,
                "            for (int i = 0; i < normalData.Length; i++) normalData[i] = normalData[i].Normalize();"
            ],
            [
                35,
                ""
            ],
            [
                36,
                "            return normalData;"
            ],
            [
                37,
                "        }"
            ],
            [
                38,
                ""
            ],
            [
                107,
                "            return new VAO(program, new VBO<Vector3>(vertex), new VBO<int>(element, BufferTarget.ElementArrayBuffer, BufferUsageHint.StaticRead));"
            ],
            [
                108,
                "        }"
            ],
            [
                109,
                ""
            ],
            [
                110,
                "        /// <summary>"
            ],
            [
                111,
                "        /// Create a basic cube with normals and stores it in a VAO."
            ],
            [
                112,
                "        /// This cube consists of 12 triangles and 6 faces."
            ],
            [
                113,
                "        /// </summary>"
            ],
            [
                114,
                "        /// <param name=\"program\">The ShaderProgram assigned to this cube.</param>"
            ],
            [
                115,
                "        /// <param name=\"min\">The 3 minimum values of the cube (lower left back corner).</param>"
            ],
            [
                116,
                "        /// <param name=\"max\">The 3 maximum values of the cube (top right front corner).</param>"
            ],
            [
                117,
                "        /// <returns></returns>"
            ],
            [
                118,
                "        public static VAO CreateCubeWithNormals(ShaderProgram program, Vector3 min, Vector3 max)"
            ],
            [
                119,
                "        {"
            ],
            [
                120,
                "            Vector3[] vertex = new Vector3[] {"
            ],
            [
                121,
                "                new Vector3(min.x, min.y, max.z),"
            ],
            [
                122,
                "                new Vector3(max.x, min.y, max.z),"
            ],
            [
                123,
                "                new Vector3(min.x, max.y, max.z),"
            ],
            [
                124,
                "                new Vector3(max.x, max.y, max.z),"
            ],
            [
                125,
                "                new Vector3(max.x, min.y, min.z),"
            ],
            [
                126,
                "                new Vector3(max.x, max.y, min.z),"
            ],
            [
                127,
                "                new Vector3(min.x, max.y, min.z),"
            ],
            [
                128,
                "                new Vector3(min.x, min.y, min.z)"
            ],
            [
                129,
                "            };"
            ],
            [
                130,
                ""
            ],
            [
                131,
                "            int[] element = new int[] {"
            ],
            [
                132,
                "                0, 1, 2, 1, 3, 2,"
            ],
            [
                133,
                "                1, 4, 3, 4, 5, 3,"
            ],
            [
                134,
                "                4, 7, 5, 7, 6, 5,"
            ],
            [
                135,
                "                7, 0, 6, 0, 2, 6,"
            ],
            [
                136,
                "                7, 4, 0, 4, 1, 0,"
            ],
            [
                137,
                "                2, 3, 6, 3, 5, 6"
            ],
            [
                138,
                "            };"
            ],
            [
                139,
                ""
            ],
            [
                140,
                "            Vector3[] normal = CalculateNormals(vertex, element);"
            ],
            [
                141,
                ""
            ],
            [
                142,
                "            return new VAO(program, new VBO<Vector3>(vertex), new VBO<Vector3>(normal), new VBO<int>(element, BufferTarget.ElementArrayBuffer, BufferUsageHint.StaticRead));"
            ]
        ],
        "deleted": [
            [
                75,
                "            return new VAO(program, new VBO<Vector3>(vertex), new VBO<int>(element));"
            ]
        ]
    },
    "num_lines_added": 68,
    "num_lines_removed": 1
}