{
    "hash": "25b42c55ed63be3c07570a87d725503747a22288",
    "message": "Adding logic to warn if newer version of assembly is being registered that was already resolved. Adding new methods to AssemblyUtility to make assembly loading more testable. Completely refactoring module loader to make it more maintainable and easier to test",
    "file_num_lines": 88,
    "diff_parsed": {
        "added": [
            [
                18,
                "        private readonly IAssemblyUtility _assemblyUtility;"
            ],
            [
                19,
                "        private IDictionary<string, AssemblyInfo> _assemblyInfoMap;"
            ],
            [
                21,
                "        public AppDomainAssemblyResolver(ILog logger, IFileSystem fileSystem, IAssemblyResolver resolver, IDictionary<string, AssemblyInfo> assemblyInfoMap = null, IAssemblyUtility assemblyUtility = null )"
            ],
            [
                23,
                "            if (_assemblyUtility == null)"
            ],
            [
                24,
                "            {"
            ],
            [
                25,
                "                _assemblyUtility = new AssemblyUtility();"
            ],
            [
                26,
                "            }"
            ],
            [
                27,
                ""
            ],
            [
                28,
                "            _assemblyInfoMap = assemblyInfoMap;"
            ],
            [
                29,
                "            if (_assemblyInfoMap == null)"
            ],
            [
                30,
                "            {"
            ],
            [
                31,
                "                _assemblyInfoMap = new Dictionary<string, AssemblyInfo>();"
            ],
            [
                32,
                "            }"
            ],
            [
                33,
                ""
            ],
            [
                40,
                "        internal Assembly AssemblyResolve(object sender, ResolveEventArgs args)"
            ],
            [
                41,
                "        {"
            ],
            [
                46,
                "            {"
            ],
            [
                50,
                "                        assemblyInfo.Assembly = _assemblyUtility.LoadFile(assemblyInfo.Path);"
            ],
            [
                60,
                "            var hostAssemblyPaths = _fileSystem.EnumerateBinaries(_fileSystem.HostBin, SearchOption.TopDirectoryOnly);"
            ],
            [
                75,
                "                var name = _assemblyUtility.GetAssemblyName(assemblyPath);"
            ],
            [
                83,
                "                    //if the assembly being passed is a higher version and an assembly with it's name has already been resolved"
            ],
            [
                84,
                "                    if (found && foundInfo.Assembly != null)"
            ],
            [
                85,
                "                    {"
            ],
            [
                86,
                "                        _logger.Warn(string.Format(\"Conflict: Assembly {0} with version {1} cannot be added as it has already been resolved\", assemblyPath));"
            ],
            [
                87,
                "                        continue;"
            ],
            [
                88,
                "                    }"
            ]
        ],
        "deleted": [
            [
                18,
                "        private IDictionary<string, AssemblyInfo> _assemblyInfoMap = new Dictionary<string, AssemblyInfo>();"
            ],
            [
                20,
                "        public AppDomainAssemblyResolver(ILog logger, IFileSystem fileSystem, IAssemblyResolver resolver)"
            ],
            [
                28,
                "        private Assembly AssemblyResolve(object sender, ResolveEventArgs args)"
            ],
            [
                29,
                "        {"
            ],
            [
                34,
                "            {"
            ],
            [
                38,
                "                        assemblyInfo.Assembly = Assembly.LoadFile(assemblyInfo.Path);"
            ],
            [
                48,
                "            var hostAssemblyPaths = _fileSystem.EnumerateFiles(_fileSystem.HostBin, \"*.dll\", SearchOption.TopDirectoryOnly);"
            ],
            [
                63,
                "                var name = AssemblyName.GetAssemblyName(assemblyPath);"
            ]
        ]
    },
    "num_lines_added": 26,
    "num_lines_removed": 8
}