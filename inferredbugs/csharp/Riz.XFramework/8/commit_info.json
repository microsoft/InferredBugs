{
    "hash": "dc17e2387baeea07867be9ca709c1f5c80e4e212",
    "message": "fixed issue#order by master-detail-grandson",
    "file_num_lines": 196,
    "diff_parsed": {
        "added": [
            [
                5,
                "using System.Reflection;"
            ],
            [
                88,
                "            // => a.Accounts[0].Markets[0].MarketId"
            ],
            [
                96,
                "                // => a.Accounts[0].Markets[0].MarketId"
            ],
            [
                97,
                "                MethodCallExpression methodExpression = node as MethodCallExpression;"
            ],
            [
                98,
                "                Expression objExpression = methodExpression.Object;"
            ],
            [
                99,
                "                bool isGetItem = objExpression != null && Data.TypeUtils.IsCollectionType(objExpression.Type) && methodExpression.Method.Name == \"get_Item\";"
            ],
            [
                100,
                "                if (isGetItem) node = objExpression;"
            ],
            [
                103,
                "            if (node.NodeType == ExpressionType.ListInit) return true;"
            ],
            [
                104,
                "            if (node.NodeType == ExpressionType.NewArrayInit) return true;"
            ],
            [
                105,
                "            if (node.NodeType != ExpressionType.MemberAccess) return false;"
            ],
            [
                106,
                ""
            ],
            [
                107,
                "            var memberExpression = node as MemberExpression;"
            ],
            [
                108,
                "            if (memberExpression == null) return false;"
            ],
            [
                109,
                "            if (memberExpression.Expression == null) return true;"
            ],
            [
                110,
                "            if (memberExpression.Expression.NodeType == ExpressionType.Constant) return true;"
            ],
            [
                112,
                "            return memberExpression.Expression.CanEvaluate();"
            ],
            [
                118,
                "        public static ConstantExpression Evaluate(this Expression node)"
            ],
            [
                120,
                "            ConstantExpression constantExpression = null;"
            ],
            [
                121,
                "            if (node.NodeType == ExpressionType.Constant) constantExpression = node as ConstantExpression;"
            ],
            [
                124,
                "                LambdaExpression lambda = node is LambdaExpression ? Expression.Lambda(((LambdaExpression)node).Body) : Expression.Lambda(node);"
            ],
            [
                126,
                "                constantExpression = Expression.Constant(fn.DynamicInvoke(null), node is LambdaExpression ? ((LambdaExpression)node).Body.Type : node.Type);"
            ],
            [
                130,
                "            if (constantExpression.Type.IsEnum) constantExpression = Expression.Constant(Convert.ToInt32(constantExpression.Value));"
            ],
            [
                132,
                "            return constantExpression;"
            ],
            [
                145,
                "            ParameterExpression parameterExpression = exp.NodeType == ExpressionType.Lambda"
            ],
            [
                148,
                "            if (parameterExpression != null) return _isAnonymous(parameterExpression.Name);"
            ],
            [
                150,
                "            // <>h__TransparentIdentifier.a.CompanyName"
            ],
            [
                151,
                "            if (exp.NodeType == ExpressionType.MemberAccess)"
            ],
            [
                153,
                "                MemberExpression memberExpression = exp as MemberExpression;"
            ],
            [
                154,
                "                if (_isAnonymous(memberExpression.Member.Name)) return true;"
            ],
            [
                156,
                "                return IsAnonymous(memberExpression.Expression);"
            ]
        ],
        "deleted": [
            [
                94,
                "                MethodCallExpression methodCallExpression = node as MethodCallExpression;"
            ],
            [
                95,
                "                Expression expression = methodCallExpression.Object;"
            ],
            [
                96,
                "                if (expression != null && Data.TypeUtils.IsCollectionType(expression.Type) && methodCallExpression.Method.Name == \"get_Item\")"
            ],
            [
                97,
                "                {"
            ],
            [
                98,
                "                    return true;"
            ],
            [
                99,
                "                }"
            ],
            [
                102,
                "            var member = node as MemberExpression;"
            ],
            [
                103,
                "            if (member == null) return false;"
            ],
            [
                104,
                "            if (member.Expression == null) return true;"
            ],
            [
                105,
                "            if (member.Expression.NodeType == ExpressionType.Constant) return true;"
            ],
            [
                107,
                "            return member.Expression.CanEvaluate();"
            ],
            [
                113,
                "        public static ConstantExpression Evaluate(this Expression e)"
            ],
            [
                115,
                "            ConstantExpression node = null;"
            ],
            [
                116,
                "            if (e.NodeType == ExpressionType.Constant)"
            ],
            [
                117,
                "            {"
            ],
            [
                118,
                "                node = e as ConstantExpression;"
            ],
            [
                119,
                "            }"
            ],
            [
                122,
                "                LambdaExpression lambda = e is LambdaExpression ? Expression.Lambda(((LambdaExpression)e).Body) : Expression.Lambda(e);"
            ],
            [
                124,
                ""
            ],
            [
                125,
                "                node = Expression.Constant(fn.DynamicInvoke(null), e is LambdaExpression ? ((LambdaExpression)e).Body.Type : e.Type);"
            ],
            [
                129,
                "            if (node.Type.IsEnum) node = Expression.Constant(Convert.ToInt32(node.Value));"
            ],
            [
                130,
                ""
            ],
            [
                132,
                "            return node;"
            ],
            [
                145,
                "            ParameterExpression paramExp = exp.NodeType == ExpressionType.Lambda"
            ],
            [
                148,
                "            if (paramExp != null) return _isAnonymous(paramExp.Name);"
            ],
            [
                150,
                "            if (exp.NodeType == ExpressionType.MemberAccess)    // <>h__TransparentIdentifier.a.CompanyName"
            ],
            [
                152,
                "                MemberExpression memExp = exp as MemberExpression;"
            ],
            [
                153,
                "                if (_isAnonymous(memExp.Member.Name)) return true;"
            ],
            [
                155,
                "                return IsAnonymous(memExp.Expression);"
            ]
        ]
    },
    "num_lines_added": 30,
    "num_lines_removed": 29
}