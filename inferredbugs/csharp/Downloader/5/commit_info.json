{
    "hash": "4c8741d3d525a22e5ab8a8a9229992bbb6e8b653",
    "message": "Refactore sample project",
    "file_num_lines": 172,
    "diff_parsed": {
        "added": [
            [
                15,
                "    static class Program"
            ],
            [
                25,
                "        static async Task Main()"
            ],
            [
                28,
                "            var downloadList = await GetDownloadItems();"
            ],
            [
                29,
                "            var version = Assembly.GetExecutingAssembly().GetName().Version?.ToString(3) ?? \"1\";"
            ],
            [
                31,
                "            var downloadOpt = new DownloadConfiguration {"
            ],
            [
                42,
                "                        Accept = \"*/*\","
            ],
            [
                43,
                "                        UserAgent = $\"DownloaderSample/{version}\","
            ],
            [
                44,
                "                        ProtocolVersion = HttpVersion.Version11,"
            ],
            [
                45,
                "                        KeepAlive = false,"
            ],
            [
                46,
                "                        UseDefaultCredentials = false"
            ],
            [
                47,
                "                    }"
            ],
            [
                50,
                "            await DownloadList(downloadList, downloadOpt);"
            ],
            [
                55,
                "            ProcessBarOption = new ProgressBarOptions {"
            ],
            [
                61,
                "            ChildOption = new ProgressBarOptions {"
            ],
            [
                67,
                "        private static async Task<List<DownloadItem>> GetDownloadItems()"
            ],
            [
                84,
                "        private static async Task DownloadList(IEnumerable<DownloadItem> downloadList, DownloadConfiguration config)"
            ],
            [
                85,
                "        {"
            ],
            [
                86,
                "            foreach (var downloadItem in downloadList)"
            ],
            [
                87,
                "            {"
            ],
            [
                88,
                "                // begin download from url"
            ],
            [
                89,
                "                var ds = await DownloadFile(downloadItem, config);"
            ],
            [
                90,
                ""
            ],
            [
                91,
                "                await Task.Delay(1000);"
            ],
            [
                92,
                ""
            ],
            [
                93,
                "                // clear download to order new of one"
            ],
            [
                94,
                "                ds.Clear();"
            ],
            [
                95,
                "            }"
            ],
            [
                96,
                "        }"
            ],
            [
                97,
                "        private static async Task<DownloadService> DownloadFile(DownloadItem downloadItem, DownloadConfiguration downloadOpt)"
            ],
            [
                98,
                "        {"
            ],
            [
                99,
                "            var ds = new DownloadService(downloadOpt);"
            ],
            [
                100,
                "            ds.ChunkDownloadProgressChanged += OnChunkDownloadProgressChanged;"
            ],
            [
                101,
                "            ds.DownloadProgressChanged += OnDownloadProgressChanged;"
            ],
            [
                102,
                "            ds.DownloadFileCompleted += OnDownloadFileCompleted;"
            ],
            [
                103,
                "            ds.DownloadStarted += OnDownloadStarted;"
            ],
            [
                105,
                "            if (string.IsNullOrWhiteSpace(downloadItem.FileName))"
            ],
            [
                106,
                "                await ds.DownloadFileAsync(downloadItem.Url, new DirectoryInfo(downloadItem.FolderPath)).ConfigureAwait(false);"
            ],
            [
                107,
                "            else"
            ],
            [
                108,
                "                await ds.DownloadFileAsync(downloadItem.Url, downloadItem.FileName).ConfigureAwait(false);"
            ],
            [
                109,
                ""
            ],
            [
                110,
                "            return ds;"
            ],
            [
                111,
                "        }"
            ],
            [
                117,
                "        private static void OnDownloadFileCompleted(object sender, AsyncCompletedEventArgs e)"
            ],
            [
                144,
                "            var nonZeroSpeed = e.BytesPerSecondSpeed + 0.0001;"
            ],
            [
                146,
                "            var isMinutes = estimateTime >= 60;"
            ],
            [
                148,
                "            var isElapsedTimeMoreThanOneSecond = Environment.TickCount64 - LastTick >= 1000;"
            ],
            [
                149,
                "            ConsoleProgress.Tick((int)(e.ProgressPercentage * 100));"
            ],
            [
                150,
                ""
            ],
            [
                151,
                "            if (isMinutes)"
            ],
            [
                153,
                "                timeLeftUnit = \"minutes\";"
            ],
            [
                157,
                "            if (isElapsedTimeMoreThanOneSecond)"
            ],
            [
                162,
                ""
            ],
            [
                163,
                "            var avgSpeed = CalcMemoryMensurableUnit((long)AverageSpeed.Average());"
            ],
            [
                164,
                "            var speed = CalcMemoryMensurableUnit(e.BytesPerSecondSpeed);"
            ],
            [
                165,
                "            var bytesReceived = CalcMemoryMensurableUnit(e.BytesReceived);"
            ],
            [
                166,
                "            var totalBytesToReceive = CalcMemoryMensurableUnit(e.TotalBytesToReceive);"
            ],
            [
                167,
                "            var progressPercentage = $\"{e.ProgressPercentage:F3}\".Replace(\"/\", \".\");"
            ],
            [
                168,
                ""
            ],
            [
                169,
                "            Console.Title = $\"{progressPercentage}%  -  \" +"
            ],
            [
                170,
                "                            $\"{speed}/s (avg: {avgSpeed}/s)  -  \" +"
            ],
            [
                171,
                "                            $\"[{bytesReceived} of {totalBytesToReceive}], \" +"
            ],
            [
                172,
                "                            $\"{estimateTime} {timeLeftUnit} left\";"
            ],
            [
                174,
                "        private static string CalcMemoryMensurableUnit(double bytes)"
            ],
            [
                181,
                "            var result ="
            ],
            [
                182,
                "                tb > 1 ? $\"{tb:0.##}TB\" :"
            ],
            [
                183,
                "                gb > 1 ? $\"{gb:0.##}GB\" :"
            ],
            [
                184,
                "                mb > 1 ? $\"{mb:0.##}MB\" :"
            ],
            [
                185,
                "                kb > 1 ? $\"{kb:0.##}KB\" :"
            ],
            [
                186,
                "                $\"{bytes:0.##}B\";"
            ],
            [
                187,
                ""
            ],
            [
                188,
                "            result = result.Replace(\"/\", \".\");"
            ],
            [
                189,
                "            return result;"
            ]
        ],
        "deleted": [
            [
                15,
                "    class Program"
            ],
            [
                21,
                "        private static List<DownloadItem> DownloadList { get; set; }"
            ],
            [
                26,
                "        static async Task Main(string[] args)"
            ],
            [
                29,
                "            DownloadList = await GetDownloadItems();"
            ],
            [
                31,
                "            var downloadOpt = new DownloadConfiguration"
            ],
            [
                32,
                "            {"
            ],
            [
                43,
                "                    Accept = \"*/*\","
            ],
            [
                44,
                "                    UserAgent = $\"DownloaderSample/{Assembly.GetExecutingAssembly().GetName().Version.ToString(3)}\","
            ],
            [
                45,
                "                    ProtocolVersion = HttpVersion.Version11,"
            ],
            [
                46,
                "                    KeepAlive = false,"
            ],
            [
                47,
                "                    UseDefaultCredentials = false"
            ],
            [
                48,
                "                }"
            ],
            [
                51,
                "            foreach (var downloadItem in DownloadList)"
            ],
            [
                52,
                "            {"
            ],
            [
                53,
                "                // begin download from url"
            ],
            [
                54,
                "                var ds = await Download(downloadItem, downloadOpt);"
            ],
            [
                55,
                ""
            ],
            [
                56,
                "                await Task.Delay(1000);"
            ],
            [
                57,
                ""
            ],
            [
                58,
                "                // clear download to order new of one"
            ],
            [
                59,
                "                ds.Clear();"
            ],
            [
                60,
                "            }"
            ],
            [
                63,
                ""
            ],
            [
                64,
                "        private static async Task<DownloadService> Download(DownloadItem downloadItem, DownloadConfiguration downloadOpt)"
            ],
            [
                65,
                "        {"
            ],
            [
                66,
                "            var ds = new DownloadService(downloadOpt);"
            ],
            [
                67,
                "            ds.ChunkDownloadProgressChanged += OnChunkDownloadProgressChanged;"
            ],
            [
                68,
                "            ds.DownloadProgressChanged += OnDownloadProgressChanged;"
            ],
            [
                69,
                "            ds.DownloadFileCompleted += OnDownloadFileCompleted;"
            ],
            [
                70,
                "            ds.DownloadStarted += OnDownloadStarted;"
            ],
            [
                71,
                ""
            ],
            [
                72,
                "            if (string.IsNullOrWhiteSpace(downloadItem.FileName))"
            ],
            [
                73,
                "                await ds.DownloadFileAsync(downloadItem.Url, new DirectoryInfo(downloadItem.FolderPath)).ConfigureAwait(false);"
            ],
            [
                74,
                "            else"
            ],
            [
                75,
                "                await ds.DownloadFileAsync(downloadItem.Url, downloadItem.FileName).ConfigureAwait(false);"
            ],
            [
                76,
                ""
            ],
            [
                77,
                "            return ds;"
            ],
            [
                78,
                "        }"
            ],
            [
                79,
                ""
            ],
            [
                82,
                "            ProcessBarOption = new ProgressBarOptions"
            ],
            [
                83,
                "            {"
            ],
            [
                89,
                "            ChildOption = new ProgressBarOptions"
            ],
            [
                90,
                "            {"
            ],
            [
                96,
                "        private static async  Task<List<DownloadItem>> GetDownloadItems()"
            ],
            [
                116,
                "            Console.Clear();"
            ],
            [
                120,
                "        private static async void OnDownloadFileCompleted(object sender, AsyncCompletedEventArgs e)"
            ],
            [
                123,
                "            await Task.Delay(1000);"
            ],
            [
                148,
                "            var nonZeroSpeed = e.BytesPerSecondSpeed == 0 ? 0.0001 : e.BytesPerSecondSpeed;"
            ],
            [
                150,
                "            var isMins = estimateTime >= 60;"
            ],
            [
                152,
                "            if (isMins)"
            ],
            [
                154,
                "                timeLeftUnit = \"mins\";"
            ],
            [
                158,
                "            if (Environment.TickCount64 - LastTick >= 1000)"
            ],
            [
                163,
                "            var avgSpeed = (long)AverageSpeed.Average();"
            ],
            [
                164,
                "            Console.Title = $\"{e.ProgressPercentage:N3}%  -  {CalcMemoryMensurableUnit(e.BytesPerSecondSpeed)}/s (avg: {CalcMemoryMensurableUnit(avgSpeed)}/s)  -  \" +"
            ],
            [
                165,
                "                            $\"[{CalcMemoryMensurableUnit(e.BytesReceived)} of {CalcMemoryMensurableUnit(e.TotalBytesToReceive)}], {estimateTime} {timeLeftUnit} left\";"
            ],
            [
                166,
                "            ConsoleProgress.Tick((int)(e.ProgressPercentage * 100));"
            ],
            [
                168,
                "        private static string CalcMemoryMensurableUnit(long bytes, bool isShortUnitName = true)"
            ],
            [
                175,
                "            var b = isShortUnitName ? \"B\" : \"Bytes\";"
            ],
            [
                176,
                "            var k = isShortUnitName ? \"KB\" : \"Kilobytes\";"
            ],
            [
                177,
                "            var m = isShortUnitName ? \"MB\" : \"Megabytes\";"
            ],
            [
                178,
                "            var g = isShortUnitName ? \"GB\" : \"Gigabytes\";"
            ],
            [
                179,
                "            var t = isShortUnitName ? \"TB\" : \"Terabytes\";"
            ],
            [
                180,
                ""
            ],
            [
                181,
                "            return tb > 1 ? $\"{tb:N0}{t}\" :"
            ],
            [
                182,
                "                   gb > 1 ? $\"{gb:N0}{g}\" :"
            ],
            [
                183,
                "                   mb > 1 ? $\"{mb:N0}{m}\" :"
            ],
            [
                184,
                "                   kb > 1 ? $\"{kb:N0}{k}\" :"
            ],
            [
                185,
                "                   $\"{bytes:N0}{b}\";"
            ]
        ]
    },
    "num_lines_added": 72,
    "num_lines_removed": 68
}