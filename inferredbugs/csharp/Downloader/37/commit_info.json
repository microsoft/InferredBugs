{
    "hash": "be414e6e659f1fc2c17d73577114eb2e8f72e3fa",
    "message": "Splitted chunt test classes for memory and file storages",
    "file_num_lines": 207,
    "diff_parsed": {
        "added": [
            [
                10,
                "    public abstract class ChunkTest"
            ],
            [
                13,
                "        protected IStorage Storage { get; set; }"
            ],
            [
                14,
                ""
            ],
            [
                15,
                "        [TestInitialize]"
            ],
            [
                16,
                "        public abstract void InitialTest();"
            ],
            [
                34,
                "        public void ClearStorageTest()"
            ],
            [
                37,
                "            var chunk = new Chunk(0, 1000) { Storage = Storage };"
            ],
            [
                52,
                "            var chunk = new Chunk(0, size) { Storage = Storage };"
            ],
            [
                78,
                "        public void IsDownloadCompletedWhenStorageNoDataTest()"
            ],
            [
                82,
                "            var chunk = new Chunk(0, size) { Position = size - 1, Storage = Storage };"
            ],
            [
                92,
                "        public void IsDownloadCompletedWhenStorageDataIsExistTest()"
            ],
            [
                95,
                "            var chunk = new Chunk(0, _testData.Length - 1) { Position = _testData.Length - 1, Storage = Storage };"
            ],
            [
                106,
                "        public void IsValidPositionWithStorageTest()"
            ],
            [
                110,
                "            var chunk = new Chunk(0, size) { Storage = Storage };"
            ],
            [
                124,
                "                Position = _testData.Length + 1,"
            ],
            [
                125,
                "                Storage = Storage // overflowed"
            ],
            [
                134,
                ""
            ],
            [
                139,
                "            var chunk = new Chunk(0, _testData.Length - 1) {"
            ],
            [
                140,
                "                Position = 7,"
            ],
            [
                141,
                "                Storage = Storage"
            ],
            [
                142,
                "            };"
            ],
            [
                157,
                "            var chunk = new Chunk(0, size - 1) {"
            ],
            [
                158,
                "                Position = 10,"
            ],
            [
                159,
                "                Storage = Storage"
            ],
            [
                160,
                "            };"
            ],
            [
                204,
                "            var chunk = new Chunk(0, -1) { Position = 0, Storage = Storage };"
            ],
            [
                219,
                "                Storage = Storage"
            ],
            [
                248,
                "            var chunk = new Chunk(0, 1024) { Position = 1, Storage = Storage };"
            ],
            [
                258,
                "        public void TestSetValidPositionWhenStorageChanged()"
            ],
            [
                264,
                "                Storage = Storage"
            ],
            [
                268,
                "            Storage.WriteAsync(DummyData.GenerateRandomBytes(nextPosition), 0, nextPosition);"
            ],
            [
                276,
                "        public void ChunkSerializationTest()"
            ],
            [
                285,
                "                Storage = Storage"
            ],
            [
                300,
                "        public void ChunkBinarySerializationTest()"
            ],
            [
                308,
                "                Storage = Storage"
            ]
        ],
        "deleted": [
            [
                10,
                "    public class ChunkTest"
            ],
            [
                30,
                "        public void ClearFileStorageTest()"
            ],
            [
                33,
                "            var chunk = new Chunk(0, 1000) { Storage = new FileStorage(\"\") };"
            ],
            [
                34,
                "            chunk.Storage.WriteAsync(_testData, 0, 5).Wait();"
            ],
            [
                35,
                ""
            ],
            [
                36,
                "            // act"
            ],
            [
                37,
                "            chunk.Clear();"
            ],
            [
                38,
                ""
            ],
            [
                39,
                "            // assert"
            ],
            [
                40,
                "            Assert.AreEqual(0, chunk.Storage.GetLength());"
            ],
            [
                41,
                "        }"
            ],
            [
                42,
                ""
            ],
            [
                43,
                "        [TestMethod]"
            ],
            [
                44,
                "        public void ClearMemoryStorageTest()"
            ],
            [
                45,
                "        {"
            ],
            [
                46,
                "            // arrange"
            ],
            [
                47,
                "            var chunk = new Chunk(0, 1000) { Storage = new MemoryStorage() };"
            ],
            [
                62,
                "            var chunk = new Chunk(0, size) { Storage = (new MemoryStorage()) };"
            ],
            [
                88,
                "        public void IsDownloadCompletedWhenFileStorageNoDataTest()"
            ],
            [
                89,
                "        {"
            ],
            [
                90,
                "            // arrange"
            ],
            [
                91,
                "            var size = 1024;"
            ],
            [
                92,
                "            var chunk = new Chunk(0, size) { Position = size - 1, Storage = (new FileStorage(\"\")) };"
            ],
            [
                93,
                ""
            ],
            [
                94,
                "            // act"
            ],
            [
                95,
                "            bool isDownloadCompleted = chunk.IsDownloadCompleted();"
            ],
            [
                96,
                ""
            ],
            [
                97,
                "            // assert"
            ],
            [
                98,
                "            Assert.IsFalse(isDownloadCompleted);"
            ],
            [
                99,
                "        }"
            ],
            [
                100,
                ""
            ],
            [
                101,
                "        [TestMethod]"
            ],
            [
                102,
                "        public void IsDownloadCompletedWhenMemoryStorageNoDataTest()"
            ],
            [
                106,
                "            var chunk = new Chunk(0, size) { Position = size - 1, Storage = (new MemoryStorage()) };"
            ],
            [
                116,
                "        public void IsDownloadCompletedWhenMemoryStorageDataIsExistTest()"
            ],
            [
                119,
                "            var chunk = new Chunk(0, _testData.Length - 1) { Position = _testData.Length - 1, Storage = new MemoryStorage() };"
            ],
            [
                130,
                "        public void IsDownloadCompletedWhenFileStorageDataIsExistTest()"
            ],
            [
                131,
                "        {"
            ],
            [
                132,
                "            // arrange"
            ],
            [
                133,
                "            var chunk = new Chunk(0, _testData.Length - 1) { Position = _testData.Length - 1, Storage = new FileStorage(\"\") };"
            ],
            [
                134,
                "            chunk.Storage.WriteAsync(_testData, 0, _testData.Length).Wait();"
            ],
            [
                135,
                ""
            ],
            [
                136,
                "            // act"
            ],
            [
                137,
                "            bool isDownloadCompleted = chunk.IsDownloadCompleted();"
            ],
            [
                138,
                ""
            ],
            [
                139,
                "            // assert"
            ],
            [
                140,
                "            Assert.IsTrue(isDownloadCompleted);"
            ],
            [
                141,
                "        }"
            ],
            [
                142,
                ""
            ],
            [
                143,
                "        [TestMethod]"
            ],
            [
                144,
                "        public void IsValidPositionWithMemoryStorageTest()"
            ],
            [
                148,
                "            var chunk = new Chunk(0, size) { Storage = new MemoryStorage() };"
            ],
            [
                149,
                ""
            ],
            [
                150,
                "            // act"
            ],
            [
                151,
                "            bool isValidPosition = chunk.IsValidPosition();"
            ],
            [
                152,
                ""
            ],
            [
                153,
                "            // assert"
            ],
            [
                154,
                "            Assert.IsTrue(isValidPosition);"
            ],
            [
                155,
                "        }"
            ],
            [
                156,
                ""
            ],
            [
                157,
                "        [TestMethod]"
            ],
            [
                158,
                "        public void IsValidPositionWithFileStorageTest()"
            ],
            [
                159,
                "        {"
            ],
            [
                160,
                "            // arrange"
            ],
            [
                161,
                "            var size = 1024;"
            ],
            [
                162,
                "            var chunk = new Chunk(0, size) { Storage = new FileStorage(\"\") };"
            ],
            [
                176,
                "                Position = _testData.Length,"
            ],
            [
                177,
                "                Storage = new MemoryStorage() // overflowed"
            ],
            [
                186,
                ""
            ],
            [
                191,
                "            var chunk = new Chunk(0, _testData.Length - 1) { Position = 7, Storage = new MemoryStorage() };"
            ],
            [
                206,
                "            var chunk = new Chunk(0, size - 1) { Position = 10, Storage = (new MemoryStorage()) };"
            ],
            [
                250,
                "            var chunk = new Chunk(0, -1) { Position = 0, Storage = new MemoryStorage() };"
            ],
            [
                265,
                "                Storage = new MemoryStorage() // overflowed"
            ],
            [
                294,
                "            var chunk = new Chunk(0, 1024) { Position = 1, Storage = new MemoryStorage() };"
            ],
            [
                304,
                "        public void TestSetValidPositionWhenMemoryStorageChanged()"
            ],
            [
                305,
                "        {"
            ],
            [
                306,
                "            TestSetValidPositionWhenStorageChanged(new MemoryStorage());"
            ],
            [
                307,
                "        }"
            ],
            [
                308,
                ""
            ],
            [
                309,
                "        [TestMethod]"
            ],
            [
                310,
                "        public void TestSetValidPositionWhenFileStorageChanged()"
            ],
            [
                311,
                "        {"
            ],
            [
                312,
                "            TestSetValidPositionWhenStorageChanged(new FileStorage());"
            ],
            [
                313,
                "        }"
            ],
            [
                314,
                ""
            ],
            [
                315,
                "        private void TestSetValidPositionWhenStorageChanged(IStorage storage)"
            ],
            [
                321,
                "                Storage = storage"
            ],
            [
                325,
                "            storage.WriteAsync(DummyData.GenerateRandomBytes(nextPosition), 0, nextPosition);"
            ],
            [
                330,
                ""
            ],
            [
                331,
                "            storage.Clear();"
            ],
            [
                335,
                "        public void ChunkSerializationWhenFileStorageTest()"
            ],
            [
                336,
                "        {"
            ],
            [
                337,
                "            ChunkSerializationTest(new FileStorage());"
            ],
            [
                338,
                "        }"
            ],
            [
                339,
                ""
            ],
            [
                340,
                "        [TestMethod]"
            ],
            [
                341,
                "        public void ChunkSerializationWhenMemoryStorageTest()"
            ],
            [
                342,
                "        {"
            ],
            [
                343,
                "            ChunkSerializationTest(new MemoryStorage());"
            ],
            [
                344,
                "        }"
            ],
            [
                345,
                ""
            ],
            [
                346,
                "        private void ChunkSerializationTest(IStorage storage)"
            ],
            [
                355,
                "                Storage = new MemoryStorage()"
            ],
            [
                370,
                "        public void ChunkBinarySerializationWhenFileStorageTest()"
            ],
            [
                371,
                "        {"
            ],
            [
                372,
                "            ChunkBinarySerializationTest(new FileStorage());"
            ],
            [
                373,
                "        }"
            ],
            [
                374,
                ""
            ],
            [
                375,
                "        [TestMethod]"
            ],
            [
                376,
                "        public void ChunkBinarySerializationWhenMemoryStorageTest()"
            ],
            [
                377,
                "        {"
            ],
            [
                378,
                "            ChunkBinarySerializationTest(new MemoryStorage());"
            ],
            [
                379,
                "        }"
            ],
            [
                380,
                ""
            ],
            [
                381,
                "        private void ChunkBinarySerializationTest(IStorage storage)"
            ],
            [
                389,
                "                Storage = storage"
            ]
        ]
    },
    "num_lines_added": 35,
    "num_lines_removed": 116
}