{
    "hash": "9a8b2b919b12d9bddcf80952ead41d0f0715a7d8",
    "message": "[Game] Boat Speed Info (#495)\n\nBoats now display their movement and turning speed correctly in the boat info window.\r\nIncidentally, this also seems to the fix rubber-banding we had.",
    "file_num_lines": 204,
    "diff_parsed": {
        "added": [
            [
                2,
                "using System.Numerics;"
            ],
            [
                18,
                "// using NLog;"
            ],
            [
                24,
                "        private Thread _thread;"
            ],
            [
                25,
                "        // private static Logger _log = LogManager.GetCurrentClassLogger();"
            ],
            [
                30,
                "        private uint _tickCount ;"
            ],
            [
                31,
                "        private bool ThreadRunning { get; set; } = true;"
            ],
            [
                41,
                "            _thread = new Thread(PhysicsThread);"
            ],
            [
                42,
                "            _thread.Start();"
            ],
            [
                123,
                "            // If no driver, then no steering"
            ],
            [
                134,
                "            // Provide minimum speed of 1 when Throttle is used"
            ],
            [
                139,
                ""
            ],
            [
                140,
                "            // Convert sbyte throttle value to use as speed"
            ],
            [
                141,
                "            slave.Speed += (slave.Throttle * 0.00787401575f) * (velAccel / 10f);"
            ],
            [
                143,
                "            // Clamp speed between min and max Velocity"
            ],
            [
                147,
                "            slave.RotSpeed += (slave.Steering * 0.00787401575f) * (rotAccel / 100f);"
            ],
            [
                172,
                ""
            ],
            [
                177,
                ""
            ],
            [
                178,
                "            // Calculate Steering Force based on bounding box"
            ],
            [
                183,
                ""
            ],
            [
                189,
                ""
            ],
            [
                190,
                "            // Insert new Rotation data into MoveType"
            ],
            [
                195,
                ""
            ],
            [
                196,
                "            // Fill in the Velocity Data into the MoveType"
            ],
            [
                197,
                "            moveType.Velocity = new Vector3(rigidBody.LinearVelocity.X, rigidBody.LinearVelocity.Z, rigidBody.LinearVelocity.Y);"
            ],
            [
                198,
                "            moveType.AngVelX = rigidBody.AngularVelocity.X;"
            ],
            [
                199,
                "            moveType.AngVelY = rigidBody.AngularVelocity.Z;"
            ],
            [
                200,
                "            moveType.AngVelZ = rigidBody.AngularVelocity.Y;"
            ],
            [
                202,
                "            // Seems display the correct speed this way, but what happens if you go over the bounds ?"
            ],
            [
                203,
                "            moveType.VelX = (short)(rigidBody.LinearVelocity.X * 1024);"
            ],
            [
                204,
                "            moveType.VelY = (short)(rigidBody.LinearVelocity.Z * 1024);"
            ],
            [
                205,
                "            moveType.VelZ = (short)(rigidBody.LinearVelocity.Y * 1024);"
            ],
            [
                206,
                ""
            ],
            [
                207,
                "            // Apply new Location/Rotation to GameObject"
            ],
            [
                211,
                ""
            ],
            [
                212,
                "            // Send the packet"
            ],
            [
                215,
                ""
            ],
            [
                216,
                "            // Update all to main Slave and it's children"
            ]
        ],
        "deleted": [
            [
                3,
                ""
            ],
            [
                14,
                ""
            ],
            [
                19,
                ""
            ],
            [
                20,
                "using NLog;"
            ],
            [
                26,
                "        private Thread thread;"
            ],
            [
                27,
                "        private static Logger _log = LogManager.GetCurrentClassLogger();"
            ],
            [
                32,
                "        private uint _tickCount = 0;"
            ],
            [
                33,
                "        private bool ThreadRunning = true;"
            ],
            [
                43,
                "            thread = new Thread(PhysicsThread);"
            ],
            [
                44,
                "            thread.Start();"
            ],
            [
                124,
                "            /*"
            ],
            [
                125,
                "            var velAccel = 2.0f; //per s"
            ],
            [
                126,
                "            var rotAccel = 0.5f; //per s"
            ],
            [
                127,
                "            var maxVelForward = 12.9f; //per s"
            ],
            [
                128,
                "            var maxVelBackward = -5.0f;"
            ],
            [
                129,
                "            */"
            ],
            [
                145,
                "            slave.Speed += ((float)slave.Throttle * 0.00787401575f) * (velAccel / 10f);"
            ],
            [
                150,
                "            slave.RotSpeed += ((float)slave.Steering * 0.00787401575f) * (rotAccel / 100f);"
            ],
            [
                196,
                "            //slave.Transform.Local.Rotation = new Quaternion(jRot.X, jRot.Y, jRot.Z, jRot.W);"
            ],
            [
                197,
                "            //var rpySlave = slave.Transform.Local.ToRollPitchYaw();"
            ],
            [
                198,
                "            //slave.SetPosition(rigidBody.Position.X, rigidBody.Position.Z, rigidBody.Position.Y, slave.Transform.Local.Rotation.X, slave.Transform.Local.Rotation.Y, slave.Transform.Local.Rotation.Z);"
            ]
        ]
    },
    "num_lines_added": 37,
    "num_lines_removed": 21
}