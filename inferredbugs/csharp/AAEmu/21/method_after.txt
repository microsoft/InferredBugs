        public void BoatPhysicsTick(Slave slave, RigidBody rigidBody)
        {
            var moveType = (ShipMoveType)MoveType.GetType(MoveTypeEnum.Ship);
            moveType.UseSlaveBase(slave);
            var shipModel = ModelManager.Instance.GetShipModel(slave.Template.ModelId);

            var velAccel = shipModel.Accel; // 2.0f; //per s
            var rotAccel = shipModel.TurnAccel; // 0.5f; //per s
            var maxVelForward = shipModel.Velocity ; // 12.9f //per s
            var maxVelBackward = -shipModel.ReverseVelocity ; // -5.0f

            // If no driver, then no steering
            if (!slave.AttachedCharacters.ContainsKey(AttachPointKind.Driver))
            {
                slave.ThrottleRequest = 0;
                slave.SteeringRequest = 0;
            }

            ComputeThrottle(slave);
            ComputeSteering(slave);
            slave.RigidBody.IsActive = true;
            
            // Provide minimum speed of 1 when Throttle is used
            if ((slave.Throttle > 0) && (slave.Speed < 1f))
                slave.Speed = 1f;
            if ((slave.Throttle < 0) && (slave.Speed > -1f))
                slave.Speed = -1f;
            
            // Convert sbyte throttle value to use as speed
            slave.Speed += (slave.Throttle * 0.00787401575f) * (velAccel / 10f);
                
            // Clamp speed between min and max Velocity
            slave.Speed = Math.Min(slave.Speed, maxVelForward);
            slave.Speed = Math.Max(slave.Speed, maxVelBackward);

            slave.RotSpeed += (slave.Steering * 0.00787401575f) * (rotAccel / 100f);
            slave.RotSpeed = Math.Min(slave.RotSpeed, 1f);
            slave.RotSpeed = Math.Max(slave.RotSpeed, -1f);

            if (slave.Steering == 0)
            {
                slave.RotSpeed -= (slave.RotSpeed / 20);
                if (Math.Abs(slave.RotSpeed) <= 0.01)
                    slave.RotSpeed = 0;
            }

            if (slave.Throttle == 0) // this needs to be fixed : ships need to apply a static drag, and slowly ship away at the speed instead of doing it like this
            {
                slave.Speed -= (slave.Speed / 20f);
                if (Math.Abs(slave.Speed) < 0.01)
                    slave.Speed = 0;
            }

            // _log.Debug("Slave: {0}, speed: {1}, rotSpeed: {2}", slave.ObjId, slave.Speed, slave.RotSpeed);

            var rpy = PhysicsUtil.GetYawPitchRollFromMatrix(rigidBody.Orientation);
            var slaveRotRad = rpy.Item1 + (90 * (MathF.PI/ 180.0f));

            var forceThrottle = (float)slave.Speed * 50f;
            rigidBody.AddForce(new JVector(forceThrottle * rigidBody.Mass * MathF.Cos(slaveRotRad), 0.0f, forceThrottle * rigidBody.Mass * MathF.Sin(slaveRotRad)));
            
            // Make sure the steering is reversed when going backwards.
            float steer = slave.Steering;
            if (forceThrottle < 0)
                steer *= -1;
            
            // Calculate Steering Force based on bounding box 
            var boxSize = rigidBody.Shape.BoundingBox.Max - rigidBody.Shape.BoundingBox.Min;
            var steerForce = -steer * (rigidBody.Mass * boxSize.X * boxSize.Y / 16f); // Totally random value, but it feels right
            //var steerForce = -steer * (rigidBody.Mass * 2f);
            rigidBody.AddTorque(new JVector(0, steerForce, 0));
            
            /*
            if (slave.Steering != 0)
                _log.Debug("Steering: {0}, steer: {1}, force: {2}, mass: {3}, box: {4}, torque: {5}", slave.Steering,
                    steer, steerForce, rigidBody.Mass, boxSize, rigidBody.Torque);
            */
            
            // Insert new Rotation data into MoveType
            var (rotZ, rotY, rotX) = MathUtil.GetSlaveRotationFromDegrees(rpy.Item1, rpy.Item2, rpy.Item3);
            moveType.RotationX = rotX;
            moveType.RotationY = rotY;
            moveType.RotationZ = rotZ;
            
            // Fill in the Velocity Data into the MoveType
            moveType.Velocity = new Vector3(rigidBody.LinearVelocity.X, rigidBody.LinearVelocity.Z, rigidBody.LinearVelocity.Y);
            moveType.AngVelX = rigidBody.AngularVelocity.X;
            moveType.AngVelY = rigidBody.AngularVelocity.Z;
            moveType.AngVelZ = rigidBody.AngularVelocity.Y;

            // Seems display the correct speed this way, but what happens if you go over the bounds ?
            moveType.VelX = (short)(rigidBody.LinearVelocity.X * 1024);
            moveType.VelY = (short)(rigidBody.LinearVelocity.Z * 1024);
            moveType.VelZ = (short)(rigidBody.LinearVelocity.Y * 1024);

            // Apply new Location/Rotation to GameObject
            slave.Transform.Local.SetPosition(rigidBody.Position.X, rigidBody.Position.Z, rigidBody.Position.Y);
            var jRot = JQuaternion.CreateFromMatrix(rigidBody.Orientation);
            slave.Transform.Local.ApplyFromQuaternion(jRot.X, jRot.Z, jRot.Y, jRot.W);
            
            // Send the packet
            slave.BroadcastPacket(new SCOneUnitMovementPacket(slave.ObjId, moveType), false);
            // _log.Debug("Island: {0}", slave.RigidBody.CollisionIsland.Bodies.Count);
            
            // Update all to main Slave and it's children 
            slave.Transform.FinalizeTransform();
        }