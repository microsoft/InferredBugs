{
    "hash": "491827779214619919451d54c3c7b07ad9fb6bcd",
    "message": "printing current contract and function for translationi errors #62",
    "file_num_lines": 1796,
    "diff_parsed": {
        "added": [
            [
                71,
                "                VeriSolAssert(!member.TypeDescriptions.TypeString.StartsWith(\"struct \"),"
            ],
            [
                82,
                "            VeriSolAssert(varDecl.StateVariable, $\"{varDecl} is not a state variable\");"
            ],
            [
                111,
                "            // VeriSolAssert(node.IsConstructor || node.Modifiers.Count <= 1, \"Multiple Modifiers are not supported yet\");"
            ],
            [
                112,
                "            VeriSolAssert(currentContract != null);"
            ],
            [
                553,
                "                VeriSolAssert(baseContract != null);"
            ],
            [
                587,
                "            VeriSolAssert(ctor.IsConstructor, $\"{ctor.Name} is not a constructor\");"
            ],
            [
                623,
                "                    VeriSolAssert(baseContract != null);"
            ],
            [
                770,
                "            VeriSolAssert(currentStmtList != null);"
            ],
            [
                812,
                "                VeriSolAssert(node.Declarations.Count == 1, \"Invalid multiple variable declarations\");"
            ],
            [
                882,
                "                    VeriSolAssert(!isTupleAssignment, \"Not expecting a tuple for Constructors\");"
            ],
            [
                887,
                "                    VeriSolAssert(!isTupleAssignment, \"Not expecting a tuple for Constructors\");"
            ],
            [
                892,
                "                    VeriSolAssert(!isTupleAssignment, \"Not expecting a tuple for Keccak256\");"
            ],
            [
                899,
                "                    VeriSolAssert(!isTupleAssignment, \"Not expecting a tuple for abi.encodePacked\");"
            ],
            [
                905,
                "                    VeriSolAssert(!isTupleAssignment, \"Not expecting a tuple for type cast\");"
            ],
            [
                911,
                "                    VeriSolAssert(tmpVars is List<BoogieIdentifierExpr>, $\"tmpVar has to be a list of Boogie identifiers: {tmpVars}\");"
            ],
            [
                1034,
                "                        VeriSolAssert(false, \"Expecting a Boogie tuple expression here\");"
            ],
            [
                1156,
                "                VeriSolAssert(!(unaryOperation.SubExpression is UnaryOperation));"
            ],
            [
                1223,
                "                VeriSolAssert(currentExpr != null);"
            ],
            [
                1240,
                "                    VeriSolAssert(currentExpr != null);"
            ],
            [
                1248,
                "                VeriSolAssert(currentExpr != null);"
            ],
            [
                1307,
                "                VeriSolAssert(context.HasASTNodeId(node.ReferencedDeclaration), $\"Unknown node: {node}\");"
            ],
            [
                1309,
                "                VeriSolAssert(varDecl != null);"
            ],
            [
                1341,
                "            VeriSolAssert(node.Expression is Identifier || node.Expression is IndexAccess || node.Expression is FunctionCall,"
            ],
            [
                1382,
                "                VeriSolAssert(context.HasASTNodeId(identifier.ReferencedDeclaration), $\"Unknown node: {identifier}\");"
            ],
            [
                1404,
                "            VeriSolAssert(node.MemberName.Equals(\"length\"));"
            ],
            [
                1413,
                "            // VeriSolAssert(!(node.Expression is NewExpression), $\"new expressions should be handled in assignment\");"
            ],
            [
                1426,
                "                VeriSolAssert(node.Arguments.Count == 1);"
            ],
            [
                1433,
                "                VeriSolAssert(node.Arguments.Count == 1 || node.Arguments.Count == 2);"
            ],
            [
                1440,
                "                VeriSolAssert(node.Arguments.Count == 0 || node.Arguments.Count == 1);"
            ],
            [
                1460,
                "                    VeriSolAssert(false, $\"Unexpected implicit function {node.ToString()}\");"
            ],
            [
                1615,
                "            VeriSolAssert(node.Expression is NewExpression);"
            ],
            [
                1617,
                "            VeriSolAssert(newExpr.TypeName is UserDefinedTypeName);"
            ],
            [
                1621,
                "            VeriSolAssert(contract != null);"
            ],
            [
                1734,
                "                VeriSolAssert(node.Expression is MemberAccess);"
            ],
            [
                1743,
                "            VeriSolAssert(node.Expression is MemberAccess);"
            ],
            [
                1744,
                "            VeriSolAssert(node.Arguments.Count == 1);"
            ],
            [
                1821,
                "            VeriSolAssert(node.Expression is MemberAccess, $\"Expecting a member access expression here {node.Expression.ToString()}\");"
            ],
            [
                1905,
                "                VeriSolAssert(outParams.Count == 1, $\"Do not support getters for tuples yet {node.ToString()} \");"
            ],
            [
                1914,
                "            VeriSolAssert(context.HasFuncSignature(signature), $\"Cannot find signature: {signature}\");"
            ],
            [
                1916,
                "            VeriSolAssert(dynamicTypeToFuncMap.Count > 0);"
            ],
            [
                1961,
                "                VeriSolAssert(memberAccess.ReferencedDeclaration != null);"
            ],
            [
                1969,
                "                VeriSolAssert(contractDefinition != null, $\"Expecting a contract {contractTypeStr} to exist in context\");"
            ],
            [
                1995,
                "            VeriSolAssert(node.Expression is MemberAccess);"
            ],
            [
                1999,
                "            VeriSolAssert(contractId != null, $\"Unknown contract name: {memberAccess.Expression}\");"
            ],
            [
                2002,
                "            VeriSolAssert(contract != null);"
            ],
            [
                2018,
                "            VeriSolAssert(node.Kind.Equals(\"typeConversion\"));"
            ],
            [
                2019,
                "            VeriSolAssert(node.Arguments.Count == 1);"
            ],
            [
                2020,
                "            VeriSolAssert(node.Arguments[0] is Identifier || node.Arguments[0] is MemberAccess || node.Arguments[0] is Literal || node.Arguments[0] is IndexAccess,"
            ],
            [
                2030,
                "                VeriSolAssert(contract != null);"
            ],
            [
                2064,
                "        private void VeriSolAssert(bool cond, string message = \"\")"
            ],
            [
                2065,
                "        {"
            ],
            [
                2066,
                "            if (!cond)"
            ],
            [
                2067,
                "            {"
            ],
            [
                2068,
                "                var contractName = currentContract != null ? currentContract.Name : \"Unknown\";"
            ],
            [
                2069,
                "                var funcName = currentFunction != null ? currentFunction.Name : \"Unknown\";"
            ],
            [
                2070,
                "                Console.WriteLine($\"Translation Error!! Contract {contractName}, Function {funcName}:: {message}\");"
            ],
            [
                2071,
                "            }"
            ],
            [
                2072,
                "        }"
            ],
            [
                2073,
                ""
            ]
        ],
        "deleted": [
            [
                71,
                "                Debug.Assert(!member.TypeDescriptions.TypeString.StartsWith(\"struct \"),"
            ],
            [
                82,
                "            Debug.Assert(varDecl.StateVariable, $\"{varDecl} is not a state variable\");"
            ],
            [
                111,
                "            // Debug.Assert(node.IsConstructor || node.Modifiers.Count <= 1, \"Multiple Modifiers are not supported yet\");"
            ],
            [
                112,
                "            Debug.Assert(currentContract != null);"
            ],
            [
                553,
                "                Debug.Assert(baseContract != null);"
            ],
            [
                587,
                "            Debug.Assert(ctor.IsConstructor, $\"{ctor.Name} is not a constructor\");"
            ],
            [
                623,
                "                    Debug.Assert(baseContract != null);"
            ],
            [
                770,
                "            Debug.Assert(currentStmtList != null);"
            ],
            [
                812,
                "                Debug.Assert(node.Declarations.Count == 1, \"Invalid multiple variable declarations\");"
            ],
            [
                882,
                "                    Debug.Assert(!isTupleAssignment, \"Not expecting a tuple for Constructors\");"
            ],
            [
                887,
                "                    Debug.Assert(!isTupleAssignment, \"Not expecting a tuple for Constructors\");"
            ],
            [
                892,
                "                    Debug.Assert(!isTupleAssignment, \"Not expecting a tuple for Keccak256\");"
            ],
            [
                899,
                "                    Debug.Assert(!isTupleAssignment, \"Not expecting a tuple for abi.encodePacked\");"
            ],
            [
                905,
                "                    Debug.Assert(!isTupleAssignment, \"Not expecting a tuple for type cast\");"
            ],
            [
                911,
                "                    Debug.Assert(tmpVars is List<BoogieIdentifierExpr>, $\"tmpVar has to be a list of Boogie identifiers: {tmpVars}\");"
            ],
            [
                1034,
                "                        Debug.Assert(false, \"Expecting a Boogie tuple expression here\");"
            ],
            [
                1156,
                "                Debug.Assert(!(unaryOperation.SubExpression is UnaryOperation));"
            ],
            [
                1223,
                "                Debug.Assert(currentExpr != null);"
            ],
            [
                1240,
                "                    Debug.Assert(currentExpr != null);"
            ],
            [
                1248,
                "                Debug.Assert(currentExpr != null);"
            ],
            [
                1307,
                "                Debug.Assert(context.HasASTNodeId(node.ReferencedDeclaration), $\"Unknown node: {node}\");"
            ],
            [
                1309,
                "                Debug.Assert(varDecl != null);"
            ],
            [
                1341,
                "            Debug.Assert(node.Expression is Identifier || node.Expression is IndexAccess || node.Expression is FunctionCall,"
            ],
            [
                1382,
                "                Debug.Assert(context.HasASTNodeId(identifier.ReferencedDeclaration), $\"Unknown node: {identifier}\");"
            ],
            [
                1404,
                "            Debug.Assert(node.MemberName.Equals(\"length\"));"
            ],
            [
                1413,
                "            // Debug.Assert(!(node.Expression is NewExpression), $\"new expressions should be handled in assignment\");"
            ],
            [
                1426,
                "                Debug.Assert(node.Arguments.Count == 1);"
            ],
            [
                1433,
                "                Debug.Assert(node.Arguments.Count == 1 || node.Arguments.Count == 2);"
            ],
            [
                1440,
                "                Debug.Assert(node.Arguments.Count == 0 || node.Arguments.Count == 1);"
            ],
            [
                1460,
                "                    Debug.Assert(false, $\"Unexpected implicit function {node.ToString()}\");"
            ],
            [
                1615,
                "            Debug.Assert(node.Expression is NewExpression);"
            ],
            [
                1617,
                "            Debug.Assert(newExpr.TypeName is UserDefinedTypeName);"
            ],
            [
                1621,
                "            Debug.Assert(contract != null);"
            ],
            [
                1734,
                "                Debug.Assert(node.Expression is MemberAccess);"
            ],
            [
                1743,
                "            Debug.Assert(node.Expression is MemberAccess);"
            ],
            [
                1744,
                "            Debug.Assert(node.Arguments.Count == 1);"
            ],
            [
                1821,
                "            Debug.Assert(node.Expression is MemberAccess, $\"Expecting a member access expression here {node.Expression.ToString()}\");"
            ],
            [
                1905,
                "                Debug.Assert(outParams.Count == 1, $\"Do not support getters for tuples yet {node.ToString()} \");"
            ],
            [
                1914,
                "            Debug.Assert(context.HasFuncSignature(signature), $\"Cannot find signature: {signature}\");"
            ],
            [
                1916,
                "            Debug.Assert(dynamicTypeToFuncMap.Count > 0);"
            ],
            [
                1961,
                "                Debug.Assert(memberAccess.ReferencedDeclaration != null);"
            ],
            [
                1969,
                "                Debug.Assert(contractDefinition != null, $\"Expecting a contract {contractTypeStr} to exist in context\");"
            ],
            [
                1995,
                "            Debug.Assert(node.Expression is MemberAccess);"
            ],
            [
                1999,
                "            Debug.Assert(contractId != null, $\"Unknown contract name: {memberAccess.Expression}\");"
            ],
            [
                2002,
                "            Debug.Assert(contract != null);"
            ],
            [
                2018,
                "            Debug.Assert(node.Kind.Equals(\"typeConversion\"));"
            ],
            [
                2019,
                "            Debug.Assert(node.Arguments.Count == 1);"
            ],
            [
                2020,
                "            Debug.Assert(node.Arguments[0] is Identifier || node.Arguments[0] is MemberAccess || node.Arguments[0] is Literal || node.Arguments[0] is IndexAccess,"
            ],
            [
                2030,
                "                Debug.Assert(contract != null);"
            ]
        ]
    },
    "num_lines_added": 59,
    "num_lines_removed": 49
}