{
    "hash": "920ea6346a091a64012d6d23ad9596d3926b1d23",
    "message": "bug fixes",
    "file_num_lines": 2248,
    "diff_parsed": {
        "added": [
            [
                111,
                "    }"
            ],
            [
                117,
                "            var args = Utils.GetTokens(script, Constants.TOKEN_SEPARATION);"
            ],
            [
                120,
                "            var vari = GetVariable(args[0], script);"
            ],
            [
                121,
                "            if (vari == null || vari.GetValue(script).Type == Variable.VarType.UNDEFINED)"
            ],
            [
                122,
                "            {"
            ],
            [
                123,
                "                return Variable.Undefined;"
            ],
            [
                124,
                "            }"
            ],
            [
                125,
                ""
            ],
            [
                126,
                "            var exists = FunctionExists(args[0]);"
            ],
            [
                127,
                "            if (!exists)"
            ],
            [
                128,
                "            {"
            ],
            [
                129,
                "                return Variable.Undefined;"
            ],
            [
                130,
                "            }"
            ],
            [
                131,
                ""
            ],
            [
                132,
                "            bool complexVariable = args.Count > 1 &&"
            ],
            [
                133,
                "                Utils.CanConvertToDouble(args[1], out double converted) && converted > 0;"
            ],
            [
                137,
                "                element = Utils.GetVariable(args[0], script, false);"
            ],
            [
                141,
                "                element = new Variable(args[0]);"
            ],
            [
                185,
                "            var varValue = variable == null ? null : variable.GetValue(script);"
            ],
            [
                186,
                "            bool isUndefined = varValue == null || varValue.Type == Variable.VarType.UNDEFINED;"
            ],
            [
                241,
                "            var args = Utils.GetTokens(script);"
            ],
            [
                242,
                "            Variable result = Variable.EmptyInstance;"
            ],
            [
                243,
                "            foreach (var arg in args)"
            ],
            [
                244,
                "            {"
            ],
            [
                245,
                "                var ind = arg.IndexOf('=');"
            ],
            [
                246,
                "                if (ind <= 0)"
            ],
            [
                247,
                "                {"
            ],
            [
                248,
                "                    if (!FunctionExists(arg))"
            ],
            [
                249,
                "                    {"
            ],
            [
                250,
                "                        AddGlobalOrLocalVariable(arg, new GetVarFunction(new Variable(Variable.VarType.NONE)), script);"
            ],
            [
                251,
                "                    }"
            ],
            [
                252,
                "                    continue;"
            ],
            [
                253,
                "                }"
            ],
            [
                254,
                "                var varName = arg.Substring(0, ind);"
            ],
            [
                255,
                "                ParsingScript tempScript = new ParsingScript(arg.Substring(ind + 1));"
            ],
            [
                256,
                "                AssignFunction assign = new AssignFunction();"
            ],
            [
                257,
                "                result = assign.Assign(tempScript, varName, true);"
            ],
            [
                258,
                "            }"
            ],
            [
                259,
                "            return result;"
            ],
            [
                261,
                ""
            ],
            [
                264,
                "            //var varName = Utils.GetToken(script, Constants.TOKEN_SEPARATION);"
            ],
            [
                265,
                "            //char action = script.CurrentAndForward();"
            ],
            [
                266,
                ""
            ],
            [
                267,
                "            var args = Utils.GetTokens(script);"
            ],
            [
                268,
                "            Task<Variable> result = null;"
            ],
            [
                269,
                "            foreach (var arg in args)"
            ],
            [
                270,
                "            {"
            ],
            [
                271,
                "                var ind = arg.IndexOf('=');"
            ],
            [
                272,
                "                if (ind <= 0)"
            ],
            [
                273,
                "                {"
            ],
            [
                274,
                "                    if (!FunctionExists(arg))"
            ],
            [
                275,
                "                    {"
            ],
            [
                276,
                "                        AddGlobalOrLocalVariable(arg, new GetVarFunction(new Variable(Variable.VarType.UNDEFINED)), script);"
            ],
            [
                277,
                "                    }"
            ],
            [
                278,
                "                    continue;"
            ],
            [
                279,
                "                }"
            ],
            [
                280,
                "                var varName = arg.Substring(0, ind);"
            ],
            [
                281,
                "                ParsingScript tempScript = new ParsingScript(arg.Substring(ind + 1));"
            ],
            [
                282,
                "                AssignFunction assign = new AssignFunction();"
            ],
            [
                283,
                "                result = assign.AssignAsync(tempScript, varName, true);"
            ],
            [
                284,
                "            }"
            ],
            [
                285,
                ""
            ],
            [
                286,
                "            return result == null ? Variable.EmptyInstance: await result;"
            ],
            [
                1349,
                "    class UndefinedFunction : ParserFunction, INumericFunction"
            ],
            [
                1350,
                "    {"
            ],
            [
                1351,
                "        protected override Variable Evaluate(ParsingScript script)"
            ],
            [
                1352,
                "        {"
            ],
            [
                1353,
                "            return new Variable(Variable.VarType.UNDEFINED);"
            ],
            [
                1354,
                "        }"
            ],
            [
                1355,
                "    }"
            ],
            [
                1356,
                ""
            ]
        ],
        "deleted": [
            [
                111,
                "    }"
            ],
            [
                117,
                "            List<Variable> args = script.GetFunctionArgs();"
            ],
            [
                120,
                "            bool complexVariable = Utils.GetSafeInt(args, 1, 0) == 1;"
            ],
            [
                124,
                "                element = Utils.GetVariable(args[0].AsString(), script, false);"
            ],
            [
                128,
                "                element = Utils.GetSafeVariable(args, 0);"
            ],
            [
                171,
                "            script.Forward(Constants.UNDEFINED.Length);"
            ],
            [
                173,
                "            bool isUndefined = variable == null;"
            ],
            [
                174,
                "            //bool isNotNull = variable is GetVarFunction &&"
            ],
            [
                175,
                "            //    ((GetVarFunction)variable).Value != Variable.EmptyInstance;"
            ],
            [
                230,
                "            string varName = Utils.GetToken(script, Constants.TOKEN_SEPARATION);"
            ],
            [
                231,
                "            script.MoveForwardIf('=');"
            ],
            [
                232,
                "            AssignFunction assign = new AssignFunction();"
            ],
            [
                233,
                "            return assign.Assign(script, varName, true);"
            ],
            [
                237,
                "            string varName = Utils.GetToken(script, Constants.TOKEN_SEPARATION);"
            ],
            [
                238,
                "            script.MoveForwardIf('=');"
            ],
            [
                239,
                "            AssignFunction assign = new AssignFunction();"
            ],
            [
                240,
                "            return await assign.AssignAsync(script, varName, true);"
            ]
        ]
    },
    "num_lines_added": 71,
    "num_lines_removed": 17
}