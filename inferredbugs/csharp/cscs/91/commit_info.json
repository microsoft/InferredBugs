{
    "hash": "805955da41b8f2e0ffc2b95844013611c6a7e58e",
    "message": "Added ===, !==, and var as in JavaScript",
    "file_num_lines": 2027,
    "diff_parsed": {
        "added": [
            [
                16,
                ""
            ],
            [
                106,
                "    class VarFunction : ParserFunction"
            ],
            [
                107,
                "    {"
            ],
            [
                108,
                "        protected override Variable Evaluate(ParsingScript script)"
            ],
            [
                109,
                "        {"
            ],
            [
                110,
                "            string varName = Utils.GetToken(script, Constants.TOKEN_SEPARATION);"
            ],
            [
                111,
                "            script.MoveForwardIf('=');"
            ],
            [
                112,
                "            AssignFunction assign = new AssignFunction();"
            ],
            [
                113,
                "            return assign.Assign(script, varName, true);"
            ],
            [
                114,
                "        }"
            ],
            [
                115,
                "        protected override async Task<Variable> EvaluateAsync(ParsingScript script)"
            ],
            [
                116,
                "        {"
            ],
            [
                117,
                "            string varName = Utils.GetToken(script, Constants.TOKEN_SEPARATION);"
            ],
            [
                118,
                "            script.MoveForwardIf('=');"
            ],
            [
                119,
                "            AssignFunction assign = new AssignFunction();"
            ],
            [
                120,
                "            return await assign.AssignAsync(script, varName, true);"
            ],
            [
                121,
                "        }"
            ],
            [
                122,
                "    }"
            ],
            [
                123,
                ""
            ],
            [
                1678,
                "            return Assign(script, m_name);"
            ],
            [
                1679,
                "        }"
            ],
            [
                1680,
                ""
            ],
            [
                1681,
                "        public Variable Assign(ParsingScript script, string varName, bool localIfPossible = false)"
            ],
            [
                1682,
                "        {"
            ],
            [
                1683,
                "            m_name = Constants.GetRealName(varName);"
            ],
            [
                1702,
                "                    ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(result), script, localIfPossible);"
            ],
            [
                1713,
                "                ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(varValue), script, localIfPossible);"
            ],
            [
                1726,
                "            ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(array), script, localIfPossible);"
            ],
            [
                1729,
                ""
            ],
            [
                1732,
                "            return await AssignAsync(script, m_name);"
            ],
            [
                1733,
                "        }"
            ],
            [
                1734,
                ""
            ],
            [
                1735,
                "        public async Task<Variable> AssignAsync(ParsingScript script, string varName, bool localIfPossible = false)"
            ],
            [
                1736,
                "        {"
            ],
            [
                1737,
                "            m_name = Constants.GetRealName(varName);"
            ],
            [
                1756,
                "                    ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(result), script, localIfPossible);"
            ],
            [
                1767,
                "                ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(varValue), script, localIfPossible);"
            ],
            [
                1780,
                "            ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(array), script, localIfPossible);"
            ]
        ],
        "deleted": [
            [
                1659,
                "            m_name = Constants.GetRealName(m_name);"
            ],
            [
                1678,
                "                    ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(result), script);"
            ],
            [
                1689,
                "                ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(varValue), script);"
            ],
            [
                1702,
                "            ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(array), script);"
            ],
            [
                1707,
                "            m_name = Constants.GetRealName(m_name);"
            ],
            [
                1726,
                "                    ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(result), script);"
            ],
            [
                1737,
                "                ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(varValue), script);"
            ],
            [
                1750,
                "            ParserFunction.AddGlobalOrLocalVariable(m_name, new GetVarFunction(array), script);"
            ]
        ]
    },
    "num_lines_added": 38,
    "num_lines_removed": 8
}