{
    "hash": "c1c3a3fee6373dd76093a88c2bc682dcbaa558f8",
    "message": "enhancements by Dan",
    "file_num_lines": 2426,
    "diff_parsed": {
        "added": [
            [
                6,
                "using System.Reflection;"
            ],
            [
                699,
                "            Type t = TypeRefFunction.GetTypeAnywhere(className, true);"
            ],
            [
                700,
                "            if (t != null)"
            ],
            [
                701,
                "            {"
            ],
            [
                702,
                "                object reflectedObj = CreateReflectedObj(t, args);"
            ],
            [
                703,
                "                return new Variable(reflectedObj);"
            ],
            [
                704,
                "            }"
            ],
            [
                705,
                ""
            ],
            [
                725,
                "       private object CreateReflectedObj(Type t, List<Variable> args)"
            ],
            [
                726,
                "        {"
            ],
            [
                727,
                "            var constructors = t.GetConstructors(BindingFlags.Public);"
            ],
            [
                728,
                "            if (constructors == null)"
            ],
            [
                729,
                "                return null;"
            ],
            [
                730,
                ""
            ],
            [
                731,
                "            ConstructorInfo bestConstructor = null;"
            ],
            [
                732,
                "            var pConv = new Variable.ParameterConverter();"
            ],
            [
                733,
                "            foreach (var ctor in constructors)"
            ],
            [
                734,
                "            {"
            ],
            [
                735,
                "                if (pConv.ConvertVariablesToTypedArgs(args, ctor.GetParameters()))"
            ],
            [
                736,
                "                {"
            ],
            [
                737,
                "                    bestConstructor = ctor;"
            ],
            [
                738,
                "                    if (pConv.BestConversion == Variable.ParameterConverter.Conversion.Exact)"
            ],
            [
                739,
                "                        break;"
            ],
            [
                740,
                "                }"
            ],
            [
                741,
                "            }"
            ],
            [
                742,
                ""
            ],
            [
                743,
                "            if (bestConstructor == null)"
            ],
            [
                744,
                "            {"
            ],
            [
                745,
                "                if (args.Count > 0)"
            ],
            [
                746,
                "                    throw new ArgumentException($\"No suitable constructor found for [{t.FullName}]\");"
            ],
            [
                747,
                "                return Activator.CreateInstance(t);"
            ],
            [
                748,
                "            }"
            ],
            [
                749,
                "            return bestConstructor?.Invoke(pConv.BestTypedArgs);"
            ],
            [
                750,
                "        }"
            ],
            [
                751,
                ""
            ]
        ],
        "deleted": []
    },
    "num_lines_added": 35,
    "num_lines_removed": 0
}