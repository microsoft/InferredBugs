{
    "hash": "3bf1529268e0b07c9337c0c4312651f4b2449498",
    "message": "Add files via upload",
    "file_num_lines": 892,
    "diff_parsed": {
        "added": [
            [
                222,
                "      string funcReturn, funcName;"
            ],
            [
                223,
                "      Utils.GetCompiledArgs(script, out funcReturn, out funcName);"
            ],
            [
                279,
                "      List<List<string>> argsArrStr = new List<List<string>> ();"
            ],
            [
                280,
                "      List<List<double>> argsArrNum = new List<List<double>> ();"
            ],
            [
                281,
                "      List<Dictionary<string, string>> argsMapStr = new List<Dictionary<string, string>> ();"
            ],
            [
                282,
                "      List<Dictionary<string, double>> argsMapNum = new List<Dictionary<string, double>> ();"
            ],
            [
                283,
                ""
            ],
            [
                290,
                "        } else if (typeVar.Type == Variable.VarType.ARRAY_STR) {"
            ],
            [
                291,
                "          List<string> subArrayStr = new List<string> ();"
            ],
            [
                292,
                "          var tuple = args [i].Tuple;"
            ],
            [
                293,
                "          for (int j = 0; j < tuple.Count; j++) {"
            ],
            [
                294,
                "            subArrayStr.Add (tuple [j].AsString ());"
            ],
            [
                295,
                "          }"
            ],
            [
                296,
                "          argsArrStr.Add (subArrayStr);"
            ],
            [
                297,
                "        } else if (typeVar.Type == Variable.VarType.ARRAY_NUM) {"
            ],
            [
                298,
                "          List<double> subArrayNum = new List<double> ();"
            ],
            [
                299,
                "          var tuple = args [i].Tuple;"
            ],
            [
                300,
                "          for (int j = 0; j < tuple.Count; j++) {"
            ],
            [
                301,
                "            subArrayNum.Add (tuple [j].AsDouble ());"
            ],
            [
                302,
                "          }"
            ],
            [
                303,
                "          argsArrNum.Add (subArrayNum);"
            ],
            [
                304,
                "        } else if (typeVar.Type == Variable.VarType.MAP_STR) {"
            ],
            [
                305,
                "          Dictionary<string, string> subMapStr = new Dictionary<string, string> ();"
            ],
            [
                306,
                "          var tuple = args [i].Tuple;"
            ],
            [
                307,
                "          var keys = args [i].GetKeys ();"
            ],
            [
                308,
                "          for (int j = 0; j < tuple.Count; j++) {"
            ],
            [
                309,
                "            subMapStr.Add (keys[j], tuple[j].AsString());"
            ],
            [
                310,
                "          }"
            ],
            [
                311,
                "          argsMapStr.Add(subMapStr);"
            ],
            [
                312,
                "        } else if (typeVar.Type == Variable.VarType.MAP_NUM) {"
            ],
            [
                313,
                "          Dictionary<string, double> subMapNum = new Dictionary<string, double> ();"
            ],
            [
                314,
                "          var tuple = args [i].Tuple;"
            ],
            [
                315,
                "          var keys = args [i].GetKeys ();"
            ],
            [
                316,
                "          for (int j = 0; j < tuple.Count; j++) {"
            ],
            [
                317,
                "            subMapNum.Add (keys [j], tuple [j].AsDouble());"
            ],
            [
                318,
                "          }"
            ],
            [
                319,
                "          argsMapNum.Add(subMapNum);"
            ],
            [
                323,
                "      Variable result = m_precompiler.Run(argsStr, argsNum, argsArrStr, argsArrNum, argsMapStr, argsMapNum, false);"
            ]
        ],
        "deleted": [
            [
                222,
                "      string funcReturn = Utils.GetToken (script, Constants.TOKEN_SEPARATION);"
            ],
            [
                223,
                "      string funcName   = Utils.GetToken (script, Constants.TOKEN_SEPARATION);"
            ],
            [
                224,
                "      //Interpreter.Instance.AppendOutput(\"Registering function [\" + funcName + \"] ...\");"
            ],
            [
                289,
                "      Variable result = m_precompiler.Run(argsStr, argsNum, false);"
            ]
        ]
    },
    "num_lines_added": 38,
    "num_lines_removed": 4
}