{
    "hash": "e1b64e9f19f9e0fc7f72ed7b7b746f2682849561",
    "message": "[2021/06/20]\n* Loading AutoCad2000 (AC1015) or AutoCad2004 (AC1018) DXF files containing non-ASCII characters will work once again. Additionally the Net Standard 2.1 build requires a reference to the external library \"System.Text.Encoding.CodePages\".",
    "file_num_lines": 10181,
    "diff_parsed": {
        "added": [
            [
                160,
                "            Encoding encoding;"
            ],
            [
                161,
                "            if (version < DxfVersion.AutoCad2007)"
            ],
            [
                162,
                "            {"
            ],
            [
                163,
                ""
            ],
            [
                164,
                "#if !NET45"
            ],
            [
                165,
                "                Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);"
            ],
            [
                166,
                "#endif"
            ],
            [
                167,
                ""
            ],
            [
                168,
                "                string dwgCodePage = CheckHeaderVariable(stream, HeaderVariableCode.DwgCodePage, out this.isBinary);"
            ],
            [
                169,
                "                if (string.IsNullOrEmpty(dwgCodePage))"
            ],
            [
                170,
                "                {"
            ],
            [
                171,
                "                    Debug.Assert(false, \"No code page defined in the DXF.\");"
            ],
            [
                172,
                "                    encoding = Encoding.GetEncoding(Encoding.ASCII.WindowsCodePage);"
            ],
            [
                173,
                "                }"
            ],
            [
                174,
                "                else"
            ],
            [
                175,
                "                {"
            ],
            [
                176,
                "                    if (int.TryParse(dwgCodePage.Split('_')[1], out int codepage))"
            ],
            [
                177,
                "                    {"
            ],
            [
                178,
                "                        try"
            ],
            [
                179,
                "                        {"
            ],
            [
                180,
                "                            encoding = Encoding.GetEncoding(codepage);"
            ],
            [
                181,
                "                        }"
            ],
            [
                182,
                "                        catch"
            ],
            [
                183,
                "                        {"
            ],
            [
                184,
                "                            Debug.Assert(false, \"Invalid or not compatible code page defined in the DXF.\");"
            ],
            [
                185,
                "                            encoding = Encoding.GetEncoding(Encoding.ASCII.WindowsCodePage);"
            ],
            [
                186,
                "                        }"
            ],
            [
                187,
                "                    }"
            ],
            [
                188,
                "                    else"
            ],
            [
                189,
                "                    {"
            ],
            [
                190,
                "                        Debug.Assert(false, \"Invalid code page defined in the DXF.\");"
            ],
            [
                191,
                "                        encoding = Encoding.GetEncoding(Encoding.ASCII.WindowsCodePage);"
            ],
            [
                192,
                "                    }"
            ],
            [
                193,
                "                }"
            ],
            [
                194,
                ""
            ],
            [
                195,
                "            }"
            ],
            [
                196,
                "            else"
            ],
            [
                197,
                "            {"
            ],
            [
                198,
                "                encoding = Encoding.UTF8;"
            ],
            [
                199,
                "            }"
            ],
            [
                200,
                ""
            ],
            [
                203,
                "                this.chunk = new BinaryCodeValueReader(new BinaryReader(stream), encoding);"
            ],
            [
                207,
                "                this.chunk = new TextCodeValueReader(new StreamReader(stream, encoding, true));"
            ],
            [
                209,
                ""
            ],
            [
                334,
                "        private static bool IsBinary(Stream stream)"
            ],
            [
                366,
                "            string variable = string.Empty;"
            ],
            [
                393,
                "                            variable = chunk.ReadString(); // we found the variable we are looking for"
            ],
            [
                394,
                "                            break;"
            ],
            [
                403,
                "                    break;"
            ],
            [
                406,
                "            stream.Position = startPosition;"
            ],
            [
                407,
                "            return variable;"
            ]
        ],
        "deleted": [
            [
                148,
                "            long startPosition;"
            ],
            [
                149,
                ""
            ],
            [
                155,
                "            try"
            ],
            [
                156,
                "            {"
            ],
            [
                157,
                "                startPosition = stream.Position;"
            ],
            [
                158,
                "            }"
            ],
            [
                159,
                "            catch (NotSupportedException ex)"
            ],
            [
                160,
                "            {"
            ],
            [
                161,
                "                throw new ArgumentException(\"Streams with not accessible Position property are not supported.\", nameof(stream), ex);"
            ],
            [
                162,
                "            }"
            ],
            [
                163,
                ""
            ],
            [
                165,
                "            stream.Position = startPosition;"
            ],
            [
                174,
                "                this.chunk = new BinaryCodeValueReader(new BinaryReader(stream), version >= DxfVersion.AutoCad2007 ? Encoding.UTF8 : Encoding.ASCII);"
            ],
            [
                178,
                "                this.chunk = new TextCodeValueReader(new StreamReader(stream, version >= DxfVersion.AutoCad2007 ? Encoding.UTF8 : Encoding.ASCII, true));"
            ],
            [
                304,
                "        public static bool IsBinary(Stream stream)"
            ],
            [
                362,
                "                            return chunk.ReadString(); // we found the variable we are looking for"
            ],
            [
                371,
                "                    return null;"
            ],
            [
                374,
                "            return null;"
            ]
        ]
    },
    "num_lines_added": 51,
    "num_lines_removed": 18
}