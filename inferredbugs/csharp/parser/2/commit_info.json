{
    "hash": "ce6d1ea6cf30dbecdab015b3c556689f5358a8fa",
    "message": "Allow empty type definitions (#117)",
    "file_num_lines": 438,
    "diff_parsed": {
        "added": [
            [
                21,
                "            string query = \"ExtraComments\".ReadGraphQLFile();"
            ],
            [
                77,
                "            string query = \"CommentsOnFragmentSpread\".ReadGraphQLFile();"
            ],
            [
                95,
                "            string query = \"CommentsOnInlineFragment\".ReadGraphQLFile();"
            ],
            [
                113,
                "            string query = \"CommentsOnVariables\".ReadGraphQLFile();"
            ],
            [
                345,
                "            using var document = \"KitchenSink\".ReadGraphQLFile().Parse(new ParserOptions { Ignore = options });"
            ],
            [
                493,
                ""
            ],
            [
                494,
                "        [Theory]"
            ],
            [
                495,
                "        [InlineData(\"type Query\", ASTNodeKind.ObjectTypeDefinition)]"
            ],
            [
                496,
                "        [InlineData(\"extend type Query\", ASTNodeKind.TypeExtensionDefinition)]"
            ],
            [
                497,
                "        [InlineData(\"input Empty\", ASTNodeKind.InputObjectTypeDefinition)]"
            ],
            [
                498,
                "        [InlineData(\"interface Empty\", ASTNodeKind.InterfaceTypeDefinition)]"
            ],
            [
                499,
                "        [InlineData(\"enum Empty\", ASTNodeKind.EnumTypeDefinition)]"
            ],
            [
                500,
                "        [InlineData(\"extend type Type implements Interface\", ASTNodeKind.TypeExtensionDefinition)]"
            ],
            [
                501,
                "        public void Should_Parse_Empty_Types(string text, ASTNodeKind kind)"
            ],
            [
                502,
                "        {"
            ],
            [
                503,
                "            using var document = text.Parse();"
            ],
            [
                504,
                "            document.ShouldNotBeNull();"
            ],
            [
                505,
                "            document.Definitions[0].Kind.ShouldBe(kind);"
            ],
            [
                506,
                "        }"
            ],
            [
                507,
                ""
            ],
            [
                508,
                "        [Theory]"
            ],
            [
                509,
                "        [InlineData(\"type Query { }\", 1, 14)]"
            ],
            [
                510,
                "        [InlineData(\"extend type Query { }\", 1, 21)]"
            ],
            [
                511,
                "        [InlineData(\"input Empty { }\", 1, 15)]"
            ],
            [
                512,
                "        [InlineData(\"interface Empty { }\", 1, 19)]"
            ],
            [
                513,
                "        [InlineData(\"enum Empty { }\", 1, 14)]"
            ],
            [
                514,
                "        [InlineData(\"extend type Type implements Interface { }\", 1, 41)]"
            ],
            [
                515,
                "        public void Should_Throw_On_Empty_Types_With_Braces(string text, int line, int column)"
            ],
            [
                516,
                "        {"
            ],
            [
                517,
                "            var ex = Should.Throw<GraphQLSyntaxErrorException>(() => text.Parse());"
            ],
            [
                518,
                "            ex.Line.ShouldBe(line);"
            ],
            [
                519,
                "            ex.Column.ShouldBe(column);"
            ],
            [
                520,
                "            ex.Message.ShouldContain(\"Expected Name, found }\");"
            ],
            [
                521,
                "        }"
            ]
        ],
        "deleted": [
            [
                21,
                "            const string query = @\""
            ],
            [
                22,
                "query _ {"
            ],
            [
                23,
                "    person {"
            ],
            [
                24,
                "        name"
            ],
            [
                25,
                "        #comment1"
            ],
            [
                26,
                "    }"
            ],
            [
                27,
                "    #comment2"
            ],
            [
                28,
                "    test {"
            ],
            [
                29,
                "        alt"
            ],
            [
                30,
                "    }"
            ],
            [
                31,
                "    #comment3"
            ],
            [
                32,
                "}"
            ],
            [
                33,
                "#comment4"
            ],
            [
                34,
                "\";"
            ],
            [
                90,
                "            const string query = @\""
            ],
            [
                91,
                "query _ {"
            ],
            [
                92,
                "    person {"
            ],
            [
                93,
                "        #comment"
            ],
            [
                94,
                "        ...human"
            ],
            [
                95,
                "    }"
            ],
            [
                96,
                "}"
            ],
            [
                97,
                ""
            ],
            [
                98,
                "fragment human on person {"
            ],
            [
                99,
                "        name"
            ],
            [
                100,
                "}\";"
            ],
            [
                118,
                "            const string query = @\""
            ],
            [
                119,
                "query _ {"
            ],
            [
                120,
                "    person {"
            ],
            [
                121,
                "        #comment"
            ],
            [
                122,
                "        ... on human {"
            ],
            [
                123,
                "            name"
            ],
            [
                124,
                "        }"
            ],
            [
                125,
                "    }"
            ],
            [
                126,
                "}\";"
            ],
            [
                144,
                "            const string query = @\""
            ],
            [
                145,
                "query _("
            ],
            [
                146,
                "    #comment1"
            ],
            [
                147,
                "    $id: ID,"
            ],
            [
                148,
                "    $id2: String!,"
            ],
            [
                149,
                "    #comment3"
            ],
            [
                150,
                "    $id3: String) {"
            ],
            [
                151,
                "    person {"
            ],
            [
                152,
                "        name"
            ],
            [
                153,
                "    }"
            ],
            [
                154,
                "}\";"
            ],
            [
                386,
                "            using var document = LoadKitchenSink().Parse(new ParserOptions { Ignore = options });"
            ],
            [
                475,
                "        private static string LoadKitchenSink()"
            ],
            [
                476,
                "        {"
            ],
            [
                477,
                "            return @\"\ufeff# Copyright (c) 2015, Facebook, Inc."
            ],
            [
                478,
                "# All rights reserved."
            ],
            [
                479,
                "#"
            ],
            [
                480,
                "# This source code is licensed under the BSD-style license found in the"
            ],
            [
                481,
                "# LICENSE file in the root directory of this source tree. An additional grant"
            ],
            [
                482,
                "# of patent rights can be found in the PATENTS file in the same directory."
            ],
            [
                483,
                ""
            ],
            [
                484,
                "query queryName($foo: ComplexType, $site: Site = MOBILE) {"
            ],
            [
                485,
                "  whoever123is: node(id: [123, 456]) {"
            ],
            [
                486,
                "    id ,"
            ],
            [
                487,
                "    ... on User @defer {"
            ],
            [
                488,
                "      field2 {"
            ],
            [
                489,
                "        id ,"
            ],
            [
                490,
                "        alias: field1(first:10, after:$foo,) @include(if: $foo) {"
            ],
            [
                491,
                "          id,"
            ],
            [
                492,
                "          ...frag"
            ],
            [
                493,
                "        }"
            ],
            [
                494,
                "      }"
            ],
            [
                495,
                "    }"
            ],
            [
                496,
                "    ... @skip(unless: $foo) {"
            ],
            [
                497,
                "      id"
            ],
            [
                498,
                "    }"
            ],
            [
                499,
                "    ... {"
            ],
            [
                500,
                "      id"
            ],
            [
                501,
                "    }"
            ],
            [
                502,
                "  }"
            ],
            [
                503,
                "}"
            ],
            [
                504,
                ""
            ],
            [
                505,
                "mutation updateStory {"
            ],
            [
                506,
                "  like(story: {id: 123, EndDate: null}) {"
            ],
            [
                507,
                "    story {"
            ],
            [
                508,
                "      id"
            ],
            [
                509,
                "    }"
            ],
            [
                510,
                "  }"
            ],
            [
                511,
                "}"
            ],
            [
                512,
                ""
            ],
            [
                513,
                "mutation likeStory {"
            ],
            [
                514,
                "  like(story: 123) @defer {"
            ],
            [
                515,
                "    story {"
            ],
            [
                516,
                "      id"
            ],
            [
                517,
                "    }"
            ],
            [
                518,
                "  }"
            ],
            [
                519,
                "}"
            ],
            [
                520,
                ""
            ],
            [
                521,
                "subscription StoryLikeSubscription($input: StoryLikeSubscribeInput) {"
            ],
            [
                522,
                "  storyLikeSubscribe(input: $input) {"
            ],
            [
                523,
                "    story {"
            ],
            [
                524,
                "      likers {"
            ],
            [
                525,
                "        count"
            ],
            [
                526,
                "      }"
            ],
            [
                527,
                "      likeSentence {"
            ],
            [
                528,
                "        text"
            ],
            [
                529,
                "      }"
            ],
            [
                530,
                "    }"
            ],
            [
                531,
                "  }"
            ],
            [
                532,
                "}"
            ],
            [
                533,
                ""
            ],
            [
                534,
                "fragment frag on Friend {"
            ],
            [
                535,
                "  foo(size: $size, bar: $b, obj: {key: \"\"value\"\"})"
            ],
            [
                536,
                "}"
            ],
            [
                537,
                ""
            ],
            [
                538,
                "{"
            ],
            [
                539,
                "  unnamed(truthy: true, falsey: false),"
            ],
            [
                540,
                "  query"
            ],
            [
                541,
                "    }"
            ],
            [
                542,
                ""
            ],
            [
                543,
                "# Copyright (c) 2015, Facebook, Inc."
            ],
            [
                544,
                "# All rights reserved."
            ],
            [
                545,
                "#"
            ],
            [
                546,
                "# This source code is licensed under the BSD-style license found in the"
            ],
            [
                547,
                "# LICENSE file in the root directory of this source tree. An additional grant"
            ],
            [
                548,
                "# of patent rights can be found in the PATENTS file in the same directory."
            ],
            [
                549,
                ""
            ],
            [
                550,
                "schema {"
            ],
            [
                551,
                "  query: QueryType"
            ],
            [
                552,
                "  mutation: MutationType"
            ],
            [
                553,
                "}"
            ],
            [
                554,
                ""
            ],
            [
                555,
                "type Foo implements Bar"
            ],
            [
                556,
                "{"
            ],
            [
                557,
                "  # comment 1"
            ],
            [
                558,
                "  one: Type"
            ],
            [
                559,
                "  # comment 2"
            ],
            [
                560,
                "  two(argument: InputType!): Type"
            ],
            [
                561,
                "  # multiline comments"
            ],
            [
                562,
                "  # with very importand description #"
            ],
            [
                563,
                "  # # and symbol # and ##"
            ],
            [
                564,
                "  three(argument: InputType, other: String): Int"
            ],
            [
                565,
                "  four(argument: String = \"\"string\"\"): String"
            ],
            [
                566,
                "  five(argument: [String] = [\"\"string\"\", \"\"string\"\"]): String"
            ],
            [
                567,
                "  six(argument: InputType = { key: \"\"value\"\"}): Type"
            ],
            [
                568,
                "}"
            ],
            [
                569,
                ""
            ],
            [
                570,
                "type AnnotatedObject @onObject(arg: \"\"value\"\")"
            ],
            [
                571,
                "{"
            ],
            [
                572,
                "    # a comment"
            ],
            [
                573,
                "    annotatedField(arg: Type = \"\"default\"\" @onArg): Type @onField"
            ],
            [
                574,
                "}"
            ],
            [
                575,
                ""
            ],
            [
                576,
                "interface Bar"
            ],
            [
                577,
                "{"
            ],
            [
                578,
                "    one: Type"
            ],
            [
                579,
                "    four(argument: String = \"\"string\"\"): String"
            ],
            [
                580,
                "}"
            ],
            [
                581,
                ""
            ],
            [
                582,
                "interface AnnotatedInterface @onInterface {"
            ],
            [
                583,
                "  annotatedField(arg: Type @onArg): Type @onField"
            ],
            [
                584,
                "}"
            ],
            [
                585,
                ""
            ],
            [
                586,
                "union Feed = Story | Article | Advert"
            ],
            [
                587,
                ""
            ],
            [
                588,
                "union AnnotatedUnion @onUnion = A | B"
            ],
            [
                589,
                ""
            ],
            [
                590,
                "scalar CustomScalar"
            ],
            [
                591,
                ""
            ],
            [
                592,
                "scalar AnnotatedScalar @onScalar"
            ],
            [
                593,
                ""
            ],
            [
                594,
                "enum Site"
            ],
            [
                595,
                "{"
            ],
            [
                596,
                "    DESKTOP"
            ],
            [
                597,
                "  MOBILE"
            ],
            [
                598,
                "}"
            ],
            [
                599,
                ""
            ],
            [
                600,
                "enum AnnotatedEnum @onEnum {"
            ],
            [
                601,
                "  ANNOTATED_VALUE @onEnumValue"
            ],
            [
                602,
                "  OTHER_VALUE"
            ],
            [
                603,
                "}"
            ],
            [
                604,
                ""
            ],
            [
                605,
                "input InputType"
            ],
            [
                606,
                "{"
            ],
            [
                607,
                "    key: String!"
            ],
            [
                608,
                "  answer: Int = 42"
            ],
            [
                609,
                "}"
            ],
            [
                610,
                ""
            ],
            [
                611,
                "input AnnotatedInput @onInputObjectType {"
            ],
            [
                612,
                "  annotatedField: Type @onField"
            ],
            [
                613,
                "}"
            ],
            [
                614,
                ""
            ],
            [
                615,
                "extend type Foo {"
            ],
            [
                616,
                "  seven(argument: [String]): Type"
            ],
            [
                617,
                "}"
            ],
            [
                618,
                ""
            ],
            [
                619,
                "extend type Foo @onType { }"
            ],
            [
                620,
                ""
            ],
            [
                621,
                "type NoFields { }"
            ],
            [
                622,
                ""
            ],
            [
                623,
                "directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT"
            ],
            [
                624,
                ""
            ],
            [
                625,
                "directive @include(if: Boolean!)"
            ],
            [
                626,
                "  on FIELD"
            ],
            [
                627,
                "   | FRAGMENT_SPREAD"
            ],
            [
                628,
                "   | INLINE_FRAGMENT\";"
            ],
            [
                629,
                "        }"
            ],
            [
                630,
                ""
            ]
        ]
    },
    "num_lines_added": 34,
    "num_lines_removed": 202
}