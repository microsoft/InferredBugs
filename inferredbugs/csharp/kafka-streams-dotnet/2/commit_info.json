{
    "hash": "68fd0900d32ba21d621f6aea261df0b0f3a63f96",
    "message": "\ud83d\udc8a - unit test store change log reader",
    "file_num_lines": 168,
    "diff_parsed": {
        "added": [
            [
                4,
                "using System.Linq;"
            ],
            [
                5,
                "using System.Text;"
            ],
            [
                7,
                "using Moq;"
            ],
            [
                12,
                "using Streamiz.Kafka.Net.Processors;"
            ],
            [
                16,
                "using Streamiz.Kafka.Net.State.RocksDb;"
            ],
            [
                27,
                "        private RocksDbKeyValueStore store;"
            ],
            [
                30,
                "        private ProcessorContext context;"
            ],
            [
                31,
                "        private IConsumer<byte[], byte[]> restoreConsumer;"
            ],
            [
                32,
                ""
            ],
            [
                33,
                "        private Message<byte[], byte[]> CreateMessage(string topic, string key, string value)"
            ],
            [
                34,
                "        {"
            ],
            [
                35,
                "            StringSerDes stringSerDes = new StringSerDes();"
            ],
            [
                36,
                "            return new Message<byte[], byte[]>"
            ],
            [
                37,
                "            {"
            ],
            [
                38,
                "                Key = stringSerDes.Serialize(key, new SerializationContext(MessageComponentType.Key, topic)),"
            ],
            [
                39,
                "                Value = stringSerDes.Serialize(value, new SerializationContext(MessageComponentType.Key, topic))"
            ],
            [
                40,
                "            };"
            ],
            [
                41,
                "        }"
            ],
            [
                50,
                "            config.PollMs = 100;"
            ],
            [
                54,
                "            restoreConsumer = supplier.GetRestoreConsumer(config.ToConsumerConfig());"
            ],
            [
                66,
                "            store = new RocksDbKeyValueStore(\"store\");"
            ],
            [
                76,
                "            Mock<AbstractTask> moq = new Mock<AbstractTask>();"
            ],
            [
                77,
                "            moq.Setup(t => t.Id).Returns(new TaskId { Id = 0, Partition = 0 });"
            ],
            [
                79,
                "            context = new ProcessorContext(moq.Object, config, stateMgr);"
            ],
            [
                80,
                "            store.Init(context, store);"
            ],
            [
                91,
                "            Directory.Delete(config.StateDir, true);"
            ],
            [
                99,
                "            Assert.AreEqual(2, store.All().ToList().Count);"
            ],
            [
                108,
                "        [Test]"
            ],
            [
                109,
                "        public void RestoreFromRecovery()"
            ],
            [
                110,
                "        {"
            ],
            [
                111,
                "            storeChangelogReader.Restore();"
            ],
            [
                112,
                "            stateMgr.Checkpoint();"
            ],
            [
                113,
                "            stateMgr.Close();"
            ],
            [
                114,
                "            store.Init(context, store);"
            ],
            [
                115,
                "            stateMgr.InitializeOffsetsFromCheckpoint();"
            ],
            [
                116,
                ""
            ],
            [
                117,
                "            var producer = supplier.GetProducer(config.ToProducerConfig());"
            ],
            [
                118,
                "            producer.Produce(changelogTopic, CreateMessage(changelogTopic, \"key3\", \"value3\"));"
            ],
            [
                119,
                "            producer.Produce(changelogTopic, CreateMessage(changelogTopic, \"key4\", \"value4\"));"
            ],
            [
                120,
                ""
            ],
            [
                121,
                "            restoreConsumer.Resume(restoreConsumer.Assignment);"
            ],
            [
                122,
                ""
            ],
            [
                123,
                "            storeChangelogReader.Restore();"
            ],
            [
                124,
                "            stateMgr.Checkpoint();"
            ],
            [
                125,
                "            stateMgr.Close();"
            ],
            [
                126,
                ""
            ],
            [
                127,
                "            File.Delete(Path.Combine(config.StateDir, config.ApplicationId, \"0-0\", \".checkpoint\"));"
            ],
            [
                128,
                ""
            ],
            [
                129,
                "            store.Init(context, store);"
            ],
            [
                130,
                "            stateMgr.InitializeOffsetsFromCheckpoint();"
            ],
            [
                131,
                ""
            ],
            [
                132,
                "            restoreConsumer.Resume(restoreConsumer.Assignment);"
            ],
            [
                133,
                ""
            ],
            [
                134,
                "            storeChangelogReader.Restore();"
            ],
            [
                135,
                ""
            ],
            [
                136,
                "            Assert.AreEqual(4, store.All().ToList().Count);"
            ],
            [
                137,
                ""
            ],
            [
                138,
                "            var metadata = storeChangelogReader.GetMetadata(new TopicPartition(changelogTopic, 0));"
            ],
            [
                139,
                "            Assert.IsNotNull(metadata);"
            ],
            [
                140,
                "            Assert.AreEqual(ChangelogState.COMPLETED, metadata.ChangelogState);"
            ],
            [
                141,
                "            Assert.AreEqual(4, metadata.RestoreEndOffset);"
            ],
            [
                142,
                "            Assert.AreEqual(2, metadata.TotalRestored);"
            ],
            [
                143,
                "        }"
            ],
            [
                144,
                ""
            ],
            [
                145,
                "        [Test]"
            ],
            [
                146,
                "        public void RestoreFromScratch()"
            ],
            [
                147,
                "        {"
            ],
            [
                148,
                "            storeChangelogReader.Restore();"
            ],
            [
                149,
                "            stateMgr.Checkpoint();"
            ],
            [
                150,
                "            stateMgr.Close();"
            ],
            [
                151,
                ""
            ],
            [
                152,
                "            var producer = supplier.GetProducer(config.ToProducerConfig());"
            ],
            [
                153,
                "            producer.Produce(changelogTopic, CreateMessage(changelogTopic, \"key3\", \"value3\"));"
            ],
            [
                154,
                "            producer.Produce(changelogTopic, CreateMessage(changelogTopic, \"key4\", \"value4\"));"
            ],
            [
                155,
                ""
            ],
            [
                156,
                "            // delete state dir rocksdb"
            ],
            [
                157,
                "            Directory.Delete(Path.Combine(config.StateDir), true);"
            ],
            [
                158,
                ""
            ],
            [
                159,
                "            restoreConsumer.Resume(restoreConsumer.Assignment);"
            ],
            [
                160,
                "            store.Init(context, store);"
            ],
            [
                161,
                "            stateMgr.InitializeOffsetsFromCheckpoint();"
            ],
            [
                162,
                ""
            ],
            [
                163,
                "            storeChangelogReader.Restore();"
            ],
            [
                164,
                ""
            ],
            [
                165,
                "            Assert.AreEqual(4, store.All().ToList().Count);"
            ],
            [
                166,
                ""
            ],
            [
                167,
                "            var metadata = storeChangelogReader.GetMetadata(new TopicPartition(changelogTopic, 0));"
            ],
            [
                168,
                "            Assert.IsNotNull(metadata);"
            ],
            [
                169,
                "            Assert.AreEqual(ChangelogState.COMPLETED, metadata.ChangelogState);"
            ],
            [
                170,
                "            Assert.AreEqual(4, metadata.RestoreEndOffset);"
            ],
            [
                171,
                "            Assert.AreEqual(4, metadata.TotalRestored);"
            ],
            [
                172,
                "        }"
            ],
            [
                173,
                ""
            ],
            [
                174,
                "        [Test]"
            ],
            [
                175,
                "        public void RestoreFromInvalidOffset()"
            ],
            [
                176,
                "        {"
            ],
            [
                177,
                "            storeChangelogReader.Restore();"
            ],
            [
                178,
                "            stateMgr.Checkpoint();"
            ],
            [
                179,
                "            stateMgr.Close();"
            ],
            [
                180,
                ""
            ],
            [
                181,
                "            // set an invalid offset in checkpoint file"
            ],
            [
                182,
                "            StringBuilder sb = new StringBuilder();"
            ],
            [
                183,
                "            sb.AppendLine(\"0\").AppendLine(\"1\").AppendLine(\"store-changelog-topic 0 -100\");"
            ],
            [
                184,
                "            File.WriteAllText(Path.Combine(config.StateDir, config.ApplicationId, \"0-0\", \".checkpoint\"), sb.ToString());"
            ],
            [
                185,
                ""
            ],
            [
                186,
                "            restoreConsumer.Resume(restoreConsumer.Assignment);"
            ],
            [
                187,
                "            store.Init(context, store);"
            ],
            [
                188,
                "            stateMgr.InitializeOffsetsFromCheckpoint();"
            ],
            [
                189,
                ""
            ],
            [
                190,
                "            storeChangelogReader.Restore();"
            ],
            [
                191,
                ""
            ],
            [
                192,
                "            Assert.AreEqual(2, store.All().ToList().Count);"
            ],
            [
                193,
                ""
            ],
            [
                194,
                "            var metadata = storeChangelogReader.GetMetadata(new TopicPartition(changelogTopic, 0));"
            ],
            [
                195,
                "            Assert.IsNotNull(metadata);"
            ],
            [
                196,
                "            Assert.AreEqual(ChangelogState.COMPLETED, metadata.ChangelogState);"
            ],
            [
                197,
                "            Assert.AreEqual(2, metadata.RestoreEndOffset);"
            ],
            [
                198,
                "            Assert.AreEqual(2, metadata.TotalRestored);"
            ],
            [
                199,
                "        }"
            ]
        ],
        "deleted": [
            [
                12,
                "using Streamiz.Kafka.Net.State.InMemory;"
            ],
            [
                17,
                "    // TODO : 1.2.0, restore from recovery, restore from scratch, restore from offset invalid ..."
            ],
            [
                24,
                "        private InMemoryKeyValueStore store;"
            ],
            [
                38,
                "            var consumer = supplier.GetConsumer(config.ToConsumerConfig(), null);"
            ],
            [
                39,
                "            var restoreConsumer = supplier.GetRestoreConsumer(config.ToConsumerConfig());"
            ],
            [
                51,
                "            store = new InMemoryKeyValueStore(\"store\");"
            ],
            [
                61,
                "            stateMgr.Register(store, (k, v) => store.Put(k, v));"
            ],
            [
                62,
                ""
            ],
            [
                64,
                "            Message<byte[], byte[]> CreateMessage(string topic, string key, string value)"
            ],
            [
                65,
                "            {"
            ],
            [
                66,
                "                StringSerDes stringSerDes = new StringSerDes();"
            ],
            [
                67,
                "                return new Message<byte[], byte[]>"
            ],
            [
                68,
                "                {"
            ],
            [
                69,
                "                    Key = stringSerDes.Serialize(key, new SerializationContext(MessageComponentType.Key, topic)),"
            ],
            [
                70,
                "                    Value = stringSerDes.Serialize(value, new SerializationContext(MessageComponentType.Key, topic))"
            ],
            [
                71,
                "                };"
            ],
            [
                72,
                "            }"
            ],
            [
                90,
                "            Assert.AreEqual(2, store.ApproximateNumEntries());"
            ]
        ]
    },
    "num_lines_added": 119,
    "num_lines_removed": 18
}