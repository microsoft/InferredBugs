{
    "hash": "f76b3c796883f5d3770e73ee4c5db0f98aba4569",
    "message": "PInvoke Shizzle",
    "file_num_lines": 70,
    "diff_parsed": {
        "added": [
            [
                5,
                "using System.Runtime.InteropServices;"
            ],
            [
                6,
                "using System.Text;"
            ],
            [
                12,
                "        [DllImport(\"psapi\")]"
            ],
            [
                13,
                "        private static extern bool EnumDeviceDrivers("
            ],
            [
                14,
                "            [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.U4)][In][Out] UInt32[] ddAddresses,"
            ],
            [
                15,
                "            UInt32 arraySizeBytes,"
            ],
            [
                16,
                "            [MarshalAs(UnmanagedType.U4)] out UInt32 bytesNeeded);"
            ],
            [
                17,
                ""
            ],
            [
                18,
                "        [DllImport(\"psapi\")]"
            ],
            [
                19,
                "        private static extern int GetDeviceDriverBaseName("
            ],
            [
                20,
                "            UInt32 ddAddress,"
            ],
            [
                21,
                "            StringBuilder ddBaseName,"
            ],
            [
                22,
                "            int baseNameStringSizeChars);"
            ],
            [
                23,
                ""
            ],
            [
                26,
                "            UInt32 arraySize;"
            ],
            [
                27,
                "            UInt32 arraySizeBytes;"
            ],
            [
                28,
                "            UInt32[] ddAddresses;"
            ],
            [
                29,
                "            UInt32 bytesNeeded;"
            ],
            [
                30,
                "            bool success;"
            ],
            [
                32,
                "            // Figure out how large an array we need to hold the device driver 'load addresses'"
            ],
            [
                33,
                "            success = EnumDeviceDrivers(null, 0, out bytesNeeded);"
            ],
            [
                35,
                "            Console.WriteLine(\"Success? \" + success);"
            ],
            [
                36,
                "            Console.WriteLine(\"Array bytes needed? \" + bytesNeeded);"
            ],
            [
                37,
                ""
            ],
            [
                38,
                "            if (!success)"
            ],
            [
                40,
                "                Console.WriteLine(\"Call to EnumDeviceDrivers failed!\");"
            ],
            [
                41,
                "                int error = Marshal.GetLastWin32Error();"
            ],
            [
                42,
                "                Console.WriteLine(\"The last Win32 Error was: \" + error);"
            ],
            [
                43,
                "                return;"
            ],
            [
                45,
                "            if (bytesNeeded == 0)"
            ],
            [
                47,
                "                Console.WriteLine(\"Apparently, there were NO device drivers to enumerate.  Strange.\");"
            ],
            [
                48,
                "                return;"
            ],
            [
                50,
                "            // Allocate the array; as each ID is a 4-byte int, it should be 1/4th the size of bytesNeeded"
            ],
            [
                51,
                "            arraySize = bytesNeeded / 4;"
            ],
            [
                52,
                "            arraySizeBytes = bytesNeeded;"
            ],
            [
                53,
                "            ddAddresses = new UInt32[arraySize];"
            ],
            [
                55,
                "            // Now fill it"
            ],
            [
                56,
                "            success = EnumDeviceDrivers(ddAddresses, arraySizeBytes, out bytesNeeded);"
            ],
            [
                58,
                "            if (!success)"
            ],
            [
                60,
                "                Console.WriteLine(\"Call to EnumDeviceDrivers failed!\");"
            ],
            [
                61,
                "                int error = Marshal.GetLastWin32Error();"
            ],
            [
                62,
                "                Console.WriteLine(\"The last Win32 Error was: \" + error);"
            ],
            [
                63,
                "                return;"
            ],
            [
                64,
                "            }"
            ],
            [
                65,
                "            for (int i = 0; i < arraySize; i++)"
            ],
            [
                66,
                "            {"
            ],
            [
                67,
                "                // If the length of the device driver base name is over 1000 characters, good luck to it.  :-)"
            ],
            [
                68,
                "                StringBuilder sb = new StringBuilder(1000);"
            ],
            [
                69,
                ""
            ],
            [
                70,
                "                int result = GetDeviceDriverBaseName(ddAddresses[i], sb, sb.Capacity);"
            ],
            [
                71,
                ""
            ],
            [
                72,
                "                if(result == 0)"
            ],
            [
                74,
                "                    int error = Marshal.GetLastWin32Error();"
            ],
            [
                75,
                "                    Console.WriteLine(\"The last Win32 Error was: \" + error);"
            ],
            [
                77,
                "                else"
            ],
            [
                78,
                "                {"
            ],
            [
                79,
                "                    Console.WriteLine(\"Device driver LoadAddress: \" + ddAddresses[i] + \", BaseName: \" + sb.ToString());"
            ],
            [
                80,
                "                }"
            ],
            [
                81,
                ""
            ]
        ],
        "deleted": [
            [
                12,
                "            /*Console.WriteLine(\"[!] Checking Drivers...\");"
            ],
            [
                13,
                "            foreach (ServiceController driver in ServiceController.GetDevices())"
            ],
            [
                14,
                "            {"
            ],
            [
                15,
                "                Console.WriteLine($\"{driver.DisplayName} {driver.ServiceName} {driver.Status} {driver.ServiceType}\");"
            ],
            [
                16,
                "            }*/"
            ],
            [
                17,
                ""
            ],
            [
                18,
                "            //TESTING METHOD"
            ],
            [
                19,
                "            /*SelectQuery query = new SelectQuery(\"Win32_BaseService\");"
            ],
            [
                20,
                "            ManagementObjectSearcher searcher = new ManagementObjectSearcher(query);"
            ],
            [
                21,
                "            foreach (ManagementObject ManageObject in searcher.Get())"
            ],
            [
                22,
                "            {"
            ],
            [
                23,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"Name\"));"
            ],
            [
                24,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"PathName\"));"
            ],
            [
                25,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"Description\"));"
            ],
            [
                26,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"Caption\"));"
            ],
            [
                27,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"DisplayName\"));"
            ],
            [
                28,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"SystemName\"));"
            ],
            [
                29,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"StartName\"));"
            ],
            [
                30,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"CreationClassName\"));"
            ],
            [
                31,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"Started\"));"
            ],
            [
                32,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"TagId\"));"
            ],
            [
                33,
                "                Console.WriteLine(ManageObject.GetPropertyValue(\"SystemCreationClassNAme\"));"
            ],
            [
                34,
                "            }*/"
            ],
            [
                37,
                ""
            ],
            [
                38,
                "            //WORKING WMI FOR SYSTEMDRIVERS BUT NOT MINI FILTERS"
            ],
            [
                39,
                "            var driverList = new ManagementObjectSearcher(\"Select * From Win32_Service\").Get();"
            ],
            [
                40,
                "            bool foundSuspiciousDriver = false;"
            ],
            [
                41,
                "            foreach (var driver in driverList)"
            ],
            [
                43,
                "                foundSuspiciousDriver = CheckDriver(driver) || foundSuspiciousDriver;"
            ],
            [
                45,
                "            if (!foundSuspiciousDriver)"
            ],
            [
                47,
                "                Console.WriteLine(\"[+] No suspicious drivers found\\n\");"
            ],
            [
                49,
                "        }"
            ],
            [
                50,
                ""
            ],
            [
                51,
                "        private static bool CheckDriver(ManagementBaseObject driver)"
            ],
            [
                52,
                "        {"
            ],
            [
                53,
                "            bool foundSuspiciousDriver = false;"
            ],
            [
                54,
                "            var driverName = driver[\"Name\"];"
            ],
            [
                55,
                "            var driverDisplayName = driver[\"DisplayName\"];"
            ],
            [
                56,
                "            var driverDescription = driver[\"Description\"];"
            ],
            [
                57,
                "            var driverCaption = driver[\"Caption\"];"
            ],
            [
                58,
                "            var driverPathName = driver[\"PathName\"];"
            ],
            [
                59,
                "            var driverState = driver[\"State\"];"
            ],
            [
                60,
                "            var driverStartName = driver[\"StartName\"];"
            ],
            [
                62,
                "            var allattribs = $\"{driverName} - \" +"
            ],
            [
                63,
                "                $\"{driverDisplayName} - \" +"
            ],
            [
                64,
                "                $\"{driverDescription} - \" +"
            ],
            [
                65,
                "                $\"{driverCaption} - \" +"
            ],
            [
                66,
                "                $\"{driverPathName}\";"
            ],
            [
                68,
                "            foreach (var edrstring in EDRData.edrlist)"
            ],
            [
                70,
                "                if (allattribs.ToLower().Contains(edrstring.ToLower()))"
            ],
            [
                72,
                "                    Console.WriteLine($\"[-] Suspicious driver found:\" +"
            ],
            [
                73,
                "                        $\"\\n\\tName: {driverName}\" +"
            ],
            [
                74,
                "                        $\"\\n\\tDisplayName: {driverDisplayName}\" +"
            ],
            [
                75,
                "                        $\"\\n\\tDescription: {driverDescription}\" +"
            ],
            [
                76,
                "                        $\"\\n\\tCaption: {driverCaption}\" +"
            ],
            [
                77,
                "                        $\"\\n\\tBinary: {driverPathName}\" +"
            ],
            [
                78,
                "                        $\"\\n\\tStatus: {driverState}\" +"
            ],
            [
                79,
                "                        $\"\\n\\tStartName: {driverStartName}\" +"
            ],
            [
                80,
                "                        $\"\\n[!] Matched on: {edrstring}\\n\");"
            ],
            [
                81,
                "                    foundSuspiciousDriver = true;"
            ],
            [
                84,
                "            return foundSuspiciousDriver;"
            ]
        ]
    },
    "num_lines_added": 59,
    "num_lines_removed": 61
}