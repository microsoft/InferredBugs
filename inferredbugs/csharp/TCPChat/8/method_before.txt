    public void DecryptStream(Stream inputStream, Stream outputStream, byte[] Key)
    {
      ThrowIfDisposed();

      if (inputStream == null || outputStream == null || Key == null)
        throw new ArgumentNullException("One of the arguments (or all) equals null");

      int maxBufferSizeValue = bufferCoefficient * ConstBufferCoefficient;

      byte[] originFileLengthArray = new byte[sizeof(long)];
      byte[] iv = new byte[cryptAlgorithm.BlockSize / 8];

      inputStream.Read(originFileLengthArray, 0, sizeof(long));
      inputStream.Read(iv, 0, cryptAlgorithm.BlockSize / 8);

      long deltaLength = inputStream.Length - HeadSize - cryptAlgorithm.BlockSize / 8 - BitConverter.ToInt64(originFileLengthArray, 0);

      using (ICryptoTransform decryptor = cryptAlgorithm.CreateDecryptor(Key, iv))
      {
        CryptoStream csEncrypt = new CryptoStream(inputStream, decryptor, CryptoStreamMode.Read);

        byte[] dataBuffer = new byte[maxBufferSizeValue];

        while (inputStream.Position < inputStream.Length)
        {
          int dataSize = (inputStream.Length - inputStream.Position > maxBufferSizeValue) ? maxBufferSizeValue : (int)(inputStream.Length - inputStream.Position - deltaLength);

          csEncrypt.Read(dataBuffer, 0, dataSize);
          outputStream.Write(dataBuffer, 0, dataSize);
        }
      }
    }