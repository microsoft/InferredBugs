{
    "hash": "423778b69eab92dce192b20e47379590b386e712",
    "message": "Add SourceExtent calculation for Markdown matches\n\nThis change introduces the SourceExtent class which tracks the\nline and column number of each relevant MarkdownNode that has\na position in the source document.  The SourceExtent also holds\nthe OriginalText where the match was found for easy referral.",
    "file_num_lines": 316,
    "diff_parsed": {
        "added": [
            [
                15,
                "        private string _documentText;"
            ],
            [
                35,
                "            _documentText = this.PrepareDocumentString(markdownString);"
            ],
            [
                99,
                "            // This algorithm works by applying each Markdown pattern to the"
            ],
            [
                100,
                "            // document string starting at startOffset and finding which match"
            ],
            [
                101,
                "            // is nearest to the startOffset.  If the match is at a position"
            ],
            [
                102,
                "            // greater than startOffset, the starting part of the string is"
            ],
            [
                103,
                "            // then treated as a normal text span before the matched section is"
            ],
            [
                104,
                "            // converted into its node type."
            ],
            [
                105,
                "            int startOffset = 0;"
            ],
            [
                106,
                "            int currentLineNumber = 0;"
            ],
            [
                107,
                "            int currentColumnNumber = 0;"
            ],
            [
                108,
                ""
            ],
            [
                109,
                "            while (startOffset < _documentText.Length)"
            ],
            [
                117,
                "                    if (markdownPattern.TryMatchString(_documentText, startOffset, out regexMatch))"
            ],
            [
                134,
                "                        // Get the extent of the span text"
            ],
            [
                135,
                "                        SourceExtent spanExtent ="
            ],
            [
                136,
                "                            new SourceExtent("
            ],
            [
                137,
                "                                _documentText,"
            ],
            [
                138,
                "                                startOffset,"
            ],
            [
                139,
                "                                firstMatch.Index,"
            ],
            [
                140,
                "                                currentLineNumber,"
            ],
            [
                141,
                "                                currentColumnNumber);"
            ],
            [
                142,
                ""
            ],
            [
                144,
                "                            spanExtent.OriginalText,"
            ],
            [
                145,
                "                            spanExtent);"
            ],
            [
                146,
                ""
            ],
            [
                147,
                "                        // Make sure the line and column number are updated"
            ],
            [
                148,
                "                        // before calculating the position of the match"
            ],
            [
                149,
                "                        currentLineNumber = spanExtent.Line.End;"
            ],
            [
                150,
                "                        currentColumnNumber = spanExtent.Column.End;"
            ],
            [
                153,
                "                    // Count the newlines in the entire span"
            ],
            [
                154,
                "                    SourceExtent matchExtent ="
            ],
            [
                155,
                "                        new SourceExtent("
            ],
            [
                156,
                "                            _documentText,"
            ],
            [
                157,
                "                            firstMatch.Index,"
            ],
            [
                158,
                "                            firstMatch.Index + firstMatch.Length,"
            ],
            [
                159,
                "                            currentLineNumber,"
            ],
            [
                160,
                "                            currentColumnNumber);"
            ],
            [
                161,
                ""
            ],
            [
                163,
                "                    firstMatchedPattern.MatchAction(firstMatch, matchExtent);"
            ],
            [
                165,
                "                    // Calculate the next offset, line, and column"
            ],
            [
                166,
                "                    startOffset = firstMatch.Index + firstMatch.Length;"
            ],
            [
                167,
                "                    currentLineNumber = matchExtent.Line.End;"
            ],
            [
                168,
                "                    currentColumnNumber = matchExtent.Column.End;"
            ],
            [
                172,
                "                    // Get the extent containing the remaining text"
            ],
            [
                173,
                "                    SourceExtent spanExtent ="
            ],
            [
                174,
                "                        new SourceExtent("
            ],
            [
                175,
                "                            _documentText,"
            ],
            [
                176,
                "                            startOffset,"
            ],
            [
                177,
                "                            _documentText.Length,"
            ],
            [
                178,
                "                            currentLineNumber,"
            ],
            [
                179,
                "                            currentColumnNumber);"
            ],
            [
                180,
                ""
            ],
            [
                182,
                "                    this.CreateNormalSpan("
            ],
            [
                183,
                "                        spanExtent.OriginalText,"
            ],
            [
                184,
                "                        spanExtent);"
            ],
            [
                186,
                "                    startOffset = _documentText.Length;"
            ],
            [
                187,
                "                }"
            ],
            [
                194,
                "        private void CreateHashHeader(Match regexMatch, SourceExtent sourceExtent)"
            ],
            [
                201,
                "                    regexMatch.Groups[1].Value.Length,"
            ],
            [
                202,
                "                    sourceExtent));"
            ],
            [
                205,
                "        private void CreateUnderlineHeader(Match regexMatch, SourceExtent sourceExtent)"
            ],
            [
                216,
                "                    headerLevel,"
            ],
            [
                217,
                "                    sourceExtent));"
            ],
            [
                220,
                "        private void CreateTickCodeBlock(Match regexMatch, SourceExtent sourceExtent)"
            ],
            [
                226,
                "                        regexMatch.Groups[2].Value,"
            ],
            [
                227,
                "                        sourceExtent));"
            ],
            [
                230,
                "        private void CreateNormalSpan(string spanText, SourceExtent sourceExtent)"
            ],
            [
                242,
                "                _currentParagraphSpans.Add("
            ],
            [
                243,
                "                    new TextSpan("
            ],
            [
                244,
                "                        spanText,"
            ],
            [
                245,
                "                        sourceExtent));"
            ],
            [
                249,
                "        private void CreateItalicSpan(Match regexMatch, SourceExtent sourceExtent)"
            ],
            [
                256,
                "                    sourceExtent,"
            ],
            [
                260,
                "        private void CreateBoldSpan(Match regexMatch, SourceExtent sourceExtent)"
            ],
            [
                267,
                "                    sourceExtent,"
            ],
            [
                271,
                "        private void CreateHyperlinkSpan(Match regexMatch, SourceExtent sourceExtent)"
            ],
            [
                278,
                "                    regexMatch.Groups[2].Value,"
            ],
            [
                279,
                "                    sourceExtent));"
            ],
            [
                282,
                "        private void CreateSoftBreakSpan(Match regexMatch, SourceExtent sourceExtent)"
            ],
            [
                287,
                "        private void CreateHardBreakSpan(Match regexMatch, SourceExtent sourceExtent)"
            ],
            [
                291,
                "            _currentParagraphSpans.Add("
            ],
            [
                292,
                "                new HardBreakSpan("
            ],
            [
                293,
                "                    sourceExtent));"
            ],
            [
                296,
                "        private void CreateParagraph(Match regexMatch, SourceExtent sourceExtent)"
            ]
        ],
        "deleted": [
            [
                15,
                "        private string _remainingText;"
            ],
            [
                35,
                "            _remainingText = this.PrepareDocumentString(markdownString);"
            ],
            [
                99,
                "            // This algorithm works by taking the current document string"
            ],
            [
                100,
                "            // and using a regex to pull the first recognized substring beginning"
            ],
            [
                101,
                "            // at character 0.  Once a substring has been matched, that substring"
            ],
            [
                102,
                "            // is removed from the string and the loop starts over."
            ],
            [
                103,
                "            while (_remainingText.Length > 0)"
            ],
            [
                111,
                "                    if (markdownPattern.TryMatchString(_remainingText, out regexMatch))"
            ],
            [
                121,
                "                int newStartingPosition = -1;"
            ],
            [
                130,
                "                            _remainingText.Substring("
            ],
            [
                131,
                "                                0,"
            ],
            [
                132,
                "                                firstMatch.Index));"
            ],
            [
                136,
                "                    firstMatchedPattern.MatchAction(firstMatch);"
            ],
            [
                138,
                "                    // Execute the action for the match"
            ],
            [
                139,
                "                    newStartingPosition = firstMatch.Index + firstMatch.Length;"
            ],
            [
                144,
                "                    this.CreateNormalSpan(_remainingText);"
            ],
            [
                145,
                "                    newStartingPosition = _remainingText.Length;"
            ],
            [
                146,
                "                }"
            ],
            [
                148,
                "                // Trim the head of the string"
            ],
            [
                149,
                "                _remainingText ="
            ],
            [
                150,
                "                    _remainingText.Substring("
            ],
            [
                151,
                "                        newStartingPosition);"
            ],
            [
                158,
                "        private void CreateHashHeader(Match regexMatch)"
            ],
            [
                165,
                "                    regexMatch.Groups[1].Value.Length));"
            ],
            [
                168,
                "        private void CreateUnderlineHeader(Match regexMatch)"
            ],
            [
                179,
                "                    headerLevel));"
            ],
            [
                182,
                "        private void CreateTickCodeBlock(Match regexMatch)"
            ],
            [
                188,
                "                        regexMatch.Groups[2].Value));"
            ],
            [
                191,
                "        private void CreateNormalSpan(string spanText)"
            ],
            [
                203,
                "                _currentParagraphSpans.Add(new TextSpan(spanText));"
            ],
            [
                207,
                "        private void CreateItalicSpan(Match regexMatch)"
            ],
            [
                217,
                "        private void CreateBoldSpan(Match regexMatch)"
            ],
            [
                227,
                "        private void CreateHyperlinkSpan(Match regexMatch)"
            ],
            [
                234,
                "                    regexMatch.Groups[2].Value));"
            ],
            [
                237,
                "        private void CreateSoftBreakSpan(Match regexMatch)"
            ],
            [
                242,
                "        private void CreateHardBreakSpan(Match regexMatch)"
            ],
            [
                246,
                "            _currentParagraphSpans.Add(new HardBreakSpan());"
            ],
            [
                249,
                "        private void CreateParagraph(Match regexMatch)"
            ],
            [
                296,
                ""
            ]
        ]
    },
    "num_lines_added": 85,
    "num_lines_removed": 39
}