{
    "hash": "4e8732efc889aa77d0d607fb7abb1f7beecdbe38",
    "message": "InterceptingCatalog refactoring",
    "file_num_lines": 67,
    "diff_parsed": {
        "added": [
            [
                11,
                "        private ComposablePartCatalog decoratedCatalog;"
            ],
            [
                12,
                "        private readonly AggregateCatalog catalog;"
            ],
            [
                13,
                "        private readonly IDictionary<Type, Type> genericTypes;"
            ],
            [
                14,
                "        private readonly List<Type> manufacturedParts;"
            ],
            [
                15,
                ""
            ],
            [
                16,
                "        public GenericExportHandler()"
            ],
            [
                17,
                "        {"
            ],
            [
                18,
                "            this.catalog = new AggregateCatalog();"
            ],
            [
                19,
                "            this.genericTypes = new Dictionary<Type, Type>();"
            ],
            [
                20,
                "            this.manufacturedParts = new List<Type>();"
            ],
            [
                21,
                "        }"
            ],
            [
                25,
                "        public void Initialize(ComposablePartCatalog interceptedCatalog)"
            ],
            [
                27,
                "            this.decoratedCatalog = interceptedCatalog;"
            ],
            [
                28,
                "            LoadTypeMappings();"
            ],
            [
                31,
                "        private void LoadTypeMappings()"
            ],
            [
                33,
                "            using (var ep = new CatalogExportProvider(this.decoratedCatalog))"
            ],
            [
                39,
                "                    this.genericTypes.Add("
            ],
            [
                48,
                "            var type = TypeHelper.BuildGenericType(importDefinitionType, this.genericTypes);"
            ],
            [
                50,
                "            this.manufacturedParts.Add(type);"
            ],
            [
                51,
                "            this.catalog.Catalogs.Add(new TypeCatalog(type));"
            ],
            [
                59,
                ""
            ],
            [
                61,
                "            {"
            ],
            [
                63,
                "            }"
            ],
            [
                66,
                ""
            ],
            [
                67,
                "            if (this.manufacturedParts.Contains(importDefinitionType))"
            ],
            [
                68,
                "            {"
            ],
            [
                69,
                "                returnedExports.AddRange(this.catalog.GetExports(definition));"
            ],
            [
                70,
                "            }"
            ],
            [
                74,
                "                returnedExports.AddRange(this.catalog.GetExports(definition));"
            ]
        ],
        "deleted": [
            [
                11,
                "        private ComposablePartCatalog _decoratedCatalog;"
            ],
            [
                12,
                "        private readonly AggregateCatalog _catalog = new AggregateCatalog();"
            ],
            [
                13,
                "        private readonly IDictionary<Type, Type> _genericTypes = new Dictionary<Type, Type>();"
            ],
            [
                14,
                "        private readonly List<Type> _manufacturedParts = new List<Type>();"
            ],
            [
                18,
                "        public void Initialize(ComposablePartCatalog catalog)"
            ],
            [
                20,
                "            _decoratedCatalog = catalog;"
            ],
            [
                21,
                "            LoadTypeMappings(_genericTypes);"
            ],
            [
                24,
                "        private void LoadTypeMappings(IDictionary<Type, Type> genericTypes)"
            ],
            [
                26,
                "            using (var ep = new CatalogExportProvider(_decoratedCatalog))"
            ],
            [
                32,
                "                    genericTypes.Add("
            ],
            [
                41,
                "            var type = TypeHelper.BuildGenericType(importDefinitionType, _genericTypes);"
            ],
            [
                43,
                "            _manufacturedParts.Add(type);"
            ],
            [
                44,
                "            _catalog.Catalogs.Add(new TypeCatalog(type));"
            ],
            [
                52,
                ""
            ],
            [
                57,
                ""
            ],
            [
                58,
                "            if (_manufacturedParts.Contains(importDefinitionType))"
            ],
            [
                59,
                "                returnedExports.AddRange(_catalog.GetExports(definition));"
            ],
            [
                63,
                "                returnedExports.AddRange(_catalog.GetExports(definition));"
            ]
        ]
    },
    "num_lines_added": 29,
    "num_lines_removed": 18
}