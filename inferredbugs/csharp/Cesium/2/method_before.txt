    private static void EmitConstantExpression(FunctionScope scope, ConstantExpression expression)
    {
        var token = expression.Constant;
        var instruction = token switch
        {
            // TODO: Optimizations like Ldc_I4_0 for selected constants
            { Kind: CTokenType.IntLiteral } => Instruction.Create(OpCodes.Ldc_I4, int.Parse(token.Text)),
            { Kind: CTokenType.Identifier, Text: var name } when scope.Variables.TryGetValue(name, out var var) =>
                Instruction.Create(OpCodes.Ldloc, var),
            { Kind: CTokenType.Identifier, Text: var name } when scope.Parameters.TryGetValue(name, out var par) =>
                Instruction.Create(OpCodes.Ldarg, par),
            _ => throw new Exception($"Constant token not supported: {token.Kind} {token.Text}.")
        };

        scope.Method.Body.Instructions.Add(instruction);
    }