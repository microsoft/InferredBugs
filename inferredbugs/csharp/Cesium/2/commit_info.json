{
    "hash": "ad3ea3752e9b671b303702d8caf308fda09512aa",
    "message": "Add char const expressions",
    "file_num_lines": 138,
    "diff_parsed": {
        "added": [
            [
                41,
                "        var instructions = scope.Method.Body.Instructions;"
            ],
            [
                42,
                "        switch (token)"
            ],
            [
                45,
                "            case { Kind: CTokenType.IntLiteral }:"
            ],
            [
                46,
                "                {"
            ],
            [
                47,
                "                    var instruction = Instruction.Create(OpCodes.Ldc_I4, int.Parse(token.Text));"
            ],
            [
                48,
                "                    instructions.Add(instruction);"
            ],
            [
                49,
                "                    break;"
            ],
            [
                50,
                "                }"
            ],
            [
                51,
                "            case { Kind: CTokenType.CharLiteral }:"
            ],
            [
                52,
                "                {"
            ],
            [
                53,
                "                    var charValue = UnescapeCharacter(token.Text);"
            ],
            [
                54,
                "                    instructions.Add(Instruction.Create(OpCodes.Ldc_I4, (int)charValue));"
            ],
            [
                55,
                "                    instructions.Add(Instruction.Create(OpCodes.Conv_U1));"
            ],
            [
                56,
                "                    break;"
            ],
            [
                57,
                "                }"
            ],
            [
                58,
                "            case { Kind: CTokenType.Identifier, Text: var name } when scope.Variables.TryGetValue(name, out var var):"
            ],
            [
                59,
                "                {"
            ],
            [
                60,
                "                    var instruction = Instruction.Create(OpCodes.Ldloc, var);"
            ],
            [
                61,
                "                    instructions.Add(instruction);"
            ],
            [
                62,
                "                    break;"
            ],
            [
                63,
                "                }"
            ],
            [
                64,
                "            case { Kind: CTokenType.Identifier, Text: var name } when scope.Parameters.TryGetValue(name, out var par):"
            ],
            [
                65,
                "                {"
            ],
            [
                66,
                "                    var instruction = Instruction.Create(OpCodes.Ldarg, par);"
            ],
            [
                67,
                "                    instructions.Add(instruction);"
            ],
            [
                68,
                "                    break;"
            ],
            [
                69,
                "                }"
            ],
            [
                70,
                "            default:"
            ],
            [
                71,
                "                throw new Exception($\"Constant token not supported: {token.Kind} {token.Text}.\");"
            ],
            [
                134,
                ""
            ],
            [
                135,
                "    private static char UnescapeCharacter(string text)"
            ],
            [
                136,
                "    {"
            ],
            [
                137,
                "        text = text.Replace(\"'\", string.Empty);"
            ],
            [
                138,
                "        if (text.Length == 1) return text[0];"
            ],
            [
                139,
                "        return text[1] switch"
            ],
            [
                140,
                "        {"
            ],
            [
                141,
                "            '\\'' => '\\'',"
            ],
            [
                142,
                "            '\"' => '\"',"
            ],
            [
                143,
                "            //'?' => '\\?',"
            ],
            [
                144,
                "            '\\\\' => '\\\\',"
            ],
            [
                145,
                "            'a' => '\\a',"
            ],
            [
                146,
                "            'b' => '\\b',"
            ],
            [
                147,
                "            'f' => '\\f',"
            ],
            [
                148,
                "            'n' => '\\n',"
            ],
            [
                149,
                "            'r' => '\\r',"
            ],
            [
                150,
                "            't' => '\\t',"
            ],
            [
                151,
                "            'v' => '\\v',"
            ],
            [
                152,
                "            _ => throw new InvalidOperationException($\"Unknown escape sequence '{text}'\"),"
            ],
            [
                153,
                "        };"
            ],
            [
                154,
                "    }"
            ]
        ],
        "deleted": [
            [
                41,
                "        var instruction = token switch"
            ],
            [
                44,
                "            { Kind: CTokenType.IntLiteral } => Instruction.Create(OpCodes.Ldc_I4, int.Parse(token.Text)),"
            ],
            [
                45,
                "            { Kind: CTokenType.Identifier, Text: var name } when scope.Variables.TryGetValue(name, out var var) =>"
            ],
            [
                46,
                "                Instruction.Create(OpCodes.Ldloc, var),"
            ],
            [
                47,
                "            { Kind: CTokenType.Identifier, Text: var name } when scope.Parameters.TryGetValue(name, out var par) =>"
            ],
            [
                48,
                "                Instruction.Create(OpCodes.Ldarg, par),"
            ],
            [
                49,
                "            _ => throw new Exception($\"Constant token not supported: {token.Kind} {token.Text}.\")"
            ],
            [
                51,
                ""
            ],
            [
                52,
                "        scope.Method.Body.Instructions.Add(instruction);"
            ]
        ]
    },
    "num_lines_added": 50,
    "num_lines_removed": 9
}