{
    "hash": "ff37ac520f269732b9dff96718335eb0a9f2095c",
    "message": "API cleanup",
    "file_num_lines": 244,
    "diff_parsed": {
        "added": [
            [
                9,
                "    using EXCEPTION = IO.ModelException;"
            ],
            [
                10,
                ""
            ],
            [
                16,
                "    public sealed partial class Accessor"
            ],
            [
                59,
                "        public Transforms.BoundingBox3? LocalBounds3"
            ],
            [
                66,
                "                return new Transforms.BoundingBox3(this._min, this._max);"
            ],
            [
                78,
                "            return new Geometry.MemoryAccessor(info, view.Content);"
            ],
            [
                152,
                ""
            ],
            [
                153,
                "            return new Memory.IntegerArray(SourceBufferView.Content, this.ByteOffset, this._count, this.Encoding.ToIndex());"
            ],
            [
                234,
                "            return SourceBufferView.Content.Slice(this.ByteOffset + (vertexIdx * byteStride), byteSize);"
            ],
            [
                311,
                "            if (!_bufferView.HasValue) { exxx.Add(new EXCEPTION(this, $\"BufferView index missing\")); return exxx; }"
            ],
            [
                312,
                "            if (_bufferView < 0 || _bufferView >= LogicalParent.LogicalBufferViews.Count) exxx.Add(new EXCEPTION(this, $\"BufferView index out of range\"));"
            ],
            [
                314,
                "            if (_count < 0) exxx.Add(new EXCEPTION(this, $\"Count is out of range\"));"
            ],
            [
                315,
                "            if (_byteOffset < 0) exxx.Add(new EXCEPTION(this, $\"ByteOffset is out of range\"));"
            ],
            [
                320,
                "                if (len > 0 && (len & 3) != 0) exxx.Add(new EXCEPTION(this, $\"Expected length to be multiple of 4, found {len}\"));"
            ],
            [
                326,
                "                if (len != 1 && len != 2 && len != 4) exxx.Add(new EXCEPTION(this, $\"Expected length to be 1, 2 or 4, found {len}\"));"
            ],
            [
                331,
                "            if (_min.Count != _max.Count) { exxx.Add(new EXCEPTION(this, \"min and max length mismatch\")); return exxx; }"
            ],
            [
                335,
                "                if (_min[i] > _max[i]) exxx.Add(new EXCEPTION(this, $\"min[{i}] is larger than max[{i}]\"));"
            ]
        ],
        "deleted": [
            [
                14,
                "    public partial class Accessor"
            ],
            [
                57,
                "        public BoundingBox3? LocalBounds3"
            ],
            [
                64,
                "                return new BoundingBox3(this._min, this._max);"
            ],
            [
                76,
                "            return new Geometry.MemoryAccessor(info, view.Data);"
            ],
            [
                150,
                "            return SourceBufferView.CreateIndicesArray(this.ByteOffset, this._count, this.Encoding.ToIndex());"
            ],
            [
                231,
                "            return SourceBufferView.Data.Slice(this.ByteOffset + (vertexIdx * byteStride), byteSize);"
            ],
            [
                308,
                "            if (!_bufferView.HasValue) { exxx.Add(new ModelException(this, $\"BufferView index missing\")); return exxx; }"
            ],
            [
                309,
                "            if (_bufferView < 0 || _bufferView >= LogicalParent.LogicalBufferViews.Count) exxx.Add(new ModelException(this, $\"BufferView index out of range\"));"
            ],
            [
                311,
                "            if (_count < 0) exxx.Add(new ModelException(this, $\"Count is out of range\"));"
            ],
            [
                312,
                "            if (_byteOffset < 0) exxx.Add(new ModelException(this, $\"ByteOffset is out of range\"));"
            ],
            [
                317,
                "                if (len > 0 && (len & 3) != 0) exxx.Add(new ModelException(this, $\"Expected length to be multiple of 4, found {len}\"));"
            ],
            [
                323,
                "                if (len != 1 && len != 2 && len != 4) exxx.Add(new ModelException(this, $\"Expected length to be 1, 2 or 4, found {len}\"));"
            ],
            [
                328,
                "            if (_min.Count != _max.Count) { exxx.Add(new ModelException(this, \"min and max length mismatch\")); return exxx; }"
            ],
            [
                332,
                "                if (_min[i] > _max[i]) exxx.Add(new ModelException(this, $\"min[{i}] is larger than max[{i}]\"));"
            ]
        ]
    },
    "num_lines_added": 17,
    "num_lines_removed": 14
}