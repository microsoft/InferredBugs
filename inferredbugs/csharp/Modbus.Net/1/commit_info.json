{
    "hash": "f9a8a57f0ede836967de8d0a3ca27241f474d60a",
    "message": "2015-09-17 update 1 change all connections to async connection",
    "file_num_lines": 90,
    "diff_parsed": {
        "added": [
            [
                2,
                "using System.Threading.Tasks;"
            ],
            [
                35,
                "        {"
            ],
            [
                36,
                "            return AsyncHelper.RunSync(() => SendReceiveAsync(content));"
            ],
            [
                37,
                "        }"
            ],
            [
                38,
                ""
            ],
            [
                39,
                "        public override async Task<byte[]> SendReceiveAsync(params object[] content)"
            ],
            [
                43,
                "                await ConnectAsync();"
            ],
            [
                45,
                "            return await base.SendReceiveAsync(content);"
            ],
            [
                49,
                "        {"
            ],
            [
                50,
                "            return AsyncHelper.RunSync(() => SendReceiveAsync(unit, content));"
            ],
            [
                51,
                "        }"
            ],
            [
                52,
                ""
            ],
            [
                53,
                "        public override async Task<OutputStruct> SendReceiveAsync(ProtocalUnit unit, InputStruct content)"
            ],
            [
                58,
                "                return await await ConnectAsync().ContinueWith(answer => answer.Result ? base.SendReceiveAsync(unit, content) : null);"
            ],
            [
                60,
                "            return await base.SendReceiveAsync(unit, content);"
            ],
            [
                63,
                "        private async Task<OutputStruct> ForceSendReceiveAsync(ProtocalUnit unit, InputStruct content)"
            ],
            [
                65,
                "            return await base.SendReceiveAsync(unit, content);"
            ],
            [
                69,
                "        {"
            ],
            [
                70,
                "            return AsyncHelper.RunSync(ConnectAsync);"
            ],
            [
                71,
                "        }"
            ],
            [
                72,
                ""
            ],
            [
                73,
                "        public override async Task<bool> ConnectAsync()"
            ],
            [
                77,
                "            if (await ProtocalLinker.ConnectAsync())"
            ],
            [
                79,
                "                connectTryCount = 0;"
            ],
            [
                81,
                "                return"
            ],
            [
                82,
                "                    await await"
            ],
            [
                83,
                "                        ForceSendReceiveAsync(this[typeof (CreateReferenceSimenseProtocal)], inputStruct)"
            ],
            [
                84,
                "                            .ContinueWith(async answer =>"
            ],
            [
                85,
                "                            {"
            ],
            [
                86,
                "                                if (!ProtocalLinker.IsConnected) return false;"
            ],
            [
                87,
                "                                var inputStruct2 = new EstablishAssociationSimenseInputStruct(0x0101, _maxCalling,"
            ],
            [
                88,
                "                                    _maxCalled,"
            ],
            [
                89,
                "                                    _maxPdu);"
            ],
            [
                90,
                "                                var outputStruct2 ="
            ],
            [
                91,
                "                                    (EstablishAssociationSimenseOutputStruct)"
            ],
            [
                92,
                "                                        await"
            ],
            [
                93,
                "                                            SendReceiveAsync(this[typeof (EstablishAssociationSimenseProtocal)],"
            ],
            [
                94,
                "                                                inputStruct2);"
            ],
            [
                95,
                "                                return true;"
            ],
            [
                96,
                "                            });"
            ]
        ],
        "deleted": [
            [
                37,
                "                Connect();"
            ],
            [
                39,
                "            return base.SendReceive(content);"
            ],
            [
                47,
                "                Connect();"
            ],
            [
                49,
                "            return base.SendReceive(unit, content);"
            ],
            [
                52,
                "        private OutputStruct ForceSendReceive(ProtocalUnit unit, InputStruct content)"
            ],
            [
                54,
                "            return base.SendReceive(unit, content);"
            ],
            [
                61,
                "            if (ProtocalLinker.Connect())"
            ],
            [
                64,
                "                var outputStruct ="
            ],
            [
                65,
                "                    (CreateReferenceSimenseOutputStruct)"
            ],
            [
                66,
                "                        ForceSendReceive(this[typeof (CreateReferenceSimenseProtocal)], inputStruct);"
            ],
            [
                67,
                "                if (!ProtocalLinker.IsConnected) return false;"
            ],
            [
                68,
                "                var inputStruct2 = new EstablishAssociationSimenseInputStruct(0x0101, _maxCalling, _maxCalled, _maxPdu);"
            ],
            [
                69,
                "                var outputStruct2 ="
            ],
            [
                70,
                "                    (EstablishAssociationSimenseOutputStruct)"
            ],
            [
                71,
                "                        SendReceive(this[typeof (EstablishAssociationSimenseProtocal)], inputStruct2);"
            ],
            [
                72,
                "                return true;"
            ]
        ]
    },
    "num_lines_added": 40,
    "num_lines_removed": 16
}