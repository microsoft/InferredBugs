{
    "hash": "34041047d0d54dfdc37ce130d742a3f4daccd493",
    "message": "Add method contracts, fix some issues",
    "file_num_lines": 773,
    "diff_parsed": {
        "added": [
            [
                35,
                "        [CanBeNull]"
            ],
            [
                311,
                "            if (throwInstruction?.OpCode != OpCodes.Throw)"
            ],
            [
                331,
                "                switch (nextInstruction?.OpCode.Code)"
            ],
            [
                358,
                "                        goto default;"
            ],
            [
                412,
                "        [NotNull]"
            ],
            [
                468,
                "        [NotNull]"
            ],
            [
                587,
                "        [NotNull]"
            ],
            [
                710,
                "        [NotNull]"
            ],
            [
                737,
                "        [NotNull]"
            ],
            [
                755,
                "            if (countInstruction?.OpCode != OpCodes.Ldc_I4)"
            ],
            [
                766,
                "                if (dupInstruction?.OpCode != OpCodes.Dup)"
            ],
            [
                770,
                "                if (indexInstruction?.OpCode != OpCodes.Ldc_I4)"
            ],
            [
                773,
                "                if ((int?)indexInstruction?.Operand != index)"
            ],
            [
                795,
                "        [NotNull]"
            ],
            [
                807,
                "        [NotNull]"
            ],
            [
                844,
                "        [NotNull]"
            ],
            [
                863,
                "        [NotNull]"
            ],
            [
                944,
                "        private InstructionWeavingException UnexpectedInstruction([CanBeNull] Instruction instruction, OpCode expectedOpcode)"
            ],
            [
                947,
                "        private InstructionWeavingException UnexpectedInstruction([CanBeNull] Instruction instruction, string expected)"
            ]
        ],
        "deleted": [
            [
                22,
                ""
            ],
            [
                23,
                ""
            ],
            [
                312,
                "            if (throwInstruction.OpCode != OpCodes.Throw)"
            ],
            [
                332,
                "                switch (nextInstruction.OpCode.Code)"
            ],
            [
                359,
                "                        break;"
            ],
            [
                751,
                "            if (countInstruction.OpCode != OpCodes.Ldc_I4)"
            ],
            [
                762,
                "                if (dupInstruction.OpCode != OpCodes.Dup)"
            ],
            [
                766,
                "                if (indexInstruction.OpCode != OpCodes.Ldc_I4)"
            ],
            [
                769,
                "                if ((int)indexInstruction.Operand != index)"
            ],
            [
                936,
                "        private InstructionWeavingException UnexpectedInstruction(Instruction instruction, OpCode expectedOpcode)"
            ],
            [
                939,
                "        private InstructionWeavingException UnexpectedInstruction(Instruction instruction, string expected)"
            ]
        ]
    },
    "num_lines_added": 19,
    "num_lines_removed": 11
}