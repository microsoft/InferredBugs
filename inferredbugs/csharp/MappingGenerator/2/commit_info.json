{
    "hash": "87600c9b86dea2db8677025a70a5f5f5dcc9aaa5",
    "message": "Fix method invocation with splatting",
    "file_num_lines": 289,
    "diff_parsed": {
        "added": [
            [
                128,
                "                var sourceProperties = ObjectHelper.GetPublicPropertySymbols(unmapped.Source.Type as INamedTypeSymbol).ToList();"
            ],
            [
                269,
                "            var unwrappingProperties = ObjectHelper.GetUnwrappingProperties(wrapperType, wrappedType).ToList();"
            ],
            [
                270,
                "            var unwrappingMethods = ObjectHelper.GetUnwrappingMethods(wrapperType, wrappedType).ToList();"
            ],
            [
                287,
                "            foreach (var mSymbol in ObjectHelper.GetPublicPropertySymbols(source))"
            ],
            [
                297,
                "            foreach (var methodSymbol in ObjectHelper.GetPublicGetMethods(source))"
            ],
            [
                308,
                "            foreach (var mSymbol in ObjectHelper.GetPublicPropertySymbols(target))"
            ]
        ],
        "deleted": [
            [
                128,
                "                var sourceProperties = GetPublicPropertySymbols(unmapped.Source.Type as INamedTypeSymbol).ToList();"
            ],
            [
                267,
                "        private static bool IsPublicGetMethod(ISymbol x)"
            ],
            [
                268,
                "        {"
            ],
            [
                269,
                "            return x is IMethodSymbol mSymbol"
            ],
            [
                270,
                "                   && mSymbol.ReturnsVoid == false"
            ],
            [
                271,
                "                   && mSymbol.Parameters.Length == 0"
            ],
            [
                272,
                "                   && x.DeclaredAccessibility == Accessibility.Public"
            ],
            [
                273,
                "                   && x.IsImplicitlyDeclared == false"
            ],
            [
                274,
                "                   && mSymbol.MethodKind == MethodKind.Ordinary"
            ],
            [
                275,
                "                ;"
            ],
            [
                276,
                "        }"
            ],
            [
                277,
                ""
            ],
            [
                278,
                "        private static bool IsPublicPropertySymbol(ISymbol x)"
            ],
            [
                279,
                "        {"
            ],
            [
                280,
                "            if (x.Kind != SymbolKind.Property)"
            ],
            [
                281,
                "            {"
            ],
            [
                282,
                "                return false;"
            ],
            [
                283,
                "            }"
            ],
            [
                284,
                ""
            ],
            [
                285,
                "            if (x is IPropertySymbol mSymbol)"
            ],
            [
                286,
                "            {"
            ],
            [
                287,
                "                if (mSymbol.IsStatic || mSymbol.IsIndexer || mSymbol.DeclaredAccessibility != Accessibility.Public)"
            ],
            [
                288,
                "                {"
            ],
            [
                289,
                "                    return false;"
            ],
            [
                290,
                "                }"
            ],
            [
                291,
                ""
            ],
            [
                292,
                "                return true;"
            ],
            [
                293,
                "            }"
            ],
            [
                294,
                ""
            ],
            [
                295,
                "            return false;"
            ],
            [
                296,
                "        }"
            ],
            [
                297,
                ""
            ],
            [
                300,
                "            var unwrappingProperties = GetUnwrappingProperties(wrapperType, wrappedType).ToList();"
            ],
            [
                301,
                "            var unwrappingMethods = GetUnwrappingMethods(wrapperType, wrappedType).ToList();"
            ],
            [
                314,
                "        private static IEnumerable<IPropertySymbol> GetUnwrappingProperties(ITypeSymbol wrapperType, ITypeSymbol wrappedType)"
            ],
            [
                315,
                "        {"
            ],
            [
                316,
                "            return GetPublicPropertySymbols(wrapperType).Where(x => x.SetMethod.DeclaredAccessibility == Accessibility.Public && x.Type == wrappedType);"
            ],
            [
                317,
                "        }"
            ],
            [
                318,
                ""
            ],
            [
                319,
                "        private static IEnumerable<IMethodSymbol> GetUnwrappingMethods(ITypeSymbol wrapperType, ITypeSymbol wrappedType)"
            ],
            [
                320,
                "        {"
            ],
            [
                321,
                "            return GetPublicGetMethods(wrapperType).Where(x => x.DeclaredAccessibility == Accessibility.Public && x.ReturnType == wrappedType);"
            ],
            [
                322,
                "        }"
            ],
            [
                323,
                ""
            ],
            [
                324,
                "        private static IEnumerable<IPropertySymbol> GetPublicPropertySymbols(ITypeSymbol source)"
            ],
            [
                325,
                "        {"
            ],
            [
                326,
                "            return GetBaseTypesAndThis(source).SelectMany(x=> x.GetMembers()).Where(IsPublicPropertySymbol).OfType<IPropertySymbol>();"
            ],
            [
                327,
                "        }"
            ],
            [
                328,
                ""
            ],
            [
                329,
                "        private static IEnumerable<IMethodSymbol> GetPublicGetMethods(ITypeSymbol source)"
            ],
            [
                330,
                "        {"
            ],
            [
                331,
                "            return GetBaseTypesAndThis(source).SelectMany(x=> x.GetMembers()).Where(IsPublicGetMethod).OfType<IMethodSymbol>();"
            ],
            [
                332,
                "        }"
            ],
            [
                333,
                ""
            ],
            [
                334,
                "        private  static IEnumerable<ITypeSymbol> GetBaseTypesAndThis(ITypeSymbol type)"
            ],
            [
                335,
                "        {"
            ],
            [
                336,
                "            var current = type;"
            ],
            [
                337,
                "            while (current != null && IsSystemObject(current) == false)"
            ],
            [
                338,
                "            {"
            ],
            [
                339,
                "                yield return current;"
            ],
            [
                340,
                "                current = current.BaseType;"
            ],
            [
                341,
                "            }"
            ],
            [
                342,
                "        }"
            ],
            [
                343,
                ""
            ],
            [
                344,
                "        private static bool IsSystemObject(ITypeSymbol current)"
            ],
            [
                345,
                "        {"
            ],
            [
                346,
                "            return current.Name == \"Object\" && current.ContainingNamespace.Name ==\"System\";"
            ],
            [
                347,
                "        }"
            ],
            [
                348,
                ""
            ],
            [
                353,
                "            foreach (var mSymbol in GetPublicPropertySymbols(source))"
            ],
            [
                363,
                "            foreach (var methodSymbol in GetPublicGetMethods(source))"
            ],
            [
                374,
                "            foreach (var mSymbol in GetPublicPropertySymbols(target))"
            ]
        ]
    },
    "num_lines_added": 6,
    "num_lines_removed": 72
}