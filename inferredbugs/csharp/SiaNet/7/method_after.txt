        public override void Forward(Variable x)
        {
            //ToDo: Implement DilationRate
            Input = x;
            var (n, c, s) = x.Data.GetConv1DShape();

            Variable weight = BuildVar("w", new long[] { Filters, c, KernalSize }, x.Data.ElementType, KernalInitializer, KernalConstraint, KernalRegularizer);
            Variable bias = null;
            if (UseBias)
            {
                bias = BuildVar("b", new long[] { Filters, 1 }, x.Data.ElementType, BiasInitializer, BiasConstraint, BiasRegularizer);
            }

            uint? pad = null;
            if (Padding == PaddingType.Same)
            {
                pad = 1;
            }
            else if (Padding == PaddingType.Full)
            {
                pad = 2;
            }

            var steps_out = (s - KernalSize + 2 * pad) / Strides + 1;

            xCols = ImgUtil.Im2Col(x.Data, KernalSize, pad, Strides);
            var wRows = weight.Data.Reshape(Filters, -1);
            
            Output = wRows * xCols;
            if (UseBias)
            {
                Output = Output + bias.Data;
            }

            Output = Output.Reshape(Filters, steps_out.Value, n).Transpose(2, 0, 1);
        }