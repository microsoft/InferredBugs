        public override void Forward(Variable x)
        {
            //ToDo: Implement DilationRate
            Input = x;
            var (n, c, d, h, w) = x.Data.GetConv3DShape();

            Variable weight = BuildVar("w", new long[] { Filters, c, KernalSize.Item1, KernalSize.Item2, KernalSize.Item2 }, x.Data.ElementType, KernalInitializer, KernalConstraint, KernalRegularizer);
            Variable bias = null;
            if (UseBias)
            {
                bias = BuildVar("b", new long[] { Filters, 1 }, x.Data.ElementType, BiasInitializer, BiasConstraint, BiasRegularizer);
            }

            uint? pad = null;
            if (Padding == PaddingType.Same)
            {
                pad = 1;
            }
            else if (Padding == PaddingType.Full)
            {
                pad = 2;
            }

            var d_out = (d - KernalSize.Item1 + 2 * pad) / Strides + 1;
            var h_out = (h - KernalSize.Item2 + 2 * pad) / Strides + 1;
            var w_out = (w - KernalSize.Item3 + 2 * pad) / Strides + 1;

            xCols = ImgUtil.Im2Col(x.Data, KernalSize, pad, Strides);
            var wRows = weight.Data.Reshape(Filters, -1);

            Output = wRows * xCols;
            if (UseBias)
            {
                Output = Output + bias.Data;
            }

            Output = Output.Reshape(Filters, d_out.Value, h_out.Value, w_out.Value, n).Transpose(4, 0, 1, 2, 3);
        }