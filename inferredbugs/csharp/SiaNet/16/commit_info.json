{
    "hash": "0f87a5f50b0f658b2244e81db2af37e91283f4bd",
    "message": "Tensorflow and CNTK backend done .. Testing in progress",
    "file_num_lines": 562,
    "diff_parsed": {
        "added": [
            [
                7,
                "using System.Linq;"
            ],
            [
                36,
                "        internal TFOutput In(Tensor x)"
            ],
            [
                38,
                "            return tf.Const(((NDArrayTensor)x).InternalTensor, TFDataType.Float);"
            ],
            [
                41,
                "        internal TFOutput In(float value, long[] shape)"
            ],
            [
                43,
                "            return tf.Constant(value, new TFShape(shape), TFDataType.Float);"
            ],
            [
                46,
                "        internal TFOutput In(params int[] data)"
            ],
            [
                48,
                "            return tf.Const(new TFTensor(data), TFDataType.Int32);"
            ],
            [
                51,
                "        internal TFOutput In(params long[] data)"
            ],
            [
                53,
                "            return tf.Const(new TFTensor(data), TFDataType.Int64);"
            ],
            [
                56,
                "        internal TFOutput In(int value)"
            ],
            [
                58,
                "            return tf.Constant(1, new TFShape(1), TFDataType.Int32);"
            ],
            [
                61,
                "        internal TFOutput In(long value)"
            ],
            [
                63,
                "            return tf.Constant(1, new TFShape(1), TFDataType.Int64);"
            ],
            [
                66,
                "        internal NDArrayTensor Out(TFOutput x, bool castFloat = false)"
            ],
            [
                68,
                "            NDArrayTensor tensor = new NDArrayTensor();"
            ],
            [
                69,
                "            if(castFloat)"
            ],
            [
                71,
                "                tensor.InternalTensor = InternalEval(tf.Cast(x, TFDataType.Float));"
            ],
            [
                72,
                "            }"
            ],
            [
                73,
                "            else"
            ],
            [
                74,
                "            {"
            ],
            [
                75,
                "                tensor.InternalTensor = InternalEval(x);"
            ],
            [
                76,
                "            }"
            ],
            [
                81,
                "        internal NDArrayTensor Out(TFTensor x)"
            ],
            [
                108,
                "            return Out(tf.Add(In(a), In(b, a.Shape)));"
            ],
            [
                113,
                "            return Out(tf.Add(In(a, b.Shape), In(b)));"
            ],
            [
                148,
                "            return Out(tf.ClipByValue(In(x), In(min, x.Shape), In(max, x.Shape)));"
            ],
            [
                158,
                "            return Out(tf.Constant(value, new TFShape(shape), TFDataType.Float));"
            ],
            [
                185,
                ""
            ],
            [
                195,
                "            return Out(tf.Div(In(a), In(b, a.Shape)));"
            ],
            [
                200,
                "            return Out(tf.Div(In(a, b.Shape), In(b)));"
            ],
            [
                215,
                "            return Out(tf.Equal(In(a), In(b)), true);"
            ],
            [
                279,
                "            long[] shape = tf.GetShape(In(x));"
            ],
            [
                280,
                "            if(shape == null)"
            ],
            [
                281,
                "            {"
            ],
            [
                282,
                "                shape = new long[] { 1 };"
            ],
            [
                283,
                "            }"
            ],
            [
                284,
                ""
            ],
            [
                285,
                "            return shape;"
            ],
            [
                290,
                "            return Out(tf.Greater(In(a), In(b)), true);"
            ],
            [
                295,
                "            return Out(tf.Greater(In(a, b.Shape), In(b)), true);"
            ],
            [
                300,
                "            return Out(tf.Greater(In(a), In(b, a.Shape)), true);"
            ],
            [
                305,
                "            return Out(tf.GreaterEqual(In(a), In(b)), true);"
            ],
            [
                310,
                "            return Out(tf.GreaterEqual(In(a, b.Shape), In(b)), true);"
            ],
            [
                315,
                "            return Out(tf.GreaterEqual(In(a), In(b, a.Shape)), true);"
            ],
            [
                331,
                "            return Out(tf.Less(In(a), In(b)), true);"
            ],
            [
                336,
                "            return Out(tf.Less(In(a, b.Shape), In(b)), true);"
            ],
            [
                341,
                "            return Out(tf.Less(In(a), In(b, a.Shape)), true);"
            ],
            [
                346,
                "            return Out(tf.LessEqual(In(a), In(b)), true);"
            ],
            [
                351,
                "            return Out(tf.LessEqual(In(a, b.Shape), In(b)), true);"
            ],
            [
                356,
                "            return Out(tf.LessEqual(In(a), In(b, a.Shape)), true);"
            ],
            [
                381,
                "            return Out(tf.Max(In(x), In(dim), true));"
            ],
            [
                386,
                "            return Out(tf.Max(In(x), In(dim), true));"
            ],
            [
                396,
                "            return Out(tf.Maximum(In(a), In(b, a.Shape)));"
            ],
            [
                401,
                "            return (float)InternalEval(tf.ReduceMean(In(x))).GetValue();"
            ],
            [
                406,
                "            return Out(tf.Mean(In(x), In(dim), true));"
            ],
            [
                411,
                "            return Out(tf.Mean(In(x), In(dim), true));"
            ],
            [
                416,
                "            return Out(tf.Min(In(x), In(x.Shape), true)).ToScalar();"
            ],
            [
                421,
                "            return Out(tf.Min(In(x), In(dim), true));"
            ],
            [
                426,
                "            return Out(tf.Min(In(x), In(dim), true));"
            ],
            [
                436,
                "            return Out(tf.Minimum(In(a), In(b, a.Shape)));"
            ],
            [
                446,
                "            return Out(tf.Mul(In(a), In(b, a.Shape)));"
            ],
            [
                451,
                "            return Out(tf.Mul(In(a, b.Shape), In(b)));"
            ],
            [
                461,
                "            return Out(tf.Pow(In(x), In(value, x.Shape)));"
            ],
            [
                478,
                "            return Out(tf.Cast(tf.RandomNormal(new TFShape(shape), mean, stddev, seed), TFDataType.Float));"
            ],
            [
                483,
                "            return Out(tf.Cast(tf.RandomUniform(new TFShape(shape), min, max, seed), TFDataType.Float));"
            ],
            [
                488,
                "            shape = shape.ToArray();"
            ],
            [
                489,
                "            long prod = -1 * shape.Aggregate(1L, (a, b) => a * b);"
            ],
            [
                490,
                "            for (int i = 0; i < shape.Length; i++)"
            ],
            [
                491,
                "            {"
            ],
            [
                492,
                "                if (shape[i] == -1)"
            ],
            [
                493,
                "                {"
            ],
            [
                494,
                "                    shape[i] = x.ElementCount / prod;"
            ],
            [
                495,
                "                    break;"
            ],
            [
                496,
                "                }"
            ],
            [
                497,
                "            }"
            ],
            [
                498,
                ""
            ],
            [
                541,
                "            end = end + 1;"
            ],
            [
                542,
                "            long size = end - start;"
            ],
            [
                543,
                "            long[] shape = x.Shape;"
            ],
            [
                544,
                "            return Out(tf.Slice(In(x), In(0, start), In(x.Shape[0], size)));"
            ],
            [
                549,
                "            end = end + 1;"
            ],
            [
                551,
                "            long[] shape = x.Shape;"
            ],
            [
                552,
                "            long[] startIndex = new long[shape.Length];"
            ],
            [
                553,
                "            startIndex[0] = start;"
            ],
            [
                554,
                ""
            ],
            [
                555,
                "            long[] endIndex = new long[shape.Length];"
            ],
            [
                556,
                "            for (int i = 0; i < endIndex.Length; i++)"
            ],
            [
                557,
                "            {"
            ],
            [
                558,
                "                if(i==0)"
            ],
            [
                559,
                "                {"
            ],
            [
                560,
                "                    endIndex[i] = size;"
            ],
            [
                561,
                "                    continue;"
            ],
            [
                562,
                "                }"
            ],
            [
                563,
                ""
            ],
            [
                564,
                "                endIndex[i] = shape[i];"
            ],
            [
                565,
                "            }"
            ],
            [
                566,
                ""
            ],
            [
                567,
                "            return Out(tf.Slice(In(x), In(startIndex), In(endIndex)));"
            ],
            [
                597,
                "            return Out(tf.Sub(In(a), In(b, a.Shape)));"
            ],
            [
                602,
                "            return Out(tf.Sub(In(a, b.Shape), In(b)));"
            ],
            [
                607,
                "            return (float)InternalEval(tf.ReduceSum(In(x))).GetValue();"
            ],
            [
                613,
                "            return Out(tf.Sum(In(x), In(dim), true));"
            ],
            [
                638,
                "            if (axis < 0)"
            ],
            [
                639,
                "                throw new ArgumentException(\"Axis >= 0\");"
            ],
            [
                640,
                ""
            ],
            [
                641,
                "            int[] times = new int[x.Shape.Length];"
            ],
            [
                642,
                "            for (int i = 0; i < times.Length; i++)"
            ],
            [
                643,
                "            {"
            ],
            [
                644,
                "                if(i == axis)"
            ],
            [
                645,
                "                {"
            ],
            [
                646,
                "                    times[i] = 1;"
            ],
            [
                647,
                "                    continue;"
            ],
            [
                648,
                "                }"
            ],
            [
                649,
                ""
            ],
            [
                650,
                "                times[i] = n;"
            ],
            [
                651,
                "            }"
            ],
            [
                652,
                ""
            ],
            [
                653,
                "            return Out(tf.Tile(In(x), In(times)));"
            ],
            [
                658,
                "            return Out(tf.Pow(In(value, x.Shape), In(x)));"
            ]
        ],
        "deleted": [
            [
                35,
                "        private TFOutput In(Tensor x)"
            ],
            [
                37,
                "            return tf.Const(((NDArrayTensor)x).InternalTensor);"
            ],
            [
                40,
                "        private TFOutput In(float value, params long[] shape)"
            ],
            [
                42,
                "            return tf.Const(new TFTensor(value));"
            ],
            [
                45,
                "        private TFOutput In(int[] data)"
            ],
            [
                47,
                "            return tf.Const(new TFTensor(data));"
            ],
            [
                50,
                "        private TFOutput In(long[] data)"
            ],
            [
                52,
                "            return tf.Const(new TFTensor(data));"
            ],
            [
                55,
                "        private TFOutput In(int value)"
            ],
            [
                57,
                "            return tf.Const(new TFTensor(value));"
            ],
            [
                60,
                "        private TFOutput In(long value)"
            ],
            [
                62,
                "            return tf.Const(new TFTensor(value));"
            ],
            [
                65,
                "        private NDArrayTensor Out(TFOutput x)"
            ],
            [
                67,
                "            NDArrayTensor tensor = new NDArrayTensor"
            ],
            [
                69,
                "                InternalTensor = InternalEval(x)"
            ],
            [
                70,
                "            };"
            ],
            [
                75,
                "        private NDArrayTensor Out(TFTensor x)"
            ],
            [
                102,
                "            return Out(tf.Add(In(a), In(b)));"
            ],
            [
                107,
                "            return Out(tf.Add(In(a), In(b)));"
            ],
            [
                142,
                "            return Out(tf.ClipByValue(In(x), In(min), In(max)));"
            ],
            [
                152,
                "            return Out(tf.Constant(value, new TFShape(shape)));"
            ],
            [
                179,
                "            x.Dispose();"
            ],
            [
                189,
                "            return Out(tf.Div(In(a), In(b)));"
            ],
            [
                194,
                "            return Out(tf.Div(In(a), In(b)));"
            ],
            [
                209,
                "            return Out(tf.Equal(In(a), In(b)));"
            ],
            [
                273,
                "            return tf.GetShape(In(x));"
            ],
            [
                278,
                "            return Out(tf.Greater(In(a), In(b)));"
            ],
            [
                283,
                "            return Out(tf.Greater(In(a), In(b)));"
            ],
            [
                288,
                "            return Out(tf.Greater(In(a), In(b)));"
            ],
            [
                293,
                "            return Out(tf.GreaterEqual(In(a), In(b)));"
            ],
            [
                298,
                "            return Out(tf.GreaterEqual(In(a), In(b)));"
            ],
            [
                303,
                "            return Out(tf.GreaterEqual(In(a), In(b)));"
            ],
            [
                319,
                "            return Out(tf.Less(In(a), In(b)));"
            ],
            [
                324,
                "            return Out(tf.Less(In(a), In(b)));"
            ],
            [
                329,
                "            return Out(tf.Less(In(a), In(b)));"
            ],
            [
                334,
                "            return Out(tf.LessEqual(In(a), In(b)));"
            ],
            [
                339,
                "            return Out(tf.LessEqual(In(a), In(b)));"
            ],
            [
                344,
                "            return Out(tf.LessEqual(In(a), In(b)));"
            ],
            [
                369,
                "            return Out(tf.Max(In(x), In(dim)));"
            ],
            [
                374,
                "            return Out(tf.Max(In(x), In(dim)));"
            ],
            [
                384,
                "            return Out(tf.Maximum(In(a), In(b)));"
            ],
            [
                389,
                "            return Out(tf.ReduceMean(In(x))).ToScalar();"
            ],
            [
                394,
                "            return Out(tf.Mean(In(x), In(dim)));"
            ],
            [
                399,
                "            return Out(tf.Mean(In(x), In(dim)));"
            ],
            [
                404,
                "            return Out(tf.Min(In(x), In(x.Shape))).ToScalar();"
            ],
            [
                409,
                "            return Out(tf.Min(In(x), In(dim)));"
            ],
            [
                414,
                "            return Out(tf.Min(In(x), In(dim)));"
            ],
            [
                424,
                "            return Out(tf.Minimum(In(a), In(b)));"
            ],
            [
                434,
                "            return Out(tf.Mul(In(a), In(b)));"
            ],
            [
                439,
                "            return Out(tf.Mul(In(a), In(b)));"
            ],
            [
                449,
                "            return Out(tf.Pow(In(x), In(value)));"
            ],
            [
                466,
                "            return Out(tf.RandomNormal(new TFShape(shape), mean, stddev, seed));"
            ],
            [
                471,
                "            return Out(tf.RandomUniform(new TFShape(shape), min, max, seed));"
            ],
            [
                518,
                "            throw new NotImplementedException();"
            ],
            [
                524,
                "            return Out(tf.Slice(In(x), In(start), In(size)));"
            ],
            [
                554,
                "            return Out(tf.Sub(In(a), In(b)));"
            ],
            [
                559,
                "            return Out(tf.Sub(In(a), In(b)));"
            ],
            [
                564,
                "            return Out(tf.ReduceSum(In(x))).ToScalar();"
            ],
            [
                570,
                "            return Out(tf.ReduceSum(In(x), In(dim)));"
            ],
            [
                595,
                "            return Out(tf.Tile(In(x), In(n)));"
            ],
            [
                600,
                "            return Out(tf.Pow(In(value), In(x)));"
            ]
        ]
    },
    "num_lines_added": 119,
    "num_lines_removed": 61
}