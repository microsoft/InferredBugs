{
    "hash": "504a66811264a91b305c3255b92492b8f7ee73d4",
    "message": "MxNet Backend Implemented",
    "file_num_lines": 518,
    "diff_parsed": {
        "added": [
            [
                28,
                "            if(shape.Length == 0)"
            ],
            [
                29,
                "            {"
            ],
            [
                30,
                "                shape = new long[] { 1, 1 };"
            ],
            [
                31,
                "            }"
            ],
            [
                32,
                ""
            ],
            [
                83,
                "            dim = dim < 0 ? x.DimCount + dim : dim;"
            ],
            [
                89,
                "            dim = dim < 0 ? x.DimCount + dim : dim;"
            ],
            [
                339,
                "            dim = dim < 0 ? x.DimCount + dim : dim;"
            ],
            [
                340,
                "            return Out(NDArray.Max(In(x), NDShape(dim), true));"
            ],
            [
                343,
                "        public Tensor Max(Tensor x, params int[] dims)"
            ],
            [
                345,
                "            for (int i = 0; i < dims.Length; i++)"
            ],
            [
                346,
                "            {"
            ],
            [
                347,
                "                dims[i] = dims[i] < 0 ? x.DimCount + dims[i] : dims[i];"
            ],
            [
                348,
                "            }"
            ],
            [
                349,
                ""
            ],
            [
                350,
                "            return Out(NDArray.Max(In(x), NDShape(dims), true));"
            ],
            [
                370,
                "            dim = dim < 0 ? x.DimCount + dim : dim;"
            ],
            [
                371,
                "            return Out(NDArray.Mean(In(x), NDShape(dim), true));"
            ],
            [
                374,
                "        public Tensor Mean(Tensor x, params int[] dims)"
            ],
            [
                376,
                "            for (int i = 0;  i < dims.Length; i++)"
            ],
            [
                377,
                "            {"
            ],
            [
                378,
                "                dims[i] = dims[i] < 0 ? x.DimCount + dims[i] : dims[i];"
            ],
            [
                379,
                "            }"
            ],
            [
                380,
                ""
            ],
            [
                381,
                "            return Out(NDArray.Mean(In(x), NDShape(dims), true));"
            ],
            [
                391,
                "            dim = dim < 0 ? x.DimCount + dim : dim;"
            ],
            [
                392,
                "            return Out(NDArray.Min(In(x), NDShape(dim), true));"
            ],
            [
                395,
                "        public Tensor Min(Tensor x, params int[] dims)"
            ],
            [
                397,
                "            for (int i = 0; i < dims.Length; i++)"
            ],
            [
                398,
                "            {"
            ],
            [
                399,
                "                dims[i] = dims[i] < 0 ? x.DimCount + dims[i] : dims[i];"
            ],
            [
                400,
                "            }"
            ],
            [
                401,
                ""
            ],
            [
                402,
                "            return Out(NDArray.Min(In(x), NDShape(dims), true));"
            ],
            [
                523,
                "            end = end + 1;"
            ],
            [
                569,
                "            dim = dim < 0 ? x.DimCount + dim : dim;"
            ],
            [
                570,
                "            return Out(NDArray.Sum(In(x), NDShape(dim), true));"
            ],
            [
                573,
                "        public Tensor Sum(Tensor x, params int[] dims)"
            ],
            [
                575,
                "            for (int i = 0; i < dims.Length; i++)"
            ],
            [
                576,
                "            {"
            ],
            [
                577,
                "                dims[i] = dims[i] < 0 ? x.DimCount + dims[i] : dims[i];"
            ],
            [
                578,
                "            }"
            ],
            [
                579,
                ""
            ],
            [
                580,
                "            return Out(NDArray.Sum(In(x), NDShape(dims), true));"
            ]
        ],
        "deleted": [
            [
                222,
                "                default:"
            ],
            [
                223,
                "                    throw new Exception(\"Unsupported type.\");"
            ],
            [
                334,
                "            return Out(NDArray.Max(In(x), NDShape(dim)));"
            ],
            [
                337,
                "        public Tensor Max(Tensor x, params int[] dim)"
            ],
            [
                339,
                "            return Out(NDArray.Max(In(x), NDShape(dim)));"
            ],
            [
                359,
                "            return Out(NDArray.Mean(In(x), NDShape(dim)));"
            ],
            [
                362,
                "        public Tensor Mean(Tensor x, params int[] dim)"
            ],
            [
                364,
                "            return Out(NDArray.Mean(In(x), NDShape(dim)));"
            ],
            [
                374,
                "            return Out(NDArray.Min(In(x), NDShape(dim)));"
            ],
            [
                377,
                "        public Tensor Min(Tensor x, params int[] dim)"
            ],
            [
                379,
                "            return Out(NDArray.Min(In(x), NDShape(dim)));"
            ],
            [
                545,
                "            return Out(NDArray.Sum(In(x), NDShape(dim)));"
            ],
            [
                548,
                "        public Tensor Sum(Tensor x, params int[] dim)"
            ],
            [
                550,
                "            return Out(NDArray.Sum(In(x), NDShape(dim)));"
            ]
        ]
    },
    "num_lines_added": 44,
    "num_lines_removed": 14
}