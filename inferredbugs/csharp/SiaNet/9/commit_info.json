{
    "hash": "42e451f74094fc231ea946c28b196f4214a5fdd1",
    "message": "Simplied Tensor Project. Merged with Cuda Code",
    "file_num_lines": 48,
    "diff_parsed": {
        "added": [
            [
                26,
                "            //TestDense();"
            ],
            [
                27,
                "            TestAct();"
            ],
            [
                32,
                "            Tensor tensor = Tensor.FromArray(Global.Device, new float[] { -1, 2, 3, -4, 5, 6, 7, -8, 9 });"
            ],
            [
                33,
                "            tensor = tensor.Reshape(3, -1);"
            ],
            [
                34,
                "            Dense d = new Dense(6, ActivationType.Linear, new Ones(), null, null, true, new Ones());"
            ],
            [
                36,
                "            d.Output.Print();"
            ],
            [
                38,
                "            d.Backward(d.Output);"
            ],
            [
                39,
                "            d.Input.Grad.Print();"
            ],
            [
                40,
                "            d.Params[\"w\"].Grad.Print();"
            ],
            [
                41,
                "            d.Params[\"b\"].Grad.Print();"
            ],
            [
                43,
                ""
            ],
            [
                44,
                "        private static void TestAct()"
            ],
            [
                46,
                "            Tensor tensor = Tensor.FromArray(Global.Device, new float[] { -1, 2, 3, -4, 5, 6, 7, -8, 9 });"
            ],
            [
                47,
                "            tensor = tensor.Reshape(3, -1);"
            ],
            [
                49,
                "            var act = new Elu();"
            ],
            [
                50,
                "            act.Forward(Variable.Create(tensor));"
            ],
            [
                51,
                "            act.Output.Print();"
            ],
            [
                53,
                "            act.Backward(act.Output);"
            ],
            [
                54,
                "            act.Input.Grad.Print();"
            ]
        ],
        "deleted": [
            [
                26,
                "            //Global.UseGpu();"
            ],
            [
                27,
                "            //SetConstValue();"
            ],
            [
                28,
                "            //Elu();"
            ],
            [
                29,
                "            //TestSoftmax();"
            ],
            [
                30,
                "            //MNIST.Run();"
            ],
            [
                31,
                "            //TestActivations.Run();"
            ],
            [
                32,
                ""
            ],
            [
                33,
                "            //MaxImpl();"
            ],
            [
                34,
                "            //ToArrayTest();"
            ],
            [
                35,
                "            //FlattenTest();"
            ],
            [
                36,
                "            TestConv2d();"
            ],
            [
                37,
                "            //TestParallel();"
            ],
            [
                42,
                "            Tensor tensor = new Tensor(device, DType.Float32, 4, 2);"
            ],
            [
                43,
                "            RandomUniform init = new RandomUniform(-10, 10);"
            ],
            [
                44,
                "            int dim = 4;"
            ],
            [
                45,
                "            tensor = init.Operator(tensor);"
            ],
            [
                46,
                "            Console.WriteLine(tensor.Format());"
            ],
            [
                47,
                "            Dense d = new Dense(4, ActivationType.ReLU, new GlorotUniform(), null, null, true, new Zeros());"
            ],
            [
                49,
                ""
            ],
            [
                50,
                "            Console.WriteLine(d.Output.Format());"
            ],
            [
                51,
                ""
            ],
            [
                52,
                "        }"
            ],
            [
                53,
                "        private static void SetConstValue()"
            ],
            [
                54,
                "        {"
            ],
            [
                55,
                "            float value = 0.32f;"
            ],
            [
                56,
                ""
            ],
            [
                57,
                "            Tensor tensor = new Tensor(device, DType.Float32, 4, 2);"
            ],
            [
                58,
                "            //tensor = TVar.Fill(value, device, DType.Float32, tensor.Sizes).Evaluate();"
            ],
            [
                59,
                "            Ops.Fill(tensor, 0.33f);"
            ],
            [
                60,
                ""
            ],
            [
                61,
                "            Console.WriteLine(tensor.Format());"
            ],
            [
                62,
                "        }"
            ],
            [
                63,
                ""
            ],
            [
                64,
                "        private static void TestInit()"
            ],
            [
                65,
                "        {"
            ],
            [
                66,
                "            Tensor tensor = new Tensor(device, DType.Float32, 4, 2);"
            ],
            [
                67,
                "            Ones glorotUniform = new Ones();"
            ],
            [
                68,
                ""
            ],
            [
                69,
                "            tensor = glorotUniform.Operator(tensor);"
            ],
            [
                70,
                "            Console.WriteLine(tensor.Format());"
            ],
            [
                71,
                "        }"
            ],
            [
                72,
                ""
            ],
            [
                73,
                "        private static void TestArgMax()"
            ],
            [
                74,
                "        {"
            ],
            [
                75,
                "            Tensor tensor = new Tensor(device, DType.Float32, 5, 10);"
            ],
            [
                76,
                ""
            ],
            [
                77,
                "            RandomUniform init = new RandomUniform(0, 1);"
            ],
            [
                78,
                ""
            ],
            [
                79,
                "            tensor = init.Operator(tensor);"
            ],
            [
                80,
                ""
            ],
            [
                81,
                "            Console.WriteLine(tensor.Format());"
            ],
            [
                82,
                "            Console.WriteLine(tensor.TVar().Argmax(1).Evaluate().Format());"
            ],
            [
                83,
                "        }"
            ],
            [
                84,
                ""
            ],
            [
                85,
                "        private static void TestGreaterThan()"
            ],
            [
                86,
                "        {"
            ],
            [
                87,
                "            Tensor tensor = new Tensor(device, DType.Float32, 5, 2);"
            ],
            [
                88,
                ""
            ],
            [
                89,
                "            RandomUniform init = new RandomUniform(-1, 1);"
            ],
            [
                90,
                ""
            ],
            [
                91,
                "            tensor = init.Operator(tensor);"
            ],
            [
                92,
                ""
            ],
            [
                93,
                "            Console.WriteLine(tensor.Format());"
            ],
            [
                94,
                ""
            ],
            [
                95,
                "            Ops.GreaterThan(tensor, tensor, 0);"
            ],
            [
                96,
                ""
            ],
            [
                97,
                "            Console.WriteLine(tensor.Format());"
            ],
            [
                98,
                "        }"
            ],
            [
                99,
                ""
            ],
            [
                100,
                "        private static void Relu()"
            ],
            [
                101,
                "        {"
            ],
            [
                102,
                "            Tensor tensor = new Tensor(device, DType.Float32, 5, 2);"
            ],
            [
                103,
                ""
            ],
            [
                104,
                "            RandomUniform init = new RandomUniform(-1, 1);"
            ],
            [
                105,
                ""
            ],
            [
                106,
                "            tensor = init.Operator(tensor);"
            ],
            [
                107,
                ""
            ],
            [
                108,
                "            Console.WriteLine(tensor.Format());"
            ],
            [
                109,
                ""
            ],
            [
                110,
                "            var keepElements = tensor.TVar() > 0;"
            ],
            [
                111,
                "            tensor = (tensor.TVar().CMul(keepElements) + (1 - keepElements) * 0).Evaluate();"
            ],
            [
                112,
                ""
            ],
            [
                113,
                "            tensor = tensor.TVar().CMul(tensor.TVar() > 0).Evaluate();"
            ],
            [
                114,
                ""
            ],
            [
                115,
                "            Console.WriteLine(tensor.Format());"
            ],
            [
                116,
                "        }"
            ],
            [
                117,
                ""
            ],
            [
                118,
                "        private static void Elu()"
            ],
            [
                119,
                "        {"
            ],
            [
                120,
                "            Tensor tensor = new Tensor(device, DType.Float32, 5, 2);"
            ],
            [
                121,
                "            float alpha = 1;"
            ],
            [
                122,
                "            RandomUniform init = new RandomUniform(-1, 1);"
            ],
            [
                123,
                ""
            ],
            [
                124,
                "            tensor = init.Operator(tensor);"
            ],
            [
                125,
                ""
            ],
            [
                126,
                "            Console.WriteLine(tensor.Format());"
            ],
            [
                127,
                ""
            ],
            [
                128,
                "            tensor = _elu(tensor).Evaluate();"
            ],
            [
                129,
                ""
            ],
            [
                130,
                "            //var keepElements = tensor.TVar() >= 0;"
            ],
            [
                131,
                "            //TVar d = (alpha * (tensor.TVar().Exp() - 1)).Evaluate();"
            ],
            [
                132,
                "            //tensor = (tensor.TVar().CMul(keepElements) + (1 - keepElements).CMul(d)).Evaluate();"
            ],
            [
                133,
                ""
            ],
            [
                134,
                "            Console.WriteLine(tensor.Format());"
            ],
            [
                135,
                "        }"
            ],
            [
                136,
                ""
            ],
            [
                137,
                "        private static TVar _elu(TVar input)"
            ],
            [
                138,
                "        {"
            ],
            [
                139,
                "            float alpha = 1;"
            ],
            [
                140,
                "            var keepElements = input >= 0;"
            ],
            [
                141,
                "            TVar d = (alpha * (input.Exp() - 1)).Evaluate();"
            ],
            [
                142,
                "            return (input.CMul(keepElements) + (1 - keepElements).CMul(d)).Evaluate();"
            ],
            [
                143,
                "        }"
            ],
            [
                144,
                ""
            ],
            [
                145,
                "        private static void TestSoftmax()"
            ],
            [
                146,
                "        {"
            ],
            [
                147,
                "            Tensor tensor = TVar.FromArray(new float[] { 1, -2, 3, -4, 1, 2, -3, 4 }, Global.Device).Evaluate();"
            ],
            [
                148,
                "            tensor = tensor.View(2, 4);"
            ],
            [
                149,
                ""
            ],
            [
                150,
                "            tensor.Print();"
            ],
            [
                151,
                "            Softmax s = new Softmax();"
            ],
            [
                152,
                "            s.Forward(Variable.Create(tensor));"
            ],
            [
                153,
                "            s.Output.Print();"
            ],
            [
                154,
                ""
            ],
            [
                155,
                "        }"
            ],
            [
                156,
                ""
            ],
            [
                157,
                "        private static void MaxImpl()"
            ],
            [
                158,
                "        {"
            ],
            [
                159,
                "            Tensor tensor1 = TVar.FromArray(new float[] { 1, 2, 3, 4, 1, 2, 3, 1 }, Global.Device).Evaluate();"
            ],
            [
                160,
                "            Tensor tensor2 = TVar.FromArray(new float[] { -1, 4, -3, 4, 6, 1, 2, -2 }, Global.Device).Evaluate();"
            ],
            [
                162,
                "            tensor1 = tensor1.View(4, 2);"
            ],
            [
                163,
                "            tensor2 = tensor2.View(4, 2);"
            ],
            [
                164,
                ""
            ],
            [
                165,
                "            var t1 = (tensor1.TVar() >= tensor2.TVar());"
            ],
            [
                166,
                "            var t2 = (tensor2.TVar() > tensor1.TVar());"
            ],
            [
                167,
                ""
            ],
            [
                168,
                "            (t1.CMul(tensor1) + t2.CMul(tensor2)).Print();"
            ],
            [
                169,
                "        }"
            ],
            [
                170,
                ""
            ],
            [
                171,
                "        private static void ToArrayTest()"
            ],
            [
                172,
                "        {"
            ],
            [
                173,
                "            Tensor tensor = TVar.RandomNormal(new SeedSource(), 2, 1, Global.Device, DType.Float32, 100, 300).Evaluate();"
            ],
            [
                174,
                ""
            ],
            [
                175,
                "            var arr = tensor.ToArray();"
            ],
            [
                177,
                ""
            ],
            [
                178,
                "        private static void FlattenTest()"
            ],
            [
                180,
                "            Tensor tensor1 = TVar.FromArray(new float[] { 1, 2, 3, 4, 1, 2, 3, 1 }, Global.Device).Evaluate();"
            ],
            [
                181,
                ""
            ],
            [
                182,
                "            tensor1 = tensor1.View(4, 2);"
            ],
            [
                183,
                ""
            ],
            [
                184,
                "            var c = tensor1.ElementCount();"
            ],
            [
                185,
                ""
            ],
            [
                186,
                "            tensor1.View(c, -1).Print();"
            ],
            [
                187,
                "        }"
            ],
            [
                188,
                ""
            ],
            [
                189,
                "        private static void PadTest()"
            ],
            [
                190,
                "        {"
            ],
            [
                191,
                "            Tensor tensor1 = TVar.RandomUniform(new SeedSource(), 0, 10, Global.Device, DType.Float32, 2, 2, 2, 4).Evaluate();"
            ],
            [
                192,
                "            tensor1.Print();"
            ],
            [
                193,
                ""
            ],
            [
                194,
                "            tensor1 = tensor1.Pad(2, 0);"
            ],
            [
                195,
                "            tensor1.Print();"
            ],
            [
                196,
                "        }"
            ],
            [
                197,
                ""
            ],
            [
                198,
                "        private static void TestConv2d()"
            ],
            [
                199,
                "        {"
            ],
            [
                200,
                "            var t = Tensor.Arange(Global.Device, 1, 10, 3);"
            ],
            [
                201,
                "            Tensor tensor1 = TVar.FromArray(new float[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1 }, Global.Device).Evaluate();"
            ],
            [
                202,
                "            tensor1 = tensor1.View(1, 2, 3, 3);"
            ],
            [
                203,
                "            var max = TOps.Max(tensor1, 2, 3);"
            ],
            [
                204,
                "            Conv2D conv2D = new Conv2D(3, new Tuple<uint, uint>(3, 3), kernalInitializer: new Ones());"
            ],
            [
                205,
                "            conv2D.Forward(Variable.Create(tensor1));"
            ],
            [
                206,
                "            conv2D.Output.Print();"
            ],
            [
                207,
                "        }"
            ],
            [
                208,
                ""
            ],
            [
                209,
                "        private static void TestConv1d()"
            ],
            [
                210,
                "        {"
            ],
            [
                211,
                "            var t = Tensor.Arange(Global.Device, 1, 10, 3);"
            ],
            [
                212,
                "            Tensor tensor1 = TVar.FromArray(new float[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1 }, Global.Device).Evaluate();"
            ],
            [
                213,
                "            tensor1 = tensor1.View(2, 3, 3);"
            ],
            [
                214,
                "            Conv1D conv = new Conv1D(3, 3, kernalInitializer: new Ones());"
            ],
            [
                215,
                "            conv.Forward(Variable.Create(tensor1));"
            ],
            [
                216,
                "            conv.Output.Print();"
            ],
            [
                217,
                "        }"
            ],
            [
                218,
                ""
            ],
            [
                219,
                "        private static void TestConv3d()"
            ],
            [
                220,
                "        {"
            ],
            [
                221,
                "            Tensor tensor1 = TVar.FromArray(new float[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1 }, Global.Device).Evaluate();"
            ],
            [
                222,
                "            tensor1 = tensor1.View(1, 2, 2, 3, 3);"
            ],
            [
                223,
                "            Conv3D conv = new Conv3D(3, new Tuple<uint, uint, uint>(2, 3, 3), kernalInitializer: new Ones());"
            ],
            [
                224,
                "            conv.Forward(Variable.Create(tensor1));"
            ],
            [
                225,
                "            conv.Output.Print();"
            ],
            [
                226,
                "        }"
            ],
            [
                227,
                ""
            ],
            [
                228,
                "        private static void TestParallel()"
            ],
            [
                229,
                "        {"
            ],
            [
                230,
                "            Tensor a = Tensor.FromArray(Global.Device, new float[] { 2, 3, 1, 2 });"
            ],
            [
                231,
                "            Tensor b = Tensor.FromArray(Global.Device, new float[] { 1, 2, 2, 3, 1, 2 });"
            ],
            [
                232,
                ""
            ],
            [
                233,
                "            //Tensor c = new Tensor(Global.Device, DType.Float32, 2, 3);"
            ],
            [
                234,
                ""
            ],
            [
                235,
                "            a = a.View(2, 2);"
            ],
            [
                236,
                "            b = b.View(2, 3);"
            ],
            [
                237,
                ""
            ],
            [
                238,
                "            a.Print();"
            ],
            [
                239,
                "            b.Print();"
            ],
            [
                240,
                ""
            ],
            [
                241,
                "            var c = a * 2;"
            ],
            [
                242,
                ""
            ],
            [
                243,
                "            //Ops.Dot(c, a, b);"
            ],
            [
                244,
                "            c.Print();"
            ],
            [
                246,
                "            Matrix<float> ma = Matrix<float>.Build.DenseOfArray(new float[,] { { 2, 3 }, { 1, 2 } });"
            ],
            [
                247,
                "            Matrix<float> mb = Matrix<float>.Build.DenseOfArray(new float[,] { { 1, 2, 2 }, {3 , 1, 2 } });"
            ],
            [
                249,
                "            var mc = ma * mb;"
            ],
            [
                250,
                "            Console.WriteLine(mc.ToMatrixString());"
            ]
        ]
    },
    "num_lines_added": 19,
    "num_lines_removed": 215
}