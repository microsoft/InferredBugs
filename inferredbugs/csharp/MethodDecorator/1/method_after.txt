    public Assembly Weave()
    {
        GetAssemblyPath();

        var newAssembly = assemblyPath.Replace(".dll", "2.dll");

        var assemblyFileName = Path.GetFileName(newAssembly);
        var assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => Path.GetFileName(a.CodeBase) == assemblyFileName);
        if (assembly != null)
            return assembly;


        File.Copy(assemblyPath, newAssembly, true);
        File.Copy(assemblyPath.Replace(".dll", ".pdb"), newAssembly.Replace(".dll", ".pdb"), true);


        var assemblyResolver = new TestAssemblyResolver(assemblyPath, projectPath);
        var moduleDefinition = ModuleDefinition.ReadModule(newAssembly, new ReaderParameters
                                                                        {
                                                                            AssemblyResolver = assemblyResolver,
                                                                            ReadSymbols = true
                                                                        });
        var weavingTask = new ModuleWeaver
                          {
                              ModuleDefinition = moduleDefinition,
                              AssemblyResolver = assemblyResolver
                          };

        weavingTask.Execute();

        moduleDefinition.Write(newAssembly, new WriterParameters
                                            {
                                                WriteSymbols = true
                                            });

        PEVerify(newAssembly);

        return Assembly.LoadFile(newAssembly);
    }