{
    "hash": "9b14b142a81d7b15f2fb366be9d2ea14f5dd9e47",
    "message": "Unit tests",
    "file_num_lines": 27,
    "diff_parsed": {
        "added": [
            [
                22,
                "            var documentClient = MockHelpers.GetFakeDocumentClient();"
            ],
            [
                23,
                ""
            ],
            [
                25,
                "            serviceCollection.AddCosmosStore<Dummy>(documentClient.Object, \"databaseName\");"
            ]
        ],
        "deleted": [
            [
                22,
                "            var mockDocumentClient = new Mock<IDocumentClient>();"
            ],
            [
                23,
                "            var mockDatabase = new Mock<Database>();"
            ],
            [
                24,
                "            var mockCollection = new Mock<DocumentCollection>();"
            ],
            [
                25,
                "            var mockOffer = new Mock<Offer>();"
            ],
            [
                26,
                "            mockDatabase.Setup(x => x.Id).Returns(\"databaseName\");"
            ],
            [
                27,
                "            mockCollection.Setup(x => x.Id).Returns(\"dummies\");"
            ],
            [
                28,
                ""
            ],
            [
                29,
                "            mockDocumentClient.Setup(x => x.AuthKey).Returns(new SecureString());"
            ],
            [
                30,
                "            mockDocumentClient.Setup(x => x.ServiceEndpoint).Returns(new Uri(\"http://test.com\"));"
            ],
            [
                31,
                "            mockDocumentClient.Setup(x => x.ReadDatabaseAsync(It.IsAny<string>(), null))"
            ],
            [
                32,
                "                .ReturnsAsync(new ResourceResponse<Database>(mockDatabase.Object));"
            ],
            [
                33,
                "            mockDocumentClient.Setup(x => x.ReadDocumentCollectionAsync(It.IsAny<string>(), null))"
            ],
            [
                34,
                "                .ReturnsAsync(new ResourceResponse<DocumentCollection>(mockCollection.Object));"
            ],
            [
                35,
                "            mockDocumentClient.Setup(x => x.CreateDatabaseQuery(null))"
            ],
            [
                36,
                "                .Returns(new EnumerableQuery<Database>(new List<Database>(){mockDatabase.Object}));"
            ],
            [
                37,
                "            mockDocumentClient.Setup(x => x.CreateDocumentCollectionQuery(It.IsAny<string>(), null))"
            ],
            [
                38,
                "                .Returns(new EnumerableQuery<DocumentCollection>(new List<DocumentCollection>() {new DocumentCollection(){Id = \"dummies\" } }));"
            ],
            [
                39,
                "            mockDocumentClient.Setup(x => x.CreateOfferQuery(null)).Returns("
            ],
            [
                40,
                "                new EnumerableQuery<OfferV2>(new List<OfferV2>()"
            ],
            [
                41,
                "                {"
            ],
            [
                42,
                "                    new OfferV2(mockOffer.Object, 400)"
            ],
            [
                43,
                "                }));"
            ],
            [
                44,
                ""
            ],
            [
                46,
                "            serviceCollection.AddCosmosStore<Dummy>(mockDocumentClient.Object, \"databaseName\");"
            ]
        ]
    },
    "num_lines_added": 3,
    "num_lines_removed": 24
}