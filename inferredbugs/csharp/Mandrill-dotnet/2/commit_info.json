{
    "hash": "9a918ccf772f2b307d912c11f118eaa197b75b53",
    "message": "More code cleanup.",
    "file_num_lines": 132,
    "diff_parsed": {
        "added": [
            [
                1,
                "\ufeffusing System;"
            ],
            [
                8,
                "using Mandrill.Requests;"
            ],
            [
                9,
                "using Mandrill.Utilities;"
            ],
            [
                22,
                ""
            ],
            [
                23,
                "    public void Dispose()"
            ],
            [
                24,
                "    {"
            ],
            [
                35,
                "        BaseAddress = new Uri(Configuration.BASE_SECURE_URL)"
            ],
            [
                40,
                "    private readonly HttpClient httpClient;"
            ],
            [
                54,
                "      private readonly HttpResponseMessage response;"
            ],
            [
                61,
                "      protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request,"
            ],
            [
                62,
                "        CancellationToken cancellationToken)"
            ],
            [
                78,
                "      public string Content { get; set; }"
            ],
            [
                79,
                ""
            ],
            [
                82,
                "        var byteArray = Encoding.ASCII.GetBytes(Content);"
            ],
            [
                93,
                "    [Fact]"
            ],
            [
                94,
                "    public async Task Should_Allow_Multiple_Requests_With_Single_HttpClient()"
            ],
            [
                95,
                "    {"
            ],
            [
                96,
                "      var responseString = @\"{"
            ],
            [
                97,
                "\t    \"\"Name\"\": \"\"Shawn\"\","
            ],
            [
                98,
                "\t    \"\"Id\"\": 1"
            ],
            [
                99,
                "        }\";"
            ],
            [
                100,
                "      var api = new MandrillApi(\"\");"
            ],
            [
                101,
                "      RespondWith(api, HttpStatusCode.OK, responseString);"
            ],
            [
                102,
                "      await api.Post<SampleObject>(\"\", new SamplePayload());"
            ],
            [
                103,
                "      await api.Post<SampleObject>(\"\", new SamplePayload());"
            ],
            [
                104,
                "    }"
            ],
            [
                105,
                ""
            ],
            [
                106,
                "    [Fact]"
            ],
            [
                107,
                "    public async Task Should_Serialize_Response_When_Json_Content_Is_Recieved()"
            ],
            [
                108,
                "    {"
            ],
            [
                109,
                "      var responseString = @\"{"
            ],
            [
                110,
                "\t      \"\"Name\"\": \"\"Shawn\"\","
            ],
            [
                111,
                "\t      \"\"Id\"\": 1"
            ],
            [
                112,
                "      }\";"
            ],
            [
                113,
                "      var api = new MandrillApi(\"\");"
            ],
            [
                114,
                "      RespondWith(api, HttpStatusCode.OK, responseString);"
            ],
            [
                115,
                ""
            ],
            [
                116,
                "      var response = await api.Post<SampleObject>(\"\", new SamplePayload());"
            ],
            [
                117,
                ""
            ],
            [
                118,
                "      Assert.Equal(\"Shawn\", response.Name);"
            ],
            [
                119,
                "      Assert.Equal(1, response.Id);"
            ],
            [
                120,
                "    }"
            ],
            [
                121,
                ""
            ],
            [
                122,
                "    [Fact]"
            ],
            [
                123,
                "    public async Task Should_Throw_Mandrill_Exception_When_Serialization_Error()"
            ],
            [
                124,
                "    {"
            ],
            [
                125,
                "      var responseString = @\"<html></html>\";"
            ],
            [
                126,
                ""
            ],
            [
                127,
                "      var api = new MandrillApi(\"\");"
            ],
            [
                128,
                "      RespondWith(api, HttpStatusCode.OK, responseString);"
            ],
            [
                129,
                ""
            ],
            [
                130,
                "      var ex = await Assert.ThrowsAsync<MandrillSerializationException>(async () =>"
            ],
            [
                131,
                "        await api.Post<object>(\"\", new SamplePayload()));"
            ],
            [
                132,
                "      var content = await ex.HttpResponseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);"
            ],
            [
                133,
                "      Assert.Equal(responseString, content);"
            ],
            [
                134,
                "    }"
            ],
            [
                135,
                ""
            ],
            [
                136,
                "    [Fact]"
            ],
            [
                137,
                "    public async Task Should_Throw_Mandrill_Exception_When_Server_Error()"
            ],
            [
                138,
                "    {"
            ],
            [
                139,
                "      var responseString = @\"{"
            ],
            [
                140,
                "\t      \"\"code\"\": \"\"501\"\","
            ],
            [
                141,
                "\t      \"\"message\"\": \"\"m1\"\","
            ],
            [
                142,
                "\t      \"\"name\"\": \"\"n1\"\","
            ],
            [
                143,
                "\t      \"\"status\"\": \"\"s1\"\""
            ],
            [
                144,
                "      }\";"
            ],
            [
                145,
                ""
            ],
            [
                146,
                "      var api = new MandrillApi(\"\");"
            ],
            [
                147,
                "      RespondWith(api, HttpStatusCode.InternalServerError, responseString);"
            ],
            [
                148,
                ""
            ],
            [
                149,
                "      var ex = await Assert.ThrowsAsync<MandrillException>(async () => await api.Post<object>(\"\", new SamplePayload()));"
            ],
            [
                150,
                "      Assert.Equal(501, ex.Error.Code);"
            ],
            [
                151,
                "      Assert.Equal(\"m1\", ex.Error.Message);"
            ],
            [
                152,
                "      Assert.Equal(\"n1\", ex.Error.Name);"
            ],
            [
                153,
                "      Assert.Equal(\"s1\", ex.Error.Status);"
            ],
            [
                154,
                "    }"
            ]
        ],
        "deleted": [
            [
                1,
                "\ufeffusing Mandrill.Requests;"
            ],
            [
                2,
                "using Mandrill.Utilities;"
            ],
            [
                3,
                "using System;"
            ],
            [
                22,
                "    public void Dispose() {"
            ],
            [
                33,
                "          BaseAddress = new Uri(Configuration.BASE_SECURE_URL)"
            ],
            [
                38,
                "    private HttpClient httpClient;"
            ],
            [
                50,
                "    [Fact]"
            ],
            [
                51,
                "    public async Task Should_Serialize_Response_When_Json_Content_Is_Recieved()"
            ],
            [
                52,
                "    {"
            ],
            [
                53,
                "      string responseString = @\"{"
            ],
            [
                54,
                "\t      \"\"Name\"\": \"\"Shawn\"\","
            ],
            [
                55,
                "\t      \"\"Id\"\": 1"
            ],
            [
                56,
                "      }\";"
            ],
            [
                57,
                "      var api = new MandrillApi(\"\");"
            ],
            [
                58,
                "      RespondWith(api, HttpStatusCode.OK, responseString);"
            ],
            [
                59,
                ""
            ],
            [
                60,
                "      SampleObject response = await api.Post<SampleObject>(\"\", new SamplePayload());"
            ],
            [
                61,
                ""
            ],
            [
                62,
                "      Assert.Equal(\"Shawn\", response.Name);"
            ],
            [
                63,
                "      Assert.Equal(1, response.Id);"
            ],
            [
                64,
                "    }"
            ],
            [
                65,
                ""
            ],
            [
                66,
                "    [Fact]"
            ],
            [
                67,
                "    public async Task Should_Throw_Mandrill_Exception_When_Server_Error()"
            ],
            [
                68,
                "    {"
            ],
            [
                69,
                "      string responseString = @\"{"
            ],
            [
                70,
                "\t      \"\"code\"\": \"\"501\"\","
            ],
            [
                71,
                "\t      \"\"message\"\": \"\"m1\"\","
            ],
            [
                72,
                "\t      \"\"name\"\": \"\"n1\"\","
            ],
            [
                73,
                "\t      \"\"status\"\": \"\"s1\"\""
            ],
            [
                74,
                "      }\";"
            ],
            [
                75,
                ""
            ],
            [
                76,
                "      var api = new MandrillApi(\"\");"
            ],
            [
                77,
                "      RespondWith(api, HttpStatusCode.InternalServerError, responseString);"
            ],
            [
                78,
                ""
            ],
            [
                79,
                "      var ex = await Assert.ThrowsAsync<MandrillException>(async () => await api.Post<object>(\"\", new SamplePayload()));"
            ],
            [
                80,
                "      Assert.Equal(501, ex.Error.Code);"
            ],
            [
                81,
                "      Assert.Equal(\"m1\", ex.Error.Message);"
            ],
            [
                82,
                "      Assert.Equal(\"n1\", ex.Error.Name);"
            ],
            [
                83,
                "      Assert.Equal(\"s1\", ex.Error.Status);"
            ],
            [
                84,
                "    }"
            ],
            [
                85,
                ""
            ],
            [
                86,
                "    [Fact]"
            ],
            [
                87,
                "    public async Task Should_Allow_Multiple_Requests_With_Single_HttpClient()"
            ],
            [
                88,
                "    {"
            ],
            [
                89,
                "        string responseString = @\"{"
            ],
            [
                90,
                "\t    \"\"Name\"\": \"\"Shawn\"\","
            ],
            [
                91,
                "\t    \"\"Id\"\": 1"
            ],
            [
                92,
                "        }\";"
            ],
            [
                93,
                "        var api = new MandrillApi(\"\");"
            ],
            [
                94,
                "        RespondWith(api, HttpStatusCode.OK, responseString);"
            ],
            [
                95,
                "        await api.Post<SampleObject>(\"\", new SamplePayload());"
            ],
            [
                96,
                "        await api.Post<SampleObject>(\"\", new SamplePayload());"
            ],
            [
                97,
                "    }"
            ],
            [
                98,
                ""
            ],
            [
                99,
                "    [Fact]"
            ],
            [
                100,
                "    public async Task Should_Throw_Mandrill_Exception_When_Serialization_Error()"
            ],
            [
                101,
                "    {"
            ],
            [
                102,
                "      string responseString = @\"<html></html>\";"
            ],
            [
                103,
                ""
            ],
            [
                104,
                "      var api = new MandrillApi(\"\");"
            ],
            [
                105,
                "      RespondWith(api, HttpStatusCode.OK, responseString);"
            ],
            [
                106,
                ""
            ],
            [
                107,
                "      var ex = await Assert.ThrowsAsync<MandrillSerializationException>(async () => await api.Post<object>(\"\", new SamplePayload()));"
            ],
            [
                108,
                "      var content = await ex.HttpResponseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);"
            ],
            [
                109,
                "      Assert.Equal(responseString, content);"
            ],
            [
                110,
                "    }"
            ],
            [
                113,
                "      private HttpResponseMessage response;"
            ],
            [
                120,
                "      protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)"
            ],
            [
                131,
                "      public string Content { get; set; }"
            ],
            [
                132,
                ""
            ],
            [
                140,
                "        byte[] byteArray = Encoding.ASCII.GetBytes(Content);"
            ]
        ]
    },
    "num_lines_added": 76,
    "num_lines_removed": 72
}