{
    "hash": "f668c19cb0d9a12c18a3d751659166f1980394b3",
    "message": "Add: CompileOrReturnConstant",
    "file_num_lines": 305,
    "diff_parsed": {
        "added": [
            [
                207,
                "\t\t\tusing (var lex = LuaLexer.Create(Path.GetFileName(fileName), sr, true))"
            ],
            [
                208,
                "\t\t\t\treturn CompileChunkCore(lex, options, args);"
            ],
            [
                218,
                "\t\t{"
            ],
            [
                219,
                "\t\t\tif (String.IsNullOrEmpty(name))"
            ],
            [
                220,
                "\t\t\t\tthrow new ArgumentNullException(nameof(name));"
            ],
            [
                221,
                ""
            ],
            [
                222,
                "\t\t\tusing (var lex = LuaLexer.Create(name, tr, true))"
            ],
            [
                223,
                "\t\t\t\treturn CompileChunkCore(lex, options, args);"
            ],
            [
                224,
                "\t\t} // func CompileChunk"
            ],
            [
                233,
                "\t\t{"
            ],
            [
                234,
                "\t\t\tif (String.IsNullOrEmpty(name))"
            ],
            [
                235,
                "\t\t\t\tthrow new ArgumentNullException(nameof(name));"
            ],
            [
                237,
                "\t\t\tusing (var lex = LuaLexer.Create(name, new StringReader(code)))"
            ],
            [
                238,
                "\t\t\t\treturn CompileChunkCore(lex, options, args);"
            ],
            [
                239,
                "\t\t} // func CompileChunk"
            ],
            [
                240,
                ""
            ],
            [
                241,
                "\t\t/// <summary>Creates a code delegate or returns a single return constant.</summary>"
            ],
            [
                242,
                "\t\t/// <param name=\"code\"></param>"
            ],
            [
                243,
                "\t\t/// <param name=\"options\"></param>"
            ],
            [
                244,
                "\t\t/// <param name=\"args\"></param>"
            ],
            [
                245,
                "\t\t/// <returns></returns>"
            ],
            [
                246,
                "\t\tpublic object CompileOrReturnConstant(ILuaLexer code, LuaCompileOptions options, params KeyValuePair<string, Type>[] args)"
            ],
            [
                247,
                "\t\t{"
            ],
            [
                248,
                "\t\t\tcode.Next(); // get first token"
            ],
            [
                249,
                ""
            ],
            [
                250,
                "\t\t\tif (code.Current.Typ == LuaToken.KwReturn // is first token a return"
            ],
            [
                251,
                "\t\t\t\t&& (code.LookAhead.Typ == LuaToken.String || code.LookAhead.Typ == LuaToken.Number) // we expect a string or number"
            ],
            [
                252,
                "\t\t\t\t&& (code.LookAhead2.Typ == LuaToken.Semicolon || code.LookAhead2.Typ == LuaToken.Eof)) // eof"
            ],
            [
                253,
                "\t\t\t{"
            ],
            [
                254,
                "\t\t\t\treturn code.LookAhead.Typ == LuaToken.String"
            ],
            [
                255,
                "\t\t\t\t\t? code.LookAhead.Value"
            ],
            [
                256,
                "\t\t\t\t\t: RtParseNumber(code.LookAhead.Value, FloatType == LuaFloatType.Double);"
            ],
            [
                257,
                "\t\t\t}"
            ],
            [
                258,
                "\t\t\telse"
            ],
            [
                259,
                "\t\t\t\treturn CompileChunkCore(code, options, args);"
            ],
            [
                260,
                "\t\t} // func CompileOrReturnConstant"
            ],
            [
                261,
                ""
            ],
            [
                262,
                "\t\tinternal LuaChunk CompileChunkCore(ILuaLexer lex, LuaCompileOptions options, IEnumerable<KeyValuePair<string, Type>> args)"
            ],
            [
                267,
                "\t\t\tvar registerMethods = options.DebugEngine != null && (options.DebugEngine.Level & LuaDebugLevel.RegisterMethods) == LuaDebugLevel.RegisterMethods;"
            ],
            [
                268,
                "\t\t\tif (registerMethods)"
            ],
            [
                269,
                "\t\t\t\tBeginCompile();"
            ],
            [
                270,
                "\t\t\ttry"
            ],
            [
                272,
                "\t\t\t\tvar expr = Parser.ParseChunk(this, options, true, lex, null, typeof(LuaResult), args);"
            ],
            [
                274,
                "\t\t\t\tif (printExpressionTree != null)"
            ],
            [
                276,
                "\t\t\t\t\tprintExpressionTree.WriteLine(Parser.ExpressionToString(expr));"
            ],
            [
                277,
                "\t\t\t\t\tprintExpressionTree.WriteLine(new string('=', 79));"
            ],
            [
                279,
                ""
            ],
            [
                280,
                "\t\t\t\t// compile the chunk"
            ],
            [
                281,
                "\t\t\t\treturn options.DebugEngine == null"
            ],
            [
                282,
                "\t\t\t\t\t? new LuaChunk(this, expr.Name, expr.Compile())"
            ],
            [
                283,
                "\t\t\t\t\t: options.DebugEngine.CreateChunk(this, expr);"
            ],
            [
                285,
                "\t\t\tfinally"
            ],
            [
                286,
                "\t\t\t{"
            ],
            [
                287,
                "\t\t\t\tif (registerMethods)"
            ],
            [
                288,
                "\t\t\t\t\tEndCompile();"
            ],
            [
                289,
                "\t\t\t}"
            ],
            [
                290,
                "\t\t} // func CompileChunkCore"
            ]
        ],
        "deleted": [
            [
                207,
                "\t\t\t\treturn CompileChunk(Path.GetFileName(fileName), options, sr, args);"
            ],
            [
                217,
                "\t\t\t=> CompileChunk(name, options, tr, args);"
            ],
            [
                226,
                "\t\t\t=> CompileChunk(name, options, new StringReader(code), args);"
            ],
            [
                228,
                "\t\tinternal LuaChunk CompileChunk(string chunkName, LuaCompileOptions options, TextReader tr, IEnumerable<KeyValuePair<string, Type>> args)"
            ],
            [
                230,
                "\t\t\tif (String.IsNullOrEmpty(chunkName))"
            ],
            [
                231,
                "\t\t\t\tthrow new ArgumentNullException(\"chunkname\");"
            ],
            [
                235,
                "\t\t\tusing (var l = options.CreateLexer(chunkName, tr))"
            ],
            [
                237,
                "\t\t\t\tvar registerMethods = options.DebugEngine != null && (options.DebugEngine.Level & LuaDebugLevel.RegisterMethods) == LuaDebugLevel.RegisterMethods;"
            ],
            [
                238,
                "\t\t\t\tif (registerMethods)"
            ],
            [
                239,
                "\t\t\t\t\tBeginCompile();"
            ],
            [
                240,
                "\t\t\t\ttry"
            ],
            [
                241,
                "\t\t\t\t{"
            ],
            [
                242,
                "\t\t\t\t\tvar expr = Parser.ParseChunk(this, options, true, l, null, typeof(LuaResult), args);"
            ],
            [
                243,
                ""
            ],
            [
                244,
                "\t\t\t\t\tif (printExpressionTree != null)"
            ],
            [
                245,
                "\t\t\t\t\t{"
            ],
            [
                246,
                "\t\t\t\t\t\tprintExpressionTree.WriteLine(Parser.ExpressionToString(expr));"
            ],
            [
                247,
                "\t\t\t\t\t\tprintExpressionTree.WriteLine(new string('=', 79));"
            ],
            [
                248,
                "\t\t\t\t\t}"
            ],
            [
                250,
                "\t\t\t\t\t// compile the chunk"
            ],
            [
                251,
                "\t\t\t\t\treturn options.DebugEngine == null"
            ],
            [
                252,
                "\t\t\t\t\t\t? new LuaChunk(this, expr.Name, expr.Compile())"
            ],
            [
                253,
                "\t\t\t\t\t\t: options.DebugEngine.CreateChunk(this, expr);"
            ],
            [
                254,
                "\t\t\t\t}"
            ],
            [
                255,
                "\t\t\t\tfinally"
            ],
            [
                257,
                "\t\t\t\t\tif (registerMethods)"
            ],
            [
                258,
                "\t\t\t\t\t\tEndCompile();"
            ],
            [
                261,
                "\t\t} // func CompileChunk"
            ]
        ]
    },
    "num_lines_added": 57,
    "num_lines_removed": 28
}