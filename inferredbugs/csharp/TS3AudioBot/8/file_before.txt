// TS3Client - A free TeamSpeak3 client implementation
// Copyright (C) 2017  TS3Client contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />



















using TS3Client.Messages;

#pragma warning disable CS8019 // Ignore unused imports
using i8  = System.SByte;
using u8  = System.Byte;
using i16 = System.Int16;
using u16 = System.UInt16;
using i32 = System.Int32;
using u32 = System.UInt32;
using i64 = System.Int64;
using u64 = System.UInt64;
using f32 = System.Single;
using f64 = System.Double;
using str = System.String;

using DateTime = System.DateTime;
using Duration = System.TimeSpan;
using DurationSeconds = System.TimeSpan;
using DurationMilliseconds = System.TimeSpan;
using SocketAddr = System.String;
using IpAddr = System.String;

using IconHash = System.Int32;
using ConnectionId = System.UInt32;
#pragma warning restore CS8019

namespace TS3Client.Full.Book
{
	public partial class Connection
	{
#pragma warning disable IDE0017, CS0472 // Ignore "Object initialization can be simplified", "Something with == and null..."
	
		public void UpdateInitServer(InitServer msg)
		{
			var obj = new Server();
			{ var tmpv = msg.ServerPlatform; if (tmpv != null) obj.Platform = (str)tmpv; }
			{ var tmpv = msg.ServerVersion; if (tmpv != null) obj.Version = (str)tmpv; }
			{ var tmpv = msg.ServerCreated; if (tmpv != null) obj.Created = (DateTime)tmpv; }
			{ var tmpa = msg.ServerIp; if (tmpa != null) { obj.Ips.Clear(); obj.Ips.UnionWith(tmpa); } }
			SetClientDataFun(msg);
			{ var tmpv = msg.WelcomeMessage; if (tmpv != null) obj.WelcomeMessage = (str)tmpv; }
			{ var tmpv = msg.MaxClients; if (tmpv != null) obj.MaxClients = (u16)tmpv; }
			{ var tmpv = msg.Hostmessage; if (tmpv != null) obj.Hostmessage = (str)tmpv; }
			{ var tmpv = msg.HostmessageMode; if (tmpv != null) obj.HostmessageMode = (HostMessageMode)tmpv; }
			{ var tmpv = msg.VirtualServerId; if (tmpv != null) obj.VirtualServerId = (u64)tmpv; }
			{ var tmpv = msg.AskForPrivilegekey; if (tmpv != null) obj.AskForPrivilegekey = (bool)tmpv; }
			{ var tmpv = msg.ProtocolVersion; if (tmpv != null) obj.ProtocolVersion = (u16)tmpv; }
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.CodecEncryptionMode; if (tmpv != null) obj.CodecEncryptionMode = (CodecEncryptionMode)tmpv; }
			{ var tmpv = msg.DefaultServerGroup; if (tmpv != null) obj.DefaultServerGroup = (ServerGroupId)tmpv; }
			{ var tmpv = msg.DefaultChannelGroup; if (tmpv != null) obj.DefaultChannelGroup = (ChannelGroupId)tmpv; }
			{ var tmpv = msg.HostbannerUrl; if (tmpv != null) obj.HostbannerUrl = (str)tmpv; }
			{ var tmpv = msg.HostbannerGfxUrl; if (tmpv != null) obj.HostbannerGfxUrl = (str)tmpv; }
			{ var tmpv = msg.HostbannerGfxInterval; if (tmpv != null) obj.HostbannerGfxInterval = (Duration)tmpv; }
			{ var tmpv = msg.PrioritySpeakerDimmModificator; if (tmpv != null) obj.PrioritySpeakerDimmModificator = (f32)tmpv; }
			{ var tmpv = msg.HostbuttonTooltip; if (tmpv != null) obj.HostbuttonTooltip = (str)tmpv; }
			{ var tmpv = msg.HostbuttonUrl; if (tmpv != null) obj.HostbuttonUrl = (str)tmpv; }
			{ var tmpv = msg.HostbuttonGfxUrl; if (tmpv != null) obj.HostbuttonGfxUrl = (str)tmpv; }
			{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
			{ var tmpv = msg.IconId; if (tmpv != null) obj.IconId = (IconHash)tmpv; }
			{ var tmpv = msg.HostbannerMode; if (tmpv != null) obj.HostbannerMode = (HostBannerMode)tmpv; }
			{ var tmpv = msg.TempChannelDefaultDeleteDelay; if (tmpv != null) obj.TempChannelDefaultDeleteDelay = (Duration)tmpv; }
			SetServer(obj);
			
		}

	
		public void UpdateChannelCreated(ChannelCreated msg)
		{
			var obj = new Channel();
			{ var tmpv = msg.ParentId; if (tmpv != null) obj.Parent = (ChannelId)tmpv; }
			{
			var tmp = MaxClientsCcFun(msg);
			{ var tmpv = tmp.Item1; if (tmpv != null) obj.MaxClients = (MaxClients)tmpv; }
			{ var tmpv = tmp.Item2; if (tmpv != null) obj.MaxFamilyClients = (MaxClients)tmpv; }
			}
			{ var tmpv = ChannelTypeCcFun(msg); if (tmpv != null) obj.ChannelType = (ChannelType)tmpv; }
			{ var tmpv = ReturnFalse(msg); if (tmpv != null) obj.ForcedSilence = (bool)tmpv; }
			obj.IsPrivate = null;
			{ var tmpv = ReturnFalse(msg); if (tmpv != null) obj.Subscribed = (bool)tmpv; }
			obj.PermissionHints = null;
			obj.OptionalData = null;
			{ var tmpv = ChannelOrderCcFun(msg); if (tmpv != null) obj.Order = (ChannelId)tmpv; }
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.Topic; if (tmpv != null) obj.Topic = (str)tmpv; }
			{ var tmpv = msg.IsDefault; if (tmpv != null) obj.IsDefault = (bool)tmpv; }
			{ var tmpv = msg.HasPassword; if (tmpv != null) obj.HasPassword = (bool)tmpv; }
			{ var tmpv = msg.Codec; if (tmpv != null) obj.Codec = (Codec)tmpv; }
			{ var tmpv = msg.CodecQuality; if (tmpv != null) obj.CodecQuality = (u8)tmpv; }
			{ var tmpv = msg.NeededTalkPower; if (tmpv != null) obj.NeededTalkPower = (i32)tmpv; }
			{ var tmpv = msg.IconId; if (tmpv != null) obj.IconId = (IconHash)tmpv; }
			{ var tmpv = msg.CodecLatencyFactor; if (tmpv != null) obj.CodecLatencyFactor = (i32)tmpv; }
			{ var tmpv = msg.IsUnencrypted; if (tmpv != null) obj.IsUnencrypted = (bool)tmpv; }
			{ var tmpv = msg.DeleteDelay; if (tmpv != null) obj.DeleteDelay = (Duration)tmpv; }
			{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
			SetChannel(obj, msg.ChannelId);
			
		}

	
		public void UpdateChannelDeleted(ChannelDeleted msg)
		{
			
			RemoveChannel(msg.ChannelId);
		}

	
		public void UpdateChannelEdited(ChannelEdited msg)
		{
			var obj = GetChannel(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelEdited' has no local object ({$msg})", msg);
				return;
			}
			{
			var tmp = MaxClientsCeFun(msg);
			{ var tmpv = tmp.Item1; if (tmpv != null) obj.MaxClients = (MaxClients)tmpv; }
			{ var tmpv = tmp.Item2; if (tmpv != null) obj.MaxFamilyClients = (MaxClients)tmpv; }
			}
			{ var tmpv = ChannelTypeCeFun(msg); if (tmpv != null) obj.ChannelType = (ChannelType)tmpv; }
			{ var tmpv = ChannelOrderCeFun(msg); if (tmpv != null) obj.Order = (ChannelId)tmpv; }
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.Topic; if (tmpv != null) obj.Topic = (str)tmpv; }
			{ var tmpv = msg.IsDefault; if (tmpv != null) obj.IsDefault = (bool)tmpv; }
			{ var tmpv = msg.HasPassword; if (tmpv != null) obj.HasPassword = (bool)tmpv; }
			{ var tmpv = msg.Codec; if (tmpv != null) obj.Codec = (Codec)tmpv; }
			{ var tmpv = msg.CodecQuality; if (tmpv != null) obj.CodecQuality = (u8)tmpv; }
			{ var tmpv = msg.NeededTalkPower; if (tmpv != null) obj.NeededTalkPower = (i32)tmpv; }
			{ var tmpv = msg.IconId; if (tmpv != null) obj.IconId = (IconHash)tmpv; }
			{ var tmpv = msg.CodecLatencyFactor; if (tmpv != null) obj.CodecLatencyFactor = (i32)tmpv; }
			{ var tmpv = msg.IsUnencrypted; if (tmpv != null) obj.IsUnencrypted = (bool)tmpv; }
			{ var tmpv = msg.DeleteDelay; if (tmpv != null) obj.DeleteDelay = (Duration)tmpv; }
			{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
			
		}

	
		public void UpdateChannelList(ChannelList msg)
		{
			var obj = new Channel();
			{ var tmpv = msg.ParentId; if (tmpv != null) obj.Parent = (ChannelId)tmpv; }
			{
			var tmp = MaxClientsClFun(msg);
			{ var tmpv = tmp.Item1; if (tmpv != null) obj.MaxClients = (MaxClients)tmpv; }
			{ var tmpv = tmp.Item2; if (tmpv != null) obj.MaxFamilyClients = (MaxClients)tmpv; }
			}
			{ var tmpv = ChannelTypeClFun(msg); if (tmpv != null) obj.ChannelType = (ChannelType)tmpv; }
			{ var tmpv = ReturnFalse(msg); if (tmpv != null) obj.Subscribed = (bool)tmpv; }
			obj.PermissionHints = null;
			obj.OptionalData = null;
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.Topic; if (tmpv != null) obj.Topic = (str)tmpv; }
			{ var tmpv = msg.Codec; if (tmpv != null) obj.Codec = (Codec)tmpv; }
			{ var tmpv = msg.CodecQuality; if (tmpv != null) obj.CodecQuality = (u8)tmpv; }
			{ var tmpv = msg.Order; if (tmpv != null) obj.Order = (ChannelId)tmpv; }
			{ var tmpv = msg.IsDefault; if (tmpv != null) obj.IsDefault = (bool)tmpv; }
			{ var tmpv = msg.HasPassword; if (tmpv != null) obj.HasPassword = (bool)tmpv; }
			{ var tmpv = msg.CodecLatencyFactor; if (tmpv != null) obj.CodecLatencyFactor = (i32)tmpv; }
			{ var tmpv = msg.IsUnencrypted; if (tmpv != null) obj.IsUnencrypted = (bool)tmpv; }
			{ var tmpv = msg.DeleteDelay; if (tmpv != null) obj.DeleteDelay = (Duration)tmpv; }
			{ var tmpv = msg.NeededTalkPower; if (tmpv != null) obj.NeededTalkPower = (i32)tmpv; }
			{ var tmpv = msg.ForcedSilence; if (tmpv != null) obj.ForcedSilence = (bool)tmpv; }
			{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
			{ var tmpv = msg.IconId; if (tmpv != null) obj.IconId = (IconHash)tmpv; }
			{ var tmpv = msg.IsPrivate; if (tmpv != null) obj.IsPrivate = (bool)tmpv; }
			SetChannel(obj, msg.ChannelId);
			
		}

	
		public void UpdateChannelMoved(ChannelMoved msg)
		{
			var obj = GetChannel(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelMoved' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = msg.ParentId; if (tmpv != null) obj.Parent = (ChannelId)tmpv; }
			{ var tmpv = ChannelOrderCmFun(msg); if (tmpv != null) obj.Order = (ChannelId)tmpv; }
			
		}

	
		public void UpdateChannelSubscribed(ChannelSubscribed msg)
		{
			var obj = GetChannel(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelSubscribed' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = ChannelSubscribeFun(msg); if (tmpv != null) obj.Subscribed = (bool)tmpv; }
			
		}

	
		public void UpdateChannelUnsubscribed(ChannelUnsubscribed msg)
		{
			var obj = GetChannel(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelUnsubscribed' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = ChannelUnsubscribeFun(msg); if (tmpv != null) obj.Subscribed = (bool)tmpv; }
			
		}

	
		public void UpdateClientChannelGroupChanged(ClientChannelGroupChanged msg)
		{
			var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientChannelGroupChanged' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = msg.ChannelGroup; if (tmpv != null) obj.ChannelGroup = (ChannelGroupId)tmpv; }
			
		}

	
		public void UpdateClientEnterView(ClientEnterView msg)
		{
			var obj = new Client();
			{ var tmpv = msg.TargetChannelId; if (tmpv != null) obj.Channel = (ChannelId)tmpv; }
			{ var tmpv = AwayCevFun(msg); if (tmpv != null) obj.AwayMessage = (str)tmpv; }
			{ var tmpv = TalkPowerCevFun(msg); if (tmpv != null) obj.TalkPowerRequest = (TalkPowerRequest)tmpv; }
			obj.PermissionHints = null;
			obj.OptionalData = null;
			obj.ConnectionData = null;
			{ var tmpv = msg.DatabaseId; if (tmpv != null) obj.DatabaseId = (ClientDbId)tmpv; }
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.ClientType; if (tmpv != null) obj.ClientType = (ClientType)tmpv; }
			{ var tmpv = msg.Uid; if (tmpv != null) obj.Uid = (Uid)tmpv; }
			{ var tmpv = msg.AvatarHash; if (tmpv != null) obj.AvatarHash = (str)tmpv; }
			{ var tmpv = msg.Description; if (tmpv != null) obj.Description = (str)tmpv; }
			{ var tmpv = msg.IconId; if (tmpv != null) obj.IconId = (IconHash)tmpv; }
			{ var tmpv = msg.InputMuted; if (tmpv != null) obj.InputMuted = (bool)tmpv; }
			{ var tmpv = msg.OutputMuted; if (tmpv != null) obj.OutputMuted = (bool)tmpv; }
			{ var tmpv = msg.OutputOnlyMuted; if (tmpv != null) obj.OutputOnlyMuted = (bool)tmpv; }
			{ var tmpv = msg.InputHardwareEnabled; if (tmpv != null) obj.InputHardwareEnabled = (bool)tmpv; }
			{ var tmpv = msg.OutputHardwareEnabled; if (tmpv != null) obj.OutputHardwareEnabled = (bool)tmpv; }
			{ var tmpv = msg.Metadata; if (tmpv != null) obj.Metadata = (str)tmpv; }
			{ var tmpv = msg.IsRecording; if (tmpv != null) obj.IsRecording = (bool)tmpv; }
			{ var tmpv = msg.ChannelGroup; if (tmpv != null) obj.ChannelGroup = (ChannelGroupId)tmpv; }
			{ var tmpv = msg.InheritedChannelGroupFromChannel; if (tmpv != null) obj.InheritedChannelGroupFromChannel = (ChannelId)tmpv; }
			{ var tmpa = msg.ServerGroups; if (tmpa != null) { obj.ServerGroups.Clear(); obj.ServerGroups.UnionWith(tmpa); } }
			{ var tmpv = msg.TalkPower; if (tmpv != null) obj.TalkPower = (i32)tmpv; }
			{ var tmpv = msg.TalkPowerGranted; if (tmpv != null) obj.TalkPowerGranted = (bool)tmpv; }
			{ var tmpv = msg.IsPrioritySpeaker; if (tmpv != null) obj.IsPrioritySpeaker = (bool)tmpv; }
			{ var tmpv = msg.UnreadMessages; if (tmpv != null) obj.UnreadMessages = (u32)tmpv; }
			{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
			{ var tmpv = msg.NeededServerqueryViewPower; if (tmpv != null) obj.NeededServerqueryViewPower = (i32)tmpv; }
			{ var tmpv = msg.IsChannelCommander; if (tmpv != null) obj.IsChannelCommander = (bool)tmpv; }
			{ var tmpv = msg.CountryCode; if (tmpv != null) obj.CountryCode = (str)tmpv; }
			{ var tmpv = msg.Badges; if (tmpv != null) obj.Badges = (str)tmpv; }
			SetClient(obj, msg.ClientId);
			
		}

	
		public void UpdateClientLeftView(ClientLeftView msg)
		{
			
			RemoveClient(msg.ClientId);
		}

	
		public void UpdateClientMoved(ClientMoved msg)
		{
			var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientMoved' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = msg.TargetChannelId; if (tmpv != null) obj.Channel = (ChannelId)tmpv; }
			
		}

	
		public void UpdateClientConnectionInfo(ClientConnectionInfo msg)
		{
			var obj = new ConnectionClientData();
			{ var tmpv = AddressFun(msg); if (tmpv != null) obj.ClientAddress = (SocketAddr)tmpv; }
			{ var tmpv = msg.Ping; if (tmpv != null) obj.Ping = (Duration)tmpv; }
			{ var tmpv = msg.PingDeviation; if (tmpv != null) obj.PingDeviation = (Duration)tmpv; }
			{ var tmpv = msg.ConnectedTime; if (tmpv != null) obj.ConnectedTime = (Duration)tmpv; }
			{ var tmpv = msg.PacketsSentSpeech; if (tmpv != null) obj.PacketsSentSpeech = (u64)tmpv; }
			{ var tmpv = msg.PacketsSentKeepalive; if (tmpv != null) obj.PacketsSentKeepalive = (u64)tmpv; }
			{ var tmpv = msg.PacketsSentControl; if (tmpv != null) obj.PacketsSentControl = (u64)tmpv; }
			{ var tmpv = msg.BytesSentSpeech; if (tmpv != null) obj.BytesSentSpeech = (u64)tmpv; }
			{ var tmpv = msg.BytesSentKeepalive; if (tmpv != null) obj.BytesSentKeepalive = (u64)tmpv; }
			{ var tmpv = msg.BytesSentControl; if (tmpv != null) obj.BytesSentControl = (u64)tmpv; }
			{ var tmpv = msg.PacketsReceivedSpeech; if (tmpv != null) obj.PacketsReceivedSpeech = (u64)tmpv; }
			{ var tmpv = msg.PacketsReceivedKeepalive; if (tmpv != null) obj.PacketsReceivedKeepalive = (u64)tmpv; }
			{ var tmpv = msg.PacketsReceivedControl; if (tmpv != null) obj.PacketsReceivedControl = (u64)tmpv; }
			{ var tmpv = msg.BytesReceivedSpeech; if (tmpv != null) obj.BytesReceivedSpeech = (u64)tmpv; }
			{ var tmpv = msg.BytesReceivedKeepalive; if (tmpv != null) obj.BytesReceivedKeepalive = (u64)tmpv; }
			{ var tmpv = msg.BytesReceivedControl; if (tmpv != null) obj.BytesReceivedControl = (u64)tmpv; }
			{ var tmpv = msg.ServerToClientPacketlossSpeech; if (tmpv != null) obj.ServerToClientPacketlossSpeech = (f32)tmpv; }
			{ var tmpv = msg.ServerToClientPacketlossKeepalive; if (tmpv != null) obj.ServerToClientPacketlossKeepalive = (f32)tmpv; }
			{ var tmpv = msg.ServerToClientPacketlossControl; if (tmpv != null) obj.ServerToClientPacketlossControl = (f32)tmpv; }
			{ var tmpv = msg.ServerToClientPacketlossTotal; if (tmpv != null) obj.ServerToClientPacketlossTotal = (f32)tmpv; }
			{ var tmpv = msg.ClientToServerPacketlossSpeech; if (tmpv != null) obj.ClientToServerPacketlossSpeech = (f32)tmpv; }
			{ var tmpv = msg.ClientToServerPacketlossKeepalive; if (tmpv != null) obj.ClientToServerPacketlossKeepalive = (f32)tmpv; }
			{ var tmpv = msg.ClientToServerPacketlossControl; if (tmpv != null) obj.ClientToServerPacketlossControl = (f32)tmpv; }
			{ var tmpv = msg.ClientToServerPacketlossTotal; if (tmpv != null) obj.ClientToServerPacketlossTotal = (f32)tmpv; }
			{ var tmpv = msg.BandwidthSentLastSecondSpeech; if (tmpv != null) obj.BandwidthSentLastSecondSpeech = (u64)tmpv; }
			{ var tmpv = msg.BandwidthSentLastSecondKeepalive; if (tmpv != null) obj.BandwidthSentLastSecondKeepalive = (u64)tmpv; }
			{ var tmpv = msg.BandwidthSentLastSecondControl; if (tmpv != null) obj.BandwidthSentLastSecondControl = (u64)tmpv; }
			{ var tmpv = msg.BandwidthSentLastMinuteSpeech; if (tmpv != null) obj.BandwidthSentLastMinuteSpeech = (u64)tmpv; }
			{ var tmpv = msg.BandwidthSentLastMinuteKeepalive; if (tmpv != null) obj.BandwidthSentLastMinuteKeepalive = (u64)tmpv; }
			{ var tmpv = msg.BandwidthSentLastMinuteControl; if (tmpv != null) obj.BandwidthSentLastMinuteControl = (u64)tmpv; }
			{ var tmpv = msg.BandwidthReceivedLastSecondSpeech; if (tmpv != null) obj.BandwidthReceivedLastSecondSpeech = (u64)tmpv; }
			{ var tmpv = msg.BandwidthReceivedLastSecondKeepalive; if (tmpv != null) obj.BandwidthReceivedLastSecondKeepalive = (u64)tmpv; }
			{ var tmpv = msg.BandwidthReceivedLastSecondControl; if (tmpv != null) obj.BandwidthReceivedLastSecondControl = (u64)tmpv; }
			{ var tmpv = msg.BandwidthReceivedLastMinuteSpeech; if (tmpv != null) obj.BandwidthReceivedLastMinuteSpeech = (u64)tmpv; }
			{ var tmpv = msg.BandwidthReceivedLastMinuteKeepalive; if (tmpv != null) obj.BandwidthReceivedLastMinuteKeepalive = (u64)tmpv; }
			{ var tmpv = msg.BandwidthReceivedLastMinuteControl; if (tmpv != null) obj.BandwidthReceivedLastMinuteControl = (u64)tmpv; }
			{ var tmpv = msg.FiletransferBandwidthSent; if (tmpv != null) obj.FiletransferBandwidthSent = (u64)tmpv; }
			{ var tmpv = msg.FiletransferBandwidthReceived; if (tmpv != null) obj.FiletransferBandwidthReceived = (u64)tmpv; }
			{ var tmpv = msg.IdleTime; if (tmpv != null) obj.IdleTime = (Duration)tmpv; }
			SetConnectionClientData(obj, msg.ClientId);
			
		}

	
		public void UpdateClientServerGroupAdded(ClientServerGroupAdded msg)
		{
			var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientServerGroupAdded' has no local object ({$msg})", msg);
				return;
			}
			obj.ServerGroups.Add(msg.ServerGroupId);
			
		}

	
		public void UpdateClientServerGroupRemoved(ClientServerGroupRemoved msg)
		{
			var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientServerGroupRemoved' has no local object ({$msg})", msg);
				return;
			}
			obj.ServerGroups.Remove(msg.ServerGroupId);
			
		}

	
		public void UpdateClientUpdated(ClientUpdated msg)
		{
			var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientUpdated' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = AwayCuFun(msg); if (tmpv != null) obj.AwayMessage = (str)tmpv; }
			{ var tmpv = TalkPowerCuFun(msg); if (tmpv != null) obj.TalkPowerRequest = (TalkPowerRequest)tmpv; }
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.UnreadMessages; if (tmpv != null) obj.UnreadMessages = (u32)tmpv; }
			{ var tmpv = msg.InputMuted; if (tmpv != null) obj.InputMuted = (bool)tmpv; }
			{ var tmpv = msg.InputHardwareEnabled; if (tmpv != null) obj.InputHardwareEnabled = (bool)tmpv; }
			{ var tmpv = msg.OutputHardwareEnabled; if (tmpv != null) obj.OutputHardwareEnabled = (bool)tmpv; }
			{ var tmpv = msg.Description; if (tmpv != null) obj.Description = (str)tmpv; }
			{ var tmpv = msg.IsPrioritySpeaker; if (tmpv != null) obj.IsPrioritySpeaker = (bool)tmpv; }
			{ var tmpv = msg.IsChannelCommander; if (tmpv != null) obj.IsChannelCommander = (bool)tmpv; }
			{ var tmpv = msg.AvatarHash; if (tmpv != null) obj.AvatarHash = (str)tmpv; }
			{ var tmpv = msg.TalkPowerGranted; if (tmpv != null) obj.TalkPowerGranted = (bool)tmpv; }
			{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
			{ var tmpv = msg.IsRecording; if (tmpv != null) obj.IsRecording = (bool)tmpv; }
			{ var tmpa = msg.ServerGroups; if (tmpa != null) { obj.ServerGroups.Clear(); obj.ServerGroups.UnionWith(tmpa); } }
			{ var tmpv = msg.Badges; if (tmpv != null) obj.Badges = (str)tmpv; }
			{ var tmpv = msg.TalkPower; if (tmpv != null) obj.TalkPower = (i32)tmpv; }
			{ var tmpv = msg.IconId; if (tmpv != null) obj.IconId = (IconHash)tmpv; }
			
		}

	
		public void UpdateServerGroupList(ServerGroupList msg)
		{
			var obj = new ServerGroup();
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.GroupType; if (tmpv != null) obj.GroupType = (GroupType)tmpv; }
			{ var tmpv = msg.IconId; if (tmpv != null) obj.IconId = (IconHash)tmpv; }
			{ var tmpv = msg.IsPermanent; if (tmpv != null) obj.IsPermanent = (bool)tmpv; }
			{ var tmpv = msg.SortId; if (tmpv != null) obj.SortId = (i32)tmpv; }
			{ var tmpv = msg.NamingMode; if (tmpv != null) obj.NamingMode = (GroupNamingMode)tmpv; }
			{ var tmpv = msg.NeededModifyPower; if (tmpv != null) obj.NeededModifyPower = (i32)tmpv; }
			{ var tmpv = msg.NeededMemberAddPower; if (tmpv != null) obj.NeededMemberAddPower = (i32)tmpv; }
			{ var tmpv = msg.NeededMemberRemovePower; if (tmpv != null) obj.NeededMemberRemovePower = (i32)tmpv; }
			SetServerGroup(obj, msg.ServerGroupId);
			
		}

	
		public void UpdateServerEdited(ServerEdited msg)
		{
			var obj = GetServer();
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ServerEdited' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.CodecEncryptionMode; if (tmpv != null) obj.CodecEncryptionMode = (CodecEncryptionMode)tmpv; }
			{ var tmpv = msg.DefaultServerGroup; if (tmpv != null) obj.DefaultServerGroup = (ServerGroupId)tmpv; }
			{ var tmpv = msg.DefaultChannelGroup; if (tmpv != null) obj.DefaultChannelGroup = (ChannelGroupId)tmpv; }
			{ var tmpv = msg.HostbannerUrl; if (tmpv != null) obj.HostbannerUrl = (str)tmpv; }
			{ var tmpv = msg.HostbannerGfxUrl; if (tmpv != null) obj.HostbannerGfxUrl = (str)tmpv; }
			{ var tmpv = msg.HostbannerGfxInterval; if (tmpv != null) obj.HostbannerGfxInterval = (Duration)tmpv; }
			{ var tmpv = msg.PrioritySpeakerDimmModificator; if (tmpv != null) obj.PrioritySpeakerDimmModificator = (f32)tmpv; }
			{ var tmpv = msg.HostbuttonTooltip; if (tmpv != null) obj.HostbuttonTooltip = (str)tmpv; }
			{ var tmpv = msg.HostbuttonUrl; if (tmpv != null) obj.HostbuttonUrl = (str)tmpv; }
			{ var tmpv = msg.HostbuttonGfxUrl; if (tmpv != null) obj.HostbuttonGfxUrl = (str)tmpv; }
			{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
			{ var tmpv = msg.IconId; if (tmpv != null) obj.IconId = (IconHash)tmpv; }
			{ var tmpv = msg.HostbannerMode; if (tmpv != null) obj.HostbannerMode = (HostBannerMode)tmpv; }
			{ var tmpv = msg.TempChannelDefaultDeleteDelay; if (tmpv != null) obj.TempChannelDefaultDeleteDelay = (Duration)tmpv; }
			
		}

	
		public void UpdateChannelPermissionHints(ChannelPermissionHints msg)
		{
			var obj = GetChannel(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelPermissionHints' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = msg.Flags; if (tmpv != null) obj.PermissionHints = (ChannelPermissionHint)tmpv; }
			
		}

	
		public void UpdateClientPermissionHints(ClientPermissionHints msg)
		{
			var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientPermissionHints' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = msg.Flags; if (tmpv != null) obj.PermissionHints = (ClientPermissionHint)tmpv; }
			
		}

	
#pragma warning restore IDE0017, CS0472
	}
}