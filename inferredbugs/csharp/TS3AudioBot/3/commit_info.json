{
    "hash": "f29bc469b1abe4e5dbc9b2359b82ec9e5a5fce81",
    "message": "Improved system detector",
    "file_num_lines": 185,
    "diff_parsed": {
        "added": [
            [
                15,
                "\tusing System.IO;"
            ],
            [
                23,
                "\t\tprivate static readonly Regex SemVerRegex = new Regex(@\"(\\d+)(?:\\.(\\d+)){1,3}\", RegexOptions.IgnoreCase | RegexOptions.ECMAScript | RegexOptions.Multiline);"
            ],
            [
                49,
                "\t\t\tstring version = null;"
            ],
            [
                56,
                "\t\t\t\tRunBash(\"cat /etc/*[_-][Rr]elease\", x =>"
            ],
            [
                58,
                "\t\t\t\t\tvar lines = x.ReadToEnd().Split(new[] { '\\n', '\\r' }, StringSplitOptions.RemoveEmptyEntries);"
            ],
            [
                59,
                "\t\t\t\t\tforeach (var line in lines)"
            ],
            [
                61,
                "\t\t\t\t\t\tvar match = PlattformRegex.Match(line);"
            ],
            [
                67,
                ""
            ],
            [
                68,
                "\t\t\t\t\tif (values.Count > 0)"
            ],
            [
                69,
                "\t\t\t\t\t{"
            ],
            [
                70,
                "\t\t\t\t\t\tstring value;"
            ],
            [
                71,
                "\t\t\t\t\t\tplattform = values.TryGetValue(\"NAME\", out value) ? value"
            ],
            [
                72,
                "\t\t\t\t\t\t\t\t: values.TryGetValue(\"ID\", out value) ? value"
            ],
            [
                73,
                "\t\t\t\t\t\t\t\t: values.TryGetValue(\"DISTRIB_ID\", out value) ? value"
            ],
            [
                74,
                "\t\t\t\t\t\t\t\t: values.TryGetValue(\"PRETTY_NAME\", out value) ? value"
            ],
            [
                75,
                "\t\t\t\t\t\t\t\t: null;"
            ],
            [
                76,
                ""
            ],
            [
                77,
                "\t\t\t\t\t\tversion = values.TryGetValue(\"VERSION\", out value) ? value"
            ],
            [
                78,
                "\t\t\t\t\t\t\t\t: values.TryGetValue(\"VERSION_ID\", out value) ? value"
            ],
            [
                79,
                "\t\t\t\t\t\t\t\t: values.TryGetValue(\"DISTRIB_RELEASE\", out value) ? value"
            ],
            [
                80,
                "\t\t\t\t\t\t\t\t: null;"
            ],
            [
                81,
                "\t\t\t\t\t}"
            ],
            [
                82,
                ""
            ],
            [
                83,
                "\t\t\t\t\tif (plattform == null && version == null)"
            ],
            [
                84,
                "\t\t\t\t\t{"
            ],
            [
                85,
                "\t\t\t\t\t\tforeach (var line in lines)"
            ],
            [
                86,
                "\t\t\t\t\t\t{"
            ],
            [
                87,
                "\t\t\t\t\t\t\tvar match = SemVerRegex.Match(line);"
            ],
            [
                88,
                "\t\t\t\t\t\t\tif (match.Success)"
            ],
            [
                89,
                "\t\t\t\t\t\t\t{"
            ],
            [
                90,
                "\t\t\t\t\t\t\t\tversion = line;"
            ],
            [
                91,
                "\t\t\t\t\t\t\t\tbreak;"
            ],
            [
                92,
                "\t\t\t\t\t\t\t}"
            ],
            [
                93,
                "\t\t\t\t\t\t}"
            ],
            [
                94,
                "\t\t\t\t\t}"
            ],
            [
                95,
                ""
            ],
            [
                96,
                "\t\t\t\t\tplattform = plattform ?? \"Linux\";"
            ],
            [
                97,
                "\t\t\t\t\tversion = version ?? \"<?>\";"
            ],
            [
                98,
                "\t\t\t\t});"
            ],
            [
                109,
                "\t\tprivate static void RunBash(string param, Action<StreamReader> action)"
            ],
            [
                110,
                "\t\t{"
            ],
            [
                111,
                "\t\t\ttry"
            ],
            [
                112,
                "\t\t\t{"
            ],
            [
                113,
                "\t\t\t\tusing (var p = new Process"
            ],
            [
                114,
                "\t\t\t\t{"
            ],
            [
                115,
                "\t\t\t\t\tStartInfo = new ProcessStartInfo"
            ],
            [
                116,
                "\t\t\t\t\t{"
            ],
            [
                117,
                "\t\t\t\t\t\tFileName = \"bash\","
            ],
            [
                118,
                "\t\t\t\t\t\tArguments = $\"-c \\\"{param}\\\"\","
            ],
            [
                119,
                "\t\t\t\t\t\tCreateNoWindow = true,"
            ],
            [
                120,
                "\t\t\t\t\t\tUseShellExecute = false,"
            ],
            [
                121,
                "\t\t\t\t\t\tRedirectStandardOutput = true,"
            ],
            [
                122,
                "\t\t\t\t\t}"
            ],
            [
                123,
                "\t\t\t\t})"
            ],
            [
                124,
                "\t\t\t\t{"
            ],
            [
                125,
                "\t\t\t\t\tp.Start();"
            ],
            [
                126,
                "\t\t\t\t\tp.WaitForExit(200);"
            ],
            [
                127,
                ""
            ],
            [
                128,
                "\t\t\t\t\taction.Invoke(p.StandardOutput);"
            ],
            [
                129,
                "\t\t\t\t}"
            ],
            [
                130,
                "\t\t\t}"
            ],
            [
                131,
                "\t\t\tcatch { }"
            ],
            [
                132,
                "\t\t}"
            ],
            [
                133,
                ""
            ],
            [
                192,
                "\t\t\tif (semMatch.Groups[2].Captures.Count <= 1"
            ],
            [
                193,
                "\t\t\t\t|| !int.TryParse(semMatch.Groups[2].Captures[1].Value, out var patch)) patch = 0;"
            ],
            [
                194,
                "\t\t\tif (semMatch.Groups[2].Captures.Count <= 2"
            ],
            [
                195,
                "\t\t\t\t|| int.TryParse(semMatch.Groups[2].Captures[2].Value, out var revision)) revision = 0;"
            ]
        ],
        "deleted": [
            [
                22,
                "\t\tprivate static readonly Regex SemVerRegex = new Regex(@\"(\\d+)(?:\\.(\\d+)){2,3}\", RegexOptions.IgnoreCase | RegexOptions.ECMAScript | RegexOptions.Multiline);"
            ],
            [
                48,
                "\t\t\tstring version = \"<?>\";"
            ],
            [
                55,
                "\t\t\t\ttry"
            ],
            [
                57,
                "\t\t\t\t\tvar p = new Process()"
            ],
            [
                59,
                "\t\t\t\t\t\tStartInfo = new ProcessStartInfo()"
            ],
            [
                60,
                "\t\t\t\t\t\t{"
            ],
            [
                61,
                "\t\t\t\t\t\t\tFileName = \"bash\","
            ],
            [
                62,
                "\t\t\t\t\t\t\tArguments = \"-c \\\"cat /etc/*[_-]release\\\"\","
            ],
            [
                63,
                "\t\t\t\t\t\t\tCreateNoWindow = true,"
            ],
            [
                64,
                "\t\t\t\t\t\t\tUseShellExecute = false,"
            ],
            [
                65,
                "\t\t\t\t\t\t\tRedirectStandardOutput = true,"
            ],
            [
                66,
                "\t\t\t\t\t\t}"
            ],
            [
                67,
                "\t\t\t\t\t};"
            ],
            [
                68,
                "\t\t\t\t\tp.Start();"
            ],
            [
                69,
                "\t\t\t\t\tp.WaitForExit(100);"
            ],
            [
                70,
                ""
            ],
            [
                71,
                "\t\t\t\t\twhile (p.StandardOutput.Peek() > -1)"
            ],
            [
                72,
                "\t\t\t\t\t{"
            ],
            [
                73,
                "\t\t\t\t\t\tvar infoLine = p.StandardOutput.ReadLine();"
            ],
            [
                74,
                "\t\t\t\t\t\tif (string.IsNullOrEmpty(infoLine))"
            ],
            [
                75,
                "\t\t\t\t\t\t\tcontinue;"
            ],
            [
                76,
                "\t\t\t\t\t\tvar match = PlattformRegex.Match(infoLine);"
            ],
            [
                82,
                "\t\t\t\t}"
            ],
            [
                83,
                "\t\t\t\tcatch { }"
            ],
            [
                84,
                ""
            ],
            [
                85,
                "\t\t\t\tstring value;"
            ],
            [
                86,
                "\t\t\t\tplattform = values.TryGetValue(\"NAME\", out value) ? value"
            ],
            [
                87,
                "\t\t\t\t\t\t: values.TryGetValue(\"ID\", out value) ? value"
            ],
            [
                88,
                "\t\t\t\t\t\t: values.TryGetValue(\"DISTRIB_ID\", out value) ? value"
            ],
            [
                89,
                "\t\t\t\t\t\t: values.TryGetValue(\"PRETTY_NAME\", out value) ? value"
            ],
            [
                90,
                "\t\t\t\t\t\t: \"Linux\";"
            ],
            [
                91,
                "\t\t\t\tversion = values.TryGetValue(\"VERSION\", out value) ? value"
            ],
            [
                92,
                "\t\t\t\t\t\t: values.TryGetValue(\"VERSION_ID\", out value) ? value"
            ],
            [
                93,
                "\t\t\t\t\t\t: values.TryGetValue(\"DISTRIB_RELEASE\", out value) ? value"
            ],
            [
                94,
                "\t\t\t\t\t\t: \"<?>\";"
            ],
            [
                163,
                "\t\t\tif (!int.TryParse(semMatch.Groups[2].Captures[1].Value, out var patch)) patch = 0;"
            ],
            [
                164,
                "\t\t\tif (!(semMatch.Groups[2].Captures.Count > 2"
            ],
            [
                165,
                "\t\t\t\t&& int.TryParse(semMatch.Groups[2].Captures[2].Value, out var revision))) revision = 0;"
            ]
        ]
    },
    "num_lines_added": 68,
    "num_lines_removed": 38
}