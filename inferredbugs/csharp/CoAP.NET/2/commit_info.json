{
    "hash": "3de4bbf7bc62885e680a4cc3e9d615596eac9fd8",
    "message": "Enabled blockwise transfers with NON. Fixed related matcher state.",
    "file_num_lines": 420,
    "diff_parsed": {
        "added": [
            [
                113,
                "                        Response error = Response.CreateResponse(request, StatusCode.RequestEntityIncomplete);"
            ],
            [
                116,
                ""
            ],
            [
                128,
                "                        Response piggybacked = Response.CreateResponse(request, StatusCode.Continue);"
            ],
            [
                129,
                "                        piggybacked.AddOption(new BlockOption(OptionType.Block1, block1.NUM, block1.SZX, true));"
            ],
            [
                130,
                "                        piggybacked.Last = false;"
            ],
            [
                131,
                ""
            ],
            [
                132,
                "                        exchange.CurrentResponse = piggybacked;"
            ],
            [
                133,
                "                        base.SendResponse(nextLayer, exchange, piggybacked);"
            ],
            [
                134,
                ""
            ],
            [
                149,
                "                        Request assembled = new Request(request.Method);"
            ],
            [
                151,
                ""
            ],
            [
                161,
                "                    Response error = Response.CreateResponse(request, StatusCode.RequestEntityIncomplete);"
            ],
            [
                223,
                ""
            ],
            [
                229,
                "                exchange.CurrentResponse = block;"
            ],
            [
                467,
                "            Response block;"
            ],
            [
                470,
                ""
            ],
            [
                471,
                "            if (response.HasOption(OptionType.Observe))"
            ],
            [
                472,
                "            {"
            ],
            [
                473,
                "                // a blockwise notification transmits the first block only"
            ],
            [
                474,
                "                block = response;"
            ],
            [
                475,
                "            }"
            ],
            [
                476,
                "            else"
            ],
            [
                477,
                "            {"
            ],
            [
                478,
                "                block = new Response(response.StatusCode);"
            ],
            [
                479,
                "                block.Destination = response.Destination;"
            ],
            [
                480,
                "                block.Token = response.Token;"
            ],
            [
                481,
                "                block.SetOptions(response.GetOptions());"
            ],
            [
                482,
                "                block.TimedOut += (o, e) => response.IsTimedOut = true;"
            ],
            [
                483,
                "            }"
            ],
            [
                493,
                "                Boolean m = to < response.PayloadSize;"
            ],
            [
                494,
                "                block.SetBlock2(szx, m, num);"
            ],
            [
                495,
                ""
            ],
            [
                496,
                "                // crop payload -- do after calculation of m in case block==response"
            ],
            [
                500,
                "                // do not complete notifications"
            ],
            [
                501,
                "                block.Last = !m && !response.HasOption(OptionType.Observe);"
            ]
        ],
        "deleted": [
            [
                113,
                "                        Response error = Response.CreatePiggybackedResponse(request, StatusCode.RequestEntityIncomplete);"
            ],
            [
                116,
                "                        request.IsAcknowledged = true;"
            ],
            [
                128,
                "                        if (request.Type == MessageType.CON)"
            ],
            [
                129,
                "                        {"
            ],
            [
                130,
                "                            Response piggybacked = Response.CreatePiggybackedResponse(request, StatusCode.Continue);"
            ],
            [
                131,
                "                            piggybacked.AddOption(new BlockOption(OptionType.Block1, block1.NUM, block1.SZX, true));"
            ],
            [
                132,
                "                            piggybacked.Last = false;"
            ],
            [
                133,
                "                            request.IsAcknowledged = true;"
            ],
            [
                134,
                "                            exchange.CurrentResponse = piggybacked;"
            ],
            [
                135,
                "                            base.SendResponse(nextLayer, exchange, piggybacked);"
            ],
            [
                136,
                "                        }"
            ],
            [
                151,
                "                        Request assembled = new Request(request.Method); // getAssembledRequest(status, request);"
            ],
            [
                153,
                "                        // assembled.setAcknowledged(true); // TODO: prevents accept from sending ACK. Maybe the resource uses separate..."
            ],
            [
                163,
                "                    Response error = Response.CreatePiggybackedResponse(request, StatusCode.RequestEntityIncomplete);"
            ],
            [
                166,
                "                    request.IsAcknowledged = true;"
            ],
            [
                220,
                "                // This must be a large response to a GET or POST request (PUT?)"
            ],
            [
                227,
                "                block.Type = response.Type; // This is only true for the first block"
            ],
            [
                233,
                "                if (response.HasOption(OptionType.Observe))"
            ],
            [
                234,
                "                {"
            ],
            [
                235,
                "                    // the ACK for the first block should acknowledge the whole notification"
            ],
            [
                236,
                "                    exchange.CurrentResponse = response;"
            ],
            [
                237,
                "                }"
            ],
            [
                238,
                "                else"
            ],
            [
                239,
                "                {"
            ],
            [
                240,
                "                    exchange.CurrentResponse = block;"
            ],
            [
                241,
                "                }"
            ],
            [
                243,
                ""
            ],
            [
                482,
                "            Response block = new Response(response.StatusCode);"
            ],
            [
                483,
                "            // block.setType(response.getType()); // NO! First block has type from origin response, all other depend on current request"
            ],
            [
                484,
                "            block.Destination = response.Destination;"
            ],
            [
                485,
                "            block.Token = response.Token;"
            ],
            [
                486,
                "            block.SetOptions(response.GetOptions());"
            ],
            [
                487,
                "            block.TimedOut += (o, e) => response.IsTimedOut = true;"
            ],
            [
                500,
                "                Boolean m = to < response.PayloadSize;"
            ],
            [
                501,
                "                block.AddOption(new BlockOption(OptionType.Block2, num, szx, m));"
            ],
            [
                502,
                "                block.Last = !m;"
            ]
        ]
    },
    "num_lines_added": 35,
    "num_lines_removed": 36
}