{
    "hash": "e7201e8f31085d0820af8e2bf2ddca00c8f33ee7",
    "message": "Refactor Test ExecuteGetAllRelationshipsGremlinTests to use new http Mock framework",
    "file_num_lines": 118,
    "diff_parsed": {
        "added": [
            [
                25,
                "            var query = new GremlinApiQuery(gremlinQueryExpected, null);"
            ],
            [
                27,
                "            using (var testHarness = new RestTestHarness"
            ],
            [
                30,
                "                        MockRequest.PostObjectAsJson(\"/ext/GremlinPlugin/graphdb/execute_script\", query),"
            ],
            [
                31,
                "                        MockResponse.Json(HttpStatusCode.OK, @\"[ {"
            ],
            [
                42,
                "                        } ]\")"
            ],
            [
                44,
                "                })"
            ],
            [
                45,
                "                {"
            ],
            [
                46,
                "                    var graphClient = (GraphClient)testHarness.CreateAndConnectGraphClient();"
            ],
            [
                48,
                "                    //Act"
            ],
            [
                49,
                "                    var relationships = graphClient"
            ],
            [
                50,
                "                        .ExecuteGetAllRelationshipsGremlin(gremlinQueryExpected, null)"
            ],
            [
                51,
                "                        .ToList();"
            ],
            [
                53,
                "                    //Assert"
            ],
            [
                54,
                "                    Assert.AreEqual(1, relationships.Count());"
            ],
            [
                55,
                "                    Assert.AreEqual(456, relationships.ElementAt(0).Reference.Id);"
            ],
            [
                56,
                "                    Assert.AreEqual(123, relationships.ElementAt(0).StartNodeReference.Id);"
            ],
            [
                57,
                "                    Assert.AreEqual(789, relationships.ElementAt(0).EndNodeReference.Id);"
            ],
            [
                58,
                "                    Assert.AreEqual(\"KNOWS\", relationships.ElementAt(0).TypeKey);"
            ],
            [
                59,
                "                }"
            ],
            [
                60,
                "    }"
            ],
            [
                67,
                "            var query = new GremlinApiQuery(gremlinQueryExpected, null);"
            ],
            [
                69,
                "            using (var testHarness = new RestTestHarness"
            ],
            [
                72,
                "                        MockRequest.PostObjectAsJson(\"/ext/GremlinPlugin/graphdb/execute_script\", query),"
            ],
            [
                73,
                "                        MockResponse.Json(HttpStatusCode.OK, @\"[ {"
            ],
            [
                86,
                "                        } ]\")"
            ],
            [
                88,
                "                })"
            ],
            [
                89,
                "            {"
            ],
            [
                90,
                "                var graphClient = (GraphClient)testHarness.CreateAndConnectGraphClient();"
            ],
            [
                92,
                "                //Act"
            ],
            [
                93,
                "                var relationships = graphClient"
            ],
            [
                94,
                "                    .ExecuteGetAllRelationshipsGremlin<TestPayload>(gremlinQueryExpected, null)"
            ],
            [
                95,
                "                    .ToList();"
            ],
            [
                97,
                "                //Assert"
            ],
            [
                98,
                "                Assert.AreEqual(1, relationships.Count());"
            ],
            [
                99,
                "                Assert.AreEqual(456, relationships.ElementAt(0).Reference.Id);"
            ],
            [
                100,
                "                Assert.AreEqual(123, relationships.ElementAt(0).StartNodeReference.Id);"
            ],
            [
                101,
                "                Assert.AreEqual(789, relationships.ElementAt(0).EndNodeReference.Id);"
            ],
            [
                102,
                "                Assert.AreEqual(\"KNOWS\", relationships.ElementAt(0).TypeKey);"
            ],
            [
                103,
                "                Assert.AreEqual(\"Foo\", relationships.ElementAt(0).Data.Foo);"
            ],
            [
                104,
                "                Assert.AreEqual(\"Bar\", relationships.ElementAt(0).Data.Bar);"
            ],
            [
                105,
                "            }"
            ],
            [
                119,
                "            var query = new GremlinApiQuery(gremlinQueryExpected, null);"
            ],
            [
                121,
                ""
            ],
            [
                122,
                "            using (var testHarness = new RestTestHarness"
            ],
            [
                125,
                "                        MockRequest.PostObjectAsJson(\"/ext/GremlinPlugin/graphdb/execute_script\", query),"
            ],
            [
                126,
                "                        MockResponse.Json(HttpStatusCode.OK, @\"[]\")"
            ],
            [
                128,
                "                })"
            ],
            [
                129,
                "            {"
            ],
            [
                130,
                "                var graphClient = (GraphClient)testHarness.CreateAndConnectGraphClient();"
            ],
            [
                132,
                "                //Act"
            ],
            [
                133,
                "                var nodes = graphClient"
            ],
            [
                134,
                "                    .ExecuteGetAllRelationshipsGremlin(gremlinQueryExpected, null)"
            ],
            [
                135,
                "                    .ToList();"
            ],
            [
                137,
                "                //Assert"
            ],
            [
                138,
                "                Assert.AreEqual(0, nodes.Count());"
            ],
            [
                139,
                "            }"
            ]
        ],
        "deleted": [
            [
                2,
                "using System.Collections.Generic;"
            ],
            [
                6,
                "using Neo4jClient.ApiModels;"
            ],
            [
                8,
                "using RestSharp;"
            ],
            [
                29,
                "            var httpFactory = MockHttpFactory.Generate(\"http://foo/db/data\", new Dictionary<IRestRequest, IHttpResponse>"
            ],
            [
                30,
                "            {"
            ],
            [
                32,
                "                    new RestRequest { Resource = \"\", Method = Method.GET },"
            ],
            [
                33,
                "                    new NeoHttpResponse"
            ],
            [
                35,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                36,
                "                        ContentType = \"application/json\","
            ],
            [
                37,
                "                        TestContent = @\"{"
            ],
            [
                38,
                "                          'batch' : 'http://foo/db/data/batch',"
            ],
            [
                39,
                "                          'node' : 'http://foo/db/data/node',"
            ],
            [
                40,
                "                          'node_index' : 'http://foo/db/data/index/node',"
            ],
            [
                41,
                "                          'relationship_index' : 'http://foo/db/data/index/relationship',"
            ],
            [
                42,
                "                          'reference_node' : 'http://foo/db/data/node/0',"
            ],
            [
                43,
                "                          'extensions_info' : 'http://foo/db/data/ext',"
            ],
            [
                44,
                "                          'extensions' : {"
            ],
            [
                45,
                "                            'GremlinPlugin' : {"
            ],
            [
                46,
                "                              'execute_script' : 'http://foo/db/data/ext/GremlinPlugin/graphdb/execute_script'"
            ],
            [
                47,
                "                            }"
            ],
            [
                48,
                "                          }"
            ],
            [
                49,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                50,
                "                    }"
            ],
            [
                51,
                "                },"
            ],
            [
                52,
                "                {"
            ],
            [
                53,
                "                    new RestRequest {"
            ],
            [
                54,
                "                        Resource = \"/ext/GremlinPlugin/graphdb/execute_script\","
            ],
            [
                55,
                "                        Method = Method.POST,"
            ],
            [
                56,
                "                        RequestFormat = DataFormat.Json"
            ],
            [
                57,
                "                    }.AddBody(new GremlinApiQuery(gremlinQueryExpected, null)),"
            ],
            [
                58,
                "                    new NeoHttpResponse {"
            ],
            [
                59,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                60,
                "                        ContentType = \"application/json\","
            ],
            [
                61,
                "                        TestContent =@\"[ {"
            ],
            [
                72,
                "                        } ]\""
            ],
            [
                74,
                "                }"
            ],
            [
                75,
                "            });"
            ],
            [
                76,
                "            var graphClient = new GraphClient(new Uri(\"http://foo/db/data\"), httpFactory);"
            ],
            [
                77,
                "            graphClient.Connect();"
            ],
            [
                79,
                "            //Act"
            ],
            [
                80,
                "            var relationships = graphClient"
            ],
            [
                81,
                "                .ExecuteGetAllRelationshipsGremlin(gremlinQueryExpected, null)"
            ],
            [
                82,
                "                .ToList();"
            ],
            [
                84,
                "            //Assert"
            ],
            [
                85,
                "            Assert.AreEqual(1, relationships.Count());"
            ],
            [
                86,
                "            Assert.AreEqual(456, relationships.ElementAt(0).Reference.Id);"
            ],
            [
                87,
                "            Assert.AreEqual(123, relationships.ElementAt(0).StartNodeReference.Id);"
            ],
            [
                88,
                "            Assert.AreEqual(789, relationships.ElementAt(0).EndNodeReference.Id);"
            ],
            [
                89,
                "            Assert.AreEqual(\"KNOWS\", relationships.ElementAt(0).TypeKey);"
            ],
            [
                90,
                "        }"
            ],
            [
                98,
                "            var httpFactory = MockHttpFactory.Generate(\"http://foo/db/data\", new Dictionary<IRestRequest, IHttpResponse>"
            ],
            [
                99,
                "            {"
            ],
            [
                101,
                "                    new RestRequest { Resource = \"\", Method = Method.GET },"
            ],
            [
                102,
                "                    new NeoHttpResponse"
            ],
            [
                104,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                105,
                "                        ContentType = \"application/json\","
            ],
            [
                106,
                "                        TestContent = @\"{"
            ],
            [
                107,
                "                          'batch' : 'http://foo/db/data/batch',"
            ],
            [
                108,
                "                          'node' : 'http://foo/db/data/node',"
            ],
            [
                109,
                "                          'node_index' : 'http://foo/db/data/index/node',"
            ],
            [
                110,
                "                          'relationship_index' : 'http://foo/db/data/index/relationship',"
            ],
            [
                111,
                "                          'reference_node' : 'http://foo/db/data/node/0',"
            ],
            [
                112,
                "                          'extensions_info' : 'http://foo/db/data/ext',"
            ],
            [
                113,
                "                          'extensions' : {"
            ],
            [
                114,
                "                            'GremlinPlugin' : {"
            ],
            [
                115,
                "                              'execute_script' : 'http://foo/db/data/ext/GremlinPlugin/graphdb/execute_script'"
            ],
            [
                116,
                "                            }"
            ],
            [
                117,
                "                          }"
            ],
            [
                118,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                119,
                "                    }"
            ],
            [
                120,
                "                },"
            ],
            [
                121,
                "                {"
            ],
            [
                122,
                "                    new RestRequest {"
            ],
            [
                123,
                "                        Resource = \"/ext/GremlinPlugin/graphdb/execute_script\","
            ],
            [
                124,
                "                        Method = Method.POST,"
            ],
            [
                125,
                "                        RequestFormat = DataFormat.Json"
            ],
            [
                126,
                "                    }.AddBody(new GremlinApiQuery(gremlinQueryExpected, null)),"
            ],
            [
                127,
                "                    new NeoHttpResponse {"
            ],
            [
                128,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                129,
                "                        ContentType = \"application/json\","
            ],
            [
                130,
                "                        TestContent =@\"[ {"
            ],
            [
                143,
                "                        } ]\""
            ],
            [
                145,
                "                }"
            ],
            [
                146,
                "            });"
            ],
            [
                147,
                "            var graphClient = new GraphClient(new Uri(\"http://foo/db/data\"), httpFactory);"
            ],
            [
                148,
                "            graphClient.Connect();"
            ],
            [
                150,
                "            //Act"
            ],
            [
                151,
                "            var relationships = graphClient"
            ],
            [
                152,
                "                .ExecuteGetAllRelationshipsGremlin<TestPayload>(gremlinQueryExpected, null)"
            ],
            [
                153,
                "                .ToList();"
            ],
            [
                155,
                "            //Assert"
            ],
            [
                156,
                "            Assert.AreEqual(1, relationships.Count());"
            ],
            [
                157,
                "            Assert.AreEqual(456, relationships.ElementAt(0).Reference.Id);"
            ],
            [
                158,
                "            Assert.AreEqual(123, relationships.ElementAt(0).StartNodeReference.Id);"
            ],
            [
                159,
                "            Assert.AreEqual(789, relationships.ElementAt(0).EndNodeReference.Id);"
            ],
            [
                160,
                "            Assert.AreEqual(\"KNOWS\", relationships.ElementAt(0).TypeKey);"
            ],
            [
                161,
                "            Assert.AreEqual(\"Foo\", relationships.ElementAt(0).Data.Foo);"
            ],
            [
                162,
                "            Assert.AreEqual(\"Bar\", relationships.ElementAt(0).Data.Bar);"
            ],
            [
                177,
                "            var httpFactory = MockHttpFactory.Generate(\"http://foo/db/data\", new Dictionary<IRestRequest, IHttpResponse>"
            ],
            [
                178,
                "            {"
            ],
            [
                180,
                "                    new RestRequest { Resource = \"\", Method = Method.GET },"
            ],
            [
                181,
                "                    new NeoHttpResponse"
            ],
            [
                183,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                184,
                "                        ContentType = \"application/json\","
            ],
            [
                185,
                "                        TestContent = @\"{"
            ],
            [
                186,
                "                          'batch' : 'http://foo/db/data/batch',"
            ],
            [
                187,
                "                          'node' : 'http://foo/db/data/node',"
            ],
            [
                188,
                "                          'node_index' : 'http://foo/db/data/index/node',"
            ],
            [
                189,
                "                          'relationship_index' : 'http://foo/db/data/index/relationship',"
            ],
            [
                190,
                "                          'reference_node' : 'http://foo/db/data/node/0',"
            ],
            [
                191,
                "                          'extensions_info' : 'http://foo/db/data/ext',"
            ],
            [
                192,
                "                          'extensions' : {"
            ],
            [
                193,
                "                            'GremlinPlugin' : {"
            ],
            [
                194,
                "                              'execute_script' : 'http://foo/db/data/ext/GremlinPlugin/graphdb/execute_script'"
            ],
            [
                195,
                "                            }"
            ],
            [
                196,
                "                          }"
            ],
            [
                197,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                198,
                "                    }"
            ],
            [
                199,
                "                },"
            ],
            [
                200,
                "                {"
            ],
            [
                201,
                "                    new RestRequest {"
            ],
            [
                202,
                "                        Resource = \"/ext/GremlinPlugin/graphdb/execute_script\","
            ],
            [
                203,
                "                        Method = Method.POST,"
            ],
            [
                204,
                "                        RequestFormat = DataFormat.Json"
            ],
            [
                205,
                "                    }.AddBody(new GremlinApiQuery(gremlinQueryExpected, null)),"
            ],
            [
                206,
                "                    new NeoHttpResponse {"
            ],
            [
                207,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                208,
                "                        ContentType = \"application/json\","
            ],
            [
                209,
                "                        TestContent =@\"[]\""
            ],
            [
                211,
                "                }"
            ],
            [
                212,
                "            });"
            ],
            [
                213,
                "            var graphClient = new GraphClient(new Uri(\"http://foo/db/data\"), httpFactory);"
            ],
            [
                214,
                "            graphClient.Connect();"
            ],
            [
                216,
                "            //Act"
            ],
            [
                217,
                "            var nodes = graphClient"
            ],
            [
                218,
                "                .ExecuteGetAllRelationshipsGremlin(gremlinQueryExpected, null)"
            ],
            [
                219,
                "                .ToList();"
            ],
            [
                221,
                "            //Assert"
            ],
            [
                222,
                "            Assert.AreEqual(0, nodes.Count());"
            ]
        ]
    },
    "num_lines_added": 56,
    "num_lines_removed": 139
}