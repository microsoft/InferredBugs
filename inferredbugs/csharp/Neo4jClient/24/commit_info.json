{
    "hash": "3c16a4fa8b4a046c68ebb85c9c29e382ccde12df",
    "message": "Refactor more tests",
    "file_num_lines": 181,
    "diff_parsed": {
        "added": [
            [
                22,
                "            using (var testHarness = new RestTestHarness"
            ],
            [
                25,
                "                    MockRequest.Get(\"/node/456\"),"
            ],
            [
                26,
                "                    MockResponse.Json(HttpStatusCode.OK,"
            ],
            [
                27,
                "                        @\"{ 'self': 'http://foo/db/data/node/456',"
            ],
            [
                42,
                "                        }\")"
            ],
            [
                44,
                "            })"
            ],
            [
                45,
                "            {"
            ],
            [
                46,
                "                var graphClient = testHarness.CreateAndConnectGraphClient();"
            ],
            [
                47,
                "                var node = graphClient.Get<TestNode>(456);"
            ],
            [
                48,
                ""
            ],
            [
                49,
                "                Assert.AreEqual(456, node.Reference.Id);"
            ],
            [
                50,
                "                Assert.AreEqual(\"foo\", node.Data.Foo);"
            ],
            [
                51,
                "                Assert.AreEqual(\"bar\", node.Data.Bar);"
            ],
            [
                52,
                "                Assert.AreEqual(\"baz\", node.Data.Baz);"
            ],
            [
                53,
                "            }"
            ],
            [
                59,
                "            using (var testHarness = new RestTestHarness"
            ],
            [
                62,
                "                    MockRequest.Get(\"/node/456\"),"
            ],
            [
                63,
                "                    MockResponse.Json(HttpStatusCode.OK,"
            ],
            [
                64,
                "                        @\"{ 'self': 'http://foo/db/data/node/456',"
            ],
            [
                78,
                "                        }\")"
            ],
            [
                80,
                "            })"
            ],
            [
                81,
                "            {"
            ],
            [
                82,
                "                var graphClient = testHarness.CreateAndConnectGraphClient();"
            ],
            [
                83,
                "                var node = graphClient.Get<TestNodeWithEnum>(456);"
            ],
            [
                85,
                "                Assert.AreEqual(456, node.Reference.Id);"
            ],
            [
                86,
                "                Assert.AreEqual(\"foo\", node.Data.Foo);"
            ],
            [
                87,
                "                Assert.AreEqual(TestEnum.Value1, node.Data.Status);"
            ],
            [
                88,
                "            }"
            ],
            [
                94,
                "            using (var testHarness = new RestTestHarness"
            ],
            [
                97,
                "                    MockRequest.Get(\"/node/456\"),"
            ],
            [
                98,
                "                    MockResponse.Json(HttpStatusCode.OK,"
            ],
            [
                99,
                "                        @\"{ 'self': 'http://foo/db/data/node/456',"
            ],
            [
                114,
                "                        }\")"
            ],
            [
                116,
                "            })"
            ],
            [
                117,
                "            {"
            ],
            [
                118,
                "                var graphClient = testHarness.CreateAndConnectGraphClient();"
            ],
            [
                119,
                "                var node = graphClient.Get<TestNode>(456);"
            ],
            [
                121,
                "                Assert.AreEqual(graphClient, ((IGremlinQuery) node.Reference).Client);"
            ],
            [
                122,
                "            }"
            ],
            [
                128,
                "            using (var testHarness = new RestTestHarness"
            ],
            [
                131,
                "                    MockRequest.Get(\"/node/456\"),"
            ],
            [
                132,
                "                    MockResponse.Http(404)"
            ],
            [
                134,
                "            })"
            ],
            [
                135,
                "            {"
            ],
            [
                136,
                "                var graphClient = testHarness.CreateAndConnectGraphClient();"
            ],
            [
                137,
                "                var node = graphClient.Get<TestNode>(456);"
            ],
            [
                139,
                "                Assert.IsNull(node);"
            ],
            [
                140,
                "            }"
            ],
            [
                146,
                "            using (var testHarness = new RestTestHarness"
            ],
            [
                149,
                "                    MockRequest.Get(\"/node/456\"),"
            ],
            [
                150,
                "                    MockResponse.Json(HttpStatusCode.OK,"
            ],
            [
                151,
                "                        @\"{ 'self': 'http://foo/db/data/node/456',"
            ],
            [
                152,
                "                          'data': { 'DateOffSet': '/Date(1309421746929+0000)/' },"
            ],
            [
                163,
                "                        }\")"
            ],
            [
                165,
                "            })"
            ],
            [
                166,
                "            {"
            ],
            [
                167,
                "                var graphClient = testHarness.CreateAndConnectGraphClient();"
            ],
            [
                168,
                "                var node = graphClient.Get<TestNode>(456);"
            ],
            [
                170,
                "                Assert.IsNotNull(node.Data.DateOffSet);"
            ],
            [
                171,
                "                Assert.AreEqual(\"2011-06-30 08:15:46Z\", node.Data.DateOffSet.Value.ToString(\"u\"));"
            ],
            [
                172,
                "            }"
            ]
        ],
        "deleted": [
            [
                2,
                "using System.Collections.Generic;"
            ],
            [
                6,
                "using RestSharp;"
            ],
            [
                24,
                "            var httpFactory = MockHttpFactory.Generate(\"http://foo/db/data\", new Dictionary<IRestRequest, IHttpResponse>"
            ],
            [
                27,
                "                    new RestRequest { Resource = \"\", Method = Method.GET },"
            ],
            [
                28,
                "                    new NeoHttpResponse"
            ],
            [
                29,
                "                    {"
            ],
            [
                30,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                31,
                "                        ContentType = \"application/json\","
            ],
            [
                32,
                "                        TestContent = @\"{"
            ],
            [
                33,
                "                          'batch' : 'http://foo/db/data/batch',"
            ],
            [
                34,
                "                          'node' : 'http://foo/db/data/node',"
            ],
            [
                35,
                "                          'node_index' : 'http://foo/db/data/index/node',"
            ],
            [
                36,
                "                          'relationship_index' : 'http://foo/db/data/index/relationship',"
            ],
            [
                37,
                "                          'reference_node' : 'http://foo/db/data/node/0',"
            ],
            [
                38,
                "                          'extensions_info' : 'http://foo/db/data/ext',"
            ],
            [
                39,
                "                          'extensions' : {"
            ],
            [
                40,
                "                          }"
            ],
            [
                41,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                42,
                "                    }"
            ],
            [
                43,
                "                },"
            ],
            [
                44,
                "                {"
            ],
            [
                45,
                "                    new RestRequest { Resource = \"/node/456\", Method = Method.GET },"
            ],
            [
                46,
                "                    new NeoHttpResponse {"
            ],
            [
                47,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                48,
                "                        ContentType = \"application/json\","
            ],
            [
                49,
                "                        TestContent = @\"{ 'self': 'http://foo/db/data/node/456',"
            ],
            [
                64,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                65,
                "                    }"
            ],
            [
                67,
                "            });"
            ],
            [
                68,
                ""
            ],
            [
                69,
                "            var graphClient = new GraphClient(new Uri(\"http://foo/db/data\"), httpFactory);"
            ],
            [
                70,
                "            graphClient.Connect();"
            ],
            [
                71,
                "            var node = graphClient.Get<TestNode>(456);"
            ],
            [
                72,
                ""
            ],
            [
                73,
                "            Assert.AreEqual(456, node.Reference.Id);"
            ],
            [
                74,
                "            Assert.AreEqual(\"foo\", node.Data.Foo);"
            ],
            [
                75,
                "            Assert.AreEqual(\"bar\", node.Data.Bar);"
            ],
            [
                76,
                "            Assert.AreEqual(\"baz\", node.Data.Baz);"
            ],
            [
                82,
                "            var httpFactory = MockHttpFactory.Generate(\"http://foo/db/data\", new Dictionary<IRestRequest, IHttpResponse>"
            ],
            [
                85,
                "                    new RestRequest { Resource = \"\", Method = Method.GET },"
            ],
            [
                86,
                "                    new NeoHttpResponse"
            ],
            [
                87,
                "                    {"
            ],
            [
                88,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                89,
                "                        ContentType = \"application/json\","
            ],
            [
                90,
                "                        TestContent = @\"{"
            ],
            [
                91,
                "                          'batch' : 'http://foo/db/data/batch',"
            ],
            [
                92,
                "                          'node' : 'http://foo/db/data/node',"
            ],
            [
                93,
                "                          'node_index' : 'http://foo/db/data/index/node',"
            ],
            [
                94,
                "                          'relationship_index' : 'http://foo/db/data/index/relationship',"
            ],
            [
                95,
                "                          'reference_node' : 'http://foo/db/data/node/0',"
            ],
            [
                96,
                "                          'extensions_info' : 'http://foo/db/data/ext',"
            ],
            [
                97,
                "                          'extensions' : {"
            ],
            [
                98,
                "                          }"
            ],
            [
                99,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                100,
                "                    }"
            ],
            [
                101,
                "                },"
            ],
            [
                102,
                "                {"
            ],
            [
                103,
                "                    new RestRequest { Resource = \"/node/456\", Method = Method.GET },"
            ],
            [
                104,
                "                    new NeoHttpResponse {"
            ],
            [
                105,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                106,
                "                        ContentType = \"application/json\","
            ],
            [
                107,
                "                        TestContent = @\"{ 'self': 'http://foo/db/data/node/456',"
            ],
            [
                121,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                122,
                "                    }"
            ],
            [
                124,
                "            });"
            ],
            [
                125,
                ""
            ],
            [
                126,
                "            var graphClient = new GraphClient(new Uri(\"http://foo/db/data\"), httpFactory);"
            ],
            [
                127,
                "            graphClient.Connect();"
            ],
            [
                128,
                "            var node = graphClient.Get<TestNodeWithEnum>(456);"
            ],
            [
                130,
                "            Assert.AreEqual(TestEnum.Value1, node.Data.Status);"
            ],
            [
                136,
                "            var httpFactory = MockHttpFactory.Generate(\"http://foo/db/data\", new Dictionary<IRestRequest, IHttpResponse>"
            ],
            [
                139,
                "                    new RestRequest { Resource = \"\", Method = Method.GET },"
            ],
            [
                140,
                "                    new NeoHttpResponse"
            ],
            [
                141,
                "                    {"
            ],
            [
                142,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                143,
                "                        ContentType = \"application/json\","
            ],
            [
                144,
                "                        TestContent = @\"{"
            ],
            [
                145,
                "                          'batch' : 'http://foo/db/data/batch',"
            ],
            [
                146,
                "                          'node' : 'http://foo/db/data/node',"
            ],
            [
                147,
                "                          'node_index' : 'http://foo/db/data/index/node',"
            ],
            [
                148,
                "                          'relationship_index' : 'http://foo/db/data/index/relationship',"
            ],
            [
                149,
                "                          'reference_node' : 'http://foo/db/data/node/0',"
            ],
            [
                150,
                "                          'extensions_info' : 'http://foo/db/data/ext',"
            ],
            [
                151,
                "                          'extensions' : {"
            ],
            [
                152,
                "                          }"
            ],
            [
                153,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                154,
                "                    }"
            ],
            [
                155,
                "                },"
            ],
            [
                156,
                "                {"
            ],
            [
                157,
                "                    new RestRequest { Resource = \"/node/456\", Method = Method.GET },"
            ],
            [
                158,
                "                    new NeoHttpResponse {"
            ],
            [
                159,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                160,
                "                        ContentType = \"application/json\","
            ],
            [
                161,
                "                        TestContent = @\"{ 'self': 'http://foo/db/data/node/456',"
            ],
            [
                176,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                177,
                "                    }"
            ],
            [
                179,
                "            });"
            ],
            [
                180,
                ""
            ],
            [
                181,
                "            var graphClient = new GraphClient(new Uri(\"http://foo/db/data\"), httpFactory);"
            ],
            [
                182,
                "            graphClient.Connect();"
            ],
            [
                183,
                "            var node = graphClient.Get<TestNode>(456);"
            ],
            [
                185,
                "            Assert.AreEqual(graphClient, ((IGremlinQuery) node.Reference).Client);"
            ],
            [
                191,
                "            var httpFactory = MockHttpFactory.Generate(\"http://foo/db/data\", new Dictionary<IRestRequest, IHttpResponse>"
            ],
            [
                194,
                "                    new RestRequest { Resource = \"\", Method = Method.GET },"
            ],
            [
                195,
                "                    new NeoHttpResponse"
            ],
            [
                196,
                "                    {"
            ],
            [
                197,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                198,
                "                        ContentType = \"application/json\","
            ],
            [
                199,
                "                        TestContent = @\"{"
            ],
            [
                200,
                "                          'batch' : 'http://foo/db/data/batch',"
            ],
            [
                201,
                "                          'node' : 'http://foo/db/data/node',"
            ],
            [
                202,
                "                          'node_index' : 'http://foo/db/data/index/node',"
            ],
            [
                203,
                "                          'relationship_index' : 'http://foo/db/data/index/relationship',"
            ],
            [
                204,
                "                          'reference_node' : 'http://foo/db/data/node/0',"
            ],
            [
                205,
                "                          'extensions_info' : 'http://foo/db/data/ext',"
            ],
            [
                206,
                "                          'extensions' : {"
            ],
            [
                207,
                "                          }"
            ],
            [
                208,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                209,
                "                    }"
            ],
            [
                210,
                "                },"
            ],
            [
                211,
                "                {"
            ],
            [
                212,
                "                    new RestRequest { Resource = \"/node/456\", Method = Method.GET },"
            ],
            [
                213,
                "                    new NeoHttpResponse {"
            ],
            [
                214,
                "                        StatusCode = HttpStatusCode.NotFound,"
            ],
            [
                215,
                "                        StatusDescription = \"Node not found\""
            ],
            [
                216,
                "                    }"
            ],
            [
                218,
                "            });"
            ],
            [
                219,
                ""
            ],
            [
                220,
                "            var graphClient = new GraphClient(new Uri(\"http://foo/db/data\"), httpFactory);"
            ],
            [
                221,
                "            graphClient.Connect();"
            ],
            [
                222,
                "            var node = graphClient.Get<TestNode>(456);"
            ],
            [
                224,
                "            Assert.IsNull(node);"
            ],
            [
                230,
                "            var httpFactory = MockHttpFactory.Generate(\"http://foo/db/data\", new Dictionary<IRestRequest, IHttpResponse>"
            ],
            [
                233,
                "                    new RestRequest { Resource = \"\", Method = Method.GET },"
            ],
            [
                234,
                "                    new NeoHttpResponse"
            ],
            [
                235,
                "                    {"
            ],
            [
                236,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                237,
                "                        ContentType = \"application/json\","
            ],
            [
                238,
                "                        TestContent = @\"{"
            ],
            [
                239,
                "                          'batch' : 'http://foo/db/data/batch',"
            ],
            [
                240,
                "                          'node' : 'http://foo/db/data/node',"
            ],
            [
                241,
                "                          'node_index' : 'http://foo/db/data/index/node',"
            ],
            [
                242,
                "                          'relationship_index' : 'http://foo/db/data/index/relationship',"
            ],
            [
                243,
                "                          'reference_node' : 'http://foo/db/data/node/0',"
            ],
            [
                244,
                "                          'extensions_info' : 'http://foo/db/data/ext',"
            ],
            [
                245,
                "                          'extensions' : {"
            ],
            [
                246,
                "                          }"
            ],
            [
                247,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                248,
                "                    }"
            ],
            [
                249,
                "                },"
            ],
            [
                250,
                "                {"
            ],
            [
                251,
                "                    new RestRequest { Resource = \"/node/456\", Method = Method.GET},"
            ],
            [
                252,
                "                    new NeoHttpResponse {"
            ],
            [
                253,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                254,
                "                        ContentType = \"application/json\","
            ],
            [
                255,
                "                        TestContent = @\"{ 'self': 'http://foo/db/data/node/456',"
            ],
            [
                256,
                "                          'data': { 'Foo': 'foo',"
            ],
            [
                257,
                "                                    'Bar': 'bar',"
            ],
            [
                258,
                "                                    'Baz': 'baz',"
            ],
            [
                259,
                "                                    'DateOffSet': '/Date(1309421746929+0000)/'"
            ],
            [
                260,
                "                          },"
            ],
            [
                271,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                272,
                "                    }"
            ],
            [
                274,
                "            });"
            ],
            [
                275,
                ""
            ],
            [
                276,
                "            var graphClient = new GraphClient(new Uri(\"http://foo/db/data\"), httpFactory);"
            ],
            [
                277,
                "            graphClient.Connect();"
            ],
            [
                278,
                "            var node = graphClient.Get<TestNode>(456);"
            ],
            [
                280,
                "            Assert.IsNotNull(node.Data.DateOffSet);"
            ],
            [
                281,
                "            Assert.AreEqual(\"2011-06-30 08:15:46Z\", node.Data.DateOffSet.Value.ToString(\"u\"));"
            ]
        ]
    },
    "num_lines_added": 61,
    "num_lines_removed": 170
}