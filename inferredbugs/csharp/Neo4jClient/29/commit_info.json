{
    "hash": "7412fe8fee0e47eb04dc0ec73c09362831032bd3",
    "message": "Refactor more tests",
    "file_num_lines": 118,
    "diff_parsed": {
        "added": [
            [
                29,
                "            using (var testHarness = new RestTestHarness"
            ],
            [
                32,
                "                    MockRequest.PostJson("
            ],
            [
                33,
                "                        \"/ext/GremlinPlugin/graphdb/execute_script\","
            ],
            [
                34,
                "                        @\"{"
            ],
            [
                35,
                "                            'script': 'foo bar query',"
            ],
            [
                36,
                "                            'params': { 'foo': 123, 'bar': 'baz' }"
            ],
            [
                37,
                "                        }\""
            ],
            [
                38,
                "                    ),"
            ],
            [
                39,
                "                    MockResponse.Json(HttpStatusCode.OK,"
            ],
            [
                40,
                "                        @\"[ {"
            ],
            [
                77,
                "                    )"
            ],
            [
                79,
                "            })"
            ],
            [
                80,
                "            {"
            ],
            [
                81,
                "                var graphClient = (GraphClient)testHarness.CreateAndConnectGraphClient();"
            ],
            [
                83,
                "                //Act"
            ],
            [
                84,
                "                var parameters = new Dictionary<string, object>"
            ],
            [
                85,
                "                {"
            ],
            [
                86,
                "                    {\"foo\", 123},"
            ],
            [
                87,
                "                    {\"bar\", \"baz\"}"
            ],
            [
                88,
                "                };"
            ],
            [
                89,
                "                var nodes = graphClient"
            ],
            [
                90,
                "                    .ExecuteGetAllNodesGremlin<Foo>(\"foo bar query\", parameters)"
            ],
            [
                91,
                "                    .ToList();"
            ],
            [
                93,
                "                //Assert"
            ],
            [
                94,
                "                Assert.AreEqual(2, nodes.Count());"
            ],
            [
                95,
                "                Assert.AreEqual(5, nodes.ElementAt(0).Reference.Id);"
            ],
            [
                96,
                "                Assert.AreEqual(\"bar\", nodes.ElementAt(0).Data.Bar);"
            ],
            [
                97,
                "                Assert.AreEqual(\"baz\", nodes.ElementAt(0).Data.Baz);"
            ],
            [
                98,
                "                Assert.AreEqual(6, nodes.ElementAt(1).Reference.Id);"
            ],
            [
                99,
                "                Assert.AreEqual(\"123\", nodes.ElementAt(1).Data.Bar);"
            ],
            [
                100,
                "                Assert.AreEqual(\"456\", nodes.ElementAt(1).Data.Baz);"
            ],
            [
                101,
                "            }"
            ],
            [
                107,
                "            using (var testHarness = new RestTestHarness"
            ],
            [
                110,
                "                    MockRequest.PostJson("
            ],
            [
                111,
                "                        \"/ext/GremlinPlugin/graphdb/execute_script\","
            ],
            [
                112,
                "                        @\"{ 'script': 'foo bar query', 'params': {} }\""
            ],
            [
                113,
                "                    ),"
            ],
            [
                114,
                "                    MockResponse.Json(HttpStatusCode.OK, @\"[]\")"
            ],
            [
                116,
                "            })"
            ],
            [
                117,
                "            {"
            ],
            [
                118,
                "                var graphClient = (GraphClient)testHarness.CreateAndConnectGraphClient();"
            ],
            [
                120,
                "                //Act"
            ],
            [
                121,
                "                var nodes = graphClient"
            ],
            [
                122,
                "                    .ExecuteGetAllNodesGremlin<Foo>(\"foo bar query\", null)"
            ],
            [
                123,
                "                    .ToList();"
            ],
            [
                125,
                "                //Assert"
            ],
            [
                126,
                "                Assert.AreEqual(0, nodes.Count());"
            ],
            [
                127,
                "            }"
            ]
        ],
        "deleted": [
            [
                6,
                "using Neo4jClient.ApiModels;"
            ],
            [
                7,
                "using Neo4jClient.ApiModels.Gremlin;"
            ],
            [
                8,
                "using RestSharp;"
            ],
            [
                32,
                "            //Arrange"
            ],
            [
                33,
                "            const string gremlinQueryExpected = \"foo bar query\";"
            ],
            [
                34,
                "            var parameters = new Dictionary<string, object>"
            ],
            [
                35,
                "                {"
            ],
            [
                36,
                "                    {\"foo\", 123},"
            ],
            [
                37,
                "                    {\"bar\", \"baz\"}"
            ],
            [
                38,
                "                };"
            ],
            [
                39,
                ""
            ],
            [
                40,
                "            var httpFactory = MockHttpFactory.Generate(\"http://foo/db/data\", new Dictionary<IRestRequest, IHttpResponse>"
            ],
            [
                43,
                "                    new RestRequest { Resource = \"\", Method = Method.GET },"
            ],
            [
                44,
                "                    new NeoHttpResponse"
            ],
            [
                45,
                "                    {"
            ],
            [
                46,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                47,
                "                        ContentType = \"application/json\","
            ],
            [
                48,
                "                        TestContent = @\"{"
            ],
            [
                49,
                "                          'batch' : 'http://foo/db/data/batch',"
            ],
            [
                50,
                "                          'node' : 'http://foo/db/data/node',"
            ],
            [
                51,
                "                          'node_index' : 'http://foo/db/data/index/node',"
            ],
            [
                52,
                "                          'relationship_index' : 'http://foo/db/data/index/relationship',"
            ],
            [
                53,
                "                          'reference_node' : 'http://foo/db/data/node/0',"
            ],
            [
                54,
                "                          'extensions_info' : 'http://foo/db/data/ext',"
            ],
            [
                55,
                "                          'extensions' : {"
            ],
            [
                56,
                "                            'GremlinPlugin' : {"
            ],
            [
                57,
                "                              'execute_script' : 'http://foo/db/data/ext/GremlinPlugin/graphdb/execute_script'"
            ],
            [
                58,
                "                            }"
            ],
            [
                59,
                "                          }"
            ],
            [
                60,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                61,
                "                    }"
            ],
            [
                62,
                "                },"
            ],
            [
                63,
                "                {"
            ],
            [
                64,
                "                    new RestRequest {"
            ],
            [
                65,
                "                        Resource = \"/ext/GremlinPlugin/graphdb/execute_script\","
            ],
            [
                66,
                "                        Method = Method.POST,"
            ],
            [
                67,
                "                        RequestFormat = DataFormat.Json"
            ],
            [
                68,
                "                    }.AddBody(new GremlinApiQuery(\"foo bar query\", parameters)),"
            ],
            [
                69,
                "                    new NeoHttpResponse {"
            ],
            [
                70,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                71,
                "                        ContentType = \"application/json\","
            ],
            [
                72,
                "                        TestContent =@\"[ {"
            ],
            [
                109,
                "                    }"
            ],
            [
                111,
                "            });"
            ],
            [
                112,
                "            var graphClient = new GraphClient(new Uri(\"http://foo/db/data\"), httpFactory);"
            ],
            [
                113,
                "            graphClient.Connect();"
            ],
            [
                115,
                "            //Act"
            ],
            [
                116,
                "            var nodes = graphClient"
            ],
            [
                117,
                "                .ExecuteGetAllNodesGremlin<Foo>(gremlinQueryExpected, parameters)"
            ],
            [
                118,
                "                .ToList();"
            ],
            [
                120,
                "            //Assert"
            ],
            [
                121,
                "            Assert.AreEqual(2, nodes.Count());"
            ],
            [
                122,
                "            Assert.AreEqual(5, nodes.ElementAt(0).Reference.Id);"
            ],
            [
                123,
                "            Assert.AreEqual(\"bar\", nodes.ElementAt(0).Data.Bar);"
            ],
            [
                124,
                "            Assert.AreEqual(\"baz\", nodes.ElementAt(0).Data.Baz);"
            ],
            [
                125,
                "            Assert.AreEqual(6, nodes.ElementAt(1).Reference.Id);"
            ],
            [
                126,
                "            Assert.AreEqual(\"123\", nodes.ElementAt(1).Data.Bar);"
            ],
            [
                127,
                "            Assert.AreEqual(\"456\", nodes.ElementAt(1).Data.Baz);"
            ],
            [
                133,
                "            //Arrange"
            ],
            [
                134,
                "            const string gremlinQueryExpected = \"foo bar query\";"
            ],
            [
                135,
                ""
            ],
            [
                136,
                "            var httpFactory = MockHttpFactory.Generate(\"http://foo/db/data\", new Dictionary<IRestRequest, IHttpResponse>"
            ],
            [
                139,
                "                    new RestRequest { Resource = \"\", Method = Method.GET },"
            ],
            [
                140,
                "                    new NeoHttpResponse"
            ],
            [
                141,
                "                    {"
            ],
            [
                142,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                143,
                "                        ContentType = \"application/json\","
            ],
            [
                144,
                "                        TestContent = @\"{"
            ],
            [
                145,
                "                          'batch' : 'http://foo/db/data/batch',"
            ],
            [
                146,
                "                          'node' : 'http://foo/db/data/node',"
            ],
            [
                147,
                "                          'node_index' : 'http://foo/db/data/index/node',"
            ],
            [
                148,
                "                          'relationship_index' : 'http://foo/db/data/index/relationship',"
            ],
            [
                149,
                "                          'reference_node' : 'http://foo/db/data/node/0',"
            ],
            [
                150,
                "                          'extensions_info' : 'http://foo/db/data/ext',"
            ],
            [
                151,
                "                          'extensions' : {"
            ],
            [
                152,
                "                            'GremlinPlugin' : {"
            ],
            [
                153,
                "                              'execute_script' : 'http://foo/db/data/ext/GremlinPlugin/graphdb/execute_script'"
            ],
            [
                154,
                "                            }"
            ],
            [
                155,
                "                          }"
            ],
            [
                156,
                "                        }\".Replace('\\'', '\"')"
            ],
            [
                157,
                "                    }"
            ],
            [
                158,
                "                },"
            ],
            [
                159,
                "                {"
            ],
            [
                160,
                "                    new RestRequest {"
            ],
            [
                161,
                "                        Resource = \"/ext/GremlinPlugin/graphdb/execute_script\","
            ],
            [
                162,
                "                        Method = Method.POST,"
            ],
            [
                163,
                "                        RequestFormat = DataFormat.Json"
            ],
            [
                164,
                "                    }.AddBody(new GremlinApiQuery(\"foo bar query\", null)),"
            ],
            [
                165,
                "                    new NeoHttpResponse {"
            ],
            [
                166,
                "                        StatusCode = HttpStatusCode.OK,"
            ],
            [
                167,
                "                        ContentType = \"application/json\","
            ],
            [
                168,
                "                        TestContent =@\"[]\""
            ],
            [
                169,
                "                    }"
            ],
            [
                171,
                "            });"
            ],
            [
                172,
                "            var graphClient = new GraphClient(new Uri(\"http://foo/db/data\"), httpFactory);"
            ],
            [
                173,
                "            graphClient.Connect();"
            ],
            [
                175,
                "            //Act"
            ],
            [
                176,
                "            var nodes = graphClient"
            ],
            [
                177,
                "                .ExecuteGetAllNodesGremlin<NodeApiResponse<string>>(gremlinQueryExpected, null)"
            ],
            [
                178,
                "                .ToList();"
            ],
            [
                180,
                "            //Assert"
            ],
            [
                181,
                "            Assert.AreEqual(0, nodes.Count());"
            ]
        ]
    },
    "num_lines_added": 48,
    "num_lines_removed": 102
}