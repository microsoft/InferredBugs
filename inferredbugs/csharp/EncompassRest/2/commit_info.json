{
    "hash": "97227c216dbd5b0631acf3a35dc7fa150c485799",
    "message": "Added support for populating the Loan, LoanDocument, and LoanAttachment when creating and updating the resource.\n\nFixed potential NullReferenceException when getting the Clean property of entities.",
    "file_num_lines": 173,
    "diff_parsed": {
        "added": [
            [
                96,
                "        public Task<string> CreateDocumentAsync(LoanDocument document, bool populate)"
            ],
            [
                100,
                "            return CreateDocumentInternalAsync(JsonStreamContent.Create(document), populate ? new QueryParameters(new QueryParameter(\"view\", \"entity\")) : null, async response =>"
            ],
            [
                101,
                "            {"
            ],
            [
                102,
                "                if (populate)"
            ],
            [
                103,
                "                {"
            ],
            [
                104,
                "                    using (var stream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))"
            ],
            [
                105,
                "                    {"
            ],
            [
                106,
                "                        using (var reader = new StreamReader(stream))"
            ],
            [
                107,
                "                        {"
            ],
            [
                108,
                "                            JsonHelper.PopulateFromJson(reader, document);"
            ],
            [
                109,
                "                        }"
            ],
            [
                110,
                "                    }"
            ],
            [
                111,
                "                }"
            ],
            [
                112,
                "                return Path.GetFileName(response.Headers.Location.OriginalString);"
            ],
            [
                113,
                "            });"
            ],
            [
                120,
                "            return CreateDocumentInternalAsync(new JsonContent(document), null, response => Task.FromResult(Path.GetFileName(response.Headers.Location.OriginalString)));"
            ],
            [
                123,
                "        private async Task<string> CreateDocumentInternalAsync(HttpContent content, QueryParameters queryParameters, Func<HttpResponseMessage, Task<string>> func)"
            ],
            [
                125,
                "            using (var response = await Client.HttpClient.PostAsync($\"{_apiPath}/{LoanId}/documents{queryParameters}\", content).ConfigureAwait(false))"
            ],
            [
                132,
                "                return await func(response).ConfigureAwait(false);"
            ],
            [
                135,
                ""
            ],
            [
                136,
                "        public Task UpdateDocumentAsync(LoanDocument document, bool populate)"
            ],
            [
                140,
                "            return UpdateDocumentInternalAsync(document.DocumentId, JsonStreamContent.Create(document), populate ? new QueryParameters(new QueryParameter(\"view\", \"entity\")) : null, async response =>"
            ],
            [
                141,
                "            {"
            ],
            [
                142,
                "                if (populate)"
            ],
            [
                143,
                "                {"
            ],
            [
                144,
                "                    using (var stream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))"
            ],
            [
                145,
                "                    {"
            ],
            [
                146,
                "                        using (var reader = new StreamReader(stream))"
            ],
            [
                147,
                "                        {"
            ],
            [
                148,
                "                            JsonHelper.PopulateFromJson(reader, document);"
            ],
            [
                149,
                "                        }"
            ],
            [
                150,
                "                    }"
            ],
            [
                151,
                "                }"
            ],
            [
                152,
                "            });"
            ],
            [
                163,
                "        private async Task UpdateDocumentInternalAsync(string documentId, HttpContent content, QueryParameters queryParameters = null, Func<HttpResponseMessage, Task> func = null)"
            ],
            [
                165,
                "            using (var response = await Client.HttpClient.PatchAsync($\"{_apiPath}/{LoanId}/documents/{documentId}{queryParameters}\", content).ConfigureAwait(false))"
            ],
            [
                171,
                ""
            ],
            [
                172,
                "                if (func != null)"
            ],
            [
                173,
                "                {"
            ],
            [
                174,
                "                    await func(response).ConfigureAwait(false);"
            ],
            [
                175,
                "                }"
            ]
        ],
        "deleted": [
            [
                96,
                "        public Task<string> CreateDocumentAsync(LoanDocument document)"
            ],
            [
                100,
                "            return CreateDocumentInternalAsync(JsonStreamContent.Create(document));"
            ],
            [
                107,
                "            return CreateDocumentInternalAsync(new JsonContent(document));"
            ],
            [
                110,
                "        private async Task<string> CreateDocumentInternalAsync(HttpContent content)"
            ],
            [
                112,
                "            using (var response = await Client.HttpClient.PostAsync($\"{_apiPath}/{LoanId}/documents\", content).ConfigureAwait(false))"
            ],
            [
                119,
                "                return Path.GetFileName(response.Headers.Location.OriginalString);"
            ],
            [
                122,
                ""
            ],
            [
                123,
                "        public Task UpdateDocumentAsync(LoanDocument document)"
            ],
            [
                127,
                "            return UpdateDocumentInternalAsync(document.DocumentId, JsonStreamContent.Create(document));"
            ],
            [
                138,
                "        private async Task UpdateDocumentInternalAsync(string documentId, HttpContent content)"
            ],
            [
                140,
                "            using (var response = await Client.HttpClient.PatchAsync($\"{_apiPath}/{LoanId}/documents/{documentId}\", content).ConfigureAwait(false))"
            ]
        ]
    },
    "num_lines_added": 41,
    "num_lines_removed": 11
}