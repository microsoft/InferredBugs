{
    "hash": "c951d48350190c11aea43a6b6855bafe113863dc",
    "message": "Same Splay Tree tests fixes\n\nFixed wrong tree used for some tests. Added checking if elements are\nsplayed after adding and cheking if contatined. Added test to check if\nsplaying occurs after removal.",
    "file_num_lines": 395,
    "diff_parsed": {
        "added": [
            [
                30,
                "                    if (!tree.Contains(el))"
            ],
            [
                31,
                "                    {"
            ],
            [
                32,
                "                        tree.Add(el);"
            ],
            [
                33,
                "                        if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                34,
                "                    }"
            ],
            [
                35,
                "                    else if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                78,
                "                    if (!tree.Contains(el))"
            ],
            [
                79,
                "                    {"
            ],
            [
                80,
                "                        tree.Add(el);"
            ],
            [
                81,
                "                        if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                82,
                "                    }"
            ],
            [
                83,
                "                    else if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                140,
                "                    if (!tree.Contains(el))"
            ],
            [
                141,
                "                    {"
            ],
            [
                142,
                "                        tree.Add(el);"
            ],
            [
                143,
                "                        if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                144,
                "                    }"
            ],
            [
                145,
                "                    else if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                166,
                "            var tree = new SplayTree<int>();"
            ],
            [
                185,
                "                        if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                187,
                "                    else if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                274,
                "        [TestMethod]"
            ],
            [
                275,
                "        public void CheckIfTreeIsSplayedAfterRemoval()"
            ],
            [
                276,
                "        {"
            ],
            [
                277,
                "            var tree = new SplayTree<int>();"
            ],
            [
                278,
                ""
            ],
            [
                279,
                "            int elementsCount = 10000;"
            ],
            [
                280,
                ""
            ],
            [
                281,
                "            //To make it more balanced"
            ],
            [
                282,
                "            tree.Add(50);"
            ],
            [
                283,
                "            tree.Add(75);"
            ],
            [
                284,
                "            tree.Add(25);"
            ],
            [
                285,
                ""
            ],
            [
                286,
                "            //Adding every seventh number, then every fifth number,"
            ],
            [
                287,
                "            //every third and at last all numbers"
            ],
            [
                288,
                "            for (int i = 7; i > 0; i -= 2)"
            ],
            [
                289,
                "            {"
            ],
            [
                290,
                "                int el = 0;"
            ],
            [
                291,
                "                while (el < elementsCount)"
            ],
            [
                292,
                "                {"
            ],
            [
                293,
                "                    if (!tree.Contains(el))"
            ],
            [
                294,
                "                    {"
            ],
            [
                295,
                "                        tree.Add(el);"
            ],
            [
                296,
                "                        if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                297,
                "                    }"
            ],
            [
                298,
                "                    else if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                299,
                "                    el += i;"
            ],
            [
                300,
                "                }"
            ],
            [
                301,
                ""
            ],
            [
                302,
                "            }"
            ],
            [
                303,
                ""
            ],
            [
                304,
                "            bool removedEverything = true;"
            ],
            [
                305,
                ""
            ],
            [
                306,
                "            for (int i = 0; i < elementsCount - 1; i++)"
            ],
            [
                307,
                "            {"
            ],
            [
                308,
                "                // Get parent of node for removal. That node have to be splayed"
            ],
            [
                309,
                "                SplayTreeNode<int> curNode = tree.Root;"
            ],
            [
                310,
                "                SplayTreeNode<int> lastNode = null;"
            ],
            [
                311,
                "                while (curNode.Value != i)"
            ],
            [
                312,
                "                {"
            ],
            [
                313,
                "                    var cmp = i.CompareTo(curNode.Value);"
            ],
            [
                314,
                "                    if (cmp == 0) break;"
            ],
            [
                315,
                ""
            ],
            [
                316,
                "                    lastNode = curNode;"
            ],
            [
                317,
                ""
            ],
            [
                318,
                "                    if (cmp > 0) curNode = curNode.Right;"
            ],
            [
                319,
                "                    else curNode = curNode.Left;"
            ],
            [
                320,
                "                }"
            ],
            [
                321,
                ""
            ],
            [
                322,
                "                if (!tree.Remove(i)) removedEverything = false;"
            ],
            [
                323,
                "                else if (lastNode != null) Assert.IsTrue(tree.Root.Value == lastNode.Value);"
            ],
            [
                324,
                "            }"
            ],
            [
                325,
                ""
            ],
            [
                326,
                "            Assert.IsTrue(tree.Count == 1"
            ],
            [
                327,
                "                            && removedEverything"
            ],
            [
                328,
                "                            && tree.Root.Value == elementsCount - 1);"
            ],
            [
                329,
                "        }"
            ],
            [
                330,
                ""
            ],
            [
                348,
                "                        if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                350,
                "                    else if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                372,
                "                        if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                374,
                "                    else if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                416,
                "                        if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                418,
                "                    else if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                451,
                "                        if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                453,
                "                    else if (tree.Root.Value != el) Assert.Fail();"
            ],
            [
                481,
                "            var tree = new SplayTree<int>();"
            ]
        ],
        "deleted": [
            [
                30,
                "                    if (!tree.Contains(el)) tree.Add(el);"
            ],
            [
                73,
                "                    if (!tree.Contains(el)) tree.Add(el);"
            ],
            [
                130,
                "                    if (!tree.Contains(el)) tree.Add(el);"
            ],
            [
                151,
                "            var tree = new BinarySearchTree<int>();"
            ],
            [
                399,
                "            var tree = new AVLTree<int>();"
            ]
        ]
    },
    "num_lines_added": 87,
    "num_lines_removed": 5
}