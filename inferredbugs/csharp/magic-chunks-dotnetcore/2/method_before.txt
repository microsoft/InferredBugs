        [Fact]
        public void TransformXml()
        {
            // Arrange

            var transform = new TransformationCollection("xml/g")
            {
                { "xml/a/y", "2" },
                { "xml/a/@y", "3" },
                { "xml/a/x/@q", "9" },
                { "xml/a/z/t/w", "3" },
                { "xml/b", "5" },
                { "xml/c/a", "1" },
                { "xml/c/b", "2" },
                { "xml/c/b/t", "3" },
                { "xml/e/item[@key = 'item2']", "5" },
                { "xml/e/item[@key=\"item3\"]", "6" },
                { "xml/f/item[@key = 'item2']/val", "7" },
                { "xml/f/item[@key=\"item3\"]/val", "8" },
                { "xml/d", "4" },
            };


            // Act

            var transformer = new Transformer();
            string result = transformer.Transform(new XmlDocument(@"<xml>
<a>
  <x>1</x>
</a>
<b>2</b>
<c>3</c>
<e>
  <item key=""item1"">1</item>
  <item key=""item2"">2</item>
  <item key=""item3"">3</item>
</e>
<f>
  <item key=""item1"">
    <val>1</val>
  </item>
  <item key=""item2"">
    <val>2</val>
  </item>
  <item key=""item3"">
    <val>3</val>
  </item>
</f>
<g>
    <x></x>
</g>
</xml>"), transform);


            // Assert

            Assert.Equal(@"<xml>
  <a y=""3"">
    <x q=""9"">1</x>
    <y>2</y>
    <z>
      <t>
        <w>3</w>
      </t>
    </z>
  </a>
  <b>5</b>
  <c>
    <a>1</a>
    <b>
      <t>3</t>
    </b>
  </c>
  <e>
    <item key=""item1"">1</item>
    <item key=""item2"">5</item>
    <item key=""item3"">6</item>
  </e>
  <f>
    <item key=""item1"">
      <val>1</val>
    </item>
    <item key=""item2"">
      <val>7</val>
    </item>
    <item key=""item3"">
      <val>8</val>
    </item>
  </f>
  <d>4</d>
</xml>", result, ignoreCase: true, ignoreLineEndingDifferences: true, ignoreWhiteSpaceDifferences: true);
        }