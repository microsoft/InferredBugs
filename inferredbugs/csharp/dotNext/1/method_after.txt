        private static Method<D> UnreflectStatic(MethodInfo method)
        {
            var delegateType = typeof(D);
            if(delegateType.IsGenericInstanceOf(typeof(Function<,>)) && delegateType.GetGenericArguments().Take(out var argumentsType, out var returnType) == 2L)
                return Unreflect(method, null, argumentsType, returnType);
            else if(delegateType.IsGenericInstanceOf(typeof(Procedure<>)))
                return Unreflect(method, null, delegateType.GetGenericArguments()[0], typeof(void));
			else if(Delegates.GetInvokeMethod<D>().SignatureEquals(method))
                return new Method<D>(method);
            else
                return null;
        }