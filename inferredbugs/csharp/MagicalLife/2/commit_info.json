{
    "hash": "7b8317a7a3456779704ed7ea6afb4ff00222f487",
    "message": "Hopefully fix the issues listed on Codacy.",
    "file_num_lines": 702,
    "diff_parsed": {
        "added": [
            [
                198,
                "            add(r.Copy(), id, 1);"
            ],
            [
                221,
                "                n.AddEntryNoCopy(r, id);"
            ],
            [
                242,
                "                root.AddEntry(newNode.mbr, newNode.nodeId);"
            ],
            [
                243,
                "                root.AddEntry(oldRoot.mbr, oldRoot.nodeId);"
            ],
            [
                249,
                "                CheckConsistency(rootNodeId, treeHeight, null);"
            ],
            [
                300,
                "                if (!n.IsLeaf())"
            ],
            [
                306,
                "                        if (n.entries[i].Contains(r))"
            ],
            [
                323,
                "                    foundIndex = n.FindEntry(r, id);"
            ],
            [
                332,
                "                n?.DeleteEntry(foundIndex, minNodeEntries);"
            ],
            [
                394,
                "            Intersects(r, (id) => retval.Add(IdsToItems[id]));"
            ],
            [
                444,
                "                if (!n.IsLeaf())"
            ],
            [
                473,
                "                        if (r.Contains(n.entries[i]))"
            ],
            [
                493,
                "            if (n != null && n.GetMBR() != null)"
            ],
            [
                495,
                "                bounds = n.GetMBR().Copy();"
            ],
            [
                566,
                "            initialArea = union.Area();"
            ],
            [
                569,
                "            Array.Copy(initialEntryStatus, 0, entryStatus, 0, maxNodeEntries);"
            ],
            [
                590,
                "                            n.mbr.Add(n.entries[i]);"
            ],
            [
                604,
                "                            newNode.AddEntryNoCopy(n.entries[i], n.ids[i]);"
            ],
            [
                619,
                "            n.Reorganize(this);"
            ],
            [
                624,
                "                if (!n.mbr.Equals(CalculateMBR(n)))"
            ],
            [
                629,
                "                if (!newNode.mbr.Equals(CalculateMBR(newNode)))"
            ],
            [
                637,
                "            float newArea = n.mbr.Area() + newNode.mbr.Area();"
            ],
            [
                664,
                "            n.mbr.Add(newRect);"
            ],
            [
                721,
                "                newNode.AddEntry(newRect, newId);"
            ],
            [
                725,
                "                newNode.AddEntryNoCopy(n.entries[highestLowIndex], n.ids[highestLowIndex]);"
            ],
            [
                753,
                "        private void PickNext(Node<T> n, Node<T> newNode)"
            ],
            [
                772,
                "                    float nIncrease = n.mbr.Enlargement(n.entries[i]);"
            ],
            [
                773,
                "                    float newNodeIncrease = newNode.mbr.Enlargement(n.entries[i]);"
            ],
            [
                788,
                "                        else if (n.mbr.Area() < newNode.mbr.Area())"
            ],
            [
                792,
                "                        else if (newNode.mbr.Area() < n.mbr.Area())"
            ],
            [
                816,
                "                n.mbr.Add(n.entries[next]);"
            ],
            [
                822,
                "                newNode.AddEntryNoCopy(n.entries[next], n.ids[next]);"
            ],
            [
                842,
                "            float distance = nearestDistance;"
            ],
            [
                845,
                "                float tempDistance = n.entries[i].Distance(p);"
            ],
            [
                846,
                "                if (n.IsLeaf())"
            ],
            [
                850,
                "                        distance = tempDistance;"
            ],
            [
                864,
                "                        distance = Nearest(p, GetNode(n.ids[i]), nearestIds, nearestDistance);"
            ],
            [
                868,
                "            return distance;"
            ],
            [
                887,
                "                    if (n.IsLeaf())"
            ],
            [
                932,
                "                    parent.DeleteEntry(parentEntry, minNodeEntries);"
            ],
            [
                943,
                "                        parent.RecalculateMBR(oldRectangle);"
            ],
            [
                995,
                "                float leastEnlargement = n.GetEntry(0).Enlargement(r);"
            ],
            [
                999,
                "                    Rectangle tempRectangle = n.GetEntry(i);"
            ],
            [
                1000,
                "                    float tempEnlargement = tempRectangle.Enlargement(r);"
            ],
            [
                1003,
                "                         (tempRectangle.Area() < n.GetEntry(index).Area())))"
            ],
            [
                1048,
                "                        parent.mbr.Add(parent.entries[i]);"
            ],
            [
                1062,
                "                        parent.AddEntry(nn.mbr, nn.nodeId);"
            ],
            [
                1066,
                "                        newNode = SplitNode(parent, nn.mbr.Copy(), nn.nodeId);"
            ],
            [
                1085,
                "        private void CheckConsistency(int nodeId, int expectedLevel, Rectangle expectedMBR)"
            ],
            [
                1101,
                "            Rectangle calculatedMBR = CalculateMBR(n);"
            ],
            [
                1128,
                "                    CheckConsistency(n.ids[i], n.level - 1, n.entries[i]);"
            ],
            [
                1137,
                "        /// <param name=\"n\"></param>"
            ],
            [
                1138,
                "        private Rectangle CalculateMBR(Node<T> n)"
            ],
            [
                1144,
                "                mbr.Add(n.entries[i]);"
            ]
        ],
        "deleted": [
            [
                198,
                "            add(r.copy(), id, 1);"
            ],
            [
                221,
                "                n.addEntryNoCopy(r, id);"
            ],
            [
                242,
                "                root.addEntry(newNode.mbr, newNode.nodeId);"
            ],
            [
                243,
                "                root.addEntry(oldRoot.mbr, oldRoot.nodeId);"
            ],
            [
                249,
                "                checkConsistency(rootNodeId, treeHeight, null);"
            ],
            [
                300,
                "                if (!n.isLeaf())"
            ],
            [
                306,
                "                        if (n.entries[i].contains(r))"
            ],
            [
                323,
                "                    foundIndex = n.findEntry(r, id);"
            ],
            [
                332,
                "                n?.deleteEntry(foundIndex, minNodeEntries);"
            ],
            [
                394,
                "            Intersects(r, (int id) =>"
            ],
            [
                395,
                "            {"
            ],
            [
                396,
                "                retval.Add(IdsToItems[id]);"
            ],
            [
                397,
                "            });"
            ],
            [
                447,
                "                if (!n.isLeaf())"
            ],
            [
                476,
                "                        if (r.contains(n.entries[i]))"
            ],
            [
                496,
                "            if (n != null && n.getMBR() != null)"
            ],
            [
                498,
                "                bounds = n.getMBR().copy();"
            ],
            [
                542,
                "        /// <summary>"
            ],
            [
                543,
                "        /// Get the highest used Node&lt;T&gt; ID"
            ],
            [
                544,
                "        /// </summary>"
            ],
            [
                545,
                "        /// <returns></returns>"
            ],
            [
                546,
                "        private int GetHighestUsedNodeId()"
            ],
            [
                547,
                "        {"
            ],
            [
                548,
                "            return highestUsedNodeId;"
            ],
            [
                549,
                "        }"
            ],
            [
                550,
                ""
            ],
            [
                578,
                "            initialArea = union.area();"
            ],
            [
                581,
                "            System.Array.Copy(initialEntryStatus, 0, entryStatus, 0, maxNodeEntries);"
            ],
            [
                602,
                "                            n.mbr.add(n.entries[i]);"
            ],
            [
                616,
                "                            newNode.addEntryNoCopy(n.entries[i], n.ids[i]);"
            ],
            [
                631,
                "            n.reorganize(this);"
            ],
            [
                636,
                "                if (!n.mbr.Equals(calculateMBR(n)))"
            ],
            [
                641,
                "                if (!newNode.mbr.Equals(calculateMBR(newNode)))"
            ],
            [
                649,
                "            float newArea = n.mbr.area() + newNode.mbr.area();"
            ],
            [
                676,
                "            n.mbr.add(newRect);"
            ],
            [
                733,
                "                newNode.addEntry(newRect, newId);"
            ],
            [
                737,
                "                newNode.addEntryNoCopy(n.entries[highestLowIndex], n.ids[highestLowIndex]);"
            ],
            [
                765,
                "        private int PickNext(Node<T> n, Node<T> newNode)"
            ],
            [
                784,
                "                    float nIncrease = n.mbr.enlargement(n.entries[i]);"
            ],
            [
                785,
                "                    float newNodeIncrease = newNode.mbr.enlargement(n.entries[i]);"
            ],
            [
                800,
                "                        else if (n.mbr.area() < newNode.mbr.area())"
            ],
            [
                804,
                "                        else if (newNode.mbr.area() < n.mbr.area())"
            ],
            [
                828,
                "                n.mbr.add(n.entries[next]);"
            ],
            [
                834,
                "                newNode.addEntryNoCopy(n.entries[next], n.ids[next]);"
            ],
            [
                837,
                ""
            ],
            [
                838,
                "            return next;"
            ],
            [
                858,
                "                float tempDistance = n.entries[i].distance(p);"
            ],
            [
                859,
                "                if (n.isLeaf())"
            ],
            [
                863,
                "                        nearestDistance = tempDistance;"
            ],
            [
                877,
                "                        nearestDistance = Nearest(p, GetNode(n.ids[i]), nearestIds, nearestDistance);"
            ],
            [
                881,
                "            return nearestDistance;"
            ],
            [
                900,
                "                    if (n.isLeaf())"
            ],
            [
                945,
                "                    parent.deleteEntry(parentEntry, minNodeEntries);"
            ],
            [
                956,
                "                        parent.recalculateMBR(oldRectangle);"
            ],
            [
                1008,
                "                float leastEnlargement = n.getEntry(0).enlargement(r);"
            ],
            [
                1012,
                "                    Rectangle tempRectangle = n.getEntry(i);"
            ],
            [
                1013,
                "                    float tempEnlargement = tempRectangle.enlargement(r);"
            ],
            [
                1016,
                "                         (tempRectangle.area() < n.getEntry(index).area())))"
            ],
            [
                1061,
                "                        parent.mbr.add(parent.entries[i]);"
            ],
            [
                1075,
                "                        parent.addEntry(nn.mbr, nn.nodeId);"
            ],
            [
                1079,
                "                        newNode = SplitNode(parent, nn.mbr.copy(), nn.nodeId);"
            ],
            [
                1098,
                "        private void checkConsistency(int nodeId, int expectedLevel, Rectangle expectedMBR)"
            ],
            [
                1114,
                "            Rectangle calculatedMBR = calculateMBR(n);"
            ],
            [
                1141,
                "                    checkConsistency(n.ids[i], n.level - 1, n.entries[i]);"
            ],
            [
                1150,
                "        private Rectangle calculateMBR(Node<T> n)"
            ],
            [
                1156,
                "                mbr.add(n.entries[i]);"
            ]
        ]
    },
    "num_lines_added": 54,
    "num_lines_removed": 66
}