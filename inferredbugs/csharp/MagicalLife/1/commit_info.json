{
    "hash": "8d6df6f7bd2bde22c9e155239d453bbacfe730b8",
    "message": "Rename the api language file and tidy up some more.",
    "file_num_lines": 709,
    "diff_parsed": {
        "added": [
            [
                30,
                "    /// <para>"
            ],
            [
                33,
                "    /// </para>"
            ],
            [
                34,
                "    /// <para>"
            ],
            [
                40,
                "    /// </para>"
            ],
            [
                41,
                "    /// <para>"
            ],
            [
                48,
                "    /// </para>"
            ],
            [
                225,
                "                newLeaf = SplitNode(n, r, id);"
            ],
            [
                237,
                "                Node<T> oldRoot = GetNode(oldRootNodeId);"
            ],
            [
                265,
                "            if (success)"
            ],
            [
                297,
                "                n = GetNode(parents.Peek());"
            ],
            [
                332,
                "                n?.deleteEntry(foundIndex, minNodeEntries);"
            ],
            [
                339,
                "            Node<T> root = GetNode(rootNodeId);"
            ],
            [
                345,
                "                root = GetNode(rootNodeId);"
            ],
            [
                371,
                "            Node<T> rootNode = GetNode(rootNodeId);"
            ],
            [
                375,
                "            Nearest(p, rootNode, nearestIds, furthestDistance);"
            ],
            [
                394,
                "            Intersects(r, (int id) =>"
            ],
            [
                402,
                "        private void Intersects(Rectangle r, Action<int> v)"
            ],
            [
                404,
                "            Node<T> rootNode = GetNode(rootNodeId);"
            ],
            [
                405,
                "            Intersects(r, v, rootNode);"
            ],
            [
                444,
                "                Node<T> n = GetNode(_parents.Peek());"
            ],
            [
                455,
                "                        if (r.Intersects(n.entries[i]))"
            ],
            [
                490,
                "        public Rectangle GetBounds()"
            ],
            [
                495,
                "            Node<T> n = GetNode(getRootNodeId());"
            ],
            [
                537,
                "        private Node<T> GetNode(int index)"
            ],
            [
                539,
                "            return nodeMap[index];"
            ],
            [
                546,
                "        private int GetHighestUsedNodeId()"
            ],
            [
                568,
                "        private Node<T> SplitNode(Node<T> n, Rectangle newRect, int newId)"
            ],
            [
                577,
                "            Rectangle union = n.mbr.Union(newRect);"
            ],
            [
                587,
                "            PickSeeds(n, newRect, newId, newNode); // this also sets the entryCount to 1"
            ],
            [
                628,
                "                PickNext(n, newNode);"
            ],
            [
                665,
                "        private void PickSeeds(Node<T> n, Rectangle newRect, int newId, Node<T> newNode)"
            ],
            [
                753,
                "            n.mbr.Set(n.entries[lowestHighIndex].min, n.entries[lowestHighIndex].max);"
            ],
            [
                765,
                "        private int PickNext(Node<T> n, Node<T> newNode)"
            ],
            [
                854,
                "        private float Nearest(Point p, Node<T> n, List<int> nearestIds, float nearestDistance)"
            ],
            [
                877,
                "                        nearestDistance = Nearest(p, GetNode(n.ids[i]), nearestIds, nearestDistance);"
            ],
            [
                894,
                "        private void Intersects(Rectangle r, Action<int> v, Node<T> n)"
            ],
            [
                898,
                "                if (r.Intersects(n.entries[i]))"
            ],
            [
                906,
                "                        Node<T> childNode = GetNode(n.ids[i]);"
            ],
            [
                907,
                "                        Intersects(r, v, childNode);"
            ],
            [
                938,
                "                parent = GetNode(parents.Pop());"
            ],
            [
                954,
                "                        oldRectangle.Set(parent.entries[parentEntry].min, parent.entries[parentEntry].max);"
            ],
            [
                955,
                "                        parent.entries[parentEntry].Set(n.mbr.min, n.mbr.max);"
            ],
            [
                970,
                "                Node<T> e = GetNode(eliminatedNodeIds.Pop());"
            ],
            [
                988,
                "            Node<T> n = GetNode(rootNodeId);"
            ],
            [
                1000,
                "                if (n?.level == level)"
            ],
            [
                1028,
                "                n = GetNode(n.ids[index]);"
            ],
            [
                1047,
                "                Node<T> parent = GetNode(parents.Pop());"
            ],
            [
                1057,
                "                    parent.entries[entry].Set(n.mbr.min, n.mbr.max);"
            ],
            [
                1058,
                "                    parent.mbr.Set(parent.entries[0].min, parent.entries[0].max);"
            ],
            [
                1079,
                "                        newNode = SplitNode(parent, nn.mbr.copy(), nn.nodeId);"
            ],
            [
                1102,
                "            Node<T> n = GetNode(nodeId);"
            ],
            [
                1109,
                "            if (n?.level != expectedLevel)"
            ],
            [
                1111,
                "                Debug.WriteLine($\"Error: Node<T> {nodeId}, expected level {expectedLevel}, actual level {n?.level}\");"
            ],
            [
                1116,
                "            if (n?.mbr.Equals(calculatedMBR) == false)"
            ],
            [
                1127,
                "            if (expectedMBR != null && n.mbr.SameObject(expectedMBR))"
            ]
        ],
        "deleted": [
            [
                32,
                "    ///"
            ],
            [
                38,
                "    ///"
            ],
            [
                39,
                "    ///"
            ],
            [
                222,
                "                newLeaf = splitNode(n, r, id);"
            ],
            [
                234,
                "                Node<T> oldRoot = getNode(oldRootNodeId);"
            ],
            [
                262,
                "            if (success == true)"
            ],
            [
                294,
                "                n = getNode(parents.Peek());"
            ],
            [
                329,
                "                n.deleteEntry(foundIndex, minNodeEntries);"
            ],
            [
                336,
                "            Node<T> root = getNode(rootNodeId);"
            ],
            [
                342,
                "                root = getNode(rootNodeId);"
            ],
            [
                368,
                "            Node<T> rootNode = getNode(rootNodeId);"
            ],
            [
                372,
                "            nearest(p, rootNode, nearestIds, furthestDistance);"
            ],
            [
                391,
                "            intersects(r, (int id) =>"
            ],
            [
                399,
                "        private void intersects(Rectangle r, Action<int> v)"
            ],
            [
                401,
                "            Node<T> rootNode = getNode(rootNodeId);"
            ],
            [
                402,
                "            intersects(r, v, rootNode);"
            ],
            [
                432,
                "            _parents.Clear();"
            ],
            [
                435,
                "            _parentsEntry.Clear();"
            ],
            [
                443,
                "                Node<T> n = getNode(_parents.Peek());"
            ],
            [
                454,
                "                        if (r.intersects(n.entries[i]))"
            ],
            [
                489,
                "        public Rectangle getBounds()"
            ],
            [
                494,
                "            Node<T> n = getNode(getRootNodeId());"
            ],
            [
                536,
                "        private Node<T> getNode(int index)"
            ],
            [
                538,
                "            return (Node<T>)nodeMap[index];"
            ],
            [
                545,
                "        private int getHighestUsedNodeId()"
            ],
            [
                567,
                "        private Node<T> splitNode(Node<T> n, Rectangle newRect, int newId)"
            ],
            [
                576,
                "            Rectangle union = n.mbr.union(newRect);"
            ],
            [
                586,
                "            pickSeeds(n, newRect, newId, newNode); // this also sets the entryCount to 1"
            ],
            [
                627,
                "                pickNext(n, newNode);"
            ],
            [
                664,
                "        private void pickSeeds(Node<T> n, Rectangle newRect, int newId, Node<T> newNode)"
            ],
            [
                752,
                "            n.mbr.set(n.entries[lowestHighIndex].min, n.entries[lowestHighIndex].max);"
            ],
            [
                764,
                "        private int pickNext(Node<T> n, Node<T> newNode)"
            ],
            [
                853,
                "        private float nearest(Point p, Node<T> n, List<int> nearestIds, float nearestDistance)"
            ],
            [
                876,
                "                        nearestDistance = nearest(p, getNode(n.ids[i]), nearestIds, nearestDistance);"
            ],
            [
                893,
                "        private void intersects(Rectangle r, Action<int> v, Node<T> n)"
            ],
            [
                897,
                "                if (r.intersects(n.entries[i]))"
            ],
            [
                905,
                "                        Node<T> childNode = getNode(n.ids[i]);"
            ],
            [
                906,
                "                        intersects(r, v, childNode);"
            ],
            [
                937,
                "                parent = getNode(parents.Pop());"
            ],
            [
                953,
                "                        oldRectangle.set(parent.entries[parentEntry].min, parent.entries[parentEntry].max);"
            ],
            [
                954,
                "                        parent.entries[parentEntry].set(n.mbr.min, n.mbr.max);"
            ],
            [
                969,
                "                Node<T> e = getNode(eliminatedNodeIds.Pop());"
            ],
            [
                987,
                "            Node<T> n = getNode(rootNodeId);"
            ],
            [
                999,
                "                if (n.level == level)"
            ],
            [
                1027,
                "                n = getNode(n.ids[index]);"
            ],
            [
                1046,
                "                Node<T> parent = getNode(parents.Pop());"
            ],
            [
                1056,
                "                    parent.entries[entry].set(n.mbr.min, n.mbr.max);"
            ],
            [
                1057,
                "                    parent.mbr.set(parent.entries[0].min, parent.entries[0].max);"
            ],
            [
                1078,
                "                        newNode = splitNode(parent, nn.mbr.copy(), nn.nodeId);"
            ],
            [
                1101,
                "            Node<T> n = getNode(nodeId);"
            ],
            [
                1108,
                "            if (n.level != expectedLevel)"
            ],
            [
                1110,
                "                Debug.WriteLine($\"Error: Node<T> {nodeId}, expected level {expectedLevel}, actual level {n.level}\");"
            ],
            [
                1115,
                "            if (!n.mbr.Equals(calculatedMBR))"
            ],
            [
                1126,
                "            if (expectedMBR != null && n.mbr.sameObject(expectedMBR))"
            ]
        ]
    },
    "num_lines_added": 55,
    "num_lines_removed": 54
}