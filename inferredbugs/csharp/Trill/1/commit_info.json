{
    "hash": "f53f4fe948c09dc8006d254dcaea846c90c3741c",
    "message": "Allowing multiple subsequent subscriptions on a single BinaryIngressStreamable instance for streams that support Seek operations",
    "file_num_lines": 74,
    "diff_parsed": {
        "added": [
            [
                16,
                "        private readonly long streamStartPosition = 0;"
            ],
            [
                19,
                "        private readonly IIngressScheduler scheduler;"
            ],
            [
                20,
                "        private bool subscriptionActive;"
            ],
            [
                33,
                "            if (this.stream.CanSeek)"
            ],
            [
                34,
                "            {"
            ],
            [
                35,
                "                this.streamStartPosition = binaryStream.Position;"
            ],
            [
                36,
                "            }"
            ],
            [
                40,
                "            this.IngressSiteIdentifier = identifier ?? Guid.NewGuid().ToString();"
            ],
            [
                45,
                "        internal void OnSubscriptionCompleted()"
            ],
            [
                46,
                "        {"
            ],
            [
                47,
                "            if (!this.subscriptionActive)"
            ],
            [
                48,
                "            {"
            ],
            [
                49,
                "                throw new InvalidOperationException(\"Subscription not started\");"
            ],
            [
                50,
                "            }"
            ],
            [
                51,
                ""
            ],
            [
                52,
                "            // If the stream supports Seek, we can allow another subscription"
            ],
            [
                53,
                "            if (this.stream.CanSeek)"
            ],
            [
                54,
                "            {"
            ],
            [
                55,
                "                this.stream.Seek(this.streamStartPosition, SeekOrigin.Begin);"
            ],
            [
                56,
                "                this.subscriptionActive = false;"
            ],
            [
                57,
                "            }"
            ],
            [
                58,
                "        }"
            ],
            [
                59,
                ""
            ],
            [
                60,
                "        public string IngressSiteIdentifier { get; private set; }"
            ],
            [
                65,
                "            if (this.subscriptionActive)"
            ],
            [
                66,
                "            {"
            ],
            [
                67,
                "                throw new InvalidOperationException("
            ],
            [
                68,
                "                    $\"Only one subscription per {nameof(BinaryIngressStreamable<object, object>)} instance \" +"
            ],
            [
                69,
                "                        $\"{(this.stream.CanSeek ? \"allowed at a time\" : \"for streams that do not support Seek\")}\");"
            ],
            [
                70,
                "            }"
            ],
            [
                71,
                ""
            ],
            [
                72,
                "            this.subscriptionActive = true;"
            ],
            [
                73,
                "            var subscription = new BinaryIngressReader<TKey, TPayload>("
            ],
            [
                74,
                "                this.IngressSiteIdentifier, this, observer, this.numMessages, this.stream, this.scheduler, this.delayed, OnSubscriptionCompleted);"
            ],
            [
                78,
                "                this.container.RegisterIngressPipe(this.IngressSiteIdentifier, subscription);"
            ]
        ],
        "deleted": [
            [
                16,
                "        private readonly string identifier;"
            ],
            [
                19,
                "        private IIngressScheduler scheduler;"
            ],
            [
                35,
                "            this.identifier = identifier ?? Guid.NewGuid().ToString();"
            ],
            [
                40,
                "        public string IngressSiteIdentifier => this.identifier;"
            ],
            [
                45,
                "            var subscription = new BinaryIngressReader<TKey, TPayload>(this.identifier, this, observer, this.numMessages, this.stream, this.scheduler, this.delayed);"
            ],
            [
                49,
                "                this.container.RegisterIngressPipe(this.identifier, subscription);"
            ]
        ]
    },
    "num_lines_added": 35,
    "num_lines_removed": 6
}