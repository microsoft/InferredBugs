{
    "hash": "d49b7c7440da616a096eee3364d0d93e7d76e264",
    "message": "Add Invoke Callback Support\n\nThis seems to work. We keep hold of the callback the user has given us\nand register our own in its place. When an invoke request arrives back\nvalidate it really is for this instance and forward the request on to\nthe user's action.\n\nNOTE: This doesn't properly handle the pinning of the delegate here. Not\nsure what the full solution is to that yet.",
    "file_num_lines": 34,
    "diff_parsed": {
        "added": [
            [
                16,
                "                .WithInvokeCallback((view, payload) => Console.WriteLine($\"Hello {payload}\"))"
            ],
            [
                32,
                "                if (tick % 100 == 0)"
            ],
            [
                33,
                "                {"
            ],
            [
                34,
                "                    webview.Eval($@\"external.invoke('world @ {tick}')\");"
            ],
            [
                35,
                "                }"
            ],
            [
                36,
                ""
            ]
        ],
        "deleted": []
    },
    "num_lines_added": 6,
    "num_lines_removed": 0
}