{
    "hash": "17715226e456eb605432ba0e7f3a8f6bb474ce38",
    "message": "Rename Util to SFUtil\nUse FixStr for all binder timestamps",
    "file_num_lines": 478,
    "diff_parsed": {
        "added": [
            [
                19,
                "            return IsBHD(SFUtil.GetDecompressedBR(br, out _));"
            ],
            [
                30,
                "                return IsBHD(SFUtil.GetDecompressedBR(br, out _));"
            ],
            [
                40,
                "            return IsBDT(SFUtil.GetDecompressedBR(br, out _));"
            ],
            [
                51,
                "                return IsBDT(SFUtil.GetDecompressedBR(br, out _));"
            ],
            [
                303,
                "            /// A timestamp or version number, 8 characters maximum."
            ],
            [
                305,
                "            public string Timestamp;"
            ],
            [
                336,
                "                Timestamp = SFUtil.DateToBinderTimestamp(DateTime.Now);"
            ],
            [
                357,
                "                Timestamp = br.ReadFixStr(8);"
            ],
            [
                416,
                "                bw.WriteFixStr(Timestamp, 8);"
            ],
            [
                456,
                "                        if (SFUtil.IsPrime(p))"
            ],
            [
                587,
                "                    Hash = SFUtil.FromPathHash(path);"
            ],
            [
                627,
                "            /// A timestamp or version number, 8 characters maximum."
            ],
            [
                629,
                "            public string Timestamp;"
            ],
            [
                648,
                "                Timestamp = SFUtil.DateToBinderTimestamp(DateTime.Now);"
            ],
            [
                668,
                "                Timestamp = br.ReadFixStr(8);"
            ],
            [
                684,
                "                bw.WriteFixStr(Timestamp, 8);"
            ]
        ],
        "deleted": [
            [
                19,
                "            return IsBHD(Util.GetDecompressedBR(br, out _));"
            ],
            [
                30,
                "                return IsBHD(Util.GetDecompressedBR(br, out _));"
            ],
            [
                40,
                "            return IsBDT(Util.GetDecompressedBR(br, out _));"
            ],
            [
                51,
                "                return IsBDT(Util.GetDecompressedBR(br, out _));"
            ],
            [
                302,
                "            private string timestamp;"
            ],
            [
                304,
                "            /// A timestamp of unknown purpose."
            ],
            [
                306,
                "            public string Timestamp"
            ],
            [
                307,
                "            {"
            ],
            [
                308,
                "                get { return timestamp; }"
            ],
            [
                309,
                "                set"
            ],
            [
                310,
                "                {"
            ],
            [
                311,
                "                    if (value.Length > 8)"
            ],
            [
                312,
                "                        throw new ArgumentException(\"Timestamp may not be longer than 8 characters.\");"
            ],
            [
                313,
                "                    timestamp = value;"
            ],
            [
                314,
                "                }"
            ],
            [
                315,
                "            }"
            ],
            [
                346,
                "                Timestamp = Util.UnparseBNDTimestamp(DateTime.Now);"
            ],
            [
                367,
                "                Timestamp = br.ReadASCII(8).TrimEnd('\\0');"
            ],
            [
                426,
                "                bw.WriteASCII(Timestamp.PadRight(8, '\\0'));"
            ],
            [
                466,
                "                        if (Util.IsPrime(p))"
            ],
            [
                597,
                "                    Hash = Util.FromPathHash(path);"
            ],
            [
                636,
                "            private string timestamp;"
            ],
            [
                638,
                "            /// A timestamp of unknown purpose."
            ],
            [
                640,
                "            public string Timestamp"
            ],
            [
                641,
                "            {"
            ],
            [
                642,
                "                get { return timestamp; }"
            ],
            [
                643,
                "                set"
            ],
            [
                644,
                "                {"
            ],
            [
                645,
                "                    if (value.Length > 8)"
            ],
            [
                646,
                "                        throw new ArgumentException(\"Timestamp may not be longer than 8 characters.\");"
            ],
            [
                647,
                "                    timestamp = value;"
            ],
            [
                648,
                "                }"
            ],
            [
                649,
                "            }"
            ],
            [
                668,
                "                Timestamp = Util.UnparseBNDTimestamp(DateTime.Now);"
            ],
            [
                688,
                "                Timestamp = br.ReadASCII(8).TrimEnd('\\0');"
            ],
            [
                704,
                "                bw.WriteASCII(Timestamp.PadRight(8, '\\0'));"
            ]
        ]
    },
    "num_lines_added": 16,
    "num_lines_removed": 36
}