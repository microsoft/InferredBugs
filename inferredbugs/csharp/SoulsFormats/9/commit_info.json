{
    "hash": "17715226e456eb605432ba0e7f3a8f6bb474ce38",
    "message": "Rename Util to SFUtil\nUse FixStr for all binder timestamps",
    "file_num_lines": 246,
    "diff_parsed": {
        "added": [
            [
                19,
                "            return IsBHD(SFUtil.GetDecompressedBR(br, out _));"
            ],
            [
                30,
                "                return IsBHD(SFUtil.GetDecompressedBR(br, out _));"
            ],
            [
                40,
                "            return IsBDT(SFUtil.GetDecompressedBR(br, out _));"
            ],
            [
                51,
                "                return IsBDT(SFUtil.GetDecompressedBR(br, out _));"
            ],
            [
                176,
                "        ///A timestamp or version number, 8 characters maximum."
            ],
            [
                178,
                "        public string BHDTimestamp;"
            ],
            [
                181,
                "        /// A timestamp or version number, 8 characters maximum."
            ],
            [
                183,
                "        public string BDTTimestamp;"
            ],
            [
                196,
                "            BHDTimestamp = SFUtil.DateToBinderTimestamp(DateTime.Now);"
            ],
            [
                197,
                "            BDTTimestamp = SFUtil.DateToBinderTimestamp(DateTime.Now);"
            ],
            [
                220,
                "            BDTTimestamp = bdtReader.ReadFixStr(8);"
            ],
            [
                236,
                "            bhdWriter.WriteFixStr(BHDTimestamp, 8);"
            ],
            [
                249,
                "            bdtWriter.WriteFixStr(BDTTimestamp, 8);"
            ],
            [
                289,
                "                Timestamp = br.ReadFixStr(8);"
            ]
        ],
        "deleted": [
            [
                19,
                "            return IsBHD(Util.GetDecompressedBR(br, out _));"
            ],
            [
                30,
                "                return IsBHD(Util.GetDecompressedBR(br, out _));"
            ],
            [
                40,
                "            return IsBDT(Util.GetDecompressedBR(br, out _));"
            ],
            [
                51,
                "                return IsBDT(Util.GetDecompressedBR(br, out _));"
            ],
            [
                175,
                "        private string bhdTimestamp;"
            ],
            [
                177,
                "        /// A timestamp of unknown purpose."
            ],
            [
                179,
                "        public string BHDTimestamp"
            ],
            [
                180,
                "        {"
            ],
            [
                181,
                "            get { return bhdTimestamp; }"
            ],
            [
                182,
                "            set"
            ],
            [
                183,
                "            {"
            ],
            [
                184,
                "                if (value.Length > 8)"
            ],
            [
                185,
                "                    throw new ArgumentException(\"Timestamp may not be longer than 8 characters.\");"
            ],
            [
                186,
                "                bhdTimestamp = value;"
            ],
            [
                187,
                "            }"
            ],
            [
                188,
                "        }"
            ],
            [
                190,
                "        private string bdtTimestamp;"
            ],
            [
                192,
                "        /// A timestamp of unknown purpose."
            ],
            [
                194,
                "        public string BDTTimestamp"
            ],
            [
                195,
                "        {"
            ],
            [
                196,
                "            get { return bdtTimestamp; }"
            ],
            [
                197,
                "            set"
            ],
            [
                198,
                "            {"
            ],
            [
                199,
                "                if (value.Length > 8)"
            ],
            [
                200,
                "                    throw new ArgumentException(\"Timestamp may not be longer than 8 characters.\");"
            ],
            [
                201,
                "                bdtTimestamp = value;"
            ],
            [
                202,
                "            }"
            ],
            [
                203,
                "        }"
            ],
            [
                216,
                "            BHDTimestamp = Util.UnparseBNDTimestamp(DateTime.Now);"
            ],
            [
                217,
                "            BDTTimestamp = Util.UnparseBNDTimestamp(DateTime.Now);"
            ],
            [
                240,
                "            BDTTimestamp = bdtReader.ReadASCII(8).TrimEnd('\\0');"
            ],
            [
                256,
                "            bhdWriter.WriteASCII(BHDTimestamp.PadRight(8, '\\0'));"
            ],
            [
                269,
                "            bdtWriter.WriteASCII(BDTTimestamp.PadRight(8, '\\0'));"
            ],
            [
                309,
                "                Timestamp = br.ReadASCII(8).TrimEnd('\\0');"
            ]
        ]
    },
    "num_lines_added": 14,
    "num_lines_removed": 34
}