  public static int Poll(PollItem[] items, int itemsCount, int timeout)
		{
			if (items == null)
			{
				ZError.ErrorNumber = (ErrorNumber.EFAULT);
				throw new ArgumentException();
			}
			if (itemsCount == 0)
			{
				if (timeout == 0)
					return 0;
				Thread.Sleep(timeout);
				return 0;
			}

			bool firstPass = true;
			int nevents = 0;

			List<Socket> writeList = new List<Socket>();
			List<Socket> readList = new List<Socket>();
			List<Socket> errorList = new List<Socket>();

			for (int i = 0; i < itemsCount; i++)
			{
				var pollItem = items[i];

				if (pollItem.Socket != null)
				{
					if (pollItem.Events != PollEvents.None)
					{
						readList.Add(pollItem.Socket.FD);
					}
				}
				else
				{
					if ((pollItem.Events & PollEvents.PollIn) == PollEvents.PollIn)
					{
						readList.Add(pollItem.FileDescriptor);
					}

					if ((pollItem.Events & PollEvents.PollOut) == PollEvents.PollOut)
					{
						writeList.Add(pollItem.FileDescriptor);
					}

					if ((pollItem.Events & PollEvents.PollError) == PollEvents.PollError)
					{
						errorList.Add(pollItem.FileDescriptor);
					}
				}
			}

			ArrayList inset = new ArrayList(readList.Count);
			ArrayList outset = new ArrayList(writeList.Count);
			ArrayList errorset = new ArrayList(errorList.Count);

			Stopwatch stopwatch = null;

			while (true)
			{
				int currentTimeoutMicroSeconds;

				if (firstPass)
				{
					currentTimeoutMicroSeconds = 0;
				}
				else
				{
					currentTimeoutMicroSeconds = (int)((timeout - stopwatch.ElapsedMilliseconds) * 1000);

					if (currentTimeoutMicroSeconds < 0)
					{
						currentTimeoutMicroSeconds = 0;
					}
				}

				inset.AddRange(readList);
				outset.AddRange(writeList);
				errorset.AddRange(errorList);

				try
				{
					System.Net.Sockets.Socket.Select(inset, outset, errorset, currentTimeoutMicroSeconds);
				}
				catch (SocketException ex)
				{
					// TODO: change to right error
					ZError.ErrorNumber = ErrorNumber.ESOCKET;

					return -1;
				}

				for (int i = 0; i < itemsCount; i++)
				{
					var pollItem = items[i];

					pollItem.ResultEvent = PollEvents.None;

					if (pollItem.Socket != null)
					{
						PollEvents events = (PollEvents)GetSocketOption(pollItem.Socket, ZmqSocketOptions.Events);

						if ((pollItem.Events & PollEvents.PollIn) == PollEvents.PollIn &&
							(events & PollEvents.PollIn) == PollEvents.PollIn)
						{
							pollItem.ResultEvent |= PollEvents.PollIn;
						}

						if ((pollItem.Events & PollEvents.PollOut) == PollEvents.PollOut &&
							(events & PollEvents.PollOut) == PollEvents.PollOut)
						{
							pollItem.ResultEvent |= PollEvents.PollOut;
						}
					}
					else
					{
						if (inset.Contains(pollItem.FileDescriptor))
						{
							pollItem.ResultEvent |= PollEvents.PollIn;
						}

						if (outset.Contains(pollItem.FileDescriptor))
						{
							pollItem.ResultEvent |= PollEvents.PollOut;
						}

						if (errorset.Contains(pollItem.FileDescriptor))
						{
							pollItem.ResultEvent |= PollEvents.PollError;
						}
					}

					if (pollItem.ResultEvent != PollEvents.None)
					{
						nevents++;
					}
				}

				inset.Clear();
				outset.Clear();
				errorset.Clear();

				if (timeout == 0)
				{
					break;
				}

				if (nevents > 0)
				{
					break;
				}

				if (timeout < 0)
				{
					if (firstPass)
					{
						firstPass = false;
					}

					continue;
				}

				if (firstPass)
				{
					stopwatch = Stopwatch.StartNew();
					firstPass = false;
					continue;
				}

				if (stopwatch.ElapsedMilliseconds > timeout)
				{
					break;
				}
			}

			return nevents;
		}