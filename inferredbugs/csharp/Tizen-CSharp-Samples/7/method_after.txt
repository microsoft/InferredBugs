        private VisualView CreateVisualMap(string type, Vector2 position)
        {
            // Visual Map declaration
            VisualMap visualMap = null;
            // TextVisual declaration
            TextVisual textVisual = null;
            switch (type)
            {
                // Image Visual
                case "Image":
                    ImageVisual imageVisual = new ImageVisual();
                    // Set Visual URL
                    imageVisual.URL = mImageJpgUrl;
                    visualMap = imageVisual;
                    // Create TextVisual
                    textVisual = CreateTextVisual(type + " Visual");
                    break;
                case "Color":
                    ColorVisual colorVisual = new ColorVisual();
                    // Set Visual Color
                    colorVisual.Color = new Color(43.0f / 255.0f, 145.0f / 255.0f, 175.0f / 255.0f, 1.0f);
                    visualMap = colorVisual;
                    // Create TextVisual
                    textVisual = CreateTextVisual(type + " Visual");
                    break;
                case "NPatch":
                    NPatchVisual nPatchVisual = new NPatchVisual();
                    // Set Visual URL
                    nPatchVisual.URL = mImageNpatchUrl;
                    visualMap = nPatchVisual;
                    // Create TextVisual
                    textVisual = CreateTextVisual(type + " Visual");
                    break;
                case "SVG":
                    SVGVisual svgVisual = new SVGVisual();
                    // Set Visual URL
                    svgVisual.URL = mImageSvgUrl;
                    visualMap = svgVisual;
                    // Create TextVisual
                    textVisual = CreateTextVisual(type + " Visual");
                    break;
                case "Animated":
                    AnimatedImageVisual animatedImageVisual = new AnimatedImageVisual();
                    // Set Visual URL
                    animatedImageVisual.URL = mImageGifUrl;
                    visualMap = animatedImageVisual;
                    // Create TextVisual
                    textVisual = CreateTextVisual(type + " Visual");
                    break;
                case "Border":
                    BorderVisual borderVisual = new BorderVisual();
                    // Set Visual Color
                    borderVisual.Color = Color.White;
                    // Set Visual Size
                    borderVisual.BorderSize = 5.0f;
                    visualMap = borderVisual;
                    // Create TextVisual
                    textVisual = CreateTextVisual(type + " Visual");
                    break;
                case "Gradient":
                    // Set GradientVisual properties
                    GradientVisual gradientVisual = new GradientVisual();
                    PropertyArray stopOffset = new PropertyArray();
                    stopOffset.Add(new PropertyValue(0.0f));
                    stopOffset.Add(new PropertyValue(0.3f));
                    stopOffset.Add(new PropertyValue(0.6f));
                    stopOffset.Add(new PropertyValue(0.8f));
                    stopOffset.Add(new PropertyValue(1.0f));
                    gradientVisual.StopOffset = stopOffset;
                    // Create the PropertyArray of stopColor.
                    PropertyArray stopColor = new PropertyArray();
                    stopColor.Add(new PropertyValue(new Vector4(129.0f, 198.0f, 193.0f, 255.0f) / 255.0f));
                    stopColor.Add(new PropertyValue(new Vector4(196.0f, 198.0f, 71.0f, 122.0f) / 255.0f));
                    stopColor.Add(new PropertyValue(new Vector4(214.0f, 37.0f, 139.0f, 191.0f) / 255.0f));
                    stopColor.Add(new PropertyValue(new Vector4(129.0f, 198.0f, 193.0f, 150.0f) / 255.0f));
                    stopColor.Add(new PropertyValue(Color.Yellow));
                    // Set the color at the stop offsets.
                    // At least 2 values required to show a gradient.
                    gradientVisual.StopColor = stopColor;
                    // Set the start position of a linear gradient.
                    gradientVisual.StartPosition = new Vector2(0.5f, 0.5f);
                    // Set the end position of a linear gradient.
                    gradientVisual.EndPosition = new Vector2(-0.5f, -0.5f);
                    // Set the center point of a radial gradient.
                    gradientVisual.Center = new Vector2(0.5f, 0.5f);
                    // Set the size of the radius of a radial gradient.
                    gradientVisual.Radius = 1.414f;
                    visualMap = gradientVisual;
                    // Create TextVisual
                    textVisual = CreateTextVisual(type + " Visual");
                    break;
                case "Cone":
                    visualMap = CreatePrimitiveVisual(PrimitiveVisualShapeType.Cone);
                    // Create TextVisual
                    textVisual = CreateTextVisual("PrimitiveVisual(" + type + ")");
                    break;
                case "Sphere":
                    visualMap = CreatePrimitiveVisual(PrimitiveVisualShapeType.Sphere);
                    // Create TextVisual
                    textVisual = CreateTextVisual("PrimitiveVisual(" + type + ")");
                    break;
                case "Cylinder":
                    visualMap = CreatePrimitiveVisual(PrimitiveVisualShapeType.Cylinder);
                    // Create TextVisual
                    textVisual = CreateTextVisual("PrimitiveVisual(" + type + ")");
                    break;
                case "ConicalFrustrum":
                    visualMap = CreatePrimitiveVisual(PrimitiveVisualShapeType.ConicalFrustrum);
                    // Create TextVisual
                    textVisual = CreateTextVisual("PrimitiveVisual(" + type + ")");
                    break;
                case "Cube":
                    visualMap = CreatePrimitiveVisual(PrimitiveVisualShapeType.Cube);
                    // Create TextVisual
                    textVisual = CreateTextVisual("PrimitiveVisual(" + type + ")");
                    break;
                case "Octahedron":
                    visualMap = CreatePrimitiveVisual(PrimitiveVisualShapeType.Octahedron);
                    // Create TextVisual
                    textVisual = CreateTextVisual("PrimitiveVisual(" + type + ")");
                    break;
                case "BevelledCube":
                    visualMap = CreatePrimitiveVisual(PrimitiveVisualShapeType.BevelledCube);
                    // Create TextVisual
                    textVisual = CreateTextVisual("PrimitiveVisual(" + type + ")");
                    break;
                default:
                    break;
            }
            if (visualMap != null) {
                // Set the common properties
                visualMap.Size = mVisualSize;
                visualMap.Position = new Vector2(0.0f, 0.0f);
                visualMap.PositionPolicy = VisualTransformPolicyType.Absolute;
                visualMap.SizePolicy = VisualTransformPolicyType.Absolute;
                visualMap.Origin = Visual.AlignType.Center;
                visualMap.AnchorPoint = Visual.AlignType.Center;
            }
            if (textVisual != null)
                textVisual.Position = new Vector2(0.0f, mVisualSize.Height / 2 + 25);

            VisualView subVisualView = new VisualView();

            subVisualView.PositionUsesPivotPoint = true;
            subVisualView.ParentOrigin = ParentOrigin.CenterLeft;
            subVisualView.PivotPoint = PivotPoint.Center;
            subVisualView.Position2D = position;
            subVisualView.Size2D = mVisualSize;

            subVisualView.AddVisual(type + "Visual", visualMap);
            subVisualView.AddVisual(type + "TextVisual", textVisual);

            return subVisualView;
        }