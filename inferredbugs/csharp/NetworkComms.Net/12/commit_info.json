{
    "hash": "c6093c838bbd3bae1659db4cb9bc265286ee669b",
    "message": "Various bug fixes. Still debubbing issue in DFS.",
    "file_num_lines": 599,
    "diff_parsed": {
        "added": [
            [
                148,
                "            //File.WriteAllBytes(assemblyConfig.ItemIdentifier + \".iac\", DPSManager.GetDataSerializer<ProtobufSerializer>().SerialiseDataObject<ItemAssemblyConfig>(assemblyConfig).ThreadSafeStream.ToArray());"
            ],
            [
                149,
                ""
            ],
            [
                192,
                "                {"
            ],
            [
                193,
                "                    FileStream newStream = new FileStream(fileName, FileMode.Create, FileAccess.ReadWrite, FileShare.Read, 4096, FileOptions.DeleteOnClose);"
            ],
            [
                194,
                "                    newStream.SetLength(ItemBytesLength);"
            ],
            [
                195,
                "                    newStream.Flush();"
            ],
            [
                196,
                "                    this.ItemDataStream = new ThreadSafeStream(newStream);"
            ],
            [
                197,
                "                }"
            ],
            [
                218,
                "            if (SwarmChunkAvailability.PeerChunkAvailability(NetworkComms.NetworkIdentifier).NumCompletedChunks() > 0 && !LocalItemValid())"
            ],
            [
                222,
                "                AddBuildLogLine(\"Created DFS item (reset local availability) - \" + ItemIdentifier);"
            ],
            [
                223,
                ""
            ],
            [
                224,
                "                if (DFS.loggingEnabled) DFS.Logger.Trace(\"Reset local chunk availability for \" + ItemIdentifier + \" (\"+ItemCheckSum+\")\");"
            ],
            [
                226,
                "            else"
            ],
            [
                227,
                "                AddBuildLogLine(\"Created DFS item - \" + ItemIdentifier);"
            ],
            [
                242,
                ""
            ],
            [
                243,
                "            //Validate what we have just creating"
            ],
            [
                244,
                "            int expectedStreamLength = ChunkPositionLengthDict[TotalNumChunks - 1].Position + ChunkPositionLengthDict[TotalNumChunks - 1].Length;"
            ],
            [
                245,
                "            if (expectedStreamLength != ItemDataStream.Length)"
            ],
            [
                246,
                "                throw new Exception(\"Error initalising ChunkPositionLengthDict. Last entry puts expected stream length at \" + expectedStreamLength + \", but stream length is actually \" + ItemDataStream.Length +\". ItemBytesLength=\" + ItemBytesLength);"
            ],
            [
                290,
                "            if (DFS.loggingEnabled) DFS.logger.Debug(\"Started DFS item assemble - \"+ItemIdentifier+\" (\" + this.ItemCheckSum + \").\");"
            ],
            [
                292,
                "            AddBuildLogLine(\"Started DFS item assemble - \" + ItemIdentifier + \" (\" + this.ItemCheckSum + \").\");"
            ],
            [
                467,
                "                                        AddBuildLogLine(\"NewChunkRequest S1 Idx:\" + newChunkRequest.ChunkIndex + \", Target:\" + newChunkRequest.PeerConnectionInfo.LocalEndPoint.Address.ToString() + \":\" + newChunkRequest.PeerConnectionInfo.LocalEndPoint.Port + \", Id:\" + newChunkRequest.PeerConnectionInfo.NetworkIdentifier);"
            ],
            [
                491,
                "                            while (nonIncomingOutstandingRequests.Count + newRequestCount < maxPeers * DFS.NumConcurrentRequests && //While the total number of requests is less than the total number of peers * our concurrency factor"
            ],
            [
                492,
                "                                nonIncomingOutstandingRequests.Count + newRequestCount < numChunksLeft && //While the total number of requests is less than the number of chunks left"
            ],
            [
                493,
                "                                nonIncomingOutstandingRequests.Count + newRequestCount < DFS.NumTotalGlobalRequests //While the total number of requests is less than the total requests limit"
            ],
            [
                497,
                "                                    throw new Exception(\"Loop safety triggered. outstandingRequests=\" + nonIncomingOutstandingRequests.Count + \". newRequestCount=\" + newRequestCount + \". maxPeers=\" + maxPeers + \". numChunksLeft=\" + numChunksLeft + \".\");"
            ],
            [
                501,
                ""
            ],
            [
                506,
                "                                    int numOutstandingRequestsFromCurrentPeer = nonIncomingOutstandingRequests.Count(entry => entry.PeerConnectionInfo == currentRequestConnectionInfo[i]);"
            ],
            [
                507,
                ""
            ],
            [
                512,
                "                                    if (numOutstandingRequestsFromCurrentPeer + newRequestsFromCurrentPeer >= DFS.NumConcurrentRequests)"
            ],
            [
                516,
                "                                    if (SwarmChunkAvailability.PeerExistsInSwarm(currentRequestConnectionInfo[i].NetworkIdentifier) &&"
            ],
            [
                517,
                "                                        nonLocalPeerAvailability.ContainsKey(currentRequestConnectionInfo[i]) &&"
            ],
            [
                518,
                "                                        !SwarmChunkAvailability.PeerBusy(currentRequestConnectionInfo[i].NetworkIdentifier))"
            ],
            [
                532,
                "                                                AddBuildLogLine(\"NewChunkRequest S2 Idx:\" + newChunkRequest.ChunkIndex + \", Target:\" + newChunkRequest.PeerConnectionInfo.LocalEndPoint.Address.ToString() + \":\" + newChunkRequest.PeerConnectionInfo.LocalEndPoint.Port + \", Id:\" + newChunkRequest.PeerConnectionInfo.NetworkIdentifier);"
            ],
            [
                737,
                "                            {"
            ],
            [
                741,
                "                                SwarmChunkAvailability.RemovePeerFromSwarm(connectionInfo.NetworkIdentifier, true);"
            ],
            [
                742,
                "                            }"
            ],
            [
                973,
                "        /// Load the specified distributed item. Does not add the .DFSItem extension to the fileName"
            ],
            [
                981,
                "            loadedItem.InitialiseChunkPositionLengthDict();"
            ],
            [
                986,
                "        //[ProtoAfterDeserialization]"
            ],
            [
                987,
                "        //private void AfterDeserialisation()"
            ],
            [
                988,
                "        //{"
            ],
            [
                989,
                "        //    InitialiseChunkPositionLengthDict();"
            ],
            [
                990,
                "        //}"
            ],
            [
                991,
                ""
            ]
        ],
        "deleted": [
            [
                190,
                "                    this.ItemDataStream = new ThreadSafeStream(new FileStream(fileName, FileMode.Create, FileAccess.ReadWrite, FileShare.Read, 4096, FileOptions.DeleteOnClose));"
            ],
            [
                211,
                "            if (SwarmChunkAvailability.PeerIsComplete(NetworkComms.NetworkIdentifier, TotalNumChunks) && !LocalItemValid())"
            ],
            [
                220,
                "        [ProtoAfterDeserialization]"
            ],
            [
                221,
                "        private void AfterDeserialisation()"
            ],
            [
                222,
                "        {"
            ],
            [
                223,
                "            InitialiseChunkPositionLengthDict();"
            ],
            [
                224,
                "        }"
            ],
            [
                225,
                ""
            ],
            [
                279,
                "            if (DFS.loggingEnabled) DFS.logger.Debug(\"Started DFS item assemble (\" + this.ItemCheckSum + \").\");"
            ],
            [
                281,
                "            AddBuildLogLine(\"Started DFS item assemble (\" + this.ItemCheckSum + \").\");"
            ],
            [
                456,
                "                                        AddBuildLogLine(\"NewChunkRequest Idx:\" + newChunkRequest.ChunkIndex + \", Target:\" + newChunkRequest.PeerConnectionInfo.LocalEndPoint.Address.ToString() + \":\" + newChunkRequest.PeerConnectionInfo.LocalEndPoint.Port + \", Id:\" + newChunkRequest.PeerConnectionInfo.NetworkIdentifier);"
            ],
            [
                480,
                "                            while (nonIncomingOutstandingRequests.Count + newRequestCount < maxPeers * DFS.NumConcurrentRequests && //If the total number of requests is less than the total number of peers * our concurrency factor"
            ],
            [
                481,
                "                                nonIncomingOutstandingRequests.Count + newRequestCount < numChunksLeft && //If the total number of requests is less than the number of chunks left"
            ],
            [
                482,
                "                                nonIncomingOutstandingRequests.Count + newRequestCount < DFS.NumTotalGlobalRequests //If the total number of requests is less than the total requests limit"
            ],
            [
                486,
                "                                    throw new Exception(\"Loop safety triggered. outstandingRequests=\" + nonIncomingOutstandingRequests.Count +"
            ],
            [
                487,
                "                                \". newRequestCount=\" + newRequestCount +"
            ],
            [
                488,
                "                                \". maxPeers=\" + maxPeers +"
            ],
            [
                489,
                "                                \". numChunksLeft=\" + numChunksLeft +"
            ],
            [
                490,
                "                                \".\");"
            ],
            [
                498,
                "                                    int outstandingRequestsFromCurrentPeer = nonIncomingOutstandingRequests.Count(entry => entry.PeerConnectionInfo == currentRequestConnectionInfo[i]);"
            ],
            [
                503,
                "                                    if (outstandingRequestsFromCurrentPeer + newRequestsFromCurrentPeer >= DFS.NumConcurrentRequests)"
            ],
            [
                507,
                "                                    if (nonLocalPeerAvailability.ContainsKey(currentRequestConnectionInfo[i]) && !SwarmChunkAvailability.PeerBusy(currentRequestConnectionInfo[i].NetworkIdentifier))"
            ],
            [
                521,
                "                                                AddBuildLogLine(\"NewChunkRequest Idx:\" + newChunkRequest.ChunkIndex + \", Target:\" + newChunkRequest.PeerConnectionInfo.LocalEndPoint.Address.ToString() + \":\" + newChunkRequest.PeerConnectionInfo.LocalEndPoint.Port + \", Id:\" + newChunkRequest.PeerConnectionInfo.NetworkIdentifier);"
            ],
            [
                729,
                "                                SwarmChunkAvailability.RemovePeerFromSwarm(connectionInfo.NetworkIdentifier);"
            ],
            [
                960,
                "        /// Load the specified distributed item. Does not add the .DFSItem extension"
            ]
        ]
    },
    "num_lines_added": 45,
    "num_lines_removed": 25
}