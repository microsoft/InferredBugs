{
    "hash": "09e79dc2e71a9c99f898fa138cde17f8aaac6576",
    "message": "Allowed access to send methods that take packets for all connection objects.",
    "file_num_lines": 451,
    "diff_parsed": {
        "added": [
            [
                72,
                "        public void SendObject<sendObjectType>(string sendingPacketType, sendObjectType objectToSend, out long packetSequenceNumber)"
            ],
            [
                73,
                "        {"
            ],
            [
                74,
                "            SendObject(sendingPacketType, objectToSend, ConnectionDefaultSendReceiveOptions, out packetSequenceNumber);"
            ],
            [
                75,
                "        }"
            ],
            [
                85,
                "            //Check to see if we already have a packet"
            ],
            [
                86,
                "            Packet objectToSendAsPacket = objectToSend as Packet;"
            ],
            [
                87,
                "            if (objectToSendAsPacket == null)"
            ],
            [
                88,
                "            {"
            ],
            [
                89,
                "                using (Packet sendPacket = new Packet(sendingPacketType, objectToSend, options))"
            ],
            [
                90,
                "                    SendPacket<sendObjectType>(sendPacket);"
            ],
            [
                91,
                "            }"
            ],
            [
                92,
                "            else"
            ],
            [
                93,
                "            {"
            ],
            [
                94,
                "                if (objectToSendAsPacket.PacketHeader.PacketType != sendingPacketType)"
            ],
            [
                95,
                "                    throw new ArgumentException(\"Unable to send object of type Packet if the PacketHeader.PacketType and sendingPacketType do not match.\");"
            ],
            [
                96,
                ""
            ],
            [
                97,
                "                SendPacket<sendObjectType>(objectToSendAsPacket);"
            ],
            [
                98,
                "            }"
            ],
            [
                110,
                "            Packet objectToSendAsPacket = objectToSend as Packet;"
            ],
            [
                111,
                "            if (objectToSendAsPacket == null)"
            ],
            [
                112,
                "            {"
            ],
            [
                113,
                "                using (Packet sendPacket = new Packet(sendingPacketType, objectToSend, options))"
            ],
            [
                114,
                "                    SendPacket<sendObjectType>(sendPacket, out packetSequenceNumber);"
            ],
            [
                115,
                "            }"
            ],
            [
                116,
                "            else"
            ],
            [
                117,
                "            {"
            ],
            [
                118,
                "                if (objectToSendAsPacket.PacketHeader.PacketType != sendingPacketType)"
            ],
            [
                119,
                "                    throw new ArgumentException(\"Unable to send object of type Packet if the PacketHeader.PacketType and sendingPacketType do not match.\");"
            ],
            [
                120,
                ""
            ],
            [
                121,
                "                SendPacket<sendObjectType>(objectToSendAsPacket, out packetSequenceNumber);"
            ],
            [
                122,
                "            }"
            ],
            [
                243,
                "            //Check to see if we already have a packet"
            ],
            [
                244,
                "            Packet sendObjectAsPacket = sendObject as Packet;"
            ],
            [
                245,
                "            if (sendObjectAsPacket == null)"
            ],
            [
                246,
                "            {"
            ],
            [
                247,
                "                using (Packet sendPacket = new Packet(sendingPacketTypeStr, expectedReturnPacketTypeStr, sendObject, sendOptions))"
            ],
            [
                248,
                "                    SendPacket<sendObjectType>(sendPacket, out sentPacketSequenceNumber);"
            ],
            [
                249,
                "            }"
            ],
            [
                250,
                "            else"
            ],
            [
                251,
                "            {"
            ],
            [
                252,
                "                if (sendObjectAsPacket.PacketHeader.PacketType != sendingPacketTypeStr)"
            ],
            [
                253,
                "                    throw new ArgumentException(\"Unable to send object of type Packet if the PacketHeader.PacketType and sendingPacketType do not match.\");"
            ],
            [
                254,
                ""
            ],
            [
                255,
                "                SendPacket<sendObjectType>(sendObjectAsPacket, out sentPacketSequenceNumber);"
            ],
            [
                256,
                "            }"
            ],
            [
                485,
                "        /// <typeparam name=\"packetPayloadObjectType\">The type of object encapsulated by the provided packet</typeparam>"
            ],
            [
                487,
                "        public void SendPacket<packetPayloadObjectType>(IPacket packet)"
            ],
            [
                490,
                "            SendPacket<packetPayloadObjectType>(packet, out packetSequenceNumber);"
            ],
            [
                496,
                "        /// <typeparam name=\"packetPayloadObjectType\">The type of object encapsulated by the provided packet</typeparam>"
            ],
            [
                499,
                "        public void SendPacket<packetPayloadObjectType>(IPacket packet, out long packetSequenceNumber)"
            ]
        ],
        "deleted": [
            [
                72,
                "        public void SendObject<sendObjectType>(string sendingPacketType, sendObjectType objectToSend, out long packetSequenceNumber) { SendObject(sendingPacketType, objectToSend, ConnectionDefaultSendReceiveOptions, out packetSequenceNumber); }"
            ],
            [
                82,
                "            long packetSequenceNumber;"
            ],
            [
                83,
                "            SendPacket(new Packet(sendingPacketType, objectToSend, options), out packetSequenceNumber);"
            ],
            [
                95,
                "            SendPacket(new Packet(sendingPacketType, objectToSend, options), out packetSequenceNumber);"
            ],
            [
                216,
                "            using(Packet sendPacket = new Packet(sendingPacketTypeStr, expectedReturnPacketTypeStr, sendObject, sendOptions))"
            ],
            [
                217,
                "                SendPacket(sendPacket, out sentPacketSequenceNumber);"
            ],
            [
                447,
                "        internal void SendPacket(IPacket packet)"
            ],
            [
                450,
                "            SendPacket(packet, out packetSequenceNumber);"
            ],
            [
                458,
                "        internal void SendPacket(IPacket packet, out long packetSequenceNumber)"
            ]
        ]
    },
    "num_lines_added": 50,
    "num_lines_removed": 9
}