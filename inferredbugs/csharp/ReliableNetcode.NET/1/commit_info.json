{
    "hash": "3911cf37ecc9bde3ca6711146696acbfe61c8b29",
    "message": "(files not pushed with previous commit - oops!)\nChanged packet header - an extra byte is now used for QoS channel ID (in the future I may add support for adding other channels so that for example more than one Reliable channel could be created and not have head-of-line blocking between each other).\nReliable channel now sends ack packets every 0.1 seconds in the absence of any other sent message. The top bit of a packet prefix byte sent via Reliable channel now indicates if the packet is an ack packet. Ack packets themselves do not themselves participate in packet acking or reliability - they are simply sent unreliably 10 times per second if no other packet is being sent, to ensure that packets are still acked properly.",
    "file_num_lines": 190,
    "diff_parsed": {
        "added": [
            [
                21,
                "\t\tpublic static int ReadPacketHeader(byte[] packetBuffer, int offset, int bufferLength, out byte channelID, out ushort sequence, out ushort ack, out uint ackBits)"
            ],
            [
                23,
                "\t\t\tif (bufferLength < 4)"
            ],
            [
                36,
                "\t\t\t\tchannelID = reader.ReadByte();"
            ],
            [
                37,
                ""
            ],
            [
                38,
                "\t\t\t\t// ack packets don't have sequence numbers"
            ],
            [
                39,
                "\t\t\t\tif ((prefixByte & 0x80) == 0)"
            ],
            [
                40,
                "\t\t\t\t\tsequence = reader.ReadUInt16();"
            ],
            [
                41,
                "\t\t\t\telse"
            ],
            [
                42,
                "\t\t\t\t{"
            ],
            [
                43,
                "\t\t\t\t\tsequence = 0;"
            ],
            [
                44,
                "\t\t\t\t\tConsole.WriteLine(\"Received ack packet\");"
            ],
            [
                45,
                "\t\t\t\t}"
            ],
            [
                120,
                "\t\t\t\tchannelID = reader.ReadByte();"
            ],
            [
                138,
                "\t\t\t\tbyte packetChannelID = 0;"
            ],
            [
                139,
                ""
            ],
            [
                142,
                "\t\t\t\t\tint packetHeaderBytes = ReadPacketHeader(packetBuffer, Defines.FRAGMENT_HEADER_BYTES, bufferLength, out packetChannelID, out packetSequence, out packetAck, out packetAckBits);"
            ],
            [
                162,
                "\t\tpublic static int WriteAckPacket(byte[] packetBuffer, byte channelID, ushort ack, uint ackBits)"
            ],
            [
                163,
                "\t\t{"
            ],
            [
                164,
                "\t\t\tusing (var writer = ByteArrayReaderWriter.Get(packetBuffer))"
            ],
            [
                165,
                "\t\t\t{"
            ],
            [
                166,
                "\t\t\t\tbyte prefixByte = 0x80; // top bit set, indicates ack packet"
            ],
            [
                167,
                ""
            ],
            [
                168,
                "\t\t\t\tif ((ackBits & 0x000000FF) != 0x000000FF)"
            ],
            [
                169,
                "\t\t\t\t\tprefixByte |= (1 << 1);"
            ],
            [
                170,
                ""
            ],
            [
                171,
                "\t\t\t\tif ((ackBits & 0x0000FF00) != 0x0000FF00)"
            ],
            [
                172,
                "\t\t\t\t\tprefixByte |= (1 << 2);"
            ],
            [
                173,
                ""
            ],
            [
                174,
                "\t\t\t\tif ((ackBits & 0x00FF0000) != 0x00FF0000)"
            ],
            [
                175,
                "\t\t\t\t\tprefixByte |= (1 << 3);"
            ],
            [
                176,
                ""
            ],
            [
                177,
                "\t\t\t\tif ((ackBits & 0xFF000000) != 0xFF000000)"
            ],
            [
                178,
                "\t\t\t\t\tprefixByte |= (1 << 4);"
            ],
            [
                179,
                ""
            ],
            [
                180,
                "\t\t\t\twriter.Write(prefixByte);"
            ],
            [
                181,
                "\t\t\t\twriter.Write(channelID);"
            ],
            [
                182,
                ""
            ],
            [
                183,
                "\t\t\t\twriter.Write(ack);"
            ],
            [
                184,
                ""
            ],
            [
                185,
                "\t\t\t\tif ((ackBits & 0x000000FF) != 0x000000FF)"
            ],
            [
                186,
                "\t\t\t\t\twriter.Write((byte)((ackBits & 0x000000FF)));"
            ],
            [
                187,
                ""
            ],
            [
                188,
                "\t\t\t\tif ((ackBits & 0x0000FF00) != 0x0000FF00)"
            ],
            [
                189,
                "\t\t\t\t\twriter.Write((byte)((ackBits & 0x0000FF00) >> 8));"
            ],
            [
                190,
                ""
            ],
            [
                191,
                "\t\t\t\tif ((ackBits & 0x00FF0000) != 0x00FF0000)"
            ],
            [
                192,
                "\t\t\t\t\twriter.Write((byte)((ackBits & 0x00FF0000) >> 16));"
            ],
            [
                193,
                ""
            ],
            [
                194,
                "\t\t\t\tif ((ackBits & 0xFF000000) != 0xFF000000)"
            ],
            [
                195,
                "\t\t\t\t\twriter.Write((byte)((ackBits & 0xFF000000) >> 24));"
            ],
            [
                196,
                ""
            ],
            [
                197,
                "\t\t\t\treturn (int)writer.WritePosition;"
            ],
            [
                198,
                "\t\t\t}"
            ],
            [
                199,
                "\t\t}"
            ],
            [
                200,
                ""
            ],
            [
                224,
                ""
            ],
            [
                226,
                "\t\t\t\twriter.Write(channelID);"
            ]
        ],
        "deleted": [
            [
                21,
                "\t\tpublic static int ReadPacketHeader(byte[] packetBuffer, int offset, int bufferLength, out ushort sequence, out ushort ack, out uint ackBits)"
            ],
            [
                23,
                "\t\t\tif (bufferLength < 3)"
            ],
            [
                36,
                "\t\t\t\tsequence = reader.ReadUInt16();"
            ],
            [
                111,
                "\t\t\t\tchannelID = (byte)(prefixByte >> 6);"
            ],
            [
                112,
                ""
            ],
            [
                132,
                "\t\t\t\t\tint packetHeaderBytes = ReadPacketHeader(packetBuffer, Defines.FRAGMENT_HEADER_BYTES, bufferLength, out packetSequence, out packetAck, out packetAckBits);"
            ],
            [
                175,
                ""
            ],
            [
                176,
                "\t\t\t\tprefixByte |= (byte)( (channelID & 0x03) << 6 );"
            ],
            [
                177,
                ""
            ]
        ]
    },
    "num_lines_added": 57,
    "num_lines_removed": 9
}