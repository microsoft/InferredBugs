  static void Main(string[] args) {
			FtpTrace.FlushOnWrite = true;
			FtpTrace.AddListener(new ConsoleTraceListener());

			try {
				/*foreach (int i in connectionTypes) {
					using (FtpClient cl = new FtpClient()) {
						cl.Credentials = new NetworkCredential(m_user, m_pass);
						cl.Host = m_host;
						cl.EncryptionMode = FtpEncryptionMode.None;
						cl.ValidateCertificate += new FtpSslValidation(cl_ValidateCertificate);
						cl.DataConnectionType = (FtpDataConnectionType)i;
						//cl.Encoding = System.Text.Encoding.Default;
						cl.Connect();
						Upload(cl);
						Download(cl);
						Delete(cl);
					}
				}*/

				//StreamResponses();

				//TestServer();

				//TestManualEncoding();

				//TestServer();

				//TestDisposeWithMultipleThreads();

				//TestMODCOMP_PWD_Parser();
				//TestDispose();
				//TestHash();

				//TestNameListing();
				//TestNameListingFTPS();

				//TestOpenVMSParser();
				// TestIISParser();
				//GetMicrosoftFTPListing();
				//TestReset();
				//TestUTF8();

				//TestDirectoryWithDots();

				//TestUnixListParser();

				// TestFileZillaKick();

				//TestUnixList();
				//TestNetBSDServer();

				// TestConnectionFailure();

				//TestGetObjectInfo();

				//TestFtpPath();

				//TestUnixListing();

				//TestListPath();

				//TestListPathWithHttp11Proxy();

				//TestUploadDownloadFile();

				//TestUploadDownloadManyFiles();

				//TestUploadDownloadZeroLenFile();

				//TestListSpacedPath();

				//TestUploadDownloadManyFiles2();

				TestUploadDownloadFile_UTF();

				//TestUploadDownloadFile_ANSI();

				//TestFilePermissions();

                //Async Tests
			    Console.WriteLine("Running Async Tests");
			    List<Task> tasks = new List<Task>() {
			        TestListPathAsync(),
			        StreamResponsesAsync(),
			        TestGetObjectInfoAsync(),
			        TestHashAsync(),
			        TestUploadDownloadFileAsync(),
			        TestUploadDownloadManyFilesAsync(),
			        TestUploadDownloadManyFiles2Async()
			    };

			    Task.WhenAll(tasks).ContinueWith(t => {
			        Console.Write("Async Tests Completed: ");
			        if (t.IsFaulted) {
			            var exceptions = FlattenExceptions(t.Exception);
			            Console.WriteLine("With {0} Error{1}.", exceptions.Length, exceptions.Length > 1 ? "s" : "");
			            for (int i = 0; i > exceptions.Length; i++) {
			                var ex = exceptions[i];
			                Console.WriteLine("\nException {0}: {1} - {2}", i, ex.GetType().Name, ex.Message);
			                Console.WriteLine(ex.StackTrace);
			            }
			        }
			        else {
			            Console.WriteLine("Successfully");
			        }
			    }).Wait();
			} catch (Exception ex) {
				Console.WriteLine(ex.ToString());
			}

			Console.WriteLine("--DONE--");
			// Console.ReadKey();
		}