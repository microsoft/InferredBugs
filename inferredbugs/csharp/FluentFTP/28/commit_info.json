{
    "hash": "e9bab290f4d80e0f5d0623f60780c988eedd3cd1",
    "message": "GetChecksum improvements & validation",
    "file_num_lines": 325,
    "diff_parsed": {
        "added": [
            [
                22,
                "using HashAlgos = FluentFTP.Helpers.Hashing.HashAlgorithms;"
            ],
            [
                40,
                "\t\t/// 1. HASH command using the first supported algorithm."
            ],
            [
                59,
                "\t\t\tValidateHashAlgorithm(algorithm);"
            ],
            [
                60,
                ""
            ],
            [
                65,
                "\t\t\tvar useFirst = (algorithm == FtpHashAlgorithm.NONE);"
            ],
            [
                66,
                ""
            ],
            [
                73,
                "\t\t\t\t// get the hash of the file using HASH Command"
            ],
            [
                80,
                ""
            ],
            [
                81,
                "\t\t\t\t// switch to the first preferred algorithm"
            ],
            [
                82,
                "\t\t\t\tSetHashAlgorithmInternal(HashAlgos.FirstSupported(HashAlgorithms));"
            ],
            [
                83,
                ""
            ],
            [
                84,
                "\t\t\t\t// get the hash of the file using HASH Command"
            ],
            [
                100,
                "\t\t\t\telse if (HasFeature(FtpCapability.MMD5) && (useFirst || algorithm == FtpHashAlgorithm.MD5)) {"
            ],
            [
                101,
                "\t\t\t\t\tresult.Value = GetHashInternal(path, \"MMD5\");"
            ],
            [
                103,
                "\t\t\t\t}"
            ],
            [
                125,
                "\t\tprivate void ValidateHashAlgorithm(FtpHashAlgorithm algorithm) {"
            ],
            [
                126,
                ""
            ],
            [
                127,
                "\t\t\t// if NO hashing algos or commands supported, throw here"
            ],
            [
                128,
                "\t\t\tif (!HasFeature(FtpCapability.HASH) &&"
            ],
            [
                129,
                "\t\t\t\t!HasFeature(FtpCapability.MD5) &&"
            ],
            [
                130,
                "\t\t\t\t!HasFeature(FtpCapability.XMD5) &&"
            ],
            [
                131,
                "\t\t\t\t!HasFeature(FtpCapability.MMD5) &&"
            ],
            [
                132,
                "\t\t\t\t!HasFeature(FtpCapability.XSHA1) &&"
            ],
            [
                133,
                "\t\t\t\t!HasFeature(FtpCapability.XSHA256) &&"
            ],
            [
                134,
                "\t\t\t\t!HasFeature(FtpCapability.XSHA512) &&"
            ],
            [
                135,
                "\t\t\t\t!HasFeature(FtpCapability.XCRC)) {"
            ],
            [
                136,
                "\t\t\t\tthrow new FtpHashAlgorithmUnsupportedException();"
            ],
            [
                137,
                "\t\t\t}"
            ],
            [
                138,
                ""
            ],
            [
                139,
                "\t\t\t// only if the user has specified a certain hash algorithm"
            ],
            [
                140,
                "\t\t\tvar useFirst = (algorithm == FtpHashAlgorithm.NONE);"
            ],
            [
                141,
                "\t\t\tif (!useFirst) {"
            ],
            [
                142,
                ""
            ],
            [
                143,
                "\t\t\t\t// first check if the HASH command supports the required algo"
            ],
            [
                144,
                "\t\t\t\tif (HasFeature(FtpCapability.HASH) && HashAlgorithms.HasFlag(algorithm)) {"
            ],
            [
                145,
                ""
            ],
            [
                146,
                "\t\t\t\t\t// we are good"
            ],
            [
                147,
                ""
            ],
            [
                148,
                "\t\t\t\t}"
            ],
            [
                149,
                "\t\t\t\telse {"
            ],
            [
                150,
                ""
            ],
            [
                151,
                "\t\t\t\t\t// second check if the special FTP command is supported based on the algo"
            ],
            [
                152,
                "\t\t\t\t\tif (algorithm == FtpHashAlgorithm.MD5 && !HasFeature(FtpCapability.MD5) &&"
            ],
            [
                153,
                "\t\t\t\t\t\t!HasFeature(FtpCapability.XMD5) && !HasFeature(FtpCapability.MMD5)) {"
            ],
            [
                154,
                "\t\t\t\t\t\tthrow new FtpHashAlgorithmUnsupportedException(FtpHashAlgorithm.MD5, \"MD5, XMD5, MMD5\");"
            ],
            [
                155,
                "\t\t\t\t\t}"
            ],
            [
                156,
                "\t\t\t\t\tif (algorithm == FtpHashAlgorithm.SHA1 && !HasFeature(FtpCapability.XSHA1)) {"
            ],
            [
                157,
                "\t\t\t\t\t\tthrow new FtpHashAlgorithmUnsupportedException(FtpHashAlgorithm.SHA1, \"XSHA1\");"
            ],
            [
                158,
                "\t\t\t\t\t}"
            ],
            [
                159,
                "\t\t\t\t\tif (algorithm == FtpHashAlgorithm.SHA256 && !HasFeature(FtpCapability.XSHA256)) {"
            ],
            [
                160,
                "\t\t\t\t\t\tthrow new FtpHashAlgorithmUnsupportedException(FtpHashAlgorithm.SHA256, \"XSHA256\");"
            ],
            [
                161,
                "\t\t\t\t\t}"
            ],
            [
                162,
                "\t\t\t\t\tif (algorithm == FtpHashAlgorithm.SHA512 && !HasFeature(FtpCapability.XSHA512)) {"
            ],
            [
                163,
                "\t\t\t\t\t\tthrow new FtpHashAlgorithmUnsupportedException(FtpHashAlgorithm.SHA512, \"XSHA512\");"
            ],
            [
                164,
                "\t\t\t\t\t}"
            ],
            [
                165,
                "\t\t\t\t\tif (algorithm == FtpHashAlgorithm.CRC && !HasFeature(FtpCapability.XCRC)) {"
            ],
            [
                166,
                "\t\t\t\t\t\tthrow new FtpHashAlgorithmUnsupportedException(FtpHashAlgorithm.CRC, \"XCRC\");"
            ],
            [
                167,
                "\t\t\t\t\t}"
            ],
            [
                168,
                ""
            ],
            [
                169,
                "\t\t\t\t\t// we are good"
            ],
            [
                170,
                "\t\t\t\t}"
            ],
            [
                171,
                "\t\t\t}"
            ],
            [
                172,
                "\t\t}"
            ],
            [
                173,
                ""
            ],
            [
                180,
                "\t\t/// 1. HASH command using the first supported algorithm."
            ],
            [
                200,
                "\t\t\tValidateHashAlgorithm(algorithm);"
            ],
            [
                201,
                ""
            ],
            [
                206,
                "\t\t\tvar useFirst = (algorithm == FtpHashAlgorithm.NONE);"
            ],
            [
                207,
                ""
            ],
            [
                214,
                "\t\t\t\t// get the hash of the file using HASH Command"
            ],
            [
                221,
                ""
            ],
            [
                222,
                "\t\t\t\t// switch to the first preferred algorithm"
            ],
            [
                223,
                "\t\t\t\tawait SetHashAlgorithmInternalAsync(HashAlgos.FirstSupported(HashAlgorithms), token);"
            ],
            [
                224,
                ""
            ],
            [
                225,
                "\t\t\t\t// get the hash of the file using HASH Command"
            ],
            [
                242,
                "\t\t\t\telse if (HasFeature(FtpCapability.MMD5) && (useFirst || algorithm == FtpHashAlgorithm.MD5)) {"
            ],
            [
                243,
                "\t\t\t\t\tresult.Value = await GetHashInternalAsync(path, \"MMD5\", token);"
            ],
            [
                245,
                "\t\t\t\t}"
            ],
            [
                273,
                "\t\t/// Gets the hash of the specified file using the given command."
            ],
            [
                274,
                "\t\t/// </summary>"
            ],
            [
                296,
                "\t\t/// Gets the hash of the specified file using the given command."
            ],
            [
                331,
                "\t\t\t\t\t\ttype = HashAlgos.FromString(reply.Message);"
            ],
            [
                357,
                "\t\t\t\t\ttype = HashAlgos.FromString(reply.Message);"
            ],
            [
                386,
                "\t\t\t\tstring algoName = HashAlgos.PrintToString(algorithm);"
            ],
            [
                417,
                "\t\t\tstring algoName = HashAlgos.PrintToString(algorithm);"
            ],
            [
                430,
                "\t\t/// Gets the hash of an object on the server using the currently selected hash algorithm."
            ],
            [
                452,
                "\t\t/// Gets the hash of an object on the server using the currently selected hash algorithm."
            ],
            [
                470,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need. Or use CompareFile.\", true)]"
            ],
            [
                475,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need. Or use CompareFile.\", true)]"
            ],
            [
                478,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need. Or use CompareFile.\", true)]"
            ],
            [
                483,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to MD5. Or use CompareFile.\", true)]"
            ],
            [
                487,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to CRC. Or use CompareFile.\", true)]"
            ],
            [
                491,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to MD5. Or use CompareFile.\", true)]"
            ],
            [
                495,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA1. Or use CompareFile.\", true)]"
            ],
            [
                499,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA256. Or use CompareFile.\", true)]"
            ],
            [
                503,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA512. Or use CompareFile.\", true)]"
            ],
            [
                510,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need. Or use CompareFile.\", true)]"
            ],
            [
                514,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need. Or use CompareFile.\", true)]"
            ],
            [
                517,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need. Or use CompareFile.\", true)]"
            ],
            [
                522,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to MD5. Or use CompareFile.\", true)]"
            ],
            [
                526,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to CRC. Or use CompareFile.\", true)]"
            ],
            [
                530,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to MD5. Or use CompareFile.\", true)]"
            ],
            [
                534,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA1. Or use CompareFile.\", true)]"
            ],
            [
                538,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA256. Or use CompareFile.\", true)]"
            ],
            [
                542,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA512. Or use CompareFile.\", true)]"
            ]
        ],
        "deleted": [
            [
                39,
                "\t\t/// 1. HASH command; server preferred algorithm. See <see cref=\"FtpClient.SetHashAlgorithmInternal\"/>"
            ],
            [
                63,
                "\t\t\tvar useFirst = algorithm == FtpHashAlgorithm.NONE;"
            ],
            [
                69,
                "\t\t\t\t// get the hash of the file"
            ],
            [
                91,
                "\t\t\t\t/*else if (HasFeature(FtpCapability.MMD5) && (useFirst || algorithm == FtpHashAlgorithm.MD5)) {"
            ],
            [
                92,
                "\t\t\t\t\tresult.Value = GetHashInternal(path, \"MD5\");"
            ],
            [
                94,
                "\t\t\t\t}*/"
            ],
            [
                122,
                "\t\t/// 1. HASH command; server preferred algorithm. See <see cref=\"FtpClient.SetHashAlgorithmInternal\"/>"
            ],
            [
                147,
                "\t\t\tvar useFirst = algorithm == FtpHashAlgorithm.NONE;"
            ],
            [
                153,
                "\t\t\t\t// get the hash of the file"
            ],
            [
                176,
                "\t\t\t\t/*else if (HasFeature(FtpCapability.MMD5) && (useFirst || algorithm == FtpHashAlgorithm.MD5)) {"
            ],
            [
                177,
                "\t\t\t\t\tresult.Value = await GetHashInternalAsync(path, \"MD5\", token);"
            ],
            [
                179,
                "\t\t\t\t}*/"
            ],
            [
                207,
                "\t\t/// Gets the hash of the specified file using the given comomand."
            ],
            [
                208,
                "\t\t/// This is a non-standard extension to the protocol and may or may not work."
            ],
            [
                230,
                "\t\t/// Gets the MD5 hash of the specified file using MD5 asynchronously. This is a non-standard extension"
            ],
            [
                231,
                "\t\t/// to the protocol and may or may not work. A FtpCommandException will be"
            ],
            [
                232,
                "\t\t/// thrown if the command fails."
            ],
            [
                234,
                "\t\t/// <param name=\"path\">Full or relative path to remote file</param>"
            ],
            [
                235,
                "\t\t/// <param name=\"token\">The token that can be used to cancel the entire process</param>"
            ],
            [
                236,
                "\t\t/// <returns>Server response, presumably the MD5 hash.</returns>"
            ],
            [
                237,
                "\t\t/// <exception cref=\"FtpCommandException\">The command fails</exception>"
            ],
            [
                260,
                "\t\t/// <remarks>"
            ],
            [
                261,
                "\t\t///  This feature is experimental. See this link for details:"
            ],
            [
                262,
                "\t\t/// http://tools.ietf.org/html/draft-bryan-ftpext-hash-02"
            ],
            [
                263,
                "\t\t/// </remarks>"
            ],
            [
                264,
                "\t\t/// <returns>The <see cref=\"FtpHashAlgorithm\"/> flag or <see cref=\"FtpHashAlgorithm.NONE\"/> if there was a problem.</returns>"
            ],
            [
                276,
                "\t\t\t\t\t\ttype = Helpers.Hashing.HashAlgorithms.FromString(reply.Message);"
            ],
            [
                294,
                "\t\t/// <param name=\"token\">The token that can be used to cancel the entire process</param>"
            ],
            [
                295,
                "\t\t/// <returns>The <see cref=\"FtpHashAlgorithm\"/> flag or <see cref=\"FtpHashAlgorithm.NONE\"/> if there was a problem.</returns>"
            ],
            [
                304,
                "\t\t\t\t\ttype = Helpers.Hashing.HashAlgorithms.FromString(reply.Message);"
            ],
            [
                318,
                "\t\t/// <remarks>"
            ],
            [
                319,
                "\t\t/// If you specify an algorithm not listed in <see cref=\"FtpClient.HashAlgorithms\"/>"
            ],
            [
                320,
                "\t\t/// a <see cref=\"NotImplementedException\"/> will be thrown"
            ],
            [
                321,
                "\t\t/// so be sure to query that list of Flags before"
            ],
            [
                322,
                "\t\t/// selecting a hash algorithm. Support for the"
            ],
            [
                323,
                "\t\t/// HASH command is experimental. Please see"
            ],
            [
                324,
                "\t\t/// the following link for more details:"
            ],
            [
                325,
                "\t\t/// http://tools.ietf.org/html/draft-bryan-ftpext-hash-02"
            ],
            [
                326,
                "\t\t/// </remarks>"
            ],
            [
                327,
                "\t\t/// <param name=\"algorithm\">Hash Algorithm</param>"
            ],
            [
                328,
                "\t\t/// <exception cref=\"System.NotImplementedException\">Thrown if the selected algorithm is not available on the server</exception>"
            ],
            [
                344,
                "\t\t\t\tstring algoName = Helpers.Hashing.HashAlgorithms.ToString(algorithm);"
            ],
            [
                363,
                "\t\t/// <param name=\"algorithm\">Hash algorithm to use</param>"
            ],
            [
                364,
                "\t\t/// <param name=\"token\">The token that can be used to cancel the entire process</param>"
            ],
            [
                365,
                "\t\t/// <exception cref=\"System.NotImplementedException\">Thrown if the selected algorithm is not available on the server</exception>"
            ],
            [
                378,
                "\t\t\tstring algoName = Helpers.Hashing.HashAlgorithms.ToString(algorithm);"
            ],
            [
                391,
                "\t\t/// Gets the hash of an object on the server using the currently selected hash algorithm, or null if hash cannot be parsed."
            ],
            [
                393,
                "\t\t/// <param name=\"path\">Full or relative path of the object to compute the hash for.</param>"
            ],
            [
                394,
                "\t\t/// <returns>The hash of the file.</returns>"
            ],
            [
                415,
                "\t\t/// Gets the hash of an object on the server using the currently selected hash algorithm, or null if hash cannot be parsed."
            ],
            [
                417,
                "\t\t/// <remarks>"
            ],
            [
                418,
                "\t\t/// Supported algorithms, if any, are available in the <see cref=\"HashAlgorithms\"/>"
            ],
            [
                419,
                "\t\t/// property. You should confirm that it's not equal"
            ],
            [
                420,
                "\t\t/// to <see cref=\"FtpHashAlgorithm.NONE\"/> before calling this method"
            ],
            [
                421,
                "\t\t/// otherwise the server trigger a <see cref=\"FtpCommandException\"/>"
            ],
            [
                422,
                "\t\t/// due to a lack of support for the HASH command. You can"
            ],
            [
                423,
                "\t\t/// set the algorithm using the <see cref=\"SetHashAlgorithmInternal\"/> method and"
            ],
            [
                424,
                "\t\t/// you can query the server for the current hash algorithm"
            ],
            [
                425,
                "\t\t/// using the <see cref=\"GetHashAlgorithm\"/> method."
            ],
            [
                426,
                "\t\t/// </remarks>"
            ],
            [
                427,
                "\t\t/// <param name=\"path\">The file you want the server to compute the hash for</param>"
            ],
            [
                428,
                "\t\t/// <param name=\"token\">The token that can be used to cancel the entire process</param>"
            ],
            [
                429,
                "\t\t/// <exception cref=\"FtpCommandException\">"
            ],
            [
                430,
                "\t\t/// Thrown if the <see cref=\"HashAlgorithms\"/> property is <see cref=\"FtpHashAlgorithm.NONE\"/>,"
            ],
            [
                431,
                "\t\t/// the remote path does not exist, or the command cannot be executed."
            ],
            [
                432,
                "\t\t/// </exception>"
            ],
            [
                433,
                "\t\t/// <exception cref=\"ArgumentException\">Path argument is null</exception>"
            ],
            [
                434,
                "\t\t/// <exception cref=\"NotImplementedException\">Thrown when an unknown hash algorithm type is returned by the server</exception>"
            ],
            [
                435,
                "\t\t/// <returns>The hash of the file.</returns>"
            ],
            [
                452,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need.\", true)]"
            ],
            [
                457,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need.\", true)]"
            ],
            [
                460,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need.\", true)]"
            ],
            [
                465,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to MD5.\", true)]"
            ],
            [
                469,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to CRC.\", true)]"
            ],
            [
                473,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to MD5.\", true)]"
            ],
            [
                477,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA1.\", true)]"
            ],
            [
                481,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA256.\", true)]"
            ],
            [
                485,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA512.\", true)]"
            ],
            [
                492,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need.\", true)]"
            ],
            [
                496,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need.\", true)]"
            ],
            [
                499,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and pass the algorithm type that you need.\", true)]"
            ],
            [
                504,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to MD5.\", true)]"
            ],
            [
                508,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to CRC.\", true)]"
            ],
            [
                512,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to MD5.\", true)]"
            ],
            [
                516,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA1.\", true)]"
            ],
            [
                520,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA256.\", true)]"
            ],
            [
                524,
                "\t\t[ObsoleteAttribute(\"Use GetChecksum instead and set the algorithm to SHA512.\", true)]"
            ]
        ]
    },
    "num_lines_added": 105,
    "num_lines_removed": 87
}