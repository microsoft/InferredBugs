{
    "hash": "b6eeefed62458d9eea2b4e3ef0febc7c11537915",
    "message": "fixed: #556: More composable and consistent RegisterMany API\nadded: Test for #554 with RegisterMany\nremoving: Some RegisterMany overloads\nadded: [ImTools] Fun.Always\ncleanup: Registrator xml-doc comments\n\n--HG--\nbranch : dev",
    "file_num_lines": 159,
    "diff_parsed": {
        "added": [
            [
                4,
                "using ImTools;"
            ],
            [
                99,
                "            container.RegisterMany(typeof(CompositeOperation).One(), _ => new[]{ typeof(IOperation), typeof(IAction) });"
            ],
            [
                104,
                "            Assert.IsInstanceOf<CompositeOperation>(service.Action);"
            ],
            [
                114,
                "            container.RegisterMany(typeof(CompositeOperation).One(), _ => new[] { typeof(IOperation), typeof(IAction) });"
            ],
            [
                119,
                "            Assert.IsInstanceOf<CompositeOperation>(service.Action);"
            ],
            [
                138,
                "        public class CompositeOperation : IOperation"
            ],
            [
                142,
                "            public CompositeOperation(IEnumerable<IOperation> operations)"
            ]
        ],
        "deleted": [
            [
                98,
                "            container.RegisterMany("
            ],
            [
                99,
                "                new[] {typeof(IOperation), typeof(IAction)},"
            ],
            [
                100,
                "                typeof(CompositeOpertaion));"
            ],
            [
                105,
                "            Assert.IsInstanceOf<CompositeOpertaion>(service.Action);"
            ],
            [
                115,
                "            container.RegisterMany("
            ],
            [
                116,
                "                new[] { typeof(IOperation), typeof(IAction) },"
            ],
            [
                117,
                "                typeof(CompositeOpertaion));"
            ],
            [
                122,
                "            Assert.IsInstanceOf<CompositeOpertaion>(service.Action);"
            ],
            [
                141,
                "        public class CompositeOpertaion : IOperation"
            ],
            [
                145,
                "            public CompositeOpertaion(IEnumerable<IOperation> operations)"
            ]
        ]
    },
    "num_lines_added": 7,
    "num_lines_removed": 10
}