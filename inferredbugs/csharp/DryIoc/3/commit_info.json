{
    "hash": "0f8005ae2d099a5e028a9ecebdea5dfb157bc8de",
    "message": "changed: Replaced IRegistry.Ref<ResolutionRules> with just ResolutionRules. Preventing to change rules in current container for predictability and safety.\nadded: Container.WithNewRules method to reuse registry and scopes from source container, but change rules.\nchanged: AttributedModel.WithAttributedModel to transparently create new container with new rules using Container.WithNewRules.\n\n--HG--\nbranch : edge",
    "file_num_lines": 2327,
    "diff_parsed": {
        "added": [
            [
                51,
                "            ResolutionRules = resolutionRules ?? ResolutionRules.Default;"
            ],
            [
                65,
                "        public Container(ResolutionRules resolutionRules,"
            ],
            [
                71,
                "            ResolutionRules = resolutionRules;"
            ],
            [
                85,
                "        public Container WithNewRules(ResolutionRules newRules)"
            ],
            [
                86,
                "        {"
            ],
            [
                87,
                "            return new Container(newRules, _factories, _decorators, _genericWrappers, _singletonScope, _currentScope);"
            ],
            [
                88,
                "        }"
            ],
            [
                89,
                ""
            ],
            [
                92,
                "            return new Container(ResolutionRules, _factories, _decorators, _genericWrappers, _singletonScope, new Scope());"
            ],
            [
                97,
                "            return new Container(ResolutionRules.With((request, _) =>"
            ],
            [
                101,
                "                return factory == null ? null"
            ],
            [
                102,
                "                    : new ExpressionFactory((req, __) => factory.GetExpression(req, parentRegistry));"
            ],
            [
                103,
                "            }));"
            ],
            [
                108,
                "            return new Container(ResolutionRules, _factories, _decorators, _genericWrappers, _singletonScope, _currentScope);"
            ],
            [
                293,
                "        public ResolutionRules ResolutionRules { get; private set; }"
            ],
            [
                294,
                ""
            ],
            [
                300,
                "            var rules = ResolutionRules;"
            ],
            [
                321,
                "            return GetFactoryOrDefault(serviceType.ThrowIfNull(), serviceKey, ResolutionRules.FactorySelector,"
            ],
            [
                322,
                "                retryForOpenGenericServiceType: true);"
            ],
            [
                719,
                "                var indexExpr = Expression.Constant(index.ThrowIf(-1), typeof(int));"
            ],
            [
                748,
                "        #region Implementation"
            ],
            [
                749,
                ""
            ],
            [
                750,
                "        private static readonly MethodInfo _stateGetMethod = typeof (AppendableArray<object>).GetMethod(\"Get\");"
            ],
            [
                755,
                ""
            ],
            [
                756,
                "        #endregion"
            ],
            [
                1645,
                "                : registry.ResolutionRules.ForConstructorParameterServiceKey.GetFirstNonDefault(r => r(ctorParam, this, registry));"
            ],
            [
                1894,
                "                    if (parent != null && parent.Enumerate().Any(OpenGenericsSupport.IsFunc))"
            ],
            [
                1895,
                "                    {"
            ],
            [
                1896,
                "                        var factoryExpr = expression.ToFactoryExpression();"
            ],
            [
                1898,
                "                        var expressionReused = Expression.Call(reuseExpr, reuseMethod,"
            ],
            [
                1899,
                "                            Expression.Constant(ID), factoryExpr, ResolutionState.FactoryDelegateParamExpr);"
            ],
            [
                1900,
                "                    }"
            ],
            [
                1901,
                "                    else"
            ],
            [
                1903,
                "                        // We need to create ResolutionScope on demand, and then use it when invoking factory delegate for resolution root."
            ],
            [
                1904,
                ""
            ],
            [
                1906,
                ""
            ],
            [
                1908,
                ""
            ],
            [
                2187,
                "            var rules = registry.ResolutionRules;"
            ],
            [
                2532,
                "        ResolutionRules ResolutionRules { get; }"
            ],
            [
                2922,
                "        /// Based on Eric Lippert http://blogs.msdn.com/b/ericlippert/archive/2008/01/21/immutability-in-c-part-nine-academic-plus-my-avl-tree-implementation.aspx"
            ]
        ],
        "deleted": [
            [
                46,
                "    /// - change: Add reuse to Setup, as it is not supported by decorators."
            ],
            [
                52,
                "            _resolutionRules = Ref.Of(resolutionRules ?? DryIoc.ResolutionRules.Default);"
            ],
            [
                66,
                "        public Container("
            ],
            [
                67,
                "            Ref<ResolutionRules> resolutionRules,"
            ],
            [
                73,
                "            _resolutionRules = resolutionRules;"
            ],
            [
                89,
                "            return new Container(ResolutionRules,"
            ],
            [
                90,
                "                _factories, _decorators, _genericWrappers, _singletonScope,"
            ],
            [
                91,
                "                currentScope: new Scope());"
            ],
            [
                96,
                "            var rules = ResolutionRules.Value;"
            ],
            [
                97,
                "            rules = rules.With((request, _) =>"
            ],
            [
                101,
                "                if (factory == null)"
            ],
            [
                102,
                "                    return null;"
            ],
            [
                103,
                "                return new ExpressionFactory((req, __) => factory.GetExpression(req, parentRegistry));"
            ],
            [
                104,
                "            });"
            ],
            [
                105,
                "            return new Container(rules);"
            ],
            [
                110,
                "            return new Container(_resolutionRules,"
            ],
            [
                111,
                "                _factories, _decorators, _genericWrappers, _singletonScope, _currentScope);"
            ],
            [
                291,
                "        public Ref<ResolutionRules> ResolutionRules { get { return _resolutionRules; } }"
            ],
            [
                292,
                ""
            ],
            [
                303,
                "            var rules = ResolutionRules.Value;"
            ],
            [
                324,
                "            return GetFactoryOrDefault(serviceType.ThrowIfNull(), serviceKey,"
            ],
            [
                325,
                "                ResolutionRules.Value.FactorySelector, retryForOpenGenericServiceType: true);"
            ],
            [
                592,
                "        private readonly Ref<ResolutionRules> _resolutionRules;"
            ],
            [
                723,
                "                var indexExpr = Expression.Constant(index.ThrowIf(-1), typeof (int));"
            ],
            [
                752,
                "        private static readonly MethodInfo _stateGetMethod = typeof(AppendableArray<object>).GetMethod(\"Get\");"
            ],
            [
                1645,
                "                : registry.ResolutionRules.Value.ForConstructorParameterServiceKey.GetFirstNonDefault(r => r(ctorParam, this, registry));"
            ],
            [
                1895,
                "                    if (parent == null || !parent.Enumerate().Any(OpenGenericsSupport.IsFunc))"
            ],
            [
                1902,
                "                    else"
            ],
            [
                1903,
                "                    {"
            ],
            [
                1904,
                "                        var factoryExpr = expression.ToFactoryExpression();"
            ],
            [
                1905,
                ""
            ],
            [
                1906,
                "                        var expressionReused = Expression.Call(reuseExpr, reuseMethod,"
            ],
            [
                1907,
                "                            Expression.Constant(ID), factoryExpr, ResolutionState.FactoryDelegateParamExpr);"
            ],
            [
                1908,
                "                    }"
            ],
            [
                2184,
                "            var rules = registry.ResolutionRules.Value;"
            ],
            [
                2529,
                "        Ref<ResolutionRules> ResolutionRules { get; }"
            ],
            [
                2919,
                "        /// Based on Eric Lippert's http://blogs.msdn.com/b/ericlippert/archive/2008/01/21/immutability-in-c-part-nine-academic-plus-my-avl-tree-implementation.aspx"
            ]
        ]
    },
    "num_lines_added": 40,
    "num_lines_removed": 37
}