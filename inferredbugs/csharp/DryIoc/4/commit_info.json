{
    "hash": "4c6f47894709e98deaea49aabe0adf208269af09",
    "message": "fixed: ThreadReuse/tests and ThreadStaticAttribute is not longer required.\nchanged: Renamed IReuse.Of method to GetScope.\nchanged: IReuse.GetScope returns IScope instead of Scope.\ncleanup: MefAttributedModel TODOs - they where moved to BB issues.\nTODO: ResolutionState cleanup required before merging into _dev_ branch.\n\n--HG--\nbranch : edge",
    "file_num_lines": 2300,
    "diff_parsed": {
        "added": [
            [
                58,
                "            _resolutionState = new ResolutionState();"
            ],
            [
                67,
                "            IScope singletonScope, IScope currentScope)"
            ],
            [
                78,
                "            _resolutionState = new ResolutionState();"
            ],
            [
                90,
                "            return new Container(ResolutionRules, _factories, _decorators, _genericWrappers, _singletonScope,"
            ],
            [
                91,
                "                new Scope());"
            ],
            [
                112,
                "            ((IDisposable)_currentScope).Dispose();"
            ],
            [
                117,
                "            return new Request(Ref.Of(_resolutionState), Ref.Of<IScope>(), null, serviceType, serviceKey);"
            ],
            [
                293,
                "        IScope IRegistry.SingletonScope { get { return _singletonScope; } }"
            ],
            [
                294,
                "        IScope IRegistry.CurrentScope { get { return _currentScope; } }"
            ],
            [
                592,
                "        private readonly IScope _singletonScope, _currentScope;"
            ],
            [
                659,
                "        public ResolutionState(): this("
            ],
            [
                660,
                "            Ref.Of(AppendableArray<object>.Empty), Ref.Of(HashTree<int, Expression>.Empty),"
            ],
            [
                661,
                "            Ref.Of(HashTree<int, Expression>.Empty))"
            ],
            [
                662,
                "        {}"
            ],
            [
                719,
                "        private ResolutionState(Ref<AppendableArray<object>> items, Ref<HashTree<int, Expression>> itemsExpressions,"
            ],
            [
                802,
                "    public delegate object FactoryDelegate(ResolutionState state, IScope resolutionScope);"
            ],
            [
                1583,
                "        public static readonly ParameterExpression ResolutionScopeParamExpr = Expression.Parameter(typeof(IScope), \"scope\");"
            ],
            [
                1585,
                "        public static IScope GetScope(ref IScope scope)"
            ],
            [
                1590,
                "        public static readonly MethodInfo GetScopeMethod = typeof(Request).GetMethod(\"GetScope\");"
            ],
            [
                1593,
                "        public IScope ResolutionScope"
            ],
            [
                1598,
                "        public IScope CreateResolutionScope()"
            ],
            [
                1607,
                "        public readonly Request Parent;         // null for resolution root"
            ],
            [
                1609,
                "        public readonly object ServiceKey;      // null by default, string for named or integer index for multiple defaults"
            ],
            [
                1610,
                "        public readonly object DependencyInfo;  // either Reflection.ParameterInfo, PropertyInfo or FieldInfo. Used for Print only"
            ],
            [
                1708,
                "        internal Request(Ref<ResolutionState> resolutionState, Ref<IScope> resolutionScope,"
            ],
            [
                1723,
                "        private readonly Ref<IScope> _resolutionScope;"
            ],
            [
                1889,
                "                    var scope = Reuse.GetScope(request, registry);"
            ],
            [
                1896,
                "                        var factoryDelegate = expression.ToFactoryExpression().Compile();"
            ],
            [
                1929,
                "                var scope = Reuse.GetScope(request, registry);"
            ],
            [
                1964,
                "        protected Expression GetReusedItemExpression(Request request, IScope scope, Expression expression)"
            ],
            [
                1967,
                "                : request.ResolutionState.GetItemExpression(scope, typeof(IScope));"
            ],
            [
                1969,
                "            var getScopedItemMethod = typeof(IScope).GetMethod(\"GetOrAdd\").MakeGenericMethod(expression.Type);"
            ],
            [
                2330,
                "                    var scope = Reuse.GetScope(request, registry);"
            ],
            [
                2350,
                "                    expression = GetReusedItemExpression(request, Reuse.GetScope(request, registry), expression);"
            ],
            [
                2392,
                "    public interface IScope"
            ],
            [
                2393,
                "    {"
            ],
            [
                2394,
                "        T GetOrAdd<T>(int id, Func<T> factory);"
            ],
            [
                2395,
                "    }"
            ],
            [
                2396,
                ""
            ],
            [
                2397,
                "    public sealed class Scope : IScope, IDisposable"
            ],
            [
                2439,
                "        IScope GetScope(Request request, IRegistry registry);"
            ],
            [
                2444,
                "        public IScope GetScope(Request request, IRegistry registry)"
            ],
            [
                2452,
                "        public IScope GetScope(Request request, IRegistry registry)"
            ],
            [
                2460,
                "        public IScope GetScope(Request request, IRegistry registry)"
            ],
            [
                2500,
                "        IScope CurrentScope { get; }"
            ],
            [
                2501,
                "        IScope SingletonScope { get; }"
            ]
        ],
        "deleted": [
            [
                40,
                "    /// - change: Minimize Expression use by wrapping helper expression constructs into methods."
            ],
            [
                59,
                "            _resolutionState = ResolutionState.New(_singletonScope, _currentScope);"
            ],
            [
                68,
                "            Scope singletonScope, Scope currentScope)"
            ],
            [
                79,
                "            _resolutionState = ResolutionState.New(singletonScope, currentScope);"
            ],
            [
                91,
                "            return new Container(ResolutionRules, _factories, _decorators, _genericWrappers, _singletonScope, new Scope());"
            ],
            [
                112,
                "            _currentScope.Dispose();"
            ],
            [
                117,
                "            return new Request(Ref.Of(_resolutionState), Ref.Of<Scope>(), null, serviceType, serviceKey);"
            ],
            [
                293,
                "        Scope IRegistry.SingletonScope { get { return _singletonScope; } }"
            ],
            [
                294,
                "        Scope IRegistry.CurrentScope { get { return _currentScope; } }"
            ],
            [
                592,
                "        private readonly Scope _singletonScope, _currentScope;"
            ],
            [
                659,
                "        public readonly Scope SingletonScope, CurrentScope;"
            ],
            [
                660,
                ""
            ],
            [
                661,
                "        public static ResolutionState New(Scope singletonScope, Scope currentScope)"
            ],
            [
                662,
                "        {"
            ],
            [
                663,
                "            return new ResolutionState(singletonScope, currentScope, null,"
            ],
            [
                664,
                "                Ref.Of(AppendableArray<object>.Empty), Ref.Of(HashTree<int, Expression>.Empty),"
            ],
            [
                665,
                "                Ref.Of(HashTree<int, Expression>.Empty));"
            ],
            [
                666,
                "        }"
            ],
            [
                667,
                ""
            ],
            [
                668,
                "        public static Scope GetOrAddResolutionScope(ref ResolutionState state)"
            ],
            [
                669,
                "        {"
            ],
            [
                670,
                "            if (state._resolutionScope == null)"
            ],
            [
                671,
                "                Ref.Swap(ref state, st => st.WithNewResolutionScope());"
            ],
            [
                672,
                "            return state._resolutionScope;"
            ],
            [
                673,
                "        }"
            ],
            [
                674,
                ""
            ],
            [
                675,
                "        public ResolutionState WithNewResolutionScope()"
            ],
            [
                676,
                "        {"
            ],
            [
                677,
                "            return _resolutionScope != null ? this :"
            ],
            [
                678,
                "                new ResolutionState(SingletonScope, CurrentScope, new Scope(), _items, _itemsExpressions, _factoryExpressions);"
            ],
            [
                679,
                "        }"
            ],
            [
                736,
                "        private ResolutionState(Scope singletonScope, Scope currentScope, Scope resolutionScope,"
            ],
            [
                737,
                "            Ref<AppendableArray<object>> items, Ref<HashTree<int, Expression>> itemsExpressions,"
            ],
            [
                740,
                "            SingletonScope = singletonScope;"
            ],
            [
                741,
                "            CurrentScope = currentScope;"
            ],
            [
                742,
                "            _resolutionScope = resolutionScope;"
            ],
            [
                748,
                "        private readonly Scope _resolutionScope;"
            ],
            [
                824,
                "    public delegate object FactoryDelegate(ResolutionState state, Scope resolutionScope);"
            ],
            [
                1605,
                "        public static readonly ParameterExpression ResolutionScopeParamExpr = Expression.Parameter(typeof (Scope), \"rs\");"
            ],
            [
                1607,
                "        public static Scope GetScope(ref Scope scope)"
            ],
            [
                1612,
                "        public static readonly MethodInfo GetScopeMethod = typeof (Request).GetMethod(\"GetScope\");"
            ],
            [
                1615,
                "        public Scope ResolutionScope"
            ],
            [
                1620,
                "        public Scope CreateResolutionScope()"
            ],
            [
                1629,
                "        public readonly Request Parent;             // null for resolution root"
            ],
            [
                1631,
                "        public readonly object ServiceKey;          // null by default, string for named or integer index for multiple defaults"
            ],
            [
                1632,
                "        public readonly object DependencyInfo;      // either Reflection.ParameterInfo, PropertyInfo or FieldInfo. Used for Print only"
            ],
            [
                1730,
                "        internal Request(Ref<ResolutionState> resolutionState, Ref<Scope> resolutionScope,"
            ],
            [
                1745,
                "        private readonly Ref<Scope> _resolutionScope;"
            ],
            [
                1911,
                "                    var scope = Reuse.Of(request, registry);"
            ],
            [
                1918,
                "                        var factoryDelegate = expression.CompileToDelegate();"
            ],
            [
                1951,
                "                var scope = Reuse.Of(request, registry);"
            ],
            [
                1986,
                "        protected Expression GetReusedItemExpression(Request request, Scope scope, Expression expression)"
            ],
            [
                1989,
                "                : request.ResolutionState.GetItemExpression(scope, typeof(Scope));"
            ],
            [
                1991,
                "            var getScopedItemMethod = typeof(Scope).GetMethod(\"GetOrAdd\").MakeGenericMethod(expression.Type);"
            ],
            [
                2352,
                "                    var scope = Reuse.Of(request, registry);"
            ],
            [
                2372,
                "                    expression = GetReusedItemExpression(request, Reuse.Of(request, registry), expression);"
            ],
            [
                2414,
                "    public sealed class Scope : IDisposable"
            ],
            [
                2456,
                "        Scope Of(Request request, IRegistry registry);"
            ],
            [
                2461,
                "        public Scope Of(Request request, IRegistry registry)"
            ],
            [
                2469,
                "        public Scope Of(Request request, IRegistry registry)"
            ],
            [
                2477,
                "        public Scope Of(Request request, IRegistry registry)"
            ],
            [
                2491,
                "    //public sealed class SingletonReuse : IReuse"
            ],
            [
                2492,
                "    //{"
            ],
            [
                2493,
                "    //    public Expression Of(Request request, IRegistry registry, int factoryID, Expression factoryExpr)"
            ],
            [
                2494,
                "    //    {"
            ],
            [
                2495,
                "    //        // Create lazy singleton if we have Func somewhere in dependency chain."
            ],
            [
                2496,
                "    //        var parent = request.Parent;"
            ],
            [
                2497,
                "    //        if (parent != null && parent.Enumerate().Any(OpenGenericsSupport.IsFunc))"
            ],
            [
                2498,
                "    //        {"
            ],
            [
                2499,
                "    //            var singletonScopeExpr = request.ResolutionState.GetItemExpression(registry.SingletonScope);"
            ],
            [
                2500,
                "    //            return Reuse.GetScopedServiceExpression(singletonScopeExpr, factoryID, factoryExpr);"
            ],
            [
                2501,
                "    //        }"
            ],
            [
                2502,
                ""
            ],
            [
                2503,
                "    //        // Create singleton object now and put it into store."
            ],
            [
                2504,
                "    //        var singleton = registry.SingletonScope.GetOrAdd(factoryID,"
            ],
            [
                2505,
                "    //            () => factoryExpr.CompileToDelegate().Invoke(request.ResolutionState));"
            ],
            [
                2506,
                ""
            ],
            [
                2507,
                "    //        return request.ResolutionState.GetItemExpression(singleton, factoryExpr.Type);"
            ],
            [
                2508,
                "    //    }"
            ],
            [
                2509,
                "    //}"
            ],
            [
                2510,
                ""
            ],
            [
                2511,
                "    //public sealed class CurrentScopeReuse : IReuse"
            ],
            [
                2512,
                "    //{"
            ],
            [
                2513,
                "    //    public Expression Of(Request request, IRegistry registry, int factoryID, Expression factoryExpr)"
            ],
            [
                2514,
                "    //    {"
            ],
            [
                2515,
                "    //        return Reuse.GetScopedServiceExpression(_currentScopeExpr, factoryID, factoryExpr);"
            ],
            [
                2516,
                "    //    }"
            ],
            [
                2517,
                ""
            ],
            [
                2518,
                "    //    private static readonly Expression _currentScopeExpr ="
            ],
            [
                2519,
                "    //        Expression.PropertyOrField(ResolutionState.ParamExpr, \"CurrentScope\");"
            ],
            [
                2520,
                "    //}"
            ],
            [
                2521,
                ""
            ],
            [
                2522,
                "    //public sealed class ResolutionScopeReuse : IReuse"
            ],
            [
                2523,
                "    //{"
            ],
            [
                2524,
                "    //    public Expression Of(Request request, IRegistry registry, int factoryID, Expression factoryExpr)"
            ],
            [
                2525,
                "    //    {"
            ],
            [
                2526,
                "    //        return Reuse.GetScopedServiceExpression(_scopeExpr, factoryID, factoryExpr);"
            ],
            [
                2527,
                "    //    }"
            ],
            [
                2528,
                ""
            ],
            [
                2529,
                "    //    private readonly Expression _scopeExpr = Expression.Call("
            ],
            [
                2530,
                "    //        typeof(ResolutionState).GetMethod(\"GetResolutionScope\"),"
            ],
            [
                2531,
                "    //        ResolutionState.ParamExpr);"
            ],
            [
                2532,
                "    //}"
            ],
            [
                2533,
                ""
            ],
            [
                2560,
                "        Scope CurrentScope { get; }"
            ],
            [
                2561,
                "        Scope SingletonScope { get; }"
            ]
        ]
    },
    "num_lines_added": 46,
    "num_lines_removed": 106
}