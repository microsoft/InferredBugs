{
    "hash": "3b83ae80412bccd59dbc2c208a4e8efe6ae3419a",
    "message": "Anaylzer: 0.3.1 bug fixes and small FunctionAnalyzer refactor (#1494)",
    "file_num_lines": 203,
    "diff_parsed": {
        "added": [
            [
                70,
                "                SyntaxNodeUtils.TryGetITypeSymbol(semanticModel, returnTypeNode, out ITypeSymbol returnType);"
            ],
            [
                71,
                ""
            ],
            [
                74,
                "                SyntaxNodeUtils.TryGetITypeSymbol(semanticModel, inputNode, out ITypeSymbol inputType);"
            ],
            [
                75,
                ""
            ],
            [
                80,
                "                    InputNode = inputNode,"
            ],
            [
                81,
                "                    InputType = inputType,"
            ],
            [
                83,
                "                    ReturnType = returnType,"
            ],
            [
                153,
                "            var semanticModel = context.SemanticModel;"
            ],
            [
                157,
                "                if (!SyntaxNodeUtils.TryGetFunctionName(semanticModel, attribute, out string functionName))"
            ],
            [
                169,
                "                SyntaxNodeUtils.TryGetITypeSymbol(semanticModel, returnTypeNode, out ITypeSymbol returnType);"
            ],
            [
                170,
                ""
            ],
            [
                173,
                "                TryGetDefinitionInputType(semanticModel, parameterNode, out ITypeSymbol inputType);"
            ],
            [
                174,
                ""
            ],
            [
                179,
                "                    InputType = inputType,"
            ],
            [
                180,
                "                    ReturnTypeNode = returnTypeNode,"
            ],
            [
                181,
                "                    ReturnType = returnType"
            ],
            [
                185,
                ""
            ],
            [
                186,
                "        private static bool TryGetDefinitionInputType(SemanticModel semanticModel, SyntaxNode parameterNode, out ITypeSymbol definitionInputType)"
            ],
            [
                187,
                "        {"
            ],
            [
                188,
                "            if (SyntaxNodeUtils.TryGetITypeSymbol(semanticModel, parameterNode, out definitionInputType))"
            ],
            [
                189,
                "            {"
            ],
            [
                190,
                "                if (SyntaxNodeUtils.IsDurableActivityContext(definitionInputType))"
            ],
            [
                191,
                "                {"
            ],
            [
                192,
                "                    return TryGetInputTypeFromContext(semanticModel, parameterNode, out definitionInputType);"
            ],
            [
                193,
                "                }"
            ],
            [
                194,
                ""
            ],
            [
                195,
                "                return true;"
            ],
            [
                196,
                "            }"
            ],
            [
                197,
                ""
            ],
            [
                198,
                "            definitionInputType = null;"
            ],
            [
                199,
                "            return false;"
            ],
            [
                200,
                "        }"
            ],
            [
                201,
                ""
            ],
            [
                202,
                "        private static bool TryGetInputTypeFromContext(SemanticModel semanticModel, SyntaxNode node, out ITypeSymbol definitionInputType)"
            ],
            [
                203,
                "        {"
            ],
            [
                204,
                "            if (TryGetDurableActivityContextExpression(semanticModel, node, out SyntaxNode durableContextExpression))"
            ],
            [
                205,
                "            {"
            ],
            [
                206,
                "                if (SyntaxNodeUtils.TryGetTypeArgumentIdentifier((MemberAccessExpressionSyntax)durableContextExpression, out SyntaxNode typeArgument))"
            ],
            [
                207,
                "                {"
            ],
            [
                208,
                "                    return SyntaxNodeUtils.TryGetITypeSymbol(semanticModel, typeArgument, out definitionInputType);"
            ],
            [
                209,
                "                }"
            ],
            [
                210,
                "            }"
            ],
            [
                211,
                ""
            ],
            [
                212,
                "            definitionInputType = null;"
            ],
            [
                213,
                "            return false;"
            ],
            [
                214,
                "        }"
            ],
            [
                215,
                ""
            ],
            [
                216,
                "        private static bool TryGetDurableActivityContextExpression(SemanticModel semanticModel, SyntaxNode node, out SyntaxNode durableContextExpression)"
            ],
            [
                217,
                "        {"
            ],
            [
                218,
                "            if (SyntaxNodeUtils.TryGetMethodDeclaration(node, out SyntaxNode methodDeclaration))"
            ],
            [
                219,
                "            {"
            ],
            [
                220,
                "                var memberAccessExpressionList = methodDeclaration.DescendantNodes().Where(x => x.IsKind(SyntaxKind.SimpleMemberAccessExpression));"
            ],
            [
                221,
                "                foreach (var memberAccessExpression in memberAccessExpressionList)"
            ],
            [
                222,
                "                {"
            ],
            [
                223,
                "                    var identifierName = memberAccessExpression.ChildNodes().FirstOrDefault(x => x.IsKind(SyntaxKind.IdentifierName));"
            ],
            [
                224,
                "                    if (identifierName != null)"
            ],
            [
                225,
                "                    {"
            ],
            [
                226,
                "                        if (SyntaxNodeUtils.TryGetITypeSymbol(semanticModel, identifierName, out ITypeSymbol typeSymbol))"
            ],
            [
                227,
                "                        {"
            ],
            [
                228,
                "                            if (SyntaxNodeUtils.IsDurableActivityContext(typeSymbol))"
            ],
            [
                229,
                "                            {"
            ],
            [
                230,
                "                                durableContextExpression = memberAccessExpression;"
            ],
            [
                231,
                "                                return true;"
            ],
            [
                232,
                "                            }"
            ],
            [
                233,
                "                        }"
            ],
            [
                234,
                "                    }"
            ],
            [
                235,
                "                }"
            ],
            [
                236,
                "            }"
            ],
            [
                237,
                ""
            ],
            [
                238,
                "            durableContextExpression = null;"
            ],
            [
                239,
                "            return false;"
            ],
            [
                240,
                "        }"
            ]
        ],
        "deleted": [
            [
                76,
                "                    ArgumentNode = inputNode,"
            ],
            [
                150,
                "                if (!SyntaxNodeUtils.TryGetFunctionName(context.SemanticModel, attribute, out string functionName))"
            ],
            [
                168,
                "                    ReturnTypeNode = returnTypeNode"
            ]
        ]
    },
    "num_lines_added": 72,
    "num_lines_removed": 3
}