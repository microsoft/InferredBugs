{
    "hash": "ab405ae52286a53eaf16aa3266ae70159d484ed3",
    "message": "Hopefully fix crashes caused by JPS Pathfinding",
    "file_num_lines": 898,
    "diff_parsed": {
        "added": [
            [
                364,
                "            if (iParam.EndNode != null)"
            ],
            [
                366,
                "                int tEndX = iParam.EndNode.x;"
            ],
            [
                367,
                "                int tEndY = iParam.EndNode.y;"
            ],
            [
                368,
                "                GridPos tNeighbor;"
            ],
            [
                369,
                "                GridPos tJumpPoint;"
            ],
            [
                370,
                "                Node tJumpNode;"
            ],
            [
                371,
                ""
            ],
            [
                372,
                "                List<GridPos> tNeighbors = findNeighbors(iParam, iNode);"
            ],
            [
                373,
                "                for (int i = 0; i < tNeighbors.Count; i++)"
            ],
            [
                375,
                "                    tNeighbor = tNeighbors[i];"
            ],
            [
                376,
                "                    if (iParam.UseRecursive)"
            ],
            [
                377,
                "                        tJumpPoint = jump(iParam, tNeighbor.x, tNeighbor.y, iNode.x, iNode.y);"
            ],
            [
                378,
                "                    else"
            ],
            [
                379,
                "                        tJumpPoint = jumpLoop(iParam, tNeighbor.x, tNeighbor.y, iNode.x, iNode.y);"
            ],
            [
                380,
                "                    if (tJumpPoint != null)"
            ],
            [
                382,
                "                        tJumpNode = iParam.SearchGrid.GetNodeAt(tJumpPoint.x, tJumpPoint.y);"
            ],
            [
                383,
                "                        if (tJumpNode == null)"
            ],
            [
                384,
                "                        {"
            ],
            [
                385,
                "                            if (iParam.EndNode.x == tJumpPoint.x && iParam.EndNode.y == tJumpPoint.y)"
            ],
            [
                386,
                "                                tJumpNode = iParam.SearchGrid.GetNodeAt(tJumpPoint);"
            ],
            [
                387,
                "                        }"
            ],
            [
                388,
                "                        if (tJumpNode.isClosed)"
            ],
            [
                389,
                "                        {"
            ],
            [
                390,
                "                            continue;"
            ],
            [
                391,
                "                        }"
            ],
            [
                392,
                "                        // include distance, as parent may not be immediately adjacent:"
            ],
            [
                393,
                "                        float tCurNodeToJumpNodeLen = tHeuristic(Math.Abs(tJumpPoint.x - iNode.x), Math.Abs(tJumpPoint.y - iNode.y));"
            ],
            [
                394,
                "                        float tStartToJumpNodeLen = iNode.startToCurNodeLen + tCurNodeToJumpNodeLen; // next `startToCurNodeLen` value"
            ],
            [
                396,
                "                        if (!tJumpNode.isOpened || tStartToJumpNodeLen < tJumpNode.startToCurNodeLen)"
            ],
            [
                398,
                "                            tJumpNode.startToCurNodeLen = tStartToJumpNodeLen;"
            ],
            [
                399,
                "                            tJumpNode.heuristicCurNodeToEndLen = (tJumpNode.heuristicCurNodeToEndLen == null ? tHeuristic(Math.Abs(tJumpPoint.x - tEndX), Math.Abs(tJumpPoint.y - tEndY)) : tJumpNode.heuristicCurNodeToEndLen);"
            ],
            [
                400,
                "                            tJumpNode.heuristicStartToEndLen = tJumpNode.startToCurNodeLen + tJumpNode.heuristicCurNodeToEndLen.Value;"
            ],
            [
                401,
                "                            tJumpNode.parent = iNode;"
            ],
            [
                402,
                ""
            ],
            [
                403,
                "                            if (!tJumpNode.isOpened)"
            ],
            [
                404,
                "                            {"
            ],
            [
                405,
                "                                tOpenList.Add(tJumpNode);"
            ],
            [
                406,
                "                                tJumpNode.isOpened = true;"
            ],
            [
                407,
                "                            }"
            ]
        ],
        "deleted": [
            [
                364,
                "            int tEndX = iParam.EndNode.x;"
            ],
            [
                365,
                "            int tEndY = iParam.EndNode.y;"
            ],
            [
                366,
                "            GridPos tNeighbor;"
            ],
            [
                367,
                "            GridPos tJumpPoint;"
            ],
            [
                368,
                "            Node tJumpNode;"
            ],
            [
                369,
                ""
            ],
            [
                370,
                "            List<GridPos> tNeighbors = findNeighbors(iParam, iNode);"
            ],
            [
                371,
                "            for (int i = 0; i < tNeighbors.Count; i++)"
            ],
            [
                373,
                "                tNeighbor = tNeighbors[i];"
            ],
            [
                374,
                "                if (iParam.UseRecursive)"
            ],
            [
                375,
                "                    tJumpPoint = jump(iParam, tNeighbor.x, tNeighbor.y, iNode.x, iNode.y);"
            ],
            [
                376,
                "                else"
            ],
            [
                377,
                "                    tJumpPoint = jumpLoop(iParam, tNeighbor.x, tNeighbor.y, iNode.x, iNode.y);"
            ],
            [
                378,
                "                if (tJumpPoint != null)"
            ],
            [
                380,
                "                    tJumpNode = iParam.SearchGrid.GetNodeAt(tJumpPoint.x, tJumpPoint.y);"
            ],
            [
                381,
                "                    if (tJumpNode == null)"
            ],
            [
                382,
                "                    {"
            ],
            [
                383,
                "                        if (iParam.EndNode.x == tJumpPoint.x && iParam.EndNode.y == tJumpPoint.y)"
            ],
            [
                384,
                "                            tJumpNode = iParam.SearchGrid.GetNodeAt(tJumpPoint);"
            ],
            [
                385,
                "                    }"
            ],
            [
                386,
                "                    if (tJumpNode.isClosed)"
            ],
            [
                387,
                "                    {"
            ],
            [
                388,
                "                        continue;"
            ],
            [
                389,
                "                    }"
            ],
            [
                390,
                "                    // include distance, as parent may not be immediately adjacent:"
            ],
            [
                391,
                "                    float tCurNodeToJumpNodeLen = tHeuristic(Math.Abs(tJumpPoint.x - iNode.x), Math.Abs(tJumpPoint.y - iNode.y));"
            ],
            [
                392,
                "                    float tStartToJumpNodeLen = iNode.startToCurNodeLen + tCurNodeToJumpNodeLen; // next `startToCurNodeLen` value"
            ],
            [
                393,
                ""
            ],
            [
                394,
                "                    if (!tJumpNode.isOpened || tStartToJumpNodeLen < tJumpNode.startToCurNodeLen)"
            ],
            [
                396,
                "                        tJumpNode.startToCurNodeLen = tStartToJumpNodeLen;"
            ],
            [
                397,
                "                        tJumpNode.heuristicCurNodeToEndLen = (tJumpNode.heuristicCurNodeToEndLen == null ? tHeuristic(Math.Abs(tJumpPoint.x - tEndX), Math.Abs(tJumpPoint.y - tEndY)) : tJumpNode.heuristicCurNodeToEndLen);"
            ],
            [
                398,
                "                        tJumpNode.heuristicStartToEndLen = tJumpNode.startToCurNodeLen + tJumpNode.heuristicCurNodeToEndLen.Value;"
            ],
            [
                399,
                "                        tJumpNode.parent = iNode;"
            ],
            [
                401,
                "                        if (!tJumpNode.isOpened)"
            ],
            [
                403,
                "                            tOpenList.Add(tJumpNode);"
            ],
            [
                404,
                "                            tJumpNode.isOpened = true;"
            ]
        ]
    },
    "num_lines_added": 39,
    "num_lines_removed": 36
}