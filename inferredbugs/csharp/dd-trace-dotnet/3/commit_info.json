{
    "hash": "4d7cbd6710bf6a66bbae4c7005b153cfd2f97f90",
    "message": "Optimize IsIntegrationEnabled (#1016)\n\nIndex integrations by id instead of name for faster lookup time.",
    "file_num_lines": 106,
    "diff_parsed": {
        "added": [
            [
                56,
                "            using (var automaticScope = ScopeFactory.CreateOutboundHttpScope(tracer, method, new Uri(uri), new IntegrationInfo((int)IntegrationIds.HttpMessageHandler), out _))"
            ],
            [
                83,
                "            using (var automaticScope = ScopeFactory.CreateOutboundHttpScope(tracer, method, new Uri(uri), new IntegrationInfo((int)IntegrationIds.HttpMessageHandler), out var tags))"
            ],
            [
                91,
                "        [InlineData((int)IntegrationIds.HttpMessageHandler, (int)IntegrationIds.HttpMessageHandler)] // This scenario may occur on any .NET runtime with nested HttpMessageHandler's and HttpSocketHandler's"
            ],
            [
                92,
                "        [InlineData((int)IntegrationIds.WebRequest, (int)IntegrationIds.HttpMessageHandler)] // This scenario may occur on .NET Core where the underlying transport for WebRequest is HttpMessageHandler"
            ],
            [
                93,
                "        public void CreateOutboundHttpScope_AlwaysCreatesOneAutomaticInstrumentationScope(int integration1, int integration2)"
            ],
            [
                111,
                "                using (var automaticScope1 = ScopeFactory.CreateOutboundHttpScope(tracer, method, new Uri(url), new IntegrationInfo(integration1), out _))"
            ],
            [
                113,
                "                    using (var automaticScope2 = ScopeFactory.CreateOutboundHttpScope(tracer, method, new Uri(url), new IntegrationInfo(integration2), out _))"
            ]
        ],
        "deleted": [
            [
                56,
                "            const string integrationName = \"HttpMessageHandler\";"
            ],
            [
                57,
                ""
            ],
            [
                58,
                "            using (var automaticScope = ScopeFactory.CreateOutboundHttpScope(tracer, method, new Uri(uri), integrationName, out _))"
            ],
            [
                84,
                "            const string integrationName = \"HttpMessageHandler\";"
            ],
            [
                86,
                "            using (var automaticScope = ScopeFactory.CreateOutboundHttpScope(tracer, method, new Uri(uri), integrationName, out var tags))"
            ],
            [
                94,
                "        [InlineData(\"HttpMessageHandler\", \"HttpMessageHandler\")] // This scenario may occur on any .NET runtime with nested HttpMessageHandler's and HttpSocketHandler's"
            ],
            [
                95,
                "        [InlineData(\"WebRequest\", \"HttpMessageHandler\")] // This scenario may occur on .NET Core where the underlying transport for WebRequest is HttpMessageHandler"
            ],
            [
                96,
                "        public void CreateOutboundHttpScope_AlwaysCreatesOneAutomaticInstrumentationScope(string integrationName1, string integrationName2)"
            ],
            [
                114,
                "                using (var automaticScope1 = ScopeFactory.CreateOutboundHttpScope(tracer, method, new Uri(url), integrationName1, out _))"
            ],
            [
                116,
                "                    using (var automaticScope2 = ScopeFactory.CreateOutboundHttpScope(tracer, method, new Uri(url), integrationName2, out _))"
            ]
        ]
    },
    "num_lines_added": 7,
    "num_lines_removed": 10
}