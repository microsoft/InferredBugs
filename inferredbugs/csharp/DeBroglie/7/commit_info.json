{
    "hash": "6b7cb92d8409d06f09f652714894d560365908f0",
    "message": "Still tweaking SeparationConstraint",
    "file_num_lines": 97,
    "diff_parsed": {
        "added": [
            [
                59,
                "        }"
            ],
            [
                60,
                ""
            ],
            [
                61,
                ""
            ],
            [
                62,
                "        [Test]"
            ],
            [
                63,
                "        public void TestLargeSeparationConstraint()"
            ],
            [
                64,
                "        {"
            ],
            [
                65,
                "            var model = new AdjacentModel(DirectionSet.Cartesian2d);"
            ],
            [
                66,
                "            var tile1 = new Tile(1);"
            ],
            [
                67,
                "            var tile2 = new Tile(2);"
            ],
            [
                68,
                "            var tiles = new[] { tile1, tile2 };"
            ],
            [
                69,
                "            model.AddAdjacency(tiles, tiles, Direction.XPlus);"
            ],
            [
                70,
                "            model.AddAdjacency(tiles, tiles, Direction.YPlus);"
            ],
            [
                71,
                "            model.SetUniformFrequency();"
            ],
            [
                72,
                ""
            ],
            [
                73,
                "            var separationConstraint = new SeparationConstraint"
            ],
            [
                74,
                "            {"
            ],
            [
                75,
                "                Tiles = new[] { tile1 }.ToHashSet(),"
            ],
            [
                76,
                "                MinDistance = 10,"
            ],
            [
                77,
                "            };"
            ],
            [
                79,
                "            var topology = new GridTopology(100, 100, false);"
            ],
            [
                80,
                ""
            ],
            [
                81,
                "            var options = new TilePropagatorOptions"
            ],
            [
                82,
                "            {"
            ],
            [
                83,
                "                Constraints = new ITileConstraint[] { separationConstraint },"
            ],
            [
                84,
                "                BackTrackDepth = -1,"
            ],
            [
                85,
                "            };"
            ],
            [
                86,
                "            var propagator = new TilePropagator(model, topology, options);"
            ],
            [
                88,
                "            propagator.Run();"
            ],
            [
                89,
                ""
            ],
            [
                90,
                "            Assert.AreEqual(Resolution.Decided, propagator.Status);"
            ],
            [
                91,
                ""
            ],
            [
                92,
                "            var r = propagator.ToArray();"
            ],
            [
                93,
                ""
            ],
            [
                94,
                "            for(var x=0;x<100;x++)"
            ],
            [
                95,
                "            {"
            ],
            [
                96,
                "                for(var y =0;y<100;y++)"
            ],
            [
                97,
                "                {"
            ],
            [
                98,
                "                    if (r.Get(x, y) != tile1)"
            ],
            [
                99,
                "                        continue;"
            ],
            [
                100,
                "                    for(var dx = -1;dx<=1;dx+=2)"
            ],
            [
                101,
                "                    {"
            ],
            [
                102,
                "                        for (var dy = -1; dy <= 1; dy += 2)"
            ],
            [
                103,
                "                        {"
            ],
            [
                104,
                "                            var x2 = x + dx;"
            ],
            [
                105,
                "                            var y2 = y + dy;"
            ],
            [
                106,
                "                            if(x2 >= 0 && x2 < 100 && y2 >= 0 && y2 < 100)"
            ],
            [
                107,
                "                            {"
            ],
            [
                108,
                "                                Assert.AreNotEqual(r.Get(x2, y2), tile1);"
            ],
            [
                109,
                "                            }"
            ],
            [
                110,
                "                        }"
            ],
            [
                111,
                "                    }"
            ],
            [
                112,
                "                }"
            ],
            [
                113,
                "            }"
            ]
        ],
        "deleted": []
    },
    "num_lines_added": 53,
    "num_lines_removed": 0
}