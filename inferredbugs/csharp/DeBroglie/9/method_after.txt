        [Test]
        [TestCaseSource(nameof(Algorithms))]
        public void TestChessboard(ModelConstraintAlgorithm algorithm)
        {
            var model = new PatternModel
            {
                Frequencies = new double[] { 1, 1 },
                Propagator = new int[][][]
                {
                    new int[][]{ new int[] { 1 }, new int[] { 1 }, new int[] { 1 }, new int[] { 1 }, },
                    new int[][]{ new int[] { 0 }, new int[] { 0 }, new int[] { 0 }, new int[] { 0 }, },
                }
            };
            var width = 10;
            var height = 10;
            var topology = new GridTopology(width, height, true);
            var options = new WavePropagatorOptions { ModelConstraintAlgorithm = algorithm };
            var propagator = new WavePropagator(model, topology, options);
            var status = propagator.Run();
            Assert.AreEqual(Resolution.Decided, status);
            var a = propagator.ToTopoArray().ToArray2d();
            var topLeft = a[0, 0];
            for (var x = 0; x < width; x++)
            {
                for (var y = 0; y < height; y++)
                {
                    Assert.IsTrue((a[x, y] == topLeft) ^ (x % 2 == 0) ^ (y % 2 == 0));
                }
            }

            // Should be impossible with an odd sized region
            topology = new GridTopology(width + 1, height + 1, true);
            propagator = new WavePropagator(model, topology, options);
            status = propagator.Run();
            Assert.AreEqual(Resolution.Contradiction, status);

            // Should be possible with an odd sized region, if we have the right mask
            var mask = new bool[(width + 1) * (height + 1)];
            for (var x = 0; x < width; x++)
            {
                for (var y = 0; y < height; y++)
                {
                    mask[x + y * (width + 1)] = true;
                }
            }
            topology = new GridTopology(width + 1, height + 1, true).WithMask(mask);
            propagator = new WavePropagator(model, topology, options);
            status = propagator.Run();
            Assert.AreEqual(Resolution.Decided, status);

        }