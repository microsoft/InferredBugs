        [Test]
        [TestCaseSource(nameof(Algorithms))]
        public void TestChessboard3d(ModelConstraintAlgorithm algorithm)
        {
            var model = new PatternModel
            {
                Frequencies = new double[] { 1, 1 },
                Propagator = new int[][][]
                {
                    new int[][]{ new int[] { 1 }, new int[] { 1 }, new int[] { 1 }, new int[] { 1 }, new int[] { 1 }, new int[] { 1 }, },
                    new int[][]{ new int[] { 0 }, new int[] { 0 }, new int[] { 0 }, new int[] { 0 }, new int[] { 0 }, new int[] { 0 }, },
                }
            };
            var width = 4;
            var height = 4;
            var depth = 4;
            var topology = new GridTopology(width, height, depth, true);
            var propagator = new WavePropagator(model, topology, modelConstraintAlgorithm: algorithm);
            var status = propagator.Run();
            Assert.AreEqual(Resolution.Decided, status);
            var a = propagator.ToTopoArray();
            var topLeft = a.Get(0, 0, 0);
            for (var x = 0; x < width; x++)
            {
                for (var y = 0; y < height; y++)
                {
                    for (var z = 0; z < depth; z++)
                    {
                        Assert.IsFalse((a.Get(x, y, z) == topLeft) ^ (x % 2 == 0) ^ (y % 2 == 0) ^ (z % 2 == 0));
                    }
                }
            }

            // Should be impossible with an odd sized region
            topology = new GridTopology(width + 1, height + 1, depth + 1, true);
            propagator = new WavePropagator(model, topology, modelConstraintAlgorithm: algorithm);
            status = propagator.Run();
            Assert.AreEqual(Resolution.Contradiction, status);
        }