        public override Paging<Anime> GetList<TFilter>(IFilter<TFilter> filter)
        {
            AnimeFilter animeFilter = filter as AnimeFilter;

            var builder = Builders<Anime>.Filter;
            FilterDefinition<Anime> queryFilter = builder.Empty;

            animeFilter.ApplyBaseFilter(builder, ref queryFilter);

            if (!string.IsNullOrEmpty(animeFilter.title))
            {
                queryFilter &= builder.Regex($"titles.{animeFilter.locale}", new BsonRegularExpression($".*{animeFilter.title}.*", "i"));
            }

            if(animeFilter.anilist_id != null)
            {
                queryFilter &= builder.Eq("anilist_id", animeFilter.anilist_id);
            }

            if(animeFilter.mal_id != null)
            {
                queryFilter &= builder.Eq("mal_id", animeFilter.mal_id);
            }

            if(animeFilter.formats.Count > 0)
            {
                queryFilter &= builder.AnyIn("format", animeFilter.formats);
            }

            if(animeFilter.status != null)
            {
                queryFilter &= builder.Eq("status", animeFilter.status);
            }

            if(animeFilter.year != null)
            {
                queryFilter &= builder.Eq("season_year", animeFilter.year);
            }

            if(animeFilter.season != null)
            {
                queryFilter &= builder.Eq("season_period", animeFilter.season);
            }

            if(animeFilter.genres.Count > 0)
            {
                queryFilter &= builder.AnyIn("genres", animeFilter.genres);
            }

            if(animeFilter.nsfw == false)
            {
                queryFilter &= builder.Nin("genres", new System.Collections.Generic.List<string> { "Hentai", "Nudity", "Ecchi" });
            }

            if (!string.IsNullOrEmpty(animeFilter.locale))
            {
                queryFilter &= builder.Exists($"titles.{animeFilter.locale}");
            }

            SortDefinition<Anime> sort = animeFilter.ApplySort<Anime>(
                new System.Collections.Generic.List<string>
                {
                    "score"
                },
                new System.Collections.Generic.List<short>
                {
                    -1
                });

            return new Paging<Anime>(this.Collection, animeFilter.page, queryFilter, sort, animeFilter.per_page);
        }