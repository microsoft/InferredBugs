{
    "hash": "b6f74cf89a36ba3faefb5ec88e6bc89e00e59592",
    "message": "Add option to swap root nodes instead of complete tree rebuild.",
    "file_num_lines": 315,
    "diff_parsed": {
        "added": [
            [
                403,
                "      bool wasSwap = false;"
            ],
            [
                406,
                "        const float THRESHOLD_RETAIN_TREE = 0.70f;"
            ],
            [
                407,
                ""
            ],
            [
                408,
                "        float fracRetain = (float)newRoot.Ref.N / priorContext.Tree.Root.N;"
            ],
            [
                409,
                "        bool possiblyUseSwapRoot = priorContext.ParamsSearch.TestFlag;"
            ],
            [
                410,
                "        if (fracRetain < THRESHOLD_RETAIN_TREE || !possiblyUseSwapRoot)"
            ],
            [
                411,
                "        {"
            ],
            [
                412,
                "//Console.WriteLine(\"New root \" + fracRetain);"
            ],
            [
                413,
                "          MCTSNodeStructStorage.MakeChildNewRoot(Manager.Context.Tree, ref newRoot.Ref, newPositionAndMoves,"
            ],
            [
                414,
                "                                                 reusePositionCache, newTranspositionRoots,"
            ],
            [
                415,
                "                                                 priorContext.ParamsSearch.Execution.TranspositionMaximizeRootN);"
            ],
            [
                416,
                "        }"
            ],
            [
                417,
                "        else"
            ],
            [
                418,
                "        {"
            ],
            [
                419,
                "          wasSwap = true;"
            ],
            [
                420,
                "//Console.WriteLine(\"Swap root \" + fracRetain + \" from index \" + newRoot.Index);"
            ],
            [
                421,
                "          MCTSNodeStructStorage.DoMakeChildNewRootSwapRoot(Manager.Context.Tree, ref newRoot.Ref, newPositionAndMoves,"
            ],
            [
                422,
                "                                                           reusePositionCache, newTranspositionRoots,"
            ],
            [
                423,
                "                                                           priorContext.ParamsSearch.Execution.TranspositionMaximizeRootN);"
            ],
            [
                424,
                "        }"
            ],
            [
                425,
                ""
            ],
            [
                426,
                "// NO NEED: gets reconstructed"
            ],
            [
                427,
                "//        const bool RESET_CACHE_INDEX = true; // TODO: this is probably unneeded, remove for efficiency"
            ],
            [
                428,
                "//        Manager.Context.Tree.ClearNodeCache(RESET_CACHE_INDEX);"
            ],
            [
                431,
                "//if (wasSwap) MCTSEventSource.TestMetric1 += (float)(statsMaterialize.ElapsedTimeSecs + makeNewRootTimingStats.ElapsedTimeSecs);"
            ],
            [
                432,
                "if (this.Manager.Context.ParamsSearch.TestFlag) MCTSEventSource.TestMetric1 += (float)(statsMaterialize.ElapsedTimeSecs + makeNewRootTimingStats.ElapsedTimeSecs);"
            ],
            [
                433,
                "if (wasSwap) MCTSEventSource.TestCounter1++;"
            ]
        ],
        "deleted": [
            [
                405,
                "        MCTSNodeStructStorage.MakeChildNewRoot(Manager.Context.Tree, ref newRoot.Ref, newPositionAndMoves,"
            ],
            [
                406,
                "                                               reusePositionCache, newTranspositionRoots);"
            ]
        ]
    },
    "num_lines_added": 27,
    "num_lines_removed": 2
}