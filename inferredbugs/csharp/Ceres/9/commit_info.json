{
    "hash": "8b1fdbde87ff3de7c58109577645bb08f6b4d09f",
    "message": "Adjustments to make new root threshold, generalize PositionEvalCache.",
    "file_num_lines": 298,
    "diff_parsed": {
        "added": [
            [
                131,
                "                       PositionEvalCache positionEvalCache = null,"
            ],
            [
                182,
                "      Manager = new MCTSManager(store, reuseOtherContextForEvaluatedNodes, positionEvalCache, null,"
            ],
            [
                317,
                "        PositionEvalCache positionEvalCache = null;"
            ],
            [
                318,
                ""
            ],
            [
                329,
                "#if NOT"
            ],
            [
                330,
                "          // Although it works, there actually seems no benefit to this idea."
            ],
            [
                331,
                "          // The time spent on tree rebuild is proportional to benefit (nodes extracted)"
            ],
            [
                332,
                "          // so it's always better to directly rebuild tree."
            ],
            [
                333,
                ""
            ],
            [
                334,
                "          if ( newRoot != null &&"
            ],
            [
                335,
                "               priorContext.ParamsSearch.TestFlag &&"
            ],
            [
                336,
                "               priorContext.ParamsSearch.TreeReuseEnabled) // ????????????"
            ],
            [
                337,
                "          {"
            ],
            [
                338,
                "//            using (new TimingBlock(\"ExtractCacheNodesInSubtree\"))"
            ],
            [
                339,
                "            {"
            ],
            [
                340,
                "              // TODO: One idea is to not create a separate data structure for this cache."
            ],
            [
                341,
                "              //       Instead, store these extracted values into a List and"
            ],
            [
                342,
                "              //       store the index of each position in the primary transposition table,"
            ],
            [
                343,
                "              //       but with the value equal to the negative of the index"
            ],
            [
                344,
                "              //       (so it can be distinguished from a \"normal\" entry pointing to a node in the new tree)"
            ],
            [
                345,
                ""
            ],
            [
                346,
                "              // TODO: Some of the entires in the subtree are transposition linked."
            ],
            [
                347,
                "              //       Currently ExtractCacheNodesInSubtree isn't smart enough to recover them."
            ],
            [
                348,
                "              positionEvalCache = MCTSNodeStructStorage.ExtractCacheNodesInSubtree(priorContext.Tree, ref newRoot.Ref);"
            ],
            [
                349,
                "              MCTSEventSource.TestMetric1 += positionEvalCache.Count;"
            ],
            [
                350,
                "//              Console.WriteLine(\"got \" + positionEvalCache.Count + \" from prior root \" + priorContext.Tree.Root.N + \" new root \" + newRoot.N);"
            ],
            [
                351,
                "//              positionEvalCache = null;"
            ],
            [
                352,
                ""
            ],
            [
                353,
                "            }"
            ],
            [
                354,
                "          }"
            ],
            [
                355,
                "#endif"
            ],
            [
                356,
                ""
            ],
            [
                365,
                "                 startTime, gameMoveHistory, progressCallback, positionEvalCache, possiblyUsePositionCache, isFirstMoveOfGame);"
            ],
            [
                389,
                "        reusePositionCache = new PositionEvalCache(false, 0);"
            ],
            [
                405,
                "        MCTSNodeStructStorage.MakeChildNewRoot(Manager.Context.Tree, ref newRoot.Ref, newPositionAndMoves,"
            ]
        ],
        "deleted": [
            [
                181,
                "      Manager = new MCTSManager(store, reuseOtherContextForEvaluatedNodes, null, null,"
            ],
            [
                324,
                ""
            ],
            [
                335,
                "                 startTime, gameMoveHistory, progressCallback, possiblyUsePositionCache, isFirstMoveOfGame);"
            ],
            [
                359,
                "        reusePositionCache = new PositionEvalCache(0);"
            ],
            [
                375,
                "        MCTSNodeStructStorage.MakeChildNewRoot(Manager.Context.Tree, Manager.Context.ParamsSelect.PolicySoftmax, ref newRoot.Ref, newPositionAndMoves,"
            ]
        ]
    },
    "num_lines_added": 35,
    "num_lines_removed": 5
}