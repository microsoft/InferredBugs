    private void SearchContinueRetainTree(MCTSIterator reuseOtherContextForEvaluatedNodes, PositionWithHistory newPositionAndMoves,
                                          List<GameMoveStat> gameMoveHistory, bool verbose, DateTime startTime,
                                          MCTSManager.MCTSProgressCallback progressCallback, bool isFirstMoveOfGame,
                                          MCTSIterator priorContext, MCTSNodeStore store, int numNodesInitial, MCTSNode newRoot,
                                          SearchLimit searchLimitTargetAdjusted, bool possiblyUsePositionCache,
                                          ManagerTreeReuse.Method reuseMethod,
                                          bool moveImmediateIfOnlyOneMove, List<MGMove> searchMovesTablebaseRestricted)
    {
      IMCTSNodeCache reuseNodeCache = Manager.Context.Tree.NodeCache;

      // Now rewrite the tree nodes and children "in situ"
      PositionEvalCache reusePositionCache = null;
      if (Manager.Context.ParamsSearch.TreeReuseRetainedPositionCacheEnabled
       && reuseMethod != ManagerTreeReuse.Method.KeepStoreSwapRoot) // swap root already keeps all nodes accessible
      {
        reusePositionCache = new PositionEvalCache();
      }

      // We will either create a new transposition table (if tree rebuild) 
      // or modify existing one (if swap root).
      TranspositionRootsDict newTranspositionRoots = null;

      // TODO: Consider sometimes or always skip rebuild via MakeChildNewRoot,
      //       instead just set a new root (move it into place as first node).
      //       Perhaps rebuild only if the MCTSNodeStore would become excessively large.
      LastMakeNewRootTimingStats = new TimingStats();
      using (new TimingBlock(LastMakeNewRootTimingStats, TimingBlock.LoggingType.None))
      {
        //        const float THRESHOLD_RETAIN_TREE = 0.70f;

        //        float fracRetain = (float)newRoot.Ref.N / priorContext.Tree.Root.N;
        if (reuseMethod == ManagerTreeReuse.Method.UnchangedStore)
        {
          // Root not changing. Reuse existing store and transposition roots. No need to clear node cache.
          newTranspositionRoots = Manager.Context.Tree.TranspositionRoots;
        }
        else if (reuseMethod == ManagerTreeReuse.Method.KeepStoreSwapRoot
         && priorContext.ParamsSearch.TreeReuseSwapRootEnabled)
        {
          // For efficiency, keep the entries in the node cache
          // so they may be reused in next search.
          if (!MCTSParamsFixed.NEW_ROOT_SWAP_RETAIN_NODE_CACHE)
          {
            Manager.Context.Tree.ClearNodeCache(false);
          }
#if NOT
          ///////////////////////////////////////////////////////
          var parent = newRoot.Parent;
          MGPosition newRootPos = newRoot.Annotation.PosMG;

          Console.WriteLine("\r\nREACHABILITY ANALYSIS " + parent.Annotation.Pos.FEN + " " + newRoot.StructRef.PriorMove + " "  + newRootPos.ToPosition.FEN);
          MarkUnreachable(newRootPos, newRoot.Parent.Parent, "parent_parent");
          MarkUnreachable(newRootPos, newRoot.Parent, "parent");
          Console.WriteLine("----------------------------");
#endif

#if NOT
          foreach (var child in parent.ChildrenSorted((MCTSNode v)=>0))
          {
            //if (child != newRoot)
            {
              bool reachable = MGPositionReachability.IsProbablyReachable(newRootPos, child.Annotation.PosMG);
              Console.WriteLine(reachable + " " + child);
              if (!reachable)
              {
//                Console.WriteLine(newRootPos.ToPosition.FEN);
//                Console.WriteLine(child.Annotation.PosMG.ToPosition.FEN);
                System.Diagnostics.Debug.Assert(true);
              }
            }
          }
#endif
          ///////////////////////////////////////////////////////

          newTranspositionRoots = Manager.Context.Tree.TranspositionRoots;
          MCTSNodeStructStorage.DoMakeChildNewRootSwapRoot(Manager.Context.Tree, ref newRoot.StructRef, newPositionAndMoves,
                                                           reusePositionCache, newTranspositionRoots,
                                                           priorContext.ParamsSearch.Execution.TranspositionMaximizeRootN,
                                                           MCTSParamsFixed.NEW_ROOT_SWAP_RETAIN_NODE_CACHE);

#if NOT
          int fail = 0;
            int noFail = 0;
            using (new TimingBlock("Scan reachability " + Manager.Context.Tree.Store.RootNode.N + " " + newRoot.N))
            {
              using (new SearchContextExecutionBlock(Manager.Context))
              {
              MCTSNode rootNode = Manager.Context.Tree.GetNode(Manager.Context.Tree.Store.RootNode.Index);
                MGPosition newRootPos = rootNode.Annotation.PosMG;

                rootNode.StructRef.TraverseSequential(Manager.Context.Tree.Store, (ref MCTSNodeStruct nodeRef, MCTSNodeStructIndex index) =>
                {
                  Manager.Context.Tree.GetNode(index).Annotate();
                  MGPosition scanPos = Manager.Context.Tree.GetNode(index).Annotation.PosMG;
                  if (!MGPositionReachability.IsProbablyReachable(newRootPos, scanPos))
                  {
                    if (!nodeRef.IsOldGeneration)
                    {
                      Console.WriteLine(newRootPos.ToPosition.FEN);
                      Console.WriteLine(scanPos.ToPosition.FEN);
                      //throw new Exception("wrongtobe");
                    }
                    fail++;
                  }
                  else
                  {
                    noFail++;
                  }
                  return true;
                }
              );

              }
            }
            Console.WriteLine((100.0f * ((float)noFail / (noFail + fail))) + " Reachability: fail: " + fail + " ok:" + noFail);
#endif
        }
        else
        {
          // TODO: We could add logic (similar to swap root case above)
          //       so the node cache would not be flushed, instead
          //       the node cache information would be updated (e.g. the field with Index).
          //       However this might be slightly involved, and performance gain would probably be modest.
          Manager.Context.Tree.ClearNodeCache(false);

          // Create a new dictionary to recieve the new transposition roots
          if (priorContext.Tree.TranspositionRoots != null)
          {
            newTranspositionRoots = new TranspositionRootsDict(newRoot.N);
          }

          MCTSNodeStructStorage.MakeChildNewRoot(Manager.Context.Tree, ref newRoot.StructRef, newPositionAndMoves,
                                                 reusePositionCache, newTranspositionRoots,
                                                 priorContext.ParamsSearch.Execution.TranspositionMaximizeRootN);
          // Reload new root since now moved.
          newRoot = Manager.Context.Tree.Root;
        }
      }

      MCTSManager.TotalTimeSecondsInMakeNewRoot += (float)LastMakeNewRootTimingStats.ElapsedTimeSecs;
      
      CeresEnvironment.LogInfo("MCTS", "MakeChildNewRoot", $"Select {newRoot.N:N0} from {numNodesInitial:N0} "
                              + $"in {(int)(LastMakeNewRootTimingStats.ElapsedTimeSecs / 1000.0)}ms");

      // Construct a new search manager reusing this modified store and modified transposition roots.
      Manager = new MCTSManager(this, store, reuseOtherContextForEvaluatedNodes, reusePositionCache,
                                reuseNodeCache, newTranspositionRoots,
                                priorContext.NNEvaluators, priorContext.ParamsSearch, priorContext.ParamsSelect,
                                searchLimitTargetAdjusted, Manager.LimitManager,
                                startTime, gameMoveHistory, isFirstMoveOfGame: isFirstMoveOfGame, 
                                priorContext.Manager.ForceNoTablebaseTerminals, searchMovesTablebaseRestricted);
      Manager.Context.ContemptManager = priorContext.ContemptManager;

      Manager.Context.Tree.NodeCache.SetContext(Manager.Context);

      // NOTE: disabled, this happens in practive very rearely (and the revert code is not yet fully working)
      //FixupDrawsInvalidatedByTreeReuse();

      using (new TimingBlock(TimingInfo))
      {
        BestMove = MCTSManager.DoSearch(Manager, verbose, progressCallback,
                                        possiblyUsePositionCache, moveImmediateIfOnlyOneMove);
      }
    }